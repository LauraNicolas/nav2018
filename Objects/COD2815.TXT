OBJECT Codeunit 2815 Native - Coupons
{
  OBJECT-PROPERTIES
  {
    Date=06.10.17;
    Time=12:00:00;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CustomerIDNotSpecifiedErr@1002 : TextConst '@@@={Locked};ENU=You must specify a customer id to get the coupons.';
      CustomerIdDoesntMatchACustomerErr@1004 : TextConst 'ENU=The customerId you specified doesn''t match a customer.';
      CouponDoesntExistErr@1003 : TextConst '@@@="%1=claimId value;%2=graphContactId value.";ENU=The coupon with "claimId" : "%1"  doesn''t exist for this Customer.';

    PROCEDURE RenewCoupons@4(CustomerIdFilter@1004 : Text);
    VAR
      Customer@1000 : Record 18;
      Contact@1005 : Record 5050;
      GraphIntContact@1001 : Codeunit 5461;
      CouponsManagement@1003 : Codeunit 2116;
      GraphContactId@1002 : Text[250];
    BEGIN
      IF CustomerIdFilter = '' THEN
        ERROR(CustomerIDNotSpecifiedErr);

      Customer.SETRANGE(Id,CustomerIdFilter);
      IF NOT Customer.FINDFIRST THEN
        ERROR(CustomerIdDoesntMatchACustomerErr);

      GraphIntContact.FindGraphContactIdFromCustomer(GraphContactId,Customer,Contact);

      CouponsManagement.GetCouponsForGraphContactId(GraphContactId);
    END;

    PROCEDURE RemoveCouponFromOtherInvoices@7(O365CouponClaimDocLink@1000 : Record 2116);
    VAR
      O365CouponClaim@1001 : Record 2115;
      LocalO365CouponClaimDocLink@1002 : Record 2116;
      SalesHeader@1003 : Record 36;
    BEGIN
      O365CouponClaim.GET(O365CouponClaimDocLink."Claim ID",O365CouponClaimDocLink."Graph Contact ID");
      IF O365CouponClaim.Usage <> O365CouponClaim.Usage::oneTime THEN
        EXIT;

      LocalO365CouponClaimDocLink.SETRANGE("Claim ID",O365CouponClaimDocLink."Claim ID");
      LocalO365CouponClaimDocLink.SETRANGE("Graph Contact ID",O365CouponClaimDocLink."Graph Contact ID");
      IF NOT LocalO365CouponClaimDocLink.FINDSET THEN
        EXIT;
      REPEAT
        IF SalesHeader.GET(LocalO365CouponClaimDocLink."Document Type",LocalO365CouponClaimDocLink."Document No.") THEN
          SalesHeader.MODIFY(TRUE);
        LocalO365CouponClaimDocLink.DELETE;
      UNTIL LocalO365CouponClaimDocLink.NEXT = 0;
    END;

    PROCEDURE CheckThatCouponCanBeAppliedToInvoice@2(O365CouponClaimDocLink@1002 : Record 2116);
    VAR
      DummySalesHeader@1005 : Record 36;
      O365CouponClaim@1006 : Record 2115;
    BEGIN
      IF (O365CouponClaimDocLink."Document Type" <> DummySalesHeader."Document Type"::Invoice) AND
         (O365CouponClaimDocLink."Document Type" <> DummySalesHeader."Document Type"::Quote)
      THEN
        EXIT;

      IF NOT O365CouponClaim.GET(O365CouponClaimDocLink."Claim ID",O365CouponClaimDocLink."Graph Contact ID") THEN
        ERROR(STRSUBSTNO(CouponDoesntExistErr,O365CouponClaimDocLink."Claim ID",O365CouponClaimDocLink."Graph Contact ID"));
    END;

    PROCEDURE WriteCouponsJSON@3(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];Posted@1002 : Boolean) : Text;
    VAR
      NativeEDMTypes@1003 : Codeunit 2801;
    BEGIN
      IF Posted THEN
        EXIT(NativeEDMTypes.WritePostedCouponsJSON(DocumentNo));

      EXIT(NativeEDMTypes.WriteCouponsJSON(DocumentType,DocumentNo));
    END;

    BEGIN
    END.
  }
}

