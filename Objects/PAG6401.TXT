OBJECT Page 6401 Flow Selector
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Manage Flows;
    LinksAllowed=No;
    OnOpenPage=BEGIN
                 IF FlowServiceManagement.IsPPE THEN BEGIN
                   ShowErrorMessage(FlowServiceManagement.GetFlowPPEError);
                   EXIT;
                 END;

                 IsErrorMessageVisible := FALSE;
                 IF NOT TryInitialize THEN
                   ShowErrorMessage(GETLASTERRORTEXT);
                 IF NOT FlowServiceManagement.IsUserReadyForFlow THEN
                   ERROR('');
                 IsUserReadyForFlow := TRUE;
                 CurrPage.UPDATE;
               END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=FlowEntries;
                      CaptionML=ENU=Flow Entries;
                      ToolTipML=ENU=View and configure Flow entries.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Flow;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 WorkflowWebhookEntry@1000 : Record 467;
                               BEGIN
                                 WorkflowWebhookEntry.SetDefaultFilter(WorkflowWebhookEntry);
                                 PAGE.RUN(PAGE::"Workflow Webhook Entries",WorkflowWebhookEntry);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=OpenMyFlows;
                      CaptionML=ENU=Open Flow;
                      ToolTipML=ENU=View and configure Flows on the Flow website.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Flow;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 HYPERLINK(FlowServiceManagement.GetFlowManageUrl);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Flow Selector;
                ContainerType=ContentArea }

    { 3   ;1   ;Group     ;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=FlowAddin;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.FlowIntegration;PublicKeyToken=31bf3856ad364e35] }

    { 4   ;1   ;Group     ;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorMessageText;
                Editable=False;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      AzureAdMgt@1000 : Codeunit 6300;
      FlowServiceManagement@1001 : Codeunit 6400;
      IsErrorMessageVisible@1002 : Boolean;
      ErrorMessageText@1003 : Text;
      IsUserReadyForFlow@1004 : Boolean;
      AddInReady@1005 : Boolean;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      IsUserReadyForFlow := FlowServiceManagement.IsUserReadyForFlow;

      IF NOT IsUserReadyForFlow THEN BEGIN
        IF AzureAdMgt.IsSaaS THEN
          ERROR(FlowServiceManagement.GetGenericError);
        IF NOT TryAzureAdMgtGetAccessToken THEN
          ShowErrorMessage(GETLASTERRORTEXT);
        CurrPage.UPDATE;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryInitialize@2();
    BEGIN
      Initialize;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@3();
    BEGIN
      AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,TRUE);
    END;

    LOCAL PROCEDURE ShowErrorMessage@6(TextToShow@1000 : Text);
    BEGIN
      IsErrorMessageVisible := TRUE;
      IsUserReadyForFlow := FALSE;
      IF TextToShow = '' THEN
        TextToShow := FlowServiceManagement.GetGenericError;
      ErrorMessageText := TextToShow;
      CurrPage.UPDATE;
    END;

    EVENT FlowAddin@-2::ControlAddInReady@3();
    BEGIN
      CurrPage.FlowAddin.Initialize(
        FlowServiceManagement.GetFlowUrl,FlowServiceManagement.GetFlowAppID,FlowServiceManagement.GetFlowEnvironmentID,
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,FALSE),
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowGraphResourceUrl,FlowServiceManagement.GetFlowResourceName,FALSE));
      CurrPage.FlowAddin.LoadFlows;
      AddInReady := TRUE;
    END;

    EVENT FlowAddin@-2::ErrorOccurred@4(error@1001 : Text;description@1000 : Text);
    VAR
      Company@1002 : Record 2000000006;
      ActivityLog@1003 : Record 710;
    BEGIN
      Company.GET(COMPANYNAME); // Dummy record to attach to activity log
      ActivityLog.LogActivityForUser(
        Company.RECORDID,ActivityLog.Status::Failed,'Microsoft Flow',description,error,USERID);
      ShowErrorMessage(FlowServiceManagement.GetGenericError);
    END;

    EVENT FlowAddin@-2::Refresh@5();
    BEGIN
      IF AddInReady THEN
        CurrPage.FlowAddin.LoadFlows;
    END;

    BEGIN
    END.
  }
}

