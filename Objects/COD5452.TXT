OBJECT Codeunit 5452 Graph Sync. Runner
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            RunFullSync;
          END;

  }
  CODE
  {
    VAR
      GraphDataSetup@1000 : Codeunit 5455;

    [External]
    PROCEDURE IsGraphSyncEnabled@4() : Boolean;
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      IF CURRENTEXECUTIONMODE = EXECUTIONMODE::Debug THEN
        EXIT(FALSE);

      IF NOT MarketingSetup.GET THEN
        EXIT(FALSE);

      EXIT(MarketingSetup."Sync with Microsoft Graph");
    END;

    [External]
    PROCEDURE RunDeltaSync@10();
    BEGIN
      OnRunGraphDeltaSync;
    END;

    [External]
    PROCEDURE RunDeltaSyncForEntity@3(TableID@1002 : Integer);
    VAR
      IntegrationTableMapping@1000 : Record 5335;
      IntegrationMappingCode@1001 : Code[20];
    BEGIN
      IntegrationMappingCode := GraphDataSetup.GetMappingCodeForTable(TableID);
      GraphDataSetup.GetIntegrationTableMapping(IntegrationTableMapping,IntegrationMappingCode);
      IF NOT IntegrationTableMapping.IsFullSyncAllowed THEN
        EXIT;

      IntegrationTableMapping.SetFullSyncStartAndCommit;
      RunIntegrationTableSynch(IntegrationTableMapping);

      IntegrationTableMapping.GET(IntegrationTableMapping.Name);
      IntegrationTableMapping.SetFullSyncEndAndCommit;
    END;

    [External]
    PROCEDURE RunFullSync@11();
    BEGIN
      OnRunGraphFullSync;
    END;

    [External]
    PROCEDURE RunFullSyncForEntity@2(TableID@1002 : Integer);
    VAR
      IntegrationTableMapping@1000 : Record 5335;
      IntegrationMappingCode@1001 : Code[20];
    BEGIN
      IntegrationMappingCode := GraphDataSetup.GetMappingCodeForTable(TableID);
      GraphDataSetup.GetIntegrationTableMapping(IntegrationTableMapping,IntegrationMappingCode);
      IF NOT IntegrationTableMapping.IsFullSyncAllowed THEN
        EXIT;
      IntegrationTableMapping.SetFullSyncStartAndCommit;

      IntegrationTableMapping."Graph Delta Token" := '';
      IntegrationTableMapping.MODIFY(TRUE);

      CreateIntegrationRecordsForUncoupledRecords(IntegrationTableMapping."Table ID");
      RunIntegrationTableSynch(IntegrationTableMapping);

      IntegrationTableMapping.GET(IntegrationTableMapping.Name);
      IntegrationTableMapping.SetFullSyncEndAndCommit;
    END;

    [External]
    PROCEDURE RunIntegrationTableSynch@1(IntegrationTableMapping@1000 : Record 5335);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      InsertEnabled@1005 : Boolean;
      ModifyEnabled@1004 : Boolean;
      DeleteEnabled@1003 : Boolean;
      RenameEnabled@1002 : Boolean;
    BEGIN
      IntegrationManagement.GetDatabaseTableTriggerSetup(
        IntegrationTableMapping."Table ID",InsertEnabled,ModifyEnabled,DeleteEnabled,RenameEnabled);
      CODEUNIT.RUN(IntegrationTableMapping."Synch. Codeunit ID",IntegrationTableMapping);
    END;

    LOCAL PROCEDURE CreateIntegrationRecordsForUncoupledRecords@7(TableId@1000 : Integer);
    VAR
      IntegrationRecord@1002 : Record 5151;
      NavRecordRef@1001 : RecordRef;
    BEGIN
      NavRecordRef.OPEN(TableId);

      IF NavRecordRef.FINDSET THEN
        REPEAT
          CLEAR(IntegrationRecord);
          IntegrationRecord.SETRANGE("Record ID",NavRecordRef.RECORDID);
          IF IntegrationRecord.ISEMPTY THEN BEGIN
            CLEAR(IntegrationRecord);
            IntegrationRecord."Record ID" := NavRecordRef.RECORDID;
            IntegrationRecord."Table ID" := NavRecordRef.NUMBER;
            IntegrationRecord.INSERT(TRUE);
          END;
        UNTIL NavRecordRef.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnRunGraphDeltaSync@6();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRunGraphFullSync@5();
    BEGIN
    END;

    BEGIN
    END.
  }
}

