OBJECT Codeunit 5506 Graph Mgt - Sales Quote Buffer
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GraphMgtGeneralTools@1000 : Codeunit 5465;
      DocumentIDNotSpecifiedErr@1001 : TextConst '@@@={Locked};ENU=You must specify a document id to get the lines.';
      DocumentDoesNotExistErr@1002 : TextConst 'ENU=No document with the specified ID exists.';
      MultipleDocumentsFoundForIdErr@1003 : TextConst 'ENU=Multiple documents have been found for the specified criteria.';
      CannotInsertALineThatAlreadyExistsErr@1004 : TextConst 'ENU=You cannot insert a line because a line already exists.';
      CannotModifyALineThatDoesntExistErr@1005 : TextConst 'ENU=You cannot modify a line that does not exist.';

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesHeader@2(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesHeader@3(VAR Rec@1000 : Record 36;VAR xRec@1001 : Record 36;RunTrigger@1002 : Boolean);
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesHeader@5(VAR Rec@1000 : Record 36;RunTrigger@1001 : Boolean);
    VAR
      SalesQuoteEntityBuffer@1002 : Record 5505;
    BEGIN
      IF NOT CheckValidRecord(Rec) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      IF NOT SalesQuoteEntityBuffer.GET(Rec."No.") THEN
        EXIT;
      SalesQuoteEntityBuffer.DELETE;
    END;

    [EventSubscriber(Codeunit,56,OnAfterResetRecalculateInvoiceDisc)]
    LOCAL PROCEDURE OnAfterResetRecalculateInvoiceDisc@41(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF NOT CheckValidRecord(SalesHeader) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine@71(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      ModifyTotalsSalesLine(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine@72(VAR Rec@1000 : Record 37;VAR xRec@1001 : Record 37;RunTrigger@1002 : Boolean);
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      ModifyTotalsSalesLine(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesLine@73(VAR Rec@1000 : Record 37;RunTrigger@1001 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      IF NOT CheckValidLineRecord(Rec) THEN
        EXIT;

      SalesLine.SETRANGE("Document No.",Rec."Document No.");
      SalesLine.SETRANGE("Document Type",Rec."Document Type");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);

      IF SalesLine.FINDFIRST THEN BEGIN
        ModifyTotalsSalesLine(SalesLine);
        EXIT;
      END;

      SalesLine.SETRANGE("Recalculate Invoice Disc.");

      IF NOT SalesLine.FINDFIRST THEN
        BlankTotals(Rec."Document No.");
    END;

    [EventSubscriber(Codeunit,60,OnAfterCalcSalesDiscount)]
    LOCAL PROCEDURE OnAfterCalculateSalesDiscountOnSalesHeader@36(VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF NOT CheckValidRecord(SalesHeader) OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    PROCEDURE PropagateOnInsert@15(VAR SalesQuoteEntityBuffer@1000 : Record 5505;VAR TempFieldBuffer@1003 : TEMPORARY Record 8450);
    VAR
      SalesHeader@1001 : Record 36;
      TargetRecordRef@1004 : RecordRef;
      DocTypeFieldRef@1006 : FieldRef;
      NoFieldRef@1007 : FieldRef;
    BEGIN
      IF SalesQuoteEntityBuffer.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      TargetRecordRef.OPEN(DATABASE::"Sales Header");

      DocTypeFieldRef := TargetRecordRef.FIELD(SalesHeader.FIELDNO("Document Type"));
      DocTypeFieldRef.VALUE(SalesHeader."Document Type"::Quote);

      NoFieldRef := TargetRecordRef.FIELD(SalesHeader.FIELDNO("No."));

      TransferFieldsWithValidate(TempFieldBuffer,SalesQuoteEntityBuffer,TargetRecordRef);

      TargetRecordRef.INSERT(TRUE);

      SalesQuoteEntityBuffer."No." := NoFieldRef.VALUE;
      SalesQuoteEntityBuffer.FIND;
    END;

    PROCEDURE PropagateOnModify@16(VAR SalesQuoteEntityBuffer@1000 : Record 5505;VAR TempFieldBuffer@1004 : TEMPORARY Record 8450);
    VAR
      SalesHeader@1001 : Record 36;
      TargetRecordRef@1005 : RecordRef;
      Exists@1003 : Boolean;
    BEGIN
      IF SalesQuoteEntityBuffer.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      Exists := SalesHeader.GET(SalesHeader."Document Type"::Quote,SalesQuoteEntityBuffer."No.");
      IF Exists THEN
        TargetRecordRef.GETTABLE(SalesHeader)
      ELSE
        TargetRecordRef.OPEN(DATABASE::"Sales Header");

      TransferFieldsWithValidate(TempFieldBuffer,SalesQuoteEntityBuffer,TargetRecordRef);

      IF Exists THEN
        TargetRecordRef.MODIFY(TRUE)
      ELSE
        TargetRecordRef.INSERT(TRUE);
    END;

    PROCEDURE PropagateOnDelete@17(VAR SalesQuoteEntityBuffer@1000 : Record 5505);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF SalesQuoteEntityBuffer.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT;

      SalesHeader.GET(SalesHeader."Document Type"::Quote,SalesQuoteEntityBuffer."No.");
      SalesHeader.DELETE(TRUE);
    END;

    PROCEDURE UpdateBufferTableRecords@35();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      IF SalesHeader.FINDSET THEN
        REPEAT
          InsertOrModifyFromSalesHeader(SalesHeader);
        UNTIL SalesHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertOrModifyFromSalesHeader@39(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesQuoteEntityBuffer@1002 : Record 5505;
      RecordExists@1001 : Boolean;
    BEGIN
      SalesQuoteEntityBuffer.LOCKTABLE;
      RecordExists := SalesQuoteEntityBuffer.GET(SalesHeader."No.");

      SalesQuoteEntityBuffer.TRANSFERFIELDS(SalesHeader,TRUE);
      AssignTotalsFromSalesHeader(SalesHeader,SalesQuoteEntityBuffer);
      SalesQuoteEntityBuffer.UpdateReferencedRecordIds;

      IF RecordExists THEN
        SalesQuoteEntityBuffer.MODIFY(TRUE)
      ELSE
        SalesQuoteEntityBuffer.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesHeader@58(VAR SalesHeader@1000 : Record 36;VAR SalesQuoteEntityBuffer@1001 : Record 5505);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");

      IF NOT SalesLine.FINDFIRST THEN BEGIN
        BlankTotals(SalesLine."Document No.");
        EXIT;
      END;

      AssignTotalsFromSalesLine(SalesLine,SalesQuoteEntityBuffer,SalesHeader);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesLine@76(VAR SalesLine@1000 : Record 37;VAR SalesQuoteEntityBuffer@1001 : Record 5505;VAR SalesHeader@1002 : Record 36);
    VAR
      TotalSalesLine@1003 : Record 37;
      DocumentTotals@1004 : Codeunit 57;
      VATAmount@1005 : Decimal;
    BEGIN
      IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Sales Tax" THEN BEGIN
        SalesQuoteEntityBuffer."Discount Applied Before Tax" := TRUE;
        SalesQuoteEntityBuffer."Prices Including VAT" := FALSE;
      END ELSE
        SalesQuoteEntityBuffer."Discount Applied Before Tax" := NOT SalesHeader."Prices Including VAT";

      DocumentTotals.CalculateSalesTotals(TotalSalesLine,VATAmount,SalesLine);

      SalesQuoteEntityBuffer."Invoice Discount Amount" := TotalSalesLine."Inv. Discount Amount";
      SalesQuoteEntityBuffer.Amount := TotalSalesLine.Amount;
      SalesQuoteEntityBuffer."Total Tax Amount" := VATAmount;
      SalesQuoteEntityBuffer."Amount Including VAT" := TotalSalesLine."Amount Including VAT";
    END;

    LOCAL PROCEDURE BlankTotals@25(DocumentNo@1000 : Code[20]);
    VAR
      SalesQuoteEntityBuffer@1002 : Record 5505;
    BEGIN
      IF NOT SalesQuoteEntityBuffer.GET(DocumentNo) THEN
        EXIT;

      SalesQuoteEntityBuffer."Invoice Discount Amount" := 0;
      SalesQuoteEntityBuffer."Total Tax Amount" := 0;

      SalesQuoteEntityBuffer.Amount := 0;
      SalesQuoteEntityBuffer."Amount Including VAT" := 0;
      SalesQuoteEntityBuffer.MODIFY;
    END;

    LOCAL PROCEDURE CheckValidRecord@8(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.ISTEMPORARY THEN
        EXIT(FALSE);

      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Quote THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckValidLineRecord@21(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF SalesLine.ISTEMPORARY OR (NOT GraphMgtGeneralTools.IsApiEnabled) THEN
        EXIT(FALSE);

      IF SalesLine."Document Type" <> SalesLine."Document Type"::Quote THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ModifyTotalsSalesLine@12(VAR SalesLine@1000 : Record 37);
    VAR
      SalesQuoteEntityBuffer@1001 : Record 5505;
      SalesHeader@1003 : Record 36;
    BEGIN
      IF NOT SalesQuoteEntityBuffer.GET(SalesLine."Document No.") THEN
        EXIT;

      IF NOT SalesLine."Recalculate Invoice Disc." THEN
        EXIT;

      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      AssignTotalsFromSalesLine(SalesLine,SalesQuoteEntityBuffer,SalesHeader);
      SalesQuoteEntityBuffer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TransferSalesInvoiceLineAggregateToSalesLine@37(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR SalesLine@1001 : Record 37;VAR TempFieldBuffer@1002 : TEMPORARY Record 8450);
    VAR
      SalesLineRecordRef@1003 : RecordRef;
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Quote;
      SalesLineRecordRef.GETTABLE(SalesLine);

      TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceLineAggregate,SalesLineRecordRef);

      SalesLineRecordRef.SETTABLE(SalesLine);
    END;

    LOCAL PROCEDURE TransferFieldsWithValidate@32(VAR TempFieldBuffer@1000 : TEMPORARY Record 8450;RecordVariant@1001 : Variant;VAR TargetTableRecRef@1002 : RecordRef);
    VAR
      DataTypeManagement@1006 : Codeunit 701;
      SourceRecRef@1004 : RecordRef;
      TargetFieldRef@1005 : FieldRef;
      SourceFieldRef@1003 : FieldRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,SourceRecRef);

      TempFieldBuffer.RESET;
      IF NOT TempFieldBuffer.FINDFIRST THEN
        EXIT;

      REPEAT
        IF TargetTableRecRef.FIELDEXIST(TempFieldBuffer."Field ID") THEN BEGIN
          SourceFieldRef := SourceRecRef.FIELD(TempFieldBuffer."Field ID");
          TargetFieldRef := TargetTableRecRef.FIELD(TempFieldBuffer."Field ID");
          TargetFieldRef.VALIDATE(SourceFieldRef.VALUE);
        END;
      UNTIL TempFieldBuffer.NEXT = 0;
    END;

    PROCEDURE RedistributeInvoiceDiscounts@31(VAR SalesQuoteEntityBuffer@1002 : Record 5505);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Quote);
      SalesLine.SETRANGE("Document No.",SalesQuoteEntityBuffer."No.");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",TRUE);
      IF SalesLine.FINDFIRST THEN
        CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",SalesLine);

      SalesQuoteEntityBuffer.FIND;
    END;

    PROCEDURE LoadLines@1(VAR SalesInvoiceLineAggregate@1000 : Record 5476;DocumentIdFilter@1007 : Text);
    VAR
      SalesQuoteEntityBuffer@1004 : Record 5505;
    BEGIN
      IF DocumentIdFilter = '' THEN
        ERROR(DocumentIDNotSpecifiedErr);

      SalesQuoteEntityBuffer.SETFILTER(Id,DocumentIdFilter);
      IF NOT SalesQuoteEntityBuffer.FINDFIRST THEN
        EXIT;

      LoadSalesLines(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer);
    END;

    LOCAL PROCEDURE LoadSalesLines@38(VAR SalesInvoiceLineAggregate@1002 : Record 5476;VAR SalesQuoteEntityBuffer@1000 : Record 5505);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Quote);
      SalesLine.SETRANGE("Document No.",SalesQuoteEntityBuffer."No.");

      IF SalesLine.FINDSET(FALSE,FALSE) THEN
        REPEAT
          TransferFromSalesLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer,SalesLine);
          SalesInvoiceLineAggregate.INSERT(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferFromSalesLine@40(VAR SalesInvoiceLineAggregate@1002 : Record 5476;VAR SalesQuoteEntityBuffer@1000 : Record 5505;VAR SalesLine@1001 : Record 37);
    BEGIN
      CLEAR(SalesInvoiceLineAggregate);
      SalesInvoiceLineAggregate.TRANSFERFIELDS(SalesLine,TRUE);
      SalesInvoiceLineAggregate."Document Id" := SalesQuoteEntityBuffer.Id;
      IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Sales Tax" THEN
        SalesInvoiceLineAggregate."Tax Code" := SalesLine."Tax Group Code"
      ELSE
        SalesInvoiceLineAggregate."Tax Code" := SalesLine."VAT Identifier";

      SalesInvoiceLineAggregate."VAT %" := SalesLine."VAT %";
      SalesInvoiceLineAggregate."Tax Amount" := SalesLine."Amount Including VAT" - SalesLine."VAT Base Amount";
      SalesInvoiceLineAggregate.UpdateReferencedRecordIds;
      UpdateLineAmountsFromSalesLine(SalesInvoiceLineAggregate,SalesLine);
    END;

    PROCEDURE PropagateInsertLine@7(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR TempFieldBuffer@1005 : TEMPORARY Record 8450);
    VAR
      SalesQuoteEntityBuffer@1001 : Record 5505;
      SalesLine@1002 : Record 37;
      LastUsedSalesLine@1004 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer);

      SalesLine."Document Type" := SalesLine."Document Type"::Quote;
      SalesLine."Document No." := SalesQuoteEntityBuffer."No.";

      IF SalesInvoiceLineAggregate."Line No." = 0 THEN BEGIN
        LastUsedSalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Quote);
        LastUsedSalesLine.SETRANGE("Document No.",SalesQuoteEntityBuffer."No.");
        IF LastUsedSalesLine.FINDLAST THEN
          SalesInvoiceLineAggregate."Line No." := LastUsedSalesLine."Line No." + 10000
        ELSE
          SalesInvoiceLineAggregate."Line No." := 10000;

        SalesLine."Line No." := SalesInvoiceLineAggregate."Line No.";
      END ELSE
        IF SalesLine.GET(SalesLine."Document Type"::Quote,SalesQuoteEntityBuffer."No.",SalesInvoiceLineAggregate."Line No.") THEN
          ERROR(CannotInsertALineThatAlreadyExistsErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);
      SalesLine.INSERT(TRUE);

      RedistributeInvoiceDiscounts(SalesQuoteEntityBuffer);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer,SalesLine);
    END;

    PROCEDURE PropagateModifyLine@24(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR TempFieldBuffer@1004 : TEMPORARY Record 8450);
    VAR
      SalesQuoteEntityBuffer@1001 : Record 5505;
      SalesLine@1002 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer);

      IF NOT SalesLine.GET(SalesLine."Document Type"::Quote,SalesQuoteEntityBuffer."No.",SalesInvoiceLineAggregate."Line No.") THEN
        ERROR(CannotModifyALineThatDoesntExistErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);

      SalesLine.MODIFY(TRUE);

      RedistributeInvoiceDiscounts(SalesQuoteEntityBuffer);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer,SalesLine);
    END;

    PROCEDURE PropagateDeleteLine@6(VAR SalesInvoiceLineAggregate@1000 : Record 5476);
    VAR
      SalesQuoteEntityBuffer@1003 : Record 5505;
      SalesLine@1002 : Record 37;
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesQuoteEntityBuffer);

      IF SalesLine.GET(SalesLine."Document Type"::Quote,SalesQuoteEntityBuffer."No.",SalesInvoiceLineAggregate."Line No.") THEN BEGIN
        SalesLine.DELETE(TRUE);
        RedistributeInvoiceDiscounts(SalesQuoteEntityBuffer);
      END;
    END;

    LOCAL PROCEDURE VerifyCRUDIsPossibleForLine@60(VAR SalesInvoiceLineAggregate@1001 : Record 5476;VAR SalesQuoteEntityBuffer@1000 : Record 5505);
    VAR
      SearchSalesQuoteEntityBuffer@1002 : Record 5505;
      DocumentIDFilter@1003 : Text;
    BEGIN
      IF ISNULLGUID(SalesInvoiceLineAggregate."Document Id") THEN BEGIN
        DocumentIDFilter := SalesInvoiceLineAggregate.GETFILTER("Document Id");
        IF DocumentIDFilter = '' THEN
          ERROR(DocumentIDNotSpecifiedErr);
        SalesQuoteEntityBuffer.SETFILTER(Id,DocumentIDFilter);
      END ELSE
        SalesQuoteEntityBuffer.SETRANGE(Id,SalesInvoiceLineAggregate."Document Id");

      IF NOT SalesQuoteEntityBuffer.FINDFIRST THEN
        ERROR(DocumentDoesNotExistErr);

      SearchSalesQuoteEntityBuffer.COPY(SalesQuoteEntityBuffer);
      IF SearchSalesQuoteEntityBuffer.NEXT <> 0 THEN
        ERROR(MultipleDocumentsFoundForIdErr);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromSalesLine@44(VAR SalesInvoiceLineAggregate@1000 : Record 5476;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesInvoiceLineAggregate."Line Amount Excluding Tax" := SalesLine.GetLineAmountExclVAT;
      SalesInvoiceLineAggregate."Line Amount Including Tax" := SalesLine.GetLineAmountInclVAT;
      SalesInvoiceLineAggregate."Line Tax Amount" :=
        SalesInvoiceLineAggregate."Line Amount Including Tax" - SalesInvoiceLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(SalesInvoiceLineAggregate);
    END;

    LOCAL PROCEDURE UpdateInvoiceDiscountAmount@48(VAR SalesInvoiceLineAggregate@1000 : Record 5476);
    BEGIN
      IF SalesInvoiceLineAggregate."Prices Including Tax" THEN
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" :=
          SalesInvoiceLineAggregate."Line Amount Excluding Tax" - SalesInvoiceLineAggregate.Amount
      ELSE
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" := SalesInvoiceLineAggregate."Inv. Discount Amount";
    END;

    BEGIN
    END.
  }
}

