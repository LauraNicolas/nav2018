OBJECT Codeunit 5377 Webhook Management
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE GetNotificationUrl@3() NotificationUrl : Text[250];
    BEGIN
      NotificationUrl := GETURL(CLIENTTYPE::OData);
      NotificationUrl := COPYSTR(NotificationUrl,1,STRPOS(NotificationUrl,FORMAT(CLIENTTYPE::OData)) - 1) + 'api/webhooks';
    END;

    [External]
    PROCEDURE IsCurrentClientTypeAllowed@6() : Boolean;
    BEGIN
      EXIT(NOT (CURRENTCLIENTTYPE IN [CLIENTTYPE::Management,CLIENTTYPE::NAS]));
    END;

    PROCEDURE IsSyncAllowed@5() : Boolean;
    VAR
      CompanyInformation@1003 : Record 79;
      CompanyInformationMgt@1002 : Codeunit 1306;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF NOT CompanyInformation.GET THEN
        EXIT(FALSE);

      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF CompanyInformationMgt.IsDemoCompany THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FindWebhookSubscriptionMatchingEndPoint@1(VAR WebhookSubscription@1000 : Record 2000000199;EndpointUri@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";StartIndex@1003 : Integer;PathLength@1006 : Integer) : Boolean;
    VAR
      SubscriptionEndpointUri@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      SearchSubString@1004 : Text;
      IsSameEndpoint@1002 : Boolean;
    BEGIN
      IF WebhookSubscription.FINDSET THEN
        REPEAT
          SubscriptionEndpointUri := SubscriptionEndpointUri.Uri(WebhookSubscription.Endpoint);
          IsSameEndpoint := FALSE;
          IF StartIndex <= 0 THEN
            IsSameEndpoint := (EndpointUri.ToString = SubscriptionEndpointUri.ToString)
          ELSE
            IF (SubscriptionEndpointUri.Scheme = EndpointUri.Scheme) AND
               (SubscriptionEndpointUri.Host = EndpointUri.Host)
            THEN BEGIN
              SearchSubString := COPYSTR(EndpointUri.PathAndQuery,StartIndex + PathLength);
              IF STRPOS(SubscriptionEndpointUri.PathAndQuery,SearchSubString) > 0 THEN
                IsSameEndpoint := TRUE;
            END;

          IF IsSameEndpoint AND (COMPANYNAME = WebhookSubscription."Company Name") THEN
            EXIT(TRUE);
        UNTIL WebhookSubscription.NEXT = 0;
    END;

    PROCEDURE IsValidNotificationRunAsUser@2(UserSecurityId@1001 : GUID) : Boolean;
    VAR
      User@1000 : Record 2000000120;
      EmptyGUID@1002 : GUID;
    BEGIN
      IF UserSecurityId = EmptyGUID THEN
        EXIT(FALSE);

      IF NOT User.GET(UserSecurityId) THEN
        EXIT(FALSE);

      EXIT(User."License Type" <> User."License Type"::"External User");
    END;

    PROCEDURE FindWebhookSubscriptionSafe@4(VAR WebhookSubscription@1000 : Record 2000000199;SubscriptionID@1002 : Text[150];EntityListEndpoint@1001 : Text) : Boolean;
    VAR
      EndpointUri@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      EndpointUri := EndpointUri.Uri(EntityListEndpoint);

      // Graph seems to Escape the Uri string
      IF WebhookSubscription.GET(SubscriptionID,EndpointUri.EscapeUriString(EntityListEndpoint)) THEN
        EXIT(TRUE);

      EXIT(WebhookSubscription.GET(SubscriptionID,EntityListEndpoint));
    END;

    BEGIN
    END.
  }
}

