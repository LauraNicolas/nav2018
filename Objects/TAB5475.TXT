OBJECT Table 5475 Sales Invoice Entity Aggregate
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    OnRename=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    CaptionML=ENU=Sales Invoice Entity Aggregate;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;InitValue=Invoice;
                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                UpdateCustomerId;
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 44  ;   ;Order No.           ;Code20        ;OnValidate=BEGIN
                                                                UpdateOrderId;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Order No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=CONST(Invoice),
                                                                                         Document No.=FIELD(No.),
                                                                                         Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 60  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;CaptionML=ENU=Amount Including VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer.Name;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Sell-to Customer Name }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 1304;   ;Cust. Ledger Entry No.;Integer     ;TableRelation="Cust. Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Cust. Ledger Entry No. }
    { 1305;   ;Invoice Discount Amount;Decimal    ;CaptionML=ENU=Invoice Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Sell-to Contact No. }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 9600;   ;Total Tax Amount    ;Decimal       ;CaptionML=ENU=Total Tax Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 9601;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=[@@@={Locked};
                                                                    ENU=" ,Draft,In Review,Open,Paid,Canceled,Corrective"];
                                                   OptionString=[ ,Draft,In Review,Open,Paid,Canceled,Corrective] }
    { 9602;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 9624;   ;Discount Applied Before Tax;Boolean;CaptionML=ENU=Discount Applied Before Tax }
    { 9630;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time }
    { 9631;   ;Customer Id         ;GUID          ;TableRelation=Customer.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCustomerNo;
                                                              END;

                                                   CaptionML=ENU=Customer Id }
    { 9632;   ;Order Id            ;GUID          ;TableRelation=Customer.Id;
                                                   OnValidate=BEGIN
                                                                UpdateOrderNo;
                                                              END;

                                                   CaptionML=ENU=Order Id }
    { 9633;   ;Contact Graph Id    ;Text250       ;CaptionML=ENU=Contact Graph Id }
  }
  KEYS
  {
    {    ;No.,Posted                               }
    {    ;Id                                      ;Clustered=Yes }
    {    ;Cust. Ledger Entry No.                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    LOCAL PROCEDURE UpdateCustomerNo@1();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF ISNULLGUID("Customer Id") THEN
        EXIT;

      Customer.SETRANGE(Id,"Customer Id");
      IF NOT Customer.FINDFIRST THEN
        EXIT;

      "Sell-to Customer No." := Customer."No.";
    END;

    LOCAL PROCEDURE UpdateCustomerId@2();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF "Sell-to Customer No." = '' THEN BEGIN
        CLEAR("Customer Id");
        EXIT;
      END;

      IF NOT Customer.GET("Sell-to Customer No.") THEN
        EXIT;

      "Customer Id" := Customer.Id;
    END;

    LOCAL PROCEDURE UpdateOrderNo@4();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      IF ISNULLGUID("Order Id") THEN
        EXIT;

      SalesHeader.SETRANGE(Id,"Order Id");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      IF NOT SalesHeader.FINDFIRST THEN
        EXIT;

      "Order No." := SalesHeader."No.";
    END;

    LOCAL PROCEDURE UpdateOrderId@3();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,"Order No.") THEN
        EXIT;

      "Order Id" := SalesHeader.Id;
    END;

    PROCEDURE UpdateReferencedRecordIds@5();
    BEGIN
      UpdateCustomerId;

      IF ("Order No." <> '') AND ISNULLGUID("Order Id") THEN
        UpdateOrderId;

      UpdateGraphContactId;
    END;

    PROCEDURE UpdateGraphContactId@6();
    VAR
      contactFound@1003 : Boolean;
    BEGIN
      IF "Sell-to Contact No." = '' THEN
        contactFound := UpdateContactIdFromCustomer
      ELSE
        contactFound := UpdateContactIdFromSellToContactNo;

      IF NOT contactFound THEN
        CLEAR("Contact Graph Id");
    END;

    LOCAL PROCEDURE UpdateContactIdFromCustomer@7() : Boolean;
    VAR
      Customer@1001 : Record 18;
      Contact@1002 : Record 5050;
      GraphIntContact@1000 : Codeunit 5461;
      GraphID@1003 : Text[250];
    BEGIN
      IF ISNULLGUID("Customer Id") THEN
        EXIT(FALSE);

      Customer.SETRANGE(Id,"Customer Id");
      IF NOT Customer.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT GraphIntContact.FindGraphContactIdFromCustomer(GraphID,Customer,Contact) THEN
        EXIT(FALSE);

      "Contact Graph Id" := GraphID;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateContactIdFromSellToContactNo@8() : Boolean;
    VAR
      Contact@1002 : Record 5050;
      GraphIntegrationRecord@1001 : Record 5451;
      GraphID@1000 : Text[250];
    BEGIN
      IF NOT Contact.GET("Sell-to Contact No.") THEN
        EXIT(FALSE);

      IF NOT GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphID) THEN
        EXIT(FALSE);

      "Contact Graph Id" := GraphID;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

