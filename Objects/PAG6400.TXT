OBJECT Page 6400 Flow Template Selector
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Select an Existing Flow Template;
    OnOpenPage=BEGIN
                 IF FlowServiceManagement.IsPPE THEN BEGIN
                   ShowErrorMessage(FlowServiceManagement.GetFlowPPEError);
                   EXIT;
                 END;

                 IsErrorMessageVisible := FALSE;
                 IF NOT TryInitialize THEN
                   ShowErrorMessage(GETLASTERRORTEXT);
                 IF NOT FlowServiceManagement.IsUserReadyForFlow THEN
                   ERROR('');
                 IsUserReadyForFlow := TRUE;
                 IF SearchText = '' THEN
                   SearchText := DefaultSearchTxt;
                 SetSearchText(SearchText);
                 CurrPage.UPDATE;
               END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=FlowIntegration;
                ContainerType=ContentArea }

    { 7   ;1   ;Group     ;
                GroupType=GridLayout }

    { 8   ;2   ;Group     ;
                GroupType=Group }

    { 4   ;3   ;Group     ;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 3   ;4   ;Field     ;
                Name=SearchFilter;
                CaptionML=ENU=Search Filter;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SearchText;
                OnLookup=BEGIN
                           IF AddInReady THEN
                             CurrPage.FlowAddin.LoadTemplates(
                               SearchText,FlowServiceManagement.GetFlowTemplatePageSize,FlowServiceManagement.GetFlowTemplateDestinationNew);
                         END;
                          }

    { 2   ;4   ;Field     ;
                Name=FlowAddin;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.FlowIntegration;PublicKeyToken=31bf3856ad364e35] }

    { 5   ;3   ;Group     ;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 6   ;4   ;Field     ;
                Name=ErrorMessageText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorMessageText;
                Editable=False;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      AzureAdMgt@1001 : Codeunit 6300;
      FlowServiceManagement@1002 : Codeunit 6400;
      SearchText@1000 : Text;
      ErrorMessageText@1003 : Text;
      IsErrorMessageVisible@1004 : Boolean;
      IsUserReadyForFlow@1005 : Boolean;
      AddInReady@1006 : Boolean;
      DefaultSearchTxt@1007 : TextConst 'ENU=Dynamics 365 For Financials';

    PROCEDURE SetSearchText@3(Search@1000 : Text);
    BEGIN
      IF Search = '' THEN
        Search := DefaultSearchTxt;
      SearchText := Search;
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      IsUserReadyForFlow := FlowServiceManagement.IsUserReadyForFlow;

      IF NOT IsUserReadyForFlow THEN BEGIN
        IF AzureAdMgt.IsSaaS THEN
          ERROR(FlowServiceManagement.GetGenericError);
        IF NOT TryAzureAdMgtGetAccessToken THEN
          ShowErrorMessage(GETLASTERRORTEXT);
        CurrPage.UPDATE;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryInitialize@2();
    BEGIN
      Initialize;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@4();
    BEGIN
      AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,TRUE);
    END;

    LOCAL PROCEDURE ShowErrorMessage@5(TextToShow@1000 : Text);
    BEGIN
      IsErrorMessageVisible := TRUE;
      IsUserReadyForFlow := FALSE;
      IF TextToShow = '' THEN
        TextToShow := FlowServiceManagement.GetGenericError;
      ErrorMessageText := TextToShow;
      CurrPage.UPDATE;
    END;

    [External]
    PROCEDURE GetSearchText@6() : Text;
    BEGIN
      EXIT(DefaultSearchTxt);
    END;

    EVENT FlowAddin@-2::ControlAddInReady@3();
    BEGIN
      CurrPage.FlowAddin.Initialize(
        FlowServiceManagement.GetFlowUrl,FlowServiceManagement.GetFlowAppID,FlowServiceManagement.GetFlowEnvironmentID,
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,FALSE),
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowGraphResourceUrl,FlowServiceManagement.GetFlowResourceName,FALSE));
      CurrPage.FlowAddin.LoadTemplates(
        SearchText,FlowServiceManagement.GetFlowTemplatePageSize,FlowServiceManagement.GetFlowTemplateDestinationNew);
      AddInReady := TRUE;
    END;

    EVENT FlowAddin@-2::ErrorOccurred@4(error@1001 : Text;description@1000 : Text);
    VAR
      Company@1002 : Record 2000000006;
      ActivityLog@1003 : Record 710;
    BEGIN
      Company.GET(COMPANYNAME); // Dummy record to attach to activity log
      ActivityLog.LogActivityForUser(
        Company.RECORDID,ActivityLog.Status::Failed,'Microsoft Flow',description,error,USERID);
      ShowErrorMessage(FlowServiceManagement.GetGenericError);
    END;

    EVENT FlowAddin@-2::Refresh@5();
    BEGIN
      IF AddInReady THEN
        CurrPage.FlowAddin.LoadTemplates(
          SearchText,FlowServiceManagement.GetFlowTemplatePageSize,FlowServiceManagement.GetFlowTemplateDestinationNew);
    END;

    BEGIN
    END.
  }
}

