OBJECT Page 5479 Customer Payments Entity
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=customerPayments];
    SourceTable=Table81;
    DelayedInsert=Yes;
    PageType=API;
    OnOpenPage=VAR
                 APIEntitiesSetup@1000 : Record 5466;
               BEGIN
                 GraphMgtCustomerPayments.SetCustomerPaymentsFilters(Rec);

                 APIEntitiesSetup.SafeGet;
                 LibraryAPIGeneralJournal.EnsureGenJnlBatchExists(
                   GraphMgtCustomerPayments.GetDefaultTemplateName,APIEntitiesSetup."Customer Payments Batch Name");
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;

                  "Document Type" := "Document Type"::Payment;
                  "Account Type" := "Account Type"::Customer;
                  "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                END;

    OnInsertRecord=VAR
                     TempGenJournalLine@1002 : TEMPORARY Record 81;
                   BEGIN
                     ProcessAppliesToInvoiceNumberAndId;

                     TempGenJournalLine.RESET;
                     TempGenJournalLine.COPY(Rec);

                     CLEAR(Rec);
                     GraphMgtCustomerPayments.SetCustomerPaymentsBatch(Rec);
                     LibraryAPIGeneralJournal.InitializeLine(
                       Rec,TempGenJournalLine."Line No.",TempGenJournalLine."Document No.",TempGenJournalLine."External Document No.");
                     TransferGeneratedFieldsFromInitializeLine(TempGenJournalLine);

                     GraphMgtCustomerPayments.SetCustomerPaymentsValues(Rec,TempGenJournalLine);

                     SetCalculatedFields;
                   END;

    OnModifyRecord=VAR
                     GenJournalLine@1000 : Record 81;
                   BEGIN
                     ProcessAppliesToInvoiceNumberAndId;

                     GenJournalLine.SETRANGE(Id,Id);
                     GenJournalLine.FINDFIRST;

                     IF "Line No." = GenJournalLine."Line No." THEN
                       MODIFY(TRUE)
                     ELSE BEGIN
                       GenJournalLine.TRANSFERFIELDS(Rec,FALSE);
                       GenJournalLine.RENAME("Journal Template Name","Journal Batch Name","Line No.");
                       TRANSFERFIELDS(GenJournalLine,TRUE);
                     END;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=<Control1>;
                CaptionML=ENU=<Control1>;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=<Control2>;
                CaptionML=ENU=<Control2>;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                Name=lineNumber;
                CaptionML=[@@@={Locked};
                           ENU=LineNumber];
                ApplicationArea=#All;
                SourceExpr="Line No." }

    { 16  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=CustomerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             IF NOT Customer.FINDFIRST THEN
                               ERROR(CustomerIdDoesNotMatchACustomerErr);

                             "Account No." := Customer."No.";
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=CustomerNumber];
                ApplicationArea=#All;
                SourceExpr="Account No.";
                OnValidate=BEGIN
                             IF Customer."No." <> '' THEN BEGIN
                               IF Customer."No." <> "Account No." THEN
                                 ERROR(CustomerValuesDontMatchErr);
                               EXIT;
                             END;

                             IF NOT Customer.GET("Account No.") THEN
                               ERROR(CustomerNumberDoesNotMatchACustomerErr);

                             "Customer Id" := Customer.Id;
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=ContactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             CustomerOfContact@1001 : Record 18;
                             ContactRecord@1002 : Record 5050;
                             GraphIntContact@1000 : Codeunit 5461;
                           BEGIN
                             IF "Contact Graph Id" = '' THEN BEGIN
                               IF Customer."No." = '' THEN
                                 VALIDATE("Account No.",'');
                               EXIT;
                             END;

                             IF NOT GraphIntContact.FindCustomerFromGraphContact("Contact Graph Id",CustomerOfContact,ContactRecord) THEN
                               EXIT;

                             IF Customer."No." <> '' THEN BEGIN
                               IF CustomerOfContact."No." <> Customer."No." THEN
                                 ERROR(CustomerValuesDontMatchErr);
                               EXIT;
                             END;

                             VALIDATE("Customer Id",CustomerOfContact.Id);
                             VALIDATE("Account No.",CustomerOfContact."No.");
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=postingDate;
                CaptionML=[@@@={Locked};
                           ENU=PostingDate];
                ApplicationArea=#All;
                SourceExpr="Posting Date" }

    { 12  ;2   ;Field     ;
                Name=documentNumber;
                CaptionML=[@@@={Locked};
                           ENU=DocumentNumber];
                ApplicationArea=#All;
                SourceExpr="Document No." }

    { 3   ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=ExternalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No." }

    { 5   ;2   ;Field     ;
                Name=amount;
                CaptionML=[@@@={Locked};
                           ENU=Amount];
                ApplicationArea=#All;
                SourceExpr=Amount }

    { 11  ;2   ;Field     ;
                Name=appliesToInvoiceId;
                CaptionML=[@@@={Locked};
                           ENU=AppliesToInvoiceId];
                ApplicationArea=#All;
                SourceExpr=AppliesToInvoiceIdText;
                OnValidate=BEGIN
                             "Applies-to Invoice Id" := AppliesToInvoiceIdText;

                             SalesInvoiceHeader.RESET;
                             SalesInvoiceHeader.SETRANGE(Id,AppliesToInvoiceIdText);
                             IF NOT SalesInvoiceHeader.FINDFIRST THEN
                               ERROR(AppliesToInvoiceIdDoesNotMatchAnInvoiceErr);

                             AppliesToInvoiceNumberText := SalesInvoiceHeader."No.";

                             IF "Account No." = '' THEN BEGIN
                               IF SalesInvoiceHeader."Bill-to Customer No." <> '' THEN
                                 "Account No." := SalesInvoiceHeader."Bill-to Customer No."
                               ELSE
                                 "Account No." := SalesInvoiceHeader."Sell-to Customer No.";
                             END;
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=appliesToInvoiceNumber;
                CaptionML=[@@@={Locked};
                           ENU=AppliesToInvoiceNumber];
                ApplicationArea=#All;
                SourceExpr=AppliesToInvoiceNumberText;
                OnValidate=VAR
                             BlankGUID@1000 : GUID;
                           BEGIN
                             "Applies-to Doc. No." := AppliesToInvoiceNumberText;

                             IF SalesInvoiceHeader."No." <> '' THEN BEGIN
                               IF SalesInvoiceHeader."No." <> AppliesToInvoiceNumberText THEN
                                 ERROR(AppliesToDocValuesDontMatchErr);
                               EXIT;
                             END;

                             IF SalesInvoiceHeader.GET(AppliesToInvoiceNumberText) THEN BEGIN
                               AppliesToInvoiceIdText := SalesInvoiceHeader.Id;
                               IF "Account No." = '' THEN BEGIN
                                 IF SalesInvoiceHeader."Bill-to Customer No." <> '' THEN
                                   "Account No." := SalesInvoiceHeader."Bill-to Customer No."
                                 ELSE
                                   "Account No." := SalesInvoiceHeader."Sell-to Customer No.";
                               END;
                             END ELSE
                               AppliesToInvoiceIdText := BlankGUID;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=description;
                CaptionML=[@@@={Locked};
                           ENU=Description];
                ApplicationArea=#All;
                SourceExpr=Description }

    { 13  ;2   ;Field     ;
                Name=comment;
                CaptionML=[@@@={Locked};
                           ENU=Comment];
                ApplicationArea=#All;
                SourceExpr=Comment }

    { 9   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified DateTime";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Customer@1007 : Record 18;
      SalesInvoiceHeader@1008 : Record 112;
      GraphMgtCustomerPayments@1000 : Codeunit 5479;
      LibraryAPIGeneralJournal@1001 : Codeunit 5469;
      AppliesToInvoiceNumberText@1002 : Code[20];
      AppliesToInvoiceIdText@1003 : GUID;
      CustomerValuesDontMatchErr@1005 : TextConst 'ENU=The customer values do not match to a specific Customer.';
      CustomerIdDoesNotMatchACustomerErr@1004 : TextConst 'ENU=The "customerId" does not match to a Customer.';
      CustomerNumberDoesNotMatchACustomerErr@1006 : TextConst 'ENU=The "customerNumber" does not match to a Customer.';
      AppliesToDocValuesDontMatchErr@1010 : TextConst 'ENU=The AppliesToInvoice values do not match to the same Invoice.';
      AppliesToInvoiceIdDoesNotMatchAnInvoiceErr@1009 : TextConst 'ENU=The "appliesToInvoiceId" should be the ID of an Open, Paid, Corrective, or Canceled Invoice.';

    LOCAL PROCEDURE TransferGeneratedFieldsFromInitializeLine@2(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      IF GenJournalLine."Document No." = '' THEN
        GenJournalLine."Document No." := "Document No.";
    END;

    LOCAL PROCEDURE SetCalculatedFields@6();
    BEGIN
      AppliesToInvoiceNumberText := "Applies-to Doc. No.";
      AppliesToInvoiceIdText := "Applies-to Invoice Id";
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(AppliesToInvoiceIdText);
      CLEAR(AppliesToInvoiceNumberText);
    END;

    LOCAL PROCEDURE ProcessAppliesToInvoiceNumberAndId@5();
    BEGIN
      IF AppliesToInvoiceNumberText <> '' THEN
        "Applies-to Doc. No." := AppliesToInvoiceNumberText;
      "Applies-to Invoice Id" := AppliesToInvoiceIdText;
    END;

    BEGIN
    END.
  }
}

