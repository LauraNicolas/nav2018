OBJECT Codeunit 5468 Graph Mgt - Complex Types
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CodePropertyTxt@1001 : TextConst '@@@={Locked};ENU=code';
      DescriptionPropertyTxt@1000 : TextConst '@@@={Locked};ENU=description';
      PaymentTermsTxt@1005 : TextConst '@@@={Locked};ENU=PaymentTermsType';
      PaymentTermsDescriptionTxt@1004 : TextConst 'ENU=Graph CDM - Payment Terms complex type.';
      PostalAddressTxt@1008 : TextConst '@@@={Locked};ENU=PostalAddress';
      PostalAddressDescriptionTxt@1010 : TextConst 'ENU=Graph CDM - Postal Address complex type';
      ShipmentMethodTxt@1007 : TextConst '@@@={Locked};ENU=ShipmentMethod';
      ShipmentMethodDescriptionTxt@1003 : TextConst 'ENU=Graph CDM - Shipment Method complex type.';
      PaymentMethodTxt@1006 : TextConst '@@@={Locked};ENU=PaymentMethod';
      PaymentMethodDescriptionTxt@1002 : TextConst 'ENU=Graph CDM - Payment Method complex type.';
      NullJSONTxt@1009 : TextConst '@@@={Locked};ENU=null';
      BookingsDateTxt@1016 : TextConst '@@@={Locked};ENU=BookingsDate';
      BookingsDateDescriptionTxt@1017 : TextConst 'ENU=Graph CDM - Bookings Date complex type';
      DocumentLineObjectDetailsNoTxt@1013 : TextConst '@@@={Locked};ENU=number';
      DocumentLineObjectDetailsNameTxt@1012 : TextConst '@@@={Locked};ENU=displayName';
      DocumentLineObjectDetailsDescriptionTxt@1011 : TextConst '@@@={Locked};ENU=description';
      DocumentLineObjectDetailsTxt@1014 : TextConst '@@@={Locked};ENU=documentLineObjectDetails';
      DocumentLineObjectDetailsEDMDescriptionTxt@1015 : TextConst 'ENU=Graph API - Complex type exposing details of the line object that is being sold.';

    PROCEDURE GetDocumentLineObjectDetailsEDM@9() : Text;
    VAR
      SalesInvoiceLineAggregate@1000 : Record 5476;
    BEGIN
      EXIT(
        STRSUBSTNO('<ComplexType Name="%1">',DocumentLineObjectDetailsTxt) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DocumentLineObjectDetailsNoTxt,MAXSTRLEN(SalesInvoiceLineAggregate."No.")) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DocumentLineObjectDetailsNameTxt,MAXSTRLEN(SalesInvoiceLineAggregate.Description)) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DocumentLineObjectDetailsDescriptionTxt,MAXSTRLEN(SalesInvoiceLineAggregate."Description 2")) +
        '</ComplexType>');
    END;

    PROCEDURE GetDocumentLineObjectDetailsJSON@59(No@1000 : Text;Name@1001 : Text;Description@1002 : Text) : Text;
    VAR
      JSONManagement@1003 : Codeunit 5459;
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      IF No <> '' THEN
        JSONManagement.AddJPropertyToJObject(JsonObject,DocumentLineObjectDetailsNoTxt,No);

      IF Name <> '' THEN
        JSONManagement.AddJPropertyToJObject(JsonObject,DocumentLineObjectDetailsNameTxt,Name);

      IF Description <> '' THEN
        JSONManagement.AddJPropertyToJObject(JsonObject,DocumentLineObjectDetailsDescriptionTxt,Description);

      EXIT(JSONManagement.WriteObjectToString);
    END;

    PROCEDURE ParseDocumentLineObjectDetailsFromJSON@12(JSON@1005 : Text;VAR No@1002 : Code[20];VAR Name@1001 : Text[50];VAR Description@1000 : Text[50]);
    VAR
      JSONManagement@1003 : Codeunit 5459;
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      NoTxt@1008 : Text;
      NameTxt@1007 : Text;
      DescriptionTxt@1006 : Text;
    BEGIN
      CLEAR(No);
      CLEAR(Name);
      CLEAR(Description);

      JSONManagement.InitializeObject(JSON);
      JSONManagement.GetJSONObject(JsonObject);
      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsNoTxt,NoTxt) THEN
        No := COPYSTR(NoTxt,1,20);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsNameTxt,NameTxt) THEN
        Name := COPYSTR(NameTxt,1,50);

      IF JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsDescriptionTxt,DescriptionTxt) THEN
        Description := COPYSTR(DescriptionTxt,1,50);
    END;

    PROCEDURE GetBookingsDateEDM@21() : Text;
    BEGIN
      EXIT(
        '<ComplexType Name="dateTimeTimeZone">' +
        '  <Property Name="dateTime" Type="Edm.String" Nullable="false" />' +
        '  <Property Name="timeZone" Type="Edm.String" />' +
        '</ComplexType>');
    END;

    PROCEDURE GetBookingsDateJSON@13(DateTime@1001 : DateTime;VAR JSON@1000 : Text);
    VAR
      JSONManagement@1007 : Codeunit 5459;
      JsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DateString@1002 : Text;
    BEGIN
      DateString := FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>.0000001Z');

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.AddJPropertyToJObject(JsonObject,'dateTime',DateString);
      JSONManagement.AddJPropertyToJObject(JsonObject,'timeZone','UTC');

      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE GetCodeAndDescriptionEDM@1(TypeName@1000 : Text[32];CodeField@1001 : Code[50];DescriptionField@1002 : Text[250]) : Text;
    BEGIN
      EXIT(
        STRSUBSTNO('<ComplexType Name="%1">',TypeName) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          CodePropertyTxt,MAXSTRLEN(CodeField)) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DescriptionPropertyTxt,MAXSTRLEN(DescriptionField)) +
        '</ComplexType>');
    END;

    PROCEDURE GetCodeAndDescriptionJSON@16(Code@1000 : Code[50];Description@1001 : Text[250];VAR JSON@1002 : Text);
    VAR
      JSONManagement@1004 : Codeunit 5459;
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.AddJPropertyToJObject(JsonObject,CodePropertyTxt,Code);
      JSONManagement.AddJPropertyToJObject(JsonObject,DescriptionPropertyTxt,Description);
      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE GetCodeAndDescriptionFromJSON@6(JSON@1000 : Text;VAR Code@1005 : Code[50];VAR Description@1002 : Text[250]);
    VAR
      JSONManagement@1010 : Codeunit 5459;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      JsonObject@1009 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      CodeText@1003 : Text;
    BEGIN
      IF JSON = NullJSONTxt THEN BEGIN
        CLEAR(Code);
        CLEAR(Description);
        EXIT;
      END;

      JSONManagement.InitializeObject(JSON);
      JSONManagement.GetJSONObject(JsonObject);

      GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,CodePropertyTxt,CodeText);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DescriptionPropertyTxt,Description);
      Code := COPYSTR(CodeText,1,MAXSTRLEN(Code));
    END;

    PROCEDURE GetPostalAddressEDM@3() : Text;
    VAR
      DummyCustomer@1000 : Record 18;
    BEGIN
      // Additional 2 characters representing \r\n are added between address and address 2
      EXIT(
        '<ComplexType Name="PostalAddress">' +
        STRSUBSTNO('<Property Name="street" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.Address) + MAXSTRLEN(DummyCustomer."Address 2") + 2) +
        STRSUBSTNO('<Property Name="city" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.City)) +
        STRSUBSTNO('<Property Name="state" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.County)) +
        STRSUBSTNO('<Property Name="countryLetterCode" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer."Country/Region Code")) +
        STRSUBSTNO('<Property Name="postalCode" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer."Post Code")) +
        '</ComplexType>');
    END;

    PROCEDURE GetUnitOfMeasureJSON@10(UnitOfMeasureCode@1000 : Code[20]) : Text;
    VAR
      UnitOfMeasure@1001 : Record 204;
      JSONManagement@1002 : Codeunit 5459;
      GraphCollectionMgtItem@1004 : Codeunit 5470;
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF UnitOfMeasureCode = '' THEN
        EXIT('');

      IF NOT UnitOfMeasure.GET(UnitOfMeasureCode) THEN
        EXIT('');

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      // TODO: Refactor from item
      JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeUnitCode,UnitOfMeasure.Code);
      IF UnitOfMeasure.Description <> '' THEN
        JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeUnitName,UnitOfMeasure.Description);

      IF UnitOfMeasure.Symbol <> '' THEN
        JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeSymbol,UnitOfMeasure.Symbol);

      EXIT(JSONManagement.WriteObjectToString);
    END;

    PROCEDURE ApplyPostalAddressFromJSON@15(JSON@1000 : Text;VAR EntityRecRef@1012 : RecordRef;Line1FieldNo@1001 : Integer;Line2FieldNo@1002 : Integer;CityFieldNo@1003 : Integer;StateFieldNo@1004 : Integer;CountryCodeFieldNo@1005 : Integer;PostCodeFieldNo@1006 : Integer);
    VAR
      GraphCollectionMgtContact@1010 : Codeunit 5458;
      GraphMgtGeneralTools@1009 : Codeunit 5465;
      JSONManagement@1008 : Codeunit 5459;
      JsonObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempStreet@1011 : Text;
      Line1@1014 : Text[50];
      Line2@1015 : Text[50];
      City@1016 : Text;
      State@1017 : Text;
      CountryCode@1018 : Text;
      PostCode@1019 : Text;
    BEGIN
      IF NullJSONTxt <> JSON THEN BEGIN
        JSONManagement.InitializeObject(JSON);
        JSONManagement.GetJSONObject(JsonObject);

        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'street',TempStreet);
        GraphCollectionMgtContact.SplitStreet(TempStreet,Line1,Line2);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'city',City);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'state',State);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'countryLetterCode',CountryCode);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'postalCode',PostCode);
      END;

      // Mandatory fields
      Validate(EntityRecRef,Line1FieldNo,Line1);
      Validate(EntityRecRef,Line2FieldNo,Line2);
      Validate(EntityRecRef,CityFieldNo,City);
      Validate(EntityRecRef,CountryCodeFieldNo,CountryCode);
      Validate(EntityRecRef,PostCodeFieldNo,PostCode);

      // Optional fields
      IF (NullJSONTxt = JSON) OR (State <> '') THEN
        Validate(EntityRecRef,StateFieldNo,State);
    END;

    PROCEDURE GetPostalAddressJSON@18(Line1@1001 : Text;Line2@1002 : Text;City@1003 : Text;State@1004 : Text;CountryCode@1005 : Code[10];PostCode@1006 : Code[20];VAR JSON@1000 : Text);
    VAR
      GraphCollectionMgtContact@1009 : Codeunit 5458;
      JSONManagement@1007 : Codeunit 5459;
      JsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'street',GraphCollectionMgtContact.ConcatenateStreet(Line1,Line2));
      JSONManagement.AddJPropertyToJObject(JsonObject,'city',City);
      JSONManagement.AddJPropertyToJObject(JsonObject,'state',State);
      JSONManagement.AddJPropertyToJObject(JsonObject,'countryLetterCode',CountryCode);
      JSONManagement.AddJPropertyToJObject(JsonObject,'postalCode',PostCode);

      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE InsertOrUpdateBookingsDate@22();
    VAR
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      EDM@1000 : Text;
    BEGIN
      EDM := GetBookingsDateEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(BookingsDateTxt),BookingsDateDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdateDocumentLineObjectDescription@14();
    VAR
      GraphMgtGeneralTools@1002 : Codeunit 5465;
      EDM@1001 : Text;
    BEGIN
      EDM := GetDocumentLineObjectDetailsEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        UPPERCASE(DocumentLineObjectDetailsTxt),DocumentLineObjectDetailsEDMDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdatePaymentTerms@4();
    VAR
      PaymentTerms@1000 : Record 3;
      GraphMgtGeneralTools@1002 : Codeunit 5465;
      EDM@1001 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(PaymentTermsTxt,PaymentTerms.Code,PaymentTerms.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PaymentTermsTxt),PaymentTermsDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdatePaymentMethod@7();
    VAR
      PaymentMethod@1000 : Record 289;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      EDM@1002 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(PaymentMethodTxt,PaymentMethod.Code,PaymentMethod.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PaymentMethodTxt),PaymentMethodDescriptionTxt,EDM);
    END;

    PROCEDURE InsertOrUpdatePostalAddress@11();
    VAR
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      EDM@1000 : Text;
    BEGIN
      EDM := GetPostalAddressEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PostalAddressTxt),PostalAddressDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdateShipmentMethod@5();
    VAR
      ShipmentMethod@1002 : Record 10;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
      EDM@1000 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(ShipmentMethodTxt,ShipmentMethod.Code,ShipmentMethod.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(ShipmentMethodTxt),ShipmentMethodDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE Validate@8(VAR EntityRecRef@1000 : RecordRef;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      FieldRef := EntityRecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    LOCAL PROCEDURE HandleApiSetup@2();
    BEGIN
      InsertOrUpdatePaymentMethod;
      InsertOrUpdatePaymentTerms;
      InsertOrUpdatePostalAddress;
      InsertOrUpdateShipmentMethod;
      InsertOrUpdateBookingsDate;
      InsertOrUpdateDocumentLineObjectDescription;
    END;

    PROCEDURE GetLineDescriptionComplexType@41(VAR SalesInvoiceLineAggregate@1000 : Record 5476) : Text;
    VAR
      FixedAsset@1001 : Record 5600;
      Item@1002 : Record 27;
      GLAccount@1003 : Record 15;
      Resource@1004 : Record 156;
      ItemCharge@1005 : Record 5800;
      GraphMgtComplexTypes@1009 : Codeunit 5468;
      Description@1007 : Text;
      Name@1008 : Text;
    BEGIN
      IF SalesInvoiceLineAggregate."No." = '' THEN
        EXIT;

      CASE SalesInvoiceLineAggregate.Type OF
        SalesInvoiceLineAggregate.Type::" ":
          EXIT;
        SalesInvoiceLineAggregate.Type::"Charge (Item)":
          BEGIN
            ItemCharge.GET(SalesInvoiceLineAggregate."No.");
            Name := ItemCharge.Description;
          END;
        SalesInvoiceLineAggregate.Type::Resource:
          BEGIN
            Resource.GET(SalesInvoiceLineAggregate."No.");
            Name := Resource.Name;
          END;
        SalesInvoiceLineAggregate.Type::"Fixed Asset":
          BEGIN
            FixedAsset.GET(SalesInvoiceLineAggregate."No.");
            Name := FixedAsset.Description;
            Description := FixedAsset."Description 2";
          END;
        SalesInvoiceLineAggregate.Type::"G/L Account":
          BEGIN
            GLAccount.GET(SalesInvoiceLineAggregate."No.");
            Name := GLAccount.Name;
          END;
        SalesInvoiceLineAggregate.Type::Item:
          BEGIN
            Item.GET(SalesInvoiceLineAggregate."No.");
            Name := Item.Description;
            Description := Item."Description 2";
          END;
      END;

      EXIT(GraphMgtComplexTypes.GetDocumentLineObjectDetailsJSON(SalesInvoiceLineAggregate."No.",Name,Description));
    END;

    BEGIN
    END.
  }
}

