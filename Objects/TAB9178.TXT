OBJECT Table 9178 Application Area Setup
{
  OBJECT-PROPERTIES
  {
    Date=28.05.17;
    Time=12:00:00;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Application Area Setup;
  }
  FIELDS
  {
    { 1   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Name }
    { 2   ;   ;Profile ID          ;Code30        ;TableRelation=Profile;
                                                   CaptionML=ENU=Profile ID }
    { 3   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   CaptionML=ENU=User ID }
    { 40  ;   ;Invoicing           ;Boolean       ;CaptionML=ENU=Invoicing }
    { 100 ;   ;Basic               ;Boolean       ;CaptionML=ENU=Basic }
    { 200 ;   ;Suite               ;Boolean       ;CaptionML=ENU=Suite }
    { 300 ;   ;Relationship Mgmt   ;Boolean       ;CaptionML=ENU=Relationship Mgmt }
    { 400 ;   ;Jobs                ;Boolean       ;CaptionML=ENU=Jobs }
    { 500 ;   ;Fixed Assets        ;Boolean       ;CaptionML=ENU=Fixed Assets }
    { 600 ;   ;Location            ;Boolean       ;CaptionML=ENU=Location }
    { 700 ;   ;BasicHR             ;Boolean       ;CaptionML=ENU=BasicHR }
    { 800 ;   ;Assembly            ;Boolean       ;CaptionML=ENU=Assembly }
    { 900 ;   ;Item Charges        ;Boolean       ;CaptionML=ENU=Item Charges }
  }
  KEYS
  {
    {    ;Company Name,Profile ID,User ID         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ValuesNotAllowedErr@1000 : TextConst 'ENU=" The selected experience tier is not supported.\\In the Application Area window, you define what is shown in the user interface."';

    LOCAL PROCEDURE GetApplicationAreaSetupRec@3(VAR ApplicationAreaSetup@1000 : Record 9178) : Boolean;
    VAR
      ConfPersonalizationMgt@1001 : Codeunit 9170;
    BEGIN
      IF NOT ApplicationAreaSetup.GET('','',USERID) THEN
        IF NOT ApplicationAreaSetup.GET('',ConfPersonalizationMgt.GetCurrentProfileIDNoError) THEN
          EXIT(GetApplicationAreaSetupRecFromCompany(ApplicationAreaSetup));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetApplicationAreaSetupRecFromCompany@13(VAR ApplicationAreaSetup@1000 : Record 9178) : Boolean;
    BEGIN
      IF NOT ApplicationAreaSetup.GET(COMPANYNAME) THEN
        EXIT(ApplicationAreaSetup.GET);
      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE GetApplicationAreaSetup@66() ApplicationAreas : Text;
    VAR
      ApplicationAreaSetup@1003 : Record 9178;
      RecRef@1002 : RecordRef;
      FieldRef@1005 : FieldRef;
      FieldIndex@1004 : Integer;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(ApplicationAreas);

      RecRef.GETTABLE(ApplicationAreaSetup);

      FOR FieldIndex := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(FieldIndex);
        IF NOT IsInPrimaryKey(FieldRef) THEN
          IF FieldRef.VALUE THEN
            IF ApplicationAreas = '' THEN
              ApplicationAreas := '#' + DELCHR(FieldRef.NAME)
            ELSE
              ApplicationAreas := ApplicationAreas + ',#' + DELCHR(FieldRef.NAME);
      END;
    END;

    [Internal]
    PROCEDURE GetApplicationAreaBuffer@2(VAR TempApplicationAreaBuffer@1000 : TEMPORARY Record 9179);
    VAR
      ApplicationAreaSetup@1003 : Record 9178;
      RecRef@1002 : RecordRef;
      FieldRef@1005 : FieldRef;
      FieldIndex@1004 : Integer;
    BEGIN
      GetApplicationAreaSetupRec(ApplicationAreaSetup);
      RecRef.GETTABLE(ApplicationAreaSetup);

      FOR FieldIndex := GetFirstPublicAppAreaFieldIndex TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(FieldIndex);
        IF NOT IsInPrimaryKey(FieldRef) THEN BEGIN
          TempApplicationAreaBuffer.INIT;
          TempApplicationAreaBuffer."Field No." := FieldRef.NUMBER;
          TempApplicationAreaBuffer."Application Area" := FieldRef.CAPTION;
          TempApplicationAreaBuffer.Selected := FieldRef.VALUE;
          TempApplicationAreaBuffer.INSERT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE IsFoundationEnabled@4() : Boolean;
    VAR
      ApplicationAreaSetup@1000 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Basic OR ApplicationAreaSetup.Suite);
    END;

    [External]
    PROCEDURE IsBasicOnlyEnabled@14() : Boolean;
    VAR
      ApplicationAreaSetup@1000 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Basic AND NOT ApplicationAreaSetup.Suite);
    END;

    [External]
    PROCEDURE IsAdvanced@6() : Boolean;
    BEGIN
      EXIT(NOT IsFoundationEnabled);
    END;

    [External]
    PROCEDURE IsFixedAssetEnabled@22() : Boolean;
    VAR
      ApplicationAreaSetup@1000 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup."Fixed Assets");
    END;

    [External]
    PROCEDURE IsJobsEnabled@15() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Jobs);
    END;

    [External]
    PROCEDURE IsBasicHREnabled@19() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.BasicHR);
    END;

    [External]
    PROCEDURE IsLocationEnabled@18() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Location);
    END;

    [External]
    PROCEDURE IsAssemblyEnabled@27() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Assembly);
    END;

    [External]
    PROCEDURE IsItemChargesEnabled@28() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup."Item Charges");
    END;

    [External]
    PROCEDURE IsInvoicingOnlyEnabled@29() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(
        ApplicationAreaSetup.Invoicing AND
        NOT ApplicationAreaSetup.Basic AND
        NOT ApplicationAreaSetup.Suite AND
        NOT ApplicationAreaSetup."Relationship Mgmt" AND
        NOT ApplicationAreaSetup.Jobs AND
        NOT ApplicationAreaSetup."Fixed Assets" AND
        NOT ApplicationAreaSetup.Location AND
        NOT ApplicationAreaSetup.BasicHR AND
        NOT ApplicationAreaSetup.Assembly AND
        NOT ApplicationAreaSetup."Item Charges");
    END;

    [External]
    PROCEDURE IsSuiteEnabled@16() : Boolean;
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(FALSE);

      EXIT(ApplicationAreaSetup.Suite);
    END;

    [External]
    PROCEDURE IsAllDisabled@17() : Boolean;
    BEGIN
      EXIT(NOT IsAnyEnabled);
    END;

    LOCAL PROCEDURE IsAnyEnabled@21() : Boolean;
    BEGIN
      EXIT(SelectedAppAreaCount > 0);
    END;

    LOCAL PROCEDURE SelectedAppAreaCount@25() : Integer;
    VAR
      ApplicationAreaSetup@1000 : Record 9178;
      RecRef@1003 : RecordRef;
      FieldRef@1002 : FieldRef;
      FieldIndex@1001 : Integer;
      Count@1004 : Integer;
    BEGIN
      IF NOT GetApplicationAreaSetupRec(ApplicationAreaSetup) THEN
        EXIT(0);

      RecRef.GETTABLE(ApplicationAreaSetup);

      FOR FieldIndex := GetFirstPublicAppAreaFieldIndex TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(FieldIndex);
        IF NOT IsInPrimaryKey(FieldRef) THEN
          IF FieldRef.VALUE THEN
            Count += 1;
      END;
      EXIT(Count);
    END;

    LOCAL PROCEDURE SaveApplicationArea@5(VAR TempApplicationAreaBuffer@1000 : TEMPORARY Record 9179;ApplicationAreaSetup@1006 : Record 9178;NoApplicationAreasExist@1007 : Boolean);
    VAR
      ExistingTempApplicationAreaBuffer@1009 : TEMPORARY Record 9179;
      UserPreference@1010 : Record 1306;
      RecRef@1002 : RecordRef;
      FieldRef@1005 : FieldRef;
      ApplicationAreasChanged@1001 : Boolean;
    BEGIN
      GetApplicationAreaBuffer(ExistingTempApplicationAreaBuffer);
      RecRef.GETTABLE(ApplicationAreaSetup);

      TempApplicationAreaBuffer.FINDFIRST;
      ExistingTempApplicationAreaBuffer.FINDFIRST;
      REPEAT
        FieldRef := RecRef.FIELD(TempApplicationAreaBuffer."Field No.");
        FieldRef.VALUE := TempApplicationAreaBuffer.Selected;
        IF TempApplicationAreaBuffer.Selected <> ExistingTempApplicationAreaBuffer.Selected THEN
          ApplicationAreasChanged := TRUE;
      UNTIL (TempApplicationAreaBuffer.NEXT = 0) AND (ExistingTempApplicationAreaBuffer.NEXT = 0);

      IF NoApplicationAreasExist THEN BEGIN
        IF ApplicationAreasChanged THEN
          RecRef.INSERT(TRUE);
      END ELSE
        RecRef.MODIFY(TRUE);

      UserPreference.SETFILTER("User ID",USERID);
      UserPreference.DELETEALL;

      SetupApplicationArea;
    END;

    LOCAL PROCEDURE TrySaveApplicationArea@8(VAR TempApplicationAreaBuffer@1000 : TEMPORARY Record 9179;ApplicationAreaSetup@1003 : Record 9178;NoApplicationAreaExist@1002 : Boolean) IsApplicationAreaChanged : Boolean;
    VAR
      OldApplicationArea@1001 : Text;
    BEGIN
      OldApplicationArea := APPLICATIONAREA;
      SaveApplicationArea(TempApplicationAreaBuffer,ApplicationAreaSetup,NoApplicationAreaExist);
      IsApplicationAreaChanged := OldApplicationArea <> APPLICATIONAREA;
    END;

    [Internal]
    PROCEDURE TrySaveApplicationAreaCurrentCompany@11(VAR TempApplicationAreaBuffer@1000 : TEMPORARY Record 9179) IsApplicationAreaChanged : Boolean;
    VAR
      ApplicationAreaSetup@1003 : Record 9178;
      NoCompanyApplicationAreasExist@1002 : Boolean;
    BEGIN
      IF NOT ApplicationAreaSetup.GET(COMPANYNAME) THEN BEGIN
        ApplicationAreaSetup."Company Name" := COMPANYNAME;
        NoCompanyApplicationAreasExist := TRUE;
      END;

      IsApplicationAreaChanged :=
        TrySaveApplicationArea(TempApplicationAreaBuffer,ApplicationAreaSetup,NoCompanyApplicationAreasExist);
    END;

    [Internal]
    PROCEDURE TrySaveApplicationAreaCurrentUser@12(VAR TempApplicationAreaBuffer@1000 : TEMPORARY Record 9179) IsApplicationAreaChanged : Boolean;
    VAR
      ApplicationAreaSetup@1003 : Record 9178;
      NoCompanyApplicationAreasExist@1002 : Boolean;
    BEGIN
      IF NOT ApplicationAreaSetup.GET('','',USERID) THEN BEGIN
        ApplicationAreaSetup."User ID" := USERID;
        NoCompanyApplicationAreasExist := TRUE;
      END;

      IsApplicationAreaChanged :=
        TrySaveApplicationArea(TempApplicationAreaBuffer,ApplicationAreaSetup,NoCompanyApplicationAreasExist);
    END;

    [Internal]
    PROCEDURE SetupApplicationArea@1();
    BEGIN
      APPLICATIONAREA(GetApplicationAreaSetup);
    END;

    LOCAL PROCEDURE IsInPrimaryKey@7(FieldRef@1000 : FieldRef) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
      KeyRef@1001 : KeyRef;
      FieldIndex@1002 : Integer;
    BEGIN
      RecRef := FieldRef.RECORD;

      KeyRef := RecRef.KEYINDEX(1);
      FOR FieldIndex := 1 TO KeyRef.FIELDCOUNT DO
        IF KeyRef.FIELDINDEX(FieldIndex).NUMBER = FieldRef.NUMBER THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetExperienceTierCurrentCompany@9(VAR ExperienceTier@1000 : ',,,,,Basic,,,,,,,,,,Suite,,,,,Custom');
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF NOT GetApplicationAreaSetupRecFromCompany(ApplicationAreaSetup) THEN
        EXIT;

      IF GetApplicationAreaSetup = '' THEN
        EXIT;

      WITH ApplicationAreaSetup DO
        CASE TRUE OF
          (SelectedAppAreaCount = 8) AND
          Basic AND Suite AND "Relationship Mgmt" AND Jobs AND "Fixed Assets" AND Location AND
          BasicHR AND Assembly:
            ExperienceTier := ExperienceTier::Suite;
          (SelectedAppAreaCount = 2) AND Basic AND "Relationship Mgmt":
            ExperienceTier := ExperienceTier::Basic;
          ELSE
            ExperienceTier := ExperienceTier::Custom;
        END;
    END;

    [Internal]
    PROCEDURE SetExperienceTierCurrentCompany@10(ExperienceTier@1000 : ' ,,,,,Basic,,,,,,,,,,Suite,,,,,Custom');
    VAR
      ApplicationAreaSetup@1001 : Record 9178;
    BEGIN
      IF ExperienceTier = ExperienceTier::Custom THEN
        ERROR(ValuesNotAllowedErr);

      WITH ApplicationAreaSetup DO BEGIN
        IF NOT GET(COMPANYNAME,'','') THEN BEGIN
          "Company Name" := COMPANYNAME;
          INSERT;
        END;

        SetExperienceTier(ExperienceTier);
        MODIFY;
      END;

      SetupApplicationArea;
    END;

    PROCEDURE SetExperienceTier@23(ExperienceTier@1000 : ' ,,,,,Basic,,,,,,,,,,Suite,,,,,Custom');
    BEGIN
      Basic := ExperienceTier <> ExperienceTier::" ";
      Suite := ExperienceTier = ExperienceTier::Suite;
      SetApplicationAreasMatchingCurrentExperienceTier;
    END;

    PROCEDURE GetFirstPublicAppAreaFieldIndex@20() : Integer;
    VAR
      RecRef@1000 : RecordRef;
      FirstPublicAppAreaFieldRef@1001 : FieldRef;
      i@1003 : Integer;
    BEGIN
      RecRef.GETTABLE(Rec);
      FirstPublicAppAreaFieldRef := RecRef.FIELD(FIELDNO(Basic));
      FOR i := 1 TO RecRef.FIELDCOUNT DO
        IF RecRef.FIELDINDEX(i).NUMBER = FirstPublicAppAreaFieldRef.NUMBER THEN
          EXIT(i);
    END;

    PROCEDURE SetApplicationAreasMatchingCurrentExperienceTier@26();
    BEGIN
      "Relationship Mgmt" := Basic;
      Assembly := Suite;
      Jobs := Suite;
      "Fixed Assets" := Suite;
      Location := Suite;
      BasicHR := Suite;
    END;

    PROCEDURE ResetNonSelectableApplicationAreas@24();
    VAR
      ApplicationAreaSetup@1000 : Record 9178;
    BEGIN
      IF ApplicationAreaSetup.FINDSET(TRUE) THEN
        REPEAT
          ApplicationAreaSetup.SetApplicationAreasMatchingCurrentExperienceTier;
          ApplicationAreaSetup.MODIFY;
        UNTIL ApplicationAreaSetup.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

