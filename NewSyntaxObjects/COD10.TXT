OBJECT Codeunit 10 Type Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnsupportedTypeErr@1000 : TextConst 'ENU=The Type is not supported by the Evaluate function.';
      KeyDoesNotExistErr@1001 : TextConst 'ENU=The requested key does not exist.';
      InvalidMonthErr@1002 : TextConst 'ENU=An invalid month was specified.';
      StringTooLongErr@1003 : TextConst '@@@="%1=a number, e.g. 1024";ENU=This function only allows strings of length up to %1.';
      UnsupportedNegativesErr@1004 : TextConst '@@@="%1=function name";ENU=Negative parameters are not supported by bitwise function %1.';
      BitwiseAndTxt@1005 : TextConst '@@@={Locked};ENU=BitwiseAnd';
      BitwiseOrTxt@1006 : TextConst '@@@={Locked};ENU=BitwiseOr';
      BitwiseXorTxt@1007 : TextConst '@@@={Locked};ENU=BitwiseXor';

    [External]
    PROCEDURE Evaluate@3(VAR Variable@1000 : Variant;String@1001 : Text;Format@1002 : Text;CultureName@1003 : Text) : Boolean;
    BEGIN
      // Variable is return type containing the string value
      // String is input to evaluate
      // Format is in format "MM/dd/yyyy" only supported on date, search MSDN for more details ("CultureInfo.Name Property")
      // CultureName is in format "en-US", search MSDN for more details ("Custom Date and Time Format Strings")
      case true of
        Variable.ISDATE:
          exit(TryEvaluateDate(String,Format,CultureName,Variable));
        Variable.ISDECIMAL:
          exit(TryEvaluateDecimal(String,CultureName,Variable));
        Variable.ISINTEGER:
          exit(TryEvaluateInteger(String,CultureName,Variable));
        else
          ERROR(UnsupportedTypeErr);
      end;
    END;

    LOCAL PROCEDURE TryEvaluateDate@12(DateText@1000 : Text;Format@1001 : Text;CultureName@1004 : Text;VAR EvaluatedDate@1006 : Date) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      XMLConvert@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlConvert";
    BEGIN
      if (Format = '') and (CultureName = '') then
        DotNetDateTime := XMLConvert.ToDateTimeOffset(DateText).DateTime
      else begin
        DotNetDateTime := DotNetDateTime.DateTime(0);
        CultureInfo := CultureInfo.GetCultureInfo(CultureName);
        case Format of
          '':
            if not DotNetDateTime.TryParse(DateText,CultureInfo,DateTimeStyles.None,DotNetDateTime) then
              exit(false);
          else
            if not DotNetDateTime.TryParseExact(DateText,Format,CultureInfo,DateTimeStyles.None,DotNetDateTime) then
              exit(false);
        end;
      end;

      EvaluatedDate := DMY2DATE(DotNetDateTime.Day,DotNetDateTime.Month,DotNetDateTime.Year);
      exit(true);
    END;

    LOCAL PROCEDURE TryEvaluateDecimal@13(DecimalText@1000 : Text;CultureName@1001 : Text;VAR EvaluatedDecimal@1006 : Decimal) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDecimal@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Decimal";
      NumberStyles@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberStyles";
    BEGIN
      EvaluatedDecimal := 0;
      if DotNetDecimal.TryParse(DecimalText,NumberStyles.Number,CultureInfo.GetCultureInfo(CultureName),EvaluatedDecimal) then
        exit(true);
      exit(false)
    END;

    LOCAL PROCEDURE TryEvaluateInteger@21(IntegerText@1000 : Text;CultureName@1001 : Text;VAR EvaluatedInteger@1006 : Integer) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetInteger@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Int32";
      NumberStyles@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberStyles";
    BEGIN
      EvaluatedInteger := 0;
      if DotNetInteger.TryParse(IntegerText,NumberStyles.Number,CultureInfo.GetCultureInfo(CultureName),EvaluatedInteger) then
        exit(true);
      exit(false)
    END;

    [External]
    PROCEDURE GetLocalizedMonthToInt@22(Month@1000 : Text) : Integer;
    VAR
      TestMonth@1002 : Text;
      Result@1001 : Integer;
    BEGIN
      Month := LOWERCASE(Month);

      for Result := 1 to 12 do begin
        TestMonth := LOWERCASE(FORMAT(CALCDATE(STRSUBSTNO('<CY+%1M>',Result)),0,'<Month Text>'));
        if Month = TestMonth then
          exit(Result);
      end;

      ERROR(InvalidMonthErr);
    END;

    [External]
    PROCEDURE CompareDateTime@37(DateTimeA@1000 : DateTime;DateTimeB@1001 : DateTime) : Integer;
    BEGIN
      // Compares the specified DateTime values for equality within a small threshold.
      // Returns 1 if DateTimeA > DateTimeB, -1 if DateTimeB > DateTimeA, and 0 if they
      // are equal.

      // The threshold must be used to compensate for the varying levels of precision
      // when storing DateTime values. An example of this is the T-SQL datetime type,
      // which has a precision that goes down to the nearest 0, 3, or 7 milliseconds.

      case true of
        DateTimeA = DateTimeB:
          exit(0);
        DateTimeA = 0DT:
          exit(-1);
        DateTimeB = 0DT:
          exit(1);
        ABS(DateTimeA - DateTimeB) < 10:
          exit(0);
        DateTimeA > DateTimeB:
          exit(1);
        else
          exit(-1);
      end;
    END;

    [External]
    PROCEDURE FormatDate@25(DateToFormat@1000 : Date;LanguageId@1003 : Integer) : Text;
    VAR
      CultureInfo@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DateTimeFormatInfo@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeFormatInfo";
      DotNetDateTime@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageId);
      DateTimeFormatInfo := CultureInfo.DateTimeFormat;
      DotNetDateTime := DotNetDateTime.DateTime(DATE2DMY(DateToFormat,3),DATE2DMY(DateToFormat,2),DATE2DMY(DateToFormat,1));
      exit(DotNetDateTime.ToString('d',DateTimeFormatInfo));
    END;

    [External]
    PROCEDURE LanguageIDToCultureName@4(LanguageID@1001 : Integer) : Text;
    VAR
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageID);
      exit(CultureInfo.Name);
    END;

    [External]
    PROCEDURE GetOptionNo@20(Value@1007 : Text;OptionString@1006 : Text) : Integer;
    VAR
      OptionNo@1001 : Integer;
      OptionsQty@1000 : Integer;
    BEGIN
      Value := UPPERCASE(Value);
      OptionString := UPPERCASE(OptionString);

      if (Value = '') and (STRPOS(OptionString,' ') = 1) then
        exit(0);
      if (Value <> '') and (STRPOS(OptionString,Value) = 0) then
        exit(-1);

      OptionsQty := GetNumberOfOptions(OptionString);
      if OptionsQty > 0 then begin
        for OptionNo := 0 to OptionsQty - 1 do begin
          if OptionsAreEqual(Value,COPYSTR(OptionString,1,STRPOS(OptionString,',') - 1)) then
            exit(OptionNo);
          OptionString := DELSTR(OptionString,1,STRPOS(OptionString,','));
        end;
        OptionNo += 1;
      end;

      if OptionsAreEqual(Value,OptionString) then
        exit(OptionNo);

      exit(-1);
    END;

    [External]
    PROCEDURE GetNumberOfOptions@11(OptionString@1000 : Text) : Integer;
    BEGIN
      exit(STRLEN(OptionString) - STRLEN(DELCHR(OptionString,'=',',')));
    END;

    LOCAL PROCEDURE OptionsAreEqual@18(Value@1000 : Text;CurrentOption@1001 : Text) : Boolean;
    BEGIN
      exit((Value = CurrentOption) or ((Value = '') and (DELCHR(CurrentOption,'=',' ') = '')));
    END;

    [External]
    PROCEDURE GetFieldLength@1(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1002 : Record Field;
    BEGIN
      if Field.GET(TableNo,FieldNo) then
        exit(Field.Len);

      exit(0);
    END;

    [External]
    PROCEDURE Equals@2(ThisRecRef@1000 : RecordRef;OtherRecRef@1003 : RecordRef;SkipBlob@1006 : Boolean) : Boolean;
    VAR
      Field@1004 : Record Field;
      Key@1005 : Record Key;
      OtherFieldRef@1002 : FieldRef;
      ThisFieldRef@1001 : FieldRef;
    BEGIN
      if ThisRecRef.NUMBER <> OtherRecRef.NUMBER then
        exit(false);

      if ThisRecRef.KEYCOUNT = ThisRecRef.FIELDCOUNT then
        exit(false);

      Field.SETRANGE(TableNo,ThisRecRef.NUMBER);
      Field.FINDSET;

      repeat
        if not Key.GET(ThisRecRef.NUMBER,Field."No.") then begin
          ThisFieldRef := ThisRecRef.FIELD(Field."No.");
          OtherFieldRef := OtherRecRef.FIELD(Field."No.");

          case Field.Type of
            Field.Type::BLOB,Field.Type::Binary:
              if not SkipBlob then
                if ReadBlob(ThisFieldRef) <> ReadBlob(OtherFieldRef) then
                  exit(false);
            else
              if ThisFieldRef.VALUE <> OtherFieldRef.VALUE then
                exit(false);
          end;
        end;
      until Field.NEXT = 0;

      exit(true);
    END;

    [External]
    PROCEDURE GetBlobString@33(RecordVariant@1000 : Variant;FieldNo@1001 : Integer) : Text;
    VAR
      RecordRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      FieldRef := RecordRef.FIELD(FieldNo);
      exit(ReadBlob(FieldRef));
    END;

    [External]
    PROCEDURE SetBlobString@35(RecordRef@1000 : RecordRef;FieldNo@1001 : Integer;Value@1004 : Text);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      FieldRef := RecordRef.FIELD(FieldNo);
      WriteBlob(FieldRef,Value);
    END;

    [External]
    PROCEDURE ReadBlob@7(VAR BlobFieldRef@1000 : FieldRef) Content : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
      InStream@1002 : InStream;
    BEGIN
      TempBlob.Blob := BlobFieldRef.VALUE;
      if not TempBlob.Blob.HASVALUE then begin
        BlobFieldRef.CALCFIELD;
        TempBlob.Blob := BlobFieldRef.VALUE;
      end;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      InStream.READ(Content);

      BlobFieldRef.VALUE := TempBlob.Blob;
    END;

    [External]
    PROCEDURE ReadTextBlob@14(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1002 : Text) : Text;
    BEGIN
      exit(ReadTextBlobWithEncoding(BlobFieldRef,LineSeparator,TEXTENCODING::MSDos));
    END;

    [External]
    PROCEDURE WriteBlobWithEncoding@38(VAR BlobFieldRef@1004 : FieldRef;NewContent@1003 : Text;TextEncoding@1000 : TextEncoding) : Boolean;
    VAR
      TempBlob@1001 : Record TempBlob;
      OutStream@1002 : OutStream;
    BEGIN
      BlobFieldRef.CALCFIELD;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,TextEncoding);
      OutStream.WRITE(NewContent);
      BlobFieldRef.VALUE := TempBlob.Blob;

      exit(true);
    END;

    [External]
    PROCEDURE WriteBlob@24(VAR BlobFieldRef@1004 : FieldRef;NewContent@1003 : Text) : Boolean;
    VAR
      TempBlob@1001 : Record TempBlob;
      OutStream@1002 : OutStream;
    BEGIN
      BlobFieldRef.CALCFIELD;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      OutStream.WRITE(NewContent);
      BlobFieldRef.VALUE := TempBlob.Blob;

      exit(true);
    END;

    [External]
    PROCEDURE WriteTextToBlobIfChanged@15(VAR BlobFieldRef@1000 : FieldRef;NewContent@1003 : Text;Encoding@1007 : TextEncoding) : Boolean;
    VAR
      TempBlob@1004 : TEMPORARY Record TempBlob;
      OutStream@1002 : OutStream;
      OldContent@1005 : Text;
    BEGIN
      // Returns TRUE if the value was changed, FALSE if the old value was identical and no change was needed
      OldContent := ReadTextBlobWithTextEncoding(BlobFieldRef,Encoding);
      if NewContent = OldContent then
        exit(false);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,Encoding);
      OutStream.WRITETEXT(NewContent);
      TempBlob.INSERT;

      BlobFieldRef.VALUE := TempBlob.Blob;
      exit(true);
    END;

    LOCAL PROCEDURE ReadTextBlobWithEncoding@8(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1003 : Text;Encoding@1002 : TextEncoding) : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
    BEGIN
      BlobFieldRef.CALCFIELD;

      TempBlob.INIT;
      TempBlob.Blob := BlobFieldRef.VALUE;

      exit(TempBlob.ReadAsText(LineSeparator,Encoding));
    END;

    [External]
    PROCEDURE IsMatch@6(Input@1000 : Text;RegExExpression@1003 : Text) : Boolean;
    VAR
      Regex@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      AlphanumericRegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      AlphanumericRegEx := Regex.Regex(RegExExpression);
      exit(AlphanumericRegEx.IsMatch(Input));
    END;

    [External]
    PROCEDURE IsAlphanumeric@9(Input@1000 : Text) : Boolean;
    BEGIN
      exit(IsMatch(Input,'^[a-zA-Z0-9]*$'));
    END;

    [External]
    PROCEDURE IsPhoneNumber@29(Input@1000 : Text) : Boolean;
    BEGIN
      exit(IsMatch(Input,'^[\(\)\-\+0-9 ]*$'));
    END;

    [External]
    PROCEDURE ReadTextBlobWithTextEncoding@17(VAR BlobFieldRef@1002 : FieldRef;Encoding@1000 : TextEncoding) BlobContent : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
      InStream@1003 : InStream;
    BEGIN
      TempBlob.INIT;
      BlobFieldRef.CALCFIELD;
      TempBlob.Blob := BlobFieldRef.VALUE;
      TempBlob.Blob.CREATEINSTREAM(InStream,Encoding);
      if InStream.READ(BlobContent) = 0 then;
    END;

    [TryFunction]
    [External]
    PROCEDURE GetUserTimezoneOffset@5(VAR Duration@1001 : Duration);
    VAR
      UserPersonalization@1004 : Record "User Personalization";
      TimeZoneInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeZone@1000 : Text;
    BEGIN
      UserPersonalization.GET(USERSECURITYID);
      TimeZone := UserPersonalization."Time Zone";
      TimeZoneInfo := TimeZoneInfo.FindSystemTimeZoneById(TimeZone);

      Duration := TimeZoneInfo.BaseUtcOffset;
    END;

    [External]
    PROCEDURE EvaluateUnixTimestamp@19(Timestamp@1002 : BigInteger) : DateTime;
    VAR
      ResultDateTime@1000 : DateTime;
      EpochDateTime@1001 : DateTime;
      TimezoneOffset@1003 : Duration;
      TimestampInMilliseconds@1004 : BigInteger;
    BEGIN
      if not GetUserTimezoneOffset(TimezoneOffset) then
        TimezoneOffset := 0;

      EpochDateTime := CREATEDATETIME(DMY2DATE(1,1,1970),000000T);

      TimestampInMilliseconds := Timestamp * 1000;

      ResultDateTime := EpochDateTime + TimestampInMilliseconds + TimezoneOffset;

      exit(ResultDateTime);
    END;

    [External]
    PROCEDURE UrlEncode@10(VAR Value@1000 : Text) : Text;
    VAR
      HttpUtility@1001 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      Value := HttpUtility.UrlEncode(Value);
      exit(Value);
    END;

    [External]
    PROCEDURE HtmlEncode@32(VAR Value@1000 : Text) : Text;
    VAR
      HttpUtility@1001 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      Value := HttpUtility.HtmlEncode(Value);
      exit(Value);
    END;

    [External]
    PROCEDURE GetKeyAsString@16(RecordVariant@1000 : Variant;KeyIndex@1001 : Integer) : Text;
    VAR
      DataTypeManagement@1008 : Codeunit "Data Type Management";
      RecRef@1007 : RecordRef;
      SelectedKeyRef@1006 : KeyRef;
      KeyFieldRef@1005 : FieldRef;
      I@1004 : Integer;
      KeyString@1003 : Text;
      Separator@1002 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,RecRef);

      if RecRef.KEYCOUNT < KeyIndex then
        ERROR(KeyDoesNotExistErr);

      SelectedKeyRef := RecRef.KEYINDEX(KeyIndex);

      for I := 1 to SelectedKeyRef.FIELDCOUNT do begin
        KeyFieldRef := SelectedKeyRef.FIELDINDEX(I);
        KeyString += Separator + KeyFieldRef.NAME;
        Separator := ',';
      end;

      exit(KeyString);
    END;

    [External]
    PROCEDURE SortRecordRef@28(VAR RecRef@1000 : RecordRef;CommaSeparatedFieldsToSort@1001 : Text;Ascending@1002 : Boolean);
    VAR
      OrderString@1003 : Text;
    BEGIN
      if Ascending then
        OrderString := 'ORDER(Ascending)'
      else
        OrderString := 'ORDER(Descending)';

      RecRef.SETVIEW(STRSUBSTNO('SORTING(%1) %2',CommaSeparatedFieldsToSort,OrderString));
      if RecRef.FINDSET then ;
    END;

    [External]
    PROCEDURE TextDistance@23(Text1@1000 : Text;Text2@1001 : Text) : Integer;
    VAR
      Array1@1002 : ARRAY [1026] OF Integer;
      Array2@1003 : ARRAY [1026] OF Integer;
      i@1004 : Integer;
      j@1005 : Integer;
      Cost@1006 : Integer;
      MaxLen@1007 : Integer;
    BEGIN
      // Returns the number of edits to get from Text1 to Text2
      // Reference: https://en.wikipedia.org/wiki/Levenshtein_distance
      if (STRLEN(Text1) + 2 > ARRAYLEN(Array1)) or (STRLEN(Text2) + 2 > ARRAYLEN(Array1)) then
        ERROR(StringTooLongErr,ARRAYLEN(Array1) - 2);
      if Text1 = Text2 then
        exit(0);
      if Text1 = '' then
        exit(STRLEN(Text2));
      if Text2 = '' then
        exit(STRLEN(Text1));

      if STRLEN(Text1) >= STRLEN(Text2) then
        MaxLen := STRLEN(Text1)
      else
        MaxLen := STRLEN(Text2);

      for i := 0 to MaxLen + 1 do
        Array1[i + 1] := i;

      for i := 0 to STRLEN(Text1) - 1 do begin
        Array2[1] := i + 1;
        for j := 0 to STRLEN(Text2) - 1 do begin
          if Text1[i + 1] = Text2[j + 1] then
            Cost := 0
          else
            Cost := 1;
          Array2[j + 2] := MinimumInt3(Array2[j + 1] + 1,Array1[j + 2] + 1,Array1[j + 1] + Cost);
        end;
        for j := 1 to MaxLen + 2 do
          Array1[j] := Array2[j];
      end;
      exit(Array2[STRLEN(Text2) + 1]);
    END;

    LOCAL PROCEDURE MinimumInt3@26(i1@1000 : Integer;i2@1001 : Integer;i3@1002 : Integer) : Integer;
    BEGIN
      if (i1 <= i2) and (i1 <= i3) then
        exit(i1);
      if (i2 <= i1) and (i2 <= i3) then
        exit(i2);
      exit(i3);
    END;

    [External]
    PROCEDURE GetGuidAsString@27(GuidValue@1000 : GUID) : Text[36];
    BEGIN
      // Converts guid to string
      // Example: Converts {21EC2020-3AEA-4069-A2DD-08002B30309D} to 21ec2020-3aea-4069-a2dd-08002b30309d
      exit(LOWERCASE(COPYSTR(FORMAT(GuidValue),2,36)));
    END;

    [External]
    PROCEDURE WriteRecordLinkNote@30(VAR RecordLink@1000 : Record "Record Link";Note@1001 : Text);
    VAR
      BinWriter@1003 : DotNet "'mscorlib'.System.IO.BinaryWriter";
      OStr@1002 : OutStream;
    BEGIN
      // Writes the Note BLOB into the format the client code expects
      RecordLink.Note.CREATEOUTSTREAM(OStr,TEXTENCODING::UTF8);
      BinWriter := BinWriter.BinaryWriter(OStr);
      BinWriter.Write(Note);
    END;

    [External]
    PROCEDURE GetMaxNumberOfParametersInSQLQuery@31() : Integer;
    BEGIN
      exit(2100);
    END;

    [External]
    PROCEDURE BitwiseAnd@40(A@1000 : Integer;B@1001 : Integer) : Integer;
    VAR
      Result@1002 : Integer;
      BitMask@1003 : Integer;
      BitIndex@1004 : Integer;
      MaxBitIndex@1005 : Integer;
    BEGIN
      if (A < 0) or (B < 0) then
        ERROR(UnsupportedNegativesErr,BitwiseAndTxt);
      BitMask := 1;
      Result := 0;
      MaxBitIndex := 31; // 1st bit is ignored as it is always equals to 0 for positive Int32 numbers
      for BitIndex := 1 to MaxBitIndex do begin
        if ((A mod 2) = 1) and ((B mod 2) = 1) then
          Result += BitMask;
        A := A div 2;
        B := B div 2;
        if BitIndex < MaxBitIndex then
          BitMask += BitMask;
      end;
      exit(Result);
    END;

    [External]
    PROCEDURE BitwiseOr@43(A@1000 : Integer;B@1001 : Integer) : Integer;
    VAR
      Result@1002 : Integer;
      BitMask@1003 : Integer;
      BitIndex@1004 : Integer;
      MaxBitIndex@1005 : Integer;
    BEGIN
      if (A < 0) or (B < 0) then
        ERROR(UnsupportedNegativesErr,BitwiseOrTxt);
      BitMask := 1;
      Result := 0;
      MaxBitIndex := 31; // 1st bit is ignored as it is always equals to 0 for positive Int32 numbers
      for BitIndex := 1 to MaxBitIndex do begin
        if ((A mod 2) = 1) or ((B mod 2) = 1) then
          Result += BitMask;
        A := A div 2;
        B := B div 2;
        if BitIndex < MaxBitIndex then
          BitMask += BitMask;
      end;
      exit(Result);
    END;

    [External]
    PROCEDURE BitwiseXor@51(A@1000 : Integer;B@1001 : Integer) : Integer;
    VAR
      Result@1002 : Integer;
      BitMask@1003 : Integer;
      BitIndex@1004 : Integer;
      MaxBitIndex@1005 : Integer;
    BEGIN
      if (A < 0) or (B < 0) then
        ERROR(UnsupportedNegativesErr,BitwiseXorTxt);
      BitMask := 1;
      Result := 0;
      MaxBitIndex := 31; // 1st bit is ignored as it is always equals to 0 for positive Int32 numbers
      for BitIndex := 1 to MaxBitIndex do begin
        if (A mod 2) <> (B mod 2) then
          Result += BitMask;
        A := A div 2;
        B := B div 2;
        if BitIndex < MaxBitIndex then
          BitMask += BitMask;
      end;
      exit(Result);
    END;

    [External]
    PROCEDURE GetFormattedCurrentDateTimeInUserTimeZone@34(StringFormat@1000 : Text) : Text;
    VAR
      DateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      TimezoneOffset@1001 : Duration;
    BEGIN
      if not GetUserTimezoneOffset(TimezoneOffset) then
        TimezoneOffset := 0;
      DateTime := DateTime.Now;
      DateTime := DateTime.ToUniversalTime + TimezoneOffset;
      exit(DateTime.ToString(StringFormat));
    END;

    [External]
    PROCEDURE IntToHex@36(IntValue@1000 : Integer) : Text;
    VAR
      DotNetIntPtr@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IntPtr";
    BEGIN
      DotNetIntPtr := DotNetIntPtr.IntPtr(IntValue);
      exit(DotNetIntPtr.ToString('X'));
    END;

    PROCEDURE TransferFieldsWithValidate@39(VAR TempFieldBuffer@1000 : TEMPORARY Record "Field Buffer";RecordVariant@1001 : Variant;VAR TargetTableRecRef@1002 : RecordRef);
    VAR
      DataTypeManagement@1006 : Codeunit "Data Type Management";
      SourceRecRef@1004 : RecordRef;
      TargetFieldRef@1005 : FieldRef;
      SourceFieldRef@1003 : FieldRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,SourceRecRef);

      TempFieldBuffer.RESET;
      if not TempFieldBuffer.FINDFIRST then
        exit;

      repeat
        if TargetTableRecRef.FIELDEXIST(TempFieldBuffer."Field ID") then begin
          SourceFieldRef := SourceRecRef.FIELD(TempFieldBuffer."Field ID");
          TargetFieldRef := TargetTableRecRef.FIELD(TempFieldBuffer."Field ID");
          if FORMAT(TargetFieldRef.CLASS) = 'Normal' then
            if TargetFieldRef.VALUE <> SourceFieldRef.VALUE then
              TargetFieldRef.VALIDATE(SourceFieldRef.VALUE);
        end;
      until TempFieldBuffer.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

