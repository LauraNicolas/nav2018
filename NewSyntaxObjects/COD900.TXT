OBJECT Codeunit 900 Assembly-Post
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Assembly Header";
    Permissions=TableData "Posted Assembly Header"=im,
                TableData "Posted Assembly Line"=im,
                TableData "Item Entry Relation"=i;
    OnRun=VAR
            AssemblyHeader@1007 : Record "Assembly Header";
          BEGIN
            // Replace posting date if called from batch posting
            ValidatePostingDate(Rec);

            CLEARALL;
            AssemblyHeader := Rec;

            if IsAsmToOrder then
              TESTFIELD("Assemble to Order",false);

            OpenWindow("Document Type");
            Window.UPDATE(1,STRSUBSTNO('%1 %2',"Document Type","No."));

            InitPost(AssemblyHeader);
            Post(AssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
            FinalizePost(AssemblyHeader);
            COMMIT;

            Window.CLOSE;
            Rec := AssemblyHeader;
          END;

  }
  CODE
  {
    VAR
      GLEntry@1010 : Record "G/L Entry";
      GLSetup@1012 : Record "General Ledger Setup";
      AssembledItem@1007 : Record Item;
      TempItemLedgEntry@1027 : TEMPORARY Record "Item Ledger Entry";
      DimMgt@1008 : Codeunit DimensionManagement;
      ItemJnlPostLine@1022 : Codeunit "Item Jnl.-Post Line";
      ResJnlPostLine@1018 : Codeunit "Res. Jnl.-Post Line";
      WhseJnlRegisterLine@1017 : Codeunit "Whse. Jnl.-Register Line";
      UndoPostingMgt@1026 : Codeunit "Undo Posting Management";
      Window@1015 : Dialog;
      PostingDate@1016 : Date;
      SourceCode@1000 : Code[10];
      PostingDateExists@1019 : Boolean;
      ReplacePostingDate@1020 : Boolean;
      Text001@1001 : TextConst '@@@=starts with "Posting Date";ENU=is not within your range of allowed posting dates.';
      Text002@1003 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=The combination of dimensions used in %1 %2 is blocked. %3.';
      Text003@1002 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4.';
      Text004@1005 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=The dimensions that are used in %1 %2 are not valid. %3.';
      Text005@1004 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=The dimensions that are used in %1 %2, line no. %3, are not valid. %4.';
      Text006@1009 : TextConst 'ENU=There is nothing to post.';
      Text007@1006 : TextConst 'ENU=Posting lines              #2######';
      GLSetupRead@1011 : Boolean;
      Text008@1014 : TextConst 'ENU=Posting %1';
      Text009@1013 : TextConst 'ENU=%1 should be blank for comment text: %2.';
      ShowProgress@1021 : Boolean;
      Text010@1024 : TextConst 'ENU=Undoing %1';
      Text011@1025 : TextConst '@@@="%1=Posted Assembly Order No. field value,%2=Assembly Header Document No field value";ENU=Posted assembly order %1 cannot be restored because the number of lines in assembly order %2 has changed.';

    LOCAL PROCEDURE InitPost@17(VAR AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      GenJnlCheckLine@1002 : Codeunit "Gen. Jnl.-Check Line";
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
      GenJnlPostPreview@1003 : Codeunit "Gen. Jnl.-Post Preview";
    BEGIN
      with AssemblyHeader do begin
        TESTFIELD("Document Type");
        TESTFIELD("Posting Date");
        PostingDate := "Posting Date";
        if GenJnlCheckLine.DateNotAllowed("Posting Date") then
          FIELDERROR("Posting Date",Text001);
        TESTFIELD("Item No.");
        CheckDim(AssemblyHeader);
        if not IsOrderPostable(AssemblyHeader) then
          ERROR(Text006);

        if "Posting No." = '' then
          if "Document Type" = "Document Type"::Order then begin
            TESTFIELD("Posting No. Series");
            "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",true);
            if not GenJnlPostPreview.IsActive then begin
              MODIFY;
              COMMIT;
            end;
          end;

        if Status = Status::Open then begin
          CODEUNIT.RUN(CODEUNIT::"Release Assembly Document",AssemblyHeader);
          TESTFIELD(Status,Status::Released);
          Status := Status::Open;
          if not GenJnlPostPreview.IsActive then begin
            MODIFY;
            COMMIT;
          end;
          Status := Status::Released;
        end;

        GetSourceCode(IsAsmToOrder);
      end;
    END;

    LOCAL PROCEDURE Post@18(VAR AssemblyHeader@1000 : Record "Assembly Header";VAR ItemJnlPostLine@1001 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1002 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      AssemblyLine@1011 : Record "Assembly Line";
      PostedAssemblyHeader@1010 : Record "Posted Assembly Header";
      AssemblySetup@1009 : Record "Assembly Setup";
      AssemblyCommentLine@1008 : Record "Assembly Comment Line";
      RecordLinkManagement@1004 : Codeunit "Record Link Management";
    BEGIN
      with AssemblyHeader do begin
        SuspendStatusCheck(true);
        LockTables(AssemblyLine,AssemblyHeader);

        // Insert posted assembly header
        if "Document Type" = "Document Type"::Order then begin
          PostedAssemblyHeader.INIT;
          PostedAssemblyHeader.TRANSFERFIELDS(AssemblyHeader);

          PostedAssemblyHeader."No." := "Posting No.";
          PostedAssemblyHeader."Order No. Series" := "No. Series";
          PostedAssemblyHeader."Order No." := "No.";
          PostedAssemblyHeader."Source Code" := SourceCode;
          PostedAssemblyHeader."User ID" := USERID;
          PostedAssemblyHeader.INSERT;

          AssemblySetup.GET;
          if AssemblySetup."Copy Comments when Posting" then begin
            CopyCommentLines(
              "Document Type",AssemblyCommentLine."Document Type"::"Posted Assembly",
              "No.",PostedAssemblyHeader."No.");
            RecordLinkManagement.CopyLinks(AssemblyHeader,PostedAssemblyHeader);
          end;
        end;

        AssembledItem.GET("Item No.");
        TESTFIELD("Document Type","Document Type"::Order);
        PostLines(AssemblyHeader,AssemblyLine,PostedAssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
        PostHeader(AssemblyHeader,PostedAssemblyHeader,ItemJnlPostLine,WhseJnlRegisterLine);
      end;
    END;

    LOCAL PROCEDURE FinalizePost@19(AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      AssemblyLine@1009 : Record "Assembly Line";
      AssemblyCommentLine@1006 : Record "Assembly Comment Line";
      AssemblyLineReserve@1001 : Codeunit "Assembly Line-Reserve";
    BEGIN
      MakeInvtAdjmt;

      with AssemblyHeader do begin
        // Delete header and lines
        AssemblyLine.RESET;
        AssemblyLine.SETRANGE("Document Type","Document Type");
        AssemblyLine.SETRANGE("Document No.","No.");
        if "Remaining Quantity (Base)" = 0 then begin
          if HASLINKS then
            DELETELINKS;
          DeleteWhseRequest(AssemblyHeader);
          DELETE;
          if AssemblyLine.FIND('-') then
            repeat
              if AssemblyLine.HASLINKS then
                DELETELINKS;
              AssemblyLineReserve.SetDeleteItemTracking(true);
              AssemblyLineReserve.DeleteLine(AssemblyLine);
            until AssemblyLine.NEXT = 0;
          AssemblyLine.DELETEALL;
          AssemblyCommentLine.SETCURRENTKEY("Document Type","Document No.");
          AssemblyCommentLine.SETRANGE("Document Type","Document Type");
          AssemblyCommentLine.SETRANGE("Document No.","No.");
          if not AssemblyCommentLine.ISEMPTY then
            AssemblyCommentLine.DELETEALL;
        end;
      end;
    END;

    LOCAL PROCEDURE OpenWindow@20(DocType@1000 : Option);
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      AsmHeader."Document Type" := DocType;
      if AsmHeader."Document Type" = AsmHeader."Document Type"::Order then
        Window.OPEN(
          '#1#################################\\' +
          Text007 + '\\' +
          STRSUBSTNO(Text008,AsmHeader."Document Type"));
      ShowProgress := true;
    END;

    [External]
    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := true;
      ReplacePostingDate := NewReplacePostingDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE ValidatePostingDate@49(VAR AssemblyHeader@1001 : Record "Assembly Header");
    VAR
      BatchProcessingMgt@1000 : Codeunit "Batch Processing Mgt.";
      BatchPostParameterTypes@1002 : Codeunit "Batch Post Parameter Types";
    BEGIN
      if not PostingDateExists then
        PostingDateExists :=
          BatchProcessingMgt.GetParameterBoolean(
            AssemblyHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) and
          BatchProcessingMgt.GetParameterDate(AssemblyHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);

      if PostingDateExists and (ReplacePostingDate or (AssemblyHeader."Posting Date" = 0D)) then
        AssemblyHeader."Posting Date" := PostingDate;
    END;

    LOCAL PROCEDURE CheckDim@34(AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      AssemblyLine@1001 : Record "Assembly Line";
    BEGIN
      AssemblyLine."Line No." := 0;
      CheckDimValuePosting(AssemblyHeader,AssemblyLine);
      CheckDimComb(AssemblyHeader,AssemblyLine);

      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETFILTER(Type,'<>%1',AssemblyLine.Type::" ");
      if AssemblyLine.FIND('-') then
        repeat
          if AssemblyHeader."Quantity to Assemble" <> 0 then begin
            CheckDimComb(AssemblyHeader,AssemblyLine);
            CheckDimValuePosting(AssemblyHeader,AssemblyLine);
          end;
        until AssemblyLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(AssemblyHeader@1001 : Record "Assembly Header";AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
      if AssemblyLine."Line No." = 0 then
        if not DimMgt.CheckDimIDComb(AssemblyHeader."Dimension Set ID") then
          ERROR(Text002,AssemblyHeader."Document Type",AssemblyHeader."No.",DimMgt.GetDimCombErr);

      if AssemblyLine."Line No." <> 0 then
        if not DimMgt.CheckDimIDComb(AssemblyLine."Dimension Set ID") then
          ERROR(Text003,AssemblyHeader."Document Type",AssemblyHeader."No.",AssemblyLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(AssemblyHeader@1001 : Record "Assembly Header";VAR AssemblyLine@1000 : Record "Assembly Line");
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      if AssemblyLine."Line No." = 0 then begin
        TableIDArr[1] := DATABASE::Item;
        NumberArr[1] := AssemblyHeader."Item No.";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,AssemblyHeader."Dimension Set ID") then
          ERROR(
            Text004,
            AssemblyHeader."Document Type",AssemblyHeader."No.",DimMgt.GetDimValuePostingErr);
      end else begin
        TableIDArr[1] := DimMgt.TypeToTableID4(AssemblyLine.Type);
        NumberArr[1] := AssemblyLine."No.";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,AssemblyLine."Dimension Set ID") then
          ERROR(
            Text005,
            AssemblyHeader."Document Type",AssemblyHeader."No.",AssemblyLine."Line No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE IsOrderPostable@23(AssemblyHeader@1000 : Record "Assembly Header") : Boolean;
    VAR
      AssemblyLine@1001 : Record "Assembly Line";
    BEGIN
      if AssemblyHeader."Document Type" <> AssemblyHeader."Document Type"::Order then
        exit(false);

      if AssemblyHeader."Quantity to Assemble" = 0 then
        exit(false);

      AssemblyLine.SETCURRENTKEY("Document Type","Document No.",Type);
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");

      AssemblyLine.SETFILTER(Type,'<>%1',AssemblyLine.Type::" ");
      if AssemblyLine.ISEMPTY then
        exit(false);

      AssemblyLine.SETFILTER("Quantity to Consume",'<>0');
      exit(not AssemblyLine.ISEMPTY);
    END;

    LOCAL PROCEDURE GetGLSetup@60();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE LockTables@13(VAR AssemblyLine@1000 : Record "Assembly Line";VAR AssemblyHeader@1002 : Record "Assembly Header");
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
    BEGIN
      AssemblyLine.LOCKTABLE;
      AssemblyHeader.LOCKTABLE;
      GetGLSetup;
      if not GLSetup.OptimGLEntLockForMultiuserEnv then begin
        GLEntry.LOCKTABLE;
        if GLEntry.FINDLAST then;
      end;
    END;

    LOCAL PROCEDURE CopyCommentLines@10(FromDocumentType@1003 : Integer;ToDocumentType@1002 : Integer;FromNumber@1001 : Code[20];ToNumber@1000 : Code[20]);
    VAR
      AssemblyCommentLine@1004 : Record "Assembly Comment Line";
      AssemblyCommentLine2@1005 : Record "Assembly Comment Line";
    BEGIN
      AssemblyCommentLine.SETRANGE("Document Type",FromDocumentType);
      AssemblyCommentLine.SETRANGE("Document No.",FromNumber);
      if AssemblyCommentLine.FIND('-') then
        repeat
          AssemblyCommentLine2 := AssemblyCommentLine;
          AssemblyCommentLine2."Document Type" := ToDocumentType;
          AssemblyCommentLine2."Document No." := ToNumber;
          AssemblyCommentLine2.INSERT;
        until AssemblyCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SortLines@14(VAR AssemblyLine@1000 : Record "Assembly Line");
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
    BEGIN
      GetGLSetup;
      if GLSetup.OptimGLEntLockForMultiuserEnv then
        AssemblyLine.SETCURRENTKEY("Document Type",Type,"No.")
      else
        AssemblyLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
    END;

    LOCAL PROCEDURE SortPostedLines@33(VAR PostedAsmLine@1000 : Record "Posted Assembly Line");
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
    BEGIN
      GetGLSetup;
      if GLSetup.OptimGLEntLockForMultiuserEnv then
        PostedAsmLine.SETCURRENTKEY(Type,"No.")
      else
        PostedAsmLine.SETCURRENTKEY("Document No.","Line No.");
    END;

    LOCAL PROCEDURE GetLineQtys@3(VAR LineQty@1000 : Decimal;VAR LineQtyBase@1001 : Decimal;AssemblyLine@1003 : Record "Assembly Line");
    BEGIN
      with AssemblyLine do begin
        LineQty := ROUND("Quantity to Consume",0.00001);
        LineQtyBase := ROUND("Quantity to Consume (Base)",0.00001);
      end;
    END;

    LOCAL PROCEDURE GetHeaderQtys@8(VAR HeaderQty@1000 : Decimal;VAR HeaderQtyBase@1001 : Decimal;AssemblyHeader@1002 : Record "Assembly Header");
    BEGIN
      with AssemblyHeader do begin
        HeaderQty := ROUND("Quantity to Assemble",0.00001);
        HeaderQtyBase := ROUND("Quantity to Assemble (Base)",0.00001);
      end;
    END;

    LOCAL PROCEDURE PostLines@24(AssemblyHeader@1000 : Record "Assembly Header";VAR AssemblyLine@1009 : Record "Assembly Line";PostedAssemblyHeader@1001 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1007 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1006 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1008 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      PostedAssemblyLine@1005 : Record "Posted Assembly Line";
      LineCounter@1004 : Integer;
      QtyToConsume@1003 : Decimal;
      QtyToConsumeBase@1002 : Decimal;
      ItemLedgEntryNo@1010 : Integer;
    BEGIN
      with AssemblyLine do begin
        RESET;
        SETRANGE("Document Type",AssemblyHeader."Document Type");
        SETRANGE("Document No.",AssemblyHeader."No.");
        SortLines(AssemblyLine);

        LineCounter := 0;
        if FINDSET then
          repeat
            if ("No." = '') and
               (Description <> '') and
               (Type <> Type::" ")
            then
              ERROR(Text009,FIELDCAPTION(Type),Description);

            LineCounter := LineCounter + 1;
            if ShowProgress then
              Window.UPDATE(2,LineCounter);

            GetLineQtys(QtyToConsume,QtyToConsumeBase,AssemblyLine);

            ItemLedgEntryNo := 0;
            if QtyToConsumeBase <> 0 then begin
              case Type of
                Type::Item:
                  ItemLedgEntryNo :=
                    PostItemConsumption(
                      AssemblyHeader,
                      AssemblyLine,
                      AssemblyHeader."Posting No. Series",
                      QtyToConsume,
                      QtyToConsumeBase,ItemJnlPostLine,WhseJnlRegisterLine,AssemblyHeader."Posting No.",false,0);
                Type::Resource:
                  PostResourceConsumption(
                    AssemblyHeader,
                    AssemblyLine,
                    AssemblyHeader."Posting No. Series",
                    QtyToConsume,
                    QtyToConsumeBase,ResJnlPostLine,ItemJnlPostLine,AssemblyHeader."Posting No.",false);
              end;

              // modify the lines
              "Consumed Quantity" := "Consumed Quantity" + QtyToConsume;
              "Consumed Quantity (Base)" := "Consumed Quantity (Base)" + QtyToConsumeBase;
              InitRemainingQty;
              InitQtyToConsume;
              MODIFY;
            end;

            // Insert posted assembly lines
            PostedAssemblyLine.INIT;
            PostedAssemblyLine.TRANSFERFIELDS(AssemblyLine);
            PostedAssemblyLine."Document No." := PostedAssemblyHeader."No.";
            PostedAssemblyLine.Quantity := QtyToConsume;
            PostedAssemblyLine."Quantity (Base)" := QtyToConsumeBase;
            PostedAssemblyLine."Cost Amount" := ROUND(PostedAssemblyLine.Quantity * "Unit Cost");
            PostedAssemblyLine."Order No." := "Document No.";
            PostedAssemblyLine."Order Line No." := "Line No.";
            InsertLineItemEntryRelation(PostedAssemblyLine,ItemJnlPostLine,ItemLedgEntryNo);
            PostedAssemblyLine.INSERT;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostHeader@25(VAR AssemblyHeader@1000 : Record "Assembly Header";VAR PostedAssemblyHeader@1001 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1006 : Codeunit "Item Jnl.-Post Line";VAR WhseJnlRegisterLine@1005 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      WhseAssemblyRelease@1004 : Codeunit "Whse.-Assembly Release";
      ItemLedgEntryNo@1008 : Integer;
      QtyToOutput@1003 : Decimal;
      QtyToOutputBase@1002 : Decimal;
    BEGIN
      with AssemblyHeader do begin
        GetHeaderQtys(QtyToOutput,QtyToOutputBase,AssemblyHeader);
        ItemLedgEntryNo :=
          PostItemOutput(
            AssemblyHeader,"Posting No. Series",
            QtyToOutput,QtyToOutputBase,
            ItemJnlPostLine,WhseJnlRegisterLine,"Posting No.",false,0);

        // modify the header
        "Assembled Quantity" := "Assembled Quantity" + QtyToOutput;
        "Assembled Quantity (Base)" := "Assembled Quantity (Base)" + QtyToOutputBase;
        InitRemainingQty;
        InitQtyToAssemble;
        VALIDATE("Quantity to Assemble");
        "Posting No." := '';
        MODIFY;

        WhseAssemblyRelease.Release(AssemblyHeader);

        // modify the posted assembly header
        PostedAssemblyHeader.Quantity := QtyToOutput;
        PostedAssemblyHeader."Quantity (Base)" := QtyToOutputBase;
        PostedAssemblyHeader."Cost Amount" := ROUND(PostedAssemblyHeader.Quantity * "Unit Cost");

        InsertHeaderItemEntryRelation(PostedAssemblyHeader,ItemJnlPostLine,ItemLedgEntryNo);
        PostedAssemblyHeader.MODIFY;
      end;
    END;

    LOCAL PROCEDURE PostItemConsumption@2(AssemblyHeader@1003 : Record "Assembly Header";VAR AssemblyLine@1001 : Record "Assembly Line";PostingNoSeries@1007 : Code[20];QtyToConsume@1004 : Decimal;QtyToConsumeBase@1005 : Decimal;VAR ItemJnlPostLine@1002 : Codeunit "Item Jnl.-Post Line";VAR WhseJnlRegisterLine@1006 : Codeunit "Whse. Jnl.-Register Line";DocumentNo@1010 : Code[20];IsCorrection@1011 : Boolean;ApplyToEntryNo@1009 : Integer) : Integer;
    VAR
      ItemJnlLine@1000 : Record "Item Journal Line";
      AssemblyLineReserve@1008 : Codeunit "Assembly Line-Reserve";
    BEGIN
      with AssemblyLine do begin
        TESTFIELD(Type,Type::Item);

        ItemJnlLine.INIT;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Assembly Consumption";
        ItemJnlLine."Source Code" := SourceCode;
        ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Posted Assembly";
        ItemJnlLine."Document No." := DocumentNo;
        ItemJnlLine."Document Date" := PostingDate;
        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Assembly;
        ItemJnlLine."Order No." := "Document No.";
        ItemJnlLine."Order Line No." := "Line No." ;
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID" ;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
        ItemJnlLine."Source No." := AssembledItem."No.";

        ItemJnlLine."Posting Date" := PostingDate;
        ItemJnlLine."Posting No. Series" := PostingNoSeries;
        ItemJnlLine.Type := ItemJnlLine.Type::" ";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Inventory Posting Group" := "Inventory Posting Group";

        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine.Quantity := QtyToConsume;
        ItemJnlLine."Quantity (Base)" := QtyToConsumeBase;
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine.Description := Description;
        ItemJnlLine.VALIDATE("Location Code","Location Code");
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Unit Cost" := "Unit Cost";
        ItemJnlLine.Correction := IsCorrection;
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        UpdateItemCategoryAndGroupCode(ItemJnlLine);
      end;

      if IsCorrection then
        PostCorrectionItemJnLine(ItemJnlLine,AssemblyHeader,ItemJnlPostLine,DATABASE::"Posted Assembly Line",ApplyToEntryNo)
      else begin
        AssemblyLineReserve.TransferAsmLineToItemJnlLine(AssemblyLine,ItemJnlLine,ItemJnlLine."Quantity (Base)",false);
        PostItemJnlLine(ItemJnlLine,ItemJnlPostLine);
        AssemblyLineReserve.UpdateItemTrackingAfterPosting(AssemblyLine);
        PostWhseJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlPostLine,WhseJnlRegisterLine);
      end;
      exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemOutput@4(VAR AssemblyHeader@1001 : Record "Assembly Header";PostingNoSeries@1007 : Code[20];QtyToOutput@1004 : Decimal;QtyToOutputBase@1005 : Decimal;VAR ItemJnlPostLine@1002 : Codeunit "Item Jnl.-Post Line";VAR WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line";DocumentNo@1010 : Code[20];IsCorrection@1011 : Boolean;ApplyToEntryNo@1008 : Integer) : Integer;
    VAR
      ItemJnlLine@1000 : Record "Item Journal Line";
      AssemblyHeaderReserve@1006 : Codeunit "Assembly Header-Reserve";
    BEGIN
      with AssemblyHeader do begin
        ItemJnlLine.INIT;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Assembly Output";
        ItemJnlLine."Source Code" := SourceCode;
        ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Posted Assembly";
        ItemJnlLine."Document No." := DocumentNo;
        ItemJnlLine."Document Date" := PostingDate;
        ItemJnlLine."Document Line No." := 0;
        ItemJnlLine."Order No." := "No.";
        ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Assembly;
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID" ;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Order Line No." := 0;
        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
        ItemJnlLine."Source No." := AssembledItem."No.";

        ItemJnlLine."Posting Date" := PostingDate;
        ItemJnlLine."Posting No. Series" := PostingNoSeries;
        ItemJnlLine.Type := ItemJnlLine.Type::" ";
        ItemJnlLine."Item No." := "Item No.";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Inventory Posting Group" := "Inventory Posting Group";

        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine.Quantity := QtyToOutput;
        ItemJnlLine."Invoiced Quantity" := QtyToOutput;
        ItemJnlLine."Quantity (Base)" := QtyToOutputBase;
        ItemJnlLine."Invoiced Qty. (Base)" := QtyToOutputBase;
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine.Description := Description;
        ItemJnlLine.VALIDATE("Location Code","Location Code");
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Indirect Cost %" := "Indirect Cost %";
        ItemJnlLine."Overhead Rate" := "Overhead Rate" / "Qty. per Unit of Measure";
        ItemJnlLine."Unit Cost" := "Unit Cost";
        ItemJnlLine.VALIDATE("Unit Amount",
          ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
            GLSetup."Unit-Amount Rounding Precision"));
        ItemJnlLine.Correction := IsCorrection;
        UpdateItemCategoryAndGroupCode(ItemJnlLine);
      end;

      if IsCorrection then
        PostCorrectionItemJnLine(ItemJnlLine,AssemblyHeader,ItemJnlPostLine,DATABASE::"Posted Assembly Header",ApplyToEntryNo)
      else begin
        AssemblyHeaderReserve.TransferAsmHeaderToItemJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlLine."Quantity (Base)",false);
        PostItemJnlLine(ItemJnlLine,ItemJnlPostLine);
        AssemblyHeaderReserve.UpdateItemTrackingAfterPosting(AssemblyHeader);
        PostWhseJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlPostLine,WhseJnlRegisterLine);
      end;
      exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemJnlLine@52(VAR ItemJnlLine@1002 : Record "Item Journal Line";VAR ItemJnlPostLine@1003 : Codeunit "Item Jnl.-Post Line");
    VAR
      OrigItemJnlLine@1001 : Record "Item Journal Line";
      ItemShptEntry@1000 : Integer;
    BEGIN
      OrigItemJnlLine := ItemJnlLine;
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
      ItemShptEntry := ItemJnlLine."Item Shpt. Entry No.";
      ItemJnlLine := OrigItemJnlLine;
      ItemJnlLine."Item Shpt. Entry No." := ItemShptEntry;
    END;

    LOCAL PROCEDURE PostCorrectionItemJnLine@37(VAR ItemJnlLine@1001 : Record "Item Journal Line";AssemblyHeader@1007 : Record "Assembly Header";VAR ItemJnlPostLine@1008 : Codeunit "Item Jnl.-Post Line";SourceType@1002 : Integer;ApplyToEntry@1005 : Integer);
    VAR
      TempItemLedgEntry2@1000 : TEMPORARY Record "Item Ledger Entry";
      ATOLink@1003 : Record "Assemble-to-Order Link";
      TempItemLedgEntryInChain@1006 : TEMPORARY Record "Item Ledger Entry";
      ItemApplnEntry@1004 : Record "Item Application Entry";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
    BEGIN
      UndoPostingMgt.CollectItemLedgEntries(
        TempItemLedgEntry2,SourceType,ItemJnlLine."Document No.",ItemJnlLine."Document Line No.",
        ABS(ItemJnlLine."Quantity (Base)"),ApplyToEntry);

      if TempItemLedgEntry2.FINDSET then
        repeat
          ItemTrackingMgt.RetrieveAppliedExpirationDate(TempItemLedgEntry2);
          TempItemLedgEntry := TempItemLedgEntry2;
          TempItemLedgEntry.INSERT;

          if ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::"Assembly Consumption" then begin
            ItemJnlLine.Quantity := ROUND(TempItemLedgEntry.Quantity * TempItemLedgEntry."Qty. per Unit of Measure",0.00001);
            ItemJnlLine."Quantity (Base)" := TempItemLedgEntry.Quantity;

            ItemJnlLine."Applies-from Entry" := TempItemLedgEntry."Entry No.";
          end else begin
            ItemJnlLine.Quantity := -ROUND(TempItemLedgEntry.Quantity * TempItemLedgEntry."Qty. per Unit of Measure",0.00001);
            ItemJnlLine."Quantity (Base)" := -TempItemLedgEntry.Quantity;

            if (ItemJnlLine."Order Type" = ItemJnlLine."Order Type"::Assembly) and
               ATOLink.GET(ATOLink."Assembly Document Type"::Order,ItemJnlLine."Order No.")
            then begin
              TempItemLedgEntryInChain.RESET;
              TempItemLedgEntryInChain.DELETEALL;
              ItemApplnEntry.GetVisitedEntries(TempItemLedgEntry,TempItemLedgEntryInChain,true);

              ItemJnlLine."Applies-to Entry" := FindAppliesToATOUndoEntry(TempItemLedgEntryInChain);
            end else
              ItemJnlLine."Applies-to Entry" := TempItemLedgEntry."Entry No.";
          end;
          ItemJnlLine."Invoiced Quantity" := ItemJnlLine.Quantity;
          ItemJnlLine."Invoiced Qty. (Base)" := ItemJnlLine."Quantity (Base)";

          ItemJnlLine."Serial No." := TempItemLedgEntry."Serial No.";
          ItemJnlLine."Lot No." := TempItemLedgEntry."Lot No.";
          ItemJnlLine."Warranty Date" := TempItemLedgEntry."Warranty Date";
          ItemJnlLine."Item Expiration Date" := TempItemLedgEntry."Expiration Date";
          ItemJnlLine."Item Shpt. Entry No." := 0;

          ItemJnlPostLine.RunWithCheck(ItemJnlLine);
          PostWhseJnlLine(AssemblyHeader,ItemJnlLine,ItemJnlPostLine,WhseJnlRegisterLine);
        until TempItemLedgEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAppliesToATOUndoEntry@46(VAR ItemLedgEntryInChain@1000 : Record "Item Ledger Entry") : Integer;
    BEGIN
      with ItemLedgEntryInChain do begin
        RESET;
        SETCURRENTKEY("Item No.",Positive);
        SETRANGE(Positive,true);
        SETRANGE(Open,true);
        FINDFIRST;
        exit("Entry No.");
      end;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10];VAR Location@1001 : Record Location);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE PostWhseJnlLine@9(AssemblyHeader@1011 : Record "Assembly Header";ItemJnlLine@1000 : Record "Item Journal Line";VAR ItemJnlPostLine@1010 : Codeunit "Item Jnl.-Post Line";VAR WhseJnlRegisterLine@1001 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      Location@1002 : Record Location;
      TempWhseJnlLine@1004 : TEMPORARY Record "Warehouse Journal Line";
      TempWhseJnlLine2@1006 : TEMPORARY Record "Warehouse Journal Line";
      TempTrackingSpecification@1005 : TEMPORARY Record "Tracking Specification";
      ItemTrackingMgt@1007 : Codeunit "Item Tracking Management";
      WhseSNRequired@1008 : Boolean;
      WhseLNRequired@1009 : Boolean;
    BEGIN
      GetLocation(ItemJnlLine."Location Code",Location);
      if not Location."Bin Mandatory" then
        exit;

      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemJnlLine."Item No.",WhseSNRequired,WhseLNRequired,false);
      if WhseSNRequired or WhseLNRequired then
        if ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification) then
          if TempTrackingSpecification.FINDSET then
            repeat
              case ItemJnlLine."Entry Type" of
                ItemJnlLine."Entry Type"::"Assembly Consumption":
                  TempTrackingSpecification."Source Type" := DATABASE::"Assembly Line";
                ItemJnlLine."Entry Type"::"Assembly Output":
                  TempTrackingSpecification."Source Type" := DATABASE::"Assembly Header";
              end;
              TempTrackingSpecification."Source Subtype" := AssemblyHeader."Document Type";
              TempTrackingSpecification."Source ID" := AssemblyHeader."No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := ItemJnlLine."Order Line No.";
              TempTrackingSpecification.MODIFY;
            until TempTrackingSpecification.NEXT = 0;

      CreateWhseJnlLine(Location,TempWhseJnlLine,AssemblyHeader,ItemJnlLine);
      ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempTrackingSpecification,false);
      if TempWhseJnlLine2.FINDSET then
        repeat
          WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
        until TempWhseJnlLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@11(Location@1005 : Record Location;VAR WhseJnlLine@1000 : Record "Warehouse Journal Line";AssemblyHeader@1001 : Record "Assembly Header";ItemJnlLine@1002 : Record "Item Journal Line");
    VAR
      WMSManagement@1003 : Codeunit "WMS Management";
      WhseMgt@1004 : Codeunit "Whse. Management";
    BEGIN
      with ItemJnlLine do begin
        case "Entry Type" of
          "Entry Type"::"Assembly Consumption":
            WMSManagement.CheckAdjmtBin(Location,Quantity,true);
          "Entry Type"::"Assembly Output":
            WMSManagement.CheckAdjmtBin(Location,Quantity,false);
        end;

        WMSManagement.CreateWhseJnlLine(ItemJnlLine,0,WhseJnlLine,false);

        case "Entry Type" of
          "Entry Type"::"Assembly Consumption":
            WhseJnlLine."Source Type" := DATABASE::"Assembly Line";
          "Entry Type"::"Assembly Output":
            WhseJnlLine."Source Type" := DATABASE::"Assembly Header";
        end;
        WhseJnlLine."Source Subtype" := AssemblyHeader."Document Type";
        WhseJnlLine."Source Code" := SourceCode;
        WhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        TESTFIELD("Order Type","Order Type"::Assembly);
        WhseJnlLine."Source No." := "Order No.";
        WhseJnlLine."Source Line No." := "Order Line No.";
        WhseJnlLine."Reason Code" := "Reason Code";
        WhseJnlLine."Registering No. Series" := "Posting No. Series";
        WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::Assembly;
        WhseJnlLine."Whse. Document No." := "Order No.";
        WhseJnlLine."Whse. Document Line No." := "Order Line No.";
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::Assembly;
        WhseJnlLine."Reference No." := "Document No.";
        if Location."Directed Put-away and Pick" then
          WMSManagement.CalcCubageAndWeight(
            "Item No.","Unit of Measure Code",WhseJnlLine."Qty. (Absolute)",
            WhseJnlLine.Cubage,WhseJnlLine.Weight);
      end;
      WMSManagement.CheckWhseJnlLine(WhseJnlLine,0,0,false);
    END;

    LOCAL PROCEDURE PostResourceConsumption@6(AssemblyHeader@1006 : Record "Assembly Header";VAR AssemblyLine@1002 : Record "Assembly Line";PostingNoSeries@1005 : Code[20];QtyToConsume@1001 : Decimal;QtyToConsumeBase@1000 : Decimal;VAR ResJnlPostLine@1004 : Codeunit "Res. Jnl.-Post Line";VAR ItemJnlPostLine@1007 : Codeunit "Item Jnl.-Post Line";DocumentNo@1010 : Code[20];IsCorrection@1011 : Boolean);
    VAR
      ItemJnlLine@1003 : Record "Item Journal Line";
      ResJnlLine@1008 : Record "Res. Journal Line";
      TimeSheetMgt@1009 : Codeunit "Time Sheet Management";
    BEGIN
      with AssemblyLine do begin
        TESTFIELD(Type,Type::Resource);
        ItemJnlLine.INIT;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Assembly Output";
        ItemJnlLine."Source Code" := SourceCode;
        ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Posted Assembly";
        ItemJnlLine."Document No." := DocumentNo;
        ItemJnlLine."Document Date" := PostingDate;
        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Assembly;
        ItemJnlLine."Order No." := "Document No.";
        ItemJnlLine."Order Line No." := "Line No.";
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID" ;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
        ItemJnlLine."Source No." := AssemblyHeader."Item No.";

        ItemJnlLine."Posting Date" := PostingDate;
        ItemJnlLine."Posting No. Series" := PostingNoSeries;
        ItemJnlLine.Type := ItemJnlLine.Type::Resource;
        ItemJnlLine."No." := "No.";
        ItemJnlLine."Item No." := AssemblyHeader."Item No.";
        ItemJnlLine."Unit of Measure Code" := AssemblyHeader."Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := AssemblyHeader."Qty. per Unit of Measure";

        ItemJnlLine.VALIDATE("Location Code","Location Code");
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Inventory Posting Group" := "Inventory Posting Group";
        ItemJnlLine."Unit Cost" := "Unit Cost";
        ItemJnlLine."Qty. per Cap. Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Cap. Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine.Description := Description;
        ItemJnlLine.Quantity := QtyToConsume;
        ItemJnlLine."Quantity (Base)" := QtyToConsumeBase;
        ItemJnlLine.Correction := IsCorrection;
      end;
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);

      with ItemJnlLine do begin
        ResJnlLine.INIT;
        ResJnlLine."Posting Date" := "Posting Date";
        ResJnlLine."Document Date" := "Document Date";
        ResJnlLine."Reason Code" := "Reason Code";
        ResJnlLine."System-Created Entry" := true;
        ResJnlLine.VALIDATE("Resource No.","No.");
        ResJnlLine.Description := Description;
        ResJnlLine."Unit of Measure Code" := AssemblyLine."Unit of Measure Code";
        ResJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ResJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ResJnlLine."Dimension Set ID" := "Dimension Set ID";
        ResJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ResJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Usage;
        ResJnlLine."Document No." := "Document No.";
        ResJnlLine."Order Type" := ResJnlLine."Order Type"::Assembly;
        ResJnlLine."Order No." := "Order No.";
        ResJnlLine."Order Line No." := "Order Line No.";
        ResJnlLine."Line No." := "Document Line No.";
        ResJnlLine."External Document No." := "External Document No.";
        ResJnlLine.Quantity := QtyToConsume;
        ResJnlLine."Unit Cost" := AssemblyLine."Unit Cost";
        ResJnlLine."Total Cost" := AssemblyLine."Unit Cost" * ResJnlLine.Quantity;
        ResJnlLine."Source Code" := "Source Code";
        ResJnlLine."Posting No. Series" := "Posting No. Series";
        ResJnlLine."Qty. per Unit of Measure" := AssemblyLine."Qty. per Unit of Measure";
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      end;

      TimeSheetMgt.CreateTSLineFromAssemblyLine(AssemblyHeader,AssemblyLine,QtyToConsumeBase);
    END;

    LOCAL PROCEDURE InsertLineItemEntryRelation@5(VAR PostedAssemblyLine@1000 : Record "Posted Assembly Line";VAR ItemJnlPostLine@1004 : Codeunit "Item Jnl.-Post Line";ItemLedgEntryNo@1003 : Integer);
    VAR
      ItemEntryRelation@1002 : Record "Item Entry Relation";
      TempItemEntryRelation@1001 : TEMPORARY Record "Item Entry Relation";
    BEGIN
      if ItemJnlPostLine.CollectItemEntryRelation(TempItemEntryRelation) then begin
        if TempItemEntryRelation.FIND('-') then
          repeat
            ItemEntryRelation := TempItemEntryRelation;
            ItemEntryRelation.TransferFieldsPostedAsmLine(PostedAssemblyLine);
            ItemEntryRelation.INSERT;
          until TempItemEntryRelation.NEXT = 0;
      end else
        PostedAssemblyLine."Item Shpt. Entry No." := ItemLedgEntryNo;
    END;

    LOCAL PROCEDURE InsertHeaderItemEntryRelation@7(VAR PostedAssemblyHeader@1000 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1004 : Codeunit "Item Jnl.-Post Line";ItemLedgEntryNo@1003 : Integer);
    VAR
      ItemEntryRelation@1002 : Record "Item Entry Relation";
      TempItemEntryRelation@1001 : TEMPORARY Record "Item Entry Relation";
    BEGIN
      if ItemJnlPostLine.CollectItemEntryRelation(TempItemEntryRelation) then begin
        if TempItemEntryRelation.FIND('-') then
          repeat
            ItemEntryRelation := TempItemEntryRelation;
            ItemEntryRelation.TransferFieldsPostedAsmHeader(PostedAssemblyHeader);
            ItemEntryRelation.INSERT;
          until TempItemEntryRelation.NEXT = 0;
      end else
        PostedAssemblyHeader."Item Rcpt. Entry No." := ItemLedgEntryNo;
    END;

    [Internal]
    PROCEDURE Undo@21(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header";RecreateAsmOrder@1001 : Boolean);
    BEGIN
      CLEARALL;

      Window.OPEN(
        '#1#################################\\' +
        Text007 + '\\' +
        STRSUBSTNO(Text010,PostedAsmHeader."No."));

      ShowProgress := true;
      Window.UPDATE(1,STRSUBSTNO('%1 %2',PostedAsmHeader.TABLECAPTION,PostedAsmHeader."No."));

      PostedAsmHeader.CheckIsNotAsmToOrder;

      UndoInitPost(PostedAsmHeader);
      UndoPost(PostedAsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
      UndoFinalizePost(PostedAsmHeader,RecreateAsmOrder);

      COMMIT;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE UndoInitPost@22(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header");
    BEGIN
      with PostedAsmHeader do begin
        PostingDate := "Posting Date";

        CheckPossibleToUndo(PostedAsmHeader);

        GetSourceCode(IsAsmToOrder);

        TempItemLedgEntry.RESET;
        TempItemLedgEntry.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE UndoFinalizePost@26(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header";RecreateAsmOrder@1001 : Boolean);
    VAR
      AsmHeader@1004 : Record "Assembly Header";
    BEGIN
      MakeInvtAdjmt;

      if AsmHeader.GET(AsmHeader."Document Type"::Order,PostedAsmHeader."Order No.") then
        UpdateAsmOrderWithUndo(PostedAsmHeader)
      else
        if RecreateAsmOrder then
          RecreateAsmOrderWithUndo(PostedAsmHeader);
    END;

    LOCAL PROCEDURE UndoPost@27(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1004 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1003 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1002 : Codeunit "Whse. Jnl.-Register Line");
    BEGIN
      AssembledItem.GET(PostedAsmHeader."Item No.");
      UndoPostHeader(PostedAsmHeader,ItemJnlPostLine,WhseJnlRegisterLine);
      UndoPostLines(PostedAsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
    END;

    LOCAL PROCEDURE UndoPostLines@31(PostedAsmHeader@1001 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1007 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1006 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      PostedAsmLine@1005 : Record "Posted Assembly Line";
      AsmHeader@1002 : Record "Assembly Header";
      AsmLine@1000 : Record "Assembly Line";
      LineCounter@1004 : Integer;
    BEGIN
      AsmHeader.TRANSFERFIELDS(PostedAsmHeader);
      AsmHeader."Document Type" := AsmHeader."Document Type"::Order;
      AsmHeader."No." := PostedAsmHeader."Order No.";

      with PostedAsmLine do begin
        RESET;
        SETRANGE("Document No.",PostedAsmHeader."No.");
        SortPostedLines(PostedAsmLine);

        LineCounter := 0;
        if FINDSET then
          repeat
            AsmLine.TRANSFERFIELDS(PostedAsmLine);
            AsmLine."Document Type" := AsmHeader."Document Type"::Order;
            AsmLine."Document No." := PostedAsmHeader."Order No.";

            LineCounter := LineCounter + 1;
            if ShowProgress then
              Window.UPDATE(2,LineCounter);

            if "Quantity (Base)" <> 0 then begin
              case Type of
                Type::Item:
                  PostItemConsumption(
                    AsmHeader,
                    AsmLine,
                    PostedAsmHeader."No. Series",
                    -Quantity,
                    -"Quantity (Base)",ItemJnlPostLine,WhseJnlRegisterLine,"Document No.",true,"Item Shpt. Entry No.");
                Type::Resource:
                  PostResourceConsumption(
                    AsmHeader,
                    AsmLine,
                    PostedAsmHeader."No. Series",
                    -Quantity,
                    -"Quantity (Base)",
                    ResJnlPostLine,ItemJnlPostLine,"Document No.",true);
              end;
              InsertLineItemEntryRelation(PostedAsmLine,ItemJnlPostLine,0);

              MODIFY;
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UndoPostHeader@36(VAR PostedAsmHeader@1001 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1003 : Codeunit "Item Jnl.-Post Line";VAR WhseJnlRegisterLine@1002 : Codeunit "Whse. Jnl.-Register Line");
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      with PostedAsmHeader do begin
        AsmHeader.TRANSFERFIELDS(PostedAsmHeader);
        AsmHeader."Document Type" := AsmHeader."Document Type"::Order;
        AsmHeader."No." := "Order No.";

        PostItemOutput(
          AsmHeader,"No. Series",-Quantity,-"Quantity (Base)",ItemJnlPostLine,WhseJnlRegisterLine,"No.",true,"Item Rcpt. Entry No.");
        InsertHeaderItemEntryRelation(PostedAsmHeader,ItemJnlPostLine,0);

        Reversed := true;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE SumCapQtyPosted@39(OrderNo@1001 : Code[20];OrderLineNo@1002 : Integer) : Decimal;
    VAR
      CapLedgEntry@1000 : Record "Capacity Ledger Entry";
    BEGIN
      with CapLedgEntry do begin
        SETCURRENTKEY("Order Type","Order No.","Order Line No.");
        SETRANGE("Order Type","Order Type"::Assembly);
        SETRANGE("Order No.",OrderNo);
        SETRANGE("Order Line No.",OrderLineNo);
        CALCSUMS(Quantity);
        exit(Quantity);
      end;
    END;

    LOCAL PROCEDURE SumItemQtyPosted@35(OrderNo@1001 : Code[20];OrderLineNo@1002 : Integer) : Decimal;
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
    BEGIN
      with ItemLedgEntry do begin
        SETCURRENTKEY("Order Type","Order No.","Order Line No.");
        SETRANGE("Order Type","Order Type"::Assembly);
        SETRANGE("Order No.",OrderNo);
        SETRANGE("Order Line No.",OrderLineNo);
        CALCSUMS(Quantity);
        exit(Quantity);
      end;
    END;

    LOCAL PROCEDURE UpdateAsmOrderWithUndo@44(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header");
    VAR
      AsmHeader@1004 : Record "Assembly Header";
      AsmLine@1003 : Record "Assembly Line";
      PostedAsmLine@1002 : Record "Posted Assembly Line";
    BEGIN
      with AsmHeader do begin
        GET("Document Type"::Order,PostedAsmHeader."Order No.");
        "Assembled Quantity" -= PostedAsmHeader.Quantity;
        "Assembled Quantity (Base)" -= PostedAsmHeader."Quantity (Base)";
        InitRemainingQty;
        InitQtyToAssemble;
        MODIFY;

        RestoreItemTracking(TempItemLedgEntry,"No.",0,DATABASE::"Assembly Header","Document Type","Due Date",0D);
        VerifyAsmHeaderReservAfterUndo(AsmHeader);
      end;

      PostedAsmLine.SETRANGE("Document No.",PostedAsmHeader."No.");
      PostedAsmLine.SETFILTER("Quantity (Base)",'<>0');
      if PostedAsmLine.FINDSET then
        repeat
          with AsmLine do begin
            GET(AsmHeader."Document Type",AsmHeader."No.",PostedAsmLine."Line No.");
            "Consumed Quantity" -= PostedAsmLine.Quantity;
            "Consumed Quantity (Base)" -= PostedAsmLine."Quantity (Base)";
            if "Qty. Picked (Base)" <> 0 then begin
              "Qty. Picked" -= PostedAsmLine.Quantity;
              "Qty. Picked (Base)" -= PostedAsmLine."Quantity (Base)";
            end;

            InitRemainingQty;
            InitQtyToConsume;
            MODIFY;

            RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
            VerifyAsmLineReservAfterUndo(AsmLine);
          end;
        until PostedAsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RecreateAsmOrderWithUndo@45(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header");
    VAR
      AsmHeader@1004 : Record "Assembly Header";
      AsmLine@1003 : Record "Assembly Line";
      PostedAsmLine@1002 : Record "Posted Assembly Line";
      AsmCommentLine@1008 : Record "Assembly Comment Line";
    BEGIN
      with AsmHeader do begin
        INIT;
        TRANSFERFIELDS(PostedAsmHeader);
        "Document Type" := "Document Type"::Order;
        "No." := PostedAsmHeader."Order No.";

        "Assembled Quantity (Base)" := SumItemQtyPosted("No.",0);
        "Assembled Quantity" := ROUND("Assembled Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
        Quantity := PostedAsmHeader.Quantity + "Assembled Quantity";
        "Quantity (Base)" := PostedAsmHeader."Quantity (Base)" + "Assembled Quantity (Base)";
        InitRemainingQty;
        InitQtyToAssemble;
        INSERT;

        CopyCommentLines(
          AsmCommentLine."Document Type"::"Posted Assembly","Document Type",
          PostedAsmHeader."No.","No.");

        RestoreItemTracking(TempItemLedgEntry,"No.",0,DATABASE::"Assembly Header","Document Type","Due Date",0D);
        VerifyAsmHeaderReservAfterUndo(AsmHeader);
      end;

      PostedAsmLine.SETRANGE("Document No.",PostedAsmHeader."No.");
      if PostedAsmLine.FINDSET then
        repeat
          with AsmLine do begin
            INIT;
            TRANSFERFIELDS(PostedAsmLine);
            "Document Type" := "Document Type"::Order;
            "Document No." := PostedAsmLine."Order No.";
            "Line No." := PostedAsmLine."Order Line No.";

            if PostedAsmLine."Quantity (Base)" <> 0 then begin
              if Type = Type::Item then
                "Consumed Quantity (Base)" := -SumItemQtyPosted("Document No.","Line No.")
              else
                "Consumed Quantity (Base)" := SumCapQtyPosted("Document No.","Line No.");

              "Consumed Quantity" := ROUND("Consumed Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
              Quantity := PostedAsmLine.Quantity + "Consumed Quantity";
              "Quantity (Base)" := PostedAsmLine."Quantity (Base)" + "Consumed Quantity (Base)";
              if Type = Type::Item then begin
                "Qty. Picked" := "Consumed Quantity";
                "Qty. Picked (Base)" := "Consumed Quantity (Base)";
              end;
              InitRemainingQty;
              InitQtyToConsume;
            end;
            INSERT;

            RestoreItemTracking(TempItemLedgEntry,"Document No.","Line No.",DATABASE::"Assembly Line","Document Type",0D,"Due Date");
            VerifyAsmLineReservAfterUndo(AsmLine);
          end;
        until PostedAsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyAsmHeaderReservAfterUndo@55(VAR AsmHeader@1004 : Record "Assembly Header");
    VAR
      xAsmHeader@1001 : Record "Assembly Header";
      AsmHeaderReserve@1002 : Codeunit "Assembly Header-Reserve";
    BEGIN
      xAsmHeader := AsmHeader;
      xAsmHeader."Quantity (Base)" := 0;
      AsmHeaderReserve.VerifyQuantity(AsmHeader,xAsmHeader);
    END;

    LOCAL PROCEDURE VerifyAsmLineReservAfterUndo@56(VAR AsmLine@1001 : Record "Assembly Line");
    VAR
      xAsmLine@1000 : Record "Assembly Line";
      AsmLineReserve@1002 : Codeunit "Assembly Line-Reserve";
    BEGIN
      xAsmLine := AsmLine;
      xAsmLine."Quantity (Base)" := 0;
      AsmLineReserve.VerifyQuantity(AsmLine,xAsmLine);
    END;

    LOCAL PROCEDURE GetSourceCode@29(IsATO@1001 : Boolean);
    VAR
      SourceCodeSetup@1000 : Record "Source Code Setup";
    BEGIN
      SourceCodeSetup.GET;
      if IsATO then
        SourceCode := SourceCodeSetup.Sales
      else
        SourceCode := SourceCodeSetup.Assembly;
    END;

    LOCAL PROCEDURE CheckPossibleToUndo@32(PostedAsmHeader@1000 : Record "Posted Assembly Header") : Boolean;
    VAR
      AsmHeader@1001 : Record "Assembly Header";
      PostedAsmLine@1002 : Record "Posted Assembly Line";
      AsmLine@1003 : Record "Assembly Line";
      TempItemLedgEntry@1005 : TEMPORARY Record "Item Ledger Entry";
    BEGIN
      with PostedAsmHeader do begin
        TESTFIELD(Reversed,false);
        UndoPostingMgt.TestAsmHeader(PostedAsmHeader);
        UndoPostingMgt.CollectItemLedgEntries(
          TempItemLedgEntry,DATABASE::"Posted Assembly Header","No.",0,"Quantity (Base)","Item Rcpt. Entry No.");
        UndoPostingMgt.CheckItemLedgEntries(TempItemLedgEntry,0);
      end;

      with PostedAsmLine do begin
        SETRANGE("Document No.",PostedAsmHeader."No.");
        repeat
          if (Type = Type::Item) and ("Item Shpt. Entry No." <> 0) then begin
            UndoPostingMgt.TestAsmLine(PostedAsmLine);
            UndoPostingMgt.CollectItemLedgEntries(
              TempItemLedgEntry,DATABASE::"Posted Assembly Line","Document No.","Line No.","Quantity (Base)","Item Shpt. Entry No.");
            UndoPostingMgt.CheckItemLedgEntries(TempItemLedgEntry,"Line No.");
          end;
        until NEXT = 0;
      end;

      if not AsmHeader.GET(AsmHeader."Document Type"::Order,PostedAsmHeader."Order No.") then
        exit(true);

      with AsmHeader do begin
        TESTFIELD("Variant Code",PostedAsmHeader."Variant Code");
        TESTFIELD("Location Code",PostedAsmHeader."Location Code");
        TESTFIELD("Bin Code",PostedAsmHeader."Bin Code");
      end;

      with AsmLine do begin
        SETRANGE("Document Type",AsmHeader."Document Type");
        SETRANGE("Document No.",AsmHeader."No.");

        if PostedAsmLine.COUNT <> COUNT then
          ERROR(Text011,PostedAsmHeader."No.",AsmHeader."No.");

        FINDSET;
        PostedAsmLine.FINDSET;
        repeat
          TESTFIELD(Type,PostedAsmLine.Type);
          TESTFIELD("No.",PostedAsmLine."No.");
          TESTFIELD("Variant Code",PostedAsmLine."Variant Code");
          TESTFIELD("Location Code",PostedAsmLine."Location Code");
          TESTFIELD("Bin Code",PostedAsmLine."Bin Code");
        until (PostedAsmLine.NEXT = 0) and (NEXT = 0);
      end;
    END;

    LOCAL PROCEDURE RestoreItemTracking@38(VAR ItemLedgEntry@1000 : Record "Item Ledger Entry";OrderNo@1007 : Code[20];OrderLineNo@1008 : Integer;SourceType@1005 : Integer;DocType@1006 : Option;RcptDate@1002 : Date;ShptDate@1003 : Date);
    VAR
      AsmHeader@1004 : Record "Assembly Header";
      ReservEntry@1011 : Record "Reservation Entry";
      ATOLink@1012 : Record "Assemble-to-Order Link";
      SalesLine@1013 : Record "Sales Line";
      CreateReservEntry@1001 : Codeunit "Create Reserv. Entry";
      IsATOHeader@1010 : Boolean;
      ReservStatus@1009 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      with ItemLedgEntry do begin
        AsmHeader.GET(AsmHeader."Document Type"::Order,OrderNo);
        IsATOHeader := (OrderLineNo = 0) and AsmHeader.IsAsmToOrder;

        RESET;
        SETRANGE("Order Type","Order Type"::Assembly);
        SETRANGE("Order No.",OrderNo);
        SETRANGE("Order Line No.",OrderLineNo);
        if FINDSET then
          repeat
            if TrackingExists then begin
              CreateReservEntry.SetDates("Warranty Date","Expiration Date");
              CreateReservEntry.SetQtyToHandleAndInvoice(Quantity,Quantity);
              CreateReservEntry.SetItemLedgEntryNo("Entry No.");
              CreateReservEntry.CreateReservEntryFor(
                SourceType,DocType,"Order No.",'',0,"Order Line No.",
                "Qty. per Unit of Measure",0,ABS(Quantity),
                "Serial No.","Lot No.");

              if IsATOHeader then begin
                ATOLink.GET(AsmHeader."Document Type",AsmHeader."No.");
                ATOLink.TESTFIELD(Type,ATOLink.Type::Sale);
                SalesLine.GET(ATOLink."Document Type",ATOLink."Document No.",ATOLink."Document Line No.");

                CreateReservEntry.SetDisallowCancellation(true);
                CreateReservEntry.SetBinding(ReservEntry.Binding::"Order-to-Order");
                CreateReservEntry.CreateReservEntryFrom(
                  DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",'',0,SalesLine."Line No.",
                  "Qty. per Unit of Measure","Serial No.","Lot No.");
                ReservStatus := ReservStatus::Reservation;
              end else
                ReservStatus := ReservStatus::Surplus;
              CreateReservEntry.CreateEntry(
                "Item No.","Variant Code","Location Code",'',RcptDate,ShptDate,0,ReservStatus);
            end;
          until NEXT = 0;
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE InitPostATO@12(VAR AssemblyHeader@1000 : Record "Assembly Header");
    BEGIN
      if AssemblyHeader.IsAsmToOrder then
        InitPost(AssemblyHeader);
    END;

    [External]
    PROCEDURE PostATO@15(VAR AssemblyHeader@1000 : Record "Assembly Header";VAR ItemJnlPostLine@1001 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1002 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line");
    BEGIN
      if AssemblyHeader.IsAsmToOrder then
        Post(AssemblyHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
    END;

    [External]
    PROCEDURE FinalizePostATO@16(VAR AssemblyHeader@1000 : Record "Assembly Header");
    BEGIN
      if AssemblyHeader.IsAsmToOrder then
        FinalizePost(AssemblyHeader);
    END;

    [External]
    PROCEDURE UndoInitPostATO@42(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header");
    BEGIN
      if PostedAsmHeader.IsAsmToOrder then
        UndoInitPost(PostedAsmHeader);
    END;

    [Internal]
    PROCEDURE UndoPostATO@41(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header";VAR ItemJnlPostLine@1001 : Codeunit "Item Jnl.-Post Line";VAR ResJnlPostLine@1002 : Codeunit "Res. Jnl.-Post Line";VAR WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line");
    BEGIN
      if PostedAsmHeader.IsAsmToOrder then
        UndoPost(PostedAsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);
    END;

    [Internal]
    PROCEDURE UndoFinalizePostATO@40(VAR PostedAsmHeader@1000 : Record "Posted Assembly Header");
    BEGIN
      if PostedAsmHeader.IsAsmToOrder then
        UndoFinalizePost(PostedAsmHeader,false);
    END;

    LOCAL PROCEDURE MakeInvtAdjmt@43();
    VAR
      InvtSetup@1001 : Record "Inventory Setup";
      InvtAdjmt@1000 : Codeunit "Inventory Adjustment";
    BEGIN
      InvtSetup.GET;
      if InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      then begin
        InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.MakeMultiLevelAdjmt;
      end;
    END;

    LOCAL PROCEDURE DeleteWhseRequest@47(AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      WhseRqst@1001 : Record "Warehouse Request";
    BEGIN
      with WhseRqst do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE("Source Type",DATABASE::"Assembly Line");
        SETRANGE("Source Subtype",AssemblyHeader."Document Type");
        SETRANGE("Source No.",AssemblyHeader."No.");
        if not ISEMPTY then
          DELETEALL(true);
      end;
    END;

    [External]
    PROCEDURE UpdateBlanketATO@101(xBlanketOrderSalesLine@1001 : Record "Sales Line";BlanketOrderSalesLine@1002 : Record "Sales Line");
    VAR
      AsmHeader@1003 : Record "Assembly Header";
      QuantityDiff@1005 : Decimal;
      QuantityDiffBase@1006 : Decimal;
    BEGIN
      if BlanketOrderSalesLine.AsmToOrderExists(AsmHeader) then begin
        QuantityDiff := BlanketOrderSalesLine."Quantity Shipped" - xBlanketOrderSalesLine."Quantity Shipped";
        QuantityDiffBase := BlanketOrderSalesLine."Qty. Shipped (Base)" - xBlanketOrderSalesLine."Qty. Shipped (Base)";

        with AsmHeader do begin
          "Assembled Quantity" += QuantityDiff;
          "Assembled Quantity (Base)" += QuantityDiffBase;
          InitRemainingQty;
          InitQtyToAssemble;
          MODIFY(true);
        end;
        UpdateBlanketATOLines(AsmHeader,QuantityDiff);
      end;
    END;

    LOCAL PROCEDURE UpdateBlanketATOLines@109(AsmHeader@1001 : Record "Assembly Header";QuantityDiff@1000 : Decimal);
    VAR
      AsmLine@1002 : Record "Assembly Line";
      UOMMgt@1003 : Codeunit "Unit of Measure Management";
    BEGIN
      with AsmLine do begin
        SETRANGE("Document Type",AsmHeader."Document Type");
        SETRANGE("Document No.",AsmHeader."No.");
        if FINDSET then
          repeat
            "Consumed Quantity" += UOMMgt.RoundQty(QuantityDiff * "Quantity per");
            "Consumed Quantity (Base)" += UOMMgt.CalcBaseQty(QuantityDiff * "Quantity per","Qty. per Unit of Measure");
            InitRemainingQty;
            InitQtyToConsume;
            MODIFY(true);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateItemCategoryAndGroupCode@48(VAR ItemJnlLine@1002 : Record "Item Journal Line");
    VAR
      Item@1001 : Record Item;
    BEGIN
      Item.GET(ItemJnlLine."Item No.");
      ItemJnlLine."Item Category Code" := Item."Item Category Code";
      ItemJnlLine."Product Group Code" := Item."Product Group Code";
    END;

    BEGIN
    END.
  }
}

