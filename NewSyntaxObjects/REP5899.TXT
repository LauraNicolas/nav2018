OBJECT Report 5899 Calculate Inventory Value
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Inventory Value;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 8129;    ;DataItem;Item                ;
               DataItemTable=Item;
               DataItemTableView=SORTING("No.") WHERE(Type=CONST(Inventory));
               OnPreDataItem=VAR
                               TempErrorBuf@1002 : TEMPORARY Record "Error Buffer";
                             BEGIN
                               ItemJnlTemplate.GET(ItemJnlLine."Journal Template Name");
                               ItemJnlTemplate.TESTFIELD(Type,ItemJnlTemplate.Type::Revaluation);

                               ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
                               if NextDocNo = '' then begin
                                 if ItemJnlBatch."No. Series" <> '' then begin
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlLine."Journal Template Name");
                                   ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlLine."Journal Batch Name");
                                   if not ItemJnlLine.FINDFIRST then
                                     NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,false);
                                   ItemJnlLine.INIT;
                                 end;
                                 if NextDocNo = '' then
                                   ERROR(Text003);
                               end;

                               CalcInvtValCheck.SetProperties(PostingDate,CalculatePer,ByLocation,ByVariant,ShowDialog,false);
                               CalcInvtValCheck.RunCheck(Item,TempErrorBuf);

                               ItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");

                               NextLineNo := 0;

                               if ShowDialog then
                                 Window.OPEN(Text010,"No.");

                               GLSetup.GET;
                               SourceCodeSetup.GET;

                               if CalcBase in [CalcBase::"Standard Cost - Assembly List",CalcBase::"Standard Cost - Manufacturing"] then begin
                                 CalculateStdCost.SetProperties(PostingDate,true,CalcBase = CalcBase::"Standard Cost - Assembly List",false,'',true);
                                 CalculateStdCost.CalcItems(Item,NewStdCostItem);
                                 CLEAR(CalculateStdCost);
                               end;
                             END;

               OnAfterGetRecord=BEGIN
                                  if ShowDialog then
                                    Window.UPDATE;

                                  if (CalculatePer = CalculatePer::Item) and ("Costing Method" = "Costing Method"::Average) then begin
                                    CalendarPeriod."Period Start" := PostingDate;
                                    AvgCostAdjmtPoint."Valuation Date" := PostingDate;
                                    AvgCostAdjmtPoint.GetValuationPeriod(CalendarPeriod);
                                    if PostingDate <> CalendarPeriod."Period End" then
                                      ERROR(Text011,"No.",PostingDate,CalendarPeriod."Period End");
                                  end;

                                  ValJnlBuffer.RESET;
                                  ValJnlBuffer.DELETEALL;
                                  IncludeExpectedCost := ("Costing Method" = "Costing Method"::Standard) and (CalculatePer = CalculatePer::Item);
                                  ItemLedgEntry.SETRANGE("Item No.","No.");
                                  ItemLedgEntry.SETRANGE(Positive,true);
                                  COPYFILTER("Location Filter",ItemLedgEntry."Location Code");
                                  COPYFILTER("Variant Filter",ItemLedgEntry."Variant Code");
                                  if ItemLedgEntry.FIND('-') then
                                    repeat
                                      if IncludeEntryInCalc(ItemLedgEntry,PostingDate,IncludeExpectedCost) then begin
                                        RemQty := ItemLedgEntry.CalculateRemQuantity(ItemLedgEntry."Entry No.",PostingDate);
                                        case CalculatePer of
                                          CalculatePer::"Item Ledger Entry":
                                            InsertItemJnlLine(
                                              ItemLedgEntry."Entry Type",ItemLedgEntry."Item No.",
                                              ItemLedgEntry."Variant Code",ItemLedgEntry."Location Code",RemQty,
                                              ItemLedgEntry.CalculateRemInventoryValue(ItemLedgEntry."Entry No.",ItemLedgEntry.Quantity,RemQty,false,PostingDate),
                                              ItemLedgEntry."Entry No.",0);
                                          CalculatePer::Item:
                                            InsertValJnlBuffer(
                                              ItemLedgEntry."Item No.",ItemLedgEntry."Variant Code",
                                              ItemLedgEntry."Location Code",RemQty,
                                              ItemLedgEntry.CalculateRemInventoryValue(ItemLedgEntry."Entry No.",ItemLedgEntry.Quantity,RemQty,
                                                IncludeExpectedCost and not ItemLedgEntry."Completely Invoiced",PostingDate));
                                        end;
                                      end;
                                    until ItemLedgEntry.NEXT = 0;

                                  if CalculatePer = CalculatePer::Item then
                                    if (GETFILTER("Location Filter") <> '') or ByLocation then begin
                                      ByLocation2 := true;
                                      COPYFILTER("Location Filter",Location.Code);
                                      if Location.FIND('-') then begin
                                        CLEAR(ValJnlBuffer);
                                        ValJnlBuffer.SETCURRENTKEY("Item No.","Location Code","Variant Code");
                                        ValJnlBuffer.SETRANGE("Item No.","No.");
                                        repeat
                                          ValJnlBuffer.SETRANGE("Location Code",Location.Code);
                                          if (GETFILTER("Variant Filter") <> '') or ByVariant then begin
                                            ByVariant2 := true;
                                            ItemVariant.SETRANGE("Item No.","No.");
                                            COPYFILTER("Variant Filter",ItemVariant.Code);
                                            if ItemVariant.FIND('-') then
                                              repeat
                                                ValJnlBuffer.SETRANGE("Variant Code",ItemVariant.Code);
                                                Calculate(Item,ItemVariant.Code,Location.Code);
                                              until ItemVariant.NEXT = 0;
                                            ValJnlBuffer.SETRANGE("Variant Code",'');
                                            Calculate(Item,'',Location.Code);
                                          end else
                                            Calculate(Item,'',Location.Code);
                                        until Location.NEXT = 0;
                                      end;
                                      ValJnlBuffer.SETRANGE("Location Code",'');
                                      if ByVariant then begin
                                        ItemVariant.SETRANGE("Item No.","No.");
                                        COPYFILTER("Variant Filter",ItemVariant.Code);
                                        if ItemVariant.FIND('-') then
                                          repeat
                                            ValJnlBuffer.SETRANGE("Variant Code",ItemVariant.Code);
                                            Calculate(Item,ItemVariant.Code,'');
                                          until ItemVariant.NEXT = 0;
                                        ValJnlBuffer.SETRANGE("Variant Code",'');
                                        Calculate(Item,'','');
                                      end else
                                        Calculate(Item,'','');
                                    end else
                                      if (GETFILTER("Variant Filter") <> '') or ByVariant then begin
                                        ByVariant2 := true;
                                        ItemVariant.SETRANGE("Item No.","No.");
                                        COPYFILTER("Variant Filter",ItemVariant.Code);
                                        if ItemVariant.FIND('-') then begin
                                          ValJnlBuffer.RESET;
                                          ValJnlBuffer.SETCURRENTKEY("Item No.","Variant Code");
                                          ValJnlBuffer.SETRANGE("Item No.","No.");
                                          repeat
                                            ValJnlBuffer.SETRANGE("Variant Code",ItemVariant.Code);
                                            Calculate(Item,ItemVariant.Code,'');
                                          until ItemVariant.NEXT = 0;
                                        end;
                                        ValJnlBuffer.SETRANGE("Location Code");
                                        ValJnlBuffer.SETRANGE("Variant Code",'');
                                        Calculate(Item,'','');
                                      end else begin
                                        ValJnlBuffer.RESET;
                                        ValJnlBuffer.SETCURRENTKEY("Item No.");
                                        ValJnlBuffer.SETRANGE("Item No.","No.");
                                        Calculate(Item,'','');
                                      end;
                                END;

               OnPostDataItem=VAR
                                SKU@1001 : Record "Stockkeeping Unit";
                                ItemCostMgt@1002 : Codeunit ItemCostManagement;
                              BEGIN
                                if not UpdStdCost then
                                  exit;

                                if ByLocation then
                                  COPYFILTER("Location Filter",SKU."Location Code");
                                if ByVariant then
                                  COPYFILTER("Variant Filter",SKU."Variant Code");

                                NewStdCostItem.COPYFILTERS(Item);
                                if NewStdCostItem.FIND('-') then
                                  repeat
                                    if not UpdatedStdCostSKU.GET('',NewStdCostItem."No.",'') then
                                      ItemCostMgt.UpdateStdCostShares(NewStdCostItem);

                                    SKU.SETRANGE("Item No.",NewStdCostItem."No.");
                                    if SKU.FIND('-') then
                                      repeat
                                        if not UpdatedStdCostSKU.GET(SKU."Location Code",NewStdCostItem."No.",SKU."Variant Code") then begin
                                          SKU.VALIDATE("Standard Cost",NewStdCostItem."Standard Cost");
                                          SKU.MODIFY;
                                        end;
                                      until SKU.NEXT = 0;
                                  until NewStdCostItem.NEXT = 0;
                              END;

               ReqFilterFields="No.","Costing Method","Location Filter","Variant Filter" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               UpdStdCostEnable := true;
               CalcBaseEnable := true;
               ByVariantEnable := true;
               ByLocationEnable := true;
             END;

      OnOpenPage=BEGIN
                   if PostingDate = 0D then
                     PostingDate := WORKDATE;
                   ValidatePostingDate;

                   ValidateCalcLevel;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 15  ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate }

      { 1   ;2   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NextDocNo }

      { 3   ;2   ;Field     ;
                  Name=Calculate Per;
                  CaptionML=ENU=Calculate Per;
                  ToolTipML=ENU=Specifies if you want to sum up the inventory value per item ledger entry or per item.;
                  OptionCaptionML=ENU=Item Ledger Entry,Item;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalculatePer;
                  OnValidate=BEGIN
                               if CalculatePer = CalculatePer::Item then
                                 ItemCalculatePerOnValidate;
                               if CalculatePer = CalculatePer::"Item Ledger Entry" then
                                 ItemLedgerEntryCalculatePerOnV;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=By Location;
                  CaptionML=ENU=By Location;
                  ToolTipML=ENU=Specifies whether to calculate inventory by location.;
                  ApplicationArea=#Location;
                  SourceExpr=ByLocation;
                  Enabled=ByLocationEnable }

      { 12  ;2   ;Field     ;
                  Name=By Variant;
                  CaptionML=ENU=By Variant;
                  ToolTipML=ENU=Specifies the item variants that you want the batch job to consider.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ByVariant;
                  Enabled=ByVariantEnable }

      { 14  ;2   ;Field     ;
                  Name=UpdStdCost;
                  CaptionML=ENU=Update Standard Cost;
                  ToolTipML=ENU=Specifies if you want the items' standard cost to be updated according to the calculated inventory value.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UpdStdCost;
                  Enabled=UpdStdCostEnable }

      { 5   ;2   ;Field     ;
                  Name=CalcBase;
                  CaptionML=ENU=Calculation Base;
                  ToolTipML=ENU=Specifies if the revaluation journal will suggest a new value for the Unit Cost (Revalued) field.;
                  OptionCaptionML=ENU=" ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing";
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalcBase;
                  Enabled=CalcBaseEnable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You must enter a document number.';
      Text010@1010 : TextConst 'ENU=Processing items #1##########';
      NewStdCostItem@1019 : TEMPORARY Record Item;
      UpdatedStdCostSKU@1020 : TEMPORARY Record "Stockkeeping Unit";
      ItemJnlBatch@1021 : Record "Item Journal Batch";
      ItemJnlLine@1022 : Record "Item Journal Line";
      ValJnlBuffer@1024 : TEMPORARY Record "Item Journal Buffer";
      ItemJnlTemplate@1025 : Record "Item Journal Template";
      ItemLedgEntry@1026 : Record "Item Ledger Entry";
      GLSetup@1027 : Record "General Ledger Setup";
      SourceCodeSetup@1028 : Record "Source Code Setup";
      Location@1029 : Record Location;
      ItemVariant@1030 : Record "Item Variant";
      AvgCostAdjmtPoint@1002 : Record "Avg. Cost Adjmt. Entry Point";
      CalendarPeriod@1005 : Record Date;
      CalcInvtValCheck@1004 : Codeunit "Calc. Inventory Value-Check";
      NoSeriesMgt@1031 : Codeunit NoSeriesManagement;
      CalculateStdCost@1032 : Codeunit "Calculate Standard Cost";
      Window@1033 : Dialog;
      CalculatePer@1034 : '"Item Ledger Entry",Item';
      CalcBase@1035 : '" ","Last Direct Unit Cost","Standard Cost - Assembly List","Standard Cost - Manufacturing"';
      PostingDate@1036 : Date;
      NextDocNo@1037 : Code[20];
      AverageUnitCostLCY@1038 : Decimal;
      RemQty@1040 : Decimal;
      NextLineNo@1041 : Integer;
      NextLineNo2@1042 : Integer;
      ByLocation@1043 : Boolean;
      ByVariant@1044 : Boolean;
      ByLocation2@1045 : Boolean;
      ByVariant2@1046 : Boolean;
      UpdStdCost@1048 : Boolean;
      ShowDialog@1000 : Boolean;
      IncludeExpectedCost@1001 : Boolean;
      Text011@1006 : TextConst 'ENU=You cannot revalue by Calculate Per Item for item %1 using posting date %2. You can only use the posting date %3 for this period.';
      ByLocationEnable@19076268 : Boolean INDATASET;
      ByVariantEnable@19005255 : Boolean INDATASET;
      CalcBaseEnable@19032955 : Boolean INDATASET;
      UpdStdCostEnable@19076759 : Boolean INDATASET;
      DuplWarningQst@1008 : TextConst 'ENU=Duplicate Revaluation Journals will be generated.\Do you want to continue?';
      HideDuplWarning@1009 : Boolean;

    LOCAL PROCEDURE IncludeEntryInCalc@9(ItemLedgEntry@1000 : Record "Item Ledger Entry";PostingDate@1001 : Date;IncludeExpectedCost@1002 : Boolean) : Boolean;
    BEGIN
      with ItemLedgEntry do begin
        if IncludeExpectedCost then
          exit("Posting Date" in [0D..PostingDate]);
        exit("Completely Invoiced" and ("Last Invoice Date" in [0D..PostingDate]));
      end;
    END;

    PROCEDURE SetItemJnlLine@1(VAR NewItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      ItemJnlLine := NewItemJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@4();
    BEGIN
      ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      if ItemJnlBatch."No. Series" = '' then
        NextDocNo := ''
      else begin
        NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,false);
        CLEAR(NoSeriesMgt);
      end;
    END;

    LOCAL PROCEDURE ValidateCalcLevel@3();
    BEGIN
      PageValidateCalcLevel;
      exit;
    END;

    LOCAL PROCEDURE InsertValJnlBuffer@2(ItemNo2@1000 : Code[20];VariantCode2@1001 : Code[10];LocationCode2@1002 : Code[10];Quantity2@1003 : Decimal;Amount2@1004 : Decimal);
    BEGIN
      ValJnlBuffer.RESET;
      ValJnlBuffer.SETCURRENTKEY("Item No.","Location Code","Variant Code");
      ValJnlBuffer.SETRANGE("Item No.",ItemNo2);
      ValJnlBuffer.SETRANGE("Location Code",LocationCode2);
      ValJnlBuffer.SETRANGE("Variant Code",VariantCode2);
      if ValJnlBuffer.FINDFIRST then begin
        ValJnlBuffer.Quantity := ValJnlBuffer.Quantity + Quantity2;
        ValJnlBuffer."Inventory Value (Calculated)" :=
          ValJnlBuffer."Inventory Value (Calculated)" + Amount2;
        ValJnlBuffer.MODIFY;
      end else
        if Quantity2 <> 0 then begin
          NextLineNo2 := NextLineNo2 + 10000;
          ValJnlBuffer.INIT;
          ValJnlBuffer."Line No." := NextLineNo2;
          ValJnlBuffer."Item No." := ItemNo2;
          ValJnlBuffer."Variant Code" := VariantCode2;
          ValJnlBuffer."Location Code" := LocationCode2;
          ValJnlBuffer.Quantity := Quantity2;
          ValJnlBuffer."Inventory Value (Calculated)" := Amount2;
          ValJnlBuffer.INSERT;
        end;
    END;

    LOCAL PROCEDURE CalcAverageUnitCost@8(BufferQty@1000 : Decimal;VAR InvtValueCalc@1001 : Decimal;VAR AppliedAmount@1002 : Decimal);
    VAR
      ValueEntry@1003 : Record "Value Entry";
      AverageQty@1004 : Decimal;
      AverageCost@1005 : Decimal;
      NotComplInvQty@1007 : Decimal;
      NotComplInvValue@1008 : Decimal;
    BEGIN
      with ValueEntry do begin
        "Item No." := Item."No.";
        "Valuation Date" := PostingDate;
        if ValJnlBuffer.GETFILTER("Location Code") <> '' then
          "Location Code" := ValJnlBuffer.GETRANGEMIN("Location Code");
        if ValJnlBuffer.GETFILTER("Variant Code") <> '' then
          "Variant Code" := ValJnlBuffer.GETRANGEMIN("Variant Code");
        SumCostsTillValuationDate(ValueEntry);
        AverageQty := "Invoiced Quantity";
        AverageCost := "Cost Amount (Actual)";

        CalcNotComplInvcdTransfer(NotComplInvQty,NotComplInvValue);
        AverageQty -= NotComplInvQty;
        AverageCost -= NotComplInvValue;

        RESET;
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Valuation Date",0D,PostingDate);
        SETFILTER("Location Code",ValJnlBuffer.GETFILTER("Location Code"));
        SETFILTER("Variant Code",ValJnlBuffer.GETFILTER("Variant Code"));
        SETRANGE(Inventoriable,true);
        SETRANGE("Item Charge No.",'');
        SETFILTER("Posting Date",'>%1',PostingDate);
        SETFILTER("Entry Type",'<>%1',"Entry Type"::Revaluation);
        CALCSUMS("Invoiced Quantity","Cost Amount (Actual)");
        AverageQty -= "Invoiced Quantity";
        AverageCost -= "Cost Amount (Actual)";
      end;

      if AverageQty <> 0 then begin
        AverageUnitCostLCY := AverageCost / AverageQty;
        if AverageUnitCostLCY < 0 then
          AverageUnitCostLCY := 0;
      end else
        AverageUnitCostLCY := 0;

      AppliedAmount := InvtValueCalc;
      InvtValueCalc := BufferQty * AverageUnitCostLCY;
    END;

    LOCAL PROCEDURE CalcNotComplInvcdTransfer@7(VAR NotComplInvQty@1001 : Decimal;VAR NotComplInvValue@1002 : Decimal);
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
      RemQty@1003 : Decimal;
      RemInvValue@1004 : Decimal;
      i@1005 : Integer;
    BEGIN
      for i := 1 to 2 do
        with ItemLedgEntry do begin
          SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
          SETRANGE("Item No.",Item."No.");
          SETRANGE(Positive,i = 1);
          SETFILTER("Location Code",ValJnlBuffer.GETFILTER("Location Code"));
          SETFILTER("Variant Code",ValJnlBuffer.GETFILTER("Variant Code"));
          if FIND('-') then
            repeat
              if (Quantity = "Invoiced Quantity") and
                 not "Completely Invoiced" and
                 ("Last Invoice Date" in [0D..PostingDate]) and
                 ("Invoiced Quantity" <> 0)
              then begin
                RemQty := Quantity;
                RemInvValue := CalcItemLedgEntryActualCostTillPostingDate("Entry No.",PostingDate);
                NotComplInvQty := NotComplInvQty + RemQty;
                NotComplInvValue := NotComplInvValue + RemInvValue;
              end;
            until NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE InsertItemJnlLine@6(EntryType2@1000 : Option;ItemNo2@1001 : Code[20];VariantCode2@1002 : Code[10];LocationCode2@1003 : Code[10];Quantity2@1005 : Decimal;Amount2@1006 : Decimal;ApplyToEntry2@1007 : Integer;AppliedAmount@1008 : Decimal);
    VAR
      Item@1009 : Record Item;
      SKU@1010 : Record "Stockkeeping Unit";
    BEGIN
      if Quantity2 = 0 then
        exit;

      with ItemJnlLine do begin
        if not HideDuplWarning then
          if ItemJnlLineExists(ItemJnlLine,ItemNo2,VariantCode2,LocationCode2,ApplyToEntry2) then
            if CONFIRM(DuplWarningQst) then
              HideDuplWarning := true
            else
              ERROR('');
        if NextLineNo = 0 then begin
          LOCKTABLE;
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          if FINDLAST then
            NextLineNo := "Line No.";
        end;

        NextLineNo := NextLineNo + 10000;
        INIT;
        "Line No." := NextLineNo;
        "Value Entry Type" := "Value Entry Type"::Revaluation;
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Entry Type",EntryType2);
        VALIDATE("Document No.",NextDocNo);
        VALIDATE("Item No.",ItemNo2);
        "Reason Code" := ItemJnlBatch."Reason Code";
        "Variant Code" := VariantCode2;
        "Location Code" := LocationCode2;
        "Source Code" := SourceCodeSetup."Revaluation Journal";
        VALIDATE("Unit Amount",0);
        if ApplyToEntry2 <> 0 then
          "Inventory Value Per" := "Inventory Value Per"::" "
        else
          if ByLocation2 and ByVariant2 then
            "Inventory Value Per" := "Inventory Value Per"::"Location and Variant"
          else
            if ByLocation2 then
              "Inventory Value Per" := "Inventory Value Per"::Location
            else
              if ByVariant2 then
                "Inventory Value Per" := "Inventory Value Per"::Variant
              else
                "Inventory Value Per" := "Inventory Value Per"::Item;
        if CalculatePer = CalculatePer::"Item Ledger Entry" then begin
          "Applies-to Entry" := ApplyToEntry2;
          CopyDim(ItemLedgEntry."Dimension Set ID");
        end;
        VALIDATE(Quantity,Quantity2);
        VALIDATE("Inventory Value (Calculated)",ROUND(Amount2,GLSetup."Amount Rounding Precision"));
        case CalcBase of
          CalcBase::" ":
            VALIDATE("Inventory Value (Revalued)","Inventory Value (Calculated)");
          CalcBase::"Last Direct Unit Cost":
            if SKU.GET("Location Code","Item No.","Variant Code") then
              VALIDATE("Unit Cost (Revalued)",SKU."Last Direct Cost")
            else begin
              Item.GET("Item No.");
              VALIDATE("Unit Cost (Revalued)",Item."Last Direct Cost");
            end;
          CalcBase::"Standard Cost - Assembly List",
          CalcBase::"Standard Cost - Manufacturing":
            begin
              if NewStdCostItem.GET(ItemNo2) then begin
                VALIDATE("Unit Cost (Revalued)",NewStdCostItem."Standard Cost");
                "Single-Level Material Cost" := NewStdCostItem."Single-Level Material Cost";
                "Single-Level Capacity Cost" := NewStdCostItem."Single-Level Capacity Cost";
                "Single-Level Subcontrd. Cost" := NewStdCostItem."Single-Level Subcontrd. Cost";
                "Single-Level Cap. Ovhd Cost" := NewStdCostItem."Single-Level Cap. Ovhd Cost";
                "Single-Level Mfg. Ovhd Cost" := NewStdCostItem."Single-Level Mfg. Ovhd Cost";
                "Rolled-up Material Cost" := NewStdCostItem."Rolled-up Material Cost";
                "Rolled-up Capacity Cost" := NewStdCostItem."Rolled-up Capacity Cost";
                "Rolled-up Subcontracted Cost" := NewStdCostItem."Rolled-up Subcontracted Cost";
                "Rolled-up Mfg. Ovhd Cost" := NewStdCostItem."Rolled-up Mfg. Ovhd Cost";
                "Rolled-up Cap. Overhead Cost" := NewStdCostItem."Rolled-up Cap. Overhead Cost";
                UpdatedStdCostSKU."Item No." := ItemNo2;
                UpdatedStdCostSKU."Location Code" := LocationCode2;
                UpdatedStdCostSKU."Variant Code" := VariantCode2;
                UpdatedStdCostSKU.INSERT;
              end else
                VALIDATE("Inventory Value (Revalued)","Inventory Value (Calculated)");
            end;
        end;
        "Update Standard Cost" := UpdStdCost;
        "Partial Revaluation" := true;
        "Applied Amount" := AppliedAmount;
        INSERT;
      end;
    END;

    PROCEDURE InitializeRequest@5(NewPostingDate@1000 : Date;NewDocNo@1004 : Code[20];NewHideDuplWarning@1008 : Boolean;NewCalculatePer@1001 : Option;NewByLocation@1002 : Boolean;NewByVariant@1003 : Boolean;NewUpdStdCost@1005 : Boolean;NewCalcBase@1006 : Option;NewShowDialog@1007 : Boolean);
    BEGIN
      PostingDate := NewPostingDate;
      NextDocNo := NewDocNo;
      CalculatePer := NewCalculatePer;
      ByLocation := NewByLocation;
      ByVariant := NewByVariant;
      UpdStdCost := NewUpdStdCost;
      CalcBase := NewCalcBase;
      ShowDialog := NewShowDialog;
      HideDuplWarning := NewHideDuplWarning;
    END;

    LOCAL PROCEDURE PageValidateCalcLevel@19046229();
    BEGIN
      if CalculatePer = CalculatePer::"Item Ledger Entry" then begin
        ByLocation := false;
        ByVariant := false;
        CalcBase := CalcBase::" ";
        UpdStdCost := false;
      end;
    END;

    LOCAL PROCEDURE ItemLedgerEntryCalculatePerOnV@19059582();
    BEGIN
      ValidateCalcLevel;
    END;

    LOCAL PROCEDURE ItemCalculatePerOnValidate@19037447();
    BEGIN
      ValidateCalcLevel;
    END;

    LOCAL PROCEDURE ItemJnlLineExists@12(ItemJnlLine@1007 : Record "Item Journal Line";ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1003 : Code[10];ApplyToEntry@1004 : Integer) : Boolean;
    BEGIN
      with ItemJnlLine do begin
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Applies-to Entry",ApplyToEntry);
        exit(not ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE CalcItemLedgEntryActualCostTillPostingDate@98(ItemLedgEntryNo@1001 : Integer;PostingDate@1002 : Date) : Decimal;
    VAR
      ValueEntry@1000 : Record "Value Entry";
    BEGIN
      with ValueEntry do begin
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        SETFILTER("Posting Date",'<=%1',PostingDate);
        SETFILTER("Entry Type",'<>%1',"Entry Type"::Rounding);
        SETRANGE("Expected Cost",false);
        CALCSUMS("Cost Amount (Actual)");
        exit("Cost Amount (Actual)");
      end;
    END;

    LOCAL PROCEDURE Calculate@10(Item@1001 : Record Item;VariantCode@1002 : Code[10];LocationCode@1003 : Code[10]);
    VAR
      AppliedAmount@1000 : Decimal;
    BEGIN
      ValJnlBuffer.CALCSUMS(Quantity,"Inventory Value (Calculated)");
      if ValJnlBuffer.Quantity <> 0 then begin
        AppliedAmount := 0;
        if Item."Costing Method" = Item."Costing Method"::Average then
          CalcAverageUnitCost(
            ValJnlBuffer.Quantity,ValJnlBuffer."Inventory Value (Calculated)",AppliedAmount);
        InsertItemJnlLine(ItemJnlLine."Entry Type"::"Positive Adjmt.",
          Item."No.",VariantCode,LocationCode,ValJnlBuffer.Quantity,ValJnlBuffer."Inventory Value (Calculated)",
          0,AppliedAmount);
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

