OBJECT Codeunit 1411 Doc. Exch. Links
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Invoice Header"=m,
                TableData "Sales Cr.Memo Header"=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnSupportedTableTypeErr@1001 : TextConst '@@@=%1 is the table.;ENU=The %1 table is not supported.';
      DocExchServiceMgt@1000 : Codeunit "Doc. Exch. Service Mgt.";

    [External]
    PROCEDURE UpdateDocumentRecord@49(DocRecRef@1002 : RecordRef;DocIdentifier@1000 : Text;DocOrigIdentifier@1005 : Text);
    BEGIN
      DocRecRef.FIND;
      case DocRecRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          SetInvoiceDocSent(DocRecRef,DocIdentifier,DocOrigIdentifier);
        DATABASE::"Sales Cr.Memo Header":
          SetCrMemoDocSent(DocRecRef,DocIdentifier,DocOrigIdentifier);
        DATABASE::"Service Invoice Header":
          SetServiceInvoiceDocSent(DocRecRef,DocIdentifier,DocOrigIdentifier);
        DATABASE::"Service Cr.Memo Header":
          SetServiceCrMemoDocSent(DocRecRef,DocIdentifier,DocOrigIdentifier);
        else
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      end;
    END;

    [Internal]
    PROCEDURE CheckAndUpdateDocExchCrMemoStatus@18(SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header");
    VAR
      NewStatus@1000 : Option;
    BEGIN
      with SalesCrMemoHeader do begin
        NewStatus := MapDocExchStatusToSalesCMStatus(
            DocExchServiceMgt.GetDocumentStatus(RECORDID,"Document Exchange Identifier","Doc. Exch. Original Identifier"));
        if NewStatus <> "Document Exchange Status"::"Sent to Document Exchange Service" then begin
          VALIDATE("Document Exchange Status",NewStatus);
          MODIFY(true);
        end;
      end;
    END;

    [Internal]
    PROCEDURE CheckAndUpdateDocExchInvoiceStatus@1(SalesInvoiceHeader@1001 : Record "Sales Invoice Header");
    VAR
      NewStatus@1000 : Option;
    BEGIN
      with SalesInvoiceHeader do begin
        NewStatus := MapDocExchStatusToSalesInvStatus(
            DocExchServiceMgt.GetDocumentStatus(RECORDID,"Document Exchange Identifier","Doc. Exch. Original Identifier"));
        if NewStatus <> "Document Exchange Status"::"Sent to Document Exchange Service" then begin
          VALIDATE("Document Exchange Status",NewStatus);
          MODIFY(true);
        end;
      end;
    END;

    [Internal]
    PROCEDURE CheckAndUpdateDocExchServiceInvoiceStatus@2(ServiceInvoiceHeader@1001 : Record "Service Invoice Header");
    VAR
      NewStatus@1000 : Option;
    BEGIN
      with ServiceInvoiceHeader do begin
        NewStatus := MapDocExchStatusToServiceInvStatus(
            DocExchServiceMgt.GetDocumentStatus(RECORDID,"Document Exchange Identifier","Doc. Exch. Original Identifier"));
        if NewStatus <> "Document Exchange Status"::"Sent to Document Exchange Service" then begin
          VALIDATE("Document Exchange Status",NewStatus);
          MODIFY(true);
        end;
      end;
    END;

    [Internal]
    PROCEDURE CheckAndUpdateDocExchServiceCrMemoStatus@4(ServiceCrMemoHeader@1002 : Record "Service Cr.Memo Header");
    VAR
      NewStatus@1000 : Option;
    BEGIN
      with ServiceCrMemoHeader do begin
        NewStatus := MapDocExchStatusToServiceCMStatus(
            DocExchServiceMgt.GetDocumentStatus(RECORDID,"Document Exchange Identifier","Doc. Exch. Original Identifier"));
        if NewStatus <> "Document Exchange Status"::"Sent to Document Exchange Service" then begin
          VALIDATE("Document Exchange Status",NewStatus);
          MODIFY(true);
        end;
      end;
    END;

    LOCAL PROCEDURE SetInvoiceDocSent@7(DocRecRef@1001 : RecordRef;DocIdentifier@1000 : Text;DocOriginalIdentifier@1002 : Text);
    VAR
      SalesInvoiceHeader@1003 : Record "Sales Invoice Header";
    BEGIN
      DocRecRef.SETTABLE(SalesInvoiceHeader);
      with SalesInvoiceHeader do begin
        VALIDATE("Document Exchange Identifier",
          COPYSTR(DocIdentifier,1,MAXSTRLEN("Document Exchange Identifier")));
        VALIDATE("Doc. Exch. Original Identifier",
          COPYSTR(DocOriginalIdentifier,1,MAXSTRLEN("Doc. Exch. Original Identifier")));
        VALIDATE("Document Exchange Status","Document Exchange Status"::"Sent to Document Exchange Service");
        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE SetCrMemoDocSent@35(DocRecRef@1001 : RecordRef;DocIdentifier@1000 : Text;DocOriginalIdentifier@1002 : Text);
    VAR
      SalesCrMemoHeader@1003 : Record "Sales Cr.Memo Header";
    BEGIN
      DocRecRef.SETTABLE(SalesCrMemoHeader);
      with SalesCrMemoHeader do begin
        VALIDATE("Document Exchange Identifier",
          COPYSTR(DocIdentifier,1,MAXSTRLEN("Document Exchange Identifier")));
        VALIDATE("Doc. Exch. Original Identifier",
          COPYSTR(DocOriginalIdentifier,1,MAXSTRLEN("Doc. Exch. Original Identifier")));
        VALIDATE("Document Exchange Status","Document Exchange Status"::"Sent to Document Exchange Service");
        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE SetServiceInvoiceDocSent@5(DocRecRef@1001 : RecordRef;DocIdentifier@1000 : Text;DocOriginalIdentifier@1002 : Text);
    VAR
      ServiceInvoiceHeader@1003 : Record "Service Invoice Header";
    BEGIN
      DocRecRef.SETTABLE(ServiceInvoiceHeader);
      with ServiceInvoiceHeader do begin
        VALIDATE("Document Exchange Identifier",
          COPYSTR(DocIdentifier,1,MAXSTRLEN("Document Exchange Identifier")));
        VALIDATE("Doc. Exch. Original Identifier",
          COPYSTR(DocOriginalIdentifier,1,MAXSTRLEN("Doc. Exch. Original Identifier")));
        VALIDATE("Document Exchange Status","Document Exchange Status"::"Sent to Document Exchange Service");
        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE SetServiceCrMemoDocSent@9(DocRecRef@1001 : RecordRef;DocIdentifier@1000 : Text;DocOriginalIdentifier@1002 : Text);
    VAR
      ServiceCrMemoHeader@1003 : Record "Service Cr.Memo Header";
    BEGIN
      DocRecRef.SETTABLE(ServiceCrMemoHeader);
      with ServiceCrMemoHeader do begin
        VALIDATE("Document Exchange Identifier",
          COPYSTR(DocIdentifier,1,MAXSTRLEN("Document Exchange Identifier")));
        VALIDATE("Doc. Exch. Original Identifier",
          COPYSTR(DocOriginalIdentifier,1,MAXSTRLEN("Doc. Exch. Original Identifier")));
        VALIDATE("Document Exchange Status","Document Exchange Status"::"Sent to Document Exchange Service");
        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE MapDocExchStatusToSalesInvStatus@32(DocExchStatus@1000 : Text) : Integer;
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
    BEGIN
      case UPPERCASE(DocExchStatus) of
        'FAILED':
          exit(SalesInvoiceHeader."Document Exchange Status"::"Delivery Failed");
        'SENT':
          exit(SalesInvoiceHeader."Document Exchange Status"::"Delivered to Recipient");
        'PENDING_CONNECTION':
          exit(SalesInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient");
        else
          exit(SalesInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service");
      end;
    END;

    LOCAL PROCEDURE MapDocExchStatusToSalesCMStatus@28(DocExchStatus@1000 : Text) : Integer;
    VAR
      SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";
    BEGIN
      case UPPERCASE(DocExchStatus) of
        'FAILED':
          exit(SalesCrMemoHeader."Document Exchange Status"::"Delivery Failed");
        'SENT':
          exit(SalesCrMemoHeader."Document Exchange Status"::"Delivered to Recipient");
        'PENDING_CONNECTION':
          exit(SalesCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient");
        else
          exit(SalesCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service");
      end;
    END;

    LOCAL PROCEDURE MapDocExchStatusToServiceInvStatus@3(DocExchStatus@1000 : Text) : Integer;
    VAR
      ServiceInvoiceHeader@1001 : Record "Service Invoice Header";
    BEGIN
      case UPPERCASE(DocExchStatus) of
        'FAILED':
          exit(ServiceInvoiceHeader."Document Exchange Status"::"Delivery Failed");
        'SENT':
          exit(ServiceInvoiceHeader."Document Exchange Status"::"Delivered to Recipient");
        'PENDING_CONNECTION':
          exit(ServiceInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient");
        else
          exit(ServiceInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service");
      end;
    END;

    LOCAL PROCEDURE MapDocExchStatusToServiceCMStatus@6(DocExchStatus@1000 : Text) : Integer;
    VAR
      ServiceCrMemoHeader@1001 : Record "Service Cr.Memo Header";
    BEGIN
      case UPPERCASE(DocExchStatus) of
        'FAILED':
          exit(ServiceCrMemoHeader."Document Exchange Status"::"Delivery Failed");
        'SENT':
          exit(ServiceCrMemoHeader."Document Exchange Status"::"Delivered to Recipient");
        'PENDING_CONNECTION':
          exit(ServiceCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient");
        else
          exit(ServiceCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service");
      end;
    END;

    BEGIN
    END.
  }
}

