OBJECT Table 570 G/L Account Category
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Description;
    OnDelete=VAR
               GLAccount@1000 : Record "G/L Account";
             BEGIN
               if "System Generated" then
                 ERROR(CannotDeleteSystemGeneratedErr,Description);
               GLAccount.SETRANGE("Account Subcategory Entry No.","Entry No.");
               if GLAccount.FINDFIRST then
                 ERROR(CategoryUsedOnAccountErr,TABLECAPTION,Description,GLAccount.TABLECAPTION,GLAccount."No.");
               DeleteChildren("Entry No.");
             END;

    CaptionML=ENU=G/L Account Category;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;Parent Entry No.    ;Integer       ;CaptionML=ENU=Parent Entry No. }
    { 3   ;   ;Sibling Sequence No.;Integer       ;CaptionML=ENU=Sibling Sequence No. }
    { 4   ;   ;Presentation Order  ;Text100       ;CaptionML=ENU=Presentation Order }
    { 5   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 6   ;   ;Description         ;Text80        ;CaptionML=ENU=Description }
    { 7   ;   ;Account Category    ;Option        ;OnValidate=BEGIN
                                                                if "Account Category" in ["Account Category"::Income,"Account Category"::"Cost of Goods Sold","Account Category"::Expense]
                                                                then begin
                                                                  "Income/Balance" := "Income/Balance"::"Income Statement";
                                                                  "Additional Report Definition" := "Additional Report Definition"::" ";
                                                                end else
                                                                  "Income/Balance" := "Income/Balance"::"Balance Sheet";
                                                                if Description = '' then
                                                                  Description := FORMAT("Account Category");
                                                                UpdatePresentationOrder;
                                                              END;

                                                   CaptionML=ENU=Account Category;
                                                   OptionCaptionML=ENU=,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense;
                                                   OptionString=,Assets,Liabilities,Equity,Income,"Cost of Goods Sold",Expense;
                                                   BlankZero=true }
    { 8   ;   ;Income/Balance      ;Option        ;OnValidate=BEGIN
                                                                UpdatePresentationOrder;
                                                              END;

                                                   CaptionML=ENU=Income/Balance;
                                                   OptionCaptionML=ENU=Income Statement,Balance Sheet;
                                                   OptionString="Income Statement","Balance Sheet";
                                                   Editable=false }
    { 9   ;   ;Additional Report Definition;Option;OnValidate=BEGIN
                                                                if "Additional Report Definition" <> "Additional Report Definition"::" " then
                                                                  TESTFIELD("Income/Balance","Income/Balance"::"Balance Sheet");
                                                              END;

                                                   CaptionML=ENU=Additional Report Definition;
                                                   OptionCaptionML=ENU=" ,Operating Activities,Investing Activities,Financing Activities,Cash Accounts,Retained Earnings,Distribution to Shareholders";
                                                   OptionString=" ","Operating Activities","Investing Activities","Financing Activities","Cash Accounts","Retained Earnings","Distribution to Shareholders" }
    { 11  ;   ;System Generated    ;Boolean       ;CaptionML=ENU=System Generated }
    { 12  ;   ;Has Children        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("G/L Account Category" WHERE ("Parent Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Has Children }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Presentation Order","Sibling Sequence No." }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NewCategoryTxt@1001 : TextConst 'ENU=<Enter a Name>';
      CannotDeleteSystemGeneratedErr@1019 : TextConst '@@@="%1 = a category value, e.g. ""Assets""";ENU=%1 is a system generated category and cannot be deleted.';
      NoAccountsInFilterErr@1002 : TextConst '@@@="%1 = either ''Balance Sheet'' or ''Income Statement''";ENU=There are no G/L Accounts in the filter of type %1.';
      CategoryUsedOnAccountErr@1003 : TextConst '@@@="%1=account category table name, %2=category description, %3=g/l account table name, %4=g/l account number.";ENU=You cannot delete %1 %2 because it is used in %3 %4.';

    [External]
    PROCEDURE UpdatePresentationOrder@4();
    VAR
      GLAccountCategory@1000 : Record "G/L Account Category";
      PresentationOrder@1001 : Text;
    BEGIN
      if "Entry No." = 0 then
        exit;
      GLAccountCategory := Rec;
      if "Sibling Sequence No." = 0 then
        "Sibling Sequence No." := "Entry No." * 10000 mod 2000000000;
      Indentation := 0;
      PresentationOrder := COPYSTR(FORMAT(1000000 + "Sibling Sequence No."),2);
      while GLAccountCategory."Parent Entry No." <> 0 do begin
        Indentation += 1;
        GLAccountCategory.GET(GLAccountCategory."Parent Entry No.");
        PresentationOrder := COPYSTR(FORMAT(1000000 + GLAccountCategory."Sibling Sequence No."),2) + PresentationOrder;
      end;
      case "Account Category" of
        "Account Category"::Assets:
          PresentationOrder := '0' + PresentationOrder;
        "Account Category"::Liabilities:
          PresentationOrder := '1' + PresentationOrder;
        "Account Category"::Equity:
          PresentationOrder := '2' + PresentationOrder;
        "Account Category"::Income:
          PresentationOrder := '3' + PresentationOrder;
        "Account Category"::"Cost of Goods Sold":
          PresentationOrder := '4' + PresentationOrder;
        "Account Category"::Expense:
          PresentationOrder := '5' + PresentationOrder;
      end;
      "Presentation Order" := COPYSTR(PresentationOrder,1,MAXSTRLEN("Presentation Order"));
      MODIFY;
    END;

    [External]
    PROCEDURE InitializeDataSet@1();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"G/L Account Category Mgt.");
    END;

    [External]
    PROCEDURE InsertRow@6() : Integer;
    VAR
      GLAccountCategoryMgt@1000 : Codeunit "G/L Account Category Mgt.";
    BEGIN
      exit(GLAccountCategoryMgt.AddCategory("Entry No.","Parent Entry No.","Account Category",NewCategoryTxt,false,0));
    END;

    LOCAL PROCEDURE Move@13(Steps@1002 : Integer);
    VAR
      GLAccountCategory@1000 : Record "G/L Account Category";
      SiblingOrder@1001 : Integer;
    BEGIN
      if "Entry No." = 0 then
        exit;
      GLAccountCategory := Rec;
      GLAccountCategory.SETRANGE("Parent Entry No.","Parent Entry No.");
      GLAccountCategory.SETRANGE("Account Category","Account Category");
      GLAccountCategory.SETCURRENTKEY("Presentation Order","Sibling Sequence No.");
      if GLAccountCategory.NEXT(Steps) = 0 then
        exit;
      SiblingOrder := "Sibling Sequence No.";
      "Sibling Sequence No." := GLAccountCategory."Sibling Sequence No.";
      GLAccountCategory."Sibling Sequence No." := SiblingOrder;
      GLAccountCategory.UpdatePresentationOrder;
      GLAccountCategory.MODIFY;
      UpdatePresentationOrder;
      MODIFY;
      UpdateDescendants(Rec);
      UpdateDescendants(GLAccountCategory);
    END;

    [External]
    PROCEDURE MoveUp@11();
    BEGIN
      Move(-1);
    END;

    [External]
    PROCEDURE MoveDown@14();
    BEGIN
      Move(1);
    END;

    LOCAL PROCEDURE ChangeAncestor@10(ChangeToChild@1002 : Boolean);
    VAR
      GLAccountCategory@1000 : Record "G/L Account Category";
    BEGIN
      if "Entry No." = 0 then
        exit;
      GLAccountCategory := Rec;
      if ChangeToChild then begin
        GLAccountCategory.SETRANGE("Parent Entry No.","Parent Entry No.");
        GLAccountCategory.SETRANGE(Indentation,Indentation);
        GLAccountCategory.SETCURRENTKEY("Presentation Order","Sibling Sequence No.");
        if GLAccountCategory.NEXT(-1) = 0 then
          exit;
        "Parent Entry No." := GLAccountCategory."Entry No."
      end else
        if GLAccountCategory.GET("Parent Entry No.") then
          "Parent Entry No." := GLAccountCategory."Parent Entry No."
        else
          exit;
      UpdatePresentationOrder;
      MODIFY;
      UpdateDescendants(Rec);
    END;

    LOCAL PROCEDURE UpdateDescendants@12(ParentGLAccountCategory@1000 : Record "G/L Account Category");
    VAR
      GLAccountCategory@1001 : Record "G/L Account Category";
    BEGIN
      if ParentGLAccountCategory."Entry No." = 0 then
        exit;
      GLAccountCategory.SETRANGE("Parent Entry No.",ParentGLAccountCategory."Entry No.");
      if GLAccountCategory.FINDSET then
        repeat
          GLAccountCategory."Income/Balance" := ParentGLAccountCategory."Income/Balance";
          GLAccountCategory."Account Category" := ParentGLAccountCategory."Account Category";
          GLAccountCategory.UpdatePresentationOrder;
          UpdateDescendants(GLAccountCategory);
        until GLAccountCategory.NEXT = 0;
    END;

    [External]
    PROCEDURE MakeChildOfPreviousSibling@15();
    BEGIN
      ChangeAncestor(true);
    END;

    [External]
    PROCEDURE MakeSiblingOfParent@16();
    BEGIN
      ChangeAncestor(false);
    END;

    [External]
    PROCEDURE DeleteRow@9();
    BEGIN
      if "Entry No." = 0 then
        exit;
      DeleteChildren("Entry No.");
      DELETE(true);
    END;

    LOCAL PROCEDURE DeleteChildren@7(ParentEntryNo@1001 : Integer);
    VAR
      GLAccountCategory@1000 : Record "G/L Account Category";
    BEGIN
      GLAccountCategory.SETRANGE("Parent Entry No.",ParentEntryNo);
      if GLAccountCategory.FINDSET then
        repeat
          GLAccountCategory.DeleteRow;
        until GLAccountCategory.NEXT = 0;
    END;

    [External]
    PROCEDURE MapAccounts@8();
    BEGIN
    END;

    [External]
    PROCEDURE ValidateTotaling@5(NewTotaling@1001 : Text);
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      if NewTotaling <> '' then begin
        GLAccount.SETFILTER("No.",NewTotaling);
        GLAccount.SETRANGE("Income/Balance","Income/Balance");
        GLAccount.LOCKTABLE;
        if not GLAccount.FINDSET then
          ERROR(NoAccountsInFilterErr,"Income/Balance");
        repeat
          GLAccount.VALIDATE("Account Subcategory Entry No.","Entry No.");
          GLAccount.MODIFY(true);
        until GLAccount.NEXT = 0;
      end;
    END;

    [Internal]
    PROCEDURE LookupTotaling@22();
    VAR
      GLAccount@1001 : Record "G/L Account";
      GLAccList@1000 : Page "G/L Account List";
      OldTotaling@1002 : Text;
    BEGIN
      GLAccount.SETRANGE("Income/Balance","Income/Balance");
      OldTotaling := GetTotaling;
      if OldTotaling <> '' then begin
        GLAccount.SETFILTER("No.",OldTotaling);
        if GLAccount.FINDFIRST then
          GLAccList.SETRECORD(GLAccount);
        GLAccount.SETRANGE("No.");
      end;
      GLAccList.SETTABLEVIEW(GLAccount);
      GLAccList.LOOKUPMODE(true);
      if GLAccList.RUNMODAL = ACTION::LookupOK then
        ValidateTotaling(GLAccList.GetSelectionFilter);
    END;

    [External]
    PROCEDURE PositiveNormalBalance@19() : Boolean;
    BEGIN
      exit("Account Category" in ["Account Category"::Expense,"Account Category"::Assets,"Account Category"::"Cost of Goods Sold"]);
    END;

    [External]
    PROCEDURE GetBalance@17() : Decimal;
    VAR
      GLEntry@1000 : Record "G/L Entry";
      GLAccountCategory@1001 : Record "G/L Account Category";
      Balance@1002 : Decimal;
      TotalingStr@1004 : Text;
    BEGIN
      CALCFIELDS("Has Children");
      if "Has Children" then begin
        GLAccountCategory.SETRANGE("Parent Entry No.","Entry No.");
        if GLAccountCategory.FINDSET then
          repeat
            Balance += GLAccountCategory.GetBalance;
          until GLAccountCategory.NEXT = 0;
      end;
      TotalingStr := GetTotaling;
      if TotalingStr = '' then
        exit(Balance);
      GLEntry.SETFILTER("G/L Account No.",TotalingStr);
      GLEntry.CALCSUMS(Amount);
      exit(Balance + GLEntry.Amount);
    END;

    [Internal]
    PROCEDURE GetTotaling@2() : Text[250];
    VAR
      GLAccount@1000 : Record "G/L Account";
      SelectionFilterManagement@1001 : Codeunit SelectionFilterManagement;
    BEGIN
      GLAccount.SETRANGE("Account Subcategory Entry No.","Entry No.");
      exit(COPYSTR(SelectionFilterManagement.GetSelectionFilterForGLAccount(GLAccount),1,250));
    END;

    BEGIN
    END.
  }
}

