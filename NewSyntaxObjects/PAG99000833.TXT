OBJECT Page 99000833 Check Prod. Order Status
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Check Prod. Order Status;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=Item;
    DataCaptionExpr='';
    PageType=ConfirmationDialog;
    InstructionalTextML=ENU=This sales line is currently planned. Your changes will not cause any replanning, so you must manually update the production order if necessary. Do you still want to record the changes?;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Details;
                CaptionML=ENU=Details }

    { 5   ;2   ;Field     ;
                Name=No.;
                ToolTipML=ENU=Specifies the number of the item.;
                ApplicationArea=#Manufacturing;
                SourceExpr="No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 7   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the item.;
                ApplicationArea=#Manufacturing;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 29  ;2   ;Field     ;
                Name=LastStatus;
                CaptionML=ENU=Last Status;
                OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released;
                ApplicationArea=#Manufacturing;
                SourceExpr=LastStatus;
                Editable=FALSE;
                ImplicitType=Option }

    { 35  ;2   ;Field     ;
                Name=LastOrderType;
                CaptionML=ENU=Last Order Type;
                OptionCaptionML=ENU=Production,Purchase;
                ApplicationArea=#Manufacturing;
                SourceExpr=LastOrderType;
                Editable=FALSE;
                ImplicitType=Option }

    { 32  ;2   ;Field     ;
                Name=LastOrderNo;
                CaptionML=ENU=Last Order No.;
                ApplicationArea=#Manufacturing;
                SourceExpr=LastOrderNo;
                Editable=FALSE;
                ImplicitType=Code20 }

  }
  CODE
  {
    VAR
      MfgSetup@1000 : Record "Manufacturing Setup";
      LastStatus@1001 : 'Simulated,Planned,"Firm Planned",Released';
      LastOrderType@1002 : 'Production,Purchase';
      LastOrderNo@1003 : Code[20];

    [External]
    PROCEDURE SalesLineShowWarning@2(SalesLine@1000 : Record "Sales Line") : Boolean;
    VAR
      SalesLine2@1001 : Record "Sales Line";
      ReservEntry@1002 : Record "Reservation Entry";
      ReservEntry2@1007 : Record "Reservation Entry";
      ProdOrderLine@1003 : Record "Prod. Order Line";
      ReserveSalesLine@1004 : Codeunit "Sales Line-Reserve";
      ReservEngineMgt@1005 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      if SalesLine."Drop Shipment" then
        exit(false);

      MfgSetup.GET;
      if not MfgSetup."Planning Warning" then
        exit(false);

      if not SalesLine2.GET(
           SalesLine."Document Type",
           SalesLine."Document No.",
           SalesLine."Line No.")
      then
        exit;

      if (SalesLine2.Type <> SalesLine2.Type::Item) or
         (SalesLine2."No." = '') or
         (SalesLine2."Outstanding Quantity" <= 0)
      then
        exit;

      ReservEntry."Source Type" := DATABASE::"Sales Line";
      ReservEntry."Source Subtype" := SalesLine2."Document Type";
      ReservEntry."Item No." := SalesLine2."No.";
      ReservEntry."Variant Code" := SalesLine2."Variant Code";
      ReservEntry."Location Code" := SalesLine2."Location Code";
      ReservEntry."Expected Receipt Date" := SalesLine2."Shipment Date";

      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine2);

      if ReservEntry.FINDSET then
        repeat
          if ReservEntry2.GET(ReservEntry."Entry No.",not ReservEntry.Positive) then
            case ReservEntry2."Source Type" of
              DATABASE::"Prod. Order Line":
                if ReservEntry2."Source Subtype" <> 1 then begin
                  ProdOrderLine.GET(
                    ReservEntry2."Source Subtype",ReservEntry2."Source ID",ReservEntry2."Source Prod. Order Line");
                  LastStatus := ProdOrderLine.Status;
                  LastOrderNo := ProdOrderLine."Prod. Order No.";
                  LastOrderType := LastOrderType::Production;
                  exit(true);
                end;
            end;
        until ReservEntry.NEXT = 0;

      exit(false);
    END;

    BEGIN
    END.
  }
}

