OBJECT Table 1017 Job Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Job Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Account No. 1       ;Code20        ;CaptionML=ENU=Account No. 1 }
    { 2   ;   ;Account No. 2       ;Code20        ;CaptionML=ENU=Account No. 2 }
    { 3   ;   ;Amount 1            ;Decimal       ;CaptionML=ENU=Amount 1 }
    { 4   ;   ;Amount 2            ;Decimal       ;CaptionML=ENU=Amount 2 }
    { 5   ;   ;Amount 3            ;Decimal       ;CaptionML=ENU=Amount 3 }
    { 6   ;   ;Amount 4            ;Decimal       ;CaptionML=ENU=Amount 4 }
    { 7   ;   ;Amount 5            ;Decimal       ;CaptionML=ENU=Amount 5 }
    { 10  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 11  ;   ;New Total           ;Boolean       ;CaptionML=ENU=New Total }
  }
  KEYS
  {
    {    ;"Account No. 1","Account No. 2"         ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempJobBuffer@1000 : ARRAY [2] OF TEMPORARY Record "Job Buffer";

    [Internal]
    PROCEDURE InsertWorkInProgress@14(VAR Job@1000 : Record Job);
    VAR
      JobWIPGLEntry@1001 : Record "Job WIP G/L Entry";
    BEGIN
      CLEAR(TempJobBuffer);
      JobWIPGLEntry.SETCURRENTKEY("Job No.");
      JobWIPGLEntry.SETRANGE("Job No.",Job."No.");
      JobWIPGLEntry.SETRANGE(Reversed,false);
      JobWIPGLEntry.SETRANGE("Job Complete",false);

      JobWIPGLEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      if JobWIPGLEntry.FIND('-') then
        repeat
          CLEAR(TempJobBuffer);
          if JobWIPGLEntry."G/L Account No." <> '' then begin
            TempJobBuffer[1]."Account No. 1" := JobWIPGLEntry."G/L Account No.";
            TempJobBuffer[1]."Account No. 2" := JobWIPGLEntry."Job Posting Group";
            if (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Applied Costs") or
               (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Recognized Costs")
            then
              TempJobBuffer[1]."Amount 1" := JobWIPGLEntry."WIP Entry Amount"
            else
              if JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Accrued Costs" then
                TempJobBuffer[1]."Amount 2" := JobWIPGLEntry."WIP Entry Amount";
            if (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Applied Sales") or
               (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Recognized Sales")
            then
              TempJobBuffer[1]."Amount 4" := JobWIPGLEntry."WIP Entry Amount"
            else
              if JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Accrued Sales" then
                TempJobBuffer[1]."Amount 5" := JobWIPGLEntry."WIP Entry Amount";
            TempJobBuffer[2] := TempJobBuffer[1];
            if TempJobBuffer[2].FIND then begin
              TempJobBuffer[2]."Amount 1" :=
                TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
              TempJobBuffer[2]."Amount 2" :=
                TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
              TempJobBuffer[2]."Amount 4" :=
                TempJobBuffer[2]."Amount 4" + TempJobBuffer[1]."Amount 4";
              TempJobBuffer[2]."Amount 5" :=
                TempJobBuffer[2]."Amount 5" + TempJobBuffer[1]."Amount 5";
              TempJobBuffer[2].MODIFY;
            end else
              TempJobBuffer[1].INSERT;
          end;
        until JobWIPGLEntry.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InitJobBuffer@15();
    BEGIN
      CLEAR(TempJobBuffer);
      TempJobBuffer[1].DELETEALL;
    END;

    [Internal]
    PROCEDURE GetJobBuffer@1(VAR Job@1000 : Record Job;VAR JobBuffer2@1001 : Record "Job Buffer");
    VAR
      GLEntry@1002 : Record "G/L Entry";
      OldAcc@1003 : Code[20];
    BEGIN
      JobBuffer2.DELETEALL;
      GLEntry.SETCURRENTKEY("G/L Account No.","Job No.","Posting Date");
      GLEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      OldAcc := '';

      if TempJobBuffer[1].FIND('+') then
        repeat
          if TempJobBuffer[1]."Account No. 1" <> OldAcc then begin
            GLEntry.SETRANGE("G/L Account No.",TempJobBuffer[1]."Account No. 1");
            GLEntry.SETFILTER("Job No.",Job.GETFILTER("No."));
            GLEntry.CALCSUMS(Amount);
            TempJobBuffer[1]."Amount 3" := GLEntry.Amount;
            if TempJobBuffer[1]."Amount 3" <> 0 then
              TempJobBuffer[1]."New Total" := true;
            OldAcc := TempJobBuffer[1]."Account No. 1";
          end;
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        until TempJobBuffer[1].NEXT(-1) = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    [Internal]
    PROCEDURE ReportJobItem@2(VAR Job@1000 : Record Job;VAR item2@1001 : Record Item;VAR JobBuffer2@1002 : Record "Job Buffer");
    VAR
      Item@1004 : Record Item;
      Item3@1007 : Record Item;
      JobLedgEntry@1003 : Record "Job Ledger Entry";
      InFilter@1005 : Boolean;
      Itemfilter@1006 : Boolean;
    BEGIN
      CLEAR(JobBuffer2);
      CLEAR(TempJobBuffer);
      JobBuffer2.DELETEALL;
      TempJobBuffer[1].DELETEALL;
      if Job."No." = '' then
        exit;
      Item.COPY(item2);
      Itemfilter := Item.GETFILTERS <> '';
      Item.SETCURRENTKEY("No.");

      JobLedgEntry.SETCURRENTKEY("Job No.","Posting Date");
      JobLedgEntry.SETRANGE("Job No.",Job."No.");
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      if JobLedgEntry.FIND('-') then
        repeat
          if (JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Usage) and
             (JobLedgEntry.Type = JobLedgEntry.Type::Item) and
             (JobLedgEntry."No." <> '')
          then begin
            InFilter := true;
            if Itemfilter then begin
              Item.INIT;
              Item."No." := JobLedgEntry."No.";
              InFilter := Item.FIND;
            end;
            if InFilter then begin
              Item3.INIT;
              if Item3.GET(JobLedgEntry."No.") then;
              CLEAR(TempJobBuffer[1]);
              TempJobBuffer[1]."Account No. 1" := JobLedgEntry."No.";
              TempJobBuffer[1]."Account No. 2" := JobLedgEntry."Unit of Measure Code";
              TempJobBuffer[1].Description := Item3.Description;
              TempJobBuffer[1]."Amount 1" := JobLedgEntry.Quantity;
              TempJobBuffer[1]."Amount 2" := JobLedgEntry."Total Cost (LCY)";
              TempJobBuffer[1]."Amount 3" := JobLedgEntry."Line Amount (LCY)";
              TempJobBuffer[2] := TempJobBuffer[1];
              if TempJobBuffer[2].FIND then begin
                TempJobBuffer[2]."Amount 1" :=
                  TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
                TempJobBuffer[2]."Amount 2" :=
                  TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
                TempJobBuffer[2]."Amount 3" :=
                  TempJobBuffer[2]."Amount 3" + TempJobBuffer[1]."Amount 3";
                TempJobBuffer[2].MODIFY;
              end else
                TempJobBuffer[1].INSERT;
            end;
          end;
        until JobLedgEntry.NEXT = 0;

      if TempJobBuffer[1].FIND('-') then
        repeat
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        until TempJobBuffer[1].NEXT = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    [Internal]
    PROCEDURE ReportItemJob@3(VAR Item@1001 : Record Item;VAR Job2@1000 : Record Job;VAR JobBuffer2@1002 : Record "Job Buffer");
    VAR
      JobLedgEntry@1003 : Record "Job Ledger Entry";
      Job@1004 : Record Job;
      Job3@1007 : Record Job;
      InFilter@1005 : Boolean;
      JobFilter@1006 : Boolean;
    BEGIN
      CLEAR(JobBuffer2);
      CLEAR(TempJobBuffer);
      JobBuffer2.DELETEALL;
      TempJobBuffer[1].DELETEALL;
      if Item."No." = '' then
        exit;
      Job.COPY(Job2);
      JobFilter := Job.GETFILTERS <> '';
      Job.SETCURRENTKEY("No.");

      JobLedgEntry.SETCURRENTKEY("Entry Type",Type,"No.","Posting Date");
      JobLedgEntry.SETRANGE("Entry Type",JobLedgEntry."Entry Type"::Usage);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",Item."No.");
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      if JobLedgEntry.FIND('-') then
        repeat
          InFilter := true;
          if JobFilter then begin
            Job.INIT;
            Job."No." := JobLedgEntry."Job No.";
            InFilter := Job.FIND;
          end;
          if InFilter then begin
            Job3.INIT;
            if Job3.GET(JobLedgEntry."Job No.") then;
            CLEAR(TempJobBuffer[1]);
            TempJobBuffer[1]."Account No. 1" := JobLedgEntry."Job No.";
            TempJobBuffer[1]."Account No. 2" := JobLedgEntry."Unit of Measure Code";
            TempJobBuffer[1].Description := Job3.Description;
            TempJobBuffer[1]."Amount 1" := JobLedgEntry.Quantity;
            TempJobBuffer[1]."Amount 2" := JobLedgEntry."Total Cost (LCY)";
            TempJobBuffer[1]."Amount 3" := JobLedgEntry."Line Amount (LCY)";
            TempJobBuffer[2] := TempJobBuffer[1];
            if TempJobBuffer[2].FIND then begin
              TempJobBuffer[2]."Amount 1" :=
                TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
              TempJobBuffer[2]."Amount 2" :=
                TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
              TempJobBuffer[2]."Amount 3" :=
                TempJobBuffer[2]."Amount 3" + TempJobBuffer[1]."Amount 3";
              TempJobBuffer[2].MODIFY;
            end else
              TempJobBuffer[1].INSERT;
          end;
        until JobLedgEntry.NEXT = 0;

      if TempJobBuffer[1].FIND('-') then
        repeat
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        until TempJobBuffer[1].NEXT = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    BEGIN
    END.
  }
}

