OBJECT Page 1813 Cust. Approval WF Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Approval Workflow Setup;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Approval Workflow Wizard";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    ShowFilter=false;
    OnInit=BEGIN
             if not GET then begin
               INIT;
               SetDefaultValues;
               INSERT;
             end;
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 ShowIntroStep;
               END;

    OnQueryClosePage=VAR
                       AssistedSetup@1001 : Record "Assisted Setup";
                     BEGIN
                       if CloseAction = ACTION::OK then
                         if AssistedSetup.GetStatus(PAGE::"Cust. Approval WF Setup Wizard") = AssistedSetup.Status::"Not Completed" then
                           if not CONFIRM(NAVNotSetUpQst,false) then
                             exit(false);
                     END;

    ActionList=ACTIONS
    {
      { 8       ;    ;ActionContainer;
                      Name=ActionContainer8;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;Action    ;
                      Name=PreviousPage;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Suite;
                      Enabled=BackEnabled;
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(true);
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=NextPage;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Suite;
                      Enabled=NextEnabled;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(false);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Suite;
                      Enabled=FinishEnabled;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=VAR
                                 AssistedSetup@1004 : Record "Assisted Setup";
                                 ApprovalWorkflowSetupMgt@1001 : Codeunit "Approval Workflow Setup Mgt.";
                               BEGIN
                                 ApprovalWorkflowSetupMgt.ApplyCustomerWizardUserInput(Rec);
                                 AssistedSetup.SetStatus(PAGE::"Cust. Approval WF Setup Wizard",AssistedSetup.Status::Completed);

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Name=Group96;
                Visible=TopBannerVisible AND NOT DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 97  ;2   ;Field     ;
                Name=MediaResourcesStandard;
                ApplicationArea=#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 98  ;1   ;Group     ;
                Name=Group98;
                Visible=TopBannerVisible AND DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 99  ;2   ;Field     ;
                Name=MediaResourcesDone;
                ApplicationArea=#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 11  ;1   ;Group     ;
                Name=Step1;
                CaptionML=ENU="";
                Visible=IntroVisible;
                GroupType=Group }

    { 18  ;2   ;Group     ;
                Name=Para1.1;
                CaptionML=ENU=Welcome to Customer Approval Workflow Setup;
                GroupType=Group }

    { 19  ;3   ;Group     ;
                Name=Para1.1.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=You can create approval workflows that automatically notify an approver when a user tries to create or change a customer card. }

    { 21  ;2   ;Group     ;
                Name=Para1.2;
                CaptionML=ENU=Let's go!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to specify basic approval workflow settings for changing a customer card. }

    { 67  ;1   ;Group     ;
                Name=Step2;
                CaptionML=ENU="";
                Visible=CustomerApproverSetupVisible;
                GroupType=Group }

    { 5   ;2   ;Group     ;
                Name=Para2.1;
                CaptionML=ENU="";
                GroupType=Group }

    { 4   ;3   ;Group     ;
                Name=Para2.1.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=Choose who is authorized to approve or reject new or changed customer cards. }

    { 2   ;4   ;Field     ;
                Name=Approver ID;
                CaptionML=ENU=Approver;
                ApplicationArea=#Suite;
                SourceExpr="Approver ID";
                LookupPageID="Approval User Setup";
                OnValidate=BEGIN
                             CanEnableNext;
                           END;

                ImplicitType=Code50 }

    { 66  ;2   ;Group     ;
                Name=Para2.2;
                CaptionML=ENU="";
                GroupType=Group }

    { 3   ;3   ;Group     ;
                Name=Para2.2.1;
                CaptionML=ENU=Choose if the approval process starts automatically or if the user must start the process.;
                GroupType=Group }

    { 65  ;4   ;Field     ;
                Name=App. Trigger;
                CaptionML=ENU=The workflow starts when;
                ApplicationArea=#Suite;
                SourceExpr="App. Trigger";
                OnValidate=BEGIN
                             CanEnableNext;
                           END;

                ImplicitType=Option }

    { 12  ;1   ;Group     ;
                Name=Step3;
                CaptionML=ENU="";
                Visible=CustomerAutoAppDetailsVisible;
                GroupType=Group }

    { 62  ;2   ;Group     ;
                Name=Para3.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=Choose criteria for when the approval process starts automatically. }

    { 61  ;3   ;Group     ;
                Name=Para3.1.1;
                CaptionML=ENU="";
                GroupType=GridLayout;
                Layout=Rows }

    { 60  ;4   ;Group     ;
                Name=Para3.1.1.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=The workflow starts when: }

    { 59  ;5   ;Field     ;
                Name=CustomerFieldCap;
                CaptionML=ENU=Field;
                ApplicationArea=#Suite;
                SourceExpr=CustomerFieldCaption;
                OnValidate=VAR
                             FieldRec@1000 : Record Field;
                           BEGIN
                             if CustomerFieldCaption = '' then begin
                               SetCustomerField(0);
                               exit;
                             end;

                             if not FindAndFilterToField(FieldRec,CustomerFieldCaption) then
                               ERROR(FieldNotExistErr,CustomerFieldCaption);

                             if FieldRec.COUNT = 1 then begin
                               SetCustomerField(FieldRec."No.");
                               exit;
                             end;

                             if PAGE.RUNMODAL(PAGE::"Field List",FieldRec) = ACTION::LookupOK then
                               SetCustomerField(FieldRec."No.")
                             else
                               ERROR(FieldNotExistErr,CustomerFieldCaption);
                           END;

                OnLookup=VAR
                           FieldRec@1000 : Record Field;
                         BEGIN
                           FindAndFilterToField(FieldRec,Text);
                           FieldRec.SETRANGE("Field Caption");
                           FieldRec.SETRANGE("No.");

                           if PAGE.RUNMODAL(PAGE::"Field List",FieldRec) = ACTION::LookupOK then
                             SetCustomerField(FieldRec."No.");
                         END;

                ImplicitType=Text250;
                ShowCaption=false }

    { 58  ;5   ;Field     ;
                Name=is;
                CaptionML=ENU=is;
                ApplicationArea=#Suite;
                ShowCaption=false }

    { 57  ;5   ;Field     ;
                Name=Field Operator;
                CaptionML=ENU=Operator;
                ApplicationArea=#Suite;
                SourceExpr="Field Operator";
                ImplicitType=Option;
                ShowCaption=false }

    { 56  ;3   ;Group     ;
                Name=Para3.1.2;
                CaptionML=ENU=Specify the message to display when the workflow starts.;
                GroupType=Group }

    { 54  ;4   ;Field     ;
                Name=Custom Message;
                CaptionML=ENU=Message;
                ApplicationArea=#Suite;
                SourceExpr="Custom Message";
                ImplicitType=Text250;
                ShowCaption=false }

    { 10  ;1   ;Group     ;
                Name=Step10;
                CaptionML=ENU="";
                Visible=DoneVisible;
                GroupType=Group }

    { 6   ;2   ;Group     ;
                Name=Para10.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=Customer Approval Workflow Overview }

    { 7   ;3   ;Field     ;
                Name=Overview;
                ApplicationArea=#Suite;
                SourceExpr=SummaryText;
                Editable=FALSE;
                MultiLine=true;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ImplicitType=Text;
                ShowCaption=false }

    { 25  ;2   ;Group     ;
                Name=Para10.2;
                CaptionML=ENU=That's it!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Finish to enable the workflow with the specified settings. }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1040 : Record "Media Repository";
      MediaRepositoryDone@1041 : Record "Media Repository";
      MediaResourcesStandard@1005 : Record "Media Resources";
      MediaResourcesDone@1003 : Record "Media Resources";
      Step@1015 : 'Intro,"Customer Approver Setup","Automatic Approval Setup",Done';
      BackEnabled@1014 : Boolean;
      NextEnabled@1013 : Boolean;
      FinishEnabled@1010 : Boolean;
      TopBannerVisible@1042 : Boolean;
      IntroVisible@1001 : Boolean;
      CustomerApproverSetupVisible@1011 : Boolean;
      CustomerAutoAppDetailsVisible@1027 : Boolean;
      DoneVisible@1004 : Boolean;
      NAVNotSetUpQst@1000 : TextConst 'ENU=Customer Approval has not been set up.\\Are you sure that you want to exit?';
      MandatoryApproverErr@1002 : TextConst '@@@="%1 = User Name";ENU=You must select an approver before continuing.';
      CustomerFieldCaption@1021 : Text[250];
      FieldNotExistErr@1028 : TextConst '@@@="%1 = Field Caption";ENU=Field %1 does not exist.';
      ManualTriggerTxt@1006 : TextConst '@@@="%1 = User Name (eg. An approval request will be sent to the user Domain/Username when the user sends the request manually.)";ENU=An approval request will be sent to the user %1 when the user sends the request manually.';
      AutoTriggerTxt@1020 : TextConst '@@@="%1 = User Name, %2 = Field caption, %3 = Of of this 3 values: Increased, Decreased, Changed (eg. An approval request will be sent to the user Domain/Username when the value in the Credit Limit (LCY) field is Increased.)";ENU=An approval request will be sent to the user %1 when the value in the %2 field is %3.';
      SummaryText@1007 : Text;

    LOCAL PROCEDURE NextStep@3(Backwards@1000 : Boolean);
    BEGIN
      if Backwards then
        Step := Step - 1
      else begin
        if CustomerApproverSetupVisible then
          ValidateApprover;
        if CustomerAutoAppDetailsVisible then
          ValidateFieldSelection;
        Step := Step + 1;
      end;

      case Step of
        Step::Intro:
          ShowIntroStep;
        Step::"Customer Approver Setup":
          ShowApprovalUserSetupDetailsStep;
        Step::"Automatic Approval Setup":
          if "App. Trigger" = "App. Trigger"::"The user changes a specific field"
          then
            ShowCustomerApprovalDetailsStep
          else
            NextStep(Backwards);
        Step::Done:
          ShowDoneStep;
      end;
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE ShowIntroStep@1();
    BEGIN
      ResetWizardControls;
      IntroVisible := true;
      BackEnabled := false;
    END;

    LOCAL PROCEDURE ShowApprovalUserSetupDetailsStep@9();
    BEGIN
      ResetWizardControls;
      CustomerApproverSetupVisible := true;
    END;

    LOCAL PROCEDURE ShowCustomerApprovalDetailsStep@25();
    BEGIN
      ResetWizardControls;
      CustomerAutoAppDetailsVisible := true;
      SetCustomerField(Field);
    END;

    LOCAL PROCEDURE ShowDoneStep@6();
    BEGIN
      ResetWizardControls;
      DoneVisible := true;
      NextEnabled := false;
      FinishEnabled := true;

      if "App. Trigger" = "App. Trigger"::"The user sends an approval requests manually" then
        SummaryText := STRSUBSTNO(ManualTriggerTxt,"Approver ID");
      if "App. Trigger" = "App. Trigger"::"The user changes a specific field"
      then begin
        CALCFIELDS("Field Caption");
        SummaryText := STRSUBSTNO(AutoTriggerTxt,"Approver ID","Field Caption","Field Operator");
      end;

      SummaryText := CONVERTSTR(SummaryText,'\','/');
    END;

    LOCAL PROCEDURE ResetWizardControls@10();
    BEGIN
      // Buttons
      BackEnabled := true;
      NextEnabled := true;
      FinishEnabled := false;

      // Tabs
      IntroVisible := false;
      CustomerApproverSetupVisible := false;
      CustomerAutoAppDetailsVisible := false;
      DoneVisible := false;
    END;

    LOCAL PROCEDURE SetDefaultValues@8();
    VAR
      Workflow@1000 : Record Workflow;
      WorkflowRule@1007 : Record "Workflow Rule";
      WorkflowStep@1003 : Record "Workflow Step";
      WorkflowStepArgument@1006 : Record "Workflow Step Argument";
      WorkflowSetup@1002 : Codeunit "Workflow Setup";
      WorkflowResponseHandling@1005 : Codeunit "Workflow Response Handling";
      WorkflowCode@1001 : Code[20];
    BEGIN
      TableNo := DATABASE::Customer;
      WorkflowCode := WorkflowSetup.GetWorkflowTemplateCode(WorkflowSetup.CustomerCreditLimitChangeApprovalWorkflowCode);
      if Workflow.GET(WorkflowCode) then begin
        WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
        WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.ShowMessageCode);
        if WorkflowStep.FINDFIRST then begin
          WorkflowStepArgument.GET(WorkflowStep.Argument);
          "Custom Message" := WorkflowStepArgument.Message;
        end;
        WorkflowRule.SETRANGE("Workflow Code",WorkflowCode);
        if WorkflowRule.FINDFIRST then begin
          Field := WorkflowRule."Field No.";
          "Field Operator" := WorkflowRule.Operator;
        end;
      end;
    END;

    LOCAL PROCEDURE ValidateApprover@11();
    BEGIN
      if "Approver ID" = '' then
        ERROR(MandatoryApproverErr);
    END;

    LOCAL PROCEDURE ValidateFieldSelection@7();
    BEGIN
    END;

    LOCAL PROCEDURE CanEnableNext@32();
    BEGIN
      NextEnabled := true;
    END;

    LOCAL PROCEDURE SetCustomerField@54(FieldNo@1000 : Integer);
    BEGIN
      Field := FieldNo;
      CALCFIELDS("Field Caption");
      CustomerFieldCaption := "Field Caption";
    END;

    LOCAL PROCEDURE FindAndFilterToField@57(VAR FieldRec@1000 : Record Field;CaptionToFind@1001 : Text) : Boolean;
    BEGIN
      FieldRec.FILTERGROUP(2);
      FieldRec.SETRANGE(TableNo,DATABASE::Customer);
      FieldRec.SETFILTER(Type,STRSUBSTNO('%1|%2|%3|%4|%5|%6|%7|%8|%9|%10|%11|%12|%13',
          FieldRec.Type::Boolean,
          FieldRec.Type::Text,
          FieldRec.Type::Code,
          FieldRec.Type::Decimal,
          FieldRec.Type::Integer,
          FieldRec.Type::BigInteger,
          FieldRec.Type::Date,
          FieldRec.Type::Time,
          FieldRec.Type::DateTime,
          FieldRec.Type::DateFormula,
          FieldRec.Type::Option,
          FieldRec.Type::Duration,
          FieldRec.Type::RecordID));
      FieldRec.SETRANGE(Class,FieldRec.Class::Normal);

      if CaptionToFind = "Field Caption" then
        FieldRec.SETRANGE("No.",Field)
      else
        FieldRec.SETFILTER("Field Caption",'%1','@' + CaptionToFind + '*');

      exit(FieldRec.FINDFIRST);
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      then
        if MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") and
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        then
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    BEGIN
    END.
  }
}

