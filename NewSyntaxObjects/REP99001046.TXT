OBJECT Report 99001046 Calculate Work Center Calendar
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Work Center Calendar;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  Window.OPEN(
                    Text000 +
                    Text001);
                END;

  }
  DATASET
  {
    { 8481;    ;DataItem;Work Center         ;
               DataItemTable="Work Center";
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               if StartingDate = 0D then
                                 ERROR(Text004);

                               if EndingDate = 0D then
                                 ERROR(Text005);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");

                                  TESTFIELD(Efficiency);

                                  Calendar.RESET;
                                  Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Work Center");
                                  Calendar.SETRANGE("No.","No.");
                                  Calendar.SETRANGE(Date,StartingDate,EndingDate);
                                  Calendar.DELETEALL;

                                  if "Consolidated Calendar" then begin
                                    Calendar.SETRANGE("No.");
                                    Calendar.SETCURRENTKEY("Work Center No.",Date);
                                    Calendar.SETRANGE("Work Center No.","No.");
                                    Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Machine Center");
                                    if Calendar.FIND('-') then
                                      repeat
                                        TempCalendar.INIT;
                                        TempCalendar."Capacity Type" := Calendar."Capacity Type"::"Work Center";
                                        TempCalendar."No." := "No.";
                                        TempCalendar."Work Center No." := "No.";
                                        TempCalendar.Date := Calendar.Date;
                                        TempCalendar."Starting Time" := Calendar."Starting Time";
                                        if TempCalendar.INSERT then;
                                        TempCalendar."Starting Time" := Calendar."Ending Time";
                                        if TempCalendar.INSERT then;
                                      until Calendar.NEXT = 0;

                                    Calendar.RESET;
                                    Calendar.SETCURRENTKEY("Work Center No.",Date);
                                    Calendar.SETRANGE("Capacity Type",Calendar."Capacity Type"::"Machine Center");
                                    Calendar.SETRANGE("Work Center No.","No.");
                                    TempCalendar.SETRANGE("Work Center No.","No.");
                                    if TempCalendar.FIND('-') then
                                      repeat
                                        CLEAR(LastTime);
                                        TempCalendar.SETRANGE(Date,TempCalendar.Date);
                                        Calendar.SETRANGE(Date,TempCalendar.Date);
                                        if TempCalendar.FIND('-') then
                                          repeat
                                            if LastTime = 000000T then
                                              LastTime := TempCalendar."Starting Time"
                                            else begin
                                              Calendar.SETFILTER("Starting Time",'<=%1',LastTime);
                                              Calendar.SETFILTER("Ending Time",'>%1',LastTime);
                                              if Calendar.FIND('-') then begin
                                                Calendar2 := TempCalendar;
                                                Calendar2."Work Shift Code" := '';
                                                Calendar2."Starting Time" := LastTime;
                                                Calendar2.VALIDATE("Ending Time",TempCalendar."Starting Time");
                                                Calendar2.VALIDATE("No.");
                                                Calendar2.Capacity := 0;
                                                repeat
                                                  Calendar2.Capacity := Calendar2.Capacity + (Calendar.Capacity - Calendar."Absence Capacity") *
                                                    Calendar.Efficiency / 100;
                                                until Calendar.NEXT = 0;
                                                if Calendar2.Capacity <> 0 then begin
                                                  Calendar2.VALIDATE(Capacity);
                                                  Calendar2.INSERT;
                                                end;
                                              end;
                                              LastTime := TempCalendar."Starting Time";
                                            end;
                                          until TempCalendar.NEXT = 0;
                                        TempCalendar.SETRANGE(Date);
                                      until TempCalendar.NEXT = 0;
                                  end else begin
                                    TESTFIELD(Capacity);
                                    TESTFIELD("Unit of Measure Code");

                                    CalendarMgt.CalculateSchedule(
                                      0,
                                      "No.",
                                      "No.",
                                      StartingDate,
                                      EndingDate);
                                  end;
                                END;

               ReqFilterFields="No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               if StartingDate = 0D then
                 StartingDate := DMY2DATE(1,1,DATE2DMY(WORKDATE,3));
               if EndingDate = 0D then
                 EndingDate := DMY2DATE(31,12,DATE2DMY(WORKDATE,3));
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date that you will start creating new calendar entries.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=StartingDate }

      { 6   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the final date that you will create new calendar entries.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=EndingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Calculating Work Centers...\\';
      Text001@1001 : TextConst 'ENU=No.            #1##########';
      Text004@1002 : TextConst 'ENU=You must fill in the starting date field.';
      Text005@1003 : TextConst 'ENU=You must fill in the ending date field.';
      Calendar@1004 : Record "Calendar Entry";
      Calendar2@1005 : Record "Calendar Entry";
      TempCalendar@1010 : TEMPORARY Record "Calendar Entry";
      CalendarMgt@1006 : Codeunit CalendarManagement;
      Window@1007 : Dialog;
      StartingDate@1008 : Date;
      EndingDate@1009 : Date;
      LastTime@1011 : Time;

    [External]
    PROCEDURE InitializeRequest@1(NewStartingDate@1000 : Date;NewEndingDate@1001 : Date);
    BEGIN
      StartingDate := NewStartingDate;
      EndingDate := NewEndingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

