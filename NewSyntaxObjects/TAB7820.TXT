OBJECT Table 7820 MS-QBO Customer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ExtTxtIDIntegrationRecord@1000 : Record "Ext Txt ID Integration Record";
               RecordRef@1001 : RecordRef;
             BEGIN
               RecordRef.GETTABLE(Rec);
               ExtTxtIDIntegrationRecord.InsertIntegrationRecord(RecordRef);
             END;

    CaptionML=ENU=MS-QBO Customer;
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Text250       ;CaptionML=ENU=Id }
    { 2   ;   ;SyncToken           ;Text250       ;CaptionML=ENU=SyncToken }
    { 3   ;   ;MetaData            ;BLOB          ;CaptionML=ENU=MetaData }
    { 4   ;   ;MetaData CreateTime ;DateTime      ;CaptionML=ENU=MetaData CreateTime }
    { 5   ;   ;MetaData LastUpdatedTime;DateTime  ;CaptionML=ENU=MetaData LastUpdatedTime }
    { 6   ;   ;Title               ;Text15        ;CaptionML=ENU=Title }
    { 7   ;   ;GivenName           ;Text25        ;CaptionML=ENU=GivenName }
    { 8   ;   ;MiddleName          ;Text25        ;CaptionML=ENU=MiddleName }
    { 9   ;   ;FamilyName          ;Text25        ;CaptionML=ENU=FamilyName }
    { 10  ;   ;Suffix              ;Text10        ;CaptionML=ENU=Suffix }
    { 11  ;   ;DisplayName         ;Text100       ;CaptionML=ENU=DisplayName }
    { 12  ;   ;FullyQualifiedName  ;Text250       ;CaptionML=ENU=FullyQualifiedName }
    { 13  ;   ;CompanyName         ;Text50        ;CaptionML=ENU=CompanyName }
    { 14  ;   ;PrintOnCheckName    ;Text110       ;CaptionML=ENU=PrintOnCheckName }
    { 15  ;   ;Active              ;Boolean       ;CaptionML=ENU=Active }
    { 16  ;   ;PrimaryPhone        ;BLOB          ;CaptionML=ENU=PrimaryPhone;
                                                   SubType=Json }
    { 17  ;   ;AlternatePhone      ;BLOB          ;CaptionML=ENU=AlternatePhone }
    { 18  ;   ;Mobile              ;BLOB          ;CaptionML=ENU=Mobile }
    { 19  ;   ;Fax                 ;BLOB          ;CaptionML=ENU=Fax }
    { 20  ;   ;PrimaryEmailAddr    ;BLOB          ;CaptionML=ENU=PrimaryEmailAddr;
                                                   SubType=Json }
    { 21  ;   ;WebAddr             ;BLOB          ;CaptionML=ENU=WebAddr }
    { 22  ;   ;DefaultTaxCodeRef   ;BLOB          ;CaptionML=ENU=DefaultTaxCodeRef }
    { 23  ;   ;Taxable             ;Boolean       ;CaptionML=ENU=Taxable }
    { 24  ;   ;BillAddr            ;BLOB          ;CaptionML=ENU=BillAddr;
                                                   SubType=Json }
    { 25  ;   ;ShipAddr            ;BLOB          ;CaptionML=ENU=ShipAddr }
    { 26  ;   ;Notes               ;BLOB          ;CaptionML=ENU=Notes }
    { 27  ;   ;Job                 ;Boolean       ;CaptionML=ENU=Job }
    { 28  ;   ;BillWithParent      ;Boolean       ;CaptionML=ENU=BillWithParent }
    { 29  ;   ;ParentRef           ;BLOB          ;CaptionML=ENU=ParentRef }
    { 30  ;   ;Level               ;Integer       ;CaptionML=ENU=Level }
    { 31  ;   ;SalesTermRef        ;BLOB          ;CaptionML=ENU=SalesTermRef }
    { 32  ;   ;PaymentMethodRef    ;BLOB          ;CaptionML=ENU=PaymentMethodRef }
    { 33  ;   ;Balance             ;Decimal       ;CaptionML=ENU=Balance }
    { 34  ;   ;OpenBalanceDate     ;Date          ;CaptionML=ENU=OpenBalanceDate }
    { 35  ;   ;BalanceWithJobs     ;Decimal       ;CaptionML=ENU=BalanceWithJobs }
    { 36  ;   ;CurrencyRef         ;BLOB          ;CaptionML=ENU=CurrencyRef }
    { 37  ;   ;PreferredDeliveryMethod;Text250    ;CaptionML=ENU=PreferredDeliveryMethod }
    { 38  ;   ;ResaleNum           ;Text16        ;CaptionML=ENU=ResaleNum }
    { 39  ;   ;All                 ;BLOB          ;CaptionML=ENU=All;
                                                   SubType=Json }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=true }
    {    ;"MetaData LastUpdatedTime"               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmptyJsonTxt@1001 : TextConst '@@@={Locked};ENU={}';

    PROCEDURE GetAll@2(MSQBOTableMgt@1000 : Codeunit "MS-QBO Table Mgt.";IdToSkipSyncFor@1001 : Text[250]);
    VAR
      JToken@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      LastUpdateDateTime@1002 : DateTime;
      Query@1004 : Text;
    BEGIN
      OnGettingAll(MSQBOTableMgt);
      LastUpdateDateTime := MSQBOTableMgt.GetLastUpdatedTimeAsUtc(DATABASE::"MS-QBO Customer");
      Query := 'Select * from Customer';
      case true of
        (IdToSkipSyncFor = '') and (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1''',
              FORMAT(LastUpdateDateTime,0,9));
        (IdToSkipSyncFor <> '') and (LastUpdateDateTime = 0DT):
          Query += STRSUBSTNO(' where Id != ''%1''',IdToSkipSyncFor);
        (IdToSkipSyncFor <> '') and (LastUpdateDateTime <> 0DT):
          Query += STRSUBSTNO(' where Metadata.LastUpdatedTime > ''%1'' AND Id != ''%2''',
              FORMAT(LastUpdateDateTime,0,9),IdToSkipSyncFor);
      end;
      MSQBOTableMgt.GetEntities(Query,'Customer',JToken);
      GetCustomersFromJson(JToken,MSQBOTableMgt);
    END;

    [Integration]
    LOCAL PROCEDURE OnGettingAll@8(VAR MSQBOTableMgt@1000 : Codeunit "MS-QBO Table Mgt.");
    BEGIN
    END;

    PROCEDURE GetCustomer@25(MSQBOTableMgt@1001 : Codeunit "MS-QBO Table Mgt.";ExternalId@1000 : Text[250]);
    VAR
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      MSQBOTableMgt.GetEntity(ExternalId,'Customer',JToken);
      GetCustomersFromJson(JToken,MSQBOTableMgt);
    END;

    PROCEDURE Create@26(MSQBOTableMgt@1000 : Codeunit "MS-QBO Table Mgt.") EntityCreated : Boolean;
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CustomerToJson(JObject,true);
      if JObject.ToString <> EmptyJsonTxt then begin
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        if MSQBOTableMgt.CreateEntity('Customer',JObject,JToken) then begin
          GetCustomersFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityCreated := true;
        end;
      end;
    END;

    PROCEDURE Update@27(MSQBOTableMgt@1000 : Codeunit "MS-QBO Table Mgt.") EntityUpdated : Boolean;
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CustomerToJson(JObject,false);
      if JObject.ToString <> EmptyJsonTxt then begin
        OnBeforeUpdate(Rec,MSQBOTableMgt);
        if MSQBOTableMgt.UpdateEntity('Customer',JObject,JToken) then begin
          GetCustomersFromJson(JToken,MSQBOTableMgt);
          OnAfterUpdate(Rec);
          EntityUpdated := true;
        end;
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdate@10(MSQBOCustomer@1001 : Record "MS-QBO Customer";VAR MSQBOTableMgt@1000 : Codeunit "MS-QBO Table Mgt.");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdate@9(VAR MSQBOCustomer@1001 : Record "MS-QBO Customer");
    BEGIN
    END;

    LOCAL PROCEDURE GetCustomersFromJson@44(JToken@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";MSQBOTableMgt@1002 : Codeunit "MS-QBO Table Mgt.");
    VAR
      MSQBOCustomer@1003 : Record "MS-QBO Customer";
      ExtTxtIDIntegrationRecord@1007 : Record "Ext Txt ID Integration Record";
      ChildJToken@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      JsonArray@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      OutStream@1006 : OutStream;
      EntityId@1004 : Text[250];
    BEGIN
      if ISNULL(JToken) then begin
        NoCustomersPresentInResponseJson;
        exit;
      end;

      JsonArray := JsonArray.JArray;

      // Check if value is an array
      if FORMAT(JToken.GetType) = FORMAT(JsonArray.GetType) then
        ChildJToken := JToken.First
      else
        ChildJToken := JToken;

      while not ISNULL(ChildJToken) do begin
        EntityId := COPYSTR(MSQBOTableMgt.GetTextFromJToken(ChildJToken,'Id'),1,MAXSTRLEN(Id));

        // Customer does not exist
        if not GET(EntityId) then begin
          // Update the customer with the right primary key
          if MSQBOCustomer.GET('') then begin
            MSQBOCustomer.DELETE;
            ExtTxtIDIntegrationRecord.UpdateCoupledRecordForExternalId('',EntityId,DATABASE::Customer);
          end;

          INIT;
          Id := EntityId;
          INSERT(true);
        end;

        UpdateCustomerFromJson(Rec,ChildJToken);
        All.CREATEOUTSTREAM(OutStream);
        OutStream.WRITETEXT(FORMAT(ChildJToken));

        MODIFY;

        ChildJToken := ChildJToken.Next;
      end;
    END;

    PROCEDURE GetNestedValue@5(FieldName@1000 : Text;Path@1001 : Text) : Text;
    VAR
      MSQBOTableMgt@1002 : Codeunit "MS-QBO Table Mgt.";
      RecordRef@1005 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      exit(MSQBOTableMgt.GetNestedValue(RecordRef,FIELDNO(All),FieldName + '.' + Path));
    END;

    PROCEDURE UpdateDisplayNameInQBO@4() ValueChanged : Boolean;
    BEGIN
      DisplayName := COPYSTR(FullyQualifiedName,1,MAXSTRLEN(DisplayName));
      ValueChanged := DisplayName <> '';
    END;

    PROCEDURE UpdateEmailFromQBO@1(VAR Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1003 : Codeunit "MS-QBO Table Mgt.";
      CustomerRecordRef@1001 : RecordRef;
      CustomerFieldRef@1002 : FieldRef;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("E-Mail"));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(PrimaryEmailAddr),'Address'),
          CustomerFieldRef);
      if ValueChanged then
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdateEmailInQBO@3(Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1002 : Codeunit "MS-QBO Table Mgt.";
      RecordRef@1001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      ValueChanged := MSQBOTableMgt.SetNestedValue(RecordRef,FIELDNO(PrimaryEmailAddr),'Address',Customer."E-Mail");
      if ValueChanged then
        RecordRef.SETTABLE(Rec);
    END;

    PROCEDURE UpdatePhoneFromQBO@16(VAR Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1003 : Codeunit "MS-QBO Table Mgt.";
      CustomerRecordRef@1001 : RecordRef;
      CustomerFieldRef@1002 : FieldRef;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Phone No."));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(PrimaryPhone),'FreeFormNumber'),
          CustomerFieldRef);
      if ValueChanged then
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdatePhoneInQBO@15(Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      MSQBOTableMgt@1002 : Codeunit "MS-QBO Table Mgt.";
      RecordRef@1001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      ValueChanged := MSQBOTableMgt.SetNestedValue(RecordRef,FIELDNO(PrimaryPhone),'FreeFormNumber',Customer."Phone No.");
      if ValueChanged then
        RecordRef.SETTABLE(Rec);
    END;

    PROCEDURE UpdateAddressFromQBO@21(VAR Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      CountryRegion@1001 : Record "Country/Region";
      MSQBOTableMgt@1008 : Codeunit "MS-QBO Table Mgt.";
      CustomerRecordRef@1007 : RecordRef;
      CustomerFieldRef@1006 : FieldRef;
      CountryText@1002 : Text;
      PostCodeTxt@1004 : Text;
      CityText@1005 : Text;
    BEGIN
      CustomerRecordRef.GETTABLE(Customer);
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO(Address));
      ValueChanged := MSQBOTableMgt.AssignValueFromText(GetNestedValue(FIELDNAME(BillAddr),'Line1'),
          CustomerFieldRef);

      CountryText := GetNestedValue(FIELDNAME(BillAddr),'Country');
      if CountryText <> '' then begin
        CountryRegion.SETRANGE(Name,CountryText);
        if not CountryRegion.FINDFIRST then begin
          if STRLEN(CountryText) <= MAXSTRLEN(CountryRegion.Code) then begin
            CountryRegion.SETRANGE(Name);
            CountryRegion.SETRANGE(Code,CountryText);
            if not CountryRegion.FINDFIRST then
              CustomerHasAnInvalidCountryName(CountryText);
          end else
            CustomerHasAnInvalidCountryName(CountryText);
        end;
      end;
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Country/Region Code"));
      ValueChanged := ValueChanged or
        MSQBOTableMgt.AssignValueFromText(CountryRegion.Code,CustomerFieldRef);
      if ValueChanged then
        CustomerRecordRef.SETTABLE(Customer);

      PostCodeTxt := GetNestedValue(FIELDNAME(BillAddr),'PostalCode');
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO("Post Code"));
      ValueChanged := ValueChanged or
        MSQBOTableMgt.AssignValueFromText(PostCodeTxt,CustomerFieldRef);
      if ValueChanged then
        CustomerRecordRef.SETTABLE(Customer);

      CityText := GetNestedValue(FIELDNAME(BillAddr),'City');
      CustomerFieldRef := CustomerRecordRef.FIELD(Customer.FIELDNO(City));
      ValueChanged := ValueChanged or
        MSQBOTableMgt.AssignValueFromText(CityText,CustomerFieldRef);
      if ValueChanged then
        CustomerRecordRef.SETTABLE(Customer);
    END;

    PROCEDURE UpdateAddressInQBO@20(Customer@1000 : Record Customer) ValueChanged : Boolean;
    VAR
      CountryRegion@1001 : Record "Country/Region";
      MSQBOTableMgt@1010 : Codeunit "MS-QBO Table Mgt.";
      RecordRef@1006 : RecordRef;
      FieldRef@1009 : FieldRef;
      Paths@1007 : ARRAY [10] OF Text;
      NewValues@1008 : ARRAY [10] OF Text;
      CountryTxt@1003 : Text;
    BEGIN
      RecordRef.GETTABLE(Rec);
      Paths[1] := 'Line1';
      NewValues[1] := Customer.Address;

      if Customer."Country/Region Code" <> '' then begin
        CountryRegion.GET(Customer."Country/Region Code");
        CountryTxt := CountryRegion.Name;
      end;
      Paths[2] := 'Country';
      NewValues[2] := CountryTxt;
      Paths[3] := 'PostalCode';
      NewValues[3] := Customer."Post Code";
      Paths[4] := 'City';
      NewValues[4] := Customer.City;

      FieldRef := RecordRef.FIELD(FIELDNO(BillAddr));
      ValueChanged := MSQBOTableMgt.SetNestedValues(FieldRef,Paths,NewValues,4);
      if ValueChanged then
        RecordRef.SETTABLE(Rec);
    END;

    LOCAL PROCEDURE CustomerToJson@29(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";IsNewCustomer@1000 : Boolean);
    VAR
      JSONManagement@1005 : Codeunit "JSON Management";
    BEGIN
      ChangesInCustomerToJson(JObject);

      if JObject.ToString = EmptyJsonTxt then
        exit;

      if not IsNewCustomer then begin
        JSONManagement.InitializeObjectFromJObject(JObject);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(Id),Id);
        JSONManagement.AddJPropertyToJObject(JObject,FIELDNAME(SyncToken),SyncToken);
        JSONManagement.AddJPropertyToJObject(JObject,'sparse','true');
      end;
    END;

    LOCAL PROCEDURE ChangesInCustomerToJson@11(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      TempPrevMSQBOCustomer@1001 : TEMPORARY Record "MS-QBO Customer";
      MSQBOTableMgt@1003 : Codeunit "MS-QBO Table Mgt.";
      JSONManagement@1005 : Codeunit "JSON Management";
      JToken@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      Text@1004 : DotNet "'mscorlib'.System.String";
      RecordRef@1008 : RecordRef;
      FieldRef@1009 : FieldRef;
    BEGIN
      RecordRef.GETTABLE(Rec);
      FieldRef := RecordRef.FIELD(FIELDNO(All));
      Text := MSQBOTableMgt.GetTextValueFromField(FieldRef);

      TempPrevMSQBOCustomer.INIT;

      if FORMAT(Text) <> '' then begin
        JToken := JToken.Parse(FORMAT(Text));
        UpdateCustomerFromJson(TempPrevMSQBOCustomer,JToken);
      end;

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JObject);

      AddFieldChangeToJson(FIELDNO(GivenName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(MiddleName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(FamilyName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Suffix),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(DisplayName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(FullyQualifiedName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(CompanyName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrintOnCheckName),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Active),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrimaryPhone),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(AlternatePhone),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Mobile),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Fax),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PrimaryEmailAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(WebAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(DefaultTaxCodeRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Taxable),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BillAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ShipAddr),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Notes),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Job),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BillWithParent),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ParentRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Level),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(SalesTermRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PaymentMethodRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(Balance),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(OpenBalanceDate),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(BalanceWithJobs),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(CurrencyRef),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(PreferredDeliveryMethod),TempPrevMSQBOCustomer,JSONManagement,JObject);

      AddFieldChangeToJson(FIELDNO(ResaleNum),TempPrevMSQBOCustomer,JSONManagement,JObject);
    END;

    LOCAL PROCEDURE UpdateCustomerFromJson@7(VAR MSQBOCustomer@1000 : Record "MS-QBO Customer";JToken@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken");
    BEGIN
      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(SyncToken),JToken,'SyncToken');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(MetaData),JToken,'MetaData');

      UpdateFieldValueByPath(MSQBOCustomer,MSQBOCustomer.FIELDNO("MetaData CreateTime"),JToken,'MetaData.CreateTime');

      UpdateFieldValueByPath(MSQBOCustomer,MSQBOCustomer.FIELDNO("MetaData LastUpdatedTime"),JToken,'MetaData.LastUpdatedTime');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Title),JToken,'Title');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(GivenName),JToken,'GivenName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(MiddleName),JToken,'MiddleName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(FamilyName),JToken,'FamilyName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Suffix),JToken,'Suffix');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(DisplayName),JToken,'DisplayName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(FullyQualifiedName),JToken,'FullyQualifiedName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(CompanyName),JToken,'CompanyName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrintOnCheckName),JToken,'PrintOnCheckName');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Active),JToken,'Active');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrimaryPhone),JToken,'PrimaryPhone');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(AlternatePhone),JToken,'AlternatePhone');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Mobile),JToken,'Mobile');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Fax),JToken,'Fax');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PrimaryEmailAddr),JToken,'PrimaryEmailAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(WebAddr),JToken,'WebAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(DefaultTaxCodeRef),JToken,'DefaultTaxCodeRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Taxable),JToken,'Taxable');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BillAddr),JToken,'BillAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ShipAddr),JToken,'ShipAddr');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Notes),JToken,'Notes');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Job),JToken,'Job');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BillWithParent),JToken,'BillWithParent');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ParentRef),JToken,'ParentRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Level),JToken,'Level');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(SalesTermRef),JToken,'SalesTermRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PaymentMethodRef),JToken,'PaymentMethodRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(Balance),JToken,'Balance');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(OpenBalanceDate),JToken,'OpenBalanceDate');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(BalanceWithJobs),JToken,'BalanceWithJobs');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(CurrencyRef),JToken,'CurrencyRef');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(PreferredDeliveryMethod),JToken,'PreferredDeliveryMethod');

      UpdateFieldValue(MSQBOCustomer,MSQBOCustomer.FIELDNO(ResaleNum),JToken,'ResaleNum');
    END;

    LOCAL PROCEDURE UpdateFieldValue@40(VAR MSQBOCustomer@1002 : Record "MS-QBO Customer";FieldNo@1001 : Integer;JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1005 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit "MS-QBO Table Mgt.";
      JSONManagement@1008 : Codeunit "JSON Management";
      RecordRef@1003 : RecordRef;
      FieldRef@1000 : FieldRef;
      Value@1007 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOCustomer);
      FieldRef := RecordRef.FIELD(FieldNo);

      if JSONManagement.GetStringPropertyValueFromJObjectByName(JObject,propertyName,Value) then
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOCustomer);
    END;

    LOCAL PROCEDURE UpdateFieldValueByPath@6(VAR MSQBOCustomer@1002 : Record "MS-QBO Customer";FieldNo@1001 : Integer;JObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyPath@1005 : Text);
    VAR
      MSQBOTableMgt@1004 : Codeunit "MS-QBO Table Mgt.";
      JSONManagement@1008 : Codeunit "JSON Management";
      RecordRef@1003 : RecordRef;
      FieldRef@1000 : FieldRef;
      Value@1007 : Text;
    BEGIN
      RecordRef.GETTABLE(MSQBOCustomer);
      FieldRef := RecordRef.FIELD(FieldNo);

      if JSONManagement.GetStringPropertyValueFromJObjectByPath(JObject,propertyPath,Value) then
        MSQBOTableMgt.WriteTextToField(FieldRef,Value);

      RecordRef.SETTABLE(MSQBOCustomer);
    END;

    LOCAL PROCEDURE AddFieldChangeToJson@22(FieldNo@1000 : Integer;TempPrevMSQBOCustomer@1001 : TEMPORARY Record "MS-QBO Customer";JSONManagement@1002 : Codeunit "JSON Management";VAR JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      MSQBOTableMgt@1008 : Codeunit "MS-QBO Table Mgt.";
      JSONManagement2@1012 : Codeunit "JSON Management";
      CurrRecRef@1004 : RecordRef;
      PrevRecRef@1005 : RecordRef;
      PrevFieldRef@1006 : FieldRef;
      CurrFieldRef@1007 : FieldRef;
      JObject2@1011 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      PrevValue@1009 : Text;
      CurrValue@1010 : Text;
    BEGIN
      PrevRecRef.GETTABLE(TempPrevMSQBOCustomer);
      CurrRecRef.GETTABLE(Rec);
      CurrFieldRef := CurrRecRef.FIELD(FieldNo);
      PrevFieldRef := PrevRecRef.FIELD(FieldNo);

      PrevValue := MSQBOTableMgt.GetTextValueFromField(PrevFieldRef);
      CurrValue := MSQBOTableMgt.GetTextValueFromField(CurrFieldRef);

      if CurrValue <> PrevValue then
        if FORMAT(CurrFieldRef.TYPE) = 'BLOB' then begin
          JSONManagement2.InitializeObject(CurrValue);
          JSONManagement2.GetJSONObject(JObject2);
          JSONManagement.AddJObjectToJObject(JObject,CurrFieldRef.NAME,CurrValue);
        end else
          JSONManagement.AddJPropertyToJObject(JObject,CurrFieldRef.NAME,CurrValue);
    END;

    [Integration]
    LOCAL PROCEDURE NoCustomersPresentInResponseJson@12();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE CustomerHasAnInvalidCountryName@13(BadCountryName@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

