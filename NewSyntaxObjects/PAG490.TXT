OBJECT Page 490 Acc. Schedule Overview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Acc. Schedule Overview;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Acc. Schedule Line";
    DataCaptionExpr=CurrentSchedName + ' - ' + CurrentColumnName;
    PageType=List;
    ShowFilter=false;
    OnInit=BEGIN
             Dim4FilterEnable := true;
             Dim3FilterEnable := true;
             Dim2FilterEnable := true;
             Dim1FilterEnable := true;
           END;

    OnOpenPage=BEGIN
                 UseAmtsInAddCurr := false;
                 GLSetup.GET;
                 UseAmtsInAddCurrVisible := GLSetup."Additional Reporting Currency" <> '';
                 if NewCurrentSchedName <> '' then
                   CurrentSchedName := NewCurrentSchedName;
                 if CurrentSchedName = '' then
                   CurrentSchedName := Text000;
                 if NewCurrentColumnName <> '' then
                   CurrentColumnName := NewCurrentColumnName;
                 if CurrentColumnName = '' then
                   CurrentColumnName := Text000;
                 if NewPeriodTypeSet then
                   PeriodType := ModifiedPeriodType;

                 AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,TempColumnLayout);
                 AccSchedManagement.OpenSchedule(CurrentSchedName,Rec);
                 AccSchedManagement.OpenColumns(CurrentColumnName,TempColumnLayout);
                 AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,true);
                 UpdateColumnCaptions;
                 if AccSchedName.GET(CurrentSchedName) then
                   if AccSchedName."Analysis View Name" <> '' then
                     AnalysisView.GET(AccSchedName."Analysis View Name")
                   else begin
                     CLEAR(AnalysisView);
                     AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
                     AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
                   end;

                 AccSchedManagement.FindPeriod(Rec,'',PeriodType);
                 SETFILTER(Show,'<>%1',Show::No);
                 SETRANGE("Dimension 1 Filter");
                 SETRANGE("Dimension 2 Filter");
                 SETRANGE("Dimension 3 Filter");
                 SETRANGE("Dimension 4 Filter");
                 SETRANGE("Cost Center Filter");
                 SETRANGE("Cost Object Filter");
                 SETRANGE("Cash Flow Forecast Filter");
                 SETRANGE("Cost Budget Filter");
                 SETRANGE("G/L Budget Filter");
                 UpdateDimFilterControls;
                 DateFilter := GETFILTER("Date Filter");
               END;

    OnAfterGetRecord=VAR
                       ColumnNo@1000 : Integer;
                     BEGIN
                       CLEAR(ColumnValues);

                       if (Totaling = '') or (not TempColumnLayout.FINDSET) then
                         exit;

                       repeat
                         ColumnNo := ColumnNo + 1;
                         if (ColumnNo > ColumnOffset) and (ColumnNo - ColumnOffset <= ARRAYLEN(ColumnValues)) then begin
                           ColumnValues[ColumnNo - ColumnOffset] :=
                             RoundNone(
                               MatrixMgt.RoundValue(
                                 AccSchedManagement.CalcCell(Rec,TempColumnLayout,UseAmtsInAddCurr),
                                 TempColumnLayout."Rounding Factor"),
                               TempColumnLayout."Rounding Factor");
                           ColumnLayoutArr[ColumnNo - ColumnOffset] := TempColumnLayout;
                           GetStyle(ColumnNo - ColumnOffset,"Line No.",TempColumnLayout."Line No.");
                         end;
                       until TempColumnLayout.NEXT = 0;
                       AccSchedManagement.ForceRecalculate(false);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 28      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 40      ;1   ;Action    ;
                      Name=Print;
                      Ellipsis=true;
                      CaptionML=ENU=Print;
                      ToolTipML=ENU=Print the information in the window. A print request window opens where you can specify what to include on the print-out.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Print;
                      OnAction=VAR
                                 AccSched@1000 : Report "Account Schedule";
                                 DateFilter2@1002 : Text;
                                 GLBudgetFilter2@1003 : Text;
                                 BusUnitFilter@1004 : Text;
                                 CostBudgetFilter2@1005 : Text;
                               BEGIN
                                 AccSched.SetAccSchedName(CurrentSchedName);
                                 AccSched.SetColumnLayoutName(CurrentColumnName);
                                 DateFilter2 := GETFILTER("Date Filter");
                                 GLBudgetFilter2 := GETFILTER("G/L Budget Filter");
                                 CostBudgetFilter2 := GETFILTER("Cost Budget Filter");
                                 BusUnitFilter := GETFILTER("Business Unit Filter");
                                 AccSched.SetFilters(DateFilter2,GLBudgetFilter2,CostBudgetFilter2,BusUnitFilter,Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter);
                                 AccSched.RUN;
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=PreviousColumn;
                      CaptionML=ENU=Previous Column;
                      ToolTipML=ENU=Go to the previous column.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AdjustColumnOffset(-1);
                               END;
                                }
      { 27      ;1   ;Action    ;
                      Name=NextPeriod;
                      CaptionML=ENU=Next Period;
                      ToolTipML=ENU=Show the information based on the next period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AccSchedManagement.FindPeriod(Rec,'>=',PeriodType);
                                 DateFilter := GETFILTER("Date Filter");
                               END;
                                }
      { 26      ;1   ;Action    ;
                      Name=PreviousPeriod;
                      CaptionML=ENU=Previous Period;
                      ToolTipML=ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AccSchedManagement.FindPeriod(Rec,'<=',PeriodType);
                                 DateFilter := GETFILTER("Date Filter");
                               END;
                                }
      { 1       ;1   ;Action    ;
                      Name=NextColumn;
                      CaptionML=ENU=Next Column;
                      ToolTipML=ENU=Go to the next column.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AdjustColumnOffset(1);
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=Recalculate;
                      CaptionML=ENU=Recalculate;
                      ToolTipML=ENU=Update the account schedule overview based on recent changes.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Refresh;
                      OnAction=BEGIN
                                 AccSchedManagement.ForceRecalculate(true);
                               END;
                                }
      { 11      ;1   ;ActionGroup;
                      Name=Excel;
                      CaptionML=ENU=Excel }
      { 41      ;2   ;ActionGroup;
                      Name=Export to Excel;
                      CaptionML=ENU=Export to Excel;
                      Image=ExportToExcel }
      { 292     ;3   ;Action    ;
                      Name=Create New Document;
                      CaptionML=ENU=Create New Document;
                      ToolTipML=ENU=Open the account schedule overview in a new Excel workbook. This creates an Excel workbook on your device.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportAccSchedToExcel@1001 : Report "Export Acc. Sched. to Excel";
                               BEGIN
                                 ExportAccSchedToExcel.SetOptions(Rec,CurrentColumnName,UseAmtsInAddCurr);
                                 ExportAccSchedToExcel.RUN;
                               END;
                                }
      { 13      ;3   ;Action    ;
                      Name=Update Existing Document;
                      CaptionML=ENU=Update Existing Document;
                      ToolTipML=ENU=Refresh the data in an existing Excel workbook. You must specify the workbook that you want to update.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportAccSchedToExcel@1000 : Report "Export Acc. Sched. to Excel";
                               BEGIN
                                 ExportAccSchedToExcel.SetOptions(Rec,CurrentColumnName,UseAmtsInAddCurr);
                                 ExportAccSchedToExcel.SetUpdateExistingWorksheet(true);
                                 ExportAccSchedToExcel.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 8   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 10  ;2   ;Field     ;
                Name=CurrentSchedName;
                Lookup=true;
                CaptionML=ENU=Account Schedule Name;
                ToolTipML=ENU=Specifies the name of the account schedule to be shown in the window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentSchedName;
                Importance=Promoted;
                LookupPageID="Account Schedule Names";
                OnValidate=BEGIN
                             AccSchedManagement.CheckName(CurrentSchedName);
                             CurrentSchedNameOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           exit(AccSchedManagement.LookupName(CurrentSchedName,Text));
                         END;

                ImplicitType=Code10 }

    { 12  ;2   ;Field     ;
                Name=CurrentColumnName;
                Lookup=true;
                CaptionML=ENU=Column Layout Name;
                ToolTipML=ENU=Specifies the name of the column layout that you want to use in the window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentColumnName;
                TableRelation="Column Layout Name".Name;
                OnValidate=BEGIN
                             AccSchedManagement.CheckColumnName(CurrentColumnName);
                             CurrentColumnNameOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           exit(AccSchedManagement.LookupColumnName(CurrentColumnName,Text));
                         END;

                ImplicitType=Code10 }

    { 44  ;2   ;Field     ;
                Name=UseAmtsInAddCurr;
                CaptionML=ENU=Show Amounts in Add. Reporting Currency;
                ToolTipML=ENU=Specifies if the reported amounts are shown in the additional reporting currency.;
                ApplicationArea=#Suite;
                SourceExpr=UseAmtsInAddCurr;
                Visible=UseAmtsInAddCurrVisible;
                MultiLine=true;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Boolean }

    { 42  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                Importance=Promoted;
                OnValidate=BEGIN
                             AccSchedManagement.FindPeriod(Rec,'',PeriodType);
                             DateFilter := GETFILTER("Date Filter");
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Option }

    { 7   ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DateFilter;
                Importance=Promoted;
                OnValidate=VAR
                             ApplicationManagement@1002 : Codeunit ApplicationManagement;
                           BEGIN
                             if ApplicationManagement.MakeDateFilter(DateFilter) = 0 then;
                             SETFILTER("Date Filter",DateFilter);
                             DateFilter := GETFILTER("Date Filter");
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Text }

    { 1900242701;1;Group  ;
                Name=Dimension Filters;
                CaptionML=ENU=Dimension Filters }

    { 37  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=ENU=Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 1 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim1Filter;
                CaptionClass=FormGetCaptionClass(1);
                Importance=Promoted;
                Visible=Dim1FilterEnable;
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             SetDimFilters(1,Dim1Filter);
                           END;

                OnLookup=VAR
                           DimValue@1000 : Record "Dimension Value";
                         BEGIN
                           exit(DimValue.LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                         END;

                ImplicitType=Text }

    { 36  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=ENU=Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 2 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim2Filter;
                CaptionClass=FormGetCaptionClass(2);
                Importance=Promoted;
                Visible=Dim2FilterEnable;
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             SetDimFilters(2,Dim2Filter);
                           END;

                OnLookup=VAR
                           DimValue@1000 : Record "Dimension Value";
                         BEGIN
                           exit(DimValue.LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                         END;

                ImplicitType=Text }

    { 39  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=ENU=Dimension 3 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 3 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim3Filter;
                CaptionClass=FormGetCaptionClass(3);
                Importance=Promoted;
                Visible=Dim3FilterEnable;
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             SetDimFilters(3,Dim3Filter);
                           END;

                OnLookup=VAR
                           DimValue@1000 : Record "Dimension Value";
                         BEGIN
                           exit(DimValue.LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                         END;

                ImplicitType=Text }

    { 38  ;2   ;Field     ;
                Name=Dim4Filter;
                CaptionML=ENU=Dimension 4 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 4 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim4Filter;
                CaptionClass=FormGetCaptionClass(4);
                Importance=Promoted;
                Visible=Dim4FilterEnable;
                Enabled=Dim4FilterEnable;
                OnValidate=BEGIN
                             SetDimFilters(4,Dim4Filter);
                           END;

                OnLookup=VAR
                           DimValue@1000 : Record "Dimension Value";
                         BEGIN
                           exit(DimValue.LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                         END;

                ImplicitType=Text }

    { 3   ;2   ;Field     ;
                Name=CostCenterFilter;
                CaptionML=ENU=Cost Center Filter;
                ToolTipML=ENU=Specifies a cost center for which you want to view account amounts.;
                ApplicationArea=#CostAccounting;
                SourceExpr=CostCenterFilter;
                Importance=Additional;
                OnValidate=BEGIN
                             if CostCenterFilter = '' then
                               SETRANGE("Cost Center Filter")
                             else
                               SETFILTER("Cost Center Filter",CostCenterFilter);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           CostCenter@1000 : Record "Cost Center";
                         BEGIN
                           exit(CostCenter.LookupCostCenterFilter(Text));
                         END;

                ImplicitType=Text }

    { 4   ;2   ;Field     ;
                Name=CostObjectFilter;
                CaptionML=ENU=Cost Object Filter;
                ToolTipML=ENU=Specifies a cost object for which you want to view account amounts.;
                ApplicationArea=#CostAccounting;
                SourceExpr=CostObjectFilter;
                Importance=Additional;
                OnValidate=BEGIN
                             if CostObjectFilter = '' then
                               SETRANGE("Cost Object Filter")
                             else
                               SETFILTER("Cost Object Filter",CostObjectFilter);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           CostObject@1000 : Record "Cost Object";
                         BEGIN
                           exit(CostObject.LookupCostObjectFilter(Text));
                         END;

                ImplicitType=Text }

    { 5   ;2   ;Field     ;
                Name=CashFlowFilter;
                CaptionML=ENU=Cash Flow Filter;
                ToolTipML=ENU=Specifies a dimension filter for the cash flow, for which you want to view account amounts.;
                ApplicationArea=#Advanced;
                SourceExpr=CashFlowFilter;
                Importance=Additional;
                OnValidate=BEGIN
                             if CashFlowFilter = '' then
                               SETRANGE("Cash Flow Forecast Filter")
                             else
                               SETFILTER("Cash Flow Forecast Filter",CashFlowFilter);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           CashFlowForecast@1000 : Record "Cash Flow Forecast";
                         BEGIN
                           exit(CashFlowForecast.LookupCashFlowFilter(Text));
                         END;

                ImplicitType=Text }

    { 6   ;2   ;Field     ;
                Name=G/LBudgetFilter;
                CaptionML=ENU=G/L Budget Filter;
                ToolTipML=ENU=Specifies a code for a general ledger budget that the account schedule line will be filtered on.;
                ApplicationArea=#Suite;
                SourceExpr=GLBudgetFilter;
                Importance=Promoted;
                OnValidate=BEGIN
                             if GLBudgetFilter = '' then
                               SETRANGE("G/L Budget Filter")
                             else
                               SETFILTER("G/L Budget Filter",GLBudgetFilter);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           Result@1001 : Boolean;
                         BEGIN
                           Result := LookupGLBudgetFilter(Text);
                           if Result then begin
                             SETFILTER("G/L Budget Filter",Text);
                             Text := GETFILTER("G/L Budget Filter");
                           end;
                           exit(Result);
                         END;

                ImplicitType=Text }

    { 9   ;2   ;Field     ;
                Name=CostBudgetFilter;
                CaptionML=ENU=Cost Budget Filter;
                ToolTipML=ENU=Specifies a code for a cost budget that the account schedule line will be filtered on.;
                ApplicationArea=#CostAccounting;
                SourceExpr=CostBudgetFilter;
                Importance=Additional;
                OnValidate=BEGIN
                             if CostBudgetFilter = '' then
                               SETRANGE("Cost Budget Filter")
                             else
                               SETFILTER("Cost Budget Filter",CostBudgetFilter);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           Result@1001 : Boolean;
                         BEGIN
                           Result := LookupCostBudgetFilter(Text);
                           if Result then begin
                             SETFILTER("Cost Budget Filter",Text);
                             Text := GETFILTER("Cost Budget Filter");
                           end;
                           exit(Result);
                         END;

                ImplicitType=Text }

    { 48  ;1   ;Group     ;
                Name=Group48;
                Editable=FALSE;
                IndentationColumnName=Indentation;
                IndentationControls=Description;
                GroupType=Repeater }

    { 49  ;2   ;Field     ;
                Name=Row No.;
                ToolTipML=ENU=Specifies a number for the account schedule line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Row No.";
                ImplicitType=Code10 }

    { 51  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies text that will appear on the account schedule line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Style=Strong;
                StyleExpr=Bold;
                ImplicitType=Text80 }

    { 53  ;2   ;Field     ;
                Name=ColumnValues1;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[1];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(1);
                CaptionClass='3,' + ColumnCaptions[1];
                StyleExpr=ColumnStyle1;
                OnDrillDown=BEGIN
                              DrillDown(1);
                            END;
                             }

    { 59  ;2   ;Field     ;
                Name=ColumnValues2;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[2];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(2);
                CaptionClass='3,' + ColumnCaptions[2];
                Visible=NoOfColumns >= 2;
                StyleExpr=ColumnStyle2;
                OnDrillDown=BEGIN
                              DrillDown(2);
                            END;
                             }

    { 61  ;2   ;Field     ;
                Name=ColumnValues3;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[3];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(3);
                CaptionClass='3,' + ColumnCaptions[3];
                Visible=NoOfColumns >= 3;
                StyleExpr=ColumnStyle3;
                OnDrillDown=BEGIN
                              DrillDown(3);
                            END;
                             }

    { 63  ;2   ;Field     ;
                Name=ColumnValues4;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[4];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(4);
                CaptionClass='3,' + ColumnCaptions[4];
                Visible=NoOfColumns >= 4;
                StyleExpr=ColumnStyle4;
                OnDrillDown=BEGIN
                              DrillDown(4);
                            END;
                             }

    { 65  ;2   ;Field     ;
                Name=ColumnValues5;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[5];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(5);
                CaptionClass='3,' + ColumnCaptions[5];
                Visible=NoOfColumns >= 5;
                StyleExpr=ColumnStyle5;
                OnDrillDown=BEGIN
                              DrillDown(5);
                            END;
                             }

    { 81  ;2   ;Field     ;
                Name=ColumnValues6;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[6];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(6);
                CaptionClass='3,' + ColumnCaptions[6];
                Visible=NoOfColumns >= 6;
                StyleExpr=ColumnStyle6;
                OnDrillDown=BEGIN
                              DrillDown(6);
                            END;
                             }

    { 79  ;2   ;Field     ;
                Name=ColumnValues7;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[7];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(7);
                CaptionClass='3,' + ColumnCaptions[7];
                Visible=NoOfColumns >= 7;
                StyleExpr=ColumnStyle7;
                OnDrillDown=BEGIN
                              DrillDown(7);
                            END;
                             }

    { 77  ;2   ;Field     ;
                Name=ColumnValues8;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[8];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(8);
                CaptionClass='3,' + ColumnCaptions[8];
                Visible=NoOfColumns >= 8;
                StyleExpr=ColumnStyle8;
                OnDrillDown=BEGIN
                              DrillDown(8);
                            END;
                             }

    { 75  ;2   ;Field     ;
                Name=ColumnValues9;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[9];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(9);
                CaptionClass='3,' + ColumnCaptions[9];
                Visible=NoOfColumns >= 9;
                StyleExpr=ColumnStyle9;
                OnDrillDown=BEGIN
                              DrillDown(9);
                            END;
                             }

    { 73  ;2   ;Field     ;
                Name=ColumnValues10;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[10];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(10);
                CaptionClass='3,' + ColumnCaptions[10];
                Visible=NoOfColumns >= 10;
                StyleExpr=ColumnStyle10;
                OnDrillDown=BEGIN
                              DrillDown(10);
                            END;
                             }

    { 71  ;2   ;Field     ;
                Name=ColumnValues11;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[11];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(11);
                CaptionClass='3,' + ColumnCaptions[11];
                Visible=NoOfColumns >= 11;
                StyleExpr=ColumnStyle11;
                OnDrillDown=BEGIN
                              DrillDown(11);
                            END;
                             }

    { 69  ;2   ;Field     ;
                Name=ColumnValues12;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=ColumnValues[12];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr(12);
                CaptionClass='3,' + ColumnCaptions[12];
                Visible=NoOfColumns >= 12;
                StyleExpr=ColumnStyle12;
                OnDrillDown=BEGIN
                              DrillDown(12);
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=DEFAULT';
      Text005@1021 : TextConst 'ENU=1,6,,Dimension %1 Filter';
      TempColumnLayout@1004 : TEMPORARY Record "Column Layout";
      ColumnLayoutArr@1018 : ARRAY [12] OF Record "Column Layout";
      AccSchedName@1005 : Record "Acc. Schedule Name";
      AnalysisView@1020 : Record "Analysis View";
      GLSetup@1016 : Record "General Ledger Setup";
      AccSchedManagement@1006 : Codeunit AccSchedManagement;
      MatrixMgt@1029 : Codeunit "Matrix Management";
      DimensionManagement@1044 : Codeunit DimensionManagement;
      CurrentSchedName@1007 : Code[10];
      CurrentColumnName@1008 : Code[10];
      NewCurrentSchedName@1009 : Code[10];
      NewCurrentColumnName@1010 : Code[10];
      ColumnValues@1012 : ARRAY [12] OF Decimal;
      ColumnCaptions@1017 : ARRAY [12] OF Text[80];
      PeriodType@1013 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      UseAmtsInAddCurrVisible@1032 : Boolean;
      UseAmtsInAddCurr@1014 : Boolean;
      Dim1Filter@1019 : Text;
      Dim2Filter@1022 : Text;
      Dim3Filter@1023 : Text;
      Dim4Filter@1024 : Text;
      CostCenterFilter@1011 : Text;
      CostObjectFilter@1001 : Text;
      CashFlowFilter@1015 : Text;
      NoOfColumns@1030 : Integer;
      ColumnOffset@1025 : Integer;
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;
      Dim4FilterEnable@19064250 : Boolean INDATASET;
      GLBudgetFilter@1026 : Text;
      CostBudgetFilter@1027 : Text;
      DateFilter@1028 : Text;
      ModifiedPeriodType@1002 : Option;
      NewPeriodTypeSet@1003 : Boolean;
      ColumnStyle1@1031 : Text INDATASET;
      ColumnStyle2@1043 : Text INDATASET;
      ColumnStyle3@1042 : Text INDATASET;
      ColumnStyle4@1041 : Text INDATASET;
      ColumnStyle5@1040 : Text INDATASET;
      ColumnStyle6@1039 : Text INDATASET;
      ColumnStyle7@1038 : Text INDATASET;
      ColumnStyle8@1037 : Text INDATASET;
      ColumnStyle9@1036 : Text INDATASET;
      ColumnStyle10@1035 : Text INDATASET;
      ColumnStyle11@1034 : Text INDATASET;
      ColumnStyle12@1033 : Text INDATASET;

    [External]
    PROCEDURE SetAccSchedName@6(NewAccSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record "Acc. Schedule Name";
    BEGIN
      NewCurrentSchedName := NewAccSchedName;
      if AccSchedName.GET(NewCurrentSchedName) then
        if AccSchedName."Default Column Layout" <> '' then
          NewCurrentColumnName := AccSchedName."Default Column Layout";
    END;

    [External]
    PROCEDURE SetPeriodType@1(NewPeriodType@1000 : Option);
    BEGIN
      ModifiedPeriodType := NewPeriodType;
      NewPeriodTypeSet := true;
    END;

    LOCAL PROCEDURE SetDimFilters@2(DimNo@1000 : Integer;DimValueFilter@1001 : Text);
    BEGIN
      case DimNo of
        1:
          if DimValueFilter = '' then
            SETRANGE("Dimension 1 Filter")
          else begin
            DimensionManagement.ResolveDimValueFilter(DimValueFilter,AnalysisView."Dimension 1 Code");
            SETFILTER("Dimension 1 Filter",DimValueFilter);
          end;
        2:
          if DimValueFilter = '' then
            SETRANGE("Dimension 2 Filter")
          else begin
            DimensionManagement.ResolveDimValueFilter(DimValueFilter,AnalysisView."Dimension 2 Code");
            SETFILTER("Dimension 2 Filter",DimValueFilter);
          end;
        3:
          if DimValueFilter = '' then
            SETRANGE("Dimension 3 Filter")
          else begin
            DimensionManagement.ResolveDimValueFilter(DimValueFilter,AnalysisView."Dimension 3 Code");
            SETFILTER("Dimension 3 Filter",DimValueFilter);
          end;
        4:
          if DimValueFilter = '' then
            SETRANGE("Dimension 4 Filter")
          else begin
            DimensionManagement.ResolveDimValueFilter(DimValueFilter,AnalysisView."Dimension 4 Code");
            SETFILTER("Dimension 4 Filter",DimValueFilter);
          end;
      end;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE FormGetCaptionClass@12(DimNo@1000 : Integer) : Text[250];
    BEGIN
      case DimNo of
        1:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 1 Code");

            exit(STRSUBSTNO(Text005,DimNo));
          end;
        2:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 2 Code");

            exit(STRSUBSTNO(Text005,DimNo));
          end;
        3:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 3 Code");

            exit(STRSUBSTNO(Text005,DimNo));
          end;
        4:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 4 Code");

            exit(STRSUBSTNO(Text005,DimNo));
          end;
        5:
          exit(FIELDCAPTION("Date Filter"));
        6:
          exit(FIELDCAPTION("Cash Flow Forecast Filter"));
      end;
    END;

    LOCAL PROCEDURE DrillDown@5(ColumnNo@1003 : Integer);
    BEGIN
      TempColumnLayout := ColumnLayoutArr[ColumnNo];
      AccSchedManagement.DrillDownFromOverviewPage(TempColumnLayout,Rec,PeriodType);
    END;

    LOCAL PROCEDURE UpdateColumnCaptions@19();
    VAR
      ColumnNo@1000 : Integer;
      i@1001 : Integer;
    BEGIN
      CLEAR(ColumnCaptions);
      if TempColumnLayout.FINDSET then
        repeat
          ColumnNo := ColumnNo + 1;
          if (ColumnNo > ColumnOffset) and (ColumnNo - ColumnOffset <= ARRAYLEN(ColumnCaptions)) then
            ColumnCaptions[ColumnNo - ColumnOffset] := TempColumnLayout."Column Header";
        until (ColumnNo - ColumnOffset = ARRAYLEN(ColumnCaptions)) or (TempColumnLayout.NEXT = 0);
      // Set unused columns to blank to prevent RTC to display control ID as caption
      for i := ColumnNo - ColumnOffset + 1 to ARRAYLEN(ColumnCaptions) do
        ColumnCaptions[i] := ' ';
      NoOfColumns := ColumnNo;
    END;

    LOCAL PROCEDURE AdjustColumnOffset@18(Delta@1000 : Integer);
    VAR
      OldColumnOffset@1001 : Integer;
    BEGIN
      OldColumnOffset := ColumnOffset;
      ColumnOffset := ColumnOffset + Delta;
      if ColumnOffset + 12 > TempColumnLayout.COUNT then
        ColumnOffset := TempColumnLayout.COUNT - 12;
      if ColumnOffset < 0 then
        ColumnOffset := 0;
      if ColumnOffset <> OldColumnOffset then begin
        UpdateColumnCaptions;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE UpdateDimFilterControls@4();
    BEGIN
      Dim1Filter := GETFILTER("Dimension 1 Filter");
      Dim2Filter := GETFILTER("Dimension 2 Filter");
      Dim3Filter := GETFILTER("Dimension 3 Filter");
      Dim4Filter := GETFILTER("Dimension 4 Filter");
      CostCenterFilter := '';
      CostObjectFilter := '';
      CashFlowFilter := '';
      Dim1FilterEnable := AnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := AnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := AnalysisView."Dimension 3 Code" <> '';
      Dim4FilterEnable := AnalysisView."Dimension 4 Code" <> '';
      GLBudgetFilter := '';
      CostBudgetFilter := '';
    END;

    LOCAL PROCEDURE CurrentSchedNameOnAfterValidate@19053875();
    VAR
      AccSchedName@1001 : Record "Acc. Schedule Name";
      PrevAnalysisView@1002 : Record "Analysis View";
    BEGIN
      CurrPage.SAVERECORD;
      AccSchedManagement.SetName(CurrentSchedName,Rec);
      if AccSchedName.GET(CurrentSchedName) then
        if (AccSchedName."Default Column Layout" <> '') and
           (CurrentColumnName <> AccSchedName."Default Column Layout")
        then begin
          CurrentColumnName := AccSchedName."Default Column Layout";
          AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,TempColumnLayout);
          AccSchedManagement.SetColumnName(CurrentColumnName,TempColumnLayout);
        end;
      AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,true);

      if AccSchedName."Analysis View Name" <> AnalysisView.Code then begin
        PrevAnalysisView := AnalysisView;
        if AccSchedName."Analysis View Name" <> '' then
          AnalysisView.GET(AccSchedName."Analysis View Name")
        else begin
          CLEAR(AnalysisView);
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        end;
        if PrevAnalysisView."Dimension 1 Code" <> AnalysisView."Dimension 1 Code" then
          SETRANGE("Dimension 1 Filter");
        if PrevAnalysisView."Dimension 2 Code" <> AnalysisView."Dimension 2 Code" then
          SETRANGE("Dimension 2 Filter");
        if PrevAnalysisView."Dimension 3 Code" <> AnalysisView."Dimension 3 Code" then
          SETRANGE("Dimension 3 Filter");
        if PrevAnalysisView."Dimension 4 Code" <> AnalysisView."Dimension 4 Code" then
          SETRANGE("Dimension 4 Filter");
      end;
      UpdateDimFilterControls;

      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE CurrentColumnNameOnAfterValidate@19064415();
    BEGIN
      AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,TempColumnLayout);
      AccSchedManagement.SetColumnName(CurrentColumnName,TempColumnLayout);
      AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,true);
      UpdateColumnCaptions;
      CurrPage.UPDATE(false);
    END;

    [Internal]
    PROCEDURE FormatStr@8(ColumnNo@1000 : Integer) : Text;
    BEGIN
      exit(MatrixMgt.GetFormatString(ColumnLayoutArr[ColumnNo]."Rounding Factor",UseAmtsInAddCurr));
    END;

    [External]
    PROCEDURE RoundNone@9(Value@1000 : Decimal;RoundingFactor@1002 : 'None,"1","1000","1000000"') : Decimal;
    BEGIN
      if RoundingFactor <> RoundingFactor::None then
        exit(Value);

      exit(ROUND(Value));
    END;

    LOCAL PROCEDURE GetStyle@7(ColumnNo@1000 : Integer;RowLineNo@1001 : Integer;ColumnLineNo@1003 : Integer);
    VAR
      ColumnStyle@1005 : Text;
      ErrorType@1004 : 'None,"Division by Zero","Period Error",Both';
    BEGIN
      AccSchedManagement.CalcFieldError(ErrorType,RowLineNo,ColumnLineNo);
      if ErrorType > ErrorType::None then
        ColumnStyle := 'Unfavorable'
      else
        if Bold then
          ColumnStyle := 'Strong'
        else
          ColumnStyle := 'Standard';

      case ColumnNo of
        1:
          ColumnStyle1 := ColumnStyle;
        2:
          ColumnStyle2 := ColumnStyle;
        3:
          ColumnStyle3 := ColumnStyle;
        4:
          ColumnStyle4 := ColumnStyle;
        5:
          ColumnStyle5 := ColumnStyle;
        6:
          ColumnStyle6 := ColumnStyle;
        7:
          ColumnStyle7 := ColumnStyle;
        8:
          ColumnStyle8 := ColumnStyle;
        9:
          ColumnStyle9 := ColumnStyle;
        10:
          ColumnStyle10 := ColumnStyle;
        11:
          ColumnStyle11 := ColumnStyle;
        12:
          ColumnStyle12 := ColumnStyle;
      end;
    END;

    BEGIN
    END.
  }
}

