OBJECT Table 7114 Analysis Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               AnalysisLineTemplate@1000 : Record "Analysis Line Template";
             BEGIN
               LOCKTABLE;
               AnalysisLineTemplate.GET("Analysis Area","Analysis Line Template Name");
             END;

    CaptionML=ENU=Analysis Line;
    LookupPageID="Inventory Analysis Lines";
    DrillDownPageID="Inventory Analysis Lines";
  }
  FIELDS
  {
    { 1   ;   ;Analysis Area       ;Option        ;CaptionML=ENU=Analysis Area;
                                                   OptionCaptionML=ENU=Sales,Purchase,Inventory;
                                                   OptionString=Sales,Purchase,Inventory }
    { 2   ;   ;Analysis Line Template Name;Code10 ;TableRelation="Analysis Line Template".Name WHERE ("Analysis Area"=FIELD("Analysis Area"));
                                                   CaptionML=ENU=Analysis Line Template Name }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Row Ref. No.        ;Code20        ;OnValidate=BEGIN
                                                                if "Row Ref. No." <> xRec."Row Ref. No." then
                                                                  SubstRowRefNo(xRec."Row Ref. No.","Row Ref. No.");
                                                              END;

                                                   CaptionML=ENU=Row Ref. No. }
    { 5   ;   ;Description         ;Text80        ;CaptionML=ENU=Description }
    { 6   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                InventorySetup@1000 : Record "Inventory Setup";
                                                                SalesSetup@1001 : Record "Sales & Receivables Setup";
                                                              BEGIN
                                                                if Type <> xRec.Type then
                                                                  Range := '';
                                                                VALIDATE(Range);

                                                                case Type of
                                                                  Type::"Item Group":
                                                                    begin
                                                                      InventorySetup.GET;
                                                                      InventorySetup.TESTFIELD("Item Group Dimension Code");
                                                                      "Group Dimension Code" := InventorySetup."Item Group Dimension Code";
                                                                    end;
                                                                  Type::"Customer Group":
                                                                    begin
                                                                      SalesSetup.GET;
                                                                      SalesSetup.TESTFIELD("Customer Group Dimension Code");
                                                                      "Group Dimension Code" := SalesSetup."Customer Group Dimension Code";
                                                                    end;
                                                                  Type::"Sales/Purchase person":
                                                                    begin
                                                                      SalesSetup.GET;
                                                                      SalesSetup.TESTFIELD("Salesperson Dimension Code");
                                                                      "Group Dimension Code" := SalesSetup."Salesperson Dimension Code";
                                                                    end;
                                                                  else
                                                                    "Group Dimension Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Item,Item Group,Customer,Customer Group,Vendor,Sales/Purchase person,Formula;
                                                   OptionString=Item,"Item Group",Customer,"Customer Group",Vendor,"Sales/Purchase person",Formula }
    { 7   ;   ;Range               ;Text250       ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Customer)) Customer
                                                                 ELSE IF (Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Type=CONST("Item Group")) "Dimension Value".Code WHERE ("Dimension Code"=FIELD("Group Dimension Code"))
                                                                 ELSE IF (Type=CONST("Customer Group")) "Dimension Value".Code WHERE ("Dimension Code"=FIELD("Group Dimension Code"))
                                                                 ELSE IF (Type=CONST("Sales/Purchase person")) "Dimension Value".Code WHERE ("Dimension Code"=FIELD("Group Dimension Code"));
                                                   OnValidate=VAR
                                                                Item@1003 : Record Item;
                                                                Cust@1002 : Record Customer;
                                                                Vend@1001 : Record Vendor;
                                                                ItemStatisticBuf@1000 : Record "Item Statistics Buffer";
                                                              BEGIN
                                                                case Type of
                                                                  Type::Item:
                                                                    Item.SETFILTER("No.",Range);
                                                                  Type::Customer:
                                                                    Cust.SETFILTER("No.",Range);
                                                                  Type::Vendor:
                                                                    Vend.SETFILTER("No.",Range);
                                                                  Type::"Item Group",Type::"Customer Group",Type::"Sales/Purchase person":
                                                                    ItemStatisticBuf.SETFILTER("Dimension 1 Filter",Range);
                                                                  Type::Formula:
                                                                    begin
                                                                      Range := UPPERCASE(Range);
                                                                      CheckFormula(Range);
                                                                    end;
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Range }
    { 8   ;   ;New Page            ;Boolean       ;CaptionML=ENU=New Page }
    { 9   ;   ;Show                ;Option        ;CaptionML=ENU=Show;
                                                   OptionCaptionML=ENU=Yes,No,If Any Column Not Zero;
                                                   OptionString=Yes,No,"If Any Column Not Zero" }
    { 10  ;   ;Bold                ;Boolean       ;CaptionML=ENU=Bold }
    { 11  ;   ;Italic              ;Boolean       ;CaptionML=ENU=Italic }
    { 12  ;   ;Underline           ;Boolean       ;CaptionML=ENU=Underline }
    { 13  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=ENU=Show Opposite Sign }
    { 14  ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Type Filter;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Item";
                                                   OptionString=" ",Customer,Vendor,Item }
    { 15  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 16  ;   ;Item Budget Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Budget Name".Name WHERE ("Analysis Area"=FIELD("Analysis Area"));
                                                   CaptionML=ENU=Item Budget Filter }
    { 17  ;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 18  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 1 Filter;
                                                   CaptionClass=GetCaptionClass(1) }
    { 19  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 2 Filter;
                                                   CaptionClass=GetCaptionClass(2) }
    { 20  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 3 Filter;
                                                   CaptionClass=GetCaptionClass(3) }
    { 21  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 1 Totaling;
                                                   CaptionClass=GetCaptionClass(4) }
    { 22  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 2 Totaling;
                                                   CaptionClass=GetCaptionClass(5) }
    { 23  ;   ;Dimension 3 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Dimension Combination"=R;
                                                   CaptionML=ENU=Dimension 3 Totaling;
                                                   CaptionClass=GetCaptionClass(6) }
    { 24  ;   ;Source No. Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF ("Source Type Filter"=CONST(Customer)) Customer
                                                                 ELSE IF ("Source Type Filter"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Source Type Filter"=CONST(Item)) Item;
                                                   CaptionML=ENU=Source No. Filter }
    { 25  ;   ;Group Dimension Code;Code20        ;TableRelation=Dimension;
                                                   CaptionML=ENU=Group Dimension Code }
    { 26  ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;"Analysis Area","Analysis Line Template Name","Line No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension %1 Filter';
      Text010@1010 : TextConst 'ENU=,, Totaling';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension %1 Totaling';
      GLSetup@1018 : Record "General Ledger Setup";
      ItemAnalysisView@1015 : Record "Item Analysis View";
      HasGLSetup@1022 : Boolean;

    [External]
    PROCEDURE CheckFormula@1(Formula@1000 : Code[250]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      for i := 1 to STRLEN(Formula) do begin
        if Formula[i] = '(' then
          ParenthesesLevel := ParenthesesLevel + 1
        else
          if Formula[i] = ')' then
            ParenthesesLevel := ParenthesesLevel - 1;
        if ParenthesesLevel < 0 then
          ERROR(Text001,i);
        if Formula[i] in ['+','-','*','/','^'] then begin
          if HasOperator then
            ERROR(Text002,i);

          HasOperator := true;
          if i = STRLEN(Formula) then
            ERROR(Text003,i);

          if Formula[i + 1] = ')' then
            ERROR(Text003,i);
        end else
          HasOperator := false;
      end;
      if ParenthesesLevel > 0 then
        ERROR(Text004);

      if ParenthesesLevel < 0 then
        ERROR(Text005);
    END;

    LOCAL PROCEDURE SubstRowRefNo@5(OldRowRefNo@1002 : Code[20];NewRowRefNo@1000 : Code[20]);
    VAR
      FormulaAnalysisLine@1001 : Record "Analysis Line";
      OriginalRange@1005 : Text[250];
      NewRange@1004 : Text[250];
      Token@1008 : Text[250];
      TheChar@1009 : Text[1];
      i@1006 : Integer;
      TheLength@1003 : Integer;
    BEGIN
      if (OldRowRefNo = '') or (NewRowRefNo = '') then
        exit;
      FormulaAnalysisLine.SETRANGE("Analysis Area","Analysis Area");
      FormulaAnalysisLine.SETRANGE("Analysis Line Template Name","Analysis Line Template Name");
      FormulaAnalysisLine.SETRANGE(Type,Type::Formula);
      if not FormulaAnalysisLine.FIND('-') then
        exit;
      repeat
        OriginalRange := FormulaAnalysisLine.Range;
        TheLength := STRLEN(FormulaAnalysisLine.Range);
        NewRange := '';

        for i := 1 to TheLength do begin
          TheChar := COPYSTR(FormulaAnalysisLine.Range,i,1);
          if TheChar in ['0'..'9','A'..'Z'] then begin
            Token := Token + TheChar;
            if i = TheLength then begin
              if Token = OldRowRefNo then
                NewRange := NewRange + NewRowRefNo
              else
                NewRange := NewRange + Token;
              Token := '';
            end;
          end else begin
            if Token = OldRowRefNo then
              NewRange := NewRange + NewRowRefNo
            else
              NewRange := NewRange + Token;
            NewRange := NewRange + TheChar;
            Token := '';
          end;
        end;
        if NewRange <> OriginalRange then
          if "Line No." = FormulaAnalysisLine."Line No." then
            Range := NewRange
          else begin
            FormulaAnalysisLine.Range := NewRange;
            FormulaAnalysisLine.MODIFY;
          end;
      until FormulaAnalysisLine.NEXT = 0;
    END;

    [Internal]
    PROCEDURE LookupTotalingRange@3(VAR Text@1000 : Text) : Boolean;
    VAR
      InventorySetup@1007 : Record "Inventory Setup";
      SalesSetup@1006 : Record "Sales & Receivables Setup";
      ItemList@1005 : Page "Item List";
      CustList@1004 : Page "Customer List";
      VendList@1003 : Page "Vendor List";
    BEGIN
      case Type of
        Type::Item:
          begin
            ItemList.LOOKUPMODE(true);
            if ItemList.RUNMODAL = ACTION::LookupOK then begin
              Text := ItemList.GetSelectionFilter;
              exit(true);
            end;
          end;
        Type::Customer:
          begin
            CustList.LOOKUPMODE(true);
            if CustList.RUNMODAL = ACTION::LookupOK then begin
              Text := CustList.GetSelectionFilter;
              exit(true);
            end;
          end;
        Type::Vendor:
          begin
            VendList.LOOKUPMODE(true);
            if VendList.RUNMODAL = ACTION::LookupOK then begin
              Text := VendList.GetSelectionFilter;
              exit(true);
            end;
          end;
        Type::"Item Group":
          begin
            InventorySetup.GET;
            InventorySetup.TESTFIELD("Item Group Dimension Code");
            exit(LookupDimTotalingRange(Text,InventorySetup."Item Group Dimension Code"));
          end;
        Type::"Customer Group":
          begin
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Customer Group Dimension Code");
            exit(LookupDimTotalingRange(Text,SalesSetup."Customer Group Dimension Code"));
          end;
        Type::"Sales/Purchase person":
          begin
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Salesperson Dimension Code");
            exit(LookupDimTotalingRange(Text,SalesSetup."Salesperson Dimension Code"));
          end;
      end;
    END;

    [Internal]
    PROCEDURE LookupDimTotalingRange@4(VAR Text@1000 : Text;GroupDimCode@1003 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1001 : Page "Dimension Value List";
    BEGIN
      DimVal.FILTERGROUP := 2;
      DimVal.SETRANGE("Dimension Code",GroupDimCode);
      DimVal.FILTERGROUP := 0;
      DimValList.SETTABLEVIEW(DimVal);
      DimValList.LOOKUPMODE(true);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE GetCaptionClass@12(DimNo@1000 : Integer) : Text[250];
    BEGIN
      GetItemAnalysisView;

      case DimNo of
        1:
          if ItemAnalysisView."Dimension 1 Code" <> '' then
            exit('1,6,' + ItemAnalysisView."Dimension 1 Code");
        2:
          if ItemAnalysisView."Dimension 2 Code" <> '' then
            exit('1,6,' + ItemAnalysisView."Dimension 2 Code");
        3:
          if ItemAnalysisView."Dimension 3 Code" <> '' then
            exit('1,6,' + ItemAnalysisView."Dimension 3 Code");
        4:
          if ItemAnalysisView."Dimension 1 Code" <> '' then
            exit('1,5,' + ItemAnalysisView."Dimension 1 Code" + Text010);
        5:
          if ItemAnalysisView."Dimension 2 Code" <> '' then
            exit('1,5,' + ItemAnalysisView."Dimension 2 Code" + Text010);
        6:
          if ItemAnalysisView."Dimension 3 Code" <> '' then
            exit('1,5,' + ItemAnalysisView."Dimension 3 Code" + Text010);
      end;
      if DimNo <= 3 then
        exit(STRSUBSTNO(Text009,DimNo));
      exit(STRSUBSTNO(Text011,DimNo - 3));
    END;

    LOCAL PROCEDURE GetItemAnalysisView@2();
    VAR
      AnalysisLineTemplate@1000 : Record "Analysis Line Template";
    BEGIN
      if (AnalysisLineTemplate."Analysis Area" = "Analysis Area") and
         (AnalysisLineTemplate.Name = "Analysis Line Template Name")
      then
        exit;

      if AnalysisLineTemplate.GET("Analysis Area","Analysis Line Template Name") then
        if AnalysisLineTemplate."Item Analysis View Code" <> '' then
          ItemAnalysisView.GET("Analysis Area",AnalysisLineTemplate."Item Analysis View Code")
        else begin
          CLEAR(ItemAnalysisView);
          if not HasGLSetup then
            GLSetup.GET;
          HasGLSetup := true;
          ItemAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          ItemAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        end;
    END;

    BEGIN
    END.
  }
}

