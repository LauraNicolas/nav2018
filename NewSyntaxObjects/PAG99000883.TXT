OBJECT Page 99000883 Sales Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Sales Order Planning;
    SourceTable="Sales Planning Line";
    DataCaptionExpr=Caption;
    DataCaptionFields="Sales Order No.";
    PageType=List;
    SourceTableTemporary=true;
    OnOpenPage=BEGIN
                 BuildForm;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 4       ;1   ;ActionGroup;
                      Name=&Item;
                      CaptionML=ENU=&Item;
                      Image=Item }
      { 23      ;2   ;Action    ;
                      Name=Card;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      ToolTipML=ENU=View or change detailed information about the record on the document or journal line.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Item Card";
                      RunPageLink="No."=FIELD("Item No.");
                      Image=EditLines }
      { 27      ;2   ;Action    ;
                      Name=Ledger E&ntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      ToolTipML=ENU=View the history of transactions that have been posted for the selected record.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Item Ledger Entries";
                      RunPageView=SORTING("Item No.",Open,"Variant Code");
                      RunPageLink="Item No."=FIELD("Item No."),
                                  "Variant Code"=FIELD("Variant Code");
                      Image=CustomerLedger }
      { 6       ;2   ;ActionGroup;
                      Name=<Action8>;
                      CaptionML=ENU=&Item Availability by;
                      Image=ItemAvailability }
      { 8       ;3   ;Action    ;
                      Name=<Action6>;
                      CaptionML=ENU=Event;
                      ToolTipML=ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Image=Event;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Item@1001 : Record Item;
                               BEGIN
                                 if Item.GET("Item No.") then
                                   ItemAvailFormsMgt.ShowItemAvailFromItem(Item,ItemAvailFormsMgt.ByEvent);
                               END;
                                }
      { 31      ;3   ;Action    ;
                      Name=<Action31>;
                      CaptionML=ENU=Period;
                      ToolTipML=ENU=View the projected quantity of the item over time according to time periods, such as day, week, or month.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Item Availability by Periods";
                      RunPageLink="No."=FIELD("Item No.");
                      Image=Period }
      { 10      ;3   ;Action    ;
                      Name=BOM Level;
                      CaptionML=ENU=BOM Level;
                      ToolTipML=ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                      ApplicationArea=#Advanced;
                      Image=BOMLevel;
                      OnAction=VAR
                                 Item@1001 : Record Item;
                               BEGIN
                                 if Item.GET("Item No.") then
                                   ItemAvailFormsMgt.ShowItemAvailFromItem(Item,ItemAvailFormsMgt.ByBOM);
                               END;
                                }
      { 30      ;2   ;Separator ;
                      Name=Separator30 }
      { 3       ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      ToolTipML=ENU=View statistical information, such as the value of posted entries, for the record.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Item@1001 : Record Item;
                                 ItemStatistics@1002 : Page "Item Statistics";
                               BEGIN
                                 if Item.GET("Item No.") then;
                                 ItemStatistics.SetItem(Item);
                                 ItemStatistics.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 24      ;2   ;Action    ;
                      Name=Update &Shipment Dates;
                      Ellipsis=true;
                      CaptionML=ENU=Update &Shipment Dates;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=UpdateShipment;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SalesLine@1001 : Record "Sales Line";
                                 Choice@1002 : Integer;
                                 LastShipmentDate@1003 : Date;
                               BEGIN
                                 Choice := STRMENU(Text000);

                                 if Choice = 0 then
                                   exit;

                                 LastShipmentDate := WORKDATE;

                                 SalesHeader.LOCKTABLE;
                                 SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeader."No.");

                                 if Choice = 1 then begin
                                   if FIND('-') then
                                     repeat
                                       if "Expected Delivery Date" > LastShipmentDate then
                                         LastShipmentDate := "Expected Delivery Date";
                                     until NEXT = 0;
                                   SalesHeader.VALIDATE("Shipment Date",LastShipmentDate);
                                   SalesHeader.MODIFY;
                                 end
                                 else begin
                                   SalesLine.LOCKTABLE;
                                   if FIND('-') then
                                     repeat
                                       SalesLine.GET(
                                         SalesLine."Document Type"::Order,
                                         "Sales Order No.",
                                         "Sales Order Line No.");
                                       SalesLine."Shipment Date" := "Expected Delivery Date";
                                       SalesLine.MODIFY;
                                     until NEXT = 0;
                                 end;
                                 BuildForm;
                               END;
                                }
      { 25      ;2   ;Action    ;
                      Name=&Create Prod. Order;
                      AccessByPermission=TableData "Production Order"=R;
                      CaptionML=ENU=&Create Prod. Order;
                      ToolTipML=ENU=Prepare to create a production order to fulfill the sales demand.;
                      ApplicationArea=#Manufacturing;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=CreateDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateProdOrder;
                               END;
                                }
      { 32      ;2   ;Separator ;
                      Name=Separator32 }
      { 20      ;2   ;Action    ;
                      Name=Order &Tracking;
                      CaptionML=ENU=Order &Tracking;
                      ToolTipML=ENU=Tracks the connection of a supply to its corresponding demand. This can help you find the original demand that created a specific production order or purchase order.;
                      ApplicationArea=#ItemTracking;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=OrderTracking;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SalesOrderLine@1001 : Record "Sales Line";
                                 TrackingForm@1002 : Page "Order Tracking";
                               BEGIN
                                 SalesOrderLine.GET(
                                   SalesOrderLine."Document Type"::Order,
                                   "Sales Order No.",
                                   "Sales Order Line No.");

                                 TrackingForm.SetSalesLine(SalesOrderLine);
                                 TrackingForm.RUNMODAL;
                                 BuildForm;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group2;
                GroupType=Repeater }

    { 5   ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the item number of the sales order line.;
                ApplicationArea=#Advanced;
                SourceExpr="Item No.";
                ImplicitType=Code20 }

    { 21  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 1   ;2   ;Field     ;
                Name=Planning Status;
                ToolTipML=ENU=Specifies the planning status of the production order, depending on the actual sales order.;
                ApplicationArea=#Advanced;
                SourceExpr="Planning Status";
                ImplicitType=Option }

    { 7   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the description of the item in the sales order line.;
                ApplicationArea=#Advanced;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 9   ;2   ;Field     ;
                Name=Shipment Date;
                ToolTipML=ENU=Specifies when items on the document are shipped or were shipped. A shipment date is usually calculated from a requested delivery date plus lead time.;
                ApplicationArea=#Advanced;
                SourceExpr="Shipment Date";
                ImplicitType=Date }

    { 26  ;2   ;Field     ;
                Name=Planned Quantity;
                ToolTipML=ENU=Specifies the quantity planned in this line.;
                ApplicationArea=#Advanced;
                SourceExpr="Planned Quantity";
                Visible=FALSE;
                OnLookup=VAR
                           SalesLine@1002 : Record "Sales Line";
                         BEGIN
                           SalesLine.GET(
                             SalesLine."Document Type"::Order,
                             "Sales Order No.","Sales Order Line No.");
                           SalesLine.ShowReservationEntries(true);
                         END;

                ImplicitType=Decimal }

    { 11  ;2   ;Field     ;
                Name=Available;
                ToolTipML=ENU=Specifies how many of the actual items are available.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=Available;
                ImplicitType=Decimal }

    { 13  ;2   ;Field     ;
                Name=Next Planning Date;
                ToolTipML=ENU=Specifies the next planning date.;
                ApplicationArea=#Advanced;
                SourceExpr="Next Planning Date";
                ImplicitType=Date }

    { 15  ;2   ;Field     ;
                Name=Expected Delivery Date;
                ToolTipML=ENU=Specifies the expected delivery date.;
                ApplicationArea=#Advanced;
                SourceExpr="Expected Delivery Date";
                ImplicitType=Date }

    { 28  ;2   ;Field     ;
                Name=Needs Replanning;
                ToolTipML=ENU=Specifies if it is necessary or not to reschedule this line.;
                ApplicationArea=#Advanced;
                SourceExpr="Needs Replanning";
                Visible=FALSE;
                ImplicitType=Boolean }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=All Lines to last Shipment Date,Each line own Shipment Date';
      Text001@1001 : TextConst 'ENU=There is nothing to plan.';
      SalesHeader@1002 : Record "Sales Header";
      ReservEntry@1004 : Record "Reservation Entry";
      ReservEngineMgt@1005 : Codeunit "Reservation Engine Mgt.";
      ReserveSalesline@1006 : Codeunit "Sales Line-Reserve";
      ItemAvailFormsMgt@1003 : Codeunit "Item Availability Forms Mgt";
      NewStatus@1007 : 'Simulated,Planned,"Firm Planned",Released';
      NewOrderType@1008 : 'ItemOrder,ProjectOrder';

    [External]
    PROCEDURE SetSalesOrder@2(SalesOrderNo@1000 : Code[20]);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);
    END;

    [External]
    PROCEDURE BuildForm@3();
    BEGIN
      RESET;
      DELETEALL;
      MakeLines;
      SETRANGE("Sales Order No.",SalesHeader."No.");
    END;

    LOCAL PROCEDURE MakeLines@1();
    VAR
      SalesLine@1000 : Record "Sales Line";
      ProdOrderLine@1001 : Record "Prod. Order Line";
      PurchLine@1002 : Record "Purchase Line";
      ReqLine@1003 : Record "Requisition Line";
      ReservEntry2@1004 : Record "Reservation Entry";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);

      if SalesLine.FIND('-') then
        repeat
          INIT;
          "Sales Order No." := SalesLine."Document No.";
          "Sales Order Line No." := SalesLine."Line No.";
          "Item No." := SalesLine."No.";

          "Variant Code" := SalesLine."Variant Code";
          Description := SalesLine.Description;
          "Shipment Date" := SalesLine."Shipment Date";
          "Planning Status" := "Planning Status"::None;
          SalesLine.CALCFIELDS("Reserved Qty. (Base)");
          "Planned Quantity" := SalesLine."Reserved Qty. (Base)";
          ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
          ReserveSalesline.FilterReservFor(ReservEntry,SalesLine);
          ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
          if ReservEntry.FIND('-') then
            repeat
              if ReservEntry2.GET(ReservEntry."Entry No.",not ReservEntry.Positive) then
                case ReservEntry2."Source Type" of
                  DATABASE::"Item Ledger Entry":
                    "Planning Status" := "Planning Status"::Inventory;
                  DATABASE::"Requisition Line":
                    begin
                      ReqLine.GET(
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Batch Name",
                        ReservEntry2."Source Ref. No.");
                      "Planning Status" := "Planning Status"::Planned;
                      "Expected Delivery Date" := ReqLine."Due Date";
                    end;
                  DATABASE::"Purchase Line":
                    begin
                      PurchLine.GET(
                        ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Ref. No.");
                      "Planning Status" := "Planning Status"::"Firm Planned";
                      "Expected Delivery Date" := PurchLine."Expected Receipt Date";
                    end;
                  DATABASE::"Prod. Order Line":
                    begin
                      ProdOrderLine.GET(
                        ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Prod. Order Line");
                      if ProdOrderLine."Due Date" > "Expected Delivery Date" then
                        "Expected Delivery Date" := ProdOrderLine."Ending Date";
                      if ((ProdOrderLine.Status + 1) < "Planning Status") or
                         ("Planning Status" = "Planning Status"::None)
                      then
                        "Planning Status" := ProdOrderLine.Status + 1;
                    end;
                end;
            until ReservEntry.NEXT = 0;
          "Needs Replanning" :=
            ("Planned Quantity" <> SalesLine."Outstanding Qty. (Base)") or
            ("Expected Delivery Date" > "Shipment Date");
          CalculateDisposalPlan(
            SalesLine."Variant Code",
            SalesLine."Location Code");
          INSERT;
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateDisposalPlan@4(VariantCode@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      Item@1003 : Record Item;
    BEGIN
      Item.GET("Item No.");
      Item.SETRANGE("Variant Filter",VariantCode);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.CALCFIELDS(
        Inventory,
        "Qty. on Purch. Order",
        "Qty. on Sales Order",
        "Scheduled Receipt (Qty.)",
        "Planned Order Receipt (Qty.)",
        "Scheduled Need (Qty.)");

      Available :=
        Item.Inventory -
        Item."Qty. on Sales Order" +
        Item."Qty. on Purch. Order" -
        Item."Scheduled Need (Qty.)" +
        Item."Scheduled Receipt (Qty.)" +
        Item."Planned Order Receipt (Qty.)";

      if not "Needs Replanning" then
        exit;

      "Next Planning Date" :=
        WORKDATE;

      CalculatePlanAndDelivDates(
        Item,
        "Next Planning Date",
        "Expected Delivery Date");
    END;

    LOCAL PROCEDURE CalculatePlanAndDelivDates@6(Item@1000 : Record Item;VAR NextPlanningDate@1001 : Date;VAR ExpectedDeliveryDate@1002 : Date);
    BEGIN
      NextPlanningDate :=
        CALCDATE(
          Item."Lot Accumulation Period",
          NextPlanningDate);

      if (Available > 0) or ("Planning Status" <> "Planning Status"::None) then
        ExpectedDeliveryDate :=
          CALCDATE(Item."Safety Lead Time",WORKDATE)
      else
        ExpectedDeliveryDate :=
          CALCDATE(
            Item."Safety Lead Time",
            CALCDATE(
              Item."Lead Time Calculation",
              NextPlanningDate))
    END;

    LOCAL PROCEDURE CreateOrders@7() OrdersCreated@1000 : Boolean;
    VAR
      xSalesPlanLine@1005 : Record "Sales Planning Line";
      Item@1001 : Record Item;
      SalesLine@1002 : Record "Sales Line";
      SKU@1006 : Record "Stockkeeping Unit";
      ProdOrderFromSale@1003 : Codeunit "Create Prod. Order from Sale";
      CreateProdOrder@1007 : Boolean;
      EndLoop@1004 : Boolean;
    BEGIN
      xSalesPlanLine := Rec;

      if not FINDSET then
        exit;

      repeat
        SalesLine.GET(
          SalesLine."Document Type"::Order,
          "Sales Order No.",
          "Sales Order Line No.");
        SalesLine.TESTFIELD("Shipment Date");
        SalesLine.CALCFIELDS("Reserved Qty. (Base)");
        if SalesLine."Outstanding Qty. (Base)" > SalesLine."Reserved Qty. (Base)" then begin
          if SKU.GET(SalesLine."Location Code",SalesLine."No.",SalesLine."Variant Code") then
            CreateProdOrder := SKU."Replenishment System" = SKU."Replenishment System"::"Prod. Order"
          else begin
            Item.GET(SalesLine."No.");
            CreateProdOrder := Item."Replenishment System" = Item."Replenishment System"::"Prod. Order";
          end;

          if CreateProdOrder then begin
            OrdersCreated := true;
            ProdOrderFromSale.CreateProdOrder(
              SalesLine,NewStatus,NewOrderType);
            if NewOrderType = NewOrderType::ProjectOrder then
              EndLoop := true;
          end;
        end;
      until (NEXT = 0) or EndLoop;

      Rec := xSalesPlanLine;
    END;

    LOCAL PROCEDURE Caption@5() : Text[250];
    BEGIN
      exit(STRSUBSTNO('%1 %2',SalesHeader."No.",SalesHeader."Bill-to Name"));
    END;

    [External]
    PROCEDURE CreateProdOrder@8();
    VAR
      CreateOrderForm@1000 : Page "Create Order From Sales";
    BEGIN
      if CreateOrderForm.RUNMODAL <> ACTION::Yes then
        exit;

      CreateOrderForm.ReturnPostingInfo(NewStatus,NewOrderType);

      if not CreateOrders then
        MESSAGE(Text001);

      SETRANGE("Planning Status");

      BuildForm;

      CurrPage.UPDATE(false);
    END;

    BEGIN
    END.
  }
}

