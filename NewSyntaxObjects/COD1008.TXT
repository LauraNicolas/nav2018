OBJECT Codeunit 1008 Job Calculate Statistics
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobLedgEntry@1000 : Record "Job Ledger Entry";
      JobPlanningLine@1001 : Record "Job Planning Line";
      ResUsageCostAmountLCY@1050 : Decimal;
      ResUsagePriceAmountLCY@1049 : Decimal;
      ResSaleCostAmountLCY@1048 : Decimal;
      ResSalePriceAmountLCY@1047 : Decimal;
      ResSchCostAmountLCY@1046 : Decimal;
      ResSchPriceAmountLCY@1045 : Decimal;
      ResContCostAmountLCY@1044 : Decimal;
      ResContPriceAmountLCY@1043 : Decimal;
      ItemUsageCostAmountLCY@1042 : Decimal;
      ItemUsagePriceAmountLCY@1041 : Decimal;
      ItemSaleCostAmountLCY@1040 : Decimal;
      ItemSalePriceAmountLCY@1039 : Decimal;
      ItemSchCostAmountLCY@1038 : Decimal;
      ItemSchPriceAmountLCY@1037 : Decimal;
      ItemContCostAmountLCY@1036 : Decimal;
      ItemContPriceAmountLCY@1035 : Decimal;
      GLUsageCostAmountLCY@1034 : Decimal;
      GLUsagePriceAmountLCY@1033 : Decimal;
      GLSaleCostAmountLCY@1032 : Decimal;
      GLSalePriceAmountLCY@1031 : Decimal;
      GLSchCostAmountLCY@1030 : Decimal;
      GLSchPriceAmountLCY@1029 : Decimal;
      GLContCostAmountLCY@1028 : Decimal;
      GLContPriceAmountLCY@1027 : Decimal;
      ResUsageCostAmount@1026 : Decimal;
      ResUsagePriceAmount@1025 : Decimal;
      ResSaleCostAmount@1024 : Decimal;
      ResSalePriceAmount@1023 : Decimal;
      ResSchCostAmount@1022 : Decimal;
      ResSchPriceAmount@1021 : Decimal;
      ResContCostAmount@1020 : Decimal;
      ResContPriceAmount@1019 : Decimal;
      ItemUsageCostAmount@1018 : Decimal;
      ItemUsagePriceAmount@1017 : Decimal;
      ItemSaleCostAmount@1016 : Decimal;
      ItemSalePriceAmount@1015 : Decimal;
      ItemSchCostAmount@1014 : Decimal;
      ItemSchPriceAmount@1013 : Decimal;
      ItemContCostAmount@1012 : Decimal;
      ItemContPriceAmount@1011 : Decimal;
      GLUsageCostAmount@1010 : Decimal;
      GLUsagePriceAmount@1009 : Decimal;
      GLSaleCostAmount@1008 : Decimal;
      GLSalePriceAmount@1007 : Decimal;
      GLSchCostAmount@1006 : Decimal;
      GLSchPriceAmount@1005 : Decimal;
      GLContCostAmount@1004 : Decimal;
      GLContPriceAmount@1003 : Decimal;
      Text000@1053 : TextConst 'ENU=Budget Price,Usage Price,Billable Price,Inv. Price,Budget Cost,Usage Cost,Billable Cost,Inv. Cost,Budget Profit,Usage Profit,Billable Profit,Inv. Profit';

    [External]
    PROCEDURE ReportAnalysis@10(VAR Job2@1000 : Record Job;VAR JT@1001 : Record "Job Task";VAR Amt@1008 : ARRAY [8] OF Decimal;AmountField@1002 : ARRAY [8] OF '" ",SchPrice,UsagePrice,ContractPrice,InvoicedPrice,SchCost,UsageCost,ContractCost,InvoicedCost,SchProfit,UsageProfit,ContractProfit,InvoicedProfit';CurrencyField@1003 : ARRAY [8] OF 'LCY,FCY';JobLevel@1010 : Boolean);
    VAR
      PL@1004 : ARRAY [16] OF Decimal;
      CL@1005 : ARRAY [16] OF Decimal;
      P@1006 : ARRAY [16] OF Decimal;
      C@1007 : ARRAY [16] OF Decimal;
      I@1009 : Integer;
    BEGIN
      if JobLevel then
        JobCalculateCommonFilters(Job2)
      else
        JTCalculateCommonFilters(JT,Job2,true);
      CalculateAmounts;
      GetLCYCostAmounts(CL);
      GetCostAmounts(C);
      GetLCYPriceAmounts(PL);
      GetPriceAmounts(P);
      CLEAR(Amt);
      for I := 1 to 8 do begin
        if AmountField[I] = AmountField[I]::SchPrice then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[4]
          else
            Amt[I] := P[4];
        if AmountField[I] = AmountField[I]::UsagePrice then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[8]
          else
            Amt[I] := P[8];
        if AmountField[I] = AmountField[I]::ContractPrice then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[12]
          else
            Amt[I] := P[12];
        if AmountField[I] = AmountField[I]::InvoicedPrice then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[16]
          else
            Amt[I] := P[16];

        if AmountField[I] = AmountField[I]::SchCost then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := CL[4]
          else
            Amt[I] := C[4];
        if AmountField[I] = AmountField[I]::UsageCost then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := CL[8]
          else
            Amt[I] := C[8];
        if AmountField[I] = AmountField[I]::ContractCost then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := CL[12]
          else
            Amt[I] := C[12];
        if AmountField[I] = AmountField[I]::InvoicedCost then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := CL[16]
          else
            Amt[I] := C[16];

        if AmountField[I] = AmountField[I]::SchProfit then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[4] - CL[4]
          else
            Amt[I] := P[4] - C[4];
        if AmountField[I] = AmountField[I]::UsageProfit then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[8] - CL[8]
          else
            Amt[I] := P[8] - C[8];
        if AmountField[I] = AmountField[I]::ContractProfit then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[12] - CL[12]
          else
            Amt[I] := P[12] - C[12];
        if AmountField[I] = AmountField[I]::InvoicedProfit then
          if CurrencyField[I] = CurrencyField[I]::LCY then
            Amt[I] := PL[16] - CL[16]
          else
            Amt[I] := P[16] - C[16];
      end;
    END;

    [External]
    PROCEDURE ReportSuggBilling@12(VAR Job2@1004 : Record Job;VAR JT@1003 : Record "Job Task";VAR Amt@1002 : ARRAY [8] OF Decimal;CurrencyField@1000 : ARRAY [8] OF 'LCY,FCY');
    VAR
      AmountField@1005 : ARRAY [8] OF '" ",SchPrice,UsagePrice,ContractPrice,InvoicedPrice,SchCost,UsageCost,ContractCost,InvoicedCost,SchProfit,UsageProfit,ContractProfit,InvoicedProfit';
    BEGIN
      AmountField[1] := AmountField[1]::ContractCost;
      AmountField[2] := AmountField[2]::ContractPrice;
      AmountField[3] := AmountField[3]::InvoicedCost;
      AmountField[4] := AmountField[4]::InvoicedPrice;
      ReportAnalysis(Job2,JT,Amt,AmountField,CurrencyField,false);
      Amt[5] := Amt[1] - Amt[3];
      Amt[6] := Amt[2] - Amt[4];
    END;

    [External]
    PROCEDURE RepJobCustomer@14(VAR Job2@1004 : Record Job;VAR Amt@1002 : ARRAY [8] OF Decimal);
    VAR
      JT@1000 : Record "Job Task";
      AmountField@1005 : ARRAY [8] OF '" ",SchPrice,UsagePrice,ContractPrice,InvoicedPrice,SchCost,UsageCost,ContractCost,InvoicedCost,SchProfit,UsageProfit,ContractProfit,InvoicedProfit';
      CurrencyField@1001 : ARRAY [8] OF 'LCY,FCY';
    BEGIN
      CLEAR(Amt);
      if Job2."No." = '' then
        exit;
      AmountField[1] := AmountField[1]::SchPrice;
      AmountField[2] := AmountField[2]::UsagePrice;
      AmountField[3] := AmountField[3]::InvoicedPrice;
      AmountField[4] := AmountField[4]::ContractPrice;
      ReportAnalysis(Job2,JT,Amt,AmountField,CurrencyField,true);
      Amt[5] := 0;
      Amt[6] := 0;
      if Amt[1] <> 0 then
        Amt[5] := ROUND(Amt[2] / Amt[1] * 100);
      if Amt[4] <> 0 then
        Amt[6] := ROUND(Amt[3] / Amt[4] * 100);
    END;

    [External]
    PROCEDURE JobCalculateCommonFilters@8(VAR Job@1001 : Record Job);
    BEGIN
      CLEARALL;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobLedgEntry.SETCURRENTKEY("Job No.","Job Task No.","Entry Type");
      JobPlanningLine.FILTERGROUP(2);
      JobLedgEntry.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.FILTERGROUP(0);
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      JobPlanningLine.SETFILTER("Planning Date",Job.GETFILTER("Planning Date Filter"));
    END;

    [External]
    PROCEDURE JTCalculateCommonFilters@1(VAR JT2@1005 : Record "Job Task";VAR Job2@1001 : Record Job;UseJobFilter@1002 : Boolean);
    VAR
      JT@1000 : Record "Job Task";
    BEGIN
      CLEARALL;
      JT := JT2;
      JobPlanningLine.FILTERGROUP(2);
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobLedgEntry.SETCURRENTKEY("Job No.","Job Task No.","Entry Type");
      JobLedgEntry.SETRANGE("Job No.",JT."Job No.");
      JobPlanningLine.SETRANGE("Job No.",JT."Job No.");
      JobPlanningLine.FILTERGROUP(0);
      if JT."Job Task No." <> '' then
        if JT.Totaling <> '' then begin
          JobLedgEntry.SETFILTER("Job Task No.",JT.Totaling);
          JobPlanningLine.SETFILTER("Job Task No.",JT.Totaling);
        end else begin
          JobLedgEntry.SETRANGE("Job Task No.",JT."Job Task No.");
          JobPlanningLine.SETRANGE("Job Task No.",JT."Job Task No.");
        end;

      if not UseJobFilter then begin
        JobLedgEntry.SETFILTER("Posting Date",JT2.GETFILTER("Posting Date Filter"));
        JobPlanningLine.SETFILTER("Planning Date",JT2.GETFILTER("Planning Date Filter"));
      end else begin
        JobLedgEntry.SETFILTER("Posting Date",Job2.GETFILTER("Posting Date Filter"));
        JobPlanningLine.SETFILTER("Planning Date",Job2.GETFILTER("Planning Date Filter"));
      end;
    END;

    [External]
    PROCEDURE CalculateAmounts@5();
    BEGIN
      with JobLedgEntry do begin
        if FIND('-') then
          repeat
            if "Entry Type" = "Entry Type"::Usage then begin
              if Type = Type::Resource then begin
                ResUsageCostAmountLCY := ResUsageCostAmountLCY + "Total Cost (LCY)";
                ResUsagePriceAmountLCY := ResUsagePriceAmountLCY + "Line Amount (LCY)";
                ResUsageCostAmount := ResUsageCostAmount + "Total Cost";
                ResUsagePriceAmount := ResUsagePriceAmount + "Line Amount";
              end;
              if Type = Type::Item then begin
                ItemUsageCostAmountLCY := ItemUsageCostAmountLCY + "Total Cost (LCY)";
                ItemUsagePriceAmountLCY := ItemUsagePriceAmountLCY + "Line Amount (LCY)";
                ItemUsageCostAmount := ItemUsageCostAmount + "Total Cost";
                ItemUsagePriceAmount := ItemUsagePriceAmount + "Line Amount";
              end;
              if Type = Type::"G/L Account" then begin
                GLUsageCostAmountLCY := GLUsageCostAmountLCY + "Total Cost (LCY)";
                GLUsagePriceAmountLCY := GLUsagePriceAmountLCY + "Line Amount (LCY)";
                GLUsageCostAmount := GLUsageCostAmount + "Total Cost";
                GLUsagePriceAmount := GLUsagePriceAmount + "Line Amount";
              end;
            end;
            if "Entry Type" = "Entry Type"::Sale then begin
              if Type = Type::Resource then begin
                ResSaleCostAmountLCY := ResSaleCostAmountLCY + "Total Cost (LCY)";
                ResSalePriceAmountLCY := ResSalePriceAmountLCY + "Line Amount (LCY)";
                ResSaleCostAmount := ResSaleCostAmount + "Total Cost";
                ResSalePriceAmount := ResSalePriceAmount + "Line Amount";
              end;
              if Type = Type::Item then begin
                ItemSaleCostAmountLCY := ItemSaleCostAmountLCY + "Total Cost (LCY)";
                ItemSalePriceAmountLCY := ItemSalePriceAmountLCY + "Line Amount (LCY)";
                ItemSaleCostAmount := ItemSaleCostAmount + "Total Cost";
                ItemSalePriceAmount := ItemSalePriceAmount + "Line Amount";
              end;
              if Type = Type::"G/L Account" then begin
                GLSaleCostAmountLCY := GLSaleCostAmountLCY + "Total Cost (LCY)";
                GLSalePriceAmountLCY := GLSalePriceAmountLCY + "Line Amount (LCY)";
                GLSaleCostAmount := GLSaleCostAmount + "Total Cost";
                GLSalePriceAmount := GLSalePriceAmount + "Line Amount";
              end;
            end;
          until NEXT = 0;
      end;

      with JobPlanningLine do begin
        if FIND('-') then
          repeat
            if "Schedule Line" then begin
              if Type = Type::Resource then begin
                ResSchCostAmountLCY := ResSchCostAmountLCY + "Total Cost (LCY)";
                ResSchPriceAmountLCY := ResSchPriceAmountLCY + "Line Amount (LCY)";
                ResSchCostAmount := ResSchCostAmount + "Total Cost";
                ResSchPriceAmount := ResSchPriceAmount + "Line Amount";
              end;
              if Type = Type::Item then begin
                ItemSchCostAmountLCY := ItemSchCostAmountLCY + "Total Cost (LCY)";
                ItemSchPriceAmountLCY := ItemSchPriceAmountLCY + "Line Amount (LCY)";
                ItemSchCostAmount := ItemSchCostAmount + "Total Cost";
                ItemSchPriceAmount := ItemSchPriceAmount + "Line Amount";
              end;
              if Type = Type::"G/L Account" then begin
                GLSchCostAmountLCY := GLSchCostAmountLCY + "Total Cost (LCY)";
                GLSchPriceAmountLCY := GLSchPriceAmountLCY + "Line Amount (LCY)";
                GLSchCostAmount := GLSchCostAmount + "Total Cost";
                GLSchPriceAmount := GLSchPriceAmount + "Line Amount";
              end;
            end;
            if "Contract Line" then begin
              if Type = Type::Resource then begin
                ResContCostAmountLCY := ResContCostAmountLCY + "Total Cost (LCY)";
                ResContPriceAmountLCY := ResContPriceAmountLCY + "Line Amount (LCY)";
                ResContCostAmount := ResContCostAmount + "Total Cost";
                ResContPriceAmount := ResContPriceAmount + "Line Amount";
              end;
              if Type = Type::Item then begin
                ItemContCostAmountLCY := ItemContCostAmountLCY + "Total Cost (LCY)";
                ItemContPriceAmountLCY := ItemContPriceAmountLCY + "Line Amount (LCY)";
                ItemContCostAmount := ItemContCostAmount + "Total Cost";
                ItemContPriceAmount := ItemContPriceAmount + "Line Amount";
              end;
              if Type = Type::"G/L Account" then begin
                GLContCostAmountLCY := GLContCostAmountLCY + "Total Cost (LCY)";
                GLContPriceAmountLCY := GLContPriceAmountLCY + "Line Amount (LCY)";
                GLContCostAmount := GLContCostAmount + "Total Cost";
                GLContPriceAmount := GLContPriceAmount + "Line Amount";
              end;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetLCYCostAmounts@2(VAR Amt@1000 : ARRAY [16] OF Decimal);
    BEGIN
      Amt[1] := ResSchCostAmountLCY;
      Amt[2] := ItemSchCostAmountLCY;
      Amt[3] := GLSchCostAmountLCY;
      Amt[4] := Amt[1] + Amt[2] + Amt[3];
      Amt[5] := ResUsageCostAmountLCY;
      Amt[6] := ItemUsageCostAmountLCY;
      Amt[7] := GLUsageCostAmountLCY;
      Amt[8] := Amt[5] + Amt[6] + Amt[7];
      Amt[9] := ResContCostAmountLCY;
      Amt[10] := ItemContCostAmountLCY;
      Amt[11] := GLContCostAmountLCY;
      Amt[12] := Amt[9] + Amt[10] + Amt[11];
      Amt[13] := -ResSaleCostAmountLCY;
      Amt[14] := -ItemSaleCostAmountLCY;
      Amt[15] := -GLSaleCostAmountLCY;
      Amt[16] := Amt[13] + Amt[14] + Amt[15];
    END;

    [External]
    PROCEDURE GetCostAmounts@6(VAR Amt@1000 : ARRAY [16] OF Decimal);
    BEGIN
      Amt[1] := ResSchCostAmount;
      Amt[2] := ItemSchCostAmount;
      Amt[3] := GLSchCostAmount;
      Amt[4] := Amt[1] + Amt[2] + Amt[3];
      Amt[5] := ResUsageCostAmount;
      Amt[6] := ItemUsageCostAmount;
      Amt[7] := GLUsageCostAmount;
      Amt[8] := Amt[5] + Amt[6] + Amt[7];
      Amt[9] := ResContCostAmount;
      Amt[10] := ItemContCostAmount;
      Amt[11] := GLContCostAmount;
      Amt[12] := Amt[9] + Amt[10] + Amt[11];
      Amt[13] := -ResSaleCostAmount;
      Amt[14] := -ItemSaleCostAmount;
      Amt[15] := -GLSaleCostAmount;
      Amt[16] := Amt[13] + Amt[14] + Amt[15];
    END;

    [External]
    PROCEDURE GetLCYPriceAmounts@4(VAR Amt@1000 : ARRAY [16] OF Decimal);
    BEGIN
      Amt[1] := ResSchPriceAmountLCY;
      Amt[2] := ItemSchPriceAmountLCY;
      Amt[3] := GLSchPriceAmountLCY;
      Amt[4] := Amt[1] + Amt[2] + Amt[3];
      Amt[5] := ResUsagePriceAmountLCY;
      Amt[6] := ItemUsagePriceAmountLCY;
      Amt[7] := GLUsagePriceAmountLCY;
      Amt[8] := Amt[5] + Amt[6] + Amt[7];
      Amt[9] := ResContPriceAmountLCY;
      Amt[10] := ItemContPriceAmountLCY;
      Amt[11] := GLContPriceAmountLCY;
      Amt[12] := Amt[9] + Amt[10] + Amt[11];
      Amt[13] := -ResSalePriceAmountLCY;
      Amt[14] := -ItemSalePriceAmountLCY;
      Amt[15] := -GLSalePriceAmountLCY;
      Amt[16] := Amt[13] + Amt[14] + Amt[15];
    END;

    [External]
    PROCEDURE GetPriceAmounts@7(VAR Amt@1000 : ARRAY [16] OF Decimal);
    BEGIN
      Amt[1] := ResSchPriceAmount;
      Amt[2] := ItemSchPriceAmount;
      Amt[3] := GLSchPriceAmount;
      Amt[4] := Amt[1] + Amt[2] + Amt[3];
      Amt[5] := ResUsagePriceAmount;
      Amt[6] := ItemUsagePriceAmount;
      Amt[7] := GLUsagePriceAmount;
      Amt[8] := Amt[5] + Amt[6] + Amt[7];
      Amt[9] := ResContPriceAmount;
      Amt[10] := ItemContPriceAmount;
      Amt[11] := GLContPriceAmount;
      Amt[12] := Amt[9] + Amt[10] + Amt[11];
      Amt[13] := -ResSalePriceAmount;
      Amt[14] := -ItemSalePriceAmount;
      Amt[15] := -GLSalePriceAmount;
      Amt[16] := Amt[13] + Amt[14] + Amt[15];
    END;

    [External]
    PROCEDURE ShowPlanningLine@3(Showfield@1003 : Integer;JobType@1001 : '" ",Resource,Item,GL';Schedule@1000 : Boolean);
    VAR
      PlanningList@1002 : Page "Job Planning Lines";
    BEGIN
      with JobPlanningLine do begin
        FILTERGROUP(2);
        SETRANGE("Contract Line");
        SETRANGE("Schedule Line");
        SETRANGE(Type);
        if JobType > 0 then
          SETRANGE(Type,JobType - 1);
        if Schedule then
          SETRANGE("Schedule Line",true)
        else
          SETRANGE("Contract Line",true);
        FILTERGROUP(0);
        PlanningList.SETTABLEVIEW(JobPlanningLine);
        PlanningList.SetActiveField(Showfield);
        PlanningList.RUN;
      end;
    END;

    [External]
    PROCEDURE ShowLedgEntry@9(Showfield@1003 : Integer;JobType@1001 : '" ",Resource,Item,GL';Usage@1000 : Boolean);
    VAR
      JobLedgEntryList@1002 : Page "Job Ledger Entries";
    BEGIN
      JobLedgEntry.SETRANGE(Type);
      if Usage then
        JobLedgEntry.SETRANGE("Entry Type",JobLedgEntry."Entry Type"::Usage)
      else
        JobLedgEntry.SETRANGE("Entry Type",JobLedgEntry."Entry Type"::Sale);
      if JobType > 0 then
        JobLedgEntry.SETRANGE(Type,JobType - 1);
      JobLedgEntryList.SETTABLEVIEW(JobLedgEntry);
      JobLedgEntryList.SetActiveField(Showfield);
      JobLedgEntryList.RUN;
    END;

    [External]
    PROCEDURE GetHeadLineText@11(AmountField@1002 : ARRAY [8] OF '" ",SchPrice,UsagePrice,BillablePrice,InvoicedPrice,SchCost,UsageCost,BillableCost,InvoicedCost,SchProfit,UsageProfit,BillableProfit,InvoicedProfit';CurrencyField@1001 : ARRAY [8] OF 'LCY,FCY';VAR HeadLineText@1000 : ARRAY [8] OF Text[50];Job@1004 : Record Job);
    VAR
      GLSetup@1005 : Record "General Ledger Setup";
      I@1003 : Integer;
      Txt@1006 : Text[30];
    BEGIN
      CLEAR(HeadLineText);
      GLSetup.GET;

      for I := 1 to 8 do begin
        Txt := '';
        if CurrencyField[I] > 0 then
          Txt := Job."Currency Code";
        if Txt = '' then
          Txt := GLSetup."LCY Code";
        if AmountField[I] > 0 then
          HeadLineText[I] := SELECTSTR(AmountField[I],Text000) + '\' + Txt;
      end;
    END;

    BEGIN
    END.
  }
}

