OBJECT Table 5451 Graph Integration Record
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Graph Integration Record;
  }
  FIELDS
  {
    { 2   ;   ;Graph ID            ;Text250       ;CaptionML=ENU=Graph ID }
    { 3   ;   ;Integration ID      ;GUID          ;TableRelation="Integration Record"."Integration ID";
                                                   CaptionML=ENU=Integration ID }
    { 4   ;   ;Last Synch. Modified On;DateTime   ;CaptionML=ENU=Last Synch. Modified On }
    { 5   ;   ;Last Synch. Graph Modified On;DateTime;
                                                   CaptionML=ENU=Last Synch. Graph Modified On }
    { 6   ;   ;Table ID            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Integration Record"."Table ID" WHERE ("Integration ID"=FIELD("Integration ID")));
                                                   CaptionML=ENU=Table ID }
    { 7   ;   ;ChangeKey           ;Text250       ;CaptionML=ENU=ChangeKey }
    { 8   ;   ;XRMId               ;GUID          ;CaptionML=ENU=XRMId }
  }
  KEYS
  {
    {    ;"Graph ID","Integration ID"             ;Clustered=true }
    {    ;"Integration ID"                         }
    {    ;"Last Synch. Modified On","Integration ID" }
    {    ;"Last Synch. Graph Modified On","Graph ID" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst '@@@="%1 = record id";ENU=The integration record for entity %1 was not found.';
      GraphIdAlreadyMappedErr@1003 : TextConst '@@@=%1 ID of the record, %2 ID of the already mapped record;ENU=Cannot couple %1 to this Microsoft Graph record, because the Microsoft Graph record is already coupled to %2.';
      RecordIdAlreadyMappedErr@1004 : TextConst '@@@=%1 ID from the record, %2 ID of the already mapped record;ENU=Cannot couple the Microsoft Graph record to %1, because %1 is already coupled to another Microsoft Graph record.';

    [External]
    PROCEDURE IsRecordCoupled@5(DestinationRecordID@1001 : RecordID) : Boolean;
    VAR
      GraphID@1002 : Text[250];
    BEGIN
      exit(FindIDFromRecordID(DestinationRecordID,GraphID));
    END;

    [External]
    PROCEDURE FindRecordIDFromID@3(SourceGraphID@1001 : Text[250];DestinationTableID@1004 : Integer;VAR DestinationRecordId@1002 : RecordID) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      IntegrationRecord@1005 : Record "Integration Record";
    BEGIN
      if FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) then
        if IntegrationRecord.FindByIntegrationId(GraphIntegrationRecord."Integration ID") then begin
          DestinationRecordId := IntegrationRecord."Record ID";
          exit(true);
        end;

      exit(false);
    END;

    [External]
    PROCEDURE FindIDFromRecordID@2(SourceRecordID@1001 : RecordID;VAR DestinationGraphID@1002 : Text[250]) : Boolean;
    VAR
      GraphIntegrationRecord@1004 : Record "Graph Integration Record";
    BEGIN
      if not FindRowFromRecordID(SourceRecordID,GraphIntegrationRecord) then
        exit(false);

      DestinationGraphID := GraphIntegrationRecord."Graph ID";
      exit(true);
    END;

    LOCAL PROCEDURE FindIntegrationIDFromGraphID@20(SourceGraphID@1002 : Text[250];DestinationTableID@1004 : Integer;VAR DestinationIntegrationID@1001 : GUID) : Boolean;
    VAR
      GraphIntegrationRecord@1000 : Record "Graph Integration Record";
    BEGIN
      if FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) then begin
        DestinationIntegrationID := GraphIntegrationRecord."Integration ID";
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE CoupleGraphIDToRecordID@1(GraphID@1000 : Text[250];RecordID@1001 : RecordID);
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      IntegrationRecord@1004 : Record "Integration Record";
      GraphIntegrationRecord2@1006 : Record "Graph Integration Record";
      ErrGraphID@1005 : Text[250];
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      // Find coupling between GraphID and TableNo
      if not FindRowFromGraphID(GraphID,RecordID.TABLENO,GraphIntegrationRecord) then
        // Find rogue coupling beteen GraphID and table 0
        if not FindRowFromGraphID(GraphID,0,GraphIntegrationRecord) then begin
          // Find other coupling to the record
          if GraphIntegrationRecord2.FindIDFromRecordID(RecordID,ErrGraphID) then
            ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));

          InsertGraphIntegrationRecord(GraphID,IntegrationRecord,RecordID);
          exit;
        end;

      // Update Integration ID
      if GraphIntegrationRecord."Integration ID" <> IntegrationRecord."Integration ID" then begin
        if GraphIntegrationRecord2.FindIDFromRecordID(RecordID,ErrGraphID) then
          ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));
        GraphIntegrationRecord.RENAME(GraphIntegrationRecord."Graph ID",IntegrationRecord."Integration ID");
      end;
    END;

    [External]
    PROCEDURE CoupleRecordIdToGraphID@99(RecordID@1001 : RecordID;GraphID@1000 : Text[250]);
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      IntegrationRecord@1004 : Record "Integration Record";
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      if not FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord) then begin
        AssertRecordIDCanBeCoupled(RecordID,GraphID);
        InsertGraphIntegrationRecord(GraphID,IntegrationRecord,RecordID);
      end else
        if GraphIntegrationRecord."Graph ID" <> GraphID then begin
          AssertRecordIDCanBeCoupled(RecordID,GraphID);
          GraphIntegrationRecord.RENAME(GraphID,GraphIntegrationRecord."Integration ID");
        end;
    END;

    [External]
    PROCEDURE RemoveCouplingToRecord@15(RecordID@1000 : RecordID) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record "Graph Integration Record";
      IntegrationRecord@1001 : Record "Integration Record";
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      if FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord) then begin
        GraphIntegrationRecord.DELETE(true);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE RemoveCouplingToGraphID@13(GraphID@1000 : Text[250];DestinationTableID@1003 : Integer) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record "Graph Integration Record";
    BEGIN
      if FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) then begin
        GraphIntegrationRecord.DELETE(true);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE AssertRecordIDCanBeCoupled@4(RecordID@1001 : RecordID;GraphID@1000 : Text[250]);
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      ErrRecordID@1004 : RecordID;
      ErrIntegrationID@1005 : GUID;
    BEGIN
      if FindIntegrationIDFromGraphID(GraphID,RecordID.TABLENO,ErrIntegrationID) then
        if not UncoupleGraphIDIfRecordDeleted(ErrIntegrationID) then begin
          GraphIntegrationRecord.FindRecordIDFromID(GraphID,RecordID.TABLENO,ErrRecordID);
          ERROR(GraphIdAlreadyMappedErr,FORMAT(RecordID,0,1),ErrRecordID);
        end;
    END;

    [External]
    PROCEDURE SetLastSynchModifiedOns@8(SourceGraphID@1001 : Text[250];DestinationTableID@1005 : Integer;GraphLastModifiedOn@1000 : DateTime;LastModifiedOn@1003 : DateTime);
    VAR
      GraphIntegrationRecord@1004 : Record "Graph Integration Record";
    BEGIN
      if not FindRowFromGraphID(SourceGraphID,DestinationTableID,GraphIntegrationRecord) then
        exit;

      with GraphIntegrationRecord do begin
        "Last Synch. Graph Modified On" := GraphLastModifiedOn;
        "Last Synch. Modified On" := LastModifiedOn;
        MODIFY(true);
        COMMIT;
      end;
    END;

    [External]
    PROCEDURE SetLastSynchGraphModifiedOn@12(GraphID@1001 : Text[250];DestinationTableID@1003 : Integer;GraphLastModifiedOn@1000 : DateTime);
    VAR
      GraphIntegrationRecord@1004 : Record "Graph Integration Record";
    BEGIN
      if not FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) then
        exit;

      GraphIntegrationRecord."Last Synch. Graph Modified On" := GraphLastModifiedOn;
      GraphIntegrationRecord.MODIFY(true);
      COMMIT;
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchonizedGraphRecord@6(GraphID@1000 : Text[250];DestinationTableID@1004 : Integer;CurrentModifiedOn@1002 : DateTime) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      IntegrationTableMapping@1001 : Record "Integration Table Mapping";
      GraphDataSetup@1005 : Codeunit "Graph Data Setup";
      TypeHelper@1007 : Codeunit "Type Helper";
      GraphRecordRef@1006 : RecordRef;
      GraphChangeKey@1009 : Text[250];
    BEGIN
      if not FindRowFromGraphID(GraphID,DestinationTableID,GraphIntegrationRecord) then
        exit(false);

      GraphIntegrationRecord.CALCFIELDS("Table ID");
      IntegrationTableMapping.FindMappingForTable(GraphIntegrationRecord."Table ID");
      if IntegrationTableMapping."Int. Tbl. ChangeKey Fld. No." <> 0 then
        if GraphDataSetup.GetGraphRecord(GraphRecordRef,GraphID,GraphIntegrationRecord."Table ID") then begin
          GraphChangeKey := GraphRecordRef.FIELD(IntegrationTableMapping."Int. Tbl. ChangeKey Fld. No.").VALUE;
          exit(GraphChangeKey <> GraphIntegrationRecord.ChangeKey);
        end;

      exit(TypeHelper.CompareDateTime(CurrentModifiedOn,GraphIntegrationRecord."Last Synch. Graph Modified On") > 0);
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchronizedRecord@7(RecordID@1001 : RecordID;CurrentModifiedOn@1000 : DateTime) : Boolean;
    VAR
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
      TypeHelper@1002 : Codeunit "Type Helper";
    BEGIN
      if not FindRowFromRecordID(RecordID,GraphIntegrationRecord) then
        exit(false);

      exit(TypeHelper.CompareDateTime(CurrentModifiedOn,GraphIntegrationRecord."Last Synch. Modified On") > 0);
    END;

    LOCAL PROCEDURE UncoupleGraphIDIfRecordDeleted@9(IntegrationID@1001 : GUID) : Boolean;
    VAR
      IntegrationRecord@1000 : Record "Integration Record";
      GraphIntegrationRecord@1003 : Record "Graph Integration Record";
    BEGIN
      IntegrationRecord.FindByIntegrationId(IntegrationID);
      if IntegrationRecord."Deleted On" <> 0DT then begin
        if FindRowFromIntegrationID(IntegrationID,GraphIntegrationRecord) then
          GraphIntegrationRecord.DELETE;
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE DeleteIfRecordDeleted@17(GraphID@1001 : Text[250];DestinationTableID@1002 : Integer) : Boolean;
    VAR
      IntegrationID@1004 : GUID;
    BEGIN
      if not FindIntegrationIDFromGraphID(GraphID,DestinationTableID,IntegrationID) then
        exit(false);

      exit(UncoupleGraphIDIfRecordDeleted(IntegrationID));
    END;

    LOCAL PROCEDURE FindRowFromRecordID@10(SourceRecordID@1000 : RecordID;VAR GraphIntegrationRecord@1001 : Record "Graph Integration Record") : Boolean;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
    BEGIN
      if not IntegrationRecord.FindByRecordId(SourceRecordID) then
        exit(false);
      exit(FindRowFromIntegrationID(IntegrationRecord."Integration ID",GraphIntegrationRecord));
    END;

    LOCAL PROCEDURE FindRowFromGraphID@11(GraphID@1001 : Text[250];DestinationTableID@1003 : Integer;VAR GraphIntegrationRecord@1000 : Record "Graph Integration Record") : Boolean;
    BEGIN
      GraphIntegrationRecord.SETRANGE("Graph ID",GraphID);
      GraphIntegrationRecord.SETFILTER("Table ID",FORMAT(DestinationTableID));
      exit(GraphIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE FindRowFromIntegrationID@22(IntegrationID@1001 : GUID;VAR GraphIntegrationRecord@1000 : Record "Graph Integration Record") : Boolean;
    BEGIN
      GraphIntegrationRecord.SETCURRENTKEY("Integration ID");
      GraphIntegrationRecord.SETFILTER("Integration ID",IntegrationID);
      exit(GraphIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE InsertGraphIntegrationRecord@16(GraphID@1002 : Text[250];VAR IntegrationRecord@1001 : Record "Integration Record";RecordID@1000 : RecordID);
    VAR
      GraphIntegrationRecord@1005 : Record "Graph Integration Record";
      GraphIntContact@1006 : Codeunit "Graph Int. - Contact";
    BEGIN
      GraphIntegrationRecord."Graph ID" := GraphID;
      GraphIntegrationRecord."Integration ID" := IntegrationRecord."Integration ID";
      GraphIntegrationRecord."Table ID" := RecordID.TABLENO;
      GraphIntContact.SetXRMId(GraphIntegrationRecord);

      GraphIntegrationRecord.INSERT(true);
    END;

    BEGIN
    END.
  }
}

