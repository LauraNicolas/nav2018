OBJECT Table 951 Time Sheet Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData Employee=r;
    OnInsert=VAR
               Resource@1000 : Record Resource;
             BEGIN
               GetTimeSheetResource(Resource);
               Resource.TESTFIELD(Blocked,false);

               UpdateApproverID;
               "Time Sheet Starting Date" := TimeSheetHeader."Starting Date";
             END;

    OnModify=VAR
               Resource@1000 : Record Resource;
             BEGIN
               GetTimeSheetResource(Resource);
               Resource.TESTFIELD(Blocked,false);

               UpdateDetails;
             END;

    OnDelete=VAR
               TimeSheetCommentLine@1000 : Record "Time Sheet Comment Line";
               Resource@1001 : Record Resource;
             BEGIN
               TestStatus;

               GetTimeSheetResource(Resource);
               Resource.TESTFIELD(Blocked,false);

               TimeSheetDetail.SETRANGE("Time Sheet No.","Time Sheet No.");
               TimeSheetDetail.SETRANGE("Time Sheet Line No.","Line No.");
               TimeSheetDetail.DELETEALL;

               TimeSheetCommentLine.SETRANGE("No.","Time Sheet No.");
               TimeSheetCommentLine.SETRANGE("Time Sheet Line No.","Line No.");
               TimeSheetCommentLine.DELETEALL;
             END;

    CaptionML=ENU=Time Sheet Line;
  }
  FIELDS
  {
    { 1   ;   ;Time Sheet No.      ;Code20        ;TableRelation="Time Sheet Header";
                                                   CaptionML=ENU=Time Sheet No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Time Sheet Starting Date;Date      ;CaptionML=ENU=Time Sheet Starting Date;
                                                   Editable=false }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestStatus;
                                                                if Type = Type::"Assembly Order" then
                                                                  FIELDERROR(Type);
                                                                if Type <> xRec.Type then begin
                                                                  TimeSheetDetail.SETRANGE("Time Sheet No.","Time Sheet No.");
                                                                  TimeSheetDetail.SETRANGE("Time Sheet Line No.","Line No.");
                                                                  if not TimeSheetDetail.ISEMPTY then
                                                                    TimeSheetDetail.DELETEALL;
                                                                  "Job No." := '';
                                                                  "Job Task No." := '';
                                                                  "Service Order No." := '';
                                                                  "Service Order Line No." := 0;
                                                                  "Cause of Absence Code" := '';
                                                                  Description := '';
                                                                  "Assembly Order No." := '';
                                                                  "Assembly Order Line No." := 0;
                                                                  UpdateApproverID;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Resource,Job,Service,Absence,Assembly Order";
                                                   OptionString=" ",Resource,Job,Service,Absence,"Assembly Order" }
    { 6   ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                if "Job No." <> '' then begin
                                                                  TESTFIELD(Type,Type::Job);
                                                                  Job.GET("Job No.");
                                                                  if Job.Blocked = Job.Blocked::All then
                                                                    Job.TestBlocked;
                                                                end;

                                                                UpdateApproverID;
                                                              END;

                                                   CaptionML=ENU=Job No. }
    { 7   ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   OnValidate=BEGIN
                                                                if "Job Task No." <> '' then begin
                                                                  TESTFIELD(Type,Type::Job);
                                                                  JobTask.GET("Job No.","Job Task No.");
                                                                  JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
                                                                  Description := JobTask.Description;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Job Task No. }
    { 9   ;   ;Cause of Absence Code;Code10       ;TableRelation="Cause of Absence";
                                                   OnValidate=VAR
                                                                Resource@1002 : Record Resource;
                                                                Employee@1001 : Record Employee;
                                                                CauseOfAbsence@1000 : Record "Cause of Absence";
                                                              BEGIN
                                                                if "Cause of Absence Code" <> '' then begin
                                                                  TESTFIELD(Type,Type::Absence);
                                                                  CauseOfAbsence.GET("Cause of Absence Code");
                                                                  Description := CauseOfAbsence.Description;
                                                                  TimeSheetHeader.GET("Time Sheet No.");
                                                                  Resource.GET(TimeSheetHeader."Resource No.");
                                                                  Resource.TESTFIELD("Base Unit of Measure");
                                                                  Resource.TESTFIELD(Type,Resource.Type::Person);
                                                                  Employee.RESET;
                                                                  Employee.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
                                                                  if Employee.ISEMPTY then
                                                                    ERROR(Text001,TimeSheetHeader."Resource No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Cause of Absence Code }
    { 10  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                TestStatus;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 11  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                if ("Work Type Code" <> xRec."Work Type Code") and ("Work Type Code" <> '') then
                                                                  CheckWorkType;
                                                              END;

                                                   CaptionML=ENU=Work Type Code }
    { 12  ;   ;Approver ID         ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Approver ID;
                                                   Editable=false }
    { 13  ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Posted=CONST(false)) "Service Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   OnValidate=VAR
                                                                ServiceHeader@1000 : Record "Service Header";
                                                              BEGIN
                                                                if "Service Order No." <> '' then begin
                                                                  TESTFIELD(Type,Type::Service);
                                                                  ServiceHeader.GET(ServiceHeader."Document Type"::Order,"Service Order No.");
                                                                  Description := COPYSTR(
                                                                      STRSUBSTNO(Text003,"Service Order No.",ServiceHeader."Customer No."),
                                                                      1,
                                                                      MAXSTRLEN(Description));
                                                                end else
                                                                  Description := '';
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 14  ;   ;Service Order Line No.;Integer     ;CaptionML=ENU=Service Order Line No. }
    { 15  ;   ;Total Quantity      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Time Sheet Detail".Quantity WHERE ("Time Sheet No."=FIELD("Time Sheet No."),
                                                                                                       "Time Sheet Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Total Quantity;
                                                   Editable=false }
    { 17  ;   ;Chargeable          ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Chargeable }
    { 18  ;   ;Assembly Order No.  ;Code20        ;TableRelation=IF (Posted=CONST(false)) "Assembly Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   CaptionML=ENU=Assembly Order No.;
                                                   Editable=false }
    { 19  ;   ;Assembly Order Line No.;Integer    ;CaptionML=ENU=Assembly Order Line No.;
                                                   Editable=false }
    { 20  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Submitted,Rejected,Approved;
                                                   OptionString=Open,Submitted,Rejected,Approved;
                                                   Editable=false }
    { 21  ;   ;Approved By         ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Approved By;
                                                   Editable=false }
    { 22  ;   ;Approval Date       ;Date          ;CaptionML=ENU=Approval Date;
                                                   Editable=false }
    { 23  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=false }
    { 26  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Time Sheet Comment Line" WHERE ("No."=FIELD("Time Sheet No."),
                                                                                                      "Time Sheet Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Time Sheet No.","Line No."             ;Clustered=true }
    {    ;Type                                     }
    {    ;"Time Sheet No.",Status,Posted           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ResourcesSetup@1005 : Record "Resources Setup";
      Job@1001 : Record Job;
      JobTask@1000 : Record "Job Task";
      TimeSheetHeader@1004 : Record "Time Sheet Header";
      TimeSheetDetail@1003 : Record "Time Sheet Detail";
      Text001@1002 : TextConst 'ENU=There is no employee linked with resource %1.';
      Text002@1006 : TextConst 'ENU="Status must be Open or Rejected in line with Time Sheet No.=''%1'', Line No.=''%2''."';
      Text003@1007 : TextConst 'ENU=Service order %1 for customer %2';
      Text005@1009 : TextConst 'ENU=Select a type before you enter an activity.';

    [External]
    PROCEDURE TestStatus@3();
    BEGIN
      if not (Status in [Status::Open,Status::Rejected]) then
        ERROR(
          Text002,
          "Time Sheet No.",
          "Line No.");
    END;

    LOCAL PROCEDURE UpdateDetails@1();
    VAR
      TimeSheetDetail@1000 : Record "Time Sheet Detail";
    BEGIN
      TimeSheetDetail.SETRANGE("Time Sheet No.","Time Sheet No.");
      TimeSheetDetail.SETRANGE("Time Sheet Line No.","Line No.");
      if TimeSheetDetail.FINDSET(true) then
        repeat
          TimeSheetDetail.CopyFromTimeSheetLine(Rec);
          TimeSheetDetail.MODIFY;
        until TimeSheetDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTimeSheetResource@9(VAR Resource@1000 : Record Resource);
    BEGIN
      TimeSheetHeader.GET("Time Sheet No.");
      Resource.GET(TimeSheetHeader."Resource No.");
    END;

    LOCAL PROCEDURE GetJobApproverID@6() : Code[50];
    VAR
      Resource@1000 : Record Resource;
    BEGIN
      Job.GET("Job No.");
      Job.TESTFIELD("Person Responsible");
      Resource.GET(Job."Person Responsible");
      Resource.TESTFIELD("Time Sheet Owner User ID");
      exit(Resource."Time Sheet Owner User ID");
    END;

    [External]
    PROCEDURE UpdateApproverID@2();
    VAR
      Resource@1001 : Record Resource;
    BEGIN
      ResourcesSetup.GET;
      GetTimeSheetResource(Resource);
      if (Type = Type::Job) and ("Job No." <> '') and
         (((Resource.Type = Resource.Type::Person) and
           (ResourcesSetup."Time Sheet by Job Approval" = ResourcesSetup."Time Sheet by Job Approval"::Always)) or
          ((Resource.Type = Resource.Type::Machine) and
           (ResourcesSetup."Time Sheet by Job Approval" in [ResourcesSetup."Time Sheet by Job Approval"::"Machine Only",
                                                            ResourcesSetup."Time Sheet by Job Approval"::Always])))
      then
        "Approver ID" := GetJobApproverID
      else begin
        Resource.TESTFIELD("Time Sheet Approver User ID");
        "Approver ID" := Resource."Time Sheet Approver User ID";
      end;
    END;

    LOCAL PROCEDURE CheckWorkType@5();
    VAR
      Resource@1001 : Record Resource;
      WorkType@1000 : Record "Work Type";
    BEGIN
      if WorkType.GET("Work Type Code") then begin
        GetTimeSheetResource(Resource);
        WorkType.TESTFIELD("Unit of Measure Code",Resource."Base Unit of Measure");
      end;
    END;

    [External]
    PROCEDURE ShowLineDetails@4(ManagerRole@1004 : Boolean);
    VAR
      TimeSheetLineResDetail@1000 : Page "Time Sheet Line Res. Detail";
      TimeSheetLineJobDetail@1003 : Page "Time Sheet Line Job Detail";
      TimeSheetLineServiceDetail@1005 : Page "Time Sheet Line Service Detail";
      TimeSheetLineAssembDetail@1006 : Page "Time Sheet Line Assemb. Detail";
      TimeSheetLineAbsenceDetail@1007 : Page "Time Sheet Line Absence Detail";
    BEGIN
      case Type of
        Type::Resource:
          begin
            TimeSheetLineResDetail.SetParameters(Rec,ManagerRole);
            if TimeSheetLineResDetail.RUNMODAL = ACTION::OK then
              TimeSheetLineResDetail.GETRECORD(Rec);
          end;
        Type::Job:
          begin
            TimeSheetLineJobDetail.SetParameters(Rec,ManagerRole);
            if TimeSheetLineJobDetail.RUNMODAL = ACTION::OK then
              TimeSheetLineJobDetail.GETRECORD(Rec);
          end;
        Type::Absence:
          begin
            TimeSheetLineAbsenceDetail.SetParameters(Rec,ManagerRole);
            if TimeSheetLineAbsenceDetail.RUNMODAL = ACTION::OK then
              TimeSheetLineAbsenceDetail.GETRECORD(Rec);
          end;
        Type::Service:
          begin
            TimeSheetLineServiceDetail.SetParameters(Rec,ManagerRole);
            if TimeSheetLineServiceDetail.RUNMODAL = ACTION::OK then
              TimeSheetLineServiceDetail.GETRECORD(Rec);
          end;
        Type::"Assembly Order":
          begin
            TimeSheetLineAssembDetail.SetParameters(Rec);
            if TimeSheetLineAssembDetail.RUNMODAL = ACTION::OK then
              TimeSheetLineAssembDetail.GETRECORD(Rec);
          end;
        else
          ERROR(Text005);
      end;
      MODIFY;
    END;

    [External]
    PROCEDURE GetAllowEdit@8(FldNo@1001 : Integer;ManagerRole@1000 : Boolean) : Boolean;
    BEGIN
      if ManagerRole then
        exit((FldNo in [FIELDNO("Work Type Code"),FIELDNO(Chargeable)]) and (Status = Status::Submitted));

      exit(Status in [Status::Open,Status::Rejected]);
    END;

    BEGIN
    END.
  }
}

