OBJECT Codeunit 99000842 Service Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Codeunit is not initialized correctly.';
      Text001@1001 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text002@1002 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1003 : TextConst 'ENU=must not be changed when a quantity is reserved';
      CreateReservEntry@1004 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1005 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1006 : Codeunit "Reservation Management";
      ItemTrackingMgt@1023 : Codeunit "Item Tracking Management";
      SetFromType@1008 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1009 : Integer;
      SetFromID@1010 : Code[20];
      SetFromBatchName@1011 : Code[10];
      SetFromProdOrderLine@1012 : Integer;
      SetFromRefNo@1013 : Integer;
      SetFromVariantCode@1014 : Code[10];
      SetFromLocationCode@1015 : Code[10];
      SetFromSerialNo@1017 : Code[20];
      SetFromLotNo@1018 : Code[20];
      SetFromQtyPerUOM@1019 : Decimal;
      DeleteItemTracking@1016 : Boolean;
      Text004@1007 : TextConst 'ENU=must not be filled in when a quantity is reserved';

    [External]
    PROCEDURE CreateReservation@1(ServiceLine@1000 : Record "Service Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text000);

      ServiceLine.TESTFIELD(Type,ServiceLine.Type::Item);
      ServiceLine.TESTFIELD("No.");
      ServiceLine.TESTFIELD("Needed by Date");
      ServiceLine.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(ServiceLine."Outstanding Qty. (Base)") < ABS(ServiceLine."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text001,
          ABS(ServiceLine."Outstanding Qty. (Base)") - ABS(ServiceLine."Reserved Qty. (Base)"));

      ServiceLine.TESTFIELD("Variant Code",SetFromVariantCode);
      ServiceLine.TESTFIELD("Location Code",SetFromLocationCode);

      if QuantityBase > 0 then
        ShipmentDate := ServiceLine."Needed by Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ServiceLine."Needed by Date";
      end;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Service Line",ServiceLine."Document Type",
        ServiceLine."Document No.",'',0,ServiceLine."Line No.",
        ServiceLine."Qty. per Unit of Measure",Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ServiceLine."No.",ServiceLine."Variant Code",ServiceLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    LOCAL PROCEDURE CreateBindingReservation@15(ServiceLine@1000 : Record "Service Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(ServiceLine,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@7(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE SetBinding@13(Binding@1000 : '" ","Order-to-Order"');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record "Reservation Entry";ServiceLine@1001 : Record "Service Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",false);
      FilterReservEntry.SetSourceFilter2('',0);
    END;

    [External]
    PROCEDURE Caption@30(ServiceLine@1001 : Record "Service Line") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(ServiceLine@1000 : Record "Service Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ServiceLine);
      exit(ReservEntry.FINDLAST);
    END;

    LOCAL PROCEDURE ReservEntryExist@17(ServLine@1000 : Record "Service Line") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ServLine);
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE ReservQuantity@21(ServLine@1001 : Record "Service Line";VAR QtyToReserve@1000 : Decimal;VAR QtyToReserveBase@1002 : Decimal);
    BEGIN
      case ServLine."Document Type" of
        ServLine."Document Type"::Quote,
        ServLine."Document Type"::Order,
        ServLine."Document Type"::Invoice:
          begin
            QtyToReserve := ServLine."Outstanding Quantity";
            QtyToReserveBase := ServLine."Outstanding Qty. (Base)";
          end;
        ServLine."Document Type"::"Credit Memo":
          begin
            QtyToReserve := -ServLine."Outstanding Quantity";
            QtyToReserveBase := -ServLine."Outstanding Qty. (Base)"
          end;
      end;
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewServiceLine@1000 : Record "Service Line";VAR OldServiceLine@1001 : Record "Service Line");
    VAR
      ServiceLine@1005 : Record "Service Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if (NewServiceLine.Type <> NewServiceLine.Type::Item) and (OldServiceLine.Type <> OldServiceLine.Type::Item) then
        exit;

      if NewServiceLine."Line No." = 0 then
        if not ServiceLine.GET(NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.") then
          exit;

      NewServiceLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewServiceLine."Reserved Qty. (Base)" <> 0;

      if NewServiceLine.Type <> OldServiceLine.Type then
        if ShowError then
          NewServiceLine.FIELDERROR(Type,Text003)
        else
          HasError := true;

      if NewServiceLine."No." <> OldServiceLine."No." then
        if ShowError then
          NewServiceLine.FIELDERROR("No.",Text003)
        else
          HasError := true;

      if (NewServiceLine."Needed by Date" = 0D) and (OldServiceLine."Needed by Date" <> 0D) then
        if ShowError then
          NewServiceLine.FIELDERROR("Needed by Date",Text002)
        else
          HasError := true;

      if NewServiceLine."Variant Code" <> OldServiceLine."Variant Code" then
        if ShowError then
          NewServiceLine.FIELDERROR("Variant Code",Text003)
        else
          HasError := true;

      if NewServiceLine."Location Code" <> OldServiceLine."Location Code" then
        if ShowError then
          NewServiceLine.FIELDERROR("Location Code",Text003)
        else
          HasError := true;

      if (NewServiceLine.Type = NewServiceLine.Type::Item) and (OldServiceLine.Type = OldServiceLine.Type::Item) then
        if (NewServiceLine."Bin Code" <> OldServiceLine."Bin Code") and
           (not ReservMgt.CalcIsAvailTrackedQtyInBin(
              NewServiceLine."No.",NewServiceLine."Bin Code",
              NewServiceLine."Location Code",NewServiceLine."Variant Code",
              DATABASE::"Service Line",NewServiceLine."Document Type",
              NewServiceLine."Document No.",'',0,NewServiceLine."Line No."))
        then begin
          if ShowError then
            NewServiceLine.FIELDERROR("Bin Code",Text004);
          HasError := true;
        end;

      if NewServiceLine."Line No." <> OldServiceLine."Line No." then
        HasError := true;

      if HasError then
        if (NewServiceLine."No." <> OldServiceLine."No.") or
           FindReservEntry(NewServiceLine,TempReservEntry)
        then begin
          if NewServiceLine."No." <> OldServiceLine."No." then begin
            ReservMgt.SetServLine(OldServiceLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetServLine(NewServiceLine);
          end else begin
            ReservMgt.SetServLine(NewServiceLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewServiceLine."Outstanding Qty. (Base)");
        end;

      if HasError or (NewServiceLine."Needed by Date" <> OldServiceLine."Needed by Date")
      then begin
        AssignForPlanning(NewServiceLine);
        if (NewServiceLine."No." <> OldServiceLine."No.") or
           (NewServiceLine."Variant Code" <> OldServiceLine."Variant Code") or
           (NewServiceLine."Location Code" <> OldServiceLine."Location Code")
        then
          AssignForPlanning(OldServiceLine);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@2(VAR NewServiceLine@1000 : Record "Service Line";VAR OldServiceLine@1001 : Record "Service Line");
    VAR
      ServiceLine@1002 : Record "Service Line";
    BEGIN
      with NewServiceLine do begin
        if not ("Document Type" in
                ["Document Type"::Quote,"Document Type"::Order])
        then
          if "Shipment No." = '' then
            exit;

        if Type <> Type::Item then
          exit;
        if "Line No." = OldServiceLine."Line No." then
          if "Quantity (Base)" = OldServiceLine."Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not ServiceLine.GET("Document Type","Document No.","Line No.") then
            exit;
        ReservMgt.SetServLine(NewServiceLine);
        if "Qty. per Unit of Measure" <> OldServiceLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Outstanding Qty. (Base)" * OldServiceLine."Outstanding Qty. (Base)" < 0 then
          ReservMgt.DeleteReservEntries(false,0)
        else
          ReservMgt.DeleteReservEntries(false,"Outstanding Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Outstanding Qty. (Base)");
        AssignForPlanning(NewServiceLine);
      end;
    END;

    LOCAL PROCEDURE AssignForPlanning@5(VAR ServiceLine@1000 : Record "Service Line");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with ServiceLine do begin
        if "Document Type" <> "Document Type"::Order then
          exit;
        if Type <> Type::Item then
          exit;
        if "No." <> '' then
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code","Needed by Date");
      end;
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR ServLine@1000 : Record "Service Line") : Boolean;
    BEGIN
      with ServLine do begin
        if not ReservEntryExist(ServLine) then
          exit(true);

        ReservMgt.SetServLine(ServLine);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE DeleteLine@3(VAR ServLine@1000 : Record "Service Line");
    BEGIN
      with ServLine do begin
        ReservMgt.SetServLine(ServLine);
        if DeleteItemTracking then
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        DeleteInvoiceSpecFromLine(ServLine);
        CALCFIELDS("Reserved Qty. (Base)");
      end;
    END;

    [External]
    PROCEDURE CallItemTracking@6(VAR ServiceLine@1003 : Record "Service Line");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromServLine(ServiceLine,false);
      if ((ServiceLine."Document Type" = ServiceLine."Document Type"::Invoice) and
          (ServiceLine."Shipment No." <> ''))
      then
        ItemTrackingLines.SetFormRunMode(2); // Combined shipment/receipt
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,ServiceLine."Needed by Date");
      ItemTrackingLines.SetInbound(ServiceLine.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE TransServLineToServLine@31(VAR OldServLine@1000 : Record "Service Line";VAR NewServLine@1001 : Record "Service Line";TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      if not FindReservEntry(OldServLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      NewServLine.TestItemFields(OldServLine."No.",OldServLine."Variant Code",OldServLine."Location Code");

      for Status := Status::Reservation to Status::Prospect do begin
        if TransferQty = 0 then
          exit;
        OldReservEntry.SETRANGE("Reservation Status",Status);
        if OldReservEntry.FINDSET then
          repeat
            OldReservEntry.TestItemFields(OldServLine."No.",OldServLine."Variant Code",OldServLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Service Line",
                NewServLine."Document Type",NewServLine."Document No.",'',0,
                NewServLine."Line No.",NewServLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          until (OldReservEntry.NEXT = 0) or (TransferQty = 0);
      end;
    END;

    [External]
    PROCEDURE RetrieveInvoiceSpecification@9(VAR ServLine@1002 : Record "Service Line";VAR TempInvoicingSpecification@1001 : TEMPORARY Record "Tracking Specification";Consume@1004 : Boolean) OK@1003 : Boolean;
    VAR
      SourceSpecification@1000 : Record "Tracking Specification";
    BEGIN
      CLEAR(TempInvoicingSpecification);
      if ServLine.Type <> ServLine.Type::Item then
        exit;
      if ((ServLine."Document Type" = ServLine."Document Type"::Invoice) and
          (ServLine."Shipment No." <> ''))
      then
        OK := RetrieveInvoiceSpecification2(ServLine,TempInvoicingSpecification)
      else begin
        SourceSpecification.InitFromServLine(ServLine,Consume);
        OK := ItemTrackingMgt.RetrieveInvoiceSpecWithService(SourceSpecification,TempInvoicingSpecification,Consume);
      end;
    END;

    LOCAL PROCEDURE RetrieveInvoiceSpecification2@1013(VAR ServLine@1002 : Record "Service Line";VAR TempInvoicingSpecification@1001 : TEMPORARY Record "Tracking Specification") OK@1003 : Boolean;
    VAR
      TrackingSpecification@1000 : Record "Tracking Specification";
      ReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      // Used for combined shipment:
      if ServLine.Type <> ServLine.Type::Item then
        exit;
      if not FindReservEntry(ServLine,ReservEntry) then
        exit;
      ReservEntry.FINDSET;
      repeat
        ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        ReservEntry.TESTFIELD("Item Ledger Entry No.");
        TrackingSpecification.GET(ReservEntry."Item Ledger Entry No.");
        TempInvoicingSpecification := TrackingSpecification;
        TempInvoicingSpecification."Qty. to Invoice (Base)" :=
          ReservEntry."Qty. to Invoice (Base)";
        TempInvoicingSpecification."Qty. to Invoice" :=
          ROUND(ReservEntry."Qty. to Invoice (Base)" / ReservEntry."Qty. per Unit of Measure",0.00001);
        TempInvoicingSpecification."Buffer Status" := TempInvoicingSpecification."Buffer Status"::MODIFY;
        TempInvoicingSpecification.INSERT;
        ReservEntry.DELETE;
      until ReservEntry.NEXT = 0;

      OK := TempInvoicingSpecification.FINDFIRST;
    END;

    [External]
    PROCEDURE DeleteInvoiceSpecFromHeader@14(ServHeader@1002 : Record "Service Header");
    BEGIN
      ItemTrackingMgt.DeleteInvoiceSpecFromHeader(
        DATABASE::"Service Line",ServHeader."Document Type",ServHeader."No.");
    END;

    LOCAL PROCEDURE DeleteInvoiceSpecFromLine@19(ServLine@1002 : Record "Service Line");
    BEGIN
      ItemTrackingMgt.DeleteInvoiceSpecFromLine(
        DATABASE::"Service Line",ServLine."Document Type",ServLine."Document No.",ServLine."Line No.");
    END;

    [External]
    PROCEDURE TransServLineToItemJnlLine@35(VAR ServLine@1000 : Record "Service Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1004 : Decimal;VAR CheckApplFromItemEntry@1002 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(ServLine,OldReservEntry) then
        exit(TransferQty);

      OldReservEntry.Lock;

      ItemJnlLine.TestItemFields(ServLine."No.",ServLine."Variant Code",ServLine."Location Code");

      if TransferQty = 0 then
        exit;

      if ItemJnlLine."Invoiced Quantity" <> 0 then
        CreateReservEntry.SetUseQtyToInvoice(true);

      if ReservEngineMgt.InitRecordSet(OldReservEntry) then begin
        repeat
          OldReservEntry.TestItemFields(ServLine."No.",ServLine."Variant Code",ServLine."Location Code");

          if CheckApplFromItemEntry then begin
            OldReservEntry.TESTFIELD("Appl.-from Item Entry");
            CreateReservEntry.SetApplyFromEntryNo(OldReservEntry."Appl.-from Item Entry");
          end;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        until (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) or (TransferQty = 0);
        CheckApplFromItemEntry := false;
      end;
      exit(TransferQty);
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@11(ServHeader@1000 : Record "Service Header");
    VAR
      ReservEntry@1003 : Record "Reservation Entry";
      CreateReservEntry@1001 : Codeunit "Create Reserv. Entry";
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEntry.SetSourceFilter(DATABASE::"Service Line",ServHeader."Document Type",ServHeader."No.",-1,true);
      ReservEntry.SetSourceFilter2('',0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [External]
    PROCEDURE BindToPurchase@8(ServiceLine@1002 : Record "Service Line";PurchLine@1003 : Record "Purchase Line";ReservQty@1004 : Decimal;ReservQtyBase@1005 : Decimal);
    VAR
      TrackingSpecification@1000 : Record "Tracking Specification";
      ReservationEntry@1001 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Purchase Line",
        PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
        PurchLine."Variant Code",PurchLine."Location Code",PurchLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ServiceLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToRequisition@10(ServiceLine@1003 : Record "Service Line";ReqLine@1002 : Record "Requisition Line";ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record "Tracking Specification";
      ReservationEntry@1004 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Requisition Line",
        0,ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",0,ReqLine."Line No.",
        ReqLine."Variant Code",ReqLine."Location Code",ReqLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ServiceLine,ReqLine.Description,ReqLine."Due Date",ReservQty,ReservQtyBase);
    END;

    BEGIN
    END.
  }
}

