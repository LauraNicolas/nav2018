OBJECT Codeunit 7600 Calendar Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1003 : Record Customer;
      Vendor@1004 : Record Vendor;
      Location@1005 : Record Location;
      CompanyInfo@1006 : Record "Company Information";
      ServMgtSetup@1014 : Record "Service Mgt. Setup";
      Shippingagent@1007 : Record "Shipping Agent Services";
      BaseCalChange@1011 : Record "Base Calendar Change";
      CustCalChange@1001 : Record "Customized Calendar Change";
      TempCustChange@1002 : TEMPORARY Record "Customized Calendar Change";
      TempCounter@1013 : Integer;
      Text001@1015 : TextConst 'ENU=Yes';
      Text002@1016 : TextConst 'ENU=No';
      Text003@1017 : TextConst 'ENU=The expression %1 cannot be negative.';
      OldSourceType@1050 : Integer;
      OldSourceCode@1051 : Code[20];
      OldAdditionalSourceCode@1052 : Code[20];
      OldCalendarCode@1053 : Code[10];

    [External]
    PROCEDURE ShowCustomizedCalendar@1(ForSourcetype@1000 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';ForSourceCode@1001 : Code[20];ForAdditionalSourceCode@1003 : Code[20];ForBaseCalendarCode@1002 : Code[10]);
    VAR
      TempCustomizedCalEntry@1004 : TEMPORARY Record "Customized Calendar Entry";
    BEGIN
      TempCustomizedCalEntry.DELETEALL;
      TempCustomizedCalEntry.INIT;
      TempCustomizedCalEntry."Source Type" := ForSourcetype;
      TempCustomizedCalEntry."Source Code" := ForSourceCode;
      TempCustomizedCalEntry."Additional Source Code" := ForAdditionalSourceCode;
      TempCustomizedCalEntry."Base Calendar Code" := ForBaseCalendarCode;
      TempCustomizedCalEntry.INSERT;
      PAGE.RUN(PAGE::"Customized Calendar Entries",TempCustomizedCalEntry);
    END;

    LOCAL PROCEDURE GetCalendarCode@7(SourceType@1001 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SourceCode@1000 : Code[20];AdditionalSourceCode@1002 : Code[20]) : Code[10];
    BEGIN
      case SourceType of
        SourceType::Company:
          if CompanyInfo.GET then
            exit(CompanyInfo."Base Calendar Code");
        SourceType::Customer:
          if Customer.GET(SourceCode) then
            exit(Customer."Base Calendar Code");
        SourceType::Vendor:
          if Vendor.GET(SourceCode) then
            exit(Vendor."Base Calendar Code");
        SourceType::"Shipping Agent":
          begin
            if Shippingagent.GET(SourceCode,AdditionalSourceCode) then
              exit(Shippingagent."Base Calendar Code");

            if CompanyInfo.GET then
              exit(CompanyInfo."Base Calendar Code");
          end;
        SourceType::Location:
          begin
            if Location.GET(SourceCode) then
              if Location."Base Calendar Code" <> '' then
                exit(Location."Base Calendar Code");
            if CompanyInfo.GET then
              exit(CompanyInfo."Base Calendar Code");
          end;
        SourceType::Service:
          if ServMgtSetup.GET then
            exit(ServMgtSetup."Base Calendar Code");
      end;
    END;

    [External]
    PROCEDURE CheckDateStatus@5(CalendarCode@1000 : Code[10];TargetDate@1001 : Date;VAR Description@1002 : Text[50]) : Boolean;
    BEGIN
      BaseCalChange.RESET;
      BaseCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      if BaseCalChange.FINDSET then
        repeat
          case BaseCalChange."Recurring System" of
            BaseCalChange."Recurring System"::" ":
              if TargetDate = BaseCalChange.Date then begin
                Description := BaseCalChange.Description;
                exit(BaseCalChange.Nonworking);
              end;
            BaseCalChange."Recurring System"::"Weekly Recurring":
              if DATE2DWY(TargetDate,1) = BaseCalChange.Day then begin
                Description := BaseCalChange.Description;
                exit(BaseCalChange.Nonworking);
              end;
            BaseCalChange."Recurring System"::"Annual Recurring":
              if (DATE2DMY(TargetDate,2) = DATE2DMY(BaseCalChange.Date,2)) and
                 (DATE2DMY(TargetDate,1) = DATE2DMY(BaseCalChange.Date,1))
              then begin
                Description := BaseCalChange.Description;
                exit(BaseCalChange.Nonworking);
              end;
          end;
        until BaseCalChange.NEXT = 0;
      Description := '';
    END;

    [External]
    PROCEDURE CheckCustomizedDateStatus@2(SourceType@1003 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SourceCode@1004 : Code[20];AdditionalSourceCode@1005 : Code[20];CalendarCode@1002 : Code[10];TargetDate@1001 : Date;VAR Description@1000 : Text[50]) : Boolean;
    BEGIN
      CombineChanges(SourceType,SourceCode,AdditionalSourceCode,CalendarCode);
      TempCustChange.RESET;
      TempCustChange.SETCURRENTKEY("Entry No.");
      if TempCustChange.FINDSET then
        repeat
          case TempCustChange."Recurring System" of
            TempCustChange."Recurring System"::" ":
              if TargetDate = TempCustChange.Date then begin
                Description := TempCustChange.Description;
                exit(TempCustChange.Nonworking);
              end;
            TempCustChange."Recurring System"::"Weekly Recurring":
              if DATE2DWY(TargetDate,1) = TempCustChange.Day then begin
                Description := TempCustChange.Description;
                exit(TempCustChange.Nonworking);
              end;
            TempCustChange."Recurring System"::"Annual Recurring":
              if (DATE2DMY(TargetDate,2) = DATE2DMY(TempCustChange.Date,2)) and
                 (DATE2DMY(TargetDate,1) = DATE2DMY(TempCustChange.Date,1))
              then begin
                Description := TempCustChange.Description;
                exit(TempCustChange.Nonworking);
              end;
          end;
        until TempCustChange.NEXT = 0;
      Description := '';
    END;

    LOCAL PROCEDURE CombineChanges@4(SourceType@1003 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SourceCode@1002 : Code[20];AdditionalSourceCode@1001 : Code[20];CalendarCode@1000 : Code[10]);
    BEGIN
      if (SourceType = OldSourceType) and
         (SourceCode = OldSourceCode) and (AdditionalSourceCode = OldAdditionalSourceCode) and (CalendarCode = OldCalendarCode)
      then
        exit;

      TempCustChange.RESET;
      TempCustChange.DELETEALL;

      TempCounter := 0;
      CustCalChange.RESET;
      CustCalChange.SETRANGE("Source Type",SourceType);
      CustCalChange.SETRANGE("Source Code",SourceCode);
      CustCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      CustCalChange.SETRANGE("Additional Source Code",AdditionalSourceCode);
      if CustCalChange.FINDSET then
        repeat
          TempCounter := TempCounter + 1;
          TempCustChange.INIT;
          TempCustChange."Source Type" := CustCalChange."Source Type";
          TempCustChange."Source Code" := CustCalChange."Source Code";
          TempCustChange."Base Calendar Code" := CustCalChange."Base Calendar Code";
          TempCustChange."Additional Source Code" := CustCalChange."Additional Source Code";
          TempCustChange.Date := CustCalChange.Date;
          TempCustChange.Description := CustCalChange.Description;
          TempCustChange.Day := CustCalChange.Day;
          TempCustChange.Nonworking := CustCalChange.Nonworking;
          TempCustChange."Recurring System" := CustCalChange."Recurring System";
          TempCustChange."Entry No." := TempCounter;
          TempCustChange.INSERT;
        until CustCalChange.NEXT = 0;

      BaseCalChange.RESET;
      BaseCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      if BaseCalChange.FINDSET then
        repeat
          TempCounter := TempCounter + 1;
          TempCustChange.INIT;
          TempCustChange."Entry No." := TempCounter;
          TempCustChange."Source Type" := SourceType;
          TempCustChange."Source Code" := SourceCode;
          TempCustChange."Base Calendar Code" := BaseCalChange."Base Calendar Code";
          TempCustChange.Date := BaseCalChange.Date;
          TempCustChange.Description := BaseCalChange.Description;
          TempCustChange.Day := BaseCalChange.Day;
          TempCustChange.Nonworking := BaseCalChange.Nonworking;
          TempCustChange."Recurring System" := BaseCalChange."Recurring System";
          TempCustChange.INSERT;
        until BaseCalChange.NEXT = 0;

      OldSourceType := SourceType;
      OldSourceCode := SourceCode;
      OldAdditionalSourceCode := AdditionalSourceCode;
      OldCalendarCode := CalendarCode;
    END;

    [External]
    PROCEDURE CreateWhereUsedEntries@3(BaseCalendarCode@1000 : Code[10]);
    VAR
      WhereUsedBaseCalendar@1001 : Record "Where Used Base Calendar";
    BEGIN
      WhereUsedBaseCalendar.DELETEALL;
      if CompanyInfo.GET then
        if CompanyInfo."Base Calendar Code" = BaseCalendarCode then begin
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Company;
          WhereUsedBaseCalendar."Source Name" := CompanyInfo.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Company,'','',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        end;

      Customer.RESET;
      Customer.SETRANGE("Base Calendar Code",BaseCalendarCode);
      if Customer.FINDSET then
        repeat
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Customer;
          WhereUsedBaseCalendar."Source Code" := Customer."No.";
          WhereUsedBaseCalendar."Source Name" := Customer.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Customer,Customer."No.",'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        until Customer.NEXT = 0;

      Vendor.RESET;
      Vendor.SETRANGE("Base Calendar Code",BaseCalendarCode);
      if Vendor.FINDSET then
        repeat
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Vendor;
          WhereUsedBaseCalendar."Source Code" := Vendor."No.";
          WhereUsedBaseCalendar."Source Name" := Vendor.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Vendor,Vendor."No.",'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        until Vendor.NEXT = 0;

      Location.RESET;
      Location.SETRANGE("Base Calendar Code",BaseCalendarCode);
      if Location.FINDSET then
        repeat
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Location;
          WhereUsedBaseCalendar."Source Code" := Location.Code;
          WhereUsedBaseCalendar."Source Name" := Location.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Location,Location.Code,'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        until Location.NEXT = 0;

      Shippingagent.RESET;
      Shippingagent.SETRANGE("Base Calendar Code",BaseCalendarCode);
      if Shippingagent.FINDSET then
        repeat
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::"Shipping Agent";
          WhereUsedBaseCalendar."Source Code" := Shippingagent."Shipping Agent Code";
          WhereUsedBaseCalendar."Additional Source Code" := Shippingagent.Code;
          WhereUsedBaseCalendar."Source Name" := Shippingagent.Description;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::"Shipping Agent",Shippingagent."Shipping Agent Code",
              Shippingagent.Code,BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        until Shippingagent.NEXT = 0;

      if ServMgtSetup.GET then
        if ServMgtSetup."Base Calendar Code" = BaseCalendarCode then begin
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Service;
          WhereUsedBaseCalendar."Source Name" := ServMgtSetup.TABLECAPTION;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Service,'','',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        end;

      COMMIT;
    END;

    [External]
    PROCEDURE CustomizedChangesExist@8(SourceType@1003 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SourceCode@1002 : Code[20];AdditionalSourceCode@1001 : Code[20];BaseCalendarCode@1000 : Code[10]) : Boolean;
    BEGIN
      CustCalChange.RESET;
      CustCalChange.SETRANGE("Source Type",SourceType);
      CustCalChange.SETRANGE("Source Code",SourceCode);
      CustCalChange.SETRANGE("Additional Source Code",AdditionalSourceCode);
      CustCalChange.SETRANGE("Base Calendar Code",BaseCalendarCode);
      if CustCalChange.FINDFIRST then
        exit(true);
    END;

    [External]
    PROCEDURE CustomizedCalendarExistText@9(SourceType@1004 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SourceCode@1003 : Code[20];AdditionalSourceCode@1002 : Code[20];BaseCalendarCode@1001 : Code[10]) : Text[10];
    BEGIN
      if CustomizedChangesExist(SourceType,SourceCode,AdditionalSourceCode,BaseCalendarCode) then
        exit(Text001);
      exit(Text002);
    END;

    [External]
    PROCEDURE CalcDateBOC@6(OrgDateExpression@1000 : Text[30];OrgDate@1001 : Date;FirstSourceType@1002 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';FirstSourceCode@1003 : Code[20];FirstAddCode@1006 : Code[20];SecondSourceType@1007 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SecondSourceCode@1008 : Code[20];SecondAddCode@1009 : Code[20];CheckBothCalendars@1016 : Boolean) : Date;
    VAR
      FirstCalCode@1010 : Code[10];
      SecondCalCode@1011 : Code[10];
      LoopTerminator@1005 : Boolean;
      LoopCounter@1014 : Integer;
      NewDate@1012 : Date;
      TempDesc@1013 : Text[30];
      Nonworking@1015 : Boolean;
      Nonworking2@1017 : Boolean;
      LoopFactor@1018 : Integer;
      CalConvTimeFrame@1004 : Integer;
      DateFormula@1019 : DateFormula;
      Ok@1020 : Boolean;
      NegDateFormula@1021 : DateFormula;
    BEGIN
      if (FirstSourceType = FirstSourceType::"Shipping Agent") and
         ((FirstSourceCode = '') or (FirstAddCode = ''))
      then begin
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
        FirstAddCode := '';
      end;
      if (SecondSourceType = SecondSourceType::"Shipping Agent") and
         ((SecondSourceCode = '') or (SecondAddCode = ''))
      then begin
        SecondSourceType := SecondSourceType::Company;
        SecondSourceCode := '';
        SecondAddCode := '';
      end;
      if (FirstSourceType = FirstSourceType::Location) and
         (FirstSourceCode = '')
      then begin
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
      end;
      if (SecondSourceType = SecondSourceType::Location) and
         (SecondSourceCode = '')
      then begin
        SecondSourceType := SecondSourceType::Company;
        SecondSourceCode := '';
      end;
      if CompanyInfo.GET then
        CalConvTimeFrame := CALCDATE(CompanyInfo."Cal. Convergence Time Frame",WORKDATE) - WORKDATE;

      FirstCalCode := GetCalendarCode(FirstSourceType,FirstSourceCode,FirstAddCode);
      SecondCalCode := GetCalendarCode(SecondSourceType,SecondSourceCode,SecondAddCode);
      EVALUATE(DateFormula,OrgDateExpression);
      EVALUATE(NegDateFormula,'<-0D>');

      if OrgDate = 0D then
        OrgDate := WORKDATE;
      if (CALCDATE(DateFormula,OrgDate) >= OrgDate) and (DateFormula <> NegDateFormula) then
        LoopFactor := 1
      else
        LoopFactor := -1;

      NewDate := OrgDate;
      if CALCDATE(DateFormula,OrgDate) <> OrgDate then
        repeat
          NewDate := NewDate + LoopFactor;
          if CheckBothCalendars and (FirstCalCode = '') and (SecondCalCode <> '') then
            Ok := not CheckCustomizedDateStatus(
                SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc)
          else
            Ok := not CheckCustomizedDateStatus(
                FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc);
          if Ok then
            LoopCounter := LoopCounter + 1;
          if NewDate >= OrgDate + CalConvTimeFrame then
            LoopCounter := ABS(CALCDATE(DateFormula,OrgDate) - OrgDate);
        until LoopCounter = ABS(CALCDATE(DateFormula,OrgDate) - OrgDate);

      LoopCounter := 0;
      repeat
        LoopCounter := LoopCounter + 1;
        Nonworking :=
          CheckCustomizedDateStatus(
            FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc);
        Nonworking2 :=
          CheckCustomizedDateStatus(
            SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc);
        if Nonworking then begin
          NewDate := NewDate + LoopFactor;
        end else begin
          if not CheckBothCalendars then
            exit(NewDate);

          if (Nonworking = false) and
             (Nonworking2 = false)
          then
            exit(NewDate);

          NewDate := NewDate + LoopFactor;
        end;
        if LoopCounter >= CalConvTimeFrame then
          LoopTerminator := true;
      until LoopTerminator = true;
      exit(NewDate);
    END;

    [External]
    PROCEDURE CalcDateBOC2@11(OrgDateExpression@1000 : Text[30];OrgDate@1001 : Date;FirstSourceType@1002 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';FirstSourceCode@1003 : Code[20];FirstAddCode@1006 : Code[20];SecondSourceType@1007 : 'Company,Customer,Vendor,Location,"Shipping Agent",Service';SecondSourceCode@1008 : Code[20];SecondAddCode@1009 : Code[20];CheckBothCalendars@1016 : Boolean) : Date;
    VAR
      NewOrgDateExpression@1021 : Text[30];
    BEGIN
      // Use this procedure to subtract time expression.
      NewOrgDateExpression := ReverseSign(OrgDateExpression);
      exit(CalcDateBOC(NewOrgDateExpression,OrgDate,FirstSourceType,FirstSourceCode,FirstAddCode,
          SecondSourceType,SecondSourceCode,SecondAddCode,CheckBothCalendars));
    END;

    LOCAL PROCEDURE ReverseSign@10(DateFormulaExpr@1000 : Text[30]) : Text[30];
    VAR
      NewDateFormulaExpr@1001 : Text[30];
      Formula@1002 : DateFormula;
    BEGIN
      EVALUATE(Formula,DateFormulaExpr);
      NewDateFormulaExpr := CONVERTSTR(FORMAT(Formula),'+-','-+');
      if not (DateFormulaExpr[1] in ['+','-']) then
        NewDateFormulaExpr := '-' + NewDateFormulaExpr;
      exit(NewDateFormulaExpr);
    END;

    [External]
    PROCEDURE CheckDateFormulaPositive@12(CurrentDateFormula@1000 : DateFormula);
    BEGIN
      if CALCDATE(CurrentDateFormula) < TODAY then
        ERROR(Text003,CurrentDateFormula);
    END;

    [External]
    PROCEDURE CalcTimeDelta@13(EndingTime@1001 : Time;StartingTime@1000 : Time) Result : Integer;
    BEGIN
      Result := EndingTime - StartingTime;
      if (Result <> 0) and (EndingTime = 235959T) then
        Result += 1000;
    END;

    [External]
    PROCEDURE CalcTimeSubtract@14(Time@1000 : Time;Value@1001 : Integer) Result : Time;
    BEGIN
      Result := Time - Value;
      if (Result <> 000000T) and (Time = 235959T) and (Value <> 0) then
        Result += 1000;
    END;

    BEGIN
    END.
  }
}

