OBJECT Table 5404 Item Unit of Measure
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TestItemUOM;
               CheckNoEntriesWithUoM;
             END;

    OnRename=BEGIN
               TestItemUOM;
             END;

    CaptionML=ENU=Item Unit of Measure;
    LookupPageID="Item Units of Measure";
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                CalcWeight;
                                                              END;

                                                   CaptionML=ENU=Item No.;
                                                   NotBlank=true }
    { 2   ;   ;Code                ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                if "Qty. per Unit of Measure" <= 0 then
                                                                  FIELDERROR("Qty. per Unit of Measure",Text000);
                                                                if xRec."Qty. per Unit of Measure" <> "Qty. per Unit of Measure" then
                                                                  CheckNoEntriesWithUoM;
                                                                Item.GET("Item No.");
                                                                if Item."Base Unit of Measure" = Code then
                                                                  TESTFIELD("Qty. per Unit of Measure",1);
                                                                CalcWeight;
                                                              END;

                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5 }
    { 7300;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalcCubage;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7301;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalcCubage;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7302;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalcCubage;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7303;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7304;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;"Item No.",Code                         ;Clustered=true }
    {    ;"Item No.","Qty. per Unit of Measure"    }
    {    ;Code                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,"Qty. per Unit of Measure"          }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must be greater than 0';
      Item@1001 : Record Item;
      Text001@1004 : TextConst 'ENU=You cannot rename %1 %2 for item %3 because it is the item''s %4 and there are one or more open ledger entries for the item.';
      CannotModifyBaseUnitOfMeasureErr@1005 : TextConst '@@@=%1 Table name (Item Unit of measure), %2 Value of Measure (KG, PCS...), %3 Item ID, %4 Base unit of Measure;ENU=You cannot modify %1 %2 for item %3 because it is the item''s %4.';
      CannotModifyUnitOfMeasureErr@1002 : TextConst '@@@=%1 Table name (Item Unit of measure), %2 Value of Measure (KG, PCS...), %3 Item ID, %4 Entry Table Name, %5 Field Caption;ENU=You cannot modify %1 %2 for item %3 because non-zero %5 with %2 exists in %4.';
      CannotModifyUOMWithWhseEntriesErr@1003 : TextConst '@@@="%1 = Item Unit of Measure %2 = Code %3 = Item No.";ENU=You cannot modify %1 %2 for item %3 because there are one or more warehouse adjustment entries for the item.';

    LOCAL PROCEDURE CalcCubage@7300();
    BEGIN
      Cubage := Length * Width * Height;
    END;

    [External]
    PROCEDURE CalcWeight@7301();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
      Weight := "Qty. per Unit of Measure" * Item."Net Weight";
    END;

    LOCAL PROCEDURE TestNoOpenEntriesExist@1();
    VAR
      Item@1000 : Record Item;
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      if Item.GET("Item No.") then
        if Item."Base Unit of Measure" = xRec.Code then begin
          ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
          ItemLedgEntry.SETRANGE("Item No.","Item No.");
          ItemLedgEntry.SETRANGE(Open,true);
          if not ItemLedgEntry.ISEMPTY then
            ERROR(Text001,TABLECAPTION,xRec.Code,"Item No.",Item.FIELDCAPTION("Base Unit of Measure"));
        end;
    END;

    LOCAL PROCEDURE TestNoWhseAdjmtEntriesExist@7();
    VAR
      WhseEntry@1001 : Record "Warehouse Entry";
      Location@1002 : Record Location;
      Bin@1003 : Record Bin;
    BEGIN
      WhseEntry.SETRANGE("Item No.","Item No.");
      WhseEntry.SETRANGE("Unit of Measure Code",xRec.Code);
      if Location.FINDSET then
        repeat
          if Bin.GET(Location.Code,Location."Adjustment Bin Code") then begin
            WhseEntry.SETRANGE("Zone Code",Bin."Zone Code");
            if not WhseEntry.ISEMPTY then
              ERROR(CannotModifyUOMWithWhseEntriesErr,TABLECAPTION,xRec.Code,"Item No.");
          end;
        until Location.NEXT = 0;
    END;

    [External]
    PROCEDURE TestItemSetup@2();
    BEGIN
      if Item.GET("Item No.") then begin
        if Item."Base Unit of Measure" = xRec.Code then
          ERROR(CannotModifyBaseUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",Item.FIELDCAPTION("Base Unit of Measure"));
        if Item."Sales Unit of Measure" = xRec.Code then
          ERROR(CannotModifyBaseUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",Item.FIELDCAPTION("Sales Unit of Measure"));
        if Item."Purch. Unit of Measure" = xRec.Code then
          ERROR(CannotModifyBaseUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",Item.FIELDCAPTION("Purch. Unit of Measure"));
      end;
    END;

    LOCAL PROCEDURE TestItemUOM@17();
    BEGIN
      TestItemSetup;
      TestNoOpenEntriesExist;
      TestNoWhseAdjmtEntriesExist;
    END;

    [External]
    PROCEDURE CheckNoEntriesWithUoM@3();
    VAR
      WarehouseEntry@1001 : Record "Warehouse Entry";
    BEGIN
      WarehouseEntry.SETRANGE("Item No.","Item No.");
      WarehouseEntry.SETRANGE("Unit of Measure Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)",Quantity);
      if (WarehouseEntry."Qty. (Base)" <> 0) or (WarehouseEntry.Quantity <> 0) then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",WarehouseEntry.TABLECAPTION,
          WarehouseEntry.FIELDCAPTION(Quantity));

      CheckNoOutstandingQty;
    END;

    LOCAL PROCEDURE CheckNoOutstandingQty@5();
    BEGIN
      CheckNoOutstandingQtyPurchLine;
      CheckNoOutstandingQtySalesLine;
      CheckNoOutstandingQtyTransferLine;
      CheckNoRemQtyProdOrderLine;
      CheckNoRemQtyProdOrderComponent;
      CheckNoOutstandingQtyServiceLine;
      CheckNoRemQtyAssemblyHeader;
      CheckNoRemQtyAssemblyLine;
    END;

    LOCAL PROCEDURE CheckNoOutstandingQtyPurchLine@9();
    VAR
      PurchLine@1000 : Record "Purchase Line";
    BEGIN
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.","Item No.");
      PurchLine.SETRANGE("Unit of Measure Code",Code);
      PurchLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      if not PurchLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          PurchLine.TABLECAPTION,PurchLine.FIELDCAPTION("Qty. to Receive"));
    END;

    LOCAL PROCEDURE CheckNoOutstandingQtySalesLine@10();
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.","Item No.");
      SalesLine.SETRANGE("Unit of Measure Code",Code);
      SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      if not SalesLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          SalesLine.TABLECAPTION,SalesLine.FIELDCAPTION("Qty. to Ship"));
    END;

    LOCAL PROCEDURE CheckNoOutstandingQtyTransferLine@11();
    VAR
      TransferLine@1000 : Record "Transfer Line";
    BEGIN
      TransferLine.SETRANGE("Item No.","Item No.");
      TransferLine.SETRANGE("Unit of Measure Code",Code);
      TransferLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      if not TransferLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          TransferLine.TABLECAPTION,TransferLine.FIELDCAPTION("Qty. to Ship"));
    END;

    LOCAL PROCEDURE CheckNoRemQtyProdOrderLine@12();
    VAR
      ProdOrderLine@1000 : Record "Prod. Order Line";
    BEGIN
      ProdOrderLine.SETRANGE("Item No.","Item No.");
      ProdOrderLine.SETRANGE("Unit of Measure Code",Code);
      ProdOrderLine.SETFILTER("Remaining Quantity",'<>%1',0);
      ProdOrderLine.SETFILTER(Status,'<>%1',ProdOrderLine.Status::Finished);
      if not ProdOrderLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          ProdOrderLine.TABLECAPTION,ProdOrderLine.FIELDCAPTION("Remaining Quantity"));
    END;

    LOCAL PROCEDURE CheckNoRemQtyProdOrderComponent@13();
    VAR
      ProdOrderComponent@1000 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.","Item No.");
      ProdOrderComponent.SETRANGE("Unit of Measure Code",Code);
      ProdOrderComponent.SETFILTER("Remaining Quantity",'<>%1',0);
      ProdOrderComponent.SETFILTER(Status,'<>%1',ProdOrderComponent.Status::Finished);
      if not ProdOrderComponent.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          ProdOrderComponent.TABLECAPTION,ProdOrderComponent.FIELDCAPTION("Remaining Quantity"));
    END;

    LOCAL PROCEDURE CheckNoOutstandingQtyServiceLine@14();
    VAR
      ServiceLine@1000 : Record "Service Line";
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.SETRANGE("No.","Item No.");
      ServiceLine.SETRANGE("Unit of Measure Code",Code);
      ServiceLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      if not ServiceLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          ServiceLine.TABLECAPTION,ServiceLine.FIELDCAPTION("Qty. to Ship"));
    END;

    LOCAL PROCEDURE CheckNoRemQtyAssemblyHeader@6();
    VAR
      AssemblyHeader@1000 : Record "Assembly Header";
    BEGIN
      AssemblyHeader.SETRANGE("Item No.","Item No.");
      AssemblyHeader.SETRANGE("Unit of Measure Code",Code);
      AssemblyHeader.SETFILTER("Remaining Quantity",'<>%1',0);
      if not AssemblyHeader.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          AssemblyHeader.TABLECAPTION,AssemblyHeader.FIELDCAPTION("Remaining Quantity"));
    END;

    LOCAL PROCEDURE CheckNoRemQtyAssemblyLine@4();
    VAR
      AssemblyLine@1000 : Record "Assembly Line";
    BEGIN
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.SETRANGE("No.","Item No.");
      AssemblyLine.SETRANGE("Unit of Measure Code",Code);
      AssemblyLine.SETFILTER("Remaining Quantity",'<>%1',0);
      if not AssemblyLine.ISEMPTY then
        ERROR(
          CannotModifyUnitOfMeasureErr,TABLECAPTION,xRec.Code,"Item No.",
          AssemblyLine.TABLECAPTION,AssemblyLine.FIELDCAPTION("Remaining Quantity"));
    END;

    BEGIN
    END.
  }
}

