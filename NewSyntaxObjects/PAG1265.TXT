OBJECT Page 1265 Data Exch. Setup Subform
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Field Mapping;
    SourceTable="Data Exch. Field Mapping Buf.";
    PageType=ListPart;
    SourceTableTemporary=true;
    OnAfterGetRecord=BEGIN
                       SetStyle;
                     END;

    OnNewRecord=BEGIN
                  SetStyle;
                  Depth := 1;
                END;

    OnAfterGetCurrRecord=BEGIN
                           IsRecordOfTypeField := Type = Type::Field;
                           SetStyle;
                         END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      Name=ActionContainer6;
                      ActionContainerType=ActionItems }
      { 7       ;1   ;Action    ;
                      Name=DataExchDef;
                      CaptionML=ENU=Data Exchange Definition;
                      ToolTipML=ENU=Set up a data exchange definition that enables you to exchange data, such as by sending electronic documents or importing bank files.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Data Exch Def Card";
                      RunPageLink=Code=FIELD("Data Exchange Def Code");
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Setup;
                      OnAction=VAR
                                 DataExchDef@1000 : Record "Data Exch. Def";
                               BEGIN
                                 DataExchDef.GET(DataExchDefCode);
                                 PAGE.RUNMODAL(PAGE::"Data Exch Def Card",DataExchDef);
                                 UpdateData;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                IndentationColumnName=Depth;
                IndentationControls=CaptionField;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                Name=CaptionField;
                CaptionML=ENU=Caption;
                ToolTipML=ENU=Specifies the caption of the field in Dynamics 365 that the node in the currency exchange rate file must map to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Caption;
                Enabled=IsRecordOfTypeField;
                StyleExpr=StyleTxt;
                OnAssistEdit=BEGIN
                               CaptionAssistEdit;
                             END;

                ImplicitType=Text250 }

    { 5   ;2   ;Field     ;
                Name=SourceField;
                CaptionML=ENU=Source;
                ToolTipML=ENU=Specifies the XPath to the XML node that must be mapped to the specified field in Microsoft Dynamics 365.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Source;
                OnAssistEdit=BEGIN
                               SourceAssistEdit(TempXMLBuffer);
                             END;

                ImplicitType=Text250;
                ShowMandatory=SourceMandatory }

    { 3   ;2   ;Field     ;
                Name=Default Value;
                ToolTipML=ENU=Specifies another value than the data in the field that will be exported, because you selected the Use Default Value check box. This field is only relevant for export.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Default Value";
                Editable=IsRecordOfTypeField;
                ImplicitType=Text250 }

    { 8   ;2   ;Field     ;
                Name=Transformation Rule;
                ToolTipML=ENU=Specifies a rule for transforming imported text to a supported value before it can be mapped to a specified field in Microsoft Dynamics 365. When you choose a value in this field, the same value is entered in the Transformation Rule field in the Data Exch. Field Mapping table and vice versa.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transformation Rule";
                ImplicitType=Code20 }

  }
  CODE
  {
    VAR
      TempSuggestedField@1001 : TEMPORARY Record Field;
      TempXMLBuffer@1004 : TEMPORARY Record "XML Buffer";
      IsRecordOfTypeField@1003 : Boolean;
      DataExchDefCode@1000 : Code[20];
      StyleTxt@1005 : Text;
      SourceMandatory@1002 : Boolean;

    [External]
    PROCEDURE UpdateData@11();
    VAR
      DataExchDef@1003 : Record "Data Exch. Def";
    BEGIN
      DELETEALL;
      CLEAR(Rec);

      if DataExchDef.GET(DataExchDefCode) then begin
        InsertFromDataExchDefinition(Rec,DataExchDef,TempSuggestedField);
        SETRANGE("Data Exchange Def Code",DataExchDefCode);
        SETRANGE("Data Exchange Line Def Code","Data Exchange Line Def Code");
        SETRANGE("Table ID","Table ID");
        if FINDFIRST then;
      end;
    END;

    [External]
    PROCEDURE SetDataExchDefCode@1(NewDataExchDefCode@1000 : Code[20]);
    BEGIN
      DataExchDefCode := NewDataExchDefCode;
    END;

    [Internal]
    PROCEDURE SetSuggestedField@6(VAR TempNewSuggestedField@1000 : TEMPORARY Record Field);
    BEGIN
      if TempNewSuggestedField.FINDSET then begin
        TempSuggestedField.DELETEALL;

        repeat
          TempSuggestedField.COPY(TempNewSuggestedField);
          TempSuggestedField.INSERT;
        until TempNewSuggestedField.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetXMLDefinition@3(VAR XMLBuffer@1000 : Record "XML Buffer");
    BEGIN
      TempXMLBuffer.RESET;
      TempXMLBuffer.DELETEALL;

      if XMLBuffer.FINDSET then
        repeat
          TempXMLBuffer.COPY(XMLBuffer);
          TempXMLBuffer.INSERT;
        until XMLBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE SetStyle@2();
    BEGIN
      case Type of
        Type::Table:
          StyleTxt := 'Strong'
        else
          StyleTxt := '';
      end;
    END;

    [External]
    PROCEDURE SetSourceToBeMandatory@4(NewSourceMandatory@1000 : Boolean);
    BEGIN
      SourceMandatory := NewSourceMandatory;
    END;

    BEGIN
    END.
  }
}

