OBJECT Table 753 Standard Item Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Standard Item Journal Line;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Item Journal Template";
                                                   CaptionML=ENU=Journal Template Name;
                                                   NotBlank=true }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   NotBlank=true;
                                                   Editable=false }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                if "Item No." <> xRec."Item No." then begin
                                                                  "Variant Code" := '';
                                                                  "Bin Code" := '';
                                                                  if ("Location Code" <> '') and ("Item No." <> '') then begin
                                                                    GetLocation("Location Code");
                                                                    if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  end;
                                                                end;

                                                                if "Item No." = '' then begin
                                                                  CreateDim(
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  exit;
                                                                end;

                                                                GetItem;
                                                                Item.TESTFIELD(Blocked,false);
                                                                Description := Item.Description;
                                                                "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                if ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") or
                                                                   ("Item Charge No." <> '')
                                                                then begin
                                                                  if "Item No." <> xRec."Item No." then begin
                                                                    RetrieveCosts;
                                                                    "Indirect Cost %" := 0;
                                                                    "Overhead Rate" := 0;
                                                                  end;
                                                                end else begin
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  if not "Phys. Inventory" then begin
                                                                    RetrieveCosts;
                                                                    "Unit Cost" := UnitCost;
                                                                  end else
                                                                    UnitCost := "Unit Cost";
                                                                end;

                                                                if "Entry Type" <> "Entry Type"::Output then
                                                                  "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";

                                                                case "Entry Type" of
                                                                  "Entry Type"::Purchase,
                                                                  "Entry Type"::Output:
                                                                    PurchPriceCalcMgt.FindStdItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::"Positive Adjmt.",
                                                                  "Entry Type"::"Negative Adjmt.",
                                                                  "Entry Type"::Consumption:
                                                                    "Unit Amount" := UnitCost;
                                                                  "Entry Type"::Sale:
                                                                    SalesPriceCalcMgt.FindStdItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::Transfer:
                                                                    begin
                                                                      "Unit Amount" := 0;
                                                                      "Unit Cost" := 0;
                                                                      Amount := 0;
                                                                    end;
                                                                end;

                                                                case "Entry Type" of
                                                                  "Entry Type"::Purchase:
                                                                    "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                  "Entry Type"::Sale:
                                                                    "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                  else
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                end;

                                                                VALIDATE("Unit of Measure Code");
                                                                if "Variant Code" <> '' then
                                                                  VALIDATE("Variant Code");
                                                                if "Bin Code" <> '' then
                                                                  VALIDATE("Bin Code");

                                                                CreateDim(
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              if "Entry Type" <> "Entry Type"::Output then
                                                                if Item.GET("Item No.") or Item.GET(xRec."Item No.") then;
                                                              if PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK then
                                                                VALIDATE("Item No.",Item."No.");
                                                            END;

                                                   CaptionML=ENU=Item No. }
    { 5   ;   ;Entry Type          ;Option        ;OnValidate=BEGIN
                                                                if not ("Entry Type" in ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."]) then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                case "Entry Type" of
                                                                  "Entry Type"::Purchase:
                                                                    "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter);
                                                                  "Entry Type"::Sale:
                                                                    "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
                                                                end;

                                                                if "Item No." <> '' then
                                                                  VALIDATE("Location Code");

                                                                VALIDATE("Item No.");
                                                              END;

                                                   CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                   OptionString=Purchase,Sale,"Positive Adjmt.","Negative Adjmt.",Transfer,Consumption,Output," ","Assembly Consumption","Assembly Output" }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 9   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  "Bin Code" := '';
                                                                  if ("Location Code" <> '') and ("Item No." <> '') then begin
                                                                    GetLocation("Location Code");
                                                                    if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                  end;
                                                                end;

                                                                VALIDATE("Unit of Measure Code");
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 10  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group;
                                                   Editable=false }
    { 13  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                GetUnitAmount(FIELDNO(Quantity));
                                                                UpdateAmount;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Unit Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount;
                                                                if "Item No." <> '' then
                                                                  if "Value Entry Type" = "Value Entry Type"::Revaluation then
                                                                    "Unit Cost" := "Unit Amount"
                                                                  else
                                                                    case "Entry Type" of
                                                                      "Entry Type"::Purchase,
                                                                      "Entry Type"::"Positive Adjmt.":
                                                                        begin
                                                                          if "Entry Type" = "Entry Type"::"Positive Adjmt." then begin
                                                                            GetItem;
                                                                            if (CurrFieldNo = FIELDNO("Unit Amount")) and
                                                                               (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                            then
                                                                              ERROR(
                                                                                Text002,
                                                                                FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          end;

                                                                          ReadGLSetup;
                                                                          if "Entry Type" = "Entry Type"::Purchase then
                                                                            "Unit Cost" := "Unit Amount";
                                                                          if "Entry Type" = "Entry Type"::"Positive Adjmt." then
                                                                            "Unit Cost" :=
                                                                              ROUND("Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
                                                                              "Overhead Rate" * "Qty. per Unit of Measure";
                                                                          if ("Value Entry Type" = "Value Entry Type"::"Direct Cost") and
                                                                             ("Item Charge No." = '')
                                                                          then
                                                                            VALIDATE("Unit Cost");
                                                                        end;
                                                                      "Entry Type"::"Negative Adjmt.",
                                                                      "Entry Type"::Consumption:
                                                                        begin
                                                                          GetItem;
                                                                          if (CurrFieldNo = FIELDNO("Unit Amount")) and
                                                                             (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                          then
                                                                            ERROR(
                                                                              Text002,
                                                                              FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          "Unit Cost" := "Unit Amount";
                                                                          if ("Value Entry Type" = "Value Entry Type"::"Direct Cost") and
                                                                             ("Item Charge No." = '')
                                                                          then
                                                                            VALIDATE("Unit Cost");
                                                                        end;
                                                                    end;
                                                              END;

                                                   CaptionML=ENU=Unit Amount;
                                                   AutoFormatType=2 }
    { 17  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                RetrieveCosts;
                                                                if "Entry Type" in ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::Consumption] then
                                                                  if Item."Costing Method" = Item."Costing Method"::Standard then begin
                                                                    if CurrFieldNo = FIELDNO("Unit Cost") then
                                                                      ERROR(
                                                                        Text002,
                                                                        FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                    "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  end;

                                                                if ("Item Charge No." = '') and
                                                                   ("Value Entry Type" = "Value Entry Type"::"Direct Cost") and
                                                                   (CurrFieldNo = FIELDNO("Unit Cost"))
                                                                then begin
                                                                  case "Entry Type" of
                                                                    "Entry Type"::Purchase:
                                                                      "Unit Amount" := "Unit Cost";
                                                                    "Entry Type"::"Positive Adjmt.":
                                                                      begin
                                                                        ReadGLSetup;
                                                                        "Unit Amount" :=
                                                                          ROUND(
                                                                            ("Unit Cost" - "Overhead Rate" * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision")
                                                                      end;
                                                                    "Entry Type"::"Negative Adjmt.",
                                                                    "Entry Type"::Consumption:
                                                                      begin
                                                                        if Item."Costing Method" = Item."Costing Method"::Standard then
                                                                          ERROR(
                                                                            Text002,
                                                                            FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                        "Unit Amount" := "Unit Cost";
                                                                      end;
                                                                  end;
                                                                  UpdateAmount;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 18  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                "Unit Amount" := Amount / Quantity;
                                                                VALIDATE("Unit Amount");
                                                                ReadGLSetup;
                                                                "Unit Amount" := ROUND("Unit Amount",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 23  ;   ;Salespers./Purch. Code;Code20      ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=false }
    { 34  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 35  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 37  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::"Direct Cost");
                                                                TESTFIELD("Item Charge No.",'');
                                                                if "Entry Type" in ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."] then
                                                                  ERROR(
                                                                    Text003,
                                                                    "Entry Type",FIELDCAPTION("Entry Type"),FIELDCAPTION("Indirect Cost %"));

                                                                GetItem;
                                                                if Item."Costing Method" = Item."Costing Method"::Standard then
                                                                  ERROR(
                                                                    Text002,
                                                                    FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Unit Amount" * (1 + "Indirect Cost %" / 100) +
                                                                    "Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Standard Journal Code;Code10       ;TableRelation="Standard Item Journal".Code;
                                                   CaptionML=ENU=Standard Journal Code }
    { 42  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 47  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 48  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 49  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Calculated);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",true);

                                                                PhysInvtEntered := true;
                                                                Quantity := 0;
                                                                if "Qty. (Phys. Inventory)" >= "Qty. (Calculated)" then begin
                                                                  VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                end else begin
                                                                  VALIDATE("Entry Type","Entry Type"::"Negative Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Calculated)" - "Qty. (Phys. Inventory)");
                                                                end;
                                                                PhysInvtEntered := false;
                                                              END;

                                                   CaptionML=ENU=Qty. (Phys. Inventory);
                                                   DecimalPlaces=0:5 }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=ENU=Phys. Inventory;
                                                   Editable=false }
    { 57  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 58  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 63  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 64  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 65  ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Posting No. Series }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if "Variant Code" <> xRec."Variant Code" then begin
                                                                  "Bin Code" := '';
                                                                  if ("Location Code" <> '') and ("Item No." <> '') then begin
                                                                    GetLocation("Location Code");
                                                                    if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  end;
                                                                end;

                                                                if ("Value Entry Type" = "Value Entry Type"::"Direct Cost") and
                                                                   ("Item Charge No." = '')
                                                                then begin
                                                                  GetUnitAmount(FIELDNO("Variant Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  VALIDATE("Unit of Measure Code");
                                                                end;

                                                                if "Variant Code" = '' then
                                                                  exit;

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF ("Entry Type"=FILTER(Purchase|"Positive Adjmt."|Output),
                                                                     Quantity=FILTER(>=0)) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                           "Item Filter"=FIELD("Item No."),
                                                                                                           "Variant Filter"=FIELD("Variant Code"))
                                                                                                           ELSE IF ("Entry Type"=FILTER(Purchase|"Positive Adjmt."|Output),
                                                                                                                    Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                         "Item No."=FIELD("Item No."),
                                                                                                                                                                         "Variant Code"=FIELD("Variant Code"))
                                                                                                                                                                         ELSE IF ("Entry Type"=FILTER(Sale|"Negative Adjmt."|Transfer|Consumption),
                                                                                                                                                                                  Quantity=FILTER(>0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                                                       "Item No."=FIELD("Item No."),
                                                                                                                                                                                                                                       "Variant Code"=FIELD("Variant Code"))
                                                                                                                                                                                                                                       ELSE IF ("Entry Type"=FILTER(Sale|"Negative Adjmt."|Transfer|Consumption),
                                                                                                                                                                                                                                                Quantity=FILTER(<=0)) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                                                                                                      "Item Filter"=FIELD("Item No."),
                                                                                                                                                                                                                                                                                      "Variant Filter"=FIELD("Variant Code"));
                                                   OnValidate=BEGIN
                                                                if "Bin Code" <> xRec."Bin Code" then begin
                                                                  TESTFIELD("Location Code");
                                                                  if "Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",false);
                                                                    GetBin("Location Code","Bin Code");
                                                                    TESTFIELD("Location Code",Bin."Location Code");
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                GetUnitAmount(FIELDNO("Unit of Measure Code"));
                                                                ReadGLSetup;
                                                                "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE("Unit Amount");
                                                                if "Entry Type" <> "Entry Type"::Output then
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5413;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5701;   ;Originally Ordered No.;Code20      ;TableRelation=Item;
                                                   CaptionML=ENU=Originally Ordered No. }
    { 5702;   ;Originally Ordered Var. Code;Code10;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Originally Ordered No."));
                                                   CaptionML=ENU=Originally Ordered Var. Code }
    { 5704;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5705;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5706;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE ("Item Category Code"=FIELD("Item Category Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Product Group Code }
    { 5800;   ;Value Entry Type    ;Option        ;CaptionML=ENU=Value Entry Type;
                                                   OptionCaptionML=ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                   OptionString="Direct Cost",Revaluation,Rounding,"Indirect Cost",Variance }
    { 5801;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=ENU=Item Charge No. }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 5839;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=false }
    { 6600;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                if ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") or
                                                                   ("Item Charge No." <> '')
                                                                then begin
                                                                  "Overhead Rate" := 0;
                                                                  VALIDATE("Indirect Cost %",0);
                                                                end else
                                                                  VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"Journal Template Name","Standard Journal Code","Line No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1002 : TextConst 'ENU=You cannot rename a %1.';
      Item@1000 : Record Item;
      ItemVariant@1015 : Record "Item Variant";
      Location@1004 : Record Location;
      Bin@1003 : Record Bin;
      GLSetup@1011 : Record "General Ledger Setup";
      SKU@1013 : Record "Stockkeeping Unit";
      DimMgt@1001 : Codeunit DimensionManagement;
      WMSManagement@1005 : Codeunit "WMS Management";
      PurchPriceCalcMgt@1007 : Codeunit "Purch. Price Calc. Mgt.";
      SalesPriceCalcMgt@1006 : Codeunit "Sales Price Calc. Mgt.";
      UserMgt@1009 : Codeunit "User Setup Management";
      UOMMgt@1016 : Codeunit "Unit of Measure Management";
      UnitCost@1008 : Decimal;
      GLSetupRead@1010 : Boolean;
      Text002@1012 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text003@1014 : TextConst 'ENU=You cannot change %3 when %2 is %1.';
      PhysInvtEntered@1018 : Boolean;

    [External]
    PROCEDURE ValidateShortcutDimCode@3(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowDimensions@1();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Standard Journal Code","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      if BinCode = '' then
        CLEAR(Bin)
      else
        if Bin.Code <> BinCode then
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1007 : Integer;No3@1006 : Code[20]);
    VAR
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE UpdateAmount@23();
    BEGIN
      Amount := ROUND(Quantity * "Unit Amount");
    END;

    LOCAL PROCEDURE ReadGLSetup@5801();
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
    END;

    LOCAL PROCEDURE RetrieveCosts@5803();
    BEGIN
      ReadGLSetup;
      GetItem;
      if GetSKU then
        UnitCost := SKU."Unit Cost"
      else
        UnitCost := Item."Unit Cost";

      if "Entry Type" = "Entry Type"::Transfer then
        UnitCost := 0
      else
        if Item."Costing Method" <> Item."Costing Method"::Standard then
          UnitCost := ROUND(UnitCost,GLSetup."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      if (SKU."Location Code" = "Location Code") and
         (SKU."Item No." = "Item No.") and
         (SKU."Variant Code" = "Variant Code")
      then
        exit(true);
      if SKU.GET("Location Code","Item No.","Variant Code") then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE GetUnitAmount@6(CalledByFieldNo@1000 : Integer);
    VAR
      UnitCostValue@1001 : Decimal;
    BEGIN
      RetrieveCosts;
      if ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") or
         ("Item Charge No." <> '')
      then
        exit;

      UnitCostValue := UnitCost;
      if (CalledByFieldNo = FIELDNO(Quantity)) and
         (Item."No." <> '') and (Item."Costing Method" <> Item."Costing Method"::Standard)
      then
        UnitCostValue := "Unit Cost" / UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

      case "Entry Type" of
        "Entry Type"::Purchase:
          PurchPriceCalcMgt.FindStdItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::Sale:
          SalesPriceCalcMgt.FindStdItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::"Positive Adjmt.":
          "Unit Amount" := ROUND(
              ((UnitCostValue - "Overhead Rate") * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
              GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Negative Adjmt.":
          if not "Phys. Inventory" then
            "Unit Amount" := UnitCostValue * "Qty. per Unit of Measure"
          else
            UnitCost := "Unit Cost";
        "Entry Type"::Transfer:
          "Unit Amount" := 0;
      end;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR StandardItemJournalLine@1000 : Record "Standard Item Journal Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

