OBJECT Codeunit 1390 Document Notifications
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CopySellToCustomerAddressFieldsFromSalesDocument@2(VAR ModifyCustomerAddressNotification@1001 : Notification);
    VAR
      Customer@1000 : Record Customer;
      SalesHeader@1002 : Record "Sales Header";
      UpdateAddress@1003 : Page "Update Address";
    BEGIN
      if not ModifyCustomerAddressNotification.HASDATA(SalesHeader.FIELDNAME("Sell-to Customer No.")) then
        exit;

      // Document Type
      EVALUATE(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Document Type")));
      SalesHeader.GET(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("No.")));
      if Customer.GET(ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Sell-to Customer No."))) then begin
        UpdateAddress.SetName(Customer.Name);
        UpdateAddress.SetExistingAddress(GetCustomerFullAddress(Customer));
        UpdateAddress.SetUpdatedAddress(GetSalesHeaderFullSellToAddress(SalesHeader));

        if UpdateAddress.RUNMODAL in [ACTION::OK,ACTION::LookupOK] then begin
          Customer.SetAddress(SalesHeader."Sell-to Address",SalesHeader."Sell-to Address 2",
            SalesHeader."Sell-to Post Code",SalesHeader."Sell-to City",SalesHeader."Sell-to County",
            SalesHeader."Sell-to Country/Region Code",SalesHeader."Sell-to Contact");
          Customer.MODIFY(true);
        end;
      end;
    END;

    PROCEDURE CopyBillToCustomerAddressFieldsFromSalesDocument@4(ModifyCustomerAddressNotification@1001 : Notification);
    VAR
      Customer@1000 : Record Customer;
      SalesHeader@1002 : Record "Sales Header";
      UpdateAddress@1003 : Page "Update Address";
    BEGIN
      if not ModifyCustomerAddressNotification.HASDATA(SalesHeader.FIELDNAME("Bill-to Customer No.")) then
        exit;
      // Document Type
      EVALUATE(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Document Type")));
      SalesHeader.GET(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("No.")));
      if Customer.GET(ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Bill-to Customer No."))) then begin
        UpdateAddress.SetExistingAddress(GetCustomerFullAddress(Customer));
        UpdateAddress.SetName(Customer.Name);
        UpdateAddress.SetUpdatedAddress(GetSalesHeaderFullBillToAddress(SalesHeader));

        if UpdateAddress.RUNMODAL in [ACTION::OK,ACTION::LookupOK] then begin
          Customer.SetAddress(SalesHeader."Bill-to Address",SalesHeader."Bill-to Address 2",
            SalesHeader."Bill-to Post Code",SalesHeader."Bill-to City",SalesHeader."Bill-to County",
            SalesHeader."Bill-to Country/Region Code",SalesHeader."Bill-to Contact");
          Customer.MODIFY(true);
        end;
      end;
    END;

    LOCAL PROCEDURE GetCustomerFullAddress@15(Customer@1000 : Record Customer) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := Customer.Address;
      AddressArray[2] := Customer."Address 2";
      AddressArray[3] := Customer."Post Code";
      AddressArray[4] := Customer.City;
      AddressArray[5] := Customer.County;
      AddressArray[6] := Customer."Country/Region Code";
      AddressArray[7] := Customer.Contact;

      exit(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetSalesHeaderFullSellToAddress@34(SalesHeader@1000 : Record "Sales Header") : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := SalesHeader."Sell-to Address";
      AddressArray[2] := SalesHeader."Sell-to Address 2";
      AddressArray[3] := SalesHeader."Sell-to Post Code";
      AddressArray[4] := SalesHeader."Sell-to City";
      AddressArray[5] := SalesHeader."Sell-to County";
      AddressArray[6] := SalesHeader."Sell-to Country/Region Code";
      AddressArray[7] := SalesHeader."Sell-to Contact";

      exit(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetSalesHeaderFullBillToAddress@45(SalesHeader@1000 : Record "Sales Header") : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := SalesHeader."Bill-to Address";
      AddressArray[2] := SalesHeader."Bill-to Address 2";
      AddressArray[3] := SalesHeader."Bill-to Post Code";
      AddressArray[4] := SalesHeader."Bill-to City";
      AddressArray[5] := SalesHeader."Bill-to County";
      AddressArray[6] := SalesHeader."Bill-to Country/Region Code";
      AddressArray[7] := SalesHeader."Bill-to Contact";

      exit(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE FormatAddress@35(AddressArray@1000 : ARRAY [7] OF Text) : Text;
    VAR
      FullAddress@1003 : Text;
      Index@1001 : Integer;
    BEGIN
      for Index := 1 to 7 do
        if AddressArray[Index] <> '' then
          FullAddress := FullAddress + AddressArray[Index] + ', ';

      if STRLEN(FullAddress) > 0 then
        FullAddress := DELSTR(FullAddress,STRLEN(FullAddress) - 1);

      exit(FullAddress);
    END;

    PROCEDURE HideNotificationForCurrentUser@52(Notification@1000 : Notification);
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      SalesHeader.DontNotifyCurrentUserAgain(Notification.ID);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyCustomerAddressNotificationOnInitializingWithDefaultState@5();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.SetModifyCustomerAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyBillToCustomerAddressNotificationOnInitializingWithDefaultState@6();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.SetModifyBillToCustomerAddressNotificationDefaultState;
    END;

    PROCEDURE CopyBuyFromVendorAddressFieldsFromSalesDocument@55(VAR ModifyVendorAddressNotification@1001 : Notification);
    VAR
      Vendor@1000 : Record Vendor;
      PurchaseHeader@1002 : Record "Purchase Header";
      UpdateAddress@1003 : Page "Update Address";
    BEGIN
      if not ModifyVendorAddressNotification.HASDATA(PurchaseHeader.FIELDNAME("Buy-from Vendor No.")) then
        exit;

      // Document Type
      EVALUATE(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Document Type")));
      PurchaseHeader.GET(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("No.")));
      if Vendor.GET(ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Buy-from Vendor No."))) then begin
        UpdateAddress.SetName(Vendor.Name);
        UpdateAddress.SetExistingAddress(GetVendorFullAddress(Vendor));
        UpdateAddress.SetUpdatedAddress(GetPurchaseHeaderFullBuyFromAddress(PurchaseHeader));

        if UpdateAddress.RUNMODAL in [ACTION::OK,ACTION::LookupOK] then begin
          Vendor.SetAddress(PurchaseHeader."Buy-from Address",PurchaseHeader."Buy-from Address 2",
            PurchaseHeader."Buy-from Post Code",PurchaseHeader."Buy-from City",PurchaseHeader."Buy-from County",
            PurchaseHeader."Buy-from Country/Region Code",PurchaseHeader."Buy-from Contact");
          Vendor.MODIFY(true);
        end;
      end;
    END;

    PROCEDURE CopyPayToVendorAddressFieldsFromSalesDocument@56(ModifyVendorAddressNotification@1001 : Notification);
    VAR
      Vendor@1000 : Record Vendor;
      PurchaseHeader@1002 : Record "Purchase Header";
      UpdateAddress@1003 : Page "Update Address";
    BEGIN
      if not ModifyVendorAddressNotification.HASDATA(PurchaseHeader.FIELDNAME("Pay-to Vendor No.")) then
        exit;
      // Document Type
      EVALUATE(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Document Type")));
      PurchaseHeader.GET(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("No.")));
      if Vendor.GET(ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Pay-to Vendor No."))) then begin
        UpdateAddress.SetName(Vendor.Name);
        UpdateAddress.SetUpdatedAddress(GetPurchaseHeaderFullPayToAddress(PurchaseHeader));
        UpdateAddress.SetExistingAddress(GetVendorFullAddress(Vendor));

        if UpdateAddress.RUNMODAL in [ACTION::OK,ACTION::LookupOK] then begin
          Vendor.SetAddress(PurchaseHeader."Pay-to Address",PurchaseHeader."Pay-to Address 2",
            PurchaseHeader."Pay-to Post Code",PurchaseHeader."Pay-to City",PurchaseHeader."Pay-to County",
            PurchaseHeader."Pay-to Country/Region Code",PurchaseHeader."Pay-to Contact");
          Vendor.MODIFY(true);
        end;
      end;
    END;

    PROCEDURE ShowVendorLedgerEntry@1(Notification@1000 : Notification);
    VAR
      VendorLedgerEntry@1001 : Record "Vendor Ledger Entry";
      EntryNo@1003 : Integer;
    BEGIN
      if not Notification.HASDATA(VendorLedgerEntry.FIELDNAME("Entry No.")) then
        exit;

      EVALUATE(EntryNo,Notification.GETDATA(VendorLedgerEntry.FIELDNAME("Entry No.")));
      VendorLedgerEntry.GET(EntryNo);
      VendorLedgerEntry.SETRECFILTER;

      PAGE.RUNMODAL(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    LOCAL PROCEDURE GetVendorFullAddress@57(Vendor@1000 : Record Vendor) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := Vendor.Address;
      AddressArray[2] := Vendor."Address 2";
      AddressArray[3] := Vendor."Post Code";
      AddressArray[4] := Vendor.City;
      AddressArray[5] := Vendor.County;
      AddressArray[6] := Vendor."Country/Region Code";
      AddressArray[7] := Vendor.Contact;

      exit(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetPurchaseHeaderFullBuyFromAddress@58(PurchaseHeader@1000 : Record "Purchase Header") : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := PurchaseHeader."Buy-from Address";
      AddressArray[2] := PurchaseHeader."Buy-from Address 2";
      AddressArray[3] := PurchaseHeader."Buy-from Post Code";
      AddressArray[4] := PurchaseHeader."Buy-from City";
      AddressArray[5] := PurchaseHeader."Buy-from County";
      AddressArray[6] := PurchaseHeader."Buy-from Country/Region Code";
      AddressArray[7] := PurchaseHeader."Buy-from Contact";

      exit(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetPurchaseHeaderFullPayToAddress@59(PurchaseHeader@1000 : Record "Purchase Header") : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := PurchaseHeader."Pay-to Address";
      AddressArray[2] := PurchaseHeader."Pay-to Address 2";
      AddressArray[3] := PurchaseHeader."Pay-to Post Code";
      AddressArray[4] := PurchaseHeader."Pay-to City";
      AddressArray[5] := PurchaseHeader."Pay-to County";
      AddressArray[6] := PurchaseHeader."Pay-to Country/Region Code";
      AddressArray[7] := PurchaseHeader."Pay-to Contact";

      exit(FormatAddress(AddressArray));
    END;

    PROCEDURE HidePurchaseNotificationForCurrentUser@60(Notification@1000 : Notification);
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
    BEGIN
      PurchaseHeader.DontNotifyCurrentUserAgain(Notification.ID);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyVendorAddressNotificationOnInitializingWithDefaultState@61();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      PurchaseHeader.SetModifyVendorAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyPayToVendorAddressNotificationOnInitializingWithDefaultState@62();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      PurchaseHeader.SetModifyPayToVendorAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE DisablePurchExternalDocAlreadyExistNotificationOnInitializingWithDefaultState@3();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      PurchaseHeader.SetShowExternalDocAlreadyExistNotificationDefaultState(false);
    END;

    BEGIN
    END.
  }
}

