OBJECT Page 344 Navigate
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Navigate;
    SaveValues=false;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Document Entry";
    DataCaptionExpr=GetCaptionText;
    PageType=Worksheet;
    SourceTableTemporary=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Find By;
    OnInit=BEGIN
             SourceNameEnable := true;
             SourceNoEnable := true;
             SourceTypeEnable := true;
             DocTypeEnable := true;
             PrintEnable := true;
             ShowEnable := true;
             DocumentVisible := true;
             FindBasedOn := FindBasedOn::Document;
           END;

    OnOpenPage=BEGIN
                 UpdateForm := true;
                 FindRecordsOnOpen;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 20      ;1   ;ActionGroup;
                      Name=Process;
                      CaptionML=ENU=Process }
      { 21      ;2   ;Action    ;
                      Name=Show;
                      CaptionML=ENU=&Show Related Entries;
                      ToolTipML=ENU=Show the related entries of the type that you have chosen.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=ShowEnable;
                      PromotedIsBig=true;
                      Image=ViewDocumentLine;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=Find;
                      CaptionML=ENU=Fi&nd;
                      ToolTipML=ENU=Apply a filter to search on this page.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Find;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FindPush;
                                 FilterSelectionChangedTxtVisible := false;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=Print;
                      Ellipsis=true;
                      CaptionML=ENU=&Print;
                      ToolTipML=ENU=Prepare to print the document. A report request window for the document opens where you can specify what to include on the print-out.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=PrintEnable;
                      PromotedIsBig=true;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ItemTrackingNavigate@1002 : Report "Item Tracking Navigate";
                                 DocumentEntries@1001 : Report "Document Entries";
                               BEGIN
                                 if ItemTrackingSearch then begin
                                   CLEAR(ItemTrackingNavigate);
                                   ItemTrackingNavigate.TransferDocEntries(Rec);
                                   ItemTrackingNavigate.TransferRecordBuffer(TempRecordBuffer);
                                   ItemTrackingNavigate.TransferFilters(SerialNoFilter,LotNoFilter,'','');
                                   ItemTrackingNavigate.RUN;
                                 end else begin
                                   DocumentEntries.TransferDocEntries(Rec);
                                   DocumentEntries.TransferFilters(DocNoFilter,PostingDateFilter);
                                   DocumentEntries.RUN;
                                 end;
                               END;
                                }
      { 4       ;1   ;ActionGroup;
                      Name=FindGroup;
                      CaptionML=ENU=Find by }
      { 2       ;2   ;Action    ;
                      Name=FindByDocument;
                      CaptionML=ENU=Find by Document;
                      ToolTipML=ENU=View entries based on the specified document number.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Documents;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::Document;
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
      { 27      ;2   ;Action    ;
                      Name=FindByBusinessContact;
                      CaptionML=ENU=Find by Business Contact;
                      ToolTipML=ENU=Filter entries based on the specified contact or contact type.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ContactPerson;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::"Business Contact";
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
      { 28      ;2   ;Action    ;
                      Name=FindByItemReference;
                      CaptionML=ENU=Find by Item Reference;
                      ToolTipML=ENU=Filter entries based on the specified serial number or lot number.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ItemTracking;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 FindBasedOn := FindBasedOn::"Item Reference";
                                 UpdateFindByGroupsVisibility;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 9   ;1   ;Group     ;
                Name=Document;
                CaptionML=ENU=Document;
                Visible=DocumentVisible;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=DocNoFilter;
                CaptionML=ENU=Document No.;
                ToolTipML=ENU=Specifies the document number of an entry that is used to find all documents that have the same document number. You can enter a new document number in this field to search for another set of documents.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocNoFilter;
                OnValidate=BEGIN
                             SetDocNo(DocNoFilter);
                             ContactType := ContactType::" ";
                             ContactNo := '';
                             ExtDocNo := '';
                             ClearTrackingInfo;
                             DocNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                ImplicitType=Text }

    { 1   ;2   ;Field     ;
                Name=PostingDateFilter;
                CaptionML=ENU=Posting Date;
                ToolTipML=ENU=Specifies the posting date for the document that you are searching for. You can insert a filter if you want to search for a certain interval of dates.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PostingDateFilter;
                OnValidate=BEGIN
                             SetPostingDate(PostingDateFilter);
                             ContactType := ContactType::" ";
                             ContactNo := '';
                             ExtDocNo := '';
                             ClearTrackingInfo;
                             PostingDateFilterOnAfterValida;
                             FilterSelectionChanged;
                           END;

                ImplicitType=Text }

    { 15  ;1   ;Group     ;
                Name=Business Contact;
                CaptionML=ENU=Business Contact;
                Visible=BusinessContactVisible;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                Name=ContactType;
                CaptionML=ENU=Business Contact Type;
                ToolTipML=ENU=Specifies if you want to search for customers, vendors, or bank accounts. Your choice determines the list that you can access in the Business Contact No. field.;
                OptionCaptionML=ENU=" ,Vendor,Customer";
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ContactType;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ContactTypeOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                ImplicitType=Option }

    { 11  ;2   ;Field     ;
                Name=ContactNo;
                CaptionML=ENU=Business Contact No.;
                ToolTipML=ENU=Specifies the number of the customer, vendor, or bank account that you want to find entries for.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ContactNo;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ContactNoOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           Vend@1002 : Record Vendor;
                           Cust@1003 : Record Customer;
                         BEGIN
                           case ContactType of
                             ContactType::Vendor:
                               if PAGE.RUNMODAL(0,Vend) = ACTION::LookupOK then begin
                                 Text := Vend."No.";
                                 exit(true);
                               end;
                             ContactType::Customer:
                               if PAGE.RUNMODAL(0,Cust) = ACTION::LookupOK then begin
                                 Text := Cust."No.";
                                 exit(true);
                               end;
                           end;
                         END;

                ImplicitType=Code250 }

    { 13  ;2   ;Field     ;
                Name=ExtDocNo;
                CaptionML=ENU=External Document No.;
                ToolTipML=ENU=Specifies the document number assigned by the vendor.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ExtDocNo;
                OnValidate=BEGIN
                             SetDocNo('');
                             SetPostingDate('');
                             ClearTrackingInfo;
                             ExtDocNoOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                ImplicitType=Code250 }

    { 26  ;1   ;Group     ;
                Name=Item Reference;
                CaptionML=ENU=Item Reference;
                Visible=ItemReferenceVisible;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=SerialNoFilter;
                CaptionML=ENU=Serial No.;
                ToolTipML=ENU=Specifies the posting date of the document when you have opened the Navigate window from the document. The entry's document number is shown in the Document No. field.;
                ApplicationArea=#ItemTracking;
                SourceExpr=SerialNoFilter;
                OnValidate=BEGIN
                             ClearInfo;
                             SerialNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           SerialNoInformationList@1001 : Page "Serial No. Information List";
                         BEGIN
                           CLEAR(SerialNoInformationList);
                           if SerialNoInformationList.RUNMODAL = ACTION::LookupOK then begin
                             Text := SerialNoInformationList.GetSelectionFilter;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 6   ;2   ;Field     ;
                Name=LotNoFilter;
                CaptionML=ENU=Lot No.;
                ToolTipML=ENU=Specifies the number that you want to find entries for.;
                ApplicationArea=#ItemTracking;
                SourceExpr=LotNoFilter;
                OnValidate=BEGIN
                             ClearInfo;
                             LotNoFilterOnAfterValidate;
                             FilterSelectionChanged;
                           END;

                OnLookup=VAR
                           LotNoInformationList@1002 : Page "Lot No. Information List";
                         BEGIN
                           CLEAR(LotNoInformationList);
                           if LotNoInformationList.RUNMODAL = ACTION::LookupOK then begin
                             Text := LotNoInformationList.GetSelectionFilter;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 25  ;1   ;Group     ;
                Name=Notification;
                CaptionML=ENU=Notification;
                Visible=FilterSelectionChangedTxtVisible;
                GroupType=Group;
                InstructionalTextML=ENU=The filter has been changed. Choose Find to update the list of related entries. }

    { 16  ;1   ;Group     ;
                Name=Group16;
                Editable=FALSE;
                GroupType=Repeater }

    { 24  ;2   ;Field     ;
                Name=Entry No.;
                ToolTipML=ENU=Specifies the entry number that is assigned to the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 22  ;2   ;Field     ;
                Name=Table ID;
                ToolTipML=ENU=Specifies the table that the entry is stored in.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table ID";
                Visible=FALSE;
                ImplicitType=Integer }

    { 17  ;2   ;Field     ;
                Name=Table Name;
                CaptionML=ENU=Related Entries;
                ToolTipML=ENU=Specifies the name of the table where the Navigate facility has found entries with the selected document number and/or posting date.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Name";
                ImplicitType=Text100 }

    { 19  ;2   ;Field     ;
                Name=No. of Records;
                DrillDown=true;
                CaptionML=ENU=No. of Entries;
                ToolTipML=ENU=Specifies the number of documents that the Navigate facility has found in the table with the selected entries.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No. of Records";
                OnDrillDown=BEGIN
                              ShowRecords;
                            END;

                ImplicitType=Integer }

    { 7   ;1   ;Group     ;
                Name=Source;
                CaptionML=ENU=Source }

    { 8   ;2   ;Field     ;
                Name=DocType;
                CaptionML=ENU=Document Type;
                ToolTipML=ENU=Specifies the type of the selected document. Leave the Document Type field blank if you want to search by posting date. The entry's document number is shown in the Document No. field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocType;
                Enabled=DocTypeEnable;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 10  ;2   ;Field     ;
                Name=SourceType;
                CaptionML=ENU=Source Type;
                ToolTipML=ENU=Specifies the source type of the selected document or remains blank if you search by posting date. The entry's document number is shown in the Document No. field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceType;
                Enabled=SourceTypeEnable;
                Editable=FALSE;
                ImplicitType=Text30 }

    { 12  ;2   ;Field     ;
                Name=SourceNo;
                CaptionML=ENU=Source No.;
                ToolTipML=ENU=Specifies the source number of the selected document. The entry's document number is shown in the Document No. field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceNo;
                Enabled=SourceNoEnable;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=SourceName;
                CaptionML=ENU=Source Name;
                ToolTipML=ENU=Specifies the source name on the selected entry. The entry's document number is shown in the Document No. field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceName;
                Enabled=SourceNameEnable;
                Editable=FALSE;
                ImplicitType=Text50 }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The business contact type was not specified.';
      Text001@1001 : TextConst 'ENU=There are no posted records with this external document number.';
      Text002@1002 : TextConst 'ENU=Counting records...';
      Text003@1003 : TextConst 'ENU=Posted Sales Invoice';
      Text004@1004 : TextConst 'ENU=Posted Sales Credit Memo';
      Text005@1005 : TextConst 'ENU=Posted Sales Shipment';
      Text006@1006 : TextConst 'ENU=Issued Reminder';
      Text007@1007 : TextConst 'ENU=Issued Finance Charge Memo';
      Text008@1008 : TextConst 'ENU=Posted Purchase Invoice';
      Text009@1009 : TextConst 'ENU=Posted Purchase Credit Memo';
      Text010@1010 : TextConst 'ENU=Posted Purchase Receipt';
      Text011@1011 : TextConst 'ENU=The document number has been used more than once.';
      Text012@1012 : TextConst 'ENU=This combination of document number and posting date has been used more than once.';
      Text013@1013 : TextConst 'ENU=There are no posted records with this document number.';
      Text014@1014 : TextConst 'ENU=There are no posted records with this combination of document number and posting date.';
      Text015@1015 : TextConst 'ENU=The search results in too many external documents. Specify a business contact no.';
      Text016@1016 : TextConst 'ENU=The search results in too many external documents. Use Navigate from the relevant ledger entries.';
      Text017@1017 : TextConst 'ENU=Posted Return Receipt';
      Text018@1018 : TextConst 'ENU=Posted Return Shipment';
      Text019@1019 : TextConst 'ENU=Posted Transfer Shipment';
      Text020@1020 : TextConst 'ENU=Posted Transfer Receipt';
      Text021@1061 : TextConst 'ENU=Sales Order';
      Text022@1080 : TextConst 'ENU=Sales Invoice';
      Text023@1081 : TextConst 'ENU=Sales Return Order';
      Text024@1082 : TextConst 'ENU=Sales Credit Memo';
      Text025@1097 : TextConst 'ENU=Posted Assembly Order';
      sText003@1096 : TextConst 'ENU=Posted Service Invoice';
      sText004@1095 : TextConst 'ENU=Posted Service Credit Memo';
      sText005@1092 : TextConst 'ENU=Posted Service Shipment';
      sText021@1094 : TextConst 'ENU=Service Order';
      sText022@1093 : TextConst 'ENU=Service Invoice';
      sText024@1036 : TextConst 'ENU=Service Credit Memo';
      Text99000000@1021 : TextConst 'ENU=Production Order';
      Cust@1023 : Record Customer SECURITYFILTERING(Filtered);
      Vend@1024 : Record Vendor SECURITYFILTERING(Filtered);
      SOSalesHeader@1083 : Record "Sales Header";
      SISalesHeader@1084 : Record "Sales Header";
      SROSalesHeader@1086 : Record "Sales Header";
      SCMSalesHeader@1085 : Record "Sales Header";
      SalesShptHeader@1025 : Record "Sales Shipment Header" SECURITYFILTERING(Filtered);
      SalesInvHeader@1026 : Record "Sales Invoice Header" SECURITYFILTERING(Filtered);
      ReturnRcptHeader@1027 : Record "Return Receipt Header" SECURITYFILTERING(Filtered);
      SalesCrMemoHeader@1028 : Record "Sales Cr.Memo Header" SECURITYFILTERING(Filtered);
      SOServHeader@1091 : Record "Service Header";
      SIServHeader@1090 : Record "Service Header";
      SCMServHeader@1059 : Record "Service Header";
      ServShptHeader@1058 : Record "Service Shipment Header" SECURITYFILTERING(Filtered);
      ServInvHeader@1057 : Record "Service Invoice Header" SECURITYFILTERING(Filtered);
      ServCrMemoHeader@1022 : Record "Service Cr.Memo Header" SECURITYFILTERING(Filtered);
      IssuedReminderHeader@1029 : Record "Issued Reminder Header" SECURITYFILTERING(Filtered);
      IssuedFinChrgMemoHeader@1030 : Record "Issued Fin. Charge Memo Header" SECURITYFILTERING(Filtered);
      PurchRcptHeader@1031 : Record "Purch. Rcpt. Header" SECURITYFILTERING(Filtered);
      PurchInvHeader@1032 : Record "Purch. Inv. Header" SECURITYFILTERING(Filtered);
      ReturnShptHeader@1033 : Record "Return Shipment Header" SECURITYFILTERING(Filtered);
      PurchCrMemoHeader@1034 : Record "Purch. Cr. Memo Hdr." SECURITYFILTERING(Filtered);
      ProductionOrderHeader@1035 : Record "Production Order" SECURITYFILTERING(Filtered);
      PostedAssemblyHeader@1065 : Record "Posted Assembly Header" SECURITYFILTERING(Filtered);
      TransShptHeader@1037 : Record "Transfer Shipment Header" SECURITYFILTERING(Filtered);
      TransRcptHeader@1038 : Record "Transfer Receipt Header" SECURITYFILTERING(Filtered);
      PostedWhseRcptLine@1087 : Record "Posted Whse. Receipt Line" SECURITYFILTERING(Filtered);
      PostedWhseShptLine@1088 : Record "Posted Whse. Shipment Line" SECURITYFILTERING(Filtered);
      GLEntry@1039 : Record "G/L Entry" SECURITYFILTERING(Filtered);
      VATEntry@1040 : Record "VAT Entry" SECURITYFILTERING(Filtered);
      CustLedgEntry@1041 : Record "Cust. Ledger Entry" SECURITYFILTERING(Filtered);
      DtldCustLedgEntry@1042 : Record "Detailed Cust. Ledg. Entry" SECURITYFILTERING(Filtered);
      VendLedgEntry@1043 : Record "Vendor Ledger Entry" SECURITYFILTERING(Filtered);
      DtldVendLedgEntry@1044 : Record "Detailed Vendor Ledg. Entry" SECURITYFILTERING(Filtered);
      EmplLedgEntry@1109 : Record "Employee Ledger Entry" SECURITYFILTERING(Filtered);
      DtldEmplLedgEntry@1106 : Record "Detailed Employee Ledger Entry" SECURITYFILTERING(Filtered);
      ItemLedgEntry@1045 : Record "Item Ledger Entry" SECURITYFILTERING(Filtered);
      PhysInvtLedgEntry@1046 : Record "Phys. Inventory Ledger Entry" SECURITYFILTERING(Filtered);
      ResLedgEntry@1047 : Record "Res. Ledger Entry" SECURITYFILTERING(Filtered);
      JobLedgEntry@1048 : Record "Job Ledger Entry" SECURITYFILTERING(Filtered);
      JobWIPEntry@1099 : Record "Job WIP Entry" SECURITYFILTERING(Filtered);
      JobWIPGLEntry@1100 : Record "Job WIP G/L Entry" SECURITYFILTERING(Filtered);
      ValueEntry@1049 : Record "Value Entry" SECURITYFILTERING(Filtered);
      BankAccLedgEntry@1050 : Record "Bank Account Ledger Entry" SECURITYFILTERING(Filtered);
      CheckLedgEntry@1051 : Record "Check Ledger Entry" SECURITYFILTERING(Filtered);
      ReminderEntry@1052 : Record "Reminder/Fin. Charge Entry" SECURITYFILTERING(Filtered);
      FALedgEntry@1053 : Record "FA Ledger Entry" SECURITYFILTERING(Filtered);
      MaintenanceLedgEntry@1054 : Record "Maintenance Ledger Entry" SECURITYFILTERING(Filtered);
      InsuranceCovLedgEntry@1055 : Record "Ins. Coverage Ledger Entry" SECURITYFILTERING(Filtered);
      CapacityLedgEntry@1056 : Record "Capacity Ledger Entry" SECURITYFILTERING(Filtered);
      ServLedgerEntry@1063 : Record "Service Ledger Entry" SECURITYFILTERING(Filtered);
      WarrantyLedgerEntry@1064 : Record "Warranty Ledger Entry" SECURITYFILTERING(Filtered);
      WhseEntry@1089 : Record "Warehouse Entry" SECURITYFILTERING(Filtered);
      TempRecordBuffer@1060 : TEMPORARY Record "Record Buffer";
      CostEntry@1098 : Record "Cost Entry" SECURITYFILTERING(Filtered);
      IncomingDocument@1101 : Record "Incoming Document" SECURITYFILTERING(Filtered);
      ApplicationManagement@1066 : Codeunit ApplicationManagement;
      ItemTrackingNavigateMgt@1159 : Codeunit "Item Tracking Navigate Mgt.";
      Window@1067 : Dialog;
      DocNoFilter@1068 : Text;
      PostingDateFilter@1069 : Text;
      NewDocNo@1070 : Code[20];
      ContactNo@1071 : Code[250];
      ExtDocNo@1072 : Code[250];
      NewPostingDate@1073 : Date;
      DocType@1074 : Text[50];
      SourceType@1075 : Text[30];
      SourceNo@1076 : Code[20];
      SourceName@1077 : Text[50];
      ContactType@1078 : '" ",Vendor,Customer';
      DocExists@1079 : Boolean;
      NewSerialNo@1136 : Code[20];
      NewLotNo@1122 : Code[20];
      SerialNoFilter@1157 : Text;
      LotNoFilter@1158 : Text;
      ShowEnable@19017131 : Boolean INDATASET;
      PrintEnable@19037407 : Boolean INDATASET;
      DocTypeEnable@19044345 : Boolean INDATASET;
      SourceTypeEnable@19078091 : Boolean INDATASET;
      SourceNoEnable@19029280 : Boolean INDATASET;
      SourceNameEnable@19028072 : Boolean INDATASET;
      UpdateForm@1062 : Boolean;
      FindBasedOn@1102 : 'Document,"Business Contact","Item Reference"';
      DocumentVisible@1103 : Boolean INDATASET;
      BusinessContactVisible@1104 : Boolean INDATASET;
      ItemReferenceVisible@1105 : Boolean INDATASET;
      FilterSelectionChangedTxtVisible@1107 : Boolean INDATASET;
      PageCaptionTxt@1108 : TextConst 'ENU=Selected - %1';

    [External]
    PROCEDURE SetDoc@1(PostingDate@1000 : Date;DocNo@1001 : Code[20]);
    BEGIN
      NewDocNo := DocNo;
      NewPostingDate := PostingDate;
    END;

    LOCAL PROCEDURE FindExtRecords@8();
    VAR
      VendLedgEntry2@1000 : Record "Vendor Ledger Entry" SECURITYFILTERING(Filtered);
      FoundRecords@1001 : Boolean;
      DateFilter2@1002 : Text;
      DocNoFilter2@1003 : Text;
    BEGIN
      FoundRecords := false;
      case ContactType of
        ContactType::Vendor:
          begin
            VendLedgEntry2.SETCURRENTKEY("External Document No.");
            VendLedgEntry2.SETFILTER("External Document No.",ExtDocNo);
            VendLedgEntry2.SETFILTER("Vendor No.",ContactNo);
            if VendLedgEntry2.FINDSET then begin
              repeat
                MakeExtFilter(
                  DateFilter2,
                  VendLedgEntry2."Posting Date",
                  DocNoFilter2,
                  VendLedgEntry2."Document No.");
              until VendLedgEntry2.NEXT = 0;
              SetPostingDate(DateFilter2);
              SetDocNo(DocNoFilter2);
              FindRecords;
              FoundRecords := true;
            end;
          end;
        ContactType::Customer:
          begin
            DELETEALL;
            "Entry No." := 0;
            FindUnpostedSalesDocs(SOSalesHeader."Document Type"::Order,Text021,SOSalesHeader);
            FindUnpostedSalesDocs(SISalesHeader."Document Type"::Invoice,Text022,SISalesHeader);
            FindUnpostedSalesDocs(SROSalesHeader."Document Type"::"Return Order",Text023,SROSalesHeader);
            FindUnpostedSalesDocs(SCMSalesHeader."Document Type"::"Credit Memo",Text024,SCMSalesHeader);
            if SalesShptHeader.READPERMISSION then begin
              SalesShptHeader.RESET;
              SalesShptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesShptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesShptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
            end;
            if SalesInvHeader.READPERMISSION then begin
              SalesInvHeader.RESET;
              SalesInvHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesInvHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesInvHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
            end;
            if ReturnRcptHeader.READPERMISSION then begin
              ReturnRcptHeader.RESET;
              ReturnRcptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              ReturnRcptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              ReturnRcptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
            end;
            if SalesCrMemoHeader.READPERMISSION then begin
              SalesCrMemoHeader.RESET;
              SalesCrMemoHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesCrMemoHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesCrMemoHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
            end;
            FindUnpostedServDocs(SOServHeader."Document Type"::Order,sText021,SOServHeader);
            FindUnpostedServDocs(SIServHeader."Document Type"::Invoice,sText022,SIServHeader);
            FindUnpostedServDocs(SCMServHeader."Document Type"::"Credit Memo",sText024,SCMServHeader);
            if ServShptHeader.READPERMISSION then
              if ExtDocNo = '' then begin
                ServShptHeader.RESET;
                ServShptHeader.SETCURRENTKEY("Customer No.");
                ServShptHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
              end;
            if ServInvHeader.READPERMISSION then
              if ExtDocNo = '' then begin
                ServInvHeader.RESET;
                ServInvHeader.SETCURRENTKEY("Customer No.");
                ServInvHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
              end;
            if ServCrMemoHeader.READPERMISSION then
              if ExtDocNo = '' then begin
                ServCrMemoHeader.RESET;
                ServCrMemoHeader.SETCURRENTKEY("Customer No.");
                ServCrMemoHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
              end;

            DocExists := FINDFIRST;

            UpdateFormAfterFindRecords;
            FoundRecords := DocExists;
          end;
        else
          ERROR(Text000);
      end;

      if not FoundRecords then begin
        SetSource(0D,'','',0,'');
        MESSAGE(Text001);
      end;
    END;

    LOCAL PROCEDURE FindRecords@2();
    BEGIN
      Window.OPEN(Text002);
      RESET;
      DELETEALL;
      "Entry No." := 0;
      FindIncomingDocumentRecords;
      FindEmployeeRecords;
      FindSalesShipmentHeader;
      if SalesInvHeader.READPERMISSION then begin
        SalesInvHeader.RESET;
        SalesInvHeader.SETFILTER("No.",DocNoFilter);
        SalesInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
      end;
      if ReturnRcptHeader.READPERMISSION then begin
        ReturnRcptHeader.RESET;
        ReturnRcptHeader.SETFILTER("No.",DocNoFilter);
        ReturnRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
      end;
      if SalesCrMemoHeader.READPERMISSION then begin
        SalesCrMemoHeader.RESET;
        SalesCrMemoHeader.SETFILTER("No.",DocNoFilter);
        SalesCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
      end;
      if ServShptHeader.READPERMISSION then begin
        ServShptHeader.RESET;
        ServShptHeader.SETFILTER("No.",DocNoFilter);
        ServShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
      end;
      if ServInvHeader.READPERMISSION then begin
        ServInvHeader.RESET;
        ServInvHeader.SETFILTER("No.",DocNoFilter);
        ServInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
      end;
      if ServCrMemoHeader.READPERMISSION then begin
        ServCrMemoHeader.RESET;
        ServCrMemoHeader.SETFILTER("No.",DocNoFilter);
        ServCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
      end;
      if IssuedReminderHeader.READPERMISSION then begin
        IssuedReminderHeader.RESET;
        IssuedReminderHeader.SETFILTER("No.",DocNoFilter);
        IssuedReminderHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Issued Reminder Header",0,Text006,IssuedReminderHeader.COUNT);
      end;
      if IssuedFinChrgMemoHeader.READPERMISSION then begin
        IssuedFinChrgMemoHeader.RESET;
        IssuedFinChrgMemoHeader.SETFILTER("No.",DocNoFilter);
        IssuedFinChrgMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Issued Fin. Charge Memo Header",0,Text007,
          IssuedFinChrgMemoHeader.COUNT);
      end;
      if PurchRcptHeader.READPERMISSION then begin
        PurchRcptHeader.RESET;
        PurchRcptHeader.SETFILTER("No.",DocNoFilter);
        PurchRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Rcpt. Header",0,Text010,PurchRcptHeader.COUNT);
      end;
      if PurchInvHeader.READPERMISSION then begin
        PurchInvHeader.RESET;
        PurchInvHeader.SETFILTER("No.",DocNoFilter);
        PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Inv. Header",0,Text008,PurchInvHeader.COUNT);
      end;
      if ReturnShptHeader.READPERMISSION then begin
        ReturnShptHeader.RESET;
        ReturnShptHeader.SETFILTER("No.",DocNoFilter);
        ReturnShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Return Shipment Header",0,Text018,ReturnShptHeader.COUNT);
      end;
      if PurchCrMemoHeader.READPERMISSION then begin
        PurchCrMemoHeader.RESET;
        PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
        PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Cr. Memo Hdr.",0,Text009,PurchCrMemoHeader.COUNT);
      end;
      if ProductionOrderHeader.READPERMISSION then begin
        ProductionOrderHeader.RESET;
        ProductionOrderHeader.SETRANGE(
          Status,
          ProductionOrderHeader.Status::Released,
          ProductionOrderHeader.Status::Finished);
        ProductionOrderHeader.SETFILTER("No.",DocNoFilter);
        InsertIntoDocEntry(
          DATABASE::"Production Order",0,Text99000000,ProductionOrderHeader.COUNT);
      end;
      if PostedAssemblyHeader.READPERMISSION then begin
        PostedAssemblyHeader.RESET;
        PostedAssemblyHeader.SETFILTER("No.",DocNoFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Assembly Header",0,Text025,PostedAssemblyHeader.COUNT);
      end;
      if TransShptHeader.READPERMISSION then begin
        TransShptHeader.RESET;
        TransShptHeader.SETFILTER("No.",DocNoFilter);
        TransShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Transfer Shipment Header",0,Text019,TransShptHeader.COUNT);
      end;
      if TransRcptHeader.READPERMISSION then begin
        TransRcptHeader.RESET;
        TransRcptHeader.SETFILTER("No.",DocNoFilter);
        TransRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Transfer Receipt Header",0,Text020,TransRcptHeader.COUNT);
      end;
      if PostedWhseShptLine.READPERMISSION then begin
        PostedWhseShptLine.RESET;
        PostedWhseShptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseShptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseShptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Whse. Shipment Line",0,
          PostedWhseShptLine.TABLECAPTION,PostedWhseShptLine.COUNT);
      end;
      if PostedWhseRcptLine.READPERMISSION then begin
        PostedWhseRcptLine.RESET;
        PostedWhseRcptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseRcptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseRcptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Whse. Receipt Line",0,
          PostedWhseRcptLine.TABLECAPTION,PostedWhseRcptLine.COUNT);
      end;
      if GLEntry.READPERMISSION then begin
        GLEntry.RESET;
        GLEntry.SETCURRENTKEY("Document No.","Posting Date");
        GLEntry.SETFILTER("Document No.",DocNoFilter);
        GLEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"G/L Entry",0,GLEntry.TABLECAPTION,GLEntry.COUNT);
      end;
      if VATEntry.READPERMISSION then begin
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Document No.","Posting Date");
        VATEntry.SETFILTER("Document No.",DocNoFilter);
        VATEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"VAT Entry",0,VATEntry.TABLECAPTION,VATEntry.COUNT);
      end;
      if CustLedgEntry.READPERMISSION then begin
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Cust. Ledger Entry",0,CustLedgEntry.TABLECAPTION,CustLedgEntry.COUNT);
      end;
      if DtldCustLedgEntry.READPERMISSION then begin
        DtldCustLedgEntry.RESET;
        DtldCustLedgEntry.SETCURRENTKEY("Document No.");
        DtldCustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldCustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Detailed Cust. Ledg. Entry",0,DtldCustLedgEntry.TABLECAPTION,DtldCustLedgEntry.COUNT);
      end;
      if ReminderEntry.READPERMISSION then begin
        ReminderEntry.RESET;
        ReminderEntry.SETCURRENTKEY(Type,"No.");
        ReminderEntry.SETFILTER("No.",DocNoFilter);
        ReminderEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Reminder/Fin. Charge Entry",0,ReminderEntry.TABLECAPTION,ReminderEntry.COUNT);
      end;
      if VendLedgEntry.READPERMISSION then begin
        VendLedgEntry.RESET;
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        VendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Vendor Ledger Entry",0,VendLedgEntry.TABLECAPTION,VendLedgEntry.COUNT);
      end;
      if DtldVendLedgEntry.READPERMISSION then begin
        DtldVendLedgEntry.RESET;
        DtldVendLedgEntry.SETCURRENTKEY("Document No.");
        DtldVendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldVendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Detailed Vendor Ledg. Entry",0,DtldVendLedgEntry.TABLECAPTION,DtldVendLedgEntry.COUNT);
      end;
      if ItemLedgEntry.READPERMISSION then begin
        ItemLedgEntry.RESET;
        ItemLedgEntry.SETCURRENTKEY("Document No.");
        ItemLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ItemLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Item Ledger Entry",0,ItemLedgEntry.TABLECAPTION,ItemLedgEntry.COUNT);
      end;
      if ValueEntry.READPERMISSION then begin
        ValueEntry.RESET;
        ValueEntry.SETCURRENTKEY("Document No.");
        ValueEntry.SETFILTER("Document No.",DocNoFilter);
        ValueEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Value Entry",0,ValueEntry.TABLECAPTION,ValueEntry.COUNT);
      end;
      if PhysInvtLedgEntry.READPERMISSION then begin
        PhysInvtLedgEntry.RESET;
        PhysInvtLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        PhysInvtLedgEntry.SETFILTER("Document No.",DocNoFilter);
        PhysInvtLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Phys. Inventory Ledger Entry",0,PhysInvtLedgEntry.TABLECAPTION,PhysInvtLedgEntry.COUNT);
      end;
      if ResLedgEntry.READPERMISSION then begin
        ResLedgEntry.RESET;
        ResLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        ResLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ResLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Res. Ledger Entry",0,ResLedgEntry.TABLECAPTION,ResLedgEntry.COUNT);
      end;
      FindJobRecords;
      if BankAccLedgEntry.READPERMISSION then begin
        BankAccLedgEntry.RESET;
        BankAccLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        BankAccLedgEntry.SETFILTER("Document No.",DocNoFilter);
        BankAccLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Bank Account Ledger Entry",0,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry.COUNT);
      end;
      if CheckLedgEntry.READPERMISSION then begin
        CheckLedgEntry.RESET;
        CheckLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CheckLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CheckLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Check Ledger Entry",0,CheckLedgEntry.TABLECAPTION,CheckLedgEntry.COUNT);
      end;
      if FALedgEntry.READPERMISSION then begin
        FALedgEntry.RESET;
        FALedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        FALedgEntry.SETFILTER("Document No.",DocNoFilter);
        FALedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"FA Ledger Entry",0,FALedgEntry.TABLECAPTION,FALedgEntry.COUNT);
      end;
      if MaintenanceLedgEntry.READPERMISSION then begin
        MaintenanceLedgEntry.RESET;
        MaintenanceLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        MaintenanceLedgEntry.SETFILTER("Document No.",DocNoFilter);
        MaintenanceLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Maintenance Ledger Entry",0,MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry.COUNT);
      end;
      if InsuranceCovLedgEntry.READPERMISSION then begin
        InsuranceCovLedgEntry.RESET;
        InsuranceCovLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        InsuranceCovLedgEntry.SETFILTER("Document No.",DocNoFilter);
        InsuranceCovLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Ins. Coverage Ledger Entry",0,InsuranceCovLedgEntry.TABLECAPTION,InsuranceCovLedgEntry.COUNT);
      end;
      if CapacityLedgEntry.READPERMISSION then begin
        CapacityLedgEntry.RESET;
        CapacityLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CapacityLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CapacityLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Capacity Ledger Entry",0,CapacityLedgEntry.TABLECAPTION,CapacityLedgEntry.COUNT);
      end;
      if WhseEntry.READPERMISSION then begin
        WhseEntry.RESET;
        WhseEntry.SETCURRENTKEY("Reference No.","Registering Date");
        WhseEntry.SETFILTER("Reference No.",DocNoFilter);
        WhseEntry.SETFILTER("Registering Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Warehouse Entry",0,WhseEntry.TABLECAPTION,WhseEntry.COUNT);
      end;

      if ServLedgerEntry.READPERMISSION then begin
        ServLedgerEntry.RESET;
        ServLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        ServLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        ServLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Ledger Entry",0,ServLedgerEntry.TABLECAPTION,ServLedgerEntry.COUNT);
      end;
      if WarrantyLedgerEntry.READPERMISSION then begin
        WarrantyLedgerEntry.RESET;
        WarrantyLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        WarrantyLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        WarrantyLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Warranty Ledger Entry",0,WarrantyLedgerEntry.TABLECAPTION,WarrantyLedgerEntry.COUNT);
      end;

      if CostEntry.READPERMISSION then begin
        CostEntry.RESET;
        CostEntry.SETCURRENTKEY("Document No.","Posting Date");
        CostEntry.SETFILTER("Document No.",DocNoFilter);
        CostEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Cost Entry",0,CostEntry.TABLECAPTION,CostEntry.COUNT);
      end;
      OnAfterNavigateFindRecords(Rec,DocNoFilter,PostingDateFilter);
      DocExists := FINDFIRST;

      SetSource(0D,'','',0,'');
      if DocExists then begin
        if (NoOfRecords(DATABASE::"Cust. Ledger Entry") + NoOfRecords(DATABASE::"Vendor Ledger Entry") <= 1) and
           (NoOfRecords(DATABASE::"Sales Invoice Header") + NoOfRecords(DATABASE::"Sales Cr.Memo Header") +
            NoOfRecords(DATABASE::"Sales Shipment Header") + NoOfRecords(DATABASE::"Issued Reminder Header") +
            NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") + NoOfRecords(DATABASE::"Purch. Inv. Header") +
            NoOfRecords(DATABASE::"Return Shipment Header") + NoOfRecords(DATABASE::"Return Receipt Header") +
            NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") + NoOfRecords(DATABASE::"Purch. Rcpt. Header") +
            NoOfRecords(DATABASE::"Service Invoice Header") + NoOfRecords(DATABASE::"Service Cr.Memo Header") +
            NoOfRecords(DATABASE::"Service Shipment Header") +
            NoOfRecords(DATABASE::"Transfer Shipment Header") + NoOfRecords(DATABASE::"Transfer Receipt Header") <= 1)
        then begin
          // Service Management
          if NoOfRecords(DATABASE::"Service Ledger Entry") = 1 then begin
            ServLedgerEntry.FINDFIRST;
            if ServLedgerEntry.Type = ServLedgerEntry.Type::"Service Contract" then
              SetSource(
                ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
                2,ServLedgerEntry."Service Contract No.")
            else
              SetSource(
                ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
                2,ServLedgerEntry."Service Order No.")
          end;
          if NoOfRecords(DATABASE::"Warranty Ledger Entry") = 1 then begin
            WarrantyLedgerEntry.FINDFIRST;
            SetSource(
              WarrantyLedgerEntry."Posting Date",'',WarrantyLedgerEntry."Document No.",
              2,WarrantyLedgerEntry."Service Order No.")
          end;

          // Sales
          if NoOfRecords(DATABASE::"Cust. Ledger Entry") = 1 then begin
            CustLedgEntry.FINDFIRST;
            SetSource(
              CustLedgEntry."Posting Date",FORMAT(CustLedgEntry."Document Type"),CustLedgEntry."Document No.",
              1,CustLedgEntry."Customer No.");
          end;
          if NoOfRecords(DATABASE::"Detailed Cust. Ledg. Entry") = 1 then begin
            DtldCustLedgEntry.FINDFIRST;
            SetSource(
              DtldCustLedgEntry."Posting Date",FORMAT(DtldCustLedgEntry."Document Type"),DtldCustLedgEntry."Document No.",
              1,DtldCustLedgEntry."Customer No.");
          end;
          if NoOfRecords(DATABASE::"Sales Invoice Header") = 1 then begin
            SalesInvHeader.FINDFIRST;
            SetSource(
              SalesInvHeader."Posting Date",FORMAT("Table Name"),SalesInvHeader."No.",
              1,SalesInvHeader."Bill-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Sales Cr.Memo Header") = 1 then begin
            SalesCrMemoHeader.FINDFIRST;
            SetSource(
              SalesCrMemoHeader."Posting Date",FORMAT("Table Name"),SalesCrMemoHeader."No.",
              1,SalesCrMemoHeader."Bill-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Return Receipt Header") = 1 then begin
            ReturnRcptHeader.FINDFIRST;
            SetSource(
              ReturnRcptHeader."Posting Date",FORMAT("Table Name"),ReturnRcptHeader."No.",
              1,ReturnRcptHeader."Sell-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Sales Shipment Header") = 1 then begin
            SalesShptHeader.FINDFIRST;
            SetSource(
              SalesShptHeader."Posting Date",FORMAT("Table Name"),SalesShptHeader."No.",
              1,SalesShptHeader."Sell-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Posted Whse. Shipment Line") = 1 then begin
            PostedWhseShptLine.FINDFIRST;
            SetSource(
              PostedWhseShptLine."Posting Date",FORMAT("Table Name"),PostedWhseShptLine."No.",
              1,PostedWhseShptLine."Destination No.");
          end;
          if NoOfRecords(DATABASE::"Issued Reminder Header") = 1 then begin
            IssuedReminderHeader.FINDFIRST;
            SetSource(
              IssuedReminderHeader."Posting Date",FORMAT("Table Name"),IssuedReminderHeader."No.",
              1,IssuedReminderHeader."Customer No.");
          end;
          if NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") = 1 then begin
            IssuedFinChrgMemoHeader.FINDFIRST;
            SetSource(
              IssuedFinChrgMemoHeader."Posting Date",FORMAT("Table Name"),IssuedFinChrgMemoHeader."No.",
              1,IssuedFinChrgMemoHeader."Customer No.");
          end;

          if NoOfRecords(DATABASE::"Service Invoice Header") = 1 then begin
            ServInvHeader.FINDFIRST;
            SetSource(
              ServInvHeader."Posting Date",FORMAT("Table Name"),ServInvHeader."No.",
              1,ServInvHeader."Bill-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Service Cr.Memo Header") = 1 then begin
            ServCrMemoHeader.FINDFIRST;
            SetSource(
              ServCrMemoHeader."Posting Date",FORMAT("Table Name"),ServCrMemoHeader."No.",
              1,ServCrMemoHeader."Bill-to Customer No.");
          end;
          if NoOfRecords(DATABASE::"Service Shipment Header") = 1 then begin
            ServShptHeader.FINDFIRST;
            SetSource(
              ServShptHeader."Posting Date",FORMAT("Table Name"),ServShptHeader."No.",
              1,ServShptHeader."Customer No.");
          end;

          // Purchase
          if NoOfRecords(DATABASE::"Vendor Ledger Entry") = 1 then begin
            VendLedgEntry.FINDFIRST;
            SetSource(
              VendLedgEntry."Posting Date",FORMAT(VendLedgEntry."Document Type"),VendLedgEntry."Document No.",
              2,VendLedgEntry."Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Detailed Vendor Ledg. Entry") = 1 then begin
            DtldVendLedgEntry.FINDFIRST;
            SetSource(
              DtldVendLedgEntry."Posting Date",FORMAT(DtldVendLedgEntry."Document Type"),DtldVendLedgEntry."Document No.",
              2,DtldVendLedgEntry."Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Purch. Inv. Header") = 1 then begin
            PurchInvHeader.FINDFIRST;
            SetSource(
              PurchInvHeader."Posting Date",FORMAT("Table Name"),PurchInvHeader."No.",
              2,PurchInvHeader."Pay-to Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") = 1 then begin
            PurchCrMemoHeader.FINDFIRST;
            SetSource(
              PurchCrMemoHeader."Posting Date",FORMAT("Table Name"),PurchCrMemoHeader."No.",
              2,PurchCrMemoHeader."Pay-to Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Return Shipment Header") = 1 then begin
            ReturnShptHeader.FINDFIRST;
            SetSource(
              ReturnShptHeader."Posting Date",FORMAT("Table Name"),ReturnShptHeader."No.",
              2,ReturnShptHeader."Buy-from Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Purch. Rcpt. Header") = 1 then begin
            PurchRcptHeader.FINDFIRST;
            SetSource(
              PurchRcptHeader."Posting Date",FORMAT("Table Name"),PurchRcptHeader."No.",
              2,PurchRcptHeader."Buy-from Vendor No.");
          end;
          if NoOfRecords(DATABASE::"Posted Whse. Receipt Line") = 1 then begin
            PostedWhseRcptLine.FINDFIRST;
            SetSource(
              PostedWhseRcptLine."Posting Date",FORMAT("Table Name"),PostedWhseRcptLine."No.",
              2,'');
          end;
        end else begin
          if DocNoFilter <> '' then
            if PostingDateFilter = '' then
              MESSAGE(Text011)
            else
              MESSAGE(Text012);
        end;
      end else
        if PostingDateFilter = '' then
          MESSAGE(Text013)
        else
          MESSAGE(Text014);

      if UpdateForm then
        UpdateFormAfterFindRecords;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE FindJobRecords@26();
    BEGIN
      if JobLedgEntry.READPERMISSION then begin
        JobLedgEntry.RESET;
        JobLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        JobLedgEntry.SETFILTER("Document No.",DocNoFilter);
        JobLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Job Ledger Entry",0,JobLedgEntry.TABLECAPTION,JobLedgEntry.COUNT);
      end;
      if JobWIPEntry.READPERMISSION then begin
        JobWIPEntry.RESET;
        JobWIPEntry.SETFILTER("Document No.",DocNoFilter);
        JobWIPEntry.SETFILTER("WIP Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Job WIP Entry",0,JobWIPEntry.TABLECAPTION,JobWIPEntry.COUNT);
      end;
      if JobWIPGLEntry.READPERMISSION then begin
        JobWIPGLEntry.RESET;
        JobWIPGLEntry.SETCURRENTKEY("Document No.","Posting Date");
        JobWIPGLEntry.SETFILTER("Document No.",DocNoFilter);
        JobWIPGLEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Job WIP G/L Entry",0,JobWIPGLEntry.TABLECAPTION,JobWIPGLEntry.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindIncomingDocumentRecords@27();
    BEGIN
      if IncomingDocument.READPERMISSION then begin
        IncomingDocument.RESET;
        IncomingDocument.SETFILTER("Document No.",DocNoFilter);
        IncomingDocument.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Incoming Document",0,IncomingDocument.TABLECAPTION,IncomingDocument.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@36();
    BEGIN
      if SalesShptHeader.READPERMISSION then begin
        SalesShptHeader.RESET;
        SalesShptHeader.SETFILTER("No.",DocNoFilter);
        SalesShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindEmployeeRecords@29();
    BEGIN
      if EmplLedgEntry.READPERMISSION then begin
        EmplLedgEntry.RESET;
        EmplLedgEntry.SETCURRENTKEY("Document No.");
        EmplLedgEntry.SETFILTER("Document No.",DocNoFilter);
        EmplLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Employee Ledger Entry",0,EmplLedgEntry.TABLECAPTION,EmplLedgEntry.COUNT);
      end;
      if DtldEmplLedgEntry.READPERMISSION then begin
        DtldEmplLedgEntry.RESET;
        DtldEmplLedgEntry.SETCURRENTKEY("Document No.");
        DtldEmplLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldEmplLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Detailed Employee Ledger Entry",0,DtldEmplLedgEntry.TABLECAPTION,DtldEmplLedgEntry.COUNT);
      end;
    END;

    LOCAL PROCEDURE UpdateFormAfterFindRecords@15();
    BEGIN
      ShowEnable := DocExists;
      PrintEnable := DocExists;
      CurrPage.UPDATE(false);
      DocExists := FINDFIRST;
      if DocExists then;
    END;

    LOCAL PROCEDURE InsertIntoDocEntry@3(DocTableID@1000 : Integer;DocType@1003 : Option;DocTableName@1001 : Text[1024];DocNoOfRecords@1002 : Integer);
    BEGIN
      if DocNoOfRecords = 0 then
        exit;
      INIT;
      "Entry No." := "Entry No." + 1;
      "Table ID" := DocTableID;
      "Document Type" := DocType;
      "Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN("Table Name"));
      "No. of Records" := DocNoOfRecords;
      INSERT;
    END;

    LOCAL PROCEDURE NoOfRecords@4(TableID@1000 : Integer) : Integer;
    BEGIN
      SETRANGE("Table ID",TableID);
      if not FINDFIRST then
        INIT;
      SETRANGE("Table ID");
      exit("No. of Records");
    END;

    LOCAL PROCEDURE SetSource@5(PostingDate@1000 : Date;DocType2@1001 : Text[50];DocNo@1002 : Text[50];SourceType2@1003 : Integer;SourceNo2@1004 : Code[20]);
    BEGIN
      if SourceType2 = 0 then begin
        DocType := '';
        SourceType := '';
        SourceNo := '';
        SourceName := '';
      end else begin
        DocType := DocType2;
        SourceNo := SourceNo2;
        SETRANGE("Document No.",DocNo);
        SETRANGE("Posting Date",PostingDate);
        DocNoFilter := GETFILTER("Document No.");
        PostingDateFilter := GETFILTER("Posting Date");
        case SourceType2 of
          1:
            begin
              SourceType := Cust.TABLECAPTION;
              if not Cust.GET(SourceNo) then
                Cust.INIT;
              SourceName := Cust.Name;
            end;
          2:
            begin
              SourceType := Vend.TABLECAPTION;
              if not Vend.GET(SourceNo) then
                Vend.INIT;
              SourceName := Vend.Name;
            end;
        end;
      end;
      DocTypeEnable := SourceType2 <> 0;
      SourceTypeEnable := SourceType2 <> 0;
      SourceNoEnable := SourceType2 <> 0;
      SourceNameEnable := SourceType2 <> 0;
    END;

    LOCAL PROCEDURE ShowRecords@6();
    BEGIN
      if ItemTrackingSearch then
        ItemTrackingNavigateMgt.Show("Table ID")
      else
        case "Table ID" of
          DATABASE::"Incoming Document":
            PAGE.RUN(PAGE::"Incoming Document",IncomingDocument);
          DATABASE::"Sales Header":
            ShowSalesHeaderRecords;
          DATABASE::"Sales Invoice Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvHeader)
            else
              PAGE.RUN(PAGE::"Posted Sales Invoices",SalesInvHeader);
          DATABASE::"Sales Cr.Memo Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader)
            else
              PAGE.RUN(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader);
          DATABASE::"Return Receipt Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Return Receipt",ReturnRcptHeader)
            else
              PAGE.RUN(0,ReturnRcptHeader);
          DATABASE::"Sales Shipment Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Sales Shipment",SalesShptHeader)
            else
              PAGE.RUN(0,SalesShptHeader);
          DATABASE::"Issued Reminder Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Issued Reminder",IssuedReminderHeader)
            else
              PAGE.RUN(0,IssuedReminderHeader);
          DATABASE::"Issued Fin. Charge Memo Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Issued Finance Charge Memo",IssuedFinChrgMemoHeader)
            else
              PAGE.RUN(0,IssuedFinChrgMemoHeader);
          DATABASE::"Purch. Inv. Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader)
            else
              PAGE.RUN(PAGE::"Posted Purchase Invoices",PurchInvHeader);
          DATABASE::"Purch. Cr. Memo Hdr.":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHeader)
            else
              PAGE.RUN(PAGE::"Posted Purchase Credit Memos",PurchCrMemoHeader);
          DATABASE::"Return Shipment Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Return Shipment",ReturnShptHeader)
            else
              PAGE.RUN(0,ReturnShptHeader);
          DATABASE::"Purch. Rcpt. Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Purchase Receipt",PurchRcptHeader)
            else
              PAGE.RUN(0,PurchRcptHeader);
          DATABASE::"Production Order":
            PAGE.RUN(0,ProductionOrderHeader);
          DATABASE::"Posted Assembly Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Assembly Order",PostedAssemblyHeader)
            else
              PAGE.RUN(0,PostedAssemblyHeader);
          DATABASE::"Transfer Shipment Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Transfer Shipment",TransShptHeader)
            else
              PAGE.RUN(0,TransShptHeader);
          DATABASE::"Transfer Receipt Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Transfer Receipt",TransRcptHeader)
            else
              PAGE.RUN(0,TransRcptHeader);
          DATABASE::"Posted Whse. Shipment Line":
            PAGE.RUN(0,PostedWhseShptLine);
          DATABASE::"Posted Whse. Receipt Line":
            PAGE.RUN(0,PostedWhseRcptLine);
          DATABASE::"G/L Entry":
            PAGE.RUN(0,GLEntry);
          DATABASE::"VAT Entry":
            PAGE.RUN(0,VATEntry);
          DATABASE::"Detailed Cust. Ledg. Entry":
            PAGE.RUN(0,DtldCustLedgEntry);
          DATABASE::"Cust. Ledger Entry":
            PAGE.RUN(0,CustLedgEntry);
          DATABASE::"Reminder/Fin. Charge Entry":
            PAGE.RUN(0,ReminderEntry);
          DATABASE::"Vendor Ledger Entry":
            PAGE.RUN(0,VendLedgEntry);
          DATABASE::"Detailed Vendor Ledg. Entry":
            PAGE.RUN(0,DtldVendLedgEntry);
          DATABASE::"Employee Ledger Entry":
            ShowEmployeeLedgerEntries;
          DATABASE::"Detailed Employee Ledger Entry":
            ShowDetailedEmployeeLedgerEntries;
          DATABASE::"Item Ledger Entry":
            PAGE.RUN(0,ItemLedgEntry);
          DATABASE::"Value Entry":
            PAGE.RUN(0,ValueEntry);
          DATABASE::"Phys. Inventory Ledger Entry":
            PAGE.RUN(0,PhysInvtLedgEntry);
          DATABASE::"Res. Ledger Entry":
            PAGE.RUN(0,ResLedgEntry);
          DATABASE::"Job Ledger Entry":
            PAGE.RUN(0,JobLedgEntry);
          DATABASE::"Job WIP Entry":
            PAGE.RUN(0,JobWIPEntry);
          DATABASE::"Job WIP G/L Entry":
            PAGE.RUN(0,JobWIPGLEntry);
          DATABASE::"Bank Account Ledger Entry":
            PAGE.RUN(0,BankAccLedgEntry);
          DATABASE::"Check Ledger Entry":
            PAGE.RUN(0,CheckLedgEntry);
          DATABASE::"FA Ledger Entry":
            PAGE.RUN(0,FALedgEntry);
          DATABASE::"Maintenance Ledger Entry":
            PAGE.RUN(0,MaintenanceLedgEntry);
          DATABASE::"Ins. Coverage Ledger Entry":
            PAGE.RUN(0,InsuranceCovLedgEntry);
          DATABASE::"Capacity Ledger Entry":
            PAGE.RUN(0,CapacityLedgEntry);
          DATABASE::"Warehouse Entry":
            PAGE.RUN(0,WhseEntry);
          DATABASE::"Service Header":
            ShowServiceHeaderRecords;
          DATABASE::"Service Invoice Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Service Invoice",ServInvHeader)
            else
              PAGE.RUN(0,ServInvHeader);
          DATABASE::"Service Cr.Memo Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Service Credit Memo",ServCrMemoHeader)
            else
              PAGE.RUN(0,ServCrMemoHeader);
          DATABASE::"Service Shipment Header":
            if "No. of Records" = 1 then
              PAGE.RUN(PAGE::"Posted Service Shipment",ServShptHeader)
            else
              PAGE.RUN(0,ServShptHeader);
          DATABASE::"Service Ledger Entry":
            PAGE.RUN(0,ServLedgerEntry);
          DATABASE::"Warranty Ledger Entry":
            PAGE.RUN(0,WarrantyLedgerEntry);
          DATABASE::"Cost Entry":
            PAGE.RUN(0,CostEntry);
        end;

      OnAfterNavigateShowRecords("Table ID",DocNoFilter,PostingDateFilter,ItemTrackingSearch);
    END;

    LOCAL PROCEDURE ShowSalesHeaderRecords@28();
    BEGIN
      TESTFIELD("Table ID",DATABASE::"Sales Header");

      case "Document Type" of
        "Document Type"::Order:
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Sales Order",SOSalesHeader)
          else
            PAGE.RUN(0,SOSalesHeader);
        "Document Type"::Invoice:
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Sales Invoice",SISalesHeader)
          else
            PAGE.RUN(0,SISalesHeader);
        "Document Type"::"Return Order":
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Sales Return Order",SROSalesHeader)
          else
            PAGE.RUN(0,SROSalesHeader);
        "Document Type"::"Credit Memo":
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Sales Credit Memo",SCMSalesHeader)
          else
            PAGE.RUN(0,SCMSalesHeader);
      end;
    END;

    LOCAL PROCEDURE ShowServiceHeaderRecords@24();
    BEGIN
      TESTFIELD("Table ID",DATABASE::"Service Header");

      case "Document Type" of
        "Document Type"::Order:
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Service Order",SOServHeader)
          else
            PAGE.RUN(0,SOServHeader);
        "Document Type"::Invoice:
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Service Invoice",SIServHeader)
          else
            PAGE.RUN(0,SIServHeader);
        "Document Type"::"Credit Memo":
          if "No. of Records" = 1 then
            PAGE.RUN(PAGE::"Service Credit Memo",SCMServHeader)
          else
            PAGE.RUN(0,SCMServHeader);
      end;
    END;

    LOCAL PROCEDURE ShowEmployeeLedgerEntries@39();
    BEGIN
      PAGE.RUN(PAGE::"Employee Ledger Entries",EmplLedgEntry);
    END;

    LOCAL PROCEDURE ShowDetailedEmployeeLedgerEntries@40();
    BEGIN
      PAGE.RUN(PAGE::"Detailed Empl. Ledger Entries",DtldEmplLedgEntry);
    END;

    LOCAL PROCEDURE SetPostingDate@9(PostingDate@1000 : Text);
    BEGIN
      if ApplicationManagement.MakeDateFilter(PostingDate) = 0 then;
      SETFILTER("Posting Date",PostingDate);
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE SetDocNo@10(DocNo@1000 : Text);
    BEGIN
      SETFILTER("Document No.",DocNo);
      DocNoFilter := GETFILTER("Document No.");
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE ClearSourceInfo@7();
    BEGIN
      if DocExists then begin
        DocExists := false;
        DELETEALL;
        ShowEnable := false;
        SetSource(0D,'','',0,'');
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE MakeExtFilter@11(VAR DateFilter@1000 : Text;AddDate@1001 : Date;VAR DocNoFilter@1002 : Text;AddDocNo@1003 : Code[20]);
    BEGIN
      if DateFilter = '' then
        DateFilter := FORMAT(AddDate)
      else
        if STRPOS(DateFilter,FORMAT(AddDate)) = 0 then
          if MAXSTRLEN(DateFilter) >= STRLEN(DateFilter + '|' + FORMAT(AddDate)) then
            DateFilter := DateFilter + '|' + FORMAT(AddDate)
          else
            TooLongFilter;

      if DocNoFilter = '' then
        DocNoFilter := AddDocNo
      else
        if STRPOS(DocNoFilter,AddDocNo) = 0 then
          if MAXSTRLEN(DocNoFilter) >= STRLEN(DocNoFilter + '|' + AddDocNo) then
            DocNoFilter := DocNoFilter + '|' + AddDocNo
          else
            TooLongFilter;
    END;

    LOCAL PROCEDURE FindPush@13();
    BEGIN
      if (DocNoFilter = '') and (PostingDateFilter = '') and
         (not ItemTrackingSearch) and
         ((ContactType <> 0) or (ContactNo <> '') or (ExtDocNo <> ''))
      then
        FindExtRecords
      else
        if ItemTrackingSearch and
           (DocNoFilter = '') and (PostingDateFilter = '') and
           (ContactType = 0) and (ContactNo = '') and (ExtDocNo = '')
        then
          FindTrackingRecords
        else
          FindRecords;
    END;

    LOCAL PROCEDURE TooLongFilter@12();
    BEGIN
      if ContactNo = '' then
        ERROR(Text015);

      ERROR(Text016);
    END;

    LOCAL PROCEDURE FindUnpostedSalesDocs@14(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      SalesHeader."SECURITYFILTERING"(SECURITYFILTER::Filtered);
      if SalesHeader.READPERMISSION then begin
        SalesHeader.RESET;
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
        SalesHeader.SETFILTER("Sell-to Customer No.",ContactNo);
        SalesHeader.SETFILTER("External Document No.",ExtDocNo);
        SalesHeader.SETRANGE("Document Type",DocType);
        InsertIntoDocEntry(DATABASE::"Sales Header",DocType,DocTableName,SalesHeader.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindUnpostedServDocs@16(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      ServHeader."SECURITYFILTERING"(SECURITYFILTER::Filtered);
      if ServHeader.READPERMISSION then
        if ExtDocNo = '' then begin
          ServHeader.RESET;
          ServHeader.SETCURRENTKEY("Customer No.");
          ServHeader.SETFILTER("Customer No.",ContactNo);
          ServHeader.SETRANGE("Document Type",DocType);
          InsertIntoDocEntry(DATABASE::"Service Header",DocType,DocTableName,ServHeader.COUNT);
        end;
    END;

    LOCAL PROCEDURE FindTrackingRecords@22();
    VAR
      DocNoOfRecords@1000 : Integer;
    BEGIN
      Window.OPEN(Text002);
      DELETEALL;
      "Entry No." := 0;

      CLEAR(ItemTrackingNavigateMgt);
      ItemTrackingNavigateMgt.FindTrackingRecords(SerialNoFilter,LotNoFilter,'','');

      ItemTrackingNavigateMgt.Collect(TempRecordBuffer);
      TempRecordBuffer.SETCURRENTKEY("Table No.","Record Identifier");
      if TempRecordBuffer.FIND('-') then
        repeat
          TempRecordBuffer.SETRANGE("Table No.",TempRecordBuffer."Table No.");

          DocNoOfRecords := 0;
          if TempRecordBuffer.FIND('-') then
            repeat
              TempRecordBuffer.SETRANGE("Record Identifier",TempRecordBuffer."Record Identifier");
              TempRecordBuffer.FIND('+');
              TempRecordBuffer.SETRANGE("Record Identifier");
              DocNoOfRecords += 1;
            until TempRecordBuffer.NEXT = 0;

          InsertIntoDocEntry(
            TempRecordBuffer."Table No.",0,TempRecordBuffer."Table Name",DocNoOfRecords);

          TempRecordBuffer.SETRANGE("Table No.");
        until TempRecordBuffer.NEXT = 0;

      DocExists := FIND('-');

      UpdateFormAfterFindRecords;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE SetTracking@20(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      NewSerialNo := SerialNo;
      NewLotNo := LotNo;
    END;

    LOCAL PROCEDURE ItemTrackingSearch@19() : Boolean;
    BEGIN
      exit((SerialNoFilter <> '') or (LotNoFilter <> ''));
    END;

    LOCAL PROCEDURE ClearTrackingInfo@17();
    BEGIN
      SerialNoFilter := '';
      LotNoFilter := '';
    END;

    LOCAL PROCEDURE ClearInfo@18();
    BEGIN
      SetDocNo('');
      SetPostingDate('');
      ContactType := ContactType::" ";
      ContactNo := '';
      ExtDocNo := '';
    END;

    LOCAL PROCEDURE DocNoFilterOnAfterValidate@19079756();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE PostingDateFilterOnAfterValida@19064000();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ExtDocNoOnAfterValidate@19035593();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ContactTypeOnAfterValidate@19057702();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE ContactNoOnAfterValidate@19009577();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE SerialNoFilterOnAfterValidate@19049364();
    BEGIN
      ClearSourceInfo;
    END;

    LOCAL PROCEDURE LotNoFilterOnAfterValidate@19054399();
    BEGIN
      ClearSourceInfo;
    END;

    [Internal]
    PROCEDURE FindRecordsOnOpen@21();
    BEGIN
      if (NewDocNo = '') and (NewPostingDate = 0D) and (NewSerialNo = '') and (NewLotNo = '') then begin
        DELETEALL;
        ShowEnable := false;
        PrintEnable := false;
        SetSource(0D,'','',0,'');
      end else
        if (NewSerialNo <> '') or (NewLotNo <> '') then begin
          SetSource(0D,'','',0,'');
          SETRANGE("Serial No. Filter",NewSerialNo);
          SETRANGE("Lot No. Filter",NewLotNo);
          SerialNoFilter := GETFILTER("Serial No. Filter");
          LotNoFilter := GETFILTER("Lot No. Filter");
          ClearInfo;
          FindTrackingRecords;
        end else begin
          SETRANGE("Document No.",NewDocNo);
          SETRANGE("Posting Date",NewPostingDate);
          DocNoFilter := GETFILTER("Document No.");
          PostingDateFilter := GETFILTER("Posting Date");
          ContactType := ContactType::" ";
          ContactNo := '';
          ExtDocNo := '';
          ClearTrackingInfo;
          FindRecords;
        end;
    END;

    [External]
    PROCEDURE UpdateNavigateForm@23(UpdateFormFrom@1000 : Boolean);
    BEGIN
      UpdateForm := UpdateFormFrom;
    END;

    [External]
    PROCEDURE ReturnDocumentEntry@25(VAR TempDocumentEntry@1000 : TEMPORARY Record "Document Entry");
    BEGIN
      SETRANGE("Table ID");  // Clear filter.
      FINDSET;
      repeat
        TempDocumentEntry.INIT;
        TempDocumentEntry := Rec;
        TempDocumentEntry.INSERT;
      until NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFindByGroupsVisibility@34();
    BEGIN
      DocumentVisible := false;
      BusinessContactVisible := false;
      ItemReferenceVisible := false;

      case FindBasedOn of
        FindBasedOn::Document:
          DocumentVisible := true;
        FindBasedOn::"Business Contact":
          BusinessContactVisible := true;
        FindBasedOn::"Item Reference":
          ItemReferenceVisible := true;
      end;

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE FilterSelectionChanged@37();
    BEGIN
      FilterSelectionChangedTxtVisible := true;
    END;

    LOCAL PROCEDURE GetCaptionText@48() : Text;
    BEGIN
      if "Table Name" <> '' then
        exit(STRSUBSTNO(PageCaptionTxt,"Table Name"));

      exit('');
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterNavigateFindRecords@31(VAR DocumentEntry@1000 : Record "Document Entry";DocNoFilter@1001 : Text;PostingDateFilter@1002 : Text);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterNavigateShowRecords@32(TableID@1001 : Integer;DocNoFilter@1002 : Text;PostingDateFilter@1003 : Text;ItemTrackingSearch@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

