OBJECT Codeunit 770 Analysis Report Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DefaultTXT@1000 : TextConst '@@@=The default name of the chart setup.;ENU=DEFAULT';
      DuplicateDescERR@1003 : TextConst 'ENU=Account Schedule %1 has duplicate Description values.';
      DuplicateColHdrERR@1002 : TextConst 'ENU=Column Layout %1 has duplicate Column Header values.';
      Text001@1005 : TextConst '@@@=%1 Account Schedule Chart Setup Name, %2 Period, %3 Current time;ENU=%1 | %2 (Updated %3)';
      Text002@1004 : TextConst '@@@="%1 = Start Date, %2 = End Date";ENU=%1..%2';
      Text003@1001 : TextConst 'ENU=Analysis line or analysis column has been modified since the chart setup was created. Please reset your chart setup.';

    LOCAL PROCEDURE GetSetup@3(VAR AnalysisReportChartSetup@1000 : Record "Analysis Report Chart Setup";AnalysisArea@1003 : Option;ChartName@1001 : Text[30]);
    VAR
      Found@1002 : Boolean;
    BEGIN
      with AnalysisReportChartSetup do begin
        if GET(USERID,AnalysisArea,ChartName) then begin
          SetLastViewed;
          exit;
        end;

        SETRANGE("User ID",USERID);
        SETRANGE("Analysis Area",AnalysisArea);
        SETRANGE("Last Viewed",true);
        Found := FINDFIRST;
        RESET;
        if Found then
          exit;

        ChartName := DefaultTXT;

        if not GET(USERID,AnalysisArea,ChartName) then begin
          INIT;
          "User ID" := USERID;
          "Analysis Area" := AnalysisArea;
          Name := ChartName;
          "Base X-Axis on" := "Base X-Axis on"::Period;
          "Start Date" := WORKDATE;
          "Period Length" := "Period Length"::Day;
          INSERT;
        end;
        SetLastViewed;
      end;
    END;

    [Internal]
    PROCEDURE DrillDown@1(VAR BusChartBuf@1001 : Record "Business Chart Buffer";AnalysisReportChartSetup@1000 : Record "Analysis Report Chart Setup");
    VAR
      AnalysisLine@1002 : Record "Analysis Line";
      AnalysisColumn@1003 : Record "Analysis Column";
      AnalysisReportMgt@1004 : Codeunit "Analysis Report Management";
    BEGIN
      GetAnalysisLineAndColumnForDrillDown(AnalysisLine,AnalysisColumn,BusChartBuf,AnalysisReportChartSetup);
      AnalysisReportMgt.CalcCell(AnalysisLine,AnalysisColumn,true);
    END;

    [Internal]
    PROCEDURE UpdateData@2(VAR BusChartBuf@1002 : Record "Business Chart Buffer";AnalysisReportChartSetup@1000 : Record "Analysis Report Chart Setup";Period@1001 : '" ",Next,Previous');
    VAR
      BusChartMapColumn@1011 : Record "Business Chart Map";
      AnalysisReportChartLine@1010 : Record "Analysis Report Chart Line";
      AnalysisReportChartLine2@1009 : Record "Analysis Report Chart Line";
      AnalysisLine@1008 : Record "Analysis Line";
      AnalysisColumn@1007 : Record "Analysis Column";
      AnalysisReportMgt@1013 : Codeunit "Analysis Report Management";
      FromDate@1006 : Date;
      ToDate@1005 : Date;
      NoOfPeriods@1003 : Integer;
      PeriodCounter@1012 : Integer;
      XCounter@1014 : Integer;
    BEGIN
      COMMIT;
      CheckDuplicateAnalysisLineDescription(
        AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name");
      CheckDuplicateAnalysisColumnHeader(
        AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name");

      with BusChartBuf do begin
        "Period Length" := AnalysisReportChartSetup."Period Length";

        case AnalysisReportChartSetup."Base X-Axis on" of
          AnalysisReportChartSetup."Base X-Axis on"::Period:
            begin
              if Period = Period::" " then begin
                FromDate := 0D;
                ToDate := 0D;
              end else
                if FindMidColumn(BusChartMapColumn) then
                  GetPeriodFromMapColumn(BusChartMapColumn.Index,FromDate,ToDate);
            end;
          AnalysisReportChartSetup."Base X-Axis on"::Line,
          AnalysisReportChartSetup."Base X-Axis on"::Column:
            begin
              if ("Period Filter Start Date" = 0D) and (AnalysisReportChartSetup."Start Date" <> 0D) then
                InitializePeriodFilter(AnalysisReportChartSetup."Start Date",AnalysisReportChartSetup."End Date")
              else
                RecalculatePeriodFilter("Period Filter Start Date","Period Filter End Date",Period);
            end;
        end;

        Initialize;
        case AnalysisReportChartSetup."Base X-Axis on" of
          AnalysisReportChartSetup."Base X-Axis on"::Period:
            begin
              SetPeriodXAxis;
              NoOfPeriods := AnalysisReportChartSetup."No. of Periods";
              CalcAndInsertPeriodAxis(BusChartBuf,AnalysisReportChartSetup,Period,NoOfPeriods,FromDate,ToDate);
            end;
          AnalysisReportChartSetup."Base X-Axis on"::Line:
            SetXAxis(AnalysisLine.FIELDCAPTION(Description),"Data Type"::String);
          AnalysisReportChartSetup."Base X-Axis on"::Column:
            SetXAxis(AnalysisColumn.FIELDCAPTION("Column Header"),"Data Type"::String);
        end;

        AddMeasures(BusChartBuf,AnalysisReportChartSetup);

        case AnalysisReportChartSetup."Base X-Axis on" of
          AnalysisReportChartSetup."Base X-Axis on"::Period:
            begin
              FindFirstColumn(BusChartMapColumn);
              for PeriodCounter := 1 to NoOfPeriods do begin
                AnalysisReportChartSetup.SetLinkToMeasureLines(AnalysisReportChartLine);
                AnalysisReportChartLine.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine."Chart Type"::" ");
                if AnalysisReportChartLine.FINDSET then
                  repeat
                    GetPeriodFromMapColumn(PeriodCounter - 1,FromDate,ToDate);
                    AnalysisLine.SETRANGE("Date Filter",FromDate,ToDate);
                    if (not AnalysisLine.GET(
                          AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name",
                          AnalysisReportChartLine."Analysis Line Line No.")) or
                       (not AnalysisColumn.GET(
                          AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name",
                          AnalysisReportChartLine."Analysis Column Line No."))
                    then
                      ERROR(Text003);
                    SetValue(
                      AnalysisReportChartLine."Measure Name",PeriodCounter - 1,
                      AnalysisReportMgt.CalcCell(AnalysisLine,AnalysisColumn,false));
                  until AnalysisReportChartLine.NEXT = 0;
              end;
            end;
          AnalysisReportChartSetup."Base X-Axis on"::Line:
            begin
              AnalysisReportChartSetup.SetLinkToDimensionLines(AnalysisReportChartLine);
              AnalysisReportChartLine.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine."Chart Type"::" ");
              AnalysisReportChartSetup.SetLinkToMeasureLines(AnalysisReportChartLine2);
              AnalysisReportChartLine2.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine2."Chart Type"::" ");
              XCounter := 0;
              AnalysisLine.SETRANGE("Date Filter","Period Filter Start Date","Period Filter End Date");
              if AnalysisReportChartLine.FINDSET then
                repeat
                  AddColumn(AnalysisReportChartLine."Measure Name");
                  if not AnalysisLine.GET(
                       AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name",
                       AnalysisReportChartLine."Analysis Line Line No.")
                  then
                    ERROR(Text003);
                  if AnalysisReportChartLine2.FINDSET then
                    repeat
                      if not AnalysisColumn.GET(
                           AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name",
                           AnalysisReportChartLine2."Analysis Column Line No.")
                      then
                        ERROR(Text003);
                      SetValue(
                        AnalysisReportChartLine2."Measure Name",XCounter,AnalysisReportMgt.CalcCell(AnalysisLine,AnalysisColumn,false));
                    until AnalysisReportChartLine2.NEXT = 0;
                  XCounter += 1;
                until AnalysisReportChartLine.NEXT = 0;
            end;
          AnalysisReportChartSetup."Base X-Axis on"::Column:
            begin
              AnalysisReportChartSetup.SetLinkToDimensionLines(AnalysisReportChartLine);
              AnalysisReportChartLine.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine."Chart Type"::" ");
              AnalysisReportChartSetup.SetLinkToMeasureLines(AnalysisReportChartLine2);
              AnalysisReportChartLine2.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine2."Chart Type"::" ");
              AnalysisLine.SETRANGE("Date Filter","Period Filter Start Date","Period Filter End Date");
              XCounter := 0;
              if AnalysisReportChartLine.FINDSET then
                repeat
                  AddColumn(AnalysisReportChartLine."Measure Name");
                  if not AnalysisColumn.GET(
                       AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name",
                       AnalysisReportChartLine."Analysis Column Line No.")
                  then
                    ERROR(Text003);
                  if AnalysisReportChartLine2.FINDSET then
                    repeat
                      if not AnalysisLine.GET(
                           AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name",
                           AnalysisReportChartLine2."Analysis Line Line No.")
                      then
                        ERROR(Text003);
                      SetValue(
                        AnalysisReportChartLine2."Measure Name",XCounter,AnalysisReportMgt.CalcCell(AnalysisLine,AnalysisColumn,false));
                    until AnalysisReportChartLine2.NEXT = 0;
                  XCounter += 1;
                until AnalysisReportChartLine.NEXT = 0;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE AddMeasures@13(VAR BusChartBuf@1004 : Record "Business Chart Buffer";AnalysisReportChartSetup@1001 : Record "Analysis Report Chart Setup");
    VAR
      AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line";
      BusChartType@1003 : Option;
    BEGIN
      with AnalysisReportChartLine do begin
        AnalysisReportChartSetup.SetLinkToMeasureLines(AnalysisReportChartLine);
        SETFILTER("Chart Type",'<>%1',"Chart Type"::" ");
        if FINDSET then
          repeat
            case "Chart Type" of
              "Chart Type"::Line:
                BusChartType := BusChartBuf."Chart Type"::Line;
              "Chart Type"::StepLine:
                BusChartType := BusChartBuf."Chart Type"::StepLine;
              "Chart Type"::Column:
                BusChartType := BusChartBuf."Chart Type"::Column;
              "Chart Type"::StackedColumn:
                BusChartType := BusChartBuf."Chart Type"::StackedColumn;
            end;
            BusChartBuf.AddMeasure("Measure Name","Measure Value",BusChartBuf."Data Type"::Decimal,BusChartType);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CalcAndInsertPeriodAxis@8(VAR BusChartBuf@1000 : Record "Business Chart Buffer";AnalysisReportChartSetup@1009 : Record "Analysis Report Chart Setup";Period@1005 : ',Next,Previous';MaxPeriodNo@1008 : Integer;StartDate@1006 : Date;EndDate@1010 : Date);
    VAR
      AccSchedChartManagement@1001 : Codeunit "Acc. Sched. Chart Management";
      PeriodDate@1002 : Date;
    BEGIN
      if (StartDate = 0D) and (AnalysisReportChartSetup."Start Date" <> 0D) then
        PeriodDate := CALCDATE(STRSUBSTNO('<-1%1>',BusChartBuf.GetPeriodLength),AnalysisReportChartSetup."Start Date")
      else begin
        BusChartBuf.RecalculatePeriodFilter(StartDate,EndDate,Period);
        PeriodDate := CALCDATE(STRSUBSTNO('<-%1%2>',MaxPeriodNo - (MaxPeriodNo div 2),BusChartBuf.GetPeriodLength),EndDate);
      end;

      BusChartBuf.AddPeriods(
        AccSchedChartManagement.GetCorrectedDate(BusChartBuf,PeriodDate,1),
        AccSchedChartManagement.GetCorrectedDate(BusChartBuf,PeriodDate,MaxPeriodNo));
    END;

    LOCAL PROCEDURE GetAnalysisLineAndColumnForDrillDown@6(VAR AnalysisLine@1000 : Record "Analysis Line";VAR AnalysisColumn@1001 : Record "Analysis Column";VAR BusChartBuf@1003 : Record "Business Chart Buffer";AnalysisReportChartSetup@1002 : Record "Analysis Report Chart Setup");
    VAR
      XName@1009 : Variant;
      FromDate@1005 : Date;
      ToDate@1004 : Date;
      MeasureValueString@1006 : Text;
      AnalysisLineLineNo@1008 : Integer;
      AnalysisColumnLineNo@1007 : Integer;
    BEGIN
      case AnalysisReportChartSetup."Base X-Axis on" of
        AnalysisReportChartSetup."Base X-Axis on"::Period:
          begin
            BusChartBuf."Period Length" := AnalysisReportChartSetup."Period Length";
            ToDate := BusChartBuf.GetXValueAsDate(BusChartBuf."Drill-Down X Index");
            FromDate := BusChartBuf.CalcFromDate(ToDate);
            MeasureValueString := BusChartBuf.GetMeasureValueString(BusChartBuf."Drill-Down Measure Index");
            EVALUATE(AnalysisLineLineNo,COPYSTR(MeasureValueString,1,STRPOS(MeasureValueString,' ') - 1));
            AnalysisLine.GET(
              AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name",AnalysisLineLineNo);
            EVALUATE(AnalysisColumnLineNo,COPYSTR(MeasureValueString,STRPOS(MeasureValueString,' ') + 1));
            AnalysisColumn.GET(
              AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name",AnalysisColumnLineNo);
          end;
        AnalysisReportChartSetup."Base X-Axis on"::Line:
          begin
            FromDate := BusChartBuf."Period Filter Start Date";
            ToDate := BusChartBuf."Period Filter End Date";
            AnalysisReportChartSetup.FilterAnalysisLine(AnalysisLine);
            BusChartBuf.GetXValue(BusChartBuf."Drill-Down X Index",XName);
            AnalysisLine.SETRANGE(Description,FORMAT(XName));
            AnalysisLine.FINDFIRST;
            MeasureValueString := BusChartBuf.GetMeasureValueString(BusChartBuf."Drill-Down Measure Index");
            EVALUATE(AnalysisColumnLineNo,MeasureValueString);
            AnalysisColumn.GET(
              AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Column Template Name",AnalysisColumnLineNo);
          end;
        AnalysisReportChartSetup."Base X-Axis on"::Column:
          begin
            FromDate := BusChartBuf."Period Filter Start Date";
            ToDate := BusChartBuf."Period Filter End Date";
            AnalysisReportChartSetup.FilterAnalysisColumn(AnalysisColumn);
            BusChartBuf.GetXValue(BusChartBuf."Drill-Down X Index",XName);
            AnalysisColumn.SETRANGE("Column Header",FORMAT(XName));
            AnalysisColumn.FINDFIRST;
            MeasureValueString := BusChartBuf.GetMeasureValueString(BusChartBuf."Drill-Down Measure Index");
            EVALUATE(AnalysisLineLineNo,MeasureValueString);
            AnalysisLine.GET(
              AnalysisReportChartSetup."Analysis Area",AnalysisReportChartSetup."Analysis Line Template Name",AnalysisLineLineNo);
          end;
      end;

      AnalysisLine.SETRANGE("Date Filter",FromDate,ToDate);
    END;

    [External]
    PROCEDURE CheckDuplicateAnalysisLineDescription@10(AnalysisArea@1000 : Option;AnalysisLineTemplate@1001 : Code[10]);
    VAR
      AnalysisLineDescCountQuery@1002 : Query "Analysis Line Desc. Count";
    BEGIN
      AnalysisLineDescCountQuery.SETRANGE(Analysis_Area,AnalysisArea);
      AnalysisLineDescCountQuery.SETRANGE(AnalysisLineDescCountQuery.Analysis_Line_Template_Name,AnalysisLineTemplate);
      AnalysisLineDescCountQuery.OPEN;
      if AnalysisLineDescCountQuery.READ then
        ERROR(DuplicateDescERR,AnalysisLineTemplate);
    END;

    [External]
    PROCEDURE CheckDuplicateAnalysisColumnHeader@11(AnalysisArea@1000 : Option;AnalysisColumnTemplate@1001 : Code[10]);
    VAR
      AnalysisColHeaderCountQuery@1002 : Query "Analysis Column Header Count";
    BEGIN
      AnalysisColHeaderCountQuery.SETRANGE(Analysis_Area,AnalysisArea);
      AnalysisColHeaderCountQuery.SETRANGE(Analysis_Column_Template,AnalysisColumnTemplate);
      AnalysisColHeaderCountQuery.OPEN;
      if AnalysisColHeaderCountQuery.READ then
        ERROR(DuplicateColHdrERR,AnalysisColumnTemplate);
    END;

    [External]
    PROCEDURE SelectAll@5(AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line";IsMeasure@1002 : Boolean);
    VAR
      AnalysisReportChartSetup@1001 : Record "Analysis Report Chart Setup";
    BEGIN
      AnalysisReportChartSetup.GET(
        AnalysisReportChartLine."User ID",AnalysisReportChartLine."Analysis Area",AnalysisReportChartLine.Name);
      if IsMeasure then
        AnalysisReportChartSetup.SetMeasureChartTypesToDefault(AnalysisReportChartLine)
      else
        AnalysisReportChartSetup.SetDimensionChartTypesToDefault(AnalysisReportChartLine);
    END;

    [External]
    PROCEDURE DeselectAll@4(AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line";IsMeasure@1001 : Boolean);
    VAR
      AnalysisReportChartSetup@1002 : Record "Analysis Report Chart Setup";
    BEGIN
      AnalysisReportChartSetup.GET(
        AnalysisReportChartLine."User ID",AnalysisReportChartLine."Analysis Area",AnalysisReportChartLine.Name);
      if IsMeasure then
        AnalysisReportChartSetup.SetLinkToMeasureLines(AnalysisReportChartLine)
      else
        AnalysisReportChartSetup.SetLinkToDimensionLines(AnalysisReportChartLine);
      AnalysisReportChartLine.MODIFYALL("Chart Type",AnalysisReportChartLine."Chart Type"::" ");
    END;

    LOCAL PROCEDURE GetCurrentSelectionText@7(AnalysisReportChartSetup@1000 : Record "Analysis Report Chart Setup";FromDate@1002 : Date;ToDate@1003 : Date) : Text[100];
    BEGIN
      with AnalysisReportChartSetup do
        case "Base X-Axis on" of
          "Base X-Axis on"::Period:
            exit(STRSUBSTNO(Text001,Name,"Period Length",TIME));
          "Base X-Axis on"::Line,
          "Base X-Axis on"::Column:
            exit(STRSUBSTNO(Text001,Name,STRSUBSTNO(Text002,FromDate,ToDate),TIME));
        end;
    END;

    [Internal]
    PROCEDURE UpdateChart@9(Period@1000 : ',Next,Previous';VAR AnalysisReportChartSetup@1001 : Record "Analysis Report Chart Setup";AnalysisArea@1002 : Option;VAR BusChartBuffer@1003 : Record "Business Chart Buffer";VAR StatusText@1004 : Text[250]);
    BEGIN
      GetSetup(AnalysisReportChartSetup,AnalysisArea,AnalysisReportChartSetup.Name);
      UpdateData(BusChartBuffer,AnalysisReportChartSetup,Period);
      StatusText :=
        GetCurrentSelectionText(
          AnalysisReportChartSetup,BusChartBuffer."Period Filter Start Date",BusChartBuffer."Period Filter End Date");
    END;

    [External]
    PROCEDURE SelectChart@12(VAR AnalysisReportChartSetup@1001 : Record "Analysis Report Chart Setup";VAR BusChartBuffer@1002 : Record "Business Chart Buffer") Selected : Boolean;
    VAR
      AnalysisReportChartSetup2@1000 : Record "Analysis Report Chart Setup";
    BEGIN
      AnalysisReportChartSetup2.SETRANGE("User ID",AnalysisReportChartSetup."User ID");
      AnalysisReportChartSetup2.SETRANGE("Analysis Area",AnalysisReportChartSetup."Analysis Area");
      AnalysisReportChartSetup2 := AnalysisReportChartSetup;
      if PAGE.RUNMODAL(0,AnalysisReportChartSetup2) = ACTION::LookupOK then begin
        AnalysisReportChartSetup := AnalysisReportChartSetup2;
        BusChartBuffer.InitializePeriodFilter(0D,0D);
        Selected := true;
      end;
    END;

    BEGIN
    END.
  }
}

