OBJECT Codeunit 5468 Graph Mgt - Complex Types
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CodePropertyTxt@1001 : TextConst '@@@={Locked};ENU=code';
      DescriptionPropertyTxt@1000 : TextConst '@@@={Locked};ENU=description';
      PaymentTermsTxt@1005 : TextConst '@@@={Locked};ENU=PaymentTermsType';
      PaymentTermsDescriptionTxt@1004 : TextConst 'ENU=Graph CDM - Payment Terms complex type.';
      PostalAddressTxt@1008 : TextConst '@@@={Locked};ENU=PostalAddress';
      PostalAddressDescriptionTxt@1010 : TextConst 'ENU=Graph CDM - Postal Address complex type';
      ShipmentMethodTxt@1007 : TextConst '@@@={Locked};ENU=ShipmentMethod';
      ShipmentMethodDescriptionTxt@1003 : TextConst 'ENU=Graph CDM - Shipment Method complex type.';
      PaymentMethodTxt@1006 : TextConst '@@@={Locked};ENU=PaymentMethod';
      PaymentMethodDescriptionTxt@1002 : TextConst 'ENU=Graph CDM - Payment Method complex type.';
      DimensionTxt@1019 : TextConst '@@@={Locked};ENU=Dimension';
      DimensionDescriptionTxt@1018 : TextConst 'ENU=Graph CDM - Dimension complex type.';
      NullJSONTxt@1009 : TextConst '@@@={Locked};ENU=null';
      BookingsDateTxt@1016 : TextConst '@@@={Locked};ENU=BookingsDate';
      BookingsDateDescriptionTxt@1017 : TextConst 'ENU=Graph CDM - Bookings Date complex type';
      DocumentLineObjectDetailsNoTxt@1013 : TextConst '@@@={Locked};ENU=number';
      DocumentLineObjectDetailsNameTxt@1012 : TextConst '@@@={Locked};ENU=displayName';
      DocumentLineObjectDetailsDescriptionTxt@1011 : TextConst '@@@={Locked};ENU=description';
      DocumentLineObjectDetailsTxt@1014 : TextConst '@@@={Locked};ENU=documentLineObjectDetails';
      DocumentLineObjectDetailsEDMDescriptionTxt@1015 : TextConst 'ENU=Graph API - Complex type exposing details of the line object that is being sold.';

    PROCEDURE GetDocumentLineObjectDetailsEDM@9() : Text;
    VAR
      SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";
    BEGIN
      exit(
        STRSUBSTNO('<ComplexType Name="%1">',DocumentLineObjectDetailsTxt) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DocumentLineObjectDetailsNoTxt,MAXSTRLEN(SalesInvoiceLineAggregate."No.")) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DocumentLineObjectDetailsNameTxt,MAXSTRLEN(SalesInvoiceLineAggregate.Description)) +
        '</ComplexType>');
    END;

    PROCEDURE GetDocumentLineObjectDetailsJSON@59(No@1000 : Text;Name@1001 : Text) : Text;
    VAR
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      if No <> '' then
        JSONManagement.AddJPropertyToJObject(JsonObject,DocumentLineObjectDetailsNoTxt,No);

      if Name <> '' then
        JSONManagement.AddJPropertyToJObject(JsonObject,DocumentLineObjectDetailsNameTxt,Name);

      exit(JSONManagement.WriteObjectToString);
    END;

    PROCEDURE ParseDocumentLineObjectDetailsFromJSON@12(JSON@1005 : Text;VAR No@1002 : Code[20];VAR Name@1001 : Text[50];VAR Description@1000 : Text[50]);
    VAR
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      NoTxt@1008 : Text;
      NameTxt@1007 : Text;
      DescriptionTxt@1006 : Text;
    BEGIN
      CLEAR(No);
      CLEAR(Name);
      CLEAR(Description);

      JSONManagement.InitializeObject(JSON);
      JSONManagement.GetJSONObject(JsonObject);
      if JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsNoTxt,NoTxt) then
        No := COPYSTR(NoTxt,1,20);

      if JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsNameTxt,NameTxt) then
        Name := COPYSTR(NameTxt,1,50);

      if JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DocumentLineObjectDetailsDescriptionTxt,DescriptionTxt) then
        Description := COPYSTR(DescriptionTxt,1,50);
    END;

    PROCEDURE GetBookingsDateEDM@21() : Text;
    BEGIN
      exit(
        '<ComplexType Name="dateTimeTimeZone">' +
        '  <Property Name="dateTime" Type="Edm.String" Nullable="false" />' +
        '  <Property Name="timeZone" Type="Edm.String" />' +
        '</ComplexType>');
    END;

    PROCEDURE GetBookingsDateJSON@13(DateTime@1001 : DateTime;VAR JSON@1000 : Text);
    VAR
      JSONManagement@1007 : Codeunit "JSON Management";
      JsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      DateString@1002 : Text;
    BEGIN
      DateString := FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>.0000001Z');

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.AddJPropertyToJObject(JsonObject,'dateTime',DateString);
      JSONManagement.AddJPropertyToJObject(JsonObject,'timeZone','UTC');

      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE GetCodeAndDescriptionEDM@1(TypeName@1000 : Text[32];CodeField@1001 : Code[50];DescriptionField@1002 : Text[250]) : Text;
    BEGIN
      exit(
        STRSUBSTNO('<ComplexType Name="%1">',TypeName) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          CodePropertyTxt,MAXSTRLEN(CodeField)) +
        STRSUBSTNO('<Property Name="%1" Type="Edm.String" Nullable="true" MaxLength="%2"/>',
          DescriptionPropertyTxt,MAXSTRLEN(DescriptionField)) +
        '</ComplexType>');
    END;

    PROCEDURE GetCodeAndDescriptionJSON@16(Code@1000 : Code[50];Description@1001 : Text[250];VAR JSON@1002 : Text);
    VAR
      JSONManagement@1004 : Codeunit "JSON Management";
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      JSONManagement.AddJPropertyToJObject(JsonObject,CodePropertyTxt,Code);
      JSONManagement.AddJPropertyToJObject(JsonObject,DescriptionPropertyTxt,Description);
      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE GetCodeAndDescriptionFromJSON@6(JSON@1000 : Text;VAR Code@1005 : Code[50];VAR Description@1002 : Text[250]);
    VAR
      JSONManagement@1010 : Codeunit "JSON Management";
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      JsonObject@1009 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      CodeText@1003 : Text;
    BEGIN
      if JSON = NullJSONTxt then begin
        CLEAR(Code);
        CLEAR(Description);
        exit;
      end;

      JSONManagement.InitializeObject(JSON);
      JSONManagement.GetJSONObject(JsonObject);

      GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,CodePropertyTxt,CodeText);
      JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,DescriptionPropertyTxt,Description);
      Code := COPYSTR(CodeText,1,MAXSTRLEN(Code));
    END;

    PROCEDURE GetPostalAddressEDM@3() : Text;
    VAR
      DummyCustomer@1000 : Record Customer;
    BEGIN
      // Additional 2 characters representing \r\n are added between address and address 2
      exit(
        '<ComplexType Name="PostalAddress">' +
        STRSUBSTNO('<Property Name="street" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.Address) + MAXSTRLEN(DummyCustomer."Address 2") + 2) +
        STRSUBSTNO('<Property Name="city" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.City)) +
        STRSUBSTNO('<Property Name="state" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer.County)) +
        STRSUBSTNO('<Property Name="countryLetterCode" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer."Country/Region Code")) +
        STRSUBSTNO('<Property Name="postalCode" Type="Edm.String" Nullable="true" MaxLength="%1" />',
          MAXSTRLEN(DummyCustomer."Post Code")) +
        '</ComplexType>');
    END;

    PROCEDURE GetUnitOfMeasureJSON@10(UnitOfMeasureCode@1000 : Code[20]) : Text;
    VAR
      UnitOfMeasure@1001 : Record "Unit of Measure";
      JSONManagement@1002 : Codeunit "JSON Management";
      GraphCollectionMgtItem@1004 : Codeunit "Graph Collection Mgt - Item";
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      if UnitOfMeasureCode = '' then
        exit('');

      if not UnitOfMeasure.GET(UnitOfMeasureCode) then
        exit('');

      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      // TODO: Refactor from item
      JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeUnitCode,UnitOfMeasure.Code);
      if UnitOfMeasure.Description <> '' then
        JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeUnitName,UnitOfMeasure.Description);

      if UnitOfMeasure.Symbol <> '' then
        JSONManagement.AddJPropertyToJObject(JsonObject,GraphCollectionMgtItem.UOMComplexTypeSymbol,UnitOfMeasure.Symbol);

      exit(JSONManagement.WriteObjectToString);
    END;

    PROCEDURE ApplyPostalAddressFromJSON@15(JSON@1000 : Text;VAR EntityRecRef@1012 : RecordRef;Line1FieldNo@1001 : Integer;Line2FieldNo@1002 : Integer;CityFieldNo@1003 : Integer;StateFieldNo@1004 : Integer;CountryCodeFieldNo@1005 : Integer;PostCodeFieldNo@1006 : Integer);
    VAR
      GraphCollectionMgtContact@1010 : Codeunit "Graph Collection Mgt - Contact";
      GraphMgtGeneralTools@1009 : Codeunit "Graph Mgt - General Tools";
      JSONManagement@1008 : Codeunit "JSON Management";
      JsonObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempStreet@1011 : Text;
      Line1@1014 : Text[50];
      Line2@1015 : Text[50];
      City@1016 : Text;
      State@1017 : Text;
      CountryCode@1018 : Text;
      PostCode@1019 : Text;
    BEGIN
      if NullJSONTxt <> JSON then begin
        JSONManagement.InitializeObject(JSON);
        JSONManagement.GetJSONObject(JsonObject);

        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'street',TempStreet);
        GraphCollectionMgtContact.SplitStreet(TempStreet,Line1,Line2);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'city',City);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JsonObject,'state',State);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'countryLetterCode',CountryCode);
        GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'postalCode',PostCode);
      end;

      // Mandatory fields
      Validate(EntityRecRef,Line1FieldNo,Line1);
      Validate(EntityRecRef,Line2FieldNo,Line2);
      Validate(EntityRecRef,CityFieldNo,City);
      Validate(EntityRecRef,CountryCodeFieldNo,CountryCode);
      Validate(EntityRecRef,PostCodeFieldNo,PostCode);

      // Optional fields
      if (NullJSONTxt = JSON) or (State <> '') then
        Validate(EntityRecRef,StateFieldNo,State);
    END;

    PROCEDURE GetPostalAddressJSON@18(Line1@1001 : Text;Line2@1002 : Text;City@1003 : Text;State@1004 : Text;CountryCode@1005 : Code[10];PostCode@1006 : Code[20];VAR JSON@1000 : Text);
    VAR
      GraphCollectionMgtContact@1009 : Codeunit "Graph Collection Mgt - Contact";
      JSONManagement@1007 : Codeunit "JSON Management";
      JsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.AddJPropertyToJObject(JsonObject,'street',GraphCollectionMgtContact.ConcatenateStreet(Line1,Line2));
      JSONManagement.AddJPropertyToJObject(JsonObject,'city',City);
      JSONManagement.AddJPropertyToJObject(JsonObject,'state',State);
      JSONManagement.AddJPropertyToJObject(JsonObject,'countryLetterCode',CountryCode);
      JSONManagement.AddJPropertyToJObject(JsonObject,'postalCode',PostCode);

      JSON := JSONManagement.WriteObjectToString;
    END;

    PROCEDURE GetDimensionEDM@19() : Text;
    BEGIN
      exit(
        '<ComplexType Name="Dimension">' +
        '<Property Name="code" Type="Edm.String" Nullable="false" />' +
        '<Property Name="displayName" Type="Edm.String" Nullable="true" />' +
        '<Property Name="valueCode" Type="Edm.String" Nullable="false" />' +
        '<Property Name="valueDisplayName" Type="Edm.String" Nullable="true" />' +
        '</ComplexType>');
    END;

    PROCEDURE GetDimensionsJSON@24(DimensionSetId@1000 : Integer) : Text;
    VAR
      DimensionSetEntry@1001 : Record "Dimension Set Entry";
      JSONManagement@1002 : Codeunit "JSON Management";
      JsonObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetId);
      if not DimensionSetEntry.FINDSET then
        exit('');

      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(JsonArray);

      repeat
        GetDimensionJObject(DimensionSetEntry,JsonObject);
        JSONManagement.AddJObjectToJArray(JsonArray,JsonObject);
      until DimensionSetEntry.NEXT = 0;

      exit(JSONManagement.WriteCollectionToString);
    END;

    LOCAL PROCEDURE GetDimensionJObject@23(VAR DimensionSetEntry@1000 : Record "Dimension Set Entry";VAR JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1002 : Codeunit "JSON Management";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      DimensionSetEntry.CALCFIELDS("Dimension Name","Dimension Value Name");
      JSONManagement.AddJPropertyToJObject(JsonObject,'code',DimensionSetEntry."Dimension Code");
      JSONManagement.AddJPropertyToJObject(JsonObject,'displayName',DimensionSetEntry."Dimension Name");
      JSONManagement.AddJPropertyToJObject(JsonObject,'valueCode',DimensionSetEntry."Dimension Value Code");
      JSONManagement.AddJPropertyToJObject(JsonObject,'valueDisplayName',DimensionSetEntry."Dimension Value Name");
    END;

    PROCEDURE GetDimensionSetFromJSON@29(DimensionsJSON@1001 : Text;OldDimensionSetId@1009 : Integer;VAR NewDimensionSetId@1011 : Integer);
    VAR
      TempDimensionSetEntry@1000 : TEMPORARY Record "Dimension Set Entry";
      DimensionManagement@1012 : Codeunit DimensionManagement;
      JSONManagement@1002 : Codeunit "JSON Management";
      LineJsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      I@1005 : Integer;
      NumberOfLines@1006 : Integer;
      Code@1010 : Code[20];
      Value@1004 : Code[20];
    BEGIN
      JSONManagement.InitializeCollection(DimensionsJSON);
      NumberOfLines := JSONManagement.GetCollectionCount;
      for I := 1 to NumberOfLines do begin
        JSONManagement.GetJObjectFromCollectionByIndex(LineJsonObject,I - 1);
        GetDimensionFromJObject(LineJsonObject,Code,Value);
        TempDimensionSetEntry.INIT;
        TempDimensionSetEntry."Dimension Set ID" := OldDimensionSetId;
        TempDimensionSetEntry."Dimension Code" := Code;
        TempDimensionSetEntry."Dimension Value Code" := Value;
        TempDimensionSetEntry.INSERT(true);
      end;

      NewDimensionSetId := DimensionManagement.GetDimensionSetID(TempDimensionSetEntry);
    END;

    LOCAL PROCEDURE GetDimensionFromJObject@28(VAR JsonObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR Code@1001 : Code[20];VAR Value@1005 : Code[20]);
    VAR
      GraphMgtGeneralTools@1003 : Codeunit "Graph Mgt - General Tools";
      CodeText@1002 : Text;
      ValueText@1004 : Text;
    BEGIN
      GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'code',CodeText);
      GraphMgtGeneralTools.GetMandatoryStringPropertyFromJObject(JsonObject,'valueCode',ValueText);
      Code := COPYSTR(CodeText,1,MAXSTRLEN(Code));
      Value := COPYSTR(ValueText,1,MAXSTRLEN(Value));
    END;

    PROCEDURE InsertOrUpdateBookingsDate@22();
    VAR
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      EDM@1000 : Text;
    BEGIN
      EDM := GetBookingsDateEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(BookingsDateTxt),BookingsDateDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdateDocumentLineObjectDescription@14();
    VAR
      GraphMgtGeneralTools@1002 : Codeunit "Graph Mgt - General Tools";
      EDM@1001 : Text;
    BEGIN
      EDM := GetDocumentLineObjectDetailsEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        UPPERCASE(DocumentLineObjectDetailsTxt),DocumentLineObjectDetailsEDMDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdatePaymentTerms@4();
    VAR
      PaymentTerms@1000 : Record "Payment Terms";
      GraphMgtGeneralTools@1002 : Codeunit "Graph Mgt - General Tools";
      EDM@1001 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(PaymentTermsTxt,PaymentTerms.Code,PaymentTerms.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PaymentTermsTxt),PaymentTermsDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdatePaymentMethod@7();
    VAR
      PaymentMethod@1000 : Record "Payment Method";
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      EDM@1002 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(PaymentMethodTxt,PaymentMethod.Code,PaymentMethod.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PaymentMethodTxt),PaymentMethodDescriptionTxt,EDM);
    END;

    PROCEDURE InsertOrUpdatePostalAddress@11();
    VAR
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      EDM@1000 : Text;
    BEGIN
      EDM := GetPostalAddressEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(PostalAddressTxt),PostalAddressDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdateShipmentMethod@5();
    VAR
      ShipmentMethod@1002 : Record "Shipment Method";
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      EDM@1000 : Text;
    BEGIN
      EDM := GetCodeAndDescriptionEDM(ShipmentMethodTxt,ShipmentMethod.Code,ShipmentMethod.Description);
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(ShipmentMethodTxt),ShipmentMethodDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE InsertOrUpdateDimension@17();
    VAR
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      EDM@1000 : Text;
    BEGIN
      EDM := GetDimensionEDM;
      GraphMgtGeneralTools.InsertOrUpdateODataType(UPPERCASE(DimensionTxt),DimensionDescriptionTxt,EDM);
    END;

    LOCAL PROCEDURE Validate@8(VAR EntityRecRef@1000 : RecordRef;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      FieldRef := EntityRecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    LOCAL PROCEDURE HandleApiSetup@2();
    BEGIN
      InsertOrUpdatePaymentMethod;
      InsertOrUpdatePaymentTerms;
      InsertOrUpdatePostalAddress;
      InsertOrUpdateShipmentMethod;
      InsertOrUpdateBookingsDate;
      InsertOrUpdateDocumentLineObjectDescription;
      InsertOrUpdateDimension;
    END;

    PROCEDURE GetSalesLineDescriptionComplexType@41(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate") : Text;
    VAR
      FixedAsset@1001 : Record "Fixed Asset";
      Item@1002 : Record Item;
      GLAccount@1003 : Record "G/L Account";
      Resource@1004 : Record Resource;
      ItemCharge@1005 : Record "Item Charge";
      GraphMgtComplexTypes@1009 : Codeunit "Graph Mgt - Complex Types";
      Name@1008 : Text;
    BEGIN
      if SalesInvoiceLineAggregate."No." = '' then
        exit;

      case SalesInvoiceLineAggregate.Type of
        SalesInvoiceLineAggregate.Type::" ":
          exit;
        SalesInvoiceLineAggregate.Type::"Charge (Item)":
          begin
            ItemCharge.GET(SalesInvoiceLineAggregate."No.");
            Name := ItemCharge.Description;
          end;
        SalesInvoiceLineAggregate.Type::Resource:
          begin
            Resource.GET(SalesInvoiceLineAggregate."No.");
            Name := Resource.Name;
          end;
        SalesInvoiceLineAggregate.Type::"Fixed Asset":
          begin
            FixedAsset.GET(SalesInvoiceLineAggregate."No.");
            Name := FixedAsset.Description;
          end;
        SalesInvoiceLineAggregate.Type::"G/L Account":
          begin
            GLAccount.GET(SalesInvoiceLineAggregate."No.");
            Name := GLAccount.Name;
          end;
        SalesInvoiceLineAggregate.Type::Item:
          begin
            Item.GET(SalesInvoiceLineAggregate."No.");
            Name := Item.Description;
          end;
      end;

      exit(GraphMgtComplexTypes.GetDocumentLineObjectDetailsJSON(SalesInvoiceLineAggregate."No.",Name));
    END;

    PROCEDURE GetPurchaseLineDescriptionComplexType@20(VAR PurchInvLineAggregate@1007 : Record "Purch. Inv. Line Aggregate") : Text;
    VAR
      FixedAsset@1006 : Record "Fixed Asset";
      Item@1005 : Record Item;
      GLAccount@1004 : Record "G/L Account";
      ItemCharge@1002 : Record "Item Charge";
      GraphMgtComplexTypes@1001 : Codeunit "Graph Mgt - Complex Types";
      Name@1000 : Text;
    BEGIN
      if PurchInvLineAggregate."No." = '' then
        exit;

      case PurchInvLineAggregate.Type of
        PurchInvLineAggregate.Type::" ":
          exit;
        PurchInvLineAggregate.Type::"Charge (Item)":
          begin
            ItemCharge.GET(PurchInvLineAggregate."No.");
            Name := ItemCharge.Description;
          end;
        PurchInvLineAggregate.Type::"Fixed Asset":
          begin
            FixedAsset.GET(PurchInvLineAggregate."No.");
            Name := FixedAsset.Description;
          end;
        PurchInvLineAggregate.Type::"G/L Account":
          begin
            GLAccount.GET(PurchInvLineAggregate."No.");
            Name := GLAccount.Name;
          end;
        PurchInvLineAggregate.Type::Item:
          begin
            Item.GET(PurchInvLineAggregate."No.");
            Name := Item.Description;
          end;
      end;

      exit(GraphMgtComplexTypes.GetDocumentLineObjectDetailsJSON(PurchInvLineAggregate."No.",Name));
    END;

    BEGIN
    END.
  }
}

