OBJECT Table 1502 Workflow Step
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Workflow Step Instance"=rimd,
                TableData "Workflow Step Argument"=ri,
                TableData "Workflow Rule"=rimd;
    OnInsert=BEGIN
               TESTFIELD("Workflow Code");
               CheckEditingIsAllowed;
             END;

    OnModify=BEGIN
               CheckEditingIsAllowed;
             END;

    OnDelete=VAR
               WorkflowStepArgument@1002 : Record "Workflow Step Argument";
               ChildWorkflowStep@1000 : Record "Workflow Step";
             BEGIN
               CheckEditingIsAllowed;
               UpdateReferredNextStepsInstances;

               if WorkflowStepArgument.GET(Argument) then
                 WorkflowStepArgument.DELETE;
               DeleteStepRules;

               // Change Previous Workflow Step ID to not point to the deleted step
               ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
               ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
               if ChildWorkflowStep.FINDSET then
                 repeat
                   ChildWorkflowStep.VALIDATE("Previous Workflow Step ID","Previous Workflow Step ID");
                   ChildWorkflowStep.MODIFY(true);
                 until ChildWorkflowStep.NEXT <> 1;
             END;

    OnRename=BEGIN
               CheckEditingIsAllowed;
             END;

    CaptionML=ENU=Workflow Step;
    LookupPageID="Workflow Steps";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=ID }
    { 2   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow;
                                                   CaptionML=ENU=Workflow Code;
                                                   NotBlank=true }
    { 4   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 9   ;   ;Entry Point         ;Boolean       ;CaptionML=ENU=Entry Point }
    { 11  ;   ;Previous Workflow Step ID;Integer  ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"));
                                                   OnValidate=BEGIN
                                                                if "Previous Workflow Step ID" = ID then
                                                                  FIELDERROR("Previous Workflow Step ID",StepIdsCannotBeTheSameErr);
                                                              END;

                                                   OnLookup=BEGIN
                                                              if LookupOtherWorkflowStepID("Previous Workflow Step ID") then
                                                                VALIDATE("Previous Workflow Step ID");
                                                            END;

                                                   CaptionML=ENU=Previous Workflow Step ID }
    { 12  ;   ;Next Workflow Step ID;Integer      ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"));
                                                   OnValidate=BEGIN
                                                                if "Next Workflow Step ID" = ID then
                                                                  FIELDERROR("Next Workflow Step ID",StepIdsCannotBeTheSameErr);
                                                              END;

                                                   OnLookup=BEGIN
                                                              if LookupOtherWorkflowStepID("Next Workflow Step ID") then
                                                                VALIDATE("Next Workflow Step ID");
                                                            END;

                                                   CaptionML=ENU=Next Workflow Step ID }
    { 13  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                "Function Name" := '';
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Event,Response,Sub-Workflow;
                                                   OptionString=Event,Response,"Sub-Workflow" }
    { 14  ;   ;Function Name       ;Code128       ;TableRelation=IF (Type=CONST(Event)) "Workflow Event"
                                                                 ELSE IF (Type=CONST(Response)) "Workflow Response"
                                                                 ELSE IF (Type=CONST("Sub-Workflow")) Workflow;
                                                   OnValidate=VAR
                                                                WorkflowStepArgument@1000 : Record "Workflow Step Argument";
                                                                WorkflowRule@1001 : Record "Workflow Rule";
                                                                EmptyGuid@1002 : GUID;
                                                              BEGIN
                                                                case Type of
                                                                  Type::"Sub-Workflow":
                                                                    if "Function Name" = "Workflow Code" then
                                                                      FIELDERROR("Function Name",CannotReferToCurrentWorkflowErr);
                                                                  else
                                                                    if "Function Name" <> xRec."Function Name" then begin
                                                                      if WorkflowStepArgument.GET(Argument) then begin
                                                                        WorkflowStepArgument.DELETE(true);
                                                                        CLEAR(Argument);
                                                                      end;
                                                                      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
                                                                      WorkflowRule.SETRANGE("Workflow Step ID",ID);
                                                                      WorkflowRule.SETRANGE("Workflow Step Instance ID",EmptyGuid);
                                                                      if not WorkflowRule.ISEMPTY then
                                                                        WorkflowRule.DELETEALL;
                                                                    end;
                                                                end;

                                                                if (Type = Type::Response) and ("Function Name" <> '') then
                                                                  CreateResponseArgument;
                                                              END;

                                                   OnLookup=VAR
                                                              Workflow@1000 : Record Workflow;
                                                              WorkflowEvent@1002 : Record "Workflow Event";
                                                              WorkflowResponse@1003 : Record "Workflow Response";
                                                              WorkflowLookupCode@1001 : Code[20];
                                                            BEGIN
                                                              case Type of
                                                                Type::"Event":
                                                                  if PAGE.RUNMODAL(0,WorkflowEvent) = ACTION::LookupOK then
                                                                    VALIDATE("Function Name",WorkflowEvent."Function Name");
                                                                Type::Response:
                                                                  if PAGE.RUNMODAL(0,WorkflowResponse) = ACTION::LookupOK then
                                                                    VALIDATE("Function Name",WorkflowResponse."Function Name");
                                                                Type::"Sub-Workflow":
                                                                  begin
                                                                    Workflow.GET("Workflow Code");
                                                                    if Workflow.LookupOtherWorkflowCode(WorkflowLookupCode) then
                                                                      VALIDATE("Function Name",WorkflowLookupCode);
                                                                  end;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Function Name }
    { 15  ;   ;Argument            ;GUID          ;TableRelation="Workflow Step Argument" WHERE (Type=FIELD(Type));
                                                   OnValidate=VAR
                                                                WorkflowStepArgument@1000 : Record "Workflow Step Argument";
                                                              BEGIN
                                                                if WorkflowStepArgument.GET(xRec.Argument) then
                                                                  WorkflowStepArgument.DELETE(true);
                                                              END;

                                                   CaptionML=ENU=Argument }
    { 16  ;   ;Sequence No.        ;Integer       ;InitValue=1;
                                                   CaptionML=ENU=Sequence No. }
  }
  KEYS
  {
    {    ;"Workflow Code",ID                      ;Clustered=true }
    {    ;"Sequence No."                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CannotReferToCurrentWorkflowErr@1000 : TextConst 'ENU=cannot refer to the current workflow';
      StepIdsCannotBeTheSameErr@1002 : TextConst '@@@=Example: Previous Workflow Step ID cannot be the same as ID.;ENU=cannot be the same as ID';
      ViewFilterDetailsTxt@1001 : TextConst 'ENU=(View filter details)';
      CancelledErr@1004 : TextConst 'ENU=Cancelled.';
      ConfirmDeleteLinksQst@1003 : TextConst 'ENU=If you delete this workflow response, one or more other, linked workflow responses may stop working.\\Do you want to continue?';

    [External]
    PROCEDURE CreateInstance@27(WorkflowInstanceID@1002 : GUID;WorkflowCode@1004 : Code[20];PreviousWorkflowStepID@1006 : Integer;SubWorkflowStep@1005 : Record "Workflow Step");
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
      WorkflowStepInstance@1001 : Record "Workflow Step Instance";
    BEGIN
      WorkflowStepInstance.INIT;
      WorkflowStepInstance.ID := WorkflowInstanceID;
      WorkflowStepInstance."Workflow Code" := WorkflowCode;
      WorkflowStepInstance."Workflow Step ID" := ID;
      WorkflowStepInstance.Description := Description;
      WorkflowStepInstance."Entry Point" := "Entry Point";
      WorkflowStepInstance."Previous Workflow Step ID" := PreviousWorkflowStepID;
      WorkflowStepInstance."Next Workflow Step ID" := "Next Workflow Step ID";
      WorkflowStepInstance.Type := Type;
      WorkflowStepInstance."Function Name" := "Function Name";
      WorkflowStepInstance."Sequence No." := "Sequence No.";

      if WorkflowStepArgument.GET(Argument) then
        WorkflowStepInstance.Argument := WorkflowStepArgument.Clone;

      WorkflowStepInstance."Original Workflow Code" := SubWorkflowStep."Workflow Code";
      WorkflowStepInstance."Original Workflow Step ID" := SubWorkflowStep.ID;

      WorkflowStepInstance.INSERT(true);
      InstantiateStepRules(WorkflowStepInstance.ID);
    END;

    [Internal]
    PROCEDURE ConvertEventConditionsToFilters@7(RecRef@1005 : RecordRef);
    VAR
      TempBlob@1002 : Record TempBlob;
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
      RequestPageParametersHelper@1001 : Codeunit "Request Page Parameters Helper";
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      if WorkflowStepArgument.GET(Argument) then begin
        WorkflowStepArgument.CALCFIELDS("Event Conditions");

        TempBlob.INIT;
        TempBlob.Blob := WorkflowStepArgument."Event Conditions";

        RequestPageParametersHelper.ConvertParametersToFilters(RecRef,TempBlob);
      end;
    END;

    [External]
    PROCEDURE DeleteEventConditions@4();
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
      ZeroGUID@1001 : GUID;
    BEGIN
      CheckEditingIsAllowed;

      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      if WorkflowStepArgument.GET(Argument) then begin
        WorkflowStepArgument.DELETE(true);
        Argument := ZeroGUID;
        MODIFY(true);
      end;

      DeleteStepRules;
    END;

    [Internal]
    PROCEDURE OpenEventConditions@17();
    VAR
      WorkflowEvent@1000 : Record "Workflow Event";
      WorkflowStepArgument@1001 : Record "Workflow Step Argument";
      ReturnFilters@1002 : Text;
      CurrentEventFilters@1004 : Text;
      UserClickedOK@1005 : Boolean;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      WorkflowEvent.GET("Function Name");

      if WorkflowStepArgument.GET(Argument) then
        CurrentEventFilters := WorkflowStepArgument.GetEventFilters
      else
        CurrentEventFilters := WorkflowEvent.CreateDefaultRequestPageFilters;

      UserClickedOK := WorkflowEvent.RunRequestPage(ReturnFilters,CurrentEventFilters);
      if UserClickedOK and (ReturnFilters <> CurrentEventFilters) then begin
        CheckEditingIsAllowed;
        if ReturnFilters = WorkflowEvent.CreateDefaultRequestPageFilters then
          DeleteEventConditions
        else begin
          if ISNULLGUID(Argument) then
            CreateEventArgument(WorkflowStepArgument,Rec);
          WorkflowStepArgument.SetEventFilters(ReturnFilters);
        end;
      end;
    END;

    [External]
    PROCEDURE OpenAdvancedEventConditions@20();
    VAR
      WorkflowEvent@1000 : Record "Workflow Event";
      WorkflowRule@1003 : Record "Workflow Rule";
      TempWorkflowRule@1006 : TEMPORARY Record "Workflow Rule";
      WorkflowEventConditions@1007 : Page "Workflow Event Conditions";
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      WorkflowEvent.GET("Function Name");

      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      if WorkflowRule.FINDFIRST then
        TempWorkflowRule := WorkflowRule
      else begin
        TempWorkflowRule."Table ID" := WorkflowEvent."Table ID";
        TempWorkflowRule."Workflow Code" := "Workflow Code";
        TempWorkflowRule."Workflow Step ID" := ID;
      end;

      WorkflowEventConditions.SetRule(TempWorkflowRule);
      if WorkflowEventConditions.RUNMODAL = ACTION::LookupOK then begin
        WorkflowEventConditions.GETRECORD(TempWorkflowRule);
        if TempWorkflowRule."Field No." = 0 then
          DeleteStepRules
        else begin
          WorkflowRule.COPY(TempWorkflowRule);
          if not WorkflowRule.INSERT(true) then
            WorkflowRule.MODIFY(true);
        end;
      end;
    END;

    [Internal]
    PROCEDURE CompareEventConditions@5(WorkflowStep@1000 : Record "Workflow Step") : Boolean;
    VAR
      OtherWorkflowEvent@1004 : Record "Workflow Event";
      ThisWorkflowEvent@1003 : Record "Workflow Event";
      OtherRecRef@1006 : RecordRef;
      ThisRecRef@1005 : RecordRef;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      ThisWorkflowEvent.GET("Function Name");
      ThisRecRef.OPEN(ThisWorkflowEvent."Table ID");
      ConvertEventConditionsToFilters(ThisRecRef);

      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Event");
      OtherWorkflowEvent.GET(WorkflowStep."Function Name");
      OtherRecRef.OPEN(OtherWorkflowEvent."Table ID");
      WorkflowStep.ConvertEventConditionsToFilters(OtherRecRef);

      exit(ThisRecRef.GETFILTERS = OtherRecRef.GETFILTERS);
    END;

    [External]
    PROCEDURE CompareEventRule@21(WorkflowStep@1000 : Record "Workflow Step") : Boolean;
    VAR
      OtherWorkflowRule@1004 : Record "Workflow Rule";
      ThisWorkflowRule@1003 : Record "Workflow Rule";
    BEGIN
      TESTFIELD("Workflow Code");
      TESTFIELD(ID);
      WorkflowStep.TESTFIELD("Workflow Code");
      WorkflowStep.TESTFIELD(ID);

      FindWorkflowRules(ThisWorkflowRule);
      WorkflowStep.FindWorkflowRules(OtherWorkflowRule);

      exit((ThisWorkflowRule.COUNT <= 1) and (ThisWorkflowRule.COUNT = OtherWorkflowRule.COUNT) and
        (ThisWorkflowRule."Field No." = OtherWorkflowRule."Field No.") and
        (ThisWorkflowRule.Operator = OtherWorkflowRule.Operator))
    END;

    [External]
    PROCEDURE InsertAfterStep@15(VAR NewWorkflowStep@1000 : Record "Workflow Step");
    VAR
      ChildWorkflowStep@1002 : Record "Workflow Step";
    BEGIN
      ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
      ChildWorkflowStep.MODIFYALL("Previous Workflow Step ID",NewWorkflowStep.ID);

      NewWorkflowStep.TESTFIELD("Workflow Code","Workflow Code");
      NewWorkflowStep.VALIDATE("Previous Workflow Step ID",ID);
      NewWorkflowStep.MODIFY(true);
    END;

    LOCAL PROCEDURE CreateEventArgument@9(VAR WorkflowStepArgument@1000 : Record "Workflow Step Argument";VAR WorkflowStep@1001 : Record "Workflow Step");
    BEGIN
      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Event");

      WorkflowStepArgument.INIT;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";
      WorkflowStepArgument.INSERT(true);

      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(true);
    END;

    [Internal]
    PROCEDURE LookupOtherWorkflowStepID@8(VAR LookupID@1001 : Integer) : Boolean;
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record "Workflow Step Buffer";
    BEGIN
      TempWorkflowStepBuffer.PopulateLookupTable("Workflow Code");
      TempWorkflowStepBuffer.SETFILTER("Event Step ID",'0|%1',LookupID);
      TempWorkflowStepBuffer.SETFILTER("Response Step ID",'0|%1',LookupID);
      if TempWorkflowStepBuffer.FINDFIRST then;
      TempWorkflowStepBuffer.RESET;
      if PAGE.RUNMODAL(PAGE::"Workflow Steps",TempWorkflowStepBuffer) = ACTION::LookupOK then begin
        LookupID := TempWorkflowStepBuffer."Event Step ID" + TempWorkflowStepBuffer."Response Step ID";
        exit(true);
      end;
    END;

    [External]
    PROCEDURE GetDescription@1() : Text[250];
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
      WorkflowEvent@1001 : Record "Workflow Event";
      WorkflowStepArgument@1003 : Record "Workflow Step Argument";
      WorkflowResponseHandling@1002 : Codeunit "Workflow Response Handling";
    BEGIN
      case Type of
        WorkflowStep.Type::"Event":
          if WorkflowEvent.GET("Function Name") then
            exit(WorkflowEvent.Description);
        WorkflowStep.Type::Response:
          if WorkflowStepArgument.GET(Argument) then
            exit(WorkflowResponseHandling.GetDescription(WorkflowStepArgument));
      end;
      exit('');
    END;

    LOCAL PROCEDURE CheckEditingIsAllowed@12();
    VAR
      Workflow@1000 : Record Workflow;
    BEGIN
      Workflow.GET("Workflow Code");
      Workflow.CheckEditingIsAllowed;
    END;

    [External]
    PROCEDURE ToString@2() : Text;
    BEGIN
      exit(STRSUBSTNO('%1,%2,%3',"Workflow Code",ID,Type));
    END;

    [External]
    PROCEDURE FindByAttributes@14(WorkflowStepAttributes@1001 : Text);
    BEGIN
      SETFILTER("Workflow Code",'%1',SELECTSTR(1,WorkflowStepAttributes));
      SETFILTER(ID,SELECTSTR(2,WorkflowStepAttributes));
      SETFILTER(Type,SELECTSTR(3,WorkflowStepAttributes));
      FINDFIRST;
    END;

    [Internal]
    PROCEDURE GetConditionAsDisplayText@11() : Text;
    VAR
      WorkflowEvent@1000 : Record "Workflow Event";
      RecordRef@1001 : RecordRef;
    BEGIN
      if Type <> Type::"Event" then
        exit;

      if not WorkflowEvent.GET("Function Name") then
        exit;

      RecordRef.OPEN(WorkflowEvent."Table ID");
      ConvertEventConditionsToFilters(RecordRef);

      if RecordRef.GETFILTERS <> '' then
        exit(RecordRef.GETFILTERS);

      if HasArgumentsContent then
        exit(ViewFilterDetailsTxt);

      exit('');
    END;

    [External]
    PROCEDURE GetRuleAsDisplayText@22() : Text;
    VAR
      WorkflowRule@1002 : Record "Workflow Rule";
    BEGIN
      if Type <> Type::"Event" then
        exit;

      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      if WorkflowRule.FINDFIRST then
        exit(WorkflowRule.GetDisplayText);

      exit('');
    END;

    LOCAL PROCEDURE CreateResponseArgument@13() : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
    BEGIN
      TESTFIELD(Type,Type::Response);

      if ISNULLGUID(Argument) or (not WorkflowStepArgument.GET(Argument)) then begin
        WorkflowStepArgument.INIT;
        WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
        WorkflowStepArgument."Response Function Name" := "Function Name";
        WorkflowStepArgument.INSERT(true);
        Argument := WorkflowStepArgument.ID;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE HasArgumentsContent@16() : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
    BEGIN
      if not WorkflowStepArgument.GET(Argument) then
        exit(false);

      exit(WorkflowStepArgument."Event Conditions".HASVALUE);
    END;

    [External]
    PROCEDURE HasEventsInSubtree@32(VAR ChildWorkflowStep@1001 : Record "Workflow Step") : Boolean;
    BEGIN
      ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
      ChildWorkflowStep.SETRANGE(Type,ChildWorkflowStep.Type::"Event");
      if ChildWorkflowStep.FINDFIRST then
        exit(true);

      ChildWorkflowStep.SETRANGE(Type);
      if ChildWorkflowStep.FINDSET then
        repeat
          if ChildWorkflowStep.HasEventsInSubtree(ChildWorkflowStep) then
            exit(true);
        until ChildWorkflowStep.NEXT = 0;

      exit(false);
    END;

    LOCAL PROCEDURE DeleteStepRules@3();
    VAR
      WorkflowRule@1000 : Record "Workflow Rule";
    BEGIN
      FindWorkflowRules(WorkflowRule);
      WorkflowRule.DELETEALL;
    END;

    LOCAL PROCEDURE InstantiateStepRules@18(InstanceID@1003 : GUID);
    VAR
      WorkflowRule@1000 : Record "Workflow Rule";
      InstanceWorkflowRule@1002 : Record "Workflow Rule";
      ZeroGuid@1001 : GUID;
    BEGIN
      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      WorkflowRule.SETRANGE("Workflow Step Instance ID",ZeroGuid);
      if WorkflowRule.FINDSET then
        repeat
          InstanceWorkflowRule.COPY(WorkflowRule);
          InstanceWorkflowRule.ID := 0;
          InstanceWorkflowRule."Workflow Step Instance ID" := InstanceID;
          InstanceWorkflowRule.INSERT(true);
        until WorkflowRule.NEXT = 0;
    END;

    [External]
    PROCEDURE FindWorkflowRules@19(VAR WorkflowRule@1000 : Record "Workflow Rule") : Boolean;
    VAR
      ZeroGuid@1001 : GUID;
    BEGIN
      TESTFIELD("Workflow Code");
      TESTFIELD(ID);
      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      WorkflowRule.SETRANGE("Workflow Step Instance ID",ZeroGuid);
      exit(WorkflowRule.FINDSET);
    END;

    [External]
    PROCEDURE HasParentEvent@23(VAR WorkflowStep@1000 : Record "Workflow Step") : Boolean;
    BEGIN
      WorkflowStep.SETRANGE(ID,"Previous Workflow Step ID");
      WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Event");

      if WorkflowStep.FINDFIRST then
        exit(true);

      WorkflowStep.SETRANGE(Type);
      if WorkflowStep.FINDSET then
        repeat
          if WorkflowStep.HasParentEvent(WorkflowStep) then
            exit(true);
        until WorkflowStep.NEXT = 0;

      exit(false);
    END;

    LOCAL PROCEDURE UpdateReferredNextStepsInstances@37();
    VAR
      ReferredWorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      if Type <> Type::Response then
        exit;

      ReferredWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      ReferredWorkflowStep.SETRANGE("Next Workflow Step ID",ID);
      ReferredWorkflowStep.SETRANGE(Type,ReferredWorkflowStep.Type::Response);
      if not ReferredWorkflowStep.ISEMPTY then begin
        if not CONFIRM(ConfirmDeleteLinksQst,false) then
          ERROR(CancelledErr);
        ReferredWorkflowStep.MODIFYALL("Next Workflow Step ID",0);
      end;
    END;

    BEGIN
    END.
  }
}

