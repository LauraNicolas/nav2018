OBJECT Codeunit 759 Job Chart Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XAxisStringTxt@1001 : TextConst 'ENU=Job';
      Job@1000 : Record Job;
      TotalRevenueTxt@1002 : TextConst 'ENU=Total Revenue';
      TotalCostTxt@1003 : TextConst 'ENU=Total Cost';
      ProfitMarginTxt@1004 : TextConst 'ENU=Profit Margin';
      JobCalcStatistics@1009 : Codeunit "Job Calculate Statistics";
      CL@1008 : ARRAY [16] OF Decimal;
      PL@1007 : ARRAY [16] OF Decimal;
      ActualTotalCostTxt@1010 : TextConst 'ENU=Actual Total Cost';
      BudgetTotalCostTxt@1011 : TextConst 'ENU=Budget Total Cost';
      CostVarianceTxt@1012 : TextConst 'ENU=Cost Variance';
      ActualTotalPriceTxt@1015 : TextConst 'ENU=Actual Total Price';
      BudgetTotalPriceTxt@1014 : TextConst 'ENU=Budget Total Price';
      PriceVarianceTxt@1013 : TextConst 'ENU=Price Variance';

    [Internal]
    PROCEDURE CreateJobChart@1(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VAR TempJob@1001 : TEMPORARY Record Job;ChartType@1002 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';JobChartType@1003 : 'Profitability,"Actual to Budget Cost","Actual to Budget Price"');
    BEGIN
      InitializeBusinessChart(BusChartBuf);
      SetJobRangeByMyJob(TempJob);
      if NothingToShow(TempJob) then
        exit;

      AddMeasures(BusChartBuf,ChartType,JobChartType);
      SetXAxis(BusChartBuf);
      SetJobChartValues(BusChartBuf,TempJob,JobChartType);
    END;

    [External]
    PROCEDURE SetJobRangeByMyJob@10(VAR TempRangeJob@1000 : TEMPORARY Record Job);
    VAR
      MyJob@1001 : Record "My Job";
    BEGIN
      TempRangeJob.DELETEALL;

      with MyJob do begin
        SETRANGE("User ID",USERID);
        SETRANGE("Exclude from Business Chart",false);
        if FINDSET then
          repeat
            if Job.GET("Job No.") then begin
              TempRangeJob := Job;
              TempRangeJob.INSERT;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE DataPointClicked@7(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VAR RangeJob@1001 : Record Job);
    BEGIN
      with BusChartBuf do begin
        FindCurrentJob(BusChartBuf,RangeJob);
        DrillDownJobValue(RangeJob);
      end;
    END;

    LOCAL PROCEDURE FindCurrentJob@11(VAR BusChartBuf@1001 : Record "Business Chart Buffer";VAR RangeJob@1000 : Record Job);
    BEGIN
      with RangeJob do begin
        FINDSET;
        NEXT(BusChartBuf."Drill-Down X Index");
      end;
    END;

    LOCAL PROCEDURE DrillDownJobValue@12(VAR RangeJob@1000 : Record Job);
    BEGIN
      PAGE.RUN(PAGE::"Job Card",RangeJob);
    END;

    LOCAL PROCEDURE NothingToShow@2(VAR RangeJob@1000 : Record Job) : Boolean;
    BEGIN
      with RangeJob do
        exit(ISEMPTY);
    END;

    LOCAL PROCEDURE InitializeBusinessChart@3(VAR BusChartBuf@1000 : Record "Business Chart Buffer");
    BEGIN
      with BusChartBuf do
        Initialize;
    END;

    LOCAL PROCEDURE AddMeasures@4(VAR BusChartBuf@1000 : Record "Business Chart Buffer";ChartType@1002 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';JobChartType@1003 : 'Profitability,"Actual to Budget Cost","Actual to Budget Price"');
    BEGIN
      with BusChartBuf do
        case JobChartType of
          JobChartType::Profitability:
            begin
              AddMeasure(TotalRevenueTxt,1,"Data Type"::Decimal,ChartType);
              AddMeasure(TotalCostTxt,2,"Data Type"::Decimal,ChartType);
              AddMeasure(ProfitMarginTxt,3,"Data Type"::Decimal,ChartType);
            end;
          JobChartType::"Actual to Budget Cost":
            begin
              AddMeasure(ActualTotalCostTxt,1,"Data Type"::Decimal,ChartType);
              AddMeasure(BudgetTotalCostTxt,2,"Data Type"::Decimal,ChartType);
              AddMeasure(CostVarianceTxt,3,"Data Type"::Decimal,ChartType);
            end;
          JobChartType::"Actual to Budget Price":
            begin
              AddMeasure(ActualTotalPriceTxt,1,"Data Type"::Decimal,ChartType);
              AddMeasure(BudgetTotalPriceTxt,2,"Data Type"::Decimal,ChartType);
              AddMeasure(PriceVarianceTxt,3,"Data Type"::Decimal,ChartType);
            end;
        end;
    END;

    LOCAL PROCEDURE SetXAxis@5(VAR BusChartBuf@1000 : Record "Business Chart Buffer");
    BEGIN
      with BusChartBuf do
        SetXAxis(XAxisStringTxt,"Data Type"::String);
    END;

    LOCAL PROCEDURE SetJobChartValues@6(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VAR RangeJob@1001 : Record Job;JobChartType@1005 : 'Profitability,"Actual to Budget Cost","Actual to Budget Price"');
    VAR
      Index@1002 : Integer;
      JobRevenue@1003 : Decimal;
      JobCost@1004 : Decimal;
      ActualCost@1006 : Decimal;
      BudgetCost@1007 : Decimal;
      ActualPrice@1008 : Decimal;
      BudgetPrice@1009 : Decimal;
    BEGIN
      with RangeJob do
        if FINDSET then
          repeat
            case JobChartType of
              JobChartType::Profitability:
                begin
                  CalculateJobRevenueAndCost(RangeJob,JobRevenue,JobCost);
                  SetJobChartValue(BusChartBuf,RangeJob,Index,JobRevenue,JobCost,JobChartType);
                end;
              JobChartType::"Actual to Budget Cost":
                begin
                  CalculateJobCosts(RangeJob,ActualCost,BudgetCost);
                  SetJobChartValue(BusChartBuf,RangeJob,Index,ActualCost,BudgetCost,JobChartType);
                end;
              JobChartType::"Actual to Budget Price":
                begin
                  CalculateJobPrices(RangeJob,ActualPrice,BudgetPrice);
                  SetJobChartValue(BusChartBuf,RangeJob,Index,ActualPrice,BudgetPrice,JobChartType);
                end;
            end;
          until NEXT = 0;
    END;

    LOCAL PROCEDURE SetJobChartValue@8(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VAR RangeJob@1001 : Record Job;VAR Index@1002 : Integer;Value1@1003 : Decimal;Value2@1004 : Decimal;JobChartType@1005 : 'Profitability,"Actual to Budget Cost","Actual to Budget Price"');
    BEGIN
      with BusChartBuf do begin
        AddColumn(RangeJob."No.");
        SetValueByIndex(0,Index,Value1);
        SetValueByIndex(1,Index,Value2);
        if JobChartType = JobChartType::Profitability then
          SetValueByIndex(2,Index,(Value1 - Value2));
        if (JobChartType = JobChartType::"Actual to Budget Cost") or (JobChartType = JobChartType::"Actual to Budget Price") then
          SetValueByIndex(2,Index,(Value2 - Value1));
        Index += 1;
      end;
    END;

    LOCAL PROCEDURE CalculateJobRevenueAndCost@16(VAR RangeJob@1005 : Record Job;VAR JobRevenue@1001 : Decimal;VAR JobCost@1000 : Decimal);
    BEGIN
      CLEAR(JobCalcStatistics);
      JobCalcStatistics.JobCalculateCommonFilters(RangeJob);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      JobRevenue := PL[16];
      JobCost := CL[8];
    END;

    LOCAL PROCEDURE CalculateJobCosts@25(VAR RangeJob@1005 : Record Job;VAR ActualCost@1001 : Decimal;VAR BudgetCost@1000 : Decimal);
    BEGIN
      CLEAR(JobCalcStatistics);
      JobCalcStatistics.JobCalculateCommonFilters(RangeJob);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      ActualCost := CL[8];
      BudgetCost := CL[4];
    END;

    LOCAL PROCEDURE CalculateJobPrices@26(VAR RangeJob@1005 : Record Job;VAR ActualPrice@1001 : Decimal;VAR BudgetPrice@1000 : Decimal);
    BEGIN
      CLEAR(JobCalcStatistics);
      JobCalcStatistics.JobCalculateCommonFilters(RangeJob);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      ActualPrice := PL[16];
      BudgetPrice := PL[4];
    END;

    BEGIN
    END.
  }
}

