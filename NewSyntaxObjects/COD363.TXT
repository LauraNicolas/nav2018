OBJECT Codeunit 363 PostSales-Delete
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Shipment Header"=i,
                TableData "Sales Shipment Line"=rid,
                TableData "Sales Invoice Header"=i,
                TableData "Sales Invoice Line"=rid,
                TableData "Sales Cr.Memo Header"=i,
                TableData "Sales Cr.Memo Line"=rid,
                TableData "Return Receipt Header"=i,
                TableData "Return Receipt Line"=rid;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesShptLine@1000 : Record "Sales Shipment Line";
      SalesInvLine@1001 : Record "Sales Invoice Line";
      SalesCrMemoLine@1002 : Record "Sales Cr.Memo Line";
      SalesRcptLine@1003 : Record "Return Receipt Line";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      MoveEntries@1005 : Codeunit MoveEntries;
      DocumentDeletionErr@1006 : TextConst '@@@=%1 - Posting Date;ENU=You cannot delete posted sales documents that are posted after %1. \\The date is defined by the Allow Document Deletion Before field in the Sales & Receivables Setup window.';

    [External]
    PROCEDURE DeleteHeader@18(SalesHeader@1000 : Record "Sales Header";VAR SalesShptHeader@1001 : Record "Sales Shipment Header";VAR SalesInvHeader@1002 : Record "Sales Invoice Header";VAR SalesCrMemoHeader@1003 : Record "Sales Cr.Memo Header";VAR ReturnRcptHeader@1004 : Record "Return Receipt Header";VAR SalesInvHeaderPrePmt@1006 : Record "Sales Invoice Header";VAR SalesCrMemoHeaderPrePmt@1005 : Record "Sales Cr.Memo Header");
    VAR
      SalesInvLine@1007 : Record "Sales Invoice Line";
      SalesCrMemoLine@1008 : Record "Sales Cr.Memo Line";
      SalesShptLine@1009 : Record "Sales Shipment Line";
      ReturnRcptLine@1010 : Record "Return Receipt Line";
      SourceCode@1011 : Record "Source Code";
      SourceCodeSetup@1012 : Record "Source Code Setup";
    BEGIN
      with SalesHeader do begin
        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        InitDeleteHeader(
          SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,
          ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt,SourceCode.Code);

        if SalesShptHeader."No." <> '' then begin
          SalesShptHeader.INSERT;
          SalesShptLine.INIT;
          SalesShptLine."Document No." := SalesShptHeader."No.";
          SalesShptLine."Line No." := 10000;
          SalesShptLine.Description := SourceCode.Description;
          SalesShptLine.INSERT;
        end;

        if ReturnRcptHeader."No." <> '' then begin
          ReturnRcptHeader.INSERT;
          ReturnRcptLine.INIT;
          ReturnRcptLine."Document No." := ReturnRcptHeader."No.";
          ReturnRcptLine."Line No." := 10000;
          ReturnRcptLine.Description := SourceCode.Description;
          ReturnRcptLine.INSERT;
        end;

        if SalesInvHeader."No." <> '' then begin
          SalesInvHeader.INSERT;
          SalesInvLine.INIT;
          SalesInvLine."Document No." := SalesInvHeader."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        end;

        if SalesCrMemoHeader."No." <> '' then begin
          SalesCrMemoHeader.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeader."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        end;

        if SalesInvHeaderPrePmt."No." <> '' then begin
          SalesInvHeaderPrePmt.INSERT;
          SalesInvLine."Document No." := SalesInvHeaderPrePmt."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        end;

        if SalesCrMemoHeaderPrePmt."No." <> '' then begin
          SalesCrMemoHeaderPrePmt.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeaderPrePmt."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteSalesShptLines@1(SalesShptHeader@1000 : Record "Sales Shipment Header");
    BEGIN
      SalesShptLine.SETRANGE("Document No.",SalesShptHeader."No.");
      if SalesShptLine.FIND('-') then
        repeat
          SalesShptLine.TESTFIELD("Quantity Invoiced",SalesShptLine.Quantity);
          SalesShptLine.DELETE(true);
        until SalesShptLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Sales Shipment Line",0,SalesShptHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Sales Shipment Header",SalesShptHeader."No.");
    END;

    [External]
    PROCEDURE DeleteSalesInvLines@2(SalesInvHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      if SalesInvLine.FIND('-') then
        repeat
          SalesInvLine.DELETE;
          ItemTrackingMgt.DeleteValueEntryRelation(SalesInvLine.RowID1);
        until SalesInvLine.NEXT = 0;

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Sales Invoice Header",SalesInvHeader."No.");
    END;

    [External]
    PROCEDURE DeleteSalesCrMemoLines@3(SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header");
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      if SalesCrMemoLine.FIND('-') then
        repeat
          SalesCrMemoLine.DELETE;
        until SalesCrMemoLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Sales Cr.Memo Line",0,SalesCrMemoHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Sales Cr.Memo Header",SalesCrMemoHeader."No.");
    END;

    [External]
    PROCEDURE DeleteSalesRcptLines@5800(ReturnRcptHeader@1000 : Record "Return Receipt Header");
    BEGIN
      SalesRcptLine.SETRANGE("Document No.",ReturnRcptHeader."No.");
      if SalesRcptLine.FIND('-') then
        repeat
          SalesRcptLine.TESTFIELD("Quantity Invoiced",SalesRcptLine.Quantity);
          SalesRcptLine.DELETE;
        until SalesRcptLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Return Receipt Line",0,ReturnRcptHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Return Receipt Header",ReturnRcptHeader."No.");
    END;

    [External]
    PROCEDURE InitDeleteHeader@19(SalesHeader@1000 : Record "Sales Header";VAR SalesShptHeader@1001 : Record "Sales Shipment Header";VAR SalesInvHeader@1002 : Record "Sales Invoice Header";VAR SalesCrMemoHeader@1003 : Record "Sales Cr.Memo Header";VAR ReturnRcptHeader@1004 : Record "Return Receipt Header";VAR SalesInvHeaderPrePmt@1006 : Record "Sales Invoice Header";VAR SalesCrMemoHeaderPrePmt@1005 : Record "Sales Cr.Memo Header";SourceCode@1008 : Code[10]);
    VAR
      SalesSetup@1007 : Record "Sales & Receivables Setup";
    BEGIN
      with SalesHeader do begin
        CLEAR(SalesShptHeader);
        CLEAR(SalesInvHeader);
        CLEAR(SalesCrMemoHeader);
        CLEAR(ReturnRcptHeader);
        SalesSetup.GET;

        if ("Shipping No. Series" <> '') and ("Shipping No." <> '') then begin
          SalesShptHeader.TRANSFERFIELDS(SalesHeader);
          SalesShptHeader."No." := "Shipping No.";
          SalesShptHeader."Posting Date" := TODAY;
          SalesShptHeader."User ID" := USERID;
          SalesShptHeader."Source Code" := SourceCode;
        end;

        if ("Return Receipt No. Series" <> '') and ("Return Receipt No." <> '') then begin
          ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
          ReturnRcptHeader."No." := "Return Receipt No.";
          ReturnRcptHeader."Posting Date" := TODAY;
          ReturnRcptHeader."User ID" := USERID;
          ReturnRcptHeader."Source Code" := SourceCode;
        end;

        if ("Posting No. Series" <> '') and
           (("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
            ("Posting No." <> '') or
            ("Document Type" = "Document Type"::Invoice) and
            ("No. Series" = "Posting No. Series"))
        then begin
          SalesInvHeader.TRANSFERFIELDS(SalesHeader);
          if "Posting No." <> '' then
            SalesInvHeader."No." := "Posting No.";
          if "Document Type" = "Document Type"::Invoice then begin
            SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
            SalesInvHeader."Pre-Assigned No." := "No.";
          end else begin
            SalesInvHeader."Pre-Assigned No. Series" := '';
            SalesInvHeader."Pre-Assigned No." := '';
            SalesInvHeader."Order No. Series" := "No. Series";
            SalesInvHeader."Order No." := "No.";
          end;
          SalesInvHeader."Posting Date" := TODAY;
          SalesInvHeader."User ID" := USERID;
          SalesInvHeader."Source Code" := SourceCode;
        end;

        if ("Posting No. Series" <> '') and
           (("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) and
            ("Posting No." <> '') or
            ("Document Type" = "Document Type"::"Credit Memo") and
            ("No. Series" = "Posting No. Series"))
        then begin
          SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
          if "Posting No." <> '' then
            SalesCrMemoHeader."No." := "Posting No.";
          SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          SalesCrMemoHeader."Pre-Assigned No." := "No.";
          SalesCrMemoHeader."Posting Date" := TODAY;
          SalesCrMemoHeader."User ID" := USERID;
          SalesCrMemoHeader."Source Code" := SourceCode;
        end;
        if ("Prepayment No. Series" <> '') and ("Prepayment No." <> '') then begin
          TESTFIELD("Document Type","Document Type"::Order);
          SalesInvHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesInvHeaderPrePmt."No." := "Prepayment No.";
          SalesInvHeaderPrePmt."Order No. Series" := "No. Series";
          SalesInvHeaderPrePmt."Prepayment Order No." := "No.";
          SalesInvHeaderPrePmt."Posting Date" := TODAY;
          SalesInvHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesInvHeaderPrePmt."Pre-Assigned No." := '';
          SalesInvHeaderPrePmt."User ID" := USERID;
          SalesInvHeaderPrePmt."Source Code" := SourceCode;
          SalesInvHeaderPrePmt."Prepayment Invoice" := true;
        end;

        if ("Prepmt. Cr. Memo No. Series" <> '') and ("Prepmt. Cr. Memo No." <> '') then begin
          TESTFIELD("Document Type","Document Type"::Order);
          SalesCrMemoHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesCrMemoHeaderPrePmt."No." := "Prepmt. Cr. Memo No.";
          SalesCrMemoHeaderPrePmt."Prepayment Order No." := "No.";
          SalesCrMemoHeaderPrePmt."Posting Date" := TODAY;
          SalesCrMemoHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesCrMemoHeaderPrePmt."Pre-Assigned No." := '';
          SalesCrMemoHeaderPrePmt."User ID" := USERID;
          SalesCrMemoHeaderPrePmt."Source Code" := SourceCode;
          SalesCrMemoHeaderPrePmt."Prepayment Credit Memo" := true;
        end;
      end;
    END;

    [External]
    PROCEDURE IsDocumentDeletionAllowed@4(PostingDate@1001 : Date);
    VAR
      SalesSetup@1000 : Record "Sales & Receivables Setup";
    BEGIN
      SalesSetup.GET;
      if SalesSetup."Allow Document Deletion Before" <> 0D then
        if PostingDate >= SalesSetup."Allow Document Deletion Before" then
          ERROR(STRSUBSTNO(DocumentDeletionErr,SalesSetup."Allow Document Deletion Before"));
    END;

    BEGIN
    END.
  }
}

