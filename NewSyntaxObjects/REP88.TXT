OBJECT Report 88 VAT- VIES Declaration Disk
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "VAT Entry"=imd;
    CaptionML=ENU=VAT- VIES Declaration Disk;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  FileName := FileManagement.ServerTempFileName('txt');
                END;

    OnPostReport=BEGIN
                   if not HideFileDialog then begin
                     FileManagement.DownloadHandler(FileName ,'','',FileManagement.GetToFilterText('',FileName),ToFileNameTxt);
                     FileManagement.DeleteServerFile(FileName);
                   end
                 END;

  }
  DATASET
  {
    { 7612;    ;DataItem;VAT Entry           ;
               DataItemTable="VAT Entry";
               DataItemTableView=SORTING(Type,"Country/Region Code","VAT Registration No.","VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date") WHERE(Type=CONST(Sale));
               OnPreDataItem=BEGIN
                               CLEAR(VATFile);
                               VATFile.TEXTMODE := true;
                               VATFile.WRITEMODE := true;
                               VATFile.CREATE(FileName);

                               CompanyInfo.GET;
                               VATRegNo := CONVERTSTR(CompanyInfo."VAT Registration No.",Text001,'    ');
                               VATFile.WRITE(FORMAT('00' + FORMAT(VATRegNo,8) + Text002,80));
                               VATFile.WRITE(FORMAT('0100001',80));

                               NoOfGrTotal := 0;
                               Period := GETRANGEMAX("Posting Date");
                               InternalReferenceNo := FORMAT(Period,4,2) + '000000';
                             END;

               OnAfterGetRecord=VAR
                                  VATEntry@1001 : Record "VAT Entry";
                                  TotalValueOfItemSupplies@1003 : Decimal;
                                  TotalValueOfServiceSupplies@1002 : Decimal;
                                  GroupTotal@1000 : Boolean;
                                BEGIN
                                  if "EU Service" then begin
                                    if UseAmtsInAddCurr then
                                      TotalValueOfServiceSupplies := "Additional-Currency Base"
                                    else
                                      TotalValueOfServiceSupplies := Base
                                  end else
                                    if UseAmtsInAddCurr then
                                      TotalValueOfItemSupplies := "Additional-Currency Base"
                                    else
                                      TotalValueOfItemSupplies := Base;

                                  if "EU 3-Party Trade" then begin
                                    EU3PartyItemTradeAmt := EU3PartyItemTradeAmt + TotalValueOfItemSupplies;
                                    EU3PartyServiceTradeAmt := EU3PartyServiceTradeAmt + TotalValueOfServiceSupplies;
                                  end;
                                  TotalValueofItemSuppliesTotal += TotalValueOfItemSupplies;
                                  TotalValueofServiceSuppliesTot += TotalValueOfServiceSupplies;

                                  VATEntry.COPY("VAT Entry");
                                  if VATEntry.NEXT = 1 then begin
                                    if (VATEntry."Country/Region Code" <> "Country/Region Code") or
                                       (VATEntry."VAT Registration No." <> "VAT Registration No.")
                                    then
                                      GroupTotal := true;
                                  end else
                                    GroupTotal := true;

                                  if GroupTotal then begin
                                    WriteGrTotalsToFile(TotalValueofServiceSuppliesTot,TotalValueofItemSuppliesTotal,
                                      EU3PartyServiceTradeAmt,EU3PartyItemTradeAmt);
                                    EU3PartyItemTradeTotalAmt += EU3PartyItemTradeAmt;
                                    EU3PartyServiceTradeTotalAmt += EU3PartyServiceTradeAmt;

                                    TotalValueofItemSuppliesTotal := 0;
                                    TotalValueofServiceSuppliesTot := 0;

                                    EU3PartyItemTradeAmt := 0;
                                    EU3PartyServiceTradeAmt := 0;
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                VATFile.WRITE(
                                  FORMAT(
                                    '10' + DecimalNumeralZeroFormat(NoOfGrTotal,9) +
                                    DecimalNumeralZeroFormat(EU3PartyItemTradeTotalAmt,15) +
                                    DecimalNumeralSign(-EU3PartyItemTradeTotalAmt) +
                                    DecimalNumeralZeroFormat(EU3PartyServiceTradeTotalAmt,15) +
                                    DecimalNumeralSign(-EU3PartyServiceTradeTotalAmt),
                                    80));
                                VATFile.CLOSE;
                              END;

               ReqFilterFields="VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Show Amounts in Add. Reporting Currency;
                  CaptionML=ENU=Show Amounts in Add. Reporting Currency;
                  ToolTipML=ENU=Specifies if the reported amounts are shown in the additional reporting currency.;
                  ApplicationArea=#Advanced;
                  SourceExpr=UseAmtsInAddCurr;
                  MultiLine=true }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=WwWw';
      Text002@1002 : TextConst 'ENU=LIST';
      Text003@1003 : TextConst 'ENU="%1 was not filled in for all VAT entries in which %2 = %3."';
      Text004@1004 : TextConst 'ENU=It is not possible to display %1 in a field with a length of %2.';
      CompanyInfo@1005 : Record "Company Information";
      Country@1006 : Record "Country/Region";
      Cust@1007 : Record Customer;
      FileManagement@1000 : Codeunit "File Management";
      VATFile@1008 : File;
      TotalValueofServiceSuppliesTot@1021 : Decimal;
      TotalValueofItemSuppliesTotal@1013 : Decimal;
      EU3PartyServiceTradeAmt@1022 : Decimal;
      EU3PartyItemTradeAmt@1014 : Decimal;
      EU3PartyItemTradeTotalAmt@1016 : Decimal;
      EU3PartyServiceTradeTotalAmt@1023 : Decimal;
      NoOfGrTotal@1020 : Integer;
      FileName@1009 : Text;
      VATRegNo@1010 : Code[20];
      InternalReferenceNo@1011 : Text[10];
      Period@1012 : Date;
      UseAmtsInAddCurr@1015 : Boolean;
      ToFileNameTxt@1018 : TextConst 'ENU=Default.txt';
      HideFileDialog@1024 : Boolean;

    LOCAL PROCEDURE DecimalNumeralSign@1(DecimalNumeral@1000 : Decimal) : Text[1];
    BEGIN
      if DecimalNumeral >= 0 then
        exit('+');
      exit('-');
    END;

    LOCAL PROCEDURE DecimalNumeralZeroFormat@2(DecimalNumeral@1000 : Decimal;Length@1001 : Integer) : Text[250];
    BEGIN
      exit(TextZeroFormat(DELCHR(FORMAT(ROUND(ABS(DecimalNumeral),1,'<'),0,1)),Length));
    END;

    LOCAL PROCEDURE TextZeroFormat@3(Text@1000 : Text[250];Length@1001 : Integer) : Text[250];
    BEGIN
      if STRLEN(Text) > Length then
        ERROR(
          Text004,
          Text,Length);
      exit(PADSTR('',Length - STRLEN(Text),'0') + Text);
    END;

    LOCAL PROCEDURE WriteGrTotalsToFile@4(TotalValueofServiceSupplies@1003 : Decimal;TotalValueofItemSupplies@1002 : Decimal;EU3PartyServiceTradeAmt@1001 : Decimal;EU3PartyItemTradeAmt@1000 : Decimal);
    BEGIN
      if (ROUND(ABS(TotalValueofItemSupplies),1,'<') <> 0) or (ROUND(ABS(TotalValueofServiceSupplies),1,'<') <> 0) or
         (ROUND(ABS(EU3PartyItemTradeAmt),1,'<') <> 0) or (ROUND(ABS(EU3PartyServiceTradeAmt),1,'<') <> 0)
      then
        with "VAT Entry" do begin
          if "VAT Registration No." = '' then begin
            Type := Type::Sale;
            ERROR(
              Text003,
              FIELDCAPTION("VAT Registration No."),FIELDCAPTION(Type),Type);
          end;

          Cust.GET("Bill-to/Pay-to No.");
          Cust.TESTFIELD("Country/Region Code");
          Country.GET(Cust."Country/Region Code");
          Cust.TESTFIELD("VAT Registration No.");
          Country.GET("Country/Region Code");
          Country.TESTFIELD("EU Country/Region Code");
          NoOfGrTotal := NoOfGrTotal + 1;

          InternalReferenceNo := INCSTR(InternalReferenceNo);
          SETRANGE("Country/Region Code","Country/Region Code");
          SETRANGE("Bill-to/Pay-to No.","Bill-to/Pay-to No.");
          MODIFYALL("Internal Ref. No.",InternalReferenceNo);
          SETRANGE("Country/Region Code");
          SETRANGE("Bill-to/Pay-to No.");

          VATFile.WRITE(
            FORMAT(
              '02' + FORMAT(InternalReferenceNo,10) +
              DecimalNumeralZeroFormat(DATE2DMY(Period,3) mod 100,2) +
              DecimalNumeralZeroFormat(DATE2DMY(Period,2),2) +
              DecimalNumeralZeroFormat(DATE2DMY(Period,1),2) +
              FORMAT(VATRegNo,8) + FORMAT(Country."EU Country/Region Code",2) + FORMAT("VAT Registration No.",12) +
              DecimalNumeralZeroFormat(TotalValueofItemSupplies,15) + DecimalNumeralSign(-TotalValueofItemSupplies) + '0' +
              DecimalNumeralZeroFormat(TotalValueofServiceSupplies,15) + DecimalNumeralSign(-TotalValueofServiceSupplies) + '0' +
              DecimalNumeralZeroFormat(EU3PartyItemTradeAmt,15) + DecimalNumeralSign(-EU3PartyItemTradeAmt) + '0' +
              DecimalNumeralZeroFormat(EU3PartyServiceTradeAmt,15) + DecimalNumeralSign(-EU3PartyServiceTradeAmt),
              120));
        end;
    END;

    [External]
    PROCEDURE GetFileName@6() : Text[1024];
    BEGIN
      exit(FileName);
    END;

    [External]
    PROCEDURE InitializeRequest@5(NewHideFileDialog@1000 : Boolean);
    BEGIN
      HideFileDialog := NewHideFileDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

