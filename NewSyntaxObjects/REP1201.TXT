OBJECT Report 1201 Post Direct Debit Collection
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Post Direct Debit Collection;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  GenJnlBatch.GET(GeneralJournalTemplateName,GeneralJournalBatchName);
                  GenJnlLine.SETRANGE("Journal Template Name",GeneralJournalTemplateName);
                  GenJnlLine.SETRANGE("Journal Batch Name",GeneralJournalBatchName);
                  if GenJnlLine.FINDLAST then;
                  LastLineNo := GenJnlLine."Line No.";
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                   if CreateJnlOnly then
                     MESSAGE(JnlCreatedMsg,TotalCount - SkippedCount,SkippedCount)
                   else
                     MESSAGE(PostedMsg,TotalCount - SkippedCount,SkippedCount);

                   if SkippedCount = 0 then begin
                     DirectDebitCollection.GET(DirectDebitCollectionNo);
                     DirectDebitCollection.Status := DirectDebitCollection.Status::Posted;
                     DirectDebitCollection.MODIFY;
                   end;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Direct Debit Collection Entry;
               DataItemTable="Direct Debit Collection Entry";
               DataItemTableView=SORTING("Direct Debit Collection No.","Entry No.");
               OnPreDataItem=BEGIN
                               SETRANGE("Direct Debit Collection No.",DirectDebitCollectionNo);
                               SETRANGE(Status,Status::"File Created");
                               TotalCount := COUNT;
                               Window.OPEN(ProgressMsg);
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrCount += 1;
                                  Window.UPDATE(1,CurrCount * 10000 div TotalCount);
                                  if CreateJnlLine("Direct Debit Collection Entry") then begin
                                    Status := Status::Posted;
                                    MODIFY;
                                  end else
                                    SkippedCount += 1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if DirectDebitCollectionNo <> 0 then
                     if DirectDebitCollection.GET(DirectDebitCollectionNo) then;
                 END;

    }
    CONTROLS
    {
      { 1   ;    ;Container ;
                  Name=Options;
                  CaptionML=ENU=Options;
                  ContainerType=ContentArea }

      { 3   ;1   ;Field     ;
                  Name=Direct Debit Collection No.;
                  CaptionML=ENU=Direct Debit Collection No.;
                  ToolTipML=ENU=Specifies the direct debit collection that you want to post payment receipt for.;
                  ApplicationArea=#Suite;
                  SourceExpr=DirectDebitCollectionNo;
                  TableRelation="Direct Debit Collection";
                  OnValidate=BEGIN
                               DirectDebitCollection.GET(DirectDebitCollectionNo);
                               DirectDebitCollection.TESTFIELD(Status,DirectDebitCollection.Status::"File Created");
                             END;

                  OnLookup=VAR
                             DirectDebitCollections@1000 : Page "Direct Debit Collections";
                           BEGIN
                             DirectDebitCollection.SETRANGE(Status,DirectDebitCollection.Status::"File Created");
                             if DirectDebitCollectionNo = 0 then
                               DirectDebitCollection.FINDLAST
                             else
                               if DirectDebitCollection.GET(DirectDebitCollectionNo) then;
                             DirectDebitCollections.LOOKUPMODE := true;
                             DirectDebitCollections.SETRECORD(DirectDebitCollection);
                             DirectDebitCollections.SETTABLEVIEW(DirectDebitCollection);
                             if DirectDebitCollections.RUNMODAL = ACTION::LookupOK then begin
                               DirectDebitCollections.GETRECORD(DirectDebitCollection);
                               DirectDebitCollectionNo := DirectDebitCollection."No.";
                             end;
                           END;
                            }

      { 5   ;1   ;Field     ;
                  Name=Identifier;
                  CaptionML=ENU=Identifier;
                  ToolTipML=ENU=Specifies the collection.;
                  ApplicationArea=#Suite;
                  SourceExpr=DirectDebitCollection.Identifier;
                  Editable=FALSE }

      { 6   ;1   ;Field     ;
                  Name=Status;
                  CaptionML=ENU=Status;
                  ToolTipML=ENU=Specifies the status of the collection.;
                  ApplicationArea=#Suite;
                  SourceExpr=DirectDebitCollection.Status;
                  Editable=FALSE }

      { 7   ;1   ;Field     ;
                  Name=Bank Account No.;
                  CaptionML=ENU=Bank Account No.;
                  ToolTipML=ENU=Specifies which of your company's bank accounts the collected payment will be transferred to from the customer's bank account.;
                  ApplicationArea=#Suite;
                  SourceExpr=DirectDebitCollection."To Bank Account No.";
                  Editable=FALSE }

      { 4   ;1   ;Field     ;
                  Name=General Journal Template;
                  CaptionML=ENU=General Journal Template;
                  ToolTipML=ENU=Specifies the general journal template that the entries are placed in.;
                  ApplicationArea=#Suite;
                  SourceExpr=GeneralJournalTemplateName;
                  TableRelation="Gen. Journal Template";
                  OnValidate=VAR
                               GenJournalTemplate@1001 : Record "Gen. Journal Template";
                             BEGIN
                               if GeneralJournalTemplateName = '' then begin
                                 GeneralJournalBatchName := '';
                                 exit;
                               end;
                               GenJournalTemplate.GET(GeneralJournalTemplateName);
                               if not (GenJournalTemplate.Type in
                                       [GenJournalTemplate.Type::General,GenJournalTemplate.Type::Purchases,GenJournalTemplate.Type::Payments,
                                        GenJournalTemplate.Type::Sales,GenJournalTemplate.Type::"Cash Receipts"])
                               then
                                 ERROR(
                                   TemplateTypeErr,
                                   GenJournalTemplate.Type::General,GenJournalTemplate.Type::Purchases,GenJournalTemplate.Type::Payments,
                                   GenJournalTemplate.Type::Sales,GenJournalTemplate.Type::"Cash Receipts");

                               GenJournalTemplate.TESTFIELD("No. Series");
                             END;
                              }

      { 2   ;1   ;Field     ;
                  Name=General Journal Batch;
                  CaptionML=ENU=General Journal Batch;
                  ToolTipML=ENU=Specifies the general journal batch that the entries are placed in.;
                  ApplicationArea=#Suite;
                  SourceExpr=GeneralJournalBatchName;
                  TableRelation="Gen. Journal Batch";
                  OnValidate=VAR
                               GenJournalBatch@1000 : Record "Gen. Journal Batch";
                             BEGIN
                               GenJournalBatch.GET(GeneralJournalTemplateName,GeneralJournalBatchName);
                               GenJournalBatch.TESTFIELD(Recurring,false);
                               GenJournalBatch.TESTFIELD("No. Series");
                             END;

                  OnLookup=VAR
                             GenJournalBatch@1000 : Record "Gen. Journal Batch";
                             GeneralJournalBatches@1001 : Page "General Journal Batches";
                           BEGIN
                             GenJournalBatch.SETRANGE("Journal Template Name",GeneralJournalTemplateName);
                             GeneralJournalBatches.SETTABLEVIEW(GenJournalBatch);
                             if GeneralJournalBatches.RUNMODAL = ACTION::OK then begin
                               GeneralJournalBatches.GETRECORD(GenJournalBatch);
                               GeneralJournalBatchName := GenJournalBatch.Name;
                             end;
                           END;
                            }

      { 8   ;1   ;Field     ;
                  Name=Create Journal Only;
                  CaptionML=ENU=Create Journal Only;
                  ToolTipML=ENU=Specifies if you want to post the payment receipt when you choose the OK button. The payment receipt will be prepared in the specified journal and will not be posted until someone posts the journal lines in question.;
                  ApplicationArea=#Suite;
                  SourceExpr=CreateJnlOnly }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TemplateTypeErr@1000 : TextConst '@@@="%1..5 lists Type=General,Purchases,Payments,Sales,Cash Receipts";ENU=Only General Journal templates of type %1, %2, %3, %4, or %5 are allowed.';
      DirectDebitCollection@1004 : Record "Direct Debit Collection";
      GenJnlLine@1006 : Record "Gen. Journal Line";
      GenJnlBatch@1017 : Record "Gen. Journal Batch";
      GenJnlPostLine@1018 : Codeunit "Gen. Jnl.-Post Line";
      DimMgt@1009 : Codeunit DimensionManagement;
      Window@1013 : Dialog;
      DirectDebitCollectionNo@1003 : Integer;
      GeneralJournalTemplateName@1001 : Code[10];
      GeneralJournalBatchName@1002 : Code[10];
      LastLineNo@1005 : Integer;
      PostingTxt@1007 : TextConst '@@@="%1=Doc. type, %2=Doc. No. E.g. Invoice 234 Direct Debit";ENU=%1 %2 Direct Debit';
      CreateJnlOnly@1008 : Boolean;
      TotalCount@1010 : Integer;
      CurrCount@1011 : Integer;
      ProgressMsg@1012 : TextConst 'ENU=#1##################';
      JnlCreatedMsg@1014 : TextConst '@@@=%1 and %2 are both numbers / count.;ENU=%1 journal lines were created. %2 lines were skipped.';
      PostedMsg@1015 : TextConst '@@@=%1 and %2 are both numbers / count.;ENU=%1 payments were posted. %2 lines were skipped.';
      SkippedCount@1016 : Integer;

    PROCEDURE SetCollectionEntry@4(NewCollectionEntry@1000 : Integer);
    BEGIN
      DirectDebitCollectionNo := NewCollectionEntry;
      DirectDebitCollection.GET(DirectDebitCollectionNo);
    END;

    PROCEDURE SetJnlBatch@1(NewGenJnlTemplateName@1000 : Code[10];NewGenJnlBachName@1001 : Code[10]);
    BEGIN
      GeneralJournalTemplateName := NewGenJnlTemplateName;
      GeneralJournalBatchName := NewGenJnlBachName;
      CurrReport.USEREQUESTPAGE := false;
    END;

    PROCEDURE SetCreateJnlOnly@2(NewCreateJnlOnly@1000 : Boolean);
    BEGIN
      CreateJnlOnly := NewCreateJnlOnly;
    END;

    LOCAL PROCEDURE CreateJnlLine@3(VAR DirectDebitCollectionEntry@1000 : Record "Direct Debit Collection Entry") : Boolean;
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      GenJournalTemplate@1004 : Record "Gen. Journal Template";
      NoSeriesMgt@1003 : Codeunit NoSeriesManagement;
      DimensionSetIDArr@1002 : ARRAY [10] OF Integer;
    BEGIN
      CustLedgEntry.GET(DirectDebitCollectionEntry."Applies-to Entry No.");
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      if not CustLedgEntry.Open or (CustLedgEntry."Remaining Amount" < DirectDebitCollectionEntry."Transfer Amount") then
        exit(false);

      LastLineNo += 10000;
      GenJnlLine."Journal Template Name" := GeneralJournalTemplateName;
      GenJnlLine."Journal Batch Name" := GeneralJournalBatchName;
      GenJnlLine."Line No." := LastLineNo;
      if GenJnlBatch."No. Series" <> '' then
        if CreateJnlOnly then
          GenJnlLine.SetUpNewLine(GenJnlLine,GenJnlLine."Balance (LCY)",true)
        else begin
          GenJnlLine."Document No." := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",GenJnlLine."Posting Date",true);
          GenJournalTemplate.GET(GeneralJournalTemplateName);
          GenJnlLine."Source Code" := GenJournalTemplate."Source Code";
        end;

      GenJnlLine.VALIDATE("Document Type",GenJnlLine."Document Type"::Payment);
      GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::Customer);
      GenJnlLine.VALIDATE("Account No.",DirectDebitCollectionEntry."Customer No.");
      GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
      GenJnlLine.VALIDATE("Bal. Account No.",DirectDebitCollection."To Bank Account No.");
      DimensionSetIDArr[1] := GenJnlLine."Dimension Set ID";
      DimensionSetIDArr[2] := CustLedgEntry."Dimension Set ID";
      GenJnlLine."Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(
          DimensionSetIDArr,GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");

      GenJnlLine.VALIDATE("Posting Date",DirectDebitCollectionEntry."Transfer Date");
      GenJnlLine.Description :=
        COPYSTR(
          STRSUBSTNO(
            PostingTxt,CustLedgEntry."Document Type",CustLedgEntry."Document No."),1,MAXSTRLEN(GenJnlLine.Description));
      GenJnlLine.VALIDATE("Currency Code",CustLedgEntry."Currency Code");
      GenJnlLine.VALIDATE(Amount,-DirectDebitCollectionEntry."Transfer Amount");
      GenJnlLine."Applies-to Doc. Type" := CustLedgEntry."Document Type";
      GenJnlLine.VALIDATE("Applies-to Doc. No.",CustLedgEntry."Document No.");
      if CreateJnlOnly then
        GenJnlLine.INSERT(true)
      else
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      exit(true);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

