OBJECT Codeunit 5062 SegCriteriaManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE InsertContact@2(SegmentNo@1000 : Code[20];ContactNo@1001 : Code[20]);
    VAR
      Cont@1002 : Record Contact;
    BEGIN
      Cont.SETRANGE("No.",ContactNo);

      InsertCriteriaAction(SegmentNo,REPORT::"Add Contacts",false,false,false,false,false);
      InsertCriteriaFilter(SegmentNo,DATABASE::Contact,Cont.GETFILTERS,Cont.GETVIEW(false));
    END;

    [External]
    PROCEDURE DeleteContact@3(SegmentNo@1000 : Code[20];ContactNo@1001 : Code[20]);
    VAR
      Cont@1002 : Record Contact;
    BEGIN
      Cont.SETRANGE("No.",ContactNo);

      InsertCriteriaAction(SegmentNo,REPORT::"Remove Contacts - Reduce",false,false,false,false,false);
      InsertCriteriaFilter(SegmentNo,DATABASE::Contact,Cont.GETFILTERS,Cont.GETVIEW(false));
    END;

    [External]
    PROCEDURE InsertReuseLogged@5(SegmentNo@1000 : Code[20];LoggedSegmentEntryNo@1001 : Integer);
    VAR
      InteractLogEntry@1002 : Record "Interaction Log Entry";
    BEGIN
      InteractLogEntry.SETCURRENTKEY("Logged Segment Entry No.");
      InteractLogEntry.SETRANGE("Logged Segment Entry No.",LoggedSegmentEntryNo);

      InsertCriteriaAction(SegmentNo,REPORT::"Add Contacts",true,false,false,false,false);
      InsertCriteriaFilter(
        SegmentNo,DATABASE::"Interaction Log Entry",InteractLogEntry.GETFILTERS,InteractLogEntry.GETVIEW(false));
    END;

    [External]
    PROCEDURE InsertCriteriaAction@1(SegmentNo@1000 : Code[20];CalledFromReportNo@1001 : Integer;AllowExistingContacts@1002 : Boolean;ExpandContact@1003 : Boolean;AllowCompanyWithPersons@1004 : Boolean;IgnoreExclusion@1005 : Boolean;EntireCompanies@1006 : Boolean);
    VAR
      SegCriteriaLine@1007 : Record "Segment Criteria Line";
      NextLineNo@1008 : Integer;
    BEGIN
      SegCriteriaLine.LOCKTABLE;
      SegCriteriaLine.SETRANGE("Segment No.",SegmentNo);
      if SegCriteriaLine.FINDLAST then
        NextLineNo := SegCriteriaLine."Line No." + 1
      else
        NextLineNo := 1;

      SegCriteriaLine.INIT;
      SegCriteriaLine."Segment No." := SegmentNo;
      SegCriteriaLine."Line No." := NextLineNo;
      SegCriteriaLine.Type := SegCriteriaLine.Type::Action;
      case CalledFromReportNo of
        REPORT::"Add Contacts":
          SegCriteriaLine.Action := SegCriteriaLine.Action::"Add Contacts";
        REPORT::"Remove Contacts - Reduce":
          SegCriteriaLine.Action := SegCriteriaLine.Action::"Remove Contacts (Reduce)";
        REPORT::"Remove Contacts - Refine":
          SegCriteriaLine.Action := SegCriteriaLine.Action::"Remove Contacts (Refine)";
      end;
      SegCriteriaLine."Allow Existing Contacts" := AllowExistingContacts;
      SegCriteriaLine."Expand Contact" := ExpandContact;
      SegCriteriaLine."Allow Company with Persons" := AllowCompanyWithPersons;
      SegCriteriaLine."Ignore Exclusion" := IgnoreExclusion;
      SegCriteriaLine."Entire Companies" := EntireCompanies;
      SegCriteriaLine.INSERT;
    END;

    [External]
    PROCEDURE InsertCriteriaFilter@4(SegmentNo@1000 : Code[20];TableNo@1001 : Integer;Filter@1002 : Text[250];View@1003 : Text[250]);
    VAR
      SegCriteriaLine@1004 : Record "Segment Criteria Line";
      NextLineNo@1005 : Integer;
    BEGIN
      if Filter = '' then
        exit;

      SegCriteriaLine.SETRANGE("Segment No.",SegmentNo);
      if SegCriteriaLine.FINDLAST then
        NextLineNo := SegCriteriaLine."Line No." + 1
      else
        NextLineNo := 1;

      SegCriteriaLine.INIT;
      SegCriteriaLine."Segment No." := SegmentNo;
      SegCriteriaLine."Line No." := NextLineNo;
      SegCriteriaLine.Type := SegCriteriaLine.Type::Filter;
      SegCriteriaLine."Table No." := TableNo;
      SegCriteriaLine.View := View;
      SegCriteriaLine.INSERT;

      SegCriteriaLine.RESET;
      SegCriteriaLine.SETCURRENTKEY("Segment No.",Type);
      SegCriteriaLine.SETRANGE("Segment No.",SegmentNo);
      SegCriteriaLine.SETRANGE(Type,SegCriteriaLine.Type::Action);
      SegCriteriaLine.FINDLAST;
      SegCriteriaLine."No. of Filters" := SegCriteriaLine."No. of Filters" + 1;
      SegCriteriaLine.MODIFY;
    END;

    [External]
    PROCEDURE SegCriteriaFilter@6(TableNo@1000 : Integer;View@1001 : Text[250]) : Text[250];
    VAR
      Cont@1002 : Record Contact;
      ContProfileAnswer@1003 : Record "Contact Profile Answer";
      ContMailingGrp@1004 : Record "Contact Mailing Group";
      InteractLogEntry@1005 : Record "Interaction Log Entry";
      ContJobResp@1006 : Record "Contact Job Responsibility";
      ContIndustGrp@1007 : Record "Contact Industry Group";
      ContBusRel@1008 : Record "Contact Business Relation";
      ValueEntry@1009 : Record "Value Entry";
      ProfileQuestionnaireLine@1010 : Record "Profile Questionnaire Line";
    BEGIN
      case TableNo of
        DATABASE::Contact:
          begin
            Cont.SETVIEW(View);
            exit(Cont.GETFILTERS);
          end;
        DATABASE::"Contact Profile Answer":
          begin
            ContProfileAnswer.SETVIEW(View);
            ContProfileAnswer.COPYFILTER(
              "Profile Questionnaire Code",ProfileQuestionnaireLine."Profile Questionnaire Code");
            ContProfileAnswer.COPYFILTER("Line No.",ProfileQuestionnaireLine."Line No.");
            if ProfileQuestionnaireLine.COUNT = 1 then begin
              ProfileQuestionnaireLine.FINDFIRST;
              exit(SELECTSTR(1,ContProfileAnswer.GETFILTERS) + ', ' +
                ProfileQuestionnaireLine.Question + ': ' + ProfileQuestionnaireLine.Description);
            end;
            exit(ContProfileAnswer.GETFILTERS);
          end;
        DATABASE::"Contact Mailing Group":
          begin
            ContMailingGrp.SETVIEW(View);
            exit(ContMailingGrp.GETFILTERS);
          end;
        DATABASE::"Interaction Log Entry":
          begin
            InteractLogEntry.SETVIEW(View);
            exit(InteractLogEntry.GETFILTERS);
          end;
        DATABASE::"Contact Job Responsibility":
          begin
            ContJobResp.SETVIEW(View);
            exit(ContJobResp.GETFILTERS);
          end;
        DATABASE::"Contact Industry Group":
          begin
            ContIndustGrp.SETVIEW(View);
            exit(ContIndustGrp.GETFILTERS);
          end;
        DATABASE::"Contact Business Relation":
          begin
            ContBusRel.SETVIEW(View);
            exit(ContBusRel.GETFILTERS);
          end;
        DATABASE::"Value Entry":
          begin
            ValueEntry.SETVIEW(View);
            exit(ValueEntry.GETFILTERS);
          end;
      end;
    END;

    BEGIN
    END.
  }
}

