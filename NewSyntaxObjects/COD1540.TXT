OBJECT Codeunit 1540 Workflow Webhook Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CustomerApprovalDescriptionTxt@1001 : TextConst '@@@={Locked};ENU=Customer Approval Workflow';
      FinCategoryTxt@1005 : TextConst '@@@={Locked};ENU=FIN';
      GeneralJournalBatchApprovalDescriptionTxt@1006 : TextConst '@@@={Locked};ENU=General Journal Batch Approval Workflow';
      GeneralJournaLineApprovalDescriptionTxt@1007 : TextConst '@@@={Locked};ENU=General Journal Line Approval Workflow';
      ItemApprovalDescriptionTxt@1010 : TextConst '@@@={Locked};ENU=Item Approval Workflow';
      PurchaseDocCategoryTxt@1004 : TextConst '@@@={Locked};ENU=PURCHDOC';
      PurchaseDocApprovalDescriptionTxt@1002 : TextConst '@@@={Locked};ENU=Purchase Document Approval Workflow';
      PurchPayCategoryTxt@1012 : TextConst '@@@={Locked};ENU=PURCH';
      SalesDocCategoryTxt@1009 : TextConst '@@@={Locked};ENU=SALESDOC';
      SalesDocApprovalDescriptionTxt@1008 : TextConst '@@@={Locked};ENU=Sales Document Approval Workflow';
      SalesMktCategoryTxt@1000 : TextConst '@@@={Locked};ENU=SALES';
      UnsupportedWorkflowEventCodeErr@1003 : TextConst '@@@="%1=Workflow event code";ENU=Unsupported workflow event code ''%1''.';
      VendorApprovalDescriptionTxt@1011 : TextConst '@@@={Locked};ENU=Vendor Approval Workflow';

    PROCEDURE CreateWorkflowDefinition@5(EventCode@1000 : Code[128];Name@1003 : Text[100];EventConditions@1001 : Text;ResponseUserID@1004 : Code[50]) : Code[20];
    VAR
      WorkflowEventHandling@1002 : Codeunit "Workflow Event Handling";
    BEGIN
      case EventCode of
        WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode:
          exit(CreateCustomerApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode:
          exit(CreateItemApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode:
          exit(CreateGeneralJournalBatchApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode:
          exit(CreateGeneralJournalLineApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode:
          exit(CreatePurchaseDocumentApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode:
          exit(CreateSalesDocumentApprovalWorkflow(Name,EventConditions,ResponseUserID));
        WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode:
          exit(CreateVendorApprovalWorkflow(Name,EventConditions,ResponseUserID));
        else
          ERROR(STRSUBSTNO(UnsupportedWorkflowEventCodeErr,EventCode));
      end;
    END;

    LOCAL PROCEDURE CreateApprovalWorkflow@9(WorkflowCode@1004 : Code[20];Name@1002 : Text[100];Category@1005 : Code[20];EventCode@1009 : Code[128];EventConditions@1001 : Text;ResponseUserID@1010 : Code[50]);
    VAR
      DummyWorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry";
      WorkflowResponseHandling@1011 : Codeunit "Workflow Response Handling";
      WorkflowWebhookEvents@1006 : Codeunit "Workflow Webhook Events";
      WorkflowWebhookResponses@1012 : Codeunit "Workflow Webhook Responses";
      EmptyUserID@1014 : Code[50];
      NotificationEventConditions@1013 : Text;
      ParentStepID@1008 : Integer;
      StepID@1007 : Integer;
    BEGIN
      EmptyUserID := '';
      CLEAR(NotificationEventConditions);

      InitializeWorkflow(WorkflowCode,Name,Category);

      StepID := CreateEventStep(WorkflowCode,true,0,EventCode,1,EventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.RestrictRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.SetStatusToPendingApprovalCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowWebhookResponses.SendNotificationToWebhookCode,0,ResponseUserID);
      ParentStepID := StepID;

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Continue);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,2,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.AllowRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.ReleaseDocumentCode,0,EmptyUserID);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Reject);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,3,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.OpenDocumentCode,0,EmptyUserID);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Cancel);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,4,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.AllowRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.OpenDocumentCode,0,EmptyUserID);
    END;

    LOCAL PROCEDURE CreateCustomerItemApprovalWorkflow@23(WorkflowCode@1004 : Code[20];Name@1002 : Text[100];Category@1005 : Code[20];EventCode@1009 : Code[128];EventConditions@1001 : Text;ResponseUserID@1010 : Code[50]);
    VAR
      DummyWorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry";
      WorkflowResponseHandling@1011 : Codeunit "Workflow Response Handling";
      WorkflowWebhookEvents@1006 : Codeunit "Workflow Webhook Events";
      WorkflowWebhookResponses@1012 : Codeunit "Workflow Webhook Responses";
      EmptyUserID@1014 : Code[50];
      NotificationEventConditions@1013 : Text;
      ParentStepID@1008 : Integer;
      StepID@1007 : Integer;
    BEGIN
      EmptyUserID := '';
      CLEAR(NotificationEventConditions);

      InitializeWorkflow(WorkflowCode,Name,Category);

      StepID := CreateEventStep(WorkflowCode,true,0,EventCode,1,EventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.RestrictRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowWebhookResponses.SendNotificationToWebhookCode,0,ResponseUserID);
      ParentStepID := StepID;

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Continue);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,2,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.AllowRecordUsageCode,0,EmptyUserID);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Reject);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,3,
          NotificationEventConditions);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Cancel);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepID,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,4,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.AllowRecordUsageCode,0,EmptyUserID);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchApprovalWorkflowSteps@8(WorkflowCode@1004 : Code[20];Name@1002 : Text[100];Category@1005 : Code[20];EventCode@1009 : Code[128];EventConditions@1001 : Text;ResponseUserID@1010 : Code[50]);
    VAR
      WorkflowStep@1017 : Record "Workflow Step";
      WorkflowStepArgument@1018 : Record "Workflow Step Argument";
      WorkflowResponseHandling@1011 : Codeunit "Workflow Response Handling";
      WorkflowWebhookResponses@1012 : Codeunit "Workflow Webhook Responses";
      WorkflowEventHandling@1015 : Codeunit "Workflow Event Handling";
      WorkflowSetup@1019 : Codeunit "Workflow Setup";
      EmptyUserID@1014 : Code[50];
      ParentStepID@1008 : Integer;
      StepID@1007 : Integer;
      BalancedCodeParentStepID@1016 : Integer;
    BEGIN
      EmptyUserID := '';

      InitializeWorkflow(WorkflowCode,Name,Category);

      StepID := CreateEventStep(WorkflowCode,true,0,EventCode,1,EventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.CheckGeneralJournalBatchBalanceCode,0,EmptyUserID);
      BalancedCodeParentStepID := StepID;
      StepID := CreateEventStep(WorkflowCode,false,StepID,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode,0,'');
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.RestrictRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowWebhookResponses.SendNotificationToWebhookCode,0,ResponseUserID);
      ParentStepID := StepID;

      CreateGeneralJournalWorkflowNotificationSteps(WorkflowCode,ParentStepID);

      StepID :=
        CreateEventStep(
          WorkflowCode,false,BalancedCodeParentStepID,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchNotBalancedCode,0,
          '');
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.ShowMessageCode,0,EmptyUserID);

      WorkflowStep.SETRANGE(ID,StepID);
      WorkflowStep.FINDFIRST;
      WorkflowStepArgument.GET(WorkflowStep.Argument);
      WorkflowStepArgument.Message := WorkflowSetup.GetGeneralJournalBatchIsNotBalancedMsg;
      WorkflowStepArgument.MODIFY(true);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineApprovalWorkflowSteps@24(WorkflowCode@1004 : Code[20];Name@1002 : Text[100];Category@1005 : Code[20];EventCode@1009 : Code[128];EventConditions@1001 : Text;ResponseUserID@1010 : Code[50]);
    VAR
      WorkflowResponseHandling@1011 : Codeunit "Workflow Response Handling";
      WorkflowWebhookResponses@1012 : Codeunit "Workflow Webhook Responses";
      EmptyUserID@1014 : Code[50];
      ParentStepID@1008 : Integer;
      StepID@1007 : Integer;
    BEGIN
      EmptyUserID := '';

      InitializeWorkflow(WorkflowCode,Name,Category);

      StepID := CreateEventStep(WorkflowCode,true,0,EventCode,1,EventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.RestrictRecordUsageCode,0,EmptyUserID);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowWebhookResponses.SendNotificationToWebhookCode,0,ResponseUserID);
      ParentStepID := StepID;

      CreateGeneralJournalWorkflowNotificationSteps(WorkflowCode,ParentStepID);
    END;

    LOCAL PROCEDURE CreateArgumentForEvent@21(EventConditions@1002 : Text) : GUID;
    VAR
      WorkflowStepArgument@1005 : Record "Workflow Step Argument";
      OutStream@1003 : OutStream;
    BEGIN
      WorkflowStepArgument.INIT;
      WorkflowStepArgument.ID := CREATEGUID;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";

      if EventConditions <> '' then begin
        WorkflowStepArgument."Event Conditions".CREATEOUTSTREAM(OutStream);
        OutStream.WRITETEXT(EventConditions);
      end;

      WorkflowStepArgument.INSERT;
      exit(WorkflowStepArgument.ID);
    END;

    LOCAL PROCEDURE CreateArgumentForResponse@17(FunctionName@1000 : Code[128];ResponseUserID@1002 : Code[50]) : GUID;
    VAR
      WorkflowStepArgument@1005 : Record "Workflow Step Argument";
    BEGIN
      WorkflowStepArgument.INIT;
      WorkflowStepArgument.ID := CREATEGUID;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument."Response Function Name" := FunctionName;

      if ResponseUserID <> '' then begin
        WorkflowStepArgument."Response Type" := WorkflowStepArgument."Response Type"::"User ID";
        WorkflowStepArgument."Response User ID" := ResponseUserID;
      end;

      WorkflowStepArgument.INSERT;
      exit(WorkflowStepArgument.ID);
    END;

    LOCAL PROCEDURE CreateEventCondition@56(ResponseArgument@1000 : Option) : Text;
    VAR
      WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
      RequestPageParametersHelper@1004 : Codeunit "Request Page Parameters Helper";
      EventConditions@1002 : FilterPageBuilder;
    BEGIN
      CLEAR(WorkflowWebhookEntry);
      WorkflowWebhookEntry.SETFILTER(Response,'=%1',ResponseArgument);

      CLEAR(EventConditions);
      EventConditions.SETVIEW(EventConditions.ADDTABLE(GetTableCaption(DATABASE::"Workflow Webhook Entry"),
          DATABASE::"Workflow Webhook Entry"),WorkflowWebhookEntry.GETVIEW);

      exit(RequestPageParametersHelper.GetViewFromDynamicRequestPage(EventConditions,'',DATABASE::"Workflow Webhook Entry"));
    END;

    LOCAL PROCEDURE CreateEventStep@11(WorkflowCode@1000 : Code[20];IsEntryPoint@1001 : Boolean;PreviousStepID@1002 : Integer;FunctionName@1004 : Code[128];SequenceNumber@1005 : Integer;EventConditions@1006 : Text) : Integer;
    VAR
      WorkflowStep@1007 : Record "Workflow Step";
    BEGIN
      WorkflowStep.INIT;
      WorkflowStep."Workflow Code" := WorkflowCode;
      WorkflowStep."Entry Point" := IsEntryPoint;
      WorkflowStep."Previous Workflow Step ID" := PreviousStepID;
      WorkflowStep.Type := WorkflowStep.Type::"Event";
      WorkflowStep."Function Name" := FunctionName;
      WorkflowStep.Argument := CreateArgumentForEvent(EventConditions);
      WorkflowStep."Sequence No." := SequenceNumber;
      WorkflowStep.INSERT;

      exit(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE CreateResponseStep@25(WorkflowCode@1000 : Code[20];PreviousStepID@1002 : Integer;FunctionName@1004 : Code[128];SequenceNumber@1005 : Integer;ResponseUserID@1006 : Code[50]) : Integer;
    VAR
      WorkflowStep@1007 : Record "Workflow Step";
    BEGIN
      WorkflowStep.INIT;
      WorkflowStep."Workflow Code" := WorkflowCode;
      WorkflowStep."Entry Point" := false;
      WorkflowStep."Previous Workflow Step ID" := PreviousStepID;
      WorkflowStep.Type := WorkflowStep.Type::Response;
      WorkflowStep."Function Name" := FunctionName;
      WorkflowStep.Argument := CreateArgumentForResponse(FunctionName,ResponseUserID);
      WorkflowStep."Sequence No." := SequenceNumber;

      WorkflowStep.INSERT;
      exit(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE CreateCustomerApprovalWorkflow@12(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-CUSTAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := CustomerApprovalDescriptionTxt;

      CreateCustomerItemApprovalWorkflow(WorkflowCode,Name,SalesMktCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreateGeneralJournalWorkflowNotificationSteps@13(WorkflowCode@1003 : Code[20];ParentStepId@1004 : Integer);
    VAR
      DummyWorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
      WorkflowResponseHandling@1006 : Codeunit "Workflow Response Handling";
      WorkflowWebhookEvents@1005 : Codeunit "Workflow Webhook Events";
      EmptyUserID@1007 : Code[50];
      NotificationEventConditions@1000 : Text;
      StepID@1002 : Integer;
    BEGIN
      EmptyUserID := '';

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Continue);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepId,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,2,
          NotificationEventConditions);
      StepID := CreateResponseStep(WorkflowCode,StepID,WorkflowResponseHandling.AllowRecordUsageCode,0,EmptyUserID);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Reject);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepId,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,3,
          NotificationEventConditions);

      NotificationEventConditions := CreateEventCondition(DummyWorkflowWebhookEntry.Response::Cancel);
      StepID := CreateEventStep(WorkflowCode,false,ParentStepId,WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode,4,
          NotificationEventConditions);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchApprovalWorkflow@10(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-GJBAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := GeneralJournalBatchApprovalDescriptionTxt;

      CreateGeneralJournalBatchApprovalWorkflowSteps(WorkflowCode,Name,FinCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineApprovalWorkflow@15(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-GJLAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := GeneralJournaLineApprovalDescriptionTxt;

      CreateGeneralJournalLineApprovalWorkflowSteps(WorkflowCode,Name,FinCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreateItemApprovalWorkflow@16(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-ITEMAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := ItemApprovalDescriptionTxt;

      CreateCustomerItemApprovalWorkflow(WorkflowCode,Name,SalesMktCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentApprovalWorkflow@7(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-PDAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := PurchaseDocApprovalDescriptionTxt;

      CreateApprovalWorkflow(WorkflowCode,Name,PurchaseDocCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreateSalesDocumentApprovalWorkflow@32(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-SDAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := SalesDocApprovalDescriptionTxt;

      CreateApprovalWorkflow(WorkflowCode,Name,SalesDocCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE CreateVendorApprovalWorkflow@22(Name@1002 : Text[100];EventConditions@1001 : Text;ResponseUserID@1000 : Code[50]) WorkflowCode : Code[20];
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowEventHandling@1003 : Codeunit "Workflow Event Handling";
    BEGIN
      WorkflowCode := 'MS-VENDAW-WH-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);

      if Name = '' then
        Name := VendorApprovalDescriptionTxt;

      CreateCustomerItemApprovalWorkflow(WorkflowCode,Name,PurchPayCategoryTxt,
        WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode,EventConditions,ResponseUserID);

      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE GetTableCaption@4(TableID@1001 : Integer) : Text;
    VAR
      TableMetadata@1000 : Record "Table Metadata";
    BEGIN
      TableMetadata.GET(TableID);
      exit(TableMetadata.Caption);
    END;

    LOCAL PROCEDURE InitializeWorkflow@2(WorkflowCode@1004 : Text[20];Name@1006 : Text[100];Category@1005 : Code[20]);
    VAR
      Workflow@1003 : Record Workflow;
      WorkflowEvent@1002 : Record "Workflow Event";
      WorkflowSetup@1000 : Codeunit "Workflow Setup";
      WorkflowWebhookEvents@1001 : Codeunit "Workflow Webhook Events";
    BEGIN
      if not WorkflowEvent.GET(WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode) then
        WorkflowSetup.InitWorkflow;

      Workflow.INIT;
      Workflow.Code := WorkflowCode;
      Workflow.Description := Name;
      Workflow.Enabled := false;
      Workflow.Template := false;
      Workflow.Category := Category;
      Workflow.INSERT;
    END;

    PROCEDURE GetSalesDocCategoryTxt@1() : Code[20];
    BEGIN
      exit(SalesDocCategoryTxt);
    END;

    PROCEDURE GetPurchaseDocCategoryTxt@6() : Code[20];
    BEGIN
      exit(PurchaseDocCategoryTxt);
    END;

    PROCEDURE GetPurchPayCategoryTxt@18() : Code[20];
    BEGIN
      exit(PurchaseDocCategoryTxt);
    END;

    PROCEDURE GetFinCategoryTxt@14() : Code[20];
    BEGIN
      exit(FinCategoryTxt);
    END;

    PROCEDURE GetSalesMktCategoryTxt@19() : Code[20];
    BEGIN
      exit(SalesMktCategoryTxt);
    END;

    PROCEDURE GetUnsupportedWorkflowEventCodeErr@3() : Text;
    BEGIN
      exit(UnsupportedWorkflowEventCodeErr);
    END;

    BEGIN
    END.
  }
}

