OBJECT Codeunit 1204 Map Data Exch. To RapidStart
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempDataExchRapidStartBuffer@1000 : TEMPORARY Record "DataExch-RapidStart Buffer";
      TargetTableFieldDefinitionMustBeSpecifiedErr@1001 : TextConst 'ENU=You must specify a target table for the column definition.';

    [External]
    PROCEDURE ProcessAllLinesColumnMapping@12(DataExch@1001 : Record "Data Exch.";TargetRapidstartPackageCode@1002 : Code[20]);
    VAR
      DataExchLineDef@1000 : Record "Data Exch. Line Def";
    BEGIN
      TempDataExchRapidStartBuffer.RESET;
      TempDataExchRapidStartBuffer.DELETEALL;

      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
      DataExchLineDef.SETRANGE("Parent Code",'');
      if DataExchLineDef.FINDSET then
        repeat
          ProcessColumnMapping(DataExch,DataExchLineDef,TargetRapidstartPackageCode);
        until DataExchLineDef.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessColumnMapping@13(DataExch@1004 : Record "Data Exch.";DataExchLineDef@1001 : Record "Data Exch. Line Def";TargetRapidstartPackageCode@1008 : Code[20]);
    VAR
      DataExchField@1009 : Record "Data Exch. Field";
      NewConfigPackageRecord@1000 : Record "Config. Package Record";
      ChildDataExchLineDef@1012 : Record "Data Exch. Line Def";
      CurrentLineNo@1011 : Integer;
    BEGIN
      DataExchField.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      DataExchField.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);

      if not DataExchField.FINDSET then
        exit;

      CurrentLineNo := -1;

      repeat
        InsertRecordDefinition(DataExchField,DataExchLineDef,NewConfigPackageRecord,CurrentLineNo,TargetRapidstartPackageCode);
        InsertDataValues(DataExchField,DataExchLineDef,TargetRapidstartPackageCode,NewConfigPackageRecord);
      until DataExchField.NEXT = 0;

      // Process Child Line Definitions
      ChildDataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      ChildDataExchLineDef.SETRANGE("Parent Code",DataExchLineDef.Code);

      if not ChildDataExchLineDef.FINDSET then
        exit;

      repeat
        ProcessColumnMapping(DataExch,ChildDataExchLineDef,TargetRapidstartPackageCode);
      until ChildDataExchLineDef.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertRecordDefinition@3(DataExchField@1000 : Record "Data Exch. Field";DataExchLineDef@1003 : Record "Data Exch. Line Def";VAR NewConfigPackageRecord@1012 : Record "Config. Package Record";VAR CurrentLineNo@1002 : Integer;TargetRapidstartPackageCode@1005 : Code[20]);
    VAR
      DataExchFieldMapping@1001 : Record "Data Exch. Field Mapping";
      PreviousConfigPackageRecord@1004 : Record "Config. Package Record";
    BEGIN
      // Check if definition is already inserted
      if CurrentLineNo = DataExchField."Line No." then
        exit;

      // Find the table definition we need to write to.
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchFieldMapping.SETRANGE("Table ID",DATABASE::"Config. Package Data");
      DataExchFieldMapping.SETFILTER("Column No.",'>0');
      if not DataExchFieldMapping.FINDFIRST then
        ERROR(TargetTableFieldDefinitionMustBeSpecifiedErr);

      CurrentLineNo := DataExchField."Line No.";

      // Initialize new record
      CLEAR(NewConfigPackageRecord);
      NewConfigPackageRecord.INIT;
      NewConfigPackageRecord.VALIDATE("Package Code",TargetRapidstartPackageCode);
      NewConfigPackageRecord.VALIDATE("Table ID",DataExchFieldMapping."Target Table ID");

      // Get last used No.
      PreviousConfigPackageRecord.INIT;
      PreviousConfigPackageRecord.SETRANGE("Table ID",DataExchFieldMapping."Target Table ID");
      PreviousConfigPackageRecord.SETRANGE("Package Code",TargetRapidstartPackageCode);
      if PreviousConfigPackageRecord.FINDLAST then
        NewConfigPackageRecord.VALIDATE("No.",PreviousConfigPackageRecord."No." + 1)
      else
        NewConfigPackageRecord.VALIDATE("No.",1);

      if DataExchField."Parent Node ID" <> '' then begin
        TempDataExchRapidStartBuffer.SETRANGE("Node ID",DataExchField."Parent Node ID");
        TempDataExchRapidStartBuffer.FINDFIRST;
        NewConfigPackageRecord.VALIDATE("Parent Record No.",TempDataExchRapidStartBuffer."RapidStart No.");
      end;

      NewConfigPackageRecord.INSERT;

      // Update buffer with new line
      TempDataExchRapidStartBuffer.INIT;
      TempDataExchRapidStartBuffer."Node ID" := DataExchField."Node ID";
      TempDataExchRapidStartBuffer."RapidStart No." := NewConfigPackageRecord."No.";
      TempDataExchRapidStartBuffer.INSERT;
    END;

    LOCAL PROCEDURE InsertDataValues@6(DataExchField@1003 : Record "Data Exch. Field";DataExchLineDef@1002 : Record "Data Exch. Line Def";TargetRapidstartPackageCode@1004 : Code[20];ConfigPackageRecord@1005 : Record "Config. Package Record");
    VAR
      DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
      ConfigPackageData@1001 : Record "Config. Package Data";
    BEGIN
      if DataExchField."Column No." < 1 then
        exit;

      DataExchFieldMapping.GET(
        DataExchLineDef."Data Exch. Def Code",DataExchLineDef.Code,DATABASE::"Config. Package Data",DataExchField."Column No.");

      ConfigPackageData.INIT;
      ConfigPackageData.VALIDATE("Package Code",TargetRapidstartPackageCode);
      ConfigPackageData.VALIDATE("Table ID",DataExchFieldMapping."Target Table ID");
      ConfigPackageData.VALIDATE("No.",ConfigPackageRecord."No.");
      ConfigPackageData.VALIDATE("Field ID",DataExchFieldMapping."Target Field ID");
      ConfigPackageData.VALIDATE(Value,DataExchField.Value);
      ConfigPackageData.INSERT(true);
    END;

    BEGIN
    END.
  }
}

