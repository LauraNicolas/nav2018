OBJECT Codeunit 5347 Integration Rec. Delete Invoke
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CheckContext;
            DeleteRecord(IntegrationTableMappingContext,DestinationRecordRefContext,SynchActionContext,
              JobIdContext);
          END;

  }
  CODE
  {
    VAR
      IntegrationTableMappingContext@1015 : Record "Integration Table Mapping";
      DestinationRecordRefContext@1013 : RecordRef;
      JobIdContext@1009 : GUID;
      SynchActionType@1000 : 'None,Insert,Modify,ForceModify,IgnoreUnchanged,Fail,Skip,Delete';
      SynchActionContext@1011 : Option;
      IsContextInitialized@1017 : Boolean;
      ContextErr@1018 : TextConst 'ENU=The integration record synchronization context has not been initialized.';

    [External]
    PROCEDURE SetContext@4(IntegrationTableMapping@1006 : Record "Integration Table Mapping";DestinationRecordRef@1004 : RecordRef;SynchAction@1007 : Option;JobId@1008 : GUID);
    BEGIN
      IntegrationTableMappingContext := IntegrationTableMapping;
      DestinationRecordRefContext := DestinationRecordRef;
      SynchActionContext := SynchAction;
      JobIdContext := JobId;
      IsContextInitialized := true;
    END;

    [External]
    PROCEDURE GetContext@3(VAR IntegrationTableMapping@1006 : Record "Integration Table Mapping";VAR DestinationRecordRef@1004 : RecordRef;VAR SynchAction@1000 : Option);
    BEGIN
      CheckContext;
      IntegrationTableMapping := IntegrationTableMappingContext;
      DestinationRecordRef := DestinationRecordRefContext;
      SynchAction := SynchActionContext;
    END;

    LOCAL PROCEDURE CheckContext@5();
    BEGIN
      if not IsContextInitialized then
        ERROR(ContextErr);
    END;

    LOCAL PROCEDURE DeleteRecord@9(VAR IntegrationTableMapping@1006 : Record "Integration Table Mapping";VAR DestinationRecordRef@1004 : RecordRef;SynchAction@1000 : Option;JobId@1008 : GUID);
    BEGIN
      if SynchAction = SynchActionType::Fail then
        exit;

      if SynchAction <> SynchActionType::Delete then
        exit;

      OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef);

      if not DestinationRecordRef.DELETE then
        LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);

      OnAfterDeleteRecord(IntegrationTableMapping,DestinationRecordRef);
      COMMIT;
    END;

    LOCAL PROCEDURE LogSynchError@30(VAR DestinationRecordRef@1001 : RecordRef;ErrorMessage@1002 : Text;JobId@1005 : GUID);
    VAR
      IntegrationSynchJobErrors@1003 : Record "Integration Synch. Job Errors";
      EmptyRecordID@1000 : RecordID;
    BEGIN
      EVALUATE(EmptyRecordID,'');
      if DestinationRecordRef.NUMBER <> 0 then begin
        IntegrationSynchJobErrors.LogSynchError(JobId,EmptyRecordID,DestinationRecordRef.RECORDID,ErrorMessage);
        // Close destination - it is in error state and can no longer be used.
        DestinationRecordRef.CLOSE;
      end;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeDeleteRecord@27(IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterDeleteRecord@28(IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    BEGIN
    END.
  }
}

