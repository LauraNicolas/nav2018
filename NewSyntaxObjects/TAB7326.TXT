OBJECT Table 7326 Whse. Worksheet Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               WhseWkshTemplate@1001 : Record "Whse. Worksheet Template";
               ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
             BEGIN
               WhseWkshTemplate.GET("Worksheet Template Name");
               if WhseWkshTemplate.Type = WhseWkshTemplate.Type::Movement then begin
                 UpdateMovActivLines;
                 ItemTrackingMgt.DeleteWhseItemTrkgLines(
                   DATABASE::"Whse. Worksheet Line",0,Name,"Worksheet Template Name",0,"Line No.","Location Code",true);
               end;
             END;

    CaptionML=ENU=Whse. Worksheet Line;
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Whse. Worksheet Template";
                                                   CaptionML=ENU=Worksheet Template Name;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Code10        ;CaptionML=ENU=Name;
                                                   NotBlank=true }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 4   ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=false }
    { 5   ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No.;
                                                   Editable=false }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 8   ;   ;Source Subline No.  ;Integer       ;CaptionML=ENU=Source Subline No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,,,,,,,,,Assembly Consumption,Assembly Order;
                                                   OptionString=,"Sales Order",,,"Sales Return Order","Purchase Order",,,"Purchase Return Order","Inbound Transfer","Outbound Transfer","Prod. Consumption",,,,,,,,,"Assembly Consumption","Assembly Order";
                                                   BlankZero=true;
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;From Zone Code      ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "From Zone Code" <> xRec."From Zone Code" then
                                                                  "From Bin Code" := '';
                                                              END;

                                                   CaptionML=ENU=From Zone Code }
    { 13  ;   ;From Bin Code       ;Code20        ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit "WMS Management";
                                                              BEGIN
                                                                if "From Bin Code" <> '' then
                                                                  WMSMgt.FindBinContent("Location Code","From Bin Code","Item No.","Variant Code","From Zone Code");

                                                                if CurrFieldNo = FIELDNO("From Bin Code") then
                                                                  CheckBin("Location Code","From Bin Code",false);

                                                                if "From Bin Code" <> '' then begin
                                                                  GetBin("Location Code","From Bin Code");
                                                                  "From Zone Code" := Bin."Zone Code";
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSMgt@1000 : Codeunit "WMS Management";
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              BinCode := WMSMgt.BinContentLookUp("Location Code","Item No.","Variant Code","From Zone Code","From Bin Code");
                                                              if BinCode <> '' then
                                                                VALIDATE("From Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=From Bin Code }
    { 14  ;   ;To Bin Code         ;Code20        ;TableRelation=IF ("To Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                Code=FIELD("To Bin Code"))
                                                                                                                ELSE IF ("To Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                      "Zone Code"=FIELD("To Zone Code"),
                                                                                                                                                                      Code=FIELD("To Bin Code"));
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("To Bin Code") then
                                                                  CheckBin("Location Code","To Bin Code",true);

                                                                if "To Bin Code" <> '' then begin
                                                                  GetBin("Location Code","To Bin Code");
                                                                  "To Zone Code" := Bin."Zone Code";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=To Bin Code }
    { 15  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "To Zone Code" <> xRec."To Zone Code" then
                                                                  "To Bin Code" := '';
                                                              END;

                                                   CaptionML=ENU=To Zone Code }
    { 16  ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 17  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                if Quantity < "Qty. Handled" then
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text010,"Qty. Handled"));

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Handled"));

                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 18  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Handle","Qty. Outstanding");
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 21  ;   ;Qty. to Handle      ;Decimal       ;OnValidate=VAR
                                                                WhseWkshTemplate@1002 : Record "Whse. Worksheet Template";
                                                                Confirmed@1000 : Boolean;
                                                                AvailableQty@1001 : Decimal;
                                                              BEGIN
                                                                if "Qty. to Handle" > "Qty. Outstanding" then
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. Outstanding");

                                                                "Qty. to Handle (Base)" := CalcBaseQty("Qty. to Handle");
                                                                if "Qty. to Handle (Base)" > 0 then begin
                                                                  WhseWkshTemplate.GET("Worksheet Template Name");
                                                                  if WhseWkshTemplate.Type = WhseWkshTemplate.Type::Pick then begin
                                                                    Confirmed := true;
                                                                    if (CurrFieldNo = FIELDNO("Qty. to Handle")) and
                                                                       ("Shipping Advice" = "Shipping Advice"::Complete) and
                                                                       ("Qty. to Handle" <> "Qty. Outstanding")
                                                                    then
                                                                      Confirmed := CONFIRM(
                                                                          Text001 +
                                                                          Text002,
                                                                          false,
                                                                          FIELDCAPTION("Shipping Advice"),
                                                                          "Shipping Advice",
                                                                          FIELDCAPTION("Qty. to Handle"),
                                                                          "Qty. Outstanding");

                                                                    if not Confirmed then
                                                                      ERROR(Text003);

                                                                    GetLocation("Location Code");
                                                                    if Location."Bin Mandatory" then begin
                                                                      if CurrFieldNo <> FIELDNO("Qty. to Handle") then begin
                                                                        AvailableQty := CheckAvailableQtyBase;
                                                                        if not Location."Always Create Pick Line" then
                                                                          if "Qty. to Handle (Base)" > AvailableQty then begin
                                                                            if ("Shipping Advice" = "Shipping Advice"::Complete) or
                                                                               (AvailableQty < 0)
                                                                            then
                                                                              "Qty. to Handle (Base)" := 0
                                                                            else
                                                                              "Qty. to Handle (Base)" := AvailableQty;
                                                                          end;
                                                                      end
                                                                    end else begin
                                                                      AvailableQty := CheckAvailableQtyBase;
                                                                      if "Qty. to Handle (Base)" > AvailableQty then begin
                                                                        if ("Shipping Advice" = "Shipping Advice"::Complete) or
                                                                           (AvailableQty < 0)
                                                                        then
                                                                          "Qty. to Handle (Base)" := 0
                                                                        else
                                                                          "Qty. to Handle (Base)" := AvailableQty;

                                                                        if (not HideValidationDialog) and (CurrFieldNo = FIELDNO("Qty. to Handle")) then
                                                                          ERROR(
                                                                            Text004,
                                                                            AvailableQty);
                                                                      end;
                                                                    end;
                                                                  end else
                                                                    if WhseWkshTemplate.Type = WhseWkshTemplate.Type::Movement then
                                                                      if CurrFieldNo <> FIELDNO("Qty. to Handle") then begin
                                                                        AvailableQty := CheckAvailQtytoMove;
                                                                        if AvailableQty < 0 then
                                                                          "Qty. to Handle (Base)" := 0
                                                                        else
                                                                          if "Qty. to Handle (Base)" > AvailableQty then
                                                                            "Qty. to Handle (Base)" := AvailableQty;
                                                                      end;

                                                                  CheckBin("Location Code","From Bin Code",false);
                                                                  CheckBin("Location Code","To Bin Code",true);
                                                                end;

                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                if "Qty. to Handle (Base)" = "Qty. Outstanding (Base)" then
                                                                  "Qty. to Handle" := "Qty. Outstanding"
                                                                else
                                                                  "Qty. to Handle" := ROUND("Qty. to Handle (Base)" / "Qty. per Unit of Measure",0.00001);
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Handle","Qty. to Handle (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle (Base);
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Handled        ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Handled (Base)" := CalcBaseQty("Qty. Handled");
                                                                VALIDATE("Qty. Outstanding",Quantity - "Qty. Handled");
                                                              END;

                                                   CaptionML=ENU=Qty. Handled;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Handled (Base) ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Handled" := CalcQty("Qty. Handled (Base)");
                                                                VALIDATE("Qty. Outstanding",Quantity - "Qty. Handled");
                                                              END;

                                                   CaptionML=ENU=Qty. Handled (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;From Unit of Measure Code;Code10   ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                FromItemUnitOfMeasure@1000 : Record "Item Unit of Measure";
                                                              BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  if not FromItemUnitOfMeasure.GET(Item."No.","From Unit of Measure Code") then
                                                                    FromItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
                                                                  "Qty. per From Unit of Measure" := FromItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per From Unit of Measure" := 1;
                                                              END;

                                                   CaptionML=ENU=From Unit of Measure Code;
                                                   NotBlank=true }
    { 28  ;   ;Qty. per From Unit of Measure;Decimal;
                                                   InitValue=1;
                                                   CaptionML=ENU=Qty. per From Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;

                                                                "From Unit of Measure Code" := "Unit of Measure Code";
                                                                "Qty. per From Unit of Measure" := "Qty. per Unit of Measure";
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   NotBlank=true }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" <> '' then begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end else
                                                                  GetItem("Item No.",Description);
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=ENU=Destination Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Location";
                                                   OptionString=" ",Customer,Vendor,Location;
                                                   Editable=false }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF ("Destination Type"=CONST(Customer)) Customer."No."
                                                                 ELSE IF ("Destination Type"=CONST(Vendor)) Vendor."No."
                                                                 ELSE IF ("Destination Type"=CONST(Location)) Location.Code;
                                                   CaptionML=ENU=Destination No.;
                                                   Editable=false }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 43  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 44  ;   ;Shipping Advice     ;Option        ;CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete;
                                                   Editable=false }
    { 45  ;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 46  ;   ;Whse. Document Type ;Option        ;CaptionML=ENU=Whse. Document Type;
                                                   OptionCaptionML=ENU=" ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Whse. Mov.-Worksheet,Internal Movement,Assembly";
                                                   OptionString=" ",Receipt,Shipment,"Internal Put-away","Internal Pick",Production,"Whse. Mov.-Worksheet","Internal Movement",Assembly;
                                                   Editable=false }
    { 47  ;   ;Whse. Document No.  ;Code20        ;TableRelation=IF ("Whse. Document Type"=CONST(Receipt)) "Posted Whse. Receipt Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Shipment)) "Warehouse Shipment Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Put-away")) "Whse. Internal Put-away Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Pick")) "Whse. Internal Pick Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Production)) "Production Order"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Assembly)) "Assembly Header"."No." WHERE ("Document Type"=CONST(Order),
                                                                                                                                                "No."=FIELD("Whse. Document No."));
                                                   CaptionML=ENU=Whse. Document No.;
                                                   Editable=false }
    { 48  ;   ;Whse. Document Line No.;Integer    ;TableRelation=IF ("Whse. Document Type"=CONST(Receipt)) "Posted Whse. Receipt Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                         "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                         ELSE IF ("Whse. Document Type"=CONST(Shipment)) "Warehouse Shipment Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                     "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                     ELSE IF ("Whse. Document Type"=CONST("Internal Put-away")) "Whse. Internal Put-away Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                                                                                                                                 "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                                                                                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Pick")) "Whse. Internal Pick Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE IF ("Whse. Document Type"=CONST(Production)) "Prod. Order Line"."Line No." WHERE (Status=CONST(Released),
rod. Order No."=FIELD("Whse. Document No."),
ine No."=FIELD("Line No."))
hse. Document Type"=CONST(Assembly)) "Assembly Line"."Line No." WHERE ("Document Type"=CONST(Order),
ocument No."=FIELD("Whse. Document No."),
ine No."=FIELD("Whse. Document Line No."));
                                                   CaptionML=ENU=Whse. Document Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Worksheet Template Name",Name,"Location Code","Line No.";
                                                   Clustered=true }
    {    ;"Worksheet Template Name",Name,"Location Code","Sorting Sequence No." }
    {    ;"Item No.","Location Code","Worksheet Template Name","Variant Code","Unit of Measure Code";
                                                   SumIndexFields="Qty. to Handle (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Whse. Document Type","Whse. Document No.","Whse. Document Line No." }
    {    ;"Worksheet Template Name",Name,"Location Code","Item No.";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name",Name,"Location Code","Due Date";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name",Name,"Location Code","Destination Type","Destination No.";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name",Name,"Location Code","Source Document","Source No.";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name",Name,"Location Code","To Bin Code";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name",Name,"Location Code","Shelf No.";
                                                   MaintainSQLIndex=false }
    {    ;"Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No." }
    {    ;"Item No.","From Bin Code","Location Code","Variant Code","From Unit of Measure Code";
                                                   SumIndexFields="Qty. to Handle","Qty. to Handle (Base)";
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.';
      Text001@1003 : TextConst 'ENU=%1 is set to %2. %3 should be %4.\\';
      Text002@1002 : TextConst 'ENU=Accept the entered value?';
      Text003@1001 : TextConst 'ENU=The update was interrupted to respect the warning.';
      WhseWorksheetLine@1018 : Record "Whse. Worksheet Line";
      Location@1005 : Record Location;
      Item@1011 : Record Item;
      Bin@1006 : Record Bin;
      BinType@1017 : Record "Bin Type";
      ItemUnitOfMeasure@1014 : Record "Item Unit of Measure";
      Text004@1004 : TextConst 'ENU=You cannot handle more than the available %1 units.';
      Text005@1008 : TextConst 'ENU=DEFAULT';
      Text006@1007 : TextConst 'ENU=Default %1 Worksheet';
      Text007@1009 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      Text008@1010 : TextConst 'ENU=%1 Worksheet';
      Text009@1012 : TextConst 'ENU=The location %1 of %2 %3 is not enabled for user %4.';
      Text010@1013 : TextConst 'ENU=must not be less than %1 units';
      CreatePick@1021 : Codeunit "Create Pick";
      WhseAvailMgt@1023 : Codeunit "Warehouse Availability Mgt.";
      LastLineNo@1019 : Integer;
      HideValidationDialog@1015 : Boolean;
      Text011@1016 : TextConst 'ENU=Quantity available to pick is not enough to fill in all the lines.';
      OpenFromBatch@1022 : Boolean;
      CurrentFieldNo@1020 : Integer;

    [External]
    PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE AutofillQtyToHandle@10(VAR WhseWkshLine@1000 : Record "Whse. Worksheet Line");
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      with WhseWkshLine do begin
        NotEnough := false;
        SetHideValidationDialog(true);
        LOCKTABLE;
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Handle","Qty. Outstanding");
            MODIFY;
            if not NotEnough then
              if "Qty. to Handle" < "Qty. Outstanding" then
                NotEnough := true;
          until NEXT = 0;
        SetHideValidationDialog(false);
        if NotEnough then
          MESSAGE(Text011);
      end;
    END;

    [External]
    PROCEDURE DeleteQtyToHandle@11(VAR WhseWkshLine@1000 : Record "Whse. Worksheet Line");
    BEGIN
      with WhseWkshLine do begin
        LOCKTABLE;
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Handle",0);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckAvailableQtyBase@2() AvailableQtyToPickBase : Decimal;
    BEGIN
      AvailableQtyToPickBase := CalcAvailableQtyBase(false);
      if FIELDNO("Qty. to Handle") in [CurrFieldNo,CurrentFieldNo] then
        AvailableQtyToPickBase += xRec."Qty. to Handle (Base)";
    END;

    LOCAL PROCEDURE AssignedQtyOnReservedLines@29() : Decimal;
    VAR
      WhseWkshLine@1000 : Record "Whse. Worksheet Line";
      TempWhseActivLine@1002 : TEMPORARY Record "Warehouse Activity Line";
      LineReservedQtyBase@1001 : Decimal;
      TotalReservedAndAssignedBase@1003 : Decimal;
      ReservedAndAssignedBase@1004 : Decimal;
    BEGIN
      WhseWkshLine.SETCURRENTKEY(
        "Item No.","Location Code","Worksheet Template Name","Variant Code");
      WhseWkshLine.SETRANGE("Item No.","Item No.");
      WhseWkshLine.SETRANGE("Location Code","Location Code");
      WhseWkshLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      WhseWkshLine.SETRANGE("Variant Code","Variant Code");
      if WhseWkshLine.FIND('-') then
        repeat
          LineReservedQtyBase :=
            ABS(
              WhseAvailMgt.CalcLineReservedQtyOnInvt(
                WhseWkshLine."Source Type",WhseWkshLine."Source Subtype",
                WhseWkshLine."Source No.",WhseWkshLine."Source Line No.",
                WhseWkshLine."Source Subline No.",
                true,'','',TempWhseActivLine));
          if LineReservedQtyBase > 0 then begin
            if LineReservedQtyBase <= WhseWkshLine."Qty. to Handle (Base)" then
              ReservedAndAssignedBase := LineReservedQtyBase
            else
              ReservedAndAssignedBase := WhseWkshLine."Qty. to Handle (Base)";
            TotalReservedAndAssignedBase := TotalReservedAndAssignedBase + ReservedAndAssignedBase;
          end;
        until WhseWkshLine.NEXT = 0;
      exit(TotalReservedAndAssignedBase);
    END;

    [External]
    PROCEDURE CalcAvailableQtyBase@1(ExcludeLine@1102601000 : Boolean) AvailableQty@1000 : Decimal;
    VAR
      Item2@1002 : Record Item;
      TempWhseActivLine@1001 : TEMPORARY Record "Warehouse Activity Line";
      AvailQtyBase@1003 : Decimal;
      QtyAssgndOnWkshBase@1006 : Decimal;
      QtyReservedOnPickShip@1007 : Decimal;
    BEGIN
      GetItem("Item No.",Description);
      Item2 := Item;
      GetLocation("Location Code");

      if Location."Directed Put-away and Pick" then begin
        Item2.SETRANGE("Location Filter","Location Code");
        Item2.SETRANGE("Variant Filter","Variant Code");
        Item2.CALCFIELDS("Reserved Qty. on Inventory");
        QtyReservedOnPickShip :=
          WhseAvailMgt.CalcReservQtyOnPicksShips("Location Code","Item No.","Variant Code",TempWhseActivLine);
        QtyAssgndOnWkshBase := WhseAvailMgt.CalcQtyAssgndOnWksh(Rec,not Location."Allow Breakbulk",ExcludeLine);
        AvailQtyBase :=
          CreatePick.CalcTotalAvailQtyToPick(
            "Location Code","Item No.","Variant Code",'','',"Source Type","Source Subtype","Source No.","Source Line No.",
            "Source Subline No.","Qty. to Handle (Base)",false);
      end else begin
        if Location."Require Pick" then
          QtyReservedOnPickShip :=
            WhseAvailMgt.CalcReservQtyOnPicksShips("Location Code","Item No.","Variant Code",TempWhseActivLine) +
            QtyReservedOnPickShip;

        QtyAssgndOnWkshBase := WhseAvailMgt.CalcQtyAssgndOnWksh(Rec,true,false);
        AvailQtyBase := WhseAvailMgt.CalcInvtAvailQty(Item2,Location,"Variant Code",TempWhseActivLine) + QtyReservedOnPickShip;
      end;

      AvailableQty := AvailQtyBase - QtyAssgndOnWkshBase + AssignedQtyOnReservedLines;
    END;

    PROCEDURE CalcReservedNotFromILEQty@41(QtyBaseAvailToPick@1002 : Decimal;VAR QtyToPick@1001 : Decimal;VAR QtyToPickBase@1000 : Decimal);
    BEGIN
      CreatePick.CheckReservation(
        QtyBaseAvailToPick,"Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",false,
        "Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
    END;

    LOCAL PROCEDURE CalcAvailWhseQtyBase@6(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];UOMCode@1003 : Code[10]) : Decimal;
    VAR
      WhseEntry@1004 : Record "Warehouse Entry";
      WhseActivLine@1005 : Record "Warehouse Activity Line";
      WhseJnlLine@1006 : Record "Warehouse Journal Line";
      BinType@1008 : Record "Bin Type";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      BinTypeFilter@1007 : Text[250];
      LNRequired@1010 : Boolean;
      SNRequired@1011 : Boolean;
    BEGIN
      BinType.CreateBinTypeFilter(BinTypeFilter,3);
      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,false);

      WhseEntry.SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code","Unit of Measure Code");
      WhseEntry.SETRANGE("Item No.",ItemNo);
      WhseEntry.SETRANGE("Location Code",LocationCode);
      WhseEntry.SETRANGE("Variant Code",VariantCode);
      if not Location."Allow Breakbulk" then
        WhseEntry.SETRANGE("Unit of Measure Code",UOMCode);
      WhseEntry.SETFILTER("Bin Type Code",BinTypeFilter);
      WhseEntry.CALCSUMS("Qty. (Base)");

      WhseActivLine.SETCURRENTKEY(
        "Item No.","Location Code","Activity Type","Bin Type Code",
        "Unit of Measure Code","Variant Code","Breakbulk No.","Action Type");
      WhseActivLine.SETRANGE("Item No.",ItemNo);
      WhseActivLine.SETRANGE("Location Code",LocationCode);
      WhseActivLine.SETFILTER("Bin Type Code",BinTypeFilter);
      WhseActivLine.SETRANGE("Variant Code",VariantCode);
      if not Location."Allow Breakbulk" then
        WhseActivLine.SETRANGE("Unit of Measure Code",UOMCode)
      else
        WhseActivLine.SETRANGE("Breakbulk No.",0);
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
      WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");

      WhseJnlLine.SETCURRENTKEY(
        "Item No.","Location Code","Entry Type","From Bin Type Code","Variant Code","Unit of Measure Code");
      WhseJnlLine.SETRANGE("Item No.",ItemNo);
      WhseJnlLine.SETRANGE("Location Code",LocationCode);
      WhseJnlLine.SETRANGE("Variant Code",VariantCode);
      WhseJnlLine.SETRANGE("Entry Type",WhseJnlLine."Entry Type"::"Negative Adjmt.");
      WhseJnlLine.SETFILTER("From Bin Type Code",BinTypeFilter);
      if not Location."Allow Breakbulk" then
        WhseJnlLine.SETRANGE("Unit of Measure Code",UOMCode);
      WhseJnlLine.CALCSUMS("Qty. (Absolute, Base)");

      exit(
        WhseEntry."Qty. (Base)" - WhseActivLine."Qty. Outstanding (Base)" -
        CreatePick.CalcBreakbulkOutstdQty(WhseActivLine,LNRequired,SNRequired) -
        WhseJnlLine."Qty. (Absolute, Base)");
    END;

    [External]
    PROCEDURE CheckAvailQtytoMove@25() AvailableQtyToMoveBase@1000 : Decimal;
    BEGIN
      AvailableQtyToMoveBase := CalcAvailQtyToMove + xRec."Qty. to Handle (Base)";
    END;

    LOCAL PROCEDURE CalcAvailQtyToMove@23() : Decimal;
    VAR
      BinContent@1000 : Record "Bin Content";
      WhseWkshLine@1002 : Record "Whse. Worksheet Line";
      QtyAvailToMoveBase@1001 : Decimal;
    BEGIN
      if ("Location Code" <> '') and ("From Bin Code" <> '') and
         ("Item No." <> '') and ("From Unit of Measure Code" <> '')
      then begin
        GetLocation("Location Code");
        if BinContent.GET(
             "Location Code","From Bin Code","Item No.","Variant Code","From Unit of Measure Code")
        then begin
          QtyAvailToMoveBase := BinContent.CalcQtyAvailToTake(0);
          WhseWkshLine.SETCURRENTKEY(
            "Item No.","From Bin Code","Location Code","Variant Code","From Unit of Measure Code");
          WhseWkshLine.SETRANGE("Item No.","Item No.");
          WhseWkshLine.SETRANGE("From Bin Code","From Bin Code");
          WhseWkshLine.SETRANGE("Location Code","Location Code");
          WhseWkshLine.SETRANGE("Variant Code","Variant Code");
          WhseWkshLine.SETRANGE("From Unit of Measure Code","From Unit of Measure Code");
          WhseWkshLine.CALCSUMS("Qty. to Handle (Base)");
          QtyAvailToMoveBase := QtyAvailToMoveBase - WhseWkshLine."Qty. to Handle (Base)";
        end;
      end;
      exit(QtyAvailToMoveBase);
    END;

    [External]
    PROCEDURE SortWhseWkshLines@3(WhseWkshTemplate@1005 : Code[10];WhseWkshName@1002 : Code[10];LocationCode@1004 : Code[10];SortingMethod@1003 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To"');
    VAR
      WhseWkshLine@1001 : Record "Whse. Worksheet Line";
      SequenceNo@1000 : Integer;
    BEGIN
      WhseWkshLine.SETRANGE("Worksheet Template Name",WhseWkshTemplate);
      WhseWkshLine.SETRANGE(Name,WhseWkshName);
      WhseWkshLine.SETRANGE("Location Code",LocationCode);
      case SortingMethod of
        SortingMethod::Item:
          WhseWkshLine.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Item No.");
        SortingMethod::Document:
          WhseWkshLine.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Source Document","Source No.");
        SortingMethod::"Shelf/Bin No.":
          begin
            GetLocation(LocationCode);
            if Location."Bin Mandatory" then
              WhseWkshLine.SETCURRENTKEY(
                "Worksheet Template Name",Name,"Location Code","To Bin Code")
            else
              WhseWkshLine.SETCURRENTKEY(
                "Worksheet Template Name",Name,"Location Code","Shelf No.");
          end;
        SortingMethod::"Due Date":
          WhseWkshLine.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Due Date");
        SortingMethod::"Ship-To":
          WhseWkshLine.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Destination Type","Destination No.");
      end;

      if WhseWkshLine.FIND('-') then begin
        SequenceNo := 10000;
        repeat
          WhseWkshLine."Sorting Sequence No." := SequenceNo;
          WhseWkshLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        until WhseWkshLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetLocation@4(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then begin
        if LocationCode = '' then
          Location.GetLocationSetup(LocationCode,Location)
        else
          Location.GET(LocationCode);
      end;
    END;

    [External]
    PROCEDURE GetItem@13(ItemNo@1000 : Code[20];VAR ItemDescription@1001 : Text[50]);
    BEGIN
      if ItemNo = '' then
        ItemDescription := ''
      else
        if ItemNo <> Item."No." then begin
          ItemDescription := '';
          if Item.GET(ItemNo) then
            ItemDescription := Item.Description;
        end else
          ItemDescription := Item.Description;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem("Item No.",Description);
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetBin@19(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      if (LocationCode = '') or (BinCode = '') then
        CLEAR(Bin)
      else
        if (Bin."Location Code" <> LocationCode) or
           (Bin.Code <> BinCode)
        then
          Bin.GET(LocationCode,BinCode);
    END;

    [External]
    PROCEDURE CheckBin@17(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Inbound@1002 : Boolean);
    VAR
      WhseWkshTemplate@1008 : Record "Whse. Worksheet Template";
      BinContent@1006 : Record "Bin Content";
      WMSMgt@1003 : Codeunit "WMS Management";
      Cubage@1004 : Decimal;
      Weight@1005 : Decimal;
    BEGIN
      GetLocation(LocationCode);
      if not Location."Directed Put-away and Pick" then
        exit;

      GetBin(LocationCode,BinCode);
      Bin.CALCFIELDS("Adjustment Bin");
      Bin.TESTFIELD("Adjustment Bin",false);
      if (BinCode <> '') and ("Item No." <> '') then begin
        if Bin."Bin Type Code" <> '' then begin
          WhseWkshTemplate.GET("Worksheet Template Name");
          if WhseWkshTemplate.Type = WhseWkshTemplate.Type::Movement then begin
            GetBinType(Bin."Bin Type Code");
            BinType.TESTFIELD(Receive,false);
          end;
        end;

        if Inbound then begin
          WMSMgt.CalcCubageAndWeight(
            "Item No.","From Unit of Measure Code","Qty. to Handle",Cubage,Weight);
          if BinContent.GET(
               "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code")
          then
            BinContent.CheckIncreaseBinContent(
              "Qty. to Handle (Base)",0,0,0,Cubage,Weight,false,false)
          else
            Bin.CheckIncreaseBin(BinCode,"Item No.","Qty. to Handle",0,0,Cubage,Weight,false,false);
        end else begin
          BinContent.GET(
            "Location Code",BinCode,"Item No.","Variant Code","From Unit of Measure Code");
          if BinContent."Block Movement" in [
                                             BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
          then
            BinContent.FIELDERROR("Block Movement");
        end;
      end;
    END;

    LOCAL PROCEDURE GetBinType@26(BinTypeCode@1000 : Code[10]);
    BEGIN
      if BinTypeCode = '' then
        BinType.INIT
      else
        if BinType.Code <> BinTypeCode then
          BinType.GET(BinTypeCode);
    END;

    [External]
    PROCEDURE PutAwayCreate@8(VAR WhsePutAwayWkshLine@1000 : Record "Whse. Worksheet Line");
    VAR
      CreatePutAwayFromWhseSource@1001 : Report "Whse.-Source - Create Document";
    BEGIN
      CreatePutAwayFromWhseSource.SetWhseWkshLine(WhsePutAwayWkshLine);
      CreatePutAwayFromWhseSource.RUNMODAL;
      CreatePutAwayFromWhseSource.GetResultMessage(1);
      CLEAR(CreatePutAwayFromWhseSource);
    END;

    [External]
    PROCEDURE MovementCreate@22(VAR WhseWkshLine@1000 : Record "Whse. Worksheet Line");
    VAR
      CreateMovFromWhseSource@1001 : Report "Whse.-Source - Create Document";
    BEGIN
      CreateMovFromWhseSource.SetWhseWkshLine(WhseWkshLine);
      CreateMovFromWhseSource.RUNMODAL;
      CreateMovFromWhseSource.GetResultMessage(3);
      CLEAR(CreateMovFromWhseSource);
    END;

    [External]
    PROCEDURE TemplateSelection@16(PageID@1006 : Integer;PageTemplate@1000 : '"Put-away",Pick,Movement';VAR WhseWkshLine@1005 : Record "Whse. Worksheet Line";VAR WhseWkshSelected@1001 : Boolean);
    VAR
      WhseWkshTemplate@1002 : Record "Whse. Worksheet Template";
    BEGIN
      WhseWkshSelected := true;

      WhseWkshTemplate.RESET;
      WhseWkshTemplate.SETRANGE("Page ID",PageID);
      WhseWkshTemplate.SETRANGE(Type,PageTemplate);

      case WhseWkshTemplate.COUNT of
        0:
          begin
            WhseWkshTemplate.INIT;
            WhseWkshTemplate.VALIDATE(Type,PageTemplate);
            WhseWkshTemplate.VALIDATE("Page ID");
            WhseWkshTemplate.Name :=
              FORMAT(WhseWkshTemplate.Type,MAXSTRLEN(WhseWkshTemplate.Name));
            WhseWkshTemplate.Description := STRSUBSTNO(Text008,WhseWkshTemplate.Type);
            WhseWkshTemplate.INSERT;
            COMMIT;
          end;
        1:
          WhseWkshTemplate.FINDFIRST;
        else
          WhseWkshSelected := PAGE.RUNMODAL(0,WhseWkshTemplate) = ACTION::LookupOK;
      end;
      if WhseWkshSelected then begin
        WhseWkshLine.FILTERGROUP := 2;
        WhseWkshLine.SETRANGE("Worksheet Template Name",WhseWkshTemplate.Name);
        WhseWkshLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          WhseWkshLine."Worksheet Template Name" := '';
          PAGE.RUN(WhseWkshTemplate."Page ID",WhseWkshLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@36(VAR WhseWkshName@1003 : Record "Whse. Worksheet Name");
    VAR
      WhseWkshLine@1000 : Record "Whse. Worksheet Line";
      WhseWkshTemplate@1002 : Record "Whse. Worksheet Template";
    BEGIN
      OpenFromBatch := true;
      WhseWkshTemplate.GET(WhseWkshName."Worksheet Template Name");
      WhseWkshTemplate.TESTFIELD("Page ID");
      WhseWkshName.TESTFIELD(Name);

      WhseWkshLine.FILTERGROUP := 2;
      WhseWkshLine.SETRANGE("Worksheet Template Name",WhseWkshTemplate.Name);
      WhseWkshLine.FILTERGROUP := 0;

      WhseWkshLine."Worksheet Template Name" := '';
      WhseWkshLine.Name := WhseWkshName.Name;
      WhseWkshLine."Location Code" := WhseWkshName."Location Code";
      PAGE.RUN(WhseWkshTemplate."Page ID",WhseWkshLine);
    END;

    [External]
    PROCEDURE OpenWhseWksh@12(VAR WhseWkshLine@1001 : Record "Whse. Worksheet Line";VAR CurrentWkshTemplateName@1003 : Code[10];VAR CurrentWkshName@1000 : Code[10];VAR CurrentLocationCode@1002 : Code[10]);
    BEGIN
      CheckWhseEmployee;
      CurrentWkshTemplateName := WhseWkshLine.GETRANGEMAX("Worksheet Template Name");
      CheckTemplateName(CurrentWkshTemplateName,CurrentWkshName,CurrentLocationCode);
      WhseWkshLine.FILTERGROUP := 2;
      WhseWkshLine.SETRANGE(Name,CurrentWkshName);
      if CurrentLocationCode <> '' then
        WhseWkshLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseWkshLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenWhseWkshBatch@37(VAR WhseWkshName@1005 : Record "Whse. Worksheet Name");
    VAR
      WhseWkshTemplate@1003 : Record "Whse. Worksheet Template";
      WhseWkshLine@1001 : Record "Whse. Worksheet Line";
      WmsMgt@1002 : Codeunit "WMS Management";
      JnlSelected@1004 : Boolean;
    BEGIN
      if WhseWkshName.GETFILTER("Worksheet Template Name") <> '' then
        exit;
      WhseWkshName.FILTERGROUP(2);
      if WhseWkshName.GETFILTER("Worksheet Template Name") <> '' then begin
        WhseWkshName.FILTERGROUP(0);
        exit;
      end;
      WhseWkshName.FILTERGROUP(0);

      if not WhseWkshName.FIND('-') then
        for WhseWkshTemplate.Type := WhseWkshTemplate.Type::"Put-away" to WhseWkshTemplate.Type::Movement do begin
          WhseWkshTemplate.SETRANGE(Type,WhseWkshTemplate.Type);
          if not WhseWkshTemplate.FINDFIRST then
            TemplateSelection(0,WhseWkshTemplate.Type,WhseWkshLine,JnlSelected);
          if WhseWkshTemplate.FINDFIRST then begin
            if WhseWkshName."Location Code" = '' then
              WhseWkshName."Location Code" := WmsMgt.GetDefaultLocation;
            CheckTemplateName(WhseWkshTemplate.Name,WhseWkshName.Name,WhseWkshName."Location Code");
          end;
        end;

      WhseWkshName.FIND('-');
      JnlSelected := true;
      WhseWkshName.CALCFIELDS("Template Type");
      WhseWkshTemplate.SETRANGE(Type,WhseWkshName."Template Type");
      if WhseWkshName.GETFILTER("Worksheet Template Name") <> '' then
        WhseWkshTemplate.SETRANGE(Name,WhseWkshName.GETFILTER("Worksheet Template Name"));
      case WhseWkshTemplate.COUNT of
        1:
          WhseWkshTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,WhseWkshTemplate) = ACTION::LookupOK;
      end;
      if not JnlSelected then
        ERROR('');

      WhseWkshName.FILTERGROUP(0);
      WhseWkshName.SETRANGE("Worksheet Template Name",WhseWkshTemplate.Name);
      WhseWkshName.FILTERGROUP(2);
    END;

    LOCAL PROCEDURE CheckTemplateName@20(CurrentWkshTemplateName@1000 : Code[10];VAR CurrentWkshName@1001 : Code[10];VAR CurrentLocationCode@1005 : Code[10]);
    VAR
      WhseWkshTemplate@1006 : Record "Whse. Worksheet Template";
      WhseWkshName@1002 : Record "Whse. Worksheet Name";
      WhseEmployee@1004 : Record "Warehouse Employee";
      WmsMgt@1003 : Codeunit "WMS Management";
      FoundLocation@1007 : Boolean;
    BEGIN
      WhseWkshTemplate.GET(CurrentWkshTemplateName);
      WhseWkshName.SETRANGE("Worksheet Template Name",CurrentWkshTemplateName);
      if not WhseWkshName.GET(CurrentWkshTemplateName,CurrentWkshName,CurrentLocationCode) or
         ((USERID <> '') and not WhseEmployee.GET(USERID,CurrentLocationCode))
      then begin
        if USERID <> '' then begin
          CurrentLocationCode := WmsMgt.GetDefaultLocation;
          WhseWkshName.SETRANGE("Location Code",CurrentLocationCode);
        end;
        if not WhseWkshName.FINDFIRST then begin
          if USERID <> '' then begin
            WhseEmployee.SETCURRENTKEY(Default);
            WhseEmployee.SETRANGE(Default,false);
            WhseEmployee.SETRANGE("User ID",USERID);
            if WhseEmployee.FIND('-') then
              repeat
                WhseWkshName.SETRANGE("Location Code",WhseEmployee."Location Code");
                FoundLocation := WhseWkshName.FINDFIRST;
              until (WhseEmployee.NEXT = 0) or FoundLocation;
          end;
          if not FoundLocation then begin
            WhseWkshName.INIT;
            WhseWkshName."Worksheet Template Name" := CurrentWkshTemplateName;
            WhseWkshName.SetupNewName;
            WhseWkshName.Name := Text005;
            WhseWkshName.Description :=
              STRSUBSTNO(Text006,WhseWkshTemplate.Type);
            WhseWkshName.INSERT(true);
          end;
          CurrentLocationCode := WhseWkshName."Location Code";
          COMMIT;
        end;
        CurrentWkshName := WhseWkshName.Name;
        CurrentLocationCode := WhseWkshName."Location Code";
      end;
    END;

    [External]
    PROCEDURE CheckWhseWkshName@21(CurrentWkshName@1000 : Code[10];CurrentLocationCode@1003 : Code[10];VAR WhseWkshLine@1001 : Record "Whse. Worksheet Line");
    VAR
      WhseWkshName@1002 : Record "Whse. Worksheet Name";
      WhseEmployee@1004 : Record "Warehouse Employee";
    BEGIN
      WhseWkshName.GET(
        WhseWkshLine.GETRANGEMAX("Worksheet Template Name"),CurrentWkshName,CurrentLocationCode);
      if (USERID <> '') and not WhseEmployee.GET(USERID,CurrentLocationCode) then
        ERROR(Text009,CurrentLocationCode,WhseWkshName.TABLECAPTION,CurrentWkshName,USERID);
    END;

    LOCAL PROCEDURE CheckWhseEmployee@15();
    VAR
      WhseEmployee@1000 : Record "Warehouse Employee";
    BEGIN
      if USERID <> '' then begin
        WhseEmployee.SETRANGE("User ID",USERID);
        if WhseEmployee.ISEMPTY then
          ERROR(Text007,USERID);
      end;
    END;

    [External]
    PROCEDURE SetWhseWkshName@7(CurrentWkshName@1000 : Code[10];CurrentLocationCode@1002 : Code[10];VAR WhseWkshLine@1001 : Record "Whse. Worksheet Line");
    BEGIN
      WhseWkshLine.FILTERGROUP := 2;
      WhseWkshLine.SETRANGE(Name,CurrentWkshName);
      WhseWkshLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseWkshLine.FILTERGROUP := 0;
      if WhseWkshLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupWhseWkshName@9(VAR WhseWkshLine@1001 : Record "Whse. Worksheet Line";VAR CurrentWkshName@1000 : Code[10];VAR CurrentLocationCode@1003 : Code[10]);
    VAR
      WhseWkshName@1002 : Record "Whse. Worksheet Name";
    BEGIN
      COMMIT;
      WhseWkshName."Worksheet Template Name" := WhseWkshLine.GETRANGEMAX("Worksheet Template Name");
      WhseWkshName.Name := WhseWkshLine.GETRANGEMAX(Name);
      WhseWkshName.FILTERGROUP(2);
      WhseWkshName.SETRANGE("Worksheet Template Name",WhseWkshName."Worksheet Template Name");
      WhseWkshName.FILTERGROUP(0);
      if PAGE.RUNMODAL(0,WhseWkshName) = ACTION::LookupOK then begin
        CurrentWkshName := WhseWkshName.Name;
        CurrentLocationCode := WhseWkshName."Location Code";
        SetWhseWkshName(CurrentWkshName,WhseWkshName."Location Code",WhseWkshLine);
      end;
    END;

    LOCAL PROCEDURE UpdateMovActivLines@35();
    VAR
      WhseActivLine@1001 : Record "Warehouse Activity Line";
      WhseActivLine2@1000 : Record "Warehouse Activity Line";
    BEGIN
      WhseActivLine.SETCURRENTKEY(
        "Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.");
      WhseActivLine.SETRANGE("Whse. Document No.",Name);
      WhseActivLine.SETRANGE("Whse. Document Type",WhseActivLine."Whse. Document Type"::"Movement Worksheet");
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETRANGE("Whse. Document Line No.","Line No.");
      WhseActivLine.SETRANGE("Source Type",DATABASE::"Whse. Worksheet Line");
      WhseActivLine.SETRANGE("Source No.","Worksheet Template Name");
      WhseActivLine.SETRANGE("Location Code","Location Code");
      if WhseActivLine.FIND('-') then
        repeat
          WhseActivLine2.COPY(WhseActivLine);
          WhseActivLine2."Source Type" := 0;
          WhseActivLine2."Source No." := '';
          WhseActivLine2."Source Line No." := 0;
          WhseActivLine2.MODIFY;
        until WhseActivLine.NEXT = 0;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@24(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      WhseItemTrackingForm@1000 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      case "Whse. Document Type" of
        "Whse. Document Type"::Receipt:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Posted Whse. Receipt Line");
        "Whse. Document Type"::Shipment:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Warehouse Shipment Line");
        "Whse. Document Type"::"Internal Put-away":
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Internal Put-away Line");
        "Whse. Document Type"::"Internal Pick":
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Internal Pick Line");
        "Whse. Document Type"::Production:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Prod. Order Component");
        "Whse. Document Type"::Assembly:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Assembly Line");
        else
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Worksheet Line");
      end;

      WhseItemTrackingForm.RUNMODAL;
    END;

    LOCAL PROCEDURE AvailableQtyToPickBase@27() : Decimal;
    VAR
      TempWhseActivLine@1006 : TEMPORARY Record "Warehouse Activity Line";
      LineReservedQtyBase@1001 : Decimal;
      TotalAvailQtyToPickBase@1000 : Decimal;
      QtyAssgndOnWkshBase@1004 : Decimal;
      AvailQtyBase@1005 : Decimal;
      ReservedAndAssignedBase@1002 : Decimal;
      ItemDescription@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      LineReservedQtyBase :=
        WhseAvailMgt.CalcLineReservedQtyOnInvt(
          "Source Type","Source Subtype","Source No.",
          "Source Line No.","Source Subline No.",
          true,'','',TempWhseActivLine);
      if not Location."Directed Put-away and Pick" then begin
        GetItem("Item No.",ItemDescription);
        Item.CALCFIELDS("Reserved Qty. on Inventory");

        if (LineReservedQtyBase > 0) and (LineReservedQtyBase > "Qty. to Handle (Base)") then
          exit(CalcAvailableQtyBase(false) + CalcQty(LineReservedQtyBase));
        exit(CalcAvailableQtyBase(false) + "Qty. to Handle (Base)");
      end;
      CreatePick.SetCalledFromPickWksh(true);
      TotalAvailQtyToPickBase :=
        CreatePick.CalcTotalAvailQtyToPick(
          "Location Code","Item No.","Variant Code",'','',
          "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",0,false);

      AvailQtyBase :=
        CalcAvailWhseQtyBase("Location Code","Item No.","Variant Code","Unit of Measure Code");

      if TotalAvailQtyToPickBase > AvailQtyBase then
        TotalAvailQtyToPickBase := AvailQtyBase;

      QtyAssgndOnWkshBase := WhseAvailMgt.CalcQtyAssgndOnWksh(Rec,not Location."Allow Breakbulk",true);

      if LineReservedQtyBase > 0 then begin
        if LineReservedQtyBase <= "Qty. to Handle (Base)" then
          ReservedAndAssignedBase := LineReservedQtyBase
        else
          ReservedAndAssignedBase := "Qty. to Handle (Base)";
      end;

      TotalAvailQtyToPickBase :=
        TotalAvailQtyToPickBase + AssignedQtyOnReservedLines - QtyAssgndOnWkshBase - ReservedAndAssignedBase;
      if TotalAvailQtyToPickBase > 0 then
        exit(TotalAvailQtyToPickBase);
      exit(0);
    END;

    [External]
    PROCEDURE AvailableQtyToPick@38() : Decimal;
    BEGIN
      if "Qty. per Unit of Measure" <> 0 then
        exit(ROUND(AvailableQtyToPickBase / "Qty. per Unit of Measure",0.00001));
      exit(0);
    END;

    [External]
    PROCEDURE InitLineWithItem@40(DocumentType@1007 : Option;DocumentNo@1001 : Code[20];DocumentLineNo@1002 : Integer;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Qty@1005 : Decimal;QtyToHandle@1008 : Decimal;QtyPerUoM@1006 : Decimal);
    BEGIN
      INIT;
      "Whse. Document Type" := DocumentType;
      "Whse. Document No." := DocumentNo;
      "Whse. Document Line No." := DocumentLineNo;
      "Location Code" := LocationCode;
      "Item No." := ItemNo;
      "Qty. (Base)" := Qty;
      "Qty. to Handle (Base)" := QtyToHandle;
      "Qty. per Unit of Measure" := QtyPerUoM;
    END;

    [External]
    PROCEDURE SetUpNewLine@28(WhseWkshTemplate@1003 : Code[10];WhseWkshName@1002 : Code[10];LocationCode@1001 : Code[10];SortingMethod@1000 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To"';LineNo@1004 : Integer);
    BEGIN
      WhseWorksheetLine.RESET;
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWkshTemplate);
      WhseWorksheetLine.SETRANGE(Name,WhseWkshName);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      if WhseWorksheetLine.COUNT = 0 then
        LastLineNo := 0
      else
        LastLineNo := LineNo;

      "Worksheet Template Name" := WhseWkshTemplate;
      Name := WhseWkshName;
      "Location Code" := LocationCode;
      "Line No." := GetNextLineNo(SortingMethod);
      "Whse. Document Type" := "Whse. Document Type"::"Whse. Mov.-Worksheet";
      "Whse. Document No." := WhseWkshName;
      "Whse. Document Line No." := "Line No.";
    END;

    LOCAL PROCEDURE GetNextLineNo@31(SortMethod@1000 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To"') : Integer;
    VAR
      WhseWorksheetLine2@1003 : Record "Whse. Worksheet Line";
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      WhseWorksheetLine2.COPY(WhseWorksheetLine);
      if SortMethod <> SortMethod::" " then
        exit(GetLastLineNo + 10000);

      WhseWorksheetLine2 := Rec;
      WhseWorksheetLine2."Line No." := LastLineNo;
      if WhseWorksheetLine2.FIND('<') then
        LowerLineNo := WhseWorksheetLine2."Line No."
      else
        if WhseWorksheetLine2.FIND('>') then
          exit(LastLineNo div 2)
        else
          exit(LastLineNo + 10000);

      WhseWorksheetLine2 := Rec;
      WhseWorksheetLine2."Line No." := LastLineNo;
      if WhseWorksheetLine2.FIND('>') then
        HigherLineNo := LastLineNo
      else
        exit(LastLineNo + 10000);
      exit(LowerLineNo + (HigherLineNo - LowerLineNo) div 2);
    END;

    LOCAL PROCEDURE GetLastLineNo@30() : Integer;
    VAR
      WhseWorksheetLine2@1000 : Record "Whse. Worksheet Line";
    BEGIN
      WhseWorksheetLine2.COPYFILTERS(WhseWorksheetLine);
      if WhseWorksheetLine2.FINDLAST then
        exit(WhseWorksheetLine2."Line No.");
      exit(0);
    END;

    [External]
    PROCEDURE GetSortSeqNo@33(SortMethod@1000 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To"') : Integer;
    VAR
      WhseWorksheetLine2@1004 : Record "Whse. Worksheet Line";
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      WhseWorksheetLine2 := Rec;
      WhseWorksheetLine2.SETRECFILTER;
      WhseWorksheetLine2.SETRANGE("Line No.");

      case SortMethod of
        SortMethod::" ":
          WhseWorksheetLine2.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Line No.");
        SortMethod::Item:
          WhseWorksheetLine2.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Item No.");
        SortMethod::Document:
          WhseWorksheetLine2.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Source Document","Source No.");
        SortMethod::"Shelf/Bin No.":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              WhseWorksheetLine2.SETCURRENTKEY(
                "Worksheet Template Name",Name,"Location Code","To Bin Code")
            else
              WhseWorksheetLine2.SETCURRENTKEY(
                "Worksheet Template Name",Name,"Location Code","Shelf No.");
          end;
        SortMethod::"Due Date":
          WhseWorksheetLine2.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Due Date");
        SortMethod::"Ship-To":
          WhseWorksheetLine2.SETCURRENTKEY(
            "Worksheet Template Name",Name,"Location Code","Destination Type","Destination No.")
      end;

      LastSeqNo := GetLastSeqNo(WhseWorksheetLine2);
      if WhseWorksheetLine2.FIND('<') then
        LowerSeqNo := WhseWorksheetLine2."Sorting Sequence No."
      else
        if WhseWorksheetLine2.FIND('>') then
          exit(WhseWorksheetLine2."Sorting Sequence No." div 2)
        else
          LowerSeqNo := 10000;

      WhseWorksheetLine2 := Rec;
      if WhseWorksheetLine2.FIND('>') then
        HigherSeqNo := WhseWorksheetLine2."Sorting Sequence No."
      else
        if WhseWorksheetLine2.FIND('<') then
          exit(LastSeqNo + 10000)
        else
          HigherSeqNo := LastSeqNo;
      exit(LowerSeqNo + (HigherSeqNo - LowerSeqNo) div 2);
    END;

    LOCAL PROCEDURE GetLastSeqNo@32(WhseWorksheetLine2@1000 : Record "Whse. Worksheet Line") : Integer;
    BEGIN
      WhseWorksheetLine2.SETRECFILTER;
      WhseWorksheetLine2.SETRANGE("Line No.");
      WhseWorksheetLine2.SETCURRENTKEY("Worksheet Template Name",Name,"Location Code","Sorting Sequence No.");
      if WhseWorksheetLine2.FINDLAST then
        exit(WhseWorksheetLine2."Sorting Sequence No.");
      exit(0);
    END;

    [External]
    PROCEDURE SetItemTrackingLines@34(SerialNo@1000 : Code[20];LotNo@1001 : Code[20];ExpirationDate@1004 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      WhseItemTrackingForm@1003 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      case "Whse. Document Type" of
        "Whse. Document Type"::Receipt:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Posted Whse. Receipt Line");
        "Whse. Document Type"::Shipment:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Warehouse Shipment Line");
        "Whse. Document Type"::"Internal Put-away":
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Internal Put-away Line");
        "Whse. Document Type"::"Internal Pick":
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Internal Pick Line");
        "Whse. Document Type"::Production:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Prod. Order Component");
        "Whse. Document Type"::Assembly:
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Assembly Line");
        else
          WhseItemTrackingForm.SetSource(Rec,DATABASE::"Whse. Worksheet Line");
      end;

      WhseItemTrackingForm.InsertItemTrackingLine(Rec,SerialNo,LotNo,ExpirationDate,QtyToEmpty);
    END;

    [External]
    PROCEDURE SetCurrentFieldNo@39(FieldNo@1000 : Integer);
    BEGIN
      CurrentFieldNo := FieldNo;
    END;

    [External]
    PROCEDURE SetSourceFilter@42(SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SetKey@1005 : Boolean);
    BEGIN
      if SetKey then
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubType >= 0 then
        SETRANGE("Source Subtype",SourceSubType);
      SETRANGE("Source No.",SourceNo);
      if SourceLineNo >= 0 then
        SETRANGE("Source Line No.",SourceLineNo);
    END;

    BEGIN
    END.
  }
}

