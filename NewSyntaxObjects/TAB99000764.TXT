OBJECT Table 99000764 Routing Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatus;
             END;

    OnModify=BEGIN
               TestStatus;
             END;

    OnDelete=BEGIN
               TestStatus;

               DeleteRelations;
             END;

    OnRename=BEGIN
               TestStatus;

               SetRecalcStatus;
             END;

    CaptionML=ENU=Routing Line;
  }
  FIELDS
  {
    { 1   ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No.;
                                                   NotBlank=true }
    { 2   ;   ;Version Code        ;Code20        ;TableRelation="Routing Version"."Version Code" WHERE ("Routing No."=FIELD("Routing No."));
                                                   CaptionML=ENU=Version Code }
    { 4   ;   ;Operation No.       ;Code10        ;OnValidate=BEGIN
                                                                TestStatus;

                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Operation No.;
                                                   NotBlank=true }
    { 5   ;   ;Next Operation No.  ;Code30        ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Next Operation No. }
    { 6   ;   ;Previous Operation No.;Code30      ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Previous Operation No. }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU="Work Center,Machine Center, ";
                                                   OptionString="Work Center","Machine Center"," " }
    { 8   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("Work Center")) "Work Center"
                                                                 ELSE IF (Type=CONST("Machine Center")) "Machine Center";
                                                   OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                if "No." = '' then
                                                                  exit;

                                                                case Type of
                                                                  Type::"Work Center":
                                                                    begin
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,false);
                                                                      WorkCenterTransferfields;
                                                                    end;
                                                                  Type::"Machine Center":
                                                                    begin
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,false);
                                                                      MachineCtrTransferfields;
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 9   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=false }
    { 10  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=ENU=Work Center Group Code;
                                                   Editable=false }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Setup Time          ;Decimal       ;CaptionML=ENU=Setup Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 13  ;   ;Run Time            ;Decimal       ;CaptionML=ENU=Run Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 14  ;   ;Wait Time           ;Decimal       ;CaptionML=ENU=Wait Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 15  ;   ;Move Time           ;Decimal       ;CaptionML=ENU=Move Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Fixed Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Fixed Scrap Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Lot Size            ;Decimal       ;CaptionML=ENU=Lot Size;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Scrap Factor %      ;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Scrap Factor %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Setup Time Unit of Meas. Code }
    { 20  ;   ;Run Time Unit of Meas. Code;Code10 ;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Run Time Unit of Meas. Code }
    { 21  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Wait Time Unit of Meas. Code }
    { 22  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Move Time Unit of Meas. Code }
    { 27  ;   ;Minimum Process Time;Decimal       ;CaptionML=ENU=Minimum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 28  ;   ;Maximum Process Time;Decimal       ;CaptionML=ENU=Maximum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 30  ;   ;Concurrent Capacities;Decimal      ;InitValue=1;
                                                   CaptionML=ENU=Concurrent Capacities;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 31  ;   ;Send-Ahead Quantity ;Decimal       ;CaptionML=ENU=Send-Ahead Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   CaptionML=ENU=Routing Link Code }
    { 35  ;   ;Standard Task Code  ;Code10        ;TableRelation="Standard Task";
                                                   OnValidate=VAR
                                                                StandardTask@1000 : Record "Standard Task";
                                                              BEGIN
                                                                if "Standard Task Code" = '' then
                                                                  if "Standard Task Code" <> xRec."Standard Task Code" then begin
                                                                    DeleteRelations;
                                                                    exit;
                                                                  end;

                                                                StandardTask.GET("Standard Task Code");
                                                                Description := StandardTask.Description;

                                                                DeleteRelations;

                                                                StdTaskTool.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskTool.FIND('-') then
                                                                  repeat
                                                                    RtngTool."Routing No." := "Routing No.";
                                                                    RtngTool."Version Code" := "Version Code";
                                                                    RtngTool."Operation No." := "Operation No.";
                                                                    RtngTool."Line No." := StdTaskTool."Line No.";
                                                                    RtngTool."No." := StdTaskTool."No.";
                                                                    RtngTool.Description := StdTaskTool.Description;
                                                                    RtngTool.INSERT;
                                                                  until StdTaskTool.NEXT = 0;

                                                                StdTaskPersonnel.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskPersonnel.FIND('-') then
                                                                  repeat
                                                                    RtngPersonnel."Routing No." := "Routing No.";
                                                                    RtngPersonnel."Version Code" := "Version Code";
                                                                    RtngPersonnel."Operation No." := "Operation No.";
                                                                    RtngPersonnel."Line No." := StdTaskPersonnel."Line No.";
                                                                    RtngPersonnel."No." := StdTaskPersonnel."No.";
                                                                    RtngPersonnel.Description := StdTaskPersonnel.Description;
                                                                    RtngPersonnel.INSERT;
                                                                  until StdTaskPersonnel.NEXT = 0;

                                                                StdTaskQltyMeasure.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskQltyMeasure.FIND('-') then
                                                                  repeat
                                                                    RtngQltyMeasure."Routing No." := "Routing No.";
                                                                    RtngQltyMeasure."Version Code" := "Version Code";
                                                                    RtngQltyMeasure."Operation No." := "Operation No.";
                                                                    RtngQltyMeasure."Line No." := StdTaskQltyMeasure."Line No.";
                                                                    RtngQltyMeasure."Qlty Measure Code" := StdTaskQltyMeasure."Qlty Measure Code";
                                                                    RtngQltyMeasure.Description := StdTaskQltyMeasure.Description;
                                                                    RtngQltyMeasure."Min. Value" := StdTaskQltyMeasure."Min. Value";
                                                                    RtngQltyMeasure."Max. Value" := StdTaskQltyMeasure."Max. Value";
                                                                    RtngQltyMeasure."Mean Tolerance" := StdTaskQltyMeasure."Mean Tolerance";
                                                                    RtngQltyMeasure.INSERT;
                                                                  until StdTaskQltyMeasure.NEXT = 0;

                                                                StdTaskComment.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskComment.FIND('-') then
                                                                  repeat
                                                                    RtngComment."Routing No." := "Routing No.";
                                                                    RtngComment."Version Code" := "Version Code";
                                                                    RtngComment."Operation No." := "Operation No.";
                                                                    RtngComment."Line No." := StdTaskComment."Line No.";
                                                                    RtngComment.Comment := StdTaskComment.Text;
                                                                    RtngComment.INSERT;
                                                                  until StdTaskComment.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Standard Task Code }
    { 40  ;   ;Unit Cost per       ;Decimal       ;CaptionML=ENU=Unit Cost per;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 41  ;   ;Recalculate         ;Boolean       ;CaptionML=ENU=Recalculate;
                                                   Editable=false }
    { 45  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Routing Comment Line" WHERE ("Routing No."=FIELD("Routing No."),
                                                                                                   "Version Code"=FIELD("Version Code"),
                                                                                                   "Operation No."=FIELD("Operation No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 50  ;   ;Sequence No. (Forward);Integer     ;CaptionML=ENU=Sequence No. (Forward);
                                                   Editable=false }
    { 51  ;   ;Sequence No. (Backward);Integer    ;CaptionML=ENU=Sequence No. (Backward);
                                                   Editable=false }
    { 52  ;   ;Fixed Scrap Qty. (Accum.);Decimal  ;CaptionML=ENU=Fixed Scrap Qty. (Accum.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Scrap Factor % (Accumulated);Decimal;
                                                   CaptionML=ENU=Scrap Factor % (Accumulated);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Routing No.","Version Code","Operation No.";
                                                   Clustered=true }
    {    ;"Routing No.","Version Code","Sequence No. (Forward)" }
    {    ;"Routing No.","Version Code","Sequence No. (Backward)" }
    {    ;"Work Center No."                        }
    {    ;Type,"No."                               }
    {    ;"Routing Link Code"                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WorkCenter@1000 : Record "Work Center";
      MachineCenter@1001 : Record "Machine Center";
      RtngTool@1002 : Record "Routing Tool";
      RtngPersonnel@1003 : Record "Routing Personnel";
      RtngQltyMeasure@1004 : Record "Routing Quality Measure";
      RtngComment@1005 : Record "Routing Comment Line";
      StdTaskTool@1006 : Record "Standard Task Tool";
      StdTaskPersonnel@1007 : Record "Standard Task Personnel";
      StdTaskQltyMeasure@1008 : Record "Standard Task Quality Measure";
      StdTaskComment@1009 : Record "Standard Task Description";

    LOCAL PROCEDURE TestStatus@6();
    VAR
      RtngHeader@1000 : Record "Routing Header";
      RtngVersion@1001 : Record "Routing Version";
    BEGIN
      if "Version Code" = '' then begin
        RtngHeader.GET("Routing No.");
        if RtngHeader.Status = RtngHeader.Status::Certified then
          RtngHeader.FIELDERROR(Status);
      end else begin
        RtngVersion.GET("Routing No.","Version Code");
        if RtngVersion.Status = RtngVersion.Status::Certified then
          RtngVersion.FIELDERROR(Status);
      end;
    END;

    LOCAL PROCEDURE DeleteRelations@3();
    BEGIN
      RtngTool.SETRANGE("Routing No.","Routing No.");
      RtngTool.SETRANGE("Version Code","Version Code");
      RtngTool.SETRANGE("Operation No.","Operation No.");
      RtngTool.DELETEALL;

      RtngPersonnel.SETRANGE("Routing No.","Routing No.");
      RtngPersonnel.SETRANGE("Version Code","Version Code");
      RtngPersonnel.SETRANGE("Operation No.","Operation No.");
      RtngPersonnel.DELETEALL;

      RtngQltyMeasure.SETRANGE("Routing No.","Routing No.");
      RtngQltyMeasure.SETRANGE("Version Code","Version Code");
      RtngQltyMeasure.SETRANGE("Operation No.","Operation No.");
      RtngQltyMeasure.DELETEALL;

      RtngComment.SETRANGE("Routing No.","Routing No.");
      RtngComment.SETRANGE("Version Code","Version Code");
      RtngComment.SETRANGE("Operation No.","Operation No.");
      RtngComment.DELETEALL;
    END;

    LOCAL PROCEDURE WorkCenterTransferfields@2();
    BEGIN
      "Work Center No." := WorkCenter."No.";
      "Work Center Group Code" := WorkCenter."Work Center Group Code";
      if "Setup Time Unit of Meas. Code" = '' then
        "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      if "Run Time Unit of Meas. Code" = '' then
        "Run Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      if "Wait Time Unit of Meas. Code" = '' then
        "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      if "Move Time Unit of Meas. Code" = '' then
        "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      Description := WorkCenter.Name;
    END;

    LOCAL PROCEDURE MachineCtrTransferfields@1();
    BEGIN
      WorkCenter.GET(MachineCenter."Work Center No.");
      WorkCenterTransferfields;

      Description := MachineCenter.Name;
      "Setup Time" := MachineCenter."Setup Time";
      "Wait Time" := MachineCenter."Wait Time";
      "Move Time" := MachineCenter."Move Time";
      if "Setup Time Unit of Meas. Code" = '' then
        "Setup Time Unit of Meas. Code" := MachineCenter."Setup Time Unit of Meas. Code";
      if "Wait Time Unit of Meas. Code" = '' then
        "Wait Time Unit of Meas. Code" := MachineCenter."Wait Time Unit of Meas. Code";
      if "Move Time Unit of Meas. Code" = '' then
        "Move Time Unit of Meas. Code" := MachineCenter."Move Time Unit of Meas. Code";
      "Fixed Scrap Quantity" := MachineCenter."Fixed Scrap Quantity";
      "Scrap Factor %" := MachineCenter."Scrap %";
      "Minimum Process Time" := MachineCenter."Minimum Process Time";
      "Maximum Process Time" := MachineCenter."Maximum Process Time";
      "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
      "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
    END;

    [External]
    PROCEDURE SetRecalcStatus@5();
    BEGIN
      Recalculate := true;
    END;

    [External]
    PROCEDURE CertifiedRoutingVersionExists@4(RtngHeaderNo@1000 : Code[20];CalculationDate@1003 : Date) : Boolean;
    VAR
      RtngHeader@1004 : Record "Routing Header";
      VersionMgt@1002 : Codeunit VersionManagement;
      CheckRoutingLines@1005 : Codeunit "Check Routing Lines";
      RtngVersionCode@1001 : Code[20];
    BEGIN
      if RtngHeaderNo = '' then
        exit(false);

      RtngHeader.GET(RtngHeaderNo);
      RtngVersionCode := VersionMgt.GetRtngVersion(RtngHeaderNo,CalculationDate,true);

      if CheckRoutingLines.NeedsCalculation(RtngHeader,RtngVersionCode) then
        CheckRoutingLines.Calculate(RtngHeader,RtngVersionCode);

      SETRANGE("Routing No.",RtngHeaderNo);
      SETRANGE("Version Code",RtngVersionCode);
      exit(FINDSET);
    END;

    BEGIN
    END.
  }
}

