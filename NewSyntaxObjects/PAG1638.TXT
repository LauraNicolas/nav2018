OBJECT Page 1638 Booking Items
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Bookings Not Invoiced;
    LinksAllowed=false;
    SourceTable="Booking Item";
    PageType=List;
    SourceTableTemporary=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Invoicing;
    OnAfterGetRecord=VAR
                       OutlookSynchTypeConv@1000 : Codeunit "Outlook Synch. Type Conv";
                     BEGIN
                       StartDate := OutlookSynchTypeConv.UTC2LocalDT(GetStartDate);
                       CustomerName := "Customer Name";
                       if CustomerName = '' then
                         CustomerName := NoCustomerSelectedTxt;
                     END;

    ActionList=ACTIONS
    {
      { 9       ;    ;ActionContainer;
                      Name=ActionContainer9;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;Action    ;
                      Name=Invoice;
                      CaptionML=ENU=Create Invoice;
                      ToolTipML=ENU=Create a new sales invoice for the selected booking.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=NewSalesInvoice;
                      PromotedCategory=Category4;
                      Scope=Repeater;
                      OnAction=VAR
                                 TempBookingItem@1001 : TEMPORARY Record "Booking Item";
                                 SalesHeader@1000 : Record "Sales Header";
                                 CountCust@1004 : Integer;
                               BEGIN
                                 if not ActionAllowed then
                                   exit;

                                 GetSelectedRecords(TempBookingItem);

                                 if TempBookingItem.FINDSET then
                                   repeat
                                     if InvoiceItemsForCustomer(TempBookingItem,SalesHeader) then
                                       CountCust += 1;
                                   until TempBookingItem.NEXT = 0;

                                 OutputAction(CountCust,SalesHeader);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=Invoice Customer;
                      CaptionML=ENU=Create Invoice for Customer;
                      ToolTipML=ENU=Create a new sales invoice for all items booked by the customer on the selected booking.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=SuggestCustomerBill;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 SalesHeader@1000 : Record "Sales Header";
                               BEGIN
                                 if not ActionAllowed then
                                   exit;

                                 if InvoiceItemsForCustomer(Rec,SalesHeader) then
                                   OutputAction(1,SalesHeader);
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=MarkInvoiced;
                      CaptionML=ENU=Mark as Invoiced;
                      ToolTipML=ENU=Mark the bookings that you have selected as invoiced. This removes the bookings from this view.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ClearLog;
                      PromotedCategory=Category4;
                      Scope=Repeater;
                      OnAction=VAR
                                 BookingItem@1001 : Record "Booking Item";
                                 TempBookingItem@1004 : TEMPORARY Record "Booking Item";
                                 InstructionMgt@1000 : Codeunit "Instruction Mgt.";
                               BEGIN
                                 if not ActionAllowed then
                                   exit;

                                 if InstructionMgt.ShowConfirm(ConfirmMarkQst,InstructionMgt.MarkBookingAsInvoicedWarningCode) then begin
                                   GetSelectedRecords(TempBookingItem);
                                   if TempBookingItem.FINDSET then
                                     repeat
                                       BookingItem.GET(TempBookingItem.Id);
                                       BookingItem."Invoice Status" := BookingItem."Invoice Status"::open;
                                       BookingItem.MODIFY;
                                       RemoveFromView(TempBookingItem);
                                     until TempBookingItem.NEXT = 0;
                                 end;

                                 CurrPage.UPDATE;
                               END;

                      Gesture=None }
      { 12      ;1   ;Action    ;
                      Name=InvoiceAll;
                      CaptionML=ENU=Invoice All;
                      ToolTipML=ENU=Create a new sales invoice for all non-invoiced bookings.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=NewSalesInvoice;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 TempBookingItem@1000 : TEMPORARY Record "Booking Item";
                                 SalesHeader@1001 : Record "Sales Header";
                                 CountCust@1002 : Integer;
                               BEGIN
                                 if not ActionAllowed then
                                   exit;

                                 TempBookingItem.COPY(Rec,true);

                                 TempBookingItem.SETFILTER("Customer Name",'<>''''');
                                 if TempBookingItem.FINDSET then
                                   repeat
                                     if InvoiceItemsForCustomer(TempBookingItem,SalesHeader) then
                                       CountCust += 1;
                                   until TempBookingItem.NEXT = 0;

                                 OutputAction(CountCust,SalesHeader);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 7   ;2   ;Field     ;
                Name=StartDate;
                CaptionML=ENU=Start Date;
                ToolTipML=ENU=Specifies the start date and time of the booking.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StartDate;
                ImplicitType=DateTime }

    { 13  ;2   ;Field     ;
                Name=Duration;
                ToolTipML=ENU=Specifies the duration of the booking that is not yet invoiced.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Duration;
                ImplicitType=Duration }

    { 5   ;2   ;Field     ;
                Name=Customer;
                CaptionML=ENU=Customer;
                ToolTipML=ENU=Specifies the name of the customer that the booking is for.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CustomerName;
                OnDrillDown=VAR
                              Customer@1000 : Record Customer;
                            BEGIN
                              if Customer.FindByEmail(Customer,"Customer Email") then
                                PAGE.RUN(PAGE::"Customer Card",Customer);
                            END;

                ImplicitType=Text }

    { 3   ;2   ;Field     ;
                Name=Service;
                ToolTipML=ENU=Specifies the subject of the booking.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Service Name";
                OnDrillDown=VAR
                              BookingServiceMapping@1000 : Record "Booking Service Mapping";
                              Item@1001 : Record Item;
                            BEGIN
                              if BookingServiceMapping.GET("Service ID") then
                                if Item.GET(BookingServiceMapping."Item No.") then
                                  PAGE.RUN(PAGE::"Item Card",Item);
                            END;

                ImplicitType=Text50 }

  }
  CODE
  {
    VAR
      ConfirmMarkQst@1002 : TextConst 'ENU=The appointments that you mark as invoiced will be removed from this view. You will no longer be able to manage them in this window. Do you want to continue?';
      ConfirmSyncQst@1005 : TextConst '@@@=%1 - The name of the service or customer. %2 - short product name;ENU=%1 does not exist in %2. Would you like to synchronize your Bookings customers and services now?';
      InvoicePostQst@1003 : TextConst 'ENU=Sales invoices have been created but have not been posted or sent. Would you like to view your list of unposted sales invoices?';
      AlreadyInvoicedMsg@1000 : TextConst 'ENU=The selected appointments have already been invoiced.';
      StartDate@1004 : DateTime;
      NoCustomerFoundErr@1001 : TextConst '@@@=%1 - Short product name;ENU=Could not find the customer in %1.';
      NoCustomerSelectedTxt@1006 : TextConst '@@@=Indicates that a customer was not selected for the Bookings appointment.;ENU=<No customer selected>';
      CustomerName@1007 : Text;
      NoCustomerSelectedMsg@1008 : TextConst 'ENU=A customer must be selected to create an invoice for the booking. Select a customer for the booking in the Bookings app, then re-open this page.';

    LOCAL PROCEDURE ActionAllowed@10() Allowed : Boolean;
    BEGIN
      Allowed := ("Service Name" <> '') and not ISEMPTY;
      if "Customer Name" = '' then begin
        MESSAGE(NoCustomerSelectedMsg);
        Allowed := false;
      end;
    END;

    LOCAL PROCEDURE CreateSalesHeader@2(VAR SalesHeader@1000 : Record "Sales Header";VAR BookingItem@1001 : Record "Booking Item");
    VAR
      Customer@1002 : Record Customer;
      BookingManager@1003 : Codeunit "Booking Manager";
    BEGIN
      if not Customer.FindByEmail(Customer,BookingItem."Customer Email") then begin
        if CONFIRM(ConfirmSyncQst,true,BookingItem."Customer Name",PRODUCTNAME.SHORT) then
          BookingManager.Synchronize(BookingItem);
        if not Customer.FindByEmail(Customer,BookingItem."Customer Email") then
          ERROR(NoCustomerFoundErr,PRODUCTNAME.SHORT);
      end;

      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      SalesHeader.INSERT(true);
    END;

    LOCAL PROCEDURE CreateSalesLine@1(VAR SalesHeader@1004 : Record "Sales Header";VAR BookingItem@1000 : Record "Booking Item");
    VAR
      InvoicedBookingItem@1001 : Record "Invoiced Booking Item";
      SalesLine@1003 : Record "Sales Line";
      BookingServiceMapping@1009 : Record "Booking Service Mapping";
      BookingManager@1008 : Codeunit "Booking Manager";
      LineNo@1002 : Integer;
    BEGIN
      if not BookingServiceMapping.GET(BookingItem."Service ID") then begin
        if CONFIRM(ConfirmSyncQst,true,BookingItem."Service Name",PRODUCTNAME.SHORT) then
          BookingManager.Synchronize(BookingItem);
        BookingServiceMapping.GET(BookingItem."Service ID");
      end;

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDLAST then
        LineNo := SalesLine."Line No." + 10000
      else
        LineNo := 10000;
      CLEAR(SalesLine);

      InvoicedBookingItem.INIT;
      InvoicedBookingItem."Booking Item ID" := BookingItem.Id;
      InvoicedBookingItem."Document No." := SalesHeader."No.";
      InvoicedBookingItem.INSERT(true);

      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      SalesLine.VALIDATE("Line No.",LineNo);
      SalesLine.VALIDATE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",BookingServiceMapping."Item No.");
      SalesLine.VALIDATE(Quantity,(BookingItem.GetEndDate - BookingItem.GetStartDate) / 3600000);
      SalesLine.VALIDATE("Unit Price",BookingItem.Price);
      SalesLine.VALIDATE(Description,STRSUBSTNO('%1 - %2',BookingItem."Service Name",DT2DATE(BookingItem.GetStartDate)));
      if not SalesLine.INSERT(true) then begin
        InvoicedBookingItem.DELETE;
        ERROR(GETLASTERRORTEXT);
      end;
    END;

    LOCAL PROCEDURE GetSelectedRecords@3(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item");
    BEGIN
      if MARKEDONLY then begin
        TempBookingItem.COPY(Rec,true);
        TempBookingItem.MARKEDONLY(true);
      end else begin
        TempBookingItem.COPY(Rec,true);
        CurrPage.SETSELECTIONFILTER(TempBookingItem);
      end;
    END;

    LOCAL PROCEDURE InvoiceItemsForCustomer@12(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item";VAR SalesHeader@1002 : Record "Sales Header") InvoiceCreated : Boolean;
    VAR
      NewTempBookingItem@1003 : TEMPORARY Record "Booking Item";
      InvoicedBookingItem@1001 : Record "Invoiced Booking Item";
    BEGIN
      NewTempBookingItem.COPY(TempBookingItem,true);
      if not InvoicedBookingItem.GET(TempBookingItem.Id) then begin
        NewTempBookingItem.SETRANGE("Customer Email",TempBookingItem."Customer Email");
        NewTempBookingItem.SETRANGE("Invoice Status",NewTempBookingItem."Invoice Status"::draft);
        NewTempBookingItem.SETFILTER("Invoice No.",'=''''');
        if NewTempBookingItem.FINDSET then begin
          CLEAR(SalesHeader);
          CreateSalesHeader(SalesHeader,NewTempBookingItem);
          repeat
            if not InvoicedBookingItem.GET(NewTempBookingItem.Id) then
              CreateSalesLine(SalesHeader,NewTempBookingItem);
            RemoveFromView(NewTempBookingItem);
          until NewTempBookingItem.NEXT = 0;
          InvoiceCreated := true;
        end;
      end;
    END;

    LOCAL PROCEDURE OutputAction@38(CountCust@1000 : Integer;SalesHeader@1002 : Record "Sales Header");
    BEGIN
      case CountCust of
        0:
          MESSAGE(AlreadyInvoicedMsg);
        1:
          PAGE.RUN(PAGE::"Sales Invoice",SalesHeader);
        else
          if CONFIRM(InvoicePostQst) then
            PAGE.RUN(PAGE::"Sales Invoice List",SalesHeader);
      end;
    END;

    LOCAL PROCEDURE RemoveFromView@4(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item");
    BEGIN
      GET(TempBookingItem.Id);
      DELETE;
    END;

    BEGIN
    END.
  }
}

