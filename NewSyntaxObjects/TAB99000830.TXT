OBJECT Table 99000830 Planning Routing Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "Next Operation No." = '' then
                 SetNextOperations;
             END;

    OnDelete=BEGIN
               ProdOrderCapNeed.SETCURRENTKEY("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
               ProdOrderCapNeed.SETRANGE("Worksheet Template Name","Worksheet Template Name");
               ProdOrderCapNeed.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
               ProdOrderCapNeed.SETRANGE("Worksheet Line No.","Worksheet Line No.");
               ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
               ProdOrderCapNeed.DELETEALL;
             END;

    OnRename=BEGIN
               SetRecalcStatus;
             END;

    CaptionML=ENU=Planning Routing Line;
    LookupPageID="Planning Routing";
    DrillDownPageID="Planning Routing";
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Req. Wksh. Template";
                                                   CaptionML=ENU=Worksheet Template Name;
                                                   Editable=false }
    { 2   ;   ;Worksheet Batch Name;Code10        ;TableRelation="Requisition Wksh. Name".Name WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"));
                                                   CaptionML=ENU=Worksheet Batch Name }
    { 3   ;   ;Worksheet Line No.  ;Integer       ;TableRelation="Requisition Line"."Line No." WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"),
                                                                                                      "Journal Batch Name"=FIELD("Worksheet Batch Name"));
                                                   CaptionML=ENU=Worksheet Line No. }
    { 4   ;   ;Operation No.       ;Code10        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                GetLine;
                                                                "Starting Time" := ReqLine."Starting Time";
                                                                "Ending Time" := ReqLine."Ending Time";
                                                                "Starting Date" := ReqLine."Starting Date";
                                                                "Ending Date" := ReqLine."Ending Date";
                                                              END;

                                                   CaptionML=ENU=Operation No.;
                                                   NotBlank=true }
    { 5   ;   ;Next Operation No.  ;Code30        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                GetLine;
                                                                ReqLine.TESTFIELD("Routing Type",ReqLine."Routing Type"::Serial);
                                                              END;

                                                   CaptionML=ENU=Next Operation No. }
    { 6   ;   ;Previous Operation No.;Code30      ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Previous Operation No. }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';

                                                                ModifyCapNeedEntries;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Work Center,Machine Center;
                                                   OptionString="Work Center","Machine Center" }
    { 8   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("Work Center")) "Work Center"
                                                                 ELSE IF (Type=CONST("Machine Center")) "Machine Center";
                                                   OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                if "No." = '' then
                                                                  exit;

                                                                case Type of
                                                                  Type::"Work Center":
                                                                    begin
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,false);
                                                                      WorkCenterTransferfields;
                                                                    end;
                                                                  Type::"Machine Center":
                                                                    begin
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,false);
                                                                      MachineCtrTransferfields;
                                                                    end;
                                                                end;
                                                                GetLine;
                                                                if ReqLine."Routing Type" = ReqLine."Routing Type"::Serial then
                                                                  CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 9   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=false }
    { 10  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=ENU=Work Center Group Code;
                                                   Editable=false }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Setup Time          ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Setup Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 13  ;   ;Run Time            ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Run Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 14  ;   ;Wait Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Wait Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 15  ;   ;Move Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Move Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Fixed Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Fixed Scrap Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Lot Size            ;Decimal       ;CaptionML=ENU=Lot Size;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Scrap Factor %      ;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Scrap Factor %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Setup Time Unit of Meas. Code }
    { 20  ;   ;Run Time Unit of Meas. Code;Code10 ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Run Time Unit of Meas. Code }
    { 21  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Wait Time Unit of Meas. Code }
    { 22  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Move Time Unit of Meas. Code }
    { 27  ;   ;Minimum Process Time;Decimal       ;CaptionML=ENU=Minimum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 28  ;   ;Maximum Process Time;Decimal       ;CaptionML=ENU=Maximum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 30  ;   ;Concurrent Capacities;Decimal      ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Concurrent Capacities;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 31  ;   ;Send-Ahead Quantity ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates;
                                                              END;

                                                   CaptionML=ENU=Send-Ahead Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   CaptionML=ENU=Routing Link Code }
    { 35  ;   ;Standard Task Code  ;Code10        ;TableRelation="Standard Task";
                                                   OnValidate=VAR
                                                                StandardTask@1000 : Record "Standard Task";
                                                              BEGIN
                                                                if "Standard Task Code" = '' then
                                                                  exit;

                                                                StandardTask.GET("Standard Task Code");
                                                                Description := StandardTask.Description;
                                                              END;

                                                   CaptionML=ENU=Standard Task Code }
    { 40  ;   ;Unit Cost per       ;Decimal       ;CaptionML=ENU=Unit Cost per;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 41  ;   ;Recalculate         ;Boolean       ;CaptionML=ENU=Recalculate;
                                                   Editable=false }
    { 50  ;   ;Sequence No.(Forward);Integer      ;CaptionML=ENU=Sequence No.(Forward);
                                                   Editable=false }
    { 51  ;   ;Sequence No.(Backward);Integer     ;CaptionML=ENU=Sequence No.(Backward);
                                                   Editable=false }
    { 52  ;   ;Fixed Scrap Qty. (Accum.);Decimal  ;CaptionML=ENU=Fixed Scrap Qty. (Accum.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Scrap Factor % (Accumulated);Decimal;
                                                   CaptionML=ENU=Scrap Factor % (Accumulated);
                                                   DecimalPlaces=1:1;
                                                   Editable=false }
    { 55  ;   ;Sequence No. (Actual);Integer      ;CaptionML=ENU=Sequence No. (Actual);
                                                   Editable=false }
    { 56  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   DecimalPlaces=2:5 }
    { 57  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Unit Cost per" :=
                                                                  ROUND("Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 58  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Output Quantity     ;Decimal       ;CaptionML=ENU=Output Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 70  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                MODIFY;

                                                                PlanningRtngLine.GET(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name","Worksheet Line No.","Operation No.");

                                                                PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,0,ReqLine);
                                                                PlanningRtngLine.SETCURRENTKEY(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name",
                                                                  "Worksheet Line No.","Sequence No. (Actual)");

                                                                PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,0,false);

                                                                CalculateRoutingBack;
                                                                CalculateRoutingForward;

                                                                GET(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name","Worksheet Line No.","Operation No.");

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 71  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 72  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                MODIFY;

                                                                PlanningRtngLine.GET(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name","Worksheet Line No.","Operation No.");

                                                                PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,1,ReqLine);
                                                                PlanningRtngLine.SETCURRENTKEY(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name",
                                                                  "Worksheet Line No.","Sequence No. (Actual)");
                                                                PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,1,false);

                                                                CalculateRoutingBack;
                                                                CalculateRoutingForward;

                                                                GET(
                                                                  "Worksheet Template Name",
                                                                  "Worksheet Batch Name","Worksheet Line No.","Operation No.");
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 73  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 76  ;   ;Unit Cost Calculation;Option       ;CaptionML=ENU=Unit Cost Calculation;
                                                   OptionCaptionML=ENU=Time,Units;
                                                   OptionString=Time,Units }
    { 77  ;   ;Input Quantity      ;Decimal       ;CaptionML=ENU=Input Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 78  ;   ;Critical Path       ;Boolean       ;CaptionML=ENU=Critical Path;
                                                   Editable=false }
    { 98  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 99  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
    { 99000909;;Expected Operation Cost Amt.;Decimal;
                                                   CaptionML=ENU=Expected Operation Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 99000910;;Expected Capacity Ovhd. Cost;Decimal;
                                                   CaptionML=ENU=Expected Capacity Ovhd. Cost;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 99000911;;Expected Capacity Need;Decimal    ;CaptionML=ENU=Expected Capacity Need;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.","Operation No.";
                                                   SumIndexFields="Expected Operation Cost Amt.";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.","Sequence No.(Forward)";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.","Sequence No.(Backward)";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.","Sequence No. (Actual)";
                                                   MaintainSQLIndex=false }
    {    ;"Worksheet Template Name","Worksheet Batch Name",Type,"No.","Starting Date";
                                                   MaintainSQLIndex=false }
    {    ;"Work Center No."                        }
    {    ;Type,"No."                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in previous operations';
      Text001@1001 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in next operations';
      WorkCenter@1004 : Record "Work Center";
      MachineCenter@1005 : Record "Machine Center";
      ReqLine@1006 : Record "Requisition Line";
      PlanningRtngLine@1007 : Record "Planning Routing Line";
      ProdOrderCapNeed@1008 : Record "Prod. Order Capacity Need";
      GLSetup@1002 : Record "General Ledger Setup";
      PlngLnMgt@1009 : Codeunit "Planning Line Management";
      PlanningRoutingMgt@1010 : Codeunit PlanningRoutingManagement;
      HasGLSetup@1020 : Boolean;

    [External]
    PROCEDURE Caption@5() : Text[100];
    VAR
      ReqWkshName@1000 : Record "Requisition Wksh. Name";
      ReqLine@1001 : Record "Requisition Line";
    BEGIN
      if GETFILTERS = '' then
        exit('');

      if not ReqWkshName.GET("Worksheet Template Name","Worksheet Batch Name") then
        exit('');

      if not ReqLine.GET("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.") then
        CLEAR(ReqLine);

      exit(
        STRSUBSTNO('%1 %2 %3 %4 %5',
          "Worksheet Batch Name",ReqWkshName.Description,ReqLine.Type,ReqLine."No.",ReqLine.Description));
    END;

    LOCAL PROCEDURE GetLine@14();
    BEGIN
      if (ReqLine."Worksheet Template Name" <> "Worksheet Template Name") or
         (ReqLine."Journal Batch Name" <> "Worksheet Batch Name") or
         (ReqLine."Line No." <> "Worksheet Line No.")
      then
        ReqLine.GET("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
    END;

    LOCAL PROCEDURE WorkCenterTransferfields@2();
    BEGIN
      "Work Center No." := WorkCenter."No.";
      "Work Center Group Code" := WorkCenter."Work Center Group Code";
      "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Run Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      Description := WorkCenter.Name;
      "Unit Cost per" := WorkCenter."Unit Cost";
      "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
      "Indirect Cost %" := WorkCenter."Indirect Cost %";
      "Overhead Rate" := WorkCenter."Overhead Rate";
    END;

    LOCAL PROCEDURE MachineCtrTransferfields@1();
    BEGIN
      WorkCenter.GET(MachineCenter."Work Center No.");
      WorkCenterTransferfields;

      Description := MachineCenter.Name;
      "Setup Time" := MachineCenter."Setup Time";
      "Wait Time" := MachineCenter."Wait Time";
      "Move Time" := MachineCenter."Move Time";
      "Fixed Scrap Quantity" := MachineCenter."Fixed Scrap Quantity";
      "Scrap Factor %" := MachineCenter."Scrap %";
      "Minimum Process Time" := MachineCenter."Minimum Process Time";
      "Maximum Process Time" := MachineCenter."Maximum Process Time";
      "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
      "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
      "Setup Time Unit of Meas. Code" := MachineCenter."Setup Time Unit of Meas. Code";
      "Wait Time Unit of Meas. Code" := MachineCenter."Wait Time Unit of Meas. Code";
      "Move Time Unit of Meas. Code" := MachineCenter."Move Time Unit of Meas. Code";
      "Unit Cost per" := MachineCenter."Unit Cost";
      "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
      "Indirect Cost %" := MachineCenter."Indirect Cost %";
      "Overhead Rate" := MachineCenter."Overhead Rate";
    END;

    [External]
    PROCEDURE SetRecalcStatus@4();
    BEGIN
      Recalculate := true;
    END;

    [External]
    PROCEDURE RunTimePer@7() : Decimal;
    BEGIN
      if "Lot Size" = 0 then
        "Lot Size" := 1;

      exit(ROUND("Run Time" / "Lot Size",0.00001));
    END;

    LOCAL PROCEDURE CalcStartingEndingDates@17();
    BEGIN
      MODIFY;

      PlanningRtngLine.GET(
        "Worksheet Template Name",
        "Worksheet Batch Name","Worksheet Line No.","Operation No.");

      PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,0,ReqLine);
      PlanningRtngLine.SETCURRENTKEY(
        "Worksheet Template Name",
        "Worksheet Batch Name",
        "Worksheet Line No.","Sequence No. (Actual)");

      PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,0,false);

      CalculateRoutingBack;
      CalculateRoutingForward;

      GET(
        "Worksheet Template Name",
        "Worksheet Batch Name","Worksheet Line No.","Operation No.");
    END;

    LOCAL PROCEDURE CalculateRoutingBack@10();
    BEGIN
      if "Previous Operation No." = '' then
        exit;

      GetLine;

      PlanningRtngLine.RESET;
      PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.","Worksheet Line No.");
      PlanningRtngLine.SETFILTER("Operation No.","Previous Operation No.");

      if PlanningRtngLine.FIND('-') then
        repeat
          PlanningRtngLine.SETCURRENTKEY(
            "Worksheet Template Name",
            "Worksheet Batch Name",
            "Worksheet Line No.","Sequence No. (Actual)");
          WorkCenter.GET(PlanningRtngLine."Work Center No.");

          case WorkCenter."Simulation Type" of
            WorkCenter."Simulation Type"::Moves:
              begin
                PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,1,ReqLine);
                PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,1,true);
              end;
            WorkCenter."Simulation Type"::"Moves When Necessary":
              begin
                if (PlanningRtngLine."Ending Date" > "Starting Date") or
                   ((PlanningRtngLine."Ending Date" = "Starting Date") and
                    (PlanningRtngLine."Ending Time" > "Starting Time"))
                then begin
                  PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,1,ReqLine);
                  PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,1,true);
                end;
              end;
            WorkCenter."Simulation Type"::Critical:
              begin
                if (PlanningRtngLine."Ending Date" > "Starting Date") or
                   ((PlanningRtngLine."Ending Date" = "Starting Date") and
                    (PlanningRtngLine."Ending Time" > "Starting Time"))
                then
                  ERROR(Text000);
              end;
          end;
          PlanningRtngLine.SETCURRENTKEY(
            "Worksheet Template Name",
            "Worksheet Batch Name","Worksheet Line No.","Operation No.");
        until PlanningRtngLine.NEXT = 0;

      PlngLnMgt.CalculatePlanningLineDates(ReqLine);
      AdjustComponents(ReqLine);
    END;

    LOCAL PROCEDURE CalculateRoutingForward@9();
    BEGIN
      if "Next Operation No." = '' then
        exit;

      GetLine;

      PlanningRtngLine.RESET;
      PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.","Worksheet Line No.");
      PlanningRtngLine.SETFILTER("Operation No.","Next Operation No.");

      if PlanningRtngLine.FIND('-') then
        repeat
          PlanningRtngLine.SETCURRENTKEY(
            "Worksheet Template Name",
            "Worksheet Batch Name",
            "Worksheet Line No.","Sequence No. (Actual)");
          WorkCenter.GET(PlanningRtngLine."Work Center No.");
          case WorkCenter."Simulation Type" of
            WorkCenter."Simulation Type"::Moves:
              begin
                PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,0,ReqLine);
                PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,0,true);
              end;
            WorkCenter."Simulation Type"::"Moves When Necessary":
              begin
                if (PlanningRtngLine."Starting Date" < "Ending Date") or
                   ((PlanningRtngLine."Starting Date" = "Ending Date") and
                    (PlanningRtngLine."Starting Time" < "Ending Time"))
                then begin
                  PlanningRoutingMgt.CalcSequenceFromActual(PlanningRtngLine,0,ReqLine);
                  PlngLnMgt.CalculateRoutingFromActual(PlanningRtngLine,0,true);
                end;
              end;
            WorkCenter."Simulation Type"::Critical:
              begin
                if (PlanningRtngLine."Starting Date" < "Ending Date") or
                   ((PlanningRtngLine."Starting Date" = "Ending Date") and
                    (PlanningRtngLine."Starting Time" < "Ending Time"))
                then
                  ERROR(Text001);
              end;
          end;
          PlanningRtngLine.SETCURRENTKEY(
            "Worksheet Template Name",
            "Worksheet Batch Name","Worksheet Line No.","Operation No.");
        until PlanningRtngLine.NEXT = 0;

      PlngLnMgt.CalculatePlanningLineDates(ReqLine);
      AdjustComponents(ReqLine);
    END;

    LOCAL PROCEDURE ModifyCapNeedEntries@12();
    BEGIN
      ProdOrderCapNeed.SETCURRENTKEY("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
      ProdOrderCapNeed.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Line No.","Worksheet Line No.");
      ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
      if ProdOrderCapNeed.FIND('-') then
        repeat
          ProdOrderCapNeed."No." := "No.";
          ProdOrderCapNeed."Work Center No." := "Work Center No.";
          ProdOrderCapNeed."Work Center Group Code" := "Work Center Group Code";
          ProdOrderCapNeed.MODIFY;
        until ProdOrderCapNeed.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustComponents@13(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningComponent@1001 : Record "Planning Component";
    BEGIN
      PlanningComponent.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.",ReqLine."Line No.");

      if PlanningComponent.FIND('-') then
        repeat
          PlanningComponent.VALIDATE("Routing Link Code");
          PlanningComponent.MODIFY;
        until PlanningComponent.NEXT = 0;
    END;

    [External]
    PROCEDURE TransferFromProdOrderRouting@3(VAR ProdOrderRoutingLine@1000 : Record "Prod. Order Routing Line");
    BEGIN
      ProdOrderRoutingLine.TESTFIELD(Recalculate,false);
      "Operation No." := ProdOrderRoutingLine."Operation No.";
      "Next Operation No." := ProdOrderRoutingLine."Next Operation No.";
      "Previous Operation No." := ProdOrderRoutingLine."Previous Operation No.";
      Type := ProdOrderRoutingLine.Type;
      "No." := ProdOrderRoutingLine."No.";
      Description := ProdOrderRoutingLine.Description;
      "Work Center No." := ProdOrderRoutingLine."Work Center No.";
      "Work Center Group Code" := ProdOrderRoutingLine."Work Center Group Code";
      "Setup Time" := ProdOrderRoutingLine."Setup Time";
      "Run Time" := ProdOrderRoutingLine."Run Time";
      "Wait Time" := ProdOrderRoutingLine."Wait Time";
      "Move Time" := ProdOrderRoutingLine."Move Time";
      "Fixed Scrap Quantity" := ProdOrderRoutingLine."Fixed Scrap Quantity";
      "Lot Size" := ProdOrderRoutingLine."Lot Size";
      "Scrap Factor %" := ProdOrderRoutingLine."Scrap Factor %";
      "Setup Time Unit of Meas. Code" := ProdOrderRoutingLine."Setup Time Unit of Meas. Code";
      "Run Time Unit of Meas. Code" := ProdOrderRoutingLine."Run Time Unit of Meas. Code";
      "Wait Time Unit of Meas. Code" := ProdOrderRoutingLine."Wait Time Unit of Meas. Code";
      "Move Time Unit of Meas. Code" := ProdOrderRoutingLine."Move Time Unit of Meas. Code";
      "Minimum Process Time" := ProdOrderRoutingLine."Minimum Process Time";
      "Maximum Process Time" := ProdOrderRoutingLine."Maximum Process Time";
      "Concurrent Capacities" := ProdOrderRoutingLine."Concurrent Capacities";
      "Send-Ahead Quantity" := ProdOrderRoutingLine."Send-Ahead Quantity";
      "Direct Unit Cost" := ProdOrderRoutingLine."Direct Unit Cost";
      "Unit Cost per" := ProdOrderRoutingLine."Unit Cost per";
      "Unit Cost Calculation" := ProdOrderRoutingLine."Unit Cost Calculation";
      "Indirect Cost %" := ProdOrderRoutingLine."Indirect Cost %";
      "Overhead Rate" := ProdOrderRoutingLine."Overhead Rate";
      VALIDATE("Routing Link Code",ProdOrderRoutingLine."Routing Link Code");
      "Standard Task Code" := ProdOrderRoutingLine."Standard Task Code";
      "Sequence No.(Forward)" := ProdOrderRoutingLine."Sequence No. (Forward)";
      "Sequence No.(Backward)" := ProdOrderRoutingLine."Sequence No. (Backward)";
      "Fixed Scrap Qty. (Accum.)" := ProdOrderRoutingLine."Fixed Scrap Qty. (Accum.)";
      "Scrap Factor % (Accumulated)" := ProdOrderRoutingLine."Scrap Factor % (Accumulated)";
      "Starting Time" := ProdOrderRoutingLine."Starting Time";
      "Starting Date" := ProdOrderRoutingLine."Starting Date";
      "Ending Time" := ProdOrderRoutingLine."Ending Time";
      "Ending Date" := ProdOrderRoutingLine."Ending Date";
      UpdateDatetime;
      VALIDATE("Unit Cost per");
    END;

    [External]
    PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    [External]
    PROCEDURE SetNextOperations@6();
    VAR
      PlanningRtngLine2@1003 : Record "Planning Routing Line";
    BEGIN
      PlanningRtngLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine2.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      PlanningRtngLine2.SETRANGE("Worksheet Line No.","Worksheet Line No.");
      PlanningRtngLine2.SETFILTER("Operation No.",'>%1',"Operation No.");

      if PlanningRtngLine2.FINDFIRST then
        "Next Operation No." := PlanningRtngLine2."Operation No."
      else begin
        PlanningRtngLine2.SETFILTER("Operation No.",'');
        PlanningRtngLine2.SETRANGE("Next Operation No.",'');
        if PlanningRtngLine2.FINDFIRST then begin
          PlanningRtngLine2."Next Operation No." := "Operation No.";
          PlanningRtngLine2.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE GetGLSetup@1022();
    BEGIN
      if not HasGLSetup then begin
        HasGLSetup := true;
        GLSetup.GET;
      end;
    END;

    BEGIN
    END.
  }
}

