OBJECT Codeunit 5972 Service Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record Item;
      ServHeader@1003 : Record "Service Header";
      SalesPriceCalcMgt@1002 : Codeunit "Sales Price Calc. Mgt.";

    [External]
    PROCEDURE CalcAvailability@18(VAR ServLine@1000 : Record "Service Line") : Decimal;
    VAR
      AvailableToPromise@1001 : Codeunit "Available to Promise";
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      AvailabilityDate@1004 : Date;
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      if GetItem(ServLine) then begin
        if ServLine."Needed by Date" <> 0D then
          AvailabilityDate := ServLine."Needed by Date"
        else
          AvailabilityDate := WORKDATE;

        Item.RESET;
        Item.SETRANGE("Date Filter",0D,AvailabilityDate);
        Item.SETRANGE("Variant Filter",ServLine."Variant Code");
        Item.SETRANGE("Location Filter",ServLine."Location Code");
        Item.SETRANGE("Drop Shipment Filter",false);

        exit(
          AvailableToPromise.QtyAvailabletoPromise(
            Item,
            GrossRequirement,
            ScheduledReceipt,
            AvailabilityDate,
            PeriodType,
            LookaheadDateformula));
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSubstitutions@20(VAR ServLine@1000 : Record "Service Line") : Integer;
    BEGIN
      if GetItem(ServLine) then begin
        Item.CALCFIELDS("No. of Substitutes");
        exit(Item."No. of Substitutes");
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSalesPrices@19(VAR ServLine@1000 : Record "Service Line") : Integer;
    BEGIN
      if GetItem(ServLine) then begin
        GetServHeader(ServLine);
        exit(SalesPriceCalcMgt.NoOfServLinePrice(ServHeader,ServLine,true));
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSalesLineDisc@22(VAR ServLine@1001 : Record "Service Line") : Integer;
    BEGIN
      if GetItem(ServLine) then begin
        GetServHeader(ServLine);
        exit(SalesPriceCalcMgt.NoOfServLineLineDisc(ServHeader,ServLine,true));
      end;
    END;

    LOCAL PROCEDURE GetItem@24(VAR ServLine@1000 : Record "Service Line") : Boolean;
    BEGIN
      with Item do begin
        if (ServLine.Type <> ServLine.Type::Item) or (ServLine."No." = '') then
          exit(false);

        if ServLine."No." <> "No." then
          GET(ServLine."No.");
        exit(true);
      end;
    END;

    LOCAL PROCEDURE GetServHeader@13(ServLine@1000 : Record "Service Line");
    BEGIN
      if (ServLine."Document Type" <> ServHeader."Document Type") or
         (ServLine."Document No." <> ServHeader."No.")
      then
        ServHeader.GET(ServLine."Document Type",ServLine."Document No.");
    END;

    [External]
    PROCEDURE CalcNoOfServItemComponents@27(VAR ServItemLine@1000 : Record "Service Item Line") : Integer;
    VAR
      ServItem@1002 : Record "Service Item";
      ServItemComponent@1001 : Record "Service Item Component";
    BEGIN
      if ServItem.GET(ServItemLine."Service Item No.") then begin
        ServItemComponent.RESET;
        ServItemComponent.SETRANGE(Active,true);
        ServItemComponent.SETRANGE("Parent Service Item No.",ServItemLine."Service Item No.");
        exit(ServItemComponent.COUNT);
      end;
    END;

    [External]
    PROCEDURE CalcNoOfTroubleshootings@26(VAR ServItemLine@1000 : Record "Service Item Line") : Integer;
    VAR
      ServItem@1002 : Record "Service Item";
      TroubleshootingSetup@1001 : Record "Troubleshooting Setup";
    BEGIN
      TroubleshootingSetup.RESET;
      TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::"Service Item");
      TroubleshootingSetup.SETRANGE("No.",ServItemLine."Service Item No.");
      if not TroubleshootingSetup.ISEMPTY then
        exit(TroubleshootingSetup.COUNT);
      if not ServItem.GET(ServItemLine."Service Item No.") then
        exit(0);
      TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::Item);
      TroubleshootingSetup.SETRANGE("No.",ServItem."Item No.");
      if not TroubleshootingSetup.ISEMPTY then
        exit(TroubleshootingSetup.COUNT);
      TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::"Service Item Group");
      TroubleshootingSetup.SETRANGE("No.",ServItem."Service Item Group Code");
      exit(TroubleshootingSetup.COUNT);
    END;

    [External]
    PROCEDURE CalcNoOfSkilledResources@25(VAR ServItemLine@1001 : Record "Service Item Line") : Integer;
    VAR
      ServItem@1003 : Record "Service Item";
      Res@1000 : Record Resource;
      ServOrderAllocMgt@1005 : Codeunit ServAllocationManagement;
      NoOfSkilledResources@1002 : Integer;
      ResourceSkillType@1004 : 'Resource,"Service Item Group",Item,"Service Item"';
    BEGIN
      if ServItem.GET(ServItemLine."Service Item No.") then begin
        Res.RESET;
        if Res.FIND('-') then
          repeat
            if ServOrderAllocMgt.ResourceQualified(Res."No.",ResourceSkillType::"Service Item",ServItem."No.") then
              NoOfSkilledResources += 1;
          until Res.NEXT = 0;
        exit(NoOfSkilledResources);
      end;
    END;

    [External]
    PROCEDURE ShowServItemComponents@28(VAR ServItemLine@1000 : Record "Service Item Line");
    VAR
      ServItem@1002 : Record "Service Item";
      ServItemComponent@1001 : Record "Service Item Component";
    BEGIN
      if ServItem.GET(ServItemLine."Service Item No.") then begin
        ServItemComponent.RESET;
        ServItemComponent.SETRANGE(Active,true);
        ServItemComponent.SETRANGE("Parent Service Item No.",ServItemLine."Service Item No.");
        PAGE.RUNMODAL(PAGE::"Service Item Component List",ServItemComponent);
      end;
    END;

    [External]
    PROCEDURE ShowTroubleshootings@29(VAR ServItemLine@1000 : Record "Service Item Line");
    VAR
      ServItem@1002 : Record "Service Item";
      TroubleshootingSetup@1001 : Record "Troubleshooting Setup";
    BEGIN
      if ServItem.GET(ServItemLine."Service Item No.") then begin
        TroubleshootingSetup.RESET;
        TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::"Service Item");
        TroubleshootingSetup.SETRANGE("No.",ServItemLine."Service Item No.");
        PAGE.RUNMODAL(PAGE::"Troubleshooting Setup",TroubleshootingSetup);
      end;
    END;

    [External]
    PROCEDURE ShowSkilledResources@30(VAR ServItemLine@1000 : Record "Service Item Line");
    VAR
      ServItem@1002 : Record "Service Item";
      ResourceSkill@1003 : Record "Resource Skill";
      SkilledResourceList@1001 : Page "Skilled Resource List";
    BEGIN
      if ServItem.GET(ServItemLine."Service Item No.") then begin
        CLEAR(SkilledResourceList);
        SkilledResourceList.Initialize(ResourceSkill.Type::"Service Item",ServItem."No.",ServItem.Description);
        SkilledResourceList.RUNMODAL;
      end;
    END;

    BEGIN
    END.
  }
}

