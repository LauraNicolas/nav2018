OBJECT Codeunit 1215 Data Exch. Type Selector
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Incoming Document Attachment";
    Permissions=TableData "Data Exch."=imd;
    OnRun=VAR
            BestDataExchCode@1000 : Code[20];
          BEGIN
            if Type <> Type::XML then
              ERROR(InvalidTypeErr);

            CheckContentHasValue(Rec);

            BestDataExchCode := FindDataExchType(Rec);

            SetResult("Incoming Document Entry No.",BestDataExchCode);
          END;

  }
  CODE
  {
    VAR
      InvalidTypeErr@1000 : TextConst 'ENU=The attachment is not an XML document.';
      AttachmentEmptyErr@1001 : TextConst 'ENU=The attachment does not contain any data.';

    LOCAL PROCEDURE FindDataExchType@7(IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment") : Code[20];
    VAR
      DataExch@1005 : Record "Data Exch.";
      DataExchangeType@1004 : Record "Data Exchange Type";
      DataExchDef@1003 : Record "Data Exch. Def";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      BestDataExchCode@1007 : Code[20];
      BestDataExchValue@1006 : Integer;
    BEGIN
      if DataExchangeType.FINDSET then
        repeat
          if DataExchDefUsesIntermediate(DataExchangeType."Data Exch. Def. Code") then begin
            DataExchDef.GET(DataExchangeType."Data Exch. Def. Code");
            CreateDataExch(DataExch,DataExchDef,IncomingDocumentAttachment);
            // Create Intermediate table records for each Data Exchange Type
            if TryCreateIntermediate(DataExch,DataExchDef) then begin
              IntermediateDataImport.SETRANGE("Data Exch. No.",DataExch."Entry No.");

              // Update best result if this one is better
              if IntermediateDataImport.COUNT > BestDataExchValue then begin
                BestDataExchCode := DataExchDef.Code;
                BestDataExchValue := IntermediateDataImport.COUNT;
              end;

              IntermediateDataImport.DELETEALL(true); // cleanup
            end;
            DataExch.DELETE(true); // cleanup
          end;
        until DataExchangeType.NEXT = 0;

      exit(BestDataExchCode);
    END;

    LOCAL PROCEDURE CreateDataExch@2(VAR DataExch@1000 : Record "Data Exch.";DataExchDef@1002 : Record "Data Exch. Def";IncomingDocumentAttachment@1001 : Record "Incoming Document Attachment");
    VAR
      Stream@1003 : InStream;
    BEGIN
      IncomingDocumentAttachment.Content.CREATEINSTREAM(Stream);

      DataExch.INIT;
      DataExch.InsertRec(IncomingDocumentAttachment.Name,Stream,DataExchDef.Code);
      DataExch.VALIDATE("Incoming Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      DataExch.MODIFY(true);
    END;

    LOCAL PROCEDURE TryCreateIntermediate@3(DataExch@1000 : Record "Data Exch.";DataExchDef@1001 : Record "Data Exch. Def") : Boolean;
    BEGIN
      COMMIT;
      if DataExchDef."Reading/Writing Codeunit" <> 0 then begin
        if not CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",DataExch) then
          exit(false);

        if DataExchDef."Data Handling Codeunit" <> 0 then
          if not CODEUNIT.RUN(DataExchDef."Data Handling Codeunit",DataExch) then
            exit(false);
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE SetResult@6(IncomingDocCode@1000 : Integer;DataExchTypeCode@1001 : Code[20]);
    VAR
      DataExchangeType@1002 : Record "Data Exchange Type";
      IncomingDocument@1003 : Record "Incoming Document";
    BEGIN
      if DataExchTypeCode = '' then
        exit;

      DataExchangeType.SETRANGE("Data Exch. Def. Code",DataExchTypeCode);
      DataExchangeType.FINDFIRST;

      IncomingDocument.GET(IncomingDocCode);
      IncomingDocument.VALIDATE("Data Exchange Type",DataExchangeType.Code);
      IncomingDocument.MODIFY(true);
    END;

    LOCAL PROCEDURE CheckContentHasValue@4(VAR IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment");
    VAR
      LiveIncomingDocumentAttachment@1001 : Record "Incoming Document Attachment";
    BEGIN
      // Is the data already loaded or is it in the db?
      LiveIncomingDocumentAttachment := IncomingDocumentAttachment;
      LiveIncomingDocumentAttachment.CALCFIELDS(Content);
      if LiveIncomingDocumentAttachment.Content.HASVALUE then
        IncomingDocumentAttachment.CALCFIELDS(Content);

      if not IncomingDocumentAttachment.Content.HASVALUE then
        ERROR(AttachmentEmptyErr);
    END;

    LOCAL PROCEDURE DataExchDefUsesIntermediate@1(DataExchDefCode@1000 : Code[20]) : Boolean;
    VAR
      DataExchMapping@1001 : Record "Data Exch. Mapping";
    BEGIN
      // Ensure that the data exch def uses the intermediate table so we don't just start inserting data into the db.
      DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchMapping.SETRANGE("Use as Intermediate Table",false);
      exit(not DataExchMapping.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

