OBJECT Report 1130 Delete Cost Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rm;
    CaptionML=ENU=Delete Cost Entries;
    ProcessingOnly=true;
    OnPreReport=VAR
                  CostRegister@1000 : Record "Cost Register";
                BEGIN
                  if CostRegister2."No." > CostRegister3."No." then
                    ERROR(Text000);

                  if not CONFIRM(Text001,false,CostRegister2."No.",CostRegister3."No.") then
                    ERROR('');

                  if not CONFIRM(Text004) then
                    ERROR('');

                  CostRegister.FINDLAST;
                  if CostRegister."No." > CostRegister3."No." then
                    ERROR(STRSUBSTNO(CostRegisterHasBeenModifiedErr,CostRegister."No."));

                  Window.OPEN(Text005 +
                    Text006 );
                END;

  }
  DATASET
  {
    { 5327;    ;DataItem;Cost Register       ;
               DataItemTable="Cost Register";
               DataItemTableView=SORTING("No.") ORDER(Descending);
               OnPreDataItem=BEGIN
                               SETRANGE("No.",CostRegister2."No.",CostRegister3."No.");
                             END;

               OnAfterGetRecord=VAR
                                  CostEntry@1000 : Record "Cost Entry";
                                BEGIN
                                  Window.UPDATE(1,"No.");

                                  if Closed then
                                    ERROR(Text007,"No.");

                                  if Source = Source::Allocation then begin
                                    CostEntry.SETCURRENTKEY("Allocated with Journal No.");
                                    CostEntry.SETRANGE("Allocated with Journal No.","No.");
                                    CostEntry.MODIFYALL(Allocated,false);
                                    CostEntry.MODIFYALL("Allocated with Journal No.",0);
                                  end;

                                  CostEntry.RESET;
                                  CostEntry.SETRANGE("Entry No.","From Cost Entry No.","To Cost Entry No.");
                                  CostEntry.DELETEALL;
                                END;

               OnPostDataItem=VAR
                                CostEntry@1000 : Record "Cost Entry";
                              BEGIN
                                DELETEALL;
                                RESET;
                                SETRANGE(Source,Source::Allocation);
                                if FINDLAST then begin
                                  CostEntry.GET("To Cost Entry No.");
                                  CostAccSetup.GET;
                                  CostAccSetup."Last Allocation Doc. No." := CostEntry."Document No.";
                                  CostAccSetup.MODIFY;
                                end;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   CostRegister2.FINDLAST;
                   CostRegister3.FINDLAST;
                 END;

    }
    CONTROLS
    {
      { 1   ;0   ;Container ;
                  Name=Container1;
                  ContainerType=ContentArea }

      { 2   ;1   ;Group     ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=FromRegisterNo;
                  Lookup=true;
                  CaptionML=ENU=From Register No.;
                  ToolTipML=ENU=Specifies the starting posted register number to determine the starting point for the deletion of register numbers.;
                  ApplicationArea=#CostAccounting;
                  SourceExpr=CostRegister2."No.";
                  TableRelation="Cost Register" WHERE (Closed=CONST(false)) }

      { 4   ;2   ;Field     ;
                  Name=ToRegisterNo;
                  CaptionML=ENU=To Register No.;
                  ToolTipML=ENU=Specifies that the last posted register number is filled in automatically. You cannot change the contents of this field.;
                  ApplicationArea=#CostAccounting;
                  SourceExpr=CostRegister3."No.";
                  TableRelation="Cost Register" WHERE (Closed=CONST(false));
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=From Register No. must not be higher than To Register No..';
      Text001@1001 : TextConst 'ENU=All corresponding cost entries and register entries will be deleted. Do you want to delete cost register %1 to %2?';
      Text004@1002 : TextConst 'ENU=Are you sure?';
      Text005@1003 : TextConst 'ENU=Delete cost register\';
      Text006@1004 : TextConst 'ENU=Register  no.      #1######';
      Text007@1005 : TextConst 'ENU=Register %1 can no longer be deleted because it is marked as closed.';
      CostRegister2@1006 : Record "Cost Register";
      CostRegister3@1007 : Record "Cost Register";
      CostAccSetup@1010 : Record "Cost Accounting Setup";
      Window@1011 : Dialog;
      CostRegisterHasBeenModifiedErr@1008 : TextConst 'ENU=Another user has modified the cost register. The To Register No. field must be equal to %1.\Run the Delete Cost Entries batch job again.';

    PROCEDURE InitializeRequest@1(NewFromRegisterNo@1000 : Integer;NewToRegisterNo@1001 : Integer);
    BEGIN
      CostRegister2."No." := NewFromRegisterNo;
      CostRegister3."No." := NewToRegisterNo;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

