OBJECT Codeunit 99000815 Reservation-Check Date Confl.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The change leads to a date conflict with existing reservations.\';
      Text001@1001 : TextConst 'ENU=Reserved quantity (Base): %1, Date %2\';
      Text002@1002 : TextConst 'ENU=Cancel or change reservations and try again.';
      ReservEntry@1003 : Record "Reservation Entry";
      ReservEngineMgt@1004 : Codeunit "Reservation Engine Mgt.";
      ReserveSalesLine@1005 : Codeunit "Sales Line-Reserve";
      ReservePurchLine@1006 : Codeunit "Purch. Line-Reserve";
      ReserveReqLine@1007 : Codeunit "Req. Line-Reserve";
      ReserveItemJnlLine@1008 : Codeunit "Item Jnl. Line-Reserve";
      ReserveProdOrderLine@1009 : Codeunit "Prod. Order Line-Reserve";
      ReserveProdOrderComp@1010 : Codeunit "Prod. Order Comp.-Reserve";
      AssemblyHeaderReserve@1017 : Codeunit "Assembly Header-Reserve";
      AssemblyLineReserve@1016 : Codeunit "Assembly Line-Reserve";
      ReservePlanningComponent@1011 : Codeunit "Plng. Component-Reserve";
      ReserveTransLine@1012 : Codeunit "Transfer Line-Reserve";
      ServLineReserve@1013 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1015 : Codeunit "Job Planning Line-Reserve";
      ReservMgt@1014 : Codeunit "Reservation Management";
      DateConflictMsg@1019 : TextConst '@@@=%1: Field(Reserved Quantity (Base)), %2: Field(Due Date);ENU=The change causes a date conflict with an existing reservation on %2 for %1 units.\ \The reservations have been canceled. The production order must be replanned.';

    [External]
    PROCEDURE SalesLineCheck@2(SalesLine@1000 : Record "Sales Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReserveSalesLine.FindReservEntry(SalesLine,ReservEntry) then
        exit;
      if DateConflict(SalesLine."Shipment Date",ForceRequest) then
        if ForceRequest then
          IssueError(SalesLine."Shipment Date");
      UpdateDate(ReservEntry,SalesLine."Shipment Date");
      ReservMgt.SetSalesLine(SalesLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(SalesLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE PurchLineCheck@7(PurchLine@1000 : Record "Purchase Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReservePurchLine.FindReservEntry(PurchLine,ReservEntry) then
        exit;
      if DateConflict(PurchLine."Expected Receipt Date",ForceRequest) then
        if ForceRequest then
          IssueError(PurchLine."Expected Receipt Date");
      UpdateDate(ReservEntry,PurchLine."Expected Receipt Date");
      ReservMgt.SetPurchLine(PurchLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PurchLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE ItemJnlLineCheck@4(ItemJnlLine@1000 : Record "Item Journal Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReserveItemJnlLine.FindReservEntry(ItemJnlLine,ReservEntry) then
        exit;
      if DateConflict(ItemJnlLine."Posting Date",ForceRequest) then
        if ForceRequest then
          IssueError(ItemJnlLine."Posting Date");
      UpdateDate(ReservEntry,ItemJnlLine."Posting Date");
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ItemJnlLine."Quantity (Base)");
    END;

    [External]
    PROCEDURE ReqLineCheck@8(ReqLine@1000 : Record "Requisition Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReserveReqLine.FindReservEntry(ReqLine,ReservEntry) then
        exit;
      if DateConflict(ReqLine."Due Date",ForceRequest) then
        if ForceRequest then
          IssueError(ReqLine."Due Date");
      UpdateDate(ReservEntry,ReqLine."Due Date");
      ReservMgt.SetReqLine(ReqLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ReqLine."Quantity (Base)");
    END;

    [External]
    PROCEDURE ProdOrderLineCheck@9(ProdOrderLine@1000 : Record "Prod. Order Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReserveProdOrderLine.FindReservEntry(ProdOrderLine,ReservEntry) then
        exit;
      if DateConflict(ProdOrderLine."Due Date",ForceRequest) then
        if ForceRequest then
          IssueError(ProdOrderLine."Due Date");
      UpdateDate(ReservEntry,ProdOrderLine."Due Date");
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderLine."Remaining Qty. (Base)");
    END;

    [External]
    PROCEDURE ProdOrderComponentCheck@10(ProdOrderComp@1000 : Record "Prod. Order Component";ForceRequest@1002 : Boolean;IsCritical@1001 : Boolean) : Boolean;
    BEGIN
      if not ReserveProdOrderComp.FindReservEntry(ProdOrderComp,ReservEntry) then
        exit(false);
      if DateConflict(ProdOrderComp."Due Date",ForceRequest) then
        if ForceRequest then
          if IsCritical then
            IssueError(ProdOrderComp."Due Date")
          else
            IssueWarning(ProdOrderComp."Due Date");
      UpdateDate(ReservEntry,ProdOrderComp."Due Date");
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderComp."Remaining Qty. (Base)");
      exit(ForceRequest);
    END;

    [External]
    PROCEDURE AssemblyHeaderCheck@15(AssemblyHeader@1000 : Record "Assembly Header";ForceRequest@1001 : Boolean);
    BEGIN
      if not AssemblyHeaderReserve.FindReservEntry(AssemblyHeader,ReservEntry) then
        exit;
      if DateConflict(AssemblyHeader."Due Date",ForceRequest) then
        if ForceRequest then
          IssueError(AssemblyHeader."Due Date");
      UpdateDate(ReservEntry,AssemblyHeader."Due Date");
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(AssemblyHeader."Remaining Quantity (Base)");
    END;

    [External]
    PROCEDURE AssemblyLineCheck@14(AssemblyLine@1000 : Record "Assembly Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not AssemblyLineReserve.FindReservEntry(AssemblyLine,ReservEntry) then
        exit;
      if DateConflict(AssemblyLine."Due Date",ForceRequest) then
        if ForceRequest then
          IssueError(AssemblyLine."Due Date");
      UpdateDate(ReservEntry,AssemblyLine."Due Date");
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(AssemblyLine."Remaining Quantity (Base)");
    END;

    [External]
    PROCEDURE PlanningComponentCheck@12(PlanningComponent@1000 : Record "Planning Component";ForceRequest@1001 : Boolean);
    BEGIN
      if not ReservePlanningComponent.FindReservEntry(PlanningComponent,ReservEntry) then
        exit;
      if DateConflict(PlanningComponent."Due Date",ForceRequest) then
        if ForceRequest then
          IssueError(PlanningComponent."Due Date");
      UpdateDate(ReservEntry,PlanningComponent."Due Date");
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PlanningComponent."Net Quantity (Base)");
    END;

    [External]
    PROCEDURE TransferLineCheck@11(TransLine@1000 : Record "Transfer Line");
    VAR
      ResEntryFound@1003 : Boolean;
      ForceRequest@1002 : Boolean;
      Direction@1001 : 'Outbound,Inbound';
    BEGIN
      if ReserveTransLine.FindReservEntry(TransLine,ReservEntry,Direction::Outbound) then begin
        ResEntryFound := true;
        ForceRequest := true;
        if DateConflict(TransLine."Shipment Date",ForceRequest) then
          IssueError(TransLine."Shipment Date");
        UpdateDate(ReservEntry,TransLine."Shipment Date");
      end;
      if ReserveTransLine.FindReservEntry(TransLine,ReservEntry,Direction::Inbound) then begin
        ResEntryFound := true;
        ForceRequest := true;
        if DateConflict(TransLine."Receipt Date",ForceRequest) then
          IssueError(TransLine."Receipt Date");
        UpdateDate(ReservEntry,TransLine."Receipt Date");
      end;
      if not ResEntryFound then
        exit;
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(TransLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE ServiceInvLineCheck@5(ServLine@1000 : Record "Service Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not ServLineReserve.FindReservEntry(ServLine,ReservEntry) then
        exit;
      if DateConflict(ServLine."Needed by Date",ForceRequest) then
        if ForceRequest then
          IssueError(ServLine."Needed by Date");
      UpdateDate(ReservEntry,ServLine."Needed by Date");
      ReservMgt.SetServLine(ServLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ServLine."Outstanding Qty. (Base)");
    END;

    [External]
    PROCEDURE JobPlanningLineCheck@13(JobPlanningLine@1000 : Record "Job Planning Line";ForceRequest@1001 : Boolean);
    BEGIN
      if not JobPlanningLineReserve.FindReservEntry(JobPlanningLine,ReservEntry) then
        exit;
      if DateConflict(JobPlanningLine."Planning Date",ForceRequest) then
        if ForceRequest then
          IssueError(JobPlanningLine."Planning Date");
      UpdateDate(ReservEntry,JobPlanningLine."Planning Date");
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(JobPlanningLine."Remaining Qty. (Base)");
    END;

    LOCAL PROCEDURE UpdateDate@1(VAR FilterReservEntry@1000 : Record "Reservation Entry";Date@1001 : Date);
    BEGIN
      FilterReservEntry.SETRANGE("Reservation Status");
      if not FilterReservEntry.FIND('-') then
        exit;

      repeat
        if FilterReservEntry."Quantity (Base)" < 0 then
          if ((FilterReservEntry."Expected Receipt Date" <> 0D) and
              (Date < FilterReservEntry."Expected Receipt Date"))
          then
            if (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order") and
               FilterReservEntry.TrackingExists
            then
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            else
              if SameProdOrderAutoReserve(FilterReservEntry) then
                ReservEngineMgt.ModifyExpectedReceiptDate(FilterReservEntry,Date)
              else
                ReservEngineMgt.CloseReservEntry(FilterReservEntry,false,false)
          else
            ReservEngineMgt.ModifyShipmentDate(FilterReservEntry,Date)
        else
          if ((FilterReservEntry."Shipment Date" <> 0D) and
              (FilterReservEntry."Shipment Date" < Date))
          then
            if (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order") and
               FilterReservEntry.TrackingExists
            then
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            else
              ReservEngineMgt.CloseReservEntry(FilterReservEntry,false,false)
          else
            ReservEngineMgt.ModifyExpectedReceiptDate(FilterReservEntry,Date);
      until FilterReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE DateConflict@3(Date@1001 : Date;VAR ForceRequest@1002 : Boolean) IsConflict@1000 : Boolean;
    VAR
      ReservEntry2@1003 : Record "Reservation Entry";
    BEGIN
      ReservEntry2.COPY(ReservEntry);

      if not ReservEntry2.FINDFIRST then
        exit(false);

      if ReservEntry2."Quantity (Base)" < 0 then
        ReservEntry2.SETFILTER("Expected Receipt Date",'>%1',Date)
      else
        if Date <> 0D then
          ReservEntry2.SETRANGE("Shipment Date",00000101D,Date - 1);

      if ReservEntry2.ISEMPTY then
        exit(false);

      IsConflict := true;

      // Don't look at tracking and surplus:
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);

      ForceRequest := not ReservEntry2.ISEMPTY and ForceRequest;

      exit(IsConflict);
    END;

    LOCAL PROCEDURE IssueError@6(NewDate@1000 : Date);
    VAR
      ReservQty@1001 : Decimal;
    BEGIN
      ReservQty := CalcReservQty(NewDate);
      ERROR(Text000 + Text001 + Text002,ReservQty,NewDate);
    END;

    LOCAL PROCEDURE IssueWarning@17(NewDate@1000 : Date);
    VAR
      ReservQty@1001 : Decimal;
    BEGIN
      ReservQty := CalcReservQty(NewDate);
      MESSAGE(DateConflictMsg,ReservQty,NewDate);
    END;

    LOCAL PROCEDURE CalcReservQty@1010(NewDate@1102601000 : Date) : Decimal;
    VAR
      ReservEntry2@1102601002 : Record "Reservation Entry";
      CreateReservEntry@1001 : Codeunit "Create Reserv. Entry";
      ReservDueDate@1102601004 : Date;
      ReservExpectDate@1102601005 : Date;
      SumValue@1102601001 : Decimal;
    BEGIN
      ReservEntry2.COPY(ReservEntry);
      ReservDueDate := NewDate;
      ReservExpectDate := NewDate;

      if not ReservEntry2.FIND('-') then
        exit(0);
      if ReservEntry2."Quantity (Base)" < 0 then
        ReservExpectDate := 0D
      else
        ReservDueDate := DMY2DATE(31,12,9999);

      repeat
        SumValue += ReservEntry2."Quantity (Base)";
        if ReservEntry2."Quantity (Base)" < 0 then begin
          if ReservEntry2."Expected Receipt Date" <> 0D then  // Item ledger entries will be 0D.
            if (ReservEntry2."Expected Receipt Date" > ReservExpectDate) and
               (ReservEntry2."Expected Receipt Date" > ReservDueDate)
            then
              ReservExpectDate := ReservEntry2."Expected Receipt Date";
        end else begin
          if ReservEntry2."Shipment Date" <> 0D then          // Item ledger entries will be 0D.
            if (ReservEntry2."Shipment Date" < ReservDueDate) and (ReservEntry2."Shipment Date" < ReservExpectDate) then
              ReservDueDate := ReservEntry2."Shipment Date";
        end;
      until ReservEntry2.NEXT = 0;

      exit(CreateReservEntry.SignFactor(ReservEntry2) * SumValue);
    END;

    LOCAL PROCEDURE SameProdOrderAutoReserve@16(FilterReservEntry@1000 : Record "Reservation Entry") : Boolean;
    VAR
      ProdOrderLineReservationEntry@1001 : Record "Reservation Entry";
    BEGIN
      if FilterReservEntry."Source Type" = DATABASE::"Prod. Order Component" then
        if ProdOrderLineReservationEntry.GET(FilterReservEntry."Entry No.",not FilterReservEntry.Positive) then
          if ProdOrderLineReservationEntry."Source Type" = DATABASE::"Prod. Order Line" then
            if FilterReservEntry."Source ID" = ProdOrderLineReservationEntry."Source ID" then
              exit(ProdOrderLineReservationEntry."Source Prod. Order Line" = GetSuppliedByLineNoByReservationEntry(FilterReservEntry));
      exit(false);
    END;

    LOCAL PROCEDURE GetSuppliedByLineNoByReservationEntry@18(ReservationEntry@1001 : Record "Reservation Entry") : Integer;
    VAR
      ProdOrderComponent@1000 : Record "Prod. Order Component";
    BEGIN
      with ReservationEntry do
        ProdOrderComponent.GET("Source Subtype","Source ID","Source Prod. Order Line","Source Ref. No.");
      exit(ProdOrderComponent."Supplied-by Line No.");
    END;

    BEGIN
    END.
  }
}

