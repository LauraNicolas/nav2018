OBJECT Codeunit 1217 Pre-map Incoming Purch. Doc
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    OnRun=VAR
            BuyFromVendorNo@1000 : Code[20];
            PayToVendorNo@1001 : Code[20];
            ParentRecNo@1002 : Integer;
            CurrRecNo@1004 : Integer;
          BEGIN
            ParentRecNo := 0;
            FindDistinctRecordNos(TempIntegerHeaderRecords,"Entry No.",DATABASE::"Purchase Header",ParentRecNo);
            if not TempIntegerHeaderRecords.FINDSET then
              exit;

            repeat
              CurrRecNo := TempIntegerHeaderRecords.Number;

              ValidateCompanyInfo("Entry No.",CurrRecNo);
              ValidateCurrency("Entry No.",CurrRecNo);
              SetDocumentType("Entry No.",ParentRecNo,CurrRecNo);

              CorrectHeaderData("Entry No.",CurrRecNo);
              BuyFromVendorNo := FindBuyFromVendor("Entry No.",CurrRecNo);
              PayToVendorNo := FindPayToVendor("Entry No.",CurrRecNo);
              FindInvoiceToApplyTo("Entry No.",CurrRecNo);

              PersistHeaderData("Entry No.",CurrRecNo,BuyFromVendorNo,PayToVendorNo);

              ProcessLines("Entry No.",CurrRecNo,BuyFromVendorNo);
            until TempIntegerHeaderRecords.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      InvalidCompanyInfoGLNErr@1000 : TextConst '@@@="%1 = GLN (13 digit number)";ENU=The customer''s GLN %1 on the incoming document does not match the GLN in the Company Information window.';
      InvalidCompanyInfoVATRegNoErr@1001 : TextConst '@@@=%1 VAT Registration Number (format could be AB###### or ###### or AB##-##-###);ENU=The customer''s VAT registration number %1 on the incoming document does not match the VAT Registration No. in the Company Information window.';
      CurrencyCodeMissingErr@1003 : TextConst 'ENU=The currency code is missing on the incoming document.';
      CurrencyCodeDifferentErr@1004 : TextConst '@@@=%1 currency code (e.g. GBP), %2 the document currency code (e.g. DKK);ENU=The currency code %1 must not be different from the currency code %2 on the incoming document.';
      ItemCurrencyCodeDifferentErr@1005 : TextConst '@@@=%1 Invoice line currency code (e.g. GBP), %2 invoice line no. (e.g. 2), %3 document currency code (e.g. DKK);ENU=The currency code %1 on invoice line no. %2 must not be different from the currency code %3 on the incoming document.';
      BuyFromVendorNotFoundErr@1007 : TextConst '@@@=%1 Vendor name (e.g. London Postmaster), %2 Vendor''s GLN (13 digit number), %3 Vendor''s VAT Registration Number;ENU=Cannot find buy-from vendor ''%1'' based on the vendor''s GLN %2 or VAT registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or VAT Registration No.';
      PayToVendorNotFoundErr@1008 : TextConst '@@@=%1 Vendor name (e.g. London Postmaster), %2 Vendor''s GLN (13 digit number), %3 Vendor''s VAT Registration Number;ENU=Cannot find pay-to vendor ''%1'' based on the vendor''s GLN %2 or VAT registration number %3 on the incoming document. Make sure that a card for the vendor exists with the corresponding GLN or VAT Registration No.';
      ItemNotFoundErr@1009 : TextConst '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 Vendor''''s number,%3 Vendor''''s item number, %4 item bar code (GTIN);ENU=Cannot find item ''%1'' based on the vendor %2 item number %3 or GTIN %4 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference or GTIN.';
      ItemNotFoundByGTINErr@1021 : TextConst '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 item bar code (GTIN);ENU=Cannot find item ''%1'' based on GTIN %2 on the incoming document. Make sure that a card for the item exists with the corresponding GTIN.';
      ItemNotFoundByVendorItemNoErr@1022 : TextConst '@@@=%1 Vendor item name (e.g. Bicycle - may be another language),%2 Vendor''''s number,%3 Vendor''''s item number;ENU=Cannot find item ''%1'' based on the vendor %2 item number %3 on the incoming document. Make sure that a card for the item exists with the corresponding item cross reference.';
      UOMNotFoundErr@1011 : TextConst '@@@=%1 International Standard Code or Code or Description for Unit of Measure;ENU=Cannot find unit of measure %1. Make sure that the unit of measure exists.';
      UOMMissingErr@1010 : TextConst '@@@=%1 document line number (e.g. 2);ENU=Cannot find a unit of measure code on the incoming document line %1.';
      UOMConflictWithCrossRefErr@1014 : TextConst '@@@=%1 imported unit code, %2 document line number (e.g. 2), %3 Item Cross Reference unit code;ENU=Unit of measure %1 on incoming document line %2 does not match unit of measure %3 in the item cross reference.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.';
      UOMConflictWithItemErr@1015 : TextConst '@@@=%1 imported unit code, %2 document line number (e.g. 2), %3 Item unit code;ENU=Unit of measure %1 on incoming document line %2 does not match purchase unit of measure %3 on the item card.  Make sure that a card for the item with the specified unit of measure exists with the corresponding item cross reference.';
      UOMConflictCrossRefWithItemErr@1028 : TextConst '@@@=%1 item cross reference unit code;ENU=Unit of measure %1 in the item cross reference is not in the list of units of measure for the corresponding item. Make sure that a unit of measure of item cross reference is in the list of units of measure for the corresponding item.';
      NotSpecifiedUnitOfMeasureTxt@1018 : TextConst 'ENU=<NONE>';
      MissingCompanyInfoSetupErr@1002 : TextConst 'ENU=You must fill either GLN or VAT Registration No. in the Company Information window.';
      VendorNotFoundByNameAndAddressErr@1013 : TextConst 'ENU=Cannot find vendor based on the vendor''s name ''%1'' and street name ''%2'' on the incoming document. Make sure that a card for the vendor exists with the corresponding name.';
      InvalidCompanyInfoNameErr@1016 : TextConst '@@@="%1 = customer name";ENU=The customer name ''%1'' on the incoming document does not match the name in the Company Information window.';
      InvalidCompanyInfoAddressErr@1017 : TextConst '@@@="%1 = customer address, street name";ENU=The customer''s address ''%1'' on the incoming document does not match the Address in the Company Information window.';
      TempIntegerHeaderRecords@1006 : TEMPORARY Record Integer;
      TempIntegerLineRecords@1019 : TEMPORARY Record Integer;
      FieldMustHaveAValueErr@1020 : TextConst '@@@=%1 - field caption;ENU=You must specify a value for field ''%1''.';
      DocumentTypeUnknownErr@1023 : TextConst '@@@=%1 - Column Definitions (page caption),%2 - Data Exchange Definition (page caption),%3 - invoice (option caption),%4 - credit memo (option caption),%5 - Constant (field name),%6 - Document Type (field caption),%7 - Purchase Header (table caption);ENU=You must make a new entry in the %1 of the %2 window, and enter ''%3'' or ''%4'' in the %5 field. Then, you must map it to the %6 field in the %7 table.';
      YouMustFirstPostTheRelatedInvoiceErr@1024 : TextConst '@@@=%1 - vendor invoice no.,%2 posted purchase invoice no.;ENU=The incoming document references invoice %1 from the vendor. You must post related purchase invoice %2 before you create a new purchase document from this incoming document.';
      UnableToFindRelatedInvoiceErr@1025 : TextConst '@@@=%1 - vendor invoice no.;ENU=The incoming document references invoice %1 from the vendor, but no purchase invoice exists for %1.';
      UnableToFindTotalAmountErr@1026 : TextConst 'ENU=The incoming document has no total amount excluding VAT.';
      UnableToFindAppropriateAccountErr@1012 : TextConst '@@@=%1 - arbitrary text;ENU=Cannot find an appropriate G/L account for the line with description ''%1''. Choose the Map Text to Account button, and then map the core part of ''%1'' to the relevant G/L account.';

    LOCAL PROCEDURE ValidateCompanyInfo@15(EntryNo@1006 : Integer;RecordNo@1002 : Integer);
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      CompanyInformation@1001 : Record "Company Information";
      DataExch@1003 : Record "Data Exch.";
      IncomingDocument@1007 : Record "Incoming Document";
      IncomingDocumentAttachment@1008 : Record "Incoming Document Attachment";
      GLN@1004 : Text;
      VatRegNo@1005 : Text;
    BEGIN
      // for OCRed invoices, we don't check the buyer's information
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");
      if IncomingDocument.GetGeneratedFromOCRAttachment(IncomingDocumentAttachment) then
        exit;

      CompanyInformation.GET;
      with IntermediateDataImport do begin
        if FindEntry(EntryNo,DATABASE::"Company Information",CompanyInformation.FIELDNO("VAT Registration No."),0,RecordNo) then
          VatRegNo := Value;

        SETRANGE("Field ID",CompanyInformation.FIELDNO(GLN));
        if FINDFIRST then
          GLN := Value;

        if (GLN = '') and (VatRegNo = '') then begin
          ValidateCompanyInfoByNameAndAddress(EntryNo,RecordNo);
          exit;
        end;

        if (CompanyInformation.GLN = '') and (CompanyInformation."VAT Registration No." = '') then
          LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO(GLN),MissingCompanyInfoSetupErr);

        if CompanyInformation.GLN <> '' then begin
          SETFILTER(Value,STRSUBSTNO('<>%1&<>%2',CompanyInformation.GLN,''''''));
          if FINDLAST then
            LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO(GLN),
              STRSUBSTNO(InvalidCompanyInfoGLNErr,GLN));
        end;

        if CompanyInformation."VAT Registration No." <> '' then begin
          SETRANGE("Field ID",CompanyInformation.FIELDNO("VAT Registration No."));
          SETFILTER(Value,STRSUBSTNO('<>%1',''''''));

          if FINDLAST then
            if (ExtractVatRegNo(Value,'') <> ExtractVatRegNo(CompanyInformation."VAT Registration No.",''))
            then
              LogErrorMessage(EntryNo,CompanyInformation,CompanyInformation.FIELDNO("VAT Registration No."),
                STRSUBSTNO(InvalidCompanyInfoVATRegNoErr,VatRegNo));
        end;
      end;
    END;

    LOCAL PROCEDURE ValidateCompanyInfoByNameAndAddress@29(EntryNo@1006 : Integer;RecordNo@1002 : Integer);
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      CompanyInfo@1001 : Record "Company Information";
      RecordMatchMgt@1011 : Codeunit "Record Match Mgt.";
      ImportedAddress@1004 : Text;
      ImportedName@1005 : Text;
      CompanyName@1003 : Text;
      CompanyAddr@1007 : Text;
      NameNearness@1008 : Integer;
      AddressNearness@1009 : Integer;
    BEGIN
      CompanyInfo.GET;
      CompanyName := CompanyInfo.Name;
      CompanyAddr := CompanyInfo.Address;
      with IntermediateDataImport do begin
        if FindEntry(EntryNo,DATABASE::"Company Information",CompanyInfo.FIELDNO(Name),0,RecordNo) then
          ImportedName := Value;

        NameNearness := RecordMatchMgt.CalculateStringNearness(CompanyName,ImportedName,MatchThreshold,NormalizingFactor);

        SETRANGE("Field ID",CompanyInfo.FIELDNO(Address));
        if FINDFIRST then
          ImportedAddress := Value;

        AddressNearness := RecordMatchMgt.CalculateStringNearness(CompanyAddr,ImportedAddress,MatchThreshold,NormalizingFactor);

        if (ImportedName <> '') and (NameNearness < RequiredNearness) then
          LogErrorMessage(EntryNo,CompanyInfo,CompanyInfo.FIELDNO(Name),STRSUBSTNO(InvalidCompanyInfoNameErr,ImportedName));

        if (ImportedAddress <> '') and (AddressNearness < RequiredNearness) then
          LogErrorMessage(EntryNo,CompanyInfo,CompanyInfo.FIELDNO(Address),STRSUBSTNO(InvalidCompanyInfoAddressErr,ImportedAddress));
      end;
    END;

    LOCAL PROCEDURE ValidateCurrency@16(EntryNo@1004 : Integer;RecordNo@1008 : Integer);
    VAR
      IntermediateDataImport@1005 : Record "Intermediate Data Import";
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchaseLine@1003 : Record "Purchase Line";
      GLSetup@1007 : Record "General Ledger Setup";
      DocumentCurrency@1002 : Text;
      IsLCY@1006 : Boolean;
    BEGIN
      GLSetup.GET;
      if GLSetup."LCY Code" = '' then
        LogErrorMessage(EntryNo,GLSetup,GLSetup.FIELDNO("LCY Code"),
          STRSUBSTNO(FieldMustHaveAValueErr,GLSetup.FIELDCAPTION("LCY Code")));

      with IntermediateDataImport do begin
        DocumentCurrency := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),0,RecordNo);
        if DocumentCurrency = '' then begin
          LogSimpleErrorMessage(EntryNo,CurrencyCodeMissingErr);
          exit;
        end;

        IsLCY := DocumentCurrency = GLSetup."LCY Code";
        // If LCY Currency wont be in Currency table
        if IsLCY then begin
          // Update Document Currency
          Value := '';
          MODIFY;
        end;

        // Ensure the currencies all match the same document currency
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Tax Area Code"));
        SETFILTER(Value,'<>%1',DocumentCurrency);
        if FINDFIRST then
          LogSimpleErrorMessage(EntryNo,STRSUBSTNO(CurrencyCodeDifferentErr,Value,DocumentCurrency));

        // Clear the additional currency values on header
        SETRANGE(Value);
        DELETEALL;

        // check currency on the lines
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Field ID",PurchaseLine.FIELDNO("Currency Code"));
        SETRANGE("Record No.");
        SETRANGE("Parent Record No.",RecordNo);
        SETFILTER(Value,'<>%1',DocumentCurrency);
        if FINDFIRST then
          LogSimpleErrorMessage(EntryNo,STRSUBSTNO(ItemCurrencyCodeDifferentErr,Value,"Record No.",DocumentCurrency));

        // Clear the additional currency values on lines
        SETRANGE(Value);
        DELETEALL;
      end;
    END;

    LOCAL PROCEDURE ProcessLines@24(EntryNo@1000 : Integer;HeaderRecordNo@1003 : Integer;VendorNo@1001 : Code[20]);
    VAR
      DataExch@1002 : Record "Data Exch.";
      IncomingDocument@1004 : Record "Incoming Document";
    BEGIN
      DataExch.GET(EntryNo);
      with IncomingDocument do begin
        GET(DataExch."Incoming Entry No.");
        if "Document Type" = "Document Type"::Journal then
          exit;
      end;

      FindDistinctRecordNos(TempIntegerLineRecords,EntryNo,DATABASE::"Purchase Line",HeaderRecordNo);
      if not TempIntegerLineRecords.FINDSET then begin
        InsertLineForTotalDocumentAmount(EntryNo,HeaderRecordNo,1,VendorNo);
        exit;
      end;

      repeat
        ProcessLine(EntryNo,HeaderRecordNo,TempIntegerLineRecords.Number,VendorNo);
      until TempIntegerLineRecords.NEXT = 0;
    END;

    LOCAL PROCEDURE CorrectHeaderData@33(EntryNo@1001 : Integer;RecordNo@1000 : Integer);
    VAR
      Vendor@1002 : Record Vendor;
      VendorBankAccount@1004 : Record "Vendor Bank Account";
      IncomingDocument@1009 : Record "Incoming Document";
      DataExch@1010 : Record "Data Exch.";
      PurchaseHeader@1012 : Record "Purchase Header";
      GLEntry@1003 : Record "G/L Entry";
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");
      if IncomingDocument."OCR Data Corrected" then begin
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),RecordNo,
          IncomingDocument."Vendor Name");
        CorrectHeaderField(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("VAT Registration No."),RecordNo,
          IncomingDocument."Vendor VAT Registration No.");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),RecordNo,
          IncomingDocument."Vendor IBAN");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Account No."),RecordNo,
          IncomingDocument."Vendor Bank Account No.");
        CorrectHeaderField(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Branch No."),RecordNo,
          IncomingDocument."Vendor Bank Branch No.");
        CorrectHeaderField(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),RecordNo,
          IncomingDocument."Vendor Phone No.");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."),RecordNo,
          IncomingDocument."Vendor Invoice No.");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Date"),RecordNo,
          IncomingDocument."Document Date");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Due Date"),RecordNo,
          IncomingDocument."Due Date");
        CorrectCurrencyCode(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),RecordNo,
          IncomingDocument."Currency Code");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),RecordNo,
          IncomingDocument."Amount Excl. VAT");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Amount Including VAT"),RecordNo,
          IncomingDocument."Amount Incl. VAT");
        CorrectHeaderField(EntryNo,DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount"),RecordNo,
          IncomingDocument."VAT Amount");
        CorrectHeaderField(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No."),RecordNo,
          IncomingDocument."Order No.");
      end;
    END;

    LOCAL PROCEDURE CorrectHeaderField@39(EntryNo@1001 : Integer;TableID@1002 : Integer;FieldID@1003 : Integer;RecordNo@1000 : Integer;IncomingDocumentValue@1004 : Variant);
    VAR
      IntermediateDataImport@1005 : Record "Intermediate Data Import";
      ExistingValue@1006 : Text;
      CorrectedValue@1007 : Text[250];
    BEGIN
      ExistingValue := IntermediateDataImport.GetEntryValue(EntryNo,TableID,FieldID,0,RecordNo);
      CorrectedValue := COPYSTR(FORMAT(IncomingDocumentValue,0,9),1,MAXSTRLEN(CorrectedValue));
      if CorrectedValue <> ExistingValue then
        IntermediateDataImport.InsertOrUpdateEntry(EntryNo,TableID,FieldID,0,RecordNo,CorrectedValue);
    END;

    LOCAL PROCEDURE CorrectCurrencyCode@26(EntryNo@1001 : Integer;TableID@1002 : Integer;FieldID@1003 : Integer;RecordNo@1000 : Integer;IncomingDocumentValue@1004 : Variant);
    VAR
      IntermediateDataImport@1005 : Record "Intermediate Data Import";
      GeneralLedgerSetup@1008 : Record "General Ledger Setup";
      ExistingValue@1006 : Text;
      CorrectedValue@1007 : Text[250];
    BEGIN
      ExistingValue := IntermediateDataImport.GetEntryValue(EntryNo,TableID,FieldID,0,RecordNo);
      CorrectedValue := COPYSTR(FORMAT(IncomingDocumentValue,0,9),1,MAXSTRLEN(CorrectedValue));
      GeneralLedgerSetup.GET;
      if (CorrectedValue <> ExistingValue) and ((CorrectedValue <> GeneralLedgerSetup."LCY Code") or (ExistingValue <> '')) then
        IntermediateDataImport.InsertOrUpdateEntry(EntryNo,TableID,FieldID,0,RecordNo,CorrectedValue);
    END;

    LOCAL PROCEDURE PersistHeaderData@34(EntryNo@1001 : Integer;RecordNo@1000 : Integer;BuyFromVendorNo@1012 : Code[20];PayToVendorNo@1013 : Code[20]);
    VAR
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      DataExch@1003 : Record "Data Exch.";
      IncomingDocument@1004 : Record "Incoming Document";
      PurchaseHeader@1005 : Record "Purchase Header";
      VendorBankAccount@1010 : Record "Vendor Bank Account";
      Vendor@1011 : Record Vendor;
      GLEntry@1014 : Record "G/L Entry";
      GeneralLedgerSetup@1016 : Record "General Ledger Setup";
      AmountInclVAT@1006 : Decimal;
      AmountExclVAT@1007 : Decimal;
      VATAmount@1015 : Decimal;
      TextValue@1008 : Text[250];
      Date@1009 : Date;
    BEGIN
      with IntermediateDataImport do begin
        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");

        if PayToVendorNo <> '' then
          IncomingDocument.VALIDATE("Vendor No.",PayToVendorNo)
        else
          IncomingDocument.VALIDATE("Vendor No.",BuyFromVendorNo);

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Name",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Name")));

        TextValue := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Amount Including VAT"),0,RecordNo);
        if TextValue <> '' then
          EVALUATE(AmountInclVAT,TextValue,9);
        IncomingDocument.VALIDATE("Amount Incl. VAT",AmountInclVAT);

        TextValue := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),0,RecordNo);
        if TextValue <> '' then
          EVALUATE(AmountExclVAT,TextValue,9);
        IncomingDocument.VALIDATE("Amount Excl. VAT",AmountExclVAT);

        TextValue := GetEntryValue(EntryNo,DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount"),0,RecordNo);
        if TextValue <> '' then
          EVALUATE(VATAmount,TextValue,9);
        IncomingDocument.VALIDATE("VAT Amount",VATAmount);

        if GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),0,RecordNo) =
           FORMAT(PurchaseHeader."Document Type"::Invoice,0,9)
        then
          EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."),0,RecordNo))
        else
          EVALUATE(
            TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Cr. Memo No."),0,RecordNo));

        IncomingDocument.VALIDATE("Vendor Invoice No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Invoice No.")));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No."),0,RecordNo));
        IncomingDocument.VALIDATE("Order No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Order No.")));

        EVALUATE(Date,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Date"),0,RecordNo),9);
        IncomingDocument.VALIDATE("Document Date",Date);

        EVALUATE(Date,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Due Date"),0,RecordNo),9);
        IncomingDocument.VALIDATE("Due Date",Date);

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code"),0,RecordNo));
        GeneralLedgerSetup.GET;
        if (TextValue <> '') or (IncomingDocument."Currency Code" <> GeneralLedgerSetup."LCY Code") then
          IncomingDocument."Currency Code" := COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Currency Code"));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("VAT Registration No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor VAT Registration No.",
          COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor VAT Registration No.")));

        EVALUATE(TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor IBAN",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor IBAN")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Branch No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Bank Branch No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Bank Branch No.")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Phone No.",COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Phone No.")));

        EVALUATE(
          TextValue,GetEntryValue(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Account No."),0,RecordNo));
        IncomingDocument.VALIDATE("Vendor Bank Account No.",
          COPYSTR(TextValue,1,MAXSTRLEN(IncomingDocument."Vendor Bank Account No.")));

        IncomingDocument.MODIFY;
      end;
    END;

    LOCAL PROCEDURE FindBuyFromVendor@17(EntryNo@1003 : Integer;RecordNo@1006 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseHeader@1001 : Record "Purchase Header";
      Vendor@1002 : Record Vendor;
      EmptyVendor@1009 : Record Vendor;
      IncomingDocument@1011 : Record "Incoming Document";
      DataExch@1012 : Record "Data Exch.";
      GLN@1004 : Text;
      BuyFromName@1005 : Text;
      BuyFromAddress@1008 : Text;
      BuyFromPhoneNo@1013 : Text;
      VatRegNo@1007 : Text;
      VendorId@1014 : Text;
      VendorNo@1010 : Code[20];
    BEGIN
      with IntermediateDataImport do begin
        VendorId := GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO(Id),0,RecordNo);
        VendorNo := FindVendorById(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),VendorId);
        if VendorNo <> '' then
          exit(VendorNo);

        BuyFromPhoneNo := GetEntryValue(EntryNo,DATABASE::Vendor,Vendor.FIELDNO("Phone No."),0,RecordNo);

        if FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,RecordNo) then
          BuyFromName := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Buy-from Address"));
        if FINDFIRST then
          BuyFromAddress := Value;

        // Lookup GLN
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Buy-from Vendor No."));
        if FINDFIRST then
          if Value <> '' then begin
            GLN := Value;
            Vendor.SETRANGE(GLN,Value);
            if Vendor.FINDFIRST then begin
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                PurchaseHeader.FIELDNO("Buy-from Vendor No."),0,RecordNo,Vendor."No.");
              exit(Vendor."No.");
            end;
          end;

        Vendor.RESET;
        VatRegNo := '';

        // Lookup VAT Reg No
        SETRANGE("Table ID",DATABASE::Vendor);
        SETRANGE("Field ID",Vendor.FIELDNO("VAT Registration No."));

        if FINDFIRST then begin
          if (Value = '') and (GLN = '') then begin
            VendorNo := FindVendorByBankAccount(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."));
            if VendorNo <> '' then
              exit(VendorNo);
            VendorNo := FindVendorByPhoneNo(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),BuyFromPhoneNo);
            if VendorNo <> '' then
              exit(VendorNo);
            exit(FindVendorByNameAndAddress(EntryNo,RecordNo,BuyFromName,BuyFromAddress,
                PurchaseHeader.FIELDNO("Buy-from Vendor No.")));
          end;
          VatRegNo := Value;
          if Value <> '' then begin
            Vendor.SETFILTER("VAT Registration No.",
              STRSUBSTNO('*%1',COPYSTR(Value,STRLEN(Value))));
            if Vendor.FINDSET then
              repeat
                if ExtractVatRegNo(Vendor."VAT Registration No.",Vendor."Country/Region Code") =
                   ExtractVatRegNo(Value,Vendor."Country/Region Code")
                then begin
                  InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                    PurchaseHeader.FIELDNO("Buy-from Vendor No."),0,RecordNo,Vendor."No.");

                  exit(Vendor."No.");
                end;
              until Vendor.NEXT = 0;
          end;
        end;

        if (VatRegNo = '') and (GLN = '') then begin
          VendorNo := FindVendorByBankAccount(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."));
          if VendorNo <> '' then
            exit(VendorNo);
          VendorNo := FindVendorByPhoneNo(EntryNo,RecordNo,PurchaseHeader.FIELDNO("Buy-from Vendor No."),BuyFromPhoneNo);
          if VendorNo <> '' then
            exit(VendorNo);
          exit(FindVendorByNameAndAddress(EntryNo,RecordNo,BuyFromName,BuyFromAddress,
              PurchaseHeader.FIELDNO("Buy-from Vendor No.")));
        end;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        if IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal then
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(BuyFromVendorNotFoundErr,BuyFromName,GLN,VatRegNo));
        exit('');
      end;
    END;

    LOCAL PROCEDURE FindPayToVendor@8(EntryNo@1006 : Integer;RecordNo@1007 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseHeader@1001 : Record "Purchase Header";
      Vendor@1002 : Record Vendor;
      EmptyVendor@1009 : Record Vendor;
      IncomingDocument@1010 : Record "Incoming Document";
      DataExch@1011 : Record "Data Exch.";
      GLN@1003 : Text;
      VatRegNo@1004 : Text;
      PayToName@1005 : Text;
      PayToAddress@1008 : Text;
    BEGIN
      with IntermediateDataImport do begin
        if FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Pay-to Name"),0,RecordNo) then
          PayToName := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Pay-to Address"));
        if FINDFIRST then
          PayToAddress := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("VAT Registration No."));
        if FINDFIRST then
          VatRegNo := Value;

        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Pay-to Vendor No."));
        if FINDFIRST then
          GLN := Value;

        if (VatRegNo = '') and (GLN = '') then begin
          if PayToName <> '' then
            exit(FindVendorByNameAndAddress(EntryNo,RecordNo,PayToName,PayToAddress,PurchaseHeader.FIELDNO("Pay-to Vendor No.")));
          exit;
        end;

        // Lookup GLN
        if GLN <> '' then begin
          Vendor.SETRANGE(GLN,GLN);
          if Vendor.FINDFIRST then begin
            InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
              PurchaseHeader.FIELDNO("Pay-to Vendor No."),0,RecordNo,Vendor."No.");

            exit(Vendor."No.");
          end;
        end;

        Vendor.RESET;

        // Lookup VAT Reg No
        Vendor.SETFILTER("VAT Registration No.",STRSUBSTNO('*%1',COPYSTR(VatRegNo,STRLEN(VatRegNo))));
        if Vendor.FINDSET then
          repeat
            if ExtractVatRegNo(Vendor."VAT Registration No.",Vendor."Country/Region Code") =
               ExtractVatRegNo(VatRegNo,Vendor."Country/Region Code")
            then begin
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
                PurchaseHeader.FIELDNO("Pay-to Vendor No."),0,RecordNo,Vendor."No.");

              exit(Vendor."No.");
            end;
          until Vendor.NEXT = 0;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        if IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal then
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(PayToVendorNotFoundErr,PayToName,GLN,VatRegNo));
        exit('');
      end;
    END;

    LOCAL PROCEDURE FindVendorByNameAndAddress@4(EntryNo@1006 : Integer;RecordNo@1007 : Integer;VendorName@1008 : Text;VendorAddress@1003 : Text;FieldID@1009 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      Vendor@1002 : Record Vendor;
      EmptyVendor@1013 : Record Vendor;
      IncomingDocument@1005 : Record "Incoming Document";
      DataExch@1004 : Record "Data Exch.";
      RecordMatchMgt@1001 : Codeunit "Record Match Mgt.";
      NameNearness@1011 : Integer;
      AddressNearness@1012 : Integer;
    BEGIN
      with IntermediateDataImport do begin
        if Vendor.FINDSET then
          repeat
            NameNearness := RecordMatchMgt.CalculateStringNearness(VendorName,Vendor.Name,MatchThreshold,NormalizingFactor);
            if VendorAddress = '' then
              AddressNearness := RequiredNearness
            else
              AddressNearness := RecordMatchMgt.CalculateStringNearness(VendorAddress,Vendor.Address,MatchThreshold,NormalizingFactor);
            if (NameNearness >= RequiredNearness) and (AddressNearness >= RequiredNearness) then begin
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
              exit(Vendor."No.");
            end;
          until Vendor.NEXT = 0;

        DataExch.GET(EntryNo);
        IncomingDocument.GET(DataExch."Incoming Entry No.");
        if IncomingDocument."Document Type" <> IncomingDocument."Document Type"::Journal then
          LogErrorMessage(EntryNo,EmptyVendor,EmptyVendor.FIELDNO(Name),
            STRSUBSTNO(VendorNotFoundByNameAndAddressErr,VendorName,VendorAddress));
        exit('');
      end;
    END;

    LOCAL PROCEDURE FindVendorByBankAccount@23(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      VendorBankAccount@1002 : Record "Vendor Bank Account";
      VendorNo@1003 : Code[20];
      VendorIBAN@1004 : Code[50];
      VendorBankBranchNo@1005 : Text[20];
      VendorBankAccountNo@1008 : Text[30];
    BEGIN
      with IntermediateDataImport do begin
        if FindEntry(EntryNo,DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN),0,RecordNo) then
          VendorIBAN := COPYSTR(Value,1,MAXSTRLEN(VendorIBAN));

        SETRANGE("Field ID",VendorBankAccount.FIELDNO("Bank Branch No."));
        if FINDFIRST then
          VendorBankBranchNo := COPYSTR(Value,1,MAXSTRLEN(VendorBankBranchNo));

        SETRANGE("Field ID",VendorBankAccount.FIELDNO("Bank Account No."));
        if FINDFIRST then
          VendorBankAccountNo := COPYSTR(Value,1,MAXSTRLEN(VendorBankAccountNo));

        if VendorIBAN <> '' then begin
          VendorBankAccount.SETRANGE(IBAN,VendorIBAN);
          if VendorBankAccount.FINDFIRST then
            VendorNo := VendorBankAccount."Vendor No.";
        end;

        if (VendorNo = '') and (VendorBankBranchNo <> '') and (VendorBankAccountNo <> '') then begin
          VendorBankAccount.RESET;
          VendorBankAccount.SETRANGE("Bank Branch No.",VendorBankBranchNo);
          VendorBankAccount.SETRANGE("Bank Account No.",VendorBankAccountNo);
          if VendorBankAccount.FINDFIRST then
            VendorNo := VendorBankAccount."Vendor No.";
        end;

        if VendorNo <> '' then begin
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,VendorNo);
          exit(VendorNo);
        end;

        exit('');
      end;
    END;

    LOCAL PROCEDURE FindVendorByPhoneNo@35(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer;PhoneNo@1001 : Text) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      Vendor@1002 : Record Vendor;
      RecordMatchMgt@1003 : Codeunit "Record Match Mgt.";
      PhoneNoNearness@1010 : Integer;
    BEGIN
      if PhoneNo = '' then
        exit('');

      PhoneNo := DELCHR(PhoneNo,'=',DELCHR(PhoneNo,'=','0123456789'));
      with IntermediateDataImport do begin
        if Vendor.FINDSET then
          repeat
            PhoneNoNearness := RecordMatchMgt.CalculateStringNearness(PhoneNo,Vendor."Phone No.",MatchThreshold,NormalizingFactor);
            if PhoneNoNearness >= RequiredNearness then begin
              InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
              exit(Vendor."No.");
            end;
          until Vendor.NEXT = 0;

        exit('');
      end;
    END;

    LOCAL PROCEDURE FindVendorById@44(EntryNo@1006 : Integer;RecordNo@1007 : Integer;FieldID@1009 : Integer;VendorIdText@1001 : Text) : Code[20];
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      Vendor@1002 : Record Vendor;
      VendorId@1003 : GUID;
    BEGIN
      if VendorIdText = '' then
        exit('');

      if not EVALUATE(VendorId,VendorIdText,9) then
        exit('');

      Vendor.SETRANGE(Id,VendorId);
      if not Vendor.FINDFIRST then
        exit('');

      IntermediateDataImport.InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",FieldID,0,RecordNo,Vendor."No.");
      exit(Vendor."No.");
    END;

    LOCAL PROCEDURE FindInvoiceToApplyTo@21(EntryNo@1006 : Integer;RecordNo@1007 : Integer);
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchInvHeader@1003 : Record "Purch. Inv. Header";
      VendorInvoiceNo@1002 : Text;
      AppliesToDocTypeAsInteger@1004 : Integer;
    BEGIN
      with IntermediateDataImport do begin
        VendorInvoiceNo := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Applies-to Doc. No."),0,RecordNo);
        if VendorInvoiceNo = '' then
          exit;

        // Find a posted purchase invoice that has the specified Vendor Invoice No.
        PurchInvHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
        if PurchInvHeader.FINDFIRST then begin
          AppliesToDocTypeAsInteger := PurchaseHeader."Applies-to Doc. Type"::Invoice;
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
            PurchaseHeader.FIELDNO("Applies-to Doc. Type"),0,RecordNo,FORMAT(AppliesToDocTypeAsInteger));
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
            PurchaseHeader.FIELDNO("Applies-to Doc. No."),0,RecordNo,PurchInvHeader."No.");
          exit;
        end;

        // No posted purchase invoice has the specified Vendor Invoice No.
        // This is an error - the user first needs to post the related invoice before importing this document.
        // If we can find an unposted invoice with this Vendor Invoice No. we will link to it in the error message.
        PurchaseHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
        if PurchaseHeader.FINDFIRST then begin
          LogErrorMessage(EntryNo,PurchaseHeader,PurchaseHeader.FIELDNO("No."),
            STRSUBSTNO(YouMustFirstPostTheRelatedInvoiceErr,VendorInvoiceNo,PurchaseHeader."No."));
          exit;
        end;

        // No purchase invoice (posted or not) has the specified Vendor Invoice No.
        // This is an error - the user needs to create and post the related invoice before importing this document.
        LogErrorMessage(
          EntryNo,PurchInvHeader,PurchInvHeader.FIELDNO("No."),STRSUBSTNO(UnableToFindRelatedInvoiceErr,VendorInvoiceNo));
      end;
    END;

    LOCAL PROCEDURE ProcessLine@18(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1004 : Integer;VendorNo@1003 : Code[20]);
    VAR
      ImportedUnitCode@1000 : Code[10];
    BEGIN
      // Lines with 0 quantity are "empty/description only" lines
      if IsDescriptionOnlyLine(EntryNo,HeaderRecordNo,RecordNo) then begin
        CleanDescriptionOnlyLine(EntryNo,HeaderRecordNo,RecordNo);
        exit;
      end;

      // Lookup Cross Ref, then GTIN/Bar Code, else G/L Account
      if ResolveUnitOfMeasureFromDataImport(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo) then
        if not FindItemCrossReferenceForLine(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo,VendorNo) then
          if not FindItemForLine(ImportedUnitCode,EntryNo,HeaderRecordNo,RecordNo) then
            if not FindGLAccountForLine(EntryNo,HeaderRecordNo,RecordNo,VendorNo) then
              LogErrorIfItemNotFound(EntryNo,HeaderRecordNo,RecordNo,VendorNo);

      ValidateLineDiscount(EntryNo,HeaderRecordNo,RecordNo);
    END;

    LOCAL PROCEDURE InsertLineForTotalDocumentAmount@22(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1004 : Integer;VendorNo@1003 : Code[20]);
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
      PurchaseHeader@1007 : Record "Purchase Header";
      Vendor@1001 : Record Vendor;
      IntermediateDataImport@1006 : Record "Intermediate Data Import";
      LineDescription@1009 : Text[250];
    BEGIN
      if not Vendor.GET(VendorNo) then
        exit;

      with IntermediateDataImport do begin
        LineDescription := GetEntryValue(
            EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name"),0,HeaderRecordNo);
        if LineDescription = '' then
          LineDescription := Vendor.Name;
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO(Description),HeaderRecordNo,RecordNo,LineDescription);
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo,'1');
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",
          PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo,GetTotalAmountExclVAT(EntryNo,HeaderRecordNo));
        FindGLAccountForLine(EntryNo,HeaderRecordNo,RecordNo,VendorNo);
      end;
    END;

    LOCAL PROCEDURE GetTotalAmountExclVAT@25(EntryNo@1002 : Integer;HeaderRecordNo@1005 : Integer) : Text[250];
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      IntermediateDataImport@1006 : Record "Intermediate Data Import";
    BEGIN
      with IntermediateDataImport do begin
        if not FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount),0,HeaderRecordNo) then begin
          LogSimpleErrorMessage(EntryNo,UnableToFindTotalAmountErr);
          exit('');
        end;
        exit(Value);
      end;
    END;

    LOCAL PROCEDURE FindItemForLine@5(ImportedUnitCode@1007 : Code[10];EntryNo@1004 : Integer;HeaderNo@1006 : Integer;RecordNo@1005 : Integer) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseLine@1001 : Record "Purchase Line";
      Item@1002 : Record Item;
      GTIN@1003 : Text;
    BEGIN
      if not IntermediateDataImport.FindEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),HeaderNo,RecordNo) then
        exit(false);

      GTIN := IntermediateDataImport.Value;
      if GTIN = '' then
        exit(false);

      Item.SETRANGE(GTIN,GTIN);
      if not Item.FINDFIRST then
        exit(false);

      IntermediateDataImport.Value := Item."No.";
      IntermediateDataImport.MODIFY;

      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),HeaderNo,RecordNo,FORMAT(PurchaseLine.Type::Item,0,9));

      ResolveUnitOfMeasureFromItem(Item,ImportedUnitCode,EntryNo,HeaderNo,RecordNo);

      exit(true);
    END;

    LOCAL PROCEDURE FindItemCrossReferenceForLine@2(ImportedUnitCode@1006 : Code[10];EntryNo@1007 : Integer;HeaderNo@1008 : Integer;RecordNo@1001 : Integer;VendorNo@1000 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      PurchaseLine@1003 : Record "Purchase Line";
      ItemCrossReference@1004 : Record "Item Cross Reference";
      Vendor@1005 : Record Vendor;
    BEGIN
      if not Vendor.GET(VendorNo) then
        exit(false);

      if not IntermediateDataImport.FindEntry(
           EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Cross-Reference No."),HeaderNo,RecordNo)
      then
        exit(false);

      ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",VendorNo);
      ItemCrossReference.SETRANGE(
        "Cross-Reference No.",COPYSTR(IntermediateDataImport.Value,1,MAXSTRLEN(ItemCrossReference."Cross-Reference No.")));

      if not FindMatchingItemCrossReference(ItemCrossReference,ImportedUnitCode) then
        exit(false);

      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),HeaderNo,RecordNo,FORMAT(ItemCrossReference."Item No.",0,9));
      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),HeaderNo,RecordNo,FORMAT(PurchaseLine.Type::Item,0,9));

      ResolveUnitOfMeasureFromItemCrossReference(ItemCrossReference,ImportedUnitCode,EntryNo,HeaderNo,RecordNo);

      exit(true);
    END;

    LOCAL PROCEDURE FindMatchingItemCrossReference@46(VAR ItemCrossReference@1000 : Record "Item Cross Reference";ImportedUnitCode@1001 : Code[10]) : Boolean;
    BEGIN
      if not ItemCrossReference.FINDFIRST then
        exit(false);

      ItemCrossReference.SETRANGE("Unit of Measure",ImportedUnitCode);
      if ItemCrossReference.FINDSET then
        repeat
          if ItemCrossReference.HasValidUnitOfMeasure then
            exit(true);
        until ItemCrossReference.NEXT = 0;

      ItemCrossReference.SETRANGE("Unit of Measure",'');
      if ItemCrossReference.FINDSET then
        repeat
          if ItemCrossReference.HasValidUnitOfMeasure then
            exit(true);
        until ItemCrossReference.NEXT = 0;

      ItemCrossReference.SETRANGE("Unit of Measure");
      exit(ItemCrossReference.FINDFIRST);
    END;

    LOCAL PROCEDURE IsDescriptionOnlyLine@14(EntryNo@1007 : Integer;HeaderRecordNo@1006 : Integer;RecordNo@1005 : Integer) : Boolean;
    VAR
      IntermediateDataImport@1003 : Record "Intermediate Data Import";
      PurchaseLine@1001 : Record "Purchase Line";
      Qty@1002 : Decimal;
    BEGIN
      with IntermediateDataImport do begin
        if not FindEntry(EntryNo,DATABASE::"Purchase Line",
             PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo)
        then
          exit(true);

        EVALUATE(Qty,Value,9);
        if Qty = 0 then
          exit(true);

        exit(false);
      end;
    END;

    LOCAL PROCEDURE CleanDescriptionOnlyLine@6(EntryNo@1004 : Integer;HeaderRecordNo@1002 : Integer;RecordNo@1000 : Integer);
    VAR
      IntermediateDataImport@1003 : Record "Intermediate Data Import";
      PurchaseLine@1001 : Record "Purchase Line";
    BEGIN
      with IntermediateDataImport do begin
        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),
          HeaderRecordNo,RecordNo,FORMAT(PurchaseLine.Type::" ",0,9));

        SETRANGE("Data Exch. No.",EntryNo);
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Parent Record No.",HeaderRecordNo);
        SETRANGE("Record No.",RecordNo);
        SETFILTER("Field ID",'<>%1&<>%2&<>%3',
          PurchaseLine.FIELDNO(Type),PurchaseLine.FIELDNO(Description),PurchaseLine.FIELDNO("Description 2"));
        DELETEALL;
      end;
    END;

    LOCAL PROCEDURE LogErrorIfItemNotFound@10(EntryNo@1005 : Integer;HeaderRecordNo@1004 : Integer;RecordNo@1003 : Integer;VendorNo@1001 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseLine@1002 : Record "Purchase Line";
      Item@1012 : Record Item;
      GTIN@1006 : Text[250];
      ItemName@1007 : Text[250];
      VendorItemNo@1008 : Text[250];
    BEGIN
      with IntermediateDataImport do begin
        GTIN := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),
            HeaderRecordNo,RecordNo);

        VendorItemNo := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Cross-Reference No."),
            HeaderRecordNo,RecordNo);

        ItemName := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Description),
            HeaderRecordNo,RecordNo);

        if (GTIN <> '') and (VendorItemNo <> '') then begin
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundErr,ItemName,VendorNo,VendorItemNo,GTIN));
          exit(false);
        end;

        if GTIN <> '' then begin
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundByGTINErr,ItemName,GTIN));
          exit(false);
        end;

        if VendorItemNo <> '' then begin
          LogErrorMessage(EntryNo,Item,Item.FIELDNO("No."),
            STRSUBSTNO(ItemNotFoundByVendorItemNoErr,ItemName,VendorNo,VendorItemNo));
          exit(false);
        end;

        exit(true);
      end;
    END;

    LOCAL PROCEDURE FindGLAccountForLine@20(EntryNo@1005 : Integer;HeaderRecordNo@1004 : Integer;RecordNo@1003 : Integer;VendorNo@1009 : Code[20]) : Boolean;
    VAR
      IntermediateDataImport@1000 : Record "Intermediate Data Import";
      PurchaseLine@1002 : Record "Purchase Line";
      GLAccountNo@1006 : Code[20];
      LineDescription@1008 : Text[250];
      LineDirectUnitCostTxt@1001 : Text;
      LineDirectUnitCost@1007 : Decimal;
    BEGIN
      with IntermediateDataImport do begin
        LineDescription := GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Description),HeaderRecordNo,RecordNo);
        LineDirectUnitCostTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo);
        if LineDirectUnitCostTxt <> '' then
          EVALUATE(LineDirectUnitCost,LineDirectUnitCostTxt,9);
        GLAccountNo := FindAppropriateGLAccount(EntryNo,HeaderRecordNo,LineDescription,LineDirectUnitCost,VendorNo);

        if GLAccountNo <> '' then begin
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("No."),
            HeaderRecordNo,RecordNo,GLAccountNo);
          InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),
            HeaderRecordNo,RecordNo,FORMAT(PurchaseLine.Type::"G/L Account",0,9));
        end;
      end;
      exit(GLAccountNo <> '');
    END;

    LOCAL PROCEDURE InsertOrUpdateUnitOfMeasureCode@58(EntryNo@1002 : Integer;HeaderNo@1003 : Integer;RecordNo@1004 : Integer;UnitCode@1000 : Code[10]);
    VAR
      PurchaseLine@1005 : Record "Purchase Line";
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
    BEGIN
      IntermediateDataImport.InsertOrUpdateEntry(
        EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Unit of Measure Code"),HeaderNo,RecordNo,UnitCode);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromItemCrossReference@67(VAR ItemCrossReference@1003 : Record "Item Cross Reference";ImportedUnitCode@1002 : Code[10];EntryNo@1004 : Integer;HeaderNo@1007 : Integer;RecordNo@1000 : Integer) : Boolean;
    VAR
      Item@1001 : Record Item;
      ResolvedUnitCode@1005 : Code[10];
    BEGIN
      ResolvedUnitCode := ItemCrossReference."Unit of Measure";
      if ResolvedUnitCode = '' then begin
        Item.GET(ItemCrossReference."Item No.");
        exit(ResolveUnitOfMeasureFromItem(Item,ImportedUnitCode,EntryNo,HeaderNo,RecordNo));
      end;

      if (ImportedUnitCode <> '') and (ImportedUnitCode <> ResolvedUnitCode) then begin
        LogErrorMessage(EntryNo,ItemCrossReference,ItemCrossReference.FIELDNO("Unit of Measure"),
          STRSUBSTNO(UOMConflictWithCrossRefErr,ImportedUnitCode,RecordNo,UnitCodeToString(ResolvedUnitCode)));
        exit(false);
      end;

      if not ItemCrossReference.HasValidUnitOfMeasure then begin
        LogErrorMessage(EntryNo,ItemCrossReference,ItemCrossReference.FIELDNO("Unit of Measure"),
          STRSUBSTNO(UOMConflictCrossRefWithItemErr,UnitCodeToString(ResolvedUnitCode)));
        exit(false);
      end;

      InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ResolvedUnitCode);
      exit(true);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromItem@74(VAR Item@1001 : Record Item;ImportedUnitCode@1002 : Code[10];EntryNo@1004 : Integer;HeaderNo@1006 : Integer;RecordNo@1000 : Integer) : Boolean;
    VAR
      ResolvedUnitCode@1003 : Code[10];
    BEGIN
      ResolvedUnitCode := Item."Purch. Unit of Measure";
      if ResolvedUnitCode = '' then
        ResolvedUnitCode := Item."Base Unit of Measure";

      if (ImportedUnitCode <> '') and (ImportedUnitCode <> ResolvedUnitCode) then begin
        LogErrorMessage(EntryNo,Item,Item.FIELDNO("Base Unit of Measure"),
          STRSUBSTNO(UOMConflictWithItemErr,ImportedUnitCode,RecordNo,UnitCodeToString(ResolvedUnitCode)));
        exit(false);
      end;

      InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ResolvedUnitCode);
      exit(true);
    END;

    LOCAL PROCEDURE ResolveUnitOfMeasureFromDataImport@42(VAR ImportedUnitCode@1004 : Code[10];EntryNo@1002 : Integer;HeaderNo@1005 : Integer;RecordNo@1006 : Integer) : Boolean;
    VAR
      PurchaseLine@1007 : Record "Purchase Line";
      UnitOfMeasure@1000 : Record "Unit of Measure";
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
      ImportedUnitString@1003 : Text;
    BEGIN
      if not IntermediateDataImport.FindEntry(
           EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Unit of Measure Code"),HeaderNo,RecordNo)
      then begin
        LogSimpleErrorMessage(EntryNo,STRSUBSTNO(UOMMissingErr,RecordNo));
        exit(false);
      end;

      ImportedUnitString := IntermediateDataImport.Value;
      if ImportedUnitString = '' then begin
        ImportedUnitCode := '';
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        exit(true);
      end;

      UnitOfMeasure.SETRANGE(Code,COPYSTR(ImportedUnitString,1,MAXSTRLEN(UnitOfMeasure.Code)));
      if UnitOfMeasure.FINDFIRST then begin
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        exit(true);
      end;

      UnitOfMeasure.SETRANGE(Code);
      UnitOfMeasure.SETRANGE(
        "International Standard Code",COPYSTR(ImportedUnitString,1,MAXSTRLEN(UnitOfMeasure."International Standard Code")));
      if UnitOfMeasure.FINDFIRST then begin
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        exit(true);
      end;

      UnitOfMeasure.SETRANGE("International Standard Code");
      UnitOfMeasure.SETRANGE(Description,ImportedUnitString);
      if UnitOfMeasure.FINDFIRST then begin
        ImportedUnitCode := UnitOfMeasure.Code;
        InsertOrUpdateUnitOfMeasureCode(EntryNo,HeaderNo,RecordNo,ImportedUnitCode);
        exit(true);
      end;

      LogErrorMessage(EntryNo,UnitOfMeasure,UnitOfMeasure.FIELDNO(Code),STRSUBSTNO(UOMNotFoundErr,ImportedUnitString));
      exit(false);
    END;

    LOCAL PROCEDURE UnitCodeToString@99(UnitCode@1000 : Code[10]) : Text;
    BEGIN
      if UnitCode <> '' then
        exit(UnitCode);
      exit(NotSpecifiedUnitOfMeasureTxt);
    END;

    LOCAL PROCEDURE ValidateLineDiscount@12(EntryNo@1004 : Integer;HeaderRecordNo@1005 : Integer;RecordNo@1000 : Integer);
    VAR
      PurchaseLine@1002 : Record "Purchase Line";
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
      LineDirectUnitCostTxt@1003 : Text;
      LineQuantityTxt@1006 : Text;
      LineAmountTxt@1007 : Text;
      LineDirectUnitCost@1008 : Decimal;
      LineAmount@1009 : Decimal;
      LineQuantity@1010 : Decimal;
      LineDiscountAmount@1011 : Decimal;
    BEGIN
      with IntermediateDataImport do begin
        if GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Line Discount Amount"),HeaderRecordNo,RecordNo) <> ''
        then
          exit;

        // if no discount amount has been specified, calculate it based on quantity, direct unit cost and line extension amount
        LineDirectUnitCostTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Direct Unit Cost"),HeaderRecordNo,RecordNo);
        if LineDirectUnitCostTxt <> '' then
          EVALUATE(LineDirectUnitCost,LineDirectUnitCostTxt,9);
        LineQuantityTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Quantity),HeaderRecordNo,RecordNo);
        if LineQuantityTxt <> '' then
          EVALUATE(LineQuantity,LineQuantityTxt,9);
        LineAmountTxt :=
          GetEntryValue(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Amount),HeaderRecordNo,RecordNo);
        if LineAmountTxt <> '' then
          EVALUATE(LineAmount,LineAmountTxt,9);
        LineDiscountAmount := (LineQuantity * LineDirectUnitCost) - LineAmount;

        InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Line Discount Amount"),
          HeaderRecordNo,RecordNo,FORMAT(LineDiscountAmount,0,9));

        MODIFY;
      end;
    END;

    LOCAL PROCEDURE ExtractVatRegNo@1(VatRegNo@1000 : Text;CountryRegionCode@1002 : Text) : Text;
    VAR
      CompanyInformation@1001 : Record "Company Information";
    BEGIN
      if CountryRegionCode = '' then begin
        CompanyInformation.GET;
        CountryRegionCode := CompanyInformation."Country/Region Code";
      end;
      VatRegNo := UPPERCASE(VatRegNo);
      VatRegNo := DELCHR(VatRegNo,'=',DELCHR(VatRegNo,'=','ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'));
      if STRPOS(VatRegNo,UPPERCASE(CountryRegionCode)) = 1 then
        VatRegNo := DELSTR(VatRegNo,1,STRLEN(CountryRegionCode));
      exit(VatRegNo);
    END;

    LOCAL PROCEDURE FindDistinctRecordNos@3(VAR TempInteger@1000 : TEMPORARY Record Integer;DataExchEntryNo@1003 : Integer;TableID@1001 : Integer;ParentRecNo@1004 : Integer);
    VAR
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      CurrRecNo@1005 : Integer;
    BEGIN
      CurrRecNo := -1;
      CLEAR(TempInteger);
      TempInteger.DELETEALL;

      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExchEntryNo);
        SETRANGE("Table ID",TableID);
        SETRANGE("Parent Record No.",ParentRecNo);
        SETCURRENTKEY("Record No.");
        if not FINDSET then
          exit;

        repeat
          if CurrRecNo <> "Record No." then begin
            CurrRecNo := "Record No.";
            CLEAR(TempInteger);
            TempInteger.Number := CurrRecNo;
            TempInteger.INSERT;
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE LogErrorMessage@7(EntryNo@1004 : Integer;RelatedRec@1001 : Variant;FieldNo@1002 : Integer;Message@1003 : Text);
    VAR
      ErrorMessage@1000 : Record "Error Message";
      DataExch@1005 : Record "Data Exch.";
      IncomingDocument@1006 : Record "Incoming Document";
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");

      ErrorMessage.SetContext(IncomingDocument);
      ErrorMessage.LogMessage(RelatedRec,FieldNo,ErrorMessage."Message Type"::Error,Message);
    END;

    LOCAL PROCEDURE LogSimpleErrorMessage@19(EntryNo@1004 : Integer;Message@1003 : Text);
    VAR
      ErrorMessage@1000 : Record "Error Message";
      DataExch@1005 : Record "Data Exch.";
      IncomingDocument@1006 : Record "Incoming Document";
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");

      ErrorMessage.SetContext(IncomingDocument);
      ErrorMessage.LogSimpleMessage(ErrorMessage."Message Type"::Error,Message);
    END;

    LOCAL PROCEDURE SetDocumentType@11(EntryNo@1000 : Integer;ParentRecNo@1001 : Integer;CurrRecNo@1002 : Integer);
    VAR
      IntermediateDataImport@1004 : Record "Intermediate Data Import";
      PurchaseHeader@1003 : Record "Purchase Header";
      DataExch@1006 : Record "Data Exch.";
      DataExchDef@1007 : Record "Data Exch. Def";
      DocumentType@1005 : Text[250];
    BEGIN
      DataExch.GET(EntryNo);
      DataExchDef.GET(DataExch."Data Exch. Def Code");
      with IntermediateDataImport do begin
        if not FindEntry(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),ParentRecNo,CurrRecNo) then
          LogErrorMessage(EntryNo,DataExchDef,DataExchDef.FIELDNO(Code),
            ConstructDocumenttypeUnknownErr);

        case UPPERCASE(Value) of
          GetDocumentTypeOptionString(PurchaseHeader."Document Type"::Invoice),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::Invoice):
            DocumentType := FORMAT(PurchaseHeader."Document Type"::Invoice,0,9);
          GetDocumentTypeOptionString(PurchaseHeader."Document Type"::"Credit Memo"),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::"Credit Memo"),
          'CREDIT NOTE':
            DocumentType := FORMAT(PurchaseHeader."Document Type"::"Credit Memo",0,9);
          else
            LogErrorMessage(EntryNo,DataExchDef,DataExchDef.FIELDNO(Code),
              ConstructDocumenttypeUnknownErr);
        end;
      end;

      IntermediateDataImport.InsertOrUpdateEntry(EntryNo,DATABASE::"Purchase Header",
        PurchaseHeader.FIELDNO("Document Type"),ParentRecNo,CurrRecNo,
        DocumentType);
    END;

    LOCAL PROCEDURE GetDocumentType@36(EntryNo@1000 : Integer;CurrRecNo@1002 : Integer) : Integer;
    VAR
      IntermediateDataImport@1004 : Record "Intermediate Data Import";
      PurchaseHeader@1003 : Record "Purchase Header";
      DocumentTypeTxt@1005 : Text[250];
      DocumentType@1001 : Option;
    BEGIN
      DocumentType := -1;
      with IntermediateDataImport do begin
        DocumentTypeTxt := GetEntryValue(EntryNo,DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),0,CurrRecNo);
        if EVALUATE(DocumentType,DocumentTypeTxt) then;
      end;
      exit(DocumentType)
    END;

    [Internal]
    PROCEDURE GetDocumentTypeOptionString@37(OptionIndex@1000 : Integer) : Text[250];
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchaseHeaderRecRef@1003 : RecordRef;
      DocumentTypeFieldRef@1002 : FieldRef;
    BEGIN
      PurchaseHeaderRecRef.OPEN(DATABASE::"Purchase Header");
      DocumentTypeFieldRef := PurchaseHeaderRecRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      exit(UPPERCASE(SELECTSTR(OptionIndex + 1,DocumentTypeFieldRef.OPTIONSTRING)));
    END;

    [Internal]
    PROCEDURE GetDocumentTypeOptionCaption@27(OptionIndex@1000 : Integer) : Text[250];
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchaseHeaderRecRef@1003 : RecordRef;
      DocumentTypeFieldRef@1002 : FieldRef;
    BEGIN
      PurchaseHeaderRecRef.OPEN(DATABASE::"Purchase Header");
      DocumentTypeFieldRef := PurchaseHeaderRecRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      exit(UPPERCASE(SELECTSTR(OptionIndex + 1,DocumentTypeFieldRef.OPTIONCAPTION)));
    END;

    [Internal]
    PROCEDURE ConstructDocumenttypeUnknownErr@13() : Text;
    VAR
      PurchaseHeader@1002 : Record "Purchase Header";
      DataExchColumnDef@1003 : Record "Data Exch. Column Def";
      DataExchColDefPart@1001 : Page "Data Exch Col Def Part";
      DataExchDefCard@1000 : Page "Data Exch Def Card";
    BEGIN
      exit(STRSUBSTNO(DocumentTypeUnknownErr,
          DataExchColDefPart.CAPTION,
          DataExchDefCard.CAPTION,
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::Invoice),
          GetDocumentTypeOptionCaption(PurchaseHeader."Document Type"::"Credit Memo"),
          DataExchColumnDef.FIELDCAPTION(Constant),
          PurchaseHeader.FIELDCAPTION("Document Type"),
          PurchaseHeader.TABLECAPTION));
    END;

    [External]
    PROCEDURE FindAppropriateGLAccount@28(EntryNo@1003 : Integer;HeaderRecordNo@1006 : Integer;LineDescription@1001 : Text[250];LineDirectUnitCost@1000 : Decimal;VendorNo@1009 : Code[20]) : Code[20];
    VAR
      PurchasesPayablesSetup@1002 : Record "Purchases & Payables Setup";
      TextToAccountMapping@1005 : Record "Text-to-Account Mapping";
      PurchaseHeader@1007 : Record "Purchase Header";
      DocumentType@1004 : Option;
      DefaultGLAccount@1008 : Code[20];
      CountOfResult@1010 : Integer;
    BEGIN
      DocumentType := GetDocumentType(EntryNo,HeaderRecordNo);

      CountOfResult := TextToAccountMapping.SearchEnteriesInText(TextToAccountMapping,LineDescription,VendorNo);
      if CountOfResult = 1 then
        exit(FindCorrectAccountFromMapping(TextToAccountMapping,LineDirectUnitCost,DocumentType));
      if CountOfResult > 1 then begin
        LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
          STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
        exit('');
      end;

      if VendorNo <> '' then begin
        CountOfResult := TextToAccountMapping.SearchEnteriesInText(TextToAccountMapping,LineDescription,'');
        if CountOfResult = 1 then
          exit(FindCorrectAccountFromMapping(TextToAccountMapping,LineDirectUnitCost,DocumentType));
        if CountOfResult > 1 then begin
          LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
            STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
          exit('');
        end;
      end;

      // if you don't find any suggestion in Text-to-Account Mapping, then look in the Purchases & Payables table
      PurchasesPayablesSetup.GET;
      case DocumentType of
        PurchaseHeader."Document Type"::Invoice:
          begin
            if LineDirectUnitCost >= 0 then
              DefaultGLAccount := PurchasesPayablesSetup."Debit Acc. for Non-Item Lines"
            else
              DefaultGLAccount := PurchasesPayablesSetup."Credit Acc. for Non-Item Lines";
          end;
        PurchaseHeader."Document Type"::"Credit Memo":
          begin
            if LineDirectUnitCost >= 0 then
              DefaultGLAccount := PurchasesPayablesSetup."Credit Acc. for Non-Item Lines"
            else
              DefaultGLAccount := PurchasesPayablesSetup."Debit Acc. for Non-Item Lines";
          end;
      end;
      if DefaultGLAccount = '' then
        LogErrorMessage(EntryNo,TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
          STRSUBSTNO(UnableToFindAppropriateAccountErr,LineDescription));
      exit(DefaultGLAccount)
    END;

    LOCAL PROCEDURE NormalizingFactor@30() : Integer;
    BEGIN
      exit(100)
    END;

    LOCAL PROCEDURE MatchThreshold@31() : Integer;
    BEGIN
      exit(4)
    END;

    LOCAL PROCEDURE RequiredNearness@32() : Integer;
    BEGIN
      exit(95)
    END;

    LOCAL PROCEDURE FindCorrectAccountFromMapping@40(TextToAccountMapping@1002 : Record "Text-to-Account Mapping";LineDirectUnitCost@1000 : Decimal;DocumentType@1003 : Option) : Code[20];
    VAR
      PurchaseHeader@1004 : Record "Purchase Header";
    BEGIN
      case DocumentType of
        PurchaseHeader."Document Type"::Invoice:
          begin
            if (LineDirectUnitCost >= 0) and (TextToAccountMapping."Debit Acc. No." <> '') then
              exit(TextToAccountMapping."Debit Acc. No.");
            if (LineDirectUnitCost < 0) and (TextToAccountMapping."Credit Acc. No." <> '') then
              exit(TextToAccountMapping."Credit Acc. No.");
          end;
        PurchaseHeader."Document Type"::"Credit Memo":
          begin
            if (LineDirectUnitCost >= 0) and (TextToAccountMapping."Credit Acc. No." <> '') then
              exit(TextToAccountMapping."Credit Acc. No.");
            if (LineDirectUnitCost < 0) and (TextToAccountMapping."Debit Acc. No." <> '') then
              exit(TextToAccountMapping."Debit Acc. No.");
          end;
      end
    END;

    BEGIN
    END.
  }
}

