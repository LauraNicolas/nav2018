OBJECT Page 113 Budget
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Budget;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    DataCaptionExpr=BudgetName;
    PageType=ListPlus;
    OnInit=BEGIN
             BudgetDim4FilterEnable := true;
             BudgetDim3FilterEnable := true;
             BudgetDim2FilterEnable := true;
             BudgetDim1FilterEnable := true;
             PeriodTypeEnable := true;
             GlobalDim2FilterEnable := true;
             GlobalDim1FilterEnable := true;
           END;

    OnOpenPage=VAR
                 GLAcc@1000 : Record "G/L Account";
                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
               BEGIN
                 if GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter") <> '' then
                   GlobalDim1Filter := GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter");
                 if GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter") <> '' then
                   GlobalDim2Filter := GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter");

                 GLSetup.GET;

                 GlobalDim1FilterEnable :=
                   (GLSetup."Global Dimension 1 Code" <> '') and
                   (GLAccBudgetBuf.GETFILTER("Global Dimension 1 Filter") = '');
                 GlobalDim2FilterEnable :=
                   (GLSetup."Global Dimension 2 Code" <> '') and
                   (GLAccBudgetBuf.GETFILTER("Global Dimension 2 Filter") = '');

                 ValidateBudgetName;

                 if LineDimCode = '' then
                   LineDimCode := GLAcc.TABLECAPTION;
                 if ColumnDimCode = '' then
                   ColumnDimCode := Text001;

                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 if (NewBudgetName <> '') and (NewBudgetName <> BudgetName) then begin
                   BudgetName := NewBudgetName;
                   ValidateBudgetName;
                   ValidateLineDimCode;
                   ValidateColumnDimCode;
                 end;

                 PeriodType := PeriodType::Month;
                 IncomeBalanceGLAccFilter := IncomeBalanceGLAccFilter::"Income Statement";
                 if DateFilter = '' then
                   ValidateDateFilter(FORMAT(CALCDATE('<-CY>',TODAY)) + '..' + FORMAT(CALCDATE('<CY>',TODAY)));

                 FindPeriod('');
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);

                 UpdateMatrixSubform;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 1102601009;1 ;ActionGroup;
                      Name=&Balance;
                      CaptionML=ENU=&Balance;
                      Image=Balance }
      { 1102601011;2 ;Action    ;
                      Name=GLBalanceBudget;
                      CaptionML=ENU=G/L Account Balance B&udget by period;
                      ToolTipML=ENU=Open a summary of the debit and credit balances for the current budget.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=ChartOfAccounts;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 GLAccount@1000 : Record "G/L Account";
                               BEGIN
                                 GLAccount.SETFILTER("Budget Filter",BudgetName);
                                 if BusUnitFilter <> '' then
                                   GLAccount.SETFILTER("Business Unit Filter",BusUnitFilter);
                                 if GLAccFilter <> '' then
                                   GLAccount.SETFILTER("No.",GLAccFilter);
                                 if DateFilter <> '' then
                                   GLAccount.SETFILTER("Date Filter",DateFilter);
                                 case IncomeBalanceGLAccFilter of
                                   IncomeBalanceGLAccFilter::"Balance Sheet":
                                     GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
                                   IncomeBalanceGLAccFilter::"Income Statement":
                                     GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
                                 end;
                                 if GLAccCategoryFilter <> GLAccCategoryFilter::" " then
                                   GLAccount.SETRANGE("Account Category",GLAccCategoryFilter);
                                 if GlobalDim1Filter <> '' then
                                   GLAccount.SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
                                 if GlobalDim2Filter <> '' then
                                   GLAccount.SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
                                 PAGE.RUN(PAGE::"G/L Balance/Budget",GLAccount);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 1102601001;1 ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 1102601002;2 ;Action    ;
                      Name=Copy Budget;
                      Ellipsis=true;
                      CaptionML=ENU=Copy Budget;
                      ToolTipML=ENU=Create a copy of the current budget based on a general ledger entry or a general ledger budget entry.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=CopyBudget;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"Copy G/L Budget",true,false);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1102601003;2 ;Action    ;
                      Name=Delete Budget;
                      CaptionML=ENU=Delete Budget;
                      ToolTipML=ENU=Delete the current budget.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=Delete;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 DeleteBudget;
                               END;
                                }
      { 1102601004;2 ;Separator ;
                      Name=Separator1102601004;
                      CaptionML=ENU="" }
      { 1102601005;2 ;Action    ;
                      Name=Export to Excel;
                      Ellipsis=true;
                      CaptionML=ENU=Export to Excel;
                      ToolTipML=ENU=Export all or part of the budget to Excel for further analysis. If you make changes in Excel, you can import the budget afterwards.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=ExportToExcel;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 GLBudgetEntry@1001 : Record "G/L Budget Entry";
                               BEGIN
                                 GLBudgetEntry.SETFILTER("Budget Name",BudgetName);
                                 GLBudgetEntry.SETFILTER("Business Unit Code",BusUnitFilter);
                                 GLBudgetEntry.SETFILTER("G/L Account No.",GLAccFilter);
                                 GLBudgetEntry.SETFILTER("Global Dimension 1 Code",GlobalDim1Filter);
                                 GLBudgetEntry.SETFILTER("Global Dimension 2 Code",GlobalDim2Filter);
                                 GLBudgetEntry.SETFILTER("Budget Dimension 1 Code",BudgetDim1Filter);
                                 GLBudgetEntry.SETFILTER("Budget Dimension 2 Code",BudgetDim2Filter);
                                 GLBudgetEntry.SETFILTER("Budget Dimension 3 Code",BudgetDim3Filter);
                                 GLBudgetEntry.SETFILTER("Budget Dimension 4 Code",BudgetDim4Filter);
                                 REPORT.RUN(REPORT::"Export Budget to Excel",true,false,GLBudgetEntry);
                               END;
                                }
      { 1102601006;2 ;Action    ;
                      Name=Import from Excel;
                      Ellipsis=true;
                      CaptionML=ENU=Import from Excel;
                      ToolTipML=ENU=Import a budget that you exported to Excel earlier.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=ImportExcel;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 ImportBudgetfromExcel@1001 : Report "Import Budget from Excel";
                               BEGIN
                                 ImportBudgetfromExcel.SetParameters(BudgetName,0);
                                 ImportBudgetfromExcel.RUNMODAL;
                                 UpdateMatrixSubform;
                               END;
                                }
      { 1102601007;2 ;Separator ;
                      Name=Separator1102601007 }
      { 1102601008;2 ;Action    ;
                      Name=Reverse Lines and Columns;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=Undo;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 TempDimCode@1102601000 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;

                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                                 UpdateMatrixSubform;
                               END;
                                }
      { 4       ;1   ;ActionGroup;
                      Name=ReportGroup;
                      CaptionML=ENU=Report;
                      Image=Report }
      { 3       ;2   ;Action    ;
                      Name=ReportTrialBalance;
                      CaptionML=ENU=Trial Balance/Budget;
                      ToolTipML=ENU=View budget details for the specified period.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Report;
                      PromotedCategory=Report;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 REPORT.RUN(REPORT::"Trial Balance/Budget");
                               END;
                                }
      { 2       ;2   ;Action    ;
                      Name=ReportBudget;
                      CaptionML=ENU=Budget;
                      ToolTipML=ENU=View budget details for the specified period.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Report;
                      PromotedCategory=Report;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 REPORT.RUN(REPORT::Budget);
                               END;
                                }
      { 22      ;1   ;Action    ;
                      Name=Next Period;
                      CaptionML=ENU=Next Period;
                      ToolTipML=ENU=Show the information based on the next period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 if (LineDimOption = LineDimOption::Period) or (ColumnDimOption = ColumnDimOption::Period) then
                                   exit;
                                 FindPeriod('>');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubform;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      Name=Previous Period;
                      CaptionML=ENU=Previous Period;
                      ToolTipML=ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 if (LineDimOption = LineDimOption::Period) or (ColumnDimOption = ColumnDimOption::Period) then
                                   exit;
                                 FindPeriod('<');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubform;
                               END;
                                }
      { 12      ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                                 UpdateMatrixSubform;
                               END;
                                }
      { 50      ;1   ;Action    ;
                      Name=Previous Column;
                      CaptionML=ENU=Previous Column;
                      ToolTipML=ENU=Go to the previous column.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::PreviousColumn);
                                 UpdateMatrixSubform;
                               END;
                                }
      { 52      ;1   ;Action    ;
                      Name=Next Column;
                      CaptionML=ENU=Next Column;
                      ToolTipML=ENU=Go to the next column.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::NextColumn);
                                 UpdateMatrixSubform;
                               END;
                                }
      { 111     ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                                 UpdateMatrixSubform;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 5   ;2   ;Field     ;
                Name=BudgetName;
                CaptionML=ENU=Budget Name;
                ToolTipML=ENU=Specifies the name of the budget.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetName;
                TableRelation="G/L Budget Name";
                OnValidate=BEGIN
                             ValidateBudgetName;
                             ValidateLineDimCode;
                             ValidateColumnDimCode;

                             UpdateMatrixSubform;
                           END;

                OnLookup=VAR
                           GLBudgetNames@1002 : Page "G/L Budget Names";
                         BEGIN
                           GLBudgetNames.LOOKUPMODE := true;
                           GLBudgetNames.SETRECORD(GLBudgetName);
                           if GLBudgetNames.RUNMODAL = ACTION::LookupOK then begin
                             GLBudgetNames.GETRECORD(GLBudgetName);
                             BudgetName := GLBudgetName.Name;
                             Text := GLBudgetName.Name;
                             ValidateBudgetName;
                             ValidateLineDimCode;
                             ValidateColumnDimCode;
                             UpdateMatrixSubform;
                             exit(true);
                           end;
                           ValidateBudgetName;
                           ValidateLineDimCode;
                           ValidateColumnDimCode;
                           CurrPage.UPDATE;
                           exit(false);
                         END;
                          }

    { 6   ;2   ;Field     ;
                Name=LineDimCode;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=LineDimCode;
                OnValidate=VAR
                             MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
                           BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             end;
                             ValidateLineDimCode;
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           if NewCode = LineDimCode then
                             exit(false);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           LineDimCodeOnAfterValidate;
                           exit(true);
                         END;
                          }

    { 9   ;2   ;Field     ;
                Name=ColumnDimCode;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=VAR
                             MATRIX_Step@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
                           BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               LineDimCode := '';
                               ValidateLineDimCode;
                             end;
                             ValidateColumnDimCode;
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                           MATRIX_Step@1003 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           if NewCode = ColumnDimCode then
                             exit(false);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                           ColumnDimCodeOnAfterValidate;
                           exit(true);
                         END;
                          }

    { 15  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Suite;
                SourceExpr=PeriodType;
                Enabled=PeriodTypeEnable;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;
                            }

    { 19  ;2   ;Field     ;
                Name=RoundingFactor;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Suite;
                SourceExpr=RoundingFactor;
                OnValidate=BEGIN
                             UpdateMatrixSubform;
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=ShowColumnName;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnPush;
                           END;
                            }

    { 1102601000;1;Part   ;
                Name=MatrixForm;
                ApplicationArea=#Suite;
                PagePartID="Budget Matrix" }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 36  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Suite;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             ValidateDateFilter(DateFilter);
                           END;
                            }

    { 38  ;2   ;Field     ;
                Name=GLAccFilter;
                CaptionML=ENU=G/L Account Filter;
                ToolTipML=ENU=Specifies the G/L accounts for which you will see information in the window.;
                ApplicationArea=#Suite;
                SourceExpr=GLAccFilter;
                OnValidate=BEGIN
                             GLAccFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page "G/L Account List";
                         BEGIN
                           GLAccList.LOOKUPMODE(true);
                           if not (GLAccList.RUNMODAL = ACTION::LookupOK) then
                             exit(false);

                           Text := GLAccList.GetSelectionFilter;
                           exit(true);
                         END;
                          }

    { 8   ;2   ;Field     ;
                Name=GLAccCategory;
                CaptionML=ENU=G/L Account Category Filter;
                ToolTipML=ENU=Specifies the category of the G/L account for which you will see information in the window.;
                OptionCaptionML=ENU=" ,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense";
                ApplicationArea=#Suite;
                SourceExpr=GLAccCategoryFilter;
                OnValidate=BEGIN
                             ValidateGLAccCategoryFilter;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=IncomeBalGLAccFilter;
                CaptionML=ENU=Income/Balance G/L Account Filter;
                ToolTipML=ENU=Specifies the type of the G/L account for which you will see information in the window.;
                OptionCaptionML=ENU=" ,Income Statement,Balance Sheet";
                ApplicationArea=#Suite;
                SourceExpr=IncomeBalanceGLAccFilter;
                OnValidate=BEGIN
                             ValidateIncomeBalanceGLAccFilter;
                           END;
                            }

    { 49  ;2   ;Field     ;
                Name=GlobalDim1Filter;
                CaptionML=ENU=Global Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter by a global dimension. Global dimensions are the dimensions that you analyze most frequently.;
                ApplicationArea=#Suite;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                Enabled=GlobalDim1FilterEnable;
                OnValidate=BEGIN
                             GlobalDim1FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 1 Code",Text));
                         END;
                          }

    { 48  ;2   ;Field     ;
                Name=GlobalDim2Filter;
                CaptionML=ENU=Global Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter by a global dimension. Global dimensions are the dimensions that you analyze most frequently.;
                ApplicationArea=#Suite;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                Enabled=GlobalDim2FilterEnable;
                OnValidate=BEGIN
                             GlobalDim2FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 2 Code",Text));
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=BudgetDim1Filter;
                CaptionML=ENU=Budget Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter by a budget dimension. You can specify four additional dimensions on each budget that you create.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetDim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=BudgetDim1FilterEnable;
                OnValidate=BEGIN
                             BudgetDim1FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLBudgetName."Budget Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=BudgetDim2Filter;
                CaptionML=ENU=Budget Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter by a budget dimension. You can specify four additional dimensions on each budget that you create.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetDim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=BudgetDim2FilterEnable;
                OnValidate=BEGIN
                             BudgetDim2FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLBudgetName."Budget Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=BudgetDim3Filter;
                CaptionML=ENU=Budget Dimension 3 Filter;
                ToolTipML=ENU=Specifies a filter by a budget dimension. You can specify four additional dimensions on each budget that you create.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetDim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=BudgetDim3FilterEnable;
                OnValidate=BEGIN
                             BudgetDim3FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLBudgetName."Budget Dimension 3 Code",Text));
                         END;
                          }

    { 35  ;2   ;Field     ;
                Name=BudgetDim4Filter;
                CaptionML=ENU=Budget Dimension 4 Filter;
                ToolTipML=ENU=Specifies a filter by a budget dimension. You can specify four additional dimensions on each budget that you create.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetDim4Filter;
                CaptionClass=GetCaptionClass(4);
                Enabled=BudgetDim4FilterEnable;
                OnValidate=BEGIN
                             BudgetDim4FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLBudgetName."Budget Dimension 4 Code",Text));
                         END;
                          }

  }
  CODE
  {
    VAR
      GLSetup@1014 : Record "General Ledger Setup";
      GLAccBudgetBuf@1013 : Record "G/L Acc. Budget Buffer";
      GLBudgetName@1012 : Record "G/L Budget Name";
      PrevGLBudgetName@1002 : Record "G/L Budget Name";
      MATRIX_MatrixRecords@1191 : ARRAY [32] OF Record "Dimension Code Buffer";
      MATRIX_CaptionSet@1192 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1193 : Text[80];
      FirstColumn@1000 : Text;
      LastColumn@1024 : Text;
      MATRIX_PrimKeyFirstCaptionInCu@1197 : Text[80];
      MATRIX_CurrentNoOfColumns@1198 : Integer;
      Text001@1001 : TextConst 'ENU=Period';
      Text003@1003 : TextConst 'ENU=Do you want to delete the budget entries shown?';
      Text004@1004 : TextConst 'ENU=DEFAULT';
      Text005@1005 : TextConst 'ENU=Default budget';
      Text006@1006 : TextConst 'ENU=%1 is not a valid line definition.';
      Text007@1007 : TextConst 'ENU=%1 is not a valid column definition.';
      Text008@1008 : TextConst 'ENU=1,6,,Budget Dimension 1 Filter';
      Text009@1009 : TextConst 'ENU=1,6,,Budget Dimension 2 Filter';
      Text010@1010 : TextConst 'ENU=1,6,,Budget Dimension 3 Filter';
      Text011@1011 : TextConst 'ENU=1,6,,Budget Dimension 4 Filter';
      MATRIX_Step@1015 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      BudgetName@1016 : Code[10];
      NewBudgetName@1042 : Code[10];
      LineDimOption@1017 : '"G/L Account",Period,"Business Unit","Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';
      ColumnDimOption@1018 : '"G/L Account",Period,"Business Unit","Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';
      LineDimCode@1019 : Text[30];
      ColumnDimCode@1020 : Text[30];
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      RoundingFactor@1022 : 'None,"1","1000","1000000"';
      GLAccCategoryFilter@1037 : '" ",Assets,Liabilities,Equity,Income,"Cost of Goods Sold",Expense';
      IncomeBalanceGLAccFilter@1035 : '" ","Income Statement","Balance Sheet"';
      ShowColumnName@1023 : Boolean;
      DateFilter@1025 : Text[30];
      InternalDateFilter@1026 : Text[30];
      BusUnitFilter@1027 : Text;
      GLAccFilter@1028 : Text;
      GlobalDim1Filter@1029 : Text;
      GlobalDim2Filter@1030 : Text;
      BudgetDim1Filter@1031 : Text;
      BudgetDim2Filter@1032 : Text;
      BudgetDim3Filter@1033 : Text;
      BudgetDim4Filter@1034 : Text;
      GlobalDim1FilterEnable@19070261 : Boolean INDATASET;
      GlobalDim2FilterEnable@19027189 : Boolean INDATASET;
      PeriodTypeEnable@19066505 : Boolean INDATASET;
      BudgetDim1FilterEnable@19060021 : Boolean INDATASET;
      BudgetDim2FilterEnable@19020249 : Boolean INDATASET;
      BudgetDim3FilterEnable@19077914 : Boolean INDATASET;
      BudgetDim4FilterEnable@19015030 : Boolean INDATASET;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1206(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      MATRIX_PeriodRecords@1006 : ARRAY [32] OF Record Date;
      BusUnit@1002 : Record "Business Unit";
      GLAccount@1008 : Record "G/L Account";
      MatrixMgt@1003 : Codeunit "Matrix Management";
      RecRef@1004 : RecordRef;
      FieldRef@1005 : FieldRef;
      IncomeBalFieldRef@1001 : FieldRef;
      GLAccCategoryFieldRef@1009 : FieldRef;
      i@1007 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);
      FirstColumn := '';
      LastColumn := '';
      MATRIX_CurrentNoOfColumns := 12;

      if ColumnDimCode = '' then
        exit;

      case ColumnDimCode of
        Text001:  // Period
          begin
            MatrixMgt.GeneratePeriodMatrixData(
              MATRIX_SetWanted,MATRIX_CurrentNoOfColumns,ShowColumnName,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            for i := 1 to MATRIX_CurrentNoOfColumns do begin
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            end;
            FirstColumn := FORMAT(MATRIX_PeriodRecords[1]."Period Start");
            LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrentNoOfColumns]."Period End");
            PeriodTypeEnable := true;
          end;
        GLAccount.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(GLAccount);
            RecRef.SETTABLE(GLAccount);
            if GLAccFilter <> '' then begin
              FieldRef := RecRef.FIELDINDEX(1);
              FieldRef.SETFILTER(GLAccFilter);
            end;
            if IncomeBalanceGLAccFilter <> IncomeBalanceGLAccFilter::" " then begin
              IncomeBalFieldRef := RecRef.FIELDINDEX(GLAccount.FIELDNO("Income/Balance"));
              case IncomeBalanceGLAccFilter of
                IncomeBalanceGLAccFilter::"Balance Sheet":
                  IncomeBalFieldRef.SETRANGE(GLAccount."Income/Balance"::"Balance Sheet");
                IncomeBalanceGLAccFilter::"Income Statement":
                  IncomeBalFieldRef.SETRANGE(GLAccount."Income/Balance"::"Income Statement");
              end;
            end;
            if GLAccCategoryFilter <> GLAccCategoryFilter::" " then begin
              GLAccCategoryFieldRef := RecRef.FIELDINDEX(GLAccount.FIELDNO("Account Category"));
              GLAccCategoryFieldRef.SETRANGE(GLAccCategoryFilter);
            end;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := COPYSTR(MATRIX_CaptionSet[i],1,MAXSTRLEN(MATRIX_MatrixRecords[i].Code));
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,GLAccount.FIELDNO(Name),
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        BusUnit.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(BusUnit);
            RecRef.SETTABLE(BusUnit);
            if BusUnitFilter <> '' then begin
              FieldRef := RecRef.FIELDINDEX(1);
              FieldRef.SETFILTER(BusUnitFilter);
            end;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := COPYSTR(MATRIX_CaptionSet[i],1,MAXSTRLEN(MATRIX_MatrixRecords[i].Code));
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,BusUnit.FIELDNO(Name),
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        // Apply dimension filter
        GLSetup."Global Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 1 Code",
            GlobalDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLSetup."Global Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 2 Code",
            GlobalDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLBudgetName."Budget Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLBudgetName."Budget Dimension 1 Code",
            BudgetDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLBudgetName."Budget Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLBudgetName."Budget Dimension 2 Code",
            BudgetDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLBudgetName."Budget Dimension 3 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLBudgetName."Budget Dimension 3 Code",
            BudgetDim3Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLBudgetName."Budget Dimension 4 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLBudgetName."Budget Dimension 4 Code",
            BudgetDim4Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
      end;
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1001 : Record "Business Unit";
      GLAcc@1002 : Record "G/L Account";
    BEGIN
      case DimCode of
        '':
          exit(-1);
        GLAcc.TABLECAPTION:
          exit(0);
        Text001:
          exit(1);
        BusUnit.TABLECAPTION:
          exit(2);
        GLSetup."Global Dimension 1 Code":
          exit(3);
        GLSetup."Global Dimension 2 Code":
          exit(4);
        GLBudgetName."Budget Dimension 1 Code":
          exit(5);
        GLBudgetName."Budget Dimension 2 Code":
          exit(6);
        GLBudgetName."Budget Dimension 3 Code":
          exit(7);
        GLBudgetName."Budget Dimension 4 Code":
          exit(8);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      GLAcc@1001 : Record "G/L Account";
      Calendar@1002 : Record Date;
      PeriodFormMgt@1003 : Codeunit PeriodFormManagement;
    BEGIN
      if DateFilter <> '' then begin
        Calendar.SETFILTER("Period Start",DateFilter);
        if not PeriodFormMgt.FindDate('+',Calendar,PeriodType) then
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      end;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      GLAcc.SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      if GLAcc.GETRANGEMIN("Date Filter") = GLAcc.GETRANGEMAX("Date Filter") then
        GLAcc.SETRANGE("Date Filter",GLAcc.GETRANGEMIN("Date Filter"));
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      GLAcc@1001 : Record "G/L Account";
      BusUnit@1003 : Record "Business Unit";
      DimSelection@1002 : Page "Dimension Selection";
    BEGIN
      DimSelection.InsertDimSelBuf(false,GLAcc.TABLECAPTION,GLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,BusUnit.TABLECAPTION,BusUnit.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Text001,Text001);
      if GLSetup."Global Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 1 Code",'');
      if GLSetup."Global Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 2 Code",'');
      if GLBudgetName."Budget Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLBudgetName."Budget Dimension 1 Code",'');
      if GLBudgetName."Budget Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLBudgetName."Budget Dimension 2 Code",'');
      if GLBudgetName."Budget Dimension 3 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLBudgetName."Budget Dimension 3 Code",'');
      if GLBudgetName."Budget Dimension 4 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLBudgetName."Budget Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);

      exit(OldDimSelCode);
    END;

    LOCAL PROCEDURE DeleteBudget@10();
    VAR
      GLBudgetEntry@1000 : Record "G/L Budget Entry";
      UpdateAnalysisView@1001 : Codeunit "Update Analysis View";
    BEGIN
      if CONFIRM(Text003) then
        with GLBudgetEntry do begin
          SETRANGE("Budget Name",BudgetName);
          if BusUnitFilter <> '' then
            SETFILTER("Business Unit Code",BusUnitFilter);
          if GLAccFilter <> '' then
            SETFILTER("G/L Account No.",GLAccFilter);
          if DateFilter <> '' then
            SETFILTER(Date,DateFilter);
          if GlobalDim1Filter <> '' then
            SETFILTER("Global Dimension 1 Code",GlobalDim1Filter);
          if GlobalDim2Filter <> '' then
            SETFILTER("Global Dimension 2 Code",GlobalDim2Filter);
          if BudgetDim1Filter <> '' then
            SETFILTER("Budget Dimension 1 Code",BudgetDim1Filter);
          if BudgetDim2Filter <> '' then
            SETFILTER("Budget Dimension 2 Code",BudgetDim2Filter);
          if BudgetDim3Filter <> '' then
            SETFILTER("Budget Dimension 3 Code",BudgetDim3Filter);
          if BudgetDim4Filter <> '' then
            SETFILTER("Budget Dimension 4 Code",BudgetDim4Filter);
          SETCURRENTKEY("Entry No.");
          if FINDFIRST then
            UpdateAnalysisView.SetLastBudgetEntryNo("Entry No." - 1);
          SETCURRENTKEY("Budget Name");
          DELETEALL(true);
        end;
    END;

    LOCAL PROCEDURE ValidateBudgetName@11();
    BEGIN
      GLBudgetName.Name := BudgetName;
      if not GLBudgetName.FIND('=<>') then begin
        GLBudgetName.INIT;
        GLBudgetName.Name := Text004;
        GLBudgetName.Description := Text005;
        GLBudgetName.INSERT;
      end;
      BudgetName := GLBudgetName.Name;
      GLAccBudgetBuf.SETRANGE("Budget Filter",BudgetName);
      if PrevGLBudgetName.Name <> '' then begin
        if GLBudgetName."Budget Dimension 1 Code" <> PrevGLBudgetName."Budget Dimension 1 Code" then
          BudgetDim1Filter := '';
        if GLBudgetName."Budget Dimension 2 Code" <> PrevGLBudgetName."Budget Dimension 2 Code" then
          BudgetDim2Filter := '';
        if GLBudgetName."Budget Dimension 3 Code" <> PrevGLBudgetName."Budget Dimension 3 Code" then
          BudgetDim3Filter := '';
        if GLBudgetName."Budget Dimension 4 Code" <> PrevGLBudgetName."Budget Dimension 4 Code" then
          BudgetDim4Filter := '';
      end;
      GLAccBudgetBuf.SETFILTER("Budget Dimension 1 Filter",BudgetDim1Filter);
      GLAccBudgetBuf.SETFILTER("Budget Dimension 2 Filter",BudgetDim2Filter);
      GLAccBudgetBuf.SETFILTER("Budget Dimension 3 Filter",BudgetDim3Filter);
      GLAccBudgetBuf.SETFILTER("Budget Dimension 4 Filter",BudgetDim4Filter);
      BudgetDim1FilterEnable := (GLBudgetName."Budget Dimension 1 Code" <> '');
      BudgetDim2FilterEnable := (GLBudgetName."Budget Dimension 2 Code" <> '');
      BudgetDim3FilterEnable := (GLBudgetName."Budget Dimension 3 Code" <> '');
      BudgetDim4FilterEnable := (GLBudgetName."Budget Dimension 4 Code" <> '');

      PrevGLBudgetName := GLBudgetName;
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      BusUnit@1000 : Record "Business Unit";
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if (UPPERCASE(LineDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text001)) and
         (UPPERCASE(LineDimCode) <> GLBudgetName."Budget Dimension 1 Code") and
         (UPPERCASE(LineDimCode) <> GLBudgetName."Budget Dimension 2 Code") and
         (UPPERCASE(LineDimCode) <> GLBudgetName."Budget Dimension 3 Code") and
         (UPPERCASE(LineDimCode) <> GLBudgetName."Budget Dimension 4 Code") and
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 1 Code") and
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 2 Code") and
         (LineDimCode <> '')
      then begin
        MESSAGE(Text006,LineDimCode);
        LineDimCode := '';
      end;
      LineDimOption := DimCodeToOption(LineDimCode);
      DateFilter := InternalDateFilter;
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        DateFilter := '';
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      BusUnit@1000 : Record "Business Unit";
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if (UPPERCASE(ColumnDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text001)) and
         (UPPERCASE(ColumnDimCode) <> GLBudgetName."Budget Dimension 1 Code") and
         (UPPERCASE(ColumnDimCode) <> GLBudgetName."Budget Dimension 2 Code") and
         (UPPERCASE(ColumnDimCode) <> GLBudgetName."Budget Dimension 3 Code") and
         (UPPERCASE(ColumnDimCode) <> GLBudgetName."Budget Dimension 4 Code") and
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 1 Code") and
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 2 Code") and
         (ColumnDimCode <> '')
      then begin
        MESSAGE(Text007,ColumnDimCode);
        ColumnDimCode := '';
      end;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      DateFilter := InternalDateFilter;
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        DateFilter := '';
    END;

    LOCAL PROCEDURE GetCaptionClass@13(BudgetDimType@1000 : Integer) : Text[250];
    BEGIN
      if GLBudgetName.Name <> BudgetName then
        GLBudgetName.GET(BudgetName);
      case BudgetDimType of
        1:
          begin
            if GLBudgetName."Budget Dimension 1 Code" <> '' then
              exit('1,6,' + GLBudgetName."Budget Dimension 1 Code");

            exit(Text008);
          end;
        2:
          begin
            if GLBudgetName."Budget Dimension 2 Code" <> '' then
              exit('1,6,' + GLBudgetName."Budget Dimension 2 Code");

            exit(Text009);
          end;
        3:
          begin
            if GLBudgetName."Budget Dimension 3 Code" <> '' then
              exit('1,6,' + GLBudgetName."Budget Dimension 3 Code");

            exit(Text010);
          end;
        4:
          begin
            if GLBudgetName."Budget Dimension 4 Code" <> '' then
              exit('1,6,' + GLBudgetName."Budget Dimension 4 Code");

            exit(Text011);
          end;
      end;
    END;

    [External]
    PROCEDURE SetBudgetName@14(NextBudgetName@1000 : Code[10]);
    BEGIN
      NewBudgetName := NextBudgetName;
    END;

    [Internal]
    PROCEDURE SetGLAccountFilter@1(NewGLAccFilter@1000 : Code[250]);
    BEGIN
      GLAccFilter := NewGLAccFilter;
      GLAccFilterOnAfterValidate;
    END;

    LOCAL PROCEDURE UpdateMatrixSubform@1102601003();
    BEGIN
      CurrPage.MatrixForm.PAGE.Load(
        MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,LineDimCode,
        LineDimOption,ColumnDimOption,GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,
        BudgetDim2Filter,BudgetDim3Filter,BudgetDim4Filter,GLBudgetName,DateFilter,
        GLAccFilter,IncomeBalanceGLAccFilter,GLAccCategoryFilter,RoundingFactor,PeriodType);

      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE GLAccFilterOnAfterValidate@19040142();
    BEGIN
      GLAccBudgetBuf.SETFILTER("G/L Account Filter",GLAccFilter);
      if ColumnDimOption = ColumnDimOption::"G/L Account" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE ValidateIncomeBalanceGLAccFilter@4();
    BEGIN
      GLAccBudgetBuf.SETRANGE("Income/Balance",IncomeBalanceGLAccFilter);
      if ColumnDimOption = ColumnDimOption::"G/L Account" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE ValidateGLAccCategoryFilter@9();
    BEGIN
      GLAccBudgetBuf.SETRANGE("Account Category",GLAccCategoryFilter);
      if ColumnDimOption = ColumnDimOption::"G/L Account" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE GlobalDim2FilterOnAfterValidat@19025957();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
      if ColumnDimOption = ColumnDimOption::"Global Dimension 2" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE GlobalDim1FilterOnAfterValidat@19037628();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
      if ColumnDimOption = ColumnDimOption::"Global Dimension 1" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE BudgetDim2FilterOnAfterValidat@19061952();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Budget Dimension 2 Filter",BudgetDim2Filter);
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 2" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE BudgetDim1FilterOnAfterValidat@19002351();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Budget Dimension 1 Filter",BudgetDim1Filter);
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 1" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE BudgetDim4FilterOnAfterValidat@19068654();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Budget Dimension 4 Filter",BudgetDim4Filter);
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 4" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE BudgetDim3FilterOnAfterValidat@19015715();
    BEGIN
      GLAccBudgetBuf.SETFILTER("Budget Dimension 3 Filter",BudgetDim3Filter);
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 3" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE ShowColumnNameOnPush@19040364();
    VAR
      MATRIX_Step@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Same);
      UpdateMatrixSubform;
    END;

    LOCAL PROCEDURE ValidateDateFilter@5(NewDateFilter@1000 : Text[30]);
    VAR
      ApplicationManagement@1001 : Codeunit ApplicationManagement;
    BEGIN
      if ApplicationManagement.MakeDateFilter(NewDateFilter) = 0 then;
      GLAccBudgetBuf.SETFILTER("Date Filter",NewDateFilter);
      DateFilter := COPYSTR(GLAccBudgetBuf.GETFILTER("Date Filter"),1,MAXSTRLEN(DateFilter));
      InternalDateFilter := NewDateFilter;
      DateFilterOnAfterValidate;
    END;

    BEGIN
    END.
  }
}

