OBJECT Codeunit 99000830 Create Reserv. Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot reserve this entry because it is not a true demand or supply.';
      InsertReservEntry@1001 : Record "Reservation Entry";
      InsertReservEntry2@1002 : Record "Reservation Entry";
      LastReservEntry@1003 : Record "Reservation Entry";
      TempTrkgSpec1@1005 : TEMPORARY Record "Tracking Specification";
      TempTrkgSpec2@1004 : TEMPORARY Record "Tracking Specification";
      Text001@1006 : TextConst 'ENU=Cannot match item tracking.';
      OverruleItemTracking@1008 : Boolean;
      Inbound@1009 : Boolean;
      UseQtyToInvoice@1010 : Boolean;
      QtyToHandleAndInvoiceIsSet@1024 : Boolean;

    [External]
    PROCEDURE CreateEntry@5(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];Description@1004 : Text[50];ExpectedReceiptDate@1005 : Date;ShipmentDate@1006 : Date;TransferredFromEntryNo@1007 : Integer;Status@1008 : 'Reservation,Tracking,Surplus,Prospect');
    VAR
      ReservEntry@1009 : Record "Reservation Entry";
      ReservEntry2@1010 : Record "Reservation Entry";
      ReservMgt@1012 : Codeunit "Reservation Management";
      TrackingSpecificationExists@1013 : Boolean;
      FirstSplit@1014 : Boolean;
    BEGIN
      TempTrkgSpec1.RESET;
      TempTrkgSpec2.RESET;
      TempTrkgSpec1.DELETEALL;
      TempTrkgSpec2.DELETEALL;

      // Status Surplus gets special treatment.

      if Status < Status::Surplus then
        if InsertReservEntry."Quantity (Base)" = 0 then
          exit;

      InsertReservEntry.TESTFIELD("Source Type");

      ReservEntry := InsertReservEntry;
      ReservEntry."Reservation Status" := Status;
      ReservEntry."Item No." := ItemNo;
      ReservEntry."Variant Code" := VariantCode;
      ReservEntry."Location Code" := LocationCode;
      ReservEntry.Description := Description;
      ReservEntry."Creation Date" := WORKDATE;
      ReservEntry."Created By" := USERID;
      ReservEntry."Expected Receipt Date" := ExpectedReceiptDate;
      ReservEntry."Shipment Date" := ShipmentDate;
      ReservEntry."Transferred from Entry No." := TransferredFromEntryNo;
      ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
      if (ReservEntry."Quantity (Base)" <> 0) and
         ((ReservEntry.Quantity = 0) or (ReservEntry."Qty. per Unit of Measure" <> InsertReservEntry2."Qty. per Unit of Measure"))
      then
        ReservEntry.Quantity := ROUND(ReservEntry."Quantity (Base)" / ReservEntry."Qty. per Unit of Measure",0.00001);
      if not QtyToHandleAndInvoiceIsSet then begin
        ReservEntry."Qty. to Handle (Base)" := ReservEntry."Quantity (Base)";
        ReservEntry."Qty. to Invoice (Base)" := ReservEntry."Quantity (Base)";
      end;

      if Status < Status::Surplus then begin
        InsertReservEntry2.TESTFIELD("Source Type");

        ReservEntry2 := ReservEntry;
        ReservEntry2."Quantity (Base)" := -ReservEntry."Quantity (Base)";
        ReservEntry2.Quantity := ROUND(ReservEntry2."Quantity (Base)" / InsertReservEntry2."Qty. per Unit of Measure",0.00001);
        ReservEntry2."Qty. to Handle (Base)" := -ReservEntry."Qty. to Handle (Base)";
        ReservEntry2."Qty. to Invoice (Base)" := -ReservEntry."Qty. to Invoice (Base)";
        ReservEntry2.Positive := (ReservEntry2."Quantity (Base)" > 0);
        ReservEntry2."Source Type" := InsertReservEntry2."Source Type";
        ReservEntry2."Source Subtype" := InsertReservEntry2."Source Subtype";
        ReservEntry2."Source ID" := InsertReservEntry2."Source ID";
        ReservEntry2."Source Batch Name" := InsertReservEntry2."Source Batch Name";
        ReservEntry2."Source Prod. Order Line" := InsertReservEntry2."Source Prod. Order Line";
        ReservEntry2."Source Ref. No." := InsertReservEntry2."Source Ref. No.";
        ReservEntry2."Serial No." := InsertReservEntry2."Serial No.";
        ReservEntry2."Lot No." := InsertReservEntry2."Lot No.";
        ReservEntry2."Qty. per Unit of Measure" := InsertReservEntry2."Qty. per Unit of Measure";
        if not QtyToHandleAndInvoiceIsSet then begin
          ReservEntry2."Qty. to Handle (Base)" := ReservEntry2."Quantity (Base)";
          ReservEntry2."Qty. to Invoice (Base)" := ReservEntry2."Quantity (Base)";
        end;

        ReservEntry2.ClearApplFromToItemEntry;

        if Status = Status::Reservation then
          if TransferredFromEntryNo = 0 then begin
            ReservMgt.MakeRoomForReservation(ReservEntry2);
            TrackingSpecificationExists :=
              ReservMgt.CollectTrackingSpecification(TempTrkgSpec2);
          end;
        CheckValidity(ReservEntry2);
        AdjustDateIfItemLedgerEntry(ReservEntry2);
      end;

      ReservEntry.ClearApplFromToItemEntry;

      CheckValidity(ReservEntry);
      AdjustDateIfItemLedgerEntry(ReservEntry);
      if Status = Status::Reservation then
        if TransferredFromEntryNo = 0 then begin
          ReservMgt.MakeRoomForReservation(ReservEntry);
          TrackingSpecificationExists := TrackingSpecificationExists or
            ReservMgt.CollectTrackingSpecification(TempTrkgSpec1);
        end;

      if TrackingSpecificationExists then
        SetupSplitReservEntry(ReservEntry,ReservEntry2);

      FirstSplit := true;
      while SplitReservEntry(ReservEntry,ReservEntry2,TrackingSpecificationExists,FirstSplit) do begin
        ReservEntry."Entry No." := 0;
        ReservEntry.UpdateItemTracking;
        ReservEntry.INSERT;
        if Status < Status::Surplus then begin
          ReservEntry2."Entry No." := ReservEntry."Entry No.";
          ReservEntry2.UpdateItemTracking;
          ReservEntry2.INSERT;
        end;
      end;

      LastReservEntry := ReservEntry;

      CLEAR(InsertReservEntry);
      CLEAR(InsertReservEntry2);
      CLEAR(QtyToHandleAndInvoiceIsSet);
    END;

    [External]
    PROCEDURE CreateReservEntry@6(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];Description@1004 : Text[50];ExpectedReceiptDate@1005 : Date;ShipmentDate@1006 : Date);
    BEGIN
      CreateEntry(ItemNo,VariantCode,LocationCode,Description,
        ExpectedReceiptDate,ShipmentDate,0,0);
    END;

    [External]
    PROCEDURE CreateReservEntryFor@40(ForType@1000 : Option;ForSubtype@1001 : Integer;ForID@1002 : Code[20];ForBatchName@1003 : Code[10];ForProdOrderLine@1004 : Integer;ForRefNo@1005 : Integer;ForQtyPerUOM@1006 : Decimal;Quantity@1010 : Decimal;QuantityBase@1007 : Decimal;ForSerialNo@1008 : Code[20];ForLotNo@1009 : Code[20]);
    VAR
      Sign@1011 : Integer;
    BEGIN
      InsertReservEntry.SetSource(ForType,ForSubtype,ForID,ForRefNo,ForBatchName,ForProdOrderLine);
      Sign := SignFactor(InsertReservEntry);
      InsertReservEntry.Quantity := Sign * Quantity;
      InsertReservEntry."Quantity (Base)" := Sign * QuantityBase;
      InsertReservEntry."Qty. per Unit of Measure" := ForQtyPerUOM;
      InsertReservEntry."Serial No." := ForSerialNo;
      InsertReservEntry."Lot No." := ForLotNo;

      InsertReservEntry.TESTFIELD("Qty. per Unit of Measure");
    END;

    [External]
    PROCEDURE CreateReservEntryFrom@57(FromType@1000 : Option;FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromQtyPerUOM@1006 : Decimal;FromSerialNo@1007 : Code[20];FromLotNo@1008 : Code[20]);
    BEGIN
      InsertReservEntry2.INIT;
      InsertReservEntry2.SetSource(FromType,FromSubtype,FromID,FromRefNo,FromBatchName,FromProdOrderLine);
      InsertReservEntry2."Qty. per Unit of Measure" := FromQtyPerUOM;
      InsertReservEntry2."Serial No." := FromSerialNo;
      InsertReservEntry2."Lot No." := FromLotNo;

      InsertReservEntry2.TESTFIELD("Qty. per Unit of Measure");
    END;

    [External]
    PROCEDURE SetBinding@8(Binding@1000 : '" ","Order-to-Order"');
    BEGIN
      InsertReservEntry.Binding := Binding;
      InsertReservEntry2.Binding := Binding;
    END;

    [External]
    PROCEDURE SetPlanningFlexibility@4(Flexibility@1000 : 'Unlimited,None');
    BEGIN
      InsertReservEntry."Planning Flexibility" := Flexibility;
      InsertReservEntry2."Planning Flexibility" := Flexibility;
    END;

    [External]
    PROCEDURE SetDates@13(WarrantyDate@1001 : Date;ExpirationDate@1000 : Date);
    BEGIN
      InsertReservEntry."Warranty Date" := WarrantyDate;
      InsertReservEntry."Expiration Date" := ExpirationDate;
    END;

    [External]
    PROCEDURE SetQtyToHandleAndInvoice@12(QtyToHandleBase@1000 : Decimal;QtyToInvoiceBase@1001 : Decimal);
    BEGIN
      InsertReservEntry."Qty. to Handle (Base)" := QtyToHandleBase;
      InsertReservEntry."Qty. to Invoice (Base)" := QtyToInvoiceBase;
      QtyToHandleAndInvoiceIsSet := true;
    END;

    [External]
    PROCEDURE SetNewSerialLotNo@11(NewSerialNo@1001 : Code[20];NewLotNo@1000 : Code[20]);
    BEGIN
      InsertReservEntry."New Serial No." := NewSerialNo;
      InsertReservEntry."New Lot No." := NewLotNo;
    END;

    [External]
    PROCEDURE SetNewExpirationDate@19(NewExpirationDate@1001 : Date);
    BEGIN
      InsertReservEntry."New Expiration Date" := NewExpirationDate;
    END;

    [External]
    PROCEDURE SetDisallowCancellation@25(NewDisallowCancellation@1000 : Boolean);
    BEGIN
      InsertReservEntry."Disallow Cancellation" := NewDisallowCancellation;
    END;

    [External]
    PROCEDURE CreateRemainingReservEntry@58(VAR OldReservEntry@1000 : Record "Reservation Entry";RemainingQuantity@1003 : Decimal;RemainingQuantityBase@1001 : Decimal);
    VAR
      OldReservEntry2@1002 : Record "Reservation Entry";
    BEGIN
      CreateReservEntryFor(
        OldReservEntry."Source Type",OldReservEntry."Source Subtype",
        OldReservEntry."Source ID",OldReservEntry."Source Batch Name",
        OldReservEntry."Source Prod. Order Line",OldReservEntry."Source Ref. No.",
        OldReservEntry."Qty. per Unit of Measure",RemainingQuantity,RemainingQuantityBase,
        OldReservEntry."Serial No.",OldReservEntry."Lot No.");
      InsertReservEntry."Warranty Date" := OldReservEntry."Warranty Date";
      InsertReservEntry."Expiration Date" := OldReservEntry."Expiration Date";

      if OldReservEntry."Reservation Status" < OldReservEntry."Reservation Status"::Surplus then
        if OldReservEntry2.GET(OldReservEntry."Entry No.",not OldReservEntry.Positive) then begin // Get the related entry
          CreateReservEntryFrom(
            OldReservEntry2."Source Type",OldReservEntry2."Source Subtype",
            OldReservEntry2."Source ID",OldReservEntry2."Source Batch Name",
            OldReservEntry2."Source Prod. Order Line",OldReservEntry2."Source Ref. No.",OldReservEntry2."Qty. per Unit of Measure",
            OldReservEntry2."Serial No.",OldReservEntry2."Lot No.");
          InsertReservEntry2."Warranty Date" := OldReservEntry2."Warranty Date";
          InsertReservEntry2."Expiration Date" := OldReservEntry2."Expiration Date";
        end;
      CreateEntry(
        OldReservEntry."Item No.",OldReservEntry."Variant Code",
        OldReservEntry."Location Code",OldReservEntry.Description,
        OldReservEntry."Expected Receipt Date",OldReservEntry."Shipment Date",
        OldReservEntry."Entry No.",OldReservEntry."Reservation Status");
    END;

    [External]
    PROCEDURE TransferReservEntry@1(NewType@1000 : Option;NewSubtype@1001 : Integer;NewID@1002 : Code[20];NewBatchName@1003 : Code[10];NewProdOrderLine@1004 : Integer;NewRefNo@1005 : Integer;QtyPerUOM@1006 : Decimal;OldReservEntry@1007 : Record "Reservation Entry";TransferQty@1008 : Decimal) : Decimal;
    VAR
      NewReservEntry@1009 : Record "Reservation Entry";
      ReservEntry@1021 : Record "Reservation Entry";
      Location@1020 : Record Location;
      ItemTrkgMgt@1017 : Codeunit "Item Tracking Management";
      CurrSignFactor@1010 : Integer;
      xTransferQty@1011 : Decimal;
      QtyToHandleThisLine@1014 : Decimal;
      QtyToInvoiceThisLine@1013 : Decimal;
      QtyInvoiced@1015 : Decimal;
      CarriedSerialNo@1022 : Code[20];
      CarriedLotNo@1023 : Code[20];
      UseQtyToHandle@1012 : Boolean;
      SNRequired@1018 : Boolean;
      LNRequired@1019 : Boolean;
    BEGIN
      if TransferQty = 0 then
        exit;

      UseQtyToHandle := OldReservEntry.TrackingExists and not OverruleItemTracking;

      CurrSignFactor := SignFactor(OldReservEntry);
      TransferQty := TransferQty * CurrSignFactor;
      xTransferQty := TransferQty;

      if UseQtyToHandle then begin // Used when handling Item Tracking
        QtyToHandleThisLine := OldReservEntry."Qty. to Handle (Base)";
        QtyToInvoiceThisLine := OldReservEntry."Qty. to Invoice (Base)";
        if ABS(TransferQty) > ABS(QtyToHandleThisLine) then
          TransferQty := QtyToHandleThisLine;
        if UseQtyToInvoice then begin // Used when posting sales and purchase
          if ABS(TransferQty) > ABS(QtyToInvoiceThisLine) then
            TransferQty := QtyToInvoiceThisLine;
        end;
      end else
        QtyToHandleThisLine := OldReservEntry."Quantity (Base)";

      if QtyToHandleThisLine = 0 then
        exit(xTransferQty * CurrSignFactor);

      NewReservEntry.TRANSFERFIELDS(OldReservEntry,false);

      NewReservEntry."Entry No." := OldReservEntry."Entry No.";
      NewReservEntry.Positive := OldReservEntry.Positive;
      NewReservEntry.SetSource(NewType,NewSubtype,NewID,NewRefNo,NewBatchName,NewProdOrderLine);
      NewReservEntry."Qty. per Unit of Measure" := QtyPerUOM;

      // Item Tracking on consumption, output and drop shipment:
      if (NewType = DATABASE::"Item Journal Line") and (NewSubtype in [3,5,6]) or OverruleItemTracking then
        if (InsertReservEntry."New Serial No." <> '') or (InsertReservEntry."New Lot No." <> '') then begin
          NewReservEntry."Serial No." := InsertReservEntry."New Serial No.";
          NewReservEntry."Lot No." := InsertReservEntry."New Lot No.";
          if NewReservEntry."Qty. to Handle (Base)" = 0 then
            NewReservEntry."Qty. to Handle (Base)" := NewReservEntry."Quantity (Base)";
          InsertReservEntry."New Serial No." := '';
          InsertReservEntry."New Lot No." := '';

          // If an order-to-order supply is being posted, item tracking must be carried to the related demand:
          if (TransferQty >= 0) and (NewReservEntry.Binding = NewReservEntry.Binding::"Order-to-Order") then begin
            CarriedSerialNo := NewReservEntry."Serial No.";
            CarriedLotNo := NewReservEntry."Lot No.";
            if not UseQtyToHandle then
              // the IT is set only in Consumption/Output Journal and we need to update all fields properly
              QtyToInvoiceThisLine := NewReservEntry."Quantity (Base)";
          end;
        end;

      if InsertReservEntry."Item Ledger Entry No." <> 0 then begin
        NewReservEntry."Item Ledger Entry No." := InsertReservEntry."Item Ledger Entry No.";
        InsertReservEntry."Item Ledger Entry No." := 0;
      end;

      if NewReservEntry."Source Type" = DATABASE::"Item Ledger Entry" then
        if NewReservEntry."Quantity (Base)" > 0 then
          NewReservEntry."Expected Receipt Date" := 0D
        else
          NewReservEntry."Shipment Date" := DMY2DATE(31,12,9999);

      NewReservEntry.UpdateItemTracking;

      if (TransferQty >= 0) <> OldReservEntry.Positive then begin // If sign has swapped due to negative posting
        // Create a new but unchanged version of the original reserventry:
        SetQtyToHandleAndInvoice(QtyToHandleThisLine,QtyToInvoiceThisLine);
        CreateRemainingReservEntry(OldReservEntry,
          OldReservEntry.Quantity * CurrSignFactor,
          OldReservEntry."Quantity (Base)" * CurrSignFactor);
        NewReservEntry.VALIDATE("Quantity (Base)",TransferQty);
        // Correct primary key - swap "Positive":
        NewReservEntry.Positive := not NewReservEntry.Positive;

        if not ReservEntry.GET(NewReservEntry."Entry No.",NewReservEntry.Positive) then begin
          // Means that only one record exists = surplus or prospect
          NewReservEntry.INSERT;
          // Delete the original record:
          NewReservEntry.Positive := not NewReservEntry.Positive;
          NewReservEntry.DELETE;
        end else begin // A set of records exist = reservation or tracking
          NewReservEntry.MODIFY;
          // Get the original record and modify quantity:
          NewReservEntry.GET(NewReservEntry."Entry No.",not NewReservEntry.Positive); // Get partner-record
          NewReservEntry.VALIDATE("Quantity (Base)",-TransferQty);
          NewReservEntry.MODIFY;
        end;
      end else
        if ABS(TransferQty) < ABS(OldReservEntry."Quantity (Base)") then begin
          if OldReservEntry.Binding = OldReservEntry.Binding::"Order-to-Order" then
            SetBinding(OldReservEntry.Binding::"Order-to-Order");
          if OldReservEntry."Disallow Cancellation" then
            SetDisallowCancellation(OldReservEntry."Disallow Cancellation");
          if ABS(QtyToInvoiceThisLine) > ABS(TransferQty) then
            QtyInvoiced := TransferQty
          else
            QtyInvoiced := QtyToInvoiceThisLine;
          SetQtyToHandleAndInvoice(QtyToHandleThisLine - TransferQty,QtyToInvoiceThisLine - QtyInvoiced);
          CreateRemainingReservEntry(OldReservEntry,
            0,(OldReservEntry."Quantity (Base)" - TransferQty) * CurrSignFactor);
          NewReservEntry.VALIDATE("Quantity (Base)",TransferQty);
          NewReservEntry.MODIFY;
          if NewReservEntry.GET(NewReservEntry."Entry No.",not NewReservEntry.Positive) then begin // Get partner-record
            NewReservEntry.VALIDATE("Quantity (Base)",-TransferQty);
            NewReservEntry.MODIFY;
          end;
        end else begin
          NewReservEntry.MODIFY;
          TransferQty := NewReservEntry."Quantity (Base)";
          if NewReservEntry."Source Type" = DATABASE::"Item Ledger Entry" then begin
            if NewReservEntry.GET(NewReservEntry."Entry No.",not NewReservEntry.Positive) then begin // Get partner-record
              if NewReservEntry."Quantity (Base)" < 0 then
                NewReservEntry."Expected Receipt Date" := 0D
              else
                NewReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
              NewReservEntry.MODIFY;
            end;

            // If necessary create Whse. Item Tracking Lines
            if (NewReservEntry."Source Type" = DATABASE::"Sales Line") and
               (OldReservEntry."Source Type" = DATABASE::"Item Journal Line") and
               (OldReservEntry."Reservation Status" = OldReservEntry."Reservation Status"::Reservation)
            then begin
              ItemTrkgMgt.CheckWhseItemTrkgSetup(OldReservEntry."Item No.",SNRequired,LNRequired,false);
              if (SNRequired or LNRequired) and
                 Location.RequireShipment(OldReservEntry."Location Code")
              then
                CreateWhseItemTrkgLines(NewReservEntry);
            end;
          end else
            if (CarriedSerialNo + CarriedLotNo) <> '' then
              if NewReservEntry.GET(NewReservEntry."Entry No.",not NewReservEntry.Positive) then ; // Get partner-record
        end;

      if (CarriedSerialNo + CarriedLotNo) <> '' then begin
        if NewReservEntry."Qty. to Handle (Base)" = 0 then
          NewReservEntry.VALIDATE("Quantity (Base)");
        NewReservEntry."Serial No." := CarriedSerialNo;
        NewReservEntry."Lot No." := CarriedLotNo;
        NewReservEntry.UpdateItemTracking;
        if NewReservEntry.MODIFY then ;
      end;

      SynchronizeTransferOutboundToInboundItemTracking(NewReservEntry."Entry No.");

      xTransferQty -= TransferQty;
      exit(xTransferQty * CurrSignFactor);
    END;

    [External]
    PROCEDURE SignFactor@2(VAR ReservEntry@1000 : Record "Reservation Entry") : Integer;
    BEGIN
      // Demand is regarded as negative, supply is regarded as positive.
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          if ReservEntry."Source Subtype" in [3,5] then // Credit memo, Return Order = supply
            exit(1)
          else
            exit(-1);
        DATABASE::"Requisition Line":
          if ReservEntry."Source Subtype" = 1 then
            exit(-1)
          else
            exit(1);
        DATABASE::"Purchase Line":
          if ReservEntry."Source Subtype" in [3,5] then // Credit memo, Return Order = demand
            exit(-1)
          else
            exit(1);
        DATABASE::"Item Journal Line":
          if (ReservEntry."Source Subtype" = 4) and Inbound then
            exit(1)
          else
            if ReservEntry."Source Subtype" in [1,3,4,5] then // Sale, Negative Adjmt., Transfer, Consumption
              exit(-1)
            else
              exit(1);
        DATABASE::"Job Journal Line":
          exit(-1);
        DATABASE::"Item Ledger Entry":
          exit(1);
        DATABASE::"Prod. Order Line":
          exit(1);
        DATABASE::"Prod. Order Component":
          exit(-1);
        DATABASE::"Assembly Header":
          exit(1);
        DATABASE::"Assembly Line":
          exit(-1);
        DATABASE::"Planning Component":
          exit(-1);
        DATABASE::"Transfer Line":
          if ReservEntry."Source Subtype" = 0 then // Outbound
            exit(-1)
          else
            exit(1);
        DATABASE::"Service Line":
          if ReservEntry."Source Subtype" in [3] then // Credit memo
            exit(1)
          else
            exit(-1);
        DATABASE::"Job Planning Line":
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE CheckValidity@3(VAR ReservEntry@1000 : Record "Reservation Entry");
    VAR
      IsError@1001 : Boolean;
    BEGIN
      if ReservEntry."Reservation Status" <> ReservEntry."Reservation Status"::Reservation then
        exit;

      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          IsError := not (ReservEntry."Source Subtype" in [1,5]);
        DATABASE::"Purchase Line":
          IsError := not (ReservEntry."Source Subtype" in [1,5]);
        DATABASE::"Prod. Order Line",
        DATABASE::"Prod. Order Component":
          IsError := (ReservEntry."Source Subtype" = 4) or
            ((ReservEntry."Source Subtype" = 1) and (ReservEntry.Binding = ReservEntry.Binding::" "));
        DATABASE::"Assembly Header",
        DATABASE::"Assembly Line":
          IsError := not (ReservEntry."Source Subtype" = 1); // Only Assembly Order supported
        DATABASE::"Requisition Line",
        DATABASE::"Planning Component":
          IsError := ReservEntry.Binding = ReservEntry.Binding::" ";
        DATABASE::"Item Journal Line":
          // Item Journal Lines with Entry Type Transfer can carry reservations during posting:
          IsError := (ReservEntry."Source Subtype" <> 4) and
            (ReservEntry."Source Ref. No." <> 0);
        DATABASE::"Job Journal Line":
          IsError := ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order";
        DATABASE::"Job Planning Line":
          IsError := ReservEntry."Source Subtype" <> 2;
      end;

      if IsError then
        ERROR(Text000);
    END;

    [External]
    PROCEDURE GetLastEntry@7(VAR ReservEntry@1000 : Record "Reservation Entry");
    BEGIN
      ReservEntry := LastReservEntry;
    END;

    LOCAL PROCEDURE AdjustDateIfItemLedgerEntry@9(VAR ReservEntry@1000 : Record "Reservation Entry");
    BEGIN
      if ReservEntry."Source Type" = DATABASE::"Item Ledger Entry" then
        if ReservEntry."Quantity (Base)" > 0 then
          ReservEntry."Expected Receipt Date" := 0D
        else
          ReservEntry."Shipment Date" := DMY2DATE(31,12,9999);
    END;

    LOCAL PROCEDURE SetupSplitReservEntry@14(VAR ReservEntry@1000 : Record "Reservation Entry";VAR ReservEntry2@1001 : Record "Reservation Entry");
    VAR
      NonReleasedQty@1002 : Decimal;
    BEGIN
      // Preparing the looping through Item Tracking.

      // Ensure that the full quantity is represented in the list of Tracking Specifications:
      NonReleasedQty := ReservEntry."Quantity (Base)";
      if TempTrkgSpec1.FINDSET then
        repeat
          NonReleasedQty -= TempTrkgSpec1."Quantity (Base)";
        until TempTrkgSpec1.NEXT = 0;

      if NonReleasedQty <> 0 then begin
        TempTrkgSpec1.INIT;
        TempTrkgSpec1.TRANSFERFIELDS(ReservEntry);
        TempTrkgSpec1.VALIDATE("Quantity (Base)",NonReleasedQty);
        if (TempTrkgSpec1."Source Type" <> DATABASE::"Item Ledger Entry") and
           (ReservEntry."Reservation Status" <> ReservEntry."Reservation Status"::Reservation)
        then
          TempTrkgSpec1.ClearTracking;
        TempTrkgSpec1.INSERT;
      end;

      if not (ReservEntry."Reservation Status" < ReservEntry."Reservation Status"::Surplus) then
        exit;

      NonReleasedQty := ReservEntry2."Quantity (Base)";
      if TempTrkgSpec2.FINDSET then
        repeat
          NonReleasedQty -= TempTrkgSpec2."Quantity (Base)";
        until TempTrkgSpec2.NEXT = 0;

      if NonReleasedQty <> 0 then begin
        TempTrkgSpec2.INIT;
        TempTrkgSpec2.TRANSFERFIELDS(ReservEntry2);
        TempTrkgSpec2.VALIDATE("Quantity (Base)",NonReleasedQty);
        if (TempTrkgSpec2."Source Type" <> DATABASE::"Item Ledger Entry") and
           (ReservEntry2."Reservation Status" <> ReservEntry2."Reservation Status"::Reservation)
        then
          TempTrkgSpec2.ClearTracking;
        TempTrkgSpec2.INSERT;
      end;

      BalanceLists;
    END;

    LOCAL PROCEDURE BalanceLists@15();
    VAR
      TempTrkgSpec3@1001 : TEMPORARY Record "Tracking Specification";
      TempTrkgSpec4@1000 : TEMPORARY Record "Tracking Specification";
      LastEntryNo@1004 : Integer;
      NextState@1002 : 'SetFilter1,SetFilter2,LoosenFilter1,LoosenFilter2,Split,Error,Finish';
    BEGIN
      TempTrkgSpec1.RESET;
      TempTrkgSpec2.RESET;
      TempTrkgSpec1.SETCURRENTKEY("Lot No.","Serial No.");
      TempTrkgSpec2.SETCURRENTKEY("Lot No.","Serial No.");

      if not TempTrkgSpec1.FINDLAST then
        exit;

      repeat
        case NextState of
          NextState::SetFilter1:
            begin
              TempTrkgSpec1.SetTrackingFilterFromSpec(TempTrkgSpec2);
              if TempTrkgSpec1.FINDLAST then
                NextState := NextState::Split
              else
                NextState := NextState::LoosenFilter1;
            end;
          NextState::LoosenFilter1:
            begin
              if TempTrkgSpec2."Quantity (Base)" > 0 then
                TempTrkgSpec1.SetTrackingFilterBlank
              else begin
                if TempTrkgSpec2."Serial No." = '' then
                  TempTrkgSpec1.SETRANGE("Serial No.");
                if TempTrkgSpec2."Lot No." = '' then
                  TempTrkgSpec1.SETRANGE("Lot No.");
              end;
              if TempTrkgSpec1.FINDLAST then
                NextState := NextState::Split
              else
                NextState := NextState::Error;
            end;
          NextState::SetFilter2:
            begin
              TempTrkgSpec2.SetTrackingFilterFromSpec(TempTrkgSpec1);
              if TempTrkgSpec2.FINDLAST then
                NextState := NextState::Split
              else
                NextState := NextState::LoosenFilter2;
            end;
          NextState::LoosenFilter2:
            begin
              if TempTrkgSpec1."Quantity (Base)" > 0 then
                TempTrkgSpec2.SetTrackingFilterBlank
              else begin
                if TempTrkgSpec1."Serial No." = '' then
                  TempTrkgSpec2.SETRANGE("Serial No.");
                if TempTrkgSpec1."Lot No." = '' then
                  TempTrkgSpec2.SETRANGE("Lot No.");
              end;
              if TempTrkgSpec2.FINDLAST then
                NextState := NextState::Split
              else
                NextState := NextState::Error;
            end;
          NextState::Split:
            begin
              TempTrkgSpec3 := TempTrkgSpec1;
              TempTrkgSpec4 := TempTrkgSpec2;
              if ABS(TempTrkgSpec1."Quantity (Base)") = ABS(TempTrkgSpec2."Quantity (Base)") then begin
                TempTrkgSpec1.DELETE;
                TempTrkgSpec2.DELETE;
                TempTrkgSpec1.ClearTrackingFilter;
                if TempTrkgSpec1.FINDLAST then
                  NextState := NextState::SetFilter2
                else begin
                  TempTrkgSpec2.RESET;
                  if TempTrkgSpec2.FINDLAST then
                    NextState := NextState::Error
                  else
                    NextState := NextState::Finish;
                end;
              end else
                if ABS(TempTrkgSpec1."Quantity (Base)") < ABS(TempTrkgSpec2."Quantity (Base)") then begin
                  TempTrkgSpec2.VALIDATE("Quantity (Base)",TempTrkgSpec2."Quantity (Base)" +
                    TempTrkgSpec1."Quantity (Base)");
                  TempTrkgSpec4.VALIDATE("Quantity (Base)",-TempTrkgSpec1."Quantity (Base)");
                  TempTrkgSpec1.DELETE;
                  TempTrkgSpec2.MODIFY;
                  NextState := NextState::SetFilter1;
                end else begin
                  TempTrkgSpec1.VALIDATE("Quantity (Base)",TempTrkgSpec1."Quantity (Base)" +
                    TempTrkgSpec2."Quantity (Base)");
                  TempTrkgSpec3.VALIDATE("Quantity (Base)",-TempTrkgSpec2."Quantity (Base)");
                  TempTrkgSpec2.DELETE;
                  TempTrkgSpec1.MODIFY;
                  NextState := NextState::SetFilter2;
                end;
              TempTrkgSpec3."Entry No." := LastEntryNo + 1;
              TempTrkgSpec4."Entry No." := LastEntryNo + 1;
              TempTrkgSpec3.INSERT;
              TempTrkgSpec4.INSERT;
              LastEntryNo := TempTrkgSpec3."Entry No.";
            end;
          NextState::Error:
            ERROR(Text001);
        end;
      until NextState = NextState::Finish;

      TempTrkgSpec1.RESET;
      TempTrkgSpec2.RESET;
      TempTrkgSpec3.RESET;
      TempTrkgSpec4.RESET;

      if TempTrkgSpec3.FINDSET then
        repeat
          TempTrkgSpec1 := TempTrkgSpec3;
          TempTrkgSpec1.INSERT;
        until TempTrkgSpec3.NEXT = 0;

      if TempTrkgSpec4.FINDSET then
        repeat
          TempTrkgSpec2 := TempTrkgSpec4;
          TempTrkgSpec2.INSERT;
        until TempTrkgSpec4.NEXT = 0;
    END;

    LOCAL PROCEDURE SplitReservEntry@17(VAR ReservEntry@1001 : Record "Reservation Entry";VAR ReservEntry2@1000 : Record "Reservation Entry";TrackingSpecificationExists@1003 : Boolean;VAR FirstSplit@1002 : Boolean) : Boolean;
    VAR
      SalesSetup@1005 : Record "Sales & Receivables Setup";
      OldReservEntryQty@1004 : Decimal;
    BEGIN
      if not TrackingSpecificationExists then
        if not FirstSplit then
          exit(false)
        else begin
          FirstSplit := false;
          exit(true);
        end;

      SalesSetup.GET;
      TempTrkgSpec1.RESET;
      if not TempTrkgSpec1.FINDFIRST then
        exit(false);

      ReservEntry.CopyTrackingFromSpec(TempTrkgSpec1);
      OldReservEntryQty := ReservEntry.Quantity;
      ReservEntry.VALIDATE("Quantity (Base)",TempTrkgSpec1."Quantity (Base)");
      if ABS(ReservEntry.Quantity - OldReservEntryQty) <= 0.00001 then
        ReservEntry.Quantity := OldReservEntryQty;
      TempTrkgSpec1.DELETE;

      if ReservEntry."Reservation Status" < ReservEntry."Reservation Status"::Surplus then begin
        TempTrkgSpec2.GET(TempTrkgSpec1."Entry No.");
        ReservEntry2.CopyTrackingFromSpec(TempTrkgSpec2);
        OldReservEntryQty := ReservEntry2.Quantity;
        ReservEntry2.VALIDATE("Quantity (Base)",TempTrkgSpec2."Quantity (Base)");
        if ABS(ReservEntry2.Quantity - OldReservEntryQty) <= 0.00001 then
          ReservEntry2.Quantity := OldReservEntryQty;
        if ReservEntry2.Positive and SalesSetup."Exact Cost Reversing Mandatory" then
          ReservEntry2."Appl.-from Item Entry" := TempTrkgSpec2."Appl.-from Item Entry";
        TempTrkgSpec2.DELETE;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE CreateWhseItemTrkgLines@21(ReservEntry@1000 : Record "Reservation Entry");
    VAR
      WhseShipmentLine@1001 : Record "Warehouse Shipment Line";
      WhseWkshLine@1002 : Record "Whse. Worksheet Line";
      ItemTrkgMgt@1003 : Codeunit "Item Tracking Management";
    BEGIN
      with WhseShipmentLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",ReservEntry."Source Type");
        SETRANGE("Source Subtype",ReservEntry."Source Subtype");
        SETRANGE("Source No.",ReservEntry."Source ID");
        SETRANGE("Source Line No.",ReservEntry."Source Ref. No.");
        if FINDFIRST then
          if not ItemTrkgMgt.WhseItemTrkgLineExists("No.",DATABASE::"Warehouse Shipment Line",0,'',0,
               "Source Line No.","Location Code",ReservEntry."Serial No.",ReservEntry."Lot No.")
          then begin
            ItemTrkgMgt.InitWhseWkshLine(WhseWkshLine,
              2,"No.","Line No.","Source Type","Source Subtype","Source No.","Source Line No.",0);
            ItemTrkgMgt.CreateWhseItemTrkgForResEntry(ReservEntry,WhseWkshLine);
          end;
      end;
    END;

    [External]
    PROCEDURE SetItemLedgEntryNo@16(EntryNo@1000 : Integer);
    BEGIN
      InsertReservEntry."Item Ledger Entry No." := EntryNo;
    END;

    [External]
    PROCEDURE SetApplyToEntryNo@26(EntryNo@1000 : Integer);
    BEGIN
      InsertReservEntry."Appl.-to Item Entry" := EntryNo;
    END;

    [External]
    PROCEDURE SetApplyFromEntryNo@78(EntryNo@1000 : Integer);
    BEGIN
      InsertReservEntry."Appl.-from Item Entry" := EntryNo;
    END;

    [External]
    PROCEDURE SetOverruleItemTracking@18(Overrule@1000 : Boolean);
    BEGIN
      OverruleItemTracking := Overrule;
    END;

    [External]
    PROCEDURE SetInbound@20(NewInbound@1000 : Boolean);
    BEGIN
      Inbound := NewInbound;
    END;

    [External]
    PROCEDURE SetUseQtyToInvoice@22(UseQtyToInvoice2@1000 : Boolean);
    BEGIN
      UseQtyToInvoice := UseQtyToInvoice2;
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@23(VAR ReservEntry@1000 : Record "Reservation Entry");
    VAR
      CurrSourceRefNo@1005 : Integer;
      ReachedEndOfResvEntries@1006 : Boolean;
    BEGIN
      if not ReservEntry.FINDSET(true) then
        exit;

      repeat
        CurrSourceRefNo := ReservEntry."Source Ref. No.";

        repeat
          ReservEntry."Qty. to Handle (Base)" := ReservEntry."Quantity (Base)";
          ReservEntry."Qty. to Invoice (Base)" := ReservEntry."Quantity (Base)";
          ReservEntry.MODIFY;
          if ReservEntry.NEXT = 0 then
            ReachedEndOfResvEntries := true;
        until ReachedEndOfResvEntries or (ReservEntry."Source Ref. No." <> CurrSourceRefNo);

        // iterate over each set of Source Ref No.
      until ReservEntry."Source Ref. No." = CurrSourceRefNo;
    END;

    [External]
    PROCEDURE UpdReservEntryAfterPostingPick@24(TransHeader@1000 : Record "Transfer Header");
    VAR
      ReservEntry@1008 : Record "Reservation Entry";
      ReservEntryFrom@1007 : Record "Reservation Entry";
      SurplusReservEntry@1006 : Record "Reservation Entry";
      ReservEntryTo@1005 : Record "Reservation Entry";
    BEGIN
      ReservEntryFrom.RESET;
      ReservEntryFrom.SetSourceFilter(DATABASE::"Transfer Line",1,TransHeader."No.",-1,false);
      ReservEntryFrom.SetSourceFilter2('',0);
      ReservEntryFrom.SetTrackingFilterBlank;
      if ReservEntryFrom.FINDSET then
        repeat
          ReservEntry := ReservEntryFrom;
          with SurplusReservEntry do begin
            SETRANGE(Positive,ReservEntry.Positive);
            SETRANGE("Item No.",ReservEntry."Item No.");
            SETRANGE("Location Code",ReservEntry."Location Code");
            SetSourceFilter(ReservEntry."Source Type",ReservEntry."Source Subtype",ReservEntry."Source ID",-1,false);
            SETRANGE("Reservation Status","Reservation Status"::Surplus);
            SETRANGE("Source Prod. Order Line",ReservEntry."Source Ref. No.");
            if FINDFIRST and ReservEntryTo.GET(ReservEntry."Entry No.",not ReservEntry.Positive) then begin
              ReservEntry."Source Prod. Order Line" := "Source Prod. Order Line";
              ReservEntry."Source Ref. No." := "Source Ref. No.";
              ReservEntry.CopyTrackingFromReservEntry(SurplusReservEntry);
              ReservEntry.UpdateItemTracking;
              ReservEntry.MODIFY;
              DELETE;
            end;
          end;
        until ReservEntryFrom.NEXT = 0;
    END;

    LOCAL PROCEDURE SynchronizeTransferOutboundToInboundItemTracking@28(ReservationEntryNo@1001 : Integer);
    VAR
      FromReservationEntry@1002 : Record "Reservation Entry";
      ToReservationEntry@1003 : Record "Reservation Entry";
      ItemTrackingManagement@1000 : Codeunit "Item Tracking Management";
    BEGIN
      if FromReservationEntry.GET(ReservationEntryNo,false) then
        if (FromReservationEntry."Source Type" = DATABASE::"Transfer Line") and
           (FromReservationEntry."Source Subtype" = 0) and
           FromReservationEntry.TrackingExists
        then begin
          ToReservationEntry.SetSourceFilter(
            DATABASE::"Transfer Line",1,FromReservationEntry."Source ID",FromReservationEntry."Source Ref. No.",false);
          if ToReservationEntry.FINDSET then
            repeat
              CLEAR(ItemTrackingManagement);
              ItemTrackingManagement.SynchronizeItemTrackingByPtrs(FromReservationEntry,ToReservationEntry);
            until ToReservationEntry.NEXT = 0;
        end;
    END;

    BEGIN
    END.
  }
}

