OBJECT Table 1275 Doc. Exch. Service Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    OnInsert=BEGIN
               TESTFIELD("Primary Key",'');
             END;

    OnDelete=BEGIN
               DeletePassword("Consumer Secret");
               DeletePassword("Consumer Key");
               DeletePassword(Token);
               DeletePassword("Token Secret");
               DeletePassword("Doc. Exch. Tenant ID");
             END;

    CaptionML=ENU=Doc. Exch. Service Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 4   ;   ;Sign-up URL         ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Sign-up URL }
    { 5   ;   ;Service URL         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit "Web Request Helper";
                                                              BEGIN
                                                                if "Service URL" <> '' then
                                                                  WebRequestHelper.IsSecureHttpUrl("Service URL");
                                                              END;

                                                   ExtendedDatatype=URL;
                                                   CaptionML=ENU=Service URL }
    { 6   ;   ;Sign-in URL         ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Sign-in URL }
    { 7   ;   ;Consumer Key        ;GUID          ;TableRelation="Service Password".Key;
                                                   CaptionML=ENU=Consumer Key }
    { 8   ;   ;Consumer Secret     ;GUID          ;CaptionML=ENU=Consumer Secret;
                                                   Editable=false }
    { 9   ;   ;Token               ;GUID          ;CaptionML=ENU=Token;
                                                   Editable=false }
    { 10  ;   ;Token Secret        ;GUID          ;CaptionML=ENU=Token Secret;
                                                   Editable=false }
    { 11  ;   ;Doc. Exch. Tenant ID;GUID          ;CaptionML=ENU=Doc. Exch. Tenant ID;
                                                   Editable=false }
    { 12  ;   ;User Agent          ;Text30        ;CaptionML=ENU=User Agent;
                                                   NotBlank=true }
    { 20  ;   ;Enabled             ;Boolean       ;OnValidate=BEGIN
                                                                if Enabled then begin
                                                                  CheckConnection;
                                                                  ScheduleJobQueueEntries;
                                                                  if CONFIRM(JobQEntriesCreatedQst) then
                                                                    ShowJobQueueEntry;
                                                                end else
                                                                  CancelJobQueueEntries;
                                                              END;

                                                   CaptionML=ENU=Enabled }
    { 21  ;   ;Log Web Requests    ;Boolean       ;CaptionML=ENU=Log Web Requests }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      JobQEntriesCreatedQst@1003 : TextConst 'ENU=A job queue entry for exchanging documents has been created.\\Do you want to open the Job Queue Entries window?';
      DocExchServiceMgt@1002 : Codeunit "Doc. Exch. Service Mgt.";

    [External]
    PROCEDURE SavePassword@1(VAR PasswordKey@1001 : GUID;PasswordText@1000 : Text);
    VAR
      ServicePassword@1002 : Record "Service Password";
    BEGIN
      PasswordText := DELCHR(PasswordText,'=',' ');

      if ISNULLGUID(PasswordKey) or not ServicePassword.GET(PasswordKey) then begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.INSERT(true);
        PasswordKey := ServicePassword.Key;
        MODIFY;
      end else begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.MODIFY;
      end;
      COMMIT;
    END;

    [External]
    PROCEDURE GetPassword@2(PasswordKey@1001 : GUID) : Text;
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      ServicePassword.GET(PasswordKey);
      exit(ServicePassword.GetPassword);
    END;

    LOCAL PROCEDURE DeletePassword@4(PasswordKey@1000 : GUID);
    VAR
      ServicePassword@1001 : Record "Service Password";
    BEGIN
      if ServicePassword.GET(PasswordKey) then
        ServicePassword.DELETE;
    END;

    [External]
    PROCEDURE HasPassword@3(PasswordKey@1001 : GUID) : Boolean;
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      if not ServicePassword.GET(PasswordKey) then
        exit(false);

      exit(ServicePassword.GetPassword <> '');
    END;

    [External]
    PROCEDURE SetURLsToDefault@5();
    BEGIN
      DocExchServiceMgt.SetURLsToDefault(Rec);
    END;

    [Internal]
    PROCEDURE CheckConnection@7();
    BEGIN
      DocExchServiceMgt.CheckConnection;
    END;

    LOCAL PROCEDURE ScheduleJobQueueEntries@10();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      DummyRecId@1001 : RecordID;
    BEGIN
      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status",DummyRecId);
      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.",DummyRecId);
    END;

    LOCAL PROCEDURE CancelJobQueueEntries@11();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      CancelJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status");
      CancelJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.");
    END;

    LOCAL PROCEDURE CancelJobQueueEntry@16(ObjType@1001 : Option;ObjID@1002 : Integer);
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      if JobQueueEntry.FindJobQueueEntry(ObjType,ObjID) then
        JobQueueEntry.Cancel;
    END;

    [External]
    PROCEDURE ShowJobQueueEntry@8();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETFILTER("Object ID to Run",'%1|%2',
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status",
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.");
      if JobQueueEntry.FINDFIRST then
        PAGE.RUN(PAGE::"Job Queue Entries",JobQueueEntry);
    END;

    BEGIN
    END.
  }
}

