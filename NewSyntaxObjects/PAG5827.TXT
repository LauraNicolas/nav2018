OBJECT Page 5827 Item Statistics
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Statistics;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    DataCaptionExpr=ItemName;
    PageType=Card;
    OnOpenPage=VAR
                 MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next';
               BEGIN
                 GLSetup.GET;

                 with Item do begin
                   if "No." <> '' then
                     ItemFilter := "No.";
                   if GETFILTER("Date Filter") <> '' then
                     DateFilter := GETFILTER("Date Filter");
                   if GETFILTER("Variant Filter") <> '' then
                     VariantFilter := GETFILTER("Variant Filter");
                   if GETFILTER("Location Filter") <> '' then
                     LocationFilter := GETFILTER("Location Filter");
                 end;

                 if ColumnDimCode = '' then
                   ColumnDimCode := Text002;

                 ItemBuffer."Column Option" := DimCodeToOption(ColumnDimCode);
                 PeriodInitialized := DateFilter <> '';
                 FindPeriod('');
                 ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   with ItemBuffer do begin
                     if "Line Option" = "Line Option"::"Profit Calculation" then
                       IntegerLine.SETRANGE(Number,1,5)
                     else
                       if "Line Option" = "Line Option"::"Cost Specification" then
                         IntegerLine.SETRANGE(Number,1,9);

                     exit(FindRec("Line Option",Rec,Which));
                   end;
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the data overview according to the selected filters and options.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1158 : Page "Item Statistics Matrix";
                               BEGIN
                                 CLEAR(MatrixForm);
                                 MatrixForm.Load(MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
                                   RoundingFactor,PerUnit,IncludeExpected,ItemBuffer,Item,PeriodType,AmountType,
                                   ColumnDimCode,DateFilter,ItemFilter,LocationFilter,VariantFilter);
                                 MatrixForm.SETTABLEVIEW(Rec);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 1170    ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 7   ;2   ;Field     ;
                Name=ShowAsLines;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                OptionCaptionML=ENU=Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period<Undefined>;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemBuffer."Line Option";
                OnValidate=BEGIN
                             ItemBufferLineOptionOnAfterVal;
                           END;
                            }

    { 6   ;2   ;Field     ;
                Name=ColumnDimCode;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             ValidateColumnDimCode;
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                           MATRIX_SetWanted@1003 : 'Initial,Previous,Same,Next';
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           if NewCode = ColumnDimCode then begin
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);

                             exit(false);
                           end;
                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           CurrPage.UPDATE;
                           exit(true);
                         END;

                ImplicitType=Text30 }

    { 20  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             ItemBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;

                ImplicitType=Text }

    { 25  ;2   ;Field     ;
                Name=ItemFilter;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies a filter to specify the items that will be shown in the window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record Item;
                           ItemList@1003 : Page "Item List";
                         BEGIN
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := true;
                           if ItemList.RUNMODAL = ACTION::LookupOK then begin
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Text }

    { 14  ;2   ;Field     ;
                Name=LocationFilter;
                CaptionML=ENU=Location Filter;
                ToolTipML=ENU=Specifies the locations that statistics are shown for.;
                ApplicationArea=#Advanced;
                SourceExpr=LocationFilter;
                OnLookup=VAR
                           Location@1002 : Record Location;
                           Locations@1003 : Page "Location List";
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := true;
                           if Locations.RUNMODAL = ACTION::LookupOK then begin
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Text }

    { 13  ;2   ;Field     ;
                Name=VariantFilter;
                CaptionML=ENU=Variant Filter;
                ToolTipML=ENU=Specifies a filter to specify the variants that will be shown in the window.;
                ApplicationArea=#Advanced;
                SourceExpr=VariantFilter;
                OnLookup=VAR
                           ItemVariant@1002 : Record "Item Variant";
                           ItemVariants@1003 : Page "Item Variants";
                         BEGIN
                           ItemVariant.SETRANGE("Item No.",Item."No.");
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := true;
                           if ItemVariants.RUNMODAL = ACTION::LookupOK then begin
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Text }

    { 1903121901;1;Group  ;
                Name=Options;
                CaptionML=ENU=Options }

    { 5   ;2   ;Field     ;
                Name=RoundingFactor;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=RoundingFactor;
                ImplicitType=Option }

    { 3   ;2   ;Field     ;
                Name=PerUnit;
                CaptionML=ENU=Calculate per Unit;
                ToolTipML=ENU=Specifies that item statistics will be calculated per unit.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PerUnit;
                ImplicitType=Boolean }

    { 28  ;2   ;Field     ;
                Name=IncludeExpected;
                CaptionML=ENU=Include Expected;
                ToolTipML=ENU=Specifies whether to include costs that have not yet been invoiced in the item statistics. When goods have been received but not yet invoiced, the costs of those receipts are expected costs.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IncludeExpected;
                ImplicitType=Boolean }

    { 1906098301;1;Group  ;
                Name=Matrix Options;
                CaptionML=ENU=Matrix Options }

    { 1167;2   ;Field     ;
                Name=ViewBy;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 1168;2   ;Field     ;
                Name=AmountType;
                CaptionML=ENU=View as;
                ToolTipML=ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                OptionCaptionML=ENU=Net Change,Balance at Date;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AmountType;
                OnValidate=VAR
                             MATRIX_Step@1000 : 'First,Previous,Next';
                           BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                           END;

                ImplicitType=Option }

    { 1169;2   ;Field     ;
                Name=MATRIX_CaptionRange;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE;
                ImplicitType=Text }

  }
  CODE
  {
    VAR
      GLSetup@1003 : Record "General Ledger Setup";
      Item@1002 : Record Item;
      ItemBuffer@1001 : Record "Item Statistics Buffer";
      IntegerLine@1000 : Record Integer;
      MATRIX_MatrixRecords@1159 : ARRAY [32] OF Record "Dimension Code Buffer";
      MATRIX_CaptionSet@1160 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1161 : Text;
      MATRIX_PrimKeyFirstCaptionInCu@1165 : Text;
      ColumnDimCode@1020 : Text[30];
      ItemName@1006 : Text[250];
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      RoundingFactor@1009 : 'None,"1","1000","1000000"';
      AmountType@1010 : '"Net Change","Balance at Date"';
      DateFilter@1011 : Text;
      InternalDateFilter@1012 : Text;
      ItemFilter@1013 : Text;
      VariantFilter@1014 : Text;
      LocationFilter@1015 : Text;
      PeriodInitialized@1018 : Boolean;
      PerUnit@1021 : Boolean;
      IncludeExpected@1027 : Boolean;
      Text002@1025 : TextConst 'ENU=Period';
      Text003@1007 : TextConst 'ENU=%1 is not a valid column definition.';
      MATRIX_CurrentNoOfColumns@1028 : Integer;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1175(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next');
    VAR
      MATRIX_PeriodRecords@1004 : ARRAY [32] OF Record Date;
      Location@1003 : Record Location;
      MatrixMgt@1002 : Codeunit "Matrix Management";
      RecRef@1001 : RecordRef;
      i@1005 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);

      case ColumnDimCode of
        Text002:
          begin
            MatrixMgt.GeneratePeriodMatrixData(MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),false,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            for i := 1 to ARRAYLEN(MATRIX_CaptionSet) do begin
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            end;
          end;
        Location.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
          end;
      end;
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1002 : Record Location;
    BEGIN
      case DimCode of
        '':
          exit(-1);
        Text002:
          exit(4);
        Location.TABLECAPTION:
          exit(5);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : '"Profit Calculation","Cost Specification","Purch. Item Charge Spec.","Sales Item Charge Spec.",Period,Location';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250]) : Boolean;
    VAR
      ItemCharge@1003 : Record "Item Charge";
      Location@1004 : Record Location;
      Period@1005 : Record Date;
      PeriodFormMgt@1006 : Codeunit PeriodFormManagement;
      Found@1007 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"Profit Calculation",
        DimOption::"Cost Specification":
          begin
            if EVALUATE(IntegerLine.Number,DimCodeBuf.Code) then;
            Found := IntegerLine.FIND(Which);
            if Found then
              CopyDimValueToBuf(IntegerLine,DimCodeBuf);
          end;
        DimOption::"Purch. Item Charge Spec.",
        DimOption::"Sales Item Charge Spec.":
          begin
            ItemCharge."No." := DimCodeBuf.Code;
            Found := ItemCharge.FIND(Which);
            if Found then
              CopyAddChargesToBuf(ItemCharge,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if not PeriodInitialized then
              DateFilter := '';
            PeriodInitialized := true;
            Period."Period Start" := DimCodeBuf."Period Start";
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if not PeriodInitialized and (InternalDateFilter <> '') then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::Location:
          begin
            Location.Code := DimCodeBuf.Code;
            if LocationFilter <> '' then
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            if Found then
              CopyLocationToBuf(Location,DimCodeBuf);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record Integer;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with ItemBuffer do
        case "Line Option" of
          "Line Option"::"Profit Calculation":
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION("Sales (LCY)"),0,false,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("COGS (LCY)"),0,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Non-Invtbl. Costs (LCY)"),0,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Profit (LCY)"),0,false,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Profit %"),0,false,TheDimCodeBuf);
            end;
          "Line Option"::"Cost Specification":
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION("Inventoriable Costs"),0,true,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Direct Cost (LCY)"),1,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Revaluation (LCY)"),1,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Rounding (LCY)"),1,false,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Indirect Cost (LCY)"),1,false,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Variance (LCY)"),1,false,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Inventoriable Costs, Total"),0,true,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION("COGS (LCY)"),0,true,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Inventory (LCY)"),0,true,TheDimCodeBuf);
            end;
        end
    END;

    LOCAL PROCEDURE CopyAddChargesToBuf@3(VAR TheItemCharge@1000 : Record "Item Charge";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheItemCharge."No.";
        Name := COPYSTR(
            STRSUBSTNO('%1 %2',TheItemCharge."No.",TheItemCharge.Description),1,50);
      end;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@4(VAR TheLocation@1000 : Record Location;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheLocation.Code;
        Name := TheLocation.Name;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record Date;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        Name := ThePeriod."Period Name";
      end;
    END;

    LOCAL PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      end;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record Date;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
    BEGIN
      if DateFilter <> '' then begin
        Calendar.SETFILTER("Period Start",DateFilter);
        if not PeriodFormMgt.FindDate('+',Calendar,PeriodType) then
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      end;

      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);

      with ItemBuffer do
        if AmountType = AmountType::"Net Change" then begin
          SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
          if GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") then
            SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
        end else
          SETRANGE("Date Filter",0D,Calendar."Period End");

      InternalDateFilter := ItemBuffer.GETFILTER("Date Filter");
    END;

    LOCAL PROCEDURE GetDimSelection@13(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      Location@1001 : Record Location;
      DimSelection@1002 : Page "Dimension Selection";
    BEGIN
      DimSelection.InsertDimSelBuf(false,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Text002,Text002);

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);

      exit(OldDimSelCode);
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      Location@1000 : Record Location;
    BEGIN
      if (UPPERCASE(ColumnDimCode) <> UPPERCASE(Location.TABLECAPTION)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text002)) and
         (ColumnDimCode <> '')
      then begin
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      end;

      with ItemBuffer do begin
        "Column Option" := DimCodeToOption(ColumnDimCode);
        InternalDateFilter := GETFILTER("Date Filter");
        if ("Line Option" <> "Line Option"::Period)
           and ("Column Option" <> "Column Option"::Period)
        then begin
          DateFilter := InternalDateFilter;
          if STRPOS(DateFilter,'&') > 1 then
            DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
        end else
          PeriodInitialized := false;
      end;
    END;

    [External]
    PROCEDURE SetItem@11(VAR NewItem@1000 : Record Item);
    BEGIN
      Item.GET(NewItem."No.");
      Item.COPYFILTERS(NewItem);
    END;

    LOCAL PROCEDURE ItemBufferLineOptionOnAfterVal@19059500();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    VAR
      MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      Item."No." := ItemFilter;
      Item.Description := '';

      if STRLEN(ItemFilter) <= 30 then
        if Item.GET(ItemFilter) then
          ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
      ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      // IF ColumnDimOption = ColumnDimOption::Period THEN
      if ItemBuffer."Column Option" = ItemBuffer."Column Option"::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    BEGIN
    END.
  }
}

