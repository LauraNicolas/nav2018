OBJECT Codeunit 2100 O365 Sales Statistics
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OutsideFYErr@1000 : TextConst 'ENU=The date is outside of the current accounting period.';

    [External]
    PROCEDURE GenerateMonthlyOverview@2(VAR TempNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer");
    VAR
      O365SalesCue@1006 : Record "O365 Sales Cue";
      GLSetup@1004 : Record "General Ledger Setup";
      AccountingPeriod@1005 : Record "Accounting Period";
      Month@1001 : Integer;
      TotalMonthsInCurrentFY@1003 : Integer;
    BEGIN
      GLSetup.GET;
      GetCurrentAccountingPeriod(AccountingPeriod);

      TotalMonthsInCurrentFY := GetNumberOfElapsedMonthsInFYByDate(WORKDATE,AccountingPeriod);

      for Month := 1 to TotalMonthsInCurrentFY do begin
        // Get transactions for the month
        O365SalesCue.SETFILTER("CM Date Filter",'%1..%2',
          CALCDATE(STRSUBSTNO('<%1M>',Month - 1),AccountingPeriod."Starting Date"),
          CALCDATE(STRSUBSTNO('<%1M-1D>',Month),AccountingPeriod."Starting Date"));
        O365SalesCue.CALCFIELDS("Invoiced CM");

        // Insert aggregate data
        TempNameValueBuffer.INIT;
        TempNameValueBuffer.ID := Month;
        TempNameValueBuffer.Name := FORMAT(CALCDATE(STRSUBSTNO('<%1M>',Month - 1),AccountingPeriod."Starting Date"),0,'<Month Text>');
        TempNameValueBuffer.Value := GLSetup.GetCurrencySymbol + ' ' + FORMAT(O365SalesCue."Invoiced CM");
        TempNameValueBuffer.INSERT;
      end;
    END;

    [External]
    PROCEDURE GenerateWeeklyOverview@3(VAR TempNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer";Month@1005 : Integer);
    VAR
      O365SalesCue@1004 : Record "O365 Sales Cue";
      GLSetup@1003 : Record "General Ledger Setup";
      AccountingPeriod@1007 : Record "Accounting Period";
      EndDate@1002 : Date;
      CurrentMonth@1001 : Integer;
      CurrentWeek@1006 : Integer;
      MonthOfStartingFY@1008 : Integer;
    BEGIN
      GLSetup.GET;
      GetCurrentAccountingPeriod(AccountingPeriod);
      CurrentWeek := 0;

      EVALUATE(MonthOfStartingFY,FORMAT(AccountingPeriod."Starting Date",0,'<Month>'));
      Month := GetNumberOfElapsedMonthsInFY(Month,AccountingPeriod) - 2;

      repeat
        // Ensure the end date is still within the current month
        EndDate := CALCDATE(STRSUBSTNO('<%1M+%2W>',Month,CurrentWeek + 1),CALCDATE('<CM>',AccountingPeriod."Starting Date"));
        if EndDate > CALCDATE(STRSUBSTNO('<%1M>',Month + 1),CALCDATE('<CM>',AccountingPeriod."Starting Date")) then
          EndDate := CALCDATE(STRSUBSTNO('<%1M>',Month + 1),CALCDATE('<CM>',AccountingPeriod."Starting Date"));

        O365SalesCue.SETFILTER("CM Date Filter",'%1..%2',
          CALCDATE(STRSUBSTNO('<%1M+%2W+1D>',Month,CurrentWeek),CALCDATE('<CM>',AccountingPeriod."Starting Date")),
          EndDate);
        O365SalesCue.CALCFIELDS("Invoiced CM");

        TempNameValueBuffer.INIT;
        TempNameValueBuffer.ID := CurrentWeek;
        TempNameValueBuffer.Name :=
          FORMAT(CALCDATE(STRSUBSTNO('<%1M+%2W+1D>',Month,CurrentWeek),CALCDATE('<CM>',AccountingPeriod."Starting Date")));
        TempNameValueBuffer.Value := GLSetup.GetCurrencySymbol + ' ' + FORMAT(O365SalesCue."Invoiced CM");
        TempNameValueBuffer.INSERT;

        // Ensure next week is still the same month
        CurrentWeek += 1;
        EVALUATE(
          CurrentMonth,
          FORMAT(CALCDATE(STRSUBSTNO('<%1M+%2W+1D>',Month,CurrentWeek),CALCDATE('<CM>',AccountingPeriod."Starting Date")),0,'<Month>'));
        CurrentMonth -= MonthOfStartingFY;
      until CurrentMonth <> Month + 1;
    END;

    [Internal]
    PROCEDURE GenerateChart@1(Chart@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartAddIn";VAR TempNameValueBuffer@1001 : TEMPORARY Record "Name/Value Buffer";XCaption@1002 : Text;YCaption@1006 : Text);
    VAR
      TempBusinessChartBuffer@1000 : TEMPORARY Record "Business Chart Buffer";
      GLSetup@1007 : Record "General Ledger Setup";
      Amount@1005 : Decimal;
      I@1004 : Integer;
    BEGIN
      GLSetup.GET;

      TempBusinessChartBuffer.Initialize;
      TempBusinessChartBuffer.SetXAxis(XCaption,TempBusinessChartBuffer."Data Type"::String);
      TempBusinessChartBuffer.AddMeasure(
        YCaption,1,TempBusinessChartBuffer."Data Type"::Decimal,TempBusinessChartBuffer."Chart Type"::Column);

      TempNameValueBuffer.FINDSET;
      for I := 0 to TempNameValueBuffer.COUNT - 1 do begin
        TempBusinessChartBuffer.AddColumn(TempNameValueBuffer.Name);
        EVALUATE(Amount,COPYSTR(TempNameValueBuffer.Value,STRLEN(GLSetup.GetCurrencySymbol) + 1));
        TempBusinessChartBuffer.SetValueByIndex(0,I,Amount);
        TempNameValueBuffer.NEXT;
      end;

      TempBusinessChartBuffer.Update(Chart);
    END;

    [External]
    PROCEDURE GenerateMonthlyCustomers@4(Month@1000 : Integer;VAR ResultingCustomer@1001 : Record Customer) : Boolean;
    VAR
      CustLedgerEntry@1002 : Record "Cust. Ledger Entry";
      AccountingPeriod@1004 : Record "Accounting Period";
    BEGIN
      GetCurrentAccountingPeriod(AccountingPeriod);

      Month := GetNumberOfElapsedMonthsInFY(Month,AccountingPeriod) - 1;

      CustLedgerEntry.SETRANGE("Posting Date",
        CALCDATE(STRSUBSTNO('<%1M+1D>',Month - 1),CALCDATE('<CM>',AccountingPeriod."Starting Date")),
        CALCDATE(STRSUBSTNO('<%1M>',Month),CALCDATE('<CM>',AccountingPeriod."Starting Date")));

      if CustLedgerEntry.ISEMPTY then
        exit(false);

      exit(GetCustomersFromCustLedgerEntries(CustLedgerEntry,ResultingCustomer));
    END;

    [External]
    PROCEDURE GetCurrentAccountingPeriod@5(VAR AccountingPeriod@1000 : Record "Accounting Period");
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETFILTER("Starting Date",'..%1',WORKDATE);

      if not AccountingPeriod.FINDLAST then begin
        AccountingPeriod.SETRANGE("New Fiscal Year");
        if AccountingPeriod.FINDFIRST then;
      end;
    END;

    LOCAL PROCEDURE GetNumberOfElapsedMonthsInFYByDate@6(Date@1000 : Date;AccountingPeriod@1004 : Record "Accounting Period") : Integer;
    VAR
      Month@1001 : Integer;
    BEGIN
      if AccountingPeriod."Starting Date" = 0D then
        ERROR(OutsideFYErr);

      if (Date >= CALCDATE('<1Y>',AccountingPeriod."Starting Date")) or
         (Date < AccountingPeriod."Starting Date")
      then
        ERROR(OutsideFYErr);

      EVALUATE(Month,FORMAT(Date,0,'<Month>'));
      exit(GetNumberOfElapsedMonthsInFY(Month,AccountingPeriod));
    END;

    LOCAL PROCEDURE GetNumberOfElapsedMonthsInFY@27(Month@1000 : Integer;AccountingPeriod@1004 : Record "Accounting Period") : Integer;
    VAR
      MonthOfStartingFY@1002 : Integer;
      Result@1001 : Integer;
    BEGIN
      Result := Month;
      EVALUATE(MonthOfStartingFY,FORMAT(AccountingPeriod."Starting Date",0,'<Month>'));

      // Ensure that the month is after the starting month of the FY
      if Result < MonthOfStartingFY then
        Result += 12;

      // Find the difference
      Result -= MonthOfStartingFY - 1;

      exit(Result);
    END;

    [External]
    PROCEDURE GetCustomersFromCustLedgerEntries@7(VAR CustLedgerEntry@1000 : Record "Cust. Ledger Entry";VAR ResultingCustomer@1001 : Record Customer) : Boolean;
    BEGIN
      if not CustLedgerEntry.FINDSET then
        exit(false);

      repeat
        if ResultingCustomer.GET(CustLedgerEntry."Customer No.") then
          ResultingCustomer.MARK(true);
      until CustLedgerEntry.NEXT = 0;

      exit(ResultingCustomer.MARKEDONLY(true));
    END;

    [External]
    PROCEDURE GetRelativeMonthToFY@8() : Integer;
    VAR
      AccountingPeriod@1000 : Record "Accounting Period";
    BEGIN
      GetCurrentAccountingPeriod(AccountingPeriod);
      exit(GetNumberOfElapsedMonthsInFYByDate(WORKDATE,AccountingPeriod));
    END;

    BEGIN
    END.
  }
}

