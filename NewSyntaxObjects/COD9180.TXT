OBJECT Codeunit 9180 Generic Chart Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1018 : TextConst 'ENU=You must select the %1.';
      Text002@1000 : TextConst 'ENU=(No filters selected)';
      Text003@1001 : TextConst 'ENU=You cannot select more than %1 measures when using the Customize Chart option.';
      Text004@1002 : TextConst 'ENU=You cannot select Count for this chart because the source query does not support this aggregation method.';
      Text005@1003 : TextConst 'ENU=The aggregation type %1 can only be selected for columns of type Decimal.';
      DescriptionTok@1004 : TextConst '@@@=DESCR.;ENU=DESCR.';
      XAxisTitleTok@1005 : TextConst '@@@=X-AXIS;ENU=X-TITLE';
      YAxisTitleTok@1006 : TextConst '@@@=Y-AXIS;ENU=Y-TITLE';
      ZAxisTitleTok@1015 : TextConst '@@@=Y-AXIS;ENU=Z-TITLE';
      XAxisCaptionTok@1014 : TextConst '@@@=X-AXIS;ENU=X-CAPTION';
      ZAxisCaptionTok@1013 : TextConst '@@@=Y-AXIS;ENU=Z-CAPTION';
      RequiredTok@1007 : TextConst '@@@=REQUIRED;ENU=REQUIRED';
      Optional1Tok@1008 : TextConst '@@@=OPTIONAL1;ENU=OPTIONAL1';
      Optional2Tok@1009 : TextConst '@@@=OPTIONAL2;ENU=OPTIONAL2';
      Optional3Tok@1010 : TextConst '@@@=OPTIONAL3;ENU=OPTIONAL3';
      Optional4Tok@1011 : TextConst '@@@=OPTIONAL4;ENU=OPTIONAL4';
      Optional5Tok@1012 : TextConst '@@@=OPTIONAL5;ENU=OPTIONAL5';
      AggregationTxt@1016 : TextConst 'ENU=None,Count,Sum,Min,Max,Avg';

    [Internal]
    PROCEDURE RetrieveXML@2(VAR Chart@1003 : Record Chart;VAR TempGenericChartSetup@1007 : TEMPORARY Record "Generic Chart Setup";VAR TempGenericChartYAxis@1008 : TEMPORARY Record "Generic Chart Y-Axis";VAR TempGenericChartCaptionsBuf@1004 : TEMPORARY Record "Generic Chart Captions Buffer";VAR TempGenericChartMemoBuf@1001 : TEMPORARY Record "Generic Chart Memo Buffer";VAR TempGenericChartFilter@1009 : TEMPORARY Record "Generic Chart Filter");
    VAR
      chartBuilder@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
      i@1006 : Integer;
      FilterText@1002 : Text[250];
      CaptionCode@1005 : Code[10];
    BEGIN
      TempGenericChartSetup.DELETEALL;
      CLEAR(TempGenericChartSetup);
      TempGenericChartCaptionsBuf.DELETEALL;
      CLEAR(TempGenericChartCaptionsBuf);
      TempGenericChartMemoBuf.DELETEALL;
      CLEAR(TempGenericChartMemoBuf);
      if not GetChartBuilder(Chart,chartBuilder) then
        exit;

      with TempGenericChartSetup do begin
        if chartBuilder.TableId > 0 then begin
          "Source Type" := "Source Type"::Table;
          "Source ID" := chartBuilder.TableId;
          "Object Name" := chartBuilder.TableName;
        end else begin
          "Source Type" := "Source Type"::Query;
          "Source ID" := chartBuilder.QueryId;
          "Object Name" := chartBuilder.QueryName;
        end;
        GetSourceIDName("Source Type","Source ID","Object Name");
      end;

      BuildMemoBuf(TempGenericChartMemoBuf,DescriptionCode,chartBuilder.GetMultilanguageDescription);

      // Filters:
      CLEAR(FilterText);
      BuildTempGenericChartFilter(TempGenericChartSetup,TempGenericChartFilter,chartBuilder,FilterText);
      TempGenericChartSetup."Filter Text" := FilterText;
      FinalizeFilterText(TempGenericChartSetup."Filter Text");

      // X, Y and Z axes:
      with TempGenericChartSetup do begin
        "X-Axis Field ID" := chartBuilder.XDimensionId;      // Number of field
        "X-Axis Field Name" := chartBuilder.XDimensionName;  // Name of field
        GetFieldColumnNoName("Source Type","Source ID","X-Axis Field ID","X-Axis Field Name",false);
        "X-Axis Show Title" := chartBuilder.ShowXDimensionTitle;
        BuildCaptionBuf(TempGenericChartCaptionsBuf,XAxisTitleCode,chartBuilder.GetXDimensionMultilanguageTitle);
        BuildCaptionBuf(TempGenericChartCaptionsBuf,XAxisCaptionCode,chartBuilder.GetXDimensionMultilanguageCaption);
        "Y-Axis Show Title" := chartBuilder.ShowYAxisTitle;
        BuildCaptionBuf(TempGenericChartCaptionsBuf,YAxisTitleCode,chartBuilder.GetYAxisMultilanguageTitle);

        if chartBuilder.HasZDimension then begin
          "Z-Axis Field ID" := chartBuilder.ZDimensionId;
          "Z-Axis Field Name" := chartBuilder.ZDimensionName;
          GetFieldColumnNoName("Source Type","Source ID","Z-Axis Field ID","Z-Axis Field Name",false);
          "Z-Axis Show Title" := chartBuilder.ShowZDimensionTitle;
          BuildCaptionBuf(TempGenericChartCaptionsBuf,ZAxisTitleCode,chartBuilder.GetZDimensionMultilanguageTitle);
          BuildCaptionBuf(TempGenericChartCaptionsBuf,ZAxisCaptionCode,chartBuilder.GetZDimensionMultilanguageCaption);
        end;
      end;

      // Measures:
      with TempGenericChartYAxis do begin
        DELETEALL;
        CaptionCode := RequiredMeasureCode;
        for i := 0 to chartBuilder.MeasureCount - 1 do begin
          INIT;
          ID := Chart.ID;
          "Line No." := 10000 * (i + 1);
          if chartBuilder.HasMeasureField(i) then begin
            "Y-Axis Measure Field ID" := chartBuilder.GetMeasureId(i);
            "Y-Axis Measure Field Name" := chartBuilder.GetMeasureName(i);
            BuildCaptionBuf(TempGenericChartCaptionsBuf,CaptionCode,chartBuilder.GetMultilanguageMeasureCaption(i));
            GetFieldColumnNoName(
              TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID","Y-Axis Measure Field ID",
              "Y-Axis Measure Field Name",false);

            if CaptionCode = RequiredMeasureCode then
              CaptionCode := OptionalMeasure1Code
            else
              CaptionCode := INCSTR(CaptionCode)
          end;
          "Chart Type" := ChartType2GraphType(chartBuilder.GetMeasureChartType(i));
          Aggregation := Operator2Aggregation(chartBuilder.GetMeasureOperator(i));
          INSERT;
        end;
      end;
    END;

    [Internal]
    PROCEDURE FillChartHelper@6(VAR chartBuilder@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";TempGenericChartSetup@1002 : TEMPORARY Record "Generic Chart Setup";VAR TempGenericChartYAxis@1012 : TEMPORARY Record "Generic Chart Y-Axis";VAR TempGenericChartFilter@1000 : TEMPORARY Record "Generic Chart Filter";VAR TempGenericChartCaptionsBuf@1001 : TEMPORARY Record "Generic Chart Captions Buffer";VAR TempGenericChartMemoBuf@1005 : TEMPORARY Record "Generic Chart Memo Buffer");
    VAR
      DataMeasureType@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.DataMeasureType";
      DataAggregationType@1006 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.DataAggregationType";
      MultilanguageText@1011 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartMultiLanguageText";
      CaptionCode@1007 : Code[10];
    BEGIN
      ValidateChart(TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter);
      case TempGenericChartSetup."Source Type" of
        TempGenericChartSetup."Source Type"::Table:
          begin
            chartBuilder.TableId(TempGenericChartSetup."Source ID");
            chartBuilder.TableName(TempGenericChartSetup."Object Name");
          end;
        TempGenericChartSetup."Source Type"::Query:
          begin
            chartBuilder.QueryId(TempGenericChartSetup."Source ID");
            chartBuilder.QueryName(TempGenericChartSetup."Object Name");
          end;
      end;
      BuildMemoMultilanguageText(TempGenericChartMemoBuf,DescriptionCode,MultilanguageText);
      chartBuilder.SetMultilanguageDescription(MultilanguageText);
      chartBuilder.XDimensionId := TempGenericChartSetup."X-Axis Field ID";
      chartBuilder.XDimensionName := TempGenericChartSetup."X-Axis Field Name";
      chartBuilder.ShowXDimensionTitle := TempGenericChartSetup."X-Axis Show Title";
      BuildMultilanguageText(TempGenericChartCaptionsBuf,XAxisTitleCode,MultilanguageText);
      chartBuilder.SetXDimensionMultilanguageTitle(MultilanguageText);
      BuildMultilanguageText(TempGenericChartCaptionsBuf,XAxisCaptionCode,MultilanguageText);
      chartBuilder.SetXDimensionMultilanguageCaption(MultilanguageText);
      chartBuilder.ZDimensionId := TempGenericChartSetup."Z-Axis Field ID";
      chartBuilder.ZDimensionName := TempGenericChartSetup."Z-Axis Field Name";
      chartBuilder.ShowZDimensionTitle := TempGenericChartSetup."Z-Axis Show Title";
      BuildMultilanguageText(TempGenericChartCaptionsBuf,ZAxisTitleCode,MultilanguageText);
      chartBuilder.SetZDimensionMultilanguageTitle(MultilanguageText);
      BuildMultilanguageText(TempGenericChartCaptionsBuf,ZAxisCaptionCode,MultilanguageText);
      chartBuilder.SetZDimensionMultilanguageCaption(MultilanguageText);

      // Y-Axis
      chartBuilder.ShowYAxisTitle := TempGenericChartSetup."Y-Axis Show Title";
      BuildMultilanguageText(TempGenericChartCaptionsBuf,YAxisTitleCode,MultilanguageText);
      chartBuilder.SetYAxisMultilanguageTitle(MultilanguageText);

      with TempGenericChartYAxis do
        if FIND('-') then begin
          CaptionCode := RequiredMeasureCode;
          repeat
            BuildMultilanguageText(TempGenericChartCaptionsBuf,CaptionCode,MultilanguageText);
            DataMeasureType := GraphType2ChartType("Chart Type");
            DataAggregationType := Aggregation2Operator(Aggregation);
            chartBuilder.AddMeasure(
              "Y-Axis Measure Field ID","Y-Axis Measure Field Name",MultilanguageText,DataMeasureType,DataAggregationType);
            if CaptionCode = RequiredMeasureCode then
              CaptionCode := OptionalMeasure1Code
            else
              CaptionCode := INCSTR(CaptionCode)
          until NEXT = 0
        end;

      // Filters:
      with TempGenericChartFilter do
        if FIND('-') then
          repeat
            GetFieldColumnNoName(
              TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID","Filter Field ID","Filter Field Name",true);
            if "Filter Field ID" > 0 then
              case TempGenericChartSetup."Source Type" of
                TempGenericChartSetup."Source Type"::Table:
                  chartBuilder.AddTableFilter("Filter Field ID","Filter Field Name","Filter Value");
                TempGenericChartSetup."Source Type"::Query:
                  chartBuilder.AddQueryFilter("Filter Field ID","Filter Field Name","Filter Value");
              end;
          until NEXT = 0;
    END;

    [Internal]
    PROCEDURE SaveChanges@8(VAR Chart@1001 : Record Chart;TempGenericChartSetup@1004 : TEMPORARY Record "Generic Chart Setup";VAR TempGenericChartYAxis@1003 : TEMPORARY Record "Generic Chart Y-Axis";VAR TempGenericChartFilter@1013 : TEMPORARY Record "Generic Chart Filter";VAR TempGenericChartCaptionsBuf@1002 : TEMPORARY Record "Generic Chart Captions Buffer";VAR TempGenericChartMemoBuf@1000 : TEMPORARY Record "Generic Chart Memo Buffer");
    VAR
      chartBuilder@1008 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
      OutStream@1006 : OutStream;
    BEGIN
      chartBuilder := chartBuilder.Empty;
      FillChartHelper(chartBuilder,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
        TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      CLEAR(Chart.BLOB);
      Chart.BLOB.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,chartBuilder.GetAsStream);
      CLEAR(chartBuilder);
    END;

    [Internal]
    PROCEDURE LookUpObjectId@11(ObjType@1001 : '" ",Table,Query';VAR ObjID@1000 : Integer;VAR ObjName@1003 : Text[50]);
    VAR
      AllObjWithCaption@1002 : Record AllObjWithCaption;
    BEGIN
      SetObjTypeRange(ObjType,AllObjWithCaption);
      if PAGE.RUNMODAL(PAGE::Objects,AllObjWithCaption) = ACTION::LookupOK then begin
        ObjID := AllObjWithCaption."Object ID";
        ValidateObjectID(ObjType,ObjID,ObjName);
      end;
    END;

    [Internal]
    PROCEDURE ValidateObjectID@12(ObjType@1001 : '" ",Table,Query';VAR ObjID@1000 : Integer;VAR ObjName@1002 : Text[50]);
    VAR
      AllObjWithCaption@1003 : Record AllObjWithCaption;
    BEGIN
      ObjName := '';
      if ObjType = ObjType::" " then begin
        ObjID := 0;
        exit;
      end;
      SetObjTypeRange(ObjType,AllObjWithCaption);
      AllObjWithCaption.SETRANGE("Object ID",ObjID);
      if AllObjWithCaption.FINDFIRST then
        ObjName := AllObjWithCaption."Object Name";
    END;

    [Internal]
    PROCEDURE ValidateFieldColumn@1(TempGenericChartSetup@1008 : TEMPORARY Record "Generic Chart Setup";VAR FieldColumnNo@1005 : Integer;FieldColumnName@1000 : Text[80];VAR FieldCaption@1007 : Text[250];Category@1006 : Integer;FilteringLookup@1009 : Boolean;VAR Aggregation@1002 : 'None,Count,Sum,Min,Max,Avg');
    VAR
      Field@1004 : Record Field;
      TempGenericChartQueryColumn@1001 : TEMPORARY Record "Generic Chart Query Column";
    BEGIN
      // Category: 0: All, 1: Not integer and decimal, 2: Only integer and decimal
      CheckSourceTypeID(TempGenericChartSetup,true);
      FieldColumnNo := 0;
      FieldCaption := '';
      if FieldColumnName = '' then begin
        Aggregation := Aggregation::None;
        exit;
      end;

      case TempGenericChartSetup."Source Type" of
        TempGenericChartSetup."Source Type"::Table:
          begin
            Field.SETRANGE(TableNo,TempGenericChartSetup."Source ID");
            Field.SETRANGE(FieldName,FieldColumnName);
            FilterFieldCategory(Field,Category,FilteringLookup);
            Field.FINDFIRST;
            FieldColumnNo := Field."No.";
          end;
        TempGenericChartSetup."Source Type"::Query:
          begin
            GetQueryColumnList(TempGenericChartQueryColumn,TempGenericChartSetup."Source ID",Category,FilteringLookup);
            TempGenericChartQueryColumn.SETRANGE("Query No.",TempGenericChartSetup."Source ID");
            TempGenericChartQueryColumn.SETRANGE("Column Name",FieldColumnName);
            TempGenericChartQueryColumn.FINDFIRST;
            FieldColumnNo := TempGenericChartQueryColumn."Query Column No.";
            FieldColumnName := TempGenericChartQueryColumn."Column Name";
            Aggregation := TempGenericChartQueryColumn."Aggregation Type";
          end;
      end;
      FieldCaption := FieldColumnName;
    END;

    [Internal]
    PROCEDURE RetrieveFieldColumn@15(TempGenericChartSetup@1003 : TEMPORARY Record "Generic Chart Setup";VAR No@1005 : Integer;VAR Name@1006 : Text[80];VAR Capt@1008 : Text[250];Category@1007 : Integer;FilteringLookup@1009 : Boolean);
    VAR
      Field@1002 : Record Field;
      TempGenericChartQueryColumn@1001 : TEMPORARY Record "Generic Chart Query Column";
    BEGIN
      // Category: 0: All, 1: Not integer and decimal, 2: Only integer and decimal
      CheckSourceTypeID(TempGenericChartSetup,true);
      case TempGenericChartSetup."Source Type" of
        TempGenericChartSetup."Source Type"::Table:
          begin
            Field.SETRANGE(TableNo,TempGenericChartSetup."Source ID");
            FilterFieldCategory(Field,Category,FilteringLookup);
            if PAGE.RUNMODAL(PAGE::"Field List",Field) = ACTION::LookupOK then begin
              No := Field."No.";
              Name := Field.FieldName;
              Capt := Name;
            end;
          end;
        TempGenericChartSetup."Source Type"::Query:
          begin
            GetQueryColumnList(TempGenericChartQueryColumn,TempGenericChartSetup."Source ID",Category,FilteringLookup);
            TempGenericChartQueryColumn.SETRANGE("Query No.",TempGenericChartSetup."Source ID");
            if PAGE.RUNMODAL(PAGE::"Generic Chart Query Columns",TempGenericChartQueryColumn) = ACTION::LookupOK then begin
              No := TempGenericChartQueryColumn."Query Column No.";
              Name := TempGenericChartQueryColumn."Column Name";
              Capt := Name;
            end;
          end;
      end;
    END;

    [Internal]
    PROCEDURE RetrieveFieldColumnIDFromName@19(ObjType@1003 : '" ",Table,Query';ObjID@1002 : Integer;VAR No@1001 : Integer;Name@1000 : Text[50]);
    VAR
      Field@1004 : Record Field;
      TempGenericChartQueryColumn@1005 : TEMPORARY Record "Generic Chart Query Column";
    BEGIN
      No := 0;
      case ObjType of
        ObjType::Table:
          begin
            Field.SETRANGE(TableNo,ObjID);
            Field.SETRANGE(FieldName,Name);
            if Field.FINDFIRST then
              No := Field."No.";
          end;
        ObjType::Query:
          begin
            GetQueryColumnList(TempGenericChartQueryColumn,ObjID,0,true);
            TempGenericChartQueryColumn.SETRANGE("Query No.",ObjID);
            TempGenericChartQueryColumn.SETRANGE("Column Name",Name);
            if TempGenericChartQueryColumn.FINDFIRST then
              No := TempGenericChartQueryColumn."Query Column No.";
          end;
      end;
    END;

    [Internal]
    PROCEDURE SetObjTypeRange@13(ObjType@1000 : '" ",Table,Query';VAR AllObjWithCaption@1001 : Record AllObjWithCaption);
    BEGIN
      CLEAR(AllObjWithCaption);
      case ObjType of
        ObjType::Table:
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
        ObjType::Query:
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Query);
      end;
    END;

    LOCAL PROCEDURE ChartType2GraphType@3(DataMeasureType@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.DataMeasureType") : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      i := DataMeasureType;
      case i of
        10: // Column
          exit(0);
        0:
          exit(1);
        3:
          exit(2);
        11:
          exit(3);
        12:
          exit(4);
        13:
          exit(5);
        15:
          exit(6);
        16:
          exit(7);
        5:
          exit(8);
        17:
          exit(9);
        18:
          exit(10);
        21:
          exit(11);
        25:
          exit(12);
        33:
          exit(13);
      end;
    END;

    LOCAL PROCEDURE GraphType2ChartType@21(GraphType@1000 : Integer) : Integer;
    BEGIN
      // Save function:
      // Aggregation var on page 9183:
      // Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel
      // option in TAB485:
      // Point,1,Bubble,Line,4,StepLine,6,7,8,9,Column,StackedColumn,StackedColumn100,Area,14,StackedArea,StackedArea100,Pie,Doughnut,19,20,Range,22,23,24,Radar,26,27,28,29,30,31,32,Funnel}

      case GraphType of
        0:
          exit(10); // Column
        1:
          exit(0);  // Point
        2:
          exit(3);  // Line
        3:
          exit(11); // ColumnStacked
        4:
          exit(12); // ColumnStacked100
        5:
          exit(13); // Area
        6:
          exit(15); // AreaStacked
        7:
          exit(16); // AreaStacked100
        8:
          exit(5);  // StepLine
        9:
          exit(17); // Pie
        10:
          exit(18); // Doughnut
        11:
          exit(21); // Range
        12:
          exit(25); // Radar
        13:
          exit(33); // Funnel
        else
          exit(GraphType);
      end;
    END;

    LOCAL PROCEDURE Aggregation2Operator@23(Aggregation@1000 : Integer) : Integer;
    BEGIN
      // From Rec (BLOB) to XML File - i.e. when saving
      // Aggregation:
      exit(Aggregation);
    END;

    LOCAL PROCEDURE Operator2Aggregation@24(Operator@1000 : Integer) : Integer;
    BEGIN
      // Retrieve from XML (BLOB) to rec
      exit(Operator);
    END;

    [Internal]
    PROCEDURE GetQueryColumnList@37(VAR TempGenericChartQueryColumn@1000 : TEMPORARY Record "Generic Chart Query Column";ObjID@1017 : Integer;ColFilter@1020 : Integer;FilteringLookup@1001 : Boolean);
    VAR
      ObjectMetadata@1013 : Record "Object Metadata";
      metaData@1016 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
      inStream@1014 : InStream;
    BEGIN
      // Colfilter: = 0: All, 1: Only text etc (X- and Z-Axis), 2: Only decimal and integer (Y-axis)
      CLEAR(TempGenericChartQueryColumn);
      TempGenericChartQueryColumn.DELETEALL;
      if not ObjectMetadata.GET(ObjectMetadata."Object Type"::Query,ObjID) then
        exit;
      if not ObjectMetadata.Metadata.HASVALUE then
        exit;
      ObjectMetadata.CALCFIELDS(Metadata);
      ObjectMetadata.Metadata.CREATEINSTREAM(inStream);
      // Load into Query Metadata Reader and retrieve values
      metaData := metaData.FromStream(inStream);
      LoadQueryColumns(metaData,TempGenericChartQueryColumn,ObjID,ColFilter,FilteringLookup);
    END;

    LOCAL PROCEDURE FilterFieldCategory@4(VAR Field@1000 : Record Field;Category@1001 : Integer;FilteringLookup@1002 : Boolean);
    BEGIN
      with Field do begin
        case Category of
          0:
            SETRANGE(Type);
          1,2:
            SETFILTER(Type,TypeFilterText(Category));
        end;
        SETRANGE(Class);
        if not FilteringLookup then
          SETFILTER(Class,'<>%1',Class::FlowFilter);
      end;
    END;

    LOCAL PROCEDURE ValidateChart@14(TempGenericChartSetup@1002 : TEMPORARY Record "Generic Chart Setup";VAR TempGenericChartYAxis@1001 : TEMPORARY Record "Generic Chart Y-Axis";VAR TempGenericChartFilter@1000 : TEMPORARY Record "Generic Chart Filter");
    VAR
      Object@1004 : Record Object;
      DummyAggregation@1003 : 'None,Count,Sum,Min,Max,Avg';
      DummyCaption@1005 : Text[250];
      DummyInt@1006 : Integer;
    BEGIN
      with TempGenericChartSetup do begin
        case "Source Type" of
          "Source Type"::Table:
            Object.SETRANGE(Type,Object.Type::Table);
          "Source Type"::Query:
            Object.SETRANGE(Type,Object.Type::Query);
        end;
        Object.SETRANGE(ID,"Source ID");
        Object.FINDFIRST;
        if TempGenericChartYAxis.FINDSET then
          repeat
            ValidateFieldColumn(
              TempGenericChartSetup,DummyInt,TempGenericChartYAxis."Y-Axis Measure Field Name",DummyCaption,2,false,DummyAggregation);
          until TempGenericChartYAxis.NEXT = 0;
        if TempGenericChartFilter.FINDSET then
          repeat
            ValidateFieldColumn(
              TempGenericChartSetup,DummyInt,TempGenericChartFilter."Filter Field Name",DummyCaption,0,true,DummyAggregation);
          until TempGenericChartFilter.NEXT = 0;
        ValidateFieldColumn(TempGenericChartSetup,DummyInt,"X-Axis Field Name","X-Axis Title",0,false,DummyAggregation);
        ValidateFieldColumn(TempGenericChartSetup,DummyInt,"Z-Axis Field Name","Z-Axis Title",0,false,DummyAggregation);
      end;
    END;

    LOCAL PROCEDURE LoadQueryColumns@16(VAR MetaData@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";VAR TempGenericChartQueryColumn@1001 : TEMPORARY Record "Generic Chart Query Column";ObjID@1004 : Integer;FieldTypeFilter@1008 : Integer;FilteringLookup@1006 : Boolean);
    VAR
      FieldParam@1009 : Record Field;
      queryField@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryFields";
      i@1003 : Integer;
      j@1005 : Integer;
      InclInColumns@1007 : Boolean;
    BEGIN
      // Field Type:
      // Category:  0: All, 1: Not integer and decimal, 2: Only integer and decimal
      // String,Integer,Decimal,DateTime
      if MetaData.Fields.Count = 0 then
        exit;
      for i := 0 to MetaData.Fields.Count - 1 do begin
        j := 0;
        queryField := MetaData.Fields.Item(i);
        InclInColumns := false;
        if FilteringLookup or not queryField.IsFilterOnly then
          InclInColumns := SetInclInColumns(FieldTypeFilter,queryField.TableNo,queryField.FieldNo,FieldParam);
        if InclInColumns then begin
          CLEAR(TempGenericChartQueryColumn);
          TempGenericChartQueryColumn."Query No." := ObjID;
          TempGenericChartQueryColumn."Query Column No." := queryField.ColumnId;
          TempGenericChartQueryColumn."Column Name" := queryField.FieldName;
          TempGenericChartQueryColumn.SetAggregationType(queryField.AggregationType);
          TempGenericChartQueryColumn.SetColumnDataType(FieldParam.Type);
          repeat
            j += 1;
            TempGenericChartQueryColumn."Entry No." := j;
          until TempGenericChartQueryColumn.INSERT;
        end;
      end;
    END;

    [Internal]
    PROCEDURE CopyChart@5(VAR SourceChart@1000 : Record Chart;TargetChartID@1001 : Code[20];TargetChartTitle@1002 : Text[50]);
    VAR
      TargetChart@1003 : Record Chart;
    BEGIN
      CLEAR(TargetChart);
      TargetChart := SourceChart;
      TargetChart.VALIDATE(ID,TargetChartID);
      if TargetChartTitle <> '' then
        TargetChart.VALIDATE(Name,TargetChartTitle)
      else
        TargetChart.VALIDATE(Name,SourceChart.Name);
      TargetChart.INSERT(true);
    END;

    LOCAL PROCEDURE GetChartBuilder@10(VAR Chart@1000 : Record Chart;VAR chartBuilder@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder") : Boolean;
    VAR
      InStream@1002 : InStream;
    BEGIN
      if not Chart.BLOB.HASVALUE then
        exit(false);
      Chart.CALCFIELDS(BLOB);
      Chart.BLOB.CREATEINSTREAM(InStream);
      chartBuilder := chartBuilder.FromStream(InStream);
      exit(true);
    END;

    [External]
    PROCEDURE BuildFilterText@17(VAR FilterText@1000 : Text[250];Inp@1001 : Text[100]);
    BEGIN
      if FilterText <> '' then
        AddToFilterText(FilterText,COPYSTR(' ; ' + Inp,1,MAXSTRLEN(FilterText)))
      else
        AddToFilterText(FilterText,COPYSTR(Inp,1,MAXSTRLEN(FilterText)));
    END;

    LOCAL PROCEDURE AddToFilterText@18(VAR FText@1000 : Text[250];Inp@1001 : Text[100]);
    VAR
      RemLgth@1002 : Integer;
    BEGIN
      if STRLEN(FText + Inp) <= MAXSTRLEN(FText) then begin
        FText := FText + Inp;
        exit;
      end;
      RemLgth := MAXSTRLEN(FText) - STRLEN(FText);
      if RemLgth > 3 then
        FText := FText + ',...'
      else
        FText := PADSTR(FText,MAXSTRLEN(FText),'.');
    END;

    [External]
    PROCEDURE FinalizeFilterText@9(VAR InTxt@1000 : Text[250]);
    BEGIN
      if InTxt = '' then
        InTxt := Text002;
    END;

    [Internal]
    PROCEDURE GetDescription@7(Chart@1000 : Record Chart) : Text;
    VAR
      chartBuilder@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
    BEGIN
      if not GetChartBuilder(Chart,chartBuilder) then
        exit('');
      exit(chartBuilder.Description);
    END;

    [Internal]
    PROCEDURE ChartCustomization@20(VAR TempChart@1000 : TEMPORARY Record Chart) : Boolean;
    BEGIN
      TempChart.INSERT;
      if NoOfMeasuresApplied(TempChart) > GetMaxNoOfMeasures then begin
        MESSAGE(Text003,GetMaxNoOfMeasures);
        exit(false);
      end;
      exit(PAGE.RUNMODAL(PAGE::"Generic Chart Customization",TempChart) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE NoOfMeasuresApplied@32(VAR TempChart@1000 : Record Chart) : Integer;
    VAR
      chartBuilder@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
    BEGIN
      if not GetChartBuilder(TempChart,chartBuilder) then
        exit(0);
      exit(chartBuilder.MeasureCount);
    END;

    LOCAL PROCEDURE GetMaxNoOfMeasures@27() : Integer;
    BEGIN
      exit(6); // Max number of measures allowed when using the Chart Design pages 9183, 9188
    END;

    LOCAL PROCEDURE GetFieldColumnNoName@28(SourceType@1004 : '" ",Table,Query';SourceNo@1000 : Integer;VAR FieldColNo@1001 : Integer;VAR FieldColName@1003 : Text;FilteringLookup@1007 : Boolean);
    VAR
      TempGenericChartQueryColumn@1006 : TEMPORARY Record "Generic Chart Query Column";
      Field@1002 : Record Field;
      Found@1005 : Boolean;
    BEGIN
      case SourceType of
        SourceType::Table:
          with Field do
            if FieldColNo > 0 then begin
              FieldColName := '';
              if GET(SourceNo,FieldColNo) then
                FieldColName := FieldName;
            end else begin
              SETRANGE(TableNo,SourceNo);
              if FINDSET then
                repeat
                  if UPPERCASE(FieldName) = UPPERCASE(FieldColName) then begin
                    Found := true;
                    FieldColNo := "No.";
                  end;
                until (NEXT = 0) or Found;
            end;
        SourceType::Query:
          begin
            GetQueryColumnList(TempGenericChartQueryColumn,SourceNo,0,FilteringLookup);
            with TempGenericChartQueryColumn do
              if FieldColNo > 0 then begin
                FieldColName := '';
                SETRANGE("Query Column No.",FieldColNo);
                if FINDFIRST then
                  FieldColName := "Column Name";
              end else begin
                if FINDSET then
                  repeat
                    if UPPERCASE("Column Name") = UPPERCASE(FieldColName) then begin
                      Found := true;
                      FieldColNo := "Query Column No.";
                    end;
                  until (NEXT = 0) or Found;
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE GetSourceIDName@31(SourceType@1000 : '" ",Table,Query';VAR SourceID@1001 : Integer;VAR SourceName@1002 : Text);
    VAR
      Object@1003 : Record Object;
    BEGIN
      with Object do begin
        case SourceType of
          SourceType::Table:
            SETRANGE(Type,Type::Table);
          SourceType::Query:
            SETRANGE(Type,Type::Query);
        end;
        if SourceID > 0 then begin
          SETRANGE(ID,SourceID);
          FINDFIRST;
          SourceName := Name;
          exit;
        end;
        if SourceName <> '' then begin
          SETRANGE(Name,SourceName);
          FINDFIRST;
          SourceID := ID;
        end;
      end;
    END;

    LOCAL PROCEDURE BuildTempGenericChartFilter@29(TempGenericChartSetup@1001 : TEMPORARY Record "Generic Chart Setup";VAR TempGenericChartFilter@1000 : TEMPORARY Record "Generic Chart Filter";VAR chartBuilder@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";VAR FilterText@1004 : Text[250]);
    VAR
      i@1002 : Integer;
    BEGIN
      with TempGenericChartFilter do begin
        DELETEALL;
        case TempGenericChartSetup."Source Type" of
          TempGenericChartSetup."Source Type"::Table:
            for i := 0 to chartBuilder.TableFilterCount - 1 do begin
              INIT;
              ID := TempGenericChartSetup.ID;
              "Line No." := i + 1;
              "Filter Field ID" := chartBuilder.GetTableFilterFieldId(i);
              "Filter Field Name" := chartBuilder.GetTableFilterFieldName(i);
              GetFieldColumnNoName(
                TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID","Filter Field ID","Filter Field Name",true);
              "Filter Value" := chartBuilder.GetTableFilterValue(i);
              if "Filter Value" <> '' then
                BuildFilterText(FilterText,
                  COPYSTR("Filter Field Name" + ' : ' + "Filter Value",1,MAXSTRLEN(FilterText)));
              INSERT;
            end;
          TempGenericChartSetup."Source Type"::Query:
            for i := 0 to chartBuilder.QueryFilterCount - 1 do begin
              INIT;
              ID := TempGenericChartSetup.ID;
              "Line No." := i + 1;
              "Filter Field ID" := chartBuilder.GetQueryFilterFieldId(i);
              "Filter Field Name" := chartBuilder.GetQueryFilterFieldName(i);
              GetFieldColumnNoName(
                TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID","Filter Field ID","Filter Field Name",true);
              "Filter Value" := chartBuilder.GetQueryFilterValue(i);
              if "Filter Value" <> '' then
                BuildFilterText(FilterText,
                  COPYSTR("Filter Field Name" + ' : ' + "Filter Value",1,MAXSTRLEN(FilterText)));
              INSERT;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE SetInclInColumns@30(FilterType@1000 : Integer;TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR FieldType@1004 : Record Field) : Boolean;
    VAR
      Field@1003 : Record Field;
    BEGIN
      if FieldNumber < 0 then
        exit(false);
      if FieldNumber = 0 then
        exit(FilterType in [0,2]); // The column method is Count which is a numeral
      with Field do begin
        SETRANGE(TableNo,TableNumber);
        SETRANGE("No.",FieldNumber);
        if FilterType > 0 then
          SETFILTER(Type,TypeFilterText(FilterType));
        if FINDFIRST then begin
          FieldType.Type := Type;
          exit(true);
        end;
        exit(false);
      end;
    END;

    LOCAL PROCEDURE TypeFilterText@26(Category@1000 : Integer) : Text;
    VAR
      DummyField@1001 : Record Field;
    BEGIN
      with DummyField do
        case Category of
          1:
            exit(
              STRSUBSTNO(
                '%1|%2|%3|%4|%5|%6|%7',Type::Date,Type::Time,Type::DateFormula,Type::Text,Type::Code,Type::Option,Type::DateTime));
          2:
            exit(STRSUBSTNO('%1|%2|%3|%4|%5',Type::Decimal,Type::Binary,Type::Integer,Type::BigInteger,Type::Duration));
        end;
    END;

    [External]
    PROCEDURE CheckSourceTypeID@25(TempGenericChartSetup@1000 : TEMPORARY Record "Generic Chart Setup";CheckSourceID@1001 : Boolean);
    BEGIN
      with TempGenericChartSetup do begin
        if "Source Type" = "Source Type"::" " then
          ERROR(Text001,FIELDCAPTION("Source Type"));
        if CheckSourceID then
          if "Source ID" = 0 then
            ERROR(Text001,FIELDCAPTION("Source ID"));
      end;
    END;

    [Internal]
    PROCEDURE GetQueryCountColumnName@33(VAR TempGenericChartSetup@1000 : TEMPORARY Record "Generic Chart Setup") : Text[50];
    VAR
      TempGenericChartQueryColumn@1001 : TEMPORARY Record "Generic Chart Query Column";
    BEGIN
      if TempGenericChartSetup."Source Type" <> TempGenericChartSetup."Source Type"::Query then
        exit('');
      GetQueryColumnList(TempGenericChartQueryColumn,TempGenericChartSetup."Source ID",0,true);
      TempGenericChartQueryColumn.SETRANGE("Aggregation Type",TempGenericChartQueryColumn."Aggregation Type"::Count);
      if not TempGenericChartQueryColumn.FINDFIRST then
        ERROR(Text004);
      exit(TempGenericChartQueryColumn."Column Name");
    END;

    [Internal]
    PROCEDURE CheckDataTypeAggregationCompliance@34(TempGenericChartSetup@1002 : TEMPORARY Record "Generic Chart Setup";ColumnName@1000 : Text[50];Aggregation@1001 : 'None,Count,Sum,Min,Max,Avg');
    VAR
      TempGenericChartQueryColumn@1003 : TEMPORARY Record "Generic Chart Query Column";
    BEGIN
      with TempGenericChartSetup do begin
        if "Source Type" <> "Source Type"::Query then
          exit;
        if ColumnName = '' then
          exit;
        if Aggregation in [Aggregation::None,Aggregation::Count] then
          exit;
        GetQueryColumnList(TempGenericChartQueryColumn,"Source ID",0,false);
        TempGenericChartQueryColumn.SETRANGE("Column Name",ColumnName);
        if not TempGenericChartQueryColumn.FINDFIRST then
          exit;
        ValidateCompliance(TempGenericChartQueryColumn."Column Data Type",Aggregation);
      end;
    END;

    LOCAL PROCEDURE ValidateCompliance@35(ColumnDataType@1000 : 'Date,Time,DateFormula,Decimal,Text,Code,Binary,Boolean,Integer,Option,BigInteger,DateTime';Aggregation@1001 : 'None,Count,Sum,Min,Max,Avg');
    BEGIN
      if not (Aggregation in [Aggregation::Sum,Aggregation::Min,Aggregation::Max,Aggregation::Avg]) then
        exit;
      if ColumnDataType <> ColumnDataType::Decimal then
        ERROR(Text005,SELECTSTR(Aggregation + 1,AggregationTxt));
    END;

    [External]
    PROCEDURE TextMLAssistEdit@36(VAR TempGenericChartCaptionsBuf@1000 : TEMPORARY Record "Generic Chart Captions Buffer";CaptionCode@1003 : Code[10]) : Text[250];
    VAR
      GenericChartTextEditor@1002 : Page "Generic Chart Text Editor";
    BEGIN
      exit(GenericChartTextEditor.AssistEdit(TempGenericChartCaptionsBuf,CaptionCode))
    END;

    [External]
    PROCEDURE MemoMLAssistEdit@48(VAR TempGenericChartMemoBuf@1000 : TEMPORARY Record "Generic Chart Memo Buffer";MemoCode@1003 : Code[10]) : Text;
    VAR
      GenericChartMemoEditor@1002 : Page "Generic Chart Memo Editor";
    BEGIN
      exit(GenericChartMemoEditor.AssistEdit(TempGenericChartMemoBuf,MemoCode))
    END;

    LOCAL PROCEDURE BuildMultilanguageText@38(VAR TempGenericChartCaptionsBuf@1000 : TEMPORARY Record "Generic Chart Captions Buffer";CaptionCode@1004 : Code[10];VAR MultilanguageText@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartMultiLanguageText");
    VAR
      Language@1003 : Record Language;
    BEGIN
      MultilanguageText := MultilanguageText.BusinessChartMultiLanguageText;
      TempGenericChartCaptionsBuf.SETRANGE(Code,CaptionCode);
      if TempGenericChartCaptionsBuf.FINDSET then
        repeat
          Language.SETRANGE(Code,TempGenericChartCaptionsBuf."Language Code");
          if Language.FINDFIRST then
            MultilanguageText.SetText(Language."Windows Language ID",TempGenericChartCaptionsBuf.Caption);
        until TempGenericChartCaptionsBuf.NEXT = 0;
      TempGenericChartCaptionsBuf.SETRANGE(Code)
    END;

    LOCAL PROCEDURE BuildCaptionBuf@49(VAR TempGenericChartCaptionsBuf@1000 : TEMPORARY Record "Generic Chart Captions Buffer";CaptionCode@1004 : Code[10];MultilanguageText@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartMultiLanguageText");
    VAR
      Language@1006 : Record Language;
      Index@1005 : Integer;
    BEGIN
      TempGenericChartCaptionsBuf.SETRANGE(Code,CaptionCode);
      TempGenericChartCaptionsBuf.DELETEALL;
      TempGenericChartCaptionsBuf.Code := CaptionCode;
      for Index := 0 to MultilanguageText.Count - 1 do begin
        Language.SETRANGE("Windows Language ID",MultilanguageText.GetWindowsLanguageIdAt(Index));
        if Language.FINDFIRST then begin
          TempGenericChartCaptionsBuf."Language Code" := Language.Code;
          TempGenericChartCaptionsBuf.Caption := MultilanguageText.GetTextAt(Index);
          if TempGenericChartCaptionsBuf.INSERT then;
        end;
      end;
      TempGenericChartCaptionsBuf.SETRANGE(Code)
    END;

    LOCAL PROCEDURE BuildMemoMultilanguageText@52(VAR TempGenericChartMemoBuf@1000 : TEMPORARY Record "Generic Chart Memo Buffer";MemoCode@1004 : Code[10];VAR MultilanguageText@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartMultiLanguageText");
    VAR
      Language@1002 : Record Language;
    BEGIN
      MultilanguageText := MultilanguageText.BusinessChartMultiLanguageText;
      TempGenericChartMemoBuf.SETRANGE(Code,MemoCode);
      if TempGenericChartMemoBuf.FINDSET then
        repeat
          Language.SETRANGE(Code,TempGenericChartMemoBuf."Language Code");
          if Language.FINDFIRST then
            MultilanguageText.SetText(Language."Windows Language ID",TempGenericChartMemoBuf.GetMemoText);
        until TempGenericChartMemoBuf.NEXT = 0;
      TempGenericChartMemoBuf.SETRANGE(Code)
    END;

    LOCAL PROCEDURE BuildMemoBuf@50(VAR TempGenericChartMemoBuf@1000 : TEMPORARY Record "Generic Chart Memo Buffer";MemoCode@1004 : Code[10];MultilanguageText@1001 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartMultiLanguageText");
    VAR
      Language@1006 : Record Language;
      Index@1005 : Integer;
    BEGIN
      TempGenericChartMemoBuf.SETRANGE(Code,MemoCode);
      TempGenericChartMemoBuf.DELETEALL;
      TempGenericChartMemoBuf.Code := MemoCode;
      for Index := 0 to MultilanguageText.Count - 1 do begin
        Language.SETRANGE("Windows Language ID",MultilanguageText.GetWindowsLanguageIdAt(Index));
        if Language.FINDFIRST then begin
          TempGenericChartMemoBuf."Language Code" := Language.Code;
          TempGenericChartMemoBuf.SetMemoText(MultilanguageText.GetTextAt(Index));
          if TempGenericChartMemoBuf.INSERT then;
        end;
      end;
      TempGenericChartMemoBuf.SETRANGE(Code);
    END;

    [External]
    PROCEDURE GetUserLanguage@22() : Code[10];
    VAR
      Language@1000 : Record Language;
    BEGIN
      exit(Language.GetUserLanguage)
    END;

    [External]
    PROCEDURE DescriptionCode@39() : Code[10];
    BEGIN
      exit(DescriptionTok)
    END;

    [External]
    PROCEDURE XAxisTitleCode@40() : Code[10];
    BEGIN
      exit(XAxisTitleTok)
    END;

    [External]
    PROCEDURE YAxisTitleCode@41() : Code[10];
    BEGIN
      exit(YAxisTitleTok)
    END;

    LOCAL PROCEDURE ZAxisTitleCode@58() : Code[10];
    BEGIN
      exit(ZAxisTitleTok)
    END;

    [External]
    PROCEDURE XAxisCaptionCode@53() : Code[10];
    BEGIN
      exit(XAxisCaptionTok)
    END;

    [External]
    PROCEDURE ZAxisCaptionCode@51() : Code[10];
    BEGIN
      exit(ZAxisCaptionTok)
    END;

    [External]
    PROCEDURE RequiredMeasureCode@42() : Code[10];
    BEGIN
      exit(RequiredTok)
    END;

    [External]
    PROCEDURE OptionalMeasure1Code@47() : Code[10];
    BEGIN
      exit(Optional1Tok)
    END;

    [External]
    PROCEDURE OptionalMeasure2Code@46() : Code[10];
    BEGIN
      exit(Optional2Tok)
    END;

    [External]
    PROCEDURE OptionalMeasure3Code@45() : Code[10];
    BEGIN
      exit(Optional3Tok)
    END;

    [External]
    PROCEDURE OptionalMeasure4Code@44() : Code[10];
    BEGIN
      exit(Optional4Tok)
    END;

    [External]
    PROCEDURE OptionalMeasure5Code@43() : Code[10];
    BEGIN
      exit(Optional5Tok)
    END;

    BEGIN
    END.
  }
}

