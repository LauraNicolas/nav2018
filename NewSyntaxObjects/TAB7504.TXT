OBJECT Table 7504 Item Attribute Value Selection
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Attribute Value Selection;
  }
  FIELDS
  {
    { 1   ;   ;Attribute Name      ;Text250       ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record "Item Attribute";
                                                              BEGIN
                                                                FindItemAttributeCaseInsensitive(ItemAttribute);
                                                                CheckForDuplicate;
                                                                CheckIfBlocked(ItemAttribute);
                                                                AdjustAttributeName(ItemAttribute);
                                                                ValidateChangedAttribute(ItemAttribute);
                                                              END;

                                                   CaptionML=ENU=Attribute Name;
                                                   NotBlank=true }
    { 2   ;   ;Value               ;Text250       ;OnValidate=VAR
                                                                ItemAttributeValue@1000 : Record "Item Attribute Value";
                                                                ItemAttribute@1001 : Record "Item Attribute";
                                                                DecimalValue@1002 : Decimal;
                                                                IntegerValue@1005 : Integer;
                                                              BEGIN
                                                                if Value = '' then
                                                                  exit;

                                                                ItemAttribute.GET("Attribute ID");
                                                                if FindItemAttributeValueCaseSensitive(ItemAttributeValue) then
                                                                  CheckIfValueBlocked(ItemAttributeValue);

                                                                case "Attribute Type" of
                                                                  "Attribute Type"::Option:
                                                                    begin
                                                                      if ItemAttributeValue.Value = '' then begin
                                                                        if not FindItemAttributeValueCaseInsensitive(ItemAttributeValue) then
                                                                          ERROR(AttributeValueDoesntExistErr,Value);
                                                                        CheckIfValueBlocked(ItemAttributeValue);
                                                                      end;
                                                                      AdjustAttributeValue(ItemAttributeValue);
                                                                    end;
                                                                  "Attribute Type"::Decimal:
                                                                    ValidateType(DecimalValue,Value,ItemAttribute);
                                                                  "Attribute Type"::Integer:
                                                                    ValidateType(IntegerValue,Value,ItemAttribute);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Value }
    { 3   ;   ;Attribute ID        ;Integer       ;CaptionML=ENU=Attribute ID }
    { 4   ;   ;Unit of Measure     ;Text30        ;CaptionML=ENU=Unit of Measure;
                                                   Editable=false }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 7   ;   ;Attribute Type      ;Option        ;CaptionML=ENU=Attribute Type;
                                                   OptionCaptionML=ENU=Option,Text,Integer,Decimal;
                                                   OptionString=Option,Text,Integer,Decimal }
    { 8   ;   ;Inherited-From Table ID;Integer    ;CaptionML=ENU=Inherited-From Table ID }
    { 9   ;   ;Inherited-From Key Value;Code20    ;CaptionML=ENU=Inherited-From Key Value }
    { 10  ;   ;Inheritance Level   ;Integer       ;CaptionML=ENU=Inheritance Level }
  }
  KEYS
  {
    {    ;"Attribute Name"                        ;Clustered=true }
    {    ;"Inheritance Level","Attribute Name"     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"Attribute ID"                           }
    { 2   ;Brick               ;"Attribute Name",Value,"Unit of Measure" }
  }
  CODE
  {
    VAR
      AttributeDoesntExistErr@1005 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute ''%1'' doesn''t exist.';
      AttributeBlockedErr@1001 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute ''%1'' is blocked.';
      AttributeValueBlockedErr@1002 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute value ''%1'' is blocked.';
      AttributeValueDoesntExistErr@1003 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute value ''%1'' doesn''t exist.';
      AttributeValueAlreadySpecifiedErr@1004 : TextConst '@@@=%1 - attribute name;ENU=You have already specified a value for item attribute ''%1''.';
      AttributeValueTypeMismatchErr@1000 : TextConst '@@@=" %1 is arbitrary string, %2 is type name";ENU=The value ''%1'' does not match the item attribute of type %2.';

    [External]
    PROCEDURE PopulateItemAttributeValueSelection@16(VAR TempItemAttributeValue@1001 : TEMPORARY Record "Item Attribute Value");
    BEGIN
      if TempItemAttributeValue.FINDSET then
        repeat
          InsertRecord(TempItemAttributeValue,0,'');
        until TempItemAttributeValue.NEXT = 0;
    END;

    [External]
    PROCEDURE PopulateItemAttributeValue@43(VAR TempNewItemAttributeValue@1001 : TEMPORARY Record "Item Attribute Value");
    VAR
      ItemAttributeValue@1003 : Record "Item Attribute Value";
      ValDecimal@1002 : Decimal;
    BEGIN
      if FINDSET then
        repeat
          CLEAR(TempNewItemAttributeValue);
          TempNewItemAttributeValue.INIT;
          TempNewItemAttributeValue."Attribute ID" := "Attribute ID";
          TempNewItemAttributeValue.Blocked := Blocked;
          ItemAttributeValue.RESET;
          ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
          case "Attribute Type" of
            "Attribute Type"::Option,
            "Attribute Type"::Text,
            "Attribute Type"::Integer:
              begin
                TempNewItemAttributeValue.Value := Value;
                ItemAttributeValue.SETRANGE(Value,Value);
              end;
            "Attribute Type"::Decimal:
              begin
                if Value <> '' then begin
                  EVALUATE(ValDecimal,Value);
                  ItemAttributeValue.SETRANGE(Value,FORMAT(ValDecimal,0,9));
                  if ItemAttributeValue.ISEMPTY then begin
                    ItemAttributeValue.SETRANGE(Value,FORMAT(ValDecimal));
                    if ItemAttributeValue.ISEMPTY then
                      ItemAttributeValue.SETRANGE(Value,Value);
                  end;
                end;
                TempNewItemAttributeValue.Value := FORMAT(ValDecimal);
              end;
          end;
          if not ItemAttributeValue.FINDFIRST then
            InsertItemAttributeValue(ItemAttributeValue,Rec);
          TempNewItemAttributeValue.ID := ItemAttributeValue.ID;
          TempNewItemAttributeValue.INSERT;
        until NEXT = 0;
    END;

    [External]
    PROCEDURE InsertItemAttributeValue@4(VAR ItemAttributeValue@1000 : Record "Item Attribute Value";TempItemAttributeValueSelection@1001 : TEMPORARY Record "Item Attribute Value Selection");
    VAR
      ValDecimal@1003 : Decimal;
    BEGIN
      CLEAR(ItemAttributeValue);
      ItemAttributeValue."Attribute ID" := TempItemAttributeValueSelection."Attribute ID";
      ItemAttributeValue.Blocked := TempItemAttributeValueSelection.Blocked;
      case TempItemAttributeValueSelection."Attribute Type" of
        TempItemAttributeValueSelection."Attribute Type"::Option,
        TempItemAttributeValueSelection."Attribute Type"::Text:
          ItemAttributeValue.Value := TempItemAttributeValueSelection.Value;
        TempItemAttributeValueSelection."Attribute Type"::Integer:
          ItemAttributeValue.VALIDATE(Value,TempItemAttributeValueSelection.Value);
        TempItemAttributeValueSelection."Attribute Type"::Decimal:
          if TempItemAttributeValueSelection.Value <> '' then begin
            EVALUATE(ValDecimal,TempItemAttributeValueSelection.Value);
            ItemAttributeValue.VALIDATE(Value,FORMAT(ValDecimal));
          end;
      end;
      ItemAttributeValue.INSERT;
    END;

    [External]
    PROCEDURE InsertRecord@2(VAR TempItemAttributeValue@1000 : TEMPORARY Record "Item Attribute Value";DefinedOnTableID@1003 : Integer;DefinedOnKeyValue@1004 : Code[20]);
    VAR
      ItemAttribute@1002 : Record "Item Attribute";
      ValueDecimal@1001 : Decimal;
    BEGIN
      "Attribute ID" := TempItemAttributeValue."Attribute ID";
      ItemAttribute.GET(TempItemAttributeValue."Attribute ID");
      "Attribute Name" := ItemAttribute.Name;
      "Attribute Type" := ItemAttribute.Type;
      if IsNotBlankDecimal(TempItemAttributeValue.Value) then begin
        if not EVALUATE(ValueDecimal,TempItemAttributeValue.Value,9) then
          EVALUATE(ValueDecimal,TempItemAttributeValue.Value);
        Value := FORMAT(ValueDecimal);
      end else
        Value := FORMAT(TempItemAttributeValue.Value);

      Blocked := TempItemAttributeValue.Blocked;
      "Unit of Measure" := ItemAttribute."Unit of Measure";
      "Inherited-From Table ID" := DefinedOnTableID;
      "Inherited-From Key Value" := DefinedOnKeyValue;
      INSERT;
    END;

    LOCAL PROCEDURE ValidateType@1(Variant@1000 : Variant;ValueToValidate@1001 : Text;ItemAttribute@1002 : Record "Item Attribute");
    VAR
      TypeHelper@1003 : Codeunit "Type Helper";
      CultureInfo@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      if (ValueToValidate <> '') and not TypeHelper.Evaluate(Variant,ValueToValidate,'',CultureInfo.CurrentCulture.Name) then
        ERROR(AttributeValueTypeMismatchErr,ValueToValidate,ItemAttribute.Type);
    END;

    LOCAL PROCEDURE FindItemAttributeCaseInsensitive@6(VAR ItemAttribute@1000 : Record "Item Attribute");
    VAR
      AttributeName@1001 : Text[250];
    BEGIN
      ItemAttribute.SETRANGE(Name,"Attribute Name");
      if ItemAttribute.FINDFIRST then
        exit;

      AttributeName := LOWERCASE("Attribute Name");
      ItemAttribute.SETRANGE(Name);
      if ItemAttribute.FINDSET then
        repeat
          if LOWERCASE(ItemAttribute.Name) = AttributeName then
            exit;
        until ItemAttribute.NEXT = 0;

      ERROR(AttributeDoesntExistErr,"Attribute Name");
    END;

    LOCAL PROCEDURE FindItemAttributeValueCaseSensitive@22(VAR ItemAttributeValue@1000 : Record "Item Attribute Value") : Boolean;
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
      ItemAttributeValue.SETRANGE(Value,Value);
      exit(ItemAttributeValue.FINDFIRST);
    END;

    LOCAL PROCEDURE FindItemAttributeValueCaseInsensitive@46(VAR ItemAttributeValue@1000 : Record "Item Attribute Value") : Boolean;
    VAR
      AttributeValue@1002 : Text[250];
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
      ItemAttributeValue.SETRANGE(Value);
      if ItemAttributeValue.FINDSET then begin
        AttributeValue := LOWERCASE(Value);
        repeat
          if LOWERCASE(ItemAttributeValue.Value) = AttributeValue then
            exit(true);
        until ItemAttributeValue.NEXT = 0;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CheckForDuplicate@34();
    VAR
      TempItemAttributeValueSelection@1001 : TEMPORARY Record "Item Attribute Value Selection";
      AttributeName@1003 : Text[250];
    BEGIN
      if ISEMPTY then
        exit;
      AttributeName := LOWERCASE("Attribute Name");
      TempItemAttributeValueSelection.COPY(Rec,true);
      if TempItemAttributeValueSelection.FINDSET then
        repeat
          if TempItemAttributeValueSelection."Attribute ID" <> "Attribute ID" then
            if LOWERCASE(TempItemAttributeValueSelection."Attribute Name") = AttributeName then
              ERROR(AttributeValueAlreadySpecifiedErr,"Attribute Name");
        until TempItemAttributeValueSelection.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckIfBlocked@13(VAR ItemAttribute@1000 : Record "Item Attribute");
    BEGIN
      if ItemAttribute.Blocked then
        ERROR(AttributeBlockedErr,ItemAttribute.Name);
    END;

    LOCAL PROCEDURE CheckIfValueBlocked@10(ItemAttributeValue@1000 : Record "Item Attribute Value");
    BEGIN
      if ItemAttributeValue.Blocked then
        ERROR(AttributeValueBlockedErr,ItemAttributeValue.Value);
    END;

    LOCAL PROCEDURE AdjustAttributeName@7(VAR ItemAttribute@1000 : Record "Item Attribute");
    BEGIN
      if "Attribute Name" <> ItemAttribute.Name then
        "Attribute Name" := ItemAttribute.Name;
    END;

    LOCAL PROCEDURE AdjustAttributeValue@12(VAR ItemAttributeValue@1000 : Record "Item Attribute Value");
    BEGIN
      if Value <> ItemAttributeValue.Value then
        Value := ItemAttributeValue.Value;
    END;

    LOCAL PROCEDURE ValidateChangedAttribute@5(VAR ItemAttribute@1002 : Record "Item Attribute");
    BEGIN
      if "Attribute ID" <> ItemAttribute.ID then begin
        VALIDATE("Attribute ID",ItemAttribute.ID);
        VALIDATE("Attribute Type",ItemAttribute.Type);
        VALIDATE("Unit of Measure",ItemAttribute."Unit of Measure");
        VALIDATE(Value,'');
      end;
    END;

    PROCEDURE FindAttributeValue@3(VAR ItemAttributeValue@1000 : Record "Item Attribute Value") : Boolean;
    VAR
      ValDecimal@1001 : Decimal;
    BEGIN
      ItemAttributeValue.RESET;
      ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
      if IsNotBlankDecimal(Value) then begin
        EVALUATE(ValDecimal,Value);
        ItemAttributeValue.SETRANGE(Value,FORMAT(ValDecimal,0,9));
        if ItemAttributeValue.ISEMPTY then begin
          ItemAttributeValue.SETRANGE(Value,FORMAT(ValDecimal));
          if ItemAttributeValue.ISEMPTY then
            ItemAttributeValue.SETRANGE(Value,Value);
        end;
      end else
        ItemAttributeValue.SETRANGE(Value,Value);
      exit(ItemAttributeValue.FINDFIRST);
    END;

    PROCEDURE GetAttributeValueID@8(VAR TempItemAttributeValueToInsert@1000 : TEMPORARY Record "Item Attribute Value") : Integer;
    VAR
      ItemAttributeValue@1001 : Record "Item Attribute Value";
      ValDecimal@1003 : Decimal;
    BEGIN
      if not FindAttributeValue(ItemAttributeValue) then begin
        ItemAttributeValue."Attribute ID" := "Attribute ID";
        if IsNotBlankDecimal(Value) then begin
          EVALUATE(ValDecimal,Value);
          ItemAttributeValue.VALIDATE(Value,FORMAT(ValDecimal));
        end else
          ItemAttributeValue.Value := Value;
        ItemAttributeValue.INSERT;
      end;
      TempItemAttributeValueToInsert.TRANSFERFIELDS(ItemAttributeValue);
      TempItemAttributeValueToInsert.INSERT;
      exit(ItemAttributeValue.ID);
    END;

    PROCEDURE IsNotBlankDecimal@14(TextValue@1001 : Text[250]) : Boolean;
    VAR
      ItemAttribute@1000 : Record "Item Attribute";
    BEGIN
      if TextValue = '' then
        exit(false);
      ItemAttribute.GET("Attribute ID");
      exit(ItemAttribute.Type = ItemAttribute.Type::Decimal);
    END;

    BEGIN
    END.
  }
}

