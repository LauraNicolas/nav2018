OBJECT Page 5850 Posted Sales Document Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Posted Sales Document Lines;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=Customer;
    PageType=ListPlus;
    OnInit=BEGIN
             ShowRevLineEnable := true;
           END;

    OnOpenPage=BEGIN
                 CurrentMenuType := 1;
                 ChangeSubMenu(CurrentMenuType);
                 SETRANGE("No.","No.");
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS(
                         "No. of Pstd. Shipments","No. of Pstd. Invoices",
                         "No. of Pstd. Return Receipts","No. of Pstd. Credit Memos");
                       CurrentMenuTypeOpt := CurrentMenuType;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 46  ;1   ;Group     ;
                Name=Options;
                CaptionML=ENU=Options }

    { 63  ;2   ;Field     ;
                Name=ShowRevLine;
                CaptionML=ENU=Show Reversible Lines Only;
                ToolTipML=ENU=Specifies if only lines with quantities that are available to be reversed are shown. For example, on a posted sales invoice with an original quantity of 20, and 15 of the items have already been returned, the quantity that is available to be reversed on the posted sales invoice is 5.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShowRevLinesOnly;
                Enabled=ShowRevLineEnable;
                OnValidate=BEGIN
                             case CurrentMenuType of
                               0:
                                 CurrPage.PostedShpts.PAGE.Initialize(
                                   ShowRevLinesOnly,
                                   CopyDocMgt.IsSalesFillExactCostRevLink(
                                     ToSalesHeader,CurrentMenuType,ToSalesHeader."Currency Code"),true);
                               1:
                                 CurrPage.PostedInvoices.PAGE.Initialize(
                                   ToSalesHeader,ShowRevLinesOnly,
                                   CopyDocMgt.IsSalesFillExactCostRevLink(
                                     ToSalesHeader,CurrentMenuType,ToSalesHeader."Currency Code"),true);
                             end;
                             ShowRevLinesOnlyOnAfterValidat;
                           END;

                ImplicitType=Boolean }

    { 2   ;2   ;Field     ;
                Name=OriginalQuantity;
                CaptionML=ENU=Return Original Quantity;
                ToolTipML=ENU=Specifies whether to use the original quantity to receive quantities associated with specific shipments. For example, on a posted sales invoice with an original quantity of 20, you can match the 20 items with a specific shipment.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OriginalQuantity;
                ImplicitType=Boolean }

    { 19  ;1   ;Group     ;
                Name=Group19 }

    { 9   ;2   ;Group     ;
                Name=Group9 }

    { 15  ;3   ;Field     ;
                Name=PostedShipmentsBtn;
                OptionCaptionML=ENU=Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentMenuTypeOpt;
                CaptionClass=OptionCaptionServiceTier;
                OnValidate=BEGIN
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x3 then
                               x3CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x2 then
                               x2CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x1 then
                               x1CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x0 then
                               x0CurrentMenuTypeOptOnValidate;
                           END;

                ImplicitType=Option }

    { 16  ;3   ;Field     ;
                Name=&Posted Shipments;
                CaptionML=ENU=&Posted Shipments;
                ToolTipML=ENU=Specifies the lines that represent posted shipments.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Shipments");
                Editable=FALSE }

    { 14  ;3   ;Field     ;
                Name=NoOfPostedInvoices;
                CaptionML=ENU=Posted I&nvoices;
                ToolTipML=ENU=Specifies the lines that represent posted invoices.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Invoices" - NoOfPostedPrepmtInvoices);
                Editable=FALSE }

    { 41  ;3   ;Field     ;
                Name=Posted Ret&urn Receipts;
                CaptionML=ENU=Posted Ret&urn Receipts;
                ToolTipML=ENU=Specifies the lines that represent posted return receipts.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Return Receipts");
                Editable=FALSE }

    { 11  ;3   ;Field     ;
                Name=NoOfPostedCrMemos;
                CaptionML=ENU=Posted Cr. &Memos;
                ToolTipML=ENU=Specifies the lines that represent posted sales credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Credit Memos" - NoOfPostedPrepmtCrMemos);
                Editable=FALSE }

    { 44  ;3   ;Field     ;
                Name=CurrentMenuTypeValue;
                ApplicationArea=#Advanced;
                SourceExpr=CurrentMenuType;
                Visible=FALSE;
                ImplicitType=Integer }

    { 18  ;2   ;Group     ;
                Name=Group18 }

    { 6   ;3   ;Part      ;
                Name=PostedInvoices;
                ApplicationArea=#All;
                SubPageView=SORTING("Sell-to Customer No.");
                SubPageLink="Sell-to Customer No."=FIELD("No.");
                PagePartID="Get Post.Doc - S.InvLn Subform";
                Visible=PostedInvoicesVisible }

    { 7   ;3   ;Part      ;
                Name=PostedShpts;
                ApplicationArea=#All;
                SubPageView=SORTING("Sell-to Customer No.");
                SubPageLink="Sell-to Customer No."=FIELD("No.");
                PagePartID="Get Post.Doc - S.ShptLn Sbfrm";
                Visible=PostedShptsVisible }

    { 1   ;3   ;Part      ;
                Name=PostedCrMemos;
                ApplicationArea=#All;
                SubPageView=SORTING("Sell-to Customer No.");
                SubPageLink="Sell-to Customer No."=FIELD("No.");
                PagePartID="Get Post.Doc-S.Cr.MemoLn Sbfrm";
                Visible=PostedCrMemosVisible }

    { 5   ;3   ;Part      ;
                Name=PostedReturnRcpts;
                ApplicationArea=#All;
                SubPageView=SORTING("Sell-to Customer No.");
                SubPageLink="Sell-to Customer No."=FIELD("No.");
                PagePartID="Get Pst.Doc-RtrnRcptLn Subform";
                Visible=PostedReturnRcptsVisible }

  }
  CODE
  {
    VAR
      ToSalesHeader@1002 : Record "Sales Header";
      CopyDocMgt@1010 : Codeunit "Copy Document Mgt.";
      OldMenuType@1001 : Integer;
      CurrentMenuType@1000 : Integer;
      LinesNotCopied@1008 : Integer;
      ShowRevLinesOnly@1004 : Boolean;
      MissingExCostRevLink@1006 : Boolean;
      Text000@1009 : TextConst 'ENU=The document lines that have a G/L account that does not allow direct posting have not been copied to the new document.';
      OriginalQuantity@1003 : Boolean;
      Text002@1091 : TextConst 'ENU=Document Type Filter';
      PostedShptsVisible@19073057 : Boolean INDATASET;
      PostedInvoicesVisible@19029596 : Boolean INDATASET;
      PostedReturnRcptsVisible@19034262 : Boolean INDATASET;
      PostedCrMemosVisible@19050108 : Boolean INDATASET;
      ShowRevLineEnable@19075015 : Boolean INDATASET;
      CurrentMenuTypeOpt@19019278 : 'x0,x1,x2,x3';

    [Internal]
    PROCEDURE CopyLineToDoc@5();
    VAR
      FromSalesShptLine@1001 : Record "Sales Shipment Line";
      FromSalesInvLine@1002 : Record "Sales Invoice Line";
      FromSalesCrMemoLine@1003 : Record "Sales Cr.Memo Line";
      FromReturnRcptLine@1004 : Record "Return Receipt Line";
      SalesDocType@1000 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Shipment","Posted Invoice","Posted Return Receipt","Posted Credit Memo"';
    BEGIN
      ToSalesHeader.TESTFIELD(Status,ToSalesHeader.Status::Open);
      LinesNotCopied := 0;
      case CurrentMenuType of
        0:
          begin
            CurrPage.PostedShpts.PAGE.GetSelectedLine(FromSalesShptLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopySalesLinesToDoc(
              SalesDocType::"Posted Shipment",ToSalesHeader,
              FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        1:
          begin
            CurrPage.PostedInvoices.PAGE.GetSelectedLine(FromSalesInvLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopySalesLinesToDoc(
              SalesDocType::"Posted Invoice",ToSalesHeader,
              FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        2:
          begin
            CurrPage.PostedReturnRcpts.PAGE.GetSelectedLine(FromReturnRcptLine);
            CopyDocMgt.SetProperties(false,true,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopySalesLinesToDoc(
              SalesDocType::"Posted Return Receipt",ToSalesHeader,
              FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        3:
          begin
            CurrPage.PostedCrMemos.PAGE.GetSelectedLine(FromSalesCrMemoLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopySalesLinesToDoc(
              SalesDocType::"Posted Credit Memo",ToSalesHeader,
              FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
      end;
      CLEAR(CopyDocMgt);

      if LinesNotCopied <> 0 then
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ChangeSubMenu@1(NewMenuType@1000 : Integer);
    BEGIN
      if OldMenuType <> NewMenuType then
        SetSubMenu(OldMenuType,false);
      SetSubMenu(NewMenuType,true);
      OldMenuType := NewMenuType;
      CurrentMenuType := NewMenuType;
    END;

    LOCAL PROCEDURE SetSubMenu@2(MenuType@1000 : Integer;Visible@1001 : Boolean);
    BEGIN
      if ShowRevLinesOnly and (MenuType in [0,1]) then
        ShowRevLinesOnly :=
          CopyDocMgt.IsSalesFillExactCostRevLink(ToSalesHeader,MenuType,ToSalesHeader."Currency Code");
      ShowRevLineEnable := MenuType in [0,1];
      case MenuType of
        0:
          begin
            PostedShptsVisible := Visible;
            CurrPage.PostedShpts.PAGE.Initialize(
              ShowRevLinesOnly,
              CopyDocMgt.IsSalesFillExactCostRevLink(
                ToSalesHeader,MenuType,ToSalesHeader."Currency Code"),Visible);
          end;
        1:
          begin
            PostedInvoicesVisible := Visible;
            CurrPage.PostedInvoices.PAGE.Initialize(
              ToSalesHeader,ShowRevLinesOnly,
              CopyDocMgt.IsSalesFillExactCostRevLink(
                ToSalesHeader,MenuType,ToSalesHeader."Currency Code"),Visible);
          end;
        2:
          PostedReturnRcptsVisible := Visible;
        3:
          PostedCrMemosVisible := Visible;
      end;
    END;

    [External]
    PROCEDURE SetToSalesHeader@4(NewToSalesHeader@1000 : Record "Sales Header");
    BEGIN
      ToSalesHeader := NewToSalesHeader;
    END;

    LOCAL PROCEDURE OptionCaptionServiceTier@1088() : Text[70];
    BEGIN
      exit(Text002);
    END;

    LOCAL PROCEDURE ShowRevLinesOnlyOnAfterValidat@19064108();
    BEGIN
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnPush@19052720();
    BEGIN
      ChangeSubMenu(0);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnValidate@19061499();
    BEGIN
      x0CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnPush@19049100();
    BEGIN
      ChangeSubMenu(1);
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnValidate@19066842();
    BEGIN
      x1CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnPush@19056045();
    BEGIN
      ChangeSubMenu(2);
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnValidate@19009894();
    BEGIN
      x2CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnPush@19036287();
    BEGIN
      ChangeSubMenu(3);
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnValidate@19044768();
    BEGIN
      x3CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtInvoices@3() : Integer;
    VAR
      SalesInvHeader@1000 : Record "Sales Invoice Header";
    BEGIN
      SalesInvHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesInvHeader.SETRANGE("Prepayment Invoice",true);
      exit(SalesInvHeader.COUNT);
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtCrMemos@6() : Integer;
    VAR
      SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";
    BEGIN
      SalesCrMemoHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesCrMemoHeader.SETRANGE("Prepayment Credit Memo",true);
      exit(SalesCrMemoHeader.COUNT);
    END;

    BEGIN
    END.
  }
}

