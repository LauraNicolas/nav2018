OBJECT Page 5146 Assign Activity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Assign Activity;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="To-do";
    DataCaptionExpr=Caption;
    PageType=Card;
    OnInit=BEGIN
             TeamCodeEditable := true;
             SalespersonCodeEditable := true;
             WizardContactNameEditable := true;
             TeamMeetingOrganizerEditable := true;
           END;

    OnOpenPage=BEGIN
                 WizardContactNameEditable := false;
                 IsOnMobile := CURRENTCLIENTTYPE = CLIENTTYPE::Phone;

                 if SalesPurchPerson.GET(GETFILTER("Salesperson Code")) or
                    Team.GET(GETFILTER("Team Code"))
                 then begin
                   SalespersonCodeEditable := false;
                   TeamCodeEditable := false;
                 end;

                 if SalesPurchPerson.GET(GETFILTER("Salesperson Code")) or
                    ("Salesperson Code" <> '') or
                    ("Activity Code" = '')
                 then
                   TeamMeetingOrganizerEditable := false;

                 if Campaign.GET(GETFILTER("Campaign No.")) then
                   "Campaign Description" := Campaign.Description;

                 if SegHeader.GET(GETFILTER("Segment No.")) then
                   "Segment Description" := SegHeader.Description;
               END;

    OnAfterGetRecord=BEGIN
                       WizardContactNameOnFormat(FORMAT("Wizard Contact Name"));
                     END;

    OnQueryClosePage=BEGIN
                       if CloseAction in [ACTION::OK,ACTION::LookupOK] then begin
                         CheckAssignActivityStatus;
                         FinishAssignActivity;
                       end;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      ToolTipML=ENU=Finish assigning the activity.;
                      ApplicationArea=#RelationshipMgmt;
                      Promoted=true;
                      Visible=IsOnMobile;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=BEGIN
                                 CheckAssignActivityStatus;
                                 FinishAssignActivity;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Activity Setup;
                CaptionML=ENU=Activity Setup;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                Name=Activity Code;
                CaptionML=ENU=Activity Code;
                ToolTipML=ENU=Specifies a code for the task activity.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Activity Code";
                TableRelation=Activity.Code;
                OnValidate=BEGIN
                             if not Activity.IncludesMeeting("Activity Code") then begin
                               TeamMeetingOrganizerEditable := false;
                               "Team Meeting Organizer" := ''
                             end else
                               if "Team Code" <> '' then begin
                                 TeamMeetingOrganizerEditable := true;
                                 "Team Meeting Organizer" := ''
                               end;
                           END;

                ImplicitType=Code10 }

    { 9   ;2   ;Field     ;
                Name=Date;
                CaptionML=ENU=Activity Start Date;
                ToolTipML=ENU=Specifies the date when the task should be started. There are certain rules for how dates should be entered found in How to: Enter Dates and Times.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Date;
                ImplicitType=Date }

    { 15  ;2   ;Field     ;
                Name=Wizard Contact Name;
                Lookup=false;
                CaptionML=ENU=Contact No.;
                ToolTipML=ENU=Specifies a contact name from the wizard.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Contact Name";
                TableRelation=Contact;
                Editable=WizardContactNameEditable;
                OnAssistEdit=VAR
                               Cont@1102601001 : Record Contact;
                             BEGIN
                               if ("Wizard Contact Name" = '') and not SegHeader.GET(GETFILTER("Segment No.")) then begin
                                 if Cont.GET("Contact No.") then ;
                                 if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                   VALIDATE("Contact No.",Cont."No.");
                                   CurrPage.SETSELECTIONFILTER(Rec);
                                   "Wizard Contact Name" := Cont.Name;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 16  ;2   ;Field     ;
                Name=Salesperson Code;
                CaptionML=ENU=Salesperson Code;
                ToolTipML=ENU=Specifies the code of the salesperson assigned to the task.;
                ApplicationArea=#Suite,#RelationshipMgmt;
                SourceExpr="Salesperson Code";
                Editable=SalespersonCodeEditable;
                OnValidate=BEGIN
                             if SalesPurchPerson.GET("Salesperson Code") then begin
                               TeamMeetingOrganizerEditable := false;
                               "Team Meeting Organizer" := '';
                               "Team Code" := ''
                             end else
                               if Activity.IncludesMeeting("Activity Code") or
                                  ("Activity Code" = '') and
                                  ("Team Code" <> '')
                               then
                                 TeamMeetingOrganizerEditable := true
                           END;

                ImplicitType=Code20 }

    { 18  ;2   ;Field     ;
                Name=Team Code;
                CaptionML=ENU=Team Code;
                ToolTipML=ENU=Specifies the code of the team to which the task is assigned.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team Code";
                Editable=TeamCodeEditable;
                OnValidate=BEGIN
                             if Team.GET("Team Code") then begin
                               if Activity.IncludesMeeting("Activity Code") then
                                 TeamMeetingOrganizerEditable := true;
                               "Salesperson Code" := '';
                             end;
                             if "Team Code" = '' then begin
                               TeamMeetingOrganizerEditable := false;
                               "Team Meeting Organizer" := ''
                             end;
                           END;

                ImplicitType=Code10 }

    { 26  ;2   ;Field     ;
                Name=Team Meeting Organizer;
                CaptionML=ENU=Meeting Organizer;
                ToolTipML=ENU=Specifies who on the team is the organizer of the task. You can modify the value in this field with the appropriate name when the to-do is for a team.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team Meeting Organizer";
                Editable=TeamMeetingOrganizerEditable;
                OnValidate=VAR
                             SalesPurchPerson@1000 : Record "Salesperson/Purchaser";
                           BEGIN
                             SalesPurchPerson.GET("Team Meeting Organizer");
                           END;

                OnLookup=VAR
                           Salesperson@1000 : Record "Salesperson/Purchaser";
                           SalesPurchPerson@1001 : Page "Salespersons/Purchasers";
                         BEGIN
                           SalesPurchPerson.LOOKUPMODE := true;
                           if SalesPurchPerson.RUNMODAL = ACTION::LookupOK then begin
                             SalesPurchPerson.GETRECORD(Salesperson);
                             if TeamMeetingOrganizerEditable then
                               "Team Meeting Organizer" := Salesperson.Code
                           end;
                         END;

                ImplicitType=Code20 }

    { 13  ;2   ;Field     ;
                Name=Wizard Campaign Description;
                Lookup=false;
                CaptionML=ENU=Campaign;
                ToolTipML=ENU=Specifies a description of the campaign that is related to the task. The description is copied from the campaign card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Campaign Description";
                TableRelation=Campaign;
                Importance=Additional;
                OnAssistEdit=VAR
                               Campaign@1102601001 : Record Campaign;
                             BEGIN
                               if not Campaign.GET(GETFILTER("Campaign No.")) then begin
                                 if Campaign.GET("Campaign No.") then ;
                                 if PAGE.RUNMODAL(0,Campaign) = ACTION::LookupOK then begin
                                   VALIDATE("Campaign No.",Campaign."No.");
                                   "Wizard Campaign Description" := Campaign.Description;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 21  ;2   ;Field     ;
                Name=Segment Description;
                Lookup=false;
                CaptionML=ENU=Create Tasks for Segment;
                ToolTipML=ENU=Specifies a description of the segment related to the task. The description is copied from the segment card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Segment Description";
                TableRelation="Segment Header";
                Importance=Additional;
                Editable=FALSE;
                OnAssistEdit=VAR
                               Segment@1102601000 : Record "Segment Header";
                             BEGIN
                               if Segment.GET("Segment No.") then ;
                               if PAGE.RUNMODAL(0,Segment) = ACTION::LookupOK then begin
                                 VALIDATE("Segment No.",Segment."No.");
                                 "Segment Description" := Segment.Description;
                               end;
                             END;

                ImplicitType=Text50 }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled';
      Cont@1005 : Record Contact;
      SalesPurchPerson@1006 : Record "Salesperson/Purchaser";
      Team@1007 : Record Team;
      Campaign@1008 : Record Campaign;
      SegHeader@1009 : Record "Segment Header";
      Activity@1001 : Record Activity;
      Text005@1013 : TextConst 'ENU=(Multiple)';
      TeamMeetingOrganizerEditable@19012630 : Boolean INDATASET;
      WizardContactNameEditable@19024232 : Boolean INDATASET;
      SalespersonCodeEditable@19071610 : Boolean INDATASET;
      TeamCodeEditable@19004084 : Boolean INDATASET;
      IsOnMobile@1002 : Boolean;

    LOCAL PROCEDURE Caption@1() : Text[260];
    VAR
      CaptionStr@1000 : Text[260];
    BEGIN
      if Cont.GET(GETFILTER("Contact Company No.")) then
        CaptionStr := COPYSTR(Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      if Cont.GET(GETFILTER("Contact No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      if SalesPurchPerson.GET(GETFILTER("Salesperson Code")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + SalesPurchPerson.Code + ' ' + SalesPurchPerson.Name,1,MAXSTRLEN(CaptionStr));
      if Team.GET(GETFILTER("Team Code")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Team.Code + ' ' + Team.Name,1,MAXSTRLEN(CaptionStr));
      if Campaign.GET(GETFILTER("Campaign No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Campaign."No." + ' ' + Campaign.Description,1,MAXSTRLEN(CaptionStr));
      if SegHeader.GET(GETFILTER("Segment No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + SegHeader."No." + ' ' + SegHeader.Description,1,MAXSTRLEN(CaptionStr));
      if CaptionStr = '' then
        CaptionStr := Text000;

      exit(CaptionStr);
    END;

    LOCAL PROCEDURE WizardContactNameOnFormat@19031225(Text@19070643 : Text[1024]);
    BEGIN
      if SegHeader.GET(GETFILTER("Segment No.")) then
        Text := Text005;
    END;

    BEGIN
    END.
  }
}

