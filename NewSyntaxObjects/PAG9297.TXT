OBJECT Page 9297 Inventory - G/L Recon Matrix
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Inventory - G/L Reconciliation;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    DataCaptionExpr=GetCaption;
    PageType=List;
    OnInit=BEGIN
             Field32Visible := true;
             Field31Visible := true;
             Field30Visible := true;
             Field29Visible := true;
             Field28Visible := true;
             Field27Visible := true;
             Field26Visible := true;
             Field25Visible := true;
             Field24Visible := true;
             Field23Visible := true;
             Field22Visible := true;
             Field21Visible := true;
             Field20Visible := true;
             Field19Visible := true;
             Field18Visible := true;
             Field17Visible := true;
             Field16Visible := true;
             Field15Visible := true;
             Field14Visible := true;
             Field13Visible := true;
             Field12Visible := true;
             Field11Visible := true;
             Field10Visible := true;
             Field9Visible := true;
             Field8Visible := true;
             Field7Visible := true;
             Field6Visible := true;
             Field5Visible := true;
             Field4Visible := true;
             Field3Visible := true;
             Field2Visible := true;
             Field1Visible := true;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;

                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 if (LineDimCode = '') and (ColumnDimCode = '') then begin
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 end;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);

                 GetInvtReport.SetReportHeader(InvtReportHeader);
                 GetInvtReport.RUN(InvtReportEntry);
                 SetVisible;
               END;

    OnFindRecord=BEGIN
                   with InvtReportHeader do begin
                     if "Line Option" = "Line Option"::"Balance Sheet" then begin
                       if (ItemFilter = '') and (LocationFilter = '') then begin
                         if ShowWarning then
                           RowIntegerLine.SETRANGE(Number,1,7)
                         else
                           RowIntegerLine.SETRANGE(Number,1,6)
                       end else
                         RowIntegerLine.SETRANGE(Number,1,4)
                     end else
                       if "Line Option" = "Line Option"::"Income Statement" then
                         if (ItemFilter = '') and (LocationFilter = '') then begin
                           if ShowWarning then
                             RowIntegerLine.SETRANGE(Number,1,18)
                           else
                             RowIntegerLine.SETRANGE(Number,1,17)
                         end else
                           RowIntegerLine.SETRANGE(Number,1,15);
                     exit(FindRec("Line Option",Rec,Which,true));
                   end;
                 END;

    OnNextRecord=BEGIN
                   exit(NextRec(InvtReportHeader."Line Option",Rec,Steps,true));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1044 : Integer;
                     BEGIN
                       MATRIX_CurrentColumnOrdinal := 0;
                       while MATRIX_CurrentColumnOrdinal < MATRIX_CurrentNoOfMatrixColumn do begin
                         MATRIX_CurrentColumnOrdinal := MATRIX_CurrentColumnOrdinal + 1;
                         MATRIX_OnAfterGetRecord(MATRIX_CurrentColumnOrdinal);
                       end;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the name.;
                ApplicationArea=#Advanced;
                SourceExpr=Name;
                Style=Strong;
                StyleExpr=TotalEmphasize;
                ImplicitType=Text50 }

    { 1012;2   ;Field     ;
                Name=Field1;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[1];
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Visible=Field1Visible;
                Style=Strong;
                StyleExpr=TotalEmphasize;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1013;2   ;Field     ;
                Name=Field2;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[2];
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Visible=Field2Visible;
                Style=Strong;
                StyleExpr=TotalEmphasize;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1014;2   ;Field     ;
                Name=Field3;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[3];
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Visible=Field3Visible;
                Style=Strong;
                StyleExpr=TotalEmphasize;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1015;2   ;Field     ;
                Name=Field4;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[4];
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Visible=Field4Visible;
                Style=Strong;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1016;2   ;Field     ;
                Name=Field5;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[5];
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Visible=Field5Visible;
                Style=Strong;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1017;2   ;Field     ;
                Name=Field6;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[6];
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Visible=Field6Visible;
                Style=Strong;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1018;2   ;Field     ;
                Name=Field7;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[7];
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Visible=Field7Visible;
                Style=Strong;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1019;2   ;Field     ;
                Name=Field8;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[8];
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Visible=Field8Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1020;2   ;Field     ;
                Name=Field9;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[9];
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Visible=Field9Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1021;2   ;Field     ;
                Name=Field10;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[10];
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Visible=Field10Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1022;2   ;Field     ;
                Name=Field11;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[11];
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Visible=Field11Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1023;2   ;Field     ;
                Name=Field12;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[12];
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Visible=Field12Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

    { 1024;2   ;Field     ;
                Name=Field13;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[13];
                CaptionClass='3,' + MATRIX_CaptionSet[13];
                Visible=Field13Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(13);
                            END;
                             }

    { 1025;2   ;Field     ;
                Name=Field14;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[14];
                CaptionClass='3,' + MATRIX_CaptionSet[14];
                Visible=Field14Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(14);
                            END;
                             }

    { 1026;2   ;Field     ;
                Name=Field15;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[15];
                CaptionClass='3,' + MATRIX_CaptionSet[15];
                Visible=Field15Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(15);
                            END;
                             }

    { 1027;2   ;Field     ;
                Name=Field16;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[16];
                CaptionClass='3,' + MATRIX_CaptionSet[16];
                Visible=Field16Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(16);
                            END;
                             }

    { 1028;2   ;Field     ;
                Name=Field17;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[17];
                CaptionClass='3,' + MATRIX_CaptionSet[17];
                Visible=Field17Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(17);
                            END;
                             }

    { 1029;2   ;Field     ;
                Name=Field18;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[18];
                CaptionClass='3,' + MATRIX_CaptionSet[18];
                Visible=Field18Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(18);
                            END;
                             }

    { 1030;2   ;Field     ;
                Name=Field19;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[19];
                CaptionClass='3,' + MATRIX_CaptionSet[19];
                Visible=Field19Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(19);
                            END;
                             }

    { 1031;2   ;Field     ;
                Name=Field20;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[20];
                CaptionClass='3,' + MATRIX_CaptionSet[20];
                Visible=Field20Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(20);
                            END;
                             }

    { 1032;2   ;Field     ;
                Name=Field21;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[21];
                CaptionClass='3,' + MATRIX_CaptionSet[21];
                Visible=Field21Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(21);
                            END;
                             }

    { 1033;2   ;Field     ;
                Name=Field22;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[22];
                CaptionClass='3,' + MATRIX_CaptionSet[22];
                Visible=Field22Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(22);
                            END;
                             }

    { 1034;2   ;Field     ;
                Name=Field23;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[23];
                CaptionClass='3,' + MATRIX_CaptionSet[23];
                Visible=Field23Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(23);
                            END;
                             }

    { 1035;2   ;Field     ;
                Name=Field24;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[24];
                CaptionClass='3,' + MATRIX_CaptionSet[24];
                Visible=Field24Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(24);
                            END;
                             }

    { 1036;2   ;Field     ;
                Name=Field25;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[25];
                CaptionClass='3,' + MATRIX_CaptionSet[25];
                Visible=Field25Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(25);
                            END;
                             }

    { 1037;2   ;Field     ;
                Name=Field26;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[26];
                CaptionClass='3,' + MATRIX_CaptionSet[26];
                Visible=Field26Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(26);
                            END;
                             }

    { 1038;2   ;Field     ;
                Name=Field27;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[27];
                CaptionClass='3,' + MATRIX_CaptionSet[27];
                Visible=Field27Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(27);
                            END;
                             }

    { 1039;2   ;Field     ;
                Name=Field28;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[28];
                CaptionClass='3,' + MATRIX_CaptionSet[28];
                Visible=Field28Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(28);
                            END;
                             }

    { 1040;2   ;Field     ;
                Name=Field29;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[29];
                CaptionClass='3,' + MATRIX_CaptionSet[29];
                Visible=Field29Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(29);
                            END;
                             }

    { 1041;2   ;Field     ;
                Name=Field30;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[30];
                CaptionClass='3,' + MATRIX_CaptionSet[30];
                Visible=Field30Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(30);
                            END;
                             }

    { 1042;2   ;Field     ;
                Name=Field31;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[31];
                CaptionClass='3,' + MATRIX_CaptionSet[31];
                Visible=Field31Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(31);
                            END;
                             }

    { 1043;2   ;Field     ;
                Name=Field32;
                ApplicationArea=#Advanced;
                SourceExpr=MATRIX_CellData[32];
                CaptionClass='3,' + MATRIX_CaptionSet[32];
                Visible=Field32Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(32);
                            END;
                             }

  }
  CODE
  {
    VAR
      GLSetup@1078 : Record "General Ledger Setup";
      InvtReportHeader@1079 : Record "Inventory Report Header";
      InvtReportEntry@1080 : TEMPORARY Record "Inventory Report Entry";
      RowIntegerLine@1081 : Record Integer;
      ColIntegerLine@1082 : Record Integer;
      MatrixRecords@1002 : ARRAY [32] OF Record "Dimension Code Buffer";
      GetInvtReport@1083 : Codeunit "Get Inventory Report";
      LineDimCode@1084 : Text[20];
      ColumnDimCode@1085 : Text[20];
      DateFilter@1086 : Text;
      Text000@1000 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,3>';
      ItemFilter@1090 : Text;
      LocationFilter@1091 : Text;
      CellAmount@1093 : Decimal;
      GLSetupRead@1096 : Boolean;
      Text004@1097 : TextConst 'ENU=Income Statement';
      Text005@1098 : TextConst 'ENU=Balance Sheet';
      ShowWarning@1099 : Boolean;
      Text006@1100 : TextConst 'ENU=Expected Cost Setup';
      Text007@1101 : TextConst 'ENU=Post Cost to G/L';
      Text008@1102 : TextConst 'ENU=Compression';
      Text009@1103 : TextConst 'ENU=Posting Group';
      Text010@1104 : TextConst 'ENU=Direct Posting';
      Text011@1105 : TextConst 'ENU=Posting Date';
      Text012@1106 : TextConst 'ENU=Closed Fiscal Year';
      Text013@1107 : TextConst 'ENU=Similar Accounts';
      Text014@1108 : TextConst 'ENU=Deleted Accounts';
      Text016@1110 : TextConst 'ENU=The program is not set up to use expected cost posting. Therefore, inventory interim G/L accounts are empty and this causes a difference between inventory and G/L totals.';
      CostAmountsNotPostedTxt@1111 : TextConst 'ENU=Some of the cost amounts in the inventory ledger have not yet been posted to the G/L. You must run the Post Cost to G/L batch job to reconcile the ledgers.';
      EntriesCompressedTxt@1112 : TextConst 'ENU=Some inventory or G/L entries have been date compressed.';
      ReassigningAccountsTxt@1113 : TextConst 'ENU=You have possibly restructured your chart of accounts by re-assigning inventory related accounts in the General or Inventory Posting Setup.';
      PostedDirectlyTxt@1114 : TextConst 'ENU=Some inventory costs have been posted directly to a G/L account, bypassing the inventory subledger.';
      Text021@1115 : TextConst 'ENU=There is a discrepancy between the posting date of the value entry and the associated G/L entry within the reporting period.';
      PostedInClosedFiscalYearTxt@1116 : TextConst 'ENU=Some of the cost amounts are posted in a closed fiscal year. Therefore, the inventory related totals are different from their related G/L accounts in the income statement.';
      Text023@1117 : TextConst 'ENU=You have possibly defined one G/L account for different inventory transactions.';
      Text024@1118 : TextConst 'ENU=You have possibly restructured your chart of accounts by deleting one or more inventory related G/L accounts.';
      MATRIX_CurrentNoOfMatrixColumn@1120 : Integer;
      MATRIX_CellData@1121 : ARRAY [32] OF Text[250];
      MATRIX_CaptionSet@1122 : ARRAY [32] OF Text[80];
      Field1Visible@19069335 : Boolean INDATASET;
      Field2Visible@19014807 : Boolean INDATASET;
      Field3Visible@19062679 : Boolean INDATASET;
      Field4Visible@19074839 : Boolean INDATASET;
      Field5Visible@19043543 : Boolean INDATASET;
      Field6Visible@19067287 : Boolean INDATASET;
      Field7Visible@19067863 : Boolean INDATASET;
      Field8Visible@19039959 : Boolean INDATASET;
      Field9Visible@19008663 : Boolean INDATASET;
      Field10Visible@19006501 : Boolean INDATASET;
      Field11Visible@19052468 : Boolean INDATASET;
      Field12Visible@19013039 : Boolean INDATASET;
      Field13Visible@19079726 : Boolean INDATASET;
      Field14Visible@19077225 : Boolean INDATASET;
      Field15Visible@19035896 : Boolean INDATASET;
      Field16Visible@19003763 : Boolean INDATASET;
      Field17Visible@19049730 : Boolean INDATASET;
      Field18Visible@19007213 : Boolean INDATASET;
      Field19Visible@19053180 : Boolean INDATASET;
      Field20Visible@19014629 : Boolean INDATASET;
      Field21Visible@19060596 : Boolean INDATASET;
      Field22Visible@19021167 : Boolean INDATASET;
      Field23Visible@19047854 : Boolean INDATASET;
      Field24Visible@19045353 : Boolean INDATASET;
      Field25Visible@19004024 : Boolean INDATASET;
      Field26Visible@19011891 : Boolean INDATASET;
      Field27Visible@19057858 : Boolean INDATASET;
      Field28Visible@19015341 : Boolean INDATASET;
      Field29Visible@19061308 : Boolean INDATASET;
      Field30Visible@19010597 : Boolean INDATASET;
      Field31Visible@19056564 : Boolean INDATASET;
      Field32Visible@19017135 : Boolean INDATASET;
      TotalEmphasize@1001 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@1123(DimCode@1000 : Text[30]) : Integer;
    BEGIN
      case DimCode of
        '':
          exit(-1);
        Text005:
          exit(0);
        Text004:
          exit(1);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindRec@1125(DimOption@1000 : '"Balance Sheet","Income Statement"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1126 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          if IsRow then begin
            if EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) then;
            Found := RowIntegerLine.FIND(Which);
            if Found then
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          end else begin
            if EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) then;
            Found := ColIntegerLine.FIND(Which);
            if Found then
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE NextRec@1127(DimOption@1000 : '"Balance Sheet","Income Statement"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1128 : Integer;
    BEGIN
      case DimOption of
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          if IsRow then begin
            if EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) then;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          end else begin
            if EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) then;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          end;
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1129(VAR TheDimValue@1000 : Record Integer;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer";IsRow@1002 : Boolean);
    BEGIN
      with InvtReportEntry do
        case true of
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") and IsRow) or
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") and not IsRow):
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION(Inventory),0,false,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("WIP Inventory"),0,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION(Total),0,true,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("G/L Total"),0,true,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION(Difference),0,true,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION(Warning),0,true,TheDimCodeBuf);
            end;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") and IsRow) or
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") and not IsRow):
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,false,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("WIP To Interim"),0,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,false,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Overhead Applied"),0,false,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,false,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,false,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION(COGS),0,false,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Purchase Variance"),0,false,TheDimCodeBuf);
              10:
                InsertRow('10',FIELDCAPTION("Material Variance"),0,false,TheDimCodeBuf);
              11:
                InsertRow('11',FIELDCAPTION("Capacity Variance"),0,false,TheDimCodeBuf);
              12:
                InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,false,TheDimCodeBuf);
              13:
                InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,false,TheDimCodeBuf);
              14:
                InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,false,TheDimCodeBuf);
              15:
                InsertRow('15',FIELDCAPTION(Total),0,true,TheDimCodeBuf);
              16:
                InsertRow('16',FIELDCAPTION("G/L Total"),0,true,TheDimCodeBuf);
              17:
                InsertRow('17',FIELDCAPTION(Difference),0,true,TheDimCodeBuf);
              18:
                InsertRow('18',FIELDCAPTION(Warning),0,true,TheDimCodeBuf);
            end;
        end
    END;

    LOCAL PROCEDURE InsertRow@1130(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      end;
    END;

    LOCAL PROCEDURE Calculate@1143(MATRIX_ColumnOrdinal@1000 : Integer) Amount : Decimal;
    BEGIN
      GetGLSetup;
      with InvtReportEntry do begin
        case true of
          FIELDCAPTION("G/L Total") in [Name,MatrixRecords[MATRIX_ColumnOrdinal].Name]:
            SETRANGE(Type,Type::"G/L Account");
          FIELDCAPTION(Difference) in [Name,MatrixRecords[MATRIX_ColumnOrdinal].Name],
          FIELDCAPTION(Warning) in [Name,MatrixRecords[MATRIX_ColumnOrdinal].Name]:
            SETRANGE(Type,Type::" ");
          else
            SETRANGE(Type,Type::Item);
        end;
        case InvtReportHeader."Line Option" of
          InvtReportHeader."Line Option"::"Balance Sheet",
          InvtReportHeader."Line Option"::"Income Statement":
            case Name of
              FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                case MatrixRecords[MATRIX_ColumnOrdinal].Name of
                  FIELDCAPTION(Inventory):
                    begin
                      CALCSUMS(Inventory);
                      Amount := Inventory;
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      CALCSUMS("WIP Inventory");
                      Amount := "WIP Inventory";
                    end;
                  FIELDCAPTION("Inventory (Interim)"):
                    begin
                      CALCSUMS("Inventory (Interim)");
                      Amount := "Inventory (Interim)";
                    end;
                end;
              FIELDCAPTION("COGS (Interim)"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION("Inventory (Interim)"),
                                                                  FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("COGS (Interim)");
                    Amount := "COGS (Interim)";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Direct Cost Applied"):
                case MatrixRecords[MATRIX_ColumnOrdinal].Name of
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                    begin
                      CALCSUMS("Direct Cost Applied");
                      Amount := "Direct Cost Applied";
                    end;
                  FIELDCAPTION(Inventory):
                    begin
                      CALCSUMS("Direct Cost Applied Actual");
                      Amount := "Direct Cost Applied Actual";
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      CALCSUMS("Direct Cost Applied WIP");
                      Amount := "Direct Cost Applied WIP";
                    end;
                end;
              FIELDCAPTION("Overhead Applied"):
                case MatrixRecords[MATRIX_ColumnOrdinal].Name of
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                    begin
                      CALCSUMS("Overhead Applied");
                      Amount := "Overhead Applied";
                    end;
                  FIELDCAPTION(Inventory):
                    begin
                      CALCSUMS("Overhead Applied Actual");
                      Amount := "Overhead Applied Actual";
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      CALCSUMS("Overhead Applied WIP");
                      Amount := "Overhead Applied WIP";
                    end;
                end;
              FIELDCAPTION("Inventory Adjmt."):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Inventory Adjmt.");
                    Amount := "Inventory Adjmt.";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Invt. Accrual (Interim)"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION("Inventory (Interim)"),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Invt. Accrual (Interim)");
                    Amount := "Invt. Accrual (Interim)";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION(COGS):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS(COGS);
                    Amount := COGS;
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Purchase Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Purchase Variance");
                    Amount := "Purchase Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Material Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Material Variance");
                    Amount := "Material Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Capacity Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Capacity Variance");
                    Amount := "Capacity Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Subcontracted Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Subcontracted Variance");
                    Amount := "Subcontracted Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Capacity Overhead Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Capacity Overhead Variance");
                    Amount := "Capacity Overhead Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Mfg. Overhead Variance"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Mfg. Overhead Variance");
                    Amount := "Mfg. Overhead Variance";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Direct Cost Applied Actual"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Direct Cost Applied Actual");
                    Amount := "Direct Cost Applied Actual";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Direct Cost Applied WIP"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Direct Cost Applied WIP");
                    Amount := "Direct Cost Applied WIP";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Overhead Applied WIP"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Difference)]
                  then begin
                    CALCSUMS("Overhead Applied WIP");
                    Amount := "Overhead Applied WIP";
                  end else
                    Amount := 0;
                end;
              FIELDCAPTION("Inventory To WIP"):
                if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION("G/L Total"),
                                                                FIELDCAPTION("WIP Inventory"),
                                                                FIELDCAPTION(Inventory)]
                then begin
                  CALCSUMS("Inventory To WIP");
                  Amount := "Inventory To WIP";
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Inventory) then
                    Amount := -Amount;
                end else
                  Amount := 0;
              FIELDCAPTION("WIP To Interim"):
                begin
                  if MatrixRecords[MATRIX_ColumnOrdinal].Name in [FIELDCAPTION("G/L Total"),
                                                                  FIELDCAPTION("WIP Inventory"),
                                                                  FIELDCAPTION("Inventory (Interim)")]
                  then begin
                    CALCSUMS("WIP To Interim");
                    Amount := "WIP To Interim";
                    if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION("WIP Inventory") then
                      Amount := -Amount;
                  end else
                    Amount := 0;
                end;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE GetGLSetup@1144();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE GetWarningText@1145(TheField@1000 : Text[80];ShowType@1001 : 'ReturnAsText,ShowAsMessage') : Text[250];
    BEGIN
      with InvtReportEntry do begin
        if "Expected Cost Posting Warning" then
          if TheField in [FIELDCAPTION("Inventory (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("COGS (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("WIP Inventory")]
          then begin
            if ShowType = ShowType::ReturnAsText then
              exit(Text006);
            exit(Text016);
          end;
        if "Cost is Posted to G/L Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text007);
          exit(CostAmountsNotPostedTxt);
        end;
        if "Compression Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text008);
          exit(EntriesCompressedTxt);
        end;
        if "Posting Group Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text009);
          exit(ReassigningAccountsTxt);
        end;
        if "Direct Postings Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text010);
          exit(PostedDirectlyTxt);
        end;
        if "Posting Date Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text011);
          exit(Text021);
        end;
        if "Closing Period Overlap Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text012);
          exit(PostedInClosedFiscalYearTxt);
        end;
        if "Similar Accounts Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text013);
          exit(Text023);
        end;
        if "Deleted G/L Accounts Warning" then begin
          if ShowType = ShowType::ReturnAsText then
            exit(Text014);
          exit(Text024);
        end;
      end;
    END;

    LOCAL PROCEDURE ShowWarningText@1146(ShowType@1000 : 'ReturnAsText,ShowAsMessage';MATRIX_ColumnOrdinal@1001 : Integer) : Text[250];
    VAR
      Text@1147 : Text[250];
    BEGIN
      with InvtReportEntry do
        case Name of
          FIELDCAPTION(Warning):
            case MatrixRecords[MATRIX_ColumnOrdinal].Name of
              FIELDCAPTION(Inventory):
                if Inventory <> 0 then
                  Text := GetWarningText(FIELDCAPTION(Inventory),ShowType);
              FIELDCAPTION("WIP Inventory"):
                if "WIP Inventory" <> 0 then
                  Text := GetWarningText(FIELDCAPTION("WIP Inventory"),ShowType);
              FIELDCAPTION("Inventory (Interim)"):
                if "Inventory (Interim)" <> 0 then
                  Text := GetWarningText(FIELDCAPTION("Inventory (Interim)"),ShowType);
            end;
          FIELDCAPTION("COGS (Interim)"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "COGS (Interim)" <> 0 then
                Text := GetWarningText(FIELDCAPTION("COGS (Interim)"),ShowType);
          FIELDCAPTION("Direct Cost Applied"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Direct Cost Applied" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied"),ShowType);
          FIELDCAPTION("Overhead Applied"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Overhead Applied" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Overhead Applied"),ShowType);
          FIELDCAPTION("Inventory Adjmt."):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Inventory Adjmt." <> 0 then
                Text := GetWarningText(FIELDCAPTION("Inventory Adjmt."),ShowType);
          FIELDCAPTION("Invt. Accrual (Interim)"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Invt. Accrual (Interim)" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Invt. Accrual (Interim)"),ShowType);
          FIELDCAPTION(COGS):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if COGS <> 0 then
                Text := GetWarningText(FIELDCAPTION(COGS),ShowType);
          FIELDCAPTION("Purchase Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Purchase Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Purchase Variance"),ShowType);
          FIELDCAPTION("Material Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Material Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Material Variance"),ShowType);
          FIELDCAPTION("Capacity Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Capacity Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Capacity Variance"),ShowType);
          FIELDCAPTION("Subcontracted Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Subcontracted Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Subcontracted Variance"),ShowType);
          FIELDCAPTION("Capacity Overhead Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Capacity Overhead Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Capacity Overhead Variance"),ShowType);
          FIELDCAPTION("Mfg. Overhead Variance"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Mfg. Overhead Variance" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Mfg. Overhead Variance"),ShowType);
          FIELDCAPTION("Direct Cost Applied Actual"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Direct Cost Applied Actual" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied Actual"),ShowType);
          FIELDCAPTION("Direct Cost Applied WIP"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Direct Cost Applied WIP" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied WIP"),ShowType);
          FIELDCAPTION("Overhead Applied WIP"):
            if MatrixRecords[MATRIX_ColumnOrdinal].Name = FIELDCAPTION(Warning) then
              if "Overhead Applied WIP" <> 0 then
                Text := GetWarningText(FIELDCAPTION("Overhead Applied WIP"),ShowType);
        end;

      if ShowType = ShowType::ReturnAsText then
        exit(Text);
      MESSAGE(Text);
    END;

    LOCAL PROCEDURE GetCaption@1148() : Text[250];
    VAR
      ObjTransl@1149 : Record "Object Translation";
      SourceTableName@1150 : Text[100];
      LocationTableName@1151 : Text[100];
    BEGIN
      SourceTableName := '';
      LocationTableName := '';
      if ItemFilter <> '' then
        SourceTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,27);
      if LocationFilter <> '' then
        LocationTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,14);
      exit(STRSUBSTNO('%1 %2 %3 %4',SourceTableName,ItemFilter,LocationTableName,LocationFilter));
    END;

    [External]
    PROCEDURE Load@1153(MatrixColumns1@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords1@1006 : ARRAY [32] OF Record "Dimension Code Buffer";CurrentNoOfMatrixColumns@1007 : Integer;ShowWarningLocal@1000 : Boolean;DateFilterLocal@1004 : Text;ItemFilterLocal@1003 : Text;LocationFilterLocal@1002 : Text);
    BEGIN
      COPYARRAY(MATRIX_CaptionSet,MatrixColumns1,1);
      COPYARRAY(MatrixRecords,MatrixRecords1,1);
      MATRIX_CurrentNoOfMatrixColumn := CurrentNoOfMatrixColumns;
      ShowWarning := ShowWarningLocal;
      DateFilter := DateFilterLocal;
      ItemFilter := ItemFilterLocal;
      LocationFilter := LocationFilterLocal;
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1154(MATRIX_ColumnOrdinal@1008 : Integer);
    BEGIN
      GetGLSetup;

      with InvtReportEntry do begin
        if FIELDCAPTION(Warning) = MATRIX_CaptionSet[MATRIX_ColumnOrdinal] then begin
          ShowWarningText(1,MATRIX_ColumnOrdinal);
          exit;
        end;

        RESET;
        if FIELDCAPTION("G/L Total") in [MATRIX_CaptionSet[MATRIX_ColumnOrdinal],Name] then
          SETRANGE(Type,Type::"G/L Account")
        else
          SETRANGE(Type,Type::Item);

        SETFILTER("Posting Date Filter",InvtReportHeader.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Filter",InvtReportHeader.GETFILTER("Location Filter"));

        if FIELDCAPTION(Warning) in [Name,MATRIX_CaptionSet[MATRIX_ColumnOrdinal]] then begin
          ShowWarningText(1,MATRIX_ColumnOrdinal);
          exit;
        end;

        case InvtReportHeader."Line Option" of
          InvtReportHeader."Line Option"::"Balance Sheet",
          InvtReportHeader."Line Option"::"Income Statement":
            case Name of
              FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                case MATRIX_CaptionSet[MATRIX_ColumnOrdinal] of
                  FIELDCAPTION(Inventory):
                    begin
                      SETFILTER(Inventory,'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,Inventory);
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      SETFILTER("WIP Inventory",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"WIP Inventory");
                    end;
                  FIELDCAPTION("Inventory (Interim)"):
                    begin
                      SETFILTER("Inventory (Interim)",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Inventory (Interim)");
                    end;
                end;
              FIELDCAPTION("COGS (Interim)"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("Inventory (Interim)")]
                then begin
                  SETFILTER("COGS (Interim)",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"COGS (Interim)");
                end;
              FIELDCAPTION("Direct Cost Applied"):
                case MATRIX_CaptionSet[MATRIX_ColumnOrdinal] of
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                    begin
                      SETFILTER("Direct Cost Applied",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Direct Cost Applied");
                    end;
                  FIELDCAPTION(Inventory):
                    begin
                      SETFILTER("Direct Cost Applied Actual",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Direct Cost Applied Actual");
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      SETFILTER("Direct Cost Applied WIP",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Direct Cost Applied WIP");
                    end;
                end;
              FIELDCAPTION("Overhead Applied"):
                case MATRIX_CaptionSet[MATRIX_ColumnOrdinal] of
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                    begin
                      SETFILTER("Overhead Applied",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Overhead Applied");
                    end;
                  FIELDCAPTION(Inventory):
                    begin
                      SETFILTER("Overhead Applied Actual",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Overhead Applied Actual");
                    end;
                  FIELDCAPTION("WIP Inventory"):
                    begin
                      SETFILTER("Overhead Applied WIP",'<>%1',0);
                      PAGE.RUN(0,InvtReportEntry,"Overhead Applied WIP");
                    end;
                end;
              FIELDCAPTION("Inventory Adjmt."):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Inventory Adjmt.",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Inventory Adjmt.");
                end;
              FIELDCAPTION("Invt. Accrual (Interim)"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("Inventory (Interim)")]
                then begin
                  SETFILTER("Invt. Accrual (Interim)",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Invt. Accrual (Interim)");
                end;
              FIELDCAPTION(COGS):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER(COGS,'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,COGS);
                end;
              FIELDCAPTION("Purchase Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Purchase Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Purchase Variance");
                end;
              FIELDCAPTION("Material Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Material Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Material Variance");
                end;
              FIELDCAPTION("Capacity Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Capacity Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Capacity Variance");
                end;
              FIELDCAPTION("Subcontracted Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Subcontracted Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Subcontracted Variance");
                end;
              FIELDCAPTION("Capacity Overhead Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Capacity Overhead Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Capacity Overhead Variance");
                end;
              FIELDCAPTION("Mfg. Overhead Variance"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Mfg. Overhead Variance",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Mfg. Overhead Variance");
                end;
              FIELDCAPTION("Direct Cost Applied Actual"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Direct Cost Applied Actual",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Direct Cost Applied Actual");
                end;
              FIELDCAPTION("Direct Cost Applied WIP"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("WIP Inventory")]
                then begin
                  SETFILTER("Direct Cost Applied WIP",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Direct Cost Applied WIP");
                end;
              FIELDCAPTION("Overhead Applied WIP"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("WIP Inventory")]
                then begin
                  SETFILTER("Overhead Applied WIP",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Overhead Applied WIP");
                end;
              FIELDCAPTION("Inventory To WIP"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Inventory)]
                then begin
                  SETFILTER("Inventory To WIP",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"Inventory To WIP");
                end;
              FIELDCAPTION("WIP To Interim"):
                if MATRIX_CaptionSet[MATRIX_ColumnOrdinal] in [FIELDCAPTION("G/L Total"),
                                                               FIELDCAPTION("WIP Inventory"),
                                                               FIELDCAPTION("Inventory (Interim)")]
                then begin
                  SETFILTER("WIP To Interim",'<>%1',0);
                  PAGE.RUN(0,InvtReportEntry,"WIP To Interim");
                end;
            end;
        end;
        RESET;
      end;
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1156(MATRIX_ColumnOrdinal@1010 : Integer);
    BEGIN
      CellAmount := Calculate(MATRIX_ColumnOrdinal);
      if CellAmount <> 0 then
        MATRIX_CellData[MATRIX_ColumnOrdinal] := FORMAT(CellAmount,0,Text000)
      else
        MATRIX_CellData[MATRIX_ColumnOrdinal] := '';

      with InvtReportEntry do begin
        TotalEmphasize := "Show in Bold";

        if FIELDCAPTION(Warning) in [Name,MatrixRecords[MATRIX_ColumnOrdinal].Name] then begin
          SETRANGE(Type,Type::" ");
          if FINDFIRST then;
          case InvtReportHeader."Line Option" of
            InvtReportHeader."Line Option"::"Balance Sheet",
            InvtReportHeader."Line Option"::"Income Statement":
              MATRIX_CellData[MATRIX_ColumnOrdinal] := ShowWarningText(0,MATRIX_ColumnOrdinal);
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE SetVisible@6();
    BEGIN
      Field1Visible := MATRIX_CaptionSet[1] <> '';
      Field2Visible := MATRIX_CaptionSet[2] <> '';
      Field3Visible := MATRIX_CaptionSet[3] <> '';
      Field4Visible := MATRIX_CaptionSet[4] <> '';
      Field5Visible := MATRIX_CaptionSet[5] <> '';
      Field6Visible := MATRIX_CaptionSet[6] <> '';
      Field7Visible := MATRIX_CaptionSet[7] <> '';
      Field8Visible := MATRIX_CaptionSet[8] <> '';
      Field9Visible := MATRIX_CaptionSet[9] <> '';
      Field10Visible := MATRIX_CaptionSet[10] <> '';
      Field11Visible := MATRIX_CaptionSet[11] <> '';
      Field12Visible := MATRIX_CaptionSet[12] <> '';
      Field13Visible := MATRIX_CaptionSet[13] <> '';
      Field14Visible := MATRIX_CaptionSet[14] <> '';
      Field15Visible := MATRIX_CaptionSet[15] <> '';
      Field16Visible := MATRIX_CaptionSet[16] <> '';
      Field17Visible := MATRIX_CaptionSet[17] <> '';
      Field18Visible := MATRIX_CaptionSet[18] <> '';
      Field19Visible := MATRIX_CaptionSet[19] <> '';
      Field20Visible := MATRIX_CaptionSet[20] <> '';
      Field21Visible := MATRIX_CaptionSet[21] <> '';
      Field22Visible := MATRIX_CaptionSet[22] <> '';
      Field23Visible := MATRIX_CaptionSet[23] <> '';
      Field24Visible := MATRIX_CaptionSet[24] <> '';
      Field25Visible := MATRIX_CaptionSet[25] <> '';
      Field26Visible := MATRIX_CaptionSet[26] <> '';
      Field27Visible := MATRIX_CaptionSet[27] <> '';
      Field28Visible := MATRIX_CaptionSet[28] <> '';
      Field29Visible := MATRIX_CaptionSet[29] <> '';
      Field30Visible := MATRIX_CaptionSet[30] <> '';
      Field31Visible := MATRIX_CaptionSet[31] <> '';
      Field32Visible := MATRIX_CaptionSet[32] <> '';
    END;

    BEGIN
    END.
  }
}

