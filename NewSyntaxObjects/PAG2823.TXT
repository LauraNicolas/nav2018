OBJECT Page 2823 Native - Email Preview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=nativeInvoicingEmailPreview];
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="Attachment Entity Buffer";
    PageType=List;
    SourceTableTemporary=true;
    OnFindRecord=VAR
                   DocumentId@1005 : GUID;
                   DocumentIdFilter@1001 : Text;
                   FilterView@1000 : Text;
                 BEGIN
                   if not IsGenerated then begin
                     FilterView := GETVIEW;
                     DocumentIdFilter := GETFILTER("Document Id");
                     if DocumentIdFilter = '' then
                       DocumentIdFilter := GETFILTER(Id);
                     SETVIEW(FilterView);
                     DocumentId := GetDocumentId(DocumentIdFilter);
                     if ISNULLGUID(DocumentId) then
                       exit(false);
                     SetCalculatedFields(DocumentId);
                     IsGenerated := true;
                   end;
                   exit(true);
                 END;

    OnModifyRecord=VAR
                     EmailParameter@1000 : Record "Email Parameter";
                   BEGIN
                     if xRec."Document Id" <> "Document Id" then
                       ERROR(CannotChangeDocumentIdErr);

                     if xRec."File Name" <> Subject then
                       EmailParameter.SaveParameterValueWithReportUsage(
                         DocumentNo,ReportId,EmailParameter."Parameter Type"::Subject,Subject);
                   END;

    ODataKeyFields="Document Id";
  }
  CONTROLS
  {
    { 18  ;0   ;Container ;
                Name=Container18;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 1   ;2   ;Field     ;
                Name=documentId;
                CaptionML=[@@@={Locked};
                           ENU=documentId];
                ApplicationArea=#All;
                SourceExpr="Document Id";
                ImplicitType=GUID }

    { 7   ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=email];
                ToolTipML=ENU=Specifies email address.;
                ApplicationArea=#All;
                SourceExpr=Email;
                Editable=FALSE;
                ImplicitType=Text250 }

    { 8   ;2   ;Field     ;
                Name=cc;
                CaptionML=ENU=cc;
                ToolTipML=ENU=Specifies CC address.;
                ApplicationArea=#All;
                SourceExpr=CC;
                Editable=FALSE;
                ImplicitType=Text250 }

    { 9   ;2   ;Field     ;
                Name=bcc;
                CaptionML=ENU=bcc;
                ToolTipML=ENU=Specifies BCC address.;
                ApplicationArea=#All;
                SourceExpr=BCC;
                Editable=FALSE;
                ImplicitType=Text250 }

    { 2   ;2   ;Field     ;
                Name=subject;
                CaptionML=ENU=subject;
                ToolTipML=ENU=Specifies e-mail subject.;
                ApplicationArea=#All;
                SourceExpr=Subject;
                OnValidate=BEGIN
                             if Subject = '' then
                               ERROR(EmptyEmailSubjectErr);
                           END;

                ImplicitType=Text250 }

    { 3   ;2   ;Field     ;
                Name=body;
                CaptionML=ENU=body;
                ToolTipML=ENU=Specifies e-mail body.;
                ApplicationArea=#All;
                SourceExpr=Body;
                Editable=FALSE;
                ImplicitType=Text }

  }
  CODE
  {
    VAR
      CannotChangeDocumentIdErr@1011 : TextConst '@@@={Locked};ENU=The documentId cannot be changed.';
      CannotFindDocumentErr@1006 : TextConst '@@@={Locked};ENU=The document %1 cannot be found.';
      CannotOpenFileErr@1005 : TextConst '@@@={Locked};ENU=Opening the file failed because of the following error: \%1.';
      DocumentIDNotSpecifiedForAttachmentsErr@1010 : TextConst '@@@={Locked};ENU=You must specify a document ID.';
      DocumentDoesNotExistErr@1009 : TextConst '@@@={Locked};ENU=No document with the specified ID exists.';
      IsGenerated@1002 : Boolean;
      Email@1004 : Text[250];
      CancelledDocumentErr@1000 : TextConst '@@@={Locked};ENU=The document has been cancelled.';
      CC@1015 : Text[250];
      BCC@1016 : Text[250];
      Subject@1007 : Text[250];
      Body@1008 : Text;
      EmptyEmailSubjectErr@1012 : TextConst '@@@={Locked};ENU=The email subject cannot be empty.';
      DocumentNo@1013 : Code[20];
      ReportId@1014 : Integer;

    LOCAL PROCEDURE GetDocumentId@5(DocumentIdFilter@1001 : Text) : GUID;
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesInvoiceHeader@1004 : Record "Sales Invoice Header";
      DataTypeManagement@1006 : Codeunit "Data Type Management";
      DocumentRecordRef@1000 : RecordRef;
      DocumentIdFieldRef@1005 : FieldRef;
      DocumentId@1002 : GUID;
    BEGIN
      if DocumentIdFilter = '' then
        ERROR(DocumentIDNotSpecifiedForAttachmentsErr);

      SalesHeader.SETFILTER(Id,DocumentIdFilter);
      if SalesHeader.FINDFIRST then
        DocumentRecordRef.GETTABLE(SalesHeader)
      else begin
        SalesInvoiceHeader.SETFILTER(Id,DocumentIdFilter);
        if SalesInvoiceHeader.FINDFIRST then begin
          DocumentRecordRef.GETTABLE(SalesInvoiceHeader);
          SalesInvoiceHeader.CALCFIELDS(Cancelled);
          if SalesInvoiceHeader.Cancelled then
            ERROR(CancelledDocumentErr);
        end else
          ERROR(DocumentDoesNotExistErr);
      end;

      DataTypeManagement.FindFieldByName(DocumentRecordRef,DocumentIdFieldRef,SalesHeader.FIELDNAME(Id));
      EVALUATE(DocumentId,FORMAT(DocumentIdFieldRef.VALUE));

      exit(DocumentId);
    END;

    LOCAL PROCEDURE SetCalculatedFields@21(DocumentId@1009 : GUID);
    BEGIN
      GetEmailParameters(DocumentId,DocumentNo,ReportId,Email,CC,BCC,Subject,Body);

      INIT;
      Id := DocumentId;
      "Document Id" := DocumentId;
      "File Name" := Subject;
      Type := Type::Email;
      INSERT(true);
    END;

    LOCAL PROCEDURE GetEmailParameters@1(DocumentId@1009 : GUID;VAR DocumentNo@1019 : Code[20];VAR ReportId@1018 : Integer;VAR EmailAddress@1011 : Text[250];VAR EmailCcAddress@1024 : Text[250];VAR EmailBccAddress@1020 : Text[250];VAR EmailSubject@1004 : Text[250];VAR EmailBody@1010 : Text);
    VAR
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
      SalesHeader@1006 : Record "Sales Header";
      ReportSelections@1005 : Record "Report Selections";
      TempReportSelections@1012 : TEMPORARY Record "Report Selections";
      O365EmailSetup@1021 : Record "O365 Email Setup";
      DocumentMailing@1015 : Codeunit "Document-Mailing";
      NativeReports@1013 : Codeunit "Native - Reports";
      File@1007 : File;
      InStream@1008 : InStream;
      RecordVariant@1000 : Variant;
      CustomerNo@1003 : Code[20];
      FilePath@1001 : Text[250];
      DocumentName@1016 : Text[250];
      BodyLoaded@1022 : Boolean;
    BEGIN
      SalesHeader.SETRANGE(Id,DocumentId);
      if SalesHeader.FINDFIRST then
        case SalesHeader."Document Type" of
          SalesHeader."Document Type"::Invoice:
            begin
              RecordVariant := SalesHeader;
              DocumentName := SalesHeader.GetDocTypeTxt;
              DocumentNo := SalesHeader."No.";
              CustomerNo := SalesHeader."Sell-to Customer No.";
              ReportId := NativeReports.DraftSalesInvoiceReportId;
            end;
          SalesHeader."Document Type"::Quote:
            begin
              RecordVariant := SalesHeader;
              DocumentName := SalesHeader.GetDocTypeTxt;
              DocumentNo := SalesHeader."No.";
              CustomerNo := SalesHeader."Sell-to Customer No.";
              ReportId := NativeReports.SalesQuoteReportId;
            end;
          else
            ERROR(CannotFindDocumentErr,DocumentId);
        end
      else begin
        SalesInvoiceHeader.SETRANGE(Id,DocumentId);
        if not SalesInvoiceHeader.FINDFIRST then
          ERROR(CannotFindDocumentErr,DocumentId);
        DocumentName := SalesInvoiceHeader.GetDefaultEmailDocumentName;
        RecordVariant := SalesInvoiceHeader;
        DocumentNo := SalesInvoiceHeader."No.";
        CustomerNo := SalesInvoiceHeader."Sell-to Customer No.";
        ReportId := NativeReports.PostedSalesInvoiceReportId;
      end;

      EmailSubject := DocumentMailing.GetEmailSubject(DocumentNo,DocumentName,ReportId);

      if ReportSelections.FindEmailBodyUsage(ReportId,CustomerNo,TempReportSelections) then
        if ReportSelections.GetEmailBody(FilePath,ReportId,RecordVariant,CustomerNo,EmailAddress) then begin
          if not File.OPEN(FilePath) then
            ERROR(CannotOpenFileErr,GETLASTERRORTEXT);
          File.CREATEINSTREAM(InStream);
          InStream.READTEXT(EmailBody);
          File.CLOSE;
          if ERASE(FilePath) then;
          BodyLoaded := true;
        end;

      if not BodyLoaded then
        EmailAddress := ReportSelections.GetCustEmailAddress(CustomerNo);

      EmailCcAddress := O365EmailSetup.GetCCAddressesFromO365EmailSetup;
      EmailBccAddress := O365EmailSetup.GetBCCAddressesFromO365EmailSetup;
    END;

    BEGIN
    END.
  }
}

