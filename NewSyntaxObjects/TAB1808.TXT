OBJECT Table 1808 Aggregated Assisted Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Aggregated Assisted Setup;
  }
  FIELDS
  {
    { 1   ;   ;Page ID             ;Integer       ;CaptionML=ENU=Page ID }
    { 2   ;   ;Name                ;Text250       ;CaptionML=ENU=Name }
    { 3   ;   ;Order               ;Integer       ;CaptionML=ENU=Order }
    { 4   ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU="Not Completed,Completed,Not Started,Seen,Watched,Read, ";
                                                   OptionString="Not Completed",Completed,"Not Started",Seen,Watched,Read," " }
    { 5   ;   ;Visible             ;Boolean       ;CaptionML=ENU=Visible }
    { 8   ;   ;Icon                ;Media         ;CaptionML=ENU=Icon }
    { 9   ;   ;Item Type           ;Option        ;InitValue="Setup and Help";
                                                   CaptionML=ENU=Item Type;
                                                   OptionCaptionML=ENU=" ,Group,Setup and Help";
                                                   OptionString=" ",Group,"Setup and Help" }
    { 12  ;   ;Assisted Setup Page ID;Integer     ;CaptionML=ENU=Assisted Setup Page ID }
    { 17  ;   ;External Assisted Setup;Boolean    ;CaptionML=ENU=External Assisted Setup }
    { 18  ;   ;Record ID           ;RecordID      ;CaptionML=ENU=Record ID }
  }
  KEYS
  {
    {    ;"Page ID"                               ;Clustered=true }
    {    ;"External Assisted Setup",Order,Visible  }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Name,Status,Icon                         }
  }
  CODE
  {
    VAR
      RunSetupAgainQst@1001 : TextConst '@@@="%1 = Assisted Setup Name";ENU=You have already completed the %1 assisted setup guide. Do you want to run it again?';

    [External]
    PROCEDURE RunAssistedSetup@4();
    VAR
      AssistedSetup@1000 : Record "Assisted Setup";
    BEGIN
      if "Item Type" <> "Item Type"::"Setup and Help" then
        exit;

      if Status = Status::Completed then
        case "Page ID" of
          PAGE::"Assisted Company Setup Wizard":
            AssistedSetup.HandleOpenCompletedAssistedCompanySetupWizard;
          else
            if not CONFIRM(RunSetupAgainQst,false,Name) then
              exit;
        end;

      PAGE.RUNMODAL("Assisted Setup Page ID");
      OnUpdateAssistedSetupStatus(Rec);
    END;

    [External]
    PROCEDURE AddExtensionAssistedSetup@24(PageID@1007 : Integer;AssistantName@1006 : Text[250];AssistantVisible@1004 : Boolean;AssistedSetupRecordID@1001 : RecordID;AssistedSetupStatus@1000 : Option;AssistedSetupIconCode@1002 : Code[50]);
    VAR
      AssistedSetupIcons@1003 : Record "Assisted Setup Icons";
    BEGIN
      if not GET(PageID) then begin
        CLEAR(Rec);
        "Page ID" := PageID;
        Visible := AssistantVisible;
        INSERT(true);
      end;

      "Page ID" := PageID;
      Name := AssistantName;
      Order := GetNextSortingOrder;
      "Item Type" := "Item Type"::"Setup and Help";

      "Assisted Setup Page ID" := PageID;
      "External Assisted Setup" := true;
      "Record ID" := AssistedSetupRecordID;
      Status := AssistedSetupStatus;

      if AssistedSetupIcons.GET(AssistedSetupIconCode) then
        Icon := AssistedSetupIcons.Image;

      MODIFY(true);
    END;

    [External]
    PROCEDURE InsertAssistedSetupIcon@5(AssistedSetupIconCode@1003 : Code[50];IconInStream@1000 : InStream);
    VAR
      AssistedSetupIcons@1002 : Record "Assisted Setup Icons";
    BEGIN
      if not AssistedSetupIcons.GET(AssistedSetupIconCode) then begin
        AssistedSetupIcons.INIT;
        AssistedSetupIcons."No." := AssistedSetupIconCode;
        AssistedSetupIcons.Image.IMPORTSTREAM(IconInStream,AssistedSetupIconCode);
        AssistedSetupIcons.INSERT(true);
      end else begin
        AssistedSetupIcons.Image.IMPORTSTREAM(IconInStream,AssistedSetupIconCode);
        AssistedSetupIcons.MODIFY(true);
      end;
    END;

    [Integration]
    [External]
    PROCEDURE OnRegisterAssistedSetup@13(VAR TempAggregatedAssistedSetup@1000 : TEMPORARY Record "Aggregated Assisted Setup");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnUpdateAssistedSetupStatus@8(VAR TempAggregatedAssistedSetup@1000 : TEMPORARY Record "Aggregated Assisted Setup");
    BEGIN
    END;

    LOCAL PROCEDURE GetNextSortingOrder@35() SortingOrder : Integer;
    VAR
      AssistedSetup@1000 : Record "Assisted Setup";
    BEGIN
      SortingOrder := 1;

      AssistedSetup.SETCURRENTKEY(Order);
      if AssistedSetup.FINDLAST then
        SortingOrder := AssistedSetup.Order + 1;
    END;

    [External]
    PROCEDURE SetStatus@3(VAR TempAggregatedAssistedSetup@1002 : TEMPORARY Record "Aggregated Assisted Setup";EntryId@1000 : Integer;ItemStatus@1001 : Option);
    BEGIN
      TempAggregatedAssistedSetup.GET(EntryId);
      TempAggregatedAssistedSetup.Status := ItemStatus;
      TempAggregatedAssistedSetup.MODIFY;
    END;

    BEGIN
    END.
  }
}

