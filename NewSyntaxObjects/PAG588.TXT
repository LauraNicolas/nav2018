OBJECT Page 588 XBRL Schemas
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=XBRL Schemas;
    SourceTable="XBRL Schema";
    DataCaptionFields="XBRL Taxonomy Name";
    PageType=List;
    AutoSplitKey=true;
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 11      ;1   ;ActionGroup;
                      Name=&Schema;
                      CaptionML=ENU=&Schema;
                      Image=Template }
      { 12      ;2   ;Action    ;
                      Name=Linkbases;
                      CaptionML=ENU=Linkbases;
                      ToolTipML=ENU=View a new taxonomy linkbase or a previously imported taxonomy linkbase that you want to update or export. The window contains a line for each schema that you have imported.;
                      ApplicationArea=#XBRL;
                      RunObject=Page "XBRL Linkbases";
                      RunPageLink="XBRL Taxonomy Name"=FIELD("XBRL Taxonomy Name"),
                                  "XBRL Schema Line No."=FIELD("Line No.");
                      Promoted=true;
                      Image=LinkWithExisting;
                      PromotedCategory=Process }
      { 13      ;2   ;Separator ;
                      Name=Separator13 }
      { 14      ;2   ;Action    ;
                      Name=Import;
                      Ellipsis=true;
                      CaptionML=ENU=Import;
                      ToolTipML=ENU=Import an XBRL taxonomy into your company database by first importing one or more schemas in .sad format. After you have completed the import of both schemas and linkbases and have applied the linkbases to the schema, you can set up the lines and map the general ledger accounts in the chart of accounts to the appropriate taxonomy lines.;
                      ApplicationArea=#XBRL;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 XMLExists@1000 : Boolean;
                                 FileName@1002 : Text;
                                 i@1003 : Integer;
                               BEGIN
                                 CALCFIELDS(XSD);
                                 XMLExists := XSD.HASVALUE;
                                 FileName := FileMgt.BLOBImport(TempBlob,'*.xsd');
                                 if FileName = '' then
                                   exit;
                                 XSD := TempBlob.Blob;
                                 if XMLExists then
                                   if not CONFIRM(Text001,false) then
                                     exit;
                                 if STRPOS(FileName,'\') <> 0 then begin
                                   i := STRLEN(FileName);
                                   while (i > 0) and (FileName[i] <> '\') do
                                     i := i - 1;
                                 end;
                                 if i > 0 then begin
                                   schemaLocation := CONVERTSTR(COPYSTR(FileName,i + 1),' ','_');
                                   "Folder Name" := COPYSTR(FileName,1,i);
                                 end else
                                   schemaLocation := CONVERTSTR(FileName,' ','_');
                                 CurrPage.SAVERECORD;
                                 CODEUNIT.RUN(CODEUNIT::"XBRL Import Taxonomy Spec. 2",Rec);
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=E&xport;
                      Ellipsis=true;
                      CaptionML=ENU=E&xport;
                      ToolTipML=ENU=Export the XBRL schema to an .xsd file for reuse in another database.;
                      ApplicationArea=#XBRL;
                      Image=Export;
                      OnAction=BEGIN
                                 CALCFIELDS(XSD);
                                 if XSD.HASVALUE then begin
                                   TempBlob.Blob := XSD;
                                   FileMgt.BLOBExport(TempBlob,'*.xsd',true);
                                 end;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the XBRL schema.;
                ApplicationArea=#XBRL;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 4   ;2   ;Field     ;
                Name=targetNamespace;
                ToolTipML=ENU=Specifies the uniform resource identifier (URI) for the namespace if there is an overall targetNamespace for this taxonomy.;
                ApplicationArea=#XBRL;
                SourceExpr=targetNamespace;
                Visible=FALSE;
                ImplicitType=Text250 }

    { 6   ;2   ;Field     ;
                Name=schemaLocation;
                ToolTipML=ENU=Specifies the uniform resource identifier (URI) of the schema file.;
                ApplicationArea=#XBRL;
                SourceExpr=schemaLocation;
                Visible=FALSE;
                ImplicitType=Text250 }

    { 16  ;2   ;Field     ;
                Name=XSD File Imported;
                CaptionML=ENU=XSD File Imported;
                ToolTipML=ENU=Specifies if an XBRL schema has been imported.;
                ApplicationArea=#XBRL;
                SourceExpr=XSD.HASVALUE;
                Editable=FALSE }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Do you want to replace the existing definition?';
      TempBlob@1001 : Record TempBlob;
      FileMgt@1002 : Codeunit "File Management";

    BEGIN
    END.
  }
}

