OBJECT Table 1034 Job Planning Line - Calendar
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               UID := CREATEGUID;
             END;

    OnModify=BEGIN
               Sequence += 1;
             END;

    CaptionML=ENU=Job Planning Line - Calendar;
  }
  FIELDS
  {
    { 1   ;   ;Job No.             ;Code20        ;TableRelation="Job Planning Line"."Job No.";
                                                   CaptionML=ENU=Job No. }
    { 2   ;   ;Job Task No.        ;Code20        ;TableRelation="Job Planning Line"."Job Task No.";
                                                   CaptionML=ENU=Job Task No. }
    { 3   ;   ;Planning Line No.   ;Integer       ;TableRelation="Job Planning Line"."Line No.";
                                                   CaptionML=ENU=Planning Line No. }
    { 4   ;   ;Resource No.        ;Code20        ;TableRelation=Resource."No.";
                                                   CaptionML=ENU=Resource No. }
    { 6   ;   ;Planning Date       ;Date          ;CaptionML=ENU=Planning Date }
    { 7   ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 9   ;   ;UID                 ;GUID          ;CaptionML=ENU=UID }
    { 10  ;   ;Sequence            ;Integer       ;InitValue=1;
                                                   CaptionML=ENU=Sequence }
  }
  KEYS
  {
    {    ;"Job No.","Job Task No.","Planning Line No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE HasBeenSent@1(JobPlanningLine@1000 : Record "Job Planning Line") : Boolean;
    BEGIN
      exit(GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No."));
    END;

    [External]
    PROCEDURE InsertOrUpdate@5(JobPlanningLine@1000 : Record "Job Planning Line");
    BEGIN
      if not HasBeenSent(JobPlanningLine) then begin
        INIT;
        "Job No." := JobPlanningLine."Job No.";
        "Job Task No." := JobPlanningLine."Job Task No.";
        "Planning Line No." := JobPlanningLine."Line No.";
        "Resource No." := JobPlanningLine."No.";
        Quantity := JobPlanningLine.Quantity;
        "Planning Date" := JobPlanningLine."Planning Date";
        Description := JobPlanningLine.Description;
        INSERT(true);
      end else begin
        Quantity := JobPlanningLine.Quantity;
        "Planning Date" := JobPlanningLine."Planning Date";
        Description := JobPlanningLine.Description;
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE ShouldSendCancellation@6(JobPlanningLine@1000 : Record "Job Planning Line") : Boolean;
    VAR
      LocalJobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      if not LocalJobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.") then
        exit(true);
      if HasBeenSent(JobPlanningLine) then
        exit(JobPlanningLine."No." <> "Resource No.");
    END;

    [External]
    PROCEDURE ShouldSendRequest@3(JobPlanningLine@1000 : Record "Job Planning Line") ShouldSend : Boolean;
    VAR
      LocalJobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      ShouldSend := true;
      if not LocalJobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.") then
        exit(false);
      if HasBeenSent(JobPlanningLine) then
        ShouldSend :=
          ("Resource No." <> JobPlanningLine."No.") or
          ("Planning Date" <> JobPlanningLine."Planning Date") or
          (Quantity <> JobPlanningLine.Quantity) or
          (Description <> JobPlanningLine.Description);
    END;

    BEGIN
    END.
  }
}

