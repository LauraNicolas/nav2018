OBJECT Codeunit 952 Time Sheet Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TimeSheetMgt@1001 : Codeunit "Time Sheet Management";
      Text001@1002 : TextConst 'ENU=Time Sheet Resource';
      MeasureType@1003 : 'Open,Submitted,Rejected,Approved,Scheduled,Posted,"Not Posted",Resource,Job,Service,Absence,"Assembly Order"';

    [External]
    PROCEDURE OnOpenPage@2(VAR TimeSheetChartSetup@1000 : Record "Time Sheet Chart Setup");
    BEGIN
      with TimeSheetChartSetup do
        if not GET(USERID) then begin
          "User ID" := USERID;
          "Starting Date" := TimeSheetMgt.FindNearestTimeSheetStartDate(WORKDATE);
          INSERT;
        end;
    END;

    [Internal]
    PROCEDURE UpdateData@6(VAR BusChartBuf@1004 : Record "Business Chart Buffer");
    VAR
      TimeSheetChartSetup@1001 : Record "Time Sheet Chart Setup";
      BusChartMapColumn@1005 : Record "Business Chart Map";
      BusChartMapMeasure@1003 : Record "Business Chart Map";
    BEGIN
      TimeSheetChartSetup.GET(USERID);

      with BusChartBuf do begin
        Initialize;
        SetXAxis(Text001,"Data Type"::String);

        AddColumns(BusChartBuf);
        AddMeasures(BusChartBuf,TimeSheetChartSetup);

        if FindFirstMeasure(BusChartMapMeasure) then
          repeat
            if FindFirstColumn(BusChartMapColumn) then
              repeat
                SetValue(
                  BusChartMapMeasure.Name,
                  BusChartMapColumn.Index,
                  CalcAmount(
                    TimeSheetChartSetup,
                    BusChartMapColumn.Name,
                    TimeSheetChartSetup.MeasureIndex2MeasureType(BusChartMapMeasure.Index)));
              until not NextColumn(BusChartMapColumn);

          until not NextMeasure(BusChartMapMeasure);
      end;
    END;

    [Internal]
    PROCEDURE DrillDown@4(VAR BusChartBuf@1002 : Record "Business Chart Buffer");
    VAR
      TimeSheetChartSetup@1006 : Record "Time Sheet Chart Setup";
      ResCapacityEntry@1005 : Record "Res. Capacity Entry";
      TimeSheetHeader@1001 : Record "Time Sheet Header";
      TimeSheetLine@1003 : Record "Time Sheet Line";
      TimeSheetPostingEntry@1008 : Record "Time Sheet Posting Entry";
      Value@1004 : Variant;
      ResourceNo@1000 : Code[20];
      CurrMeasureType@1007 : Integer;
    BEGIN
      BusChartBuf.GetXValue(BusChartBuf."Drill-Down X Index",Value);
      ResourceNo := FORMAT(Value);
      TimeSheetChartSetup.GET(USERID);

      CurrMeasureType := TimeSheetChartSetup.MeasureIndex2MeasureType(BusChartBuf."Drill-Down Measure Index");
      if CurrMeasureType = MeasureType::Scheduled then begin
        ResCapacityEntry.SETRANGE("Resource No.",ResourceNo);
        ResCapacityEntry.SETRANGE(Date,TimeSheetChartSetup."Starting Date",TimeSheetChartSetup.GetEndingDate);
        PAGE.RUN(PAGE::"Res. Capacity Entries",ResCapacityEntry);
      end else begin
        TimeSheetHeader.SETRANGE("Starting Date",TimeSheetChartSetup."Starting Date");
        TimeSheetHeader.SETRANGE("Resource No.",ResourceNo);
        if TimeSheetHeader.FINDFIRST then
          if CurrMeasureType = MeasureType::Posted then begin
            TimeSheetPostingEntry.FILTERGROUP(2);
            TimeSheetPostingEntry.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
            TimeSheetPostingEntry.FILTERGROUP(0);
            PAGE.RUN(PAGE::"Time Sheet Posting Entries",TimeSheetPostingEntry);
          end else begin
            TimeSheetMgt.SetTimeSheetNo(TimeSheetHeader."No.",TimeSheetLine);
            case TimeSheetChartSetup."Show by" of
              TimeSheetChartSetup."Show by"::Status:
                TimeSheetLine.SETRANGE(Status,CurrMeasureType);
              TimeSheetChartSetup."Show by"::Type:
                TimeSheetLine.SETRANGE(Type,BusChartBuf."Drill-Down Measure Index" + 1);
            end;
            PAGE.RUN(PAGE::"Manager Time Sheet",TimeSheetLine);
          end;
      end;
    END;

    LOCAL PROCEDURE AddColumns@3(VAR BusChartBuf@1000 : Record "Business Chart Buffer");
    VAR
      UserSetup@1003 : Record "User Setup";
      Resource@1001 : Record Resource;
    BEGIN
      if not UserSetup.GET(USERID) then
        exit;

      Resource.SETRANGE("Use Time Sheet",true);
      if not UserSetup."Time Sheet Admin." then
        Resource.SETRANGE("Time Sheet Approver User ID",USERID);
      if Resource.FINDSET then
        repeat
          BusChartBuf.AddColumn(Resource."No.");
        until Resource.NEXT = 0;
    END;

    LOCAL PROCEDURE AddMeasures@7(VAR BusChartBuf@1000 : Record "Business Chart Buffer";TimeSheetChartSetup@1001 : Record "Time Sheet Chart Setup");
    BEGIN
      with BusChartBuf do begin
        case TimeSheetChartSetup."Show by" of
          TimeSheetChartSetup."Show by"::Status:
            begin
              AddMeasure(GetMeasureCaption(MeasureType::Open),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Submitted),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Rejected),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Approved),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
            end;
          TimeSheetChartSetup."Show by"::Type:
            begin
              AddMeasure(GetMeasureCaption(MeasureType::Resource),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Job),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Service),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::Absence),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::"Assembly Order"),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
            end;
          TimeSheetChartSetup."Show by"::Posted:
            begin
              AddMeasure(GetMeasureCaption(MeasureType::Posted),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
              AddMeasure(GetMeasureCaption(MeasureType::"Not Posted"),'',"Data Type"::Decimal,"Chart Type"::StackedColumn);
            end;
        end;
        AddMeasure(GetMeasureCaption(MeasureType::Scheduled),'',"Data Type"::Decimal,"Chart Type"::Point);
      end;
    END;

    [External]
    PROCEDURE CalcAmount@10(TimeSheetChartSetup@1001 : Record "Time Sheet Chart Setup";ResourceNo@1000 : Code[249];MType@1002 : Integer) : Decimal;
    VAR
      Resource@1003 : Record Resource;
      TimeSheetHeader@1005 : Record "Time Sheet Header";
      TimeSheetPostingEntry@1004 : Record "Time Sheet Posting Entry";
    BEGIN
      if MType = MeasureType::Scheduled then begin
        Resource.GET(ResourceNo);
        Resource.SETRANGE("Date Filter",TimeSheetChartSetup."Starting Date",TimeSheetChartSetup.GetEndingDate);
        Resource.CALCFIELDS(Capacity);
        exit(Resource.Capacity);
      end;

      TimeSheetHeader.SETRANGE("Starting Date",TimeSheetChartSetup."Starting Date");
      TimeSheetHeader.SETRANGE("Resource No.",ResourceNo);
      if not TimeSheetHeader.FINDFIRST then
        exit(0);

      case TimeSheetChartSetup."Show by" of
        TimeSheetChartSetup."Show by"::Status:
          begin
            // status option is the same with MType here
            TimeSheetHeader.SETRANGE("Status Filter",MType);
            TimeSheetHeader.CALCFIELDS(Quantity);
            exit(TimeSheetHeader.Quantity);
          end;
        TimeSheetChartSetup."Show by"::Type:
          begin
            TimeSheetHeader.SETRANGE("Type Filter",MType - 6);
            TimeSheetHeader.CALCFIELDS(Quantity);
            exit(TimeSheetHeader.Quantity);
          end;
        TimeSheetChartSetup."Show by"::Posted:
          begin
            TimeSheetPostingEntry.SETCURRENTKEY("Time Sheet No.","Time Sheet Line No.");
            TimeSheetPostingEntry.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
            TimeSheetPostingEntry.CALCSUMS(Quantity);
            TimeSheetHeader.CALCFIELDS(Quantity);
            case MType of
              MeasureType::Posted:
                exit(TimeSheetPostingEntry.Quantity);
              MeasureType::"Not Posted":
                exit(TimeSheetHeader.Quantity - TimeSheetPostingEntry.Quantity);
            end;
          end;
      end;
    END;

    [External]
    PROCEDURE GetMeasureCaption@15(Type@1000 : Option) : Text;
    VAR
      TimeSheetChartSetup@1001 : Record "Time Sheet Chart Setup";
    BEGIN
      TimeSheetChartSetup.INIT;
      TimeSheetChartSetup."Measure Type" := Type;
      exit(FORMAT(TimeSheetChartSetup."Measure Type"));
    END;

    BEGIN
    END.
  }
}

