OBJECT Codeunit 1005 Job Calculate Batches
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobDiffBuffer@1002 : ARRAY [2] OF TEMPORARY Record "Job Difference Buffer";
      Text000@1004 : TextConst 'ENU=%1 lines were successfully transferred to the journal.';
      Text001@1003 : TextConst 'ENU=There is no remaining usage on the job(s).';
      Text002@1001 : TextConst 'ENU=The lines were successfully changed.';
      Text003@1005 : TextConst 'ENU=The From Date is later than the To Date.';
      Text004@1006 : TextConst 'ENU=You must specify %1.';
      Text005@1007 : TextConst 'ENU=There is nothing to invoice.';
      Text006@1008 : TextConst 'ENU=1 invoice is created.';
      Text007@1009 : TextConst 'ENU=%1 invoices are created.';
      Text008@1010 : TextConst 'ENU=The selected entries were successfully transferred to planning lines.';
      Text009@1012 : TextConst 'ENU=Total Cost,Total Price,Line Discount Amount,Line Amount';
      PeriodLength2@1000 : DateFormula;

    [Internal]
    PROCEDURE SplitLines@11(VAR JT2@1000 : Record "Job Task") : Integer;
    VAR
      JT@1002 : Record "Job Task";
      JobPlanningLine@1001 : Record "Job Planning Line";
      NoOfLinesSplitted@1003 : Integer;
    BEGIN
      JobPlanningLine.LOCKTABLE;
      JT.LOCKTABLE;
      JT := JT2;
      JT.FIND;
      JobPlanningLine.SETRANGE("Job No.",JT."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT."Job Task No.");
      JobPlanningLine.SETFILTER("Planning Date",JT2.GETFILTER("Planning Date Filter"));
      if JobPlanningLine.FIND('-') then
        repeat
          if JobPlanningLine."Line Type" = JobPlanningLine."Line Type"::"Both Budget and Billable" then
            if SplitOneLine(JobPlanningLine) then
              NoOfLinesSplitted += 1;
        until JobPlanningLine.NEXT = 0;
      exit(NoOfLinesSplitted);
    END;

    LOCAL PROCEDURE SplitOneLine@12(JobPlanningLine@1000 : Record "Job Planning Line") : Boolean;
    VAR
      JobPlanningLine2@1001 : Record "Job Planning Line";
      NextLineNo@1002 : Integer;
    BEGIN
      JobPlanningLine.TESTFIELD("Job No.");
      JobPlanningLine.TESTFIELD("Job Task No.");
      JobPlanningLine2 := JobPlanningLine;
      JobPlanningLine2.SETRANGE("Job No.",JobPlanningLine2."Job No.");
      JobPlanningLine2.SETRANGE("Job Task No.",JobPlanningLine2."Job Task No.");
      NextLineNo := JobPlanningLine."Line No." + 10000;
      if JobPlanningLine2.NEXT <> 0 then
        NextLineNo := (JobPlanningLine."Line No." + JobPlanningLine2."Line No.") div 2;
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Billable);
      JobPlanningLine.MODIFY;
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Budget);
      JobPlanningLine."Serial No." := '';
      JobPlanningLine."Lot No." := '';
      JobPlanningLine."Line No." := NextLineNo;
      JobPlanningLine.InitJobPlanningLine;
      JobPlanningLine.INSERT(true);
      exit(true);
    END;

    [External]
    PROCEDURE TransferToPlanningLine@9(VAR JobLedgEntry@1000 : Record "Job Ledger Entry";LineType@1001 : Integer);
    VAR
      JobPostLine@1002 : Codeunit "Job Post-Line";
    BEGIN
      JobLedgEntry.LOCKTABLE;
      if JobLedgEntry.FIND('-') then
        repeat
          JobLedgEntry.TESTFIELD("Job No.");
          JobLedgEntry.TESTFIELD("Job Task No.");
          JobLedgEntry.TESTFIELD("Entry Type",JobLedgEntry."Entry Type"::Usage);
          JobLedgEntry."Line Type" := LineType;
          CLEAR(JobPostLine);
          JobPostLine.InsertPlLineFromLedgEntry(JobLedgEntry);
        until JobLedgEntry.NEXT = 0;
      COMMIT;
      MESSAGE(Text008);
    END;

    [External]
    PROCEDURE ChangePlanningDates@1(JT@1010 : Record "Job Task";ScheduleLine@1008 : Boolean;ContractLine@1007 : Boolean;PeriodLength@1006 : DateFormula;FixedDate@1005 : Date;StartingDate@1004 : Date;EndingDate@1002 : Date);
    VAR
      Job@1003 : Record Job;
      JobPlanningLine@1009 : Record "Job Planning Line";
    BEGIN
      JobPlanningLine.LOCKTABLE;
      JT.LOCKTABLE;

      if EndingDate = 0D then
        EndingDate := DMY2DATE(31,12,9999);
      if EndingDate < StartingDate then
        ERROR(Text003);
      JT.TESTFIELD("Job No.");
      JT.TESTFIELD("Job Task No.");
      Job.GET(JT."Job No.");
      if Job.Blocked = Job.Blocked::All then
        Job.TestBlocked;
      JT.FIND;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT."Job Task No.");

      if ScheduleLine and not ContractLine then
        JobPlanningLine.SETRANGE("Schedule Line",true);
      if not ScheduleLine and ContractLine then
        JobPlanningLine.SETRANGE("Contract Line",true);
      JobPlanningLine.SETRANGE("Planning Date",StartingDate,EndingDate);
      if JobPlanningLine.FIND('-') then
        repeat
          JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
          if JobPlanningLine."Qty. Transferred to Invoice" = 0 then begin
            JobPlanningLine.TESTFIELD("Planning Date");
            if FixedDate > 0D then
              JobPlanningLine."Planning Date" := FixedDate
            else
              if PeriodLength <> PeriodLength2 then
                JobPlanningLine."Planning Date" :=
                  CALCDATE(PeriodLength,JobPlanningLine."Planning Date");
            JobPlanningLine."Last Date Modified" := TODAY;
            JobPlanningLine."User ID" := USERID;
            JobPlanningLine.MODIFY;
          end;
        until JobPlanningLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ChangeCurrencyDates@2(JT@1013 : Record "Job Task";scheduleLine@1005 : Boolean;ContractLine@1006 : Boolean;PeriodLength@1011 : DateFormula;FixedDate@1008 : Date;StartingDate@1004 : Date;EndingDate@1007 : Date);
    VAR
      Job@1003 : Record Job;
      JobPlanningLine@1009 : Record "Job Planning Line";
    BEGIN
      if EndingDate = 0D then
        EndingDate := DMY2DATE(31,12,9999);
      if EndingDate < StartingDate then
        ERROR(Text003);
      JT.TESTFIELD("Job No.");
      JT.TESTFIELD("Job Task No.");
      Job.GET(JT."Job No.");
      if Job.Blocked = Job.Blocked::All then
        Job.TestBlocked;
      JT.FIND;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT."Job Task No.");

      if scheduleLine and not ContractLine then
        JobPlanningLine.SETRANGE("Schedule Line",true);
      if not scheduleLine and ContractLine then
        JobPlanningLine.SETRANGE("Contract Line",true);
      JobPlanningLine.SETRANGE("Currency Date",StartingDate,EndingDate);
      if JobPlanningLine.FIND('-') then
        repeat
          JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
          if JobPlanningLine."Qty. Transferred to Invoice" = 0 then begin
            JobPlanningLine.TESTFIELD("Planning Date");
            JobPlanningLine.TESTFIELD("Currency Date");
            if FixedDate > 0D then begin
              JobPlanningLine."Currency Date" := FixedDate;
              JobPlanningLine."Document Date" := FixedDate;
            end else
              if PeriodLength <> PeriodLength2 then begin
                JobPlanningLine."Currency Date" :=
                  CALCDATE(PeriodLength,JobPlanningLine."Currency Date");
                JobPlanningLine."Document Date" :=
                  CALCDATE(PeriodLength,JobPlanningLine."Document Date");
              end;
            JobPlanningLine.VALIDATE("Currency Date");
            JobPlanningLine."Last Date Modified" := TODAY;
            JobPlanningLine."User ID" := USERID;
            JobPlanningLine.MODIFY(true);
          end;
        until JobPlanningLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ChangeDatesEnd@8();
    BEGIN
      COMMIT;
      MESSAGE(Text002);
    END;

    [Internal]
    PROCEDURE CreateJT@5(JobPlanningLine@1000 : Record "Job Planning Line");
    VAR
      Job@1003 : Record Job;
      JT@1002 : Record "Job Task";
    BEGIN
      with JobPlanningLine do begin
        if Type = Type::Text then
          exit;
        if not "Schedule Line" then
          exit;
        Job.GET("Job No.");
        JT.GET("Job No.","Job Task No.");
        JobDiffBuffer[1]."Job No." := "Job No.";
        JobDiffBuffer[1]."Job Task No." := "Job Task No.";
        JobDiffBuffer[1].Type := Type;
        JobDiffBuffer[1]."No." := "No.";
        JobDiffBuffer[1]."Location Code" := "Location Code";
        JobDiffBuffer[1]."Variant Code" := "Variant Code";
        JobDiffBuffer[1]."Unit of Measure code" := "Unit of Measure Code";
        JobDiffBuffer[1]."Work Type Code" := "Work Type Code";
        JobDiffBuffer[1].Quantity := Quantity;
        JobDiffBuffer[2] := JobDiffBuffer[1];
        if JobDiffBuffer[2].FIND then begin
          JobDiffBuffer[2].Quantity := JobDiffBuffer[2].Quantity + JobDiffBuffer[1].Quantity;
          JobDiffBuffer[2].MODIFY;
        end else
          JobDiffBuffer[1].INSERT;
      end;
    END;

    [Internal]
    PROCEDURE InitDiffBuffer@4();
    BEGIN
      CLEAR(JobDiffBuffer);
      JobDiffBuffer[1].DELETEALL;
    END;

    [Internal]
    PROCEDURE PostDiffBuffer@3(DocNo@1000 : Code[20];PostingDate@1001 : Date;TemplateName@1005 : Code[10];BatchName@1006 : Code[10]);
    VAR
      JobLedgEntry@1002 : Record "Job Ledger Entry";
      JobJnlLine@1003 : Record "Job Journal Line";
      JobJnlTemplate@1008 : Record "Job Journal Template";
      JobJnlBatch@1009 : Record "Job Journal Batch";
      NextLineNo@1004 : Integer;
      LineNo@1007 : Integer;
    BEGIN
      if JobDiffBuffer[1].FIND('-') then
        repeat
          JobLedgEntry.SETCURRENTKEY("Job No.","Job Task No.");
          JobLedgEntry.SETRANGE("Job No.",JobDiffBuffer[1]."Job No.");
          JobLedgEntry.SETRANGE("Job Task No.",JobDiffBuffer[1]."Job Task No.");
          JobLedgEntry.SETRANGE("Entry Type",JobLedgEntry."Entry Type"::Usage);
          JobLedgEntry.SETRANGE(Type,JobDiffBuffer[1].Type);
          JobLedgEntry.SETRANGE("No.",JobDiffBuffer[1]."No.");
          JobLedgEntry.SETRANGE("Location Code",JobDiffBuffer[1]."Location Code");
          JobLedgEntry.SETRANGE("Variant Code",JobDiffBuffer[1]."Variant Code");
          JobLedgEntry.SETRANGE("Unit of Measure Code",JobDiffBuffer[1]."Unit of Measure code");
          JobLedgEntry.SETRANGE("Work Type Code",JobDiffBuffer[1]."Work Type Code");
          if JobLedgEntry.FIND('-') then
            repeat
              JobDiffBuffer[1].Quantity := JobDiffBuffer[1].Quantity - JobLedgEntry.Quantity;
            until JobLedgEntry.NEXT = 0;
          JobDiffBuffer[1].MODIFY;
        until JobDiffBuffer[1].NEXT = 0;
      JobJnlLine.LOCKTABLE;
      JobJnlLine.VALIDATE("Journal Template Name",TemplateName);
      JobJnlLine.VALIDATE("Journal Batch Name",BatchName);
      JobJnlLine.SETRANGE("Journal Template Name",JobJnlLine."Journal Template Name");
      JobJnlLine.SETRANGE("Journal Batch Name",JobJnlLine."Journal Batch Name");
      if JobJnlLine.FINDLAST then
        NextLineNo := JobJnlLine."Line No." + 10000
      else
        NextLineNo := 10000;

      if JobDiffBuffer[1].FIND('-') then
        repeat
          if JobDiffBuffer[1].Quantity > 0 then begin
            CLEAR(JobJnlLine);
            JobJnlLine."Journal Template Name" := TemplateName;
            JobJnlLine."Journal Batch Name" := BatchName;
            JobJnlTemplate.GET(TemplateName);
            JobJnlBatch.GET(TemplateName,BatchName);
            JobJnlLine."Source Code" := JobJnlTemplate."Source Code";
            JobJnlLine."Reason Code" := JobJnlBatch."Reason Code";
            JobJnlLine.DontCheckStdCost;
            JobJnlLine.VALIDATE("Job No.",JobDiffBuffer[1]."Job No.");
            JobJnlLine.VALIDATE("Job Task No.",JobDiffBuffer[1]."Job Task No.");
            JobJnlLine.VALIDATE("Posting Date",PostingDate);
            JobJnlLine.VALIDATE(Type,JobDiffBuffer[1].Type);
            JobJnlLine.VALIDATE("No.",JobDiffBuffer[1]."No.");
            JobJnlLine.VALIDATE("Variant Code",JobDiffBuffer[1]."Variant Code");
            JobJnlLine.VALIDATE("Unit of Measure Code",JobDiffBuffer[1]."Unit of Measure code");
            JobJnlLine.VALIDATE("Location Code",JobDiffBuffer[1]."Location Code");
            if JobDiffBuffer[1].Type = JobDiffBuffer[1].Type::Resource then
              JobJnlLine.VALIDATE("Work Type Code",JobDiffBuffer[1]."Work Type Code");
            JobJnlLine."Document No." := DocNo;
            JobJnlLine.VALIDATE(Quantity,JobDiffBuffer[1].Quantity);
            JobJnlLine."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 10000;
            JobJnlLine.INSERT(true);
            LineNo := LineNo + 1;
          end;
        until JobDiffBuffer[1].NEXT = 0;
      COMMIT;
      if LineNo = 0 then
        MESSAGE(Text001)
      else
        MESSAGE(Text000,LineNo);
    END;

    [External]
    PROCEDURE BatchError@6(PostingDate@1000 : Date;DocNo@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record "G/L Entry";
    BEGIN
      if PostingDate = 0D then
        ERROR(Text004,GLEntry.FIELDCAPTION("Posting Date"));
      if DocNo = '' then
        ERROR(Text004,GLEntry.FIELDCAPTION("Document No."));
    END;

    [External]
    PROCEDURE EndCreateInvoice@7(NoOfInvoices@1000 : Integer);
    BEGIN
      COMMIT;
      if NoOfInvoices <= 0 then
        MESSAGE(Text005);
      if NoOfInvoices = 1 then
        MESSAGE(Text006);
      if NoOfInvoices > 1 then
        MESSAGE(Text007,NoOfInvoices);
    END;

    [Internal]
    PROCEDURE CalculateActualToBudget@10(VAR Job@1005 : Record Job;JT@1001 : Record "Job Task";VAR JobDiffBuffer2@1000 : Record "Job Difference Buffer";VAR JobDiffBuffer3@1006 : Record "Job Difference Buffer";CurrencyType@1002 : 'LCY,FCY');
    VAR
      JobPlanningLine@1003 : Record "Job Planning Line";
      JobLedgEntry@1004 : Record "Job Ledger Entry";
    BEGIN
      CLEARALL;
      CLEAR(JobDiffBuffer);
      CLEAR(JobDiffBuffer2);
      CLEAR(JobDiffBuffer3);

      JobDiffBuffer[1].DELETEALL;
      JobDiffBuffer2.DELETEALL;
      JobDiffBuffer3.DELETEALL;

      JT.FIND;
      JobPlanningLine.SETRANGE("Job No.",JT."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT."Job Task No.");
      JobPlanningLine.SETFILTER("Planning Date",Job.GETFILTER("Planning Date Filter"));

      JobLedgEntry.SETRANGE("Job No.",JT."Job No.");
      JobLedgEntry.SETRANGE("Job Task No.",JT."Job Task No.");
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));

      if JobPlanningLine.FIND('-') then
        repeat
          InsertDiffBuffer(JobLedgEntry,JobPlanningLine,0,CurrencyType);
        until JobPlanningLine.NEXT = 0;

      if JobLedgEntry.FIND('-') then
        repeat
          InsertDiffBuffer(JobLedgEntry,JobPlanningLine,1,CurrencyType);
        until JobLedgEntry.NEXT = 0;

      if JobDiffBuffer[1].FIND('-') then
        repeat
          if JobDiffBuffer[1]."Entry type" = JobDiffBuffer[1]."Entry type"::Budget then begin
            JobDiffBuffer2 := JobDiffBuffer[1];
            JobDiffBuffer2.INSERT;
          end else begin
            JobDiffBuffer3 := JobDiffBuffer[1];
            JobDiffBuffer3."Entry type" := JobDiffBuffer3."Entry type"::Budget;
            JobDiffBuffer3.INSERT;
          end;
        until JobDiffBuffer[1].NEXT = 0;
    END;

    LOCAL PROCEDURE InsertDiffBuffer@13(VAR JobLedgEntry@1003 : Record "Job Ledger Entry";VAR JobPlanningLine@1000 : Record "Job Planning Line";LineType@1002 : 'Schedule,Usage';CurrencyType@1001 : 'LCY,FCY');
    BEGIN
      if LineType = LineType::Schedule then
        with JobPlanningLine do begin
          if Type = Type::Text then
            exit;
          if not "Schedule Line" then
            exit;
          JobDiffBuffer[1].Type := Type;
          JobDiffBuffer[1]."No." := "No.";
          JobDiffBuffer[1]."Entry type" := JobDiffBuffer[1]."Entry type"::Budget;
          JobDiffBuffer[1]."Unit of Measure code" := "Unit of Measure Code";
          JobDiffBuffer[1]."Work Type Code" := "Work Type Code";
          JobDiffBuffer[1].Quantity := Quantity;
          if CurrencyType = CurrencyType::LCY then begin
            JobDiffBuffer[1]."Total Cost" := "Total Cost (LCY)";
            JobDiffBuffer[1]."Line Amount" := "Line Amount (LCY)";
          end else begin
            JobDiffBuffer[1]."Total Cost" := "Total Cost";
            JobDiffBuffer[1]."Line Amount" := "Line Amount";
          end;
          JobDiffBuffer[2] := JobDiffBuffer[1];
          if JobDiffBuffer[2].FIND then begin
            JobDiffBuffer[2].Quantity :=
              JobDiffBuffer[2].Quantity + JobDiffBuffer[1].Quantity;
            JobDiffBuffer[2]."Total Cost" :=
              JobDiffBuffer[2]."Total Cost" + JobDiffBuffer[1]."Total Cost";
            JobDiffBuffer[2]."Line Amount" :=
              JobDiffBuffer[2]."Line Amount" + JobDiffBuffer[1]."Line Amount";
            JobDiffBuffer[2].MODIFY;
          end else
            JobDiffBuffer[1].INSERT;
        end;

      if LineType = LineType::Usage then
        with JobLedgEntry do begin
          if "Entry Type" <> "Entry Type"::Usage then
            exit;
          JobDiffBuffer[1].Type := Type;
          JobDiffBuffer[1]."No." := "No.";
          JobDiffBuffer[1]."Entry type" := JobDiffBuffer[1]."Entry type"::Usage;
          JobDiffBuffer[1]."Unit of Measure code" := "Unit of Measure Code";
          JobDiffBuffer[1]."Work Type Code" := "Work Type Code";
          JobDiffBuffer[1].Quantity := Quantity;
          if CurrencyType = CurrencyType::LCY then begin
            JobDiffBuffer[1]."Total Cost" := "Total Cost (LCY)";
            JobDiffBuffer[1]."Line Amount" := "Line Amount (LCY)";
          end else begin
            JobDiffBuffer[1]."Total Cost" := "Total Cost";
            JobDiffBuffer[1]."Line Amount" := "Line Amount";
          end;
          JobDiffBuffer[2] := JobDiffBuffer[1];
          if JobDiffBuffer[2].FIND then begin
            JobDiffBuffer[2].Quantity :=
              JobDiffBuffer[2].Quantity + JobDiffBuffer[1].Quantity;
            JobDiffBuffer[2]."Total Cost" :=
              JobDiffBuffer[2]."Total Cost" + JobDiffBuffer[1]."Total Cost";
            JobDiffBuffer[2]."Line Amount" :=
              JobDiffBuffer[2]."Line Amount" + JobDiffBuffer[1]."Line Amount";
            JobDiffBuffer[2].MODIFY;
          end else
            JobDiffBuffer[1].INSERT;
        end;
    END;

    [External]
    PROCEDURE GetCurrencyCode@14(VAR Job@1000 : Record Job;Type@1002 : '"0","1","2","3"';CurrencyType@1004 : '"Local Currency","Foreign Currency"') : Text[50];
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      CurrencyCode@1003 : Code[20];
    BEGIN
      GLSetup.GET;
      if CurrencyType = CurrencyType::"Local Currency" then
        CurrencyCode := GLSetup."LCY Code"
      else begin
        if Job."Currency Code" <> '' then
          CurrencyCode := Job."Currency Code"
        else
          CurrencyCode := GLSetup."LCY Code";
      end;
      exit(SELECTSTR(Type + 1,Text009) + ' (' + CurrencyCode + ')');
    END;

    BEGIN
    END.
  }
}

