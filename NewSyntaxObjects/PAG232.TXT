OBJECT Page 232 Apply Customer Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Apply Customer Entries;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Cust. Ledger Entry";
    DataCaptionFields="Customer No.";
    PageType=Worksheet;
    OnInit=BEGIN
             AppliesToIDVisible := true;
           END;

    OnOpenPage=BEGIN
                 if CalcType = CalcType::Direct then begin
                   Cust.GET("Customer No.");
                   ApplnCurrencyCode := Cust."Currency Code";
                   FindApplyingEntry;
                 end;

                 AppliesToIDVisible := ApplnType <> ApplnType::"Applies-to Doc. No.";

                 GLSetup.GET;

                 if ApplnType = ApplnType::"Applies-to Doc. No." then
                   CalcApplnAmount;
                 PostingDone := false;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                     if "Applies-to ID" <> xRec."Applies-to ID" then
                       CalcApplnAmount;
                     exit(false);
                   END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::LookupOK then
                         LookupOKOnPush;
                       if ApplnType = ApplnType::"Applies-to Doc. No." then begin
                         if OK and (ApplyingCustLedgEntry."Posting Date" < "Posting Date") then begin
                           OK := false;
                           ERROR(
                             EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
                             "Document Type","Document No.");
                         end;
                         if OK then begin
                           if "Amount to Apply" = 0 then
                             "Amount to Apply" := "Remaining Amount";
                           CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                         end;
                       end;
                       if (CalcType = CalcType::Direct) and not OK and not PostingDone then begin
                         Rec := ApplyingCustLedgEntry;
                         "Applying Entry" := false;
                         "Applies-to ID" := '';
                         "Amount to Apply" := 0;
                         CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                       end;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           if ApplnType = ApplnType::"Applies-to Doc. No." then
                             CalcApplnAmount;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 37      ;1   ;ActionGroup;
                      Name=Ent&ry;
                      CaptionML=ENU=Ent&ry;
                      Image=Entry }
      { 38      ;2   ;Action    ;
                      Name=Reminder/Fin. Charge Entries;
                      CaptionML=ENU=Reminder/Fin. Charge Entries;
                      ToolTipML=ENU=View the reminders and finance charge entries that you have entered for the customer.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Reminder/Fin. Charge Entries";
                      RunPageView=SORTING("Customer Entry No.");
                      RunPageLink="Customer Entry No."=FIELD("Entry No.");
                      Image=Reminder }
      { 95      ;2   ;Action    ;
                      Name=Applied E&ntries;
                      CaptionML=ENU=Applied E&ntries;
                      ToolTipML=ENU=View the ledger entries that have been applied to this record.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Applied Customer Entries";
                      RunPageOnRec=true;
                      Image=Approve }
      { 53      ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 62      ;2   ;Action    ;
                      Name=Detailed &Ledger Entries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Detailed &Ledger Entries;
                      ToolTipML=ENU=View a summary of the all posted entries and adjustments related to a specific customer ledger entry.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Detailed Cust. Ledg. Entries";
                      RunPageView=SORTING("Cust. Ledger Entry No.","Posting Date");
                      RunPageLink="Cust. Ledger Entry No."=FIELD("Entry No.");
                      Image=View }
      { 15      ;2   ;Action    ;
                      Name=&Navigate;
                      CaptionML=ENU=&Navigate;
                      ToolTipML=ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Navigate;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 13      ;1   ;ActionGroup;
                      Name=&Application;
                      CaptionML=ENU=&Application;
                      Image=Apply }
      { 11      ;2   ;Action    ;
                      Name=Set Applies-to ID;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=Set Applies-to ID;
                      ToolTipML=ENU=Set the Applies-to ID field on the posted entry to automatically be filled in with the document number of the entry in the journal.;
                      ApplicationArea=#Basic,#Suite;
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 if (CalcType = CalcType::GenJnlLine) and (ApplnType = ApplnType::"Applies-to Doc. No.") then
                                   ERROR(CannotSetAppliesToIDErr);

                                 SetCustApplId;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Post Application;
                      ShortCutKey=F9;
                      Ellipsis=true;
                      CaptionML=ENU=Post Application;
                      ToolTipML=ENU=Define the document number of the ledger entry to use to perform the application. In addition, you specify the Posting Date for the application.;
                      ApplicationArea=#Basic,#Suite;
                      Image=PostApplication;
                      OnAction=BEGIN
                                 PostDirectApplication(false);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=ENU=Preview Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the document or journal.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 PostDirectApplication(true);
                               END;
                                }
      { 5       ;2   ;Separator ;
                      Name=-;
                      CaptionML=ENU=- }
      { 3       ;2   ;Action    ;
                      Name=Show Only Selected Entries to Be Applied;
                      CaptionML=ENU=Show Only Selected Entries to Be Applied;
                      ToolTipML=ENU=View the selected ledger entries that will be applied to the specified record.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ShowSelected;
                      OnAction=BEGIN
                                 ShowAppliedEntries := not ShowAppliedEntries;
                                 if ShowAppliedEntries then
                                   if CalcType = CalcType::GenJnlLine then
                                     SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
                                   else begin
                                     CustEntryApplID := USERID;
                                     if CustEntryApplID = '' then
                                       CustEntryApplID := '***';
                                     SETRANGE("Applies-to ID",CustEntryApplID);
                                   end
                                 else
                                   SETRANGE("Applies-to ID");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 70  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 73  ;2   ;Field     ;
                Name=Posting Date;
                CaptionML=ENU=Posting Date;
                ToolTipML=ENU=Specifies the posting date of the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry."Posting Date";
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                Name=Document Type;
                CaptionML=ENU=Document Type;
                ToolTipML=ENU=Specifies the document type of the entry to be applied.;
                OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry."Document Type";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                Name=Document No.;
                CaptionML=ENU=Document No.;
                ToolTipML=ENU=Specifies the document number of the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry."Document No.";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name=ApplyingCustomerNo;
                CaptionML=ENU=Customer No.;
                ToolTipML=ENU=Specifies the customer number of the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry."Customer No.";
                Visible=FALSE;
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                Name=ApplyingDescription;
                CaptionML=ENU=Description;
                ToolTipML=ENU=Specifies the description of the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry.Description;
                Visible=FALSE;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                Name=Currency Code;
                CaptionML=ENU=Currency Code;
                ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                ApplicationArea=#Suite;
                SourceExpr=ApplyingCustLedgEntry."Currency Code";
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                Name=Amount;
                CaptionML=ENU=Amount;
                ToolTipML=ENU=Specifies the amount on the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry.Amount;
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                Name=Remaining Amount;
                CaptionML=ENU=Remaining Amount;
                ToolTipML=ENU=Specifies the amount on the entry to be applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingCustLedgEntry."Remaining Amount";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                Name=Applies-to ID;
                ToolTipML=ENU=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.;
                ApplicationArea=#All;
                SourceExpr="Applies-to ID";
                Visible=AppliesToIDVisible;
                ImplicitType=Code50 }

    { 2   ;2   ;Field     ;
                Name="Posting Date";
                ToolTipML=ENU=Specifies the customer entry's posting date.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Editable=FALSE;
                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name="Document Type";
                ToolTipML=ENU=Specifies the document type that the customer entry belongs to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt;
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name="Document No.";
                ToolTipML=ENU=Specifies the entry's document number.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Customer No.;
                ToolTipML=ENU=Specifies the customer account number that the entry is linked to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the customer entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 39  ;2   ;Field     ;
                Name="Currency Code";
                ToolTipML=ENU=Specifies the currency code for the amount on the line.;
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                ImplicitType=Code10 }

    { 60  ;2   ;Field     ;
                Name=Original Amount;
                ToolTipML=ENU=Specifies the amount of the original entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Original Amount";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=Field12;
                ToolTipML=ENU=Specifies the amount of the entry.;
                ApplicationArea=#Advanced;
                SourceExpr=Amount;
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 17  ;2   ;Field     ;
                Name=Debit Amount;
                ToolTipML=ENU=Specifies the total of the ledger entries that represent debits.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=Credit Amount;
                ToolTipML=ENU=Specifies the total of the ledger entries that represent credits.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 14  ;2   ;Field     ;
                Name="Remaining Amount";
                ToolTipML=ENU=Specifies the amount that remains to be applied to before the entry has been completely applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amount";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 33  ;2   ;Field     ;
                Name=Appln. Remaining Amount;
                CaptionML=ENU=Appln. Remaining Amount;
                ToolTipML=ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnRemainingAmount("Remaining Amount");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 89  ;2   ;Field     ;
                Name=Amount to Apply;
                ToolTipML=ENU=Specifies the amount to apply.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount to Apply";
                OnValidate=BEGIN
                             CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);

                             if (xRec."Amount to Apply" = 0) or ("Amount to Apply" = 0) and
                                ((ApplnType = ApplnType::"Applies-to ID") or (CalcType = CalcType::Direct))
                             then
                               SetCustApplId;
                             GET("Entry No.");
                             AmounttoApplyOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 93  ;2   ;Field     ;
                Name=Appln. Amount to Apply;
                CaptionML=ENU=Appln. Amount to Apply;
                ToolTipML=ENU=Specifies the amount to apply.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnAmounttoApply("Amount to Apply");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 16  ;2   ;Field     ;
                Name=Due Date;
                ToolTipML=ENU=Specifies the due date on the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt;
                ImplicitType=Date }

    { 18  ;2   ;Field     ;
                Name=Pmt. Discount Date;
                ToolTipML=ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Discount Date";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;

                ImplicitType=Date }

    { 65  ;2   ;Field     ;
                Name=Pmt. Disc. Tolerance Date;
                ToolTipML=ENU=Specifies the last date the amount in the entry must be paid in order for a payment discount tolerance to be granted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Disc. Tolerance Date";
                ImplicitType=Date }

    { 20  ;2   ;Field     ;
                Name=Original Pmt. Disc. Possible;
                ToolTipML=ENU=Specifies the discount that the customer can obtain if the entry is applied to before the payment discount date.;
                ApplicationArea=#Advanced;
                SourceExpr="Original Pmt. Disc. Possible";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 63  ;2   ;Field     ;
                Name=Remaining Pmt. Disc. Possible;
                ToolTipML=ENU=Specifies the remaining payment discount that is available if the entry is totally applied to within the payment period.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Pmt. Disc. Possible";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;

                ImplicitType=Decimal }

    { 51  ;2   ;Field     ;
                Name=Appln. Pmt. Disc. Possible;
                CaptionML=ENU=Appln. Pmt. Disc. Possible;
                ToolTipML=ENU=Specifies the discount that the customer can obtain if the entry is applied to before the payment discount date.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnRemainingAmount("Remaining Pmt. Disc. Possible");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 67  ;2   ;Field     ;
                Name=Max. Payment Tolerance;
                ToolTipML=ENU=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Max. Payment Tolerance";
                ImplicitType=Decimal }

    { 24  ;2   ;Field     ;
                Name=Open;
                ToolTipML=ENU=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Open;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 26  ;2   ;Field     ;
                Name=Positive;
                ToolTipML=ENU=Specifies if the entry to be applied is positive.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Positive;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 54  ;2   ;Field     ;
                Name=Global Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                ImplicitType=Code20 }

    { 56  ;2   ;Field     ;
                Name=Global Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                ImplicitType=Code20 }

    { 41  ;1   ;Group     ;
                Name=Group41 }

    { 1903222401;2;Group  ;
                Name=Group1903222401;
                GroupType=FixedLayout }

    { 1901742001;3;Group  ;
                Name=Appln. Currency;
                CaptionML=ENU=Appln. Currency }

    { 48  ;4   ;Field     ;
                Name=ApplnCurrencyCode;
                ToolTipML=ENU=Specifies the currency code that the amount will be applied in, in case of different currencies.;
                ApplicationArea=#Suite;
                SourceExpr=ApplnCurrencyCode;
                TableRelation=Currency;
                Editable=FALSE;
                ImplicitType=Code10;
                ShowCaption=false }

    { 1903098801;3;Group  ;
                Name=Group1903098801;
                CaptionML=ENU=Amount to Apply }

    { 44  ;4   ;Field     ;
                Name=AmountToApply;
                CaptionML=ENU=Amount to Apply;
                ToolTipML=ENU=Specifies the sum of the amounts on all the selected customer ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1902760701;3;Group  ;
                Name=Pmt. Disc. Amount;
                CaptionML=ENU=Pmt. Disc. Amount }

    { 91  ;4   ;Field     ;
                Name=PmtDiscAmount;
                CaptionML=ENU=Pmt. Disc. Amount;
                ToolTipML=ENU=Specifies the sum of the payment discount amounts granted on all the selected customer ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=-PmtDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901741901;3;Group  ;
                Name=Rounding;
                CaptionML=ENU=Rounding }

    { 58  ;4   ;Field     ;
                Name=ApplnRounding;
                CaptionML=ENU=Rounding;
                ToolTipML=ENU=Specifies the rounding difference when you apply entries in different currencies to one another. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1900546301;3;Group  ;
                Name=Applied Amount;
                CaptionML=ENU=Applied Amount }

    { 97  ;4   ;Field     ;
                Name=AppliedAmount;
                CaptionML=ENU=Applied Amount;
                ToolTipML=ENU=Specifies the sum of the amounts in the Amount to Apply field, Pmt. Disc. Amount field, and the Rounding. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901991601;3;Group  ;
                Name=Available Amount;
                CaptionML=ENU=Available Amount }

    { 46  ;4   ;Field     ;
                Name=ApplyingAmount;
                CaptionML=ENU=Available Amount;
                ToolTipML=ENU=Specifies the amount of the journal entry, sales credit memo, or current customer ledger entry that you have selected as the applying entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1900206001;3;Group  ;
                Name=Balance;
                CaptionML=ENU=Balance }

    { 42  ;4   ;Field     ;
                Name=ControlBalance;
                CaptionML=ENU=Balance;
                ToolTipML=ENU=Specifies any extra amount that will remain after the application.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplyingAmount + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1903096107;1;Part   ;
                Name=Part1903096107;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="Entry No."=FIELD("Entry No.");
                PagePartID="Customer Ledger Entry FactBox";
                Visible=TRUE;
                PartType=Page }

  }
  CODE
  {
    VAR
      ApplyingCustLedgEntry@1035 : TEMPORARY Record "Cust. Ledger Entry";
      AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";
      Currency@1002 : Record Currency;
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      GenJnlLine@1004 : Record "Gen. Journal Line";
      GenJnlLine2@1005 : Record "Gen. Journal Line";
      SalesHeader@1006 : Record "Sales Header";
      ServHeader@1045 : Record "Service Header";
      Cust@1007 : Record Customer;
      CustLedgEntry@1008 : Record "Cust. Ledger Entry";
      GLSetup@1009 : Record "General Ledger Setup";
      TotalSalesLine@1010 : Record "Sales Line";
      TotalSalesLineLCY@1011 : Record "Sales Line";
      TotalServLine@1046 : Record "Service Line";
      TotalServLineLCY@1047 : Record "Service Line";
      CustEntrySetApplID@1013 : Codeunit "Cust. Entry-SetAppl.ID";
      GenJnlApply@1014 : Codeunit "Gen. Jnl.-Apply";
      SalesPost@1015 : Codeunit "Sales-Post";
      PaymentToleranceMgt@1048 : Codeunit "Payment Tolerance Management";
      Navigate@1012 : Page Navigate;
      AppliedAmount@1017 : Decimal;
      ApplyingAmount@1018 : Decimal;
      PmtDiscAmount@1041 : Decimal;
      ApplnDate@1019 : Date;
      ApplnCurrencyCode@1020 : Code[10];
      ApplnRoundingPrecision@1021 : Decimal;
      ApplnRounding@1022 : Decimal;
      ApplnType@1023 : '" ","Applies-to Doc. No.","Applies-to ID"';
      AmountRoundingPrecision@1024 : Decimal;
      VATAmount@1025 : Decimal;
      VATAmountText@1026 : Text[30];
      StyleTxt@1016 : Text;
      ProfitLCY@1027 : Decimal;
      ProfitPct@1028 : Decimal;
      CalcType@1029 : 'Direct,GenJnlLine,SalesHeader,ServHeader';
      CustEntryApplID@1031 : Code[50];
      ValidExchRate@1032 : Boolean;
      DifferentCurrenciesInAppln@1034 : Boolean;
      Text002@1037 : TextConst 'ENU=You must select an applying entry before you can post the application.';
      ShowAppliedEntries@1038 : Boolean;
      Text003@1039 : TextConst 'ENU=You must post the application from the window where you entered the applying entry.';
      CannotSetAppliesToIDErr@1030 : TextConst 'ENU=You cannot set Applies-to ID while selecting Applies-to Doc. No.';
      OK@1043 : Boolean;
      EarlierPostingDateErr@1044 : TextConst 'ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      PostingDone@1000 : Boolean;
      AppliesToIDVisible@19043506 : Boolean INDATASET;
      Text012@1036 : TextConst 'ENU=The application was successfully posted.';
      Text013@1033 : TextConst 'ENU=The %1 entered must not be before the %1 on the %2.';
      Text019@1040 : TextConst 'ENU=Post application process has been canceled.';

    [External]
    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record "Gen. Journal Line";ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;

      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer then
        ApplyingAmount := GenJnlLine.Amount;
      if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer then
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      case ApplnTypeSelect of
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      end;

      SetApplyingCustLedgEntry;
    END;

    [Internal]
    PROCEDURE SetSales@2(NewSalesHeader@1000 : Record "Sales Header";VAR NewCustLedgEntry@1001 : Record "Cust. Ledger Entry";ApplnTypeSelect@1002 : Integer);
    VAR
      TotalAdjCostLCY@1003 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      COPYFILTERS(NewCustLedgEntry);

      SalesPost.SumSalesLines(
        SalesHeader,0,TotalSalesLine,TotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

      case SalesHeader."Document Type" of
        SalesHeader."Document Type"::"Return Order",
        SalesHeader."Document Type"::"Credit Memo":
          ApplyingAmount := -TotalSalesLine."Amount Including VAT"
        else
          ApplyingAmount := TotalSalesLine."Amount Including VAT";
      end;

      ApplnDate := SalesHeader."Posting Date";
      ApplnCurrencyCode := SalesHeader."Currency Code";
      CalcType := CalcType::SalesHeader;

      case ApplnTypeSelect of
        SalesHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        SalesHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      end;

      SetApplyingCustLedgEntry;
    END;

    [Internal]
    PROCEDURE SetService@8(NewServHeader@1000 : Record "Service Header";VAR NewCustLedgEntry@1001 : Record "Cust. Ledger Entry";ApplnTypeSelect@1002 : Integer);
    VAR
      ServAmountsMgt@1003 : Codeunit "Serv-Amounts Mgt.";
      TotalAdjCostLCY@1004 : Decimal;
    BEGIN
      ServHeader := NewServHeader;
      COPYFILTERS(NewCustLedgEntry);

      ServAmountsMgt.SumServiceLines(
        ServHeader,0,TotalServLine,TotalServLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

      case ServHeader."Document Type" of
        ServHeader."Document Type"::"Credit Memo":
          ApplyingAmount := -TotalServLine."Amount Including VAT"
        else
          ApplyingAmount := TotalServLine."Amount Including VAT";
      end;

      ApplnDate := ServHeader."Posting Date";
      ApplnCurrencyCode := ServHeader."Currency Code";
      CalcType := CalcType::ServHeader;

      case ApplnTypeSelect of
        ServHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        ServHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      end;

      SetApplyingCustLedgEntry;
    END;

    [External]
    PROCEDURE SetCustLedgEntry@13(NewCustLedgEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      Rec := NewCustLedgEntry;
    END;

    [Internal]
    PROCEDURE SetApplyingCustLedgEntry@9();
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      case CalcType of
        CalcType::SalesHeader:
          begin
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := SalesHeader."Posting Date";
            if SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" then
              ApplyingCustLedgEntry."Document Type" := SalesHeader."Document Type"::"Credit Memo"
            else
              ApplyingCustLedgEntry."Document Type" := SalesHeader."Document Type";
            ApplyingCustLedgEntry."Document No." := SalesHeader."No.";
            ApplyingCustLedgEntry."Customer No." := SalesHeader."Bill-to Customer No.";
            ApplyingCustLedgEntry.Description := SalesHeader."Posting Description";
            ApplyingCustLedgEntry."Currency Code" := SalesHeader."Currency Code";
            if ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::"Credit Memo" then  begin
              ApplyingCustLedgEntry.Amount := -TotalSalesLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := -TotalSalesLine."Amount Including VAT";
            end else begin
              ApplyingCustLedgEntry.Amount := TotalSalesLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := TotalSalesLine."Amount Including VAT";
            end;
            CalcApplnAmount;
          end;
        CalcType::ServHeader:
          begin
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := ServHeader."Posting Date";
            ApplyingCustLedgEntry."Document Type" := ServHeader."Document Type";
            ApplyingCustLedgEntry."Document No." := ServHeader."No.";
            ApplyingCustLedgEntry."Customer No." := ServHeader."Bill-to Customer No.";
            ApplyingCustLedgEntry.Description := ServHeader."Posting Description";
            ApplyingCustLedgEntry."Currency Code" := ServHeader."Currency Code";
            if ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::"Credit Memo" then  begin
              ApplyingCustLedgEntry.Amount := -TotalServLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := -TotalServLine."Amount Including VAT";
            end else begin
              ApplyingCustLedgEntry.Amount := TotalServLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := TotalServLine."Amount Including VAT";
            end;
            CalcApplnAmount;
          end;
        CalcType::Direct:
          begin
            if "Applying Entry" then begin
              if ApplyingCustLedgEntry."Entry No." <> 0 then
                CustLedgEntry := ApplyingCustLedgEntry;
              CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
              if "Applies-to ID" = '' then
                SetCustApplId;
              CALCFIELDS(Amount);
              ApplyingCustLedgEntry := Rec;
              if CustLedgEntry."Entry No." <> 0 then begin
                Rec := CustLedgEntry;
                "Applying Entry" := false;
                SetCustApplId;
              end;
              SETFILTER("Entry No.",'<> %1',ApplyingCustLedgEntry."Entry No.");
              ApplyingAmount := ApplyingCustLedgEntry."Remaining Amount";
              ApplnDate := ApplyingCustLedgEntry."Posting Date";
              ApplnCurrencyCode := ApplyingCustLedgEntry."Currency Code";
            end;
            CalcApplnAmount;
          end;
        CalcType::GenJnlLine:
          begin
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
            ApplyingCustLedgEntry."Document Type" := GenJnlLine."Document Type";
            ApplyingCustLedgEntry."Document No." := GenJnlLine."Document No.";
            if GenJnlLine."Bal. Account Type" = GenJnlLine."Account Type"::Customer then begin
              ApplyingCustLedgEntry."Customer No." := GenJnlLine."Bal. Account No.";
              Customer.GET(ApplyingCustLedgEntry."Customer No.");
              ApplyingCustLedgEntry.Description := Customer.Name;
            end else begin
              ApplyingCustLedgEntry."Customer No." := GenJnlLine."Account No.";
              ApplyingCustLedgEntry.Description := GenJnlLine.Description;
            end;
            ApplyingCustLedgEntry."Currency Code" := GenJnlLine."Currency Code";
            ApplyingCustLedgEntry.Amount := GenJnlLine.Amount;
            ApplyingCustLedgEntry."Remaining Amount" := GenJnlLine.Amount;
            CalcApplnAmount;
          end;
      end;
    END;

    [Internal]
    PROCEDURE SetCustApplId@11();
    BEGIN
      if (CalcType = CalcType::GenJnlLine) and (ApplyingCustLedgEntry."Posting Date" < "Posting Date") then
        ERROR(
          EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
          "Document Type","Document No.");

      if ApplyingCustLedgEntry."Entry No." <> 0 then
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,"Currency Code",GenJnlLine."Account Type"::Customer,true);

      CustLedgEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(CustLedgEntry);

      CustEntrySetApplID.SetApplId(CustLedgEntry,ApplyingCustLedgEntry,GetAppliesToID);

      CalcApplnAmount;
    END;

    LOCAL PROCEDURE GetAppliesToID@16() AppliesToID : Code[50];
    BEGIN
      case CalcType of
        CalcType::GenJnlLine:
          AppliesToID := GenJnlLine."Applies-to ID";
        CalcType::SalesHeader:
          AppliesToID := SalesHeader."Applies-to ID";
        CalcType::ServHeader:
          AppliesToID := ServHeader."Applies-to ID";
      end;
    END;

    [Internal]
    PROCEDURE CalcApplnAmount@4();
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := false;

      case CalcType of
        CalcType::Direct:
          begin
            FindAmountRounding;
            CustEntryApplID := USERID;
            if CustEntryApplID = '' then
              CustEntryApplID := '***';

            CustLedgEntry := ApplyingCustLedgEntry;

            AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
            AppliedCustLedgEntry.SETRANGE("Customer No.","Customer No.");
            AppliedCustLedgEntry.SETRANGE(Open,true);
            AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);

            if ApplyingCustLedgEntry."Entry No." <> 0 then begin
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              AppliedCustLedgEntry.SETFILTER("Entry No.",'<>%1',ApplyingCustLedgEntry."Entry No.");
            end;

            HandlChosenEntries(0,
              CustLedgEntry."Remaining Amount",
              CustLedgEntry."Currency Code",
              CustLedgEntry."Posting Date");
          end;
        CalcType::GenJnlLine:
          begin
            FindAmountRounding;
            if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer then
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

            case ApplnType of
              ApplnType::"Applies-to Doc. No.":
                begin
                  AppliedCustLedgEntry := Rec;
                  with AppliedCustLedgEntry do begin
                    CALCFIELDS("Remaining Amount");
                    if "Currency Code" <> ApplnCurrencyCode then begin
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                      "Remaining Pmt. Disc. Possible" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                      "Amount to Apply" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                    end;

                    if "Amount to Apply" <> 0 then
                      AppliedAmount := ROUND("Amount to Apply",AmountRoundingPrecision)
                    else
                      AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    if PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(
                         GenJnlLine,AppliedCustLedgEntry,0,false) and
                       ((ABS(GenJnlLine.Amount) + ApplnRoundingPrecision >=
                         ABS(AppliedAmount - "Remaining Pmt. Disc. Possible")) or
                        (GenJnlLine.Amount = 0))
                    then
                      PmtDiscAmount := "Remaining Pmt. Disc. Possible";

                    if not DifferentCurrenciesInAppln then
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  end;
                  CheckRounding;
                end;
              ApplnType::"Applies-to ID":
                begin
                  GenJnlLine2 := GenJnlLine;
                  AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                  AppliedCustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
                  AppliedCustLedgEntry.SETRANGE(Open,true);
                  AppliedCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

                  HandlChosenEntries(1,
                    GenJnlLine2.Amount,
                    GenJnlLine2."Currency Code",
                    GenJnlLine2."Posting Date");
                end;
            end;
          end;
        CalcType::SalesHeader,CalcType::ServHeader:
          begin
            FindAmountRounding;

            case ApplnType of
              ApplnType::"Applies-to Doc. No.":
                begin
                  AppliedCustLedgEntry := Rec;
                  with AppliedCustLedgEntry do begin
                    CALCFIELDS("Remaining Amount");

                    if "Currency Code" <> ApplnCurrencyCode then
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");

                    AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    if not DifferentCurrenciesInAppln then
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  end;
                  CheckRounding;
                end;
              ApplnType::"Applies-to ID":
                begin
                  AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                  if CalcType = CalcType::SalesHeader then
                    AppliedCustLedgEntry.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.")
                  else
                    AppliedCustLedgEntry.SETRANGE("Customer No.",ServHeader."Bill-to Customer No.");
                  AppliedCustLedgEntry.SETRANGE(Open,true);
                  AppliedCustLedgEntry.SETRANGE("Applies-to ID",GetAppliesToID);

                  HandlChosenEntries(2,
                    ApplyingAmount,
                    ApplnCurrencyCode,
                    ApplnDate);
                end;
            end;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcApplnRemainingAmount@6(Amount@1000 : Decimal) : Decimal;
    VAR
      ApplnRemainingAmount@1001 : Decimal;
    BEGIN
      ValidExchRate := true;
      if ApplnCurrencyCode = "Currency Code" then
        exit(Amount);

      if ApplnDate = 0D then
        ApplnDate := "Posting Date";
      ApplnRemainingAmount :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
      exit(ApplnRemainingAmount);
    END;

    LOCAL PROCEDURE CalcApplnAmounttoApply@10(AmounttoApply@1000 : Decimal) : Decimal;
    VAR
      ApplnAmounttoApply@1001 : Decimal;
    BEGIN
      ValidExchRate := true;

      if ApplnCurrencyCode = "Currency Code" then
        exit(AmounttoApply);

      if ApplnDate = 0D then
        ApplnDate := "Posting Date";
      ApplnAmounttoApply :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,AmounttoApply,ValidExchRate);
      exit(ApplnAmounttoApply);
    END;

    LOCAL PROCEDURE FindAmountRounding@7();
    BEGIN
      if ApplnCurrencyCode = '' then begin
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      end else
        if ApplnCurrencyCode <> Currency.Code then
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE CheckRounding@3();
    BEGIN
      ApplnRounding := 0;

      case CalcType of
        CalcType::SalesHeader,CalcType::ServHeader:
          exit;
        CalcType::GenJnlLine:
          if (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) and
             (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
          then
            exit;
      end;

      if ApplnCurrencyCode = '' then
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      else begin
        if ApplnCurrencyCode <> "Currency Code" then
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      end;

      if (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) and DifferentCurrenciesInAppln then
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    [External]
    PROCEDURE GetCustLedgEntry@5(VAR CustLedgEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      CustLedgEntry := Rec;
    END;

    LOCAL PROCEDURE FindApplyingEntry@12();
    BEGIN
      if CalcType = CalcType::Direct then begin
        CustEntryApplID := USERID;
        if CustEntryApplID = '' then
          CustEntryApplID := '***';

        CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
        CustLedgEntry.SETRANGE("Customer No.","Customer No.");
        CustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);
        CustLedgEntry.SETRANGE(Open,true);
        CustLedgEntry.SETRANGE("Applying Entry",true);
        if CustLedgEntry.FINDFIRST then begin
          CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
          ApplyingCustLedgEntry := CustLedgEntry;
          SETFILTER("Entry No.",'<>%1',CustLedgEntry."Entry No.");
          ApplyingAmount := CustLedgEntry."Remaining Amount";
          ApplnDate := CustLedgEntry."Posting Date";
          ApplnCurrencyCode := CustLedgEntry."Currency Code";
        end;
        CalcApplnAmount;
      end;
    END;

    LOCAL PROCEDURE HandlChosenEntries@14(Type@1000 : 'Direct,GenJnlLine,SalesHeader';CurrentAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      AppliedCustLedgEntryTemp@1004 : TEMPORARY Record "Cust. Ledger Entry";
      PossiblePmtDisc@1007 : Decimal;
      OldPmtDisc@1008 : Decimal;
      CorrectionAmount@1009 : Decimal;
      RemainingAmountExclDiscounts@1012 : Decimal;
      CanUseDisc@1005 : Boolean;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      if AppliedCustLedgEntry.FINDSET(false,false) then begin
        repeat
          AppliedCustLedgEntryTemp := AppliedCustLedgEntry;
          AppliedCustLedgEntryTemp.INSERT;
        until AppliedCustLedgEntry.NEXT = 0;
      end else
        exit;

      FromZeroGenJnl := (CurrentAmount = 0) and (Type = Type::GenJnlLine);

      repeat
        if not FromZeroGenJnl then
          AppliedCustLedgEntryTemp.SETRANGE(Positive,CurrentAmount < 0);
        if AppliedCustLedgEntryTemp.FINDFIRST then begin
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,PostingDate);

          case Type of
            Type::Direct:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscCust(CustLedgEntry,AppliedCustLedgEntryTemp,0,false,false);
            Type::GenJnlLine:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine2,AppliedCustLedgEntryTemp,0,false)
            else
              CanUseDisc := false;
          end;

          if CanUseDisc and
             (ABS(AppliedCustLedgEntryTemp."Amount to Apply") >= ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
          then begin
            if (ABS(CurrentAmount) > ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
            then begin
              PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
              CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
            end else
              if (ABS(CurrentAmount) = ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
              then begin
                PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                AppliedAmount := AppliedAmount + CorrectionAmount;
              end else
                if FromZeroGenJnl then begin
                  PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  CurrentAmount := CurrentAmount +
                    AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                end else begin
                  PossiblePmtDisc := AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  RemainingAmountExclDiscounts := AppliedCustLedgEntryTemp."Remaining Amount" - PossiblePmtDisc -
                    AppliedCustLedgEntryTemp."Max. Payment Tolerance";
                  if ABS(CurrentAmount) + ABS(CalcOppositeEntriesAmount(AppliedCustLedgEntryTemp)) >= ABS(RemainingAmountExclDiscounts)
                  then begin
                    PmtDiscAmount := PmtDiscAmount + PossiblePmtDisc;
                    AppliedAmount := AppliedAmount + CorrectionAmount;
                  end;
                  CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                end;
          end else begin
            if ((CurrentAmount + AppliedCustLedgEntryTemp."Amount to Apply") * CurrentAmount) <= 0 then
              AppliedAmount := AppliedAmount + CorrectionAmount;
            CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Amount to Apply";
          end;
        end else begin
          AppliedCustLedgEntryTemp.SETRANGE(Positive);
          AppliedCustLedgEntryTemp.FINDFIRST;
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,PostingDate);
        end;

        if OldPmtDisc <> PmtDiscAmount then
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Remaining Amount"
        else
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Amount to Apply";
        OldPmtDisc := PmtDiscAmount;

        if PossiblePmtDisc <> 0 then
          CorrectionAmount := AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Amount to Apply"
        else
          CorrectionAmount := 0;

        if not DifferentCurrenciesInAppln then
          DifferentCurrenciesInAppln := ApplnCurrencyCode <> AppliedCustLedgEntryTemp."Currency Code";

        AppliedCustLedgEntryTemp.DELETE;
        AppliedCustLedgEntryTemp.SETRANGE(Positive);

      until not AppliedCustLedgEntryTemp.FINDFIRST;
      CheckRounding;
    END;

    LOCAL PROCEDURE AmounttoApplyOnAfterValidate@19038179();
    BEGIN
      if ApplnType <> ApplnType::"Applies-to Doc. No." then begin
        CalcApplnAmount;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE RecalcApplnAmount@19051222();
    BEGIN
      CurrPage.UPDATE(true);
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      OK := true;
    END;

    LOCAL PROCEDURE PostDirectApplication@15(PreviewMode@1005 : Boolean);
    VAR
      CustEntryApplyPostedEntries@1000 : Codeunit "CustEntry-Apply Posted Entries";
      PostApplication@1002 : Page "Post Application";
      ApplicationDate@1001 : Date;
      NewApplicationDate@1003 : Date;
      NewDocumentNo@1004 : Code[20];
    BEGIN
      if CalcType = CalcType::Direct then begin
        if ApplyingCustLedgEntry."Entry No." <> 0 then begin
          Rec := ApplyingCustLedgEntry;
          ApplicationDate := CustEntryApplyPostedEntries.GetApplicationDate(Rec);

          PostApplication.SetValues("Document No.",ApplicationDate);
          if ACTION::OK = PostApplication.RUNMODAL then begin
            PostApplication.GetValues(NewDocumentNo,NewApplicationDate);
            if NewApplicationDate < ApplicationDate then
              ERROR(Text013,FIELDCAPTION("Posting Date"),TABLECAPTION);
          end else
            ERROR(Text019);

          if PreviewMode then
            CustEntryApplyPostedEntries.PreviewApply(Rec,NewDocumentNo,NewApplicationDate)
          else
            CustEntryApplyPostedEntries.Apply(Rec,NewDocumentNo,NewApplicationDate);

          if not PreviewMode then begin
            MESSAGE(Text012);
            PostingDone := true;
            CurrPage.CLOSE;
          end;
        end else
          ERROR(Text002);
      end else
        ERROR(Text003);
    END;

    LOCAL PROCEDURE ExchangeAmountsOnLedgerEntry@20(Type@1003 : 'Direct,GenJnlLine,SalesHeader';CurrencyCode@1000 : Code[10];VAR CalcCustLedgEntry@1001 : Record "Cust. Ledger Entry";PostingDate@1004 : Date);
    VAR
      CalculateCurrency@1002 : Boolean;
    BEGIN
      CalcCustLedgEntry.CALCFIELDS("Remaining Amount");

      if Type = Type::Direct then
        CalculateCurrency := ApplyingCustLedgEntry."Entry No." <> 0
      else
        CalculateCurrency := true;

      if (CurrencyCode <> CalcCustLedgEntry."Currency Code") and CalculateCurrency then begin
        CalcCustLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Amount",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Pmt. Disc. Possible",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Amount to Apply",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
      end;
    END;

    LOCAL PROCEDURE CalcOppositeEntriesAmount@17(VAR TempAppliedCustLedgerEntry@1000 : TEMPORARY Record "Cust. Ledger Entry") Result : Decimal;
    VAR
      SavedAppliedCustLedgerEntry@1002 : Record "Cust. Ledger Entry";
      CurrPosFilter@1001 : Text;
    BEGIN
      with TempAppliedCustLedgerEntry do begin
        CurrPosFilter := GETFILTER(Positive);
        if CurrPosFilter <> '' then begin
          SavedAppliedCustLedgerEntry := TempAppliedCustLedgerEntry;
          SETRANGE(Positive,not Positive);
          if FINDSET then
            repeat
              CALCFIELDS("Remaining Amount");
              Result += "Remaining Amount";
            until NEXT = 0;
          SETFILTER(Positive,CurrPosFilter);
          TempAppliedCustLedgerEntry := SavedAppliedCustLedgerEntry;
        end;
      end;
    END;

    BEGIN
    END.
  }
}

