OBJECT Codeunit 1643 Hyperlink Manifest
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1003 : Record "Sales & Receivables Setup";
      PurchasePayablesSetup@1001 : Record "Purchases & Payables Setup";
      AddInManifestManagement@1014 : Codeunit "Add-in Manifest Management";
      OfficeHostType@1004 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHostType";
      AddinNameTxt@1000 : TextConst 'ENU=Document View';
      AddinDescriptionTxt@1002 : TextConst '@@@=%1 - Application Name;ENU=Provides a link directly to business documents in %1.';
      ManifestVersionTxt@1006 : TextConst '@@@={Locked};ENU=1.1.0.0';
      AppIdTxt@1007 : TextConst '@@@={Locked};ENU=cf6f2e6a-5f76-4a17-b966-2ed9d0b3e88a';
      PurchaseOrderAcronymTxt@1005 : TextConst '@@@=US acronym for Purchase Order;ENU=PO';

    [Internal]
    PROCEDURE SetHyperlinkAddinTriggers@1017(VAR ManifestText@1009 : Text);
    VAR
      RegExText@1000 : Text;
    BEGIN
      // First add the number series rules
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedSalesInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedSalesCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedPurchInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedPurchCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseOrder),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesOrder),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesQuote),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseQuote),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseCrMemo),RegExText);

      // Wrap the prefixes in parenthesis to group them and fill out the rest of the RegEx:
      if RegExText <> '' then begin
        RegExText := STRSUBSTNO('(%1)([0-9]+)',RegExText);
        AddInManifestManagement.AddRegExRuleNode(ManifestText,'No.Series',RegExText);
      end;

      // Now add the text-based rules
      RegExText := 'invoice|order|quote|credit memo';
      RegExText += '|' + GetNameForSalesInvoice;
      RegExText += '|' + GetNameForPurchaseInvoice;
      RegExText += '|' + GetNameForPurchaseOrder;
      RegExText += '|' + GetAcronymForPurchaseOrder;
      RegExText += '|' + GetNameForSalesCrMemo;
      RegExText += '|' + GetNameForSalesOrder;
      RegExText += '|' + GetNameForSalesQuote;
      RegExText += '|' + GetNameForPurchaseQuote;
      RegExText += '|' + GetNameForPurchaseCrMemo;

      RegExText :=
        STRSUBSTNO('(%1):? ?#?(%2)',RegExText,GetNumberSeriesRegex);
      AddInManifestManagement.AddRegExRuleNode(ManifestText,'DocumentTypes',RegExText);
    END;

    [External]
    PROCEDURE GetNoSeriesForPurchaseCrMemo@1010() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Credit Memo Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPurchaseQuote@1011() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Quote Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPurchaseInvoice@1003() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Invoice Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPurchaseOrder@1004() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Order Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForSalesCrMemo@1005() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Credit Memo Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForSalesInvoice@1006() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Invoice Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForSalesOrder@1007() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Order Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForSalesQuote@1008() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Quote Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPostedSalesInvoice@1025() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Posted Invoice Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPostedSalesCrMemo@1026() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      exit(SalesReceivablesSetup."Posted Credit Memo Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPostedPurchInvoice@1027() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Posted Invoice Nos.");
    END;

    [External]
    PROCEDURE GetNoSeriesForPostedPurchCrMemo@1028() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      exit(PurchasePayablesSetup."Posted Credit Memo Nos.");
    END;

    [Internal]
    PROCEDURE GetPrefixForNoSeriesLine@1033(VAR NoSeriesLine@1000 : Record "No. Series Line") : Code[20];
    VAR
      NumericRegEx@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegExMatches@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      SeriesStartNo@1001 : Code[20];
      MatchText@1004 : Text;
      LowerMatchBound@1003 : Integer;
    BEGIN
      SeriesStartNo := NoSeriesLine."Starting No.";

      // Ensure that we have a non-numeric 'prefix' before the numbers and that we capture the last number group.
      // This ensures that we can generate a specific RegEx and not match all number sequences.

      NumericRegEx := NumericRegEx.Regex('[\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Pc}' + RegExEscape('\_/#*+|-') + ']([0-9]+)$');
      RegExMatches := NumericRegEx.Matches(SeriesStartNo);

      // If we don't have a match, then the code is unusable for a RegEx as a number series
      if RegExMatches.Count = 0 then
        exit('');

      MatchText := RegExMatches.Item(RegExMatches.Count - 1).Groups.Item(1).Value; // Get the number group from the match.
      LowerMatchBound := RegExMatches.Item(RegExMatches.Count - 1).Groups.Item(1).Index + 1 ; // Get the index of the group, adjust indexing for NAV.

      // Remove the number match - leaving only the prefix
      SeriesStartNo := DELSTR(SeriesStartNo,LowerMatchBound,STRLEN(MatchText));

      exit(SeriesStartNo);
    END;

    [Internal]
    PROCEDURE GetNoSeriesPrefixes@1016(NoSeriesCode@1000 : Code[20]) : Text;
    VAR
      NoSeriesLine@1012 : Record "No. Series Line";
      NewPrefix@1015 : Text;
      Prefixes@1002 : Text;
    BEGIN
      // For the given series code - get the prefix for each line
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      if NoSeriesLine.FIND('-') then
        repeat
          NewPrefix := GetPrefixForNoSeriesLine(NoSeriesLine);
          if NewPrefix <> '' then
            if Prefixes = '' then
              Prefixes := RegExEscape(NewPrefix)
            else
              Prefixes := STRSUBSTNO('%1|%2',Prefixes,RegExEscape(NewPrefix));
        until NoSeriesLine.NEXT = 0;

      exit(Prefixes);
    END;

    LOCAL PROCEDURE AddPrefixesToRegex@1019(Prefixes@1000 : Text;RegExText@1001 : Text) : Text;
    BEGIN
      // Handles some logic around concatenating the prefixes together in a regex string
      if Prefixes <> '' then
        if RegExText = '' then
          RegExText := Prefixes
        else
          RegExText := STRSUBSTNO('%1|%2',RegExText,Prefixes);
      exit(RegExText);
    END;

    [External]
    PROCEDURE GetNameForPurchaseCrMemo@1023() : Text;
    VAR
      PurchaseCreditMemo@1001 : Page "Purchase Credit Memo";
    BEGIN
      exit(PurchaseCreditMemo.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPurchaseInvoice@1022() : Text;
    VAR
      PurchaseInvoice@1000 : Page "Purchase Invoice";
    BEGIN
      exit(PurchaseInvoice.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPurchaseOrder@1021() : Text;
    VAR
      PurchaseOrder@1000 : Page "Purchase Order";
    BEGIN
      exit(PurchaseOrder.CAPTION);
    END;

    [External]
    PROCEDURE GetAcronymForPurchaseOrder@1032() : Text;
    BEGIN
      exit(PurchaseOrderAcronymTxt);
    END;

    [External]
    PROCEDURE GetNameForPurchaseQuote@1020() : Text;
    VAR
      PurchaseQuote@1000 : Page "Purchase Quote";
    BEGIN
      exit(PurchaseQuote.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForSalesCrMemo@1018() : Text;
    VAR
      SalesCreditMemo@1000 : Page "Sales Credit Memo";
    BEGIN
      exit(SalesCreditMemo.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForSalesInvoice@1015() : Text;
    VAR
      SalesInvoice@1000 : Page "Sales Invoice";
    BEGIN
      exit(SalesInvoice.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForSalesOrder@1002() : Text;
    VAR
      SalesOrder@1000 : Page "Sales Order";
    BEGIN
      exit(SalesOrder.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForSalesQuote@1001() : Text;
    VAR
      SalesQuote@1000 : Page "Sales Quote";
    BEGIN
      exit(SalesQuote.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPostedSalesInvoice@1009() : Text;
    VAR
      PostedSalesInvoices@1000 : Page "Posted Sales Invoices";
    BEGIN
      exit(PostedSalesInvoices.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPostedSalesCrMemo@1012() : Text;
    VAR
      PostedSalesCreditMemos@1000 : Page "Posted Sales Credit Memos";
    BEGIN
      exit(PostedSalesCreditMemos.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPostedPurchInvoice@1014() : Text;
    VAR
      PostedPurchaseInvoices@1000 : Page "Posted Purchase Invoices";
    BEGIN
      exit(PostedPurchaseInvoices.CAPTION);
    END;

    [External]
    PROCEDURE GetNameForPostedPurchCrMemo@1024() : Text;
    VAR
      PostedPurchaseCreditMemos@1000 : Page "Posted Purchase Credit Memos";
    BEGIN
      exit(PostedPurchaseCreditMemos.CAPTION);
    END;

    LOCAL PROCEDURE RegExEscape@1031(RegExText@1000 : Text) : Text;
    VAR
      RegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      // Function to escape some special characters in a regular expression character class:
      exit(RegEx.Escape(RegExText));
    END;

    [External]
    PROCEDURE GetNumberSeriesRegex@1029() : Text;
    BEGIN
      exit(STRSUBSTNO('[\w%1]*[0-9]+',RegExEscape('_/#*+\|-')));
    END;

    [EventSubscriber(Codeunit,1652,CreateDefaultAddins)]
    LOCAL PROCEDURE OnCreateAddin@1013(VAR OfficeAddin@1000 : Record "Office Add-in");
    BEGIN
      if OfficeAddin.GET(AppIdTxt) then
        OfficeAddin.DELETE;

      with AddInManifestManagement do
        CreateAddin(OfficeAddin,DefaultManifestText,AddinNameTxt,STRSUBSTNO(AddinDescriptionTxt,PRODUCTNAME.FULL),
          AppIdTxt,CODEUNIT::"Hyperlink Manifest");
    END;

    [EventSubscriber(Codeunit,1652,OnGenerateManifest)]
    LOCAL PROCEDURE OnGenerateManifest@1038(VAR OfficeAddin@1000 : Record "Office Add-in";VAR ManifestText@1001 : Text;CodeunitID@1002 : Integer);
    VAR
      AddinURL@1003 : Text;
    BEGIN
      if not CanHandle(CodeunitID) then
        exit;

      ManifestText := OfficeAddin.GetDefaultManifestText;
      AddInManifestManagement.SetCommonManifestItems(ManifestText);
      AddinURL := AddInManifestManagement.ConstructURL(OfficeHostType.OutlookHyperlink,'',ManifestVersionTxt);
      AddInManifestManagement.SetSourceLocationNodes(ManifestText,AddinURL,0);
      AddInManifestManagement.SetSourceLocationNodes(ManifestText,AddinURL,1);

      AddInManifestManagement.RemoveAddInTriggersFromManifest(ManifestText);
      SetHyperlinkAddinTriggers(ManifestText);
    END;

    [EventSubscriber(Codeunit,1652,GetAddin)]
    LOCAL PROCEDURE OnGetAddin@1037(VAR OfficeAddin@1000 : Record "Office Add-in";CodeunitID@1001 : Integer);
    BEGIN
      if CanHandle(CodeunitID) then
        OfficeAddin.GET(AppIdTxt);
    END;

    [EventSubscriber(Codeunit,1652,GetAddinID)]
    LOCAL PROCEDURE OnGetAddinID@1036(VAR ID@1000 : Text;CodeunitID@1001 : Integer);
    BEGIN
      if CanHandle(CodeunitID) then
        ID := AppIdTxt;
    END;

    [EventSubscriber(Codeunit,1652,GetAddinVersion)]
    LOCAL PROCEDURE OnGetAddinVersion@1035(VAR Version@1000 : Text;CodeunitID@1001 : Integer);
    BEGIN
      if CanHandle(CodeunitID) then
        Version := ManifestVersionTxt;
    END;

    [EventSubscriber(Codeunit,1652,GetManifestCodeunit)]
    LOCAL PROCEDURE OnGetCodeunitID@1034(VAR CodeunitID@1001 : Integer;HostType@1002 : Text);
    VAR
      OfficeHostType@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHostType";
    BEGIN
      with OfficeHostType do
        if HostType in [OutlookHyperlink] then
          CodeunitID := CODEUNIT::"Hyperlink Manifest";
    END;

    LOCAL PROCEDURE CanHandle@1039(CodeunitID@1000 : Integer) : Boolean;
    BEGIN
      exit(CodeunitID = CODEUNIT::"Hyperlink Manifest");
    END;

    LOCAL PROCEDURE DefaultManifestText@1030() Value : Text;
    BEGIN
      Value :=
        '<?xml version="1.0" encoding="utf-8"?>' +
        '<OfficeApp xsi:type="MailApp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
        ' xmlns="http://schemas.microsoft.com/office/appforoffice/1.1">' +
        '  <Id>' + AppIdTxt + '</Id>' +
        '  <Version>' + ManifestVersionTxt + '</Version>' +
        '  <ProviderName>Microsoft</ProviderName>' +
        '  <DefaultLocale>en-US</DefaultLocale>' +
        '  <DisplayName DefaultValue="' + AddinNameTxt + '" />' +
        '  <Description DefaultValue="' +
        STRSUBSTNO(AddinDescriptionTxt,AddInManifestManagement.XMLEncode(PRODUCTNAME.FULL)) + '" />' +
        '  <IconUrl DefaultValue="WEBCLIENTLOCATION/Resources/Images/OfficeAddinLogo.png"/>' +
        '  <HighResolutionIconUrl DefaultValue="WEBCLIENTLOCATION/Resources/Images/OfficeAddinLogoHigh.png"/>' +
        '  <AppDomains>' +
        '    <AppDomain>WEBCLIENTLOCATION</AppDomain>' +
        '  </AppDomains>' +
        '  <Hosts>' +
        '    <Host Name="Mailbox" />' +
        '  </Hosts>' +
        '  <Requirements>' +
        '    <Sets>' +
        '      <Set Name="MailBox" MinVersion="1.1" />' +
        '    </Sets>' +
        '  </Requirements>' +
        '  <FormSettings>' +
        '    <Form xsi:type="ItemRead">' +
        '      <DesktopSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '        <RequestedHeight>300</RequestedHeight>' +
        '      </DesktopSettings>' +
        '      <TabletSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '        <RequestedHeight>300</RequestedHeight>' +
        '      </TabletSettings>' +
        '      <PhoneSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </PhoneSettings>' +
        '    </Form>' +
        '    <Form xsi:type="ItemEdit">' +
        '      <DesktopSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </DesktopSettings>' +
        '      <TabletSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </TabletSettings>' +
        '      <PhoneSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </PhoneSettings>' +
        '    </Form>' +
        '  </FormSettings>' +
        '  <Permissions>ReadWriteItem</Permissions>' +
        '  <Rule xsi:type="RuleCollection" Mode="And">' +
        '    <Rule xsi:type="RuleCollection" Mode="Or">' +
        '      <!-- To add more complex rules, add additional rule elements -->' +
        '      <!-- E.g. To activate when a message contains an address -->' +
        '      <!-- <Rule xsi:type="ItemHasKnownEntity" EntityType="Address" /> -->' +
        '    </Rule>' +
        '    <Rule xsi:type="RuleCollection" Mode="Or">' +
        '      <Rule xsi:type="ItemIs" FormType="Edit" ItemType="Message" />' +
        '      <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />' +
        '    </Rule>' +
        '' +
        '  </Rule>' +
        '</OfficeApp>';
    END;

    BEGIN
    END.
  }
}

