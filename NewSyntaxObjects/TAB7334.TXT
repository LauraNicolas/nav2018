OBJECT Table 7334 Whse. Internal Pick Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
               DocStatus@1000 : Option;
             BEGIN
               TestReleased;

               if ("Qty. Picked" > 0) and (Quantity > "Qty. Picked") then
                 if not HideValidationDialog then
                   if not CONFIRM(
                        STRSUBSTNO(
                          Text002,
                          FIELDCAPTION("Qty. Picked"),"Qty. Picked",
                          FIELDCAPTION(Quantity),Quantity,TABLECAPTION),false)
                   then
                     ERROR(Text003);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Whse. Internal Pick Line",0,"No.",'',0,"Line No.","Location Code",true);

               DocStatus :=
                 WhseInternalPickHeader.GetDocumentStatus("Line No.");
               if DocStatus <> WhseInternalPickHeader."Document Status" then begin
                 WhseInternalPickHeader.VALIDATE("Document Status",DocStatus);
                 WhseInternalPickHeader.MODIFY;
               end;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Whse. Internal Pick Line;
    LookupPageID="Whse. Internal Pick Lines";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;To Bin Code         ;Code20        ;TableRelation=IF ("To Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("To Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Zone Code"=FIELD("To Zone Code"));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                if xRec."To Bin Code" <> "To Bin Code" then
                                                                  if "To Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      if "To Bin Code" = Location."Adjustment Bin Code" then
                                                                        FIELDERROR(
                                                                          "To Bin Code",
                                                                          STRSUBSTNO(
                                                                            Text004,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                            Location.TABLECAPTION));

                                                                      CheckBin(true);
                                                                    end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=To Bin Code }
    { 13  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                if xRec."To Zone Code" <> "To Zone Code" then begin
                                                                  if "To Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "To Bin Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=To Zone Code }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                if "Item No." <> xRec."Item No." then
                                                                  "Variant Code" := '';

                                                                GetInternalPickHeader("No.");
                                                                "Location Code" := WhseInternalPickHeader."Location Code";
                                                                if WhseInternalPickHeader."To Zone Code" <> '' then
                                                                  "To Zone Code" := WhseInternalPickHeader."To Zone Code";
                                                                if WhseInternalPickHeader."To Bin Code" <> '' then
                                                                  "To Bin Code" := WhseInternalPickHeader."To Bin Code";

                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitofMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DocStatus@1000 : Option;
                                                              BEGIN
                                                                TestReleased;
                                                                CALCFIELDS("Pick Qty.");
                                                                if Quantity < "Qty. Picked" + "Pick Qty." then
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Picked" + "Pick Qty."));

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Picked"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);

                                                                CheckBin(true);

                                                                Status := CalcStatusPickLine;
                                                                if Status <> xRec.Status then begin
                                                                  GetInternalPickHeader("No.");
                                                                  DocStatus := WhseInternalPickHeader.GetDocumentStatus(0);
                                                                  if DocStatus <> WhseInternalPickHeader."Document Status" then begin
                                                                    WhseInternalPickHeader.VALIDATE("Document Status",DocStatus);
                                                                    WhseInternalPickHeader.MODIFY;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit "WMS Management";
                                                              BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");

                                                                WMSMgt.CalcCubageAndWeight(
                                                                  "Item No.","Unit of Measure Code","Qty. Outstanding",Cubage,Weight);
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 23  ;   ;Qty. Picked         ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=ENU=Qty. Picked;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=ENU=Qty. Picked (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Activity Type"=CONST(Pick),
                                                                                                                       "Whse. Document Type"=CONST("Internal Pick"),
                                                                                                                       "Whse. Document No."=FIELD("No."),
                                                                                                                       "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                       "Action Type"=FILTER(" "|Place),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Original Breakbulk"=CONST(false),
                                                                                                                       "Breakbulk No."=CONST(0)));
                                                   CaptionML=ENU=Pick Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 28  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=CONST(Pick),
                                                                                                                              "Whse. Document Type"=CONST("Internal Pick"),
                                                                                                                              "Whse. Document No."=FIELD("No."),
                                                                                                                              "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                              "Action Type"=FILTER(" "|Place),
                                                                                                                              "Original Breakbulk"=CONST(false),
                                                                                                                              "Breakbulk No."=CONST(0)));
                                                   CaptionML=ENU=Pick Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitofMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   NotBlank=true }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" = '' then
                                                                  VALIDATE("Item No.")
                                                                else begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 34  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Partially Picked,Completely Picked";
                                                   OptionString=" ","Partially Picked","Completely Picked";
                                                   Editable=false }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"No.","Line No."                        ;Clustered=true }
    {    ;"No.","Sorting Sequence No."             }
    {    ;"No.","Item No."                        ;MaintainSQLIndex=false }
    {    ;"No.","Shelf No."                       ;MaintainSQLIndex=false }
    {    ;"No.","To Bin Code"                     ;MaintainSQLIndex=false }
    {    ;"No.","Due Date"                        ;MaintainSQLIndex=false }
    {    ;"To Bin Code","Location Code"           ;SumIndexFields="Qty. Outstanding",Cubage,Weight;
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1001 : Record Location;
      Item@1009 : Record Item;
      ItemUnitofMeasure@1010 : Record "Item Unit of Measure";
      WhseInternalPickHeader@1002 : Record "Whse. Internal Pick Header";
      Text000@1005 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1003 : TextConst 'ENU=must not be less than %1 units';
      Text002@1004 : TextConst 'ENU="%1 = %2 is less than the %3 = %4.\Do you really want to delete the %5?"';
      Text003@1000 : TextConst 'ENU=Cancelled.';
      Text004@1006 : TextConst 'ENU=must not be the %1 of the %2';
      LastLineNo@1011 : Integer;
      HideValidationDialog@1008 : Boolean;
      Text005@1007 : TextConst 'ENU=Nothing to handle.';

    [External]
    PROCEDURE SetUpNewLine@2(LastWhseInternalPickLine@1000 : Record "Whse. Internal Pick Line");
    VAR
      WhseInternalPickLine@1001 : Record "Whse. Internal Pick Line";
    BEGIN
      if GetInternalPickHeader("No.") then begin
        WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
        if WhseInternalPickLine.COUNT > 0 then
          LastLineNo := LastWhseInternalPickLine."Line No."
        else
          LastLineNo := 0;
        "Line No." := GetNextLineNo;
        "To Zone Code" := WhseInternalPickHeader."To Zone Code";
        "To Bin Code" := WhseInternalPickHeader."To Bin Code";
        "Due Date" := WhseInternalPickHeader."Due Date";
      end;
      "Location Code" := WhseInternalPickHeader."Location Code";
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE TestReleased@37();
    BEGIN
      TESTFIELD("No.");
      GetInternalPickHeader("No.");
      WhseInternalPickHeader.TESTFIELD(Status,WhseInternalPickHeader.Status::Open);
    END;

    [External]
    PROCEDURE CalcStatusPickLine@4() : Integer;
    BEGIN
      if (Quantity <> 0) and (Quantity = "Qty. Picked") then
        exit(Status::"Completely Picked");
      if "Qty. Picked" > 0 then
        exit(Status::"Partially Picked");
      exit(Status::" ");
    END;

    [External]
    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetItem@3();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      if (Item."No." <> ItemUnitofMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitofMeasure.Code)
      then
        if not ItemUnitofMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitofMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetInternalPickHeader@7(InternalPickNo@1000 : Code[20]) : Boolean;
    BEGIN
      if not WhseInternalPickHeader.GET(InternalPickNo) then
        exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE CreatePickDoc@6(VAR WhseInternalPickLine@1000 : Record "Whse. Internal Pick Line";WhseInternalPickHeader2@1001 : Record "Whse. Internal Pick Header");
    VAR
      CreatePickFromWhseSource@1002 : Report "Whse.-Source - Create Document";
    BEGIN
      WhseInternalPickHeader2.CheckPickRequired(WhseInternalPickHeader2."Location Code");
      WhseInternalPickHeader2.TESTFIELD(Status,WhseInternalPickHeader2.Status::Released);
      WhseInternalPickLine.SETFILTER(Quantity,'>0');
      WhseInternalPickLine.SETFILTER(
        Status,'<>%1',WhseInternalPickLine.Status::"Completely Picked");
      if WhseInternalPickLine.FIND('-') then begin
        CreatePickFromWhseSource.SetWhseInternalPickLine(
          WhseInternalPickLine,WhseInternalPickHeader2."Assigned User ID");
        CreatePickFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        CreatePickFromWhseSource.USEREQUESTPAGE(not HideValidationDialog);
        CreatePickFromWhseSource.RUNMODAL;
        CreatePickFromWhseSource.GetResultMessage(2);
        CLEAR(CreatePickFromWhseSource);
      end else
        if not HideValidationDialog then
          MESSAGE(Text005);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      WhseWorksheetLine@1001 : Record "Whse. Worksheet Line";
      WhseItemTrackingLines@1000 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWorksheetLine.INIT;
      WhseWorksheetLine."Whse. Document Type" :=
        WhseWorksheetLine."Whse. Document Type"::"Internal Pick";
      WhseWorksheetLine."Whse. Document No." := "No.";
      WhseWorksheetLine."Whse. Document Line No." := "Line No.";
      WhseWorksheetLine."Location Code" := "Location Code";
      WhseWorksheetLine."Item No." := "Item No.";
      WhseWorksheetLine."Qty. (Base)" := "Qty. (Base)";
      WhseWorksheetLine."Qty. to Handle (Base)" :=
        "Qty. (Base)" - "Qty. Picked (Base)" - "Pick Qty. (Base)";
      WhseItemTrackingLines.SetSource(WhseWorksheetLine,DATABASE::"Whse. Internal Pick Line");
      WhseItemTrackingLines.RUNMODAL;
      CLEAR(WhseItemTrackingLines);
    END;

    [External]
    PROCEDURE CheckBin@9(CalcDeduction@1000 : Boolean);
    VAR
      Bin@1004 : Record Bin;
      BinContent@1003 : Record "Bin Content";
      WhseInternalPickLine@1005 : Record "Whse. Internal Pick Line";
    BEGIN
      if "To Bin Code" <> '' then begin
        GetLocation("Location Code");
        if not Location."Directed Put-away and Pick" then
          exit;

        if (Location."Bin Capacity Policy" in
            [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
             Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]) and
           CalcDeduction
        then begin
          WhseInternalPickLine.SETCURRENTKEY("To Bin Code","Location Code");
          WhseInternalPickLine.SETRANGE("To Bin Code","To Bin Code");
          WhseInternalPickLine.SETRANGE("Location Code","Location Code");
          WhseInternalPickLine.SETRANGE("No.","No.");
          WhseInternalPickLine.SETRANGE("Line No.","Line No.");
          WhseInternalPickLine.CALCSUMS("Qty. Outstanding",Cubage,Weight);
        end;
        if BinContent.GET(
             "Location Code","To Bin Code","Item No.","Variant Code","Unit of Measure Code")
        then begin
          BinContent.TESTFIELD("Bin Type Code");
          BinContent.CheckIncreaseBinContent(
            "Qty. Outstanding",WhseInternalPickLine.Quantity,
            WhseInternalPickLine.Cubage,WhseInternalPickLine.Weight,
            Cubage,Weight,false,false);
          "To Zone Code" := BinContent."Zone Code";
        end else begin
          Bin.GET("Location Code","To Bin Code");
          Bin.CheckIncreaseBin(
            "To Bin Code","Item No.","Qty. Outstanding",
            WhseInternalPickLine.Cubage,WhseInternalPickLine.Weight,
            Cubage,Weight,false,false);
          Bin.TESTFIELD("Bin Type Code");
          "To Zone Code" := Bin."Zone Code";
        end;
      end;
    END;

    LOCAL PROCEDURE GetNextLineNo@10() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record "Whse. Internal Pick Line";
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      if WhseInternalPickHeader."Sorting Method" <> WhseInternalPickHeader."Sorting Method"::" " then
        exit(GetLastLineNo + 10000);

      WhseInternalPickLine."No." := WhseInternalPickHeader."No.";
      WhseInternalPickLine."Line No." := LastLineNo;
      if WhseInternalPickLine.FIND('<') then
        LowerLineNo := WhseInternalPickLine."Line No."
      else
        if WhseInternalPickLine.FIND('>') then
          exit(LastLineNo div 2)
        else
          exit(LastLineNo + 10000);

      WhseInternalPickLine."No." := WhseInternalPickHeader."No.";
      WhseInternalPickLine."Line No." := LastLineNo;
      if WhseInternalPickLine.FIND('>') then
        HigherLineNo := LastLineNo
      else
        exit(LastLineNo + 10000);
      exit(LowerLineNo + (HigherLineNo - LowerLineNo) div 2);
    END;

    LOCAL PROCEDURE GetLastLineNo@12() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record "Whse. Internal Pick Line";
    BEGIN
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      if WhseInternalPickLine.FINDLAST then
        exit(WhseInternalPickLine."Line No.");
      exit(0);
    END;

    LOCAL PROCEDURE GetSortSeqNo@11() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record "Whse. Internal Pick Line";
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalPickHeader("No.");

      WhseInternalPickLine.SETRANGE("No.","No.");
      case WhseInternalPickHeader."Sorting Method" of
        WhseInternalPickHeader."Sorting Method"::" ":
          WhseInternalPickLine.SETCURRENTKEY("No.","Line No.");
        WhseInternalPickHeader."Sorting Method"::Item:
          WhseInternalPickLine.SETCURRENTKEY("No.","Item No.");
        WhseInternalPickHeader."Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              WhseInternalPickLine.SETCURRENTKEY("No.","To Bin Code")
            else
              WhseInternalPickLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        WhseInternalPickHeader."Sorting Method"::"Due Date":
          WhseInternalPickLine.SETCURRENTKEY("No.","Due Date");
        else
          exit("Line No.")
      end;

      WhseInternalPickLine := Rec;
      LastSeqNo := GetLastSeqNo(WhseInternalPickLine);
      if WhseInternalPickLine.FIND('<') then
        LowerSeqNo := WhseInternalPickLine."Sorting Sequence No."
      else
        if WhseInternalPickLine.FIND('>') then
          exit(WhseInternalPickLine."Sorting Sequence No." div 2)
        else
          LowerSeqNo := 10000;

      WhseInternalPickLine := Rec;
      if WhseInternalPickLine.FIND('>') then
        HigherSeqNo := WhseInternalPickLine."Sorting Sequence No."
      else
        if WhseInternalPickLine.FIND('<') then
          exit(LastSeqNo + 10000)
        else
          HigherSeqNo := LastSeqNo;
      exit(LowerSeqNo + (HigherSeqNo - LowerSeqNo) div 2);
    END;

    LOCAL PROCEDURE GetLastSeqNo@17(WhseInternalPickLine@1001 : Record "Whse. Internal Pick Line") : Integer;
    BEGIN
      WhseInternalPickLine.SETRECFILTER;
      WhseInternalPickLine.SETRANGE("Line No.");
      WhseInternalPickLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      if WhseInternalPickLine.FINDLAST then
        exit(WhseInternalPickLine."Sorting Sequence No.");
      exit(0);
    END;

    BEGIN
    END.
  }
}

