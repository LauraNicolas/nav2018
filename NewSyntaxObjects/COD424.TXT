OBJECT Codeunit 424 Export Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1012 : TextConst 'ENU=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.';
      Text001@1036 : TextConst 'ENU=This combination is not valid. You cannot export Debit and Credit amounts for Budgeted amounts.\Please enter Amount in the Show Amount field.';
      Text002@1023 : TextConst 'ENU=General Info._';
      Text003@1020 : TextConst 'ENU=None';
      Text004@1033 : TextConst 'ENU=Day';
      Text005@1024 : TextConst 'ENU=Week';
      Text006@1014 : TextConst 'ENU=Month';
      Text007@1025 : TextConst 'ENU=Quarter';
      Text008@1026 : TextConst 'ENU=Year';
      Text009@1027 : TextConst 'ENU=Accounting Period';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension "';
      Text012@1030 : TextConst 'ENU=Amount Type';
      Text013@1031 : TextConst 'ENU=Net Change';
      Text014@1032 : TextConst 'ENU=Balance at Date';
      Text015@1018 : TextConst 'ENU=Date Filter';
      Text016@1022 : TextConst 'ENU=Budget Filter';
      Text116@1114 : TextConst 'ENU=Cash Flow Forecast Filter';
      Text017@1034 : TextConst 'ENU=Pivot Table_';
      Text018@1017 : TextConst 'ENU=G/L Account';
      Text118@1116 : TextConst 'ENU=Cash Flow Account';
      Text019@1035 : TextConst 'ENU=Period';
      Text020@1021 : TextConst 'ENU=Budgeted Amount';
      Text022@1043 : TextConst 'ENU=Level';
      Text023@1040 : TextConst 'ENU=Analysis View Name';
      Text024@1041 : TextConst 'ENU=Closing Entries';
      Text025@1045 : TextConst 'ENU=Included';
      Text026@1046 : TextConst 'ENU=Excluded';
      Text027@1047 : TextConst 'ENU="All amounts shown in "';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign';
      Text029@1049 : TextConst 'ENU=Yes';
      Text030@1050 : TextConst 'ENU=No';
      Text031@1051 : TextConst 'ENU=Data_';
      Text032@1000 : TextConst 'ENU=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.';
      TempDimValue2@1042 : TEMPORARY Record "Dimension Value";
      TempDimValue3@1037 : TEMPORARY Record "Dimension Value";
      TempGLAcc2@1052 : TEMPORARY Record "G/L Account";
      TempGLAcc3@1007 : TEMPORARY Record "G/L Account";
      TempCFAccount2@1136 : TEMPORARY Record "Cash Flow Account";
      TempCFAccount3@1137 : TEMPORARY Record "Cash Flow Account";
      BusUnit@1056 : Record "Business Unit";
      FileMgt@1003 : Codeunit "File Management";
      TextFileStream@1008 : OutStream;
      TextFileStreamWriter@1006 : DotNet "'mscorlib'.System.IO.StreamWriter";
      TextFileEncoding@1005 : DotNet "'mscorlib'.System.Text.Encoding";
      xlApp@1011 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      xlWorkSheet@1009 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      xlWorkSheet2@1170000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      xlWorkSheet3@1170000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      ExcelHelper@1170000002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      NoOfColumns@1001 : Integer;
      MaxLevel@1039 : Integer;
      MaxLevelDim@1019 : ARRAY [4] OF Integer;
      FileName@1013 : Text;
      HasBusinessUnits@1055 : Boolean;
      AccNoPrefix@1058 : Code[10];
      Text038@1059 : TextConst 'ENU=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.';
      GLAccountSource@1002 : Boolean;
      ExcelVersion@1004 : Text[30];

    [Internal]
    PROCEDURE ExportData@3(VAR Rec@1000 : Record "Analysis View Entry";Line@1002 : Text[30];Column@1005 : Text[30];Sign@1006 : Boolean;ShowInAddCurr@1008 : Boolean;AmountField@1009 : Option;PeriodType@1010 : Option;ShowName@1011 : Boolean;DateFilter@1013 : Text;AccFilter@1004 : Text;BudgetFilter@1014 : Text;Dim1Filter@1015 : Text;Dim2Filter@1017 : Text;Dim3Filter@1018 : Text;Dim4Filter@1019 : Text;AmountType@1021 : Option;ClosingEntryFilter@1022 : Option;Show@1024 : Option;OtherFilter@1033 : Text);
    VAR
      AnalysisViewFilter@1028 : Record "Analysis View Filter";
      Currency@1026 : Record Currency;
      GLSetup@1025 : Record "General Ledger Setup";
      ExcelBuffer@1023 : TEMPORARY Record "Excel Buffer";
      AnalysisView@1001 : Record "Analysis View";
      xlPivotTable@1034 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable" RUNONCLIENT;
      xlPivotCache@1027 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotCache" RUNONCLIENT;
      xlRange@1016 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      xlPivotField@1007 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotField" RUNONCLIENT;
      PivotFieldOrientation@1170000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlPivotFieldOrientation" RUNONCLIENT;
      PivotFieldFunction@1170000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlConsolidationFunction" RUNONCLIENT;
      PivotFieldCalculation@1170000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlPivotFieldCalculation" RUNONCLIENT;
      FormatString@1012 : Text[30];
      NoOfRows@1003 : Integer;
      RowNoCount@1020 : Integer;
      xlSheetName@1032 : Text[100];
      BusUnitFilter@1031 : Code[250];
      CashFlowFilter@1030 : Code[250];
    BEGIN
      GLAccountSource := Rec."Account Source" = Rec."Account Source"::"G/L Account";

      CheckCombination(Show,AmountField);

      BusUnitFilter := '';
      CashFlowFilter := '';

      SetOtherFilterToCorrectFilter(OtherFilter,BusUnitFilter,CashFlowFilter);

      xlApp := xlApp.ApplicationClass;
      HasBusinessUnits := not BusUnit.ISEMPTY;
      with Rec do begin
        NoOfRows :=
          CreateFile(
            Rec,Sign,ShowInAddCurr,ShowName,AccFilter,Dim1Filter,Dim2Filter,
            Dim3Filter,Dim4Filter,ClosingEntryFilter,DateFilter,BusUnitFilter,BudgetFilter,AmountType,CashFlowFilter);

        FileName := FileMgt.DownloadTempFile(FileName);

        ExcelHelper.CallOpenText(xlApp,FileName);
        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text031) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;

        if AccNoPrefix <> '' then begin
          ExcelBuffer.VALIDATE("Column No.",NoOfColumns);
          xlRange := ExcelHelper.FindRange(xlWorkSheet,'A2:' + ExcelBuffer.xlColID + FORMAT(NoOfRows + 1));
          xlRange.NumberFormat := '@';
          ExcelHelper.ReplaceInRange(xlRange,AccNoPrefix,'''');
        end;

        xlWorkSheet3 := ExcelHelper.AddWorksheet(xlApp.ActiveWorkbook);
        xlWorkSheet3.Name := FORMAT(Text002) + CONVERTSTR("Analysis View Code",' -+','___');
        ExcelHelper.FindRange(xlWorkSheet3,'A1').Value2 := AnalysisView.TABLECAPTION;
        ExcelHelper.FindRange(xlWorkSheet3,'B2').Value2 := FIELDCAPTION("Analysis View Code");
        ExcelHelper.FindRange(xlWorkSheet3,'C2').Value2 := "Analysis View Code";
        ExcelHelper.FindRange(xlWorkSheet3,'B3').Value2 := FORMAT(Text023);
        AnalysisView.GET("Analysis View Code");
        ExcelHelper.FindRange(xlWorkSheet3,'C3').Value2 := AnalysisView.Name;
        RowNoCount := 3;
        if AnalysisView."Account Filter" <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView.FIELDCAPTION("Account Filter");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := AnalysisView."Account Filter";
        end;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView.FIELDCAPTION("Date Compression");
        case AnalysisView."Date Compression" of
          0:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text003);
          1:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text004);
          2:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text005);
          3:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text006);
          4:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text007);
          5:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text008);
          6:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text009);
        end;
        if AnalysisView."Starting Date" <> 0D then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView.FIELDCAPTION("Starting Date");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(AnalysisView."Starting Date");
        end;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView.FIELDCAPTION("Last Date Updated");
        ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(AnalysisView."Last Date Updated");
        AnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        if AnalysisViewFilter.FIND('-') then
          repeat
            RowNoCount := RowNoCount + 1;
            ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisViewFilter."Dimension Code";
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := AnalysisViewFilter."Dimension Value Filter";
          until AnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'A' + FORMAT(RowNoCount)).Value2 := FORMAT(Text011);
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text012);
        case AmountType of
          0:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text013);
          1:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text014);
        end;
        if DateFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text015);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := DateFilter;
        end;
        if AccFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView.FIELDCAPTION("Account Filter");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := AccFilter;
        end;
        if BudgetFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text016);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := BudgetFilter;
        end;
        if CashFlowFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text116);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := CashFlowFilter;
        end;
        if Dim1Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView."Dimension 1 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim1Filter;
        end;
        if Dim2Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView."Dimension 2 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim2Filter;
        end;
        if Dim3Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView."Dimension 3 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim3Filter;
        end;
        if Dim4Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := AnalysisView."Dimension 4 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim4Filter;
        end;
        if GLAccountSource then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text024);
          case ClosingEntryFilter of
            0:
              ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text025);
            1:
              ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text026);
          end;
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text027);
          GLSetup.GET;
          if ShowInAddCurr then
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := GLSetup."Additional Reporting Currency"
          else
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := GLSetup."LCY Code";
        end;

        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text028);
        if Sign then
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text029)
        else
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text030);

        ExcelBuffer.VALIDATE("Column No.",10 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
              xlSheetName,ExcelBuffer.xlColID,NoOfRows + 1));

        ExcelHelper.CreatePivotTable(xlPivotCache,'','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet;
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text017) + CONVERTSTR("Analysis View Code",' -+','___');

        if Line <> '' then
          case Line of
            Text018, Text118:
              xlPivotField := xlPivotTable.PivotFields(GetPivotFieldAccountIndexValue(MaxLevel));
            Text019:
              case PeriodType of
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              end;
            BusUnit.TABLECAPTION:
              xlPivotField := xlPivotTable.PivotFields(BusUnit.TABLECAPTION);
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          end;

        xlPivotField.Orientation := PivotFieldOrientation.xlRowField;
        xlPivotField.Position := 1;

        if Column <> '' then
          case Column of
            Text018, Text118:
              xlPivotField := xlPivotTable.PivotFields(GetPivotFieldAccountIndexValue(MaxLevel));
            Text019:
              case PeriodType of
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              end;
            BusUnit.TABLECAPTION:
              xlPivotField := xlPivotTable.PivotFields(BusUnit.TABLECAPTION);
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          end;
        xlPivotField.Orientation := PivotFieldOrientation.xlColumnField; // xlColumnField
        xlPivotField.Position := 1;
        if Show = 0 then
          case AmountField of
            0:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION(Amount));
            1:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION("Debit Amount"));
            2:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION("Credit Amount"));
          end
        else
          xlPivotField := xlPivotTable.PivotFields(FORMAT(Text020));

        xlPivotField.Orientation := PivotFieldOrientation.xlDataField;
        xlPivotField.Position := 1;
        xlPivotField.Function := PivotFieldFunction.xlSum;

        if (AmountType = 1) and (Column = Text019) or (AmountType = 1) and (Line = Text019) then begin
          xlPivotField.Calculation := PivotFieldCalculation.xlRunningTotal;
          case PeriodType of
            0:
              xlPivotField.BaseField := FORMAT(Text004);
            1:
              xlPivotField.BaseField := FORMAT(Text005);
            2:
              xlPivotField.BaseField := FORMAT(Text006);
            3:
              xlPivotField.BaseField := FORMAT(Text007);
            4:
              xlPivotField.BaseField := FORMAT(Text008);
            5:
              xlPivotField.BaseField := FORMAT(Text009);
          end;
        end;

        GLSetup.GET;
        if ShowInAddCurr and Currency.GET(GLSetup."Additional Reporting Currency") then
          FormatString := DELCHR(FORMAT(ROUND(1000.01,Currency."Amount Rounding Precision"),0),'<',' ')
        else
          FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');

        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        if STRLEN(FormatString) >= 8 then
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; // '#.##0,00';

        xlPivotTable.SmallGrid := false;
      end;

      xlApp.Visible := true;
    END;

    LOCAL PROCEDURE CreateFile@1(VAR AnalysisViewEntry@1000 : Record "Analysis View Entry";Sign@1009 : Boolean;ShowInAddCurr@1010 : Boolean;ShowName@1018 : Boolean;AccFilter@1020 : Text;Dim1Filter@1025 : Text;Dim2Filter@1024 : Text;Dim3Filter@1023 : Text;Dim4Filter@1022 : Text;ClosingEntryFilter@1033 : Option;DateFilter@1011 : Text;BusUnitFilter@1030 : Text;BudgetFilter@1045 : Text;AmountType@1046 : Option;CFFilter@1146 : Text) : Integer;
    VAR
      AnalysisViewEntry2@1001 : Record "Analysis View Entry";
      AnalysisViewEntry3@1037 : Record "Analysis View Entry";
      AnalysisView@1002 : Record "Analysis View";
      AnalysisViewBudgetEntry@1031 : Record "Analysis View Budget Entry";
      AnalysisViewBudgetEntry2@1032 : Record "Analysis View Budget Entry";
      CurrExchRate@1036 : Record "Currency Exchange Rate";
      GLSetup@1035 : Record "General Ledger Setup";
      Currency@1017 : Record Currency;
      BusUnit@1039 : Record "Business Unit";
      TextFile@1003 : File;
      Column@1019 : Text;
      Line@1004 : ARRAY [5] OF Text;
      Line2@1038 : Text;
      Tab@1005 : Text[1];
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      MaxDate@1021 : Date;
      CurrExchDate@1027 : Date;
      NoOfRows@1008 : Integer;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      i@1012 : Integer;
      AddRepCurrAmount@1034 : Decimal;
      NoOfLeadingTabs@1040 : Integer;
    BEGIN
      TextFile.CREATETEMPFILE;
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.CREATE(FileName);
      TextFile.CREATEOUTSTREAM(TextFileStream);
      TextFileStreamWriter := TextFileStreamWriter.StreamWriter(TextFileStream,TextFileEncoding.Unicode);

      AnalysisViewEntry2.COPY(AnalysisViewEntry);
      AnalysisView.GET(AnalysisViewEntry2."Analysis View Code");
      PopulateTempAccountTable(AccFilter);

      FindDimLevel(AnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(AnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(AnalysisView."Dimension 3 Code",Dim3Filter,3);
      FindDimLevel(AnalysisView."Dimension 4 Code",Dim4Filter,4);

      Tab[1] := 9;
      SignValue := 1;
      if Sign then
        SignValue := -1;

      NoOfRows := 0;
      with AnalysisViewEntry2 do begin
        for i := 0 to MaxLevel do begin
          Line[1] := Line[1] + GetPivotFieldAccountIndexValue(i) + Tab;
          NoOfColumns := NoOfColumns + 1;
        end;
        if HasBusinessUnits then begin
          Line[1] := Line[1] + BusUnit.TABLECAPTION + Tab;
          NoOfColumns := NoOfColumns + 1;
        end;
        if AnalysisView."Dimension 1 Code" <> '' then
          for i := 0 to MaxLevelDim[1] do begin
            Line[1] := Line[1] + AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;
        if AnalysisView."Dimension 2 Code" <> '' then
          for i := 0 to MaxLevelDim[2] do begin
            Line[1] := Line[1] + AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;
        if AnalysisView."Dimension 3 Code" <> '' then
          for i := 0 to MaxLevelDim[3] do begin
            Line[1] := Line[1] + AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;
        if AnalysisView."Dimension 4 Code" <> '' then
          for i := 0 to MaxLevelDim[4] do begin
            Line[1] := Line[1] + AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;

        Line[1] := Line[1] + Text004 + Tab + Text005 + Tab + Text006 + Tab + Text007 +
          Tab + Text008 + Tab + Text009 + Tab + FIELDCAPTION(Amount) + Tab +
          FIELDCAPTION("Debit Amount") + Tab + FIELDCAPTION("Credit Amount") + Tab + Text020;

        TextFileStreamWriter.WriteLine(Line[1]);
        StartDate := "Posting Date";
        AnalysisViewEntry3.SETFILTER("Posting Date",DateFilter);
        if (DateFilter <> '') and (AmountType = 1) then begin
          MaxDate := AnalysisViewEntry3.GETRANGEMAX("Posting Date");
          SETFILTER("Posting Date",'<=%1',MaxDate);
        end;
        if CFFilter <> '' then
          SETFILTER("Cash Flow Forecast No.",CFFilter);

        if FIND('-') then
          repeat
            if (ClosingEntryFilter = 0) or ("Posting Date" = NORMALDATE("Posting Date")) then begin
              if "Posting Date" >= EndDate then
                EndDate := "Posting Date"
              else
                if "Posting Date" <= StartDate then
                  StartDate := "Posting Date";

              CLEAR(Line);
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,AnalysisView);

              if GLAccountSource then begin
                if TempGLAcc2.GET("Account No.") then
                  TempGLAcc2.MARK(true);
                Line[1] := FillOutGLAcc("Account No.",ShowName);
              end else begin
                if TempCFAccount2.GET("Account No.") then
                  TempCFAccount2.MARK(true);
                Line[1] := FillOutCFAccount("Account No.",ShowName);
              end;

              if HasBusinessUnits then
                Line[1] := Line[1] + FillOutBusUnit("Business Unit Code",ShowName);
              if AnalysisView."Dimension 1 Code" <> '' then
                Line[2] := FillOutDim("Dimension 1 Value Code",AnalysisView."Dimension 1 Code",1,ShowName);

              if AnalysisView."Dimension 2 Code" <> '' then
                Line[3] := FillOutDim("Dimension 2 Value Code",AnalysisView."Dimension 2 Code",2,ShowName);

              if AnalysisView."Dimension 3 Code" <> '' then
                Line[4] := FillOutDim("Dimension 3 Value Code",AnalysisView."Dimension 3 Code",3,ShowName);

              if AnalysisView."Dimension 4 Code" <> '' then
                Line[5] := FillOutDim("Dimension 4 Value Code",AnalysisView."Dimension 4 Code",4,ShowName);

              if not ShowInAddCurr then
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9) + Tab +
                  FORMAT(Amount * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Debit Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Credit Amount" * SignValue,0,'<Standard Format,1>')
              else
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9) + Tab +
                  FORMAT("Add.-Curr. Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Add.-Curr. Debit Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Add.-Curr. Credit Amount" * SignValue,0,'<Standard Format,1>');

              TextFileStreamWriter.WriteLine(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            end;
          until NEXT = 0;
      end;

      with AnalysisViewBudgetEntry2 do begin
        SETFILTER("Analysis View Code",AnalysisView.Code);
        SETFILTER("Posting Date",DateFilter);
        if (DateFilter <> '') and (AmountType = 1) then begin
          MaxDate := GETRANGEMAX("Posting Date");
          SETFILTER("Posting Date",'<= %1',MaxDate);
        end;
        SETFILTER("G/L Account No.",AccFilter);
        SETFILTER("Business Unit Code",BusUnitFilter);
        SETFILTER("Budget Name",BudgetFilter);
        SETFILTER("Dimension 1 Value Code",Dim1Filter);
        SETFILTER("Dimension 2 Value Code",Dim2Filter);
        SETFILTER("Dimension 3 Value Code",Dim3Filter);
        SETFILTER("Dimension 4 Value Code",Dim4Filter);
        if FIND('-') then
          repeat
            if (ClosingEntryFilter = 1) or ("Posting Date" = NORMALDATE("Posting Date")) then begin
              if "Posting Date" >= EndDate then
                EndDate := "Posting Date";
              if ("Posting Date" <= StartDate) or (StartDate = 0D) then
                StartDate := "Posting Date";

              CLEAR(Line);
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,AnalysisView);

              if TempGLAcc2.GET("G/L Account No.") then
                TempGLAcc2.MARK(true);
              Line[1] := FillOutGLAcc("G/L Account No.",ShowName);
              if HasBusinessUnits then
                Line[1] := Line[1] + FillOutBusUnit("Business Unit Code",ShowName);
              if AnalysisView."Dimension 1 Code" <> '' then
                Line[2] := FillOutDim("Dimension 1 Value Code",AnalysisView."Dimension 1 Code",1,ShowName);

              if AnalysisView."Dimension 2 Code" <> '' then
                Line[3] := FillOutDim("Dimension 2 Value Code",AnalysisView."Dimension 2 Code",2,ShowName);

              if AnalysisView."Dimension 3 Code" <> '' then
                Line[4] := FillOutDim("Dimension 3 Value Code",AnalysisView."Dimension 3 Code",3,ShowName);

              if AnalysisView."Dimension 4 Code" <> '' then
                Line[5] := FillOutDim("Dimension 4 Value Code",AnalysisView."Dimension 4 Code",4,ShowName);

              if not ShowInAddCurr then begin
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9) + Tab +
                  Tab + Tab + Tab + FORMAT(Amount * SignValue);
              end else begin
                if AnalysisViewBudgetEntry.GETFILTER("Posting Date") = '' then
                  CurrExchDate := WORKDATE
                else
                  CurrExchDate := AnalysisViewBudgetEntry.GETRANGEMIN("Posting Date");
                GLSetup.GET;
                if ShowInAddCurr and Currency.GET(GLSetup."Additional Reporting Currency") then
                  AddRepCurrAmount :=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
                        CurrExchRate.ExchangeRate(
                          CurrExchDate,GLSetup."Additional Reporting Currency")) * SignValue,
                      Currency."Amount Rounding Precision")
                else
                  AddRepCurrAmount :=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
                        CurrExchRate.ExchangeRate(
                          CurrExchDate,GLSetup."Additional Reporting Currency")) * SignValue,
                      GLSetup."Amount Rounding Precision");
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9) + Tab +
                  Tab + Tab + Tab + FORMAT(AddRepCurrAmount);
              end;
              TextFileStreamWriter.WriteLine(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            end;
          until NEXT = 0;
      end;

      Line2 := '';
      NoOfLeadingTabs := 0;
      if GLAccountSource then begin
        TempGLAcc2.SETRANGE("Account Type",TempGLAcc2."Account Type"::Posting);
        if TempGLAcc2.FIND('-') then
          repeat
            if not TempGLAcc2.MARK then begin
              NoOfRows := NoOfRows + 1;
              Line2 := FillOutGLAcc(TempGLAcc2."No.",ShowName);
              TextFileStreamWriter.WriteLine(Line2);
            end;
          until TempGLAcc2.NEXT = 0;
      end else begin
        TempCFAccount2.SETRANGE("Account Type",TempCFAccount2."Account Type"::Entry);
        if TempCFAccount2.FIND('-') then
          ProcessMarkedTempCFAccountRec(NoOfRows,Line2,ShowName,TextFileStreamWriter);
      end;
      NoOfLeadingTabs := MaxLevel + 1;
      if HasBusinessUnits then begin
        if BusUnit.FIND('-') then
          repeat
            if not BusUnit.MARK then begin
              NoOfRows := NoOfRows + 1;
              Line2 := FillOutBusUnit(BusUnit.Code,ShowName);
              TextFileStreamWriter.WriteLine(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            end;
          until BusUnit.NEXT = 0;
        NoOfLeadingTabs := NoOfLeadingTabs + 1;
      end;

      if AnalysisView."Dimension 1 Code" <> '' then
        WriteDimLine(Column,Tab,1,Dim1Filter,AnalysisView."Dimension 1 Code",NoOfRows,NoOfLeadingTabs,ShowName);
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[1] + 1;

      if AnalysisView."Dimension 2 Code" <> '' then
        WriteDimLine(Column,Tab,2,Dim2Filter,AnalysisView."Dimension 2 Code",NoOfRows,NoOfLeadingTabs,ShowName);
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[2] + 1;

      if AnalysisView."Dimension 3 Code" <> '' then
        WriteDimLine(Column,Tab,3,Dim3Filter,AnalysisView."Dimension 3 Code",NoOfRows,NoOfLeadingTabs,ShowName);
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[3] + 1;

      if AnalysisView."Dimension 4 Code" <> '' then
        WriteDimLine(Column,Tab,4,Dim4Filter,AnalysisView."Dimension 4 Code",NoOfRows,NoOfLeadingTabs,ShowName);
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[4] + 1;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := GetDuplicateChars(NoOfColumns,Tab);

      while StartDate <= EndDate do begin
        NoOfRows := NoOfRows + 1;
        TextFileStreamWriter.WriteLine(
          Line2 + Tab + FORMAT(StartDate,0,9) + Tab + FORMAT(CalculatePeriodStart(StartDate,1),0,9) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2),0,9) + Tab + FORMAT(CalculatePeriodStart(StartDate,3),0,9) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4),0,9));
        StartDate := CALCDATE('<1W>',StartDate);
      end;

      TextFileStreamWriter.Close;
      TextFile.CLOSE;
      exit(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      if PostingDate = CLOSINGDATE(PostingDate) then
        exit(PostingDate);
      case DateCompression of
        0:
          // Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:
          // Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:
          // Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:
          // Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:
          // Period :
          begin
            if PostingDate <> PrevPostingDate then begin
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              if AccountingPeriod.FINDLAST then begin
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              end else
                PrevCalculatedPostingDate := PostingDate;
            end;
            PostingDate := PrevCalculatedPostingDate;
          end;
      end;
      exit(PostingDate);
    END;

    LOCAL PROCEDURE FindGLAccountParent@7(VAR Account@1002 : Code[20]);
    BEGIN
      TempGLAcc3.GET(Account);
      if TempGLAcc3.Indentation <> 0 then begin
        TempGLAcc3.SETRANGE(Indentation,TempGLAcc3.Indentation - 1);
        TempGLAcc3.NEXT(-1);
      end;
      Account := TempGLAcc3."No.";
    END;

    LOCAL PROCEDURE FindCFAccountParent@2(VAR Account@1002 : Code[20]);
    BEGIN
      TempCFAccount3.GET(Account);
      if TempCFAccount3.Indentation <> 0 then begin
        TempCFAccount3.SETRANGE(Indentation,TempCFAccount3.Indentation - 1);
        TempCFAccount3.NEXT(-1);
      end;
      Account := TempCFAccount3."No.";
    END;

    LOCAL PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Text;ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record "Dimension Value";
    BEGIN
      if DimCode = '' then
        exit;
      DimValue.SETRANGE("Dimension Code",DimCode);
      if DimValue.FIND('-') then
        repeat
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        until DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      if TempDimValue2.FIND('-') then
        repeat
          if MaxLevelDim[ArrayNo] < TempDimValue2.Indentation then
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        until TempDimValue2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      if TempDimValue3.Indentation <> 0 then begin
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      end;
      Account := TempDimValue3.Code;
    END;

    LOCAL PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean) Line@1000 : Text;
    VAR
      Indent@1002 : Integer;
      i@1001 : Integer;
      DimValueCode2@1011 : Code[20];
    BEGIN
      if DimValueCode <> '' then begin
        if TempDimValue2.GET(DimCode,DimValueCode) then
          TempDimValue2.MARK(true)
        else
          TempDimValue2.INIT;
        DimValueCode2 := DimValueCode;
        Indent := TempDimValue2.Indentation;
        AddAcc(Line,ShowName,true,DimValueCode2,TempDimValue2.Name);
        if Indent <> MaxLevelDim[DimNo] then
          for i := (Indent + 1) to MaxLevelDim[DimNo] do
            AddAcc(Line,ShowName,true,DimValueCode2,TempDimValue2.Name);
        if (Indent <> 0) and (DimValueCode2 <> '') then
          for i := Indent downto 1 do begin
            FindDimParent(DimValueCode2,DimCode);
            TempDimValue2.GET(DimCode,DimValueCode2);
            AddAcc(Line,ShowName,false,DimValueCode2,TempDimValue2.Name);
          end;
      end else
        for i := 0 to MaxLevelDim[DimNo] do
          AddAcc(Line,false,true,'','');
      exit(Line)
    END;

    LOCAL PROCEDURE FillOutGLAcc@5(GLAccNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text;
    VAR
      i@1004 : Integer;
      Indent@1008 : Integer;
      Account@1000 : Code[20];
    BEGIN
      Account := GLAccNo;
      TempGLAcc3.GET(Account);
      TempGLAcc3.MARK(true);
      AddAcc(Line,ShowName,true,TempGLAcc3."No.",TempGLAcc3.Name);

      Indent := TempGLAcc3.Indentation;
      if Indent <> MaxLevel then
        for i := Indent + 1 to MaxLevel do
          AddAcc(Line,ShowName,true,TempGLAcc3."No.",TempGLAcc3.Name);

      if Indent <> 0 then
        for i := Indent downto 1 do begin
          FindGLAccountParent(Account);
          TempGLAcc3.GET(Account);
          AddAcc(Line,ShowName,false,TempGLAcc3."No.",TempGLAcc3.Name);
        end;
      exit(Line)
    END;

    LOCAL PROCEDURE FillOutCFAccount@1008(CFAccNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text;
    VAR
      i@1004 : Integer;
      Indent@1008 : Integer;
      Account@1000 : Code[20];
    BEGIN
      Account := CFAccNo;
      TempCFAccount3.GET(Account);
      TempCFAccount3.MARK(true);
      AddAcc(Line,ShowName,true,TempCFAccount3."No.",TempCFAccount3.Name);

      Indent := TempCFAccount2.Indentation;
      if Indent <> MaxLevel then
        for i := Indent + 1 to MaxLevel do
          AddAcc(Line,ShowName,true,TempCFAccount3."No.",TempCFAccount3.Name);

      if Indent <> 0 then
        for i := Indent downto 1 do begin
          FindCFAccountParent(Account);
          TempCFAccount3.GET(Account);
          AddAcc(Line,ShowName,false,TempCFAccount3."No.",TempCFAccount3.Name);
        end;
      exit(Line)
    END;

    LOCAL PROCEDURE FillOutBusUnit@11(BusUnitCode@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    BEGIN
      if BusUnitCode <> '' then begin
        BusUnit.GET(BusUnitCode);
        BusUnit.MARK(true);
        AddAcc(Line,ShowName,true,BusUnit.Code,BusUnit.Name);
      end else
        AddAcc(Line,false,true,'','');
      exit(Line)
    END;

    LOCAL PROCEDURE CheckNoOfRows@10(NoOfRows@1000 : Integer;VAR AnalysisView@1001 : Record "Analysis View");
    BEGIN
      if ExcelVersion = '' then
        if not ISNULL(xlApp)then
          ExcelVersion := COPYSTR(xlApp.Version,1,MAXSTRLEN(ExcelVersion));

      if (ExcelVersion < '12.0') and (NoOfRows > 65000) then
        ERROR(Text032,65000,AnalysisView.FIELDCAPTION("Date Compression"),AnalysisView.TABLECAPTION);
    END;

    LOCAL PROCEDURE GetDuplicateChars@18(NoOfChars@1000 : Integer;c@1003 : Text[1]) : Text[100];
    VAR
      t@1001 : Text[100];
      i@1002 : Integer;
    BEGIN
      for i := 1 to NoOfChars do
        t := t + c;
      exit(t);
    END;

    LOCAL PROCEDURE AddAcc@14(VAR Line@1005 : Text;ShowName@1002 : Boolean;AppendToLine@1003 : Boolean;Account@1000 : Code[20];AccName@1001 : Text[50]);
    VAR
      Tab@1007 : Text[1];
      s@1004 : Text[80];
    BEGIN
      Tab[1] := 9;
      if Account = '' then
        s := ''
      else
        if ShowName then
          s := Account + ' ' + AccName
        else
          s := AddAccPrefix(Account);

      if STRLEN(Line) + STRLEN(s) + 1 > MAXSTRLEN(Line) then
        ERROR(Text038);

      if AppendToLine then
        Line := Line + s + Tab
      else
        Line := s + Tab + Line;
    END;

    LOCAL PROCEDURE AddAccPrefix@12(Acc@1000 : Code[20]) : Code[30];
    BEGIN
      if AccNoPrefix = '' then
        AccNoPrefix := '_NAV_'; // Used to ensure that Acc. No. and Dim values are formatted as text.

      if Acc[1] in ['0'..'9'] then
        exit(AccNoPrefix + Acc);
      exit(Acc);
    END;

    LOCAL PROCEDURE GetPivotFieldAccountIndexValue@15(Level@1000 : Integer) : Text[250];
    BEGIN
      if GLAccountSource then
        exit(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(Level));

      exit(FORMAT(Text118) + ' ' + FORMAT(Text022) + ' ' + FORMAT(Level));
    END;

    LOCAL PROCEDURE CheckCombination@21(Show@1000 : Integer;AmountField@1001 : Integer);
    BEGIN
      if not GLAccountSource then
        exit;

      if (Show <> 0) and (Show <> 1) then
        ERROR(Text000);
      if (Show = 1) and (AmountField <> 0) then
        ERROR(Text001);
    END;

    LOCAL PROCEDURE SetOtherFilterToCorrectFilter@16(DraftFilter@1002 : Text;BusUnitFilter@1001 : Text;CashFlowFilter@1000 : Text);
    BEGIN
      if GLAccountSource then
        BusUnitFilter := DraftFilter
      else
        CashFlowFilter := DraftFilter;
    END;

    LOCAL PROCEDURE PopulateTempAccountTable@17(AccFilter@1002 : Text);
    VAR
      GLAcc@1001 : Record "G/L Account";
      CFAccount@1000 : Record "Cash Flow Account";
    BEGIN
      if GLAccountSource then begin
        if GLAcc.FIND('-') then
          repeat
            TempGLAcc3.COPY(GLAcc);
            TempGLAcc3.INSERT;
          until GLAcc.NEXT = 0;

        TempGLAcc3.SETFILTER("No.",AccFilter);
        if TempGLAcc3.FIND('-') then
          repeat
            TempGLAcc2.COPY(TempGLAcc3);
            TempGLAcc2.INSERT;
            if MaxLevel < TempGLAcc2.Indentation then
              MaxLevel := TempGLAcc2.Indentation;
          until TempGLAcc3.NEXT = 0;
        TempGLAcc3.SETRANGE("No.");
      end else begin
        if CFAccount.FIND('-') then
          repeat
            TempCFAccount3.COPY(CFAccount);
            TempCFAccount3.INSERT;
          until CFAccount.NEXT = 0;

        TempCFAccount3.SETFILTER("No.",AccFilter);
        if TempCFAccount3.FIND('-') then
          repeat
            TempCFAccount2.COPY(TempCFAccount3);
            TempCFAccount2.INSERT;
            if MaxLevel < TempCFAccount2.Indentation then
              MaxLevel := TempCFAccount2.Indentation;
          until TempCFAccount3.NEXT = 0;
        TempCFAccount3.SETRANGE("No.");
      end;
    END;

    LOCAL PROCEDURE ProcessMarkedTempCFAccountRec@19(VAR NoOfRows@1000 : Integer;VAR Line2@1001 : Text;ShowName@1002 : Boolean;VAR TextFileStreamWriter@1003 : DotNet "'mscorlib'.System.IO.StreamWriter");
    BEGIN
      repeat
        if not TempCFAccount2.MARK then begin
          NoOfRows := NoOfRows + 1;
          Line2 := FillOutCFAccount(TempCFAccount2."No.",ShowName);
          TextFileStreamWriter.WriteLine(Line2);
        end;
      until TempCFAccount2.NEXT = 0;
    END;

    LOCAL PROCEDURE WriteDimLine@13(VAR Column@1000 : Text;Tab@1001 : Text[1];DimNo@1008 : Integer;DimFilter@1002 : Text;DimCode@1003 : Code[20];VAR NoOfRows@1004 : Integer;NoOfLeadingTabs@1007 : Integer;ShowName@1006 : Boolean);
    VAR
      Line2@1005 : Text;
    BEGIN
      Column := Column + Tab;
      TempDimValue2.SETFILTER(Code,DimFilter);
      TempDimValue2.SETFILTER("Dimension Code",DimCode);
      TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
      if TempDimValue2.FIND('-') then
        repeat
          if not TempDimValue2.MARK then begin
            NoOfRows := NoOfRows + 1;
            Line2 := FillOutDim(TempDimValue2.Code,DimCode,DimNo,ShowName);
            TextFileStreamWriter.WriteLine(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
          end;
        until TempDimValue2.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

