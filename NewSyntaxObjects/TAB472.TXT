OBJECT Table 472 Job Queue Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Job Queue Entry"=rimd,
                TableData "Job Queue Log Entry"=rim,
                TableData "O365 Document Sent History"=rm;
    DataCaptionFields="Object Type to Run","Object ID to Run","Object Caption to Run";
    OnInsert=BEGIN
               if ISNULLGUID(ID) then
                 ID := CREATEGUID;
               SetDefaultValues;
             END;

    OnModify=BEGIN
               if AreRunParametersChanged then
                 Reschedule;
               SetDefaultValues;
               "On Hold Due to Inactivity" := false;
             END;

    OnDelete=BEGIN
               if Status = Status::"In Process" then
                 ERROR(CannotDeleteEntryErr,Status);
               CancelTask;
             END;

    CaptionML=ENU=Job Queue Entry;
    LookupPageID="Job Queue Entries";
    DrillDownPageID="Job Queue Entries";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=ENU=ID }
    { 2   ;   ;User ID             ;Text65        ;TableRelation=User."User Name";
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID;
                                                   Editable=false }
    { 3   ;   ;XML                 ;BLOB          ;CaptionML=ENU=XML }
    { 4   ;   ;Last Ready State    ;DateTime      ;CaptionML=ENU=Last Ready State;
                                                   Editable=false }
    { 5   ;   ;Expiration Date/Time;DateTime      ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Expiration Date/Time",LookupDateTime("Expiration Date/Time","Earliest Start Date/Time",0DT));
                                                            END;

                                                   CaptionML=ENU=Expiration Date/Time }
    { 6   ;   ;Earliest Start Date/Time;DateTime  ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                                if "Earliest Start Date/Time" <> xRec."Earliest Start Date/Time" then
                                                                  Reschedule;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Earliest Start Date/Time",LookupDateTime("Earliest Start Date/Time",0DT,"Expiration Date/Time"));
                                                            END;

                                                   CaptionML=ENU=Earliest Start Date/Time }
    { 7   ;   ;Object Type to Run  ;Option        ;InitValue=Report;
                                                   OnValidate=BEGIN
                                                                if "Object Type to Run" <> xRec."Object Type to Run" then
                                                                  VALIDATE("Object ID to Run",0);
                                                              END;

                                                   CaptionML=ENU=Object Type to Run;
                                                   OptionCaptionML=ENU=,,,Report,,Codeunit;
                                                   OptionString=,,,Report,,Codeunit }
    { 8   ;   ;Object ID to Run    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=FIELD("Object Type to Run"));
                                                   OnValidate=VAR
                                                                Object@1000 : Record Object;
                                                              BEGIN
                                                                if "Object ID to Run" <> xRec."Object ID to Run" then begin
                                                                  CLEAR(XML);
                                                                  CLEAR(Description);
                                                                  CLEAR("Parameter String");
                                                                  CLEAR("Report Request Page Options");
                                                                end;
                                                                if "Object ID to Run" = 0 then
                                                                  exit;
                                                                if Object.GET("Object Type to Run",'',"Object ID to Run") then
                                                                  Object.TESTFIELD(Compiled);

                                                                CALCFIELDS("Object Caption to Run");
                                                                if Description = '' then
                                                                  Description := GetDefaultDescription;

                                                                if "Object Type to Run" <> "Object Type to Run"::Report then
                                                                  exit;
                                                                if REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None then // Processing-only
                                                                  "Report Output Type" := "Report Output Type"::"None (Processing only)"
                                                                else begin
                                                                  "Report Output Type" := "Report Output Type"::PDF;
                                                                  if REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::Word then
                                                                    "Report Output Type" := "Report Output Type"::Word;
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              NewObjectID@1000 : Integer;
                                                            BEGIN
                                                              if LookupObjectID(NewObjectID) then
                                                                VALIDATE("Object ID to Run",NewObjectID);
                                                            END;

                                                   CaptionML=ENU=Object ID to Run }
    { 9   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE ("Object Type"=FIELD("Object Type to Run"),
                                                                                                                "Object ID"=FIELD("Object ID to Run")));
                                                   CaptionML=ENU=Object Caption to Run;
                                                   Editable=false }
    { 10  ;   ;Report Output Type  ;Option        ;OnValidate=VAR
                                                                ReportLayoutSelection@1000 : Record "Report Layout Selection";
                                                                InitServerPrinterTable@1001 : Codeunit "Init. Server Printer Table";
                                                                PermissionManager@1002 : Codeunit "Permission Manager";
                                                              BEGIN
                                                                TESTFIELD("Object Type to Run","Object Type to Run"::Report);

                                                                if REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None then // Processing-only
                                                                  TESTFIELD("Report Output Type","Report Output Type"::"None (Processing only)")
                                                                else begin
                                                                  if "Report Output Type" = "Report Output Type"::"None (Processing only)" then
                                                                    FIELDERROR("Report Output Type");
                                                                  if ReportLayoutSelection.HasCustomLayout("Object ID to Run") = 2 then // Word layout
                                                                    if not ("Report Output Type" in ["Report Output Type"::Print,"Report Output Type"::Word]) then
                                                                      FIELDERROR("Report Output Type");
                                                                end;
                                                                if "Report Output Type" = "Report Output Type"::Print then begin
                                                                  if PermissionManager.SoftwareAsAService then begin
                                                                    "Report Output Type" := "Report Output Type"::PDF;
                                                                    MESSAGE(NoPrintOnSaaSMsg);
                                                                  end else
                                                                    "Printer Name" := InitServerPrinterTable.FindClosestMatchToClientDefaultPrinter("Object ID to Run");
                                                                end else
                                                                  "Printer Name" := '';
                                                              END;

                                                   CaptionML=ENU=Report Output Type;
                                                   OptionCaptionML=ENU=PDF,Word,Excel,Print,None (Processing only);
                                                   OptionString=PDF,Word,Excel,Print,"None (Processing only)" }
    { 11  ;   ;Maximum No. of Attempts to Run;Integer;
                                                   CaptionML=ENU=Maximum No. of Attempts to Run }
    { 12  ;   ;No. of Attempts to Run;Integer     ;CaptionML=ENU=No. of Attempts to Run;
                                                   Editable=false }
    { 13  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Ready,In Process,Error,On Hold,Finished;
                                                   OptionString=Ready,"In Process",Error,"On Hold",Finished;
                                                   Editable=false }
    { 14  ;   ;Priority            ;Integer       ;InitValue=1000;
                                                   CaptionML=ENU=Priority }
    { 15  ;   ;Record ID to Process;RecordID      ;CaptionML=ENU=Record ID to Process }
    { 16  ;   ;Parameter String    ;Text250       ;CaptionML=ENU=Parameter String }
    { 17  ;   ;Recurring Job       ;Boolean       ;CaptionML=ENU=Recurring Job }
    { 18  ;   ;No. of Minutes between Runs;Integer;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=No. of Minutes between Runs }
    { 19  ;   ;Run on Mondays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Mondays }
    { 20  ;   ;Run on Tuesdays     ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Tuesdays }
    { 21  ;   ;Run on Wednesdays   ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Wednesdays }
    { 22  ;   ;Run on Thursdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Thursdays }
    { 23  ;   ;Run on Fridays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Fridays }
    { 24  ;   ;Run on Saturdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Saturdays }
    { 25  ;   ;Run on Sundays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=ENU=Run on Sundays }
    { 26  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                                if "Starting Time" = 000000T then
                                                                  "Reference Starting Time" := 0DT
                                                                else
                                                                  "Reference Starting Time" := CREATEDATETIME(DMY2DATE(1,1,2000),"Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 27  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 28  ;   ;Reference Starting Time;DateTime   ;OnValidate=BEGIN
                                                                "Starting Time" := DT2TIME("Reference Starting Time");
                                                              END;

                                                   CaptionML=ENU=Reference Starting Time;
                                                   Editable=false }
    { 30  ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 31  ;   ;Run in User Session ;Boolean       ;CaptionML=ENU=Run in User Session;
                                                   Editable=false }
    { 32  ;   ;User Session ID     ;Integer       ;CaptionML=ENU=User Session ID }
    { 33  ;   ;Job Queue Category Code;Code10     ;TableRelation="Job Queue Category";
                                                   CaptionML=ENU=Job Queue Category Code }
    { 34  ;   ;Error Message       ;Text250       ;CaptionML=ENU=Error Message }
    { 35  ;   ;Error Message 2     ;Text250       ;CaptionML=ENU=Error Message 2 }
    { 36  ;   ;Error Message 3     ;Text250       ;CaptionML=ENU=Error Message 3 }
    { 37  ;   ;Error Message 4     ;Text250       ;CaptionML=ENU=Error Message 4 }
    { 40  ;   ;User Service Instance ID;Integer   ;CaptionML=ENU=User Service Instance ID }
    { 41  ;   ;User Session Started;DateTime      ;CaptionML=ENU=User Session Started;
                                                   Editable=false }
    { 42  ;   ;Timeout (sec.)      ;Integer       ;CaptionML=ENU=Timeout (sec.);
                                                   MinValue=0 }
    { 43  ;   ;Notify On Success   ;Boolean       ;CaptionML=ENU=Notify On Success }
    { 44  ;   ;User Language ID    ;Integer       ;CaptionML=ENU=User Language ID }
    { 45  ;   ;Printer Name        ;Text250       ;OnValidate=VAR
                                                                InitServerPrinterTable@1000 : Codeunit "Init. Server Printer Table";
                                                              BEGIN
                                                                TESTFIELD("Report Output Type","Report Output Type"::Print);
                                                                if "Printer Name" = '' then
                                                                  exit;
                                                                InitServerPrinterTable.ValidatePrinterName("Printer Name");
                                                              END;

                                                   OnLookup=VAR
                                                              Printer@1001 : Record Printer;
                                                              ServerPrinters@1000 : Page "Server Printers";
                                                            BEGIN
                                                              ServerPrinters.SetSelectedPrinterName("Printer Name");
                                                              if ServerPrinters.RUNMODAL = ACTION::OK then begin
                                                                ServerPrinters.GETRECORD(Printer);
                                                                "Printer Name" := Printer.ID;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Printer Name }
    { 46  ;   ;Report Request Page Options;Boolean;OnValidate=BEGIN
                                                                if "Report Request Page Options" then
                                                                  RunReportRequestPage
                                                                else begin
                                                                  CLEAR(XML);
                                                                  MESSAGE(RequestPagesOptionsDeletedMsg);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Report Request Page Options }
    { 47  ;   ;Rerun Delay (sec.)  ;Integer       ;CaptionML=ENU=Rerun Delay (sec.);
                                                   MinValue=0;
                                                   MaxValue=3600 }
    { 48  ;   ;System Task ID      ;GUID          ;CaptionML=ENU=System Task ID }
    { 49  ;   ;Scheduled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Scheduled Task" WHERE (ID=FIELD("System Task ID")));
                                                   CaptionML=ENU=Scheduled }
    { 50  ;   ;Manual Recurrence   ;Boolean       ;CaptionML=ENU=Manual Recurrence }
    { 51  ;   ;On Hold Due to Inactivity;Boolean  ;CaptionML=ENU=On Hold Due to Inactivity;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
    {    ;"Job Queue Category Code"                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoErrMsg@1000 : TextConst 'ENU=There is no error message.';
      CannotDeleteEntryErr@1001 : TextConst '@@@=%1 is a status value, such as Success or Error.;ENU=You cannot delete an entry that has status %1.';
      DeletedEntryErr@1008 : TextConst 'ENU=The job queue entry has been deleted.';
      ScheduledForPostingMsg@1002 : TextConst '@@@="%1=a date, %2 = a user.";ENU=Scheduled for posting on %1 by %2.';
      NoRecordErr@1003 : TextConst 'ENU=No record is associated with the job queue entry.';
      RequestPagesOptionsDeletedMsg@1004 : TextConst 'ENU=You have cleared the report parameters. Select the check box in the field to show the report request page again.';
      ExpiresBeforeStartErr@1005 : TextConst '@@@="%1 = Expiration Date, %2=Start date";ENU=%1 must be later than %2.';
      UserSessionJobsCannotBeRecurringErr@1006 : TextConst 'ENU=You cannot set up recurring user session job queue entries.';
      NoPrintOnSaaSMsg@1007 : TextConst 'ENU=You cannot select a printer from this online product. Instead, save as PDF, or another format, which you can print later.\\The output type has been set to PDF.';
      LastJobQueueLogEntryNo@1009 : Integer;

    [External]
    PROCEDURE DoesExistLocked@38() : Boolean;
    BEGIN
      LOCKTABLE;
      exit(GET(ID));
    END;

    [External]
    PROCEDURE RefreshLocked@37();
    BEGIN
      LOCKTABLE;
      GET(ID);
    END;

    [External]
    PROCEDURE IsExpired@43(AtDateTime@1000 : DateTime) : Boolean;
    BEGIN
      exit((AtDateTime <> 0DT) and ("Expiration Date/Time" <> 0DT) and ("Expiration Date/Time" < AtDateTime));
    END;

    [External]
    PROCEDURE GetErrorMessage@1() : Text;
    BEGIN
      exit("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    [External]
    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      if STRLEN(ErrorText) > 250 then
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      if STRLEN(ErrorText) > 500 then
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      if STRLEN(ErrorText) > 750 then
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    [External]
    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text;
    BEGIN
      e := GetErrorMessage;
      if e = '' then
        e := NoErrMsg;
      MESSAGE('%1',e);
    END;

    [External]
    PROCEDURE SetError@7(ErrorText@1000 : Text);
    BEGIN
      RefreshLocked;
      SetErrorMessage(ErrorText);
      ClearServiceValues;
      SetStatusValue(Status::Error);
    END;

    [Internal]
    PROCEDURE SetResult@39(IsSuccess@1000 : Boolean;IsInactive@1001 : Boolean);
    BEGIN
      if (Status = Status::"On Hold") or "Manual Recurrence" then
        exit;
      if IsSuccess then begin
        if "Recurring Job" and IsInactive then begin
          Status := Status::"On Hold";
          "On Hold Due to Inactivity" := true;
        end else
          Status := Status::Finished
      end else begin
        Status := Status::Error;
        SetErrorMessage(GETLASTERRORTEXT);
      end;
      MODIFY;
    END;

    [External]
    PROCEDURE SetResultDeletedEntry@46();
    BEGIN
      Status := Status::Error;
      SetErrorMessage(DeletedEntryErr);
      MODIFY;
    END;

    [External]
    PROCEDURE FinalizeRun@44();
    BEGIN
      case Status of
        Status::Finished:
          CleanupAfterExecution;
        Status::Error:
          HandleExecutionError;
      end;

      if (Status = Status::Finished) or ("Maximum No. of Attempts to Run" = "No. of Attempts to Run") then
        UpdateDocumentSentHistory;
    END;

    PROCEDURE GetLastLogEntryNo@52() : Integer;
    BEGIN
      exit(LastJobQueueLogEntryNo);
    END;

    [External]
    PROCEDURE InsertLogEntry@45(VAR JobQueueLogEntry@1000 : Record "Job Queue Log Entry");
    BEGIN
      JobQueueLogEntry."Entry No." := 0;
      JobQueueLogEntry.INIT;
      JobQueueLogEntry.ID := ID;
      JobQueueLogEntry."User ID" := "User ID";
      JobQueueLogEntry."Start Date/Time" := "User Session Started";
      JobQueueLogEntry."Object Type to Run" := "Object Type to Run";
      JobQueueLogEntry."Object ID to Run" := "Object ID to Run";
      JobQueueLogEntry.Description := Description;
      JobQueueLogEntry.Status := JobQueueLogEntry.Status::"In Process";
      JobQueueLogEntry."Processed by User ID" := USERID;
      JobQueueLogEntry."Job Queue Category Code" := "Job Queue Category Code";
      JobQueueLogEntry.INSERT(true);
      LastJobQueueLogEntryNo := JobQueueLogEntry."Entry No.";
    END;

    [External]
    PROCEDURE FinalizeLogEntry@51(JobQueueLogEntry@1000 : Record "Job Queue Log Entry");
    BEGIN
      if Status = Status::Error then begin
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Error;
        JobQueueLogEntry.SetErrorMessage(GetErrorMessage);
      end else
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Success;
      JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
      JobQueueLogEntry.MODIFY(true);
    END;

    [External]
    PROCEDURE SetStatus@3(NewStatus@1000 : Option);
    BEGIN
      if NewStatus = Status then
        exit;
      RefreshLocked;
      ClearServiceValues;
      SetStatusValue(NewStatus);
    END;

    [External]
    PROCEDURE Cancel@4();
    BEGIN
      if DoesExistLocked then
        DeleteTask;
    END;

    [External]
    PROCEDURE DeleteTask@42();
    BEGIN
      Status := Status::Finished;
      DELETE(true);
    END;

    [External]
    PROCEDURE DeleteTasks@48();
    BEGIN
      if FINDSET then
        repeat
          DeleteTask;
        until NEXT = 0;
    END;

    [External]
    PROCEDURE Restart@5();
    BEGIN
      RefreshLocked;
      ClearServiceValues;
      Status := Status::"On Hold";
      SetStatusValue(Status::Ready);
    END;

    LOCAL PROCEDURE EnqueueTask@40();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
    END;

    [External]
    PROCEDURE CancelTask@32();
    BEGIN
      if not ISNULLGUID("System Task ID") then begin
        if TASKSCHEDULER.TASKEXISTS("System Task ID") then
          TASKSCHEDULER.CANCELTASK("System Task ID");
        CLEAR("System Task ID");
      end;
    END;

    [External]
    PROCEDURE ScheduleTask@36() : GUID;
    BEGIN
      exit(
        TASKSCHEDULER.CREATETASK(
          CODEUNIT::"Job Queue Dispatcher",
          CODEUNIT::"Job Queue Error Handler",
          true,COMPANYNAME,"Earliest Start Date/Time",RECORDID));
    END;

    LOCAL PROCEDURE Reschedule@31();
    BEGIN
      CancelTask;
      if Status = Status::Ready then begin
        SetDefaultValues;
        EnqueueTask;
      end;
    END;

    [External]
    PROCEDURE ReuseExistingJobFromID@34(JobID@1000 : GUID;ExecutionDateTime@1002 : DateTime) : Boolean;
    BEGIN
      if GET(JobID) then begin
        if not (Status in [Status::Ready,Status::"In Process"]) then begin
          "Earliest Start Date/Time" := ExecutionDateTime;
          SetStatus(Status::Ready);
        end;
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE ReuseExistingJobFromCatagory@35(JobQueueCatagoryCode@1001 : Code[10];ExecutionDateTime@1002 : DateTime) : Boolean;
    BEGIN
      SETRANGE("Job Queue Category Code",JobQueueCatagoryCode);
      if FINDFIRST then
        exit(ReuseExistingJobFromID(ID,ExecutionDateTime));

      exit(false);
    END;

    LOCAL PROCEDURE AreRunParametersChanged@41() : Boolean;
    BEGIN
      exit(
        ("User ID" = '') or
        ("Object Type to Run" <> xRec."Object Type to Run") or
        ("Object ID to Run" <> xRec."Object ID to Run") or
        ("Parameter String" <> xRec."Parameter String"));
    END;

    LOCAL PROCEDURE SetDefaultValues@6();
    BEGIN
      "Last Ready State" := CURRENTDATETIME;
      "User Language ID" := GLOBALLANGUAGE;
      "User ID" := USERID;
      "No. of Attempts to Run" := 0;
    END;

    LOCAL PROCEDURE ClearServiceValues@9();
    BEGIN
      "User Session Started" := 0DT;
      "User Service Instance ID" := 0;
      "User Session ID" := 0;
    END;

    LOCAL PROCEDURE CleanupAfterExecution@11();
    VAR
      JobQueueDispatcher@1000 : Codeunit "Job Queue Dispatcher";
    BEGIN
      if "Notify On Success" then
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Send Notification",Rec);

      if "Recurring Job" then begin
        ClearServiceValues;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcNextRunTimeForRecurringJob(Rec,CURRENTDATETIME);
        EnqueueTask;
      end else
        DELETE;
    END;

    LOCAL PROCEDURE HandleExecutionError@12();
    BEGIN
      if "Maximum No. of Attempts to Run" > "No. of Attempts to Run" then begin
        "No. of Attempts to Run" += 1;
        "Earliest Start Date/Time" := CURRENTDATETIME + 1000 * "Rerun Delay (sec.)";
        EnqueueTask;
      end else begin
        SetStatusValue(Status::Error);
        COMMIT;
        if CODEUNIT.RUN(CODEUNIT::"Job Queue - Send Notification",Rec) then;
      end;
    END;

    [External]
    PROCEDURE GetTimeout@10() : Integer;
    BEGIN
      if "Timeout (sec.)" > 0 then
        exit("Timeout (sec.)");
      exit(1000000000);
    END;

    LOCAL PROCEDURE SetRecurringField@13();
    BEGIN
      "Recurring Job" :=
        "Run on Mondays" or
        "Run on Tuesdays" or "Run on Wednesdays" or "Run on Thursdays" or "Run on Fridays" or "Run on Saturdays" or "Run on Sundays";

      if "Recurring Job" and "Run in User Session" then
        ERROR(UserSessionJobsCannotBeRecurringErr);
    END;

    LOCAL PROCEDURE SetStatusValue@14(NewStatus@1000 : Option);
    VAR
      JobQueueDispatcher@1001 : Codeunit "Job Queue Dispatcher";
    BEGIN
      if NewStatus = Status then
        exit;
      case NewStatus of
        Status::Ready:
          begin
            SetDefaultValues;
            if "On Hold Due to Inactivity" then
              "Earliest Start Date/Time" :=
                JobQueueDispatcher.CalcNextRunTimeForRecurringJob(Rec,CURRENTDATETIME)
            else
              "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
            EnqueueTask;
          end;
        Status::"On Hold":
          CancelTask;
      end;
      Status := NewStatus;
      "On Hold Due to Inactivity" := false;
      MODIFY;
    END;

    [External]
    PROCEDURE ShowStatusMsg@15(JQID@1000 : GUID);
    VAR
      JobQueueEntry@1001 : Record "Job Queue Entry";
    BEGIN
      if JobQueueEntry.GET(JQID) then
        case JobQueueEntry.Status of
          JobQueueEntry.Status::Error:
            MESSAGE(JobQueueEntry.GetErrorMessage);
          JobQueueEntry.Status::"In Process":
            MESSAGE(FORMAT(JobQueueEntry.Status::"In Process"));
          else
            MESSAGE(ScheduledForPostingMsg,JobQueueEntry."User Session Started",JobQueueEntry."User ID");
        end;
    END;

    [External]
    PROCEDURE LookupRecordToProcess@16();
    VAR
      RecRef@1002 : RecordRef;
      RecVariant@1001 : Variant;
    BEGIN
      if ISNULLGUID(ID) then
        exit;
      if FORMAT("Record ID to Process") = '' then
        ERROR(NoRecordErr);
      RecRef.GET("Record ID to Process");
      RecRef.SETRECFILTER;
      RecVariant := RecRef;
      PAGE.RUN(0,RecVariant);
    END;

    [External]
    PROCEDURE LookupObjectID@19(VAR NewObjectID@1000 : Integer) : Boolean;
    VAR
      AllObjWithCaption@1002 : Record AllObjWithCaption;
      Objects@1001 : Page Objects;
    BEGIN
      if AllObjWithCaption.GET("Object Type to Run","Object ID to Run") then;
      AllObjWithCaption.FILTERGROUP(2);
      AllObjWithCaption.SETRANGE("Object Type","Object Type to Run");
      AllObjWithCaption.FILTERGROUP(0);
      Objects.SETRECORD(AllObjWithCaption);
      Objects.SETTABLEVIEW(AllObjWithCaption);
      Objects.LOOKUPMODE := true;
      if Objects.RUNMODAL = ACTION::LookupOK then begin
        Objects.GETRECORD(AllObjWithCaption);
        NewObjectID := AllObjWithCaption."Object ID";
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupDateTime@26(InitDateTime@1000 : DateTime;EarliestDateTime@1001 : DateTime;LatestDateTime@1003 : DateTime) : DateTime;
    VAR
      DateTimeDialog@1004 : Page "Date-Time Dialog";
      NewDateTime@1002 : DateTime;
    BEGIN
      NewDateTime := InitDateTime;
      if InitDateTime < EarliestDateTime then
        InitDateTime := EarliestDateTime;
      if (LatestDateTime <> 0DT) and (InitDateTime > LatestDateTime) then
        InitDateTime := LatestDateTime;

      DateTimeDialog.SetDateTime(ROUNDDATETIME(InitDateTime,1000));

      if DateTimeDialog.RUNMODAL = ACTION::OK then
        NewDateTime := DateTimeDialog.GetDateTime;
      exit(NewDateTime);
    END;

    LOCAL PROCEDURE CheckStartAndExpirationDateTime@24();
    BEGIN
      if IsExpired("Earliest Start Date/Time") then
        ERROR(ExpiresBeforeStartErr,FIELDCAPTION("Expiration Date/Time"),FIELDCAPTION("Earliest Start Date/Time"));
    END;

    [External]
    PROCEDURE GetReportParameters@17() : Text;
    VAR
      InStr@1000 : InStream;
      Params@1001 : Text;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");

      CALCFIELDS(XML);
      if XML.HASVALUE then begin
        XML.CREATEINSTREAM(InStr,TEXTENCODING::UTF8);
        InStr.READ(Params);
      end;

      exit(Params);
    END;

    [Internal]
    PROCEDURE SetReportParameters@20(Params@1002 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");
      CLEAR(XML);
      if Params <> '' then begin
        "Report Request Page Options" := true;
        XML.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
        OutStr.WRITE(Params);
      end;
      MODIFY; // Necessary because the following function does a CALCFIELDS(XML)
      Description := GetDefaultDescriptionFromReportRequestPage(Description);
      MODIFY;
    END;

    [Internal]
    PROCEDURE RunReportRequestPage@18();
    VAR
      Params@1000 : Text;
    BEGIN
      if "Object Type to Run" <> "Object Type to Run"::Report then
        exit;
      if "Object ID to Run" = 0 then
        exit;

      Params := REPORT.RUNREQUESTPAGE("Object ID to Run",GetReportParameters);

      if Params <> '' then
        SetReportParameters(Params);
    END;

    [External]
    PROCEDURE ScheduleJobQueueEntry@54(CodeunitID@1001 : Integer;RecordIDToProcess@1000 : RecordID);
    BEGIN
      ScheduleJobQueueEntryWithParameters(CodeunitID,RecordIDToProcess,'');
    END;

    [External]
    PROCEDURE ScheduleJobQueueEntryWithParameters@21(CodeunitID@1000 : Integer;RecordIDToProcess@1001 : RecordID;JobParameter@1002 : Text[250]);
    BEGIN
      INIT;
      "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
      "Object Type to Run" := "Object Type to Run"::Codeunit;
      "Object ID to Run" := CodeunitID;
      "Record ID to Process" := RecordIDToProcess;
      "Run in User Session" := false;
      Priority := 1000;
      "Parameter String" := JobParameter;
      EnqueueTask;
    END;

    [External]
    PROCEDURE ScheduleJobQueueEntryForLater@33(CodeunitID@1000 : Integer;StartDateTime@1001 : DateTime;JobQueueCategoryCode@1002 : Code[10];JobParameter@1003 : Text);
    BEGIN
      INIT;
      "Earliest Start Date/Time" := StartDateTime;
      "Object Type to Run" := "Object Type to Run"::Codeunit;
      "Object ID to Run" := CodeunitID;
      "Run in User Session" := false;
      Priority := 1000;
      "Job Queue Category Code" := JobQueueCategoryCode;
      "Maximum No. of Attempts to Run" := 3;
      "Rerun Delay (sec.)" := 60;
      "Parameter String" := COPYSTR(JobParameter,1,MAXSTRLEN("Parameter String"));
      EnqueueTask;
    END;

    [External]
    PROCEDURE GetStartingDateTime@27(Date@1000 : DateTime) : DateTime;
    BEGIN
      if "Reference Starting Time" = 0DT then
        VALIDATE("Starting Time");
      exit(CREATEDATETIME(DT2DATE(Date),DT2TIME("Reference Starting Time")));
    END;

    [External]
    PROCEDURE GetEndingDateTime@30(Date@1000 : DateTime) : DateTime;
    BEGIN
      if "Reference Starting Time" = 0DT then
        VALIDATE("Starting Time");
      if "Ending Time" = 000000T then
        exit(CREATEDATETIME(DT2DATE(Date),000000T));
      if "Starting Time" = 000000T then
        exit(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      if "Starting Time" < "Ending Time" then
        exit(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      exit(CREATEDATETIME(DT2DATE(Date) + 1,"Ending Time"));
    END;

    [External]
    PROCEDURE ScheduleRecurrentJobQueueEntry@25(ObjType@1001 : Option;ObjID@1002 : Integer;RecId@1000 : RecordID);
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      if FORMAT(RecId) <> '' then
        SETFILTER("Record ID to Process",FORMAT(RecId));
      LOCKTABLE;

      if not FINDFIRST then begin
        InitRecurringJob(5);
        "Object Type to Run" := ObjType;
        "Object ID to Run" := ObjID;
        "Record ID to Process" := RecId;
        "Starting Time" := 080000T;
        "Maximum No. of Attempts to Run" := 3;
        EnqueueTask;
      end;
    END;

    [External]
    PROCEDURE InitRecurringJob@47(NoofMinutesbetweenRuns@1000 : Integer);
    BEGIN
      INIT;
      CLEAR(ID); // "Job Queue - Enqueue" is to define new ID
      "Recurring Job" := true;
      "Run on Mondays" := true;
      "Run on Tuesdays" := true;
      "Run on Wednesdays" := true;
      "Run on Thursdays" := true;
      "Run on Fridays" := true;
      "Run on Saturdays" := true;
      "Run on Sundays" := true;
      "No. of Minutes between Runs" := NoofMinutesbetweenRuns;
      "Earliest Start Date/Time" := CURRENTDATETIME;
    END;

    [External]
    PROCEDURE FindJobQueueEntry@23(ObjType@1002 : Option;ObjID@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      exit(FINDFIRST);
    END;

    [Internal]
    PROCEDURE GetDefaultDescription@28() : Text[250];
    VAR
      DefaultDescription@1004 : Text[250];
    BEGIN
      CALCFIELDS("Object Caption to Run");
      DefaultDescription := COPYSTR("Object Caption to Run",1,MAXSTRLEN(DefaultDescription));
      if "Object Type to Run" <> "Object Type to Run"::Report then
        exit(DefaultDescription);
      exit(GetDefaultDescriptionFromReportRequestPage(DefaultDescription));
    END;

    LOCAL PROCEDURE GetDefaultDescriptionFromReportRequestPage@29(DefaultDescription@1004 : Text[250]) : Text[250];
    VAR
      AccScheduleName@1005 : Record "Acc. Schedule Name";
      XMLDOMManagement@1003 : Codeunit "XML DOM Management";
      InStr@1002 : InStream;
      XMLRootNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      if not ("Object ID to Run" in [REPORT::"Account Schedule"]) then
        exit(DefaultDescription);

      CALCFIELDS(XML); // Requestpage data
      if not XML.HASVALUE then
        exit(DefaultDescription);
      XML.CREATEINSTREAM(InStr);
      if not XMLDOMManagement.LoadXMLNodeFromInStream(InStr,XMLRootNode) then
        exit(DefaultDescription);
      if ISNULL(XMLRootNode) then
        exit(DefaultDescription);

      // Specific for report 25 Account Schedule
      XMLNode := XMLRootNode.SelectSingleNode('//Field[@name="AccSchedName"]');
      if ISNULL(XMLNode) then
        exit(DefaultDescription);
      if not AccScheduleName.GET(COPYSTR(XMLNode.InnerText,1,MAXSTRLEN(AccScheduleName.Name))) then
        exit(DefaultDescription);
      exit(AccScheduleName.Description);
    END;

    [External]
    PROCEDURE IsToReportInbox@22() : Boolean;
    BEGIN
      exit(
        ("Object Type to Run" = "Object Type to Run"::Report) and
        ("Report Output Type" in ["Report Output Type"::PDF,"Report Output Type"::Word,
                                  "Report Output Type"::Excel]));
    END;

    LOCAL PROCEDURE UpdateDocumentSentHistory@58();
    VAR
      O365DocumentSentHistory@1001 : Record "O365 Document Sent History";
    BEGIN
      if ("Object Type to Run" = "Object Type to Run"::Codeunit) and ("Object ID to Run" = CODEUNIT::"Document-Mailing") then
        if (Status = Status::Error) or (Status = Status::Finished) then begin
          O365DocumentSentHistory.SETRANGE("Job Queue Entry ID",ID);
          if not O365DocumentSentHistory.FINDFIRST then
            exit;

          if Status = Status::Error then
            O365DocumentSentHistory.VALIDATE("Job Last Status",O365DocumentSentHistory."Job Last Status"::Error)
          else
            O365DocumentSentHistory.VALIDATE("Job Last Status",O365DocumentSentHistory."Job Last Status"::Finished);
          O365DocumentSentHistory.MODIFY(true);
        end;
    END;

    [External]
    PROCEDURE FilterInactiveOnHoldEntries@53();
    BEGIN
      RESET;
      SETRANGE(Status,Status::"On Hold");
      SETRANGE("On Hold Due to Inactivity",true);
    END;

    [External]
    PROCEDURE DoesJobNeedToBeRun@49() Result : Boolean;
    BEGIN
      OnFindingIfJobNeedsToBeRun(Result);
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnFindingIfJobNeedsToBeRun@50(VAR Result@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

