OBJECT Page 402 Sales Order Statistics
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Order Statistics;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Sales Header";
    PageType=Card;
    OnOpenPage=BEGIN
                 SalesSetup.GET;
                 AllowInvDisc := not (SalesSetup."Calc. Inv. Discount" and CustInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   SalesSetup."Allow VAT Difference" and
                   not ("Document Type" in ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 VATLinesFormIsEditable := AllowVATDifference or AllowInvDisc;
                 CurrPage.EDITABLE := VATLinesFormIsEditable;
               END;

    OnAfterGetRecord=BEGIN
                       RefreshOnAfterGetRecord;
                     END;

    OnQueryClosePage=VAR
                       SalesLine@1001 : Record "Sales Line";
                       ReleaseSalesDocument@1002 : Codeunit "Release Sales Document";
                     BEGIN
                       GetVATSpecification(PrevTab);
                       ReleaseSalesDocument.CalcAndUpdateVATOnLines(Rec,SalesLine);
                       exit(true);
                     END;

    OnAfterGetCurrRecord=BEGIN
                           DynamicEditable := CurrPage.EDITABLE;
                         END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 39  ;2   ;Field     ;
                Name=LineAmountGeneral;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[1]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                Name=InvDiscountAmount_General;
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[1]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateInvDiscAmount(1);
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=TotalAmount1[1];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateTotalAmount(1);
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=VATAmount;
                CaptionML=ENU=VAT Amount;
                ToolTipML=ENU=Specifies the total VAT amount that has been calculated for all the lines in the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[1]);
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                Name=TotalAmount2[1];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE;
                OnValidate=BEGIN
                             TotalAmount21OnAfterValidate;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=Sales (LCY);
                CaptionML=ENU=Sales (LCY);
                ToolTipML=ENU=Specifies your total sales turnover in the fiscal year. It is calculated from amounts excluding VAT on all completed and open sales invoices and credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[1].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                Name=Original Profit (LCY);
                CaptionML=ENU=Original Profit (LCY);
                ToolTipML=ENU=Specifies the original profit that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfitLCY[1];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 46  ;2   ;Field     ;
                Name=Adjusted Profit (LCY);
                CaptionML=ENU=Adjusted Profit (LCY);
                ToolTipML=ENU=Specifies the profit, taking into consideration changes in the purchase prices of the goods.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AdjProfitLCY[1];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                Name=Original Profit %;
                CaptionML=ENU=Original Profit %;
                ToolTipML=ENU=Specifies the original percentage of profit that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[1];
                Importance=Additional;
                Editable=FALSE }

    { 52  ;2   ;Field     ;
                Name=Adjusted Profit %;
                CaptionML=ENU=Adjusted Profit %;
                ToolTipML=ENU=Specifies the percentage of profit for all sales, taking into account changes that occurred in the purchase prices of the goods.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct[1];
                Importance=Additional;
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                Name=Quantity;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the sales document. If the amount is rounded, because the Invoice Rounding check box is selected in the Sales & Receivables Setup window, this field will contain the quantity of items in the sales document plus one.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1].Quantity;
                Importance=Additional;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name=Parcels;
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the total number of parcels in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Units per Parcel";
                Importance=Additional;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Name=Net Weight;
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Net Weight";
                Importance=Additional;
                Editable=FALSE }

    { 11  ;2   ;Field     ;
                Name=Gross Weight;
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the total gross weight of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Gross Weight";
                Importance=Additional;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name=Volume;
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the total volume of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Unit Volume";
                Importance=Additional;
                Editable=FALSE }

    { 37  ;2   ;Field     ;
                Name=Original Cost (LCY);
                CaptionML=ENU=Original Cost (LCY);
                ToolTipML=ENU=Specifies the total cost, in LCY, of the G/L account entries, items, and/or resources in the sales document. The cost is calculated as unit cost x quantity of the items or resources.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[1]."Unit Cost (LCY)";
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                Name=Adjusted Cost (LCY);
                CaptionML=ENU=Adjusted Cost (LCY);
                ToolTipML=ENU=Specifies the total cost, in LCY, of the items in the sales document, adjusted for any changes in the original costs of these items. If this field contains zero, it means that there were no entries to calculate, possibly because of date compression or because the adjustment batch job has not yet been run.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY[1];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 120 ;2   ;Field     ;
                Name=Cost Adjmt. Amount (LCY);
                CaptionML=ENU=Cost Adjmt. Amount (LCY);
                ToolTipML=ENU=Specifies the difference between the original cost and the total adjusted cost of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY[1] - TotalSalesLineLCY[1]."Unit Cost (LCY)";
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(0);
                         END;
                          }

    { 119 ;2   ;Field     ;
                Name=NoOfVATLines_General;
                DrillDown=true;
                CaptionML=ENU=No. of Tax Lines;
                ToolTipML=ENU=Specifies the number of lines on the sales order that have VAT amounts.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempVATAmountLine1.COUNT;
                Importance=Additional;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine1,false);
                              UpdateHeaderInfo(1,TempVATAmountLine1);
                            END;
                             }

    { 1905885101;1;Group  ;
                Name=Invoicing;
                CaptionML=ENU=Invoicing }

    { 71  ;2   ;Field     ;
                Name=AmountInclVAT_Invoicing;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[2]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 51  ;2   ;Field     ;
                Name=InvDiscountAmount_Invoicing;
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[2]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateInvDiscAmount(2);
                           END;
                            }

    { 50  ;2   ;Field     ;
                Name=TotalInclVAT_Invoicing;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateTotalAmount(2);
                           END;
                            }

    { 49  ;2   ;Field     ;
                Name=VATAmount_Invoicing;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[2]);
                Editable=FALSE }

    { 48  ;2   ;Field     ;
                Name=TotalExclVAT_Invoicing;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE }

    { 69  ;2   ;Field     ;
                Name=TotalSalesLineLCY[2].Amount;
                CaptionML=ENU=Sales (LCY);
                ToolTipML=ENU=Specifies your total sales turnover in the fiscal year. It is calculated from amounts excluding VAT on all completed and open sales invoices and credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[2].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 67  ;2   ;Field     ;
                Name=ProfitLCY[2];
                CaptionML=ENU=Original Profit (LCY);
                ToolTipML=ENU=Specifies the original profit that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfitLCY[2];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                Name=AdjProfitLCY[2];
                CaptionML=ENU=Adjusted Profit (LCY);
                ToolTipML=ENU=Specifies the profit, taking into consideration changes in the purchase prices of the goods.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AdjProfitLCY[2];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 66  ;2   ;Field     ;
                Name=ProfitPct[2];
                CaptionML=ENU=Original Profit %;
                ToolTipML=ENU=Specifies the original percentage of profit that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[2];
                Importance=Additional;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                Name=AdjProfitPct[2];
                CaptionML=ENU=Adjusted Profit %;
                ToolTipML=ENU=Specifies the percentage of profit for all sales, taking into account changes that occurred in the purchase prices of the goods.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct[2];
                Importance=Additional;
                Editable=FALSE }

    { 65  ;2   ;Field     ;
                Name=TotalSalesLine[2].Quantity;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the sales document. If the amount is rounded, because the Invoice Rounding check box is selected in the Sales & Receivables Setup window, this field will contain the quantity of items in the sales document plus one.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2].Quantity;
                Importance=Additional;
                Editable=FALSE }

    { 62  ;2   ;Field     ;
                Name=TotalSalesLine[2]."Units per Parcel";
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the total number of parcels in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Units per Parcel";
                Importance=Additional;
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                Name=TotalSalesLine[2]."Net Weight";
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Net Weight";
                Importance=Additional;
                Editable=FALSE }

    { 63  ;2   ;Field     ;
                Name=TotalSalesLine[2]."Gross Weight";
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the total gross weight of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Gross Weight";
                Importance=Additional;
                Editable=FALSE }

    { 61  ;2   ;Field     ;
                Name=TotalSalesLine[2]."Unit Volume";
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the total volume of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Unit Volume";
                Importance=Additional;
                Editable=FALSE }

    { 68  ;2   ;Field     ;
                Name=TotalSalesLineLCY[2]."Unit Cost (LCY)";
                CaptionML=ENU=Original Cost (LCY);
                ToolTipML=ENU=Specifies the total cost, in LCY, of the G/L account entries, items, and/or resources in the sales document. The cost is calculated as unit cost x quantity of the items or resources.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[2]."Unit Cost (LCY)";
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Name=TotalAdjCostLCY[2];
                CaptionML=ENU=Adjusted Cost (LCY);
                ToolTipML=ENU=Specifies the total cost, in LCY, of the items in the sales document, adjusted for any changes in the original costs of these items. If this field contains zero, it means that there were no entries to calculate, possibly because of date compression or because the adjustment batch job has not yet been run.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY[2];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 122 ;2   ;Field     ;
                Name=TotalAdjCostLCY[2] - TotalSalesLineLCY[2]."Unit Cost (LCY)";
                CaptionML=ENU=Cost Adjmt. Amount (LCY);
                ToolTipML=ENU=Specifies the difference between the original cost and the total adjusted cost of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAdjCostLCY[2] - TotalSalesLineLCY[2]."Unit Cost (LCY)";
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(1);
                         END;
                          }

    { 125 ;2   ;Field     ;
                Name=NoOfVATLines_Invoicing;
                DrillDown=true;
                CaptionML=ENU=No. of Tax Lines;
                ToolTipML=ENU=Specifies the number of lines on the sales order that have VAT amounts.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempVATAmountLine2.COUNT;
                Importance=Additional;
                OnDrillDown=BEGIN
                              ActiveTab := ActiveTab::Invoicing;
                              VATLinesDrillDown(TempVATAmountLine2,true);
                              UpdateHeaderInfo(2,TempVATAmountLine2);

                              if TempVATAmountLine2.GetAnyLineModified then begin
                                UpdateVATOnSalesLines;
                                RefreshOnAfterGetRecord;
                              end;
                            END;
                             }

    { 1906801201;1;Group  ;
                Name=Shipping;
                CaptionML=ENU=Shipping }

    { 105 ;2   ;Field     ;
                Name=TotalSalesLine[3]."Line Amount";
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[3]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                Name=Inv. Discount Amount;
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine[3]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                Name=TotalAmount1[3];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                Name=VATAmount[3];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[3]);
                Editable=FALSE }

    { 80  ;2   ;Field     ;
                Name=TotalAmount2[3];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE }

    { 103 ;2   ;Field     ;
                Name=TotalSalesLineLCY[3].Amount;
                CaptionML=ENU=Sales (LCY);
                ToolTipML=ENU=Specifies your total sales turnover in the fiscal year. It is calculated from amounts excluding VAT on all completed and open sales invoices and credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[3].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 102 ;2   ;Field     ;
                Name=Cost (LCY);
                CaptionML=ENU=Cost (LCY);
                ToolTipML=ENU=Specifies the total cost of the sales order.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY[3]."Unit Cost (LCY)";
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 101 ;2   ;Field     ;
                Name=Profit (LCY);
                CaptionML=ENU=Profit (LCY);
                ToolTipML=ENU=Specifies the total profit of the sales order.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfitLCY[3];
                AutoFormatType=1;
                Importance=Additional;
                Editable=FALSE }

    { 100 ;2   ;Field     ;
                Name=Profit %;
                CaptionML=ENU=Profit %;
                ToolTipML=ENU=Specifies the total profit of the sales order expressed as a percentage of the total amount.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[3];
                Importance=Additional;
                Editable=FALSE }

    { 99  ;2   ;Field     ;
                Name=TotalSalesLine[3].Quantity;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the sales document. If the amount is rounded, because the Invoice Rounding check box is selected in the Sales & Receivables Setup window, this field will contain the quantity of items in the sales document plus one.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3].Quantity;
                Importance=Additional;
                Editable=FALSE }

    { 94  ;2   ;Field     ;
                Name=TotalSalesLine[3]."Units per Parcel";
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the total number of parcels in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Units per Parcel";
                Importance=Additional;
                Editable=FALSE }

    { 98  ;2   ;Field     ;
                Name=TotalSalesLine[3]."Net Weight";
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Net Weight";
                Importance=Additional;
                Editable=FALSE }

    { 97  ;2   ;Field     ;
                Name=TotalSalesLine[3]."Gross Weight";
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the total gross weight of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Gross Weight";
                Importance=Additional;
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                Name=TotalSalesLine[3]."Unit Volume";
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the total volume of the items in the sales document.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Unit Volume";
                Importance=Additional;
                Editable=FALSE }

    { 127 ;2   ;Field     ;
                Name=No. of Tax Lines;
                DrillDown=true;
                CaptionML=ENU=No. of Tax Lines;
                ToolTipML=ENU=Specifies the number of lines on the sales order that have VAT amounts.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempVATAmountLine3.COUNT;
                Importance=Additional;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine3,false);
                            END;
                             }

    { 1900201301;1;Group  ;
                Name=Prepayment;
                CaptionML=ENU=Prepayment }

    { 95  ;2   ;Field     ;
                Name=PrepmtTotalAmount;
                ApplicationArea=#Advanced;
                SourceExpr=PrepmtTotalAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,false);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Prepayment;
                             UpdatePrepmtAmount;
                           END;

                ImplicitType=Decimal }

    { 115 ;2   ;Field     ;
                Name=PrepmtVATAmount;
                CaptionML=ENU=Prepayment Amount Invoiced;
                ToolTipML=ENU=Specifies how much has been invoiced as prepayment.;
                ApplicationArea=#Prepayments;
                SourceExpr=PrepmtVATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(PrepmtVATAmountText);
                Editable=FALSE;
                ImplicitType=Decimal }

    { 117 ;2   ;Field     ;
                Name=PrepmtTotalAmount2;
                ApplicationArea=#Advanced;
                SourceExpr=PrepmtTotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,true);
                Editable=FALSE;
                ImplicitType=Decimal }

    { 109 ;2   ;Field     ;
                Name=TotalSalesLine[1]."Prepmt. Amt. Inv.";
                ApplicationArea=#Advanced;
                SourceExpr=TotalSalesLine[1]."Prepmt. Amt. Inv.";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text007,false);
                Editable=FALSE }

    { 110 ;2   ;Field     ;
                Name=PrepmtInvPct;
                ExtendedDatatype=Ratio;
                CaptionML=ENU=Invoiced % of Prepayment Amt.;
                ToolTipML=ENU=Specifies Invoiced Percentage of Prepayment Amt.;
                ApplicationArea=#Prepayments;
                SourceExpr=PrepmtInvPct;
                ImplicitType=Decimal }

    { 107 ;2   ;Field     ;
                Name=TotalSalesLine[1]."Prepmt Amt Deducted";
                ApplicationArea=#Advanced;
                SourceExpr=TotalSalesLine[1]."Prepmt Amt Deducted";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text008,false);
                Editable=FALSE }

    { 108 ;2   ;Field     ;
                Name=PrepmtDeductedPct;
                ExtendedDatatype=Ratio;
                CaptionML=ENU=Deducted % of Prepayment Amt. to Deduct;
                ToolTipML=ENU=Specifies the deducted percentage of the prepayment amount to deduct.;
                ApplicationArea=#Prepayments;
                SourceExpr=PrepmtDeductedPct;
                ImplicitType=Decimal }

    { 96  ;2   ;Field     ;
                Name=TotalSalesLine[1]."Prepmt Amt to Deduct";
                ApplicationArea=#Advanced;
                SourceExpr=TotalSalesLine[1]."Prepmt Amt to Deduct";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text009,false);
                Editable=FALSE }

    { 130 ;2   ;Field     ;
                Name=TempVATAmountLine4.COUNT;
                DrillDown=true;
                CaptionML=ENU=No. of Tax Lines;
                ToolTipML=ENU=Specifies the number of lines on the sales order that have VAT amounts.;
                ApplicationArea=#Advanced;
                SourceExpr=TempVATAmountLine4.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine4,true);
                            END;
                             }

    { 1903289601;1;Group  ;
                Name=Customer;
                CaptionML=ENU=Customer }

    { 26  ;2   ;Field     ;
                Name=Balance (LCY);
                CaptionML=ENU=Balance (LCY);
                ToolTipML=ENU=Specifies the balance on the customer's account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 28  ;2   ;Field     ;
                Name=Credit Limit (LCY);
                CaptionML=ENU=Credit Limit (LCY);
                ToolTipML=ENU=Specifies the credit limit of the customer that you created the sales document for.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 36  ;2   ;Field     ;
                Name=CreditLimitLCYExpendedPct;
                ExtendedDatatype=Ratio;
                CaptionML=ENU=Expended % of Credit Limit (LCY);
                ToolTipML=ENU=Specifies the expended percentage of the credit limit in (LCY).;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CreditLimitLCYExpendedPct;
                ImplicitType=Decimal }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Sales %1 Statistics';
      Text001@1001 : TextConst 'ENU=Total';
      Text002@1002 : TextConst 'ENU=Amount';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because a customer invoice discount with the code %1 exists.';
      TotalSalesLine@1006 : ARRAY [3] OF Record "Sales Line";
      TotalSalesLineLCY@1007 : ARRAY [3] OF Record "Sales Line";
      Cust@1008 : Record Customer;
      TempVATAmountLine1@1009 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLine2@1010 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLine3@1011 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLine4@1034 : TEMPORARY Record "VAT Amount Line";
      SalesSetup@1012 : Record "Sales & Receivables Setup";
      SalesPost@1013 : Codeunit "Sales-Post";
      VATLinesForm@1032 : Page "VAT Amount Lines";
      TotalAmount1@1014 : ARRAY [3] OF Decimal;
      TotalAmount2@1015 : ARRAY [3] OF Decimal;
      VATAmount@1016 : ARRAY [3] OF Decimal;
      PrepmtTotalAmount@1037 : Decimal;
      PrepmtVATAmount@1038 : Decimal;
      PrepmtTotalAmount2@1040 : Decimal;
      VATAmountText@1017 : ARRAY [3] OF Text[30];
      PrepmtVATAmountText@1039 : Text[30];
      ProfitLCY@1018 : ARRAY [3] OF Decimal;
      ProfitPct@1019 : ARRAY [3] OF Decimal;
      AdjProfitLCY@1031 : ARRAY [3] OF Decimal;
      AdjProfitPct@1030 : ARRAY [3] OF Decimal;
      TotalAdjCostLCY@1029 : ARRAY [3] OF Decimal;
      CreditLimitLCYExpendedPct@1020 : Decimal;
      PrepmtInvPct@1036 : Decimal;
      PrepmtDeductedPct@1035 : Decimal;
      i@1021 : Integer;
      PrevNo@1022 : Code[20];
      ActiveTab@1023 : 'General,Invoicing,Shipping,Prepayment';
      PrevTab@1024 : 'General,Invoicing,Shipping,Prepayment';
      VATLinesFormIsEditable@1026 : Boolean;
      AllowInvDisc@1027 : Boolean;
      AllowVATDifference@1028 : Boolean;
      Text006@1033 : TextConst 'ENU=Prepmt. Amount';
      Text007@1041 : TextConst 'ENU=Prepmt. Amt. Invoiced';
      Text008@1042 : TextConst 'ENU=Prepmt. Amt. Deducted';
      Text009@1043 : TextConst 'ENU=Prepmt. Amt. to Deduct';
      DynamicEditable@1025 : Boolean;
      UpdateInvDiscountQst@1056 : TextConst 'ENU=One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?';

    LOCAL PROCEDURE RefreshOnAfterGetRecord@10();
    VAR
      SalesLine@1003 : Record "Sales Line";
      TempSalesLine@1002 : TEMPORARY Record "Sales Line";
      SalesPostPrepayments@1001 : Codeunit "Sales-Post Prepayments";
    BEGIN
      CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));

      if PrevNo = "No." then
        exit;
      PrevNo := "No.";
      FILTERGROUP(2);
      SETRANGE("No.",PrevNo);
      FILTERGROUP(0);

      CLEAR(SalesLine);
      CLEAR(TotalSalesLine);
      CLEAR(TotalSalesLineLCY);

      for i := 1 to 3 do begin
        TempSalesLine.DELETEALL;
        CLEAR(TempSalesLine);
        CLEAR(SalesPost);
        SalesPost.GetSalesLines(Rec,TempSalesLine,i - 1);
        CLEAR(SalesPost);
        case i of
          1:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine1);
          2:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine2);
          3:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine3);
        end;

        SalesPost.SumSalesLinesTemp(
          Rec,TempSalesLine,i - 1,TotalSalesLine[i],TotalSalesLineLCY[i],
          VATAmount[i],VATAmountText[i],ProfitLCY[i],ProfitPct[i],TotalAdjCostLCY[i]);

        if i = 3 then
          TotalAdjCostLCY[i] := TotalSalesLineLCY[i]."Unit Cost (LCY)";

        AdjProfitLCY[i] := TotalSalesLineLCY[i].Amount - TotalAdjCostLCY[i];
        if TotalSalesLineLCY[i].Amount <> 0 then
          AdjProfitPct[i] := ROUND(AdjProfitLCY[i] / TotalSalesLineLCY[i].Amount * 100,0.1);

        if "Prices Including VAT" then begin
          TotalAmount2[i] := TotalSalesLine[i].Amount;
          TotalAmount1[i] := TotalAmount2[i] + VATAmount[i];
          TotalSalesLine[i]."Line Amount" := TotalAmount1[i] + TotalSalesLine[i]."Inv. Discount Amount";
        end else begin
          TotalAmount1[i] := TotalSalesLine[i].Amount;
          TotalAmount2[i] := TotalSalesLine[i]."Amount Including VAT";
        end;
      end;
      TempSalesLine.DELETEALL;
      CLEAR(TempSalesLine);
      SalesPostPrepayments.GetSalesLines(Rec,0,TempSalesLine);
      SalesPostPrepayments.SumPrepmt(
        Rec,TempSalesLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
      PrepmtInvPct :=
        Pct(TotalSalesLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
      PrepmtDeductedPct :=
        Pct(TotalSalesLine[1]."Prepmt Amt Deducted",TotalSalesLine[1]."Prepmt. Amt. Inv.");
      if "Prices Including VAT" then begin
        PrepmtTotalAmount2 := PrepmtTotalAmount;
        PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
      end else
        PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;

      if Cust.GET("Bill-to Customer No.") then
        Cust.CALCFIELDS("Balance (LCY)")
      else
        CLEAR(Cust);

      case true of
        Cust."Credit Limit (LCY)" = 0:
          CreditLimitLCYExpendedPct := 0;
        Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0:
          CreditLimitLCYExpendedPct := 0;
        Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1:
          CreditLimitLCYExpendedPct := 10000;
        else
          CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);
      end;

      TempVATAmountLine1.MODIFYALL(Modified,false);
      TempVATAmountLine2.MODIFYALL(Modified,false);
      TempVATAmountLine3.MODIFYALL(Modified,false);
      TempVATAmountLine4.MODIFYALL(Modified,false);

      PrevTab := -1;

      UpdateHeaderInfo(2,TempVATAmountLine2);
    END;

    LOCAL PROCEDURE UpdateHeaderInfo@5(IndexNo@1000 : Integer;VAR VATAmountLine@1001 : Record "VAT Amount Line");
    VAR
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      UseDate@1003 : Date;
    BEGIN
      TotalSalesLine[IndexNo]."Inv. Discount Amount" := VATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1[IndexNo] :=
        TotalSalesLine[IndexNo]."Line Amount" - TotalSalesLine[IndexNo]."Inv. Discount Amount";
      VATAmount[IndexNo] := VATAmountLine.GetTotalVATAmount;
      if "Prices Including VAT" then begin
        TotalAmount1[IndexNo] := VATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] - VATAmount[IndexNo];
        TotalSalesLine[IndexNo]."Line Amount" :=
          TotalAmount1[IndexNo] + TotalSalesLine[IndexNo]."Inv. Discount Amount";
      end else
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] + VATAmount[IndexNo];

      if "Prices Including VAT" then
        TotalSalesLineLCY[IndexNo].Amount := TotalAmount2[IndexNo]
      else
        TotalSalesLineLCY[IndexNo].Amount := TotalAmount1[IndexNo];
      if "Currency Code" <> '' then
        if "Posting Date" = 0D then
          UseDate := WORKDATE
        else
          UseDate := "Posting Date";

      TotalSalesLineLCY[IndexNo].Amount :=
        CurrExchRate.ExchangeAmtFCYToLCY(
          UseDate,"Currency Code",TotalSalesLineLCY[IndexNo].Amount,"Currency Factor");

      ProfitLCY[IndexNo] := TotalSalesLineLCY[IndexNo].Amount - TotalSalesLineLCY[IndexNo]."Unit Cost (LCY)";
      if TotalSalesLineLCY[IndexNo].Amount = 0 then
        ProfitPct[IndexNo] := 0
      else
        ProfitPct[IndexNo] := ROUND(100 * ProfitLCY[IndexNo] / TotalSalesLineLCY[IndexNo].Amount,0.01);

      AdjProfitLCY[IndexNo] := TotalSalesLineLCY[IndexNo].Amount - TotalAdjCostLCY[IndexNo];
      if TotalSalesLineLCY[IndexNo].Amount = 0 then
        AdjProfitPct[IndexNo] := 0
      else
        AdjProfitPct[IndexNo] := ROUND(100 * AdjProfitLCY[IndexNo] / TotalSalesLineLCY[IndexNo].Amount,0.01);
    END;

    LOCAL PROCEDURE GetVATSpecification@21(QtyType@1000 : 'General,Invoicing,Shipping');
    BEGIN
      case QtyType of
        QtyType::General:
          begin
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine1);
            UpdateHeaderInfo(1,TempVATAmountLine1);
          end;
        QtyType::Invoicing:
          begin
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine2);
            UpdateHeaderInfo(2,TempVATAmountLine2);
          end;
        QtyType::Shipping:
          VATLinesForm.GetTempVATAmountLine(TempVATAmountLine3);
      end;
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16(IndexNo@1000 : Integer);
    VAR
      SaveTotalAmount@1001 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      if "Prices Including VAT" then begin
        SaveTotalAmount := TotalAmount1[IndexNo];
        UpdateInvDiscAmount(IndexNo);
        TotalAmount1[IndexNo] := SaveTotalAmount;
      end;

      with TotalSalesLine[IndexNo] do
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1[IndexNo];
      UpdateInvDiscAmount(IndexNo);
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3(ModifiedIndexNo@1000 : Integer);
    VAR
      PartialInvoicing@1001 : Boolean;
      MaxIndexNo@1002 : Integer;
      IndexNo@1003 : ARRAY [2] OF Integer;
      i@1004 : Integer;
      InvDiscBaseAmount@1005 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      if not (ModifiedIndexNo in [1,2]) then
        exit;

      if InvoicedLineExists then
        if not CONFIRM(UpdateInvDiscountQst,false) then
          ERROR('');

      if ModifiedIndexNo = 1 then
        InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(false,"Currency Code")
      else
        InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(false,"Currency Code");

      if InvDiscBaseAmount = 0 then
        ERROR(Text003,TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      if TotalSalesLine[ModifiedIndexNo]."Inv. Discount Amount" / InvDiscBaseAmount > 1 then
        ERROR(
          Text004,
          TotalSalesLine[ModifiedIndexNo].FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      PartialInvoicing := (TotalSalesLine[1]."Line Amount" <> TotalSalesLine[2]."Line Amount");

      IndexNo[1] := ModifiedIndexNo;
      IndexNo[2] := 3 - ModifiedIndexNo;
      if (ModifiedIndexNo = 2) and PartialInvoicing then
        MaxIndexNo := 1
      else
        MaxIndexNo := 2;

      if not PartialInvoicing then
        if ModifiedIndexNo = 1 then
          TotalSalesLine[2]."Inv. Discount Amount" := TotalSalesLine[1]."Inv. Discount Amount"
        else
          TotalSalesLine[1]."Inv. Discount Amount" := TotalSalesLine[2]."Inv. Discount Amount";

      for i := 1 to MaxIndexNo do
        with TotalSalesLine[IndexNo[i]] do begin
          if (i = 1) or not PartialInvoicing then
            if IndexNo[i] = 1 then begin
              TempVATAmountLine1.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
            end else
              TempVATAmountLine2.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");

          if (i = 2) and PartialInvoicing then
            if IndexNo[i] = 1 then begin
              InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(false,"Currency Code");
              if InvDiscBaseAmount = 0 then
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",false,"VAT Base Discount %")
              else
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine2.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",false,"VAT Base Discount %");
            end else begin
              InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(false,"Currency Code");
              if InvDiscBaseAmount = 0 then
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",false,"VAT Base Discount %")
              else
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine1.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",false,"VAT Base Discount %");
            end;
        end;

      UpdateHeaderInfo(1,TempVATAmountLine1);
      UpdateHeaderInfo(2,TempVATAmountLine2);

      if ModifiedIndexNo = 1 then
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine1)
      else
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine2);

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalSalesLine[1]."Inv. Discount Amount";
      MODIFY;

      UpdateVATOnSalesLines;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmount@9();
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
      SalesPostPrepmt@1000 : Codeunit "Sales-Post Prepayments";
    BEGIN
      SalesPostPrepmt.UpdatePrepmtAmountOnSaleslines(Rec,PrepmtTotalAmount);
      SalesPostPrepmt.GetSalesLines(Rec,0,TempSalesLine);
      SalesPostPrepmt.SumPrepmt(
        Rec,TempSalesLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
      PrepmtInvPct :=
        Pct(TotalSalesLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
      PrepmtDeductedPct :=
        Pct(TotalSalesLine[1]."Prepmt Amt Deducted",TotalSalesLine[1]."Prepmt. Amt. Inv.");
      if "Prices Including VAT" then begin
        PrepmtTotalAmount2 := PrepmtTotalAmount;
        PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
      end else
        PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;
      MODIFY;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      if "Prices Including VAT" xor ReverseCaption then
        exit('2,1,' + FieldCaption);
      exit('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnSalesLines@1();
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      GetVATSpecification(ActiveTab);
      if TempVATAmountLine1.GetAnyLineModified then
        SalesLine.UpdateVATOnLines(0,Rec,SalesLine,TempVATAmountLine1);
      if TempVATAmountLine2.GetAnyLineModified then
        SalesLine.UpdateVATOnLines(1,Rec,SalesLine,TempVATAmountLine2);
      PrevNo := '';
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record "Cust. Invoice Disc.";
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      exit(CustInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    BEGIN
      if not AllowInvDisc then
        ERROR(Text005,"Invoice Disc. Code");
    END;

    LOCAL PROCEDURE Pct@6(Numerator@1001 : Decimal;Denominator@1000 : Decimal) : Decimal;
    BEGIN
      if Denominator = 0 then
        exit(0);
      exit(ROUND(Numerator / Denominator * 10000,1));
    END;

    LOCAL PROCEDURE VATLinesDrillDown@7(VAR VATLinesToDrillDown@1000 : Record "VAT Amount Line";ThisTabAllowsVATEditing@1001 : Boolean);
    BEGIN
      CLEAR(VATLinesForm);
      VATLinesForm.SetTempVATAmountLine(VATLinesToDrillDown);
      VATLinesForm.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference and ThisTabAllowsVATEditing,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
      VATLinesForm.RUNMODAL;
      VATLinesForm.GetTempVATAmountLine(VATLinesToDrillDown);
    END;

    LOCAL PROCEDURE TotalAmount21OnAfterValidate@19074760();
    BEGIN
      with TotalSalesLine[1] do begin
        if "Prices Including VAT" then
          "Inv. Discount Amount" := "Line Amount" - "Amount Including VAT"
        else
          "Inv. Discount Amount" := "Line Amount" - Amount;
      end;
      UpdateInvDiscAmount(1);
    END;

    BEGIN
    END.
  }
}

