OBJECT Table 295 Reminder Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               SalesSetup.GET;
               if "No." = '' then begin
                 SalesSetup.TESTFIELD("Reminder Nos.");
                 SalesSetup.TESTFIELD("Issued Reminder Nos.");
                 NoSeriesMgt.InitSeries(
                   SalesSetup."Reminder Nos.",xRec."No. Series","Posting Date",
                   "No.","No. Series");
               end;
               "Posting Description" := STRSUBSTNO(Text000,"No.");
               if ("No. Series" <> '') and
                  (SalesSetup."Reminder Nos." = SalesSetup."Issued Reminder Nos.")
               then
                 "Issuing No. Series" := "No. Series"
               else
                 NoSeriesMgt.SetDefaultSeries("Issuing No. Series",SalesSetup."Issued Reminder Nos.");
               if "Posting Date" = 0D then
                 "Posting Date" := WORKDATE;
               "Document Date" := WORKDATE;
               "Due Date" := WORKDATE;
               if GETFILTER("Customer No.") <> '' then
                 if GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") then
                   VALIDATE("Customer No.",GETRANGEMIN("Customer No."));
             END;

    OnDelete=BEGIN
               ReminderIssue.DeleteHeader(Rec,IssuedReminderHeader);

               ReminderLine.SETRANGE("Reminder No.","No.");
               ReminderLine.DELETEALL;

               ReminderCommentLine.SETRANGE(Type,ReminderCommentLine.Type::Reminder);
               ReminderCommentLine.SETRANGE("No.","No.");
               ReminderCommentLine.DELETEALL;

               if IssuedReminderHeader."No." <> '' then begin
                 COMMIT;
                 if CONFIRM(
                      Text001,true,
                      IssuedReminderHeader."No.")
                 then begin
                   IssuedReminderHeader.SETRECFILTER;
                   IssuedReminderHeader.PrintRecords(true,false,false)
                 end;
               end;
             END;

    CaptionML=ENU=Reminder Header;
    LookupPageID="Reminder List";
    DrillDownPageID="Reminder List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Reminder Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                                "Posting Description" := STRSUBSTNO(Text000,"No.");
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Customer No.") then
                                                                  if Undo then begin
                                                                    "Customer No." := xRec."Customer No.";
                                                                    CreateDim(DATABASE::Customer,"Customer No.");
                                                                    exit;
                                                                  end;
                                                                if "Customer No." = '' then begin
                                                                  CreateDim(DATABASE::Customer,"Customer No.");
                                                                  exit;
                                                                end;
                                                                Cust.GET("Customer No.");
                                                                if Cust.Blocked = Cust.Blocked::All then
                                                                  Cust.CustBlockedErrorMessage(Cust,false);
                                                                Name := Cust.Name;
                                                                "Name 2" := Cust."Name 2";
                                                                Address := Cust.Address;
                                                                "Address 2" := Cust."Address 2";
                                                                "Post Code" := Cust."Post Code";
                                                                City := Cust.City;
                                                                County := Cust.County;
                                                                Contact := Cust.Contact;
                                                                "Country/Region Code" := Cust."Country/Region Code";
                                                                "Language Code" := Cust."Language Code";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Shortcut Dimension 1 Code" := Cust."Global Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := Cust."Global Dimension 2 Code";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "Reminder Terms Code" := Cust."Reminder Terms Code";
                                                                "Fin. Charge Terms Code" := Cust."Fin. Charge Terms Code";
                                                                VALIDATE("Reminder Terms Code");

                                                                CreateDim(DATABASE::Customer,"Customer No.");
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 10  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 11  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Currency Code") then
                                                                  if Undo then begin
                                                                    "Currency Code" := xRec."Currency Code";
                                                                    exit;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 14  ;   ;Your Reference      ;Text30        ;CaptionML=ENU=Your Reference }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=false }
    { 18  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group;
                                                   Editable=false }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 20  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 22  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Document Date") then
                                                                  if Undo then begin
                                                                    "Document Date" := xRec."Document Date";
                                                                    exit;
                                                                  end;
                                                                VALIDATE("Reminder Level");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 23  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 24  ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Reminder Terms Code") then
                                                                  if Undo then begin
                                                                    "Reminder Terms Code" := xRec."Reminder Terms Code";
                                                                    exit;
                                                                  end;
                                                                if "Reminder Terms Code" <> '' then begin
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  "Post Interest" := ReminderTerms."Post Interest";
                                                                  "Post Additional Fee" := ReminderTerms."Post Additional Fee";
                                                                  "Post Add. Fee per Line" := ReminderTerms."Post Add. Fee per Line";
                                                                  VALIDATE("Reminder Level");
                                                                  VALIDATE("Post Interest");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Reminder Terms Code }
    { 25  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Fin. Charge Terms Code") then
                                                                  if Undo then begin
                                                                    "Fin. Charge Terms Code" := xRec."Fin. Charge Terms Code";
                                                                    exit;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 26  ;   ;Post Interest       ;Boolean       ;CaptionML=ENU=Post Interest }
    { 27  ;   ;Post Additional Fee ;Boolean       ;CaptionML=ENU=Post Additional Fee }
    { 28  ;   ;Reminder Level      ;Integer       ;TableRelation="Reminder Level"."No." WHERE ("Reminder Terms Code"=FIELD("Reminder Terms Code"));
                                                   OnValidate=BEGIN
                                                                if ("Reminder Level" <> 0) and ("Reminder Terms Code" <> '') then begin
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("No.",1,"Reminder Level");
                                                                  if ReminderLevel.FINDLAST and ("Document Date" <> 0D) then
                                                                    "Due Date" := CALCDATE(ReminderLevel."Due Date Calculation","Document Date");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Reminder Level }
    { 29  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Reminder Comment Line" WHERE (Type=CONST(Reminder),
                                                                                                    "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 31  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."Remaining Amount" WHERE ("Reminder No."=FIELD("No."),
                                                                                                             "Line Type"=FILTER(<>"Not Due")));
                                                   CaptionML=ENU=Remaining Amount;
                                                   DecimalPlaces=2:2;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Interest Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE ("Reminder No."=FIELD("No."),
                                                                                                 Type=CONST("Customer Ledger Entry"),
                                                                                                 "Line Type"=FILTER(<>"Not Due")));
                                                   CaptionML=ENU=Interest Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 33  ;   ;Additional Fee      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE ("Reminder No."=FIELD("No."),
                                                                                                 Type=CONST("G/L Account"),
                                                                                                 "Line Type"=FILTER(<>"Not Due")));
                                                   CaptionML=ENU=Additional Fee;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 34  ;   ;VAT Amount          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."VAT Amount" WHERE ("Reminder No."=FIELD("No."),
                                                                                                       "Line Type"=FILTER(<>"Not Due")));
                                                   CaptionML=ENU=VAT Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 37  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 38  ;   ;Issuing No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Issuing No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Reminder Nos.");
                                                                  SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series");
                                                                end;
                                                                TESTFIELD("Issuing No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with ReminderHeader do begin
                                                                ReminderHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Reminder Nos.");
                                                                SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                if NoSeriesMgt.LookupSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series") then
                                                                  VALIDATE("Issuing No. Series");
                                                                Rec := ReminderHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Issuing No. Series }
    { 39  ;   ;Issuing No.         ;Code20        ;CaptionML=ENU=Issuing No. }
    { 41  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 42  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 43  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 44  ;   ;Use Header Level    ;Boolean       ;CaptionML=ENU=Use Header Level }
    { 45  ;   ;Add. Fee per Line   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE ("Reminder No."=FIELD("No."),
                                                                                                 Type=CONST("Line Fee"),
                                                                                                 "Line Type"=FILTER(<>"Not Due")));
                                                   CaptionML=ENU=Add. Fee per Line;
                                                   AutoFormatExpr="Currency Code" }
    { 46  ;   ;Post Add. Fee per Line;Boolean     ;CaptionML=ENU=Post Add. Fee per Line }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Customer No.","Currency Code"           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.","Customer No.",Name,"Due Date"     }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reminder %1';
      Text001@1001 : TextConst 'ENU=Do you want to print reminder %1?';
      Text002@1002 : TextConst 'ENU=This change will cause the existing lines to be deleted for this reminder.\\';
      Text003@1003 : TextConst 'ENU=Do you want to continue?';
      Text004@1004 : TextConst 'ENU=There is not enough space to insert the text.';
      Text005@1005 : TextConst 'ENU="Deleting this document will cause a gap in the number series for reminders. "';
      Text006@1006 : TextConst 'ENU=An empty reminder %1 will be created to fill this gap in the number series.\\';
      Currency@1011 : Record Currency;
      SalesSetup@1007 : Record "Sales & Receivables Setup";
      CustPostingGr@1008 : Record "Customer Posting Group";
      ReminderTerms@1009 : Record "Reminder Terms";
      ReminderLevel@1010 : Record "Reminder Level";
      ReminderText@1012 : Record "Reminder Text";
      FinChrgTerms@1013 : Record "Finance Charge Terms";
      ReminderHeader@1014 : Record "Reminder Header";
      ReminderLine@1015 : Record "Reminder Line";
      ReminderCommentLine@1016 : Record "Reminder Comment Line";
      Cust@1017 : Record Customer;
      PostCode@1018 : Record "Post Code";
      IssuedReminderHeader@1019 : Record "Issued Reminder Header";
      GenBusPostingGrp@1020 : Record "Gen. Business Posting Group";
      ApplicationManagement@1031 : Codeunit ApplicationManagement;
      NoSeriesMgt@1022 : Codeunit NoSeriesManagement;
      TransferExtendedText@1023 : Codeunit "Transfer Extended Text";
      ReminderIssue@1024 : Codeunit "Reminder-Issue";
      DimMgt@1025 : Codeunit DimensionManagement;
      NextLineNo@1026 : Integer;
      LineSpacing@1027 : Integer;
      ReminderTotal@1028 : Decimal;

    [External]
    PROCEDURE AssistEdit@9(OldReminderHeader@1000 : Record "Reminder Header") : Boolean;
    BEGIN
      with ReminderHeader do begin
        ReminderHeader := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Reminder Nos.");
        SalesSetup.TESTFIELD("Issued Reminder Nos.");
        if NoSeriesMgt.SelectSeries(SalesSetup."Reminder Nos.",OldReminderHeader."No. Series","No. Series") then begin
          SalesSetup.GET;
          SalesSetup.TESTFIELD("Reminder Nos.");
          SalesSetup.TESTFIELD("Issued Reminder Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := ReminderHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE Undo@6() : Boolean;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.","No.");
      if ReminderLine.FIND('-') then begin
        COMMIT;
        if not
           CONFIRM(
             Text002 +
             Text003,
             false)
        then
          exit(true);
        ReminderLine.DELETEALL;
        MODIFY
      end;
    END;

    [Internal]
    PROCEDURE InsertLines@3();
    VAR
      ReminderLine2@1000 : Record "Reminder Line";
      CurrencyForReminderLevel@1002 : Record "Currency for Reminder Level";
      CaptionManagement@1003 : Codeunit CaptionManagement;
      AdditionalFee@1001 : Decimal;
    BEGIN
      CurrencyForReminderLevel.INIT;
      ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,"Reminder Level");
      if ReminderLevel.FINDLAST then begin
        CALCFIELDS("Remaining Amount");
        AdditionalFee := ReminderLevel.GetAdditionalFee("Remaining Amount","Currency Code",false,"Posting Date");

        if AdditionalFee > 0 then begin
          ReminderLine.RESET;
          ReminderLine.SETRANGE("Reminder No.","No.");
          ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Reminder Line");
          ReminderLine."Reminder No." := "No.";
          if ReminderLine.FIND('+') then
            NextLineNo := ReminderLine."Line No."
          else
            NextLineNo := 0;
          ReminderLine.SETRANGE("Line Type");
          ReminderLine2 := ReminderLine;
          ReminderLine2.COPYFILTERS(ReminderLine);
          ReminderLine2.SETFILTER("Line Type",'<>%1',ReminderLine2."Line Type"::"Line Fee");
          if ReminderLine2.NEXT <> 0 then begin
            LineSpacing := (ReminderLine2."Line No." - ReminderLine."Line No.") div 3;
          end else
            LineSpacing := 10000;
          InsertBlankLine(ReminderLine."Line Type"::"Additional Fee");

          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::"G/L Account";
          TESTFIELD("Customer Posting Group");
          CustPostingGr.GET("Customer Posting Group");
          ReminderLine.VALIDATE("No.",CustPostingGr.GetAdditionalFeeAccount);
          ReminderLine.Description :=
            COPYSTR(
              CaptionManagement.GetTranslatedFieldCaption(
                "Language Code",DATABASE::"Currency for Reminder Level",
                CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
          ReminderLine.VALIDATE(Amount,AdditionalFee);
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
          ReminderLine.INSERT;
          if TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,false) then
            TransferExtendedText.InsertReminderExtText(ReminderLine);
        end;
      end;
      ReminderLine."Line No." := ReminderLine."Line No." + 10000;
      ReminderRounding(Rec);
      InsertBeginTexts(Rec);
      InsertEndTexts(Rec);
      MODIFY;
    END;

    [Internal]
    PROCEDURE UpdateLines@13(ReminderHeader@1000 : Record "Reminder Header";UpdateAdditionalFee@1001 : Boolean);
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE(
        "Line Type",
        ReminderLine."Line Type"::"Beginning Text",
        ReminderLine."Line Type"::"Ending Text");
      ReminderLine.SETRANGE(Type,ReminderLine.Type::" ");
      ReminderLine.SETRANGE("Attached to Line No.",0);
      ReminderLine.DELETEALL(true);

      if UpdateAdditionalFee then begin
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Additional Fee");
        ReminderLine.DELETEALL;
        InsertLines;
      end else begin
        InsertBeginTexts(ReminderHeader);
        InsertEndTexts(ReminderHeader);
      end;
    END;

    LOCAL PROCEDURE InsertBeginTexts@11(ReminderHeader@1000 : Record "Reminder Header");
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      if ReminderLevel.FINDLAST then begin
        ReminderText.RESET;
        ReminderText.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Beginning);

        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine."Reminder No." := ReminderHeader."No.";
        if ReminderLine.FIND('-') then begin
          LineSpacing := ReminderLine."Line No." div (ReminderText.COUNT + 2);
          if LineSpacing = 0 then
            ERROR(Text004);
        end else
          LineSpacing := 10000;
        NextLineNo := 0;
        InsertTextLines(ReminderHeader);
      end;
    END;

    LOCAL PROCEDURE InsertEndTexts@12(ReminderHeader@1000 : Record "Reminder Header");
    VAR
      ReminderLine2@1001 : Record "Reminder Line";
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      if ReminderLevel.FINDLAST then begin
        ReminderText.SETRANGE(
          "Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Ending);
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETFILTER(
          "Line Type",'%1|%2|%3',
          ReminderLine."Line Type"::"Reminder Line",
          ReminderLine."Line Type"::"Additional Fee",
          ReminderLine."Line Type"::Rounding);
        if ReminderLine.FINDLAST then
          NextLineNo := ReminderLine."Line No."
        else
          NextLineNo := 0;
        ReminderLine.SETRANGE("Line Type");
        ReminderLine2 := ReminderLine;
        ReminderLine2.COPYFILTERS(ReminderLine);
        ReminderLine2.SETFILTER("Line Type",'<>%1',ReminderLine2."Line Type"::"Line Fee");
        if ReminderLine2.NEXT <> 0 then begin
          LineSpacing :=
            (ReminderLine2."Line No." - ReminderLine."Line No.") div
            (ReminderText.COUNT + 2);
          if LineSpacing = 0 then
            ERROR(Text004);
        end else
          LineSpacing := 10000;
        InsertTextLines(ReminderHeader);
      end;
    END;

    LOCAL PROCEDURE InsertTextLines@4(ReminderHeader@1000 : Record "Reminder Header");
    VAR
      CompanyInfo@1001 : Record "Company Information";
    BEGIN
      if ReminderText.FIND('-') then begin
        if ReminderText.Position = ReminderText.Position::Ending then
          InsertBlankLine(ReminderLine."Line Type"::"Ending Text");
        if ReminderHeader."Fin. Charge Terms Code" <> '' then
          FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");
        if not ReminderLevel."Calculate Interest" then
          FinChrgTerms."Interest Rate" := 0;
        ReminderHeader.CALCFIELDS(
          "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");
        ReminderTotal :=
          ReminderHeader."Remaining Amount" + ReminderHeader."Interest Amount" +
          ReminderHeader."Additional Fee" + ReminderHeader."VAT Amount" +
          ReminderHeader."Add. Fee per Line";
        CompanyInfo.GET;

        repeat
          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::" ";
          ReminderLine.Description :=
            COPYSTR(
              STRSUBSTNO(
                ReminderText.Text,
                ReminderHeader."Document Date",
                ReminderHeader."Due Date",
                FinChrgTerms."Interest Rate",
                FORMAT(ReminderHeader."Remaining Amount",0,
                  ApplicationManagement.AutoFormatTranslate(1,ReminderHeader."Currency Code")),
                ReminderHeader."Interest Amount",
                ReminderHeader."Additional Fee",
                FORMAT(ReminderTotal,0,ApplicationManagement.AutoFormatTranslate(1,ReminderHeader."Currency Code")),
                ReminderHeader."Reminder Level",
                ReminderHeader."Currency Code",
                ReminderHeader."Posting Date",
                CompanyInfo.Name,
                ReminderHeader."Add. Fee per Line"),
              1,
              MAXSTRLEN(ReminderLine.Description));
          if ReminderText.Position = ReminderText.Position::Beginning then
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
          else
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
          ReminderLine.INSERT;
        until ReminderText.NEXT = 0;
        if ReminderText.Position = ReminderText.Position::Beginning then
          InsertBlankLine(ReminderLine."Line Type"::"Beginning Text");
      end;
    END;

    LOCAL PROCEDURE InsertBlankLine@5(LineType@1000 : Integer);
    BEGIN
      NextLineNo := NextLineNo + LineSpacing;
      ReminderLine.INIT;
      ReminderLine."Line No." := NextLineNo;
      ReminderLine."Line Type" := LineType;
      ReminderLine.INSERT;
    END;

    [External]
    PROCEDURE PrintRecords@1();
    VAR
      ReminderHeader@1000 : Record "Reminder Header";
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      with ReminderHeader do begin
        COPY(Rec);
        FINDFIRST;
        SETRECFILTER;
        ReportSelection.Print(ReportSelection.Usage::"Rem.Test",ReminderHeader,"Customer No.");
      end;
    END;

    [External]
    PROCEDURE ConfirmDeletion@2() : Boolean;
    BEGIN
      ReminderIssue.TestDeleteHeader(Rec,IssuedReminderHeader);
      if IssuedReminderHeader."No." <> '' then
        if not CONFIRM(
             Text005 +
             Text006 +
             Text003,true,
             IssuedReminderHeader."No.")
        then
          exit;
      exit(true);
    END;

    LOCAL PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1003 : Record "Source Code Setup";
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Reminder,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    LOCAL PROCEDURE ReminderRounding@7(ReminderHeader@1001 : Record "Reminder Header");
    VAR
      TotalAmountInclVAT@1004 : Decimal;
      ReminderRoundingAmount@1000 : Decimal;
    BEGIN
      GetCurrency(ReminderHeader);
      if Currency."Invoice Rounding Precision" = 0 then
        exit;

      ReminderHeader.CALCFIELDS(
        "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");

      TotalAmountInclVAT := ReminderHeader."Remaining Amount" +
        ReminderHeader."Interest Amount" +
        ReminderHeader."Additional Fee" +
        ReminderHeader."Add. Fee per Line" +
        ReminderHeader."VAT Amount";
      ReminderRoundingAmount :=
        -ROUND(
          TotalAmountInclVAT -
          ROUND(
            TotalAmountInclVAT,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      if ReminderRoundingAmount <> 0 then begin
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        with ReminderLine do begin
          INIT;
          VALIDATE("Line No.",GetNextLineNo(ReminderHeader."No."));
          VALIDATE("Reminder No.",ReminderHeader."No.");
          VALIDATE(Type,Type::"G/L Account");
          "System-Created Entry" := true;
          VALIDATE("No.",CustPostingGr.GetInvRoundingAccount);
          VALIDATE(
            Amount,
            ROUND(
              ReminderRoundingAmount / (1 + ("VAT %" / 100)),
              Currency."Amount Rounding Precision"));
          "VAT Amount" := ReminderRoundingAmount - Amount;
          "Line Type" := "Line Type"::Rounding;
          INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE GetCurrency@17(ReminderHeader@1000 : Record "Reminder Header");
    BEGIN
      with ReminderHeader do
        if "Currency Code" = '' then
          Currency.InitRoundingPrecision
        else begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
    END;

    [External]
    PROCEDURE UpdateReminderRounding@8(ReminderHeader@1000 : Record "Reminder Header");
    VAR
      OldLineNo@1001 : Integer;
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::Rounding);
      if ReminderLine.FINDFIRST then
        ReminderLine.DELETE(true);

      ReminderLine.SETRANGE("Line Type");
      ReminderLine.SETFILTER(Type,'<>%1',ReminderLine.Type::" ");
      if ReminderLine.FINDLAST then begin
        OldLineNo := ReminderLine."Line No.";
        ReminderLine.SETRANGE(Type);
        if ReminderLine.NEXT <> 0 then
          ReminderLine."Line No." := OldLineNo + ((ReminderLine."Line No." - OldLineNo) div 2)
        else
          ReminderLine."Line No." := OldLineNo + 10000;
      end else
        ReminderLine."Line No." := 10000;

      ReminderRounding(ReminderHeader);
    END;

    [External]
    PROCEDURE ShowDocDim@10();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE CalculateLineFeeVATAmount@1000() : Decimal;
    VAR
      ReminderLine@1000 : Record "Reminder Line";
    BEGIN
      ReminderLine.SETCURRENTKEY("Reminder No.",Type,"Line Type");
      ReminderLine.SETRANGE("Reminder No.","No.");
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.CALCSUMS("VAT Amount");
      exit(ReminderLine."VAT Amount");
    END;

    LOCAL PROCEDURE GetNextLineNo@1010(ReminderNo@1000 : Code[20]) : Integer;
    VAR
      ReminderLine@1001 : Record "Reminder Line";
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      if ReminderLine.FINDLAST then
        exit(ReminderLine."Line No." + 10000);
      exit(10000);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    BEGIN
      if GETFILTER("Customer No.") <> '' then
        if GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") then
          exit(GETRANGEMAX("Customer No."));
    END;

    [External]
    PROCEDURE SetCustomerFromFilter@186();
    BEGIN
      if GetFilterCustNo <> '' then
        VALIDATE("Customer No.",GetFilterCustNo);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR ReminderHeader@1000 : Record "Reminder Header";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

