OBJECT Report 99001020 Carry Out Action Msg. - Plan.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Carry Out Action Msg. - Plan.;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 3754;    ;DataItem;Requisition Line    ;
               DataItemTable="Requisition Line";
               DataItemTableView=SORTING("Worksheet Template Name","Journal Batch Name","Vendor No.","Sell-to Customer No.","Ship-to Code","Order Address Code","Currency Code","Ref. Order Type","Ref. Order Status","Ref. Order No.","Location Code","Transfer-from Code");
               ReqFilterHeadingML=ENU=Planning Line;
               OnPreDataItem=BEGIN
                               LOCKTABLE;

                               SetReqLineFilters;
                               if not FIND('-') then
                                 ERROR(Text000);

                               if PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" then
                                 CheckCopyToWksh(ReqWkshTemp,ReqWksh);
                               if TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh" then
                                 CheckCopyToWksh(TransWkshTemp,TransWkshName);
                               if ProdOrderChoice = ProdOrderChoice::"Copy to Req. Wksh" then
                                 CheckCopyToWksh(ProdWkshTempl,ProdWkshName);

                               Window.OPEN(Text012);
                               CheckPreconditions;
                               CounterTotal := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  WindowUpdate;

                                  if not "Accept Action Message" then
                                    CurrReport.SKIP;
                                  LOCKTABLE;

                                  COMMIT;
                                  case "Ref. Order Type" of
                                    "Ref. Order Type"::"Prod. Order":
                                      if ProdOrderChoice <> ProdOrderChoice::" " then
                                        CarryOutActions(2,ProdOrderChoice,ProdWkshTempl,ProdWkshName);
                                    "Ref. Order Type"::Purchase:
                                      if PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" then
                                        CarryOutActions(0,PurchOrderChoice,ReqWkshTemp,ReqWksh);
                                    "Ref. Order Type"::Transfer:
                                      if TransOrderChoice <> TransOrderChoice::" " then begin
                                        CarryOutAction.SetSplitTransferOrders(not CombineTransferOrders);
                                        CarryOutActions(1,TransOrderChoice,TransWkshTemp,TransWkshName);
                                      end;
                                    "Ref. Order Type"::Assembly:
                                      if AsmOrderChoice <> AsmOrderChoice::" " then
                                        CarryOutActions(3,AsmOrderChoice,'','');
                                    else
                                      CurrReport.SKIP;
                                  end;
                                  COMMIT;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;

                                CarryOutAction.PrintTransferOrders;

                                if PurchOrderChoice in [PurchOrderChoice::"Make Purch. Orders",
                                                        PurchOrderChoice::"Make Purch. Orders & Print"]
                                then begin
                                  SETRANGE("Accept Action Message",true);

                                  if PurchaseSuggestionExists("Requisition Line") then begin
                                    PurchOrderHeader."Order Date" := WORKDATE;
                                    PurchOrderHeader."Posting Date" := WORKDATE;
                                    PurchOrderHeader."Expected Receipt Date" := WORKDATE;

                                    EndOrderDate := WORKDATE;

                                    PrintOrders := (PurchOrderChoice = PurchOrderChoice::"Make Purch. Orders & Print");

                                    CLEAR(ReqWkshMakeOrders);
                                    ReqWkshMakeOrders.SetCreatedDocumentBuffer(TempDocumentEntry);
                                    ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
                                    if not NoPlanningResiliency then
                                      ReqWkshMakeOrders.SetPlanningResiliency;
                                    ReqWkshMakeOrders.CarryOutBatchAction("Requisition Line");
                                    CounterFailed := CounterFailed + ReqWkshMakeOrders.GetFailedCounter;
                                  end;
                                end;

                                if ReserveforPlannedProd then
                                  MESSAGE(Text010);

                                if CounterFailed > 0 then
                                  if GETLASTERRORTEXT = '' then
                                    MESSAGE(Text013,CounterFailed)
                                  else
                                    MESSAGE(GETLASTERRORTEXT);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               TransNameEnable := true;
               TransTempEnable := true;
               ReqNameEnable := true;
               ReqTempEnable := true;
             END;

      OnOpenPage=BEGIN
                   ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                   TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=ProductionOrder;
                  CaptionML=ENU=Production Order;
                  ToolTipML=ENU=Specifies that you want to create production orders for item with the Prod. Order replenishment system. You can select to create either planned or firm planned production order, and you can have the new order documents printed.;
                  OptionCaptionML=ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                  ApplicationArea=#Planning;
                  SourceExpr=ProdOrderChoice }

      { 14  ;2   ;Field     ;
                  Name=Assembly Order;
                  CaptionML=ENU=Assembly Order;
                  ToolTipML=ENU=Specifies the assembly orders that are created for items with the Assembly replenishment method.;
                  OptionCaptionML=ENU=" ,Make Assembly Orders,Make Assembly Orders & Print";
                  ApplicationArea=#Assembly;
                  SourceExpr=AsmOrderChoice }

      { 2   ;2   ;Field     ;
                  Name=PurchaseOrder;
                  CaptionML=ENU=Purchase Order;
                  ToolTipML=ENU=Specifies that you want to create purchase orders for items with the Purchase replenishment method. You can have the new order documents printed.;
                  OptionCaptionML=ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                  ApplicationArea=#Planning;
                  SourceExpr=PurchOrderChoice;
                  OnValidate=BEGIN
                               ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                               ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 9   ;2   ;Group     ;
                  Name=Group9;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 13  ;3   ;Field     ;
                  Name=Field13;
                  ApplicationArea=#Planning;
                  Visible=FALSE }

      { 10  ;3   ;Group     ;
                  Name=Req. Worksheet;
                  CaptionML=ENU=Req. Worksheet;
                  GroupType=Group }

      { 11  ;4   ;Field     ;
                  Name=ReqTemp;
                  CaptionML=ENU=Req. Wksh. Template;
                  ToolTipML=ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet template.;
                  ApplicationArea=#Planning;
                  SourceExpr=ReqWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=ReqTempEnable;
                  OnValidate=BEGIN
                               ReqWksh := '';
                             END;

                  OnLookup=BEGIN
                             if PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK then begin
                               Text := ReqWkshTmpl.Name;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

      { 12  ;4   ;Field     ;
                  Name=ReqName;
                  CaptionML=ENU=Req. Wksh. Name;
                  ToolTipML=ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet name.;
                  ApplicationArea=#Planning;
                  SourceExpr=ReqWksh;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=ReqNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                             if PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK then begin
                               Text := ReqWkshName.Name;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

      { 6   ;2   ;Field     ;
                  Name=TransOrderChoice;
                  CaptionML=ENU=Transfer Order;
                  ToolTipML=ENU=Specifies that you want to create transfer orders for items with the Transfer replenishment method in the SKU card. You can have the new order documents printed.;
                  OptionCaptionML=ENU=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh";
                  ApplicationArea=#Location;
                  SourceExpr=TransOrderChoice;
                  OnValidate=BEGIN
                               TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                               TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 7   ;2   ;Group     ;
                  Name=Group7;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 8   ;3   ;Field     ;
                  Name=Field8;
                  ApplicationArea=#Planning;
                  Visible=FALSE }

      { 3   ;3   ;Group     ;
                  Name=Group3;
                  CaptionML=ENU=Req. Worksheet;
                  GroupType=Group }

      { 15  ;4   ;Field     ;
                  Name=TransTemp;
                  CaptionML=ENU=Req. Wksh. Template;
                  ToolTipML=ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet template.;
                  ApplicationArea=#Planning;
                  SourceExpr=TransWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=TransTempEnable;
                  OnValidate=BEGIN
                               TransWkshName := '';
                             END;

                  OnLookup=BEGIN
                             if PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK then begin
                               Text := ReqWkshTmpl.Name;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

      { 16  ;4   ;Field     ;
                  Name=TransName;
                  CaptionML=ENU=Req. Wksh. Name;
                  ToolTipML=ENU=Specifies that you want to copy the planning line proposals for transfer orders to this requisition worksheet name.;
                  ApplicationArea=#Planning;
                  SourceExpr=TransWkshName;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=TransNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                             if PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK then begin
                               Text := ReqWkshName.Name;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

      { 5   ;2   ;Group     ;
                  Name=Group5;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 18  ;3   ;Group     ;
                  Name=Combine Transfer Orders;
                  CaptionML=ENU=Combine Transfer Orders;
                  GroupType=Group }

      { 4   ;4   ;Field     ;
                  Name=CombineTransferOrders;
                  ApplicationArea=#Location;
                  SourceExpr=CombineTransferOrders;
                  ShowCaption=false }

      { 17  ;2   ;Field     ;
                  Name=Stop and Show First Error;
                  CaptionML=ENU=Stop and Show First Error;
                  ToolTipML=ENU=Specifies whether to stop as soon as the batch job encounters an error.;
                  ApplicationArea=#Planning;
                  SourceExpr=NoPlanningResiliency }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1029 : TextConst 'ENU=There are no planning lines to make orders for.';
      Text007@1000 : TextConst 'ENU="This template and worksheet are currently active. "';
      Text008@1001 : TextConst 'ENU=You must select a different template name or worksheet name to copy to.';
      PurchOrderHeader@1017 : Record "Purchase Header";
      ReqWkshTmpl@1002 : Record "Req. Wksh. Template";
      ReqWkshName@1003 : Record "Requisition Wksh. Name";
      ReqLineFilters@1026 : Record "Requisition Line";
      TempDocumentEntry@1020 : TEMPORARY Record "Document Entry";
      CarryOutAction@1005 : Codeunit "Carry Out Action";
      ReqWkshMakeOrders@1018 : Codeunit "Req. Wksh.-Make Order";
      Window@1035 : Dialog;
      ReqWkshTemp@1007 : Code[10];
      ReqWksh@1008 : Code[10];
      TransWkshTemp@1009 : Code[10];
      TransWkshName@1010 : Code[10];
      ProdWkshTempl@1028 : Code[10];
      ProdWkshName@1027 : Code[10];
      CurrReqWkshTemp@1015 : Code[10];
      CurrReqWkshName@1014 : Code[10];
      ProdOrderChoice@1011 : '" ",Planned,"Firm Planned","Firm Planned & Print","Copy to Req. Wksh"';
      PurchOrderChoice@1012 : '" ","Make Purch. Orders","Make Purch. Orders & Print","Copy to Req. Wksh"';
      TransOrderChoice@1013 : '" ","Make Trans. Orders","Make Trans. Orders & Print","Copy to Req. Wksh"';
      Text009@1016 : TextConst 'ENU=You must select a worksheet to copy to';
      AsmOrderChoice@1004 : '" ","Make Assembly Orders","Make Assembly Orders & Print"';
      PrintOrders@1019 : Boolean;
      CombineTransferOrders@1006 : Boolean;
      ReserveforPlannedProd@1033 : Boolean;
      NoPlanningResiliency@1031 : Boolean;
      Text010@1030 : TextConst 'ENU=Components were not reserved for orders with status Planned.';
      Text011@1032 : TextConst 'ENU=You must make order for both line %1 and %2 because they are associated.';
      Text012@1034 : TextConst 'ENU=Carrying Out Actions  #1########## @2@@@@@@@@@@@@@';
      Counter@1036 : Integer;
      CounterTotal@1037 : Integer;
      CounterFailed@1038 : Integer;
      Text013@1039 : TextConst 'ENU=Not all Requisition Lines were carried out.\A total of %1 lines were not carried out because of errors encountered.';
      EndOrderDate@1022 : Date;
      ReqTempEnable@19040225 : Boolean INDATASET;
      ReqNameEnable@19051726 : Boolean INDATASET;
      TransTempEnable@19079481 : Boolean INDATASET;
      TransNameEnable@19074510 : Boolean INDATASET;

    LOCAL PROCEDURE CarryOutActions@20(SourceType@1004 : 'Purchase,Transfer,Production,Assembly';Choice@1002 : Option;WkshTempl@1001 : Code[10];WkshName@1000 : Code[10]);
    BEGIN
      if NoPlanningResiliency then begin
        CarryOutAction.SetTryParameters(SourceType,Choice,WkshTempl,WkshName);
        CarryOutAction.RUN("Requisition Line");
      end else
        if not CarryOutAction.TryCarryOutAction(SourceType,"Requisition Line",Choice,WkshTempl,WkshName) then
          CounterFailed := CounterFailed + 1;
    END;

    PROCEDURE SetCreatedDocumentBuffer@12(VAR TempDocumentEntryNew@1000 : TEMPORARY Record "Document Entry");
    BEGIN
      TempDocumentEntry.COPY(TempDocumentEntryNew,true);
      CarryOutAction.SetCreatedDocumentBuffer(TempDocumentEntryNew);
    END;

    [External]
    PROCEDURE SetReqWkshLine@1(VAR CurrentReqLine@1000 : Record "Requisition Line");
    BEGIN
      CurrReqWkshTemp := CurrentReqLine."Worksheet Template Name";
      CurrReqWkshName := CurrentReqLine."Journal Batch Name";
      ReqLineFilters.COPY(CurrentReqLine);
    END;

    [External]
    PROCEDURE SetDemandOrder@3(VAR ReqLine@1005 : Record "Requisition Line";MfgUserTempl@1000 : Record "Manufacturing User Template");
    BEGIN
      SetReqWkshLine(ReqLine);

      InitializeRequest(
        MfgUserTempl."Create Production Order",
        MfgUserTempl."Create Purchase Order",
        MfgUserTempl."Create Transfer Order",
        MfgUserTempl."Create Assembly Order");

      ReqWkshTemp := MfgUserTempl."Purchase Req. Wksh. Template";
      ReqWksh := MfgUserTempl."Purchase Wksh. Name";
      ProdWkshTempl := MfgUserTempl."Prod. Req. Wksh. Template";
      ProdWkshName := MfgUserTempl."Prod. Wksh. Name";
      TransWkshTemp := MfgUserTempl."Transfer Req. Wksh. Template";
      TransWkshName := MfgUserTempl."Transfer Wksh. Name";

      with ReqLineFilters do
        case MfgUserTempl."Make Orders" of
          MfgUserTempl."Make Orders"::"The Active Line":
            begin
              ReqLineFilters := ReqLine;
              SETRECFILTER;
            end;
          MfgUserTempl."Make Orders"::"The Active Order":
            begin
              SETCURRENTKEY(
                "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              COPYFILTERS(ReqLine);
              SETRANGE("Demand Type",ReqLine."Demand Type");
              SETRANGE("Demand Subtype",ReqLine."Demand Subtype");
              SETRANGE("Demand Order No.",ReqLine."Demand Order No.");
            end;
          MfgUserTempl."Make Orders"::"All Lines":
            begin
              SETCURRENTKEY(
                "User ID","Worksheet Template Name","Journal Batch Name","Line No.");
              COPY(ReqLine);
            end;
        end;
    END;

    [External]
    PROCEDURE InitializeRequest@2(NewProdOrderChoice@1002 : Option;NewPurchOrderChoice@1001 : Option;NewTransOrderChoice@1000 : Option;NewAsmOrderChoice@1003 : Option);
    BEGIN
      ProdOrderChoice := NewProdOrderChoice;
      PurchOrderChoice := NewPurchOrderChoice;
      TransOrderChoice := NewTransOrderChoice;
      AsmOrderChoice := NewAsmOrderChoice;
    END;

    [External]
    PROCEDURE InitializeRequest2@11(NewProdOrderChoice@1006 : Option;NewPurchOrderChoice@1005 : Option;NewTransOrderChoice@1004 : Option;NewAsmOrderChoice@1007 : Option;NewReqWkshTemp@1002 : Code[10];NewReqWksh@1001 : Code[10];NewTransWkshTemp@1000 : Code[10];NewTransWkshName@1003 : Code[10]);
    BEGIN
      InitializeRequest(NewProdOrderChoice,NewPurchOrderChoice,NewTransOrderChoice,NewAsmOrderChoice);
      ReqWkshTemp := NewReqWkshTemp;
      ReqWksh := NewReqWksh;
      TransWkshTemp := NewTransWkshTemp;
      TransWkshName := NewTransWkshName;
    END;

    [External]
    LOCAL PROCEDURE SetReqLineFilters@5();
    BEGIN
      with "Requisition Line" do begin
        if ReqLineFilters.GETFILTERS <> '' then
          COPYFILTERS(ReqLineFilters);
        SETRANGE("Worksheet Template Name",CurrReqWkshTemp);
        SETRANGE("Journal Batch Name",CurrReqWkshName);
        SETRANGE(Type,Type::Item);
        SETFILTER("Action Message",'<>%1',"Action Message"::" ");
      end;
    END;

    LOCAL PROCEDURE CheckCopyToWksh@4(ToReqWkshTempl@1000 : Code[10];ToReqWkshName@1001 : Code[10]);
    VAR
      ReqLine@1002 : Record "Requisition Line";
    BEGIN
      if (ToReqWkshTempl <> '') and
         (CurrReqWkshTemp = ToReqWkshTempl) and
         (CurrReqWkshName = ToReqWkshName)
      then
        ERROR(Text007 + Text008);

      if (ToReqWkshTempl = '') or (ToReqWkshName = '') then
        ERROR(Text009);

      with ReqLine do begin
        if "Requisition Line"."Planning Line Origin" = "Planning Line Origin"::"Order Planning" then
          exit;

        SETRANGE("Worksheet Template Name",ToReqWkshTempl);
        SETRANGE("Journal Batch Name",ToReqWkshName);
        DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE CheckPreconditions@6();
    BEGIN
      with "Requisition Line" do
        repeat
          CheckLine;
        until NEXT = 0;
    END;

    LOCAL PROCEDURE CheckLine@7();
    VAR
      SalesLine@1000 : Record "Sales Line";
      ProdOrderComp@1001 : Record "Prod. Order Component";
      ServLine@1006 : Record "Service Line";
      JobPlanningLine@1007 : Record "Job Planning Line";
      AsmLine@1002 : Record "Assembly Line";
      ReqLine2@1003 : Record "Requisition Line";
    BEGIN
      with "Requisition Line" do begin
        if "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" then
          exit;

        CheckAssociations("Requisition Line");

        if "Planning Level" > 0 then
          exit;

        if "Replenishment System" in ["Replenishment System"::Purchase,
                                      "Replenishment System"::Transfer]
        then
          TESTFIELD("Supply From");

        case "Demand Type" of
          DATABASE::"Sales Line":
            begin
              SalesLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
              if not (("Demand Date" = WORKDATE) and (SalesLine."Shipment Date" in [0D,WORKDATE])) then
                TESTFIELD("Demand Date",SalesLine."Shipment Date");
              TESTFIELD("No.",SalesLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",SalesLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",SalesLine."Variant Code");
              TESTFIELD("Location Code",SalesLine."Location Code");
              SalesLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -SalesLine.SignedXX(SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)"))
            end;
          DATABASE::"Prod. Order Component":
            begin
              ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              TESTFIELD("No.",ProdOrderComp."Item No.");
              if not (("Demand Date" = WORKDATE) and (ProdOrderComp."Due Date" in [0D,WORKDATE])) then
                TESTFIELD("Demand Date",ProdOrderComp."Due Date");
              TESTFIELD("Qty. per UOM (Demand)",ProdOrderComp."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ProdOrderComp."Variant Code");
              TESTFIELD("Location Code",ProdOrderComp."Location Code");
              ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                ProdOrderComp."Remaining Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
              if (ProdOrderChoice = ProdOrderChoice::Planned) and Reserve then
                ReserveforPlannedProd := true;
            end;
          DATABASE::"Service Line":
            begin
              ServLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              ServLine.TESTFIELD(Type,ServLine.Type::Item);
              if not (("Demand Date" = WORKDATE) and (ServLine."Needed by Date" in [0D,WORKDATE])) then
                TESTFIELD("Demand Date",ServLine."Needed by Date");
              TESTFIELD("No.",ServLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",ServLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ServLine."Variant Code");
              TESTFIELD("Location Code",ServLine."Location Code");
              ServLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -ServLine.SignedXX(ServLine."Outstanding Qty. (Base)" - ServLine."Reserved Qty. (Base)"))
            end;
          DATABASE::"Job Planning Line":
            begin
              JobPlanningLine.SETRANGE("Job Contract Entry No.","Demand Line No.");
              JobPlanningLine.FINDFIRST;
              JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
              JobPlanningLine.TESTFIELD("Job No.");
              JobPlanningLine.TESTFIELD(Status,JobPlanningLine.Status::Order);
              if not (("Demand Date" = WORKDATE) and (JobPlanningLine."Planning Date" in [0D,WORKDATE])) then
                TESTFIELD("Demand Date",JobPlanningLine."Planning Date");
              TESTFIELD("No.",JobPlanningLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",JobPlanningLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",JobPlanningLine."Variant Code");
              TESTFIELD("Location Code",JobPlanningLine."Location Code");
              JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                JobPlanningLine."Remaining Qty. (Base)" - JobPlanningLine."Reserved Qty. (Base)")
            end;
          DATABASE::"Assembly Line":
            begin
              AsmLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
              if not (("Demand Date" = WORKDATE) and (AsmLine."Due Date" in [0D,WORKDATE])) then
                TESTFIELD("Demand Date",AsmLine."Due Date");
              TESTFIELD("No.",AsmLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",AsmLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",AsmLine."Variant Code");
              TESTFIELD("Location Code",AsmLine."Location Code");
              AsmLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -AsmLine.SignedXX(AsmLine."Remaining Quantity (Base)" - AsmLine."Reserved Qty. (Base)"))
            end;
        end;

        ReqLine2.SETCURRENTKEY(
          "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ReqLine2.SETFILTER("User ID",'<>%1',USERID);
        ReqLine2.SETRANGE("Demand Type","Demand Type");
        ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
        ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
        ReqLine2.SETRANGE("Demand Line No.","Demand Line No.");
        ReqLine2.SETRANGE("Demand Ref. No.","Demand Ref. No.");
        ReqLine2.DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE CheckAssociations@8(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      ReqLine2@1002 : Record "Requisition Line";
      ReqLine3@1001 : Record "Requisition Line";
    BEGIN
      with ReqLine do begin
        ReqLine3.COPY(ReqLine);
        ReqLine2 := ReqLine;

        if ReqLine2."Planning Level" > 0 then
          while (ReqLine2.NEXT(-1) <> 0) and (ReqLine2."Planning Level" > 0) do;

        repeat
          ReqLine3 := ReqLine2;
          if not ReqLine3.FIND then
            ERROR(Text011,"Line No.",ReqLine2."Line No.");
        until (ReqLine2.NEXT = 0) or (ReqLine2."Planning Level" = 0)
      end;
    END;

    LOCAL PROCEDURE WindowUpdate@9();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,"Requisition Line"."No.");
      Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
    END;

    LOCAL PROCEDURE PurchaseSuggestionExists@10(VAR RequisitionLine@1001 : Record "Requisition Line") : Boolean;
    VAR
      StopLoop@1000 : Boolean;
      PurchaseExists@1002 : Boolean;
    BEGIN
      with RequisitionLine do begin
        if FINDSET then
          repeat
            PurchaseExists := "Ref. Order Type" = "Ref. Order Type"::Purchase;
            if not PurchaseExists then
              StopLoop := NEXT = 0
            else
              StopLoop := true;
          until StopLoop;
        if PurchaseExists then
          SETRANGE("Ref. Order Type","Ref. Order Type"::Purchase);
      end;
      exit(PurchaseExists);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

