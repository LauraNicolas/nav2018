OBJECT XMLport 1501 Import / Export Workflow
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import / Export Workflow;
  }
  ELEMENTS
  {
    { ['{D78F0F95-40A6-4A88-8DC5-48E949EDD8FF}'];;Root                ;Element ;Text     }

    { ['{BB7CD3F4-E488-472B-A356-0BC0B5B27EDB}'];1;Workflow           ;Element ;Table   ;
                                                  SourceTable=Workflow;
                                                  MaxOccurs=Unbounded;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 if ToWorkflowCode <> '' then
                                                                                   Workflow.Code := ToWorkflowCode;
                                                                               END;
                                                                                }

    { ['{B62182AA-EA62-43E6-A9E1-F6B5274C7177}'];2;Code               ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow::Code }

    { ['{8FAC2CEF-11C4-45B9-8436-D28802B93646}'];2;Description        ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow::Description;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if Workflow.Description = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{F6D871CC-61E0-4A6E-A0D9-07D534B19C39}'];2;Template           ;Attribute;Field  ;
                                                  DataType=Boolean;
                                                  SourceField=Workflow::Template;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if not Workflow.Template then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{64EFBF0A-055F-49E2-BDA8-9B36E2D155D5}'];2;Category           ;Attribute;Field  ;
                                                  DataType=Code;
                                                  FieldValidate=false;
                                                  SourceField=Workflow::Category }

    { ['{AE3DEA6A-9758-4111-8F36-F8AEEB904853}'];2;WorkflowStep       ;Element ;Table   ;
                                                  SourceTable="Workflow Step";
                                                  LinkFields="Workflow Code"=FIELD(Code);
                                                  LinkTable=Workflow;
                                                  MinOccurs=Zero }

    { ['{760A8E16-1523-4E47-AD86-CE74F35C96A1}'];3;StepID             ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step::ID }

    { ['{CDFA1C93-6703-462A-B396-80D776BAF5DB}'];3;StepDescription    ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step::Description;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step".Description = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{C69238DE-E7A5-408C-A2E4-C471025DE9EA}'];3;EntryPoint         ;Attribute;Text   ;
                                                  DataType=Boolean;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step"."Entry Point",EntryPoint);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 if "Workflow Step"."Entry Point" = false then
                                                                                   currXMLport.SKIP;

                                                                                 EntryPoint := FORMAT("Workflow Step"."Entry Point",0,2);
                                                                               END;
                                                                                }

    { ['{5F16616D-A0C5-440F-835C-63DB85455DA6}'];3;PreviousStepID     ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  FieldValidate=false;
                                                  SourceField=Workflow Step::Previous Workflow Step ID }

    { ['{09FF3671-D199-4AB9-9A01-38695316CF23}'];3;NextStepID         ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  FieldValidate=false;
                                                  SourceField=Workflow Step::Next Workflow Step ID;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step"."Next Workflow Step ID" = 0 then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{8BAEB72F-AED2-45F0-B6CF-907738EFF2E4}'];3;Type               ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step".Type,Type);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 Type := FORMAT("Workflow Step".Type,0,2);
                                                                               END;
                                                                                }

    { ['{62AF7DF4-3FD0-4027-9C3C-44A7A50E2185}'];3;FunctionName       ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step::Function Name }

    { ['{9DBDEAEE-9AD9-4170-8A84-470E1778F0D0}'];3;SequenceNo         ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step::Sequence No.;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step"."Sequence No." = 0 then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{3F7BD4EE-62A9-4B02-B358-C80BED2DA192}'];3;WorkflowStepArgument;Element;Table   ;
                                                  SourceTable="Workflow Step Argument";
                                                  LinkFields=ID=FIELD(Argument),Type=FIELD(Type);
                                                  LinkTable=Workflow Step;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once;
                                                  Import::OnAfterInsertRecord=BEGIN
                                                                                "Workflow Step".Argument := "Workflow Step Argument".ID;
                                                                              END;
                                                                               }

    { ['{D761534C-A116-4777-8D83-0F1AEB6BE0B5}'];4;GeneralJournalTemplateName;Attribute;Field;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::General Journal Template Name;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               GenJournalTemplate@1000 : Record "Gen. Journal Template";
                                                                             BEGIN
                                                                               if not GenJournalTemplate.GET("Workflow Step Argument"."General Journal Batch Name") then
                                                                                 "Workflow Step Argument"."General Journal Batch Name" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."General Journal Template Name" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{BAD54047-201D-425E-AD9C-D808BCE39A46}'];4;GeneralJournalBatchName;Attribute;Field;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::General Journal Batch Name;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               GenJournalBatch@1000 : Record "Gen. Journal Batch";
                                                                             BEGIN
                                                                               if not GenJournalBatch.GET("Workflow Step Argument"."General Journal Template Name",
                                                                                    "Workflow Step Argument"."General Journal Batch Name")
                                                                               then
                                                                                 "Workflow Step Argument"."General Journal Batch Name" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."General Journal Batch Name" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{4DE84001-F7FB-4696-A9CC-D365E39A5A70}'];4;ResponseFunctionName;Attribute;Field ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Response Function Name;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Response Function Name" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{DAB90975-7B3E-4C09-9099-4356771E582A}'];4;LinkTargetPage     ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Link Target Page;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               AllObjWithCaption@1000 : Record AllObjWithCaption;
                                                                             BEGIN
                                                                               if not AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Page,"Workflow Step Argument"."Link Target Page") then
                                                                                 "Workflow Step Argument"."Link Target Page" := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Link Target Page" = 0 then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{8ED013D2-D611-47B9-999D-6851F1EADBAB}'];4;CustomLink         ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step Argument::Custom Link;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Custom Link" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{2D31B849-094E-49CE-990C-33425F777DB8}'];4;EventConditions    ;Attribute;Text   ;
                                                  TextType=BigText;
                                                  DataType=BLOB;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=VAR
                                                                                  OutStream@1002 : OutStream;
                                                                                  Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
                                                                                  Encoding@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
                                                                                BEGIN
                                                                                  if EventConditions.LENGTH = 0 then
                                                                                    currXMLport.SKIP;

                                                                                  "Workflow Step Argument"."Event Conditions".CREATEOUTSTREAM(OutStream);
                                                                                  OutStream.WRITETEXT(Encoding.Unicode.GetString(Convert.FromBase64String(EventConditions)));
                                                                                END;

                                                  Export::OnBeforePassVariable=VAR
                                                                                 InStream@1000 : InStream;
                                                                                 Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
                                                                                 Encoding@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
                                                                                 Conditions@1003 : Text;
                                                                               BEGIN
                                                                                 if not "Workflow Step Argument"."Event Conditions".HASVALUE then
                                                                                   currXMLport.SKIP;

                                                                                 "Workflow Step Argument".CALCFIELDS("Event Conditions");
                                                                                 "Workflow Step Argument"."Event Conditions".CREATEINSTREAM(InStream);
                                                                                 InStream.READTEXT(Conditions);
                                                                                 CLEAR(EventConditions);
                                                                                 EventConditions.ADDTEXT(Convert.ToBase64String(Encoding.Unicode.GetBytes(Conditions)));
                                                                               END;
                                                                                }

    { ['{A543563F-9339-4755-B527-FCEEB13C1B7E}'];4;ApproverType       ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Approver Type",ApproverType);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 if "Workflow Step Argument"."Approver Type" = 0 then
                                                                                   currXMLport.SKIP;

                                                                                 ApproverType := FORMAT("Workflow Step Argument"."Approver Type",0,2);
                                                                               END;
                                                                                }

    { ['{7540163B-E79E-410D-8069-83937D529F91}'];4;ApproverLimitType  ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Approver Limit Type",ApproverLimitType);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 if "Workflow Step Argument"."Approver Limit Type" = 0 then
                                                                                   currXMLport.SKIP;

                                                                                 ApproverLimitType := FORMAT("Workflow Step Argument"."Approver Limit Type",0,2);
                                                                               END;
                                                                                }

    { ['{0A4EE309-EF87-4EFE-B574-7C66F2ED2216}'];4;WorkflowUserGroupCode;Attribute;Field;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Workflow User Group Code;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               WorkflowUserGroup@1000 : Record "Workflow User Group";
                                                                             BEGIN
                                                                               if not WorkflowUserGroup.GET("Workflow Step Argument"."Workflow User Group Code") then
                                                                                 "Workflow Step Argument"."Workflow User Group Code" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Workflow User Group Code" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{F43EF3AA-A6C7-49F9-B86E-3152B049C939}'];4;DueDateFormula     ;Attribute;Text   ;
                                                  DataType=DateFormula;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  if not EVALUATE("Workflow Step Argument"."Due Date Formula",DueDateFormula) then
                                                                                    currXMLport.SKIP;
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 if FORMAT("Workflow Step Argument"."Due Date Formula") = '' then
                                                                                   currXMLport.SKIP;

                                                                                 DueDateFormula := FORMAT("Workflow Step Argument"."Due Date Formula");
                                                                               END;
                                                                                }

    { ['{AC66FDF1-35D9-4737-AEF2-E32557E15CB1}'];4;Message            ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step Argument::Message;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument".Message = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{2AE177C0-B78D-4234-86D5-61C8D99BC5A1}'];4;DelegateAfter      ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Delegate After",DelegateAfter);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 if "Workflow Step Argument"."Delegate After" = 0 then
                                                                                   currXMLport.SKIP;

                                                                                 DelegateAfter := FORMAT("Workflow Step Argument"."Delegate After",0,2);
                                                                               END;
                                                                                }

    { ['{C90D1BD9-0D9B-48D8-8461-35C60994EFEA}'];4;ShowConfirmationMessage;Attribute;Field;
                                                  DataType=Boolean;
                                                  SourceField=Workflow Step Argument::Show Confirmation Message;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if not "Workflow Step Argument"."Show Confirmation Message" then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{0289AF15-8726-4693-8274-BCB03D19615E}'];4;TableNumber        ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Table No.;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               AllObjWithCaption@1000 : Record AllObjWithCaption;
                                                                             BEGIN
                                                                               if not AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,"Workflow Step Argument"."Table No.") then
                                                                                 "Workflow Step Argument"."Table No." := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Table No." = 0 then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{CAD15D49-74A3-421A-AD12-2C194A62A53A}'];4;FieldNumber        ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Field No.;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               Field@1000 : Record Field;
                                                                             BEGIN
                                                                               if not Field.GET("Workflow Step Argument"."Table No.","Workflow Step Argument"."Field No.") then
                                                                                 "Workflow Step Argument"."Field No." := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Field No." = 0 then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{9786F409-E8E5-4168-AE31-B6127D39783B}'];4;ResponseOptionGroup;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Response Option Group;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              if "Workflow Step Argument"."Response Option Group" = '' then
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { ['{111D7E08-747D-45BF-A66B-609CAE3BF5D6}'];3;WorkflowRule       ;Element ;Table   ;
                                                  SourceTable="Workflow Rule";
                                                  LinkFields="Workflow Code"=FIELD("Workflow Code"),"Workflow Step ID"=FIELD(ID);
                                                  LinkTable=Workflow Step;
                                                  MinOccurs=Zero }

    { ['{D4B0D0EA-F0B7-4DB2-B978-ED2D9666CD58}'];4;RuleID             ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::ID }

    { ['{7307F3F9-E23C-4A55-9221-5677E4D6FC00}'];4;RuleTableNumber    ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::Table ID }

    { ['{26C2E1A7-8CA8-4F6A-BAB5-A8095751EC3A}'];4;RuleFieldNumber    ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::Field No. }

    { ['{4B092B35-D47C-4B7A-AEF5-95D2E325D0EF}'];4;Operator           ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Rule".Operator,Operator);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 Operator := FORMAT("Workflow Rule".Operator,0,2);
                                                                               END;
                                                                                }

    { ['{6775CDD4-8E5D-4AB3-9878-D4B9533B4C7F}'];2;WorkflowCategory   ;Element ;Table   ;
                                                  SourceTable="Workflow Category";
                                                  LinkFields=Code=FIELD(Category);
                                                  LinkTable=Workflow;
                                                  LinkTableForceInsert=false;
                                                  AutoSave=false;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { ['{A12A21D9-F712-4BA7-94F9-797AAF0C14DB}'];3;CategoryCode       ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Category::Code }

    { ['{77A67A7C-ACFA-4C5C-85D3-F400E5C4EA83}'];3;CategoryDescription;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Category::Description;
                                                  Import::OnAfterAssignField=BEGIN
                                                                               if "Workflow Category".INSERT then;
                                                                             END;
                                                                              }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      ToWorkflowCode@1000 : Code[20];

    [External]
    PROCEDURE InitWorkflow@5(NewWorkflowCode@1000 : Code[20]);
    BEGIN
      ToWorkflowCode := NewWorkflowCode;
    END;

    BEGIN
    END.
  }
}

