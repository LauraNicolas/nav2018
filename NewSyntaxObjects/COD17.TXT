OBJECT Codeunit 17 Gen. Jnl.-Post Reverse
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    Permissions=TableData "G/L Entry"=m,
                TableData "Cust. Ledger Entry"=imd,
                TableData "Vendor Ledger Entry"=imd,
                TableData "G/L Register"=rm,
                TableData "G/L Entry - VAT Entry Link"=rimd,
                TableData "VAT Entry"=imd,
                TableData "Bank Account Ledger Entry"=imd,
                TableData "Check Ledger Entry"=imd,
                TableData "Detailed Cust. Ledg. Entry"=imd,
                TableData "Detailed Vendor Ledg. Entry"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GenJnlPostLine@1002 : Codeunit "Gen. Jnl.-Post Line";
      ReversalMismatchErr@1026 : TextConst 'ENU=Reversal found a %1 without a matching general ledger entry.';
      CannotReverseErr@1023 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.';
      DimCombBlockedErr@1027 : TextConst 'ENU=The combination of dimensions used in general ledger entry %1 is blocked. %2.';

    [Internal]
    PROCEDURE Reverse@72(VAR ReversalEntry@1002 : Record "Reversal Entry";VAR ReversalEntry2@1000 : Record "Reversal Entry");
    VAR
      SourceCodeSetup@1016 : Record "Source Code Setup";
      GLEntry2@1003 : Record "G/L Entry";
      GLReg@1019 : Record "G/L Register";
      GLReg2@1021 : Record "G/L Register";
      GenJnlLine@1017 : Record "Gen. Journal Line";
      CustLedgEntry@1004 : Record "Cust. Ledger Entry";
      TempCustLedgEntry@1005 : TEMPORARY Record "Cust. Ledger Entry";
      VendLedgEntry@1008 : Record "Vendor Ledger Entry";
      TempVendLedgEntry@1012 : TEMPORARY Record "Vendor Ledger Entry";
      BankAccLedgEntry@1009 : Record "Bank Account Ledger Entry";
      TempBankAccLedgEntry@1015 : TEMPORARY Record "Bank Account Ledger Entry";
      VATEntry@1010 : Record "VAT Entry";
      FALedgEntry@1007 : Record "FA Ledger Entry";
      MaintenanceLedgEntry@1011 : Record "Maintenance Ledger Entry";
      TempRevertTransactionNo@1024 : TEMPORARY Record Integer;
      FAInsertLedgEntry@1006 : Codeunit "FA Insert Ledger Entry";
      UpdateAnalysisView@1020 : Codeunit "Update Analysis View";
      NextDtldCustLedgEntryEntryNo@1014 : Integer;
      NextDtldVendLedgEntryEntryNo@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      if ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register then
        GLReg2."No." := ReversalEntry2."G/L Register No.";

      ReversalEntry.CopyReverseFilters(
        GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry);

      if ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction then begin
        if ReversalEntry2.FINDSET(false,false) then
          repeat
            TempRevertTransactionNo.Number := ReversalEntry2."Transaction No.";
            if TempRevertTransactionNo.INSERT then;
          until ReversalEntry2.NEXT = 0;
      end;

      GenJnlLine.INIT;
      GenJnlLine."Source Code" := SourceCodeSetup.Reversal;

      if GenJnlPostLine.GetNextEntryNo = 0 then
        GenJnlPostLine.StartPosting(GenJnlLine)
      else
        GenJnlPostLine.ContinuePosting(GenJnlLine);

      GenJnlPostLine.SetGLRegReverse(GLReg);

      CopyCustLedgEntry(CustLedgEntry,TempCustLedgEntry);
      CopyVendLedgEntry(VendLedgEntry,TempVendLedgEntry);
      CopyBankAccLedgEntry(BankAccLedgEntry,TempBankAccLedgEntry);

      if TempRevertTransactionNo.FINDSET then;
      repeat
        if ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction then
          GLEntry2.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        ReverseGLEntry(
          GLEntry2,GenJnlLine,TempCustLedgEntry,
          TempVendLedgEntry,TempBankAccLedgEntry,NextDtldCustLedgEntryEntryNo,NextDtldVendLedgEntryEntryNo,
          FAInsertLedgEntry);
      until TempRevertTransactionNo.NEXT = 0;

      if FALedgEntry.FINDSET then
        repeat
          FAInsertLedgEntry.CheckFAReverseEntry(FALedgEntry)
        until FALedgEntry.NEXT = 0;

      if MaintenanceLedgEntry.FINDFIRST then
        repeat
          FAInsertLedgEntry.CheckMaintReverseEntry(MaintenanceLedgEntry)
        until FALedgEntry.NEXT = 0;

      FAInsertLedgEntry.FinishFAReverseEntry(GLReg);

      if not TempCustLedgEntry.ISEMPTY then
        ERROR(ReversalMismatchErr,CustLedgEntry.TABLECAPTION);
      if not TempVendLedgEntry.ISEMPTY then
        ERROR(ReversalMismatchErr,VendLedgEntry.TABLECAPTION);
      if not TempBankAccLedgEntry.ISEMPTY then
        ERROR(ReversalMismatchErr,BankAccLedgEntry.TABLECAPTION);

      GenJnlPostLine.FinishPosting;

      if GLReg2."No." <> 0 then
        if GLReg2.FIND then begin
          GLReg2.Reversed := true;
          GLReg2.MODIFY;
        end;

      UpdateAnalysisView.UpdateAll(0,true);
    END;

    LOCAL PROCEDURE ReverseGLEntry@6(VAR GLEntry2@1000 : Record "G/L Entry";VAR GenJnlLine@1003 : Record "Gen. Journal Line";VAR TempCustLedgEntry@1006 : TEMPORARY Record "Cust. Ledger Entry";VAR TempVendLedgEntry@1007 : TEMPORARY Record "Vendor Ledger Entry";VAR TempBankAccLedgEntry@1008 : TEMPORARY Record "Bank Account Ledger Entry";VAR NextDtldCustLedgEntryEntryNo@1009 : Integer;VAR NextDtldVendLedgEntryEntryNo@1010 : Integer;FAInsertLedgerEntry@1002 : Codeunit "FA Insert Ledger Entry");
    VAR
      GLEntry@1001 : Record "G/L Entry";
      ReversedGLEntry@1004 : Record "G/L Entry";
    BEGIN
      with GLEntry2 do
        if FIND('+') then
          repeat
            if "Reversed by Entry No." <> 0 then
              ERROR(CannotReverseErr);
            CheckDimComb("Entry No.","Dimension Set ID",DATABASE::"G/L Account","G/L Account No.",0,'');
            GLEntry := GLEntry2;
            if "FA Entry No." <> 0 then
              FAInsertLedgerEntry.InsertReverseEntry(
                GenJnlPostLine.GetNextEntryNo,"FA Entry Type","FA Entry No.",GLEntry."FA Entry No.",
                GenJnlPostLine.GetNextTransactionNo);
            GLEntry.Amount := -Amount;
            GLEntry.Quantity := -Quantity;
            GLEntry."VAT Amount" := -"VAT Amount";
            GLEntry."Debit Amount" := -"Debit Amount";
            GLEntry."Credit Amount" := -"Credit Amount";
            GLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
            GLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
            GLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
            GLEntry."Entry No." := GenJnlPostLine.GetNextEntryNo;
            GLEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            GLEntry."User ID" := USERID;
            GenJnlLine.Correction :=
              (GLEntry."Debit Amount" < 0) or (GLEntry."Credit Amount" < 0) or
              (GLEntry."Add.-Currency Debit Amount" < 0) or (GLEntry."Add.-Currency Credit Amount" < 0);
            GLEntry."Journal Batch Name" := '';
            GLEntry."Source Code" := GenJnlLine."Source Code";
            SetReversalDescription(GLEntry2,GLEntry.Description);
            GLEntry."Reversed Entry No." := "Entry No.";
            GLEntry.Reversed := true;
            // Reversal of Reversal
            if "Reversed Entry No." <> 0 then begin
              ReversedGLEntry.GET("Reversed Entry No.");
              ReversedGLEntry."Reversed by Entry No." := 0;
              ReversedGLEntry.Reversed := false;
              ReversedGLEntry.MODIFY;
              "Reversed Entry No." := GLEntry."Entry No.";
              GLEntry."Reversed by Entry No." := "Entry No.";
            end;
            "Reversed by Entry No." := GLEntry."Entry No.";
            Reversed := true;
            MODIFY;
            GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,false);

            case true of
              TempCustLedgEntry.GET("Entry No."):
                begin
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::Customer,TempCustLedgEntry."Customer No.",
                    DATABASE::"Salesperson/Purchaser",TempCustLedgEntry."Salesperson Code");
                  ReverseCustLedgEntry(
                    TempCustLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                    NextDtldCustLedgEntryEntryNo);
                  TempCustLedgEntry.DELETE;
                end;
              TempVendLedgEntry.GET("Entry No."):
                begin
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::Vendor,TempVendLedgEntry."Vendor No.",
                    DATABASE::"Salesperson/Purchaser",TempVendLedgEntry."Purchaser Code");
                  ReverseVendLedgEntry(
                    TempVendLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                    NextDtldVendLedgEntryEntryNo);
                  TempVendLedgEntry.DELETE;
                end;
              TempBankAccLedgEntry.GET("Entry No."):
                begin
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::"Bank Account",TempBankAccLedgEntry."Bank Account No.",0,'');
                  ReverseBankAccLedgEntry(TempBankAccLedgEntry,GLEntry."Entry No.",GenJnlLine."Source Code");
                  TempBankAccLedgEntry.DELETE;
                end;
            end;

            ReverseVAT(GLEntry,GenJnlLine."Source Code");
          until NEXT(-1) = 0;
    END;

    LOCAL PROCEDURE ReverseCustLedgEntry@71(CustLedgEntry@1000 : Record "Cust. Ledger Entry";NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldCustLedgEntryEntryNo@1003 : Integer);
    VAR
      NewCustLedgEntry@1002 : Record "Cust. Ledger Entry";
      ReversedCustLedgEntry@1007 : Record "Cust. Ledger Entry";
      DtldCustLedgEntry@1005 : Record "Detailed Cust. Ledg. Entry";
      NewDtldCustLedgEntry@1004 : Record "Detailed Cust. Ledg. Entry";
    BEGIN
      with NewCustLedgEntry do begin
        NewCustLedgEntry := CustLedgEntry;
        "Sales (LCY)" := -"Sales (LCY)";
        "Profit (LCY)" := -"Profit (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Given (LCY)" := -"Pmt. Disc. Given (LCY)";
        Positive := not Positive;
        "Adjusted Currency Factor" := "Adjusted Currency Factor";
        "Original Currency Factor" := "Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(CustLedgEntry,Description);
        "Reversed Entry No." := CustLedgEntry."Entry No.";
        Reversed := true;
        "Applies-to ID" := '';
        // Reversal of Reversal
        if CustLedgEntry."Reversed Entry No." <> 0 then begin
          ReversedCustLedgEntry.GET(CustLedgEntry."Reversed Entry No.");
          ReversedCustLedgEntry."Reversed by Entry No." := 0;
          ReversedCustLedgEntry.Reversed := false;
          ReversedCustLedgEntry.MODIFY;
          CustLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := CustLedgEntry."Entry No.";
        end;
        CustLedgEntry."Applies-to ID" := '';
        CustLedgEntry."Reversed by Entry No." := "Entry No.";
        CustLedgEntry.Reversed := true;
        CustLedgEntry.MODIFY;
        INSERT;

        if NextDtldCustLedgEntryEntryNo = 0 then begin
          DtldCustLedgEntry.FINDLAST;
          NextDtldCustLedgEntryEntryNo := DtldCustLedgEntry."Entry No." + 1;
        end;
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
        DtldCustLedgEntry.SETRANGE(Unapplied,false);
        DtldCustLedgEntry.FINDSET;
        repeat
          DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::"Initial Entry");
          NewDtldCustLedgEntry := DtldCustLedgEntry;
          NewDtldCustLedgEntry.Amount := -NewDtldCustLedgEntry.Amount;
          NewDtldCustLedgEntry."Amount (LCY)" := -NewDtldCustLedgEntry."Amount (LCY)";
          NewDtldCustLedgEntry.UpdateDebitCredit(Correction);
          NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
          NewDtldCustLedgEntry."User ID" := USERID;
          NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
          NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
          NewDtldCustLedgEntry.INSERT(true);
        until DtldCustLedgEntry.NEXT = 0;

        ApplyCustLedgEntryByReversal(
          CustLedgEntry,NewCustLedgEntry,NewDtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
        ApplyCustLedgEntryByReversal(
          NewCustLedgEntry,CustLedgEntry,DtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
      end;
    END;

    LOCAL PROCEDURE ReverseVendLedgEntry@70(VendLedgEntry@1000 : Record "Vendor Ledger Entry";NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldVendLedgEntryEntryNo@1003 : Integer);
    VAR
      NewVendLedgEntry@1002 : Record "Vendor Ledger Entry";
      ReversedVendLedgEntry@1008 : Record "Vendor Ledger Entry";
      DtldVendLedgEntry@1005 : Record "Detailed Vendor Ledg. Entry";
      NewDtldVendLedgEntry@1004 : Record "Detailed Vendor Ledg. Entry";
    BEGIN
      with NewVendLedgEntry do begin
        NewVendLedgEntry := VendLedgEntry;
        "Purchase (LCY)" := -"Purchase (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Rcd.(LCY)" := -"Pmt. Disc. Rcd.(LCY)";
        Positive := not Positive;
        "Adjusted Currency Factor" := "Adjusted Currency Factor";
        "Original Currency Factor" := "Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(VendLedgEntry,Description);
        "Reversed Entry No." := VendLedgEntry."Entry No.";
        Reversed := true;
        "Applies-to ID" := '';
        // Reversal of Reversal
        if VendLedgEntry."Reversed Entry No." <> 0 then begin
          ReversedVendLedgEntry.GET(VendLedgEntry."Reversed Entry No.");
          ReversedVendLedgEntry."Reversed by Entry No." := 0;
          ReversedVendLedgEntry.Reversed := false;
          ReversedVendLedgEntry.MODIFY;
          VendLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := VendLedgEntry."Entry No.";
        end;
        VendLedgEntry."Applies-to ID" := '';
        VendLedgEntry."Reversed by Entry No." := "Entry No.";
        VendLedgEntry.Reversed := true;
        VendLedgEntry.MODIFY;
        INSERT;

        if NextDtldVendLedgEntryEntryNo = 0 then begin
          DtldVendLedgEntry.FINDLAST;
          NextDtldVendLedgEntryEntryNo := DtldVendLedgEntry."Entry No." + 1;
        end;
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
        DtldVendLedgEntry.SETRANGE(Unapplied,false);
        DtldVendLedgEntry.FINDSET;
        repeat
          DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::"Initial Entry");
          NewDtldVendLedgEntry := DtldVendLedgEntry;
          NewDtldVendLedgEntry.Amount := -NewDtldVendLedgEntry.Amount;
          NewDtldVendLedgEntry."Amount (LCY)" := -NewDtldVendLedgEntry."Amount (LCY)";
          NewDtldVendLedgEntry.UpdateDebitCredit(Correction);
          NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
          NewDtldVendLedgEntry."User ID" := USERID;
          NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
          NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
          NewDtldVendLedgEntry.INSERT(true);
        until DtldVendLedgEntry.NEXT = 0;

        ApplyVendLedgEntryByReversal(
          VendLedgEntry,NewVendLedgEntry,NewDtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
        ApplyVendLedgEntryByReversal(
          NewVendLedgEntry,VendLedgEntry,DtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
      end;
    END;

    LOCAL PROCEDURE ReverseBankAccLedgEntry@68(BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";NewEntryNo@1001 : Integer;SourceCode@1005 : Code[10]);
    VAR
      NewBankAccLedgEntry@1002 : Record "Bank Account Ledger Entry";
      ReversedBankAccLedgEntry@1004 : Record "Bank Account Ledger Entry";
    BEGIN
      with NewBankAccLedgEntry do begin
        NewBankAccLedgEntry := BankAccLedgEntry;
        Amount := -Amount;
        "Remaining Amount" := -"Remaining Amount";
        "Amount (LCY)" := -"Amount (LCY)";
        "Debit Amount" := -"Debit Amount";
        "Credit Amount" := -"Credit Amount";
        "Debit Amount (LCY)" := -"Debit Amount (LCY)";
        "Credit Amount (LCY)" := -"Credit Amount (LCY)";
        Positive := not Positive;
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(BankAccLedgEntry,Description);
        "Reversed Entry No." := BankAccLedgEntry."Entry No.";
        Reversed := true;
        // Reversal of Reversal
        if BankAccLedgEntry."Reversed Entry No." <> 0 then begin
          ReversedBankAccLedgEntry.GET(BankAccLedgEntry."Reversed Entry No.");
          ReversedBankAccLedgEntry."Reversed by Entry No." := 0;
          ReversedBankAccLedgEntry.Reversed := false;
          ReversedBankAccLedgEntry.MODIFY;
          BankAccLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
        end;
        BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
        BankAccLedgEntry.Reversed := true;
        BankAccLedgEntry.MODIFY;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE ReverseVAT@67(GLEntry@1005 : Record "G/L Entry";SourceCode@1003 : Code[10]);
    VAR
      VATEntry@1000 : Record "VAT Entry";
      NewVATEntry@1001 : Record "VAT Entry";
      ReversedVATEntry@1002 : Record "VAT Entry";
      GLEntryVATEntryLink@1004 : Record "G/L Entry - VAT Entry Link";
    BEGIN
      GLEntryVATEntryLink.SETRANGE("G/L Entry No.",GLEntry."Reversed Entry No.");
      if GLEntryVATEntryLink.FINDSET then
        repeat
          VATEntry.GET(GLEntryVATEntryLink."VAT Entry No.");
          if VATEntry."Reversed by Entry No." <> 0 then
            ERROR(CannotReverseErr);
          with NewVATEntry do begin
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := -"Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Source Code" := SourceCode;
            "User ID" := USERID;
            "Entry No." := GenJnlPostLine.GetNextVATEntryNo;
            "Reversed Entry No." := VATEntry."Entry No.";
            Reversed := true;
            // Reversal of Reversal
            if VATEntry."Reversed Entry No." <> 0 then begin
              ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
              ReversedVATEntry."Reversed by Entry No." := 0;
              ReversedVATEntry.Reversed := false;
              ReversedVATEntry.MODIFY;
              VATEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := VATEntry."Entry No.";
            end;
            VATEntry."Reversed by Entry No." := "Entry No.";
            VATEntry.Reversed := true;
            VATEntry.MODIFY;
            INSERT;
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.","Entry No.");
            GenJnlPostLine.IncrNextVATEntryNo;
          end;
        until GLEntryVATEntryLink.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntryByReversal@75(CustLedgEntry@1000 : Record "Cust. Ledger Entry";CustLedgEntry2@1001 : Record "Cust. Ledger Entry";DtldCustLedgEntry2@1002 : Record "Detailed Cust. Ledg. Entry";AppliedEntryNo@1005 : Integer;VAR NextDtldCustLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldCustLedgEntry@1003 : Record "Detailed Cust. Ledg. Entry";
    BEGIN
      CustLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgEntry."Closed by Entry No." := CustLedgEntry2."Entry No.";
      CustLedgEntry."Closed at Date" := CustLedgEntry2."Posting Date";
      CustLedgEntry."Closed by Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry."Closed by Amount (LCY)" := -CustLedgEntry2."Remaining Amt. (LCY)";
      CustLedgEntry."Closed by Currency Code" := CustLedgEntry2."Currency Code";
      CustLedgEntry."Closed by Currency Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry.Open := false;
      CustLedgEntry.MODIFY;

      NewDtldCustLedgEntry := DtldCustLedgEntry2;
      NewDtldCustLedgEntry."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
      NewDtldCustLedgEntry."Entry Type" := NewDtldCustLedgEntry."Entry Type"::Application;
      NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
      NewDtldCustLedgEntry."User ID" := USERID;
      NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
      NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
      NewDtldCustLedgEntry.INSERT(true);
    END;

    LOCAL PROCEDURE ApplyVendLedgEntryByReversal@76(VendLedgEntry@1000 : Record "Vendor Ledger Entry";VendLedgEntry2@1001 : Record "Vendor Ledger Entry";DtldVendLedgEntry2@1002 : Record "Detailed Vendor Ledg. Entry";AppliedEntryNo@1005 : Integer;VAR NextDtldVendLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldVendLedgEntry@1003 : Record "Detailed Vendor Ledg. Entry";
    BEGIN
      VendLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendLedgEntry."Closed by Entry No." := VendLedgEntry2."Entry No.";
      VendLedgEntry."Closed at Date" := VendLedgEntry2."Posting Date";
      VendLedgEntry."Closed by Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry."Closed by Amount (LCY)" := -VendLedgEntry2."Remaining Amt. (LCY)";
      VendLedgEntry."Closed by Currency Code" := VendLedgEntry2."Currency Code";
      VendLedgEntry."Closed by Currency Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry.Open := false;
      VendLedgEntry.MODIFY;

      NewDtldVendLedgEntry := DtldVendLedgEntry2;
      NewDtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      NewDtldVendLedgEntry."Entry Type" := NewDtldVendLedgEntry."Entry Type"::Application;
      NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
      NewDtldVendLedgEntry."User ID" := USERID;
      NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
      NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
      NewDtldVendLedgEntry.INSERT(true);
    END;

    LOCAL PROCEDURE CheckDimComb@91(EntryNo@1001 : Integer;DimSetID@1002 : Integer;TableID1@1006 : Integer;AccNo1@1007 : Code[20];TableID2@1009 : Integer;AccNo2@1008 : Code[20]);
    VAR
      DimMgt@1010 : Codeunit DimensionManagement;
      TableID@1003 : ARRAY [10] OF Integer;
      AccNo@1005 : ARRAY [10] OF Code[20];
    BEGIN
      if not DimMgt.CheckDimIDComb(DimSetID) then
        ERROR(DimCombBlockedErr,EntryNo,DimMgt.GetDimCombErr);
      CLEAR(TableID);
      CLEAR(AccNo);
      TableID[1] := TableID1;
      AccNo[1] := AccNo1;
      TableID[2] := TableID2;
      AccNo[2] := AccNo2;
      if not DimMgt.CheckDimValuePosting(TableID,AccNo,DimSetID) then
        ERROR(DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CopyCustLedgEntry@1(VAR CustLedgEntry@1000 : Record "Cust. Ledger Entry";VAR TempCustLedgEntry@1001 : TEMPORARY Record "Cust. Ledger Entry");
    BEGIN
      if CustLedgEntry.FINDSET then
        repeat
          if CustLedgEntry."Reversed by Entry No." <> 0 then
            ERROR(CannotReverseErr);
          TempCustLedgEntry := CustLedgEntry;
          TempCustLedgEntry.INSERT;
        until CustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyVendLedgEntry@3(VAR VendLedgEntry@1000 : Record "Vendor Ledger Entry";VAR TempVendLedgEntry@1001 : TEMPORARY Record "Vendor Ledger Entry");
    BEGIN
      if VendLedgEntry.FINDSET then
        repeat
          if VendLedgEntry."Reversed by Entry No." <> 0 then
            ERROR(CannotReverseErr);
          TempVendLedgEntry := VendLedgEntry;
          TempVendLedgEntry.INSERT;
        until VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyBankAccLedgEntry@4(VAR BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";VAR TempBankAccLedgEntry@1001 : TEMPORARY Record "Bank Account Ledger Entry");
    BEGIN
      if BankAccLedgEntry.FINDSET then
        repeat
          if BankAccLedgEntry."Reversed by Entry No." <> 0 then
            ERROR(CannotReverseErr);
          TempBankAccLedgEntry := BankAccLedgEntry;
          TempBankAccLedgEntry.INSERT;
        until BankAccLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetReversalDescription@2(RecVar@1000 : Variant;VAR Description@1002 : Text[50]);
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1004 : FieldRef;
      DescriptionFieldNo@1003 : Integer;
    BEGIN
      RecRef.GETTABLE(RecVar);
      DescriptionFieldNo := GetDescriptionFieldNo(RecRef);
      if DescriptionFieldNo = 0 then
        exit;

      FieldRef := RecRef.FIELD(DescriptionFieldNo);
      Description := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE GetDescriptionFieldNo@5(RecRef@1001 : RecordRef) : Integer;
    VAR
      GLEntry@1002 : Record "G/L Entry";
      CustLedgerEntry@1003 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1004 : Record "Vendor Ledger Entry";
      BankAccountLedgerEntry@1005 : Record "Bank Account Ledger Entry";
    BEGIN
      case RecRef.NUMBER of
        DATABASE::"G/L Entry":
          exit(GLEntry.FIELDNO(Description));
        DATABASE::"Cust. Ledger Entry":
          exit(CustLedgerEntry.FIELDNO(Description));
        DATABASE::"Vendor Ledger Entry":
          exit(VendorLedgerEntry.FIELDNO(Description));
        DATABASE::"Bank Account Ledger Entry":
          exit(BankAccountLedgerEntry.FIELDNO(Description));
      end;

      exit(0);
    END;

    BEGIN
    END.
  }
}

