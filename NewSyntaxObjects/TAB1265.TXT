OBJECT Table 1265 Data Exch. Field Mapping Buf.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
             BEGIN
               TESTFIELD(Type,Type::Field);
               if "Column No." = 0 then
                 CreateDataExchColumnDef;

               if not DataExchFieldMapping.GET("Data Exchange Def Code","Data Exchange Line Def Code","Table ID","Column No.","Field ID") then
                 CreateFieldMapping;
             END;

    OnDelete=VAR
               DataExchColumnDef@1000 : Record "Data Exch. Column Def";
               DataExchFieldMapping@1001 : Record "Data Exch. Field Mapping";
             BEGIN
               TESTFIELD(Type,Type::Field);
               if DataExchFieldMapping.GET("Data Exchange Def Code","Data Exchange Line Def Code","Table ID","Column No.","Field ID") then
                 DataExchFieldMapping.DELETE(true);

               if DataExchColumnDef.GET("Data Exchange Def Code","Data Exchange Line Def Code","Column No.") then
                 DataExchColumnDef.DELETE(true);
             END;

    OnRename=BEGIN
               // TODO: Test and implement
             END;

    CaptionML=ENU=Data Exch. Field Mapping Buf.;
  }
  FIELDS
  {
    { 1   ;   ;Data Exchange Def Code;Code20      ;CaptionML=ENU=Data Exchange Def Code }
    { 2   ;   ;Data Exchange Line Def Code;Code20 ;CaptionML=ENU=Data Exchange Line Def Code }
    { 3   ;   ;Table ID            ;Integer       ;CaptionML=ENU=Table ID }
    { 4   ;   ;Column No.          ;Integer       ;CaptionML=ENU=Column No. }
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Field,Table;
                                                   OptionString=Field,Table }
    { 10  ;   ;Field ID            ;Integer       ;CaptionML=ENU=Field ID }
    { 11  ;   ;Default Value       ;Text250       ;OnValidate=VAR
                                                                DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Field);
                                                                DataExchFieldMapping.GET("Data Exchange Def Code","Data Exchange Line Def Code","Table ID","Column No.","Field ID");
                                                                DataExchFieldMapping.VALIDATE("Default Value","Default Value");
                                                                DataExchFieldMapping.MODIFY(true);
                                                              END;

                                                   CaptionML=ENU=Default Value }
    { 13  ;   ;Source              ;Text250       ;OnValidate=VAR
                                                                DataExchColumnDef@1000 : Record "Data Exch. Column Def";
                                                                DataExchLineDef@1001 : Record "Data Exch. Line Def";
                                                              BEGIN
                                                                case Type of
                                                                  Type::Field:
                                                                    if not DataExchColumnDef.GET("Data Exchange Def Code","Data Exchange Line Def Code","Column No.") then
                                                                      CreateDataExchColumnDef
                                                                    else begin
                                                                      DataExchColumnDef.VALIDATE(Path,Source);
                                                                      DataExchColumnDef.MODIFY(true);
                                                                    end;
                                                                  Type::Table:
                                                                    begin
                                                                      DataExchLineDef.GET("Data Exchange Def Code","Data Exchange Line Def Code");
                                                                      DataExchLineDef.VALIDATE("Data Line Tag",Source);
                                                                      DataExchLineDef.MODIFY(true);
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Source }
    { 20  ;   ;Caption             ;Text250       ;CaptionML=ENU=Caption;
                                                   Editable=false }
    { 22  ;   ;Depth               ;Integer       ;CaptionML=ENU=Depth }
    { 23  ;   ;Transformation Rule ;Code20        ;TableRelation="Transformation Rule";
                                                   OnValidate=VAR
                                                                DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Field);
                                                                DataExchFieldMapping.GET("Data Exchange Def Code","Data Exchange Line Def Code","Table ID","Column No.","Field ID");
                                                                DataExchFieldMapping.VALIDATE("Transformation Rule","Transformation Rule");
                                                                DataExchFieldMapping.MODIFY(true);
                                                              END;

                                                   CaptionML=ENU=Transformation Rule }
  }
  KEYS
  {
    {    ;"Data Exchange Def Code","Data Exchange Line Def Code","Field ID","Table ID";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [Internal]
    PROCEDURE InsertFromDataExchDefinition@14(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchDef@1000 : Record "Data Exch. Def";VAR TempSuggestedField@1003 : TEMPORARY Record Field);
    VAR
      DataExchLineDef@1002 : Record "Data Exch. Line Def";
    BEGIN
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDef.Code);
      DataExchLineDef.SETRANGE("Parent Code",'');

      if DataExchLineDef.FINDSET then
        repeat
          InsertFromDataExchDefinitionLine(TempDataExchFieldMappingBuf,DataExchLineDef,TempSuggestedField,0);
        until DataExchLineDef.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InsertFromDataExchDefinitionLine@31(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchLineDef@1000 : Record "Data Exch. Line Def";VAR TempSuggestedField@1003 : TEMPORARY Record Field;NewDepth@1004 : Integer);
    VAR
      DataExchMapping@1002 : Record "Data Exch. Mapping";
      ChildDataExchLineDef@1005 : Record "Data Exch. Line Def";
    BEGIN
      DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);

      if DataExchMapping.FINDSET then
        repeat
          InsertDataExchLineDefMappingLine(TempDataExchFieldMappingBuf,DataExchMapping,NewDepth);
          InsertFieldMappingDefinition(TempDataExchFieldMappingBuf,DataExchMapping,NewDepth + 1);
          InsertSuggestedFields(TempDataExchFieldMappingBuf,DataExchMapping,TempSuggestedField,NewDepth + 1);
        until DataExchMapping.NEXT = 0;

      ChildDataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchLineDef."Data Exch. Def Code");
      ChildDataExchLineDef.SETRANGE("Parent Code",DataExchLineDef.Code);

      if ChildDataExchLineDef.FINDSET then
        repeat
          InsertFromDataExchDefinitionLine(TempDataExchFieldMappingBuf,ChildDataExchLineDef,TempSuggestedField,NewDepth + 1);
        until ChildDataExchLineDef.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InsertFieldMappingDefinition@30(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchMapping@1000 : Record "Data Exch. Mapping";Indentation@1004 : Integer);
    VAR
      DataExchFieldMapping@1003 : Record "Data Exch. Field Mapping";
    BEGIN
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchMapping."Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchMapping."Data Exch. Line Def Code");
      DataExchFieldMapping.SETRANGE("Table ID",DataExchMapping."Table ID");

      if not DataExchFieldMapping.FINDSET then
        exit;

      repeat
        InsertFieldMappingLineDefinition(TempDataExchFieldMappingBuf,DataExchMapping,DataExchFieldMapping,Indentation);
      until DataExchFieldMapping.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InsertSuggestedFields@32(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchMapping@1000 : Record "Data Exch. Mapping";VAR TempSuggestedField@1005 : TEMPORARY Record Field;Indentation@1004 : Integer);
    VAR
      DataExchFieldMapping@1003 : Record "Data Exch. Field Mapping";
    BEGIN
      TempSuggestedField.SETRANGE(TableNo,DataExchMapping."Table ID");

      if not TempSuggestedField.FINDSET then
        exit;

      repeat
        DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchMapping."Data Exch. Def Code");
        DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchMapping."Data Exch. Line Def Code");
        DataExchFieldMapping.SETRANGE("Table ID",DataExchMapping."Table ID");
        DataExchFieldMapping.SETRANGE("Field ID",TempSuggestedField."No.");
        if not DataExchFieldMapping.FINDFIRST then begin
          InitializeDataExchangeSetupLine(
            TempDataExchFieldMappingBuf,DataExchMapping,TempSuggestedField."No.",Indentation,TempSuggestedField."Field Caption");
          TempDataExchFieldMappingBuf.INSERT(true);
        end;
      until TempSuggestedField.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InsertFieldMappingLineDefinition@52(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchMapping@1000 : Record "Data Exch. Mapping";DataExchFieldMapping@1003 : Record "Data Exch. Field Mapping";Indentation@1004 : Integer);
    VAR
      DataExchColumnDef@1002 : Record "Data Exch. Column Def";
    BEGIN
      InitializeDataExchangeSetupLine(
        TempDataExchFieldMappingBuf,DataExchMapping,DataExchFieldMapping."Field ID",Indentation,DataExchFieldMapping.GetFieldCaption);
      TempDataExchFieldMappingBuf."Column No." := DataExchFieldMapping."Column No.";
      TempDataExchFieldMappingBuf."Default Value" := DataExchFieldMapping."Default Value";
      TempDataExchFieldMappingBuf."Transformation Rule" := DataExchFieldMapping."Transformation Rule";
      DataExchColumnDef.GET(
        DataExchFieldMapping."Data Exch. Def Code",DataExchFieldMapping."Data Exch. Line Def Code",
        DataExchFieldMapping."Column No.");
      TempDataExchFieldMappingBuf.Source := DataExchColumnDef.Path;
      TempDataExchFieldMappingBuf.INSERT(true);
    END;

    LOCAL PROCEDURE InsertDataExchLineDefMappingLine@56(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchMapping@1000 : Record "Data Exch. Mapping";Indentation@1003 : Integer);
    VAR
      DataExchDef@1002 : Record "Data Exch. Def";
      DataExchLineDef@1005 : Record "Data Exch. Line Def";
    BEGIN
      DataExchDef.GET(DataExchMapping."Data Exch. Def Code");
      DataExchLineDef.GET(DataExchMapping."Data Exch. Def Code",DataExchMapping."Data Exch. Line Def Code");
      CLEAR(TempDataExchFieldMappingBuf);
      TempDataExchFieldMappingBuf.INIT;
      TempDataExchFieldMappingBuf."Data Exchange Def Code" := DataExchMapping."Data Exch. Def Code";
      TempDataExchFieldMappingBuf."Data Exchange Line Def Code" := DataExchMapping."Data Exch. Line Def Code";
      TempDataExchFieldMappingBuf.Type := TempDataExchFieldMappingBuf.Type::Table;
      TempDataExchFieldMappingBuf."Table ID" := DataExchMapping."Table ID";
      TempDataExchFieldMappingBuf.Caption := DataExchLineDef.Name;
      TempDataExchFieldMappingBuf.Depth := Indentation;
      TempDataExchFieldMappingBuf.Source := DataExchLineDef."Data Line Tag";
      TempDataExchFieldMappingBuf.INSERT;
    END;

    LOCAL PROCEDURE InitializeDataExchangeSetupLine@10(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record "Data Exch. Field Mapping Buf.";DataExchMapping@1000 : Record "Data Exch. Mapping";FieldID@1002 : Integer;Indentation@1003 : Integer;NewCaption@1004 : Text);
    VAR
      DataExchDef@1005 : Record "Data Exch. Def";
    BEGIN
      DataExchDef.GET(DataExchMapping."Data Exch. Def Code");

      CLEAR(TempDataExchFieldMappingBuf);
      TempDataExchFieldMappingBuf.INIT;
      TempDataExchFieldMappingBuf."Data Exchange Def Code" := DataExchMapping."Data Exch. Def Code";
      TempDataExchFieldMappingBuf."Data Exchange Line Def Code" := DataExchMapping."Data Exch. Line Def Code";
      TempDataExchFieldMappingBuf.Type := TempDataExchFieldMappingBuf.Type::Field;
      TempDataExchFieldMappingBuf."Table ID" := DataExchMapping."Table ID";
      TempDataExchFieldMappingBuf."Field ID" := FieldID;
      TempDataExchFieldMappingBuf.Caption := COPYSTR(NewCaption,1,MAXSTRLEN(TempDataExchFieldMappingBuf.Caption));
      TempDataExchFieldMappingBuf.Depth := Indentation;
    END;

    [External]
    PROCEDURE SourceAssistEdit@4(VAR XMLBuffer@1000 : Record "XML Buffer");
    BEGIN
      if PAGE.RUNMODAL(PAGE::"Select Source",XMLBuffer) = ACTION::LookupOK then
        VALIDATE(Source,XMLBuffer.Path);
    END;

    [External]
    PROCEDURE CaptionAssistEdit@5();
    VAR
      Field@1001 : Record Field;
      FieldList@1000 : Page "Field List";
    BEGIN
      Field.SETRANGE(TableNo,"Table ID");
      FieldList.SETTABLEVIEW(Field);
      FieldList.LOOKUPMODE(true);
      if FieldList.RUNMODAL = ACTION::LookupOK then begin
        FieldList.GETRECORD(Field);
        VALIDATE("Field ID",Field."No.");
        VALIDATE(Caption,Field."Field Caption");
      end;
    END;

    LOCAL PROCEDURE GetLastColumnNo@1() : Integer;
    VAR
      DataExchColumnDef@1000 : Record "Data Exch. Column Def";
    BEGIN
      DataExchColumnDef.SETRANGE("Data Exch. Def Code","Data Exchange Def Code");
      DataExchColumnDef.SETRANGE("Data Exch. Line Def Code","Data Exchange Line Def Code");
      if DataExchColumnDef.FINDLAST then
        exit(DataExchColumnDef."Column No.");

      exit(GetIncrement);
    END;

    LOCAL PROCEDURE GetIncrement@6() : Integer;
    BEGIN
      exit(10000);
    END;

    LOCAL PROCEDURE CreateDataExchColumnDef@15();
    VAR
      DataExchColumnDef@1000 : Record "Data Exch. Column Def";
    BEGIN
      if "Data Exchange Def Code" <> '' then begin
        "Column No." := GetLastColumnNo + GetIncrement;
        DataExchColumnDef.INIT;
        DataExchColumnDef."Data Exch. Def Code" := "Data Exchange Def Code";
        DataExchColumnDef."Data Exch. Line Def Code" := "Data Exchange Line Def Code";
        DataExchColumnDef."Column No." := "Column No.";
        DataExchColumnDef.Path := Source;
        DataExchColumnDef.INSERT(true);
      end;
    END;

    LOCAL PROCEDURE CreateFieldMapping@7();
    VAR
      DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
    BEGIN
      if "Data Exchange Def Code" <> '' then begin
        DataExchFieldMapping.INIT;
        DataExchFieldMapping.VALIDATE("Data Exch. Def Code","Data Exchange Def Code");
        DataExchFieldMapping.VALIDATE("Data Exch. Line Def Code","Data Exchange Line Def Code");
        DataExchFieldMapping.VALIDATE("Table ID","Table ID");
        DataExchFieldMapping.VALIDATE("Column No.","Column No.");
        DataExchFieldMapping.VALIDATE("Field ID","Field ID");
        DataExchFieldMapping.VALIDATE("Default Value","Default Value");
        DataExchFieldMapping.VALIDATE("Transformation Rule","Transformation Rule");
        DataExchFieldMapping.INSERT(true);
      end;
    END;

    BEGIN
    END.
  }
}

