OBJECT Codeunit 230 GenJnlManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Gen. Journal Template"=imd,
                TableData "Gen. Journal Batch"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fixed Asset G/L Journal';
      Text001@1001 : TextConst 'ENU=%1 journal';
      Text002@1002 : TextConst 'ENU=RECURRING';
      Text003@1003 : TextConst 'ENU=Recurring General Journal';
      Text004@1004 : TextConst 'ENU=DEFAULT';
      Text005@1005 : TextConst 'ENU=Default Journal';
      LastGenJnlLine@1006 : Record "Gen. Journal Line";
      OpenFromBatch@1007 : Boolean;

    [External]
    PROCEDURE TemplateSelection@1(PageID@1005 : Integer;PageTemplate@1000 : 'General,Sales,Purchases,"Cash Receipts",Payments,Assets,Intercompany,Jobs';RecurringJnl@1001 : Boolean;VAR GenJnlLine@1004 : Record "Gen. Journal Line";VAR JnlSelected@1003 : Boolean);
    VAR
      GenJnlTemplate@1002 : Record "Gen. Journal Template";
    BEGIN
      JnlSelected := true;

      GenJnlTemplate.RESET;
      GenJnlTemplate.SETRANGE("Page ID",PageID);
      GenJnlTemplate.SETRANGE(Recurring,RecurringJnl);
      if not RecurringJnl then
        GenJnlTemplate.SETRANGE(Type,PageTemplate);

      case GenJnlTemplate.COUNT of
        0:
          begin
            GenJnlTemplate.INIT;
            GenJnlTemplate.Type := PageTemplate;
            GenJnlTemplate.Recurring := RecurringJnl;
            if not RecurringJnl then begin
              GenJnlTemplate.Name := FORMAT(GenJnlTemplate.Type,MAXSTRLEN(GenJnlTemplate.Name));
              if PageTemplate = PageTemplate::Assets then
                GenJnlTemplate.Description := Text000
              else
                GenJnlTemplate.Description := STRSUBSTNO(Text001,GenJnlTemplate.Type);
            end else begin
              GenJnlTemplate.Name := Text002;
              GenJnlTemplate.Description := Text003;
            end;
            GenJnlTemplate.VALIDATE(Type);
            GenJnlTemplate.INSERT;
            COMMIT;
          end;
        1:
          GenJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,GenJnlTemplate) = ACTION::LookupOK;
      end;
      if JnlSelected then begin
        GenJnlLine.FILTERGROUP := 2;
        GenJnlLine.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
        GenJnlLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          GenJnlLine."Journal Template Name" := '';
          PAGE.RUN(GenJnlTemplate."Page ID",GenJnlLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@9(VAR GenJnlBatch@1000 : Record "Gen. Journal Batch");
    VAR
      GenJnlLine@1002 : Record "Gen. Journal Line";
      GenJnlTemplate@1003 : Record "Gen. Journal Template";
    BEGIN
      OpenFromBatch := true;
      GenJnlTemplate.GET(GenJnlBatch."Journal Template Name");
      GenJnlTemplate.TESTFIELD("Page ID");
      GenJnlBatch.TESTFIELD(Name);

      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
      GenJnlLine.FILTERGROUP := 0;

      GenJnlLine."Journal Template Name" := '';
      GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
      PAGE.RUN(GenJnlTemplate."Page ID",GenJnlLine);
    END;

    [External]
    PROCEDURE OpenJnl@2(VAR CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record "Gen. Journal Line");
    BEGIN
      CheckTemplateName(GenJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenJnlBatch@10(VAR GenJnlBatch@1000 : Record "Gen. Journal Batch");
    VAR
      GenJnlTemplate@1002 : Record "Gen. Journal Template";
      GenJnlLine@1004 : Record "Gen. Journal Line";
      JnlSelected@1003 : Boolean;
    BEGIN
      if GenJnlBatch.GETFILTER("Journal Template Name") <> '' then
        exit;
      GenJnlBatch.FILTERGROUP(2);
      if GenJnlBatch.GETFILTER("Journal Template Name") <> '' then begin
        GenJnlBatch.FILTERGROUP(0);
        exit;
      end;
      GenJnlBatch.FILTERGROUP(0);

      if not GenJnlBatch.FIND('-') then
        for GenJnlTemplate.Type := GenJnlTemplate.Type::General to GenJnlTemplate.Type::Jobs do begin
          GenJnlTemplate.SETRANGE(Type,GenJnlTemplate.Type);
          if not GenJnlTemplate.FINDFIRST then
            TemplateSelection(0,GenJnlTemplate.Type,false,GenJnlLine,JnlSelected);
          if GenJnlTemplate.FINDFIRST then
            CheckTemplateName(GenJnlTemplate.Name,GenJnlBatch.Name);
          if GenJnlTemplate.Type = GenJnlTemplate.Type::General then begin
            GenJnlTemplate.SETRANGE(Recurring,true);
            if not GenJnlTemplate.FINDFIRST then
              TemplateSelection(0,GenJnlTemplate.Type,true,GenJnlLine,JnlSelected);
            if GenJnlTemplate.FINDFIRST then
              CheckTemplateName(GenJnlTemplate.Name,GenJnlBatch.Name);
            GenJnlTemplate.SETRANGE(Recurring);
          end;
        end;

      GenJnlBatch.FIND('-');
      JnlSelected := true;
      GenJnlBatch.CALCFIELDS("Template Type",Recurring);
      GenJnlTemplate.SETRANGE(Recurring,GenJnlBatch.Recurring);
      if not GenJnlBatch.Recurring then
        GenJnlTemplate.SETRANGE(Type,GenJnlBatch."Template Type");
      if GenJnlBatch.GETFILTER("Journal Template Name") <> '' then
        GenJnlTemplate.SETRANGE(Name,GenJnlBatch.GETFILTER("Journal Template Name"));
      case GenJnlTemplate.COUNT of
        1:
          GenJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,GenJnlTemplate) = ACTION::LookupOK;
      end;
      if not JnlSelected then
        ERROR('');

      GenJnlBatch.FILTERGROUP(0);
      GenJnlBatch.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
      GenJnlBatch.FILTERGROUP(2);
    END;

    LOCAL PROCEDURE CheckTemplateName@3(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      GenJnlBatch@1002 : Record "Gen. Journal Batch";
    BEGIN
      GenJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      if not GenJnlBatch.GET(CurrentJnlTemplateName,CurrentJnlBatchName) then begin
        if not GenJnlBatch.FINDFIRST then begin
          GenJnlBatch.INIT;
          GenJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
          GenJnlBatch.SetupNewBatch;
          GenJnlBatch.Name := Text004;
          GenJnlBatch.Description := Text005;
          GenJnlBatch.INSERT(true);
          COMMIT;
        end;
        CurrentJnlBatchName := GenJnlBatch.Name
      end;
    END;

    [External]
    PROCEDURE CheckName@4(CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record "Gen. Journal Line");
    VAR
      GenJnlBatch@1002 : Record "Gen. Journal Batch";
    BEGIN
      GenJnlBatch.GET(GenJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
    END;

    [External]
    PROCEDURE SetName@5(CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record "Gen. Journal Line");
    BEGIN
      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 0;
      if GenJnlLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupName@6(VAR CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record "Gen. Journal Line");
    VAR
      GenJnlBatch@1002 : Record "Gen. Journal Batch";
    BEGIN
      COMMIT;
      GenJnlBatch."Journal Template Name" := GenJnlLine.GETRANGEMAX("Journal Template Name");
      GenJnlBatch.Name := GenJnlLine.GETRANGEMAX("Journal Batch Name");
      GenJnlBatch.FILTERGROUP(2);
      GenJnlBatch.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlBatch.FILTERGROUP(0);
      if PAGE.RUNMODAL(0,GenJnlBatch) = ACTION::LookupOK then begin
        CurrentJnlBatchName := GenJnlBatch.Name;
        SetName(CurrentJnlBatchName,GenJnlLine);
      end;
    END;

    [External]
    PROCEDURE GetAccounts@7(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR AccName@1001 : Text[50];VAR BalAccName@1002 : Text[50]);
    VAR
      GLAcc@1003 : Record "G/L Account";
      Cust@1004 : Record Customer;
      Vend@1005 : Record Vendor;
      BankAcc@1006 : Record "Bank Account";
      FA@1007 : Record "Fixed Asset";
      IC@1008 : Record "IC Partner";
    BEGIN
      if (GenJnlLine."Account Type" <> LastGenJnlLine."Account Type") or
         (GenJnlLine."Account No." <> LastGenJnlLine."Account No.")
      then begin
        AccName := '';
        if GenJnlLine."Account No." <> '' then
          case GenJnlLine."Account Type" of
            GenJnlLine."Account Type"::"G/L Account":
              if GLAcc.GET(GenJnlLine."Account No.") then
                AccName := GLAcc.Name;
            GenJnlLine."Account Type"::Customer:
              if Cust.GET(GenJnlLine."Account No.") then
                AccName := Cust.Name;
            GenJnlLine."Account Type"::Vendor:
              if Vend.GET(GenJnlLine."Account No.") then
                AccName := Vend.Name;
            GenJnlLine."Account Type"::"Bank Account":
              if BankAcc.GET(GenJnlLine."Account No.") then
                AccName := BankAcc.Name;
            GenJnlLine."Account Type"::"Fixed Asset":
              if FA.GET(GenJnlLine."Account No.") then
                AccName := FA.Description;
            GenJnlLine."Account Type"::"IC Partner":
              if IC.GET(GenJnlLine."Account No.") then
                AccName := IC.Name;
          end;
      end;

      if (GenJnlLine."Bal. Account Type" <> LastGenJnlLine."Bal. Account Type") or
         (GenJnlLine."Bal. Account No." <> LastGenJnlLine."Bal. Account No.")
      then begin
        BalAccName := '';
        if GenJnlLine."Bal. Account No." <> '' then
          case GenJnlLine."Bal. Account Type" of
            GenJnlLine."Bal. Account Type"::"G/L Account":
              if GLAcc.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := GLAcc.Name;
            GenJnlLine."Bal. Account Type"::Customer:
              if Cust.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := Cust.Name;
            GenJnlLine."Bal. Account Type"::Vendor:
              if Vend.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := Vend.Name;
            GenJnlLine."Bal. Account Type"::"Bank Account":
              if BankAcc.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := BankAcc.Name;
            GenJnlLine."Bal. Account Type"::"Fixed Asset":
              if FA.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := FA.Description;
            GenJnlLine."Bal. Account Type"::"IC Partner":
              if IC.GET(GenJnlLine."Bal. Account No.") then
                BalAccName := IC.Name;
          end;
      end;

      LastGenJnlLine := GenJnlLine;
    END;

    [External]
    PROCEDURE CalcBalance@8(VAR GenJnlLine@1000 : Record "Gen. Journal Line";LastGenJnlLine@1001 : Record "Gen. Journal Line";VAR Balance@1002 : Decimal;VAR TotalBalance@1003 : Decimal;VAR ShowBalance@1004 : Boolean;VAR ShowTotalBalance@1005 : Boolean);
    VAR
      TempGenJnlLine@1006 : Record "Gen. Journal Line";
    BEGIN
      TempGenJnlLine.COPYFILTERS(GenJnlLine);
      ShowTotalBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
      if ShowTotalBalance then begin
        TotalBalance := TempGenJnlLine."Balance (LCY)";
        if GenJnlLine."Line No." = 0 then
          TotalBalance := TotalBalance + LastGenJnlLine."Balance (LCY)";
      end;

      if GenJnlLine."Line No." <> 0 then begin
        TempGenJnlLine.SETRANGE("Line No.",0,GenJnlLine."Line No.");
        ShowBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
        if ShowBalance then
          Balance := TempGenJnlLine."Balance (LCY)";
      end else begin
        TempGenJnlLine.SETRANGE("Line No.",0,LastGenJnlLine."Line No.");
        ShowBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
        if ShowBalance then begin
          Balance := TempGenJnlLine."Balance (LCY)";
          TempGenJnlLine.COPYFILTERS(GenJnlLine);
          TempGenJnlLine := LastGenJnlLine;
          if TempGenJnlLine.NEXT = 0 then
            Balance := Balance + LastGenJnlLine."Balance (LCY)";
        end;
      end;
    END;

    BEGIN
    END.
  }
}

