OBJECT Table 14 Location
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               TransferRoute@1000 : Record "Transfer Route";
               WhseEmployee@1003 : Record "Warehouse Employee";
               WorkCenter@1004 : Record "Work Center";
               StockkeepingUnit@1001 : Record "Stockkeeping Unit";
             BEGIN
               StockkeepingUnit.SETRANGE("Location Code",Code);
               if not StockkeepingUnit.ISEMPTY then
                 ERROR(CannotDeleteLocSKUExistErr,Code);

               WMSCheckWarehouse;

               TransferRoute.SETRANGE("Transfer-from Code",Code);
               TransferRoute.DELETEALL;
               TransferRoute.RESET;
               TransferRoute.SETRANGE("Transfer-to Code",Code);
               TransferRoute.DELETEALL;

               WhseEmployee.SETRANGE("Location Code",Code);
               WhseEmployee.DELETEALL(true);

               WorkCenter.SETRANGE("Location Code",Code);
               if WorkCenter.FINDSET(true) then
                 repeat
                   WorkCenter.VALIDATE("Location Code",'');
                   WorkCenter.MODIFY(true);
                 until WorkCenter.NEXT = 0;
             END;

    CaptionML=ENU=Location;
    LookupPageID="Location List";
    DrillDownPageID="Location List";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 130 ;   ;Default Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   CaptionML=ENU=Default Bin Code }
    { 5700;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5701;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 5702;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 5703;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 5704;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 5705;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 5706;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 5707;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 5713;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 5714;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 5715;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 5718;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 5719;   ;Home Page           ;Text90        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 5720;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 5724;   ;Use As In-Transit   ;Boolean       ;OnValidate=BEGIN
                                                                if "Use As In-Transit" then begin
                                                                  TESTFIELD("Require Put-away",false);
                                                                  TESTFIELD("Require Pick",false);
                                                                  TESTFIELD("Use Cross-Docking",false);
                                                                  TESTFIELD("Require Receive",false);
                                                                  TESTFIELD("Require Shipment",false);
                                                                  TESTFIELD("Bin Mandatory",false);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Transfer Header"=R;
                                                   CaptionML=ENU=Use As In-Transit }
    { 5726;   ;Require Put-away    ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record "Warehouse Activity Header";
                                                                WhseRcptHeader@1001 : Record "Warehouse Receipt Header";
                                                              BEGIN
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseRcptHeader.ISEMPTY then
                                                                  ERROR(Text008,FIELDCAPTION("Require Put-away"),xRec."Require Put-away",WhseRcptHeader.TABLECAPTION);

                                                                if not "Require Put-away" then begin
                                                                  TESTFIELD("Directed Put-away and Pick",false);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseActivHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Put-away"),true,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := false;
                                                                  "Cross-Dock Bin Code" := '';
                                                                end else
                                                                  CreateInboundWhseRequest;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Require Put-away }
    { 5727;   ;Require Pick        ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record "Warehouse Activity Header";
                                                                WhseShptHeader@1001 : Record "Warehouse Shipment Header";
                                                              BEGIN
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseShptHeader.ISEMPTY then
                                                                  ERROR(Text008,FIELDCAPTION("Require Pick"),xRec."Require Pick",WhseShptHeader.TABLECAPTION);

                                                                if not "Require Pick" then begin
                                                                  TESTFIELD("Directed Put-away and Pick",false);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseActivHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Pick"),true,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := false;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "Pick According to FEFO" := false;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Require Pick }
    { 5728;   ;Cross-Dock Due Date Calc.;DateFormula;
                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Cross-Dock Due Date Calc. }
    { 5729;   ;Use Cross-Docking   ;Boolean       ;OnValidate=BEGIN
                                                                if "Use Cross-Docking" then begin
                                                                  TESTFIELD("Require Receive");
                                                                  TESTFIELD("Require Shipment");
                                                                  TESTFIELD("Require Put-away");
                                                                  TESTFIELD("Require Pick");
                                                                end else
                                                                  "Cross-Dock Bin Code" := '';
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Use Cross-Docking }
    { 5730;   ;Require Receive     ;Boolean       ;OnValidate=VAR
                                                                WhseRcptHeader@1000 : Record "Warehouse Receipt Header";
                                                                WhseActivHeader@1001 : Record "Warehouse Activity Header";
                                                              BEGIN
                                                                if not "Require Receive" then begin
                                                                  TESTFIELD("Directed Put-away and Pick",false);
                                                                  WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseRcptHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),true,WhseRcptHeader.TABLECAPTION);
                                                                  "Receipt Bin Code" := '';
                                                                  "Use Cross-Docking" := false;
                                                                  "Cross-Dock Bin Code" := '';
                                                                end else begin
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseActivHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),false,WhseActivHeader.TABLECAPTION);

                                                                  CreateInboundWhseRequest;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Receipt Header"=R;
                                                   CaptionML=ENU=Require Receive }
    { 5731;   ;Require Shipment    ;Boolean       ;OnValidate=VAR
                                                                WhseShptHeader@1000 : Record "Warehouse Shipment Header";
                                                                WhseActivHeader@1001 : Record "Warehouse Activity Header";
                                                              BEGIN
                                                                if not "Require Shipment" then begin
                                                                  TESTFIELD("Directed Put-away and Pick",false);
                                                                  WhseShptHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseShptHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),true,WhseShptHeader.TABLECAPTION);
                                                                  "Shipment Bin Code" := '';
                                                                  "Use Cross-Docking" := false;
                                                                  "Cross-Dock Bin Code" := '';
                                                                end else begin
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  if not WhseActivHeader.ISEMPTY then
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),false,WhseActivHeader.TABLECAPTION);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Shipment Header"=R;
                                                   CaptionML=ENU=Require Shipment }
    { 5732;   ;Bin Mandatory       ;Boolean       ;OnValidate=VAR
                                                                ItemLedgEntry@1004 : Record "Item Ledger Entry";
                                                                WhseEntry@1000 : Record "Warehouse Entry";
                                                                WhseActivHeader@1001 : Record "Warehouse Activity Header";
                                                                WhseShptHeader@1002 : Record "Warehouse Shipment Header";
                                                                WhseRcptHeader@1003 : Record "Warehouse Receipt Header";
                                                                WhseIntegrationMgt@1006 : Codeunit "Whse. Integration Management";
                                                                Window@1005 : Dialog;
                                                              BEGIN
                                                                if "Bin Mandatory" and not xRec."Bin Mandatory" then begin
                                                                  Window.OPEN(Text010);
                                                                  ItemLedgEntry.SETRANGE(Open,true);
                                                                  ItemLedgEntry.SETRANGE("Location Code",Code);
                                                                  if not ItemLedgEntry.ISEMPTY then
                                                                    ERROR(Text009,FIELDCAPTION("Bin Mandatory"));

                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                end;

                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                if not WhseActivHeader.ISEMPTY then
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseRcptHeader.ISEMPTY then
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseShptHeader.ISEMPTY then
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseShptHeader.TABLECAPTION);

                                                                if not "Bin Mandatory" and xRec."Bin Mandatory" then begin
                                                                  WhseEntry.SETRANGE("Location Code",Code);
                                                                  WhseEntry.CALCSUMS("Qty. (Base)");
                                                                  if WhseEntry."Qty. (Base)" <> 0 then
                                                                    ERROR(Text002,FIELDCAPTION("Bin Mandatory"));
                                                                end;

                                                                if not "Bin Mandatory" then begin
                                                                  "Open Shop Floor Bin Code" := '';
                                                                  "To-Production Bin Code" := '';
                                                                  "From-Production Bin Code" := '';
                                                                  "Adjustment Bin Code" := '';
                                                                  "Receipt Bin Code" := '';
                                                                  "Shipment Bin Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "To-Assembly Bin Code" := '';
                                                                  "From-Assembly Bin Code" := '';
                                                                  WhseIntegrationMgt.CheckLocationOnManufBins(Rec);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Bin Mandatory }
    { 5733;   ;Directed Put-away and Pick;Boolean ;OnValidate=VAR
                                                                WhseActivHeader@1002 : Record "Warehouse Activity Header";
                                                                WhseShptHeader@1001 : Record "Warehouse Shipment Header";
                                                                WhseRcptHeader@1000 : Record "Warehouse Receipt Header";
                                                              BEGIN
                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                if not WhseActivHeader.ISEMPTY then
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseRcptHeader.ISEMPTY then
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                if not WhseShptHeader.ISEMPTY then
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseShptHeader.TABLECAPTION);

                                                                if "Directed Put-away and Pick" then begin
                                                                  TESTFIELD("Use As In-Transit",false);
                                                                  TESTFIELD("Bin Mandatory");
                                                                  VALIDATE("Require Receive",true);
                                                                  VALIDATE("Require Shipment",true);
                                                                  VALIDATE("Require Put-away",true);
                                                                  VALIDATE("Require Pick",true);
                                                                  VALIDATE("Use Cross-Docking",true);
                                                                  "Default Bin Selection" := "Default Bin Selection"::" ";
                                                                end else
                                                                  VALIDATE("Adjustment Bin Code",'');

                                                                if (not "Directed Put-away and Pick") and xRec."Directed Put-away and Pick" then begin
                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                  "Use Put-away Worksheet" := false;
                                                                  VALIDATE("Use Cross-Docking",false);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Directed Put-away and Pick }
    { 5734;   ;Default Bin Selection;Option       ;OnValidate=BEGIN
                                                                if ("Default Bin Selection" <> xRec."Default Bin Selection") and ("Default Bin Selection" = "Default Bin Selection"::" ") then
                                                                  TESTFIELD("Directed Put-away and Pick");
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Default Bin Selection;
                                                   OptionCaptionML=ENU=" ,Fixed Bin,Last-Used Bin";
                                                   OptionString=" ","Fixed Bin","Last-Used Bin" }
    { 5790;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5791;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 7305;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header";
                                                   CaptionML=ENU=Put-away Template Code }
    { 7306;   ;Use Put-away Worksheet;Boolean     ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Use Put-away Worksheet }
    { 7307;   ;Pick According to FEFO;Boolean     ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Pick According to FEFO }
    { 7308;   ;Allow Breakbulk     ;Boolean       ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Allow Breakbulk }
    { 7309;   ;Bin Capacity Policy ;Option        ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Bin Capacity Policy;
                                                   OptionCaptionML=ENU=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.;
                                                   OptionString="Never Check Capacity","Allow More Than Max. Capacity","Prohibit More Than Max. Cap." }
    { 7313;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=Open Shop Floor Bin Code }
    { 7314;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=To-Production Bin Code }
    { 7315;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=From-Production Bin Code }
    { 7317;   ;Adjustment Bin Code ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                if "Adjustment Bin Code" <> xRec."Adjustment Bin Code" then begin
                                                                  if "Adjustment Bin Code" = '' then
                                                                    CheckEmptyBin(
                                                                      xRec."Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"))
                                                                  else
                                                                    CheckEmptyBin(
                                                                      "Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"));

                                                                  CheckWhseAdjmtJnl;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Adjustment Bin Code }
    { 7319;   ;Always Create Put-away Line;Boolean;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Always Create Put-away Line }
    { 7320;   ;Always Create Pick Line;Boolean    ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Always Create Pick Line }
    { 7321;   ;Special Equipment   ;Option        ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Special Equipment;
                                                   OptionCaptionML=ENU=" ,According to Bin,According to SKU/Item";
                                                   OptionString=" ","According to Bin","According to SKU/Item" }
    { 7323;   ;Receipt Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   CaptionML=ENU=Receipt Bin Code }
    { 7325;   ;Shipment Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   CaptionML=ENU=Shipment Bin Code }
    { 7326;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   CaptionML=ENU=Cross-Dock Bin Code }
    { 7330;   ;To-Assembly Bin Code;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Assembly Bin Code",
                                                                  FIELDCAPTION("To-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=To-Assembly Bin Code }
    { 7331;   ;From-Assembly Bin Code;Code20      ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Assembly Bin Code",
                                                                  FIELDCAPTION("From-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=From-Assembly Bin Code }
    { 7332;   ;Asm.-to-Order Shpt. Bin Code;Code20;TableRelation=Bin.Code WHERE ("Location Code"=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Asm.-to-Order Shpt. Bin Code",
                                                                  FIELDCAPTION("Asm.-to-Order Shpt. Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=ENU=Asm.-to-Order Shpt. Bin Code }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7700;   ;Use ADCS            ;Boolean       ;AccessByPermission=TableData "Miniform Header"=R;
                                                   CaptionML=ENU=Use ADCS }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;Name                                     }
    {    ;"Use As In-Transit","Bin Mandatory"      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Bin@1000 : Record Bin;
      Postcode@1001 : Record "Post Code";
      WhseSetup@1002 : Record "Warehouse Setup";
      InvtSetup@1003 : Record "Inventory Setup";
      Location@1004 : Record Location;
      Text000@1005 : TextConst 'ENU=You cannot delete the %1 %2, because they contain items.';
      Text001@1006 : TextConst 'ENU=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.';
      Text002@1007 : TextConst 'ENU=%1 must be Yes, because the bins contain items.';
      Text003@1009 : TextConst 'ENU=Cancelled.';
      Text004@1010 : TextConst 'ENU=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\';
      Text005@1012 : TextConst 'ENU=Do you still want to delete this %1?';
      Text006@1011 : TextConst 'ENU=You cannot change the %1 until the inventory stored in %2 %3 is 0.';
      Text007@1013 : TextConst 'ENU=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.';
      Text008@1008 : TextConst 'ENU=%1 must be %2, because one or more %3 exist.';
      Text009@1014 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries on this location.';
      Text010@1015 : TextConst 'ENU=Checking item ledger entries for open entries...';
      Text011@1016 : TextConst 'ENU=You cannot change the %1 to %2 until the inventory stored in this bin is 0.';
      Text012@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text013@1018 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.';
      Text014@1019 : TextConst 'ENU=You cannot change %1 because one or more %2 exist.';
      CannotDeleteLocSKUExistErr@1021 : TextConst '@@@=%1: Field(Code);ENU=You cannot delete %1 because one or more stockkeeping units exist at this location.';
      UnspecifiedLocationLbl@1020 : TextConst 'ENU=(Unspecified Location)';

    [External]
    PROCEDURE RequireShipment@5(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      if Location.GET(LocationCode) then
        exit(Location."Require Shipment");
      WhseSetup.GET;
      exit(WhseSetup."Require Shipment");
    END;

    [External]
    PROCEDURE RequirePicking@1(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      if Location.GET(LocationCode) then
        exit(Location."Require Pick");
      WhseSetup.GET;
      exit(WhseSetup."Require Pick");
    END;

    [External]
    PROCEDURE RequireReceive@4(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      if Location.GET(LocationCode) then
        exit(Location."Require Receive");
      WhseSetup.GET;
      exit(WhseSetup."Require Receive");
    END;

    [External]
    PROCEDURE RequirePutaway@2(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      if Location.GET(LocationCode) then
        exit(Location."Require Put-away");
      WhseSetup.GET;
      exit(WhseSetup."Require Put-away");
    END;

    [External]
    PROCEDURE GetLocationSetup@3(LocationCode@1000 : Code[10];VAR Location2@1001 : Record Location) : Boolean;
    BEGIN
      if not GET(LocationCode) then
        with Location2 do begin
          INIT;
          WhseSetup.GET;
          InvtSetup.GET;
          Code := LocationCode;
          "Use As In-Transit" := false;
          "Require Put-away" := WhseSetup."Require Put-away";
          "Require Pick" := WhseSetup."Require Pick";
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
          "Require Receive" := WhseSetup."Require Receive";
          "Require Shipment" := WhseSetup."Require Shipment";
          exit(false);
        end;

      Location2 := Rec;
      exit(true);
    END;

    LOCAL PROCEDURE WMSCheckWarehouse@7300();
    VAR
      Zone@1005 : Record Zone;
      Bin@1006 : Record Bin;
      BinContent@1004 : Record "Bin Content";
      WhseActivLine@1003 : Record "Warehouse Activity Line";
      WarehouseEntry@1002 : Record "Warehouse Entry";
      WarehouseEntry2@1001 : Record "Warehouse Entry";
      WhseJnlLine@1000 : Record "Warehouse Journal Line";
      ItemLedgerEntry@1007 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgerEntry.SETRANGE("Location Code",Code);
      ItemLedgerEntry.SETRANGE(Open,true);
      if not ItemLedgerEntry.ISEMPTY then
        ERROR(Text013,Code);

      WarehouseEntry.SETRANGE("Location Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      if WarehouseEntry."Qty. (Base)" = 0 then begin
        if "Adjustment Bin Code" <> '' then begin
          WarehouseEntry2.SETRANGE("Bin Code","Adjustment Bin Code");
          WarehouseEntry2.SETRANGE("Location Code",Code);
          WarehouseEntry2.CALCSUMS("Qty. (Base)");
          if WarehouseEntry2."Qty. (Base)" < 0 then
            if not CONFIRM(Text004 + Text005,false,TABLECAPTION) then
              ERROR(Text003)
        end;
      end else
        ERROR(Text000,TABLECAPTION,Code);

      WhseActivLine.SETRANGE("Location Code",Code);
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>0');
      if not WhseActivLine.ISEMPTY then
        ERROR(Text001,TABLECAPTION,Code);

      WhseJnlLine.SETRANGE("Location Code",Code);
      WhseJnlLine.SETFILTER(Quantity,'<>0');
      if not WhseJnlLine.ISEMPTY then
        ERROR(Text001,TABLECAPTION,Code);

      Zone.SETRANGE("Location Code",Code);
      Zone.DELETEALL;
      Bin.SETRANGE("Location Code",Code);
      Bin.DELETEALL;
      BinContent.SETRANGE("Location Code",Code);
      BinContent.DELETEALL;
    END;

    LOCAL PROCEDURE CheckEmptyBin@7302(BinCode@1001 : Code[20];CaptionOfField@1002 : Text[30]);
    VAR
      WarehouseEntry@1003 : Record "Warehouse Entry";
      WhseEntry2@1000 : Record "Warehouse Entry";
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Location Code",Code);
      if WarehouseEntry.FINDFIRST then
        repeat
          WarehouseEntry.SETRANGE("Item No.",WarehouseEntry."Item No.");

          WhseEntry2.SETCURRENTKEY("Item No.","Bin Code","Location Code");
          WhseEntry2.COPYFILTERS(WarehouseEntry);
          WhseEntry2.CALCSUMS("Qty. (Base)");
          if WhseEntry2."Qty. (Base)" <> 0 then begin
            if (BinCode = "Adjustment Bin Code") and (xRec."Adjustment Bin Code" = '') then
              ERROR(Text011,CaptionOfField,BinCode);

            ERROR(Text006,CaptionOfField,Bin.TABLECAPTION,BinCode);
          end;

          WarehouseEntry.FINDLAST;
          WarehouseEntry.SETRANGE("Item No.");
        until WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseAdjmtJnl@7303();
    VAR
      WhseJnlTemplate@1002 : Record "Warehouse Journal Template";
      WhseJnlLine@1003 : Record "Warehouse Journal Line";
    BEGIN
      WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::Item);
      if WhseJnlTemplate.FIND('-') then
        repeat
          WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
          WhseJnlLine.SETRANGE("Location Code",Code);
          if not WhseJnlLine.ISEMPTY then
            ERROR(
              Text007,
              FIELDCAPTION("Adjustment Bin Code"));
        until WhseJnlTemplate.NEXT = 0;
    END;

    [External]
    PROCEDURE GetRequirementText@6(FieldNumber@1000 : Integer) : Text[50];
    VAR
      Text000@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away';
    BEGIN
      case FieldNumber of
        FIELDNO("Require Shipment"):
          exit(SELECTSTR(1,Text000));
        FIELDNO("Require Receive"):
          exit(SELECTSTR(2,Text000));
        FIELDNO("Require Pick"):
          exit(SELECTSTR(3,Text000));
        FIELDNO("Require Put-away"):
          exit(SELECTSTR(4,Text000));
      end;
    END;

    [Internal]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::Location,GETPOSITION)
      else
        MESSAGE(Text012);
    END;

    [External]
    PROCEDURE IsBWReceive@8() : Boolean;
    BEGIN
      exit("Bin Mandatory" and (not "Directed Put-away and Pick") and "Require Receive");
    END;

    [External]
    PROCEDURE IsBWShip@12() : Boolean;
    BEGIN
      exit("Bin Mandatory" and (not "Directed Put-away and Pick") and "Require Shipment");
    END;

    [External]
    PROCEDURE IsBinBWReceiveOrShip@11(BinCode@1000 : Code[20]) : Boolean;
    BEGIN
      exit(("Receipt Bin Code" <> '') and (BinCode = "Receipt Bin Code") or
        ("Shipment Bin Code" <> '') and (BinCode = "Shipment Bin Code"));
    END;

    [External]
    PROCEDURE IsInTransit@10(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      if Location.GET(LocationCode) then
        exit(Location."Use As In-Transit");
      exit(false);
    END;

    LOCAL PROCEDURE CreateInboundWhseRequest@13();
    VAR
      TransferHeader@1002 : Record "Transfer Header";
      TransferLine@1004 : Record "Transfer Line";
      WarehouseRequest@1000 : Record "Warehouse Request";
      WhseTransferRelease@1003 : Codeunit "Whse.-Transfer Release";
    BEGIN
      TransferLine.SETRANGE("Transfer-to Code",Code);
      if TransferLine.FINDSET then
        repeat
          if TransferLine."Quantity Received" <> TransferLine."Quantity Shipped" then begin
            TransferHeader.GET(TransferLine."Document No.");
            WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
            WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

            TransferLine.SETRANGE("Document No.",TransferLine."Document No.");
            TransferLine.FINDLAST;
            TransferLine.SETRANGE("Document No.");
          end;
        until TransferLine.NEXT = 0;
    END;

    PROCEDURE GetLocationsIncludingUnspecifiedLocation@14(IncludeOnlyUnspecifiedLocation@1001 : Boolean;ExcludeInTransitLocations@1000 : Boolean);
    VAR
      Location@1002 : Record Location;
    BEGIN
      INIT;
      VALIDATE(Name,UnspecifiedLocationLbl);
      INSERT;

      if not IncludeOnlyUnspecifiedLocation then begin
        if ExcludeInTransitLocations then
          Location.SETRANGE("Use As In-Transit",false);

        if Location.FINDSET then
          repeat
            INIT;
            COPY(Location);
            INSERT;
          until Location.NEXT = 0;
      end;

      FINDFIRST;
    END;

    BEGIN
    END.
  }
}

