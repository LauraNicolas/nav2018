OBJECT Page 9800 Users
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Users;
    SourceTable=User;
    DelayedInsert=true;
    PageType=List;
    CardPageID="User Card";
    OnInit=VAR
             PermissionManager@1000 : Codeunit "Permission Manager";
           BEGIN
             SoftwareAsAService := PermissionManager.SoftwareAsAService;
             CurrentUserIsSuper := PermissionManager.IsSuper(USERSECURITYID);
           END;

    OnOpenPage=BEGIN
                 NoUserExists := ISEMPTY;

                 HideExternalUsers;
               END;

    OnAfterGetRecord=BEGIN
                       WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                       NoUserExists := false;
                       RestoreUserGroupsForAnotherUser := "User Security ID" <> USERSECURITYID;
                     END;

    OnNewRecord=BEGIN
                  "User Security ID" := CREATEGUID;
                  WindowsUserName := '';
                END;

    OnInsertRecord=BEGIN
                     if not UserCard.ManageUsersIsAllowed then
                       ERROR('');
                     if "User Name" = '' then
                       ERROR(Text004Err,FIELDCAPTION("User Name"));
                   END;

    OnDeleteRecord=BEGIN
                     if not UserCard.ManageUsersIsAllowed then
                       ERROR('');
                   END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      Name=User Groups;
                      CaptionML=ENU=User Groups }
      { 15      ;2   ;Action    ;
                      Name=Action15;
                      CaptionML=ENU=User Groups;
                      ToolTipML=ENU=Set up or modify user groups as a fast way of giving users access to the functionality that is relevant to their work.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "User Groups";
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Users;
                      PromotedCategory=Process }
      { 25      ;1   ;ActionGroup;
                      Name=Permissions;
                      CaptionML=ENU=Permissions }
      { 16      ;2   ;Action    ;
                      Name=Permission Sets;
                      CaptionML=ENU=Permission Sets;
                      ToolTipML=ENU=View or edit which feature objects that users need to access and set up the related permissions in permission sets that you can assign to the users of the database.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Permission Sets";
                      Promoted=true;
                      Image=Permission;
                      PromotedCategory=Process }
      { 9       ;2   ;Action    ;
                      Name=Permission Set by User;
                      CaptionML=ENU=Permission Set by User;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing users.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Permission Set by User";
                      Promoted=true;
                      Image=Permission;
                      PromotedCategory=Process }
      { 19      ;2   ;Action    ;
                      Name=Permission Set by User Group;
                      CaptionML=ENU=Permission Set by User Group;
                      ToolTipML=ENU=View or edit the available permission sets and apply permission sets to existing user groups.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Permission Set by User Group";
                      Promoted=true;
                      Image=Permission;
                      PromotedCategory=Process }
      { 23      ;1   ;Action    ;
                      Name=User Setup;
                      CaptionML=ENU=User Setup;
                      ToolTipML=ENU=Set up users and define their permissions..;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "User Setup";
                      Image=UserSetup }
      { 26      ;1   ;Action    ;
                      Name=Printer Selections;
                      CaptionML=ENU=Printer Selections;
                      ToolTipML=ENU=Assign printers to users and/or reports so that a user always uses a specific printer, or a specific report only prints on a specific printer.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Printer Selections";
                      Image=Print }
      { 27      ;1   ;Action    ;
                      Name=Warehouse Employees;
                      CaptionML=ENU=Warehouse Employees;
                      ToolTipML=ENU=View the warehouse employees that exist in the system.;
                      ApplicationArea=#Warehouse;
                      RunObject=Page "Warehouse Employees";
                      Image=WarehouseSetup }
      { 31      ;1   ;Action    ;
                      Name=FA Journal Setup;
                      CaptionML=ENU=FA Journal Setup;
                      ToolTipML=ENU=Set up journals, journal templates, and journal batches for fixed assets.;
                      ApplicationArea=#FixedAssets;
                      RunObject=Page "FA Journal Setup";
                      Image=FixedAssets }
      { 22      ;    ;ActionContainer;
                      Name=ActionContainer22;
                      ActionContainerType=NewDocumentItems }
      { 21      ;1   ;Action    ;
                      Name=AddMeAsSuper;
                      CaptionML=ENU=Add me as Administrator;
                      ToolTipML=ENU=Assign the Administrator status to your user account.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Visible=NoUserExists AND (NOT SoftwareAsAService);
                      Image=User;
                      OnAction=BEGIN
                                 if CONFIRM(STRSUBSTNO(CreateQst,USERID),false) then
                                   CODEUNIT.RUN(CODEUNIT::"Users - Create Super User");
                               END;
                                }
      { 34      ;1   ;Action    ;
                      Name=Get Users from Office 365;
                      CaptionML=ENU=Get Users from Office 365;
                      ToolTipML=ENU=Gets updated information about users from the Office portal.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=SoftwareAsAService;
                      PromotedIsBig=true;
                      Image=Users;
                      PromotedOnly=true;
                      OnAction=VAR
                                 AzureADUserManagement@1000 : Codeunit "Azure AD User Management";
                               BEGIN
                                 AzureADUserManagement.CreateNewUsersFromAzureAD;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 36      ;1   ;Action    ;
                      Name=Invite External Accountant;
                      CaptionML=ENU=Invite External Accountant;
                      ToolTipML=ENU=Set up an external accountant with access to your Dynamics 365.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=SoftwareAsAService;
                      PromotedIsBig=true;
                      Image=SalesPerson;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 PAGE.RUN(PAGE::"Invite External Accountant");
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 35      ;1   ;Action    ;
                      Name=Restore User Default User Groups;
                      CaptionML=ENU=Restore User's Default User Groups;
                      ToolTipML=ENU=Restore the default user groups for the user's subscription plan.;
                      ApplicationArea=#Basic,#Suite;
                      Visible=SoftwareAsAService;
                      Enabled=CurrentUserIsSuper AND RestoreUserGroupsForAnotherUser AND (NOT NoUserExists);
                      Image=UserInterface;
                      OnAction=VAR
                                 PermissionManager@1000 : Codeunit "Permission Manager";
                                 AzureADUserManagement@1001 : Codeunit "Azure AD User Management";
                               BEGIN
                                 if CONFIRM(RestoreUserGroupsToDefaultQst,false,"User Name") then begin
                                   AzureADUserManagement.RefreshUserPlanAssignments("User Security ID");
                                   PermissionManager.ResetUserToDefaultUserGroups("User Security ID");
                                 end;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=User Security ID;
                ToolTipML=ENU=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.;
                ApplicationArea=#Advanced;
                SourceExpr="User Security ID";
                Visible=FALSE;
                ImplicitType=GUID }

    { 4   ;2   ;Field     ;
                Name=User Name;
                CaptionML=ENU=User Name;
                ToolTipML=ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Name";
                OnValidate=BEGIN
                             ValidateUserName;
                           END;

                ImplicitType=Code50 }

    { 5   ;2   ;Field     ;
                Name=Full Name;
                CaptionML=ENU=Full Name;
                ToolTipML=ENU=Specifies the full name of the user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Full Name";
                Editable=NOT SoftwareAsAService;
                ImplicitType=Text80 }

    { 77  ;2   ;Field     ;
                Name=State;
                ToolTipML=ENU=Specifies if the user's login is enabled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=State;
                ImplicitType=Option }

    { 7   ;2   ;Field     ;
                Name=Windows Security ID;
                ToolTipML=ENU=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.;
                ApplicationArea=#Advanced;
                SourceExpr="Windows Security ID";
                Visible=FALSE;
                ImplicitType=Text119 }

    { 6   ;2   ;Field     ;
                Name=Windows User Name;
                CaptionML=ENU=Windows User Name;
                ToolTipML=ENU=Specifies the user's name on Windows.;
                ApplicationArea=#Advanced;
                SourceExpr=WindowsUserName;
                OnValidate=VAR
                             UserSID@1000 : Text;
                           BEGIN
                             if WindowsUserName = '' then
                               "Windows Security ID" := ''
                             else begin
                               UserSID := SID(WindowsUserName);
                               WindowsUserName := IdentityManagement.UserName(UserSID);
                               if WindowsUserName <> '' then begin
                                 "Windows Security ID" := UserSID;
                                 ValidateSid;
                                 SetUserName;
                               end else
                                 ERROR(Text001Err,WindowsUserName);
                             end;
                           END;

                OnAssistEdit=VAR
                               DSOP@1000 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
                               result@1001 : Text;
                             BEGIN
                               DSOP := DSOP.DSObjectPickerWrapper;
                               result := DSOP.InvokeDialogAndReturnSid;
                               if result <> '' then begin
                                 "Windows Security ID" := result;
                                 ValidateSid;
                                 WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                                 SetUserName;
                               end;
                             END;

                ImplicitType=Text208 }

    { 14  ;2   ;Field     ;
                Name=License Type;
                CaptionML=ENU=License Type;
                ToolTipML=ENU=Specifies the type of license that applies to the user. For more information, see License Types.;
                ApplicationArea=#Advanced;
                SourceExpr="License Type";
                ImplicitType=Option }

    { 13  ;2   ;Field     ;
                Name=Authentication Email;
                ExtendedDatatype=E-Mail;
                ToolTipML=ENU=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Authentication Email";
                Visible=SoftwareAsAService;
                Editable=FALSE;
                ImplicitType=Text250 }

    { 8   ;0   ;Container ;
                Name=Container8;
                ContainerType=FactBoxArea }

    { 18  ;1   ;Part      ;
                Name=Part18;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User Security ID"=FIELD("User Security ID");
                PagePartID="Permission Sets FactBox";
                PartType=Page }

    { 17  ;1   ;Part      ;
                Name=User Group Memberships;
                CaptionML=ENU=User Group Memberships;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User Security ID"=FIELD("User Security ID");
                PagePartID="User Group Memberships FactBox";
                PartType=Page }

    { 20  ;1   ;Part      ;
                Name=Part20;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User ID"=FIELD("User Name");
                PagePartID="User Setup FactBox";
                PartType=Page }

    { 33  ;1   ;Part      ;
                Name=Part33;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User SID"=FIELD("User Security ID");
                PagePartID="User Personalization FactBox";
                PartType=Page }

    { 32  ;1   ;Part      ;
                Name=Part32;
                ApplicationArea=#Advanced;
                SubPageLink="User ID"=FIELD("User Name");
                PagePartID="Printer Selections FactBox";
                PartType=Page;
                ShowFilter=false }

    { 28  ;1   ;Part      ;
                Name=Part28;
                ApplicationArea=#Advanced;
                SubPageLink="User ID"=FIELD("User Name");
                PagePartID="My Customers";
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=false }

    { 29  ;1   ;Part      ;
                Name=Part29;
                ApplicationArea=#Advanced;
                SubPageLink="User ID"=FIELD("User Name");
                PagePartID="My Vendors";
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=false }

    { 30  ;1   ;Part      ;
                Name=Part30;
                ApplicationArea=#Advanced;
                SubPageLink="User ID"=FIELD("User Name");
                PagePartID="My Items";
                Visible=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=false }

    { 11  ;1   ;Part      ;
                Name=Part11;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

    { 12  ;1   ;Part      ;
                Name=Part12;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      IdentityManagement@1004 : Codeunit "Identity Management";
      UserCard@1009 : Page "User Card";
      WindowsUserName@1000 : Text[208];
      Text001Err@1003 : TextConst '@@@="%1=user name";ENU=The account %1 is not a valid Windows account.';
      Text002Err@1002 : TextConst '@@@="%1=user name";ENU=The account %1 already exists.';
      Text003Err@1001 : TextConst '@@@="%1=user name";ENU=The account %1 is not allowed.';
      Text004Err@1005 : TextConst '@@@="%1=user name";ENU=%1 cannot be empty.';
      NoUserExists@1006 : Boolean;
      CreateQst@1007 : TextConst '@@@="%1=user name, e.g. europe\myaccountname";ENU=Do you want to create %1 as super user?';
      SoftwareAsAService@1008 : Boolean;
      RestoreUserGroupsToDefaultQst@1011 : TextConst '@@@=Do you want to restore the default user groups to for user Annie?;ENU=Do you want to restore the default user groups to for user %1?';
      CurrentUserIsSuper@1014 : Boolean;
      RestoreUserGroupsForAnotherUser@1013 : Boolean;

    LOCAL PROCEDURE ValidateSid@1();
    VAR
      User@1000 : Record User;
    BEGIN
      if "Windows Security ID" = '' then
        ERROR(Text001Err,"User Name");

      if ("Windows Security ID" = 'S-1-1-0') or ("Windows Security ID" = 'S-1-5-7') then
        ERROR(Text003Err,"User Name");

      User.SETFILTER("Windows Security ID","Windows Security ID");
      User.SETFILTER("User Security ID",'<>%1',"User Security ID");
      if not User.ISEMPTY then
        ERROR(Text002Err,WindowsUserName);
    END;

    LOCAL PROCEDURE ValidateUserName@3();
    VAR
      UserMgt@1000 : Codeunit "User Management";
    BEGIN
      UserMgt.ValidateUserName(Rec,xRec,WindowsUserName);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetUserName@4();
    BEGIN
      "User Name" := WindowsUserName;
      ValidateUserName;
    END;

    [Internal]
    PROCEDURE GetSelectionFilter@2(VAR User@1000 : Record User);
    BEGIN
      CurrPage.SETSELECTIONFILTER(User);
    END;

    LOCAL PROCEDURE HideExternalUsers@5();
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      if not PermissionManager.SoftwareAsAService then
        exit;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    BEGIN
    END.
  }
}

