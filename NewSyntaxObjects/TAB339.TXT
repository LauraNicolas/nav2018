OBJECT Table 339 Item Application Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Application Entry"=rm,
                TableData "Item Application Entry History"=ri;
    CaptionML=ENU=Item Application Entry;
    LookupPageID="Item Application Entries";
    DrillDownPageID="Item Application Entries";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Item Ledger Entry No. }
    { 3   ;   ;Inbound Item Entry No.;Integer     ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Inbound Item Entry No. }
    { 4   ;   ;Outbound Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Outbound Item Entry No. }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 23  ;   ;Transferred-from Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Transferred-from Entry No. }
    { 25  ;   ;Creation Date       ;DateTime      ;CaptionML=ENU=Creation Date }
    { 26  ;   ;Created By User     ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("Created By User");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Created By User }
    { 27  ;   ;Last Modified Date  ;DateTime      ;CaptionML=ENU=Last Modified Date }
    { 28  ;   ;Last Modified By User;Code50       ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("Last Modified By User");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Last Modified By User }
    { 5800;   ;Cost Application    ;Boolean       ;CaptionML=ENU=Cost Application }
    { 5804;   ;Output Completely Invd. Date;Date  ;CaptionML=ENU=Output Completely Invd. Date }
    { 5805;   ;Outbound Entry is Updated;Boolean  ;InitValue=false;
                                                   CaptionML=ENU=Outbound Entry is Updated }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application" }
    {    ;"Outbound Item Entry No.","Item Ledger Entry No.","Cost Application","Transferred-from Entry No." }
    {    ;"Transferred-from Entry No.","Cost Application" }
    {    ;"Inbound Item Entry No.","Outbound Item Entry No.","Cost Application" }
    {    ;"Item Ledger Entry No.","Output Completely Invd. Date" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=You have to run the %1 batch job, before you can revalue %2 %3.';
      TempVisitedItemApplnEntry@1001 : TEMPORARY Record "Item Application Entry";
      ItemLedgEntryInChainNo@1003 : TEMPORARY Record Integer;
      TrackChain@1002 : Boolean;
      MaxValuationDate@1004 : Date;

    [External]
    PROCEDURE AppliedOutbndEntryExists@43(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean;FilterOnOnlyCostNotAdjusted@1002 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',InbndItemLedgEntryNo);
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      if CostApplication then
        SETRANGE("Cost Application",true);

      if FilterOnOnlyCostNotAdjusted then
        SETRANGE("Outbound Entry is Updated",false);

      exit(FINDSET);
    END;

    [External]
    PROCEDURE AppliedInbndTransEntryExists@45(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1002 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Transferred-from Entry No.","Cost Application");
      SETRANGE("Transferred-from Entry No.",InbndItemLedgEntryNo);
      if CostApplication then
        SETRANGE("Cost Application",true);
      exit(FINDSET);
    END;

    [External]
    PROCEDURE AppliedInbndEntryExists@49(OutbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Outbound Item Entry No.","Item Ledger Entry No.","Cost Application","Transferred-from Entry No.");
      SETRANGE("Outbound Item Entry No.",OutbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',OutbndItemLedgEntryNo);
      SETRANGE("Transferred-from Entry No.",0);
      if CostApplication then
        SETRANGE("Cost Application",true);
      exit(FINDSET);
    END;

    [External]
    PROCEDURE AppliedFromEntryExists@3(InbndItemLedgEntryNo@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.");
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      SETRANGE("Item Ledger Entry No.",InbndItemLedgEntryNo);
      exit(FINDSET);
    END;

    [External]
    PROCEDURE CheckAppliedFromEntryToAdjust@1(InbndItemLedgEntryNo@1000 : Integer);
    VAR
      OutbndItemLedgEntry@1001 : Record "Item Ledger Entry";
      ObjTransl@1002 : Record "Object Translation";
    BEGIN
      if AppliedFromEntryExists(InbndItemLedgEntryNo) then
        repeat
          OutbndItemLedgEntry.GET("Outbound Item Entry No.");
          if OutbndItemLedgEntry."Applied Entry to Adjust" then
            ERROR(
              Text001,
              ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"),
              OutbndItemLedgEntry.TABLECAPTION,InbndItemLedgEntryNo);
        until NEXT = 0;
    END;

    [External]
    PROCEDURE CostReceiver@2() : Integer;
    BEGIN
      if "Outbound Item Entry No." = 0 then
        exit(0);
      if "Item Ledger Entry No." = "Outbound Item Entry No." then
        exit("Outbound Item Entry No.");
      if "Item Ledger Entry No." = "Inbound Item Entry No." then
        exit("Inbound Item Entry No.");
      exit(0);
    END;

    [External]
    PROCEDURE Fixed@4() : Boolean;
    VAR
      InboundItemLedgerEntry@1000 : Record "Item Ledger Entry";
      OutboundItemLedgerEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      if "Outbound Item Entry No." = 0 then
        exit(false);
      if not InboundItemLedgerEntry.GET("Inbound Item Entry No.") then
        exit(true);
      if InboundItemLedgerEntry."Applies-to Entry" = "Outbound Item Entry No." then
        exit(true);
      if not OutboundItemLedgerEntry.GET("Outbound Item Entry No.") then
        exit(true);
      if OutboundItemLedgerEntry."Applies-to Entry" = "Inbound Item Entry No." then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE InsertHistory@5() : Integer;
    VAR
      ItemApplnEntryHistory@1000 : Record "Item Application Entry History";
      EntryNo@1001 : Integer;
    BEGIN
      ItemApplnEntryHistory.SETCURRENTKEY("Primary Entry No.");
      if not ItemApplnEntryHistory.FINDLAST then
        EntryNo := 1;
      EntryNo := ItemApplnEntryHistory."Primary Entry No.";
      ItemApplnEntryHistory.TRANSFERFIELDS(Rec,true);
      ItemApplnEntryHistory."Deleted Date" := CURRENTDATETIME;
      ItemApplnEntryHistory."Deleted By User" := USERID;
      ItemApplnEntryHistory."Primary Entry No." := EntryNo + 1;
      ItemApplnEntryHistory.INSERT;
      exit(ItemApplnEntryHistory."Primary Entry No.");
    END;

    [External]
    PROCEDURE CostApplication@50() : Boolean;
    BEGIN
      exit((Quantity > 0) and ("Item Ledger Entry No." = "Inbound Item Entry No."))
    END;

    [External]
    PROCEDURE CheckIsCyclicalLoop@9(CheckItemLedgEntry@1004 : Record "Item Ledger Entry";FromItemLedgEntry@1005 : Record "Item Ledger Entry") : Boolean;
    BEGIN
      if CheckItemLedgEntry."Entry No." = FromItemLedgEntry."Entry No." then
        exit(true);
      TempVisitedItemApplnEntry.DELETEALL;
      ItemLedgEntryInChainNo.DELETEALL;

      if FromItemLedgEntry.Positive then begin
        if CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,FromItemLedgEntry."Entry No.") then
          exit(true);
        exit(CheckCyclicFwdToInbndTransfers(CheckItemLedgEntry,FromItemLedgEntry."Entry No."));
      end;
      if FromItemLedgEntry."Entry Type" = FromItemLedgEntry."Entry Type"::Consumption then
        if CheckCyclicProdCyclicalLoop(CheckItemLedgEntry,FromItemLedgEntry) then
          exit(true);
      if FromItemLedgEntry."Entry Type" = FromItemLedgEntry."Entry Type"::"Assembly Consumption" then
        if CheckCyclicAsmCyclicalLoop(CheckItemLedgEntry,FromItemLedgEntry) then
          exit(true);
      exit(CheckCyclicFwdToAppliedInbnds(CheckItemLedgEntry,FromItemLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE CheckCyclicProdCyclicalLoop@1100(CheckItemLedgEntry@1000 : Record "Item Ledger Entry";ItemLedgEntry@1304 : Record "Item Ledger Entry") : Boolean;
    BEGIN
      if not IsItemEverOutput(ItemLedgEntry."Item No.") then
        exit(false);

      if ItemLedgEntry."Order Type" <> ItemLedgEntry."Order Type"::Production then
        exit(false);
      if ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Output then
        exit(false);
      if ItemLedgEntry.Positive then
        exit(false);
      if (CheckItemLedgEntry."Entry Type" = CheckItemLedgEntry."Entry Type"::Output) and
         (ItemLedgEntry."Order Type" = CheckItemLedgEntry."Order Type") and
         (ItemLedgEntry."Order No." = CheckItemLedgEntry."Order No.") and
         (ItemLedgEntry."Order Line No." = CheckItemLedgEntry."Order Line No.")
      then
        exit(true);

      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type");
      ItemLedgEntry.SETRANGE("Order No.",ItemLedgEntry."Order No.");
      ItemLedgEntry.SETRANGE("Order Line No.",ItemLedgEntry."Order Line No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      if MaxValuationDate <> 0D then
        ItemLedgEntry.SETRANGE("Posting Date",0D,MaxValuationDate);
      if ItemLedgEntry.FINDSET then
        repeat
          if TrackChain then
            if not ItemLedgEntryInChainNo.GET(ItemLedgEntry."Entry No.") then begin
              ItemLedgEntryInChainNo.Number := ItemLedgEntry."Entry No.";
              ItemLedgEntryInChainNo.INSERT;
            end;

          if ItemLedgEntry."Entry No." = CheckItemLedgEntry."Entry No." then
            exit(true);

          if ItemLedgEntry.Positive then
            if CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ItemLedgEntry."Entry No.") then
              exit(true);
        until ItemLedgEntry.NEXT = 0;
      exit(false);
    END;

    LOCAL PROCEDURE CheckCyclicAsmCyclicalLoop@1101(CheckItemLedgEntry@1000 : Record "Item Ledger Entry";ItemLedgEntry@1304 : Record "Item Ledger Entry") : Boolean;
    BEGIN
      if ItemLedgEntry."Order Type" <> ItemLedgEntry."Order Type"::Assembly then
        exit(false);
      if ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::"Assembly Output" then
        exit(false);
      if ItemLedgEntry.Positive then
        exit(false);
      if (CheckItemLedgEntry."Entry Type" = CheckItemLedgEntry."Entry Type"::"Assembly Output") and
         (ItemLedgEntry."Order Type" = CheckItemLedgEntry."Order Type") and
         (ItemLedgEntry."Order No." = CheckItemLedgEntry."Order No.")
      then
        exit(true);

      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type");
      ItemLedgEntry.SETRANGE("Order No.",ItemLedgEntry."Order No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::"Assembly Output");
      if MaxValuationDate <> 0D then
        ItemLedgEntry.SETRANGE("Posting Date",0D,MaxValuationDate);
      if ItemLedgEntry.FINDSET then
        repeat
          if TrackChain then
            if not ItemLedgEntryInChainNo.GET(ItemLedgEntry."Entry No.") then begin
              ItemLedgEntryInChainNo.Number := ItemLedgEntry."Entry No.";
              ItemLedgEntryInChainNo.INSERT;
            end;

          if ItemLedgEntry."Entry No." = CheckItemLedgEntry."Entry No." then
            exit(true);

          if ItemLedgEntry.Positive then
            if CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ItemLedgEntry."Entry No.") then
              exit(true);
        until ItemLedgEntry.NEXT = 0;
      exit(false);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedOutbnds@11(CheckItemLedgEntry@1002 : Record "Item Ledger Entry";EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1001 : Record "Item Application Entry";
    BEGIN
      if ItemApplnEntry.AppliedOutbndEntryExists(EntryNo,false,false) then
        exit(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,true));
      exit(false);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedInbnds@7(CheckItemLedgEntry@1002 : Record "Item Ledger Entry";EntryNo@1001 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1000 : Record "Item Application Entry";
    BEGIN
      if ItemApplnEntry.AppliedInbndEntryExists(EntryNo,false) then
        exit(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,false));
      exit(false);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToInbndTransfers@6(CheckItemLedgEntry@1001 : Record "Item Ledger Entry";EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
    BEGIN
      if ItemApplnEntry.AppliedInbndTransEntryExists(EntryNo,false) then
        exit(CheckCyclicFwdToAppliedEntries(CheckItemLedgEntry,ItemApplnEntry,EntryNo,false));
      exit(false);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToProdOutput@1264(CheckItemLedgEntry@1000 : Record "Item Ledger Entry";EntryNo@1670 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1991 : Record "Item Ledger Entry";
    BEGIN
      if not ItemLedgEntry.GET(EntryNo) then
        exit(false);
      exit(CheckCyclicProdCyclicalLoop(CheckItemLedgEntry,ItemLedgEntry));
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAsmOutput@1102(CheckItemLedgEntry@1000 : Record "Item Ledger Entry";EntryNo@1670 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1991 : Record "Item Ledger Entry";
    BEGIN
      if not ItemLedgEntry.GET(EntryNo) then
        exit(false);
      exit(CheckCyclicAsmCyclicalLoop(CheckItemLedgEntry,ItemLedgEntry));
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedEntries@8(CheckItemLedgEntry@1001 : Record "Item Ledger Entry";VAR ItemApplnEntry@1005 : Record "Item Application Entry";FromEntryNo@1002 : Integer;IsPositiveToNegativeFlow@1009 : Boolean) : Boolean;
    VAR
      ToEntryNo@1008 : Integer;
    BEGIN
      if EntryIsVisited(FromEntryNo) then
        exit(false);

      repeat
        if IsPositiveToNegativeFlow then
          ToEntryNo := ItemApplnEntry."Outbound Item Entry No."
        else
          ToEntryNo := ItemApplnEntry."Inbound Item Entry No.";

        if CheckLatestItemLedgEntryValuationDate(ItemApplnEntry."Item Ledger Entry No.",MaxValuationDate) then begin
          if TrackChain then
            if not ItemLedgEntryInChainNo.GET(ToEntryNo) then begin
              ItemLedgEntryInChainNo.Number := ToEntryNo;
              ItemLedgEntryInChainNo.INSERT;
            end;

          if ToEntryNo = CheckItemLedgEntry."Entry No." then
            exit(true);
          if CheckCyclicFwdToAppliedOutbnds(CheckItemLedgEntry,ToEntryNo) then
            exit(true);
          if CheckCyclicFwdToAppliedInbnds(CheckItemLedgEntry,ToEntryNo) then
            exit(true);
          if CheckCyclicFwdToProdOutput(CheckItemLedgEntry,ToEntryNo) then
            exit(true);
          if CheckCyclicFwdToAsmOutput(CheckItemLedgEntry,ToEntryNo) then
            exit(true);
        end;
      until ItemApplnEntry.NEXT = 0;
      exit(CheckCyclicFwdToInbndTransfers(CheckItemLedgEntry,FromEntryNo));
    END;

    LOCAL PROCEDURE EntryIsVisited@10(EntryNo@1000 : Integer) : Boolean;
    BEGIN
      with TempVisitedItemApplnEntry do begin
        if GET(EntryNo) then begin
          // This is to take into account quantity flows from an inbound entry to an inbound transfer
          if Quantity = 2 then
            exit(true);
          Quantity := Quantity + 1;
          MODIFY;
          exit(false);
        end;
        INIT;
        "Entry No." := EntryNo;
        Quantity := Quantity + 1;
        INSERT;
        exit(false);
      end;
    END;

    [External]
    PROCEDURE GetVisitedEntries@15(FromItemLedgEntry@1000 : Record "Item Ledger Entry";VAR ItemLedgEntryInChain@1001 : Record "Item Ledger Entry";WithinValuationDate@1004 : Boolean);
    VAR
      ToItemLedgEntry@1002 : Record "Item Ledger Entry";
      DummyItemLedgEntry@1003 : Record "Item Ledger Entry";
      AvgCostAdjmtEntryPoint@1005 : Record "Avg. Cost Adjmt. Entry Point";
      ValueEntry@1006 : Record "Value Entry";
    BEGIN
      MaxValuationDate := 0D;
      if WithinValuationDate then begin
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Valuation Date");
        ValueEntry.SETRANGE("Item Ledger Entry No.",FromItemLedgEntry."Entry No.");
        ValueEntry.FINDLAST;
        AvgCostAdjmtEntryPoint.SETRANGE("Item No.",FromItemLedgEntry."Item No.");
        if not AvgCostAdjmtEntryPoint.IsAvgCostCalcTypeItem(ValueEntry."Valuation Date") then begin
          AvgCostAdjmtEntryPoint.SETRANGE("Variant Code",FromItemLedgEntry."Variant Code");
          AvgCostAdjmtEntryPoint.SETRANGE("Location Code",FromItemLedgEntry."Location Code");
        end;
        AvgCostAdjmtEntryPoint.SETRANGE("Valuation Date",ValueEntry."Valuation Date",DMY2DATE(31,12,9999));
        if AvgCostAdjmtEntryPoint.FINDFIRST then
          MaxValuationDate := AvgCostAdjmtEntryPoint."Valuation Date"
      end;

      TrackChain := true;
      ItemLedgEntryInChain.RESET;
      ItemLedgEntryInChain.DELETEALL;
      DummyItemLedgEntry.INIT;
      DummyItemLedgEntry."Entry No." := -1;
      CheckIsCyclicalLoop(DummyItemLedgEntry,FromItemLedgEntry);
      if ItemLedgEntryInChainNo.FINDSET then
        repeat
          ToItemLedgEntry.GET(ItemLedgEntryInChainNo.Number);
          ItemLedgEntryInChain := ToItemLedgEntry;
          ItemLedgEntryInChain.INSERT;
        until ItemLedgEntryInChainNo.NEXT = 0;
    END;

    [External]
    PROCEDURE OutboundApplied@12(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record "Item Application Entry";
      ItemEntry@1000 : Record "Item Ledger Entry";
      OriginalEntry@1004 : Record "Item Ledger Entry";
      Quantity@1003 : Decimal;
    BEGIN
      if not OriginalEntry.GET(EntryNo) then
        exit(0);
      if OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer then
        exit(0);
      Applications.SETCURRENTKEY("Outbound Item Entry No.");
      Applications.SETRANGE("Outbound Item Entry No.",EntryNo);
      Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      if Applications.FINDSET then
        repeat
          if ItemEntry.GET(Applications."Inbound Item Entry No.") then
            if SameType then begin
              if ItemEntry."Entry Type" = OriginalEntry."Entry Type" then
                Quantity := Quantity + Applications.Quantity
            end else
              Quantity := Quantity + Applications.Quantity;
        until Applications.NEXT <= 0;
      exit(Quantity);
    END;

    [External]
    PROCEDURE InboundApplied@13(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record "Item Application Entry";
      ItemEntry@1000 : Record "Item Ledger Entry";
      OriginalEntry@1004 : Record "Item Ledger Entry";
      Quantity@1003 : Decimal;
    BEGIN
      if not OriginalEntry.GET(EntryNo) then
        exit(0);
      if OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer then
        exit(0);
      Applications.SETCURRENTKEY("Inbound Item Entry No.");
      Applications.SETFILTER("Outbound Item Entry No.",'<>%1',0);
      Applications.SETRANGE("Inbound Item Entry No.",EntryNo);
      if OriginalEntry.Quantity < 0 then
        Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      if Applications.FINDSET then
        repeat
          if ItemEntry.GET(Applications."Outbound Item Entry No.") then
            if SameType then begin
              if (ItemEntry."Entry Type" = OriginalEntry."Entry Type") or
                 (ItemEntry."Applies-to Entry" <> 0)
              then
                Quantity := Quantity + Applications.Quantity
            end else
              Quantity := Quantity + Applications.Quantity;
        until Applications.NEXT = 0;
      exit(Quantity);
    END;

    [External]
    PROCEDURE Returned@14(EntryNo@1002 : Integer) : Decimal;
    BEGIN
      exit(-OutboundApplied(EntryNo,true) - InboundApplied(EntryNo,true));
    END;

    [External]
    PROCEDURE ExistsBetween@1102601000(ILE1@1102601000 : Integer;ILE2@1102601001 : Integer) : Boolean;
    VAR
      Applications@1102601002 : Record "Item Application Entry";
    BEGIN
      Applications.SETRANGE("Inbound Item Entry No.",ILE1);
      Applications.SETRANGE("Outbound Item Entry No.",ILE2);
      if not Applications.ISEMPTY then
        exit(true);
      Applications.SETRANGE("Inbound Item Entry No.",ILE2);
      Applications.SETRANGE("Outbound Item Entry No.",ILE1);
      exit(not Applications.ISEMPTY);
    END;

    LOCAL PROCEDURE IsItemEverOutput@16(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      exit(not ItemLedgEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE SetOutboundsNotUpdated@110(ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemApplnEntry@1001 : Record "Item Application Entry";
    BEGIN
      if not (ItemLedgEntry."Applied Entry to Adjust" or ItemLedgEntry.Open) then
        exit;

      if ItemLedgEntry.Quantity < 0 then
        exit;

      ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgEntry."Entry No.");
      ItemApplnEntry.MODIFYALL("Outbound Entry is Updated",false);
    END;

    [External]
    PROCEDURE SetInboundToUpdated@84(ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemApplnEntry@1001 : Record "Item Application Entry";
    BEGIN
      ItemApplnEntry.SETRANGE("Outbound Item Entry No.",ItemLedgEntry."Entry No.");
      if ItemLedgEntry."Completely Invoiced" then
        if ItemApplnEntry.COUNT = 1 then begin
          ItemApplnEntry.FINDFIRST;
          ItemApplnEntry."Outbound Entry is Updated" := true;
          ItemApplnEntry.MODIFY;
        end;
    END;

    [External]
    PROCEDURE IsAppliedFromIncrease@17(InbndItemLedgEntryNo@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      SETRANGE("Item Ledger Entry No.",InbndItemLedgEntryNo);
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      SETRANGE("Cost Application",true);
      exit(FINDFIRST);
    END;

    LOCAL PROCEDURE CheckLatestItemLedgEntryValuationDate@18(ItemLedgerEntryNo@1000 : Integer;MaxDate@1001 : Date) : Boolean;
    VAR
      ValueEntry@1002 : Record "Value Entry";
    BEGIN
      if MaxDate = 0D then
        exit(true);
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Valuation Date");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
      ValueEntry.FINDLAST;
      exit(ValueEntry."Valuation Date" <= MaxDate);
    END;

    BEGIN
    END.
  }
}

