OBJECT Codeunit 99000808 PlanningRoutingManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Circular reference in line %1 when calculating %2. Counted sequences %3. Max. sequences %4.';
      Text001@1001 : TextConst 'ENU=back';
      Text002@1002 : TextConst 'ENU=Actual number of termination processes in line %1 is %2. They should be 1. Check %3.';
      Text003@1003 : TextConst 'ENU=Actual number of start processes in line %1 is %2. They should be 1. Check %3.';
      Text004@1004 : TextConst 'ENU=Not all routing lines are sequenced backwards on line %1. Check %2.';
      NotAllRoutingLineSequencedForwardErr@1005 : TextConst '@@@="%1: Field(Line No.); %2 Text ErrList:";ENU=Not all routing lines are sequenced forward on line %1. Check the %2.';
      Text006@1006 : TextConst 'ENU=Previous operations for %1 cannot be found.';
      Text007@1007 : TextConst 'ENU=Next operations for %1 cannot be found.';
      ErrList@1008 : Text[50];

    [External]
    PROCEDURE NeedsCalculation@8(WkShName@1000 : Code[10];BatchName@1001 : Code[10];LineNo@1002 : Integer) : Boolean;
    VAR
      PlanningRtngLine@1003 : Record "Planning Routing Line";
    BEGIN
      PlanningRtngLine.SETRANGE("Worksheet Template Name",WkShName);
      PlanningRtngLine.SETRANGE("Worksheet Batch Name",BatchName);
      PlanningRtngLine.SETRANGE("Worksheet Line No.",LineNo);
      PlanningRtngLine.SETRANGE(Recalculate,true);

      exit(PlanningRtngLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ErrorInRouting@1(LineNo@1000 : Integer;Direction@1001 : Text[20];ActualSequence@1002 : Integer;MaxSequences@1003 : Integer);
    BEGIN
      ERROR(
        Text000,
        LineNo,Direction,ActualSequence,MaxSequences);
    END;

    LOCAL PROCEDURE InsertInErrList@10(PlanningRtngLine@1000 : Record "Planning Routing Line");
    BEGIN
      if (STRLEN(ErrList) + STRLEN(PlanningRtngLine."Operation No.") + 1) > MAXSTRLEN(ErrList) then
        exit;

      if STRLEN(ErrList) > 0 then
        ErrList := ErrList + ',' + PlanningRtngLine."Operation No."
      else
        ErrList := PlanningRtngLine."Operation No.";
    END;

    [External]
    PROCEDURE SetRtngLineSequenceBack@6(RoutingType@1000 : 'Serial,Parallel';PlanningRtngLine@1001 : Record "Planning Routing Line";Maxsequences@1002 : Integer;Actsequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      PlanningRtngLine2@1005 : Record "Planning Routing Line";
      SequenceNo@1006 : Integer;
    BEGIN
      if RoutingType = RoutingType::Parallel then begin
        if (Actsequences - 1) > Maxsequences then
          ErrorInRouting(
            PlanningRtngLine."Worksheet Line No.",Text001,Actsequences,Maxsequences);

        if TotalCalculation then
          PlanningRtngLine."Sequence No.(Backward)" := 1
        else
          PlanningRtngLine."Sequence No. (Actual)" := 1;

        PlanningRtngLine2.SETRANGE("Worksheet Template Name",PlanningRtngLine."Worksheet Template Name");
        PlanningRtngLine2.SETRANGE("Worksheet Batch Name",PlanningRtngLine."Worksheet Batch Name");
        PlanningRtngLine2.SETRANGE("Worksheet Line No.",PlanningRtngLine."Worksheet Line No.");
        if PlanningRtngLine."Next Operation No." <> '' then begin
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Next Operation No.");
          if PlanningRtngLine2.FIND('-') then
            repeat
              if TotalCalculation then begin
                if (PlanningRtngLine2."Sequence No.(Backward)" + 1) > PlanningRtngLine."Sequence No.(Backward)" then
                  PlanningRtngLine."Sequence No.(Backward)" := PlanningRtngLine2."Sequence No.(Backward)" + 1;
              end else begin
                if (PlanningRtngLine2."Sequence No. (Actual)" + 1) > PlanningRtngLine."Sequence No. (Actual)" then
                  PlanningRtngLine."Sequence No. (Actual)" := PlanningRtngLine2."Sequence No. (Actual)" + 1;
              end;
            until PlanningRtngLine2.NEXT = 0;
        end;
        PlanningRtngLine.MODIFY;

        if PlanningRtngLine."Previous Operation No." <> '' then begin
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Previous Operation No.");
          if PlanningRtngLine2.FIND('-') then
            repeat
              SetRtngLineSequenceBack(
                RoutingType,
                PlanningRtngLine2,
                Maxsequences,
                Actsequences + 1,
                TotalCalculation);
            until PlanningRtngLine2.NEXT = 0;
        end;
      end else begin
        SequenceNo := 1;
        PlanningRtngLine2 := PlanningRtngLine;
        PlanningRtngLine2.SETRANGE("Worksheet Template Name",PlanningRtngLine."Worksheet Template Name");
        PlanningRtngLine2.SETRANGE("Worksheet Batch Name",PlanningRtngLine."Worksheet Batch Name");
        PlanningRtngLine2.SETRANGE("Worksheet Line No.",PlanningRtngLine."Worksheet Line No.");
        if PlanningRtngLine2.FIND then
          repeat
            if TotalCalculation then
              PlanningRtngLine2."Sequence No.(Backward)" := SequenceNo
            else
              PlanningRtngLine2."Sequence No. (Actual)" := SequenceNo;
            PlanningRtngLine2.MODIFY;
            SequenceNo := SequenceNo + 1;
          until PlanningRtngLine2.NEXT(-1) = 0;
      end;
    END;

    [External]
    PROCEDURE SetRtngLineSequenceForward@7(RoutingType@1000 : 'Serial,Parallel';PlanningRtngLine@1001 : Record "Planning Routing Line";MaxSequences@1002 : Integer;ActSequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      PlanningRtngLine2@1005 : Record "Planning Routing Line";
      SequenceNo@1006 : Integer;
    BEGIN
      if RoutingType = RoutingType::Parallel then begin
        if ActSequences > MaxSequences then
          ErrorInRouting(
            PlanningRtngLine."Worksheet Line No.",Text001,ActSequences,MaxSequences);

        if TotalCalculation then
          PlanningRtngLine."Sequence No.(Forward)" := 1
        else
          PlanningRtngLine."Sequence No. (Actual)" := 1;

        PlanningRtngLine2.SETRANGE("Worksheet Template Name",PlanningRtngLine."Worksheet Template Name");
        PlanningRtngLine2.SETRANGE("Worksheet Batch Name",PlanningRtngLine."Worksheet Batch Name");
        PlanningRtngLine2.SETRANGE("Worksheet Line No.",PlanningRtngLine."Worksheet Line No.");
        if PlanningRtngLine."Previous Operation No." <> '' then begin
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Previous Operation No.");
          if PlanningRtngLine2.FIND('-') then
            repeat
              if TotalCalculation then begin
                if (PlanningRtngLine2."Sequence No.(Forward)" + 1) > PlanningRtngLine."Sequence No.(Forward)" then
                  PlanningRtngLine."Sequence No.(Forward)" := PlanningRtngLine2."Sequence No.(Forward)" + 1;
              end else begin
                if (PlanningRtngLine2."Sequence No. (Actual)" + 1) > PlanningRtngLine."Sequence No. (Actual)" then
                  PlanningRtngLine."Sequence No. (Actual)" := PlanningRtngLine2."Sequence No. (Actual)" + 1;
              end;
            until PlanningRtngLine2.NEXT = 0;
        end;
        PlanningRtngLine.MODIFY;

        if PlanningRtngLine."Next Operation No." <> '' then begin
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Next Operation No.");
          if PlanningRtngLine2.FIND('-') then
            repeat
              SetRtngLineSequenceForward(
                RoutingType,
                PlanningRtngLine2,
                MaxSequences,
                ActSequences + 1,
                TotalCalculation);
            until PlanningRtngLine2.NEXT = 0;
        end;
      end else begin
        SequenceNo := 1;
        PlanningRtngLine2 := PlanningRtngLine;
        PlanningRtngLine2.SETRANGE("Worksheet Template Name",PlanningRtngLine."Worksheet Template Name");
        PlanningRtngLine2.SETRANGE("Worksheet Batch Name",PlanningRtngLine."Worksheet Batch Name");
        PlanningRtngLine2.SETRANGE("Worksheet Line No.",PlanningRtngLine."Worksheet Line No.");
        if PlanningRtngLine2.FIND then
          repeat
            if TotalCalculation then
              PlanningRtngLine2."Sequence No.(Forward)" := SequenceNo
            else
              PlanningRtngLine2."Sequence No. (Actual)" := SequenceNo;
            PlanningRtngLine2.MODIFY;
            SequenceNo := SequenceNo + 1;
          until PlanningRtngLine2.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CalcSequenceBack@2(ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningRtngLine@1001 : Record "Planning Routing Line";
      MaxSeq@1002 : Integer;
    BEGIN
      PlanningRtngLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.",ReqLine."Line No.");

      PlanningRtngLine.MODIFYALL("Sequence No.(Backward)",0);
      PlanningRtngLine.MODIFYALL("Fixed Scrap Qty. (Accum.)",0);
      PlanningRtngLine.MODIFYALL("Scrap Factor % (Accumulated)",0);

      MaxSeq := PlanningRtngLine.COUNT;

      PlanningRtngLine.SETFILTER("Next Operation No.",'%1','');
      PlanningRtngLine.FINDFIRST;
      SetRtngLineSequenceBack(ReqLine."Routing Type",PlanningRtngLine,MaxSeq,1,true);
    END;

    LOCAL PROCEDURE CalcSequenceForward@3(ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningRtngLine@1001 : Record "Planning Routing Line";
      MaxSeq@1002 : Integer;
    BEGIN
      PlanningRtngLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.",ReqLine."Line No.");

      PlanningRtngLine.MODIFYALL("Sequence No.(Forward)",0);

      MaxSeq := PlanningRtngLine.COUNT;

      PlanningRtngLine.SETFILTER("Previous Operation No.",'%1','');
      PlanningRtngLine.FINDFIRST;
      SetRtngLineSequenceForward(ReqLine."Routing Type",PlanningRtngLine,MaxSeq,1,true);
    END;

    [External]
    PROCEDURE CalcSequenceFromActual@9(PlanningRtngLine@1000 : Record "Planning Routing Line";Direction@1001 : 'Forward,Backward';ReqLine@1002 : Record "Requisition Line");
    VAR
      PlanningRtngLine2@1003 : Record "Planning Routing Line";
      MaxSeq@1004 : Integer;
    BEGIN
      if NeedsCalculation(
           ReqLine."Worksheet Template Name",
           ReqLine."Journal Batch Name",
           ReqLine."Line No.")
      then
        Calculate(ReqLine);

      PlanningRtngLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningRtngLine2.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningRtngLine2.SETRANGE("Worksheet Line No.",ReqLine."Line No.");
      PlanningRtngLine2.MODIFYALL("Sequence No. (Actual)",0);

      MaxSeq := PlanningRtngLine2.COUNT;

      case Direction of
        Direction::Forward:
          SetRtngLineSequenceForward(ReqLine."Routing Type",PlanningRtngLine,MaxSeq,1,false);
        Direction::Backward:
          SetRtngLineSequenceBack(ReqLine."Routing Type",PlanningRtngLine,MaxSeq,1,false);
      end;
    END;

    [External]
    PROCEDURE Calculate@4(ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningRtngLine@1001 : Record "Planning Routing Line";
      PlanningRtngLine2@1002 : Record "Planning Routing Line";
      CalcScrapFactor@1003 : Decimal;
      CalcScrapQty@1004 : Decimal;
      ScrapFactorThis@1005 : Decimal;
      ScrapQtyThis@1006 : Decimal;
    BEGIN
      CalcSequenceBack(ReqLine);
      CalcSequenceForward(ReqLine);

      PlanningRtngLine.SETCURRENTKEY(
        "Worksheet Template Name",
        "Worksheet Batch Name",
        "Worksheet Line No.",
        "Sequence No.(Backward)");
      PlanningRtngLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.",ReqLine."Line No.");
      if PlanningRtngLine.FIND('-') then
        repeat
          if PlanningRtngLine."Next Operation No." <> '' then begin
            PlanningRtngLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
            PlanningRtngLine2.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
            PlanningRtngLine2.SETRANGE("Worksheet Line No.",ReqLine."Line No.");
            PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Next Operation No.");
            CalcScrapFactor := 0;
            CalcScrapQty := 0;
            if PlanningRtngLine2.FIND('-') then
              repeat
                ScrapFactorThis :=
                  PlanningRtngLine2."Scrap Factor % (Accumulated)";
                ScrapQtyThis :=
                  PlanningRtngLine2."Fixed Scrap Qty. (Accum.)";
                CalcScrapFactor := CalcScrapFactor + ScrapFactorThis;
                CalcScrapQty := CalcScrapQty + ScrapQtyThis;
              until PlanningRtngLine2.NEXT = 0;
          end;
          if CalcScrapFactor <> 0 then begin
            if PlanningRtngLine."Scrap Factor %" <> 0 then
              CalcScrapFactor :=
                ROUND((1 + CalcScrapFactor) *
                  (1 + PlanningRtngLine."Scrap Factor %" / 100),0.00001) - 1;
          end else
            CalcScrapFactor :=
              ROUND(1 + PlanningRtngLine."Scrap Factor %" / 100,0.00001) - 1;
          CalcScrapQty := CalcScrapQty + PlanningRtngLine."Fixed Scrap Quantity";
          PlanningRtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
          PlanningRtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
          PlanningRtngLine.MODIFY;
        until PlanningRtngLine.NEXT = 0;

      PlanningRtngLine.MODIFYALL(Recalculate,false);
      Check(ReqLine);
    END;

    LOCAL PROCEDURE Check@5(ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningRtngLine@1001 : Record "Planning Routing Line";
      PlanningRtngLine2@1002 : Record "Planning Routing Line";
      NoOfProcesses@1003 : Integer;
    BEGIN
      PlanningRtngLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.",ReqLine."Line No.");

      PlanningRtngLine.SETFILTER("Next Operation No.",'%1','');

      NoOfProcesses := PlanningRtngLine.COUNT;
      if NoOfProcesses <> 1 then begin
        repeat
          InsertInErrList(PlanningRtngLine);
        until PlanningRtngLine.NEXT = 0;
        ERROR(
          Text002,
          ReqLine."Line No.",
          NoOfProcesses,
          ErrList);
      end;

      PlanningRtngLine.SETFILTER("Previous Operation No.",'%1','');
      PlanningRtngLine.SETRANGE("Next Operation No.");
      NoOfProcesses := PlanningRtngLine.COUNT;
      if NoOfProcesses <> 1 then begin
        repeat
          InsertInErrList(PlanningRtngLine);
        until PlanningRtngLine.NEXT = 0;
        ERROR(
          Text003,
          ReqLine."Line No.",
          NoOfProcesses,
          ErrList);
      end;
      PlanningRtngLine.SETRANGE("Previous Operation No.");

      PlanningRtngLine.SETRANGE("Sequence No.(Backward)",0);
      if PlanningRtngLine.FIND('-') then begin
        repeat
          InsertInErrList(PlanningRtngLine);
        until PlanningRtngLine.NEXT = 0;
        ERROR(
          Text004,
          ReqLine."Line No.",
          ErrList);
      end;
      PlanningRtngLine.SETRANGE("Sequence No.(Backward)");

      PlanningRtngLine.SETRANGE("Sequence No.(Forward)",0);
      if PlanningRtngLine.FIND('-') then begin
        repeat
          InsertInErrList(PlanningRtngLine);
        until PlanningRtngLine.NEXT = 0;
        ERROR(
          NotAllRoutingLineSequencedForwardErr,
          ReqLine."Line No.",
          ErrList);
      end;
      PlanningRtngLine.SETRANGE("Sequence No.(Forward)");

      PlanningRtngLine.SETCURRENTKEY(
        "Worksheet Template Name",
        "Worksheet Batch Name",
        "Worksheet Line No.",
        "Sequence No.(Backward)");
      PlanningRtngLine.SETFILTER("Previous Operation No.",'<>%1','');

      if PlanningRtngLine.FIND('-') then
        repeat
          PlanningRtngLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
          PlanningRtngLine2.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
          PlanningRtngLine2.SETRANGE("Worksheet Line No.",ReqLine."Line No.");
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Previous Operation No.");
          if PlanningRtngLine2.ISEMPTY then
            ERROR(
              Text006,
              PlanningRtngLine."Operation No.");
        until PlanningRtngLine.NEXT = 0;

      PlanningRtngLine.SETCURRENTKEY(
        "Worksheet Template Name",
        "Worksheet Batch Name",
        "Worksheet Line No.",
        "Sequence No.(Backward)");

      PlanningRtngLine.SETFILTER("Next Operation No.",'<>%1','');
      PlanningRtngLine.SETRANGE("Operation No.");

      if PlanningRtngLine.FIND('-') then
        repeat
          PlanningRtngLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
          PlanningRtngLine2.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
          PlanningRtngLine2.SETRANGE("Worksheet Line No.",ReqLine."Line No.");
          PlanningRtngLine2.SETFILTER("Operation No.",PlanningRtngLine."Next Operation No.");
          if PlanningRtngLine2.ISEMPTY then
            ERROR(Text007,PlanningRtngLine."Worksheet Line No.");
        until PlanningRtngLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

