OBJECT Codeunit 2161 Calendar Event Execution
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Calendar Event"=rimd;
    OnRun=BEGIN
            RunCalendarEvents;
          END;

  }
  CODE
  {
    VAR
      ProcessCalendarTxt@1000 : TextConst 'ENU=Run Calendar Event';
      UnknownStateTxt@1001 : TextConst 'ENU=The event completed in an unknown state.';

    PROCEDURE RunCalendarEvents@6();
    VAR
      CalendarEvent@1000 : Record "Calendar Event";
      JobQueueEntry@1001 : Record "Job Queue Entry";
      CalendarEventMangement@1002 : Codeunit "Calendar Event Mangement";
    BEGIN
      CalendarEvent.SETRANGE("Scheduled Date",0D,TODAY);
      CalendarEvent.SETRANGE(Archived,false);
      CalendarEvent.SETRANGE(User,USERID);

      if not CalendarEvent.FINDSET then begin
        // This may happen the first time we run (i.e. after the job queue has been created)
        // UpdateJobQueue will now set the next run date to a good one.
        if CalendarEventMangement.FindJobQueue(JobQueueEntry) then // should always be called from a job queue so we should not create a new one
          CalendarEventMangement.UpdateJobQueue(JobQueueEntry);
        exit;
      end;

      repeat
        RunCalendarEvent(CalendarEvent);
      until CalendarEvent.NEXT = 0;

      // Update the job queue entry if there are more events
      // Otherwise it will be rescheduled when an event is inserted
      CalendarEvent.SETRANGE("Scheduled Date");
      CalendarEventMangement.FindJobQueue(JobQueueEntry);

      if CalendarEvent.ISEMPTY then
        CalendarEventMangement.SetJobQueueOnHold(JobQueueEntry)
      else
        CalendarEventMangement.UpdateJobQueue(JobQueueEntry);
    END;

    LOCAL PROCEDURE RunCalendarEvent@12(VAR CalendarEvent@1000 : Record "Calendar Event");
    VAR
      ActivityLog@1002 : Record "Activity Log";
      Result@1001 : Boolean;
    BEGIN
      // Execute
      Result := RunCodeunit(CalendarEvent);
      CalendarEvent.LOCKTABLE(true);
      if not CalendarEvent.FIND then begin // The event may have been removed while we executed it
        ActivityLog.LogActivity(CalendarEvent,ActivityLog.Status::Failed,ProcessCalendarTxt,CalendarEvent.Description,UnknownStateTxt);
        COMMIT;
        exit;
      end;

      // Log
      if Result then begin
        if CalendarEvent.Type = CalendarEvent.Type::System then begin
          CalendarEvent.DELETE;
          COMMIT;
          exit;
        end;
        ActivityLog.LogActivity(CalendarEvent,ActivityLog.Status::Success,ProcessCalendarTxt,CalendarEvent.Description,'');
        CalendarEvent.VALIDATE(State,CalendarEvent.State::Completed);
      end else begin
        ActivityLog.LogActivity(CalendarEvent,ActivityLog.Status::Failed,ProcessCalendarTxt,CalendarEvent.Description,'');
        CalendarEvent.VALIDATE(State,CalendarEvent.State::Failed);
      end;

      // Mark as complete
      CalendarEvent.VALIDATE(Archived,true);
      CalendarEvent.MODIFY(true);

      COMMIT; // may error if we have delayed inserts - this entry will be skipped when the job queue reruns
    END;

    LOCAL PROCEDURE RunCodeunit@8(VAR CalendarEvent@1000 : Record "Calendar Event") : Boolean;
    VAR
      AllObjWithCaption@1002 : Record AllObjWithCaption;
      CalendarEventCopy@1004 : Record "Calendar Event";
      Result@1005 : Boolean;
    BEGIN
      if not AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Codeunit,CalendarEvent."Object ID to Run") then
        exit(false);

      if CalendarEvent.Archived then // Sanity check
        exit(false);

      if CalendarEvent.State <> CalendarEvent.State::Queued then // Sanity check
        exit(false);

      CalendarEvent.VALIDATE(State,CalendarEvent.State::"In Progress");
      CalendarEvent.MODIFY(true);
      COMMIT; // Now if an error occurs related to this entry we will not run it again (even if the job queue is reran)

      CalendarEventCopy := CalendarEvent;
      Result := CODEUNIT.RUN(CalendarEvent."Object ID to Run",CalendarEventCopy);

      // Write back allowed changes from the event
      if CalendarEventCopy.State = CalendarEventCopy.State::Failed then
        Result := false;

      if CalendarEventCopy.Result <> '' then
        CalendarEvent.Result := CalendarEventCopy.Result;

      exit(Result);
    END;

    BEGIN
    END.
  }
}

