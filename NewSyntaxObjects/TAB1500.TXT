OBJECT Table 1500 Workflow Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               Workflow@1000 : Record Workflow;
               TempWorkflowBuffer@1001 : TEMPORARY Record "Workflow Buffer";
             BEGIN
               if "Workflow Code" = '' then
                 ERROR('');
               CALCFIELDS(Template);
               if Template then
                 ERROR('');
               Workflow.GET("Workflow Code");
               Workflow.DELETE(true);

               TempWorkflowBuffer.COPY(Rec,true);
               TempWorkflowBuffer.SETRANGE("Category Code","Category Code");
               TempWorkflowBuffer.SETFILTER("Workflow Code",'<>%1&<>%2','',"Workflow Code");
               if TempWorkflowBuffer.ISEMPTY then begin
                 TempWorkflowBuffer.GET("Category Code",'');
                 TempWorkflowBuffer.DELETE(false);
               end;
             END;

    CaptionML=ENU=Workflow Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Category Code       ;Code20        ;TableRelation="Workflow Category".Code;
                                                   CaptionML=ENU=Category Code }
    { 2   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow.Code;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Workflow Code }
    { 3   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 4   ;   ;Description         ;Text100       ;CaptionML=ENU=Description;
                                                   Editable=false }
    { 6   ;   ;Template            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Workflow.Template WHERE (Code=FIELD("Workflow Code")));
                                                   CaptionML=ENU=Template;
                                                   Editable=false }
    { 7   ;   ;Enabled             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Workflow.Enabled WHERE (Code=FIELD("Workflow Code")));
                                                   CaptionML=ENU=Enabled;
                                                   Editable=false }
    { 8   ;   ;External Client ID  ;GUID          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Workflow Webhook Subscription"."Client Id" WHERE ("WF Definition Id"=FIELD("Workflow Code"),
                                                                                                                         Enabled=CONST(true)));
                                                   CaptionML=ENU=External Client ID;
                                                   Editable=false }
    { 9   ;   ;External Client Type;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Workflow Webhook Subscription"."Client Type" WHERE ("WF Definition Id"=FIELD("Workflow Code"),
                                                                                                                           Enabled=CONST(true)));
                                                   CaptionML=ENU=External Client Type;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Category Code","Workflow Code"         ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    LOCAL PROCEDURE InitBuffer@1(VAR TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer";Template@1001 : Boolean);
    VAR
      Workflow@1002 : Record Workflow;
    BEGIN
      DELETEALL(false);
      Workflow.SETRANGE(Template,Template);
      if Workflow.FINDSET then
        repeat
          if not TempWorkflowBuffer.GET(Workflow.Category,'') then
            AddCategory(TempWorkflowBuffer,Workflow.Category);
          AddWorkflow(TempWorkflowBuffer,Workflow.Category,Workflow.Code);
        until Workflow.NEXT = 0;
    END;

    [External]
    PROCEDURE InitBufferForWorkflows@2(VAR TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer");
    BEGIN
      InitBuffer(TempWorkflowBuffer,false);
    END;

    [External]
    PROCEDURE InitBufferForTemplates@3(VAR TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer");
    BEGIN
      InitBuffer(TempWorkflowBuffer,true);
    END;

    LOCAL PROCEDURE AddCategory@4(VAR TempWorkflowBuffer@1001 : TEMPORARY Record "Workflow Buffer";CategoryCode@1000 : Code[20]);
    BEGIN
      InsertRec(TempWorkflowBuffer,CategoryCode,'',0);
    END;

    LOCAL PROCEDURE AddWorkflow@5(VAR TempWorkflowBuffer@1002 : TEMPORARY Record "Workflow Buffer";CategoryCode@1000 : Code[20];WorkflowCode@1001 : Code[20]);
    BEGIN
      InsertRec(TempWorkflowBuffer,CategoryCode,WorkflowCode,1);
    END;

    LOCAL PROCEDURE InsertRec@6(VAR TempWorkflowBuffer@1003 : TEMPORARY Record "Workflow Buffer";CategoryCode@1000 : Code[20];WorkflowCode@1001 : Code[20];Indent@1002 : Integer);
    VAR
      Workflow@1004 : Record Workflow;
      WorkflowCategory@1005 : Record "Workflow Category";
    BEGIN
      TempWorkflowBuffer.INIT;
      TempWorkflowBuffer."Category Code" := CategoryCode;
      TempWorkflowBuffer."Workflow Code" := WorkflowCode;
      TempWorkflowBuffer.Indentation := Indent;
      if WorkflowCode = '' then begin
        if WorkflowCategory.GET(CategoryCode) then
          TempWorkflowBuffer.Description := WorkflowCategory.Description
      end else
        if Workflow.GET(WorkflowCode) then
          TempWorkflowBuffer.Description := Workflow.Description;

      if TempWorkflowBuffer.INSERT then;
    END;

    [External]
    PROCEDURE CopyWorkflow@7(WorkflowBuffer@1003 : Record "Workflow Buffer");
    VAR
      FromWorkflow@1000 : Record Workflow;
      ToWorkflow@1001 : Record Workflow;
      CopyWorkflow@1002 : Report "Copy Workflow";
    BEGIN
      if not FromWorkflow.GET(WorkflowBuffer."Workflow Code") then
        ERROR('');
      if FromWorkflow.Template or (INCSTR(FromWorkflow.Code) = '') then
        ToWorkflow.Code := COPYSTR(FromWorkflow.Code,1,MAXSTRLEN(ToWorkflow.Code) - 3) + '-01'
      else
        ToWorkflow.Code := FromWorkflow.Code;
      while ToWorkflow.GET(ToWorkflow.Code) do
        ToWorkflow.Code := INCSTR(ToWorkflow.Code);
      ToWorkflow.INIT;
      ToWorkflow.INSERT;
      CopyWorkflow.InitCopyWorkflow(FromWorkflow,ToWorkflow);
      CopyWorkflow.USEREQUESTPAGE(false);
      CopyWorkflow.RUN;
      PAGE.RUN(PAGE::Workflow,ToWorkflow);
    END;

    BEGIN
    END.
  }
}

