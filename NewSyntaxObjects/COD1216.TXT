OBJECT Codeunit 1216 Incoming Doc. with Data. Exch.
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Incoming Document";
    Permissions=TableData "Data Exch."=im;
    OnRun=BEGIN
            ProcessWithDataExch(Rec);
            RollbackIfErrors(Rec);

            FIND;
          END;

  }
  CODE
  {
    VAR
      AttachmentErr@1004 : TextConst 'ENU=You must select a file.';
      AttachmentEmptyErr@1003 : TextConst 'ENU=The file is empty.';
      SourceErr@1002 : TextConst 'ENU=Failed to prepare the file for data exchange.';
      ProcessFailedErr@1001 : TextConst 'ENU=Failed to process the file with data exchange.';

    LOCAL PROCEDURE ProcessWithDataExch@31(IncomingDocument@1005 : Record "Incoming Document");
    VAR
      DataExch@1001 : Record "Data Exch.";
      DataExchDef@1000 : Record "Data Exch. Def";
      DataExchangeType@1002 : Record "Data Exchange Type";
    BEGIN
      DataExch.INIT;
      DataExchangeType.GET(IncomingDocument."Data Exchange Type");
      DataExchDef.GET(DataExchangeType."Data Exch. Def. Code");

      if not SetSourceForDataExch(IncomingDocument,DataExch,DataExchDef) then
        ERROR(SourceErr);

      DataExch."Related Record" := IncomingDocument.RECORDID;
      if not DataExch.ImportToDataExch(DataExchDef) then
        ERROR(ProcessFailedErr);

      DataExchDef.ProcessDataExchange(DataExch);
    END;

    LOCAL PROCEDURE SetSourceForDataExch@127(IncomingDocument@1003 : Record "Incoming Document";VAR DataExch@1001 : Record "Data Exch.";DataExchDef@1000 : Record "Data Exch. Def") : Boolean;
    VAR
      IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
      Stream@1004 : InStream;
    BEGIN
      if DataExchDef."Ext. Data Handling Codeunit" <> 0 then begin
        DataExch."Related Record" := IncomingDocument.RECORDID;
        exit(DataExch.ImportFileContent(DataExchDef))
      end;

      // if no external data handling, use the attachments
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      IncomingDocumentAttachment.SETRANGE(Default,true);
      if not IncomingDocumentAttachment.FINDFIRST then
        ERROR(AttachmentErr);

      IncomingDocumentAttachment.CALCFIELDS(Content);
      if not IncomingDocumentAttachment.Content.HASVALUE then
        ERROR(AttachmentEmptyErr);

      IncomingDocumentAttachment.Content.CREATEINSTREAM(Stream);
      DataExch.InsertRec(IncomingDocumentAttachment.Name,Stream,DataExchDef.Code);
      DataExch.VALIDATE("Incoming Entry No.",IncomingDocument."Entry No.");
      DataExch.MODIFY(true);

      exit(true);
    END;

    LOCAL PROCEDURE RollbackIfErrors@1(VAR IncomingDocument@1001 : Record "Incoming Document");
    VAR
      ErrorMessage@1000 : Record "Error Message";
      TempErrorMessage@1002 : TEMPORARY Record "Error Message";
    BEGIN
      ErrorMessage.SetContext(IncomingDocument);
      if not ErrorMessage.HasErrors(false) then
        exit;

      // rollback if processing errors - preserve the errors
      ErrorMessage.SETRANGE("Context Record ID",IncomingDocument.RECORDID);
      ErrorMessage.CopyToTemp(TempErrorMessage);
      IncomingDocument.SaveErrorMessages(TempErrorMessage);

      // force rollback (errors will be restored in IncomingDocument)
      ERROR('');
    END;

    BEGIN
    END.
  }
}

