OBJECT Table 1206 Credit Transfer Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Account Type","Account No.","Transaction ID";
    CaptionML=ENU=Credit Transfer Entry;
    LookupPageID="Credit Transfer Reg. Entries";
    DrillDownPageID="Credit Transfer Reg. Entries";
  }
  FIELDS
  {
    { 1   ;   ;Credit Transfer Register No.;Integer;
                                                   TableRelation="Credit Transfer Register";
                                                   CaptionML=ENU=Credit Transfer Register No. }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 3   ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=Customer,Vendor,Employee;
                                                   OptionString=Customer,Vendor,Employee }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) Vendor;
                                                   CaptionML=ENU=Account No. }
    { 5   ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF ("Account Type"=CONST(Customer)) "Cust. Ledger Entry"
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Vendor Ledger Entry";
                                                   CaptionML=ENU=Applies-to Entry No. }
    { 6   ;   ;Transfer Date       ;Date          ;CaptionML=ENU=Transfer Date }
    { 7   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 8   ;   ;Transfer Amount     ;Decimal       ;CaptionML=ENU=Transfer Amount }
    { 9   ;   ;Transaction ID      ;Text35        ;CaptionML=ENU=Transaction ID }
    { 10  ;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Credit Transfer Register" WHERE ("No."=FIELD("Credit Transfer Register No."),
                                                                                                       Status=CONST(Canceled)));
                                                   CaptionML=ENU=Canceled }
    { 11  ;   ;Recipient Bank Acc. No.;Code50     ;CaptionML=ENU=Recipient Bank Acc. No. }
    { 12  ;   ;Message to Recipient;Text140       ;CaptionML=ENU=Message to Recipient }
  }
  KEYS
  {
    {    ;"Credit Transfer Register No.","Entry No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
      VendLedgerEntry@1001 : Record "Vendor Ledger Entry";
      EmployeeLedgerEntry@1002 : Record "Employee Ledger Entry";

    [External]
    PROCEDURE CreateNew@3(RegisterNo@1000 : Integer;EntryNo@1007 : Integer;GenJnlAccountType@1008 : Option;AccountNo@1001 : Code[20];LedgerEntryNo@1002 : Integer;TransferDate@1003 : Date;CurrencyCode@1004 : Code[10];TransferAmount@1005 : Decimal;TransActionID@1006 : Text[35];RecipientBankAccount@1010 : Code[10];MessageToRecipient@1011 : Text[140]);
    VAR
      GenJnlLine@1009 : Record "Gen. Journal Line";
    BEGIN
      "Credit Transfer Register No." := RegisterNo;
      if EntryNo = 0 then begin
        SETRANGE("Credit Transfer Register No.",RegisterNo);
        LOCKTABLE;
        if FINDLAST then;
        "Entry No." += 1;
      end else
        "Entry No." := EntryNo;
      INIT;
      GenJnlLine.INIT;
      case GenJnlAccountType of
        GenJnlLine."Account Type"::Customer:
          "Account Type" := "Account Type"::Customer;
        GenJnlLine."Account Type"::Vendor:
          "Account Type" := "Account Type"::Vendor;
        GenJnlLine."Account Type"::Employee:
          "Account Type" := "Account Type"::Employee;
      end;
      "Account No." := AccountNo;
      "Applies-to Entry No." := LedgerEntryNo;
      "Transfer Date" := TransferDate;
      "Currency Code" := CurrencyCode;
      "Transfer Amount" := TransferAmount;
      "Transaction ID" := TransActionID;
      "Recipient Bank Acc. No." := RecipientBankAccount;
      "Message to Recipient" := MessageToRecipient;
      INSERT;
    END;

    [External]
    PROCEDURE CreditorName@1() : Text;
    VAR
      Customer@1000 : Record Customer;
      Vendor@1001 : Record Vendor;
      Employee@1002 : Record Employee;
    BEGIN
      if "Account No." = '' then
        exit('');
      case "Account Type" of
        "Account Type"::Customer:
          begin
            if Customer.GET("Account No.") then
              exit(Customer.Name);
          end;
        "Account Type"::Vendor:
          begin
            if Vendor.GET("Account No.") then
              exit(Vendor.Name);
          end;
        "Account Type"::Employee:
          begin
            if Employee.GET("Account No.") then
              exit(Employee.FullName);
          end;
      end;
      exit('');
    END;

    [External]
    PROCEDURE GetRecipientIBANOrBankAccNo@4(GetIBAN@1002 : Boolean) : Text;
    VAR
      CustomerBankAccount@1000 : Record "Customer Bank Account";
      VendorBankAccount@1001 : Record "Vendor Bank Account";
      Employee@1003 : Record Employee;
    BEGIN
      if "Account No." = '' then
        exit('');

      case "Account Type" of
        "Account Type"::Customer:
          if CustomerBankAccount.GET("Account No.","Recipient Bank Acc. No.") then begin
            if GetIBAN then
              exit(CustomerBankAccount.IBAN);

            exit(CustomerBankAccount."Bank Account No.");
          end;
        "Account Type"::Vendor:
          if VendorBankAccount.GET("Account No.","Recipient Bank Acc. No.") then begin
            if GetIBAN then
              exit(VendorBankAccount.IBAN);

            exit(VendorBankAccount."Bank Account No.");
          end;
        "Account Type"::Employee:
          if Employee.GET("Account No.") then begin
            if GetIBAN then
              exit(Employee.IBAN);

            exit(Employee."Bank Account No.");
          end;
      end;

      exit('');
    END;

    LOCAL PROCEDURE GetAppliesToEntry@6(VAR CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer");
    BEGIN
      CVLedgerEntryBuffer.INIT;
      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          begin
            if CustLedgerEntry."Entry No." <> "Applies-to Entry No." then
              if CustLedgerEntry.GET("Applies-to Entry No.") then
                CustLedgerEntry.CALCFIELDS(Amount,"Remaining Amount")
              else
                CLEAR(CustLedgerEntry);
            CVLedgerEntryBuffer.CopyFromCustLedgEntry(CustLedgerEntry)
          end;
        "Account Type"::Vendor:
          begin
            if VendLedgerEntry."Entry No." <> "Applies-to Entry No." then
              if VendLedgerEntry.GET("Applies-to Entry No.") then
                VendLedgerEntry.CALCFIELDS(Amount,"Remaining Amount")
              else
                CLEAR(VendLedgerEntry);
            CVLedgerEntryBuffer.CopyFromVendLedgEntry(VendLedgerEntry)
          end;
        "Account Type"::Employee:
          begin
            if EmployeeLedgerEntry."Entry No." <> "Applies-to Entry No." then
              if EmployeeLedgerEntry.GET("Applies-to Entry No.") then
                EmployeeLedgerEntry.CALCFIELDS(Amount,"Remaining Amount")
              else
                CLEAR(EmployeeLedgerEntry);
            CVLedgerEntryBuffer.CopyFromEmplLedgEntry(EmployeeLedgerEntry)
          end;
      end;
    END;

    [External]
    PROCEDURE AppliesToEntryDocumentNo@2() : Code[20];
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer."Document No.");
    END;

    [External]
    PROCEDURE AppliesToEntryDescription@14() : Text;
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer.Description);
    END;

    [External]
    PROCEDURE AppliesToEntryPostingDate@15() : Date;
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer."Posting Date");
    END;

    [External]
    PROCEDURE AppliesToEntryCurrencyCode@16() : Code[10];
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer."Currency Code");
    END;

    [External]
    PROCEDURE AppliesToEntryAmount@17() : Decimal;
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer.Amount);
    END;

    [External]
    PROCEDURE AppliesToEntryRemainingAmount@18() : Decimal;
    VAR
      CVLedgerEntryBuffer@1000 : Record "CV Ledger Entry Buffer";
    BEGIN
      GetAppliesToEntry(CVLedgerEntryBuffer);
      exit(CVLedgerEntryBuffer."Remaining Amount");
    END;

    BEGIN
    END.
  }
}

