OBJECT Table 99008535 TempBlob
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=TempBlob;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Integer       ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Blob                ;BLOB          ;CaptionML=ENU=Blob }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GlobalInStream@1000 : InStream;
      ReadLinesInitialized@1001 : Boolean;

    [External]
    PROCEDURE WriteAsText@3(Content@1001 : Text;Encoding@1000 : TextEncoding);
    VAR
      OutStr@1002 : OutStream;
    BEGIN
      CLEAR(Blob);
      if Content = '' then
        exit;
      Blob.CREATEOUTSTREAM(OutStr,Encoding);
      OutStr.WRITETEXT(Content);
    END;

    [External]
    PROCEDURE ReadAsText@5(LineSeparator@1001 : Text;Encoding@1000 : TextEncoding) Content : Text;
    VAR
      InStream@1002 : InStream;
      ContentLine@1003 : Text;
    BEGIN
      Blob.CREATEINSTREAM(InStream,Encoding);

      InStream.READTEXT(Content);
      while not InStream.EOS do begin
        InStream.READTEXT(ContentLine);
        Content += LineSeparator + ContentLine;
      end;
    END;

    [External]
    PROCEDURE StartReadingTextLines@8(Encoding@1000 : TextEncoding);
    BEGIN
      Blob.CREATEINSTREAM(GlobalInStream,Encoding);
      ReadLinesInitialized := true;
    END;

    [External]
    PROCEDURE MoreTextLines@9() : Boolean;
    BEGIN
      if not ReadLinesInitialized then
        StartReadingTextLines(TEXTENCODING::Windows);
      exit(not GlobalInStream.EOS);
    END;

    [External]
    PROCEDURE ReadTextLine@7() : Text;
    VAR
      ContentLine@1003 : Text;
    BEGIN
      if not MoreTextLines then
        exit('');
      GlobalInStream.READTEXT(ContentLine);
      exit(ContentLine);
    END;

    [External]
    PROCEDURE ToBase64String@1() : Text;
    VAR
      IStream@1000 : InStream;
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Base64String@1001 : Text;
    BEGIN
      if not Blob.HASVALUE then
        exit('');
      Blob.CREATEINSTREAM(IStream);
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream,IStream);
      Base64String := Convert.ToBase64String(MemoryStream.ToArray);
      MemoryStream.Close;
      exit(Base64String);
    END;

    [External]
    PROCEDURE FromBase64String@2(Base64String@1000 : Text);
    VAR
      OStream@1001 : OutStream;
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      if Base64String = '' then
        exit;
      MemoryStream := MemoryStream.MemoryStream(Convert.FromBase64String(Base64String));
      Blob.CREATEOUTSTREAM(OStream);
      MemoryStream.WriteTo(OStream);
      MemoryStream.Close;
    END;

    [External]
    PROCEDURE GetHTMLImgSrc@4() : Text;
    VAR
      ImageFormatAsTxt@1000 : Text;
    BEGIN
      if not Blob.HASVALUE then
        exit('');
      if not TryGetImageFormatAsTxt(ImageFormatAsTxt) then
        exit('');
      exit(STRSUBSTNO('data:image/%1;base64,%2',ImageFormatAsTxt,ToBase64String));
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetImageFormatAsTxt@17(VAR ImageFormatAsTxt@1000 : Text);
    VAR
      Image@1002 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      ImageFormatConverter@1004 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.ImageFormatConverter";
      InStream@1001 : InStream;
    BEGIN
      Blob.CREATEINSTREAM(InStream);
      Image := Image.FromStream(InStream);
      ImageFormatConverter := ImageFormatConverter.ImageFormatConverter;
      ImageFormatAsTxt := ImageFormatConverter.ConvertToString(Image.RawFormat);
    END;

    BEGIN
    END.
  }
}

