OBJECT Table 9000 User Group
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataPerCompany=false;
    OnInsert=BEGIN
               TESTFIELD(Code);
               Customized := true;
             END;

    OnModify=BEGIN
               Customized := true;
             END;

    OnDelete=VAR
               UserGroupMember@1000 : Record "User Group Member";
             BEGIN
               UserGroupMember.SETRANGE("User Group Code",Code);
               if not UserGroupMember.ISEMPTY then
                 ERROR(HasMembersErr);
             END;

    OnRename=BEGIN
               Customized := true;
             END;

    CaptionML=ENU=User Group;
    LookupPageID="User Groups";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Default Profile ID  ;Code30        ;TableRelation="All Profile"."Profile ID";
                                                   CaptionML=ENU=Default Profile ID }
    { 4   ;   ;Assign to All New Users;Boolean    ;OnValidate=VAR
                                                                UserGroup@1000 : Record "User Group";
                                                                PermissionManager@1001 : Codeunit "Permission Manager";
                                                              BEGIN
                                                                if not PermissionManager.SoftwareAsAService then
                                                                  exit;

                                                                if "Assign to All New Users" = true then
                                                                  exit;

                                                                // When deselecting this option, if the last auto-assign user group is deselected,
                                                                // it means that new users will get no permissions
                                                                // and therefore they will not be able to login.
                                                                UserGroup.SETRANGE("Assign to All New Users",true);
                                                                UserGroup.SETFILTER(Code,'<>%1',Code);
                                                                if UserGroup.COUNT = 0 then
                                                                  if not CONFIRM(NewUsersCannotLoginQst) then
                                                                    ERROR('');
                                                              END;

                                                   CaptionML=ENU=Assign to All New Users }
    { 5   ;   ;Customized          ;Boolean       ;CaptionML=ENU=Customized;
                                                   Editable=false }
    { 6   ;   ;Default Profile App ID;GUID        ;CaptionML=ENU=Default Profile App ID }
    { 7   ;   ;Default Profile Scope;Option       ;CaptionML=ENU=Default Profile Scope;
                                                   OptionCaptionML=ENU=System,Tenant;
                                                   OptionString=System,Tenant }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HasMembersErr@1002 : TextConst 'ENU=You cannot delete this user group because it has members.';
      NewUsersCannotLoginQst@1000 : TextConst 'ENU=You have not specified a user group that will be assigned automatically to new users. If users are not assigned a user group, they cannot sign in. \\Do you want to continue?';

    [External]
    PROCEDURE IsUserMember@14(VAR User@1001 : Record User;SelectedCompany@1000 : Text[30]) : Boolean;
    VAR
      UserGroupMember@1002 : Record "User Group Member";
    BEGIN
      UserGroupMember.SETRANGE("User Group Code",Code);
      UserGroupMember.SETRANGE("User Security ID",User."User Security ID");
      UserGroupMember.SETRANGE("Company Name",SelectedCompany);
      exit(not UserGroupMember.ISEMPTY);
    END;

    [External]
    PROCEDURE SetUserGroupMembership@7(VAR User@1001 : Record User;NewUserGroupMembership@1003 : Boolean;SelectedCompany@1000 : Text[30]);
    VAR
      UserGroupMember@1002 : Record "User Group Member";
    BEGIN
      if UserGroupMember.GET(Code,User."User Security ID",SelectedCompany) then begin
        if not NewUserGroupMembership then
          UserGroupMember.DELETE(true);
        exit;
      end;
      if not NewUserGroupMembership then
        exit;
      UserGroupMember.INIT;
      UserGroupMember."User Group Code" := Code;
      UserGroupMember."User Security ID" := User."User Security ID";
      UserGroupMember."Company Name" := SelectedCompany;
      UserGroupMember.INSERT(true);
    END;

    [Internal]
    PROCEDURE ExportUserGroups@1(FileName@1000 : Text) : Text;
    VAR
      TempBlob@1004 : Record TempBlob;
      FileManagement@1003 : Codeunit "File Management";
      ExportImportUserGroups@1002 : XMLport "Export/Import User Groups";
      OutStr@1001 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      ExportImportUserGroups.SETDESTINATION(OutStr);
      ExportImportUserGroups.EXPORT;
      if FileName = '' then
        exit(FileManagement.BLOBExport(TempBlob,TABLECAPTION + '.xml',true));
      exit(FileManagement.BLOBExport(TempBlob,FileName,false));
    END;

    [Internal]
    PROCEDURE ImportUserGroups@2(FileName@1000 : Text);
    VAR
      TempBlob@1004 : Record TempBlob;
      FileManagement@1003 : Codeunit "File Management";
      ExportImportUserGroups@1002 : XMLport "Export/Import User Groups";
      InStr@1001 : InStream;
    BEGIN
      TempBlob.INIT;
      if FileManagement.BLOBImport(TempBlob,FileName) = '' then
        exit;
      TempBlob.Blob.CREATEINSTREAM(InStr);
      ExportImportUserGroups.SETSOURCE(InStr);
      ExportImportUserGroups.IMPORT;
    END;

    BEGIN
    END.
  }
}

