OBJECT Page 2318 BC O365 Sales Customer Card
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Contact;
    SourceTable=Customer;
    DataCaptionExpr=Name;
    PageType=Card;
    OnInit=VAR
             O365SalesInitialSetup@1000 : Record "O365 Sales Initial Setup";
           BEGIN
             if O365SalesInitialSetup.GET then
               IsUsingVAT := O365SalesInitialSetup.IsUsingVAT;
           END;

    OnOpenPage=BEGIN
                 SETRANGE("Date Filter",0D,WORKDATE);
               END;

    OnNewRecord=BEGIN
                  OnNewRec;
                END;

    OnInsertRecord=BEGIN
                     if Name = '' then
                       CustomerCardState := CustomerCardState::Prompt
                     else
                       CustomerCardState := CustomerCardState::Keep;

                     exit(true);
                   END;

    OnModifyRecord=BEGIN
                     if Name = '' then
                       CustomerCardState := CustomerCardState::Prompt
                     else
                       CustomerCardState := CustomerCardState::Keep;

                     exit(true);
                   END;

    OnDeleteRecord=BEGIN
                     O365SalesManagement.BlockCustomerAndDeleteContact(Rec);
                   END;

    OnQueryClosePage=BEGIN
                       exit(CanExitAfterProcessingCustomer);
                     END;

    OnAfterGetCurrRecord=VAR
                           TaxArea@1001 : Record "Tax Area";
                         BEGIN
                           CreateCustomerFromTemplate;

                           OverdueAmount := CalcOverdueBalance;

                           if TaxArea.GET("Tax Area Code") then
                             TaxAreaDescription := TaxArea.Description;
                         END;

    ActionList=ACTIONS
    {
      { 11      ;0   ;ActionContainer;
                      Name=ActionContainer11;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      Name=NewSalesInvoice;
                      CaptionML=ENU=New Invoice;
                      ToolTipML=ENU=Create a new invoice for the customer.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Visible=NewDocumentActionVisible;
                      Enabled=Name <> '';
                      PromotedIsBig=true;
                      Image=Invoicing-MDL-Invoice;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 O365SalesManagement.OpenNewInvoiceForCustomer(Rec);
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=NewSalesQuote;
                      CaptionML=ENU=New Estimate;
                      ToolTipML=ENU=Create an estimate for the customer.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Visible=NewDocumentActionVisible;
                      Enabled=Name <> '';
                      PromotedIsBig=true;
                      Image=Invoicing-MDL-Quote;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 O365SalesManagement.OpenNewQuoteForCustomer(Rec);
                               END;
                                }
      { 24      ;1   ;Action    ;
                      Name=Delete;
                      CaptionML=ENU=Delete;
                      ToolTipML=ENU=Delete the record.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Invoicing-MDL-Delete;
                      OnAction=BEGIN
                                 if not CONFIRM(DeleteQst,false) then
                                   exit;
                                 O365SalesManagement.BlockCustomerAndDeleteContact(Rec);
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=Basic Profile;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=Name;
                CaptionML=ENU=Contact Name;
                ToolTipML=ENU=Specifies the customer's name.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Name;
                Importance=Promoted;
                ImplicitType=Text50 }

    { 25  ;2   ;Field     ;
                Name=Contact Type;
                ToolTipML=ENU=Specifies if the contact is a company or a person.;
                OptionCaptionML=ENU=Company contact,Person;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Contact Type";
                OnValidate=BEGIN
                             VALIDATE("Prices Including VAT","Contact Type" = "Contact Type"::Person);
                           END;

                ImplicitType=Option }

    { 26  ;1   ;Group     ;
                Name=Contact Info;
                CaptionML=ENU=Contact Info;
                GroupType=Group }

    { 4   ;2   ;Field     ;
                Name=E-Mail;
                ExtendedDatatype=E-Mail;
                CaptionML=ENU=Email Address;
                ToolTipML=ENU=Specifies the customer's email address.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="E-Mail";
                Importance=Promoted;
                OnValidate=VAR
                             MailManagement@1000 : Codeunit "Mail Management";
                           BEGIN
                             if "E-Mail" <> '' then
                               MailManagement.CheckValidEmailAddress("E-Mail");
                           END;

                ImplicitType=Text80 }

    { 7   ;2   ;Field     ;
                Name=Phone No.;
                ToolTipML=ENU=Specifies the customer's telephone number.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Phone No.";
                Importance=Promoted;
                ImplicitType=Text30 }

    { 27  ;1   ;Group     ;
                Name=Business Address;
                CaptionML=ENU=Business Address;
                GroupType=Group }

    { 15  ;2   ;Field     ;
                Name=Address;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Address;
                ImplicitType=Text50 }

    { 17  ;2   ;Field     ;
                Name=Address 2;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Address 2";
                ImplicitType=Text50 }

    { 18  ;2   ;Field     ;
                Name=Post Code;
                Lookup=false;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Post Code";
                ImplicitType=Code20 }

    { 22  ;2   ;Field     ;
                Name=City;
                Lookup=false;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=City;
                ImplicitType=Text30 }

    { 20  ;2   ;Field     ;
                Name=County;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=County;
                ImplicitType=Text30 }

    { 23  ;2   ;Field     ;
                Name=Country/Region Code;
                ToolTipML=ENU=Specifies the country/region of the address.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Country/Region Code";
                ImplicitType=Code10 }

    { 28  ;1   ;Group     ;
                Name=Sales and Payments;
                CaptionML=ENU=Sales and Payments;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=Balance (LCY);
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Outstanding;
                ToolTipML=ENU=Specifies the customer's balance.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Balance (LCY)";
                AutoFormatType=10;
                AutoFormatExpr='1';
                ImplicitType=Decimal }

    { 6   ;2   ;Field     ;
                Name=OverdueAmount;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Overdue;
                ToolTipML=ENU=Specifies payments from the customer that are overdue per today's date.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=OverdueAmount;
                AutoFormatType=10;
                AutoFormatExpr='1';
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=OverdueAmount > 0;
                ImplicitType=Decimal }

    { 8   ;2   ;Field     ;
                Name=Sales (LCY);
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Total Sales (Excl. VAT);
                ToolTipML=ENU=Specifies the total net amount of sales to the customer in LCY.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sales (LCY)";
                AutoFormatType=10;
                AutoFormatExpr='1';
                ImplicitType=Decimal }

    { 13  ;2   ;Group     ;
                Name=Group13;
                Visible=("Contact Type" = "Contact Type"::Company) AND IsUsingVAT;
                GroupType=Group }

    { 21  ;3   ;Field     ;
                Name=VAT Registration No.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="VAT Registration No.";
                ImplicitType=Text20 }

    { 12  ;1   ;Group     ;
                Name=Tax Information;
                CaptionML=ENU=Tax;
                Visible=NOT IsUsingVAT;
                GroupType=Group }

    { 14  ;2   ;Field     ;
                Name=Tax Liable;
                ToolTipML=ENU=Specifies if the sales invoice contains sales tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Tax Liable";
                ImplicitType=Boolean }

    { 19  ;2   ;Field     ;
                Name=TaxAreaDescription;
                CaptionML=ENU=Tax Rate;
                ToolTipML=ENU=Specifies the customer's tax area.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=true;
                SourceExpr=TaxAreaDescription;
                Importance=Promoted;
                OnLookup=VAR
                           TaxArea@1001 : Record "Tax Area";
                         BEGIN
                           if PAGE.RUNMODAL(PAGE::"O365 Tax Area List",TaxArea) = ACTION::LookupOK then begin
                             VALIDATE("Tax Area Code",TaxArea.Code);
                             TaxAreaDescription := TaxArea.Description;
                           end;
                         END;

                ImplicitType=Text50;
                QuickEntry=FALSE }

  }
  CODE
  {
    VAR
      CustContUpdate@1006 : Codeunit "CustCont-Update";
      O365SalesManagement@1013 : Codeunit "O365 Sales Management";
      ProcessNewCustomerOptionQst@1001 : TextConst 'ENU=Keep editing,Discard';
      ProcessNewCustomerInstructionTxt@1003 : TextConst 'ENU=Name is missing. Keep the customer?';
      CustomerCardState@1000 : 'Keep,Delete,Prompt';
      NewMode@1007 : Boolean;
      IsUsingVAT@1005 : Boolean;
      NewDocumentActionVisible@1010 : Boolean;
      OverdueAmount@1008 : Decimal;
      TaxAreaDescription@1004 : Text[50];
      DeleteQst@1002 : TextConst 'ENU=Are you sure?';

    LOCAL PROCEDURE CanExitAfterProcessingCustomer@2() : Boolean;
    VAR
      Response@1001 : ',KeepEditing,Discard';
    BEGIN
      if "No." = '' then
        exit(true);

      if CustomerCardState = CustomerCardState::Delete then
        exit(DeleteCustomerRelatedData);

      if GUIALLOWED and (CustomerCardState = CustomerCardState::Prompt) then
        case STRMENU(ProcessNewCustomerOptionQst,Response::KeepEditing,ProcessNewCustomerInstructionTxt) of
          Response::Discard:
            exit(DeleteCustomerRelatedData);
          else
            exit(false);
        end;

      exit(true);
    END;

    LOCAL PROCEDURE DeleteCustomerRelatedData@4() : Boolean;
    BEGIN
      CustContUpdate.DeleteCustomerContacts(Rec);

      // workaround for bug: delete for new empty record returns false
      if DELETE(true) then;
      exit(true);
    END;

    LOCAL PROCEDURE OnNewRec@1();
    VAR
      DocumentNoVisibility@1000 : Codeunit DocumentNoVisibility;
    BEGIN
      if GUIALLOWED and DocumentNoVisibility.CustomerNoSeriesIsDefault then
        NewMode := true;
    END;

    LOCAL PROCEDURE CreateCustomerFromTemplate@3();
    VAR
      MiniCustomerTemplate@1001 : Record "Mini Customer Template";
      Customer@1000 : Record Customer;
    BEGIN
      if NewMode then begin
        if MiniCustomerTemplate.NewCustomerFromTemplate(Customer) then begin
          COPY(Customer);
          CurrPage.UPDATE;
        end;
        CustomerCardState := CustomerCardState::Delete;
        NewMode := false;
      end;
    END;

    PROCEDURE SetNewDocumentActionsVisible@5();
    BEGIN
      NewDocumentActionVisible := true;
    END;

    BEGIN
    END.
  }
}

