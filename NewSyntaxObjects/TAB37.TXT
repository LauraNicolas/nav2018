OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               if Quantity <> 0 then begin
                 OnBeforeVerifyReservedQty(Rec,xRec,0);
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               end;
               LOCKTABLE;
               SalesHeader."No." := '';
               if Type = Type::Item then
                 if SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") then
                   ERROR(Text056,SalesHeader."Shipping Advice");
               if ("Deferral Code" <> '') and (GetDeferralAmount <> 0) then
                 UpdateDeferralAmounts;
             END;

    OnModify=BEGIN
               if ("Document Type" = "Document Type"::"Blanket Order") and
                  ((Type <> xRec.Type) or ("No." <> xRec."No."))
               then begin
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 if SalesLine2.FINDSET then
                   repeat
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   until SalesLine2.NEXT = 0;
               end;

               if ((Quantity <> 0) or (xRec.Quantity <> 0)) and ItemExists(xRec."No.") and not FullReservedQtyIsForAsmToOrder then
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               SalesCommentLine@1001 : Record "Sales Comment Line";
               CapableToPromise@1000 : Codeunit "Capable to Promise";
               JobCreateInvoice@1002 : Codeunit "Job Create-Invoice";
             BEGIN
               TestStatusOpen;
               if not StatusCheckSuspended and (SalesHeader.Status = SalesHeader.Status::Released) and
                  (Type in [Type::"G/L Account",Type::"Charge (Item)",Type::Resource])
               then
                 VALIDATE(Quantity,0);

               if (Quantity <> 0) and ItemExists("No.") then begin
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 if "Shipment No." = '' then
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 if "Return Receipt No." = '' then
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               end;

               if ("Document Type" = "Document Type"::Order) and (Quantity <> "Quantity Invoiced") then
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               CleanSpecialOrderFieldsAndCheckAssocPurchOrder;
               NonstockItemMgt.DelNonStockSales(Rec);

               if "Document Type" = "Document Type"::"Blanket Order" then begin
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 if SalesLine2.FINDFIRST then
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               end;

               if Type = Type::Item then begin
                 ATOLink.DeleteAsmFromSalesLine(Rec);
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
               end;

               if Type = Type::"Charge (Item)" then
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,false);

               if "Line No." <> 0 then begin
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETRANGE("Attached to Line No.","Line No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 SalesLine2.DELETEALL(true);
               end;

               if "Job Contract Entry No." <> 0 then
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               if not SalesCommentLine.ISEMPTY then
                 SalesCommentLine.DELETEALL;

               if ("Line No." <> 0) and ("Attached to Line No." = 0) then begin
                 SalesLine2.COPY(Rec);
                 SalesLine2.SETRANGE("Document No.",SalesLine2."Document No.");
                 SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type");
                 if SalesLine2.FIND('<>') then begin
                   SalesLine2.VALIDATE("Recalculate Invoice Disc.",true);
                   SalesLine2.MODIFY;
                 end;
               end;

               if "Deferral Code" <> '' then
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetSalesDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Line;
    LookupPageID="Sales Lines";
    DrillDownPageID="Sales Lines";
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order" }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   Editable=false }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header"."No." WHERE ("Document Type"=FIELD("Document Type"));
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                TempSalesLine@1000 : TEMPORARY Record "Sales Line";
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                if Type <> xRec.Type then begin
                                                                  case xRec.Type of
                                                                    Type::Item:
                                                                      begin
                                                                        ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                        if Quantity <> 0 then begin
                                                                          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                          CALCFIELDS("Reserved Qty. (Base)");
                                                                          TESTFIELD("Reserved Qty. (Base)",0);
                                                                          ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                        end;
                                                                      end;
                                                                    Type::"Fixed Asset":
                                                                      if Quantity <> 0 then
                                                                        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    Type::"Charge (Item)":
                                                                      DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  end;
                                                                  if xRec."Deferral Code" <> '' then
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,xRec."Posting Date",'',xRec."Currency Code",true);
                                                                end;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                if xRec."Line Amount" <> 0 then
                                                                  "Recalculate Invoice Disc." := true;

                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                "Currency Code" := SalesHeader."Currency Code";

                                                                if Type = Type::Item then
                                                                  "Allow Item Charge Assignment" := true
                                                                else
                                                                  "Allow Item Charge Assignment" := false;
                                                                if Type = Type::Item then begin
                                                                  if SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") then
                                                                    ERROR(Text056,SalesHeader."Shipping Advice");
                                                                  if SalesHeader.WhseShpmntConflict("Document Type","Document No.",SalesHeader."Shipping Advice") then
                                                                    ERROR(Text052,SalesHeader."Shipping Advice");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                   OptionString=" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)" }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST("G/L Account"),
                                                                          "System-Created Entry"=CONST(false)) "G/L Account" WHERE ("Direct Posting"=CONST(true),
                                                                                                                                    "Account Type"=CONST(Posting),
                                                                                                                                    Blocked=CONST(false))
                                                                                                                                    ELSE IF (Type=CONST("G/L Account"),
                                                                                                                                             "System-Created Entry"=CONST(true)) "G/L Account"
                                                                                                                                             ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                             ELSE IF (Type=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                                             ELSE IF (Type=CONST("Charge (Item)")) "Item Charge"
                                                                                                                                             ELSE IF (Type=CONST(Item)) Item;
                                                   OnValidate=VAR
                                                                TempSalesLine@1003 : TEMPORARY Record "Sales Line";
                                                                FindRecordMgt@1000 : Codeunit "Find Record Management";
                                                              BEGIN
                                                                "No." := FindRecordMgt.FindNoFromTypedValue(Type,"No.",not "System-Created Entry");

                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));

                                                                if (xRec."No." <> "No.") and (Quantity <> 0) then begin
                                                                  TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  if Type = Type::Item then
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                end;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                if "No." = '' then
                                                                  ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                if xRec."Line Amount" <> 0 then
                                                                  "Recalculate Invoice Disc." := true;
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                if "No." = '' then
                                                                  exit;
                                                                if Type <> Type::" " then
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                GetSalesHeader;
                                                                InitHeaderDefaults(SalesHeader);
                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
                                                                    CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",false);
                                                                UpdateDates;

                                                                OnAfterAssignHeaderValues(Rec,SalesHeader);

                                                                case Type of
                                                                  Type::" ":
                                                                    CopyFromStandardText;
                                                                  Type::"G/L Account":
                                                                    CopyFromGLAccount;
                                                                  Type::Item:
                                                                    CopyFromItem;
                                                                  Type::Resource:
                                                                    CopyFromResource;
                                                                  Type::"Fixed Asset":
                                                                    CopyFromFixedAsset;
                                                                  Type::"Charge (Item)":
                                                                    CopyFromItemCharge;
                                                                end;

                                                                if not (Type in [Type::" ",Type::"Fixed Asset"]) then
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;

                                                                if Type <> Type::" " then begin
                                                                  VALIDATE("Unit of Measure Code");
                                                                  if Quantity <> 0 then begin
                                                                    InitOutstanding;
                                                                    if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
                                                                      InitQtyToReceive
                                                                    else
                                                                      InitQtyToShip;
                                                                    InitQtyToAsm;
                                                                    UpdateWithWarehouseShip;
                                                                  end;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                end;

                                                                if not ISTEMPORARY then
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");

                                                                if "No." <> xRec."No." then begin
                                                                  if Type = Type::Item then
                                                                    if (Quantity <> 0) and ItemExists(xRec."No.") then begin
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    end;
                                                                  GetDefaultBin;
                                                                  AutoAsmToOrder;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  if Type = Type::"Charge (Item)" then
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                end;

                                                                UpdateItemCrossRef;

                                                                PostingSetupMgt.CheckGenPostingSetupSalesAccount("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                PostingSetupMgt.CheckGenPostingSetupCOGSAccount("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                PostingSetupMgt.CheckVATPostingSetupSalesAccount("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=No.;
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));
                                                                if "Location Code" <> '' then
                                                                  if IsServiceItem then
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                if xRec."Location Code" <> "Location Code" then begin
                                                                  if not FullQtyIsForAsmToOrder then begin
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)","Qty. to Asm. to Order (Base)");
                                                                  end;
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                end;

                                                                GetSalesHeader;
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    false);

                                                                CheckItemAvailable(FIELDNO("Location Code"));

                                                                if not "Drop Shipment" then begin
                                                                  if "Location Code" = '' then begin
                                                                    if InvtSetup.GET then
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  end else
                                                                    if Location.GET("Location Code") then
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                end else
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  InitItemAppl(true);
                                                                  GetDefaultBin;
                                                                  InitQtyToAsm;
                                                                  AutoAsmToOrder;
                                                                  if Quantity <> 0 then begin
                                                                    if not "Drop Shipment" then
                                                                      UpdateWithWarehouseShip;
                                                                    if not FullReservedQtyIsForAsmToOrder then
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  end;
                                                                  PostingSetupMgt.CheckInvtPostingSetupInventoryAccount("Location Code","Posting Group");
                                                                end;

                                                                UpdateDates;

                                                                if (Type = Type::Item) and ("No." <> '') then
                                                                  GetUnitCost;

                                                                CheckWMS;

                                                                if "Document Type" = "Document Type"::"Return Order" then
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST("Fixed Asset")) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=false }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit "Reservation-Check Date Confl.";
                                                              BEGIN
                                                                TestStatusOpen;
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                if CurrFieldNo <> 0 then
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                if "Shipment Date" <> 0D then begin
                                                                  if CurrFieldNo in [
                                                                                     FIELDNO("Planned Shipment Date"),
                                                                                     FIELDNO("Planned Delivery Date"),
                                                                                     FIELDNO("Shipment Date"),
                                                                                     FIELDNO("Shipping Time"),
                                                                                     FIELDNO("Outbound Whse. Handling Time"),
                                                                                     FIELDNO("Requested Delivery Date")]
                                                                  then
                                                                    CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  if ("Shipment Date" < WORKDATE) and (Type <> Type::" ") then
                                                                    if not (GetHideValidationDialog or HasBeenShown) and GUIALLOWED then begin
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := true;
                                                                    end;
                                                                end;

                                                                AutoAsmToOrder;
                                                                if (xRec."Shipment Date" <> "Shipment Date") and
                                                                   (Quantity <> 0) and
                                                                   not StatusCheckSuspended
                                                                then
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                if not PlannedShipmentDateCalculated then
                                                                  "Planned Shipment Date" := CalcPlannedShptDate(FIELDNO("Shipment Date"));
                                                                if not PlannedDeliveryDateCalculated then
                                                                  "Planned Delivery Date" := CalcPlannedDeliveryDate(FIELDNO("Shipment Date"));
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipment Date }
    { 11  ;   ;Description         ;Text50        ;TableRelation=IF (Type=CONST("G/L Account"),
                                                                     "System-Created Entry"=CONST(false)) "G/L Account" WHERE ("Direct Posting"=CONST(true),
                                                                                                                               "Account Type"=CONST(Posting),
                                                                                                                               Blocked=CONST(false))
                                                                                                                               ELSE IF (Type=CONST("G/L Account"),
                                                                                                                                        "System-Created Entry"=CONST(true)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                        ELSE IF (Type=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                Item@1000 : Record Item;
                                                                ApplicationAreaSetup@1004 : Record "Application Area Setup";
                                                                FindRecordMgt@1005 : Codeunit "Find Record Management";
                                                                IdentityManagement@1007 : Codeunit "Identity Management";
                                                                ReturnValue@1001 : Text[50];
                                                                DescriptionIsNo@1002 : Boolean;
                                                                DefaultCreate@1003 : Boolean;
                                                                Confirmed@1006 : Boolean;
                                                              BEGIN
                                                                if Type = Type::" " then
                                                                  exit;

                                                                if (Type = Type::"G/L Account") and (not ApplicationAreaSetup.IsFoundationEnabled) then
                                                                  exit;

                                                                case Type of
                                                                  Type::Item:
                                                                    begin
                                                                      if (STRLEN(Description) <= MAXSTRLEN(Item."No.")) and ("No." <> '') then
                                                                        DescriptionIsNo := Item.GET(Description)
                                                                      else
                                                                        DescriptionIsNo := false;
                                                                      if ("No." <> '') and (not DescriptionIsNo) and (Description <> '') then begin
                                                                        Item.SETRANGE(Description,Description);
                                                                        if Item.FINDFIRST then
                                                                          Confirmed := IdentityManagement.IsInvAppId
                                                                        else begin
                                                                          Item.SETFILTER(Description,'''@' + CONVERTSTR(Description,'''','?') + '''');
                                                                          if not Item.FINDFIRST then
                                                                            exit;
                                                                        end;
                                                                        if Item."No." = "No." then
                                                                          exit;
                                                                        if not IdentityManagement.IsInvAppId then
                                                                          Confirmed := CONFIRM(AnotherItemWithSameDescrQst,false,Item."No.",Item.Description);
                                                                        if IdentityManagement.IsInvAppId or Confirmed then
                                                                          VALIDATE("No.",Item."No.");
                                                                        exit;
                                                                      end;

                                                                      GetSalesSetup;
                                                                      DefaultCreate := ("No." = '') and SalesSetup."Create Item from Description";
                                                                      if Item.TryGetItemNoOpenCard(
                                                                           ReturnValue,Description,DefaultCreate,not GetHideValidationDialog,not IdentityManagement.IsInvAppId)
                                                                      then
                                                                        case ReturnValue of
                                                                          '':
                                                                            begin
                                                                              LookupRequested := true;
                                                                              Description := xRec.Description;
                                                                            end;
                                                                          "No.":
                                                                            Description := xRec.Description;
                                                                          else begin
                                                                            CurrFieldNo := FIELDNO("No.");
                                                                            VALIDATE("No.",COPYSTR(ReturnValue,1,MAXSTRLEN(Item."No.")));
                                                                          end;
                                                                        end;
                                                                    end;
                                                                  else
                                                                    if "No." = '' then
                                                                      if FindRecordMgt.FindRecordByDescription(ReturnValue,Type,Description) = 1 then begin
                                                                        CurrFieldNo := FIELDNO("No.");
                                                                        VALIDATE("No.",COPYSTR(ReturnValue,1,MAXSTRLEN("No.")));
                                                                      end;
                                                                end;
                                                                if ("No." = '') and GUIALLOWED and ApplicationAreaSetup.IsFoundationEnabled then
                                                                  if "Document Type" in
                                                                     ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Credit Memo"]
                                                                  then
                                                                    ERROR(STRSUBSTNO(CannotFindDescErr,Type,Description));
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                if "Shipment No." <> '' then
                                                                  CheckShipmentRelation
                                                                else
                                                                  if "Return Receipt No." <> '' then
                                                                    CheckRetRcptRelation;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
                                                                  if (Quantity * "Return Qty. Received" < 0) or
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) and ("Return Receipt No." = ''))
                                                                  then
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  if ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) or
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) and ("Return Receipt No." = ''))
                                                                  then
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                end else begin
                                                                  if (Quantity * "Quantity Shipped" < 0) or
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) and ("Shipment No." = ''))
                                                                  then
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  if ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) or
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) and ("Shipment No." = ''))
                                                                  then
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                end;

                                                                if (Type = Type::"Charge (Item)") and (CurrFieldNo <> 0) then begin
                                                                  if (Quantity = 0) and ("Qty. to Assign" <> 0) then
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  if (Quantity * "Qty. Assigned" < 0) or (ABS(Quantity) < ABS("Qty. Assigned")) then
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                end;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                if (xRec.Quantity <> Quantity) or (xRec."Quantity (Base)" <> "Quantity (Base)") then begin
                                                                  InitOutstanding;
                                                                  if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
                                                                    InitQtyToReceive
                                                                  else
                                                                    InitQtyToShip;
                                                                  InitQtyToAsm;
                                                                  SetDefaultQuantity;
                                                                end;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                if (Quantity * xRec.Quantity < 0) or (Quantity = 0) then
                                                                  InitItemAppl(false);

                                                                if Type = Type::Item then begin
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  if (xRec.Quantity <> Quantity) or (xRec."Quantity (Base)" <> "Quantity (Base)") then begin
                                                                    OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity));
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    if not "Drop Shipment" then
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    if ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) and ("No." <> '') then begin
                                                                      GetItem;
                                                                      if (Item."Costing Method" = Item."Costing Method"::Standard) and not IsShipment then
                                                                        GetUnitCost;
                                                                    end;
                                                                  end;
                                                                  VALIDATE("Qty. to Assemble to Order");
                                                                  if (Quantity = "Quantity Invoiced") and (CurrFieldNo <> 0) then
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                end else
                                                                  VALIDATE("Line Discount %");

                                                                if (xRec.Quantity <> Quantity) and (Quantity = 0) and
                                                                   ((Amount <> 0) or ("Amount Including VAT" <> 0) or ("VAT Base Amount" <> 0))
                                                                then begin
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                end;

                                                                UpdatePrePaymentAmounts;

                                                                CheckWMS;

                                                                UpdatePlanned;
                                                                if "Document Type" = "Document Type"::"Return Order" then
                                                                  ValidateReturnReasonCode(FIELDNO(Quantity));
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=ENU=Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                if "Qty. to Invoice" = MaxQtyToInvoice then
                                                                  InitQtyToInvoice
                                                                else
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                if ("Qty. to Invoice" * Quantity < 0) or
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                then
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                if ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) or
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                then
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                if (CurrFieldNo <> 0) and
                                                                   (Type = Type::Item) and
                                                                   (not "Drop Shipment")
                                                                then begin
                                                                  if Location."Require Shipment" and
                                                                     ("Qty. to Ship" <> 0)
                                                                  then
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                end;

                                                                if "Qty. to Ship" = "Outstanding Quantity" then
                                                                  InitQtyToShip
                                                                else begin
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                end;
                                                                if ((("Qty. to Ship" < 0) xor (Quantity < 0)) and (Quantity <> 0) and ("Qty. to Ship" <> 0)) or
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) or
                                                                   (((Quantity < 0) xor ("Outstanding Quantity" < 0)) and (Quantity <> 0) and ("Outstanding Quantity" <> 0))
                                                                then
                                                                  ERROR(
                                                                    Text007,
                                                                    "Outstanding Quantity");
                                                                if ((("Qty. to Ship (Base)" < 0) xor ("Quantity (Base)" < 0)) and ("Qty. to Ship (Base)" <> 0) and ("Quantity (Base)" <> 0)) or
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) or
                                                                   ((("Quantity (Base)" < 0) xor ("Outstanding Qty. (Base)" < 0)) and ("Quantity (Base)" <> 0) and ("Outstanding Qty. (Base)" <> 0))
                                                                then
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Qty. (Base)");

                                                                if (CurrFieldNo <> 0) and (Type = Type::Item) and ("Qty. to Ship" < 0) then
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);

                                                                ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Qty. to Ship;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=ENU=Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                if (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) and
                                                                   ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                                                then
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                if (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) and
                                                                   (Type = Type::Item) and ("No." <> '') and ("Quantity (Base)" <> 0)
                                                                then begin
                                                                  TestJobPlanningLine;
                                                                  GetItem;
                                                                  if (Item."Costing Method" = Item."Costing Method"::Standard) and not IsShipment then begin
                                                                    if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  end;
                                                                end;

                                                                GetSalesHeader;
                                                                if SalesHeader."Currency Code" <> '' then begin
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,SalesHeader."Currency Code",
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor"),
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                end else
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                if xRec."Line Discount Amount" <> "Line Discount Amount" then
                                                                  if ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 then
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                        "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                  else
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    begin
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    end;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    if Amount <> 0 then
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      if "VAT Base Amount" <> 0 then
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    end;
                                                                end;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    begin
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    end;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    begin
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    end;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      if Amount <> 0 then
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    end;
                                                                end;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=true;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") and
                                                                   (not "Allow Invoice Disc.")
                                                                then begin
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                                ItemTrackingLines@1001 : Page "Item Tracking Lines";
                                                              BEGIN
                                                                if "Appl.-to Item Entry" <> 0 then begin
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
                                                                    if Quantity > 0 then
                                                                      FIELDERROR(Quantity,Text030);
                                                                  end else begin
                                                                    if Quantity < 0 then
                                                                      FIELDERROR(Quantity,Text029);
                                                                  end;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,true);
                                                                  if ItemLedgEntry.TrackingExists then
                                                                    ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  if ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity then
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  if not ItemLedgEntry.Open then
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                if Type = Type::Item then
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group;
                                                   Editable=false }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No.;
                                                   Editable=false }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=VAR
                                                                WorkType@1000 : Record "Work Type";
                                                              BEGIN
                                                                if Type = Type::Resource then begin
                                                                  TestStatusOpen;
                                                                  if WorkType.GET("Work Type Code") then
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Work Type Code }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=false }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record Currency;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                if SalesHeader."Currency Code" <> '' then
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                else
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Outstanding Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=ENU=Qty. Shipped Not Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record Currency;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                if SalesHeader."Currency Code" <> '' then
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                else
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");

                                                                CalculateNotShippedInvExlcVatLCY;
                                                              END;

                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Quantity Shipped;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=ENU=Quantity Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=ENU=Shipment No.;
                                                   Editable=false }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=ENU=Shipment Line No.;
                                                   Editable=false }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   Editable=false }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Inv. Discount Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Inv. Discount Amount")) }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF ("Drop Shipment"=CONST(true)) "Purchase Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   OnValidate=BEGIN
                                                                if (xRec."Purchase Order No." <> "Purchase Order No.") and (Quantity <> 0) then begin
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Purchase Order No.;
                                                   Editable=false }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF ("Drop Shipment"=CONST(true)) "Purchase Line"."Line No." WHERE ("Document Type"=CONST(Order),
                                                                                                                                    "Document No."=FIELD("Purchase Order No."));
                                                   OnValidate=BEGIN
                                                                if (xRec."Purch. Order Line No." <> "Purch. Order Line No.") and (Quantity <> 0) then begin
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Purch. Order Line No.;
                                                   Editable=false }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');
                                                                TESTFIELD("Qty. to Asm. to Order (Base)",0);

                                                                if "Drop Shipment" then
                                                                  TESTFIELD("Special Order",false);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                if "Special Order" then
                                                                  Reserve := Reserve::Never
                                                                else
                                                                  if "Drop Shipment" then begin
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    if "Drop Shipment" then begin
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    end;
                                                                  end else
                                                                    SetReserveWithoutPurchasingCode;

                                                                CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                if (xRec."Drop Shipment" <> "Drop Shipment") and (Quantity <> 0) then begin
                                                                  if not "Drop Shipment" then begin
                                                                    InitQtyToAsm;
                                                                    AutoAsmToOrder;
                                                                    UpdateWithWarehouseShip
                                                                  end else
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  if not FullReservedQtyIsForAsmToOrder then
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Drop Shipment;
                                                   Editable=true }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                "Document No."=FIELD("Document No."));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=false }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Exit Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=ENU=Tax Category }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                ValidateTaxGroupCode;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=ENU=VAT Clause Code }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    begin
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      TESTFIELD("No.",VATPostingSetup.GetSalesAccount(false));
                                                                    end;
                                                                end;
                                                                if SalesHeader."Prices Including VAT" and (Type in [Type::Item,Type::Resource]) then
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=false }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=ENU=Outstanding Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=ENU=Shipped Not Invoiced (LCY) Incl. VAT;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 94  ;   ;Shipped Not Inv. (LCY) No VAT;Decimal;
                                                   FieldClass=Normal;
                                                   CaptionML=ENU=Shipped Not Invoiced (LCY);
                                                   Editable=false }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE ("Source ID"=FIELD("Document No."),
                                                                                                        "Source Ref. No."=FIELD("Line No."),
                                                                                                        "Source Type"=CONST(37),
                                                                                                        "Source Subtype"=FIELD("Document Type"),
                                                                                                        "Reservation Status"=CONST(Reservation)));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                if Reserve <> Reserve::Never then begin
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                end;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                if (Reserve = Reserve::Never) and ("Reserved Qty. (Base)" > 0) then
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                if "Drop Shipment" or "Special Order" then
                                                                  TESTFIELD(Reserve,Reserve::Never);
                                                                if xRec.Reserve = Reserve::Always then begin
                                                                  GetItem;
                                                                  if Item.Reserve = Item.Reserve::Always then
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header"."No." WHERE ("Document Type"=CONST("Blanket Order"));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                if "Blanket Order No." = '' then
                                                                  "Blanket Order Line No." := 0
                                                                else
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Blanket Order No. }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE ("Document Type"=CONST("Blanket Order"),
                                                                                                "Document No."=FIELD("Blanket Order No."));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                if "Blanket Order Line No." <> 0 then begin
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                  VALIDATE("Variant Code",SalesLine2."Variant Code");
                                                                  VALIDATE("Location Code",SalesLine2."Location Code");
                                                                  VALIDATE("Unit of Measure Code",SalesLine2."Unit of Measure Code");
                                                                  VALIDATE("Unit Price",SalesLine2."Unit Price");
                                                                  VALIDATE("Line Discount %",SalesLine2."Line Discount %");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Blanket Order Line No. }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=false;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=false }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=ENU=Inv. Disc. Amount to Invoice;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code20        ;CaptionML=ENU=VAT Identifier;
                                                   Editable=false }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                if "IC Partner Code" <> '' then
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                if "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" then
                                                                  "IC Partner Reference" := '';
                                                                if "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." then begin
                                                                  if Item."No." <> "No." then
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "IC G/L Account"=R;
                                                   CaptionML=ENU=IC Partner Ref. Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                   OptionString=" ","G/L Account",Item,,,"Charge (Item)","Cross Reference","Common Item No." }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record "IC G/L Account";
                                                              ItemCrossReference@1001 : Record "Item Cross Reference";
                                                            BEGIN
                                                              if "No." <> '' then
                                                                case "IC Partner Ref. Type" of
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    begin
                                                                      if ICGLAccount.GET("IC Partner Reference") then;
                                                                      if PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK then
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    end;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    begin
                                                                      if Item.GET("IC Partner Reference") then;
                                                                      if PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK then
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    end;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    begin
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      if PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK then
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    end;
                                                                end;
                                                            END;

                                                   AccessByPermission=TableData "IC G/L Account"=R;
                                                   CaptionML=ENU=IC Partner Reference }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                if Type <> Type::" " then
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := true;
                                                                TESTFIELD("Line Amount");
                                                                if "Prepmt. Line Amount" < "Prepmt. Amt. Inv." then
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                if "Prepmt. Line Amount" > "Line Amount" then
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,"Line Amount"));
                                                                if "System-Created Entry" then
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=ENU=Prepmt. Line Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=ENU=Prepmt. Amt. Inv.;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=ENU=Prepmt. Amt. Incl. VAT;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=ENU=Prepayment Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=ENU=Prepmt. VAT Base Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=ENU=Prepayment VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=ENU=Prepmt. VAT Calc. Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 117 ;   ;Prepayment VAT Identifier;Code20   ;CaptionML=ENU=Prepayment VAT Identifier;
                                                   Editable=false }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Area Code }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Liable }
    { 120 ;   ;Prepayment Tax Group Code;Code20   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Group Code }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                if "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" then
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                if "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Unit Price" then
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Unit Price"));

                                                                if ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"
                                                                then
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text044,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"));
                                                              END;

                                                   CaptionML=ENU=Prepmt Amt to Deduct;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=ENU=Prepmt Amt Deducted;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=ENU=Prepayment Line;
                                                   Editable=false }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=ENU=Prepmt. Amount Inv. Incl. VAT;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=ENU=Prepmt. Amount Inv. (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                if "IC Partner Code" <> '' then begin
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=ENU=Prepmt. VAT Amount Inv. (LCY);
                                                   Editable=false }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=ENU=Prepayment VAT Difference;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=ENU=Prepmt VAT Diff. to Deduct;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=ENU=Prepmt VAT Diff. Deducted;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 900 ;   ;Qty. to Assemble to Order;Decimal  ;OnValidate=VAR
                                                                SalesLineReserve@1000 : Codeunit "Sales Line-Reserve";
                                                              BEGIN
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);

                                                                "Qty. to Asm. to Order (Base)" := CalcBaseQty("Qty. to Assemble to Order");

                                                                if "Qty. to Asm. to Order (Base)" <> 0 then begin
                                                                  TESTFIELD("Drop Shipment",false);
                                                                  TESTFIELD("Special Order",false);
                                                                  if "Qty. to Asm. to Order (Base)" < 0 then
                                                                    FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text009,FIELDCAPTION("Quantity (Base)"),"Quantity (Base)"));
                                                                  TESTFIELD("Appl.-to Item Entry",0);

                                                                  case "Document Type" of
                                                                    "Document Type"::"Blanket Order",
                                                                    "Document Type"::Quote:
                                                                      if ("Quantity (Base)" = 0) or ("Qty. to Asm. to Order (Base)" <= 0) or SalesLineReserve.ReservEntryExist(Rec) then
                                                                        TESTFIELD("Qty. to Asm. to Order (Base)",0)
                                                                      else
                                                                        if "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" then
                                                                          FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text031,0,"Quantity (Base)"));
                                                                    "Document Type"::Order:
                                                                      ;
                                                                    else
                                                                      TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  end;
                                                                end;

                                                                CheckItemAvailable(FIELDNO("Qty. to Assemble to Order"));
                                                                if not (CurrFieldNo in [FIELDNO(Quantity),FIELDNO("Qty. to Assemble to Order")]) then
                                                                  GetDefaultBin;
                                                                AutoAsmToOrder;
                                                              END;

                                                   AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=Qty. to Assemble to Order;
                                                   DecimalPlaces=0:5 }
    { 901 ;   ;Qty. to Asm. to Order (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Assemble to Order","Qty. to Asm. to Order (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Asm. to Order (Base);
                                                   DecimalPlaces=0:5 }
    { 902 ;   ;ATO Whse. Outstanding Qty.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE ("Source Type"=CONST(37),
                                                                                                                       "Source Subtype"=FIELD("Document Type"),
                                                                                                                       "Source No."=FIELD("Document No."),
                                                                                                                       "Source Line No."=FIELD("Line No."),
                                                                                                                       "Assemble to Order"=FILTER(true)));
                                                   AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=ATO Whse. Outstanding Qty.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 903 ;   ;ATO Whse. Outstd. Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE ("Source Type"=CONST(37),
                                                                                                                              "Source Subtype"=FIELD("Document Type"),
                                                                                                                              "Source No."=FIELD("Document No."),
                                                                                                                              "Source Line No."=FIELD("Line No."),
                                                                                                                              "Assemble to Order"=FILTER(true)));
                                                   AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=ATO Whse. Outstd. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   CaptionML=ENU=Job Task No.;
                                                   Editable=false }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record "Job Planning Line";
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Contract Entry No.;
                                                   Editable=false }
    { 1300;   ;Posting Date        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Posting Date" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                           "No."=FIELD("Document No.")));
                                                   CaptionML=ENU=Posting Date }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                DeferralPostDate := SalesHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,SalesHeader."Currency Code");

                                                                if "Document Type" = "Document Type"::"Return Order" then
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                                              END;

                                                   CaptionML=ENU=Deferral Code }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record "Deferral Header";
                                                              BEGIN
                                                                GetSalesHeader;
                                                                if DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',"Document Type","Document No.","Line No.") then
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",true,
                                                                    DeferralHeader."Schedule Description",false,
                                                                    SalesHeader."Currency Code");
                                                              END;

                                                   CaptionML=ENU=Returns Deferral Start Date }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                if "Variant Code" <> '' then
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                if xRec."Variant Code" <> "Variant Code" then begin
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(false);
                                                                end;

                                                                CheckItemAvailable(FIELDNO("Variant Code"));

                                                                if Type = Type::Item then begin
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                end;

                                                                GetDefaultBin;
                                                                InitQtyToAsm;
                                                                AutoAsmToOrder;
                                                                if (xRec."Variant Code" <> "Variant Code") and (Quantity <> 0) then begin
                                                                  if not FullReservedQtyIsForAsmToOrder then
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                end;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF ("Document Type"=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(>=0),
                                                                     "Qty. to Asm. to Order (Base)"=CONST(0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                              "Item No."=FIELD("No."),
                                                                                                                                              "Variant Code"=FIELD("Variant Code"))
                                                                                                                                              ELSE IF ("Document Type"=FILTER("Return Order"|"Credit Memo"),
                                                                                                                                                       Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                            "Item No."=FIELD("No."),
                                                                                                                                                                                                            "Variant Code"=FIELD("Variant Code"))
                                                                                                                                                                                                            ELSE Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit "WMS Management";
                                                              BEGIN
                                                                if "Bin Code" <> '' then begin
                                                                  if not IsInbound and ("Quantity (Base)" <> 0) and ("Qty. to Asm. to Order (Base)" = 0) then
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  else
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                end;

                                                                if "Drop Shipment" then
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                if (Type = Type::Item) and ("Bin Code" <> '') then begin
                                                                  TESTFIELD("Drop Shipment",false);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                end;
                                                                ATOLink.UpdateAsmBinCodeFromSalesLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit "WMS Management";
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              if not IsInbound and ("Quantity (Base)" <> 0) then
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              else
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              if BinCode <> '' then
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=ENU=Planned;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     "No."=FILTER(<>'')) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                     ELSE IF (Type=CONST(Resource),
                                                                              "No."=FILTER(<>'')) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."))
                                                                              ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record "Unit of Measure Translation";
                                                                ResUnitofMeasure@1001 : Record "Resource Unit of Measure";
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Qty. Received (Base)",0);
                                                                if "Unit of Measure Code" <> xRec."Unit of Measure Code" then begin
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                end;

                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                if "Unit of Measure Code" = '' then
                                                                  "Unit of Measure" := ''
                                                                else begin
                                                                  if not UnitOfMeasure.GET("Unit of Measure Code") then
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  if SalesHeader."Language Code" <> '' then begin
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    if UnitOfMeasureTranslation.FINDFIRST then
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  end;
                                                                end;
                                                                DistIntegration.EnterSalesItemCrossRef(Rec);
                                                                case Type of
                                                                  Type::Item:
                                                                    begin
                                                                      GetItem;
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                      OnAfterAssignItemUOM(Rec,Item);
                                                                      if (xRec."Unit of Measure Code" <> "Unit of Measure Code") and (Quantity <> 0) then
                                                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                      if "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" then
                                                                        InitItemAppl(false);
                                                                    end;
                                                                  Type::Resource:
                                                                    begin
                                                                      if "Unit of Measure Code" = '' then begin
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      end;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      OnAfterAssignResourceUOM(Rec,Resource,ResUnitofMeasure);
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    end;
                                                                  Type::"G/L Account",Type::"Fixed Asset",
                                                                  Type::"Charge (Item)",Type::" ":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                end;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice (Base);
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Ship (Base);
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=ENU=Qty. Shipped Not Invd. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=ENU=Qty. Shipped (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=ENU=Qty. Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=FIELD("Document No."),
                                                                                                                 "Source Ref. No."=FIELD("Line No."),
                                                                                                                 "Source Type"=CONST(37),
                                                                                                                 "Source Subtype"=FIELD("Document Type"),
                                                                                                                 "Reservation Status"=CONST(Reservation)));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Posting Date }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := false;
                                                              END;

                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Use Duplication List }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=ENU=Responsibility Center;
                                                   Editable=false }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=ENU=Out-of-Stock Substitution;
                                                   Editable=false }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                "No."=FIELD("No."),
                                                                                                "Substitute Type"=CONST(Item)));
                                                   CaptionML=ENU=Substitution Available;
                                                   Editable=false }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   AccessByPermission=TableData "Item Substitution"=R;
                                                   CaptionML=ENU=Originally Ordered No. }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("Originally Ordered No."));
                                                   AccessByPermission=TableData "Item Substitution"=R;
                                                   CaptionML=ENU=Originally Ordered Var. Code }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record "Item Cross Reference";
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ReturnedCrossRef.INIT;
                                                                if "Cross-Reference No." <> '' then begin
                                                                  DistIntegration.ICRLookupSalesItem(Rec,ReturnedCrossRef);
                                                                  if "No." <> ReturnedCrossRef."Item No." then
                                                                    VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  if ReturnedCrossRef."Variant Code" <> '' then
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  if ReturnedCrossRef."Unit of Measure" <> '' then
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                end;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                if ReturnedCrossRef.Description <> '' then
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateUnitPrice(FIELDNO("Cross-Reference No."));
                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData "Item Cross Reference"=R;
                                                   CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."));
                                                   AccessByPermission=TableData "Item Cross Reference"=R;
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=" ",Customer,Vendor,"Bar Code" }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData "Nonstock Item"=R;
                                                   CaptionML=ENU=Nonstock;
                                                   Editable=false }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=VAR
                                                                PurchasingCode@1000 : Record Purchasing;
                                                                ShippingAgentServices@1001 : Record "Shipping Agent Services";
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                if PurchasingCode.GET("Purchasing Code") then begin
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  if "Drop Shipment" or "Special Order" then begin
                                                                    TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);

                                                                    if (Quantity <> 0) and (Quantity = "Quantity Shipped") then
                                                                      ERROR(SalesLineCompletelyShippedErr);
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    if "Drop Shipment" then begin
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    end;
                                                                  end else
                                                                    SetReserveWithoutPurchasingCode;
                                                                end else begin
                                                                  "Drop Shipment" := false;
                                                                  "Special Order" := false;
                                                                  SetReserveWithoutPurchasingCode;
                                                                end;

                                                                if ("Purchasing Code" <> xRec."Purchasing Code") and
                                                                   (not "Drop Shipment") and
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                then begin
                                                                  if "Location Code" = '' then begin
                                                                    if InvtSetup.GET then
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  end else
                                                                    if Location.GET("Location Code") then
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  if ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") then
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  else begin
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  end;
                                                                  UpdateDates;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE ("Item Category Code"=FIELD("Item Category Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Product Group Code }
    { 5713;   ;Special Order       ;Boolean       ;AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Special Order;
                                                   Editable=false }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF ("Special Order"=CONST(true)) "Purchase Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Special Order Purchase No. }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF ("Special Order"=CONST(true)) "Purchase Line"."Line No." WHERE ("Document Type"=CONST(Order),
                                                                                                                                    "Document No."=FIELD("Special Order Purchase No."));
                                                   AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Special Order Purch. Line No. }
    { 5749;   ;Whse. Outstanding Qty.;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE ("Source Type"=CONST(37),
                                                                                                                       "Source Subtype"=FIELD("Document Type"),
                                                                                                                       "Source No."=FIELD("Document No."),
                                                                                                                       "Source Line No."=FIELD("Line No.")));
                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Whse. Outstanding Qty.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE ("Source Type"=CONST(37),
                                                                                                                              "Source Subtype"=FIELD("Document Type"),
                                                                                                                              "Source No."=FIELD("Document No."),
                                                                                                                              "Source Line No."=FIELD("Line No.")));
                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Whse. Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=ENU=Completely Shipped;
                                                   Editable=false }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if ("Requested Delivery Date" <> xRec."Requested Delivery Date") and
                                                                   ("Promised Delivery Date" <> 0D)
                                                                then
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                if "Requested Delivery Date" <> 0D then
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                else begin
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Promised Delivery Date" <> 0D then
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                else
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Drop Shipment" then
                                                                  DateFormularZero("Shipping Time",FIELDNO("Shipping Time"),FIELDCAPTION("Shipping Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Drop Shipment" then
                                                                  DateFormularZero("Outbound Whse. Handling Time",
                                                                    FIELDNO("Outbound Whse. Handling Time"),FIELDCAPTION("Outbound Whse. Handling Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Planned Delivery Date" <> 0D then begin
                                                                  PlannedDeliveryDateCalculated := true;

                                                                  if FORMAT("Shipping Time") <> '' then
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedDeliveryDate(FIELDNO("Planned Delivery Date")))
                                                                  else
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedShptDate(FIELDNO("Planned Delivery Date")));

                                                                  if "Planned Shipment Date" > "Planned Delivery Date" then
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Planned Delivery Date }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Planned Shipment Date" <> 0D then begin
                                                                  PlannedShipmentDateCalculated := true;

                                                                  if FORMAT("Outbound Whse. Handling Time") <> '' then
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Outbound Whse. Handling Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        false))
                                                                  else
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(FORMAT('')),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        false));
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Planned Shipment Date }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Shipping Agent Code" <> xRec."Shipping Agent Code" then
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   OnValidate=VAR
                                                                ShippingAgentServices@1000 : Record "Shipping Agent Services";
                                                              BEGIN
                                                                TestStatusOpen;
                                                                if "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" then
                                                                  EVALUATE("Shipping Time",'<>');

                                                                if "Drop Shipment" then begin
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                end else
                                                                  if ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") then
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  else begin
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  end;

                                                                if ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" then
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=true;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData "Item Charge"=R;
                                                   CaptionML=ENU=Allow Item Charge Assignment }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                            "Document No."=FIELD("Document No."),
                                                                                                                            "Document Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Qty. to Assign;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                           "Document No."=FIELD("Document No."),
                                                                                                                           "Document Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Qty. Assigned;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                if (CurrFieldNo <> 0) and
                                                                   (Type = Type::Item) and
                                                                   ("Return Qty. to Receive" <> 0) and
                                                                   (not "Drop Shipment")
                                                                then
                                                                  CheckWarehouse;

                                                                if "Return Qty. to Receive" = Quantity - "Return Qty. Received" then
                                                                  InitQtyToReceive
                                                                else begin
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                end;
                                                                if ("Return Qty. to Receive" * Quantity < 0) or
                                                                   (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) or
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                then
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                if ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) or
                                                                   (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) or
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                then
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                if (CurrFieldNo <> 0) and (Type = Type::Item) and ("Return Qty. to Receive" > 0) then
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   AccessByPermission=TableData "Return Receipt Header"=R;
                                                   CaptionML=ENU=Return Qty. to Receive;
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=ENU=Return Qty. to Receive (Base);
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=ENU=Return Qty. Rcd. Not Invd.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record Currency;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                if SalesHeader."Currency Code" <> '' then
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                else
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Return Rcd. Not Invd.;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=ENU=Return Rcd. Not Invd. (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;AccessByPermission=TableData "Return Receipt Header"=R;
                                                   CaptionML=ENU=Return Qty. Received;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=ENU=Return Qty. Received (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                if "Appl.-from Item Entry" <> 0 then begin
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Appl.-from Item Entry;
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No. }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No.;
                                                   Editable=false }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=ENU=Return Receipt Line No.;
                                                   Editable=false }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=ENU=Return Reason Code }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                if Type = Type::Item then
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 7003;   ;Subtype             ;Option        ;CaptionML=ENU=Subtype;
                                                   OptionCaptionML=ENU=" ,Item - Inventory,Item - Service,Comment";
                                                   OptionString=" ","Item - Inventory","Item - Service",Comment }
    { 7004;   ;Price description   ;Text80        ;CaptionML=ENU=Price description }
  }
  KEYS
  {
    {    ;"Document Type","Document No.","Line No.";
                                                   SumIndexFields=Amount,"Amount Including VAT","Outstanding Amount","Shipped Not Invoiced","Outstanding Amount (LCY)","Shipped Not Invoiced (LCY)";
                                                   Clustered=true }
    { false;"Document No.","Line No.","Document Type" }
    {    ;"Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date";
                                                   SumIndexFields="Outstanding Qty. (Base)" }
    {    ;"Document Type","Bill-to Customer No.","Currency Code";
                                                   SumIndexFields="Outstanding Amount","Shipped Not Invoiced","Outstanding Amount (LCY)","Shipped Not Invoiced (LCY)","Return Rcd. Not Invd. (LCY)" }
    { false;"Document Type",Type,"No.","Variant Code","Drop Shipment","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Location Code","Shipment Date";
                                                   SumIndexFields="Outstanding Qty. (Base)" }
    { false;"Document Type","Bill-to Customer No.","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Currency Code";
                                                   SumIndexFields="Outstanding Amount","Shipped Not Invoiced","Outstanding Amount (LCY)","Shipped Not Invoiced (LCY)" }
    {    ;"Document Type","Blanket Order No.","Blanket Order Line No." }
    { false;"Document Type","Document No.","Location Code" }
    {    ;"Document Type","Shipment No.","Shipment Line No." }
    {    ;Type,"No.","Variant Code","Drop Shipment","Location Code","Document Type","Shipment Date";
                                                   MaintainSQLIndex=false }
    {    ;"Document Type","Sell-to Customer No.","Shipment No.";
                                                   SumIndexFields="Outstanding Amount (LCY)" }
    {    ;"Job Contract Entry No."                 }
    { false;"Document Type","Document No.","Qty. Shipped Not Invoiced" }
    { false;"Document Type","Document No.",Type,"No." }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"No.",Description,"Line Amount",Quantity,"Unit of Measure Code","Price description" }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.';
      Text003@1003 : TextConst 'ENU=must not be less than %1';
      Text005@1004 : TextConst 'ENU=You cannot invoice more than %1 units.';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 base units.';
      Text007@1006 : TextConst 'ENU=You cannot ship more than %1 units.';
      Text008@1007 : TextConst 'ENU=You cannot ship more than %1 base units.';
      Text009@1008 : TextConst 'ENU=" must be 0 when %1 is %2"';
      Text011@1010 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text014@1013 : TextConst 'ENU=%1 %2 is before work date %3';
      Text016@1040 : TextConst 'ENU="%1 is required for %2 = %3."';
      Text017@1044 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.';
      Text020@1019 : TextConst 'ENU=You cannot return more than %1 units.';
      Text021@1020 : TextConst 'ENU=You cannot return more than %1 base units.';
      Text026@1025 : TextConst 'ENU=You cannot change %1 if the item charge has already been posted.';
      CurrExchRate@1030 : Record "Currency Exchange Rate";
      SalesHeader@1031 : Record "Sales Header";
      SalesLine2@1032 : Record "Sales Line";
      GLAcc@1035 : Record "G/L Account";
      Item@1036 : Record Item;
      Resource@1400 : Record Resource;
      Currency@1037 : Record Currency;
      Res@1043 : Record Resource;
      ResCost@1045 : Record "Resource Cost";
      VATPostingSetup@1048 : Record "VAT Posting Setup";
      GenBusPostingGrp@1050 : Record "Gen. Business Posting Group";
      GenProdPostingGrp@1051 : Record "Gen. Product Posting Group";
      UnitOfMeasure@1054 : Record "Unit of Measure";
      NonstockItem@1058 : Record "Nonstock Item";
      SKU@1060 : Record "Stockkeeping Unit";
      ItemCharge@1061 : Record "Item Charge";
      InvtSetup@1063 : Record "Inventory Setup";
      Location@1064 : Record Location;
      ATOLink@1016 : Record "Assemble-to-Order Link";
      SalesSetup@1065 : Record "Sales & Receivables Setup";
      TempItemTemplate@1099 : TEMPORARY Record "Item Template";
      CalChange@1052 : Record "Customized Calendar Change";
      ConfigTemplateHeader@1057 : Record "Config. Template Header";
      PriceCalcMgt@1071 : Codeunit "Sales Price Calc. Mgt.";
      CustCheckCreditLimit@1074 : Codeunit "Cust-Check Cr. Limit";
      ItemCheckAvail@1075 : Codeunit "Item-Check Avail.";
      SalesTaxCalculate@1076 : Codeunit "Sales Tax Calculate";
      ReserveSalesLine@1079 : Codeunit "Sales Line-Reserve";
      UOMMgt@1080 : Codeunit "Unit of Measure Management";
      AddOnIntegrMgt@1081 : Codeunit AddOnIntegrManagement;
      DimMgt@1082 : Codeunit DimensionManagement;
      ItemSubstitutionMgt@1085 : Codeunit "Item Subst.";
      DistIntegration@1086 : Codeunit "Dist. Integration";
      NonstockItemMgt@1087 : Codeunit "Nonstock Item Management";
      WhseValidateSourceLine@1088 : Codeunit "Whse. Validate Source Line";
      TransferExtendedText@1100 : Codeunit "Transfer Extended Text";
      DeferralUtilities@1026 : Codeunit "Deferral Utilities";
      CalendarMgmt@1056 : Codeunit "Calendar Management";
      PostingSetupMgt@1068 : Codeunit PostingSetupManagement;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text029@1021 : TextConst 'ENU=must be positive';
      Text030@1042 : TextConst 'ENU=must be negative';
      Text031@1093 : TextConst 'ENU=You must either specify %1 or %2.';
      Text034@1084 : TextConst 'ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.';
      Text035@1083 : TextConst 'ENU="Warehouse "';
      Text036@1090 : TextConst 'ENU="Inventory "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1014 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1034 : TextConst 'ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.';
      Text040@1039 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.';
      Text042@1055 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first';
      ShippingMoreUnitsThanReceivedErr@1047 : TextConst 'ENU=You cannot ship more than the %1 units that you have received for document no. %2.';
      Text044@1103 : TextConst 'ENU=cannot be less than %1';
      Text045@1104 : TextConst 'ENU=cannot be more than %1';
      Text046@1105 : TextConst 'ENU=You cannot return more than the %1 units that you have shipped for %2 %3.';
      Text047@1106 : TextConst 'ENU=must be positive when %1 is not 0.';
      Text048@1108 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.';
      Text049@1139 : TextConst 'ENU=cannot be %1.';
      Text051@1141 : TextConst 'ENU=You cannot use %1 in a %2.';
      PrePaymentLineAmountEntered@1015 : Boolean;
      Text052@1022 : TextConst 'ENU=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.';
      Text053@1017 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text054@1023 : TextConst 'ENU=Cancelled.';
      Text055@1024 : TextConst '@@@=Quantity Invoiced must not be greater than the sum of Qty. Assigned and Qty. to Assign.;ENU=%1 must not be greater than the sum of %2 and %3.';
      Text056@1011 : TextConst 'ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.';
      Text057@1027 : TextConst 'ENU=must have the same sign as the shipment';
      Text058@1028 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in shipment %1.';
      Text059@1029 : TextConst 'ENU=must have the same sign as the return receipt';
      Text060@1041 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      ItemChargeAssignmentErr@1097 : TextConst 'ENU=You can only assign Item Charges for Line Types of Charge (Item).';
      AnotherItemWithSameDescrQst@1049 : TextConst '@@@="%1=Item no., %2=item description";ENU=We found an item with the description "%2" (No. %1).\Did you mean to change the current item to %1?';
      SalesLineCompletelyShippedErr@1053 : TextConst 'ENU=You cannot change the purchasing code for a sales line that has been completely shipped.';
      SalesSetupRead@1067 : Boolean;
      LookupRequested@1059 : Boolean;
      DeferralPostDate@1069 : Date;
      FreightLineDescriptionTxt@1033 : TextConst 'ENU=Freight Amount';
      CannotFindDescErr@1200 : TextConst '@@@="%1 = Type caption %2 = Description";ENU=Cannot find %1 with Description %2.\\Make sure to use the correct type.';
      PriceDescriptionTxt@1038 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4)';
      PriceDescriptionWithLineDiscountTxt@1066 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4) - %5%';
      SelectNonstockItemErr@1062 : TextConst 'ENU=You can only select a nonstock item for an empty line.';
      CommentLbl@1046 : TextConst 'ENU=Comment';

    [External]
    PROCEDURE InitOutstanding@16();
    BEGIN
      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      end else begin
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      end;
      UpdatePlanned;
      "Completely Shipped" := (Quantity <> 0) and ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    [External]
    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      if Quantity = 0 then begin
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      end else begin
        GetSalesHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        else
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      end;

      OnAfterInitOutstandingAmount(Rec,SalesHeader,Currency);
    END;

    [External]
    PROCEDURE InitQtyToShip@15();
    BEGIN
      GetSalesSetup;
      if (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) or
         ("Document Type" = "Document Type"::Invoice)
      then begin
        "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      end else
        if "Qty. to Ship" <> 0 then
          "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

      CheckServItemCreation;

      OnAfterInitQtyToShip(Rec,CurrFieldNo);

      InitQtyToInvoice;
    END;

    [External]
    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      GetSalesSetup;
      if (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) or
         ("Document Type" = "Document Type"::"Credit Memo")
      then begin
        "Return Qty. to Receive" := "Outstanding Quantity";
        "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      end else
        if "Return Qty. to Receive" <> 0 then
          "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");

      OnAfterInitQtyToReceive(Rec,CurrFieldNo);

      InitQtyToInvoice;
    END;

    [External]
    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then
        CalcPrepaymentToDeduct;

      OnAfterInitQtyToInvoice(Rec,CurrFieldNo);
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      if not OnlyApplTo then
        "Appl.-from Item Entry" := 0;
    END;

    [External]
    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      if "Prepayment Line" then
        exit(1);
      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
        exit("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");

      exit("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    [External]
    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    BEGIN
      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
        exit("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

      exit("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CopyFromStandardText@131();
    VAR
      StandardText@1000 : Record "Standard Text";
    BEGIN
      StandardText.GET("No.");
      Description := StandardText.Description;
      "Allow Item Charge Assignment" := false;
      OnAfterAssignStdTxtValues(Rec,StandardText);
    END;

    LOCAL PROCEDURE CopyFromGLAccount@142();
    BEGIN
      GLAcc.GET("No.");
      GLAcc.CheckGLAcc;
      if not "System-Created Entry" then
        GLAcc.TESTFIELD("Direct Posting",true);
      Description := GLAcc.Name;
      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      "Tax Group Code" := GLAcc."Tax Group Code";
      "Allow Invoice Disc." := false;
      "Allow Item Charge Assignment" := false;
      InitDeferralCode;
      OnAfterAssignGLAccountValues(Rec,GLAcc);
    END;

    LOCAL PROCEDURE CopyFromItem@144();
    VAR
      PrepaymentMgt@1000 : Codeunit "Prepayment Mgt.";
    BEGIN
      GetItem;
      Item.TESTFIELD(Blocked,false);
      Item.TESTFIELD("Gen. Prod. Posting Group");
      if Item.Type = Item.Type::Inventory then begin
        Item.TESTFIELD("Inventory Posting Group");
        "Posting Group" := Item."Inventory Posting Group";
      end;
      Description := Item.Description;
      "Description 2" := Item."Description 2";
      GetUnitCost;
      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
      "Units per Parcel" := Item."Units per Parcel";
      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
      "Tax Group Code" := Item."Tax Group Code";
      "Item Category Code" := Item."Item Category Code";
      "Product Group Code" := Item."Product Group Code";
      Nonstock := Item."Created From Nonstock Item";
      "Profit %" := Item."Profit %";
      "Allow Item Charge Assignment" := true;
      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");
      if Item.Type = Item.Type::Inventory then
        PostingSetupMgt.CheckInvtPostingSetupInventoryAccount("Location Code","Posting Group");

      if SalesHeader."Language Code" <> '' then
        GetItemTranslation;

      if Item.Reserve = Item.Reserve::Optional then
        Reserve := SalesHeader.Reserve
      else
        Reserve := Item.Reserve;

      "Unit of Measure Code" := Item."Sales Unit of Measure";
      InitDeferralCode;
      SetDefaultItemQuantity;
      OnAfterAssignItemValues(Rec,Item);
    END;

    LOCAL PROCEDURE CopyFromResource@146();
    BEGIN
      Res.GET("No.");
      Res.TESTFIELD(Blocked,false);
      Res.TESTFIELD("Gen. Prod. Posting Group");
      Description := Res.Name;
      "Description 2" := Res."Name 2";
      "Unit of Measure Code" := Res."Base Unit of Measure";
      "Unit Cost (LCY)" := Res."Unit Cost";
      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
      "Tax Group Code" := Res."Tax Group Code";
      "Allow Item Charge Assignment" := false;
      FindResUnitCost;
      InitDeferralCode;
      OnAfterAssignResourceValues(Rec,Res);
    END;

    LOCAL PROCEDURE CopyFromFixedAsset@148();
    VAR
      FixedAsset@1000 : Record "Fixed Asset";
    BEGIN
      FixedAsset.GET("No.");
      FixedAsset.TESTFIELD(Inactive,false);
      FixedAsset.TESTFIELD(Blocked,false);
      GetFAPostingGroup;
      Description := FixedAsset.Description;
      "Description 2" := FixedAsset."Description 2";
      "Allow Invoice Disc." := false;
      "Allow Item Charge Assignment" := false;
      OnAfterAssignFixedAssetValues(Rec,FixedAsset);
    END;

    LOCAL PROCEDURE CopyFromItemCharge@150();
    BEGIN
      ItemCharge.GET("No.");
      Description := ItemCharge.Description;
      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
      "Tax Group Code" := ItemCharge."Tax Group Code";
      "Allow Invoice Disc." := false;
      "Allow Item Charge Assignment" := false;
      OnAfterAssignItemChargeValues(Rec,ItemCharge);
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
      SalesLine3@1002 : Record "Sales Line";
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      if "Location Code" <> '' then
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      if CurrentFieldNo = FIELDNO("Appl.-to Item Entry") then begin
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,true);
        ItemLedgEntry.SETRANGE(Open,true);
      end else begin
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,false);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      end;
      if PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK then begin
        SalesLine3 := Rec;
        if CurrentFieldNo = FIELDNO("Appl.-to Item Entry") then
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        else
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      end;
    END;

    [External]
    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record "Sales Header");
    BEGIN
      SalesHeader := NewSalesHeader;

      if SalesHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else begin
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      if ("Document Type" <> SalesHeader."Document Type") or ("Document No." <> SalesHeader."No.") then begin
        SalesHeader.GET("Document Type","Document No.");
        if SalesHeader."Currency Code" = '' then
          Currency.InitRoundingPrecision
        else begin
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
      end;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("No.");
      if "No." <> Item."No." then
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      if "No." <> Resource."No." then
        Resource.GET("No.");
    END;

    LOCAL PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      case Type of
        Type::Item,Type::Resource:
          begin
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
          end;
      end;
      VALIDATE("Unit Price");

      OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);
    END;

    LOCAL PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    [External]
    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record "General Posting Setup";
      GLAcc@1000 : Record "G/L Account";
    BEGIN
      if ("Prepayment %" <> 0) and (Type <> Type::" ") then begin
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        if CurrFieldNo = FIELDNO("Prepayment %") then
          if "System-Created Entry" then
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
        if "System-Created Entry" then
          "Prepayment %" := 0;
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        if GenPostingSetup."Sales Prepayments Account" <> '' then begin
          GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        end else
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        if "Prepmt. VAT Calc. Type" in
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        then
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      end;
    END;

    [Internal]
    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
    BEGIN
      if Type = Type::" " then
        exit;
      GetSalesHeader;
      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := true;

      if "Line Amount" <> xRec."Line Amount" then begin
        "VAT Difference" := 0;
        LineAmountChanged := true;
      end;
      if "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" then begin
        "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := true;
      end;

      if not "Prepayment Line" then begin
        if "Prepayment %" <> 0 then begin
          if Quantity < 0 then
            FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
          if "Unit Price" < 0 then
            FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        end;
        if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then begin
          "Prepayment VAT Difference" := 0;
          if not PrePaymentLineAmountEntered then
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          if "Prepmt. Line Amount" < "Prepmt. Amt. Inv." then
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := false;
          if "Prepmt. Line Amount" <> 0 then begin
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            if RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") then
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          end;
        end else
          if (CurrFieldNo <> 0) and ("Line Amount" <> xRec."Line Amount") and
             ("Prepmt. Amt. Inv." <> 0) and ("Prepayment %" = 100)
          then begin
            if "Line Amount" < xRec."Line Amount" then
              FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
          end;
      end;

      OnAfterUpdateAmounts(Rec);

      UpdateVATAmounts;
      InitOutstandingAmount;
      if (CurrFieldNo <> 0) and
         not ((Type = Type::Item) and (CurrFieldNo = FIELDNO("No.")) and (Quantity <> 0) and
              // a write transaction may have been started
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) and // ...continued condition
         ("Document Type" <= "Document Type"::Invoice) and
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0) and
         (CurrFieldNo <> FIELDNO("Blanket Order No.")) and
         (CurrFieldNo <> FIELDNO("Blanket Order Line No."))
      then
        CustCheckCreditLimit.SalesLineCheck(Rec);

      if Type = Type::"Charge (Item)" then
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
      if VATBaseAmount <> "VAT Base Amount" then
        LineAmountChanged := true;

      if LineAmountChanged then begin
        UpdateDeferralAmounts;
        LineAmountChanged := false;
      end;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record "Sales Line";
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetSalesHeader;
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      if "Line Amount" = 0 then
        if xRec."Line Amount" >= 0 then
          SalesLine2.SETFILTER(Amount,'>%1',0)
        else
          SalesLine2.SETFILTER(Amount,'<%1',0)
      else
        if "Line Amount" > 0 then
          SalesLine2.SETFILTER(Amount,'>%1',0)
        else
          SalesLine2.SETFILTER(Amount,'<%1',0);
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");

      if "Line Amount" = "Inv. Discount Amount" then begin
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      end else begin
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        if ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") or
           (("VAT Calculation Type" in
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) and ("VAT %" <> 0))
        then
          if not SalesLine2.ISEMPTY then begin
            SalesLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := SalesLine2."Line Amount";
            TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
            TotalAmount := SalesLine2.Amount;
            TotalAmountInclVAT := SalesLine2."Amount Including VAT";
            TotalQuantityBase := SalesLine2."Quantity (Base)";
          end;

        if SalesHeader."Prices Including VAT" then
          case "VAT Calculation Type" of
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              begin
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              end;
            "VAT Calculation Type"::"Full VAT":
              begin
                Amount := 0;
                "VAT Base Amount" := 0;
              end;
            "VAT Calculation Type"::"Sales Tax":
              begin
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                if Amount <> 0 then
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                else
                  "VAT %" := 0;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              end;
          end
        else
          case "VAT Calculation Type" of
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              begin
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              end;
            "VAT Calculation Type"::"Full VAT":
              begin
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              end;
            "VAT Calculation Type"::"Sales Tax":
              begin
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                if "VAT Base Amount" <> 0 then
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                else
                  "VAT %" := 0;
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    BEGIN
      if Reserve = Reserve::Always then
        exit;

      if "Shipment Date" = 0D then begin
        GetSalesHeader;
        if SalesHeader."Shipment Date" <> 0D then
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        else
          VALIDATE("Shipment Date",WORKDATE);
      end;

      if ((CalledByFieldNo = CurrFieldNo) or (CalledByFieldNo = FIELDNO("Shipment Date"))) and GUIALLOWED and
         ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
         (Type = Type::Item) and ("No." <> '') and
         ("Outstanding Quantity" > 0) and
         ("Job Contract Entry No." = 0) and
         not "Special Order"
      then begin
        if ItemCheckAvail.SalesLineCheck(Rec) then
          ItemCheckAvail.RaiseUpdateInterruptedError;
      end;
    END;

    [External]
    PROCEDURE ShowReservation@10();
    VAR
      Reservation@1000 : Page Reservation;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
      UpdatePlanned;
    END;

    [External]
    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEngineMgt@1002 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE AutoReserve@11();
    VAR
      ReservMgt@1002 : Codeunit "Reservation Management";
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      if QtyToReserveBase <> 0 then begin
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",QtyToReserve,QtyToReserveBase);
        FIND;
        if not FullAutoReservation then begin
          COMMIT;
          if CONFIRM(Text011,true) then begin
            ShowReservation;
            FIND;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE AutoAsmToOrder@82();
    BEGIN
      ATOLink.UpdateAsmFromSalesLine(Rec);
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      if SalesHeader."Posting Date" <> 0D then
        exit(SalesHeader."Posting Date");
      exit(WORKDATE);
    END;

    [External]
    PROCEDURE CalcPlannedDeliveryDate@92(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      if "Shipment Date" = 0D then
        exit("Planned Delivery Date");

      case CurrFieldNo of
        FIELDNO("Shipment Date"):
          exit(CalendarMgmt.CalcDateBOC(
              FORMAT("Shipping Time"),
              "Planned Shipment Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              true));
        FIELDNO("Planned Delivery Date"):
          exit(CalendarMgmt.CalcDateBOC2(
              FORMAT("Shipping Time"),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              true))
      end;
    END;

    [External]
    PROCEDURE CalcPlannedShptDate@93(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      if "Shipment Date" = 0D then
        exit("Planned Shipment Date");

      case CurrFieldNo of
        FIELDNO("Shipment Date"):
          exit(CalendarMgmt.CalcDateBOC(
              FORMAT("Outbound Whse. Handling Time"),
              "Shipment Date",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              true));
        FIELDNO("Planned Delivery Date"):
          exit(CalendarMgmt.CalcDateBOC(
              FORMAT(''),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              true));
      end;
    END;

    [External]
    PROCEDURE CalcShipmentDate@111() : Date;
    BEGIN
      if "Planned Shipment Date" = 0D then
        exit("Shipment Date");

      if FORMAT("Outbound Whse. Handling Time") <> '' then
        exit(
          CalendarMgmt.CalcDateBOC2(
            FORMAT("Outbound Whse. Handling Time"),
            "Planned Shipment Date",
            CalChange."Source Type"::Location,
            "Location Code",
            '',
            CalChange."Source Type"::"Shipping Agent",
            "Shipping Agent Code",
            "Shipping Agent Service Code",
            false));

      exit(
        CalendarMgmt.CalcDateBOC(
          FORMAT(FORMAT('')),
          "Planned Shipment Date",
          CalChange."Source Type"::"Shipping Agent",
          "Shipping Agent Code",
          "Shipping Agent Service Code",
          CalChange."Source Type"::Location,
          "Location Code",
          '',
          false));
    END;

    [External]
    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      case "Document Type" of
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          exit(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          exit(Value);
      end;
    END;

    LOCAL PROCEDURE BlanketOrderLookup@23();
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      if PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine2) = ACTION::LookupOK then begin
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      end;
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record Job;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      if "Job Contract Entry No." <> 0 then
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    [External]
    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record "Source Code Setup";
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetSalesHeader;
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",SalesHeader."Dimension Set ID",DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [Internal]
    PROCEDURE ShowItemSub@30();
    BEGIN
      CLEAR(SalesHeader);
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      if TransferExtendedText.SalesCheckIfAnyExtText(Rec,true) then
        TransferExtendedText.InsertSalesExtText(Rec);
    END;

    [External]
    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      if "No." <> '' then
        ERROR(SelectNonstockItemErr);
      if PAGE.RUNMODAL(PAGE::"Nonstock Item List",NonstockItem) = ACTION::LookupOK then begin
        NonstockItem.TESTFIELD("Item Template Code");
        ConfigTemplateHeader.SETRANGE(Code,NonstockItem."Item Template Code");
        ConfigTemplateHeader.FINDFIRST;
        TempItemTemplate.InitializeTempRecordFromConfigTemplate(TempItemTemplate,ConfigTemplateHeader);
        TempItemTemplate.TESTFIELD("Gen. Prod. Posting Group");
        TempItemTemplate.TESTFIELD("Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      end;
    END;

    LOCAL PROCEDURE GetSalesSetup@100();
    BEGIN
      if not SalesSetupRead then
        SalesSetup.GET;
      SalesSetupRead := true;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record "G/L Account";
      FASetup@1001 : Record "FA Setup";
      FAPostingGr@1002 : Record "FA Posting Group";
      FADeprBook@1003 : Record "FA Depreciation Book";
    BEGIN
      if (Type <> Type::"Fixed Asset") or ("No." = '') then
        exit;
      if "Depreciation Book Code" = '' then begin
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        if not FADeprBook.GET("No.","Depreciation Book Code") then
          "Depreciation Book Code" := '';
        if "Depreciation Book Code" = '' then
          exit;
      end;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      LocalGLAcc.GET(FAPostingGr.GetAcquisitionCostAccountOnDisposal);
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record Field;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      exit(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeader2@1565 : Record "Sales Header";
    BEGIN
      if SalesHeader2.GET("Document Type","Document No.") then;
      case FieldNumber of
        FIELDNO("No."):
          exit(STRSUBSTNO('3,%1',GetFieldCaption(FieldNumber)));
        else begin
          if SalesHeader2."Prices Including VAT" then
            exit('2,1,' + GetFieldCaption(FieldNumber));
          exit('2,0,' + GetFieldCaption(FieldNumber));
        end;
      end;
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      if (SKU."Location Code" = "Location Code") and
         (SKU."Item No." = "No.") and
         (SKU."Variant Code" = "Variant Code")
      then
        exit(true);
      if SKU.GET("Location Code","No.","Variant Code") then
        exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE GetUnitCost@5808();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      if GetSKU then
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      else
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record "Item Ledger Entry") : Decimal;
    VAR
      ValueEntry@1001 : Record "Value Entry";
      UnitCost@1004 : Decimal;
    BEGIN
      with ValueEntry do begin
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        if IsServiceItem then begin
          CALCSUMS("Cost Amount (Non-Invtbl.)");
          UnitCost := "Cost Amount (Non-Invtbl.)" / ItemLedgEntry.Quantity;
        end else begin
          CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
          UnitCost :=
            ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
        end;
      end;

      exit(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    [External]
    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
      AssignItemChargeSales@1001 : Codeunit "Item Charge Assgnt. (Sales)";
      ItemChargeAssgnts@1000 : Page "Item Charge Assignment (Sales)";
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      if Type <> Type::"Charge (Item)" then
        ERROR(ItemChargeAssignmentErr);

      GetSalesHeader;
      if SalesHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else
        Currency.GET(SalesHeader."Currency Code");
      if ("Inv. Discount Amount" = 0) and
         ("Line Discount Amount" = 0) and
         (not SalesHeader."Prices Including VAT")
      then
        ItemChargeAssgntLineAmt := "Line Amount"
      else
        if SalesHeader."Prices Including VAT" then
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        else
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      if not ItemChargeAssgntSales.FINDLAST then begin
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        ItemChargeAssgntSales."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      end;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      else
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    [External]
    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      if "Document Type" = "Document Type"::"Blanket Order" then
        exit;

      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      if ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) then
        ERROR(Text055,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      if (CurrFieldNo <> 0) and (Amount <> xRec.Amount) and
         not ((Quantity <> xRec.Quantity) and (TotalQtyToAssign = 0))
      then begin
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        if not ItemChargeAssgntSales.ISEMPTY then
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      end;

      if ItemChargeAssgntSales.FINDSET(true) then begin
        GetSalesHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        repeat
          ShareOfVAT := 1;
          if SalesHeader."Prices Including VAT" then
            ShareOfVAT := 1 + "VAT %" / 100;
          if Quantity <> 0 then
            if ItemChargeAssgntSales."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            then
              ItemChargeAssgntSales."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          if TotalQtyToAssign <> 0 then begin
            ItemChargeAssgntSales."Amount to Assign" :=
              ROUND(ItemChargeAssgntSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntSales."Amount to Assign";
          end;
          ItemChargeAssgntSales.MODIFY;
        until ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      end;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    VAR
      ItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      if not ItemChargeAssgntSales.ISEMPTY then
        ItemChargeAssgntSales.DELETEALL(true);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    VAR
      ItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
    BEGIN
      if DocType <> "Document Type"::"Blanket Order" then
        if "Quantity Invoiced" <> 0 then begin
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        end;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      if not ItemChargeAssgntSales.ISEMPTY then
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      if ItemChargeAssgntSales.FINDSET then begin
        TESTFIELD("Allow Item Charge Assignment");
        repeat
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        until ItemChargeAssgntSales.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      if StatusCheckSuspended then
        exit;
      GetSalesHeader;
      if not "System-Created Entry" then
        if Type <> Type::" " then
          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    [External]
    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record "Sales Header";VAR SalesLine@1002 : Record "Sales Line";VAR VATAmountLine@1003 : Record "VAT Amount Line") LineWasModified : Boolean;
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record "VAT Amount Line";
      Currency@1005 : Record Currency;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      LineWasModified := false;
      if QtyType = QtyType::Shipping then
        exit;
      if SalesHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      with SalesLine do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        if FINDSET then
          repeat
            if not ZeroAmountLine(QtyType) then begin
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",false,"Line Amount" >= 0);
              if VATAmountLine.Modified then begin
                if not TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",false,"Line Amount" >= 0)
                then begin
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                end;

                if QtyType = QtyType::General then
                  LineAmountToInvoice := "Line Amount"
                else
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                if "Allow Invoice Disc." then begin
                  if (VATAmountLine."Inv. Disc. Base Amount" = 0) or (LineAmountToInvoice = 0) then
                    InvDiscAmount := 0
                  else begin
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  end;
                  if QtyType = QtyType::General then begin
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  end else
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                end else
                  InvDiscAmount := 0;

                if QtyType = QtyType::General then
                  if SalesHeader."Prices Including VAT" then begin
                    if (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) or
                       ("Line Amount" = 0)
                    then begin
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    end else begin
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    end;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  end else begin
                    if "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" then begin
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    end else begin
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      if VATAmountLine."VAT Base" = 0 then
                        VATAmount := 0
                      else
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    end;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  end
                else begin
                  if (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 then
                    VATDifference := 0
                  else
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  if LineAmountToInvoice = 0 then
                    "VAT Difference" := 0
                  else
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                end;
                if QtyType = QtyType::General then begin
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                end;
                InitOutstanding;
                if Type = Type::"Charge (Item)" then
                  UpdateItemChargeAssgnt;
                MODIFY;
                LineWasModified := true;

                if ("Deferral Code" <> '') and (DeferralAmount <> GetDeferralAmount) then
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              end;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record "Sales Header";VAR SalesLine@1002 : Record "Sales Line";VAR VATAmountLine@1003 : Record "VAT Amount Line");
    VAR
      TotalVATAmount@1011 : Decimal;
      QtyToHandle@1006 : Decimal;
      AmtToHandle@1015 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      Currency.Initialize(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      with SalesLine do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        if FINDSET then
          repeat
            if not ZeroAmountLine(QtyType) then begin
              if (Type = Type::"G/L Account") and not "Prepayment Line" then
                RoundingLineInserted := ("No." = GetCPGInvRoundAcc(SalesHeader)) or RoundingLineInserted;
              if "VAT Calculation Type" in
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              then
                "VAT %" := 0;
              if not VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",false,"Line Amount" >= 0)
              then
                VATAmountLine.InsertNewLine(
                  "VAT Identifier","VAT Calculation Type","Tax Group Code",false,"VAT %","Line Amount" >= 0,false);

              case QtyType of
                QtyType::General:
                  begin
                    VATAmountLine.Quantity += "Quantity (Base)";
                    VATAmountLine.SumLine(
                      "Line Amount","Inv. Discount Amount","VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  end;
                QtyType::Invoicing:
                  begin
                    case true of
                      ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
                      (not SalesHeader.Ship) and SalesHeader.Invoice and (not "Prepayment Line"):
                        if "Shipment No." = '' then begin
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                          VATAmountLine.Quantity += GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                        end else begin
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                        end;
                      ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) and
                      (not SalesHeader.Receive) and SalesHeader.Invoice:
                        if "Return Receipt No." = '' then begin
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                          VATAmountLine.Quantity += GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                        end else begin
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                        end;
                      else
                        begin
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                      end;
                    end;
                    AmtToHandle := GetLineAmountToHandle(QtyToHandle);
                    if SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount then
                      VATAmountLine.SumLine(
                        AmtToHandle,ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision"),
                        "VAT Difference","Allow Invoice Disc.","Prepayment Line")
                    else
                      VATAmountLine.SumLine(
                        AmtToHandle,"Inv. Disc. Amount to Invoice","VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  end;
                QtyType::Shipping:
                  begin
                    if "Document Type" in
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    then begin
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity += "Return Qty. to Receive (Base)";
                    end else begin
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity += "Qty. to Ship (Base)";
                    end;
                    AmtToHandle := GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine.SumLine(
                      AmtToHandle,ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision"),
                      "VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  end;
              end;
              TotalVATAmount += "Amount Including VAT" - Amount;
            end;
          until NEXT = 0;
      end;

      VATAmountLine.UpdateLines(
        TotalVATAmount,Currency,SalesHeader."Currency Factor",SalesHeader."Prices Including VAT",
        SalesHeader."VAT Base Discount %",SalesHeader."Tax Area Code",SalesHeader."Tax Liable",SalesHeader."Posting Date");

      if RoundingLineInserted and (TotalVATAmount <> 0) then
        if VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",
             SalesLine."Tax Group Code",false,SalesLine."Line Amount" >= 0)
        then begin
          VATAmountLine."VAT Amount" += TotalVATAmount;
          VATAmountLine."Amount Including VAT" += TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
          VATAmountLine.MODIFY;
        end;
    END;

    [External]
    PROCEDURE GetCPGInvRoundAcc@71(VAR SalesHeader@1000 : Record "Sales Header") : Code[20];
    VAR
      Cust@1002 : Record Customer;
      CustTemplate@1003 : Record "Customer Template";
      CustPostingGroup@1004 : Record "Customer Posting Group";
    BEGIN
      GetSalesSetup;
      if SalesSetup."Invoice Rounding" then
        if Cust.GET(SalesHeader."Bill-to Customer No.") then
          CustPostingGroup.GET(Cust."Customer Posting Group")
        else
          if CustTemplate.GET(SalesHeader."Sell-to Customer Template Code") then
            CustPostingGroup.GET(CustTemplate."Customer Posting Group");

      exit(CustPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      if Quantity = 0 then
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      else
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      if OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" then begin
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      end;
    END;

    [External]
    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      if Type = Type::Item then
        case true of
          ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) and (Quantity >= 0):
            if Location.RequireShipment("Location Code") then
              VALIDATE("Qty. to Ship",0)
            else
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) and (Quantity < 0):
            if Location.RequireReceive("Location Code") then
              VALIDATE("Qty. to Ship",0)
            else
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") and (Quantity >= 0):
            if Location.RequireReceive("Location Code") then
              VALIDATE("Return Qty. to Receive",0)
            else
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") and (Quantity < 0):
            if Location.RequireShipment("Location Code") then
              VALIDATE("Return Qty. to Receive",0)
            else
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        end;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record Location;
      WhseSetup@1000 : Record "Warehouse Setup";
      ShowDialog@1001 : '" ",Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      if "Location Code" = '' then begin
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      end else
        Location2 := Location;

      DialogText := Text035;
      if ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"]) and
         Location2."Directed Put-away and Pick"
      then begin
        ShowDialog := ShowDialog::Error;
        if (("Document Type" = "Document Type"::Order) and (Quantity >= 0)) or
           (("Document Type" = "Document Type"::"Return Order") and (Quantity < 0))
        then
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        else
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      end else begin
        if (("Document Type" = "Document Type"::Order) and (Quantity >= 0) and
            (Location2."Require Shipment" or Location2."Require Pick")) or
           (("Document Type" = "Document Type"::"Return Order") and (Quantity < 0) and
            (Location2."Require Shipment" or Location2."Require Pick"))
        then begin
          if WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          then
            ShowDialog := ShowDialog::Error
          else
            if Location2."Require Shipment" then
              ShowDialog := ShowDialog::Message;
          if Location2."Require Shipment" then
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          else begin
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          end;
        end;

        if (("Document Type" = "Document Type"::Order) and (Quantity < 0) and
            (Location2."Require Receive" or Location2."Require Put-away")) or
           (("Document Type" = "Document Type"::"Return Order") and (Quantity >= 0) and
            (Location2."Require Receive" or Location2."Require Put-away"))
        then begin
          if WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          then
            ShowDialog := ShowDialog::Error
          else
            if Location2."Require Receive" then
              ShowDialog := ShowDialog::Message;
          if Location2."Require Receive" then
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          else begin
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          end;
        end;
      end;

      case ShowDialog of
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      end;

      HandleDedicatedBin(true);
    END;

    LOCAL PROCEDURE UpdateDates@43();
    BEGIN
      if CurrFieldNo = 0 then begin
        PlannedShipmentDateCalculated := false;
        PlannedDeliveryDateCalculated := false;
      end;
      if "Promised Delivery Date" <> 0D then
        VALIDATE("Promised Delivery Date")
      else
        if "Requested Delivery Date" <> 0D then
          VALIDATE("Requested Delivery Date")
        else
          VALIDATE("Shipment Date");
    END;

    [External]
    PROCEDURE GetItemTranslation@42();
    VAR
      ItemTranslation@1000 : Record "Item Translation";
    BEGIN
      GetSalesHeader;
      if ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") then begin
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      end;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      if "Document No." <> '' then begin
        GetSalesHeader;
        exit(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,true));
      end;
      exit(false);
    END;

    [External]
    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      if "Document No." <> '' then begin
        GetSalesHeader;
        exit(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,true));
      end;
      exit(false);
    END;

    [External]
    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      exit(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@48();
    BEGIN
      DistIntegration.EnterSalesItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit "WMS Management";
    BEGIN
      if Type <> Type::Item then
        exit;

      "Bin Code" := '';
      if "Drop Shipment" then
        exit;

      if ("Location Code" <> '') and ("No." <> '') then begin
        GetLocation("Location Code");
        if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then begin
          if ("Qty. to Assemble to Order" > 0) or IsAsmToOrderRequired then
            if GetATOBin(Location,"Bin Code") then
              exit;

          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(false);
        end;
      end;
    END;

    [External]
    PROCEDURE GetATOBin@89(Location@1001 : Record Location;VAR BinCode@1002 : Code[20]) : Boolean;
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      if not Location."Require Shipment" then
        BinCode := Location."Asm.-to-Order Shpt. Bin Code";
      if BinCode <> '' then
        exit(true);

      if AsmHeader.GetFromAssemblyBin(Location,BinCode) then
        exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      case "Document Type" of
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          exit("Quantity (Base)" < 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          exit("Quantity (Base)" > 0);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@70(IssueWarning@1001 : Boolean);
    VAR
      WhseIntegrationMgt@1002 : Codeunit "Whse. Integration Management";
    BEGIN
      if not IsInbound and ("Quantity (Base)" <> 0) then
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    LOCAL PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    BEGIN
      if TheFieldCaption = '' then begin // If sales line is being deleted
        if "Purch. Order Line No." <> 0 then
          ERROR(
            Text000,
            "Purchase Order No.",
            "Purch. Order Line No.");
        if "Special Order Purch. Line No." <> 0 then
          ERROR(
            Text000,
            "Special Order Purchase No.",
            "Special Order Purch. Line No.");
      end;
      if "Purch. Order Line No." <> 0 then
        ERROR(
          Text002,
          TheFieldCaption,
          "Purchase Order No.",
          "Purch. Order Line No.");
      if "Special Order Purch. Line No." <> 0 then
        ERROR(
          Text002,
          TheFieldCaption,
          "Special Order Purchase No.",
          "Special Order Purch. Line No.");
    END;

    [Internal]
    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record "Item Cross Reference";
      ICGLAcc@1001 : Record "IC G/L Account";
    BEGIN
      case Type of
        Type::Item:
          begin
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            if PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK then begin
              VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              VALIDATE("Unit Price");
            end;
          end;
        Type::"G/L Account",Type::Resource:
          begin
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            if PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAcc) = ACTION::LookupOK then
              "Cross-Reference No." := ICGLAcc."No.";
          end;
      end;
    END;

    LOCAL PROCEDURE CheckServItemCreation@52();
    VAR
      ServItemGroup@1000 : Record "Service Item Group";
    BEGIN
      if CurrFieldNo = 0 then
        exit;
      if Type <> Type::Item then
        exit;
      Item.GET("No.");
      if Item."Service Item Group" = '' then
        exit;
      if ServItemGroup.GET(Item."Service Item Group") then
        if ServItemGroup."Create Service Item" then
          if "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) then
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    [External]
    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record Item;
    BEGIN
      if Type = Type::Item then
        if not Item2.GET(ItemNo) then
          exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      exit(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(QtyHandled) < ABS(QtyToHandle) then
        exit(QtyHandled);

      exit(QtyToHandle);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetHideValidationDialog@123() : Boolean;
    VAR
      IdentityManagement@1000 : Codeunit "Identity Management";
    BEGIN
      exit(HideValidationDialog or IdentityManagement.IsInvAppId);
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemTrackingLines@1003 : Page "Item Tracking Lines";
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      if "Appl.-from Item Entry" = 0 then
        exit;

      if "Shipment No." <> '' then
        exit;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
        if Quantity < 0 then
          FIELDERROR(Quantity,Text029);
      end else begin
        if Quantity > 0 then
          FIELDERROR(Quantity,Text030);
      end;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,false);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      if ItemLedgEntry.TrackingExists then
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      if ABS("Quantity (Base)") > -ItemLedgEntry.Quantity then
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
        if ABS("Outstanding Qty. (Base)") > -ItemLedgEntry."Shipped Qty. Not Returned" then begin
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
          if "Qty. per Unit of Measure" <> 0 then begin
            QtyNotReturned :=
              ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
            QtyReturned :=
              ROUND(
                (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
                "Qty. per Unit of Measure",0.00001);
          end;
          ERROR(
            Text039,
            -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",-QtyNotReturned);
        end;
    END;

    [External]
    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      if ("Qty. to Invoice" <> 0) and ("Prepmt. Amt. Inv." <> 0) then begin
        GetSalesHeader;
        if ("Prepayment %" = 100) and not IsFinalInvoice then
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        else
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      end else
        "Prepmt Amt to Deduct" := 0
    END;

    [External]
    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      exit("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    [External]
    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      if "Line Discount %" = 100 then
        exit(0);

      GetSalesHeader;
      LineAmount := ROUND(QtyToHandle * "Unit Price",Currency."Amount Rounding Precision");
      LineDiscAmount :=
        ROUND(
          LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision");
      exit(LineAmount - LineDiscAmount);
    END;

    PROCEDURE GetLineAmountExclVAT@349() : Decimal;
    BEGIN
      if "Document No." = '' then
        exit(0);
      GetSalesHeader;
      if not SalesHeader."Prices Including VAT" then
        exit("Line Amount");
      exit("Line Amount" - GetVATForLineAmount);
    END;

    PROCEDURE GetLineAmountInclVAT@351() : Decimal;
    BEGIN
      if "Document No." = '' then
        exit(0);
      GetSalesHeader;
      if SalesHeader."Prices Including VAT" then
        exit("Line Amount");
      exit("Line Amount" + GetVATForLineAmount);
    END;

    LOCAL PROCEDURE GetVATForLineAmount@352() : Decimal;
    VAR
      AdjustmentFactorForInvoiceDiscount@1000 : Decimal;
    BEGIN
      if "Line Amount" <= "Inv. Discount Amount" then // Avoid division by zero
        AdjustmentFactorForInvoiceDiscount := 1
      else
        AdjustmentFactorForInvoiceDiscount := "Line Amount" / ("Line Amount" - "Inv. Discount Amount");

      exit(ROUND(("Amount Including VAT" - Amount) * AdjustmentFactorForInvoiceDiscount,Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := true;
    END;

    LOCAL PROCEDURE TestJobPlanningLine@60();
    VAR
      JobPostLine@1000 : Codeunit "Job Post-Line";
    BEGIN
      if "Job Contract Entry No." = 0 then
        exit;

      JobPostLine.TestSalesLine(Rec);
    END;

    [External]
    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      ReserveSalesLine.Block(SetBlock);
    END;

    [External]
    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      ATOLink.UpdateQtyToAsmFromSalesLine(Rec);

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    [External]
    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record "Sales Comment Line";
      SalesCommentSheet@1001 : Page "Sales Comment Sheet";
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    [External]
    PROCEDURE SetDefaultQuantity@62();
    BEGIN
      GetSalesSetup;
      if SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank then begin
        if ("Document Type" = "Document Type"::Order) or ("Document Type" = "Document Type"::Quote) then begin
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        end;
        if "Document Type" = "Document Type"::"Return Order" then begin
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        end;
      end;
    END;

    LOCAL PROCEDURE SetReserveWithoutPurchasingCode@198();
    BEGIN
      GetItem;
      if Item.Reserve = Item.Reserve::Optional then begin
        GetSalesHeader;
        Reserve := SalesHeader.Reserve;
      end else
        Reserve := Item.Reserve;
    END;

    LOCAL PROCEDURE SetDefaultItemQuantity@122();
    BEGIN
      GetSalesSetup;
      if SalesSetup."Default Item Quantity" then begin
        VALIDATE(Quantity,1);
        CheckItemAvailable(CurrFieldNo);
      end;
    END;

    [External]
    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record "Sales Shipment Line";
      SalesOrderLine@1001 : Record "Sales Line";
      SalesOrderHeader@1002 : Record "Sales Header";
    BEGIN
      if ("Document Type" <> "Document Type"::Invoice) or ("Prepayment %" = 0) then
        exit;

      if not ShipmentLine.GET("Shipment No.","Shipment Line No.") then begin
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      end else
        if SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") then begin
          if ("Prepayment %" = 100) and (Quantity <> SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced") then
            "Prepmt Amt to Deduct" := "Line Amount"
          else
            "Prepmt Amt to Deduct" :=
              ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,SalesOrderLine."Document No.");
        end else begin
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        end;

      GetSalesHeader;
      SalesHeader.TESTFIELD("Prices Including VAT",SalesOrderHeader."Prices Including VAT");
      if SalesHeader."Prices Including VAT" then begin
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      end else begin
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      end;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    [External]
    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      if Type = Type::" " then
        exit(true);
      if Quantity = 0 then
        exit(true);
      if "Unit Price" = 0 then
        exit(true);
      if QtyType = QtyType::Invoicing then
        if "Qty. to Invoice" = 0 then
          exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record Item;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@66(VAR Item@1000 : Record Item;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record Item;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(not ISEMPTY);
    END;

    LOCAL PROCEDURE DateFormularZero@73(VAR DateFormularValue@1001 : DateFormula;CalledByFieldNo@1002 : Integer;CalledByFieldCaption@1003 : Text[250]);
    VAR
      DateFormularZero@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormularZero,'<0D>');
      if (DateFormularValue <> DateFormularZero) and (CalledByFieldNo = CurrFieldNo) then
        ERROR(Text051,CalledByFieldCaption,FIELDCAPTION("Drop Shipment"));
      EVALUATE(DateFormularValue,'<0D>');
    END;

    LOCAL PROCEDURE InitQtyToAsm@76();
    BEGIN
      if not IsAsmToOrderAllowed then begin
        "Qty. to Assemble to Order" := 0;
        "Qty. to Asm. to Order (Base)" := 0;
        exit;
      end;

      if ((xRec."Qty. to Asm. to Order (Base)" = 0) and IsAsmToOrderRequired and ("Qty. Shipped (Base)" = 0)) or
         ((xRec."Qty. to Asm. to Order (Base)" <> 0) and
          (xRec."Qty. to Asm. to Order (Base)" = xRec."Quantity (Base)")) or
         ("Qty. to Asm. to Order (Base)" > "Quantity (Base)")
      then begin
        "Qty. to Assemble to Order" := Quantity;
        "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
      end;
    END;

    [External]
    PROCEDURE AsmToOrderExists@72(VAR AsmHeader@1000 : Record "Assembly Header") : Boolean;
    VAR
      ATOLink@1001 : Record "Assemble-to-Order Link";
    BEGIN
      if not ATOLink.AsmExistsForSalesLine(Rec) then
        exit(false);
      exit(AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No."));
    END;

    [External]
    PROCEDURE FullQtyIsForAsmToOrder@74() : Boolean;
    BEGIN
      if "Qty. to Asm. to Order (Base)" = 0 then
        exit(false);
      exit("Quantity (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    LOCAL PROCEDURE FullReservedQtyIsForAsmToOrder@75() : Boolean;
    BEGIN
      if "Qty. to Asm. to Order (Base)" = 0 then
        exit(false);
      CALCFIELDS("Reserved Qty. (Base)");
      exit("Reserved Qty. (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    [External]
    PROCEDURE QtyBaseOnATO@86() : Decimal;
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      if AsmToOrderExists(AsmHeader) then
        exit(AsmHeader."Quantity (Base)");
      exit(0);
    END;

    [External]
    PROCEDURE QtyAsmRemainingBaseOnATO@90() : Decimal;
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      if AsmToOrderExists(AsmHeader) then
        exit(AsmHeader."Remaining Quantity (Base)");
      exit(0);
    END;

    [External]
    PROCEDURE QtyToAsmBaseOnATO@88() : Decimal;
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      if AsmToOrderExists(AsmHeader) then
        exit(AsmHeader."Quantity to Assemble (Base)");
      exit(0);
    END;

    [External]
    PROCEDURE IsAsmToOrderAllowed@77() : Boolean;
    BEGIN
      if not ("Document Type" in ["Document Type"::Quote,"Document Type"::"Blanket Order","Document Type"::Order]) then
        exit(false);
      if Quantity < 0 then
        exit(false);
      if Type <> Type::Item then
        exit(false);
      if "No." = '' then
        exit(false);
      if "Drop Shipment" or "Special Order" then
        exit(false);
      exit(true)
    END;

    [External]
    PROCEDURE IsAsmToOrderRequired@81() : Boolean;
    BEGIN
      if (Type <> Type::Item) or ("No." = '') then
        exit(false);
      GetItem;
      if GetSKU then
        exit(SKU."Assembly Policy" = SKU."Assembly Policy"::"Assemble-to-Order");
      exit(Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order");
    END;

    [External]
    PROCEDURE CheckAsmToOrder@85(AsmHeader@1001 : Record "Assembly Header");
    BEGIN
      TESTFIELD("Qty. to Assemble to Order",AsmHeader.Quantity);
      TESTFIELD("Document Type",AsmHeader."Document Type");
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",AsmHeader."Item No.");
      TESTFIELD("Location Code",AsmHeader."Location Code");
      TESTFIELD("Unit of Measure Code",AsmHeader."Unit of Measure Code");
      TESTFIELD("Variant Code",AsmHeader."Variant Code");
      TESTFIELD("Shipment Date",AsmHeader."Due Date");
      if "Document Type" = "Document Type"::Order then begin
        AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
        AsmHeader.TESTFIELD("Reserved Qty. (Base)",AsmHeader."Remaining Quantity (Base)");
      end;
      TESTFIELD("Qty. to Asm. to Order (Base)",AsmHeader."Quantity (Base)");
      if "Outstanding Qty. (Base)" < AsmHeader."Remaining Quantity (Base)" then
        AsmHeader.FIELDERROR("Remaining Quantity (Base)",STRSUBSTNO(Text045,AsmHeader."Remaining Quantity (Base)"));
    END;

    [External]
    PROCEDURE ShowAsmToOrderLines@80();
    VAR
      ATOLink@1000 : Record "Assemble-to-Order Link";
    BEGIN
      ATOLink.ShowAsmToOrderLines(Rec);
    END;

    [External]
    PROCEDURE FindOpenATOEntry@96(LotNo@1003 : Code[20];SerialNo@1004 : Code[20]) : Integer;
    VAR
      PostedATOLink@1002 : Record "Posted Assemble-to-Order Link";
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      if PostedATOLink.FindLinksFromSalesLine(Rec) then
        repeat
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Posted Assembly");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Assembly Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",0);
          ItemLedgEntry.SetTrackingFilter(SerialNo,LotNo);
          ItemLedgEntry.SETRANGE(Open,true);
          if ItemLedgEntry.FINDFIRST then
            exit(ItemLedgEntry."Entry No.");
        until PostedATOLink.NEXT = 0;
    END;

    [External]
    PROCEDURE RollUpAsmCost@83();
    BEGIN
      ATOLink.RollUpCost(Rec);
    END;

    [Internal]
    PROCEDURE RollupAsmPrice@84();
    BEGIN
      GetSalesHeader;
      ATOLink.RollUpPrice(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE UpdateICPartner@78();
    VAR
      ICPartner@1000 : Record "IC Partner";
      ItemCrossReference@1001 : Record "Item Cross Reference";
    BEGIN
      if SalesHeader."Send IC Document" and
         (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) and
         (SalesHeader."Bill-to IC Partner Code" <> '')
      then
        case Type of
          Type::" ",Type::"Charge (Item)":
            begin
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            end;
          Type::"G/L Account":
            begin
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            end;
          Type::Item:
            begin
              if SalesHeader."Sell-to IC Partner Code" <> '' then
                ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
              else
                ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
              case ICPartner."Outbound Sales Item No. Type" of
                ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Sales Item No. Type"::"Internal No.",
                ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                  begin
                    if ICPartner."Outbound Sales Item No. Type" = ICPartner."Outbound Sales Item No. Type"::"Internal No." then
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::Item)
                    else
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    if ItemCrossReference.FINDFIRST then
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No."
                    else
                      "IC Partner Reference" := "No.";
                  end;
              end;
            end;
          Type::"Fixed Asset":
            begin
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            end;
          Type::Resource:
            begin
              Resource.GET("No.");
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
              "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
            end;
        end;
    END;

    [External]
    PROCEDURE OutstandingInvoiceAmountFromShipment@12(SellToCustomerNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Sell-to Customer No.","Shipment No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.SETFILTER("Shipment No.",'<>%1','');
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      exit(SalesLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE CheckShipmentRelation@94();
    VAR
      SalesShptLine@1001 : Record "Sales Shipment Line";
    BEGIN
      SalesShptLine.GET("Shipment No.","Shipment Line No.");
      if (Quantity * SalesShptLine."Qty. Shipped Not Invoiced") < 0 then
        FIELDERROR("Qty. to Invoice",Text057);
      if ABS(Quantity) > ABS(SalesShptLine."Qty. Shipped Not Invoiced") then
        ERROR(Text058,SalesShptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetRcptRelation@95();
    VAR
      ReturnRcptLine@1000 : Record "Return Receipt Line";
    BEGIN
      ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
      if (Quantity * (ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")) < 0 then
        FIELDERROR("Qty. to Invoice",Text059);
      if ABS(Quantity) > ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced") then
        ERROR(Text060,ReturnRcptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      if IsShippedReceivedItemDimChanged then
        ConfirmShippedReceivedItemDimChange;
    END;

    [External]
    PROCEDURE IsShippedReceivedItemDimChanged@113() : Boolean;
    BEGIN
      exit(("Dimension Set ID" <> xRec."Dimension Set ID") and (Type = Type::Item) and
        (("Qty. Shipped Not Invoiced" <> 0) or ("Return Rcd. Not Invd." <> 0)));
    END;

    [External]
    PROCEDURE ConfirmShippedReceivedItemDimChange@114() : Boolean;
    BEGIN
      if not CONFIRM(Text053,true,TABLECAPTION) then
        ERROR(Text054);

      exit(true);
    END;

    [External]
    PROCEDURE InitType@91();
    BEGIN
      if "Document No." <> '' then begin
        if not SalesHeader.GET("Document Type","Document No.") then
          exit;
        if (SalesHeader.Status = SalesHeader.Status::Released) and
           (xRec.Type in [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        then
          Type := Type::" "
        else
          Type := xRec.Type;
      end;
    END;

    LOCAL PROCEDURE CheckWMS@98();
    BEGIN
      if CurrFieldNo <> 0 then
        CheckLocationOnWMS;
    END;

    [External]
    PROCEDURE CheckLocationOnWMS@101();
    VAR
      DialogText@1001 : Text;
    BEGIN
      if Type = Type::Item then begin
        DialogText := Text035;
        if "Quantity (Base)" <> 0 then
          case "Document Type" of
            "Document Type"::Invoice:
              if "Shipment No." = '' then
                if Location.GET("Location Code") and Location."Directed Put-away and Pick" then begin
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                end;
            "Document Type"::"Credit Memo":
              if "Return Receipt No." = '' then
                if Location.GET("Location Code") and Location."Directed Put-away and Pick" then begin
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                end;
          end;
      end;
    END;

    [External]
    PROCEDURE IsServiceItem@68() : Boolean;
    BEGIN
      if Type <> Type::Item then
        exit(false);
      if "No." = '' then
        exit(false);
      GetItem;
      exit(Item.Type = Item.Type::Service);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    VAR
      ReturnReason@1001 : Record "Return Reason";
    BEGIN
      if CallingFieldNo = 0 then
        exit;
      if "Return Reason Code" = '' then begin
        if (Type = Type::Item) and ("No." <> '') then
          GetUnitCost;
        UpdateUnitPrice(CallingFieldNo);
      end;

      if ReturnReason.GET("Return Reason Code") then begin
        if (CallingFieldNo <> FIELDNO("Location Code")) and (ReturnReason."Default Location Code" <> '') then
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        if ReturnReason."Inventory Value Zero" then
          VALIDATE("Unit Cost (LCY)",0)
        else
          if "Unit Price" = 0 then
            UpdateUnitPrice(CallingFieldNo);
      end;
    END;

    [External]
    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      exit(Type <> Type::" ");
    END;

    [External]
    PROCEDURE GetDeferralAmount@104() DeferralAmount : Decimal;
    BEGIN
      if "VAT Base Amount" <> 0 then
        DeferralAmount := "VAT Base Amount"
      else
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@105();
    VAR
      AdjustStartDate@1000 : Boolean;
    BEGIN
      GetSalesHeader;
      DeferralPostDate := SalesHeader."Posting Date";
      AdjustStartDate := true;
      if "Document Type" = "Document Type"::"Return Order" then begin
        if "Returns Deferral Start Date" = 0D then
          "Returns Deferral Start Date" := SalesHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := false;
      end;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE UpdatePriceDescription@147();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      "Price description" := '';
      if Type in [Type::"Charge (Item)",Type::"Fixed Asset",Type::Item,Type::Resource] then begin
        if "Line Discount %" = 0 then
          "Price description" := STRSUBSTNO(
              PriceDescriptionTxt,Quantity,Currency.ResolveGLCurrencySymbol("Currency Code"),
              "Unit Price","Unit of Measure")
        else
          "Price description" := STRSUBSTNO(
              PriceDescriptionWithLineDiscountTxt,Quantity,Currency.ResolveGLCurrencySymbol("Currency Code"),
              "Unit Price","Unit of Measure","Line Discount %")
      end;
    END;

    [Internal]
    PROCEDURE ShowDeferrals@106(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      exit(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitHeaderDefaults@107(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if SalesHeader."Document Type" = SalesHeader."Document Type"::Quote then begin
        if (SalesHeader."Sell-to Customer No." = '') and
           (SalesHeader."Sell-to Customer Template Code" = '')
        then
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        if (SalesHeader."Bill-to Customer No." = '') and
           (SalesHeader."Bill-to Customer Template Code" = '')
        then
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      end else
        SalesHeader.TESTFIELD("Sell-to Customer No.");

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      "Currency Code" := SalesHeader."Currency Code";
      if not IsServiceItem then
        "Location Code" := SalesHeader."Location Code";
      "Customer Price Group" := SalesHeader."Customer Price Group";
      "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      "Allow Line Disc." := SalesHeader."Allow Line Disc.";
      "Transaction Type" := SalesHeader."Transaction Type";
      "Transport Method" := SalesHeader."Transport Method";
      "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      "Exit Point" := SalesHeader."Exit Point";
      Area := SalesHeader.Area;
      "Transaction Specification" := SalesHeader."Transaction Specification";
      "Tax Area Code" := SalesHeader."Tax Area Code";
      "Tax Liable" := SalesHeader."Tax Liable";
      if not "System-Created Entry" and ("Document Type" = "Document Type"::Order) and (Type <> Type::" ") then
        "Prepayment %" := SalesHeader."Prepayment %";
      "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      "Prepayment Tax Liable" := SalesHeader."Tax Liable";
      "Responsibility Center" := SalesHeader."Responsibility Center";

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
      "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
      "Shipping Time" := SalesHeader."Shipping Time";
    END;

    LOCAL PROCEDURE InitDeferralCode@108();
    BEGIN
      if "Document Type" in
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      then
        case Type of
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
          Type::Resource:
            VALIDATE("Deferral Code",Res."Default Deferral Template Code");
        end;
    END;

    [External]
    PROCEDURE DefaultDeferralCode@109();
    BEGIN
      case Type of
        Type::"G/L Account":
          begin
            GLAcc.GET("No.");
            InitDeferralCode;
          end;
        Type::Item:
          begin
            GetItem;
            InitDeferralCode;
          end;
        Type::Resource:
          begin
            Res.GET("No.");
            InitDeferralCode;
          end;
      end;
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      exit("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE IsFullyInvoiced@224() : Boolean;
    BEGIN
      exit(("Qty. Shipped Not Invd. (Base)" = 0) and ("Qty. Shipped (Base)" = "Quantity (Base)"))
    END;

    LOCAL PROCEDURE CleanSpecialOrderFieldsAndCheckAssocPurchOrder@125();
    BEGIN
      if ("Special Order Purch. Line No." <> 0) and IsFullyInvoiced then
        if CleanPurchaseLineSpecialOrderFields then begin
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
        end;
      CheckAssocPurchOrder('');
    END;

    LOCAL PROCEDURE CleanPurchaseLineSpecialOrderFields@219() : Boolean;
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
    BEGIN
      if PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Special Order Purchase No.","Special Order Purch. Line No.") then begin
        if PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" then
          exit(false);

        PurchaseLine."Special Order" := false;
        PurchaseLine."Special Order Sales No." := '';
        PurchaseLine."Special Order Sales Line No." := 0;
        PurchaseLine.MODIFY;
      end;

      exit(true);
    END;

    [External]
    PROCEDURE CanEditUnitOfMeasureCode@115() : Boolean;
    VAR
      ItemUnitOfMeasure@1000 : Record "Item Unit of Measure";
    BEGIN
      if (Type = Type::Item) and ("No." <> '') then begin
        ItemUnitOfMeasure.SETRANGE("Item No.","No.");
        exit(ItemUnitOfMeasure.COUNT > 1);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ValidateTaxGroupCode@79();
    VAR
      TaxDetail@1001 : Record "Tax Detail";
    BEGIN
      if ("Tax Area Code" <> '') and ("Tax Group Code" <> '') then
        TaxDetail.ValidateTaxSetup("Tax Area Code","Tax Group Code","Posting Date");
    END;

    [External]
    PROCEDURE InsertFreightLine@121(VAR FreightAmount@1000 : Decimal);
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      if FreightAmount <= 0 then begin
        FreightAmount := 0;
        exit;
      end;

      SalesSetup.GET;
      SalesSetup.TESTFIELD("Freight G/L Acc. No.");

      TESTFIELD("Document Type");
      TESTFIELD("Document No.");

      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","Document No.");

      SalesLine.SETRANGE(Type,SalesLine.Type::"G/L Account");
      SalesLine.SETRANGE("No.",SalesSetup."Freight G/L Acc. No.");
      if SalesLine.FINDFIRST then begin
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.MODIFY;
      end else begin
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("No.");
        SalesLine.FINDLAST;
        SalesLine."Line No." += 10000;

        SalesLine.INIT;
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
        SalesLine.VALIDATE("No.",SalesSetup."Freight G/L Acc. No.");
        SalesLine.VALIDATE(Description,FreightLineDescriptionTxt);
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@154(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := ("Line Amount" - "Inv. Discount Amount") * TotalQtyToAssign / Quantity;
      if SalesHeader."Prices Including VAT" then
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE IsLookupRequested@119() Result : Boolean;
    BEGIN
      Result := LookupRequested;
      LookupRequested := false;
    END;

    [External]
    PROCEDURE TestItemFields@120(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",ItemNo);
      TESTFIELD("Variant Code",VariantCode);
      TESTFIELD("Location Code",LocationCode);
    END;

    [External]
    PROCEDURE CalculateNotShippedInvExlcVatLCY@118();
    VAR
      Currency2@1000 : Record Currency;
    BEGIN
      Currency2.InitRoundingPrecision;
      "Shipped Not Inv. (LCY) No VAT" :=
        ROUND("Shipped Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
    END;

    PROCEDURE ClearSalesHeader@124();
    BEGIN
      CLEAR(SalesHeader);
    END;

    PROCEDURE FormatType@149() : Text[20];
    BEGIN
      if Type = Type::" " then
        exit(CommentLbl);

      exit(FORMAT(Type));
    END;

    PROCEDURE RenameNo@133(LineType@1000 : Option;OldNo@1001 : Code[20];NewNo@1002 : Code[20]);
    BEGIN
      RESET;
      SETRANGE(Type,LineType);
      SETRANGE("No.",OldNo);
      MODIFYALL("No.",NewNo,true);
    END;

    PROCEDURE UpdatePlanned@151() : Boolean;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      CALCFIELDS("Reserved Quantity");
      if Planned = ("Reserved Quantity" = "Outstanding Quantity") then
        exit(false);
      Planned := not Planned;
      exit(true);
    END;

    PROCEDURE AssignedItemCharge@153() : Boolean;
    BEGIN
      exit((Type = Type::"Charge (Item)") and ("No." <> '') and ("Qty. to Assign" < Quantity));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignHeaderValues@134(VAR SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignStdTxtValues@135(VAR SalesLine@1000 : Record "Sales Line";StandardText@1001 : Record "Standard Text");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignGLAccountValues@138(VAR SalesLine@1000 : Record "Sales Line";GLAccount@1001 : Record "G/L Account");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemValues@136(VAR SalesLine@1000 : Record "Sales Line";Item@1001 : Record Item);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemChargeValues@137(VAR SalesLine@1000 : Record "Sales Line";ItemCharge@1001 : Record "Item Charge");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignResourceValues@139(VAR SalesLine@1000 : Record "Sales Line";Resource@1001 : Record Resource);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignFixedAssetValues@140(VAR SalesLine@1000 : Record "Sales Line";FixedAsset@1001 : Record "Fixed Asset");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemUOM@141(VAR SalesLine@1000 : Record "Sales Line";Item@1001 : Record Item);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignResourceUOM@143(VAR SalesLine@1001 : Record "Sales Line";Resource@1000 : Record Resource;ResourceUOM@1002 : Record "Resource Unit of Measure");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateUnitPrice@126(VAR SalesLine@1000 : Record "Sales Line";xSalesLine@1001 : Record "Sales Line";CalledByFieldNo@1002 : Integer;CurrFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateUnitPrice@127(VAR SalesLine@1003 : Record "Sales Line";xSalesLine@1002 : Record "Sales Line";CalledByFieldNo@1001 : Integer;CurrFieldNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVerifyReservedQty@145(VAR SalesLine@1000 : Record "Sales Line";xSalesLine@1001 : Record "Sales Line";CalledByFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitOutstandingAmount@132(VAR SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header";Currency@1002 : Record Currency);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToInvoice@128(VAR SalesLine@1000 : Record "Sales Line";CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToShip@129(VAR SalesLine@1000 : Record "Sales Line";CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToReceive@130(VAR SalesLine@1000 : Record "Sales Line";CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateAmounts@152(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR SalesLine@1000 : Record "Sales Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

