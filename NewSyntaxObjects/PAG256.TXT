OBJECT Page 256 Payment Journal
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Payment Journal;
    SaveValues=true;
    SourceTable="Gen. Journal Line";
    DataCaptionExpr=DataCaption;
    DelayedInsert=true;
    PageType=Worksheet;
    AutoSplitKey=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Bank,Prepare,Approve,Page;
    OnInit=BEGIN
             TotalBalanceVisible := true;
             BalanceVisible := true;
             AmountVisible := true;
           END;

    OnOpenPage=VAR
                 ServerConfigSettingHandler@1001 : Codeunit "Server Config. Setting Handler";
                 JnlSelected@1000 : Boolean;
               BEGIN
                 IsSaasExcelAddinEnabled := ServerConfigSettingHandler.GetIsSaasExcelAddinEnabled;
                 if CURRENTCLIENTTYPE = CLIENTTYPE::ODataV4 then
                   exit;

                 BalAccName := '';

                 if IsOpenedFromBatch then begin
                   CurrentJnlBatchName := "Journal Batch Name";
                   GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                   SetControlAppearanceFromBatch;
                   exit;
                 end;
                 GenJnlManagement.TemplateSelection(PAGE::"Payment Journal",4,false,Rec,JnlSelected);
                 if not JnlSelected then
                   ERROR('');
                 GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                 SetControlAppearanceFromBatch;

                 ShowAmounts;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                       ShowShortcutDimCode(ShortcutDimCode);
                       HasPmtFileErr := HasPaymentFileErrors;
                       RecipientBankAccountMandatory := IsAllowPaymentExport and
                         (("Bal. Account Type" = "Bal. Account Type"::Vendor) or ("Bal. Account Type" = "Bal. Account Type"::Customer));
                     END;

    OnNewRecord=BEGIN
                  HasPmtFileErr := false;
                  UpdateBalance;
                  EnableApplyEntriesAction;
                  SetUpNewLine(xRec,Balance,BelowxRec);
                  CLEAR(ShortcutDimCode);
                END;

    OnModifyRecord=BEGIN
                     CheckForPmtJnlErrors;
                   END;

    OnAfterGetCurrRecord=VAR
                           GenJournalBatch@1000 : Record "Gen. Journal Batch";
                           WorkflowEventHandling@1001 : Codeunit "Workflow Event Handling";
                           WorkflowManagement@1002 : Codeunit "Workflow Management";
                         BEGIN
                           StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                           GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                           UpdateBalance;
                           EnableApplyEntriesAction;
                           SetControlAppearance;
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);

                           if GenJournalBatch.GET("Journal Template Name","Journal Batch Name") then begin
                             ShowWorkflowStatusOnBatch := CurrPage.WorkflowStatusBatch.PAGE.SetFilterOnWorkflowRecord(GenJournalBatch.RECORDID);
                             IsAllowPaymentExport := GenJournalBatch."Allow Payment Export";
                           end;
                           ShowWorkflowStatusOnLine := CurrPage.WorkflowStatusLine.PAGE.SetFilterOnWorkflowRecord(RECORDID);

                           EventFilter := WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode;
                           EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::"Gen. Journal Line",EventFilter);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 57      ;1   ;ActionGroup;
                      Name=&Line;
                      CaptionML=ENU=&Line;
                      Image=Line }
      { 58      ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=Dimensions;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 92      ;2   ;Action    ;
                      Name=IncomingDoc;
                      AccessByPermission=TableData "Incoming Document"=R;
                      CaptionML=ENU=Incoming Document;
                      ToolTipML=ENU=View or create an incoming document record that is linked to the entry or document.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Document;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record "Incoming Document";
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocument("Incoming Document Entry No.",RECORDID));
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      Name=A&ccount;
                      CaptionML=ENU=A&ccount;
                      Image=ChartOfAccounts }
      { 38      ;2   ;Action    ;
                      Name=Card;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      ToolTipML=ENU=View or change detailed information about the record on the document or journal line.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit "Gen. Jnl.-Show Card";
                      Image=EditLines }
      { 39      ;2   ;Action    ;
                      Name=Ledger E&ntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      ToolTipML=ENU=View the history of transactions that have been posted for the selected record.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit "Gen. Jnl.-Show Entries";
                      Promoted=false;
                      Image=GLRegisters;
                      PromotedCategory=Process }
      { 41      ;1   ;ActionGroup;
                      Name=&Payments;
                      CaptionML=ENU=&Payments;
                      Image=Payment }
      { 42      ;2   ;Action    ;
                      Name=SuggestVendorPayments;
                      Ellipsis=true;
                      CaptionML=ENU=Suggest Vendor Payments;
                      ToolTipML=ENU=Create payment suggestions as lines in the payment journal.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=SuggestVendorPayments;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SuggestVendorPayments@1001 : Report "Suggest Vendor Payments";
                               BEGIN
                                 CLEAR(SuggestVendorPayments);
                                 SuggestVendorPayments.SetGenJnlLine(Rec);
                                 SuggestVendorPayments.RUNMODAL;
                               END;
                                }
      { 112     ;2   ;Action    ;
                      Name=SuggestEmployeePayments;
                      Ellipsis=true;
                      CaptionML=ENU=Suggest Employee Payments;
                      ToolTipML=ENU=Create payment suggestions as lines in the payment journal.;
                      ApplicationArea=#BasicHR;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=SuggestVendorPayments;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SuggestEmployeePayments@1001 : Report "Suggest Employee Payments";
                               BEGIN
                                 CLEAR(SuggestEmployeePayments);
                                 SuggestEmployeePayments.SetGenJnlLine(Rec);
                                 SuggestEmployeePayments.RUNMODAL;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Name=PreviewCheck;
                      CaptionML=ENU=P&review Check;
                      ToolTipML=ENU=Preview the check before printing it.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Check Preview";
                      RunPageLink="Journal Template Name"=FIELD("Journal Template Name"),
                                  "Journal Batch Name"=FIELD("Journal Batch Name"),
                                  "Line No."=FIELD("Line No.");
                      Image=ViewCheck }
      { 64      ;2   ;Action    ;
                      Name=PrintCheck;
                      AccessByPermission=TableData "Check Ledger Entry"=R;
                      Ellipsis=true;
                      CaptionML=ENU=Print Check;
                      ToolTipML=ENU=Prepare to print the check.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=PrintCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.RESET;
                                 GenJnlLine.COPY(Rec);
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 DocPrint.PrintCheck(GenJnlLine);
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);
                               END;
                                }
      { 106     ;2   ;ActionGroup;
                      Name=Electronic Payments;
                      CaptionML=ENU=Electronic Payments;
                      Image=ElectronicPayment }
      { 15      ;3   ;Action    ;
                      Name=ExportPaymentsToFile;
                      Ellipsis=true;
                      CaptionML=ENU=E&xport;
                      ToolTipML=ENU=Export a file with the payment information on the journal lines.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ExportFile;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 GenJnlLine@1001 : Record "Gen. Journal Line";
                               BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 if GenJnlLine.FINDFIRST then
                                   GenJnlLine.ExportPaymentFile;
                               END;
                                }
      { 104     ;3   ;Action    ;
                      Name=VoidPayments;
                      Ellipsis=true;
                      CaptionML=ENU=Void;
                      ToolTipML=ENU=Void the exported electronic payment file.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=VoidElectronicDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 if GenJnlLine.FINDFIRST then
                                   GenJnlLine.VoidPaymentFile;
                               END;
                                }
      { 107     ;3   ;Action    ;
                      Name=TransmitPayments;
                      Ellipsis=true;
                      CaptionML=ENU=Transmit;
                      ToolTipML=ENU=Transmit the exported electronic payment file to the bank.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=TransmitElectronicDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 if GenJnlLine.FINDFIRST then
                                   GenJnlLine.TransmitPaymentFile;
                               END;
                                }
      { 65      ;2   ;Action    ;
                      Name=Void Check;
                      CaptionML=ENU=Void Check;
                      ToolTipML=ENU=Void the check if, for example, the check is not cashed by the bank.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=VoidCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                 TESTFIELD("Check Printed",true);
                                 if CONFIRM(Text000,false,"Document No.") then
                                   CheckManagement.VoidCheck(Rec);
                               END;
                                }
      { 66      ;2   ;Action    ;
                      Name=Void &All Checks;
                      CaptionML=ENU=Void &All Checks;
                      ToolTipML=ENU=Void all checks if, for example, the checks are not cashed by the bank.;
                      ApplicationArea=#Basic,#Suite;
                      Image=VoidAllChecks;
                      OnAction=BEGIN
                                 if CONFIRM(Text001,false) then begin
                                   GenJnlLine.RESET;
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   GenJnlLine.SETRANGE("Check Printed",true);
                                   if GenJnlLine.FIND('-') then
                                     repeat
                                       GenJnlLine2 := GenJnlLine;
                                       CheckManagement.VoidCheck(GenJnlLine2);
                                     until GenJnlLine.NEXT = 0;
                                 end;
                               END;
                                }
      { 26      ;2   ;Action    ;
                      Name=CreditTransferRegEntries;
                      CaptionML=ENU=Credit Transfer Reg. Entries;
                      ToolTipML=ENU=View or edit the credit transfer entries that are related to file export for credit transfers.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit "Gen. Jnl.-Show CT Entries";
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ExportReceipt;
                      PromotedCategory=Category4 }
      { 23      ;2   ;Action    ;
                      Name=CreditTransferRegisters;
                      CaptionML=ENU=Credit Transfer Registers;
                      ToolTipML=ENU=View or edit the payment files that have been exported in connection with credit transfers.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Credit Transfer Registers";
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ExportElectronicDocument;
                      PromotedCategory=Category4 }
      { 54      ;1   ;Action    ;
                      Name=Approvals;
                      AccessByPermission=TableData "Approval Entry"=R;
                      CaptionML=ENU=Approvals;
                      ToolTipML=ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                      ApplicationArea=#Suite;
                      Image=Approvals;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record "Gen. Journal Line";
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.ShowJournalApprovalEntries(GenJournalLine);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 40      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 19      ;2   ;Action    ;
                      Name=Renumber Document Numbers;
                      CaptionML=ENU=Renumber Document Numbers;
                      ToolTipML=ENU=Resort the numbers in the Document No. column to avoid posting errors because the document numbers are not in sequence. Entry applications and line groupings are preserved.;
                      ApplicationArea=#Basic,#Suite;
                      Image=EditLines;
                      OnAction=BEGIN
                                 RenumberDocumentNo
                               END;
                                }
      { 93      ;2   ;Action    ;
                      Name=ApplyEntries;
                      ShortCutKey=Shift+F11;
                      Ellipsis=true;
                      CaptionML=ENU=Apply Entries;
                      ToolTipML=ENU=Apply the payment amount on a journal line to a sales or purchase document that was already posted for a customer or vendor. This updates the amount on the posted document, and the document can either be partially paid, or closed as paid or refunded.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit "Gen. Jnl.-Apply";
                      Promoted=true;
                      Enabled=ApplyEntriesActionEnabled;
                      Image=ApplyEntries;
                      PromotedCategory=Process }
      { 68      ;2   ;Action    ;
                      Name=CalculatePostingDate;
                      CaptionML=ENU=Calculate Posting Date;
                      ToolTipML=ENU=Calculate the date that will appear as the posting date on the journal lines.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=CalcWorkCenterCalendar;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CalculatePostingDate;
                               END;
                                }
      { 94      ;2   ;Action    ;
                      Name=Insert Conv. LCY Rndg. Lines;
                      CaptionML=ENU=Insert Conv. LCY Rndg. Lines;
                      ToolTipML=ENU=Insert a rounding correction line in the journal. This rounding correction line will balance in LCY when amounts in the foreign currency also balance. You can then post the journal.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit "Adjust Gen. Journal Balance";
                      Image=InsertCurrency }
      { 34      ;2   ;Action    ;
                      Name=PositivePayExport;
                      CaptionML=ENU=Positive Pay Export;
                      ToolTipML=ENU=Export a Positive Pay file that contains vendor information, check number, and payment amount, which you send to the bank to make sure that your bank only clears validated checks and amounts when you process payments.;
                      ApplicationArea=#Advanced;
                      Visible=FALSE;
                      Image=Export;
                      OnAction=VAR
                                 GenJnlBatch@1000 : Record "Gen. Journal Batch";
                                 BankAcc@1001 : Record "Bank Account";
                               BEGIN
                                 GenJnlBatch.GET("Journal Template Name",CurrentJnlBatchName);
                                 if GenJnlBatch."Bal. Account Type" = GenJnlBatch."Bal. Account Type"::"Bank Account" then begin
                                   BankAcc."No." := GenJnlBatch."Bal. Account No.";
                                   PAGE.RUN(PAGE::"Positive Pay Export",BankAcc);
                                 end;
                               END;
                                }
      { 43      ;1   ;ActionGroup;
                      Name=P&osting;
                      CaptionML=ENU=P&osting;
                      Image=Post }
      { 48      ;2   ;Action    ;
                      Name=Reconcile;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=ENU=Reconcile;
                      ToolTipML=ENU=View the balances on bank accounts that are marked for reconciliation, usually liquid accounts.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Reconcile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 GLReconcile.SetGenJnlLine(Rec);
                                 GLReconcile.RUN;
                               END;
                                }
      { 78      ;2   ;Action    ;
                      Name=PreCheck;
                      CaptionML=ENU=Vendor Pre-Payment Journal;
                      ToolTipML=ENU=View journal line entries, payment discounts, discount tolerance amounts, payment tolerance, and any errors associated with the entries. You can use the results of the report to review payment journal lines and to review the results of posting before you actually post.;
                      ApplicationArea=#Basic,#Suite;
                      Image=PreviewChecks;
                      OnAction=VAR
                                 GenJournalBatch@1000 : Record "Gen. Journal Batch";
                               BEGIN
                                 GenJournalBatch.INIT;
                                 GenJournalBatch.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJournalBatch.SETRANGE(Name,"Journal Batch Name");
                                 REPORT.RUN(REPORT::"Vendor Pre-Payment Journal",true,false,GenJournalBatch);
                               END;
                                }
      { 45      ;2   ;Action    ;
                      Name=Test Report;
                      Ellipsis=true;
                      CaptionML=ENU=Test Report;
                      ToolTipML=ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                      ApplicationArea=#Basic,#Suite;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintGenJnlLine(Rec);
                               END;
                                }
      { 46      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=ENU=P&ost;
                      ToolTipML=ENU=Finalize the document or journal by posting the amounts and quantities to the related accounts in your company books.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=ENU=Preview Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the document or journal.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      OnAction=VAR
                                 GenJnlPost@1001 : Codeunit "Gen. Jnl.-Post";
                               BEGIN
                                 GenJnlPost.Preview(Rec);
                               END;
                                }
      { 47      ;2   ;Action    ;
                      Name=Post and &Print;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Post and &Print;
                      ToolTipML=ENU=Finalize and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post+Print",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 36      ;1   ;ActionGroup;
                      Name=Request Approval;
                      CaptionML=ENU=Request Approval }
      { 86      ;2   ;ActionGroup;
                      Name=SendApprovalRequest;
                      CaptionML=ENU=Send Approval Request;
                      Image=SendApprovalRequest }
      { 76      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalBatch;
                      CaptionML=ENU=Journal Batch;
                      ToolTipML=ENU=Send all journal lines for approval, also those that you may not see because of filters.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrAnyJnlLineExist AND CanRequestFlowApprovalForBatchAndAllLines;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 ApprovalsMgmt.TrySendJournalBatchApprovalRequest(Rec);
                                 SetControlAppearanceFromBatch;
                                 SetControlAppearance;
                               END;
                                }
      { 74      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalLine;
                      CaptionML=ENU=Selected Journal Lines;
                      ToolTipML=ENU=Send selected journal lines for approval.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrCurrJnlLineExist AND CanRequestFlowApprovalForBatchAndCurrentLine;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record "Gen. Journal Line";
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TrySendJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 52      ;2   ;ActionGroup;
                      Name=CancelApprovalRequest;
                      CaptionML=ENU=Cancel Approval Request;
                      Image=Cancel }
      { 50      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalBatch;
                      CaptionML=ENU=Journal Batch;
                      ToolTipML=ENU=Cancel sending all journal lines for approval, also those that you may not see because of filters.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=CanCancelApprovalForJnlBatch OR CanCancelFlowApprovalForBatch;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 ApprovalsMgmt.TryCancelJournalBatchApprovalRequest(Rec);
                                 SetControlAppearanceFromBatch;
                                 SetControlAppearance;
                               END;
                                }
      { 96      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalLine;
                      CaptionML=ENU=Selected Journal Lines;
                      ToolTipML=ENU=Cancel sending selected journal lines for approval.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=CanCancelApprovalForJnlLine OR CanCancelFlowApprovalForLine;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record "Gen. Journal Line";
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TryCancelJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 114     ;2   ;Action    ;
                      Name=CreateFlow;
                      CaptionML=ENU=Create a Flow;
                      ToolTipML=ENU=Create a new Flow from a list of relevant Flow templates.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Flow;
                      OnAction=VAR
                                 FlowServiceManagement@1000 : Codeunit "Flow Service Management";
                                 FlowTemplateSelector@1001 : Page "Flow Template Selector";
                               BEGIN
                                 // Opens page 6400 where the user can use filtered templates to create new flows.
                                 FlowTemplateSelector.SetSearchText(FlowServiceManagement.GetJournalTemplateFilter);
                                 FlowTemplateSelector.RUN;
                               END;
                                }
      { 116     ;2   ;Action    ;
                      Name=SeeFlows;
                      CaptionML=ENU=See my Flows;
                      ToolTipML=ENU=View and configure Flows that you created.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Flow Selector";
                      Image=Flow }
      { 98      ;1   ;ActionGroup;
                      Name=Workflow;
                      CaptionML=ENU=Workflow }
      { 90      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=ENU=Create Approval Workflow;
                      ToolTipML=ENU=Set up an approval workflow for payment journal lines, by going through a few pages that will guide you.;
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=VAR
                                 TempApprovalWorkflowWizard@1001 : TEMPORARY Record "Approval Workflow Wizard";
                               BEGIN
                                 TempApprovalWorkflowWizard."Journal Batch Name" := "Journal Batch Name";
                                 TempApprovalWorkflowWizard."Journal Template Name" := "Journal Template Name";
                                 TempApprovalWorkflowWizard."For All Batches" := false;
                                 TempApprovalWorkflowWizard.INSERT;

                                 PAGE.RUNMODAL(PAGE::"Pmt. App. Workflow Setup Wzrd.",TempApprovalWorkflowWizard);
                               END;
                                }
      { 102     ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=ENU=Manage Approval Workflows;
                      ToolTipML=ENU=View or edit existing approval workflows for payment journal lines.;
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit "Workflow Management";
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::"Gen. Journal Line",EventFilter);
                               END;
                                }
      { 72      ;1   ;ActionGroup;
                      Name=Approval;
                      CaptionML=ENU=Approval }
      { 70      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=ENU=Approve;
                      ToolTipML=ENU=Approve the requested changes.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=true;
                      Image=Approve;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 ApprovalsMgmt.ApproveGenJournalLineRequest(Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=ENU=Reject;
                      ToolTipML=ENU=Reject the approval request.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=true;
                      Image=Reject;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 ApprovalsMgmt.RejectGenJournalLineRequest(Rec);
                               END;
                                }
      { 60      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=ENU=Delegate;
                      ToolTipML=ENU=Delegate the approval to a substitute approver.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 ApprovalsMgmt.DelegateGenJournalLineRequest(Rec);
                               END;
                                }
      { 56      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=ENU=Comments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 GenJournalBatch@1001 : Record "Gen. Journal Batch";
                                 ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                               BEGIN
                                 if OpenApprovalEntriesOnJnlLineExist then
                                   ApprovalsMgmt.GetApprovalComment(Rec)
                                 else
                                   if OpenApprovalEntriesOnJnlBatchExist then
                                     if GenJournalBatch.GET("Journal Template Name","Journal Batch Name") then
                                       ApprovalsMgmt.GetApprovalComment(GenJournalBatch);
                               END;
                                }
      { 109     ;1   ;ActionGroup;
                      Name=Page;
                      CaptionML=ENU=Page }
      { 108     ;2   ;Action    ;
                      Name=EditInExcel;
                      CaptionML=ENU=Edit in Excel;
                      ToolTipML=ENU=Send the data in the journal to an Excel file for analysis or editing.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=IsSaasExcelAddinEnabled;
                      PromotedIsBig=true;
                      Image=Excel;
                      PromotedCategory=Category7;
                      PromotedOnly=true;
                      OnAction=VAR
                                 ODataUtility@1000 : Codeunit ODataUtility;
                               BEGIN
                                 ODataUtility.EditJournalWorksheetInExcel(CurrPage.CAPTION,CurrPage.OBJECTID(false),"Journal Batch Name","Journal Template Name");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 33  ;1   ;Field     ;
                Name=CurrentJnlBatchName;
                Lookup=true;
                CaptionML=ENU=Batch Name;
                ToolTipML=ENU=Specifies the batch name on the payment journal.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentJnlBatchName;
                OnValidate=BEGIN
                             GenJnlManagement.CheckName(CurrentJnlBatchName,Rec);
                             CurrentJnlBatchNameOnAfterVali;
                           END;

                OnLookup=BEGIN
                           CurrPage.SAVERECORD;
                           GenJnlManagement.LookupName(CurrentJnlBatchName,Rec);
                           CurrPage.UPDATE(false);
                         END;

                ImplicitType=Code10 }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Posting Date;
                ToolTipML=ENU=Specifies the posting date for the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Date }

    { 35  ;2   ;Field     ;
                Name=Document Date;
                ToolTipML=ENU=Specifies the date on the document that provides the basis for the entry on the journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Date";
                Visible=FALSE;
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name=Document Type;
                ToolTipML=ENU=Specifies the type of document that the entry on the journal line is.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies a document number for the journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Code20 }

    { 9   ;2   ;Field     ;
                Name=Incoming Document Entry No.;
                ToolTipML=ENU=Specifies the number of the incoming document that this general journal line is created for.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Incoming Document Entry No.";
                Visible=FALSE;
                OnAssistEdit=BEGIN
                               if "Incoming Document Entry No." > 0 then
                                 HYPERLINK(GetIncomingDocumentURL);
                             END;

                ImplicitType=Integer }

    { 83  ;2   ;Field     ;
                Name=External Document No.;
                ToolTipML=ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No.";
                ImplicitType=Code35 }

    { 21  ;2   ;Field     ;
                Name=Applies-to Ext. Doc. No.;
                ToolTipML=ENU=Specifies the external document number that will be exported in the payment file.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Ext. Doc. No.";
                Visible=FALSE;
                ImplicitType=Code35 }

    { 8   ;2   ;Field     ;
                Name=Account Type;
                ToolTipML=ENU=Specifies the type of account that the entry on the journal line will be posted to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account Type";
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             EnableApplyEntriesAction;
                           END;

                ImplicitType=Option }

    { 10  ;2   ;Field     ;
                Name=Account No.;
                ToolTipML=ENU=Specifies the account number that the entry on the journal line will be posted to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;

                ImplicitType=Code20;
                ShowMandatory=True }

    { 13  ;2   ;Field     ;
                Name=Recipient Bank Account;
                ToolTipML=ENU=Specifies the bank account that the amount will be transferred to after it has been exported from the payment journal.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Recipient Bank Account";
                ImplicitType=Code10;
                ShowMandatory=RecipientBankAccountMandatory }

    { 11  ;2   ;Field     ;
                Name=Message to Recipient;
                ToolTipML=ENU=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Message to Recipient";
                ImplicitType=Text140 }

    { 12  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Text50 }

    { 53  ;2   ;Field     ;
                Name=Salespers./Purch. Code;
                ToolTipML=ENU=Specifies the salesperson or purchaser who is linked to the journal line.;
                ApplicationArea=#Suite;
                SourceExpr="Salespers./Purch. Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 95  ;2   ;Field     ;
                Name=Campaign No.;
                ToolTipML=ENU=Specifies the number of the campaign the journal line is linked to.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Campaign No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 55  ;2   ;Field     ;
                Name=Currency Code;
                AssistEdit=true;
                ToolTipML=ENU=Specifies the code of the currency for the amounts on the journal line.;
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                OnAssistEdit=BEGIN
                               ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date");
                               if ChangeExchangeRate.RUNMODAL = ACTION::OK then
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);

                               CLEAR(ChangeExchangeRate);
                             END;

                ImplicitType=Code10 }

    { 77  ;2   ;Field     ;
                Name=Gen. Posting Type;
                ToolTipML=ENU=Specifies the general posting type that will be used when you post the entry on this journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Posting Type";
                Visible=FALSE;
                ImplicitType=Option }

    { 79  ;2   ;Field     ;
                Name=Gen. Bus. Posting Group;
                ToolTipML=ENU=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.;
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 81  ;2   ;Field     ;
                Name=Gen. Prod. Posting Group;
                ToolTipML=ENU=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.;
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Prod. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 85  ;2   ;Field     ;
                Name=VAT Bus. Posting Group;
                ToolTipML=ENU=Specifies the VAT business posting group code that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 87  ;2   ;Field     ;
                Name=VAT Prod. Posting Group;
                ToolTipML=ENU=Specifies the VAT product posting group. Links business transactions made for the item, resource, or G/L account with the general ledger, to account for VAT amounts resulting from trade with that record.;
                ApplicationArea=#Advanced;
                SourceExpr="VAT Prod. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 100 ;2   ;Field     ;
                Name=Payment Method Code;
                ToolTipML=ENU=Specifies the payment method that was used to make the payment that resulted in the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code";
                ImplicitType=Code10;
                ShowMandatory=True }

    { 110 ;2   ;Field     ;
                Name=Payment Reference;
                ToolTipML=ENU=Specifies the payment of the purchase invoice.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Reference";
                ImplicitType=Code50 }

    { 115 ;2   ;Field     ;
                Name=Creditor No.;
                ToolTipML=ENU=Specifies the vendor who sent the purchase invoice.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Creditor No.";
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=Amount;
                ToolTipML=ENU=Specifies the total amount (including VAT) that the journal line consists of.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible;
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ImplicitType=Decimal;
                ShowMandatory=True }

    { 111 ;2   ;Field     ;
                Name=Amount (LCY);
                ToolTipML=ENU=Specifies the total amount in local currency (including VAT) that the journal line consists of.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount (LCY)";
                Visible=AmountVisible;
                ImplicitType=Decimal }

    { 1000;2   ;Field     ;
                Name=Debit Amount;
                ToolTipML=ENU=Specifies the total amount (including VAT) that the journal line consists of, if it is a debit amount. The amount must be entered in the currency represented by the currency code on the line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible;
                ImplicitType=Decimal }

    { 1001;2   ;Field     ;
                Name=Credit Amount;
                ToolTipML=ENU=Specifies the total amount (including VAT) that the journal line consists of, if it is a credit amount. The amount must be entered in the currency represented by the currency code on the line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible;
                ImplicitType=Decimal }

    { 97  ;2   ;Field     ;
                Name=VAT Amount;
                ToolTipML=ENU=Specifies the amount of VAT included in the total amount.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 101 ;2   ;Field     ;
                Name=VAT Difference;
                ToolTipML=ENU=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Difference";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 99  ;2   ;Field     ;
                Name=Bal. VAT Amount;
                ToolTipML=ENU=Specifies the amount of Bal. VAT included in the total amount.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 103 ;2   ;Field     ;
                Name=Bal. VAT Difference;
                ToolTipML=ENU=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Difference";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 61  ;2   ;Field     ;
                Name=Bal. Account Type;
                ToolTipML=ENU=Specifies the code for the balancing account type that should be used in this journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account Type";
                OnValidate=BEGIN
                             EnableApplyEntriesAction;
                           END;

                ImplicitType=Option }

    { 16  ;2   ;Field     ;
                Name=Bal. Account No.;
                ToolTipML=ENU=Specifies the number of the general ledger, customer, vendor, or bank account to which a balancing entry for the journal line will posted (for example, a cash account for cash purchases).;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account No.";
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;

                ImplicitType=Code20 }

    { 71  ;2   ;Field     ;
                Name=Bal. Gen. Posting Type;
                ToolTipML=ENU=Specifies the general posting type that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Posting Type";
                Visible=FALSE;
                ImplicitType=Option }

    { 73  ;2   ;Field     ;
                Name=Bal. Gen. Bus. Posting Group;
                ToolTipML=ENU=Specifies the code of the general business posting group that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Bus. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 75  ;2   ;Field     ;
                Name=Bal. Gen. Prod. Posting Group;
                ToolTipML=ENU=Specifies the code of the general product posting group that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Prod. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 89  ;2   ;Field     ;
                Name=Bal. VAT Bus. Posting Group;
                ToolTipML=ENU=Specifies the code of the VAT business posting group that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Bal. VAT Bus. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 91  ;2   ;Field     ;
                Name=Bal. VAT Prod. Posting Group;
                ToolTipML=ENU=Specifies the code of the VAT product posting group that will be used when you post the entry on the journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Bal. VAT Prod. Posting Group";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 49  ;2   ;Field     ;
                Name=Shortcut Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 51  ;2   ;Field     ;
                Name=Shortcut Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 300 ;2   ;Field     ;
                Name=ShortcutDimCode[3];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(3),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                           END;
                            }

    { 302 ;2   ;Field     ;
                Name=ShortcutDimCode[4];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(4),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                           END;
                            }

    { 304 ;2   ;Field     ;
                Name=ShortcutDimCode[5];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(5),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);
                           END;
                            }

    { 306 ;2   ;Field     ;
                Name=ShortcutDimCode[6];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(6),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);
                           END;
                            }

    { 308 ;2   ;Field     ;
                Name=ShortcutDimCode[7];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(7),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);
                           END;
                            }

    { 310 ;2   ;Field     ;
                Name=ShortcutDimCode[8];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(8),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=Applied (Yes/No);
                CaptionML=ENU=Applied (Yes/No);
                ToolTipML=ENU=Specifies if the payment has been applied.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IsApplied;
                ImplicitType=Boolean }

    { 18  ;2   ;Field     ;
                Name=Applies-to Doc. Type;
                ToolTipML=ENU=Specifies the type of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. Type";
                ImplicitType=Option }

    { 20  ;2   ;Field     ;
                Name=AppliesToDocNo;
                ToolTipML=ENU=Specifies the number of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. No.";
                StyleExpr=StyleTxt;
                ImplicitType=Code20 }

    { 22  ;2   ;Field     ;
                Name=Applies-to ID;
                ToolTipML=ENU=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to ID";
                Visible=FALSE;
                StyleExpr=StyleTxt;
                ImplicitType=Code50 }

    { 105 ;2   ;Field     ;
                Name=GetAppliesToDocDueDate;
                CaptionML=ENU=Applies-to Doc. Due Date;
                ToolTipML=ENU=Specifies the due date from the Applies-to Doc. on the journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetAppliesToDocDueDate;
                StyleExpr=StyleTxt;
                ImplicitType=Date }

    { 67  ;2   ;Field     ;
                Name=Bank Payment Type;
                ToolTipML=ENU=Specifies the code for the payment type to be used for the entry on the payment journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Payment Type";
                ImplicitType=Option }

    { 59  ;2   ;Field     ;
                Name=Check Printed;
                ToolTipML=ENU=Specifies whether a check has been printed for the amount on the payment journal line.;
                ApplicationArea=#Advanced;
                SourceExpr="Check Printed";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 69  ;2   ;Field     ;
                Name=Reason Code;
                ToolTipML=ENU=Specifies the reason code that has been entered on the journal lines.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Reason Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 113 ;2   ;Field     ;
                Name=Correction;
                ToolTipML=ENU=Specifies the entry as a corrective entry. You can use the field if you need to post a corrective entry to an account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Correction;
                ImplicitType=Boolean }

    { 3   ;2   ;Field     ;
                Name=Comment;
                ToolTipML=ENU=Specifies a comment related to registering a payment.;
                ApplicationArea=#Advanced;
                SourceExpr=Comment;
                Visible=FALSE;
                ImplicitType=Text250 }

    { 290 ;2   ;Field     ;
                Name=Exported to Payment File;
                ToolTipML=ENU=Specifies that the payment journal line was exported to a payment file.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exported to Payment File";
                ImplicitType=Boolean }

    { 28  ;2   ;Field     ;
                Name=TotalExportedAmount;
                DrillDown=true;
                CaptionML=ENU=Total Exported Amount;
                ToolTipML=ENU=Specifies the amount for the payment journal line that has been exported to payment files that are not canceled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalExportedAmount;
                OnDrillDown=BEGIN
                              DrillDownExportedAmount
                            END;

                ImplicitType=Decimal }

    { 17  ;2   ;Field     ;
                Name=Has Payment Export Error;
                ToolTipML=ENU=Specifies that an error occurred when you used the Export Payments to File function in the Payment Journal window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Has Payment Export Error";
                ImplicitType=Boolean }

    { 24  ;1   ;Group     ;
                Name=Group24 }

    { 80  ;2   ;Group     ;
                Name=Group80;
                GroupType=FixedLayout }

    { 82  ;3   ;Group     ;
                Name=Group82;
                GroupType=Group }

    { 84  ;4   ;Field     ;
                Name=OverdueWarningText;
                ToolTipML=ENU=Specifies the text that is displayed for overdue payments.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OverdueWarningText;
                Style=Unfavorable;
                StyleExpr=TRUE;
                ImplicitType=Text }

    { 1903561801;2;Group  ;
                Name=Group1903561801;
                GroupType=FixedLayout }

    { 1903866901;3;Group  ;
                Name=Account Name;
                CaptionML=ENU=Account Name }

    { 29  ;4   ;Field     ;
                Name=AccName;
                ToolTipML=ENU=Specifies the name of the account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AccName;
                Editable=FALSE;
                ImplicitType=Text50;
                ShowCaption=false }

    { 1902759701;3;Group  ;
                Name=Bal. Account Name;
                CaptionML=ENU=Bal. Account Name }

    { 31  ;4   ;Field     ;
                Name=BalAccName;
                CaptionML=ENU=Bal. Account Name;
                ToolTipML=ENU=Specifies the name of the balancing account that has been entered on the journal line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BalAccName;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 1900545401;3;Group  ;
                Name=Group1900545401;
                CaptionML=ENU=Balance }

    { 25  ;4   ;Field     ;
                Name=Balance;
                CaptionML=ENU=Balance;
                ToolTipML=ENU=Specifies the balance that has accumulated in the payment journal on the line where the cursor is.;
                ApplicationArea=#All;
                SourceExpr=Balance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=BalanceVisible;
                Editable=FALSE }

    { 1900295801;3;Group  ;
                Name=Total Balance;
                CaptionML=ENU=Total Balance }

    { 27  ;4   ;Field     ;
                Name=TotalBalance;
                CaptionML=ENU=Total Balance;
                ToolTipML=ENU=Specifies the total balance in the payment journal.;
                ApplicationArea=#All;
                SourceExpr=TotalBalance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=TotalBalanceVisible;
                Editable=FALSE }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 30  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID="Incoming Doc. Attach. FactBox";
                PartType=Page;
                ShowFilter=false }

    { 7   ;1   ;Part      ;
                Name=Payment File Errors;
                CaptionML=ENU=Payment File Errors;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="Journal Template Name"=FIELD("Journal Template Name"),
                            "Journal Batch Name"=FIELD("Journal Batch Name"),
                            "Journal Line No."=FIELD("Line No.");
                PagePartID="Payment Journal Errors Part";
                PartType=Page }

    { 1900919607;1;Part   ;
                Name=Part1900919607;
                ApplicationArea=#Advanced;
                SubPageLink="Dimension Set ID"=FIELD("Dimension Set ID");
                PagePartID="Dimension Set Entries FactBox";
                Visible=FALSE;
                PartType=Page }

    { 88  ;1   ;Part      ;
                Name=WorkflowStatusBatch;
                CaptionML=ENU=Batch Workflows;
                ApplicationArea=#Suite;
                PagePartID="Workflow Status FactBox";
                Visible=ShowWorkflowStatusOnBatch;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=false }

    { 44  ;1   ;Part      ;
                Name=WorkflowStatusLine;
                CaptionML=ENU=Line Workflows;
                ApplicationArea=#Suite;
                PagePartID="Workflow Status FactBox";
                Visible=ShowWorkflowStatusOnLine;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=false }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Void Check %1?';
      Text001@1001 : TextConst 'ENU=Void all printed checks?';
      GenJnlLine@1003 : Record "Gen. Journal Line";
      GenJnlLine2@1004 : Record "Gen. Journal Line";
      GenJnlManagement@1007 : Codeunit GenJnlManagement;
      ReportPrint@1008 : Codeunit "Test Report-Print";
      DocPrint@1009 : Codeunit "Document-Print";
      CheckManagement@1010 : Codeunit CheckManagement;
      ChangeExchangeRate@1005 : Page "Change Exchange Rate";
      GLReconcile@1002 : Page Reconciliation;
      CurrentJnlBatchName@1011 : Code[10];
      AccName@1012 : Text[50];
      BalAccName@1013 : Text[50];
      Balance@1014 : Decimal;
      TotalBalance@1015 : Decimal;
      ShowBalance@1016 : Boolean;
      ShowTotalBalance@1017 : Boolean;
      HasPmtFileErr@1006 : Boolean;
      ShortcutDimCode@1018 : ARRAY [8] OF Code[20];
      ApplyEntriesActionEnabled@1031 : Boolean;
      BalanceVisible@19073040 : Boolean INDATASET;
      TotalBalanceVisible@19063333 : Boolean INDATASET;
      StyleTxt@1106 : Text;
      OverdueWarningText@1120 : Text;
      EventFilter@1029 : Text;
      OpenApprovalEntriesExistForCurrUser@1019 : Boolean;
      OpenApprovalEntriesExistForCurrUserBatch@1032 : Boolean;
      OpenApprovalEntriesOnJnlBatchExist@1024 : Boolean;
      OpenApprovalEntriesOnJnlLineExist@1023 : Boolean;
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist@1022 : Boolean;
      OpenApprovalEntriesOnBatchOrAnyJnlLineExist@1021 : Boolean;
      ShowWorkflowStatusOnBatch@1020 : Boolean;
      ShowWorkflowStatusOnLine@1025 : Boolean;
      CanCancelApprovalForJnlBatch@1026 : Boolean;
      CanCancelApprovalForJnlLine@1027 : Boolean;
      EnabledApprovalWorkflowsExist@1028 : Boolean;
      IsAllowPaymentExport@1030 : Boolean;
      IsSaasExcelAddinEnabled@1033 : Boolean;
      RecipientBankAccountMandatory@1034 : Boolean;
      CanRequestFlowApprovalForBatch@1035 : Boolean;
      CanRequestFlowApprovalForBatchAndAllLines@1036 : Boolean;
      CanRequestFlowApprovalForBatchAndCurrentLine@1037 : Boolean;
      CanCancelFlowApprovalForBatch@1038 : Boolean;
      CanCancelFlowApprovalForLine@1039 : Boolean;
      AmountVisible@1040 : Boolean;
      DebitCreditVisible@1041 : Boolean;

    LOCAL PROCEDURE CheckForPmtJnlErrors@5();
    VAR
      BankAccount@1000 : Record "Bank Account";
      BankExportImportSetup@1001 : Record "Bank Export/Import Setup";
    BEGIN
      if HasPmtFileErr then
        if ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") and BankAccount.GET("Bal. Account No.") then
          if BankExportImportSetup.GET(BankAccount."Payment Export Format") then
            if BankExportImportSetup."Check Export Codeunit" > 0 then
              CODEUNIT.RUN(BankExportImportSetup."Check Export Codeunit",Rec);
    END;

    LOCAL PROCEDURE UpdateBalance@1();
    BEGIN
      GenJnlManagement.CalcBalance(
        Rec,xRec,Balance,TotalBalance,ShowBalance,ShowTotalBalance);
      BalanceVisible := ShowBalance;
      TotalBalanceVisible := ShowTotalBalance;
    END;

    LOCAL PROCEDURE EnableApplyEntriesAction@2();
    BEGIN
      ApplyEntriesActionEnabled :=
        ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]) or
        ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]);
    END;

    LOCAL PROCEDURE CurrentJnlBatchNameOnAfterVali@19002411();
    BEGIN
      CurrPage.SAVERECORD;
      GenJnlManagement.SetName(CurrentJnlBatchName,Rec);
      SetControlAppearanceFromBatch;
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE GetCurrentlySelectedLines@3(VAR GenJournalLine@1000 : Record "Gen. Journal Line") : Boolean;
    BEGIN
      CurrPage.SETSELECTIONFILTER(GenJournalLine);
      exit(GenJournalLine.FINDSET);
    END;

    LOCAL PROCEDURE SetControlAppearanceFromBatch@4();
    VAR
      GenJournalBatch@1000 : Record "Gen. Journal Batch";
      ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
      WorkflowWebhookManagement@1001 : Codeunit "Workflow Webhook Management";
      CanRequestFlowApprovalForAllLines@1003 : Boolean;
    BEGIN
      if ("Journal Template Name" <> '') and ("Journal Batch Name" <> '') then
        GenJournalBatch.GET("Journal Template Name","Journal Batch Name")
      else
        if not GenJournalBatch.GET(GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName) then
          exit;

      CheckOpenApprovalEntries(GenJournalBatch.RECORDID);

      CanCancelApprovalForJnlBatch := ApprovalsMgmt.CanCancelApprovalForRecord(GenJournalBatch.RECORDID);

      WorkflowWebhookManagement.GetCanRequestAndCanCancelJournalBatch(
        GenJournalBatch,CanRequestFlowApprovalForBatch,CanCancelFlowApprovalForBatch,CanRequestFlowApprovalForAllLines);
      CanRequestFlowApprovalForBatchAndAllLines := CanRequestFlowApprovalForBatch and CanRequestFlowApprovalForAllLines;
    END;

    LOCAL PROCEDURE CheckOpenApprovalEntries@7(BatchRecordId@1000 : RecordID);
    VAR
      ApprovalsMgmt@1001 : Codeunit "Approvals Mgmt.";
    BEGIN
      OpenApprovalEntriesExistForCurrUserBatch := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(BatchRecordId);

      OpenApprovalEntriesOnJnlBatchExist := ApprovalsMgmt.HasOpenApprovalEntries(BatchRecordId);

      OpenApprovalEntriesOnBatchOrAnyJnlLineExist :=
        OpenApprovalEntriesOnJnlBatchExist or
        ApprovalsMgmt.HasAnyOpenJournalLineApprovalEntries("Journal Template Name","Journal Batch Name");
    END;

    LOCAL PROCEDURE SetControlAppearance@6();
    VAR
      ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
      WorkflowWebhookManagement@1000 : Codeunit "Workflow Webhook Management";
      CanRequestFlowApprovalForLine@1001 : Boolean;
    BEGIN
      OpenApprovalEntriesExistForCurrUser :=
        OpenApprovalEntriesExistForCurrUserBatch or ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);

      OpenApprovalEntriesOnJnlLineExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist := OpenApprovalEntriesOnJnlBatchExist or OpenApprovalEntriesOnJnlLineExist;

      CanCancelApprovalForJnlLine := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

      WorkflowWebhookManagement.GetCanRequestAndCanCancel(RECORDID,CanRequestFlowApprovalForLine,CanCancelFlowApprovalForLine);
      CanRequestFlowApprovalForBatchAndCurrentLine := CanRequestFlowApprovalForBatch and CanRequestFlowApprovalForLine;
    END;

    LOCAL PROCEDURE ShowAmounts@8();
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      GLSetup.GET;
      AmountVisible := not (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := not (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

