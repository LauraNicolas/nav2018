OBJECT Codeunit 423 Change Log Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Change Log Setup"=r,
                TableData "Change Log Setup (Table)"=r,
                TableData "Change Log Setup (Field)"=r,
                TableData "Change Log Entry"=ri;
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ChangeLogSetup@1000 : Record "Change Log Setup";
      ChangeLogSetupTable@1003 : Record "Change Log Setup (Table)";
      TempChangeLogSetupTable@1002 : TEMPORARY Record "Change Log Setup (Table)";
      ChangeLogSetupField@1004 : Record "Change Log Setup (Field)";
      TempChangeLogSetupField@1005 : TEMPORARY Record "Change Log Setup (Field)";
      ChangeLogSetupRead@1001 : Boolean;

    [External]
    PROCEDURE GetDatabaseTableTriggerSetup@11(TableID@1004 : Integer;VAR LogInsert@1003 : Boolean;VAR LogModify@1002 : Boolean;VAR LogDelete@1001 : Boolean;VAR LogRename@1000 : Boolean);
    BEGIN
      if COMPANYNAME = '' then
        exit;

      if TableID = DATABASE::"Change Log Entry" then
        exit;

      if TableID in
         [DATABASE::User,
          DATABASE::"User Property",
          DATABASE::"Access Control",
          DATABASE::"Permission Set",
          DATABASE::Permission,
          DATABASE::"Change Log Setup",
          DATABASE::"Change Log Setup (Table)",
          DATABASE::"Change Log Setup (Field)"]
      then begin
        LogInsert := true;
        LogModify := true;
        LogDelete := true;
        LogRename := true;
        exit;
      end;

      if not ChangeLogSetupRead then begin
        if ChangeLogSetup.GET then;
        ChangeLogSetupRead := true;
      end;

      if not ChangeLogSetup."Change Log Activated" then
        exit;

      if not TempChangeLogSetupTable.GET(TableID) then begin
        if not ChangeLogSetupTable.GET(TableID) then begin
          TempChangeLogSetupTable.INIT;
          TempChangeLogSetupTable."Table No." := TableID;
        end else
          TempChangeLogSetupTable := ChangeLogSetupTable;
        TempChangeLogSetupTable.INSERT;
      end;

      with TempChangeLogSetupTable do begin
        LogInsert := "Log Insertion" <> "Log Insertion"::" ";
        LogModify := "Log Modification" <> "Log Modification"::" ";
        LogRename := "Log Modification" <> "Log Modification"::" ";
        LogDelete := "Log Deletion" <> "Log Deletion"::" ";
      end;
    END;

    LOCAL PROCEDURE IsLogActive@2(TableNumber@1000 : Integer;FieldNumber@1001 : Integer;TypeOfChange@1002 : 'Insertion,Modification,Deletion') : Boolean;
    BEGIN
      if TableNumber in
         [DATABASE::User,
          DATABASE::"User Property",
          DATABASE::"Access Control",
          DATABASE::"Permission Set",
          DATABASE::Permission,
          DATABASE::"Change Log Setup",
          DATABASE::"Change Log Setup (Table)",
          DATABASE::"Change Log Setup (Field)"]
      then
        exit(true);

      if not ChangeLogSetupRead then begin
        if ChangeLogSetup.GET then;
        ChangeLogSetupRead := true;
      end;
      if not ChangeLogSetup."Change Log Activated" then
        exit(false);
      if not TempChangeLogSetupTable.GET(TableNumber) then begin
        if not ChangeLogSetupTable.GET(TableNumber) then begin
          TempChangeLogSetupTable.INIT;
          TempChangeLogSetupTable."Table No." := TableNumber;
        end else
          TempChangeLogSetupTable := ChangeLogSetupTable;
        TempChangeLogSetupTable.INSERT;
      end;

      with TempChangeLogSetupTable do
        case TypeOfChange of
          TypeOfChange::Insertion:
            if "Log Insertion" = "Log Insertion"::"Some Fields" then
              exit(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            else
              exit("Log Insertion" = "Log Insertion"::"All Fields");
          TypeOfChange::Modification:
            if "Log Modification" = "Log Modification"::"Some Fields" then
              exit(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            else
              exit("Log Modification" = "Log Modification"::"All Fields");
          TypeOfChange::Deletion:
            if "Log Deletion" = "Log Deletion"::"Some Fields" then
              exit(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            else
              exit("Log Deletion" = "Log Deletion"::"All Fields");
        end;
    END;

    LOCAL PROCEDURE IsFieldLogActive@6(TableNumber@1000 : Integer;FieldNumber@1001 : Integer;TypeOfChange@1002 : 'Insertion,Modification,Deletion') : Boolean;
    BEGIN
      if FieldNumber = 0 then
        exit(true);

      if not TempChangeLogSetupField.GET(TableNumber,FieldNumber) then begin
        if not ChangeLogSetupField.GET(TableNumber,FieldNumber) then begin
          TempChangeLogSetupField.INIT;
          TempChangeLogSetupField."Table No." := TableNumber;
          TempChangeLogSetupField."Field No." := FieldNumber;
        end else
          TempChangeLogSetupField := ChangeLogSetupField;
        TempChangeLogSetupField.INSERT;
      end;

      with TempChangeLogSetupField do
        case TypeOfChange of
          TypeOfChange::Insertion:
            exit("Log Insertion");
          TypeOfChange::Modification:
            exit("Log Modification");
          TypeOfChange::Deletion:
            exit("Log Deletion");
        end;
    END;

    LOCAL PROCEDURE InsertLogEntry@8(VAR FldRef@1000 : FieldRef;VAR xFldRef@1001 : FieldRef;VAR RecRef@1004 : RecordRef;TypeOfChange@1002 : 'Insertion,Modification,Deletion';IsReadable@1008 : Boolean);
    VAR
      ChangeLogEntry@1003 : Record "Change Log Entry";
      KeyFldRef@1005 : FieldRef;
      KeyRef1@1006 : KeyRef;
      i@1007 : Integer;
    BEGIN
      ChangeLogEntry.CHANGECOMPANY(RecRef.CURRENTCOMPANY);
      ChangeLogEntry.INIT;
      ChangeLogEntry."Date and Time" := CURRENTDATETIME;
      ChangeLogEntry.Time := DT2TIME(ChangeLogEntry."Date and Time");

      ChangeLogEntry."User ID" := USERID;

      ChangeLogEntry."Table No." := RecRef.NUMBER;
      ChangeLogEntry."Field No." := FldRef.NUMBER;
      ChangeLogEntry."Type of Change" := TypeOfChange;
      if (RecRef.NUMBER = DATABASE::"User Property") and (FldRef.NUMBER in [2..5]) then begin // Password like
        ChangeLogEntry."Old Value" := '*';
        ChangeLogEntry."New Value" := '*';
      end else begin
        if TypeOfChange <> TypeOfChange::Insertion then
          if IsReadable then
            ChangeLogEntry."Old Value" := FORMAT(xFldRef.VALUE,0,9)
          else
            ChangeLogEntry."Old Value" := '';
        if TypeOfChange <> TypeOfChange::Deletion then
          ChangeLogEntry."New Value" := FORMAT(FldRef.VALUE,0,9);
      end;

      ChangeLogEntry."Record ID" := RecRef.RECORDID;
      ChangeLogEntry."Primary Key" := RecRef.GETPOSITION(false);

      KeyRef1 := RecRef.KEYINDEX(1);
      for i := 1 to KeyRef1.FIELDCOUNT do begin
        KeyFldRef := KeyRef1.FIELDINDEX(i);

        case i of
          1:
            begin
              ChangeLogEntry."Primary Key Field 1 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 1 Value" := FORMAT(KeyFldRef.VALUE,0,9);
            end;
          2:
            begin
              ChangeLogEntry."Primary Key Field 2 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 2 Value" := FORMAT(KeyFldRef.VALUE,0,9);
            end;
          3:
            begin
              ChangeLogEntry."Primary Key Field 3 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 3 Value" := FORMAT(KeyFldRef.VALUE,0,9);
            end;
        end;
      end;
      ChangeLogEntry.INSERT;
    END;

    [External]
    PROCEDURE LogInsertion@1(VAR RecRef@1000 : RecordRef);
    VAR
      FldRef@1003 : FieldRef;
      i@1002 : Integer;
    BEGIN
      if RecRef.ISTEMPORARY then
        exit;

      if not IsLogActive(RecRef.NUMBER,0,0) then
        exit;
      for i := 1 to RecRef.FIELDCOUNT do begin
        FldRef := RecRef.FIELDINDEX(i);
        if HasValue(FldRef) then
          if IsNormalField(FldRef) then
            if IsLogActive(RecRef.NUMBER,FldRef.NUMBER,0) then
              InsertLogEntry(FldRef,FldRef,RecRef,0,true);
      end;
    END;

    [External]
    PROCEDURE LogModification@3(VAR RecRef@1000 : RecordRef);
    VAR
      xRecRef@1001 : RecordRef;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
      IsReadable@1005 : Boolean;
    BEGIN
      if RecRef.ISTEMPORARY then
        exit;

      if not IsLogActive(RecRef.NUMBER,0,1) then
        exit;

      xRecRef.OPEN(RecRef.NUMBER);
      if xRecRef.READPERMISSION then begin
        IsReadable := true;
        if not xRecRef.GET(RecRef.RECORDID) then
          exit;
      end;

      for i := 1 to RecRef.FIELDCOUNT do begin
        FldRef := RecRef.FIELDINDEX(i);
        xFldRef := xRecRef.FIELDINDEX(i);
        if IsNormalField(FldRef) then
          if FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) then
            if IsLogActive(RecRef.NUMBER,FldRef.NUMBER,1) then
              InsertLogEntry(FldRef,xFldRef,RecRef,1,IsReadable);
      end;
    END;

    [External]
    PROCEDURE LogRename@9(VAR RecRef@1000 : RecordRef;VAR xRecRefParam@1001 : RecordRef);
    VAR
      xRecRef@1005 : RecordRef;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
    BEGIN
      if RecRef.ISTEMPORARY then
        exit;

      if not IsLogActive(RecRef.NUMBER,0,1) then
        exit;

      xRecRef.OPEN(xRecRefParam.NUMBER,false,RecRef.CURRENTCOMPANY);
      xRecRef.GET(xRecRefParam.RECORDID);
      for i := 1 to RecRef.FIELDCOUNT do begin
        FldRef := RecRef.FIELDINDEX(i);
        xFldRef := xRecRef.FIELDINDEX(i);
        if IsNormalField(FldRef) then
          if FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) then
            if IsLogActive(RecRef.NUMBER,FldRef.NUMBER,1) then
              InsertLogEntry(FldRef,xFldRef,RecRef,1,true);
      end;
    END;

    [External]
    PROCEDURE LogDeletion@4(VAR RecRef@1000 : RecordRef);
    VAR
      FldRef@1001 : FieldRef;
      i@1002 : Integer;
    BEGIN
      if RecRef.ISTEMPORARY then
        exit;

      if not IsLogActive(RecRef.NUMBER,0,2) then
        exit;
      for i := 1 to RecRef.FIELDCOUNT do begin
        FldRef := RecRef.FIELDINDEX(i);
        if HasValue(FldRef) then
          if IsNormalField(FldRef) then
            if IsLogActive(RecRef.NUMBER,FldRef.NUMBER,2) then
              InsertLogEntry(FldRef,FldRef,RecRef,2,true);
      end;
    END;

    LOCAL PROCEDURE IsNormalField@12(FieldRef@1001 : FieldRef) : Boolean;
    BEGIN
      exit(FORMAT(FieldRef.CLASS) = 'Normal')
    END;

    LOCAL PROCEDURE HasValue@10(FldRef@1000 : FieldRef) : Boolean;
    VAR
      Field@1102601000 : Record Field;
      HasValue@1001 : Boolean;
      Int@1002 : Integer;
      Dec@1003 : Decimal;
      D@1007 : Date;
      T@1008 : Time;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      case Field.Type of
        Field.Type::Boolean:
          HasValue := FldRef.VALUE;
        Field.Type::Option:
          HasValue := true;
        Field.Type::Integer:
          begin
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          end;
        Field.Type::Decimal:
          begin
            Dec := FldRef.VALUE;
            HasValue := Dec <> 0;
          end;
        Field.Type::Date:
          begin
            D := FldRef.VALUE;
            HasValue := D <> 0D;
          end;
        Field.Type::Time:
          begin
            T := FldRef.VALUE;
            HasValue := T <> 000000T;
          end;
        Field.Type::BLOB:
          HasValue := false;
        else
          HasValue := FORMAT(FldRef.VALUE) <> '';
      end;

      exit(HasValue);
    END;

    [External]
    PROCEDURE InitChangeLog@5();
    BEGIN
      ChangeLogSetupRead := false;
      TempChangeLogSetupField.DELETEALL;
      TempChangeLogSetupTable.DELETEALL;
    END;

    [External]
    PROCEDURE EvaluateTextToFieldRef@28(InputText@1001 : Text;VAR FieldRef@1000 : FieldRef) : Boolean;
    VAR
      IntVar@1002 : Integer;
      DecimalVar@1003 : Decimal;
      DateVar@1004 : Date;
      TimeVar@1005 : Time;
      DateTimeVar@1006 : DateTime;
      BoolVar@1007 : Boolean;
      DurationVar@1008 : Duration;
      BigIntVar@1009 : BigInteger;
      GUIDVar@1010 : GUID;
      DateFormulaVar@1012 : DateFormula;
    BEGIN
      if (FORMAT(FieldRef.CLASS) = 'FlowField') or (FORMAT(FieldRef.CLASS) = 'FlowFilter') then
        exit(true);

      case FORMAT(FieldRef.TYPE) of
        'Integer','Option':
          if EVALUATE(IntVar,InputText) then begin
            FieldRef.VALUE := IntVar;
            exit(true);
          end;
        'Decimal':
          if EVALUATE(DecimalVar,InputText,9) then begin
            FieldRef.VALUE := DecimalVar;
            exit(true);
          end;
        'Date':
          if EVALUATE(DateVar,InputText,9) then begin
            FieldRef.VALUE := DateVar;
            exit(true);
          end;
        'Time':
          if EVALUATE(TimeVar,InputText,9) then begin
            FieldRef.VALUE := TimeVar;
            exit(true);
          end;
        'DateTime':
          if EVALUATE(DateTimeVar,InputText,9) then begin
            FieldRef.VALUE := DateTimeVar;
            exit(true);
          end;
        'Boolean':
          if EVALUATE(BoolVar,InputText,9) then begin
            FieldRef.VALUE := BoolVar;
            exit(true);
          end;
        'Duration':
          if EVALUATE(DurationVar,InputText,9) then begin
            FieldRef.VALUE := DurationVar;
            exit(true);
          end;
        'BigInteger':
          if EVALUATE(BigIntVar,InputText) then begin
            FieldRef.VALUE := BigIntVar;
            exit(true);
          end;
        'GUID':
          if EVALUATE(GUIDVar,InputText,9) then begin
            FieldRef.VALUE := GUIDVar;
            exit(true);
          end;
        'Code','Text':
          begin
            if STRLEN(InputText) > FieldRef.LENGTH then begin
              FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
              exit(false);
            end;
            FieldRef.VALUE := InputText;
            exit(true);
          end;
        'DateFormula':
          if EVALUATE(DateFormulaVar,InputText,9) then begin
            FieldRef.VALUE := DateFormulaVar;
            exit(true);
          end;
      end;

      exit(false);
    END;

    BEGIN
    END.
  }
}

