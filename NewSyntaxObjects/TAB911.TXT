OBJECT Table 911 Posted Assembly Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               AssemblyCommentLine@1000 : Record "Assembly Comment Line";
             BEGIN
               AssemblyCommentLine.SETRANGE("Document Type",AssemblyCommentLine."Document Type"::"Posted Assembly");
               AssemblyCommentLine.SETRANGE("Document No.","Document No.");
               AssemblyCommentLine.SETRANGE("Document Line No.","Line No.");
               if not AssemblyCommentLine.ISEMPTY then
                 AssemblyCommentLine.DELETEALL;
             END;

    CaptionML=ENU=Posted Assembly Line;
    LookupPageID="Posted Assembly Order Subform";
    DrillDownPageID="Posted Assembly Order Subform";
  }
  FIELDS
  {
    { 2   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 8   ;   ;Order No.           ;Code20        ;CaptionML=ENU=Order No. }
    { 9   ;   ;Order Line No.      ;Integer       ;CaptionML=ENU=Order Line No. }
    { 10  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Item,Resource";
                                                   OptionString=" ",Item,Resource }
    { 11  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   CaptionML=ENU=No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("No."),
                                                                                            Code=FIELD("Variant Code"));
                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 14  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=ENU=Lead-Time Offset }
    { 19  ;   ;Resource Usage Type ;Option        ;CaptionML=ENU=Resource Usage Type;
                                                   OptionCaptionML=ENU=" ,Direct,Fixed";
                                                   OptionString=" ",Direct,Fixed }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Location Code }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Bin Code            ;Code20        ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Bin Code }
    { 25  ;   ;Position            ;Code10        ;CaptionML=ENU=Position }
    { 26  ;   ;Position 2          ;Code10        ;CaptionML=ENU=Position 2 }
    { 27  ;   ;Position 3          ;Code10        ;CaptionML=ENU=Position 3 }
    { 39  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=ENU=Item Shpt. Entry No. }
    { 40  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 60  ;   ;Quantity per        ;Decimal       ;CaptionML=ENU=Quantity per;
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 62  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 63  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 65  ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 67  ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 80  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Document No.","Line No."               ;Clustered=true }
    {    ;"Order No.","Order Line No."             }
    {    ;Type,"No."                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE ShowDimensions@30();
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Document No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@1();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit "Item Tracking Doc. Management";
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Posted Assembly Line",0,"Document No.",'',0,"Line No.");
    END;

    [External]
    PROCEDURE GetAssemblyLinesForDocument@2(VAR TempPostedAssemblyLine@1000 : TEMPORARY Record "Posted Assembly Line";ValueEntryDocType@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer);
    VAR
      ValueEntry@1008 : Record "Value Entry";
      ItemLedgerEntry@1007 : Record "Item Ledger Entry";
      PostedAsmHeader@1006 : Record "Posted Assembly Header";
      PostedAsmLine@1005 : Record "Posted Assembly Line";
      SalesShipmentLine@1004 : Record "Sales Shipment Line";
    BEGIN
      TempPostedAssemblyLine.RESET;
      TempPostedAssemblyLine.DELETEALL;
      ValueEntry.SETRANGE("Document Type",ValueEntryDocType);
      ValueEntry.SETRANGE("Document No.",DocNo);
      ValueEntry.SETRANGE("Document Line No.",DocLineNo);
      if not ValueEntry.FINDSET then
        exit;
      repeat
        if ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.") then
          if ItemLedgerEntry."Document Type" = ItemLedgerEntry."Document Type"::"Sales Shipment" then begin
            SalesShipmentLine.GET(ItemLedgerEntry."Document No.",ItemLedgerEntry."Document Line No.");
            if SalesShipmentLine.AsmToShipmentExists(PostedAsmHeader) then begin
              PostedAsmLine.SETRANGE("Document No.",PostedAsmHeader."No.");
              if PostedAsmLine.FINDSET then
                repeat
                  TempPostedAssemblyLine.SETRANGE(Type,PostedAsmLine.Type);
                  TempPostedAssemblyLine.SETRANGE("No.",PostedAsmLine."No.");
                  TempPostedAssemblyLine.SETRANGE("Variant Code",PostedAsmLine."Variant Code");
                  TempPostedAssemblyLine.SETRANGE(Description,PostedAsmLine.Description);
                  TempPostedAssemblyLine.SETRANGE("Unit of Measure Code",PostedAsmLine."Unit of Measure Code");
                  if TempPostedAssemblyLine.FINDFIRST then begin
                    TempPostedAssemblyLine.Quantity += PostedAsmLine.Quantity;
                    TempPostedAssemblyLine.MODIFY;
                  end else begin
                    TempPostedAssemblyLine := PostedAsmLine;
                    TempPostedAssemblyLine.INSERT;
                  end;
                until PostedAsmLine.NEXT = 0;
            end;
          end;
      until ValueEntry.NEXT = 0;
      TempPostedAssemblyLine.RESET;
    END;

    BEGIN
    END.
  }
}

