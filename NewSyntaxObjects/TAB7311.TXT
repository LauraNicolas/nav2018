OBJECT Table 7311 Warehouse Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "User ID" := USERID;
             END;

    OnModify=BEGIN
               if "User ID" = '' then
                 "User ID" := USERID;
             END;

    OnDelete=BEGIN
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Warehouse Journal Line",0,"Journal Batch Name",
                 "Journal Template Name",0,"Line No.","Location Code",true);
             END;

    CaptionML=ENU=Warehouse Journal Line;
    LookupPageID="Warehouse Journal Lines";
    DrillDownPageID="Warehouse Journal Lines";
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Warehouse Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Warehouse Journal Batch".Name WHERE ("Journal Template Name"=FIELD("Journal Template Name"));
                                                   CaptionML=ENU=Journal Batch Name }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Registering Date    ;Date          ;CaptionML=ENU=Registering Date }
    { 5   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 6   ;   ;From Zone Code      ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "From Zone Code" <> xRec."From Zone Code" then begin
                                                                  "From Bin Code" := '';
                                                                  "From Bin Type Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=From Zone Code }
    { 7   ;   ;From Bin Code       ;Code20        ;TableRelation=IF ("Phys. Inventory"=CONST(false),
                                                                     "Item No."=FILTER(''),
                                                                     "From Zone Code"=FILTER('')) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"))
                                                                     ELSE IF ("Phys. Inventory"=CONST(false),
                                                                              "Item No."=FILTER(<>''),
                                                                              "From Zone Code"=FILTER('')) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                           "Item No."=FIELD("Item No."))
                                                                                                                                           ELSE IF ("Phys. Inventory"=CONST(false),
                                                                                                                                                    "Item No."=FILTER(''),
                                                                                                                                                    "From Zone Code"=FILTER(<>'')) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                                   "Zone Code"=FIELD("From Zone Code"))
                                                                                                                                                                                                                   ELSE IF ("Phys. Inventory"=CONST(false),
                                                                                                                                                                                                                            "Item No."=FILTER(<>''),
                                                                                                                                                                                                                            "From Zone Code"=FILTER(<>'')) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                                                                                                           "Item No."=FIELD("Item No."),
                                                                                                                                                                                                                                                                                           "Zone Code"=FIELD("From Zone Code"))
                                                                                                                                                                                                                                                                                           ELSE IF ("Phys. Inventory"=CONST(true),
                                                                                                                                                                                                                                                                                                    "From Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                                                                                                                                                                                                                                                    ELSE IF ("Phys. Inventory"=CONST(true),
                                                                                                                                                                                                                                                                                                             "From Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                                                                                                                                                                                            "Zone Code"=FIELD("From Zone Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if CurrFieldNo = FIELDNO("From Bin Code") then
                                                                  if "From Bin Code" <> xRec."From Bin Code" then
                                                                    CheckBin("Location Code","From Bin Code",false);

                                                                "From Bin Type Code" :=
                                                                  GetBinType("Location Code","From Bin Code");

                                                                Bin.CALCFIELDS("Adjustment Bin");
                                                                Bin.TESTFIELD("Adjustment Bin",false);

                                                                if "From Bin Code" <> '' then
                                                                  "From Zone Code" := Bin."Zone Code";
                                                              END;

                                                   CaptionML=ENU=From Bin Code }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 9   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "Item No." <> '' then begin
                                                                  if "Item No." <> xRec."Item No." then
                                                                    "Variant Code" := '';
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 10  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                WhseJnlTemplate.GET("Journal Template Name");
                                                                if WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification then begin
                                                                  if Quantity < 0 then
                                                                    FIELDERROR(Quantity,Text000);
                                                                end else begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Adjustment Bin Code");
                                                                end;

                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                "Qty. (Absolute)" := ABS(Quantity);
                                                                "Qty. (Absolute, Base)" := ABS("Qty. (Base)");
                                                                if (xRec.Quantity < 0) and (Quantity >= 0) or
                                                                   (xRec.Quantity >= 0) and (Quantity < 0)
                                                                then
                                                                  ExchangeFromToBin;

                                                                if Quantity > 0 then
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight)
                                                                else begin
                                                                  Cubage := 0;
                                                                  Weight := 0;
                                                                end;

                                                                if Quantity <> xRec.Quantity then begin
                                                                  CheckBin("Location Code","From Bin Code",false);
                                                                  CheckBin("Location Code","To Bin Code",true);
                                                                end;

                                                                ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,false);
                                                                if SNRequired and not "Phys. Inventory" and
                                                                   ("Serial No." <> '') and ((Quantity < 0) or (Quantity > 1))
                                                                then
                                                                  ERROR(Text006,FIELDCAPTION(Quantity));
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 11  ;   ;Qty. (Base)         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Qty. (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5 }
    { 12  ;   ;Qty. (Absolute)     ;Decimal       ;OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                "Qty. (Absolute, Base)" := CalcBaseQty("Qty. (Absolute)");

                                                                if Quantity > 0 then
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight)
                                                                else begin
                                                                  Cubage := 0;
                                                                  Weight := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Qty. (Absolute);
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Qty. (Absolute, Base);Decimal      ;OnValidate=VAR
                                                                NewValue@1000 : Decimal;
                                                              BEGIN
                                                                NewValue := ROUND("Qty. (Absolute, Base)",0.00001);
                                                                VALIDATE(Quantity,CalcQty("Qty. (Absolute, Base)") * Quantity / ABS(Quantity));
                                                                // Take care of rounding issues
                                                                "Qty. (Absolute, Base)" := NewValue;
                                                                "Qty. (Base)" := NewValue * "Qty. (Base)" / ABS("Qty. (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Absolute, Base);
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "Zone Code" <> xRec."Zone Code" then
                                                                  "Bin Code" := '';

                                                                if Quantity < 0 then
                                                                  VALIDATE("From Zone Code","Zone Code")
                                                                else
                                                                  VALIDATE("To Zone Code","Zone Code");
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 15  ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if Quantity < 0 then begin
                                                                  VALIDATE("From Bin Code","Bin Code");
                                                                  if "Bin Code" <> xRec."Bin Code" then
                                                                    CheckBin("Location Code","Bin Code",false);
                                                                end else begin
                                                                  VALIDATE("To Bin Code","Bin Code");
                                                                  if "Bin Code" <> xRec."Bin Code" then
                                                                    CheckBin("Location Code","Bin Code",true);
                                                                end;

                                                                if "Bin Code" <> '' then begin
                                                                  GetBin("Location Code","Bin Code");
                                                                  "Zone Code" := Bin."Zone Code";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 20  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=false }
    { 21  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 22  ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No.;
                                                   Editable=false }
    { 23  ;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 24  ;   ;Source Subline No.  ;Integer       ;CaptionML=ENU=Source Subline No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 25  ;   ;Source Document     ;Option        ;CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=,S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv Order,Job Jnl.,Assembly Consumption,Assembly Order;
                                                   OptionString=,"S. Order","S. Invoice","S. Credit Memo","S. Return Order","P. Order","P. Invoice","P. Credit Memo","P. Return Order","Inb. Transfer","Outb. Transfer","Prod. Consumption","Item Jnl.","Phys. Invt. Jnl.","Reclass. Jnl.","Consumption Jnl.","Output Jnl.","BOM Jnl.","Serv Order","Job Jnl.","Assembly Consumption","Assembly Order";
                                                   BlankZero=true;
                                                   Editable=false }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=false }
    { 27  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "To Zone Code" <> xRec."To Zone Code" then
                                                                  "To Bin Code" := '';
                                                              END;

                                                   CaptionML=ENU=To Zone Code }
    { 28  ;   ;To Bin Code         ;Code20        ;TableRelation=IF ("To Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("To Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Zone Code"=FIELD("To Zone Code"));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if CurrFieldNo = FIELDNO("To Bin Code") then
                                                                  if "To Bin Code" <> xRec."To Bin Code" then
                                                                    CheckBin("Location Code","To Bin Code",true);

                                                                GetBin("Location Code","To Bin Code");

                                                                Bin.CALCFIELDS("Adjustment Bin");
                                                                Bin.TESTFIELD("Adjustment Bin",false);

                                                                if "To Bin Code" <> '' then
                                                                  "To Zone Code" := Bin."Zone Code";
                                                              END;

                                                   CaptionML=ENU=To Bin Code }
    { 29  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 33  ;   ;Registering No. Series;Code20      ;TableRelation="No. Series";
                                                   CaptionML=ENU=Registering No. Series }
    { 35  ;   ;From Bin Type Code  ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=ENU=From Bin Type Code }
    { 40  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 41  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 50  ;   ;Whse. Document No.  ;Code20        ;CaptionML=ENU=Whse. Document No. }
    { 51  ;   ;Whse. Document Type ;Option        ;CaptionML=ENU=Whse. Document Type;
                                                   OptionCaptionML=ENU=Whse. Journal,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Whse. Phys. Inventory, ,Assembly;
                                                   OptionString="Whse. Journal",Receipt,Shipment,"Internal Put-away","Internal Pick",Production,"Whse. Phys. Inventory"," ",Assembly }
    { 52  ;   ;Whse. Document Line No.;Integer    ;CaptionML=ENU=Whse. Document Line No.;
                                                   BlankZero=true }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Calculated);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",true);

                                                                if "Serial No." <> '' then
                                                                  if ("Qty. (Phys. Inventory)" < 0) or ("Qty. (Phys. Inventory)" > 1) then
                                                                    ERROR(Text006,FIELDCAPTION("Qty. (Phys. Inventory)"));

                                                                PhysInvtEntered := true;
                                                                Quantity := 0;
                                                                VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                if "Qty. (Phys. Inventory)" = "Qty. (Calculated)" then
                                                                  VALIDATE("Qty. (Phys. Inventory) (Base)","Qty. (Calculated) (Base)")
                                                                else
                                                                  VALIDATE("Qty. (Phys. Inventory) (Base)",ROUND("Qty. (Phys. Inventory)" * "Qty. per Unit of Measure",0.00001));
                                                                PhysInvtEntered := false;
                                                              END;

                                                   CaptionML=ENU=Qty. (Phys. Inventory);
                                                   DecimalPlaces=0:5 }
    { 55  ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Negative Adjmt.,Positive Adjmt.,Movement;
                                                   OptionString="Negative Adjmt.","Positive Adjmt.",Movement }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=ENU=Phys. Inventory;
                                                   Editable=false }
    { 60  ;   ;Reference Document  ;Option        ;CaptionML=ENU=Reference Document;
                                                   OptionCaptionML=ENU=" ,Posted Rcpt.,Posted P. Inv.,Posted Rtrn. Rcpt.,Posted P. Cr. Memo,Posted Shipment,Posted S. Inv.,Posted Rtrn. Shipment,Posted S. Cr. Memo,Posted T. Receipt,Posted T. Shipment,Item Journal,Prod.,Put-away,Pick,Movement,BOM Journal,Job Journal,Assembly";
                                                   OptionString=" ","Posted Rcpt.","Posted P. Inv.","Posted Rtrn. Rcpt.","Posted P. Cr. Memo","Posted Shipment","Posted S. Inv.","Posted Rtrn. Shipment","Posted S. Cr. Memo","Posted T. Receipt","Posted T. Shipment","Item Journal","Prod.","Put-away",Pick,Movement,"BOM Journal","Job Journal",Assembly }
    { 61  ;   ;Reference No.       ;Code20        ;CaptionML=ENU=Reference No. }
    { 67  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID }
    { 68  ;   ;Qty. (Calculated) (Base);Decimal   ;CaptionML=ENU=Qty. (Calculated) (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 69  ;   ;Qty. (Phys. Inventory) (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                "Qty. (Base)" := "Qty. (Phys. Inventory) (Base)" - "Qty. (Calculated) (Base)";
                                                                "Qty. (Absolute, Base)" := ABS("Qty. (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Phys. Inventory) (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "Variant Code" <> '' then begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end else
                                                                  GetItem("Item No.",Description);

                                                                if "Variant Code" <> xRec."Variant Code" then begin
                                                                  CheckBin("Location Code","From Bin Code",false);
                                                                  CheckBin("Location Code","To Bin Code",true);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if not PhysInvtEntered then
                                                                  TESTFIELD("Phys. Inventory",false);

                                                                if "Item No." <> '' then begin
                                                                  TESTFIELD("Unit of Measure Code");
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                  CheckBin("Location Code","From Bin Code",false);
                                                                  CheckBin("Location Code","To Bin Code",true);
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 6500;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                if "Serial No." <> '' then
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,true);

                                                                if (Quantity < 0) or (Quantity > 1) then
                                                                  ERROR(Text006,FIELDCAPTION(Quantity));
                                                              END;

                                                   OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",0,"Serial No.");
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 6501;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                if "Lot No." <> '' then
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,true);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",1,"Lot No.");
                                                            END;

                                                   CaptionML=ENU=Lot No. }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date;
                                                   Editable=false }
    { 6503;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date;
                                                   Editable=false }
    { 6504;   ;New Serial No.      ;Code20        ;CaptionML=ENU=New Serial No.;
                                                   Editable=false }
    { 6505;   ;New Lot No.         ;Code20        ;CaptionML=ENU=New Lot No.;
                                                   Editable=false }
    { 6506;   ;New Expiration Date ;Date          ;CaptionML=ENU=New Expiration Date;
                                                   Editable=false }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   CaptionML=ENU=Phys Invt Counting Period Code;
                                                   Editable=false }
    { 7381;   ;Phys Invt Counting Period Type;Option;
                                                   AccessByPermission=TableData "Phys. Invt. Item Selection"=R;
                                                   CaptionML=ENU=Phys Invt Counting Period Type;
                                                   OptionCaptionML=ENU=" ,Item,SKU";
                                                   OptionString=" ",Item,SKU;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Journal Template Name","Journal Batch Name","Location Code","Line No.";
                                                   Clustered=true }
    {    ;"Item No.","Location Code","Entry Type","From Bin Type Code","Variant Code","Unit of Measure Code";
                                                   SumIndexFields="Qty. (Absolute, Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","From Bin Code","Location Code","Entry Type","Variant Code","Unit of Measure Code","Lot No.","Serial No.";
                                                   SumIndexFields="Qty. (Absolute, Base)","Qty. (Absolute)",Cubage,Weight;
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","To Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.";
                                                   SumIndexFields="Qty. (Absolute, Base)","Qty. (Absolute)";
                                                   MaintainSIFTIndex=false }
    {    ;"To Bin Code","Location Code"           ;SumIndexFields=Cubage,Weight,"Qty. (Absolute)";
                                                   MaintainSIFTIndex=false }
    {    ;"Location Code","Item No.","Variant Code" }
    {    ;"Location Code","Bin Code","Item No.","Variant Code" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1001 : Record Location;
      Item@1000 : Record Item;
      Bin@1015 : Record Bin;
      WhseJnlTemplate@1004 : Record "Warehouse Journal Template";
      WhseJnlBatch@1003 : Record "Warehouse Journal Batch";
      WhseJnlLine@1005 : Record "Warehouse Journal Line";
      ItemUnitOfMeasure@1002 : Record "Item Unit of Measure";
      NoSeriesMgt@1006 : Codeunit NoSeriesManagement;
      WMSMgt@1007 : Codeunit "WMS Management";
      ItemTrackingMgt@1016 : Codeunit "Item Tracking Management";
      OldItemNo@1055 : Code[20];
      PhysInvtEntered@1008 : Boolean;
      Text000@1009 : TextConst 'ENU=must not be negative';
      Text001@1014 : TextConst 'ENU=%1 Journal';
      Text002@1013 : TextConst 'ENU=DEFAULT';
      Text003@1012 : TextConst 'ENU=Default Journal';
      Text005@1011 : TextConst 'ENU=The location %1 of warehouse journal batch %2 is not enabled for user %3.';
      Text006@1017 : TextConst 'ENU=%1 must be 0 or 1 for an Item tracked by Serial Number.';
      SNRequired@1019 : Boolean;
      LNRequired@1018 : Boolean;
      OpenFromBatch@1020 : Boolean;
      StockProposal@1021 : Boolean;

    [External]
    PROCEDURE GetItem@18(ItemNo@1000 : Code[20];VAR ItemDescription@1001 : Text[50]);
    BEGIN
      if ItemNo <> OldItemNo then begin
        ItemDescription := '';
        if ItemNo <> '' then
          if Item.GET(ItemNo) then
            ItemDescription := Item.Description;
        OldItemNo := ItemNo;
      end else
        ItemDescription := Item.Description;
    END;

    [External]
    PROCEDURE SetUpNewLine@8(LastWhseJnlLine@1000 : Record "Warehouse Journal Line");
    BEGIN
      WhseJnlTemplate.GET("Journal Template Name");
      WhseJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      WhseJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      if WhseJnlLine.FINDFIRST then begin
        WhseJnlBatch.GET(
          "Journal Template Name","Journal Batch Name",LastWhseJnlLine."Location Code");
        "Registering Date" := LastWhseJnlLine."Registering Date";
        "Whse. Document No." := LastWhseJnlLine."Whse. Document No.";
        "Entry Type" := LastWhseJnlLine."Entry Type";
        "Location Code" := LastWhseJnlLine."Location Code";
      end else begin
        "Registering Date" := WORKDATE;
        WhseJnlBatch.GET("Journal Template Name","Journal Batch Name","Location Code");
        if WhseJnlBatch."No. Series" <> '' then begin
          CLEAR(NoSeriesMgt);
          "Whse. Document No." :=
            NoSeriesMgt.TryGetNextNo(WhseJnlBatch."No. Series","Registering Date");
        end;
      end;
      if WhseJnlTemplate.Type = WhseJnlTemplate.Type::"Physical Inventory" then begin
        "Source Document" := "Source Document"::"Phys. Invt. Jnl.";
        "Whse. Document Type" := "Whse. Document Type"::"Whse. Phys. Inventory";
      end;
      "Source Code" := WhseJnlTemplate."Source Code";
      "Reason Code" := WhseJnlBatch."Reason Code";
      "Registering No. Series" := WhseJnlBatch."Registering No. Series";
      if WhseJnlTemplate.Type <> WhseJnlTemplate.Type::Reclassification then begin
        if Quantity >= 0 then
          "Entry Type" := "Entry Type"::"Positive Adjmt."
        else
          "Entry Type" := "Entry Type"::"Negative Adjmt.";
        SetUpAdjustmentBin;
      end else
        "Entry Type" := "Entry Type"::Movement;
    END;

    [External]
    PROCEDURE SetUpAdjustmentBin@100();
    VAR
      Location@1001 : Record Location;
    BEGIN
      WhseJnlTemplate.GET("Journal Template Name");
      if WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification then
        exit;

      Location.GET("Location Code");
      GetBin(Location.Code,Location."Adjustment Bin Code");
      case "Entry Type" of
        "Entry Type"::"Positive Adjmt.":
          begin
            "From Zone Code" := Bin."Zone Code";
            "From Bin Code" := Bin.Code;
            "From Bin Type Code" := Bin."Bin Type Code";
          end;
        "Entry Type"::"Negative Adjmt.":
          begin
            "To Zone Code" := Bin."Zone Code";
            "To Bin Code" := Bin.Code;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CalcQty@3(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@1();
    BEGIN
      GetItem("Item No.",Description);
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    [External]
    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      exit(
        ("Item No." = '') and (Quantity = 0));
    END;

    LOCAL PROCEDURE ExchangeFromToBin@16();
    VAR
      WhseJnlLine@1001 : Record "Warehouse Journal Line";
    BEGIN
      GetLocation("Location Code");
      WhseJnlLine := Rec;
      "From Zone Code" := WhseJnlLine."To Zone Code";
      "From Bin Code" := WhseJnlLine."To Bin Code";
      "From Bin Type Code" :=
        GetBinType("Location Code","From Bin Code");
      if ("Location Code" = Location.Code) and
         ("From Bin Code" = Location."Adjustment Bin Code")
      then
        WMSMgt.CheckAdjmtBin(Location,"Qty. (Absolute)",Quantity > 0);

      "To Zone Code" := WhseJnlLine."From Zone Code";
      "To Bin Code" := WhseJnlLine."From Bin Code";
      if ("Location Code" = Location.Code) and
         ("To Bin Code" = Location."Adjustment Bin Code")
      then
        WMSMgt.CheckAdjmtBin(Location,"Qty. (Absolute)",Quantity > 0);

      if WhseJnlTemplate.Type <> WhseJnlTemplate.Type::Reclassification then begin
        if Quantity >= 0 then
          "Entry Type" := "Entry Type"::"Positive Adjmt."
        else
          "Entry Type" := "Entry Type"::"Negative Adjmt.";
        SetUpAdjustmentBin;
      end;
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        Location.GET(LocationCode);
      Location.TESTFIELD("Directed Put-away and Pick");
    END;

    LOCAL PROCEDURE GetBin@19(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      if (LocationCode = '') or (BinCode = '') then
        CLEAR(Bin)
      else
        if (Bin."Location Code" <> LocationCode) or
           (Bin.Code <> BinCode)
        then
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CheckBin@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Inbound@1002 : Boolean);
    VAR
      BinContent@1003 : Record "Bin Content";
      WhseJnlLine@1007 : Record "Warehouse Journal Line";
    BEGIN
      if (BinCode <> '') and ("Item No." <> '') then begin
        GetLocation(LocationCode);
        if BinCode = Location."Adjustment Bin Code" then
          exit;
        BinContent.SetProposalMode(StockProposal);
        if Inbound then begin
          GetBinType(LocationCode,BinCode);
          if Location."Bin Capacity Policy" in
             [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
              Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
          then begin
            WhseJnlLine.SETCURRENTKEY("To Bin Code","Location Code");
            WhseJnlLine.SETRANGE("To Bin Code",BinCode);
            WhseJnlLine.SETRANGE("Location Code",LocationCode);
            WhseJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            WhseJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            WhseJnlLine.SETRANGE("Line No.","Line No.");
            WhseJnlLine.CALCSUMS("Qty. (Absolute)",Cubage,Weight);
          end;
          if BinContent.GET(
               "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code")
          then
            BinContent.CheckIncreaseBinContent(
              "Qty. (Absolute, Base)",WhseJnlLine."Qty. (Absolute, Base)",
              WhseJnlLine.Cubage,WhseJnlLine.Weight,Cubage,Weight,false,false)
          else begin
            GetBin(LocationCode,BinCode);
            Bin.CheckIncreaseBin(
              BinCode,"Item No.","Qty. (Absolute)",
              WhseJnlLine.Cubage,WhseJnlLine.Weight,Cubage,Weight,false,false);
          end;
        end else begin
          BinContent.GET(
            "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code");
          if BinContent."Block Movement" in [
                                             BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
          then
            if not StockProposal then
              BinContent.FIELDERROR("Block Movement");
        end;
        BinContent.SetProposalMode(false);
      end;
    END;

    LOCAL PROCEDURE GetBinType@20(LocationCode@1002 : Code[10];BinCode@1001 : Code[20]) : Code[10];
    VAR
      BinType@1000 : Record "Bin Type";
    BEGIN
      GetBin(LocationCode,BinCode);
      WhseJnlTemplate.GET("Journal Template Name");
      if WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification then
        if Bin."Bin Type Code" <> '' then
          if BinType.GET(Bin."Bin Type Code") then
            BinType.TESTFIELD(Receive,false);

      exit(Bin."Bin Type Code");
    END;

    [External]
    PROCEDURE TemplateSelection@13(PageID@1004 : Integer;PageTemplate@1000 : 'Adjustment,"Phys. Inventory",Reclassification';VAR WhseJnlLine@1003 : Record "Warehouse Journal Line";VAR JnlSelected@1001 : Boolean);
    VAR
      WhseJnlTemplate@1002 : Record "Warehouse Journal Template";
    BEGIN
      JnlSelected := true;

      WhseJnlTemplate.RESET;
      if not OpenFromBatch then
        WhseJnlTemplate.SETRANGE("Page ID",PageID);
      WhseJnlTemplate.SETRANGE(Type,PageTemplate);

      case WhseJnlTemplate.COUNT of
        0:
          begin
            WhseJnlTemplate.INIT;
            WhseJnlTemplate.VALIDATE(Type,PageTemplate);
            WhseJnlTemplate.VALIDATE("Page ID");
            WhseJnlTemplate.Name := FORMAT(WhseJnlTemplate.Type,MAXSTRLEN(WhseJnlTemplate.Name));
            WhseJnlTemplate.Description := STRSUBSTNO(Text001,WhseJnlTemplate.Type);
            WhseJnlTemplate.INSERT;
            COMMIT;
          end;
        1:
          WhseJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,WhseJnlTemplate) = ACTION::LookupOK;
      end;
      if JnlSelected then begin
        WhseJnlLine.FILTERGROUP := 2;
        WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
        WhseJnlLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          WhseJnlLine."Journal Template Name" := '';
          PAGE.RUN(WhseJnlTemplate."Page ID",WhseJnlLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@21(VAR WhseJnlBatch@1000 : Record "Warehouse Journal Batch");
    VAR
      WhseJnlLine@1002 : Record "Warehouse Journal Line";
      JnlSelected@1001 : Boolean;
    BEGIN
      OpenFromBatch := true;
      WhseJnlBatch.CALCFIELDS("Template Type");
      WhseJnlLine."Journal Batch Name" := WhseJnlBatch.Name;
      WhseJnlLine."Location Code" := WhseJnlBatch."Location Code";
      TemplateSelection(0,WhseJnlBatch."Template Type",WhseJnlLine,JnlSelected);
    END;

    [External]
    PROCEDURE OpenJnl@12(VAR CurrentJnlBatchName@1000 : Code[10];VAR CurrentLocationCode@1002 : Code[10];VAR WhseJnlLine@1001 : Record "Warehouse Journal Line");
    BEGIN
      WMSMgt.CheckUserIsWhseEmployee;
      CheckTemplateName(
        WhseJnlLine.GETRANGEMAX("Journal Template Name"),CurrentLocationCode,CurrentJnlBatchName);
      WhseJnlLine.FILTERGROUP := 2;
      WhseJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      if CurrentLocationCode <> '' then
        WhseJnlLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseJnlLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckTemplateName@11(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentLocationCode@1005 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      WhseJnlBatch@1002 : Record "Warehouse Journal Batch";
    BEGIN
      CurrentLocationCode := WMSMgt.GetDefaultDirectedPutawayAndPickLocation;

      WhseJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      WhseJnlBatch.SETRANGE("Location Code",CurrentLocationCode);
      WhseJnlBatch.SETRANGE(Name,CurrentJnlBatchName);
      if not WhseJnlBatch.ISEMPTY then
        exit;

      WhseJnlBatch.SETRANGE(Name);
      if not WhseJnlBatch.FINDFIRST then begin
        WhseJnlBatch.INIT;
        WhseJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
        WhseJnlBatch.SetupNewBatch;
        WhseJnlBatch."Location Code" := CurrentLocationCode;
        WhseJnlBatch.Name := Text002;
        WhseJnlBatch.Description := Text003;
        WhseJnlBatch.INSERT(true);
        COMMIT;
      end;
      CurrentJnlBatchName := WhseJnlBatch.Name;
    END;

    [External]
    PROCEDURE CheckName@10(CurrentJnlBatchName@1000 : Code[10];CurrentLocationCode@1003 : Code[10];VAR WhseJnlLine@1001 : Record "Warehouse Journal Line");
    VAR
      WhseJnlBatch@1002 : Record "Warehouse Journal Batch";
      WhseEmployee@1004 : Record "Warehouse Employee";
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName,CurrentLocationCode);
      if (USERID <> '') and not WhseEmployee.GET(USERID,CurrentLocationCode) then
        ERROR(Text005,CurrentLocationCode,CurrentJnlBatchName,USERID);
    END;

    [External]
    PROCEDURE SetName@9(CurrentJnlBatchName@1000 : Code[10];CurrentLocationCode@1002 : Code[10];VAR WhseJnlLine@1001 : Record "Warehouse Journal Line");
    BEGIN
      WhseJnlLine.FILTERGROUP := 2;
      WhseJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      WhseJnlLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseJnlLine.FILTERGROUP := 0;
      if WhseJnlLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupName@7(VAR CurrentJnlBatchName@1000 : Code[10];VAR CurrentLocationCode@1003 : Code[10];VAR WhseJnlLine@1001 : Record "Warehouse Journal Line");
    VAR
      WhseJnlBatch@1002 : Record "Warehouse Journal Batch";
    BEGIN
      COMMIT;
      WhseJnlBatch."Journal Template Name" := WhseJnlLine.GETRANGEMAX("Journal Template Name");
      WhseJnlBatch.Name := WhseJnlLine.GETRANGEMAX("Journal Batch Name");
      WhseJnlBatch.SETRANGE("Journal Template Name",WhseJnlBatch."Journal Template Name");
      if PAGE.RUNMODAL(PAGE::"Whse. Journal Batches List",WhseJnlBatch) = ACTION::LookupOK then begin
        CurrentJnlBatchName := WhseJnlBatch.Name;
        CurrentLocationCode := WhseJnlBatch."Location Code";
        SetName(CurrentJnlBatchName,CurrentLocationCode,WhseJnlLine);
      end;
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      WhseWkshLine@1000 : Record "Whse. Worksheet Line";
      WhseItemTrackingLines@1001 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWkshLine.INIT;
      WhseWkshLine."Worksheet Template Name" := "Journal Template Name";
      WhseWkshLine.Name := "Journal Batch Name";
      WhseWkshLine."Location Code" := "Location Code";
      WhseWkshLine."Line No." := "Line No.";
      WhseWkshLine."Item No." := "Item No.";
      WhseWkshLine."Variant Code" := "Variant Code";
      WhseWkshLine."Qty. (Base)" := "Qty. (Base)";
      WhseWkshLine."Qty. to Handle (Base)" := "Qty. (Base)";
      WhseItemTrackingLines.SetSource(WhseWkshLine,DATABASE::"Warehouse Journal Line");
      WhseItemTrackingLines.RUNMODAL;
      CLEAR(WhseItemTrackingLines);
    END;

    LOCAL PROCEDURE ItemTrackingExist@17(TemplateName@1000 : Code[10];BatchName@1001 : Code[10];LocationCode@1004 : Code[10];LineNo@1002 : Integer;VAR WhseItemTrkgLine@1005 : Record "Whse. Item Tracking Line") : Boolean;
    BEGIN
      with WhseItemTrkgLine do begin
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.","Location Code");
        SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
        SETRANGE("Source Subtype",0);
        SETRANGE("Source Batch Name",TemplateName);
        SETRANGE("Source ID",BatchName);
        SETRANGE("Location Code",LocationCode);
        if LineNo <> 0 then
          SETRANGE("Source Ref. No.",LineNo);
        SETRANGE("Source Prod. Order Line",0);

        exit(not ISEMPTY);
      end;
    END;

    [External]
    PROCEDURE ItemTrackingReclass@22(TemplateName@1000 : Code[10];BatchName@1001 : Code[10];LocationCode@1004 : Code[10];LineNo@1002 : Integer) : Boolean;
    VAR
      WhseItemTrkgLine@1003 : Record "Whse. Item Tracking Line";
    BEGIN
      if not IsReclass(TemplateName) then
        exit(false);

      with WhseItemTrkgLine do begin
        if ItemTrackingExist(TemplateName,BatchName,LocationCode,LineNo,WhseItemTrkgLine) then begin
          FINDSET;
          repeat
            if ("Lot No." <> "New Lot No.") or
               ("Serial No." <> "New Serial No.") or
               ("Expiration Date" <> "New Expiration Date")
            then
              exit(true);
          until NEXT = 0;
        end;
      end;

      exit(false);
    END;

    [External]
    PROCEDURE IsReclass@6(CurrentJnlTemplateName@1000 : Code[10]) : Boolean;
    VAR
      WhseJnlTemplate@1001 : Record "Warehouse Journal Template";
    BEGIN
      if WhseJnlTemplate.GET(CurrentJnlTemplateName) then
        exit(WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification);

      exit(false);
    END;

    [External]
    PROCEDURE SetProposal@23(NewValue@1000 : Boolean);
    BEGIN
      StockProposal := NewValue;
    END;

    [External]
    PROCEDURE IsOpenedFromBatch@42() : Boolean;
    VAR
      WarehouseJournalBatch@1002 : Record "Warehouse Journal Batch";
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      if BatchFilter <> '' then begin
        TemplateFilter := GETFILTER("Journal Template Name");
        if TemplateFilter <> '' then
          WarehouseJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        WarehouseJournalBatch.SETFILTER(Name,BatchFilter);
        WarehouseJournalBatch.FINDFIRST;
      end;

      exit((("Journal Batch Name" <> '') and ("Journal Template Name" = '')) or (BatchFilter <> ''));
    END;

    [External]
    PROCEDURE SetSource@24(SourceType@1000 : Integer;SourceSubtype@1001 : Integer;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1005 : Integer);
    BEGIN
      "Source Type" := SourceType;
      if SourceSubtype >= 0 then
        "Source Subtype" := SourceSubtype;
      "Source No." := SourceNo;
      "Source Line No." := SourceLineNo;
      if SourceSublineNo >= 0 then
        "Source Subline No." := SourceSublineNo;
    END;

    [External]
    PROCEDURE SetTracking@37(SerialNo@1001 : Code[20];LotNo@1000 : Code[20];WarrantyDate@1002 : Date;ExpirationDate@1003 : Date);
    BEGIN
      "Serial No." := SerialNo;
      "Lot No." := LotNo;
      "Warranty Date" := WarrantyDate;
      "Expiration Date" := ExpirationDate;
    END;

    [External]
    PROCEDURE SetWhseDoc@25(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      "Whse. Document Type" := DocType;
      "Whse. Document No." := DocNo;
      "Whse. Document Line No." := DocLineNo;
    END;

    BEGIN
    END.
  }
}

