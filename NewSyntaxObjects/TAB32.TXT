OBJECT Table 32 Item Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Ledger Entry;
    LookupPageID="Item Ledger Entries";
    DrillDownPageID="Item Ledger Entries";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 4   ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                   OptionString=Purchase,Sale,"Positive Adjmt.","Negative Adjmt.",Transfer,Consumption,Output," ","Assembly Consumption","Assembly Output" }
    { 5   ;   ;Source No.          ;Code20        ;TableRelation=IF ("Source Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Source Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Source Type"=CONST(Item)) Item;
                                                   CaptionML=ENU=Source No. }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 12  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Invoiced Quantity   ;Decimal       ;CaptionML=ENU=Invoiced Quantity;
                                                   DecimalPlaces=0:5 }
    { 28  ;   ;Applies-to Entry    ;Integer       ;CaptionML=ENU=Applies-to Entry }
    { 29  ;   ;Open                ;Boolean       ;CaptionML=ENU=Open }
    { 33  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 34  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 36  ;   ;Positive            ;Boolean       ;CaptionML=ENU=Positive }
    { 41  ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Item";
                                                   OptionString=" ",Customer,Vendor,Item }
    { 47  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Drop Shipment }
    { 50  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 51  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 52  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 60  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 61  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 62  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 63  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 64  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 70  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=CONST(''),
                                                                                                                "Source Ref. No."=FIELD("Entry No."),
                                                                                                                "Source Type"=CONST(32),
                                                                                                                "Source Subtype"=CONST("0"),
                                                                                                                "Source Batch Name"=CONST(''),
                                                                                                                "Source Prod. Order Line"=CONST(0),
                                                                                                                "Reservation Status"=CONST(Reservation)));
                                                   AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 79  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly";
                                                   OptionString=" ","Sales Shipment","Sales Invoice","Sales Return Receipt","Sales Credit Memo","Purchase Receipt","Purchase Invoice","Purchase Return Shipment","Purchase Credit Memo","Transfer Shipment","Transfer Receipt","Service Shipment","Service Invoice","Service Credit Memo","Posted Assembly" }
    { 80  ;   ;Document Line No.   ;Integer       ;CaptionML=ENU=Document Line No. }
    { 90  ;   ;Order Type          ;Option        ;CaptionML=ENU=Order Type;
                                                   OptionCaptionML=ENU=" ,Production,Transfer,Service,Assembly";
                                                   OptionString=" ",Production,Transfer,Service,Assembly;
                                                   Editable=false }
    { 91  ;   ;Order No.           ;Code20        ;CaptionML=ENU=Order No.;
                                                   Editable=false }
    { 92  ;   ;Order Line No.      ;Integer       ;CaptionML=ENU=Order Line No.;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 904 ;   ;Assemble to Order   ;Boolean       ;AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=Assemble to Order }
    { 1000;   ;Job No.             ;Code20        ;TableRelation=Job."No.";
                                                   CaptionML=ENU=Job No. }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Purchase        ;Boolean       ;CaptionML=ENU=Job Purchase }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5 }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 5408;   ;Derived from Blanket Order;Boolean ;CaptionML=ENU=Derived from Blanket Order }
    { 5700;   ;Cross-Reference No. ;Code20        ;CaptionML=ENU=Cross-Reference No. }
    { 5701;   ;Originally Ordered No.;Code20      ;TableRelation=Item;
                                                   AccessByPermission=TableData "Item Substitution"=R;
                                                   CaptionML=ENU=Originally Ordered No. }
    { 5702;   ;Originally Ordered Var. Code;Code10;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Originally Ordered No."));
                                                   AccessByPermission=TableData "Item Substitution"=R;
                                                   CaptionML=ENU=Originally Ordered Var. Code }
    { 5703;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=ENU=Out-of-Stock Substitution }
    { 5704;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5705;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5706;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE ("Item Category Code"=FIELD("Item Category Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Product Group Code }
    { 5800;   ;Completely Invoiced ;Boolean       ;CaptionML=ENU=Completely Invoiced }
    { 5801;   ;Last Invoice Date   ;Date          ;CaptionML=ENU=Last Invoice Date }
    { 5802;   ;Applied Entry to Adjust;Boolean    ;CaptionML=ENU=Applied Entry to Adjust }
    { 5803;   ;Cost Amount (Expected);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Expected)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Expected);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5804;   ;Cost Amount (Actual);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Actual)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Actual);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5805;   ;Cost Amount (Non-Invtbl.);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Non-Invtbl.)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Non-Invtbl.);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5806;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Expected) (ACY)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Expected) (ACY);
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5807;   ;Cost Amount (Actual) (ACY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Actual) (ACY)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Actual) (ACY);
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5808;   ;Cost Amount (Non-Invtbl.)(ACY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Non-Invtbl.)(ACY)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Cost Amount (Non-Invtbl.)(ACY);
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5813;   ;Purchase Amount (Expected);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Purchase Amount (Expected)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Purchase Amount (Expected);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5814;   ;Purchase Amount (Actual);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Purchase Amount (Actual)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Purchase Amount (Actual);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5815;   ;Sales Amount (Expected);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Sales Amount (Expected)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Sales Amount (Expected);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5816;   ;Sales Amount (Actual);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Sales Amount (Actual)" WHERE ("Item Ledger Entry No."=FIELD("Entry No.")));
                                                   CaptionML=ENU=Sales Amount (Actual);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 5818;   ;Shipped Qty. Not Returned;Decimal  ;AccessByPermission=TableData "Sales Header"=R;
                                                   CaptionML=ENU=Shipped Qty. Not Returned;
                                                   DecimalPlaces=0:5 }
    { 5833;   ;Prod. Order Comp. Line No.;Integer ;AccessByPermission=TableData "Production Order"=R;
                                                   CaptionML=ENU=Prod. Order Comp. Line No. }
    { 6500;   ;Serial No.          ;Code20        ;OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",0,"Serial No.");
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 6501;   ;Lot No.             ;Code20        ;OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",1,"Lot No.");
                                                            END;

                                                   CaptionML=ENU=Lot No. }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 6503;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 6510;   ;Item Tracking       ;Option        ;CaptionML=ENU=Item Tracking;
                                                   OptionCaptionML=ENU=None,Lot No.,Lot and Serial No.,Serial No.;
                                                   OptionString=None,"Lot No.","Lot and Serial No.","Serial No.";
                                                   Editable=false }
    { 6602;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Item No."                              ;SumIndexFields="Invoiced Quantity" }
    {    ;"Item No.","Posting Date"                }
    {    ;"Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date";
                                                   SumIndexFields=Quantity,"Invoiced Quantity" }
    {    ;"Source Type","Source No.","Item No.","Variant Code","Posting Date";
                                                   SumIndexFields=Quantity }
    {    ;"Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date";
                                                   SumIndexFields=Quantity,"Remaining Quantity" }
    { false;"Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date","Expiration Date","Lot No.","Serial No.";
                                                   SumIndexFields=Quantity,"Remaining Quantity" }
    {    ;"Country/Region Code","Entry Type","Posting Date" }
    {    ;"Document No.","Document Type","Document Line No." }
    { false;"Item No.","Entry Type","Variant Code","Drop Shipment","Global Dimension 1 Code","Global Dimension 2 Code","Location Code","Posting Date";
                                                   SumIndexFields=Quantity,"Invoiced Quantity" }
    { false;"Source Type","Source No.","Global Dimension 1 Code","Global Dimension 2 Code","Item No.","Variant Code","Posting Date";
                                                   SumIndexFields=Quantity }
    {    ;"Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.";
                                                   SumIndexFields=Quantity;
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","Applied Entry to Adjust"     }
    {    ;"Item No.",Positive,"Location Code","Variant Code" }
    { false;"Entry Type",Nonstock,"Item No.","Posting Date" }
    { false;"Item No.","Location Code",Open,"Variant Code","Unit of Measure Code","Lot No.","Serial No.";
                                                   SumIndexFields="Remaining Quantity" }
    { false;"Item No.",Open,"Variant Code",Positive,"Lot No.","Serial No.";
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    { false;"Item No.",Open,"Variant Code","Location Code","Item Tracking","Lot No.","Serial No.";
                                                   SumIndexFields="Remaining Quantity";
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    { false;"Lot No."                              }
    { false;"Serial No."                           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"Entry No.",Description,"Item No.","Posting Date","Entry Type","Document No." }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEngineMgt@1002 : Codeunit "Reservation Engine Mgt.";
      ReserveItemLedgEntry@1003 : Codeunit "Item Ledger Entry-Reserve";
      ItemTrackingMgt@1006 : Codeunit "Item Tracking Management";
      GLSetupRead@1005 : Boolean;
      IsNotOnInventoryErr@1004 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
      exit(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE ShowReservationEntries@2(Modal@1000 : Boolean);
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      ReserveItemLedgEntry.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE SetAppliedEntryToAdjust@66(AppliedEntryToAdjust@1001 : Boolean);
    BEGIN
      if "Applied Entry to Adjust" <> AppliedEntryToAdjust then begin
        "Applied Entry to Adjust" := AppliedEntryToAdjust;
        MODIFY;
      end;
    END;

    [External]
    PROCEDURE SetAvgTransCompletelyInvoiced@80() : Boolean;
    VAR
      ItemApplnEntry@1005 : Record "Item Application Entry";
      InbndItemLedgEntry@1004 : Record "Item Ledger Entry";
      CompletelyInvoiced@1002 : Boolean;
    BEGIN
      if "Entry Type" <> "Entry Type"::Transfer then
        exit(false);

      ItemApplnEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
      ItemApplnEntry.FIND('-');
      if not "Completely Invoiced" then begin
        CompletelyInvoiced := true;
        repeat
          InbndItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
          if not InbndItemLedgEntry."Completely Invoiced" then
            CompletelyInvoiced := false;
        until ItemApplnEntry.NEXT = 0;

        if CompletelyInvoiced then begin
          SetCompletelyInvoiced;
          exit(true);
        end;
      end;
      exit(false);
    END;

    [External]
    PROCEDURE SetCompletelyInvoiced@3();
    BEGIN
      if not "Completely Invoiced" then begin
        "Completely Invoiced" := true;
        MODIFY;
      end;
    END;

    [External]
    PROCEDURE AppliedEntryToAdjustExists@40(ItemNo@1001 : Code[20]) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.","Applied Entry to Adjust");
      SETRANGE("Item No.",ItemNo);
      SETRANGE("Applied Entry to Adjust",true);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE IsOutbndConsump@57() : Boolean;
    BEGIN
      exit(("Entry Type" = "Entry Type"::Consumption) and not Positive);
    END;

    [External]
    PROCEDURE IsExactCostReversingPurchase@59() : Boolean;
    BEGIN
      exit(
        ("Applies-to Entry" <> 0) and
        ("Entry Type" = "Entry Type"::Purchase) and
        ("Invoiced Quantity" < 0));
    END;

    [External]
    PROCEDURE IsExactCostReversingOutput@8() : Boolean;
    BEGIN
      exit(
        ("Applies-to Entry" <> 0) and
        ("Entry Type" in ["Entry Type"::Output,"Entry Type"::"Assembly Output"]) and
        ("Invoiced Quantity" < 0));
    END;

    [External]
    PROCEDURE UpdateItemTracking@5();
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      "Item Tracking" := ItemTrackingMgt.ItemTrackingOption("Lot No.","Serial No.");
    END;

    [External]
    PROCEDURE GetUnitCostLCY@4() : Decimal;
    BEGIN
      if Quantity = 0 then
        exit("Cost Amount (Actual)");

      exit(ROUND("Cost Amount (Actual)" / Quantity,0.00001));
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record Item;NetChange@1001 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      SETRANGE("Item No.",Item."No.");
      SETRANGE(Open,true);
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      if NetChange then
        SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@7(VAR Item@1000 : Record Item;NetChange@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,NetChange);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record Item;NetChange@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,NetChange);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE IsOutbndSale@5888() : Boolean;
    BEGIN
      exit(("Entry Type" = "Entry Type"::Sale) and not Positive);
    END;

    [External]
    PROCEDURE ShowDimensions@6();
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE CalculateRemQuantity@10(ItemLedgEntryNo@1000 : Integer;PostingDate@1001 : Date) : Decimal;
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
      RemQty@1003 : Decimal;
    BEGIN
      ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.");
      ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgEntryNo);
      RemQty := 0;
      if ItemApplnEntry.FINDSET then
        repeat
          if ItemApplnEntry."Posting Date" <= PostingDate then
            RemQty += ItemApplnEntry.Quantity;
        until ItemApplnEntry.NEXT = 0;
      exit(RemQty);
    END;

    [External]
    PROCEDURE VerifyOnInventory@9();
    VAR
      Item@1000 : Record Item;
    BEGIN
      if not Open then
        exit;
      if Quantity >= 0 then
        exit;
      case "Entry Type" of
        "Entry Type"::Consumption,"Entry Type"::"Assembly Consumption","Entry Type"::Transfer:
          ERROR(IsNotOnInventoryErr,"Item No.");
        else begin
          Item.GET("Item No.");
          if Item.PreventNegativeInventory then
            ERROR(IsNotOnInventoryErr,"Item No.");
        end;
      end;
    END;

    [External]
    PROCEDURE CalculateRemInventoryValue@12(ItemLedgEntryNo@1000 : Integer;ItemLedgEntryQty@1004 : Decimal;RemQty@1005 : Decimal;IncludeExpectedCost@1001 : Boolean;PostingDate@1006 : Date) : Decimal;
    VAR
      ValueEntry@1002 : Record "Value Entry";
      AdjustedCost@1003 : Decimal;
      TotalQty@1007 : Decimal;
    BEGIN
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      ValueEntry.SETFILTER("Valuation Date",'<=%1',PostingDate);
      if not IncludeExpectedCost then
        ValueEntry.SETRANGE("Expected Cost",false);
      if ValueEntry.FINDSET then
        repeat
          if ValueEntry."Entry Type" = ValueEntry."Entry Type"::Revaluation then
            TotalQty := ValueEntry."Valued Quantity"
          else
            TotalQty := ItemLedgEntryQty;
          if ValueEntry."Entry Type" <> ValueEntry."Entry Type"::Rounding then
            if IncludeExpectedCost then
              AdjustedCost += RemQty / TotalQty * (ValueEntry."Cost Amount (Actual)" + ValueEntry."Cost Amount (Expected)")
            else
              AdjustedCost += RemQty / TotalQty * ValueEntry."Cost Amount (Actual)";
        until ValueEntry.NEXT = 0;
      exit(AdjustedCost);
    END;

    [External]
    PROCEDURE TrackingExists@11() : Boolean;
    BEGIN
      exit(("Serial No." <> '') or ("Lot No." <> ''));
    END;

    [External]
    PROCEDURE SetTrackingFilter@13(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      SETRANGE("Serial No.",SerialNo);
      SETRANGE("Lot No.",LotNo);
    END;

    [External]
    PROCEDURE SetTrackingFilterFromSpec@14(TrackingSpecification@1000 : Record "Tracking Specification");
    BEGIN
      SETRANGE("Serial No.",TrackingSpecification."Serial No.");
      SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    END;

    BEGIN
    END.
  }
}

