OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.","Sell-to Customer Name";
    OnInsert=BEGIN
               InitInsert;
               InsertMode := true;

               SetSellToCustomerFromFilter;

               if GetFilterContNo <> '' then
                 VALIDATE("Sell-to Contact No.",GetFilterContNo);

               if "Salesperson Code" = '' then
                 SetDefaultSalesperson;
             END;

    OnDelete=VAR
               CustInvoiceDisc@1002 : Record "Cust. Invoice Disc.";
               PostSalesDelete@1003 : Codeunit "PostSales-Delete";
               ArchiveManagement@1000 : Codeunit ArchiveManagement;
             BEGIN
               if not UserSetupMgt.CheckRespCenter(0,"Responsibility Center") then
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               ArchiveManagement.AutoArchiveSalesDocument(Rec);
               PostSalesDelete.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
                 SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               UpdateOpportunity;

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               if not WhseRequest.ISEMPTY then
                 WhseRequest.DELETEALL(true);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               if (SalesShptHeader."No." <> '') or
                  (SalesInvHeader."No." <> '') or
                  (SalesCrMemoHeader."No." <> '') or
                  (ReturnRcptHeader."No." <> '') or
                  (SalesInvHeaderPrepmt."No." <> '') or
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               then
                 MESSAGE(PostedDocsToPrintCreatedMsg);

               if IdentityManagement.IsInvAppId and CustInvoiceDisc.GET(SalesHeader."Invoice Disc. Code") then
                 CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Header;
    LookupPageID="Sales List";
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order" }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CheckCreditLimitIfLineNotInsertedYet;
                                                                if "No." = '' then
                                                                  InitRecord;
                                                                TESTFIELD(Status,Status::Open);
                                                                if ("Sell-to Customer No." <> xRec."Sell-to Customer No.") and
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                then begin
                                                                  if ("Opportunity No." <> '') and ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) then
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  if GetHideValidationDialog or not GUIALLOWED then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,false,SellToCustomerTxt);
                                                                  if Confirmed then begin
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    if "Sell-to Customer No." = '' then begin
                                                                      if SalesLine.FINDFIRST then
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      exit;
                                                                    end;

                                                                    CheckShipmentInfo(SalesLine,false);
                                                                    CheckPrepmtInfo(SalesLine);
                                                                    CheckReturnInfo(SalesLine,false);

                                                                    SalesLine.RESET;
                                                                  end else begin
                                                                    Rec := xRec;
                                                                    exit;
                                                                  end;
                                                                end;

                                                                if ("Document Type" = "Document Type"::Order) and
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                then begin
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  if not SalesLine.ISEMPTY then
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                end;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,false);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                CopySellToCustomerAddressFieldsFromCustomer(Cust);
                                                                if not SkipSellToContact then
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                if "Sell-to Customer No." = xRec."Sell-to Customer No." then
                                                                  if ShippedSalesLinesExist or ReturnReceiptExist then begin
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  end;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') and ("IC Direction" = "IC Direction"::Outgoing);

                                                                if Cust."Bill-to Customer No." <> '' then
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                else begin
                                                                  if "Bill-to Customer No." = "Sell-to Customer No." then
                                                                    SkipBillToContact := true;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := false;
                                                                end;
                                                                VALIDATE("Ship-to Code",'');

                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                if (xRec."Sell-to Customer No." <> "Sell-to Customer No.") or
                                                                   (xRec."Currency Code" <> "Currency Code") or
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") or
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                then
                                                                  RecreateSalesLines(SellToCustomerTxt);

                                                                if not SkipSellToContact then
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                if (xRec."Sell-to Customer No." <> '') and (xRec."Sell-to Customer No." <> "Sell-to Customer No.") then
                                                                  RecallModifyAddressNotification(GetModifyCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                if BilltoCustomerNoChanged then
                                                                  if xRec."Bill-to Customer No." = '' then
                                                                    InitRecord
                                                                  else begin
                                                                    if GetHideValidationDialog or not GUIALLOWED then
                                                                      Confirmed := true
                                                                    else
                                                                      Confirmed := CONFIRM(ConfirmChangeQst,false,BillToCustomerTxt);
                                                                    if Confirmed then begin
                                                                      SalesLine.SETRANGE("Document Type","Document Type");
                                                                      SalesLine.SETRANGE("Document No.","No.");

                                                                      CheckShipmentInfo(SalesLine,true);
                                                                      CheckPrepmtInfo(SalesLine);
                                                                      CheckReturnInfo(SalesLine,true);

                                                                      SalesLine.RESET;
                                                                    end else
                                                                      "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                  end;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,false);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                PostingSetupMgt.CheckCustPostingGroupReceivablesAccount("Customer Posting Group");
                                                                CheckCrLimit;
                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                CopyBillToCustomerAddressFieldsFromCustomer(Cust);
                                                                if not SkipBillToContact then
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                "Payment Terms Code" := Cust."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

                                                                if "Document Type" = "Document Type"::"Credit Memo" then begin
                                                                  "Payment Method Code" := '';
                                                                  if PaymentTerms.GET("Payment Terms Code") then
                                                                    if PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                end else
                                                                  "Payment Method Code" := Cust."Payment Method Code";

                                                                GLSetup.GET;
                                                                if GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." then begin
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                  "VAT Registration No." := Cust."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                end;
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                "Salesperson Code" := Cust."Salesperson Code";
                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                if "Document Type" = "Document Type"::Order then
                                                                  "Prepayment %" := Cust."Prepayment %";

                                                                if not BilltoCustomerNoChanged then
                                                                  if ShippedSalesLinesExist then begin
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  end;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                if (xRec."Sell-to Customer No." = "Sell-to Customer No.") and
                                                                   BilltoCustomerNoChanged
                                                                then begin
                                                                  RecreateSalesLines(BillToCustomerTxt);
                                                                  BilltoCustomerNoChanged := false;
                                                                end;
                                                                if not SkipBillToContact then
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') and ("IC Direction" = "IC Direction"::Outgoing);

                                                                if (xRec."Bill-to Customer No." <> '') and (xRec."Bill-to Customer No." <> "Bill-to Customer No.") then
                                                                  RecallModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   NotBlank=true }
    { 5   ;   ;Bill-to Name        ;Text50        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record Customer;
                                                              BEGIN
                                                                VALIDATE("Bill-to Customer No.",Customer.GetCustNo("Bill-to Name"));
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF ("Bill-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Bill-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Bill-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record Contact;
                                                            BEGIN
                                                              LookupContact("Bill-to Customer No.","Bill-to Contact No.",Contact);
                                                              if PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK then
                                                                VALIDATE("Bill-to Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE ("Customer No."=FIELD("Sell-to Customer No."));
                                                   OnValidate=VAR
                                                                ShipToAddr@1000 : Record "Ship-to Address";
                                                              BEGIN
                                                                if ("Document Type" = "Document Type"::Order) and
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                then begin
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  if not SalesLine.ISEMPTY then
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                end;

                                                                if not IsCreditDocType then
                                                                  if "Ship-to Code" <> '' then begin
                                                                    if xRec."Ship-to Code" <> '' then
                                                                      begin
                                                                      GetCust("Sell-to Customer No.");
                                                                      if Cust."Location Code" <> '' then
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    end;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    if ShipToAddr."Location Code" <> '' then
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    if ShipToAddr."Tax Area Code" <> '' then
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                  end else
                                                                    if "Sell-to Customer No." <> '' then begin
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      CopyShipToCustomerAddressFieldsFromCustomer(Cust);
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      if Cust."Location Code" <> '' then
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    end;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                if (xRec."Sell-to Customer No." = "Sell-to Customer No.") and
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                then
                                                                  if (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") or
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  then
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  else begin
                                                                    if xRec."Shipping Agent Code" <> "Shipping Agent Code" then
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    if xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" then
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    if xRec."Tax Liable" <> "Tax Liable" then
                                                                      VALIDATE("Tax Liable");
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF ("Ship-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Ship-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Ship-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                if ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) and
                                                                   not ("Order Date" = xRec."Order Date")
                                                                then
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                if "Incoming Document Entry No." = 0 then
                                                                  VALIDATE("Document Date","Posting Date");

                                                                if ("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) and
                                                                   not ("Posting Date" = xRec."Posting Date")
                                                                then
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                if "Currency Code" <> '' then begin
                                                                  UpdateCurrencyFactor;
                                                                  if "Currency Factor" <> xRec."Currency Factor" then
                                                                    ConfirmUpdateCurrencyFactor;
                                                                end;

                                                                if "Posting Date" <> xRec."Posting Date" then
                                                                  if DeferralHeadersExist then
                                                                    ConfirmUpdateDeferralDate;
                                                                SynchronizeAsmHeader;
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                if ("Payment Terms Code" <> '') and ("Document Date" <> 0D) then begin
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  if IsCreditDocType and not PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then begin
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  end else begin
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    if not UpdateDocumentDate then
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  end;
                                                                end else begin
                                                                  VALIDATE("Due Date","Document Date");
                                                                  if not UpdateDocumentDate then begin
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  end;
                                                                end;
                                                                if xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" then begin
                                                                  if xRec."Prepayment Due Date" = 0D then
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                if not (CurrFieldNo in [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) then
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                if "Payment Discount %" < GLSetup."VAT Tolerance %" then
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                else
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if ("Location Code" <> xRec."Location Code") and
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                then
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateOutboundWhseHandlingTime;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=false }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if not (CurrFieldNo in [0,FIELDNO("Posting Date")]) or ("Currency Code" <> xRec."Currency Code") then
                                                                  TESTFIELD(Status,Status::Open);
                                                                if (CurrFieldNo <> FIELDNO("Currency Code")) and ("Currency Code" = xRec."Currency Code") then
                                                                  UpdateCurrencyFactor
                                                                else
                                                                  if "Currency Code" <> xRec."Currency Code" then begin
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  end else
                                                                    if "Currency Code" <> '' then begin
                                                                      UpdateCurrencyFactor;
                                                                      if "Currency Factor" <> xRec."Currency Factor" then
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    end;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                if "Currency Factor" <> xRec."Currency Factor" then
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),false);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=false }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record "Sales Line";
                                                                Currency@1001 : Record Currency;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                if "Prices Including VAT" <> xRec."Prices Including VAT" then begin
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  if SalesLine.FIND('-') then begin
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  end;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  if SalesLine.FINDFIRST then begin
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        true);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    if RecalculatePrice and "Prices Including VAT" then
                                                                      SalesLine.MODIFYALL(Amount,0,true);

                                                                    if "Currency Code" = '' then
                                                                      Currency.InitRoundingPrecision
                                                                    else
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    repeat
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      if not RecalculatePrice then begin
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.UpdateAmounts;
                                                                      end else
                                                                        if "Prices Including VAT" then begin
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          if SalesLine.Quantity <> 0 then begin
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          end;
                                                                        end else begin
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          if SalesLine.Quantity <> 0 then begin
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          end;
                                                                        end;
                                                                      SalesLine.MODIFY;
                                                                    until SalesLine.NEXT = 0;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   AccessByPermission=TableData "Cust. Invoice Disc."=R;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record "Approval Entry";
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                if not ApprovalEntry.ISEMPTY then
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                 "No."=FIELD("No."),
                                                                                                 "Document Line No."=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=false }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                if "Applies-to Doc. No." <> '' then
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                if ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") and (xRec."Applies-to Doc. No." <> '') and
                                                                   ("Applies-to Doc. No." <> '')
                                                                then begin
                                                                  CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                end else
                                                                  if ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") and (xRec."Applies-to Doc. No." = '') then
                                                                    CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  else
                                                                    if ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") and ("Applies-to Doc. No." = '') then
                                                                      CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlLine@1000 : Record "Gen. Journal Line";
                                                              GenJnlApply@1002 : Codeunit "Gen. Jnl.-Apply";
                                                              ApplyCustEntries@1001 : Page "Apply Customer Entries";
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SetApplyToFilters("Bill-to Customer No.","Applies-to Doc. Type","Applies-to Doc. No.",Amount);

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(true);
                                                              if ApplyCustEntries.RUNMODAL = ACTION::LookupOK then begin
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,true);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                              end;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account No." <> '' then
                                                                  case "Bal. Account Type" of
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      begin
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",true);
                                                                      end;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      begin
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,false);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                         "Document No."=FIELD("No."),
                                                                                         "Recalculate Invoice Disc."=CONST(true)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=false }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship;
                                                   Editable=false }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE ("Document Type"=FIELD("Document Type"),
                                                                                              "Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                              "Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=ENU=Last Shipping No.;
                                                   Editable=false }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Posting No.;
                                                   Editable=false }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Prepayment No. }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                Customer@1000 : Record Customer;
                                                                VATRegistrationLog@1200 : Record "VAT Registration Log";
                                                                VATRegistrationNoFormat@1300 : Record "VAT Registration No. Format";
                                                                VATRegistrationLogMgt@1400 : Codeunit "VAT Registration Log Mgt.";
                                                                ResultRecRef@1050 : RecordRef;
                                                                ApplicableCountryCode@1600 : Code[10];
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                if "VAT Registration No." = xRec."VAT Registration No." then
                                                                  exit;

                                                                if not Customer.GET("Sell-to Customer No.") then
                                                                  exit;

                                                                if "VAT Registration No." = Customer."VAT Registration No." then
                                                                  exit;

                                                                if not VATRegistrationNoFormat.Test("VAT Registration No.",Customer."Country/Region Code",Customer."No.",DATABASE::Customer) then
                                                                  exit;

                                                                Customer."VAT Registration No." := "VAT Registration No.";
                                                                ApplicableCountryCode := Customer."Country/Region Code";
                                                                if ApplicableCountryCode = '' then
                                                                  ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";

                                                                VATRegistrationLogMgt.CheckVIESForVATNo(ResultRecRef,VATRegistrationLog,Customer,Customer."No.",
                                                                  ApplicableCountryCode,VATRegistrationLog."Account Type"::Customer);

                                                                if VATRegistrationLog.Status = VATRegistrationLog.Status::Valid then begin
                                                                  MESSAGE(ValidVATNoMsg);
                                                                  Customer.MODIFY(true);
                                                                end else
                                                                  MESSAGE(InvalidVatRegNoMsg);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then begin
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),false);
                                                              END;

                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),false);
                                                              END;

                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation="Country/Region";
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record Customer;
                                                                IdentityManagement@1001 : Codeunit "Identity Management";
                                                              BEGIN
                                                                if not IdentityManagement.IsInvAppId then
                                                                  VALIDATE("Sell-to Customer No.",Customer.GetCustNo("Sell-to Customer Name"));
                                                                GetShippingTime(FIELDNO("Sell-to Customer Name"));
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text50        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address 2"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF ("Sell-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Sell-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Sell-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to City"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record Contact;
                                                            BEGIN
                                                              if "Sell-to Customer No." = '' then
                                                                exit;

                                                              LookupContact("Sell-to Customer No.","Sell-to Contact No.",Contact);
                                                              if PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK then
                                                                VALIDATE("Sell-to Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to County }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF ("Sell-to Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Sell-to Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Sell-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Post Code"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to County"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Country/Region Code"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF ("Ship-to Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Ship-to Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Ship-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString="G/L Account","Bank Account" }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),false);
                                                              END;

                                                   CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                if xRec."Document Date" <> "Document Date" then
                                                                  UpdateDocumentDate := true;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),false);
                                                              END;

                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),false);
                                                              END;

                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record "SEPA Direct Debit Mandate";
                                                              BEGIN
                                                                PaymentMethod.INIT;
                                                                if "Payment Method Code" <> '' then
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                if PaymentMethod."Direct Debit" then begin
                                                                  "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  if "Payment Terms Code" = '' then
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                end else
                                                                  "Direct Debit Mandate ID" := '';
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                if "Bal. Account No." <> '' then begin
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                  CLEAR("Payment Service Set ID");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if xRec."Shipping Agent Code" = "Shipping Agent Code" then
                                                                  exit;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Posting No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                end;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with SalesHeader do begin
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                if NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") then
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 109 ;   ;Shipping No. Series ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Shipping No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                end;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with SalesHeader do begin
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                if NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") then
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Shipping No. Series }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                ValidateTaxAreaCode;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" then
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 117 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : TEMPORARY Record "Cust. Ledger Entry";
                                                                CustEntrySetApplID@1001 : Codeunit "Cust. Entry-SetAppl.ID";
                                                              BEGIN
                                                                if "Applies-to ID" <> '' then
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                if ("Applies-to ID" <> xRec."Applies-to ID") and (xRec."Applies-to ID" <> '') then begin
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,true);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  if CustLedgEntry.FINDFIRST then
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                if not (CurrFieldNo in [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) then
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                if "VAT Base Discount %" > GLSetup."VAT Tolerance %" then
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                if ("VAT Base Discount %" = xRec."VAT Base Discount %") and
                                                                   (CurrFieldNo <> 0)
                                                                then
                                                                  exit;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                if SalesLine.FINDSET then begin
                                                                  MODIFY;
                                                                  repeat
                                                                    if (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) or
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) or
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") or
                                                                       (CurrFieldNo <> 0)
                                                                    then begin
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    end;
                                                                  until SalesLine.NEXT = 0;
                                                                end;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                   OptionString=Open,Released,"Pending Approval","Pending Prepayment";
                                                   Editable=false }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,"%",Amount;
                                                   Editable=false }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                if "Send IC Document" then begin
                                                                  if "Bill-to IC Partner Code" = '' then
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Send IC Document }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=ENU=IC Status;
                                                   OptionCaptionML=ENU=New,Pending,Sent;
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Sell-to IC Partner Code;
                                                   Editable=false }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Bill-to IC Partner Code;
                                                   Editable=false }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                if "IC Direction" = "IC Direction"::Incoming then
                                                                  "Send IC Document" := false;
                                                              END;

                                                   CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                if xRec."Prepayment %" <> "Prepayment %" then
                                                                  UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Prepayment No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                end;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with SalesHeader do begin
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                if NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") then
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Prepayment No. Series }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Compress Prepayment }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Prepmt. Cr. Memo No." <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                end;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with SalesHeader do begin
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                if NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") then
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=ENU=Prepmt. Posting Description }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record "Payment Terms";
                                                              BEGIN
                                                                if ("Prepmt. Payment Terms Code" <> '') and ("Document Date" <> 0D) then begin
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  if IsCreditDocType and not PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then begin
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  end else begin
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    if not UpdateDocumentDate then
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  end;
                                                                end else begin
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  if not UpdateDocumentDate then begin
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Terms Code }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                if not (CurrFieldNo in [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) then
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                if "Payment Discount %" < GLSetup."VAT Tolerance %" then
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                else
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=false }
    { 152 ;   ;Quote Valid Until Date;Date        ;OnValidate=BEGIN
                                                                if ("Quote Valid Until Date" <> 0D) and ("Quote Valid Until Date" < WORKDATE) then
                                                                  "Quote Valid Until Date" := WORKDATE;
                                                              END;

                                                   CaptionML=ENU=Quote Valid Until Date }
    { 153 ;   ;Quote Sent to Customer;DateTime    ;CaptionML=ENU=Quote Sent to Customer;
                                                   Editable=false }
    { 154 ;   ;Quote Accepted      ;Boolean       ;OnValidate=BEGIN
                                                                if "Quote Accepted" then begin
                                                                  "Quote Accepted Date" := WORKDATE;
                                                                  OnAfterSalesQuoteAccepted(Rec);
                                                                end else
                                                                  "Quote Accepted Date" := 0D;
                                                              END;

                                                   CaptionML=ENU=Quote Accepted }
    { 155 ;   ;Quote Accepted Date ;Date          ;CaptionML=ENU=Quote Accepted Date;
                                                   Editable=false }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record "Job Queue Entry";
                                                            BEGIN
                                                              if "Job Queue Status" = "Job Queue Status"::" " then
                                                                exit;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled for Posting,Error,Posting";
                                                   OptionString=" ","Scheduled for Posting",Error,Posting;
                                                   Editable=false }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=false }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record "Incoming Document";
                                                              BEGIN
                                                                if "Incoming Document Entry No." = xRec."Incoming Document Entry No." then
                                                                  exit;
                                                                if "Incoming Document Entry No." = 0 then
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                else
                                                                  IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                           "Document No."=FIELD("No."),
                                                                                                                           Posted=CONST(false)));
                                                   CaptionML=ENU=Last Email Sent Time }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                            "Document No."=FIELD("No."),
                                                                                                                            Posted=CONST(false),
                                                                                                                            "Created Date-Time"=FIELD("Last Email Sent Time")));
                                                   CaptionML=ENU=Last Email Sent Status;
                                                   OptionCaptionML=ENU=,In Process,Finished,Error;
                                                   OptionString=,"In Process",Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                         "Document No."=FIELD("No."),
                                                                                                         Posted=CONST(false),
                                                                                                         "Job Last Status"=CONST(Finished)));
                                                   CaptionML=ENU=Sent as Email }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                              "Document No."=FIELD("No."),
                                                                                                                              Posted=CONST(false),
                                                                                                                              "Created Date-Time"=FIELD("Last Email Sent Time")));
                                                   CaptionML=ENU=Last Email Notif Cleared }
    { 200 ;   ;Work Description    ;BLOB          ;CaptionML=ENU=Work Description }
    { 300 ;   ;Amt. Ship. Not Inv. (LCY);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE ("Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Amount Shipped Not Invoiced (LCY) Incl. VAT;
                                                   Editable=false }
    { 301 ;   ;Amt. Ship. Not Inv. (LCY) Base;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Inv. (LCY) No VAT" WHERE ("Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Amount Shipped Not Invoiced (LCY);
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 600 ;   ;Payment Service Set ID;Integer     ;CaptionML=ENU=Payment Service Set ID }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE ("Customer No."=FIELD("Bill-to Customer No."),
                                                                                                    Closed=CONST(false),
                                                                                                    Blocked=CONST(false));
                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE ("Document No."=FIELD("No."),
                                                                                                              "Document Type"=FIELD("Document Type")));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                               "No."=FIELD("No."),
                                                                                                               "Doc. No. Occurrence"=FIELD("Doc. No. Occurrence")));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=false }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record "Customer Template";
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                if not InsertMode and
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") and
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                then begin
                                                                  if GetHideValidationDialog then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,false,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  if Confirmed then begin
                                                                    if InitFromTemplate("Sell-to Customer Template Code",FIELDCAPTION("Sell-to Customer Template Code")) then
                                                                      exit
                                                                  end else begin
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    exit;
                                                                  end;
                                                                end;

                                                                if SellToCustTemplate.GET("Sell-to Customer Template Code") then begin
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  if "Bill-to Customer No." = '' then
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                end;

                                                                if not InsertMode and
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") or
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                then
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer Template Code }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record "Contact Business Relation";
                                                                Cont@1002 : Record Contact;
                                                                Opportunity@1000 : Record Opportunity;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                if ("Sell-to Contact No." <> xRec."Sell-to Contact No.") and
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                then begin
                                                                  if ("Sell-to Contact No." = '') and ("Opportunity No." <> '') then
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  if GetHideValidationDialog or not GUIALLOWED then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,false,FIELDCAPTION("Sell-to Contact No."));
                                                                  if Confirmed then begin
                                                                    if InitFromContact("Sell-to Contact No.","Sell-to Customer No.",FIELDCAPTION("Sell-to Contact No.")) then
                                                                      exit;
                                                                    if "Opportunity No." <> '' then begin
                                                                      Opportunity.GET("Opportunity No.");
                                                                      if Opportunity."Contact No." <> "Sell-to Contact No." then begin
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      end
                                                                    end;
                                                                  end else begin
                                                                    Rec := xRec;
                                                                    exit;
                                                                  end;
                                                                end;

                                                                if ("Sell-to Customer No." <> '') and ("Sell-to Contact No." <> '') then begin
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") then
                                                                    if (ContBusinessRelation."Contact No." <> Cont."Company No.") and (ContBusinessRelation."Contact No." <> Cont."No.") then
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                end;

                                                                if "Sell-to Contact No." <> '' then
                                                                  if Cont.GET("Sell-to Contact No.") then
                                                                    if ("Salesperson Code" = '') and (Cont."Salesperson Code" <> '') then
                                                                      VALIDATE("Salesperson Code",Cont."Salesperson Code");

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                                UpdateSellToCustTemplateCode;
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record Contact;
                                                              ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                            BEGIN
                                                              if "Sell-to Customer No." <> '' then
                                                                if Cont.GET("Sell-to Contact No.") then
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                else
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") then
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  else
                                                                    Cont.SETRANGE("No.",'');

                                                              if "Sell-to Contact No." <> '' then
                                                                if Cont.GET("Sell-to Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record "Contact Business Relation";
                                                                Cont@1002 : Record Contact;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                if ("Bill-to Contact No." <> xRec."Bill-to Contact No.") and
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                then begin
                                                                  if GetHideValidationDialog or (not GUIALLOWED) then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,false,FIELDCAPTION("Bill-to Contact No."));
                                                                  if Confirmed then begin
                                                                    if InitFromContact("Bill-to Contact No.","Bill-to Customer No.",FIELDCAPTION("Bill-to Contact No.")) then
                                                                      exit;
                                                                  end else begin
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    exit;
                                                                  end;
                                                                end;

                                                                if ("Bill-to Customer No." <> '') and ("Bill-to Contact No." <> '') then begin
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") then
                                                                    if (ContBusinessRelation."Contact No." <> Cont."Company No.") and (ContBusinessRelation."Contact No." <> Cont."No.") then
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                end;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record Contact;
                                                              ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                            BEGIN
                                                              if "Bill-to Customer No." <> '' then
                                                                if Cont.GET("Bill-to Contact No.") then
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                else
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") then
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  else
                                                                    Cont.SETRANGE("No.",'');

                                                              if "Bill-to Contact No." <> '' then
                                                                if Cont.GET("Bill-to Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record "Customer Template";
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                if not InsertMode and
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") and
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                then begin
                                                                  if GetHideValidationDialog then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,false,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  if Confirmed then begin
                                                                    if InitFromTemplate("Bill-to Customer Template Code",FIELDCAPTION("Bill-to Customer Template Code")) then
                                                                      exit
                                                                  end else begin
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    exit;
                                                                  end;
                                                                end;

                                                                VALIDATE("Ship-to Code",'');
                                                                if BillToCustTemplate.GET("Bill-to Customer Template Code") then begin
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Prices Including VAT" := BillToCustTemplate."Prices Including VAT";
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                end;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                if not InsertMode and
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") and
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                then
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer Template Code }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF ("Document Type"=FILTER(<>Order)) Opportunity."No." WHERE ("Contact No."=FIELD("Sell-to Contact No."),
                                                                                                                               Closed=CONST(false))
                                                                                                                               ELSE IF ("Document Type"=CONST(Order)) Opportunity."No." WHERE ("Contact No."=FIELD("Sell-to Contact No."),
                                                                                                                                                                                               "Sales Document No."=FIELD("No."),
                                                                                                                                                                                               "Sales Document Type"=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if not UserSetupMgt.CheckRespCenter(0,"Responsibility Center") then
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");
                                                                UpdateOutboundWhseHandlingTime;
                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                if xRec."Responsibility Center" <> "Responsibility Center" then begin
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if InventoryPickConflict("Document Type","No.","Shipping Advice") then
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                if WhseShpmntConflict("Document Type","No.","Shipping Advice") then
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                         "Document No."=FIELD("No."),
                                                                                         "Qty. Shipped Not Invoiced"=FILTER(<>0)));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=false }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                            "Document No."=FIELD("No."),
                                                                                                            Type=FILTER(<>" "),
                                                                                                            "Location Code"=FIELD("Location Filter")));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=false }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5755;   ;Shipped             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                         "Document No."=FIELD("No."),
                                                                                         "Qty. Shipped (Base)"=FILTER(<>0)));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipped;
                                                   Editable=false }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if "Promised Delivery Date" <> 0D then
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                if "Requested Delivery Date" <> xRec."Requested Delivery Date" then
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if "Promised Delivery Date" <> xRec."Promised Delivery Date" then
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if "Shipping Time" <> xRec."Shipping Time" then
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                if ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") and
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                then
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Shipment Header"=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                         "Sell-to Customer No."=FIELD("Sell-to Customer No."),
                                                                                         "Document No."=FIELD("No."),
                                                                                         "Shipment Date"=FIELD("Date Filter"),
                                                                                         "Outstanding Quantity"=FILTER(<>0)));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Late Order Shipping;
                                                   Editable=false }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No. }
    { 5802;   ;Return Receipt No. Series;Code20   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Return Receipt No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                end;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with SalesHeader do begin
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                if NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") then
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Return Receipt No. Series }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=ENU=Last Return Receipt No.;
                                                   Editable=false }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=ENU=Get Shipment Used;
                                                   Editable=false }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                if not UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") then
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;"Document Type","No."                   ;Clustered=true }
    {    ;"No.","Document Type"                    }
    {    ;"Document Type","Sell-to Customer No."   }
    {    ;"Document Type","Bill-to Customer No."   }
    {    ;"Document Type","Combine Shipments","Bill-to Customer No.","Currency Code","EU 3-Party Trade","Dimension Set ID" }
    {    ;"Sell-to Customer No.","External Document No." }
    {    ;"Document Type","Sell-to Contact No."    }
    {    ;"Bill-to Contact No."                    }
    {    ;"Incoming Document Entry No."            }
    {    ;"Document Date"                          }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"No.","Sell-to Customer Name",Amount,"Sell-to Contact","Amount Including VAT" }
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.';
      ConfirmChangeQst@1004 : TextConst '@@@="%1 = a Field Caption like Currency Code";ENU=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?';
      SalesSetup@1033 : Record "Sales & Receivables Setup";
      GLSetup@1034 : Record "General Ledger Setup";
      GLAcc@1035 : Record "G/L Account";
      SalesHeader@1036 : Record "Sales Header";
      SalesLine@1037 : Record "Sales Line";
      CustLedgEntry@1038 : Record "Cust. Ledger Entry";
      Cust@1039 : Record Customer;
      PaymentTerms@1040 : Record "Payment Terms";
      PaymentMethod@1041 : Record "Payment Method";
      CurrExchRate@1042 : Record "Currency Exchange Rate";
      SalesCommentLine@1043 : Record "Sales Comment Line";
      PostCode@1045 : Record "Post Code";
      BankAcc@1046 : Record "Bank Account";
      SalesShptHeader@1047 : Record "Sales Shipment Header";
      SalesInvHeader@1048 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1049 : Record "Sales Cr.Memo Header";
      ReturnRcptHeader@1050 : Record "Return Receipt Header";
      SalesInvHeaderPrepmt@1101 : Record "Sales Invoice Header";
      SalesCrMemoHeaderPrepmt@1100 : Record "Sales Cr.Memo Header";
      GenBusPostingGrp@1051 : Record "Gen. Business Posting Group";
      RespCenter@1053 : Record "Responsibility Center";
      InvtSetup@1054 : Record "Inventory Setup";
      Location@1055 : Record Location;
      WhseRequest@1056 : Record "Warehouse Request";
      ReservEntry@1001 : Record "Reservation Entry";
      TempReservEntry@1000 : TEMPORARY Record "Reservation Entry";
      CompanyInfo@1002 : Record "Company Information";
      UserSetupMgt@1058 : Codeunit "User Setup Management";
      NoSeriesMgt@1059 : Codeunit NoSeriesManagement;
      CustCheckCreditLimit@1060 : Codeunit "Cust-Check Cr. Limit";
      DimMgt@1065 : Codeunit DimensionManagement;
      IdentityManagement@1010 : Codeunit "Identity Management";
      ApprovalsMgmt@1082 : Codeunit "Approvals Mgmt.";
      WhseSourceHeader@1073 : Codeunit "Whse. Validate Source Header";
      SalesLineReserve@1066 : Codeunit "Sales Line-Reserve";
      PostingSetupMgt@1085 : Codeunit PostingSetupManagement;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      SelectNoSeriesAllowed@1067 : Boolean;
      PrepaymentInvoicesNotPaidErr@1011 : TextConst '@@@=You cannot post the document of type Order with the number 1001 before all related prepayment invoices are fully posted and paid.;ENU=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are fully posted and paid.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      DeferralLineQst@1044 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?';
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      EstimateTxt@1023 : TextConst 'ENU=Estimate';
      ShippingAdviceErr@1029 : TextConst 'ENU=This order must be a complete shipment.';
      PostedDocsToPrintCreatedMsg@1084 : TextConst 'ENU=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.';
      DocumentNotPostedClosePageQst@1061 : TextConst 'ENU=The document has not been posted.\Are you sure you want to exit?';
      SelectCustomerTemplateQst@1008 : TextConst 'ENU=Do you want to select the customer template?';
      ModifyCustomerAddressNotificationLbl@1062 : TextConst 'ENU=Update the address';
      DontShowAgainActionLbl@1064 : TextConst 'ENU=Don''t show again';
      DontShowAgainFunctionTok@1075 : TextConst 'ENU=HideNotificationForCurrentUser';
      UpdateAddressWithSellToAddressFunctionTok@1079 : TextConst 'ENU=CopySellToCustomerAddressFieldsFromSalesDocument';
      UpdateAddressWithBilltoAddressTok@1080 : TextConst 'ENU=CopyBillToCustomerAddressFieldsFromSalesDocument';
      ModifyCustomerAddressNotificationMsg@1063 : TextConst '@@@="%1=customer name";ENU=The address you entered for %1 is different from the customer''s existing address.';
      ValidVATNoMsg@1254 : TextConst 'ENU=The VAT registration number is valid.';
      InvalidVatRegNoMsg@1255 : TextConst 'ENU=The VAT registration number is not valid. Try entering the number again.';
      SellToCustomerTxt@1052 : TextConst 'ENU=Sell-to Customer';
      BillToCustomerTxt@1057 : TextConst 'ENU=Bill-to Customer';
      ModifySellToCustomerAddressNotificationNameTxt@1087 : TextConst 'ENU=Update Sell-to Customer Address';
      ModifySellToCustomerAddressNotificationDescriptionTxt@1098 : TextConst 'ENU=Warn if the sell-to address on sales documents is different from the customer''s existing address.';
      ModifyBillToCustomerAddressNotificationNameTxt@1089 : TextConst 'ENU=Update Bill-to Customer Address';
      ModifyBillToCustomerAddressNotificationDescriptionTxt@1099 : TextConst 'ENU=Warn if the bill-to address on sales documents is different from the customer''s existing address.';

    [External]
    PROCEDURE InitInsert@61();
    BEGIN
      if "No." = '' then begin
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      end;

      InitRecord;
    END;

    [External]
    PROCEDURE InitRecord@10();
    VAR
      ArchiveManagement@1000 : Codeunit ArchiveManagement;
    BEGIN
      SalesSetup.GET;

      case "Document Type" of
        "Document Type"::Quote,"Document Type"::Order:
          begin
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            if "Document Type" = "Document Type"::Order then begin
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            end;
          end;
        "Document Type"::Invoice:
          begin
            if ("No. Series" <> '') and
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            then
              "Posting No. Series" := "No. Series"
            else
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            if SalesSetup."Shipment on Invoice" then
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          end;
        "Document Type"::"Return Order":
          begin
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          end;
        "Document Type"::"Credit Memo":
          begin
            if ("No. Series" <> '') and
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            then
              "Posting No. Series" := "No. Series"
            else
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            if SalesSetup."Return Receipt on Credit Memo" then
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          end;
      end;

      if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] then
        begin
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      end;
      if "Document Type" = "Document Type"::"Return Order" then
        "Order Date" := WORKDATE;

      if not ("Document Type" in ["Document Type"::"Blanket Order","Document Type"::Quote]) and
         ("Posting Date" = 0D)
      then
        "Posting Date" := WORKDATE;

      if SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" then
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      if IsCreditDocType then begin
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      end;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateOutboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
      "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");

      OnAfterInitRecord(Rec);
    END;

    LOCAL PROCEDURE InitNoSeries@77();
    BEGIN
      if xRec."Shipping No." <> '' then begin
        "Shipping No. Series" := xRec."Shipping No. Series";
        "Shipping No." := xRec."Shipping No.";
      end;
      if xRec."Posting No." <> '' then begin
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      end;
      if xRec."Return Receipt No." <> '' then begin
        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
        "Return Receipt No." := xRec."Return Receipt No.";
      end;
      if xRec."Prepayment No." <> '' then begin
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      end;
      if xRec."Prepmt. Cr. Memo No." <> '' then begin
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      end;

      OnAfterInitNoSeries(Rec);
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record "Sales Header") : Boolean;
    VAR
      SalesHeader2@1001 : Record "Sales Header";
    BEGIN
      with SalesHeader do begin
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        if NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") then begin
          if ("Sell-to Customer No." = '') and ("Sell-to Contact No." = '') then begin
            HideCreditCheckDialogue := false;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := true;
          end;
          NoSeriesMgt.SetSeries("No.");
          if SalesHeader2.GET("Document Type","No.") then
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      SalesSetup.GET;

      case "Document Type" of
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          begin
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          end;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          begin
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          end;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      end;

      OnAfterTestNoSeries(Rec);
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[20];
    VAR
      NoSeriesCode@1000 : Code[20];
    BEGIN
      case "Document Type" of
        "Document Type"::Quote:
          NoSeriesCode := SalesSetup."Quote Nos.";
        "Document Type"::Order:
          NoSeriesCode := SalesSetup."Order Nos.";
        "Document Type"::Invoice:
          NoSeriesCode := SalesSetup."Invoice Nos.";
        "Document Type"::"Return Order":
          NoSeriesCode := SalesSetup."Return Order Nos.";
        "Document Type"::"Credit Memo":
          NoSeriesCode := SalesSetup."Credit Memo Nos.";
        "Document Type"::"Blanket Order":
          NoSeriesCode := SalesSetup."Blanket Order Nos.";
      end;
      exit(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      if IsCreditDocType then
        exit(SalesSetup."Posted Credit Memo Nos.");
      exit(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() : Code[10];
    BEGIN
      if IsCreditDocType then
        exit(SalesSetup."Posted Prepmt. Cr. Memo Nos.");
      exit(SalesSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[20];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record "No. Series";
    BEGIN
      if (No <> '') and (NoSeriesCode <> '') then begin
        NoSeries.GET(NoSeriesCode);
        if NoSeries."Date Order" then
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      end;
    END;

    [External]
    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      if SalesShptHeader."No." <> '' then
        if not CONFIRM(Text009,true,SalesShptHeader."No.") then
          exit;
      if SalesInvHeader."No." <> '' then
        if not CONFIRM(Text012,true,SalesInvHeader."No.") then
          exit;
      if SalesCrMemoHeader."No." <> '' then
        if not CONFIRM(Text014,true,SalesCrMemoHeader."No.") then
          exit;
      if ReturnRcptHeader."No." <> '' then
        if not CONFIRM(Text030,true,ReturnRcptHeader."No.") then
          exit;
      if "Prepayment No." <> '' then
        if not CONFIRM(Text056,true,SalesInvHeaderPrepmt."No.") then
          exit;
      if "Prepmt. Cr. Memo No." <> '' then
        if not CONFIRM(Text057,true,SalesCrMemoHeaderPrepmt."No.") then
          exit;
      exit(true);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      if not (("Document Type" = "Document Type"::Quote) and (CustNo = '')) then begin
        if CustNo <> Cust."No." then
          Cust.GET(CustNo);
      end else
        CLEAR(Cust);
    END;

    [External]
    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      exit(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
      ItemChargeAssgntSales@1004 : Record "Item Charge Assignment (Sales)";
      TempItemChargeAssgntSales@1003 : TEMPORARY Record "Item Charge Assignment (Sales)";
      TempInteger@1006 : TEMPORARY Record Integer;
      TempATOLink@1009 : TEMPORARY Record "Assemble-to-Order Link";
      ATOLink@1010 : Record "Assemble-to-Order Link";
      TransferExtendedText@1005 : Codeunit "Transfer Extended Text";
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      if SalesLinesExist then begin
        if GetHideValidationDialog or not GUIALLOWED then
          Confirmed := true
        else
          Confirmed :=
            CONFIRM(
              Text015,false,ChangedFieldName);
        if Confirmed then begin
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          MODIFY;
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          if SalesLine.FINDSET then begin
            TempReservEntry.DELETEALL;
            RecreateReservEntryReqLine(TempSalesLine,TempATOLink,ATOLink);
            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
            SalesLine.DELETEALL(true);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            TempSalesLine.FINDSET;
            ExtendedTextAdded := false;
            SalesLine.BlockDynamicTracking(true);
            repeat
              if TempSalesLine."Attached to Line No." = 0 then begin
                CreateSalesLine(TempSalesLine);
                ExtendedTextAdded := false;

                if SalesLine.Type = SalesLine.Type::Item then begin
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",TempSalesLine."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",TempSalesLine."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",TempSalesLine."Line No.");
                  if TempItemChargeAssgntSales.FINDSET then
                    repeat
                      if not TempItemChargeAssgntSales.MARK then begin
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(true);
                      end;
                    until TempItemChargeAssgntSales.NEXT = 0;
                end;
                if SalesLine.Type = SalesLine.Type::"Charge (Item)" then begin
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                end;
              end else
                if not ExtendedTextAdded then begin
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,true);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := true;
                end;
              CopyReservEntryFromTemp(TempSalesLine,SalesLine."Line No.");
              RecreateReqLine(TempSalesLine,SalesLine."Line No.",false);
              SynchronizeForReservations(SalesLine,TempSalesLine);

              if TempATOLink.AsmExistsForSalesLine(TempSalesLine) then begin
                ATOLink := TempATOLink;
                ATOLink.INSERT;
                ATOLink.UpdateAsmFromSalesLineATOExist(SalesLine);
                TempATOLink.DELETE;
              end;
            until TempSalesLine.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempSalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            CreateItemChargeAssgntSales(ItemChargeAssgntSales,TempItemChargeAssgntSales,TempSalesLine,TempInteger);
            TempSalesLine.SETRANGE(Type);
            TempSalesLine.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          end;
        end else
          ERROR(
            Text017,ChangedFieldName);
      end;
      SalesLine.BlockDynamicTracking(false);
    END;

    LOCAL PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      if SalesLinesExist and not GetHideValidationDialog then
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      if SalesLinesExist and not GetHideValidationDialog then
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      if "Currency Code" <> '' then begin
        if "Posting Date" <> 0D then
          CurrencyDate := "Posting Date"
        else
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      end else
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      if GetHideValidationDialog then
        Confirmed := true
      else
        Confirmed := CONFIRM(Text021,false);
      if Confirmed then
        VALIDATE("Currency Factor")
      else
        "Currency Factor" := xRec."Currency Factor";
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetHideValidationDialog@123() : Boolean;
    VAR
      IdentityManagement@1000 : Codeunit "Identity Management";
    BEGIN
      exit(HideValidationDialog or IdentityManagement.IsInvAppId);
    END;

    LOCAL PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit "Job Transfer Line";
      PermissionManager@1003 : Codeunit "Permission Manager";
      Question@1002 : Text[250];
      NotRunningOnSaaS@1005 : Boolean;
    BEGIN
      if not SalesLinesExist then
        exit;

      NotRunningOnSaaS := true;
      case ChangedFieldName of
        FIELDCAPTION("Shipping Agent Code"),
        FIELDCAPTION("Shipping Agent Service Code"):
          NotRunningOnSaaS := not PermissionManager.SoftwareAsAService;
      end;
      if AskQuestion then begin
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        if GUIALLOWED then
          if NotRunningOnSaaS then
            if DIALOG.CONFIRM(Question,true) then
              case ChangedFieldName of
                FIELDCAPTION("Shipment Date"),
                FIELDCAPTION("Shipping Agent Code"),
                FIELDCAPTION("Shipping Agent Service Code"),
                FIELDCAPTION("Shipping Time"),
                FIELDCAPTION("Requested Delivery Date"),
                FIELDCAPTION("Promised Delivery Date"),
                FIELDCAPTION("Outbound Whse. Handling Time"):
                  ConfirmResvDateConflict;
              end
            else
              exit
          else
            ConfirmResvDateConflict;
      end;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      if SalesLine.FINDSET then
        repeat
          case ChangedFieldName of
            FIELDCAPTION("Shipment Date"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              if SalesLine.Type <> SalesLine.Type::" " then begin
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                if SalesLine."Job No." <> '' then
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              end;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDCAPTION("Deferral Code"):
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("Deferral Code");
            else
              OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,ChangedFieldName);
          end;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(true);
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      if ResvEngMgt.ResvExistsForSalesHeader(Rec) then
        if not CONFIRM(Text063,false) then
          ERROR('');
    END;

    [External]
    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record "Source Code Setup";
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      if (OldDimSetID <> "Dimension Set ID") and SalesLinesExist then begin
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      if "No." <> '' then
        MODIFY;

      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if SalesLinesExist then
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      exit(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      exit(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    VAR
      ReservMgt@1000 : Codeunit "Reservation Management";
    BEGIN
      if SalesLine.FINDSET then begin
        ReservMgt.DeleteDocumentReservation(DATABASE::"Sales Line","Document Type","No.",GetHideValidationDialog);
        repeat
          SalesLine.SuspendStatusCheck(true);
          SalesLine.DELETE(true);
        until SalesLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record "Item Charge Assignment (Sales)");
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    [External]
    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record Contact;
    BEGIN
      if ("Bill-to Customer No." <> '') and ("Sell-to Customer No." <> '') then
        exit(true);

      if Prompt then
        if not CONFIRM(Text035,true) then
          exit(false);

      if "Sell-to Customer No." = '' then begin
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      end;

      if "Bill-to Customer No." = '' then begin
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      end;

      exit(("Bill-to Customer No." <> '') and ("Sell-to Customer No." <> ''));
    END;

    LOCAL PROCEDURE CheckShipmentInfo@116(VAR SalesLine@1000 : Record "Sales Line";BillTo@1001 : Boolean);
    BEGIN
      if "Document Type" = "Document Type"::Order then
        SalesLine.SETFILTER("Quantity Shipped",'<>0')
      else
        if "Document Type" = "Document Type"::Invoice then begin
          if not BillTo then
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Shipment No.",'<>%1','');
        end;

      if SalesLine.FINDFIRST then
        if "Document Type" = "Document Type"::Order then
          SalesLine.TESTFIELD("Quantity Shipped",0)
        else
          SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.SETRANGE("Shipment No.");
      SalesLine.SETRANGE("Quantity Shipped");
    END;

    LOCAL PROCEDURE CheckPrepmtInfo@119(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
      if "Document Type" = "Document Type"::Order then begin
        SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
        if SalesLine.FIND('-') then
          SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
        SalesLine.SETRANGE("Prepmt. Amt. Inv.");
      end;
    END;

    LOCAL PROCEDURE CheckReturnInfo@121(VAR SalesLine@1000 : Record "Sales Line";BillTo@1001 : Boolean);
    BEGIN
      if "Document Type" = "Document Type"::"Return Order" then
        SalesLine.SETFILTER("Return Qty. Received",'<>0')
      else
        if "Document Type" = "Document Type"::"Credit Memo" then begin
          if not BillTo then
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
        end;

      if SalesLine.FINDFIRST then
        if "Document Type" = "Document Type"::"Return Order" then
          SalesLine.TESTFIELD("Return Qty. Received",0)
        else
          SalesLine.TESTFIELD("Return Receipt No.",'');
    END;

    LOCAL PROCEDURE CopyReservEntryToTemp@134(OldSalesLine@1000 : Record "Sales Line");
    BEGIN
      ReservEntry.RESET;
      ReservEntry.SetSourceFilter(
        DATABASE::"Sales Line",OldSalesLine."Document Type",OldSalesLine."Document No.",OldSalesLine."Line No.",true);
      if ReservEntry.FINDSET then
        repeat
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        until ReservEntry.NEXT = 0;
      ReservEntry.DELETEALL;
    END;

    LOCAL PROCEDURE CopyReservEntryFromTemp@133(OldSalesLine@1000 : Record "Sales Line";NewSourceRefNo@1001 : Integer);
    BEGIN
      TempReservEntry.RESET;
      TempReservEntry.SetSourceFilter(
        DATABASE::"Sales Line",OldSalesLine."Document Type",OldSalesLine."Document No.",OldSalesLine."Line No.",true);
      if TempReservEntry.FINDSET then
        repeat
          ReservEntry := TempReservEntry;
          ReservEntry."Source Ref. No." := NewSourceRefNo;
          ReservEntry.INSERT;
        until TempReservEntry.NEXT = 0;
      TempReservEntry.DELETEALL;
    END;

    LOCAL PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record "Sales Line";NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record "Requisition Line";
      TempReqLine@1004 : TEMPORARY Record "Requisition Line";
    BEGIN
      if ToTemp then begin
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        if ReqLine.FINDSET then
          repeat
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          until ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      end else begin
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        if TempReqLine.FINDSET then
          repeat
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          until TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record "Contact Business Relation";
      Cust@1004 : Record Customer;
      OfficeContact@1001 : Record Contact;
      OfficeMgt@1002 : Codeunit "Office Management";
    BEGIN
      if OfficeMgt.GetContact(OfficeContact,CustomerNo) then begin
        HideValidationDialog := true;
        UpdateSellToCust(OfficeContact."No.");
        HideValidationDialog := false;
      end else
        if Cust.GET(CustomerNo) then begin
          if Cust."Primary Contact No." <> '' then
            "Sell-to Contact No." := Cust."Primary Contact No."
          else begin
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.","Sell-to Customer No.");
            if ContBusRel.FINDFIRST then
              "Sell-to Contact No." := ContBusRel."Contact No."
            else
              "Sell-to Contact No." := '';
          end;
          "Sell-to Contact" := Cust.Contact;
        end;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record "Contact Business Relation";
      Cust@1001 : Record Customer;
    BEGIN
      if Cust.GET(CustomerNo) then begin
        if Cust."Primary Contact No." <> '' then
          "Bill-to Contact No." := Cust."Primary Contact No."
        else begin
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          if ContBusRel.FINDFIRST then
            "Bill-to Contact No." := ContBusRel."Contact No."
          else
            "Bill-to Contact No." := '';
        end;
        "Bill-to Contact" := Cust.Contact;
      end;
    END;

    LOCAL PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record "Contact Business Relation";
      Customer@1006 : Record Customer;
      Cont@1005 : Record Contact;
      CustTemplate@1004 : Record "Customer Template";
      SearchContact@1003 : Record Contact;
      ContactBusinessRelationFound@1001 : Boolean;
    BEGIN
      if not Cont.GET(ContactNo) then begin
        "Sell-to Contact" := '';
        exit;
      end;
      "Sell-to Contact No." := Cont."No.";

      if Cont.Type = Cont.Type::Person then
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      if not ContactBusinessRelationFound then
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      if ContactBusinessRelationFound then begin
        if ("Sell-to Customer No." <> '') and ("Sell-to Customer No." <> ContBusinessRelation."No.") then
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");

        if "Sell-to Customer No." = '' then begin
          SkipSellToContact := true;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := false;
        end;
      end else begin
        if "Document Type" = "Document Type"::Quote then begin
          if Cont."Company No." <> '' then
            SearchContact.GET(Cont."Company No.")
          else
            SearchContact := Cont;
          "Sell-to Customer Name" := SearchContact."Company Name";
          "Sell-to Customer Name 2" := SearchContact."Name 2";
          SetShipToAddress(
            SearchContact."Company Name",SearchContact."Name 2",SearchContact.Address,SearchContact."Address 2",
            SearchContact.City,SearchContact."Post Code",SearchContact.County,SearchContact."Country/Region Code");
          if ("Sell-to Customer Template Code" = '') and (not CustTemplate.ISEMPTY) then
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        end else
          ERROR(Text039,Cont."No.",Cont.Name);
        "Sell-to Contact" := Cont.Name;
      end;

      if (Cont.Type = Cont.Type::Company) and Customer.GET("Sell-to Customer No.") then
        "Sell-to Contact" := Customer.Contact
      else
        "Sell-to Contact" := Cont.Name;

      if "Document Type" = "Document Type"::Quote then begin
        if Customer.GET("Sell-to Customer No.") or Customer.GET(ContBusinessRelation."No.") then begin
          if Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company then begin
            if Cont."Company No." <> '' then
              Cont.GET(Cont."Company No.");
          end;
        end else begin
          if Cont."Company No." <> '' then
            Cont.GET(Cont."Company No.");
        end;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      end;
      if ("Sell-to Customer No." = "Bill-to Customer No.") or
         ("Bill-to Customer No." = '')
      then
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record "Contact Business Relation";
      Cust@1004 : Record Customer;
      Cont@1003 : Record Contact;
      CustTemplate@1002 : Record "Customer Template";
      SearchContact@1001 : Record Contact;
      ContactBusinessRelationFound@1007 : Boolean;
    BEGIN
      if not Cont.GET(ContactNo) then begin
        "Bill-to Contact" := '';
        exit;
      end;
      "Bill-to Contact No." := Cont."No.";

      if Cust.GET("Bill-to Customer No.") then
        "Bill-to Contact" := Cust.Contact
      else
        "Bill-to Contact" := Cont.Name;

      if Cont.Type = Cont.Type::Person then
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      if not ContactBusinessRelationFound then
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      if ContactBusinessRelationFound then begin
        if "Bill-to Customer No." = '' then begin
          SkipBillToContact := true;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := false;
          "Bill-to Customer Template Code" := '';
        end else
          if "Bill-to Customer No." <> ContBusinessRelation."No." then
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      end else begin
        if "Document Type" = "Document Type"::Quote then begin
          if Cont."Company No." <> '' then
            SearchContact.GET(Cont."Company No.")
          else
            SearchContact.GET(Cont."No.");

          "Bill-to Name" := SearchContact."Company Name";
          "Bill-to Name 2" := SearchContact."Name 2";
          "Bill-to Address" := SearchContact.Address;
          "Bill-to Address 2" := SearchContact."Address 2";
          "Bill-to City" := SearchContact.City;
          "Bill-to Post Code" := SearchContact."Post Code";
          "Bill-to County" := SearchContact.County;
          "Bill-to Country/Region Code" := SearchContact."Country/Region Code";
          "VAT Registration No." := SearchContact."VAT Registration No.";
          VALIDATE("Currency Code",SearchContact."Currency Code");
          "Language Code" := SearchContact."Language Code";
          if ("Bill-to Customer Template Code" = '') and (not CustTemplate.ISEMPTY) then
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        end else
          ERROR(Text039,Cont."No.",Cont.Name);
      end;
    END;

    LOCAL PROCEDURE UpdateSellToCustTemplateCode@1000();
    BEGIN
      if ("Document Type" = "Document Type"::Quote) and ("Sell-to Customer No." = '') and ("Sell-to Customer Template Code" = '' ) and
         (GetFilterContNo = '')
      then
        VALIDATE("Sell-to Customer Template Code",SelectSalesHeaderCustomerTemplate);
    END;

    LOCAL PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    VAR
      ShippingAgentServices@1001 : Record "Shipping Agent Services";
    BEGIN
      if (CalledByFieldNo <> CurrFieldNo) and (CurrFieldNo <> 0) then
        exit;

      if ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") then
        "Shipping Time" := ShippingAgentServices."Shipping Time"
      else begin
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      end;
      if not (CalledByFieldNo in [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) then
        VALIDATE("Shipping Time");
    END;

    [Internal]
    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record "Sales Header";
      ContBusinessRelation@1002 : Record "Contact Business Relation";
      Cont@1003 : Record Contact;
      CustCheckCreditLimit@1000 : Codeunit "Cust-Check Cr. Limit";
    BEGIN
      if HideCreditCheckDialogue then
        exit;
      if (GetFilterCustNo <> '') or ("Sell-to Customer No." <> '') then begin
        if "Sell-to Customer No." <> '' then
          Cust.GET("Sell-to Customer No.")
        else
          Cust.GET(GetFilterCustNo);
        if Cust."Bill-to Customer No." <> '' then
          SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
        else
          SalesHeader."Bill-to Customer No." := Cust."No.";
        CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
      end else
        if GetFilterContNo <> '' then begin
          Cont.GET(GetFilterContNo);
          if ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.") then begin
            Cust.GET(ContBusinessRelation."No.");
            if Cust."Bill-to Customer No." <> '' then
              SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
            else
              SalesHeader."Bill-to Customer No." := Cust."No.";
            CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
          end;
        end;
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record "Warehouse Request";
    BEGIN
      if "Document Type" = "Document Type"::Order then
        if not IsApprovedForPosting then
          exit;
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      case "Document Type" of
        "Document Type"::Order:
          begin
            if "Shipping Advice" = "Shipping Advice"::Complete then
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          end;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      end;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",true,false,WhseRequest);
    END;

    [External]
    PROCEDURE CreateTask@30();
    VAR
      TempTask@1000 : TEMPORARY Record "To-do";
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTask.CreateTaskFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      if IsCreditDocType then
        if "Location Code" <> '' then begin
          Location.GET("Location Code");
          SetShipToAddress(
            Location.Name,Location."Name 2",Location.Address,Location."Address 2",Location.City,
            Location."Post Code",Location.County,Location."Country/Region Code");
          "Ship-to Contact" := Location.Contact;
        end else begin
          CompanyInfo.GET;
          "Ship-to Code" := '';
          SetShipToAddress(
            CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
            CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
            CompanyInfo."Ship-to Country/Region Code");
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        end;

      OnAfterUpdateShipToAddress(Rec);
    END;

    [External]
    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if SalesLinesExist then
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record "Assemble-to-Order Link";
      NewDimSetID@1002 : Integer;
      ShippedReceivedItemLineDimChangeConfirmed@1004 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      if NewParentDimSetID = OldParentDimSetID then
        exit;
      if not GetHideValidationDialog and GUIALLOWED then
        if not CONFIRM(Text064) then
          exit;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      if SalesLine.FIND('-') then
        repeat
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          if SalesLine."Dimension Set ID" <> NewDimSetID then begin
            SalesLine."Dimension Set ID" := NewDimSetID;

            if not GetHideValidationDialog and GUIALLOWED then
              VerifyShippedReceivedItemLineDimChange(ShippedReceivedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          end;
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippedReceivedItemLineDimChange@105(VAR ShippedReceivedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      if SalesLine.IsShippedReceivedItemDimChanged then
        if not ShippedReceivedItemLineDimChangeConfirmed then
          ShippedReceivedItemLineDimChangeConfirmed := SalesLine.ConfirmShippedReceivedItemDimChange;
    END;

    [External]
    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record "Item Ledger Entry";
      SalesLine@1001 : Record "Sales Line";
      SalesShptLine@1005 : Record "Sales Shipment Line";
      ReturnRcptLine@1002 : Record "Return Receipt Line";
      TempValueEntry@1003 : TEMPORARY Record "Value Entry";
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      case "Document Type" of
        "Document Type"::Order,"Document Type"::Invoice:
          begin
            if SalesLine.FINDSET then
              repeat
                if (SalesLine.Type = SalesLine.Type::Item) and (SalesLine.Quantity <> 0) then
                  with SalesShptLine do begin
                    if SalesLine."Shipment No." <> '' then begin
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    end else begin
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    end;
                    SETRANGE(Correction,false);
                    if QtyType = QtyType::Invoicing then
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    if FINDSET then
                      repeat
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        if ItemLedgEntry.FINDSET then
                          repeat
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          until ItemLedgEntry.NEXT = 0;
                      until NEXT = 0;
                  end;
              until SalesLine.NEXT = 0;
          end;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          begin
            if SalesLine.FINDSET then
              repeat
                if (SalesLine.Type = SalesLine.Type::Item) and (SalesLine.Quantity <> 0) then
                  with ReturnRcptLine do begin
                    if SalesLine."Return Receipt No." <> '' then begin
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    end else begin
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    end;
                    SETRANGE(Correction,false);
                    if QtyType = QtyType::Invoicing then
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    if FINDSET then
                      repeat
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        if ItemLedgEntry.FINDSET then
                          repeat
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          until ItemLedgEntry.NEXT = 0;
                      until NEXT = 0;
                  end;
              until SalesLine.NEXT = 0;
          end;
      end;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumber@63() : Text;
    BEGIN
      exit("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumberLbl@62() : Text;
    BEGIN
      exit(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumber@164() : Text;
    BEGIN
      exit('');
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumberLbl@161() : Text;
    BEGIN
      exit('');
    END;

    LOCAL PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record "Value Entry";ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record "Value Entry";
    BEGIN
      with ValueEntry do begin
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        if FINDSET then
          repeat
            if Adjustment then begin
              TempValueEntry := ValueEntry;
              if TempValueEntry.INSERT then;
            end;
          until NEXT = 0;
      end;
    END;

    [Internal]
    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page "Posted Sales Document Lines";
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := true;
      if SalesPostedDocLines.RUNMODAL = ACTION::LookupOK then
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    [Internal]
    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit "Sales-Calc. Discount";
    BEGIN
      SalesSetup.GET;
      if SalesSetup."Calc. Inv. Discount" then
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      if UserSetupMgt.GetSalesFilter <> '' then begin
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      end;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    LOCAL PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record "Sales Line";OldSalesLine@1001 : Record "Sales Line");
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      if NewSalesLine."Reserved Quantity" = 0 then
        exit;
      if NewSalesLine."Location Code" <> OldSalesLine."Location Code" then
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      if NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" then
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      if NewSalesLine.MODIFY then;
    END;

    [External]
    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record "Warehouse Activity Line";
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      if ShippingAdvice <> ShippingAdvice::Complete then
        exit(false);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      if WarehouseActivityLine.ISEMPTY then
        exit(false);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      if SalesLine.ISEMPTY then
        exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record "Warehouse Shipment Line";
    BEGIN
      if ShippingAdvice <> ShippingAdvice::Complete then
        exit(false);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      if WarehouseShipmentLine.ISEMPTY then
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE CheckCrLimit@47();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader := Rec;

      if GUIALLOWED and
         (CurrFieldNo <> 0) and
         (("Document Type" <= "Document Type"::Invoice) or ("Document Type" = "Document Type"::"Blanket Order")) and
         SalesHeader.FIND
      then begin
        "Amount Including VAT" := 0;
        if "Document Type" = "Document Type"::Order then
          if BilltoCustomerNoChanged then begin
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          end;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      end;
    END;

    PROCEDURE CheckItemAvailabilityInLines@142();
    VAR
      SalesLine@1000 : Record "Sales Line";
      ItemCheckAvail@1001 : Codeunit "Item-Check Avail.";
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      if SalesLine.FINDSET then
        repeat
          if ItemCheckAvail.SalesLineCheck(SalesLine) then
            ItemCheckAvail.RaiseUpdateInterruptedError;
        until SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      exit(SalesLine.ISEMPTY);
    END;

    [Internal]
    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PrepaymentMgt@1001 : Codeunit "Prepayment Mgt.";
    BEGIN
      if ApprovalsMgmt.PrePostApprovalCheckSales(Rec) then begin
        if PrepaymentMgt.TestSalesPrepayment(Rec) then
          ERROR(STRSUBSTNO(PrepaymentInvoicesNotPaidErr,"Document Type","No."));
        if "Document Type" = "Document Type"::Order then
          if PrepaymentMgt.TestSalesPayment(Rec) then
            ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        exit(true);
      end;
    END;

    [External]
    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit "Prepayment Mgt.";
    BEGIN
      if ApprovalsMgmt.PrePostApprovalCheckSales(Rec) then begin
        if PrepaymentMgt.TestSalesPrepayment(Rec) then
          exit(false);
        if PrepaymentMgt.TestSalesPayment(Rec) then
          exit(false);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      SalesSetup.GET;
      exit(SalesSetup.GetLegalStatement);
    END;

    [External]
    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      if not IsApprovedForPosting then
        exit;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    [External]
    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit "Sales Post via Job Queue";
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    [Internal]
    PROCEDURE EmailRecords@135(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record "Document Sending Profile";
      DummyReportSelections@1001 : Record "Report Selections";
    BEGIN
      case "Document Type" of
        "Document Type"::Quote:
          begin
            DocumentSendingProfile.TrySendToEMail(
              DummyReportSelections.Usage::"S.Quote",Rec,FIELDNO("No."),
              GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
            FIND;
            "Quote Sent to Customer" := CURRENTDATETIME;
            MODIFY;
          end;
        "Document Type"::Invoice:
          DocumentSendingProfile.TrySendToEMail(
            DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
            GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
      end;

      OnAfterSendSalesHeader(Rec,ShowDialog);
    END;

    PROCEDURE GetDocTypeTxt@140() : Text[50];
    VAR
      IdentityManagement@1000 : Codeunit "Identity Management";
    BEGIN
      if "Document Type" = "Document Type"::Quote then
        if IdentityManagement.IsInvAppId then
          exit(EstimateTxt);
      exit(FORMAT("Document Type"));
    END;

    [External]
    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record "Sales Header";
      Opportunity@1002 : Record Opportunity;
    BEGIN
      if "Opportunity No." <> OldOpportunityNo then begin
        if "Opportunity No." <> '' then
          if Opportunity.GET("Opportunity No.") then begin
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            if Opportunity."Sales Document No." <> '' then begin
              if CONFIRM(Text048,false,Opportunity."Sales Document No.",Opportunity."No.") then begin
                if SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") then begin
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                end;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              end else
                "Opportunity No." := OldOpportunityNo;
            end else
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          end;
        if (OldOpportunityNo <> '') and Opportunity.GET(OldOpportunityNo) then
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      end;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record Opportunity;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record "Assembly Header";
      ATOLink@1002 : Record "Assemble-to-Order Link";
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      if ATOLink.FINDSET then
        repeat
          if AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") then
            if "Posting Date" <> AsmHeader."Posting Date" then begin
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            end;
        until ATOLink.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record "Sales Line";
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",false);
      Result := true;
      if SalesLine.FINDSET then
        repeat
          if SalesLine.IsShipment then begin
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            if SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            then
              Result := false;
          end;
        until SalesLine.NEXT = 0;
      if QtyToShipBaseTotal = 0 then
        Result := true;
      if not Result then
        ERROR(ShippingAdviceErr);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    VAR
      MinValue@1002 : Code[20];
      MaxValue@1001 : Code[20];
    BEGIN
      if GETFILTER("Sell-to Customer No.") <> '' then begin
        if TryGetFilterCustNoRange(MinValue,MaxValue) then
          if MinValue = MaxValue then
            exit(MaxValue);
      end;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetFilterCustNoRange@128(VAR MinValue@1001 : Code[20];VAR MaxValue@1000 : Code[20]);
    BEGIN
      MinValue := GETRANGEMIN("Sell-to Customer No.");
      MaxValue := GETRANGEMAX("Sell-to Customer No.");
    END;

    LOCAL PROCEDURE GetFilterCustNoByApplyingFilter@129() : Code[20];
    VAR
      SalesHeader@1002 : Record "Sales Header";
      MinValue@1001 : Code[20];
      MaxValue@1000 : Code[20];
    BEGIN
      if GETFILTER("Sell-to Customer No.") <> '' then begin
        SalesHeader.COPYFILTERS(Rec);
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.");
        if SalesHeader.FINDFIRST then
          MinValue := SalesHeader."Sell-to Customer No.";
        if SalesHeader.FINDLAST then
          MaxValue := SalesHeader."Sell-to Customer No.";
        if MinValue = MaxValue then
          exit(MaxValue);
      end;
    END;

    LOCAL PROCEDURE GetFilterContNo@65() : Code[20];
    BEGIN
      if GETFILTER("Sell-to Contact No.") <> '' then
        if GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") then
          exit(GETRANGEMAX("Sell-to Contact No."));
    END;

    LOCAL PROCEDURE CheckCreditLimitIfLineNotInsertedYet@66();
    BEGIN
      if "No." = '' then begin
        HideCreditCheckDialogue := false;
        CheckCreditMaxBeforeInsert;
        HideCreditCheckDialogue := true;
      end;
    END;

    [External]
    PROCEDURE InvoicedLineExists@156() : Boolean;
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      exit(not SalesLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@73();
    VAR
      SalesLine@1000 : Record "Sales Line";
      TempSalesLine@1003 : TEMPORARY Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      if SalesLine.FINDSET then
        repeat
          CollectParamsInBufferForCreateDimSet(TempSalesLine,SalesLine);
        until SalesLine.NEXT = 0;
      TempSalesLine.RESET;
      TempSalesLine.MARKEDONLY(false);
      if TempSalesLine.FINDSET then
        repeat
          SalesLine.CreateDim(DATABASE::"G/L Account",TempSalesLine."No.",
            DATABASE::Job,TempSalesLine."Job No.",
            DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
        until TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@72(VAR TempSalesLine@1000 : TEMPORARY Record "Sales Line";SalesLine@1001 : Record "Sales Line");
    VAR
      GenPostingSetup@1003 : Record "General Posting Setup";
      DefaultDimension@1002 : Record "Default Dimension";
    BEGIN
      TempSalesLine.SETRANGE("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
      TempSalesLine.SETRANGE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
      if not TempSalesLine.FINDFIRST then begin
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup.GetSalesPrepmtAccount);
        InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,GenPostingSetup."Sales Prepayments Account",DefaultDimension.ISEMPTY);
      end else
        if not TempSalesLine.MARK then begin
          TempSalesLine.SETRANGE("Job No.",SalesLine."Job No.");
          TempSalesLine.SETRANGE("Responsibility Center",SalesLine."Responsibility Center");
          if TempSalesLine.ISEMPTY then
            InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,TempSalesLine."No.",false);
        end;
    END;

    LOCAL PROCEDURE InsertTempSalesLineInBuffer@71(VAR TempSalesLine@1001 : TEMPORARY Record "Sales Line";SalesLine@1000 : Record "Sales Line";AccountNo@1002 : Code[20];DefaultDimensionsNotExist@1003 : Boolean);
    BEGIN
      TempSalesLine.INIT;
      TempSalesLine."Line No." := SalesLine."Line No.";
      TempSalesLine."No." := AccountNo;
      TempSalesLine."Job No." := SalesLine."Job No.";
      TempSalesLine."Responsibility Center" := SalesLine."Responsibility Center";
      TempSalesLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      TempSalesLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
      TempSalesLine.MARK := DefaultDimensionsNotExist;
      TempSalesLine.INSERT;
    END;

    [Internal]
    PROCEDURE OpenSalesOrderStatistics@70();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
    END;

    [External]
    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      case "Document Type" of
        "Document Type"::Quote:
          exit(PAGE::"Sales Quote");
        "Document Type"::Order:
          exit(PAGE::"Sales Order");
        "Document Type"::Invoice:
          exit(PAGE::"Sales Invoice");
        "Document Type"::"Credit Memo":
          exit(PAGE::"Sales Credit Memo");
        "Document Type"::"Blanket Order":
          exit(PAGE::"Blanket Sales Order");
        "Document Type"::"Return Order":
          exit(PAGE::"Sales Return Order");
      end;
    END;

    [External]
    PROCEDURE CheckAvailableCreditLimit@67() : Decimal;
    VAR
      Customer@1000 : Record Customer;
      AvailableCreditLimit@1002 : Decimal;
    BEGIN
      if not Customer.GET("Bill-to Customer No.") then
        Customer.GET("Sell-to Customer No.");

      AvailableCreditLimit := Customer.CalcAvailableCredit;

      if AvailableCreditLimit < 0 then
        OnCustomerCreditLimitExceeded
      else
        OnCustomerCreditLimitNotExceeded;

      exit(AvailableCreditLimit);
    END;

    [External]
    PROCEDURE SetStatus@99(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    LOCAL PROCEDURE TestSalesLineFieldsBeforeRecreate@68();
    BEGIN
      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Job Contract Entry No.",0);
      SalesLine.TESTFIELD("Quantity Shipped",0);
      SalesLine.TESTFIELD("Quantity Invoiced",0);
      SalesLine.TESTFIELD("Return Qty. Received",0);
      SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.TESTFIELD("Return Receipt No.",'');
      SalesLine.TESTFIELD("Blanket Order No.",'');
      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
    END;

    LOCAL PROCEDURE RecreateReservEntryReqLine@75(VAR TempSalesLine@1000 : TEMPORARY Record "Sales Line";VAR TempATOLink@1003 : TEMPORARY Record "Assemble-to-Order Link";VAR ATOLink@1002 : Record "Assemble-to-Order Link");
    BEGIN
      repeat
        TestSalesLineFieldsBeforeRecreate;
        if (SalesLine."Location Code" <> "Location Code") and not SalesLine.IsServiceItem then
          SalesLine.VALIDATE("Location Code","Location Code");
        TempSalesLine := SalesLine;
        if SalesLine.Nonstock then begin
          SalesLine.Nonstock := false;
          SalesLine.MODIFY;
        end;

        if ATOLink.AsmExistsForSalesLine(TempSalesLine) then begin
          TempATOLink := ATOLink;
          TempATOLink.INSERT;
          ATOLink.DELETE;
        end;

        TempSalesLine.INSERT;
        CopyReservEntryToTemp(SalesLine);
        RecreateReqLine(SalesLine,0,true);
      until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntSalesToTemp@69(VAR ItemChargeAssgntSales@1001 : Record "Item Charge Assignment (Sales)";VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record "Item Charge Assignment (Sales)");
    BEGIN
      if ItemChargeAssgntSales.FINDSET then begin
        repeat
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssgntSales;
          TempItemChargeAssgntSales.INSERT;
        until ItemChargeAssgntSales.NEXT = 0;
        ItemChargeAssgntSales.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE CreateSalesLine@78(VAR TempSalesLine@1000 : TEMPORARY Record "Sales Line");
    BEGIN
      SalesLine.INIT;
      SalesLine."Line No." := SalesLine."Line No." + 10000;
      SalesLine.VALIDATE(Type,TempSalesLine.Type);
      if TempSalesLine."No." = '' then begin
        SalesLine.VALIDATE(Description,TempSalesLine.Description);
        SalesLine.VALIDATE("Description 2",TempSalesLine."Description 2");
      end else begin
        SalesLine.VALIDATE("No.",TempSalesLine."No.");
        if SalesLine.Type <> SalesLine.Type::" " then begin
          SalesLine.VALIDATE("Unit of Measure Code",TempSalesLine."Unit of Measure Code");
          SalesLine.VALIDATE("Variant Code",TempSalesLine."Variant Code");
          if TempSalesLine.Quantity <> 0 then begin
            SalesLine.VALIDATE(Quantity,TempSalesLine.Quantity);
            SalesLine.VALIDATE("Qty. to Assemble to Order",TempSalesLine."Qty. to Assemble to Order");
          end;
          SalesLine."Purchase Order No." := TempSalesLine."Purchase Order No.";
          SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
          SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
        end;
        SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
      end;
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE CreateItemChargeAssgntSales@83(VAR ItemChargeAssgntSales@1001 : Record "Item Charge Assignment (Sales)";VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record "Item Charge Assignment (Sales)";VAR TempSalesLine@1002 : TEMPORARY Record "Sales Line";VAR TempInteger@1003 : TEMPORARY Record Integer);
    BEGIN
      if TempSalesLine.FINDSET then
        repeat
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",TempSalesLine."Line No.");
          if TempItemChargeAssgntSales.FINDSET then begin
            repeat
              TempInteger.FINDFIRST;
              ItemChargeAssgntSales.INIT;
              ItemChargeAssgntSales := TempItemChargeAssgntSales;
              ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
              ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
              ItemChargeAssgntSales.INSERT;
            until TempItemChargeAssgntSales.NEXT = 0;
            TempInteger.DELETE;
          end;
        until TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateOutboundWhseHandlingTime@88();
    BEGIN
      if "Location Code" <> '' then begin
        if Location.GET("Location Code") then
          "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
      end else
        if InvtSetup.GET then
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckSalesPostRestrictions@115();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCustomerCreditLimitExceeded@74();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCustomerCreditLimitNotExceeded@76();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckSalesReleaseRestrictions@81();
    BEGIN
    END;

    [External]
    PROCEDURE DeferralHeadersExist@82() : Boolean;
    VAR
      DeferralHeader@1000 : Record "Deferral Header";
      DeferralUtilities@1001 : Codeunit "Deferral Utilities";
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      exit(not DeferralHeader.ISEMPTY);
    END;

    [External]
    PROCEDURE SetSellToCustomerFromFilter@186();
    VAR
      SellToCustomerNo@1000 : Code[20];
    BEGIN
      SellToCustomerNo := GetFilterCustNo;
      if SellToCustomerNo = '' then begin
        FILTERGROUP(2);
        SellToCustomerNo := GetFilterCustNo;
        if SellToCustomerNo = '' then
          SellToCustomerNo := GetFilterCustNoByApplyingFilter;
        FILTERGROUP(0);
      end;
      if SellToCustomerNo <> '' then
        VALIDATE("Sell-to Customer No.",SellToCustomerNo);
    END;

    [External]
    PROCEDURE CopySellToCustomerFilter@44();
    VAR
      SellToCustomerFilter@1000 : Text;
    BEGIN
      SellToCustomerFilter := GETFILTER("Sell-to Customer No.");
      if SellToCustomerFilter <> '' then begin
        FILTERGROUP(2);
        SETFILTER("Sell-to Customer No.",SellToCustomerFilter);
        FILTERGROUP(0)
      end;
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      if GetHideValidationDialog then
        Confirmed := true
      else
        Confirmed := CONFIRM(DeferralLineQst,false);
      if Confirmed then
        UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),false);
    END;

    [External]
    PROCEDURE BatchConfirmUpdateDeferralDate@130(VAR BatchConfirm@1000 : '" ",Skip,Update';ReplacePostingDate@1004 : Boolean;PostingDateReq@1003 : Date);
    BEGIN
      if (not ReplacePostingDate) or (PostingDateReq = "Posting Date") or (BatchConfirm = BatchConfirm::Skip) then
        exit;

      if not DeferralHeadersExist then
        exit;

      "Posting Date" := PostingDateReq;
      case BatchConfirm of
        BatchConfirm::" ":
          begin
            ConfirmUpdateDeferralDate;
            if Confirmed then
              BatchConfirm := BatchConfirm::Update
            else
              BatchConfirm := BatchConfirm::Skip;
          end;
        BatchConfirm::Update:
          UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),false);
      end;
      COMMIT;
    END;

    [External]
    PROCEDURE GetSelectedPaymentServicesText@84() : Text;
    VAR
      PaymentServiceSetup@1000 : Record "Payment Service Setup";
    BEGIN
      exit(PaymentServiceSetup.GetSelectedPaymentsText("Payment Service Set ID"));
    END;

    [External]
    PROCEDURE SetDefaultPaymentServices@86();
    VAR
      PaymentServiceSetup@1000 : Record "Payment Service Setup";
      SetID@1001 : Integer;
    BEGIN
      if not PaymentServiceSetup.CanChangePaymentService(Rec) then
        exit;

      if PaymentServiceSetup.GetDefaultPaymentServices(SetID) then
        VALIDATE("Payment Service Set ID",SetID);
    END;

    [External]
    PROCEDURE ChangePaymentServiceSetting@87();
    VAR
      PaymentServiceSetup@1000 : Record "Payment Service Setup";
      SetID@1001 : Integer;
    BEGIN
      SetID := "Payment Service Set ID";
      if PaymentServiceSetup.SelectPaymentService(SetID) then begin
        VALIDATE("Payment Service Set ID",SetID);
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      exit("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    [External]
    PROCEDURE HasSellToAddress@94() : Boolean;
    BEGIN
      case true of
        "Sell-to Address" <> '':
          exit(true);
        "Sell-to Address 2" <> '':
          exit(true);
        "Sell-to City" <> '':
          exit(true);
        "Sell-to Country/Region Code" <> '':
          exit(true);
        "Sell-to County" <> '':
          exit(true);
        "Sell-to Post Code" <> '':
          exit(true);
        "Sell-to Contact" <> '':
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE HasShipToAddress@103() : Boolean;
    BEGIN
      case true of
        "Ship-to Address" <> '':
          exit(true);
        "Ship-to Address 2" <> '':
          exit(true);
        "Ship-to City" <> '':
          exit(true);
        "Ship-to Country/Region Code" <> '':
          exit(true);
        "Ship-to County" <> '':
          exit(true);
        "Ship-to Post Code" <> '':
          exit(true);
        "Ship-to Contact" <> '':
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE HasBillToAddress@95() : Boolean;
    BEGIN
      case true of
        "Bill-to Address" <> '':
          exit(true);
        "Bill-to Address 2" <> '':
          exit(true);
        "Bill-to City" <> '':
          exit(true);
        "Bill-to Country/Region Code" <> '':
          exit(true);
        "Bill-to County" <> '':
          exit(true);
        "Bill-to Post Code" <> '':
          exit(true);
        "Bill-to Contact" <> '':
          exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE CopySellToCustomerAddressFieldsFromCustomer@90(VAR SellToCustomer@1000 : Record Customer);
    BEGIN
      if SellToCustomerIsReplaced or ShouldCopyAddressFromSellToCustomer(SellToCustomer) then begin
        "Sell-to Address" := SellToCustomer.Address;
        "Sell-to Address 2" := SellToCustomer."Address 2";
        "Sell-to City" := SellToCustomer.City;
        "Sell-to Post Code" := SellToCustomer."Post Code";
        "Sell-to County" := SellToCustomer.County;
        "Sell-to Country/Region Code" := SellToCustomer."Country/Region Code";
      end;
    END;

    LOCAL PROCEDURE CopyShipToCustomerAddressFieldsFromCustomer@98(VAR SellToCustomer@1000 : Record Customer);
    BEGIN
      if SellToCustomerIsReplaced or ShipToAddressEqualsOldSellToAddress then begin
        "Ship-to Address" := SellToCustomer.Address;
        "Ship-to Address 2" := SellToCustomer."Address 2";
        "Ship-to City" := SellToCustomer.City;
        "Ship-to Post Code" := SellToCustomer."Post Code";
        "Ship-to County" := SellToCustomer.County;
        VALIDATE("Ship-to Country/Region Code",SellToCustomer."Country/Region Code");
      end;
    END;

    LOCAL PROCEDURE CopyBillToCustomerAddressFieldsFromCustomer@93(VAR BillToCustomer@1000 : Record Customer);
    BEGIN
      if BillToCustomerIsReplaced or ShouldCopyAddressFromBillToCustomer(BillToCustomer) then begin
        "Bill-to Address" := BillToCustomer.Address;
        "Bill-to Address 2" := BillToCustomer."Address 2";
        "Bill-to City" := BillToCustomer.City;
        "Bill-to Post Code" := BillToCustomer."Post Code";
        "Bill-to County" := BillToCustomer.County;
        "Bill-to Country/Region Code" := BillToCustomer."Country/Region Code";
      end;
    END;

    [External]
    PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[50];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[50];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromSellToCustomer@101(SellToCustomer@1000 : Record Customer) : Boolean;
    BEGIN
      exit((not HasSellToAddress) and SellToCustomer.HasAddress);
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromBillToCustomer@102(BillToCustomer@1000 : Record Customer) : Boolean;
    BEGIN
      exit((not HasBillToAddress) and BillToCustomer.HasAddress);
    END;

    LOCAL PROCEDURE SellToCustomerIsReplaced@96() : Boolean;
    BEGIN
      exit((xRec."Sell-to Customer No." <> '') and (xRec."Sell-to Customer No." <> "Sell-to Customer No."));
    END;

    LOCAL PROCEDURE BillToCustomerIsReplaced@97() : Boolean;
    BEGIN
      exit((xRec."Bill-to Customer No." <> '') and (xRec."Bill-to Customer No." <> "Bill-to Customer No."));
    END;

    LOCAL PROCEDURE UpdateShipToAddressFromSellToAddress@50(FieldNumber@1000 : Integer);
    BEGIN
      if ("Ship-to Code" = '') and ShipToAddressEqualsOldSellToAddress then
        case FieldNumber of
          FIELDNO("Ship-to Address"):
            if xRec."Sell-to Address" = "Ship-to Address" then
              "Ship-to Address" := "Sell-to Address";
          FIELDNO("Ship-to Address 2"):
            if xRec."Sell-to Address 2" = "Ship-to Address 2" then
              "Ship-to Address 2" := "Sell-to Address 2";
          FIELDNO("Ship-to City"),FIELDNO("Ship-to Post Code"):
            begin
              if xRec."Sell-to City" = "Ship-to City" then
                "Ship-to City" := "Sell-to City";
              if xRec."Sell-to Post Code" = "Ship-to Post Code" then
                "Ship-to Post Code" := "Sell-to Post Code";
              if xRec."Sell-to County" = "Ship-to County" then
                "Ship-to County" := "Sell-to County";
              if xRec."Sell-to Country/Region Code" = "Ship-to Country/Region Code" then
                "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
            end;
          FIELDNO("Ship-to County"):
            if xRec."Sell-to County" = "Ship-to County" then
              "Ship-to County" := "Sell-to County";
          FIELDNO("Ship-to Country/Region Code"):
            if  xRec."Sell-to Country/Region Code" = "Ship-to Country/Region Code" then
              "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
        end;
    END;

    LOCAL PROCEDURE ShipToAddressEqualsOldSellToAddress@51() : Boolean;
    BEGIN
      exit(IsShipToAddressEqualToSellToAddress(xRec,Rec));
    END;

    [External]
    PROCEDURE ShipToAddressEqualsSellToAddress@111() : Boolean;
    BEGIN
      exit(IsShipToAddressEqualToSellToAddress(Rec,Rec));
    END;

    LOCAL PROCEDURE IsShipToAddressEqualToSellToAddress@113(SalesHeaderWithSellTo@1000 : Record "Sales Header";SalesHeaderWithShipTo@1001 : Record "Sales Header") : Boolean;
    BEGIN
      if (SalesHeaderWithSellTo."Sell-to Address" = SalesHeaderWithShipTo."Ship-to Address") and
         (SalesHeaderWithSellTo."Sell-to Address 2" = SalesHeaderWithShipTo."Ship-to Address 2") and
         (SalesHeaderWithSellTo."Sell-to City" = SalesHeaderWithShipTo."Ship-to City") and
         (SalesHeaderWithSellTo."Sell-to County" = SalesHeaderWithShipTo."Ship-to County") and
         (SalesHeaderWithSellTo."Sell-to Post Code" = SalesHeaderWithShipTo."Ship-to Post Code") and
         (SalesHeaderWithSellTo."Sell-to Country/Region Code" = SalesHeaderWithShipTo."Ship-to Country/Region Code") and
         (SalesHeaderWithSellTo."Sell-to Contact" = SalesHeaderWithShipTo."Ship-to Contact")
      then
        exit(true);
    END;

    [External]
    PROCEDURE CopySellToAddressToShipToAddress@112();
    BEGIN
      VALIDATE("Ship-to Address","Sell-to Address");
      VALIDATE("Ship-to Address 2","Sell-to Address 2");
      VALIDATE("Ship-to City","Sell-to City");
      VALIDATE("Ship-to Contact","Sell-to Contact");
      VALIDATE("Ship-to Country/Region Code","Sell-to Country/Region Code");
      VALIDATE("Ship-to County","Sell-to County");
      VALIDATE("Ship-to Post Code","Sell-to Post Code");
    END;

    PROCEDURE CopySellToAddressToBillToAddress@92();
    BEGIN
      if "Bill-to Customer No." = "Sell-to Customer No." then begin
        "Bill-to Address" := "Sell-to Address";
        "Bill-to Address 2" := "Sell-to Address 2";
        "Bill-to Post Code" := "Sell-to Post Code";
        "Bill-to Country/Region Code" := "Sell-to Country/Region Code";
        "Bill-to City" := "Sell-to City";
        "Bill-to County" := "Sell-to County";
      end;
    END;

    [External]
    PROCEDURE ConfirmCloseUnposted@104() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit "Instruction Mgt.";
    BEGIN
      if SalesLinesExist then
        exit(InstructionMgt.ShowConfirm(DocumentNotPostedClosePageQst,InstructionMgt.QueryPostOnCloseCode));
      exit(true)
    END;

    LOCAL PROCEDURE UpdateOpportunity@108();
    VAR
      Opp@1002 : Record Opportunity;
      OpportunityEntry@1001 : Record "Opportunity Entry";
    BEGIN
      if not ("Opportunity No." <> '') or not ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) then
        exit;

      if not Opp.GET("Opportunity No.") then
        exit;

      if "Document Type" = "Document Type"::Order then begin
        if not CONFIRM(Text040,true) then
          ERROR(Text044);

        OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
        OpportunityEntry.MODIFYALL(Active,false);

        OpportunityEntry.INIT;
        OpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");

        OpportunityEntry.LOCKTABLE;
        OpportunityEntry."Entry No." := GetOpportunityEntryNo;
        OpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        OpportunityEntry."Contact No." := Opp."Contact No.";
        OpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        OpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        OpportunityEntry."Campaign No." := Opp."Campaign No.";
        OpportunityEntry."Action Taken" := OpportunityEntry."Action Taken"::Lost;
        OpportunityEntry.Active := true;
        OpportunityEntry."Completed %" := 100;
        OpportunityEntry."Estimated Value (LCY)" := GetOpportunityEntryEstimatedValue;
        OpportunityEntry."Estimated Close Date" := Opp."Date Closed";
        OpportunityEntry.INSERT(true);
      end;
      Opp.FIND;
      Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
      Opp."Sales Document No." := '';
      Opp.MODIFY;
      "Opportunity No." := '';
    END;

    LOCAL PROCEDURE GetOpportunityEntryNo@106() : Integer;
    VAR
      OpportunityEntry@1000 : Record "Opportunity Entry";
    BEGIN
      if OpportunityEntry.FINDLAST then
        exit(OpportunityEntry."Entry No." + 1);
      exit(1);
    END;

    LOCAL PROCEDURE GetOpportunityEntryEstimatedValue@107() : Decimal;
    VAR
      OpportunityEntry@1000 : Record "Opportunity Entry";
    BEGIN
      OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
      if OpportunityEntry.FINDLAST then
        exit(OpportunityEntry."Estimated Value (LCY)");
    END;

    [External]
    PROCEDURE InitFromSalesHeader@109(SourceSalesHeader@1000 : Record "Sales Header");
    BEGIN
      "Document Date" := SourceSalesHeader."Document Date";
      "Shipment Date" := SourceSalesHeader."Shipment Date";
      "Shortcut Dimension 1 Code" := SourceSalesHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourceSalesHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourceSalesHeader."Dimension Set ID";
      "Location Code" := SourceSalesHeader."Location Code";
      SetShipToAddress(
        SourceSalesHeader."Ship-to Name",SourceSalesHeader."Ship-to Name 2",SourceSalesHeader."Ship-to Address",
        SourceSalesHeader."Ship-to Address 2",SourceSalesHeader."Ship-to City",SourceSalesHeader."Ship-to Post Code",
        SourceSalesHeader."Ship-to County",SourceSalesHeader."Ship-to Country/Region Code");
      "Ship-to Contact" := SourceSalesHeader."Ship-to Contact";
    END;

    LOCAL PROCEDURE InitFromContact@126(ContactNo@1000 : Code[20];CustomerNo@1001 : Code[20];ContactCaption@1002 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      if (ContactNo = '') and (CustomerNo = '') then begin
        if not SalesLine.ISEMPTY then
          ERROR(Text005,ContactCaption);
        INIT;
        SalesSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE InitFromTemplate@118(TemplateCode@1000 : Code[20];TemplateCaption@1001 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      if TemplateCode = '' then begin
        if not SalesLine.ISEMPTY then
          ERROR(Text005,TemplateCaption);
        INIT;
        SalesSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE ValidateTaxAreaCode@36();
    VAR
      TaxArea@1000 : Record "Tax Area";
    BEGIN
      if "Tax Area Code" = '' then
        exit;
      if not TaxArea.GET("Tax Area Code") then begin
        TaxArea.SETFILTER(Code,"Tax Area Code" + '*');
        if not TaxArea.FINDFIRST then
          TaxArea.CreateTaxArea("Tax Area Code","Sell-to City","Sell-to County");
        "Tax Area Code" := TaxArea.Code;
      end;

      if Cust.GET("Sell-to Customer No.") then
        if Cust."Tax Area Code" = '' then begin
          Cust."Tax Area Code" := "Tax Area Code";
          Cust.MODIFY;
        end;
    END;

    [External]
    PROCEDURE SetWorkDescription@120(NewWorkDescription@1000 : Text);
    VAR
      TempBlob@1001 : TEMPORARY Record TempBlob;
    BEGIN
      CLEAR("Work Description");
      if NewWorkDescription = '' then
        exit;
      TempBlob.Blob := "Work Description";
      TempBlob.WriteAsText(NewWorkDescription,TEXTENCODING::Windows);
      "Work Description" := TempBlob.Blob;
      MODIFY;
    END;

    [External]
    PROCEDURE GetWorkDescription@114() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record TempBlob;
      CR@1004 : Text[1];
    BEGIN
      CALCFIELDS("Work Description");
      if not "Work Description".HASVALUE then
        exit('');
      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      exit(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    LOCAL PROCEDURE LookupContact@122(CustomerNo@1000 : Code[20];ContactNo@1003 : Code[20];VAR Contact@1001 : Record Contact);
    VAR
      ContactBusinessRelation@1002 : Record "Contact Business Relation";
    BEGIN
      if ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,CustomerNo) then
        Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      else
        Contact.SETRANGE("Company No.",'');
      if ContactNo <> '' then
        if Contact.GET(ContactNo) then ;
    END;

    PROCEDURE SetAllowSelectNoSeries@100();
    BEGIN
      SelectNoSeriesAllowed := true;
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@124();
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      if not UserSetup.GET(USERID) then
        exit;

      if UserSetup."Salespers./Purch. Code" <> '' then
        VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    PROCEDURE SelltoCustomerNoOnAfterValidate@125(VAR SalesHeader@1000 : Record "Sales Header";VAR xSalesHeader@1001 : Record "Sales Header");
    BEGIN
      if SalesHeader.GETFILTER("Sell-to Customer No.") = xSalesHeader."Sell-to Customer No." then
        if SalesHeader."Sell-to Customer No." <> xSalesHeader."Sell-to Customer No." then
          SalesHeader.SETRANGE("Sell-to Customer No.");
    END;

    PROCEDURE SelectSalesHeaderCustomerTemplate@127() : Code[10];
    VAR
      CustomerTemplate@1000 : Record "Customer Template";
      Contact@1001 : Record Contact;
    BEGIN
      Contact.GET("Sell-to Contact No.");
      if (Contact.Type = Contact.Type::Person) and (Contact."Company No." <> '')then
        Contact.GET(Contact."Company No.");
      if not Contact.ContactToCustBusinessRelationExist then
        if CONFIRM(SelectCustomerTemplateQst,false) then begin
          COMMIT;
          if PAGE.RUNMODAL(0,CustomerTemplate) = ACTION::LookupOK then
            exit(CustomerTemplate.Code);
        end;
    END;

    LOCAL PROCEDURE ModifyBillToCustomerAddress@194();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if IsCreditDocType then
        exit;
      if ("Bill-to Customer No." <> "Sell-to Customer No.") and Customer.GET("Bill-to Customer No.") then
        if HasBillToAddress and HasDifferentBillToAddress(Customer) then
          ShowModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId,
            ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
            UpdateAddressWithBilltoAddressTok,"Bill-to Customer No.","Bill-to Name",FIELDNAME("Bill-to Customer No."));
    END;

    LOCAL PROCEDURE ModifyCustomerAddress@150();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if IsCreditDocType then
        exit;
      if Customer.GET("Sell-to Customer No.") and HasSellToAddress and HasDifferentSellToAddress(Customer) then
        ShowModifyAddressNotification(GetModifyCustomerAddressNotificationId,
          ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
          UpdateAddressWithSellToAddressFunctionTok,"Sell-to Customer No.","Sell-to Customer Name",FIELDNAME("Sell-to Customer No."));
    END;

    LOCAL PROCEDURE ShowModifyAddressNotification@157(NotificationID@1001 : GUID;NotificationLbl@1004 : Text;NotificationMsg@1005 : Text;NotificationFunctionTok@1006 : Text;CustomerNumber@1002 : Code[20];CustomerName@1003 : Text[50];CustomerNumberFieldName@1008 : Text);
    VAR
      MyNotifications@1009 : Record "My Notifications";
      NotificationLifecycleMgt@1007 : Codeunit "Notification Lifecycle Mgt.";
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      if not MyNotifications.IsEnabled(NotificationID) then
        exit;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.MESSAGE := STRSUBSTNO(NotificationMsg,CustomerName);
      ModifyCustomerAddressNotification.ADDACTION(NotificationLbl,CODEUNIT::"Document Notifications",NotificationFunctionTok);
      ModifyCustomerAddressNotification.ADDACTION(DontShowAgainActionLbl,CODEUNIT::"Document Notifications",DontShowAgainFunctionTok);
      ModifyCustomerAddressNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("Document Type"),FORMAT("Document Type"));
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("No."),"No.");
      ModifyCustomerAddressNotification.SETDATA(CustomerNumberFieldName,CustomerNumber);
      NotificationLifecycleMgt.SendNotification(ModifyCustomerAddressNotification,RECORDID);
    END;

    PROCEDURE RecallModifyAddressNotification@148(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1002 : Record "My Notifications";
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      if IsCreditDocType or (not MyNotifications.IsEnabled(NotificationID)) then
        exit;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.RECALL;
    END;

    PROCEDURE GetModifyCustomerAddressNotificationId@193() : GUID;
    BEGIN
      exit('509FD112-31EC-4CDC-AEBF-19B8FEBA526F');
    END;

    PROCEDURE GetModifyBillToCustomerAddressNotificationId@191() : GUID;
    BEGIN
      exit('2096CE78-6A74-48DB-BC9A-CD5C21504FC1');
    END;

    PROCEDURE SetModifyCustomerAddressNotificationDefaultState@89();
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefault(GetModifyCustomerAddressNotificationId,
        ModifySellToCustomerAddressNotificationNameTxt,ModifySellToCustomerAddressNotificationDescriptionTxt,true);
    END;

    PROCEDURE SetModifyBillToCustomerAddressNotificationDefaultState@91();
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefault(GetModifyBillToCustomerAddressNotificationId,
        ModifyBillToCustomerAddressNotificationNameTxt,ModifyBillToCustomerAddressNotificationDescriptionTxt,true);
    END;

    PROCEDURE DontNotifyCurrentUserAgain@141(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      if not MyNotifications.Disable(NotificationID) then
        case NotificationID of
          GetModifyCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifySellToCustomerAddressNotificationNameTxt,
              ModifySellToCustomerAddressNotificationDescriptionTxt,false);
          GetModifyBillToCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifyBillToCustomerAddressNotificationNameTxt,
              ModifyBillToCustomerAddressNotificationDescriptionTxt,false);
        end;
    END;

    LOCAL PROCEDURE HasDifferentSellToAddress@195(Customer@1000 : Record Customer) : Boolean;
    BEGIN
      exit(("Sell-to Address" <> Customer.Address) or
        ("Sell-to Address 2" <> Customer."Address 2") or
        ("Sell-to City" <> Customer.City) or
        ("Sell-to Country/Region Code" <> Customer."Country/Region Code") or
        ("Sell-to County" <> Customer.County) or
        ("Sell-to Post Code" <> Customer."Post Code") or
        ("Sell-to Contact" <> Customer.Contact));
    END;

    LOCAL PROCEDURE HasDifferentBillToAddress@192(Customer@1000 : Record Customer) : Boolean;
    BEGIN
      exit(("Bill-to Address" <> Customer.Address) or
        ("Bill-to Address 2" <> Customer."Address 2") or
        ("Bill-to City" <> Customer.City) or
        ("Bill-to Country/Region Code" <> Customer."Country/Region Code") or
        ("Bill-to County" <> Customer.County) or
        ("Bill-to Post Code" <> Customer."Post Code") or
        ("Bill-to Contact" <> Customer.Contact));
    END;

    [External]
    PROCEDURE ShowInteractionLogEntries@131();
    VAR
      InteractionLogEntry@1000 : Record "Interaction Log Entry";
    BEGIN
      if "Bill-to Contact No." <> '' then
        InteractionLogEntry.SETRANGE("Contact No.","Bill-to Contact No.");
      case "Document Type" of
        "Document Type"::Order:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Ord. Cnfrmn.");
        "Document Type"::Quote:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Qte.");
      end;

      InteractionLogEntry.SETRANGE("Document No.","No.");
      PAGE.RUN(PAGE::"Interaction Log Entries",InteractionLogEntry);
    END;

    [External]
    PROCEDURE GetBillToNo@132() : Code[20];
    BEGIN
      if ("Document Type" = "Document Type"::Quote) and
         ("Bill-to Customer No." = '') and ("Bill-to Contact No." <> '') and
         ("Bill-to Customer Template Code" <> '')
      then
        exit("Bill-to Contact No.");
      exit("Bill-to Customer No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitRecord@21(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitNoSeries@35(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestNoSeries@136(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateShipToAddress@137(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateSalesLineByChangedFieldName@139(SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1001 : Record "Sales Line";ChangedFieldName@1002 : Text[100]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR SalesHeader@1000 : Record "Sales Header";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesQuoteAccepted@143(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSendSalesHeader@144(VAR SalesHeader@1000 : Record "Sales Header";ShowDialog@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

