OBJECT Page 2801 Native - Customer Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=invoicingCustomers];
    SourceTable=Customer;
    DelayedInsert=true;
    PageType=List;
    OnOpenPage=BEGIN
                 TranslateContactIdFilterToCustomerNoFilter;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     Customer@1002 : Record Customer;
                     MiniCustomerTemplate@1003 : Record "Mini Customer Template";
                     GraphMgtCustomer@1000 : Codeunit "Graph Mgt - Customer";
                     GraphMgtGeneralTools@1004 : Codeunit "Graph Mgt - General Tools";
                     RecRef@1005 : RecordRef;
                   BEGIN
                     if not CustomerCreatedFromGraph then begin
                       Customer.SETRANGE("No.","No.");
                       if not Customer.ISEMPTY then
                         INSERT;

                       if not MiniCustomerTemplate.NewCustomerFromTemplate(Rec) then
                         INSERT(true);
                     end;

                     GraphMgtCustomer.ProcessComplexTypes(Rec,PaymentTermsJSON,ShipmentMethodJSON,PaymentMethodJSON,PostalAddressJSON);

                     RecRef.GETTABLE(Rec);
                     GraphMgtGeneralTools.ProcessNewRecordFromAPI(RecRef,TempFieldSet,CURRENTDATETIME);
                     RecRef.SETTABLE(Rec);

                     MODIFY(true);

                     SetCalculatedFields;
                     exit(false);
                   END;

    OnModifyRecord=VAR
                     Customer@1001 : Record Customer;
                     GraphMgtGeneralTools@1000 : Codeunit "Graph Mgt - General Tools";
                     GraphMgtCustomer@1002 : Codeunit "Graph Mgt - Customer";
                   BEGIN
                     if not CustomerCreatedFromGraph and (xRec.Id <> Id) then
                       GraphMgtGeneralTools.ErrorIdImmutable;

                     Customer.SETRANGE(Id,Id);
                     Customer.FINDFIRST;

                     GraphMgtCustomer.ProcessComplexTypes(Rec,PaymentTermsJSON,ShipmentMethodJSON,PaymentMethodJSON,PostalAddressJSON);

                     if "No." = Customer."No." then
                       MODIFY(true)
                     else begin
                       Customer.TRANSFERFIELDS(Rec,false);
                       Customer.RENAME("No.");
                       TRANSFERFIELDS(Customer);
                     end;

                     SetCalculatedFields;
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 23  ;0   ;Container ;
                Name=Container23;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 21  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                ImplicitType=GUID }

    { 20  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=graphContactId;
                CaptionML=ENU=graphContactId;
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact Graph Id");
                           END;

                ImplicitType=Text250 }

    { 27  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId];
                ToolTipML=ENU=Specifies the contact Id from exchange.;
                ApplicationArea=#All;
                SourceExpr="Contact ID";
                Editable=FALSE;
                OnValidate=BEGIN
                             FindOrCreateCustomer("Contact ID");
                           END;

                ImplicitType=GUID }

    { 19  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName];
                ApplicationArea=#All;
                SourceExpr=Name;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Name));
                           END;

                ImplicitType=Text50 }

    { 18  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=type];
                ApplicationArea=#All;
                SourceExpr="Contact Type";
                ImplicitType=Option }

    { 17  ;2   ;Field     ;
                Name=address;
                CaptionML=[@@@={Locked};
                           ENU=address];
                ToolTipML=ENU=Specifies the address for the customer.;
                ApplicationArea=#All;
                SourceExpr=PostalAddressJSON;
                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 16  ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Phone No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Phone No."));
                           END;

                ImplicitType=Text30 }

    { 15  ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email];
                ApplicationArea=#All;
                SourceExpr="E-Mail";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("E-Mail"));
                           END;

                ImplicitType=Text80 }

    { 14  ;2   ;Field     ;
                Name=website;
                CaptionML=[@@@={Locked};
                           ENU=Website];
                ApplicationArea=#All;
                SourceExpr="Home Page";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Home Page"));
                           END;

                ImplicitType=Text80 }

    { 13  ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=[@@@={Locked};
                           ENU=TaxLiable];
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                OnValidate=BEGIN
                             if IsUsingVAT then
                               ERROR(CannotUseWithVATErr);

                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;

                ImplicitType=Boolean }

    { 12  ;2   ;Field     ;
                Name=taxAreaId;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaId];
                ApplicationArea=#All;
                SourceExpr="Tax Area ID";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Tax Area ID"));
                             if IsUsingVAT then
                               RegisterFieldSet(FIELDNO("Tax Area Code"))
                             else
                               RegisterFieldSet(FIELDNO("VAT Bus. Posting Group"));
                           END;

                ImplicitType=GUID }

    { 11  ;2   ;Field     ;
                Name=taxAreaDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaDisplayName];
                ToolTipML=ENU=Specifies the display name of the tax area.;
                ApplicationArea=#All;
                SourceExpr=TaxAreaDisplayName;
                Editable=FALSE;
                ImplicitType=Text }

    { 26  ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=[@@@={Locked};
                           ENU=taxRegistrationNumber];
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;

                ImplicitType=Text20 }

    { 25  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             if "Payment Terms Id" = BlankGUID then
                               "Payment Terms Code" := ''
                             else begin
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               if not PaymentTerms.FINDFIRST then
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=GUID }

    { 24  ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTerms];
                ToolTipML=ENU=Specifies the Payment Terms for the Customer.;
                ApplicationArea=#All;
                SourceExpr=PaymentTermsJSON;
                OnValidate=BEGIN
                             GraphMgtCustomer.UpdatePaymentTerms(PaymentTermsJSON,Rec);

                             if PaymentTerms.Code <> '' then begin
                               if PaymentTerms.Code <> "Payment Terms Code" then
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Terms Code" = '' then
                               "Payment Terms Id" := BlankGUID
                             else begin
                               if not PaymentTerms.GET("Payment Terms Code") then
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ODataEDMType=PAYMENTTERMSTYPE;
                ImplicitType=Text }

    { 9   ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             if "Shipment Method Id" = BlankGUID then
                               "Shipment Method Code" := ''
                             else begin
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               if not ShipmentMethod.FINDFIRST then
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;

                ImplicitType=GUID }

    { 8   ;2   ;Field     ;
                Name=shipmentMethod;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethod];
                ToolTipML=ENU=Specifies the Shipment Method for the Customer.;
                ApplicationArea=#All;
                SourceExpr=ShipmentMethodJSON;
                OnValidate=BEGIN
                             GraphMgtCustomer.UpdateShipmentMethod(ShipmentMethodJSON,Rec);

                             if ShipmentMethod.Code <> '' then begin
                               if ShipmentMethod.Code <> "Shipment Method Code" then
                                 ERROR(ShipmentMethodValuesDontMatchErr);
                               exit;
                             end;

                             if "Shipment Method Code" = '' then
                               "Shipment Method Id" := BlankGUID
                             else begin
                               if not ShipmentMethod.GET("Shipment Method Code") then
                                 ERROR(ShipmentMethodCodeDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Id" := ShipmentMethod.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;

                ODataEDMType=SHIPMENTMETHOD;
                ImplicitType=Text }

    { 7   ;2   ;Field     ;
                Name=paymentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethodId];
                ApplicationArea=#All;
                SourceExpr="Payment Method Id";
                OnValidate=BEGIN
                             if "Payment Method Id" = BlankGUID then
                               "Payment Method Code" := ''
                             else begin
                               PaymentMethod.SETRANGE(Id,"Payment Method Id");
                               if not PaymentMethod.FINDFIRST then
                                 ERROR(PaymentMethodIdDoesNotMatchAPaymentMethodErr);

                               "Payment Method Code" := PaymentMethod.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;

                ImplicitType=GUID }

    { 6   ;2   ;Field     ;
                Name=paymentMethod;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethod];
                ToolTipML=ENU=Specifies the Payment Method for the Vendor.;
                ApplicationArea=#All;
                SourceExpr=PaymentMethodJSON;
                OnValidate=BEGIN
                             GraphMgtCustomer.UpdatePaymentMethod(PaymentMethodJSON,Rec);

                             if PaymentMethod.Code <> '' then begin
                               if PaymentMethod.Code <> "Payment Method Code" then
                                 ERROR(PaymentMethodValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Method Code" = '' then
                               "Payment Method Id" := BlankGUID
                             else begin
                               if not PaymentMethod.GET("Payment Method Code") then
                                 ERROR(PaymentMethodCodeDoesNotMatchAPaymentMethodErr);

                               "Payment Method Id" := PaymentMethod.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;

                ODataEDMType=PAYMENTMETHOD;
                ImplicitType=Text }

    { 5   ;2   ;Field     ;
                Name=balance;
                CaptionML=[@@@={Locked};
                           ENU=Balance];
                ToolTipML=ENU=Specifies the customer's balance.;
                ApplicationArea=#All;
                SourceExpr=BalanceVar;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 2   ;2   ;Field     ;
                Name=overdueAmount;
                CaptionML=[@@@={Locked};
                           ENU=overdueAmount];
                ToolTipML=ENU=Specifies the amount that is overdue.;
                ApplicationArea=#All;
                SourceExpr=OverdueAmount;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 3   ;2   ;Field     ;
                Name=totalSalesExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalSalesExcludingTax];
                ToolTipML=ENU=Specifies the total sales excluding tax.;
                ApplicationArea=#All;
                SourceExpr=SalesVar;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                ImplicitType=DateTime }

    { 4   ;2   ;Part      ;
                Name=Coupons;
                CaptionML=[@@@={Locked};
                           ENU=Coupons];
                ApplicationArea=#All;
                SubPageLink="Customer Id"=FIELD(Id);
                PagePartID="Native - Coupons";
                PartType=Page }

  }
  CODE
  {
    VAR
      TempFieldSet@1003 : TEMPORARY Record Field;
      PaymentTerms@1009 : Record "Payment Terms";
      ShipmentMethod@1008 : Record "Shipment Method";
      PaymentMethod@1007 : Record "Payment Method";
      GraphMgtCustomer@1019 : Codeunit "Graph Mgt - Customer";
      PaymentMethodJSON@1002 : Text;
      PaymentTermsJSON@1000 : Text;
      PostalAddressJSON@1004 : Text;
      ShipmentMethodJSON@1001 : Text;
      TaxAreaDisplayName@1026 : Text;
      OverdueAmount@1005 : Decimal;
      BalanceVar@1020 : Decimal;
      SalesVar@1021 : Decimal;
      BlankGUID@1006 : GUID;
      PaymentTermsValuesDontMatchErr@1018 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1017 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1016 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.';
      ShipmentMethodValuesDontMatchErr@1015 : TextConst '@@@={Locked};ENU=The shipment method values do not match to a specific Shipment Method.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1014 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.';
      ShipmentMethodCodeDoesNotMatchAShipmentMethodErr@1013 : TextConst '@@@={Locked};ENU=The "shipmentMethodCode" does not match to a Shipment Method.';
      PaymentMethodValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The payment method values do not match to a specific Payment Method.';
      PaymentMethodIdDoesNotMatchAPaymentMethodErr@1011 : TextConst '@@@={Locked};ENU=The "paymentMethodId" does not match to a Payment Method.';
      PaymentMethodCodeDoesNotMatchAPaymentMethodErr@1010 : TextConst '@@@={Locked};ENU=The "paymentMethodCode" does not match to a Payment Method.';
      CannotUseWithVATErr@1022 : TextConst 'ENU=This field cannot be used with VAT.';
      CannotFindContactErr@1023 : TextConst 'ENU=Cannot find the contact for the given ID.';
      CustomerCreatedFromGraph@1024 : Boolean;
      CannotFindCustomerErr@1025 : TextConst 'ENU=Cannot find the customer for the given ID.';

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      TaxAreaBuffer@1001 : Record "Tax Area Buffer";
      GraphMgtCustomer@1000 : Codeunit "Graph Mgt - Customer";
    BEGIN
      PaymentTermsJSON := GraphMgtCustomer.PaymentTermsToJSON("Payment Terms Code");
      ShipmentMethodJSON := GraphMgtCustomer.ShipmentMethodToJSON("Shipment Method Code");
      PaymentMethodJSON := GraphMgtCustomer.PaymentMethodToJSON("Payment Method Code");
      PostalAddressJSON := GraphMgtCustomer.PostalAddressToJSON(Rec);

      SETRANGE("Date Filter",0D,WORKDATE - 1);
      CALCFIELDS("Balance Due (LCY)");
      OverdueAmount := "Balance Due (LCY)";

      SETRANGE("Date Filter",0D,WORKDATE);
      CALCFIELDS("Sales (LCY)","Balance (LCY)");
      BalanceVar := "Balance (LCY)";
      SalesVar := "Sales (LCY)";

      SetContactId;
      TaxAreaDisplayName := TaxAreaBuffer.GetTaxAreaDisplayName("Tax Area ID");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(PaymentTermsJSON);
      CLEAR(TaxAreaDisplayName);
      CLEAR(ShipmentMethodJSON);
      CLEAR(PaymentMethodJSON);
      CLEAR(PostalAddressJSON);
      CLEAR(OverdueAmount);
      CLEAR("Balance (LCY)");
      CLEAR("Sales (LCY)");
      CLEAR("Contact ID");
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      if TempFieldSet.GET(DATABASE::Customer,FieldNo) then
        exit;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Customer;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(true);
    END;

    LOCAL PROCEDURE SetContactId@1() : Boolean;
    VAR
      NewContact@1003 : Record Contact;
      GraphIntegrationRecord@1004 : Record "Graph Integration Record";
      IntegrationRecord@1005 : Record "Integration Record";
      GraphIntContact@1000 : Codeunit "Graph Int. - Contact";
      GraphContactId@1001 : Text[250];
    BEGIN
      if not GraphIntContact.FindGraphContactIdFromCustomer(GraphContactId,Rec,NewContact) then
        exit(false);

      IntegrationRecord.SETRANGE("Record ID",NewContact.RECORDID);
      if not IntegrationRecord.FINDFIRST then
        exit;

      if not GraphIntegrationRecord.GET(GraphContactId,IntegrationRecord."Integration ID") then
        exit(false);

      "Contact Graph Id" := GraphIntegrationRecord."Graph ID";
      exit(EVALUATE("Contact ID",GraphIntegrationRecord.XRMId));
    END;

    LOCAL PROCEDURE TranslateContactIdFilterToCustomerNoFilter@13();
    VAR
      GraphIntegrationRecord@1001 : Record "Graph Integration Record";
      NewContact@1002 : Record Contact;
      IntegrationRecord@1003 : Record "Integration Record";
      ContactBusinessRelation@1005 : Record "Contact Business Relation";
      MarketingSetup@1006 : Record "Marketing Setup";
      ContactIDFilter@1000 : Text;
    BEGIN
      ContactIDFilter := GETFILTER("Contact ID");
      if ContactIDFilter <> '' then begin
        SETFILTER("Contact ID",'');
        GraphIntegrationRecord.SETFILTER(XRMId,ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      end else begin
        ContactIDFilter := GETFILTER("Contact Graph Id");
        if ContactIDFilter = '' then
          exit;

        SETFILTER("Contact Graph Id",'');
        GraphIntegrationRecord.SETFILTER("Graph ID",ContactIDFilter);
        GraphIntegrationRecord.FINDFIRST;
      end;

      if not IntegrationRecord.GET(GraphIntegrationRecord."Integration ID") then
        exit;

      if not NewContact.GET(IntegrationRecord."Record ID") then
        exit;

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.",NewContact."No.");
      if MarketingSetup.GET then
        ContactBusinessRelation.SETRANGE("Business Relation Code",MarketingSetup."Bus. Rel. Code for Customers");

      if ContactBusinessRelation.FINDFIRST then
        SETRANGE("No.",ContactBusinessRelation."No.")
      else
        ERROR(CannotFindCustomerErr);
    END;

    LOCAL PROCEDURE IsUsingVAT@3() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record "General Ledger Setup";
    BEGIN
      exit(GeneralLedgerSetup.UseVat);
    END;

    LOCAL PROCEDURE FindOrCreateCustomer@39(GraphContactID@1003 : Text[250]);
    VAR
      Customer@1001 : Record Customer;
      NewContact@1002 : Record Contact;
      GraphIntContact@1000 : Codeunit "Graph Int. - Contact";
    BEGIN
      if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe(GraphContactID,Customer,NewContact) then
        ERROR(CannotFindContactErr);

      TRANSFERFIELDS(Customer,true);
      CustomerCreatedFromGraph := true;
    END;

    BEGIN
    END.
  }
}

