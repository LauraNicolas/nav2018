OBJECT Codeunit 416 Release Service Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Service Header";
    OnRun=BEGIN
            ServiceHeader.COPY(Rec);
            Code;
            Rec := ServiceHeader;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@=Example: There is nothing to release for Order 12345.;ENU=There is nothing to release for %1 %2.';
      ServiceHeader@1001 : Record "Service Header";
      InvtSetup@1006 : Record "Inventory Setup";
      WhseServiceRelease@1007 : Codeunit "Whse.-Service Release";

    LOCAL PROCEDURE Code@10();
    VAR
      ServLine@1002 : Record "Service Line";
      TempVATAmountLine0@1001 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLine1@1000 : TEMPORARY Record "VAT Amount Line";
    BEGIN
      with ServiceHeader do begin
        if "Release Status" = "Release Status"::"Released to Ship" then
          exit;

        OnBeforeReleaseServiceDoc(ServiceHeader);

        if "Document Type" = "Document Type"::Quote then
          TESTFIELD("Bill-to Customer No.");
        ServLine.SETRANGE("Document Type","Document Type");
        ServLine.SETRANGE("Document No.","No.");
        ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
        ServLine.SETFILTER(Quantity,'<>0');
        if ServLine.ISEMPTY then
          ERROR(Text001,"Document Type","No.");
        InvtSetup.GET;
        if InvtSetup."Location Mandatory" then begin
          ServLine.SETCURRENTKEY(Type);
          ServLine.SETRANGE(Type,ServLine.Type::Item);
          if ServLine.FINDSET then
            repeat
              ServLine.TESTFIELD("Location Code");
            until ServLine.NEXT = 0;
          ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
        end;
        ServLine.RESET;
        VALIDATE("Release Status","Release Status"::"Released to Ship");
        ServLine.SetServHeader(ServiceHeader);
        ServLine.CalcVATAmountLines(0,ServiceHeader,ServLine,TempVATAmountLine0,ServLine.IsShipment);
        ServLine.CalcVATAmountLines(1,ServiceHeader,ServLine,TempVATAmountLine1,ServLine.IsShipment);
        ServLine.UpdateVATOnLines(0,ServiceHeader,ServLine,TempVATAmountLine0);
        ServLine.UpdateVATOnLines(1,ServiceHeader,ServLine,TempVATAmountLine1);
        MODIFY(true);

        if "Document Type" = "Document Type"::Order then
          WhseServiceRelease.Release(ServiceHeader);

        OnAfterReleaseServiceDoc(ServiceHeader);
      end;
    END;

    [External]
    PROCEDURE Reopen@3(VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      with ServHeader do begin
        if "Release Status" = "Release Status"::Open then
          exit;

        OnBeforeReopenServiceDoc(ServHeader);
        VALIDATE("Release Status","Release Status"::Open);
        MODIFY(true);
        if "Document Type" in ["Document Type"::Order] then
          WhseServiceRelease.Reopen(ServHeader);
        OnAfterReopenServiceDoc(ServHeader);
      end;
    END;

    [External]
    PROCEDURE PerformManualRelease@1(VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Release Service Document",ServHeader);
    END;

    [External]
    PROCEDURE PerformManualReopen@6(VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      Reopen(ServHeader);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeReleaseServiceDoc@5(VAR ServiceHeader@1000 : Record "Service Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterReleaseServiceDoc@4(VAR ServiceHeader@1000 : Record "Service Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeReopenServiceDoc@2(VAR ServiceHeader@1000 : Record "Service Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterReopenServiceDoc@7(VAR ServiceHeader@1000 : Record "Service Header");
    BEGIN
    END;

    BEGIN
    END.
  }
}

