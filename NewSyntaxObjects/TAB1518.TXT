OBJECT Table 1518 My Notifications
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=My Notifications;
  }
  FIELDS
  {
    { 1   ;   ;User Id             ;Code50        ;CaptionML=ENU=User Id;
                                                   NotBlank=true;
                                                   Editable=false }
    { 2   ;   ;Notification Id     ;GUID          ;CaptionML=ENU=Notification Id;
                                                   NotBlank=true;
                                                   Editable=false }
    { 3   ;   ;Apply to Table Id   ;Integer       ;CaptionML=ENU=Apply to Table Id;
                                                   Editable=false }
    { 4   ;   ;Enabled             ;Boolean       ;OnValidate=BEGIN
                                                                if Enabled <> xRec.Enabled then
                                                                  OnStateChanged("Notification Id",Enabled);
                                                              END;

                                                   CaptionML=ENU=Enabled }
    { 5   ;   ;Apply to Table Filter;BLOB         ;CaptionML=ENU=Filter }
    { 6   ;   ;Name                ;Text128       ;CaptionML=ENU=Notification;
                                                   NotBlank=true;
                                                   Editable=false }
    { 7   ;   ;Description         ;BLOB          ;CaptionML=ENU=Description }
  }
  KEYS
  {
    {    ;"User Id","Notification Id"             ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ViewFilterDetailsTxt@1005 : TextConst 'ENU=(View filter details)';
      DefineFiltersTxt@1006 : TextConst 'ENU=Define filters...';

    [External]
    PROCEDURE Disable@4(NotificationId@1000 : GUID) : Boolean;
    BEGIN
      if GET(USERID,NotificationId) then begin
        VALIDATE(Enabled,false);
        MODIFY;
        exit(true)
      end;
      exit(false);
    END;

    LOCAL PROCEDURE IsFilterEnabled@5() : Boolean;
    BEGIN
      exit(("Apply to Table Id" <> 0) and Enabled);
    END;

    LOCAL PROCEDURE InitRecord@9(NotificationId@1000 : GUID;NotificationName@1002 : Text[128];DescriptionText@1001 : Text) Result : Boolean;
    VAR
      OutStream@1003 : OutStream;
    BEGIN
      if not GET(USERID,NotificationId) then begin
        INIT;
        "User Id" := USERID;
        "Notification Id" := NotificationId;
        Enabled := true;
        Name := NotificationName;
        Description.CREATEOUTSTREAM(OutStream);
        OutStream.WRITE(DescriptionText);
        Result := true;
      end;
    END;

    [External]
    PROCEDURE InsertDefault@12(NotificationId@1000 : GUID;NotificationName@1002 : Text[128];DescriptionText@1003 : Text;DefaultState@1001 : Boolean);
    BEGIN
      if InitRecord(NotificationId,NotificationName,DescriptionText) then begin
        Enabled := DefaultState;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertDefaultWithTableNum@13(NotificationId@1000 : GUID;NotificationName@1003 : Text[128];DescriptionText@1002 : Text;TableNum@1001 : Integer);
    BEGIN
      if InitRecord(NotificationId,NotificationName,DescriptionText) then begin
        "Apply to Table Id" := TableNum;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE GetDescription@2() Ret : Text;
    VAR
      InStream@1000 : InStream;
    BEGIN
      CALCFIELDS(Description);
      if not Description.HASVALUE then
        exit;
      Description.CREATEINSTREAM(InStream);
      InStream.READ(Ret);
    END;

    LOCAL PROCEDURE GetFilteredRecord@10(VAR RecordRef@1003 : RecordRef;Filters@1001 : Text);
    VAR
      TempBlob@1000 : Record TempBlob;
      RequestPageParametersHelper@1002 : Codeunit "Request Page Parameters Helper";
      FiltersOutStream@1004 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(FiltersOutStream);
      FiltersOutStream.WRITE(Filters);

      RecordRef.OPEN("Apply to Table Id");
      RequestPageParametersHelper.ConvertParametersToFilters(RecordRef,TempBlob);
    END;

    [Internal]
    PROCEDURE GetFiltersAsDisplayText@1() : Text;
    VAR
      RecordRef@1002 : RecordRef;
    BEGIN
      if not IsFilterEnabled then
        exit;

      GetFilteredRecord(RecordRef,GetFiltersAsText);

      if RecordRef.GETFILTERS <> '' then
        exit(RecordRef.GETFILTERS);

      exit(ViewFilterDetailsTxt);
    END;

    LOCAL PROCEDURE GetFiltersAsText@8() Filters : Text;
    VAR
      FiltersInStream@1000 : InStream;
    BEGIN
      if not IsFilterEnabled then
        exit;

      CALCFIELDS("Apply to Table Filter");
      if not "Apply to Table Filter".HASVALUE then
        exit;
      "Apply to Table Filter".CREATEINSTREAM(FiltersInStream);
      FiltersInStream.READ(Filters);
    END;

    [Internal]
    PROCEDURE OpenFilterSettings@17() Changed : Boolean;
    VAR
      DummyMyNotifications@1003 : Record "My Notifications";
      RecordRef@1002 : RecordRef;
      FiltersOutStream@1000 : OutStream;
      NewFilters@1001 : Text;
    BEGIN
      if not IsFilterEnabled then
        exit;

      if RunDynamicRequestPage(NewFilters,
           GetFiltersAsText,
           "Apply to Table Id")
      then begin
        GetFilteredRecord(RecordRef,NewFilters);
        if RecordRef.GETFILTERS = '' then
          "Apply to Table Filter" := DummyMyNotifications."Apply to Table Filter"
        else begin
          "Apply to Table Filter".CREATEOUTSTREAM(FiltersOutStream);
          FiltersOutStream.WRITE(NewFilters);
        end;
        MODIFY;
        Changed := true;
      end;
    END;

    LOCAL PROCEDURE RunDynamicRequestPage@20(VAR ReturnFilters@1004 : Text;Filters@1005 : Text;TableNum@1001 : Integer) FiltersSet : Boolean;
    VAR
      RequestPageParametersHelper@1002 : Codeunit "Request Page Parameters Helper";
      FilterPageBuilder@1003 : FilterPageBuilder;
    BEGIN
      if not RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,DefineFiltersTxt,TableNum) then
        exit(false);

      if Filters <> '' then
        if not RequestPageParametersHelper.SetViewOnDynamicRequestPage(
             FilterPageBuilder,Filters,DefineFiltersTxt,TableNum)
        then
          exit(false);

      FilterPageBuilder.PAGECAPTION := DefineFiltersTxt;
      if not FilterPageBuilder.RUNMODAL then
        exit(false);

      ReturnFilters :=
        RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,DefineFiltersTxt,TableNum);

      FiltersSet := true;
    END;

    [External]
    PROCEDURE IsEnabledForRecord@11(NotificationId@1008 : GUID;Record@1000 : Variant) : Boolean;
    VAR
      RecordRef@1007 : RecordRef;
      RecordRefPassed@1006 : RecordRef;
      Filters@1001 : Text;
    BEGIN
      if not IsEnabled(NotificationId) then
        exit(false);

      if not Record.ISRECORD then
        exit(true);

      RecordRefPassed.GETTABLE(Record);
      RecordRefPassed.FILTERGROUP(2);
      RecordRefPassed.SETRECFILTER;
      RecordRefPassed.FILTERGROUP(0);

      Filters := GetFiltersAsText;
      if Filters = '' then
        exit(true);

      GetFilteredRecord(RecordRef,Filters);
      RecordRefPassed.SETVIEW(RecordRef.GETVIEW);
      exit(not RecordRefPassed.ISEMPTY);
    END;

    [External]
    PROCEDURE IsEnabled@14(NotificationId@1000 : GUID) : Boolean;
    BEGIN
      if not GET(USERID,NotificationId) then
        exit(true);

      exit(Enabled);
    END;

    [Integration]
    [External]
    PROCEDURE OnStateChanged@3(NotificationId@1001 : GUID;NewEnabledState@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

