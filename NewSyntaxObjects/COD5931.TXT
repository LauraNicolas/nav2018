OBJECT Codeunit 5931 Resource Skill Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=Do you want to update the skill code on the related items and service items?';
      Text001@1000 : TextConst 'ENU=Do you want to update the skill code on the related service items?';
      Text002@1002 : TextConst 'ENU=Do you want to assign the skill codes of %1 %2 to %3 %4?';
      Text003@1003 : TextConst 'ENU=Do you want to delete skill codes on the related items and service items?';
      Text004@1004 : TextConst 'ENU=Do you want to delete skill codes on the related service items?';
      Text005@1005 : TextConst 'ENU=You have changed the skill code on the item.';
      Text006@1006 : TextConst 'ENU=How do you want to update the resource skill codes on the related service items?';
      Text007@1007 : TextConst 'ENU=Change the skill codes to the selected value.';
      Text008@1008 : TextConst 'ENU=Delete the skill codes or update their relation.';
      Text010@1010 : TextConst 'ENU=You have changed the skill code on the service item group.';
      Text011@1011 : TextConst 'ENU=How do you want to update the resource skill codes on the related items and service items?';
      Text012@1012 : TextConst 'ENU=Change the skill codes to the selected value.';
      Text013@1013 : TextConst 'ENU=Delete the skill codes or update their relation.';
      Text015@1015 : TextConst 'ENU=You have deleted the skill code(s) on the item.';
      Text016@1016 : TextConst 'ENU=How do you want to update the resource skill codes on the related service items?';
      Text017@1017 : TextConst 'ENU=Delete all the related skill codes.';
      Text018@1018 : TextConst 'ENU=Leave all the related skill codes.';
      Text019@1019 : TextConst 'ENU=You have deleted the skill code(s) on the service item group.';
      Text020@1020 : TextConst 'ENU=How do you want to update the resource skill codes on the related items and service items?';
      Text021@1021 : TextConst 'ENU=Delete all the related skill codes.';
      Text022@1022 : TextConst 'ENU=Leave all the related skill codes.';
      Text023@1023 : TextConst 'ENU=How do you want to update the resource skill codes assigned from Item and Service Item Group?';
      Text024@1024 : TextConst 'ENU=Delete old skill codes and assign new.';
      Text025@1025 : TextConst 'ENU=Leave old skill codes and do not assign new.';
      Text026@1026 : TextConst 'ENU=You have changed the service item group assigned to this service item/item.';
      Text027@1027 : TextConst 'ENU=You have changed Item No. on this service item.';
      Text028@1033 : TextConst 'ENU=Do you want to assign the skill codes of the item and its service item group to service item?';
      Text029@1031 : TextConst 'ENU=How do you want to update the resource skill codes assigned from Service Item Group?';
      SkipValidationDialog@1029 : Boolean;
      Update2@1028 : Boolean;
      AssignCodesWithUpdate@1030 : Boolean;
      Text030@1009 : TextConst '@@@=Delete all the related skill codes. Leave all the related skill codes.;ENU=%1,%2';
      Text031@1014 : TextConst '@@@="You have deleted the skill code(s) on the item.\\How do you want to update the resource skill codes on the related service items?  ";ENU=%1\\%2';

    [External]
    PROCEDURE AddResSkill@3(VAR ResSkill@1000 : Record "Resource Skill");
    BEGIN
      with ResSkill do
        if (Type = Type::"Service Item Group") or
           (Type = Type::Item)
        then
          if IsRelatedObjectsExist(ResSkill) then begin
            if not SkipValidationDialog then
              case Type of
                Type::"Service Item Group":
                  if not CONFIRM(Text000,true) then
                    exit;
                Type::Item:
                  if not CONFIRM(Text001,true) then
                    exit;
              end;
            AddResSkillWithUpdate(ResSkill);
          end;
    END;

    LOCAL PROCEDURE AddResSkillWithUpdate@6(VAR ResSkill@1001 : Record "Resource Skill");
    BEGIN
      case ResSkill.Type of
        ResSkill.Type::"Service Item Group":
          begin
            AddResSkillToServItems(ResSkill);
            AddResSkillToItems(ResSkill);
          end;
        ResSkill.Type::Item:
          AddResSkillToServItems(ResSkill)
      end;
    END;

    LOCAL PROCEDURE AddResSkillToServItems@16(VAR ResSkill@1000 : Record "Resource Skill");
    VAR
      ServiceItem@1001 : Record "Service Item";
    BEGIN
      with ResSkill do begin
        case Type of
          Type::"Service Item Group":
            ServiceItem.SETRANGE("Service Item Group Code","No.");
          Type::Item:
            ServiceItem.SETRANGE("Item No.","No.");
        end;
        if ServiceItem.FIND('-') then
          repeat
            UnifyResSkillCode(Type::"Service Item",ServiceItem."No.",ResSkill);
          until ServiceItem.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AddResSkillToItems@9(VAR ResSkill@1001 : Record "Resource Skill");
    VAR
      Item@1003 : Record Item;
      AddedResSkill@1000 : Record "Resource Skill";
    BEGIN
      with Item do begin
        SETRANGE("Service Item Group",ResSkill."No.");
        if FIND('-') then
          repeat
            if UnifyResSkillCode(ResSkill.Type::Item,"No.",ResSkill) then begin
              if AddedResSkill.GET(AddedResSkill.Type::Item,"No.",ResSkill."Skill Code") then
                AddResSkillToServItems(AddedResSkill);
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UnifyResSkillCode@18(ObjectType@1000 : Integer;ObjectNo@1001 : Code[20];VAR UnifiedResSkill@1004 : Record "Resource Skill") : Boolean;
    VAR
      NewResSkill@1003 : Record "Resource Skill";
      ExistingResSkill@1006 : Record "Resource Skill";
    BEGIN
      with NewResSkill do begin
        if not ExistingResSkill.GET(ObjectType,ObjectNo,UnifiedResSkill."Skill Code") then begin
          INIT;
          Type := ObjectType;
          "No." := ObjectNo;
          "Skill Code" := UnifiedResSkill."Skill Code";

          if UnifiedResSkill.Type = Type::Item then
            "Assigned From" := "Assigned From"::Item;
          if UnifiedResSkill.Type = Type::"Service Item Group" then
            "Assigned From" := "Assigned From"::"Service Item Group";

          if UnifiedResSkill."Source Type" = "Source Type"::" " then begin
            "Source Code" := UnifiedResSkill."No.";
            if UnifiedResSkill.Type = UnifiedResSkill.Type::Item then
              "Source Type" := "Source Type"::Item;
            if UnifiedResSkill.Type = Type::"Service Item Group" then
              "Source Type" := "Source Type"::"Service Item Group";
          end else begin
            "Source Code" := UnifiedResSkill."Source Code";
            "Source Type" := UnifiedResSkill."Source Type";
          end;

          INSERT;
          exit(true);
        end;
        exit;
      end;
    END;

    [External]
    PROCEDURE RemoveResSkill@5(VAR ResSkill@1000 : Record "Resource Skill") : Boolean;
    VAR
      SelectedOption@1002 : Integer;
      RelatedResSkillsExist@1005 : Boolean;
      Update@1001 : Boolean;
    BEGIN
      RelatedResSkillsExist := IsRelatedResSkillsExist(ResSkill);

      if not SkipValidationDialog then begin
        if RelatedResSkillsExist then begin
          case ResSkill.Type of
            ResSkill.Type::Item:
              SelectedOption := RunOptionDialog(Text015,Text016,Text017,Text018);
            ResSkill.Type::"Service Item Group":
              SelectedOption := RunOptionDialog(Text019,Text020,Text021,Text022);
          end;

          case SelectedOption of
            0:
              Update := true;
            1:
              Update := false;
            2:
              begin
                SkipValidationDialog := false;
                Update2 := false;
                ERROR('');
              end;
          end;
        end;
      end else
        Update := Update2;

      if RelatedResSkillsExist then begin
        case ResSkill.Type of
          ResSkill.Type::Item:
            RemoveItemResSkill(ResSkill,Update,false);
          ResSkill.Type::"Service Item Group":
            RemoveServItemGroupResSkill(ResSkill,Update);
        end;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE PrepareRemoveMultipleResSkills@34(VAR ResSkill@1000 : Record "Resource Skill");
    VAR
      SelectedOption@1002 : Integer;
    BEGIN
      if not SkipValidationDialog then
        if ResSkill.FIND('-') then
          repeat
            if IsRelatedResSkillsExist(ResSkill) then begin
              SkipValidationDialog := true;
              case ResSkill.Type of
                ResSkill.Type::Item:
                  SelectedOption := RunOptionDialog(Text015,Text016,Text017,Text018);
                ResSkill.Type::"Service Item Group":
                  SelectedOption := RunOptionDialog(Text019,Text020,Text021,Text022);
              end;

              case SelectedOption of
                0:
                  Update2 := true;
                1:
                  Update2 := false;
                2:
                  begin
                    SkipValidationDialog := false;
                    Update2 := false;
                    ERROR('');
                  end;
              end;
              exit
            end;
          until ResSkill.NEXT = 0;
    END;

    LOCAL PROCEDURE RemoveItemResSkill@1(VAR ResSkill@1001 : Record "Resource Skill";Update@1002 : Boolean;IsReassigned@1005 : Boolean);
    VAR
      ExistingResSkill@1000 : Record "Resource Skill";
      ExistingResSkill2@1004 : Record "Resource Skill";
      ServItem@1003 : Record "Service Item";
    BEGIN
      with ExistingResSkill do begin
        if not IsReassigned then begin
          SETCURRENTKEY("Assigned From","Source Type","Source Code");
          SETRANGE("Assigned From","Assigned From"::Item);
          SETRANGE("Source Type","Source Type"::Item);
          SETRANGE("Source Code",ResSkill."No.");
          SETRANGE(Type,Type::"Service Item");
          SETRANGE("Skill Code",ResSkill."Skill Code");
          if FIND('-') then
            if Update then
              DELETEALL
            else
              ConvertResSkillsToOriginal(ExistingResSkill);
        end;

        ServItem.SETCURRENTKEY("Item No.");
        ServItem.SETRANGE("Item No.",ResSkill."No.");
        if ServItem.FIND('-') then
          repeat
            RESET;
            SETCURRENTKEY("Assigned From","Source Type","Source Code");
            SETRANGE("Assigned From","Assigned From"::Item);
            SETRANGE("Source Type","Source Type"::"Service Item Group");
            SETRANGE(Type,Type::"Service Item");
            SETRANGE("No.",ServItem."No.");
            SETRANGE("Skill Code",ResSkill."Skill Code");
            if FIND('-') then
              repeat
                ExistingResSkill2 := ExistingResSkill;
                if ServItem."Service Item Group Code" = "Source Code" then begin
                  ExistingResSkill2."Assigned From" := "Assigned From"::"Service Item Group";
                  ExistingResSkill2.MODIFY;
                end else begin
                  if Update then
                    ExistingResSkill2.DELETE
                  else
                    if IsReassigned then begin
                      ExistingResSkill2."Source Type" := "Source Type"::Item;
                      ExistingResSkill2."Source Code" := ResSkill."No.";
                      ExistingResSkill2.MODIFY;
                    end else
                      ConvertResSkillToOriginal(ExistingResSkill2,true)
                end;
              until NEXT = 0;
          until ServItem.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE RemoveServItemGroupResSkill@2(VAR ResSkill@1001 : Record "Resource Skill";Update@1000 : Boolean);
    VAR
      ExistingResSkill@1006 : Record "Resource Skill";
      ExistingResSkill2@1002 : Record "Resource Skill";
      ServItem@1008 : Record "Service Item";
    BEGIN
      with ExistingResSkill do
        if Update then begin
          SETCURRENTKEY("Source Type","Source Code");
          SETRANGE("Source Type","Source Type"::"Service Item Group");
          SETRANGE("Source Code",ResSkill."No.");
          SETRANGE("Skill Code",ResSkill."Skill Code");
          DELETEALL;
        end else begin
          SETCURRENTKEY("Assigned From","Source Type","Source Code");
          SETRANGE("Assigned From","Assigned From"::"Service Item Group");
          SETRANGE("Source Code",ResSkill."No.");
          SETRANGE("Skill Code",ResSkill."Skill Code");
          ConvertResSkillsToOriginal(ExistingResSkill);

          RESET;
          SETCURRENTKEY("Assigned From","Source Type","Source Code");
          SETRANGE("Assigned From","Assigned From"::Item);
          SETRANGE("Source Type","Source Type"::"Service Item Group");
          SETRANGE("Source Code",ResSkill."No.");
          SETRANGE("Skill Code",ResSkill."Skill Code");
          if FIND('-') then
            repeat
              if ServItem.GET("No.") then begin
                ExistingResSkill2 := ExistingResSkill;
                ExistingResSkill2."Source Type" := "Source Type"::Item;
                ExistingResSkill2."Source Code" := ServItem."Item No.";
                ExistingResSkill2.MODIFY;
              end;
            until NEXT = 0;
        end;
    END;

    [External]
    PROCEDURE ChangeResSkill@7(VAR ResSkill@1001 : Record "Resource Skill";OldSkillCode@1002 : Code[10]) : Boolean;
    VAR
      OldResSkill@1004 : TEMPORARY Record "Resource Skill";
      SelectedOption@1003 : Integer;
      Update@1000 : Boolean;
    BEGIN
      OldResSkill := ResSkill;
      OldResSkill."Skill Code" := OldSkillCode;
      with ResSkill do begin
        if ("Assigned From" <> "Assigned From"::" ") or
           ("Source Type" <> "Source Type"::" ")
        then
          ConvertResSkillToOriginal(ResSkill,false);

        if IsRelatedResSkillsExist(OldResSkill) then begin
          case OldResSkill.Type of
            Type::Item:
              SelectedOption := RunOptionDialog(Text005,Text006,Text007,Text008);
            Type::"Service Item Group":
              SelectedOption := RunOptionDialog(Text010,Text011,Text012,Text013);
            Type::"Service Item":
              SelectedOption := 1;
          end;

          case SelectedOption of
            0:
              Update := true;
            1:
              Update := false;
            2:
              begin
                exit;
              end
          end;

          if Type <> Type::"Service Item" then
            if Update then begin
              case Type of
                Type::"Service Item Group":
                  ChangeServItemGroupResSkill(ResSkill,OldSkillCode);
                Type::Item:
                  ChangeItemResSkill(ResSkill,OldSkillCode);
              end;
            end else
              RemoveResSkill(OldResSkill)
        end;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE ChangeServItemGroupResSkill@19(VAR ResSkill@1001 : Record "Resource Skill";OldSkillCode@1000 : Code[10]);
    VAR
      ExistingResSkill@1002 : Record "Resource Skill";
      ExistingResSkill2@1003 : Record "Resource Skill";
      ExistingResSkill3@1004 : Record "Resource Skill";
    BEGIN
      with ExistingResSkill do begin
        SETRANGE("Skill Code",OldSkillCode);
        SETRANGE("Source Type","Source Type"::"Service Item Group");
        SETRANGE("Source Code",ResSkill."No.");
        if FIND('-') then
          repeat
            ExistingResSkill3 := ExistingResSkill;
            if not ExistingResSkill2.GET(Type,"No.",ResSkill."Skill Code") then
              ExistingResSkill3.RENAME(Type,"No.",ResSkill."Skill Code")
            else
              ExistingResSkill3.DELETE;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ChangeItemResSkill@8(VAR ResSkill@1000 : Record "Resource Skill";OldSkillCode@1001 : Code[10]);
    VAR
      ExistingResSkill@1002 : Record "Resource Skill";
      ExistingResSkill2@1004 : Record "Resource Skill";
      ServItem@1003 : Record "Service Item";
    BEGIN
      with ExistingResSkill do begin
        ServItem.SETCURRENTKEY("Item No.");
        ServItem.SETRANGE("Item No.",ResSkill."No.");
        if ServItem.FIND('-') then
          repeat
            SETRANGE(Type,Type::"Service Item");
            SETRANGE("No.",ServItem."No.");
            SETRANGE("Skill Code",OldSkillCode);
            SETRANGE("Assigned From","Assigned From"::Item);
            if FINDFIRST then
              if not ExistingResSkill2.GET(Type,"No.",ResSkill."Skill Code") then begin
                RENAME(Type,"No.",ResSkill."Skill Code");
                "Source Type" := "Source Type"::Item;
                "Source Code" := ResSkill."No.";
                MODIFY;
              end else
                DELETE
          until ServItem.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE AssignServItemResSkills@35(VAR ServItem@1000 : Record "Service Item");
    VAR
      ResSkill@1003 : Record "Resource Skill";
      SrcType@1006 : Integer;
    BEGIN
      SrcType := ResSkill.Type::"Service Item";
      AssignRelationWithUpdate(SrcType,ServItem."No.",ResSkill.Type::Item,ServItem."Item No.");
      AssignRelationWithUpdate(SrcType,ServItem."No.",ResSkill.Type::"Service Item Group",ServItem."Service Item Group Code");
    END;

    LOCAL PROCEDURE AssignRelationConfirmation@22(SrcType@1009 : Integer;SrcCode@1008 : Code[20];DestType@1007 : Integer;DestCode@1006 : Code[20]) : Boolean;
    VAR
      ServItemGroup@1003 : Record "Service Item Group";
      ServItem@1002 : Record "Service Item";
      Item@1001 : Record Item;
      ResSkill@1000 : Record "Resource Skill";
      SrcTypeText@1005 : Text[30];
      DestTypeText@1004 : Text[30];
    BEGIN
      with ResSkill do begin
        SETRANGE(Type,DestType);
        SETRANGE("No.",DestCode);
        if FINDFIRST then begin
          case DestType of
            Type::"Service Item Group":
              DestTypeText := ServItemGroup.TABLECAPTION;
            Type::Item:
              DestTypeText := Item.TABLECAPTION;
          end;

          case SrcType of
            Type::Item:
              SrcTypeText := Item.TABLECAPTION;
            Type::"Service Item":
              SrcTypeText := ServItem.TABLECAPTION;
          end;

          exit(CONFIRM(Text002,true,DestTypeText,DestCode,SrcTypeText,SrcCode));
        end;
      end;
    END;

    LOCAL PROCEDURE AssignRelationWithUpdate@11(SrcType@1000 : Integer;SrcCode@1001 : Code[20];DestType@1004 : Integer;DestCode@1005 : Code[20]);
    VAR
      OriginalResSkill@1003 : Record "Resource Skill";
      AddedResSkill@1007 : Record "Resource Skill";
    BEGIN
      with OriginalResSkill do begin
        SETRANGE(Type,DestType);
        SETRANGE("No.",DestCode);
        if FIND('-') then
          repeat
            if UnifyResSkillCode(SrcType,SrcCode,OriginalResSkill) then
              if SrcType = Type::Item then begin
                if AddedResSkill.GET(SrcType,SrcCode,"Skill Code") then
                  AddResSkillToServItems(AddedResSkill);
              end;
          until NEXT = 0
      end;
    END;

    [External]
    PROCEDURE DeleteItemResSkills@13(ItemNo@1000 : Code[20]);
    VAR
      ExistingResSkill@1001 : Record "Resource Skill";
      ExistingResSkill2@1004 : Record "Resource Skill";
      ServiceItem@1003 : Record "Service Item";
      Update@1002 : Boolean;
    BEGIN
      with ExistingResSkill do begin
        SETCURRENTKEY("Source Type","Source Code");
        SETRANGE("Source Type","Source Type"::Item);
        SETRANGE("Source Code",ItemNo);
        if FIND('-') then
          Update := CONFIRM(Text004,true)
        else
          Update := true;

        LOCKTABLE;
        RESET;
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        if FIND('-') then begin
          repeat
            ExistingResSkill2 := ExistingResSkill;
            RemoveItemResSkill(ExistingResSkill2,Update,false);
            ExistingResSkill2.DELETE;
          until NEXT = 0;

          ServiceItem.RESET;
          ServiceItem.SETRANGE("Item No.",ItemNo);
          if ServiceItem.FIND('-') then
            repeat
              RemoveServItemGroupRelation(
                ServiceItem."No.",
                Update,
                Type::"Service Item");
            until ServiceItem.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteServItemGrResSkills@14(ServItemGrCode@1001 : Code[10]);
    VAR
      ExistingResSkill@1003 : Record "Resource Skill";
      ExistingResSkill2@1000 : Record "Resource Skill";
      Update@1002 : Boolean;
    BEGIN
      with ExistingResSkill do begin
        SETCURRENTKEY("Source Type","Source Code");
        SETRANGE("Source Type","Source Type"::"Service Item Group");
        SETRANGE("Source Code",ServItemGrCode);
        if FIND('-') then
          Update := CONFIRM(Text003,true)
        else
          Update := true;

        LOCKTABLE;
        RESET;
        SETRANGE(Type,Type::"Service Item Group");
        SETRANGE("No.",ServItemGrCode);
        if FIND('-') then
          repeat
            ExistingResSkill2 := ExistingResSkill;
            RemoveServItemGroupResSkill(ExistingResSkill2,Update);
            ExistingResSkill2.DELETE;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE DeleteServItemResSkills@17(ServItemNo@1000 : Code[20]);
    VAR
      ExistingResSkill@1001 : Record "Resource Skill";
    BEGIN
      with ExistingResSkill do begin
        LOCKTABLE;
        SETRANGE(Type,Type::"Service Item");
        SETRANGE("No.",ServItemNo);
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE ChangeRelationWithItem@29(SrcType@1004 : Integer;SrcCode@1003 : Code[20];RelationType@1002 : Integer;DestCode@1001 : Code[20];OriginalCode@1000 : Code[20];ServItemGroupCode@1015 : Code[10]) : Boolean;
    VAR
      Item@1014 : Record Item;
      ExistingResSkill@1008 : Record "Resource Skill";
      SelectedOption@1007 : Integer;
      RemoveWithUpdate@1012 : Boolean;
      AssignWithUpdate@1011 : Boolean;
      ResSkillCodesExistRelatedItem@1009 : Boolean;
      ResSkillCodesExistRelatedSIG@1005 : Boolean;
      ResSkillCodesItemExist@1006 : Boolean;
    BEGIN
      if not SkipValidationDialog then begin
        with ExistingResSkill do begin
          if OriginalCode <> '' then begin
            SETRANGE(Type,Type::"Service Item");
            SETRANGE("No.",SrcCode);
            SETRANGE("Assigned From","Assigned From"::Item);
            ResSkillCodesExistRelatedItem := FINDFIRST;
          end;
          if ServItemGroupCode <> '' then begin
            SETRANGE("Assigned From","Assigned From"::"Service Item Group");
            ResSkillCodesExistRelatedSIG := FINDFIRST;
          end;
          if ResSkillCodesExistRelatedItem or ResSkillCodesExistRelatedSIG then begin
            SelectedOption := RunOptionDialog(Text027,Text023,Text024,Text025);
            case SelectedOption of
              0:
                RemoveWithUpdate := true;
              1:
                RemoveWithUpdate := false;
              2:
                exit;
            end;
            AssignWithUpdate := RemoveWithUpdate;
          end else begin
            if DestCode <> '' then begin
              RESET;
              SETRANGE(Type,Type::Item);
              SETRANGE("No.",DestCode);
              ResSkillCodesItemExist := FINDFIRST;
              if not ResSkillCodesItemExist then
                if Item.GET(DestCode) then
                  if Item."Service Item Group" <> '' then begin
                    SETRANGE(Type,Type::"Service Item Group");
                    SETRANGE("No.",Item."Service Item Group");
                    ResSkillCodesItemExist := FINDFIRST;
                  end;
              if ResSkillCodesItemExist then
                AssignWithUpdate := CONFIRM(Text028,true);
            end;
            if Item.GET(DestCode) and AssignWithUpdate then
              if Item."Service Item Group" <> '' then
                AssignCodesWithUpdate := true;
          end;
        end;
      end else
        AssignWithUpdate := AssignCodesWithUpdate;

      if ResSkillCodesExistRelatedItem then
        RemoveItemRelation(SrcCode,RemoveWithUpdate);

      if ResSkillCodesExistRelatedSIG then
        RemoveServItemGroupRelation(SrcCode,RemoveWithUpdate,SrcType);

      if (DestCode <> '') and AssignWithUpdate then
        AssignRelationWithUpdate(SrcType,SrcCode,RelationType,DestCode);

      exit(true);
    END;

    [External]
    PROCEDURE ChangeRelationWithGroup@30(SrcType@1004 : Integer;SrcCode@1003 : Code[20];RelationType@1002 : Integer;DestCode@1001 : Code[20];OriginalCode@1000 : Code[20]) : Boolean;
    VAR
      ExistingResSkill@1008 : Record "Resource Skill";
      SelectedOption@1007 : Integer;
      AssignWithUpdate@1011 : Boolean;
      RelatedResSkillCodesExist@1009 : Boolean;
      RemoveWithUpdate@1012 : Boolean;
    BEGIN
      if not SkipValidationDialog then begin
        with ExistingResSkill do begin
          if OriginalCode <> '' then begin
            SETRANGE(Type,SrcType);
            SETRANGE("No.",SrcCode);
            SETRANGE("Assigned From","Assigned From"::"Service Item Group");
            RelatedResSkillCodesExist := FINDFIRST;
          end;
          if RelatedResSkillCodesExist then begin
            SelectedOption := RunOptionDialog(Text026,Text029,Text024,Text025);
            case SelectedOption of
              0:
                RemoveWithUpdate := true;
              1:
                RemoveWithUpdate := false;
              2:
                exit;
            end;
            AssignWithUpdate := RemoveWithUpdate;
          end else
            if DestCode <> '' then
              AssignWithUpdate := AssignRelationConfirmation(SrcType,SrcCode,RelationType,DestCode);
        end;
      end else
        AssignWithUpdate := AssignCodesWithUpdate;

      if RelatedResSkillCodesExist then
        RemoveServItemGroupRelation(SrcCode,RemoveWithUpdate,SrcType);

      if (DestCode <> '') and AssignWithUpdate then
        AssignRelationWithUpdate(SrcType,SrcCode,RelationType,DestCode);

      exit(true);
    END;

    LOCAL PROCEDURE RemoveItemRelation@26(SrcCode@1004 : Code[20];RemoveWithUpdate@1002 : Boolean);
    VAR
      ExistingResSkill@1007 : Record "Resource Skill";
      ExistingResSkill2@1000 : Record "Resource Skill";
      ServItem@1012 : Record "Service Item";
    BEGIN
      with ExistingResSkill do begin
        SETRANGE(Type,Type::"Service Item");
        SETRANGE("No.",SrcCode);
        SETRANGE("Assigned From","Assigned From"::Item);
        if FIND('-') then
          repeat
            ExistingResSkill2 := ExistingResSkill;
            if "Source Type" = "Source Type"::Item then begin
              if RemoveWithUpdate then
                ExistingResSkill2.DELETE
              else
                ConvertResSkillsToOriginal(ExistingResSkill);
            end else
              if ServItem.GET("No.") then
                if ServItem."Service Item Group Code" = "Source Code" then begin
                  ExistingResSkill2."Assigned From" := "Assigned From"::"Service Item Group";
                  ExistingResSkill2.MODIFY;
                end else begin
                  if RemoveWithUpdate then
                    ExistingResSkill2.DELETE
                  else
                    ConvertResSkillToOriginal(ExistingResSkill2,true);
                end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE RemoveServItemGroupRelation@27(SrcCode@1006 : Code[20];RemoveWithUpdate@1004 : Boolean;SrcType@1000 : Integer);
    VAR
      ExistingResSkill@1003 : Record "Resource Skill";
      ExistingResSkill2@1001 : Record "Resource Skill";
    BEGIN
      with ExistingResSkill do begin
        SETRANGE(Type,SrcType);
        SETRANGE("No.",SrcCode);
        SETRANGE("Assigned From","Assigned From"::"Service Item Group");
        if FIND('-') then
          repeat
            ExistingResSkill2 := ExistingResSkill;
            if SrcType = Type::Item then
              RemoveItemResSkill(ExistingResSkill2,RemoveWithUpdate,true);
            if RemoveWithUpdate then
              ExistingResSkill2.DELETE
            else
              ConvertResSkillToOriginal(ExistingResSkill,true)
              ;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ConvertResSkillToOriginal@15(VAR ResSkill@1000 : Record "Resource Skill";AllowModify@1001 : Boolean);
    BEGIN
      with ResSkill do begin
        "Assigned From" := "Assigned From"::" ";
        "Source Type" := "Source Type"::" ";
        "Source Code" := '';
        if AllowModify then
          MODIFY;
      end;
    END;

    LOCAL PROCEDURE ConvertResSkillsToOriginal@20(VAR ResSkill@1000 : Record "Resource Skill");
    BEGIN
      with ResSkill do begin
        if FIND('-') then
          repeat
            ConvertResSkillToOriginal(ResSkill,true);
          until NEXT = 0
      end;
    END;

    LOCAL PROCEDURE IsRelatedObjectsExist@4(VAR ResSkill@1000 : Record "Resource Skill") : Boolean;
    VAR
      Item@1001 : Record Item;
      ServItem@1002 : Record "Service Item";
    BEGIN
      with ResSkill do begin
        case Type of
          Type::"Service Item Group":
            begin
              ServItem.SETCURRENTKEY("Service Item Group Code");
              ServItem.SETRANGE("Service Item Group Code","No.");
              if not ServItem.ISEMPTY then
                exit(true);

              Item.SETCURRENTKEY("Service Item Group");
              Item.SETRANGE("Service Item Group","No.");
              exit(not Item.ISEMPTY);
            end;
          Type::Item:
            begin
              ServItem.SETCURRENTKEY("Item No.");
              ServItem.SETRANGE("Item No.","No.");
              exit(not ServItem.ISEMPTY);
            end;
        end;
        exit
      end;
    END;

    LOCAL PROCEDURE IsRelatedResSkillsExist@10(VAR ResSkill@1000 : Record "Resource Skill") : Boolean;
    VAR
      ExistingResSkill@1001 : Record "Resource Skill";
      ServItem@1002 : Record "Service Item";
    BEGIN
      with ExistingResSkill do
        case ResSkill.Type of
          Type::Item:
            begin
              SETCURRENTKEY("Assigned From","Source Type","Source Code");
              SETRANGE("Assigned From","Assigned From"::Item);
              SETRANGE("Source Type","Source Type"::Item);
              SETRANGE("Source Code",ResSkill."No.");
              SETRANGE("Skill Code",ResSkill."Skill Code");
              SETRANGE(Type,Type::"Service Item");
              if not ISEMPTY then
                exit(true);

              ServItem.SETCURRENTKEY("Item No.");
              ServItem.SETRANGE("Item No.",ResSkill."No.");
              if ServItem.FIND('-') then
                repeat
                  RESET;
                  SETCURRENTKEY("Assigned From","Source Type","Source Code");
                  SETRANGE("Assigned From","Assigned From"::Item);
                  SETRANGE("Source Type","Source Type"::"Service Item Group");
                  SETRANGE(Type,Type::"Service Item");
                  SETRANGE("No.",ServItem."No.");
                  SETRANGE("Skill Code",ResSkill."Skill Code");
                  if not ISEMPTY then
                    exit(true);
                until ServItem.NEXT = 0;
            end;
          Type::"Service Item Group":
            begin
              SETCURRENTKEY("Source Type","Source Code");
              SETRANGE("Source Type","Source Type"::"Service Item Group");
              SETRANGE("Source Code",ResSkill."No.");
              SETRANGE("Skill Code",ResSkill."Skill Code");
              if not ISEMPTY then
                exit(true);
            end;
        end;
    END;

    LOCAL PROCEDURE RunOptionDialog@28(ProblemDescription@1004 : Text[200];SolutionProposition@1003 : Text[200];FirstStrategy@1002 : Text[200];SecondStrategy@1001 : Text[200]) : Integer;
    VAR
      SelectedOption@1000 : Integer;
    BEGIN
      SelectedOption := STRMENU(STRSUBSTNO(Text030,FirstStrategy,SecondStrategy),1,
          STRSUBSTNO(Text031,ProblemDescription,SolutionProposition));

      if SelectedOption = 0 then
        exit(2);

      exit(SelectedOption - 1);
    END;

    [External]
    PROCEDURE RevalidateRelation@24(SrcType@1003 : Integer;SrcCode@1002 : Code[20];DestType@1001 : Integer;DestCode@1000 : Code[20]) : Boolean;
    VAR
      AssignRelation@1005 : Boolean;
    BEGIN
      if IsNewCodesAdded(SrcType,SrcCode,DestType,DestCode) then begin
        if not SkipValidationDialog then
          AssignRelation := RevalidateRelationConfirmation(SrcType,SrcCode,DestType,DestCode)
        else
          AssignRelation := true;

        if AssignRelation then begin
          AssignRelationWithUpdate(SrcType,SrcCode,DestType,DestCode);
          exit(true)
        end;
      end;
    END;

    LOCAL PROCEDURE RevalidateRelationConfirmation@25(SrcType@1003 : Integer;SrcCode@1002 : Code[20];DestType@1001 : Integer;DestCode@1000 : Code[20]) : Boolean;
    VAR
      ServItemGroup@1007 : Record "Service Item Group";
      ServItem@1006 : Record "Service Item";
      Item@1005 : Record Item;
      ResSkill@1004 : Record "Resource Skill";
      SrcTypeText@1009 : Text[30];
      DestTypeText@1008 : Text[30];
    BEGIN
      with ResSkill do begin
        case DestType of
          Type::"Service Item Group":
            DestTypeText := ServItemGroup.TABLECAPTION;
          Type::Item:
            DestTypeText := Item.TABLECAPTION;
        end;

        case SrcType of
          Type::Item:
            SrcTypeText := Item.TABLECAPTION;
          Type::"Service Item":
            SrcTypeText := ServItem.TABLECAPTION;
        end;

        exit(CONFIRM(Text002,true,DestTypeText,DestCode,SrcTypeText,SrcCode));
      end;
    END;

    LOCAL PROCEDURE IsNewCodesAdded@32(SrcType@1003 : Integer;SrcCode@1002 : Code[20];DestType@1001 : Integer;DestCode@1000 : Code[20]) : Boolean;
    VAR
      DestResSkill@1004 : Record "Resource Skill";
      SrcResSkill@1005 : Record "Resource Skill";
    BEGIN
      with DestResSkill do begin
        SETRANGE(Type,DestType);
        SETRANGE("No.",DestCode);
        if FIND('-') then
          repeat
            SrcResSkill.SETRANGE(Type,SrcType);
            SrcResSkill.SETRANGE("No.",SrcCode);
            SrcResSkill.SETRANGE("Skill Code","Skill Code");
            if SrcResSkill.ISEMPTY then
              exit(true);
          until NEXT = 0
      end;
    END;

    [External]
    PROCEDURE DropGlobals@21();
    BEGIN
      SkipValidationDialog := false;
      Update2 := false;
    END;

    [External]
    PROCEDURE SkipValidationDialogs@31();
    BEGIN
      SkipValidationDialog := true;
    END;

    [External]
    PROCEDURE CloneObjectResourceSkills@33(ObjectType@1000 : Integer;SrcCode@1001 : Code[20];DestCode@1002 : Code[20]);
    VAR
      ResSkill@1003 : Record "Resource Skill";
      NewResSkill@1004 : Record "Resource Skill";
    BEGIN
      with ResSkill do begin
        SETRANGE(Type,ObjectType);
        SETRANGE("No.",SrcCode);
        if FIND('-') then
          repeat
            NewResSkill.INIT;
            NewResSkill := ResSkill;
            NewResSkill."No." := DestCode;
            NewResSkill.INSERT;
          until NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

