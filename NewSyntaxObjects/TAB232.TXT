OBJECT Table 232 Gen. Journal Batch
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Name,Description;
    OnInsert=BEGIN
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               if not GenJnlTemplate."Copy VAT Setup to Jnl. Lines" then
                 "Copy VAT Setup to Jnl. Lines" := false;
               "Allow Payment Export" := GenJnlTemplate.Type = GenJnlTemplate.Type::Payments;

               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;
             END;

    OnDelete=BEGIN
               ApprovalsMgmt.OnCancelGeneralJournalBatchApprovalRequest(Rec);

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name",Name);
               GenJnlAlloc.DELETEALL;
               GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlLine.SETRANGE("Journal Batch Name",Name);
               GenJnlLine.DELETEALL(true);
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);

               SetLastModifiedDateTime;
             END;

    CaptionML=ENU=Gen. Journal Batch;
    LookupPageID="General Journal Batches";
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Code10        ;CaptionML=ENU=Name;
                                                   NotBlank=true }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   OnValidate=BEGIN
                                                                if "Reason Code" <> xRec."Reason Code" then begin
                                                                  ModifyLines(FIELDNO("Reason Code"));
                                                                  MODIFY;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Reason Code }
    { 5   ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                "Bal. Account No." := '';
                                                                if "Bal. Account Type" <> "Bal. Account Type"::"G/L Account" then
                                                                  "Bank Statement Import Format" := '';
                                                              END;

                                                   CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset" }
    { 6   ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Fixed Asset")) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account Type" = "Bal. Account Type"::"G/L Account" then
                                                                  CheckGLAcc("Bal. Account No.");
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 7   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "No. Series" <> '' then begin
                                                                  GenJnlTemplate.GET("Journal Template Name");
                                                                  if GenJnlTemplate.Recurring then
                                                                    ERROR(
                                                                      Text000,
                                                                      FIELDCAPTION("Posting No. Series"));
                                                                  if "No. Series" = "Posting No. Series" then
                                                                    VALIDATE("Posting No. Series",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. Series }
    { 8   ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if ("Posting No. Series" = "No. Series") and ("Posting No. Series" <> '') then
                                                                  FIELDERROR("Posting No. Series",STRSUBSTNO(Text001,"Posting No. Series"));
                                                                ModifyLines(FIELDNO("Posting No. Series"));
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Posting No. Series }
    { 9   ;   ;Copy VAT Setup to Jnl. Lines;Boolean;
                                                   InitValue=true;
                                                   CaptionML=ENU=Copy VAT Setup to Jnl. Lines }
    { 10  ;   ;Allow VAT Difference;Boolean       ;OnValidate=BEGIN
                                                                if "Allow VAT Difference" then begin
                                                                  GenJnlTemplate.GET("Journal Template Name");
                                                                  GenJnlTemplate.TESTFIELD("Allow VAT Difference",true);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Allow VAT Difference }
    { 11  ;   ;Allow Payment Export;Boolean       ;CaptionML=ENU=Allow Payment Export }
    { 12  ;   ;Bank Statement Import Format;Code20;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Import));
                                                   OnValidate=BEGIN
                                                                if ("Bank Statement Import Format" <> '') and ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") then
                                                                  FIELDERROR("Bank Statement Import Format",BankStmtImpFormatBalAccErr);
                                                              END;

                                                   CaptionML=ENU=Bank Statement Import Format }
    { 21  ;   ;Template Type       ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Gen. Journal Template".Type WHERE (Name=FIELD("Journal Template Name")));
                                                   CaptionML=ENU=Template Type;
                                                   OptionCaptionML=ENU=General,Sales,Purchases,Cash Receipts,Payments,Assets,Intercompany,Jobs;
                                                   OptionString=General,Sales,Purchases,"Cash Receipts",Payments,Assets,Intercompany,Jobs;
                                                   Editable=false }
    { 22  ;   ;Recurring           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Gen. Journal Template".Recurring WHERE (Name=FIELD("Journal Template Name")));
                                                   CaptionML=ENU=Recurring;
                                                   Editable=false }
    { 23  ;   ;Suggest Balancing Amount;Boolean   ;CaptionML=ENU=Suggest Balancing Amount }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 8001;   ;Last Modified DateTime;DateTime    ;CaptionML=ENU=Last Modified DateTime }
  }
  KEYS
  {
    {    ;"Journal Template Name",Name            ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Only the %1 field can be filled in on recurring journals.';
      Text001@1001 : TextConst 'ENU=must not be %1';
      GenJnlTemplate@1002 : Record "Gen. Journal Template";
      GenJnlLine@1003 : Record "Gen. Journal Line";
      GenJnlAlloc@1004 : Record "Gen. Jnl. Allocation";
      BankStmtImpFormatBalAccErr@1005 : TextConst '@@@="FIELDERROR ex: Bank Statement Import Format must be blank. When Bal. Account Type = Bank Account, then Bank Statement Import Format on the Bank Account card will be used in Gen. Journal Batch Journal Template Name=''GENERAL'',Name=''CASH''.";ENU="must be blank. When Bal. Account Type = Bank Account, then Bank Statement Import Format on the Bank Account card will be used"';
      ApprovalsMgmt@1006 : Codeunit "Approvals Mgmt.";

    [External]
    PROCEDURE SetupNewBatch@1();
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      "Bal. Account Type" := GenJnlTemplate."Bal. Account Type";
      "Bal. Account No." := GenJnlTemplate."Bal. Account No.";
      "No. Series" := GenJnlTemplate."No. Series";
      "Posting No. Series" := GenJnlTemplate."Posting No. Series";
      "Reason Code" := GenJnlTemplate."Reason Code";
      "Copy VAT Setup to Jnl. Lines" := GenJnlTemplate."Copy VAT Setup to Jnl. Lines";
      "Allow VAT Difference" := GenJnlTemplate."Allow VAT Difference";
    END;

    LOCAL PROCEDURE CheckGLAcc@2(AccNo@1000 : Code[20]);
    VAR
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if AccNo <> '' then begin
        GLAcc.GET(AccNo);
        GLAcc.CheckGLAcc;
        GLAcc.TESTFIELD("Direct Posting",true);
      end;
    END;

    LOCAL PROCEDURE ModifyLines@3(i@1000 : Integer);
    BEGIN
      GenJnlLine.LOCKTABLE;
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",Name);
      if GenJnlLine.FIND('-') then
        repeat
          case i of
            FIELDNO("Reason Code"):
              GenJnlLine.VALIDATE("Reason Code","Reason Code");
            FIELDNO("Posting No. Series"):
              GenJnlLine.VALIDATE("Posting No. Series","Posting No. Series");
          end;
          GenJnlLine.MODIFY(true);
        until GenJnlLine.NEXT = 0;
    END;

    [External]
    PROCEDURE LinesExist@5() : Boolean;
    VAR
      GenJournalLine@1000 : Record "Gen. Journal Line";
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",Name);
      exit(not GenJournalLine.ISEMPTY);
    END;

    [External]
    PROCEDURE GetBalance@6() : Decimal;
    VAR
      GenJournalLine@1000 : Record "Gen. Journal Line";
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",Name);
      GenJournalLine.CALCSUMS("Balance (LCY)");
      exit(GenJournalLine."Balance (LCY)");
    END;

    [External]
    PROCEDURE CheckBalance@11() Balance : Decimal;
    BEGIN
      Balance := GetBalance;

      if Balance = 0 then
        OnGeneralJournalBatchBalanced
      else
        OnGeneralJournalBatchNotBalanced;
    END;

    [Integration(TRUE)]
    [External]
    LOCAL PROCEDURE OnGeneralJournalBatchBalanced@15();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    LOCAL PROCEDURE OnGeneralJournalBatchNotBalanced@16();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckGenJournalLineExportRestrictions@7();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnMoveGenJournalBatch@8(ToRecordID@1000 : RecordID);
    BEGIN
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@1165();
    BEGIN
      "Last Modified DateTime" := CURRENTDATETIME;
    END;

    BEGIN
    END.
  }
}

