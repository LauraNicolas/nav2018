OBJECT Table 1302 Dimensions Template
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Master Record Template Code" := GetParentTemplateCode;
               VALIDATE(Description);
               VALIDATE("Table Id");
               InsertConfigurationTemplateHeaderAndLines;
             END;

    OnModify=VAR
               FieldRefArray@1000 : ARRAY [3] OF FieldRef;
               RecRef@1001 : RecordRef;
             BEGIN
               TESTFIELD(Code);
               VALIDATE("Table Id");

               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);
               ConfigTemplateManagement.UpdateConfigTemplateAndLines(Code,Description,DATABASE::"Default Dimension",FieldRefArray);
             END;

    OnDelete=VAR
               ConfigTemplateHeader@1000 : Record "Config. Template Header";
             BEGIN
               if ConfigTemplateHeader.GET(Code) then begin
                 ConfigTemplateManagement.RemoveRelatedTemplate("Master Record Template Code",Code);
                 ConfigTemplateHeader.DELETE(true);
               end;
             END;

    CaptionML=ENU=Dimensions Template;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                if xRec."Dimension Code" <> "Dimension Code" then begin
                                                                  "Dimension Value Code" := '';
                                                                  "Value Posting" := "Value Posting"::" ";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Dimension Code;
                                                   NotBlank=true }
    { 4   ;   ;Dimension Value Code;Code20        ;TableRelation="Dimension Value".Code WHERE ("Dimension Code"=FIELD("Dimension Code"));
                                                   CaptionML=ENU=Dimension Value Code }
    { 5   ;   ;Value Posting       ;Option        ;OnValidate=BEGIN
                                                                if "Value Posting" = "Value Posting"::"No Code" then
                                                                  TESTFIELD("Dimension Value Code",'');
                                                              END;

                                                   CaptionML=ENU=Value Posting;
                                                   OptionCaptionML=ENU=" ,Code Mandatory,Same Code,No Code";
                                                   OptionString=" ","Code Mandatory","Same Code","No Code" }
    { 50  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                Description := GetParentTemplateCode;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 51  ;   ;Table Id            ;Integer       ;OnValidate=VAR
                                                                TableIdFilter@1000 : Text;
                                                              BEGIN
                                                                if "Table Id" = 0 then begin
                                                                  TableIdFilter := GETFILTER("Table Id");
                                                                  EVALUATE("Table Id",TableIdFilter);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Table Id }
    { 52  ;   ;Master Record Template Code;Code10 ;CaptionML=ENU=Master Record Template Code }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigTemplateManagement@1000 : Codeunit "Config. Template Management";

    LOCAL PROCEDURE CreateFieldRefArray@12(VAR FieldRefArray@1000 : ARRAY [3] OF FieldRef;RecRef@1003 : RecordRef);
    VAR
      I@1002 : Integer;
    BEGIN
      I := 1;

      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Dimension Value Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Value Posting")));
    END;

    LOCAL PROCEDURE AddToArray@4(VAR FieldRefArray@1000 : ARRAY [23] OF FieldRef;VAR I@1001 : Integer;CurrFieldRef@1002 : FieldRef);
    BEGIN
      FieldRefArray[I] := CurrFieldRef;
      I += 1;
    END;

    [External]
    PROCEDURE InitializeTemplatesFromMasterRecordTemplate@20(MasterRecordTemplateCode@1001 : Code[10];VAR TempDimensionsTemplate@1003 : TEMPORARY Record "Dimensions Template";TableID@1004 : Integer);
    VAR
      ConfigTemplateHeader@1002 : Record "Config. Template Header";
      ConfigTemplateLine@1000 : Record "Config. Template Line";
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",MasterRecordTemplateCode);
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::"Related Template");

      if ConfigTemplateLine.FINDSET then
        repeat
          ConfigTemplateHeader.GET(ConfigTemplateLine."Template Code");
          InitializeTempRecordFromConfigTemplate(TempDimensionsTemplate,ConfigTemplateHeader,MasterRecordTemplateCode,TableID);
        until ConfigTemplateLine.NEXT = 0;
    END;

    [External]
    PROCEDURE InitializeTempRecordFromConfigTemplate@1(VAR TempDimensionsTemplate@1000 : TEMPORARY Record "Dimensions Template";ConfigTemplateHeader@1001 : Record "Config. Template Header";MasterRecordTemplateCode@1004 : Code[10];TableID@1002 : Integer);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      TempDimensionsTemplate.INIT;
      TempDimensionsTemplate.Code := ConfigTemplateHeader.Code;
      TempDimensionsTemplate.Description := ConfigTemplateHeader.Description;
      TempDimensionsTemplate."Master Record Template Code" := MasterRecordTemplateCode;
      TempDimensionsTemplate."Dimension Code" := GetDefaultDimensionCode(ConfigTemplateHeader);
      TempDimensionsTemplate."Table Id" := TableID;
      TempDimensionsTemplate.INSERT;

      RecRef.GETTABLE(TempDimensionsTemplate);

      ConfigTemplateManagement.ApplyTemplateLinesWithoutValidation(ConfigTemplateHeader,RecRef);

      RecRef.SETTABLE(TempDimensionsTemplate);
    END;

    LOCAL PROCEDURE InsertConfigurationTemplateHeaderAndLines@2();
    VAR
      FieldRefArray@1001 : ARRAY [3] OF FieldRef;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      CreateFieldRefArray(FieldRefArray,RecRef);
      ConfigTemplateManagement.CreateConfigTemplateAndLines(Code,Description,DATABASE::"Default Dimension",FieldRefArray);
      ConfigTemplateManagement.AddRelatedTemplate(GetParentTemplateCode,Code);
    END;

    [External]
    PROCEDURE InsertDimensionsFromTemplates@17(ConfigTemplateHeader@1003 : Record "Config. Template Header";MasterRecordNo@1005 : Code[20];TableID@1006 : Integer);
    VAR
      ConfigTemplateLine@1000 : Record "Config. Template Line";
    BEGIN
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::"Related Template");
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);

      if ConfigTemplateLine.FINDSET then
        repeat
          ConfigTemplateHeader.GET(ConfigTemplateLine."Template Code");
          if ConfigTemplateHeader."Table ID" = DATABASE::"Default Dimension" then
            InsertDimensionFromTemplate(ConfigTemplateHeader,MasterRecordNo,TableID);
        until ConfigTemplateLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertDimensionFromTemplate@16(ConfigTemplateHeader@1006 : Record "Config. Template Header";MasterRecordNo@1001 : Code[20];TableID@1004 : Integer);
    VAR
      DefaultDimension@1003 : Record "Default Dimension";
      ConfigTemplateMgt@1002 : Codeunit "Config. Template Management";
      RecRef@1000 : RecordRef;
    BEGIN
      DefaultDimension.INIT;
      DefaultDimension."No." := MasterRecordNo;
      DefaultDimension."Table ID" := TableID;
      DefaultDimension."Dimension Code" := GetDefaultDimensionCode(ConfigTemplateHeader);
      DefaultDimension.INSERT;

      RecRef.GETTABLE(DefaultDimension);
      ConfigTemplateMgt.UpdateRecord(ConfigTemplateHeader,RecRef);
      RecRef.SETTABLE(DefaultDimension);
    END;

    LOCAL PROCEDURE GetDefaultDimensionCode@9(ConfigTemplateHeader@1000 : Record "Config. Template Header") : Text[20];
    VAR
      ConfigTemplateLine@1001 : Record "Config. Template Line";
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.SETRANGE("Field ID",FIELDNO("Dimension Code"));
      ConfigTemplateLine.FINDFIRST;

      exit(ConfigTemplateLine."Default Value");
    END;

    LOCAL PROCEDURE GetParentTemplateCode@8() : Text[10];
    BEGIN
      exit(GETFILTER("Master Record Template Code"));
    END;

    [External]
    PROCEDURE CreateTemplatesFromExistingMasterRecord@3(MasterRecordNo@1001 : Code[20];MasterRecordTemplateCode@1003 : Code[10];TableID@1000 : Integer);
    VAR
      DefaultDimension@1002 : Record "Default Dimension";
    BEGIN
      DefaultDimension.SETRANGE("No.",MasterRecordNo);
      DefaultDimension.SETRANGE("Table ID",TableID);

      if DefaultDimension.FINDSET then
        repeat
          CreateTemplateFromExistingDefaultDimension(DefaultDimension,MasterRecordTemplateCode);
        until DefaultDimension.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateTemplateFromExistingDefaultDimension@10(DefaultDimension@1010 : Record "Default Dimension";MasterRecordTemplateCode@1011 : Code[10]);
    VAR
      RecRef@1005 : RecordRef;
      FieldRefArray@1000 : ARRAY [3] OF FieldRef;
      NewTemplateCode@1009 : Code[10];
    BEGIN
      RecRef.GETTABLE(DefaultDimension);
      CreateFieldRefArray(FieldRefArray,RecRef);

      ConfigTemplateManagement.CreateConfigTemplateAndLines(
        NewTemplateCode,MasterRecordTemplateCode,DATABASE::"Default Dimension",FieldRefArray);
      ConfigTemplateManagement.AddRelatedTemplate(MasterRecordTemplateCode,NewTemplateCode);
    END;

    BEGIN
    END.
  }
}

