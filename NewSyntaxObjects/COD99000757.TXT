OBJECT Codeunit 99000757 Update Prod. Order Cost
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesLine@1000 : Record "Sales Line";
      PurchLine@1001 : Record "Purchase Line";
      ReqLine@1002 : Record "Requisition Line";
      ItemJnlLine@1003 : Record "Item Journal Line";
      ProdOrderComp@1005 : Record "Prod. Order Component";
      PlanningComponent@1006 : Record "Planning Component";
      ServiceInvLine@1007 : Record "Service Line";
      ReservMgt@1008 : Codeunit "Reservation Management";
      ReservEngineMgt@1009 : Codeunit "Reservation Engine Mgt.";
      ReserveProdOrderLine@1010 : Codeunit "Prod. Order Line-Reserve";
      ReserveProdOrderComp@1011 : Codeunit "Prod. Order Comp.-Reserve";

    LOCAL PROCEDURE ModifyFor@1(ReservEntry@1000 : Record "Reservation Entry";UnitCost@1001 : Decimal);
    VAR
      ProdOrderLine@1002 : Record "Prod. Order Line";
      ReqLine@1003 : Record "Requisition Line";
      QtyToReserveNonBase@1006 : Decimal;
      QtyToReserve@1004 : Decimal;
      QtyReservedThisLineNonBase@1007 : Decimal;
      QtyReservedThisLine@1005 : Decimal;
    BEGIN
      if UnitCost = 0 then
        exit;

      if not ReservEntry.GET(ReservEntry."Entry No.",not ReservEntry.Positive) then
        exit;

      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          begin
            SalesLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            ReservMgt.SetSalesLine(SalesLine);
            ReservMgt.SalesLineUpdateValues(SalesLine,QtyToReserveNonBase,QtyToReserve,
              QtyReservedThisLineNonBase,QtyReservedThisLine);
            if SalesLine."Qty. per Unit of Measure" <> 0 then
              SalesLine."Unit Cost (LCY)" :=
                ROUND(SalesLine."Unit Cost (LCY)" / SalesLine."Qty. per Unit of Measure");
            if SalesLine."Quantity (Base)" <> 0 then
              SalesLine."Unit Cost (LCY)" :=
                ROUND(
                  (SalesLine."Unit Cost (LCY)" *
                   (SalesLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / SalesLine."Quantity (Base)",0.00001);
            if SalesLine."Qty. per Unit of Measure" <> 0 then
              SalesLine."Unit Cost (LCY)" :=
                ROUND(SalesLine."Unit Cost (LCY)" * SalesLine."Qty. per Unit of Measure");
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine.MODIFY;
          end;
        DATABASE::"Requisition Line":
          begin
            ReqLine.GET(ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
            ReservMgt.ReqLineUpdateValues(ReqLine,QtyToReserveNonBase,QtyToReserve,
              QtyReservedThisLineNonBase,QtyReservedThisLine);
            if ReqLine."Qty. per Unit of Measure" <> 0 then
              ReqLine."Direct Unit Cost" :=
                ROUND(ReqLine."Direct Unit Cost" / ReqLine."Qty. per Unit of Measure");
            if ReqLine."Quantity (Base)" <> 0 then
              ReqLine."Direct Unit Cost" :=
                ROUND(
                  (ReqLine."Direct Unit Cost" *
                   (ReqLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ReqLine."Quantity (Base)",0.00001);
            if ReqLine."Qty. per Unit of Measure" <> 0 then
              ReqLine."Direct Unit Cost" :=
                ROUND(ReqLine."Direct Unit Cost" * ReqLine."Qty. per Unit of Measure");
            ReqLine.VALIDATE("Direct Unit Cost");
            ReqLine.MODIFY;
          end;
        DATABASE::"Purchase Line":
          begin
            PurchLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            if PurchLine."Qty. per Unit of Measure" <> 0 then
              PurchLine."Unit Cost (LCY)" :=
                ROUND(PurchLine."Unit Cost (LCY)" / PurchLine."Qty. per Unit of Measure");
            if PurchLine."Quantity (Base)" <> 0 then
              PurchLine."Unit Cost (LCY)" :=
                ROUND(
                  (PurchLine."Unit Cost (LCY)" *
                   (PurchLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / PurchLine."Quantity (Base)",0.00001);
            if PurchLine."Qty. per Unit of Measure" <> 0 then
              PurchLine."Unit Cost (LCY)" :=
                ROUND(PurchLine."Unit Cost (LCY)" * PurchLine."Qty. per Unit of Measure");
            PurchLine.VALIDATE("Unit Cost (LCY)");
            PurchLine.MODIFY;
          end;
        DATABASE::"Item Journal Line":
          begin
            ItemJnlLine.GET(
              ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
            if ItemJnlLine."Qty. per Unit of Measure" <> 0 then
              ItemJnlLine."Unit Cost" :=
                ROUND(ItemJnlLine."Unit Cost" / ItemJnlLine."Qty. per Unit of Measure");
            if ItemJnlLine."Quantity (Base)" <> 0 then
              ItemJnlLine."Unit Cost" :=
                ROUND(
                  (ItemJnlLine."Unit Cost" *
                   (ItemJnlLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ItemJnlLine."Quantity (Base)",0.00001);
            if ItemJnlLine."Qty. per Unit of Measure" <> 0 then
              ItemJnlLine."Unit Cost" :=
                ROUND(ItemJnlLine."Unit Cost" * ItemJnlLine."Qty. per Unit of Measure");
            ItemJnlLine.VALIDATE("Unit Cost");
            ItemJnlLine.MODIFY;
          end;
        DATABASE::"Prod. Order Line":
          begin
            ProdOrderLine.GET(
              ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line");
            if ProdOrderLine."Qty. per Unit of Measure" <> 0 then
              ProdOrderLine."Unit Cost" :=
                ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure");
            if ProdOrderLine."Quantity (Base)" <> 0 then
              ProdOrderLine."Unit Cost" :=
                ROUND(
                  (ProdOrderLine."Unit Cost" *
                   (ProdOrderLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ProdOrderLine."Quantity (Base)",0.00001);
            if ProdOrderLine."Qty. per Unit of Measure" <> 0 then
              ProdOrderLine."Unit Cost" :=
                ROUND(ProdOrderLine."Unit Cost" * ProdOrderLine."Qty. per Unit of Measure");
            ProdOrderLine.VALIDATE("Unit Cost");
            ProdOrderLine.MODIFY;
          end;
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComp.GET(
              ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line",
              ReservEntry."Source Ref. No.");
            ReservMgt.SetProdOrderComponent(ProdOrderComp);
            ReservMgt.ProdOrderCompUpdateValues(ProdOrderComp,QtyToReserveNonBase,QtyToReserve,
              QtyReservedThisLineNonBase,QtyReservedThisLine);
            if ProdOrderComp."Qty. per Unit of Measure" <> 0 then
              ProdOrderComp."Unit Cost" :=
                ROUND(ProdOrderComp."Unit Cost" / ProdOrderComp."Qty. per Unit of Measure");
            if ProdOrderComp."Expected Qty. (Base)" <> 0 then
              ProdOrderComp."Unit Cost" :=
                ROUND(
                  (ProdOrderComp."Unit Cost" *
                   (ProdOrderComp."Expected Qty. (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ProdOrderComp."Expected Qty. (Base)",0.00001);
            if ProdOrderComp."Qty. per Unit of Measure" <> 0 then
              ProdOrderComp."Unit Cost" :=
                ROUND(ProdOrderComp."Unit Cost" * ProdOrderComp."Qty. per Unit of Measure");
            ProdOrderComp.VALIDATE("Unit Cost");
            ProdOrderComp.MODIFY;
          end;
        DATABASE::"Planning Component":
          begin
            PlanningComponent.GET(
              ReservEntry."Source ID",
              ReservEntry."Source Batch Name",
              ReservEntry."Source Prod. Order Line",
              ReservEntry."Source Ref. No.");
            if PlanningComponent."Qty. per Unit of Measure" <> 0 then
              PlanningComponent."Unit Cost" :=
                ROUND(PlanningComponent."Unit Cost" / PlanningComponent."Qty. per Unit of Measure");
            if PlanningComponent."Expected Quantity (Base)" <> 0 then
              PlanningComponent."Unit Cost" :=
                ROUND(
                  (PlanningComponent."Unit Cost" *
                   (PlanningComponent."Expected Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / PlanningComponent."Expected Quantity (Base)",0.00001);
            if PlanningComponent."Qty. per Unit of Measure" <> 0 then
              PlanningComponent."Unit Cost" :=
                ROUND(PlanningComponent."Unit Cost" * PlanningComponent."Qty. per Unit of Measure");
            PlanningComponent.VALIDATE("Unit Cost");
            PlanningComponent.MODIFY;
          end;
        DATABASE::"Service Line":
          begin
            ServiceInvLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            ReservMgt.SetServLine(ServiceInvLine);
            ReservMgt.ServiceInvLineUpdateValues(ServiceInvLine,QtyToReserveNonBase,QtyToReserve,
              QtyReservedThisLineNonBase,QtyReservedThisLine);
            if ServiceInvLine."Qty. per Unit of Measure" <> 0 then
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(ServiceInvLine."Unit Cost (LCY)" / ServiceInvLine."Qty. per Unit of Measure");
            if ServiceInvLine."Quantity (Base)" <> 0 then
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(
                  (ServiceInvLine."Unit Cost (LCY)" *
                   (ServiceInvLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ServiceInvLine."Quantity (Base)",0.00001);
            if ServiceInvLine."Qty. per Unit of Measure" <> 0 then
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(ServiceInvLine."Unit Cost (LCY)" * ServiceInvLine."Qty. per Unit of Measure");
            ServiceInvLine.VALIDATE("Unit Cost (LCY)");
            ServiceInvLine.MODIFY;
          end;
      end;
    END;

    LOCAL PROCEDURE SumTrackingCosts@9(VAR ReservEntry@1000 : Record "Reservation Entry";VAR TotalUnitCost@1001 : Decimal;VAR TotalCostQty@1002 : Decimal;MultipleLevels@1003 : Boolean;Item@1102601000 : Record Item);
    VAR
      PurchLine@1004 : Record "Purchase Line";
      ProdOrderLine@1005 : Record "Prod. Order Line";
    BEGIN
      TotalUnitCost := 0;
      TotalCostQty := 0;

      repeat
        case ReservEntry."Source Type" of
          DATABASE::"Sales Line":
            begin
              SalesLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              if SalesLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(SalesLine."Unit Cost (LCY)" / SalesLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Requisition Line":
            begin
              ReqLine.GET(ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
              if ReqLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ReqLine."Direct Unit Cost" / ReqLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Purchase Line":
            begin
              PurchLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              if PurchLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(PurchLine."Unit Cost (LCY)" / PurchLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Item Journal Line":
            begin
              ItemJnlLine.GET(
                ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
              if ItemJnlLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ItemJnlLine."Unit Cost" / ItemJnlLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Prod. Order Line":
            begin
              ProdOrderLine.GET(
                ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line");
              if MultipleLevels then begin
                UpdateUnitCostOnProdOrder(ProdOrderLine,MultipleLevels,false);
                ProdOrderLine.GET(
                  ProdOrderLine.Status,
                  ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
              end;
              if ProdOrderLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Prod. Order Component":
            begin
              ProdOrderComp.GET(
                ReservEntry."Source Subtype",
                ReservEntry."Source ID",
                ReservEntry."Source Prod. Order Line",
                ReservEntry."Source Ref. No.");
              if ProdOrderComp."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(Item."Unit Cost" / ProdOrderComp."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Planning Component":
            begin
              PlanningComponent.GET(
                ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Prod. Order Line",
                ReservEntry."Source Ref. No.");
              if PlanningComponent."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(Item."Unit Cost" / PlanningComponent."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
          DATABASE::"Service Line":
            begin
              ServiceInvLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              if ServiceInvLine."Qty. per Unit of Measure" <> 0 then
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ServiceInvLine."Unit Cost (LCY)" / ServiceInvLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            end;
        end;
        TotalCostQty := TotalCostQty + ReservEntry.Quantity;
      until ReservEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateUnitCostOnProdOrder@5(VAR ProdOrderLine@1000 : Record "Prod. Order Line";MultipleLevels@1001 : Boolean;UpdateReservation@1002 : Boolean);
    VAR
      Item@1003 : Record Item;
      ProdOrderComp@1004 : Record "Prod. Order Component";
      ReservEntry@1005 : Record "Reservation Entry";
      TotalCostQty@1006 : Decimal;
      TotalUnitCost@1007 : Decimal;
      UnitCost@1008 : Decimal;
    BEGIN
      if not Item.GET(ProdOrderLine."Item No.") then
        exit;

      if Item."Costing Method" > Item."Costing Method"::Average then
        exit;

      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");

      if ProdOrderComp.FIND('-') then
        repeat
          TotalCostQty := 0;
          TotalUnitCost := 0;
          Item.GET(ProdOrderComp."Item No.");
          if Item."Costing Method" <= Item."Costing Method"::Average then begin
            ReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
            ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
            if ReservEntry.FIND('-') then
              SumTrackingCosts(ReservEntry,TotalUnitCost,TotalCostQty,MultipleLevels,Item);
            ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
            TotalUnitCost :=
              TotalUnitCost +
              (Item."Unit Cost" *
               (ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)"));
            TotalCostQty :=
              TotalCostQty +
              (ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
            if TotalCostQty <> 0 then begin
              UnitCost := TotalUnitCost / TotalCostQty * ProdOrderComp."Qty. per Unit of Measure";
              if ProdOrderComp."Unit Cost" <> UnitCost then begin
                ProdOrderComp.VALIDATE("Unit Cost",UnitCost);
                ProdOrderComp.MODIFY;
              end;
            end;
          end;
        until ProdOrderComp.NEXT = 0;

      ProdOrderLine.CALCFIELDS(
        "Expected Operation Cost Amt.",
        "Total Exp. Oper. Output (Qty.)",
        "Expected Component Cost Amt.");

      if ProdOrderLine."Total Exp. Oper. Output (Qty.)" <> 0 then
        ProdOrderLine."Expected Operation Cost Amt." :=
          ROUND(
            ProdOrderLine."Expected Operation Cost Amt." /
            ProdOrderLine."Total Exp. Oper. Output (Qty.)" *
            ProdOrderLine.Quantity);

      ProdOrderLine.VALIDATE(
        "Unit Cost",
        (ProdOrderLine."Expected Operation Cost Amt." +
         ProdOrderLine."Expected Component Cost Amt.") /
        ProdOrderLine.Quantity);

      ProdOrderLine.MODIFY;
      if UpdateReservation then begin
        ReservEntry.RESET;
        ReservEntry."Source Type" := DATABASE::"Prod. Order Line";
        ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,false);
        ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
        if ProdOrderLine."Qty. per Unit of Measure" <> 0 then
          UnitCost := ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure",0.00001)
        else
          UnitCost := ProdOrderLine."Unit Cost";
        if ReservEntry.FIND('-') then
          repeat
            ModifyFor(ReservEntry,UnitCost);
          until ReservEntry.NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

