OBJECT Table 1223 Data Exch. Column Def
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ValidateRec;
             END;

    OnModify=BEGIN
               ValidateRec;
             END;

    OnDelete=VAR
               DataExchFieldMapping@1000 : Record "Data Exch. Field Mapping";
               DataExchColumnDef@1001 : Record "Data Exch. Column Def";
             BEGIN
               DataExchFieldMapping.SETRANGE("Data Exch. Def Code","Data Exch. Def Code");
               DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code","Data Exch. Line Def Code");
               DataExchFieldMapping.SETRANGE("Column No.","Column No.");
               if not DataExchFieldMapping.ISEMPTY then
                 if CONFIRM(STRSUBSTNO(DeleteFieldMappingQst,DataExchColumnDef.TABLECAPTION,DataExchFieldMapping.TABLECAPTION)) then
                   DataExchFieldMapping.DELETEALL
                 else
                   ERROR('')
             END;

    CaptionML=ENU=Data Exch. Column Def;
  }
  FIELDS
  {
    { 1   ;   ;Data Exch. Def Code ;Code20        ;TableRelation="Data Exch. Def";
                                                   CaptionML=ENU=Data Exch. Def Code;
                                                   NotBlank=true }
    { 2   ;   ;Column No.          ;Integer       ;CaptionML=ENU=Column No.;
                                                   MinValue=1;
                                                   NotBlank=true }
    { 3   ;   ;Name                ;Text250       ;CaptionML=ENU=Name }
    { 4   ;   ;Show                ;Boolean       ;CaptionML=ENU=Show }
    { 5   ;   ;Data Type           ;Option        ;CaptionML=ENU=Data Type;
                                                   OptionCaptionML=ENU=Text,Date,Decimal,DateTime;
                                                   OptionString=Text,Date,Decimal,DateTime }
    { 6   ;   ;Data Format         ;Text100       ;CaptionML=ENU=Data Format }
    { 7   ;   ;Data Formatting Culture;Text10     ;CaptionML=ENU=Data Formatting Culture }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Data Exch. Line Def Code;Code20    ;TableRelation="Data Exch. Line Def".Code WHERE ("Data Exch. Def Code"=FIELD("Data Exch. Def Code"));
                                                   CaptionML=ENU=Data Exch. Line Def Code;
                                                   NotBlank=true }
    { 11  ;   ;Length              ;Integer       ;CaptionML=ENU=Length }
    { 12  ;   ;Constant            ;Text30        ;CaptionML=ENU=Constant }
    { 13  ;   ;Path                ;Text250       ;CaptionML=ENU=Path }
    { 14  ;   ;Negative-Sign Identifier;Text30    ;CaptionML=ENU=Negative-Sign Identifier }
    { 15  ;   ;Text Padding Required;Boolean      ;CaptionML=ENU=Text Padding Required }
    { 16  ;   ;Pad Character       ;Text1         ;CaptionML=ENU=Pad Character }
    { 17  ;   ;Justification       ;Option        ;CaptionML=ENU=Justification;
                                                   OptionCaptionML=ENU=Right,Left;
                                                   OptionString=Right,Left }
  }
  KEYS
  {
    {    ;"Data Exch. Def Code","Data Exch. Line Def Code","Column No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DeleteFieldMappingQst@1001 : TextConst 'ENU=The %1 that you are about to delete is used for one or more %2, which will also be deleted. \\Do you want to continue?';

    [External]
    PROCEDURE InsertRec@7(DataExchDefCode@1000 : Code[20];DataExchLineDefCode@1007 : Code[20];ColumnNo@1001 : Integer;NewName@1002 : Text[250];NewShow@1003 : Boolean;DataType@1004 : Option;DataTypeFormatting@1005 : Text[100];DataFormattingCulture@1006 : Text[10];NewDescription@1008 : Text[50]);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,NewName);
      VALIDATE(Show,NewShow);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataTypeFormatting);
      VALIDATE("Data Formatting Culture",DataFormattingCulture);
      VALIDATE(Description,NewDescription);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecForExport@2(DataExchDefCode@1000 : Code[20];DataExchLineDefCode@1002 : Code[20];ColumnNo@1001 : Integer;NewName@1003 : Text[250];DataType@1005 : Option;DataFormat@1006 : Text[100];NewLength@1009 : Integer;NewConstant@1004 : Text[30]);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,NewName);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataFormat);
      VALIDATE(Length,NewLength);
      VALIDATE(Constant,NewConstant);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecForImport@3(DataExchDefCode@1020 : Code[20];DataExchLineDefCode@1019 : Code[20];ColumnNo@1018 : Integer;NewName@1017 : Text[250];NewDescription@1016 : Text[50];NewShow@1015 : Boolean;DataType@1014 : Option;DataFormat@1013 : Text[100];DataFormattingCulture@1012 : Text[10]);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE(Name,NewName);
      VALIDATE(Description,NewDescription);
      VALIDATE(Show,NewShow);
      VALIDATE("Data Type",DataType);
      VALIDATE("Data Format",DataFormat);
      VALIDATE("Data Formatting Culture",DataFormattingCulture);
      INSERT;
    END;

    [External]
    PROCEDURE ValidateRec@1();
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      TESTFIELD("Data Exch. Def Code");
      TESTFIELD("Column No.");

      DataExchDef.GET("Data Exch. Def Code");

      if DataExchDef."File Type" = DataExchDef."File Type"::"Fixed Text" then
        TESTFIELD(Length);

      if IsDataFormatRequired then
        TESTFIELD("Data Format");

      if IsDataFormattingCultureRequired then
        TESTFIELD("Data Formatting Culture");
    END;

    [External]
    PROCEDURE IsDataFormatRequired@12() : Boolean;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      if IsXML or IsJson then
        exit(false);

      DataExchDef.GET("Data Exch. Def Code");

      case "Data Type" of
        "Data Type"::Date:
          exit(DataExchDef.Type <> DataExchDef.Type::"Payment Export");
        "Data Type"::Text:
          ;
        else
          exit(DataExchDef.Type = DataExchDef.Type::"Payment Export");
      end;
    END;

    [External]
    PROCEDURE IsDataFormattingCultureRequired@4() : Boolean;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      if ("Data Type" <> "Data Type"::Text) and not IsXML and not IsJson then begin
        DataExchDef.GET("Data Exch. Def Code");
        exit(DataExchDef.Type <> DataExchDef.Type::"Payment Export");
      end;
    END;

    LOCAL PROCEDURE IsXML@8() : Boolean;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      DataExchDef.GET("Data Exch. Def Code");
      exit(DataExchDef."File Type" = DataExchDef."File Type"::Xml);
    END;

    LOCAL PROCEDURE IsJson@11() : Boolean;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      DataExchDef.GET("Data Exch. Def Code");
      exit(DataExchDef."File Type" = DataExchDef."File Type"::Json);
    END;

    [External]
    PROCEDURE SetXMLDataFormattingValues@21(SimpleDataType@1000 : Text);
    VAR
      DataExchColDef@1001 : Record "Data Exch. Column Def";
    BEGIN
      case DELCHR(LOWERCASE(SimpleDataType)) of
        'decimal':
          "Data Type" := DataExchColDef."Data Type"::Decimal;
        'date','datetime':
          "Data Type" := DataExchColDef."Data Type"::Date;
        else
          "Data Type" := DataExchColDef."Data Type"::Text;
      end;
      MODIFY;
    END;

    [External]
    PROCEDURE IsOfDataLine@10() : Boolean;
    VAR
      DataExchLineDef@1000 : Record "Data Exch. Line Def";
    BEGIN
      DataExchLineDef.GET("Data Exch. Def Code","Data Exch. Line Def Code");

      if not (IsXML or IsJson) or (DataExchLineDef."Data Line Tag" = '') then
        exit(true);

      exit(STRPOS(Path,DataExchLineDef."Data Line Tag") > 0);
    END;

    BEGIN
    END.
  }
}

