OBJECT Codeunit 1223 SEPA CT-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    OnRun=BEGIN
            DeletePaymentFileErrors;
            CheckGenJnlLine(Rec);
            CheckBank(Rec);
            CheckCustVendEmpl(Rec);
          END;

  }
  CODE
  {
    VAR
      MustBeBankAccErr@1003 : TextConst 'ENU=The balancing account must be a bank account.';
      MustBeVendorEmployeeOrCustomerErr@1001 : TextConst 'ENU=The account must be a vendor, customer or employee account.';
      MustBeVendEmplPmtOrCustRefundErr@1008 : TextConst 'ENU=Only vendor and employee payments and customer refunds are allowed.';
      MustBePositiveErr@1000 : TextConst 'ENU=The amount must be positive.';
      TransferDateErr@1002 : TextConst 'ENU=The earliest possible transfer date is today.';
      EuroCurrErr@1004 : TextConst '@@@="%1= bank account No, %2 export format; Example: Only transactions in euro (EUR) are allowed, because the GIRO bank account is set up to use the SEPACT export format.";ENU=Only transactions in euro (EUR) are allowed, because the %1 bank account is set up to use the %2 export format.';
      FieldBlankErr@1006 : TextConst '@@@="%1= field name. Example: The Name field must be filled.";ENU=The %1 field must be filled.';
      FieldKeyBlankErr@1007 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.';

    LOCAL PROCEDURE CheckGenJnlLine@2(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      GLSetup@1002 : Record "General Ledger Setup";
      BankAccount@1001 : Record "Bank Account";
      GenJournalBatch@1003 : Record "Gen. Journal Batch";
    BEGIN
      GLSetup.GET;
      if GenJournalBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") then
        GenJournalBatch.OnCheckGenJournalLineExportRestrictions;
      with GenJnlLine do begin
        if "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" then
          InsertPaymentFileError(MustBeBankAccErr);

        if "Bal. Account No." = '' then
          AddFieldEmptyError(GenJnlLine,TABLECAPTION,FIELDCAPTION("Bal. Account No."),'');

        if "Recipient Bank Account" = '' then
          AddFieldEmptyError(GenJnlLine,TABLECAPTION,FIELDCAPTION("Recipient Bank Account"),'');

        if not ("Account Type" in ["Account Type"::Vendor,"Account Type"::Customer,"Account Type"::Employee]) then
          InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);

        if (("Account Type" = "Account Type"::Vendor) and ("Document Type" <> "Document Type"::Payment)) or
           (("Account Type" = "Account Type"::Customer) and ("Document Type" <> "Document Type"::Refund)) or
           (("Account Type" = "Account Type"::Employee) and ("Document Type" <> "Document Type"::Payment))
        then
          InsertPaymentFileError(STRSUBSTNO(MustBeVendEmplPmtOrCustRefundErr));

        if Amount <= 0 then
          InsertPaymentFileError(MustBePositiveErr);

        if "Currency Code" <> GLSetup.GetCurrencyCode('EUR') then begin
          BankAccount.GET("Bal. Account No.");
          InsertPaymentFileError(STRSUBSTNO(EuroCurrErr,"Bal. Account No.",BankAccount."Payment Export Format"));
        end;

        if "Posting Date" < TODAY then
          InsertPaymentFileError(TransferDateErr);
      end;
    END;

    LOCAL PROCEDURE CheckBank@3(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      BankAccount@1001 : Record "Bank Account";
    BEGIN
      with GenJnlLine do
        if BankAccount.GET("Bal. Account No.") then begin
          if BankAccount.IBAN = '' then
            AddFieldEmptyError(GenJnlLine,BankAccount.TABLECAPTION,BankAccount.FIELDCAPTION(IBAN),"Bal. Account No.");
        end;
    END;

    LOCAL PROCEDURE CheckCustVendEmpl@4(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      Customer@1004 : Record Customer;
      CustomerBankAccount@1003 : Record "Customer Bank Account";
      Vendor@1002 : Record Vendor;
      VendorBankAccount@1001 : Record "Vendor Bank Account";
      Employee@1005 : Record Employee;
    BEGIN
      with GenJnlLine do begin
        if "Account No." = '' then begin
          InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);
          exit;
        end;
        case "Account Type" of
          "Account Type"::Customer:
            begin
              Customer.GET("Account No.");
              if Customer.Name = '' then
                AddFieldEmptyError(GenJnlLine,Customer.TABLECAPTION,Customer.FIELDCAPTION(Name),"Account No.");
              if "Recipient Bank Account" <> '' then begin
                CustomerBankAccount.GET(Customer."No.","Recipient Bank Account");
                if CustomerBankAccount.IBAN = '' then
                  AddFieldEmptyError(
                    GenJnlLine,CustomerBankAccount.TABLECAPTION,CustomerBankAccount.FIELDCAPTION(IBAN),"Recipient Bank Account");
              end;
            end;
          "Account Type"::Vendor:
            begin
              Vendor.GET("Account No.");
              if Vendor.Name = '' then
                AddFieldEmptyError(GenJnlLine,Vendor.TABLECAPTION,Vendor.FIELDCAPTION(Name),"Account No.");
              if "Recipient Bank Account" <> '' then begin
                VendorBankAccount.GET(Vendor."No.","Recipient Bank Account");
                if VendorBankAccount.IBAN = '' then
                  AddFieldEmptyError(
                    GenJnlLine,VendorBankAccount.TABLECAPTION,VendorBankAccount.FIELDCAPTION(IBAN),"Recipient Bank Account");
              end;
            end;
          "Account Type"::Employee:
            begin
              Employee.GET("Account No.");
              if Employee.FullName = '' then
                AddFieldEmptyError(GenJnlLine,Employee.TABLECAPTION,Employee.FIELDCAPTION("First Name"),"Account No.");
              if "Recipient Bank Account" <> '' then begin
                if Employee.IBAN = '' then
                  AddFieldEmptyError(
                    GenJnlLine,Employee.TABLECAPTION,Employee.FIELDCAPTION(IBAN),"Recipient Bank Account");
              end;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE AddFieldEmptyError@1(VAR GenJnlLine@1002 : Record "Gen. Journal Line";TableCaption@1000 : Text;FieldCaption@1001 : Text;KeyValue@1003 : Text);
    VAR
      ErrorText@1004 : Text;
    BEGIN
      if KeyValue = '' then
        ErrorText := STRSUBSTNO(FieldBlankErr,FieldCaption)
      else
        ErrorText := STRSUBSTNO(FieldKeyBlankErr,TableCaption,KeyValue,FieldCaption);
      GenJnlLine.InsertPaymentFileError(ErrorText);
    END;

    BEGIN
    END.
  }
}

