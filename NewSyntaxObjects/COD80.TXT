OBJECT Codeunit 80 Sales-Post
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Sales Header";
    Permissions=TableData "Sales Line"=imd,
                TableData "Purchase Header"=m,
                TableData "Purchase Line"=m,
                TableData "Invoice Post. Buffer"=imd,
                TableData "Sales Shipment Header"=imd,
                TableData "Sales Shipment Line"=imd,
                TableData "Sales Invoice Header"=imd,
                TableData "Sales Invoice Line"=imd,
                TableData "Sales Cr.Memo Header"=imd,
                TableData "Sales Cr.Memo Line"=imd,
                TableData "Purch. Rcpt. Header"=imd,
                TableData "Purch. Rcpt. Line"=imd,
                TableData "Drop Shpt. Post. Buffer"=imd,
                TableData "General Posting Setup"=imd,
                TableData "Posted Assemble-to-Order Link"=i,
                TableData "Item Entry Relation"=ri,
                TableData "Value Entry Relation"=rid,
                TableData "Return Receipt Header"=imd,
                TableData "Return Receipt Line"=imd;
    OnRun=VAR
            SalesHeader@1005 : Record "Sales Header";
            SalesLine@1001 : Record "Sales Line";
            TempInvoicePostBuffer@1000 : TEMPORARY Record "Invoice Post. Buffer";
            TempItemLedgEntryNotInvoiced@1006 : TEMPORARY Record "Item Ledger Entry";
            CustLedgEntry@1013 : Record "Cust. Ledger Entry";
            TempCombinedSalesLine@1022 : TEMPORARY Record "Sales Line";
            TempServiceItem2@1040 : TEMPORARY Record "Service Item";
            TempServiceItemComp2@1038 : TEMPORARY Record "Service Item Component";
            TempVATAmountLine@1043 : TEMPORARY Record "VAT Amount Line";
            TempVATAmountLineRemainder@1042 : TEMPORARY Record "VAT Amount Line";
            TempDropShptPostBuffer@1009 : TEMPORARY Record "Drop Shpt. Post. Buffer";
            UpdateAnalysisView@1002 : Codeunit "Update Analysis View";
            UpdateItemAnalysisView@1014 : Codeunit "Update Item Analysis View";
            HasATOShippedNotInvoiced@1012 : Boolean;
            EverythingInvoiced@1034 : Boolean;
            BiggestLineNo@1020 : Integer;
            ICGenJnlLineNo@1032 : Integer;
            LineCount@1035 : Integer;
          BEGIN
            OnBeforePostSalesDoc(Rec);

            ValidatePostingAndDocumentDate(Rec);

            if PreviewMode then begin
              CLEARALL;
              PreviewMode := true;
            end else
              CLEARALL;

            GetGLSetup;
            GetCurrency("Currency Code");

            SalesSetup.GET;
            SalesHeader := Rec;
            FillTempLines(SalesHeader);
            TempServiceItem2.DELETEALL;
            TempServiceItemComp2.DELETEALL;

            // Header
            CheckAndUpdate(SalesHeader);

            TempDeferralHeader.DELETEALL;
            TempDeferralLine.DELETEALL;
            TempInvoicePostBuffer.DELETEALL;
            TempDropShptPostBuffer.DELETEALL;
            EverythingInvoiced := true;

            // Lines
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            LineCount := 0;
            RoundingLineInserted := false;
            MergeSaleslines(SalesHeader,SalesLine,TempPrepaymentSalesLine,TempCombinedSalesLine);
            AdjustFinalInvWith100PctPrepmt(TempCombinedSalesLine);

            TempVATAmountLineRemainder.DELETEALL;
            SalesLine.CalcVATAmountLines(1,SalesHeader,TempCombinedSalesLine,TempVATAmountLine);

            SalesLinesProcessed := false;
            if SalesLine.FINDFIRST then
              repeat
                ItemJnlRollRndg := false;
                LineCount := LineCount + 1;
                Window.UPDATE(2,LineCount);

                PostSalesLine(
                  SalesHeader,SalesLine,EverythingInvoiced,TempInvoicePostBuffer,TempVATAmountLine,TempVATAmountLineRemainder,
                  TempItemLedgEntryNotInvoiced,HasATOShippedNotInvoiced,TempDropShptPostBuffer,ICGenJnlLineNo,
                  TempServiceItem2,TempServiceItemComp2);

                if RoundingLineInserted then
                  LastLineRetrieved := true
                else begin
                  BiggestLineNo := MAX(BiggestLineNo,SalesLine."Line No.");
                  LastLineRetrieved := GetNextSalesline(SalesLine);
                  if LastLineRetrieved and SalesSetup."Invoice Rounding" then
                    InvoiceRounding(SalesHeader,SalesLine,false,BiggestLineNo);
                end;
              until LastLineRetrieved;

            if not SalesHeader.IsCreditDocType then begin
              ReverseAmount(TotalSalesLine);
              ReverseAmount(TotalSalesLineLCY);
              TotalSalesLineLCY."Unit Cost (LCY)" := -TotalSalesLineLCY."Unit Cost (LCY)";
            end;

            PostDropOrderShipment(SalesHeader,TempDropShptPostBuffer);
            if SalesHeader.Invoice then
              PostGLAndCustomer(SalesHeader,TempInvoicePostBuffer,CustLedgEntry);

            if ICGenJnlLineNo > 0 then
              PostICGenJnl;

            MakeInventoryAdjustment;
            UpdateLastPostingNos(SalesHeader);

            FinalizePosting(SalesHeader,EverythingInvoiced,TempDropShptPostBuffer);

            Rec := SalesHeader;
            SynchBOMSerialNo(TempServiceItem2,TempServiceItemComp2);
            if not InvtPickPutaway then begin
              COMMIT;
              UpdateAnalysisView.UpdateAll(0,true);
              UpdateItemAnalysisView.UpdateAll(0,true);
            end;

            OnAfterPostSalesDoc(
              Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",SalesInvHeader."No.",SalesCrMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      NothingToPostErr@1000 : TextConst 'ENU=There is nothing to post.';
      PostingLinesMsg@1001 : TextConst '@@@=Counter;ENU=Posting lines              #2######\';
      PostingSalesAndVATMsg@1002 : TextConst '@@@=Counter;ENU=Posting sales and VAT      #3######\';
      PostingCustomersMsg@1003 : TextConst '@@@=Counter;ENU=Posting to customers       #4######\';
      PostingBalAccountMsg@1004 : TextConst '@@@=Counter;ENU=Posting to bal. account    #5######';
      PostingLines2Msg@1005 : TextConst '@@@=Counter;ENU=Posting lines              #2######';
      InvoiceNoMsg@1006 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Invoice No.";ENU=%1 %2 -> Invoice %3';
      CreditMemoNoMsg@1007 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Credit Memo No.";ENU=%1 %2 -> Credit Memo %3';
      DropShipmentErr@1008 : TextConst '@@@="%1 = Line No.";ENU=You cannot ship sales order line %1. The line is marked as a drop shipment and is not yet associated with a purchase order.';
      ShipmentSameSignErr@1010 : TextConst 'ENU=must have the same sign as the shipment';
      ShipmentLinesDeletedErr@1011 : TextConst 'ENU=The shipment lines have been deleted.';
      InvoiceMoreThanShippedErr@1012 : TextConst '@@@="%1 = Order No.";ENU=You cannot invoice more than you have shipped for order %1.';
      VATAmountTxt@1013 : TextConst 'ENU=VAT Amount';
      VATRateTxt@1014 : TextConst '@@@="%1 = VAT Rate";ENU=%1% VAT';
      BlanketOrderQuantityGreaterThanErr@1015 : TextConst '@@@="%1 = Quantity";ENU=in the associated blanket order must not be greater than %1';
      BlanketOrderQuantityReducedErr@1016 : TextConst 'ENU=in the associated blanket order must not be reduced';
      ShipInvoiceReceiveErr@1017 : TextConst 'ENU=Please enter "Yes" in Ship and/or Invoice and/or Receive.';
      WarehouseRequiredErr@1018 : TextConst '@@@="%1/%2 = Document Type, %3/%4 - Document No.,%5/%6 = Line No.";ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6."';
      ReturnReceiptSameSignErr@1021 : TextConst 'ENU=must have the same sign as the return receipt';
      ReturnReceiptInvoicedErr@1022 : TextConst '@@@="%1 = Line No., %2 = Document No.";ENU=Line %1 of the return receipt %2, which you are attempting to invoice, has already been invoiced.';
      ShipmentInvoiceErr@1023 : TextConst '@@@="%1 = Line No., %2 = Document No.";ENU=Line %1 of the shipment %2, which you are attempting to invoice, has already been invoiced.';
      QuantityToInvoiceGreaterErr@1024 : TextConst '@@@="%1 = Document No.";ENU=The quantity you are attempting to invoice is greater than the quantity in shipment %1.';
      DimensionIsBlockedErr@1025 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The combination of dimensions used in %1 %2 is blocked (Error: %3).';
      LineDimensionBlockedErr@1026 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked (Error: %4).';
      InvalidDimensionsErr@1027 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The dimensions used in %1 %2 are invalid (Error: %3).';
      LineInvalidDimensionsErr@1028 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The dimensions used in %1 %2, line no. %3 are invalid (Error: %4).';
      CannotAssignMoreErr@1029 : TextConst '@@@="%1 = Quantity, %2/%3 = Document Type, %4/%5 - Document No.,%6/%7 = Line No.";ENU="You cannot assign more than %1 units in %2 = %3, %4 = %5,%6 = %7."';
      MustAssignErr@1030 : TextConst 'ENU=You must assign all item charges, if you invoice everything.';
      Item@1164 : Record Item;
      SalesSetup@1032 : Record "Sales & Receivables Setup";
      GLSetup@1033 : Record "General Ledger Setup";
      GLEntry@1034 : Record "G/L Entry";
      TempSalesLineGlobal@1051 : TEMPORARY Record "Sales Line";
      xSalesLine@1038 : Record "Sales Line";
      SalesLineACY@1039 : Record "Sales Line";
      TotalSalesLine@1040 : Record "Sales Line";
      TotalSalesLineLCY@1041 : Record "Sales Line";
      TempPrepaymentSalesLine@1170 : TEMPORARY Record "Sales Line";
      SalesShptHeader@1043 : Record "Sales Shipment Header";
      SalesInvHeader@1045 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1047 : Record "Sales Cr.Memo Header";
      ReturnRcptHeader@1049 : Record "Return Receipt Header";
      PurchRcptHeader@1053 : Record "Purch. Rcpt. Header";
      PurchRcptLine@1054 : Record "Purch. Rcpt. Line";
      ItemChargeAssgntSales@1042 : Record "Item Charge Assignment (Sales)";
      TempItemChargeAssgntSales@1037 : TEMPORARY Record "Item Charge Assignment (Sales)";
      SourceCodeSetup@1061 : Record "Source Code Setup";
      Currency@1068 : Record Currency;
      WhseRcptHeader@1019 : Record "Warehouse Receipt Header";
      TempWhseRcptHeader@1145 : TEMPORARY Record "Warehouse Receipt Header";
      WhseShptHeader@1148 : Record "Warehouse Shipment Header";
      TempWhseShptHeader@1149 : TEMPORARY Record "Warehouse Shipment Header";
      PostedWhseRcptHeader@1142 : Record "Posted Whse. Receipt Header";
      PostedWhseRcptLine@1146 : Record "Posted Whse. Receipt Line";
      PostedWhseShptHeader@1150 : Record "Posted Whse. Shipment Header";
      PostedWhseShptLine@1151 : Record "Posted Whse. Shipment Line";
      Location@1080 : Record Location;
      TempHandlingSpecification@1088 : TEMPORARY Record "Tracking Specification";
      TempATOTrackingSpecification@1063 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecification@1139 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecificationInv@1160 : TEMPORARY Record "Tracking Specification";
      TempWhseSplitSpecification@1190 : TEMPORARY Record "Tracking Specification";
      TempValueEntryRelation@1140 : TEMPORARY Record "Value Entry Relation";
      JobTaskSalesLine@1167 : Record "Sales Line";
      TempICGenJnlLine@2165 : TEMPORARY Record "Gen. Journal Line";
      TempPrepmtDeductLCYSalesLine@1134 : TEMPORARY Record "Sales Line";
      TempSKU@1175 : TEMPORARY Record "Stockkeeping Unit";
      DeferralPostBuffer@1046 : ARRAY [2] OF Record "Deferral Post. Buffer";
      TempDeferralHeader@1009 : TEMPORARY Record "Deferral Header";
      TempDeferralLine@1035 : TEMPORARY Record "Deferral Line";
      GenJnlPostLine@1082 : Codeunit "Gen. Jnl.-Post Line";
      ResJnlPostLine@1083 : Codeunit "Res. Jnl.-Post Line";
      ItemJnlPostLine@1085 : Codeunit "Item Jnl.-Post Line";
      ReserveSalesLine@1086 : Codeunit "Sales Line-Reserve";
      IdentityManagement@1044 : Codeunit "Identity Management";
      ApprovalsMgmt@1165 : Codeunit "Approvals Mgmt.";
      ItemTrackingMgt@1196 : Codeunit "Item Tracking Management";
      WhseJnlPostLine@1141 : Codeunit "Whse. Jnl.-Register Line";
      WhsePostRcpt@1152 : Codeunit "Whse.-Post Receipt";
      WhsePostShpt@1153 : Codeunit "Whse.-Post Shipment";
      PurchPost@1159 : Codeunit "Purch.-Post";
      CostCalcMgt@1163 : Codeunit "Cost Calculation Management";
      JobPostLine@1166 : Codeunit "Job Post-Line";
      ServItemMgt@1055 : Codeunit ServItemManagement;
      AsmPost@1067 : Codeunit "Assembly-Post";
      DeferralUtilities@1048 : Codeunit "Deferral Utilities";
      Window@1097 : Dialog;
      UseDate@1099 : Date;
      GenJnlLineDocNo@1101 : Code[20];
      GenJnlLineExtDocNo@1102 : Code[35];
      SrcCode@1103 : Code[10];
      GenJnlLineDocType@1104 : Integer;
      ItemLedgShptEntryNo@1106 : Integer;
      FALineNo@1108 : Integer;
      RoundingLineNo@1109 : Integer;
      DeferralLineNo@1050 : Integer;
      InvDefLineNo@1058 : Integer;
      RemQtyToBeInvoiced@1111 : Decimal;
      RemQtyToBeInvoicedBase@1112 : Decimal;
      RemAmt@1136 : Decimal;
      RemDiscAmt@1137 : Decimal;
      LastLineRetrieved@1116 : Boolean;
      RoundingLineInserted@1117 : Boolean;
      DropShipOrder@1119 : Boolean;
      CannotAssignInvoicedErr@1127 : TextConst '@@@="%1 = Sales Line, %2/%3 = Document Type, %4/%5 - Document No.,%6/%7 = Line No.";ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced."';
      InvoiceMoreThanReceivedErr@1094 : TextConst '@@@="%1 = Order No.";ENU=You cannot invoice more than you have received for return order %1.';
      ReturnReceiptLinesDeletedErr@1095 : TextConst 'ENU=The return receipt lines have been deleted.';
      InvoiceGreaterThanReturnReceiptErr@1130 : TextConst '@@@="%1 = Receipt No.";ENU=The quantity you are attempting to invoice is greater than the quantity in return receipt %1.';
      ItemJnlRollRndg@1135 : Boolean;
      RelatedItemLedgEntriesNotFoundErr@1129 : TextConst 'ENU=Related item ledger entries cannot be found.';
      ItemTrackingWrongSignErr@1147 : TextConst 'ENU=Item Tracking is signed wrongly.';
      ItemTrackingMismatchErr@1143 : TextConst 'ENU=Item Tracking does not match.';
      WhseShip@1110 : Boolean;
      WhseReceive@1154 : Boolean;
      InvtPickPutaway@1155 : Boolean;
      PostingDateNotAllowedErr@1157 : TextConst 'ENU=is not within your range of allowed posting dates';
      ItemTrackQuantityMismatchErr@1066 : TextConst '@@@="%1 = Quantity";ENU=The %1 does not match the quantity defined in item tracking.';
      CannotBeGreaterThanErr@1084 : TextConst '@@@="%1 = Amount";ENU=cannot be more than %1.';
      CannotBeSmallerThanErr@1105 : TextConst '@@@="%1 = Amount";ENU=must be at least %1.';
      JobContractLine@1172 : Boolean;
      GLSetupRead@1133 : Boolean;
      ItemTrkgAlreadyOverruled@1059 : Boolean;
      PrepAmountToDeductToBigErr@1076 : TextConst '@@@="%1 = Prepmt Amt to Deduct, %2 = Max Amount";ENU=The total %1 cannot be more than %2.';
      PrepAmountToDeductToSmallErr@1091 : TextConst '@@@="%1 = Prepmt Amt to Deduct, %2 = Max Amount";ENU=The total %1 must be at least %2.';
      MustAssignItemChargeErr@1102601000 : TextConst '@@@="%1 = Item Charge No.";ENU=You must assign item charge %1 if you want to invoice it.';
      CannotInvoiceItemChargeErr@1102601001 : TextConst '@@@="%1 = Item Charge No.";ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.';
      SalesLinesProcessed@1072 : Boolean;
      AssemblyCheckProgressMsg@1073 : TextConst '@@@="%1 = Text, %2 = Progress bar";ENU=#1#################################\\Checking Assembly #2###########';
      AssemblyPostProgressMsg@1090 : TextConst '@@@="%1 = Text, %2 = Progress bar";ENU=#1#################################\\Posting Assembly #2###########';
      AssemblyFinalizeProgressMsg@1168 : TextConst '@@@="%1 = Text, %2 = Progress bar";ENU=#1#################################\\Finalizing Assembly #2###########';
      ReassignItemChargeErr@1171 : TextConst 'ENU=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.';
      ReservationDisruptedQst@1132 : TextConst '@@@="One or more reservation entries exist for the item with No. = 1000, Location Code = SILVER, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      NotSupportedDocumentTypeErr@1020 : TextConst '@@@="%1 = Document Type";ENU=Document type %1 is not supported.';
      PreviewMode@1031 : Boolean;
      NoDeferralScheduleErr@1064 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1060 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      DownloadShipmentAlsoQst@1036 : TextConst 'ENU=You can also download the Sales - Shipment document now. Alternatively, you can access it from the Posted Sales Shipments window later.\\Do you want to download the Sales - Shipment document now?';

    LOCAL PROCEDURE CopyToTempLines@180(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDSET then
        repeat
          TempSalesLineGlobal := SalesLine;
          TempSalesLineGlobal.INSERT;
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillTempLines@36(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      TempSalesLineGlobal.RESET;
      if TempSalesLineGlobal.ISEMPTY then
        CopyToTempLines(SalesHeader);
    END;

    LOCAL PROCEDURE ModifyTempLine@184(VAR TempSalesLineLocal@1000 : TEMPORARY Record "Sales Line");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      TempSalesLineLocal.MODIFY;
      SalesLine := TempSalesLineLocal;
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE RefreshTempLines@28(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      TempSalesLineGlobal.RESET;
      TempSalesLineGlobal.DELETEALL;
      CopyToTempLines(SalesHeader);
    END;

    LOCAL PROCEDURE ResetTempLines@131(VAR TempSalesLineLocal@1000 : TEMPORARY Record "Sales Line");
    BEGIN
      TempSalesLineLocal.RESET;
      TempSalesLineLocal.COPY(TempSalesLineGlobal,true);
    END;

    LOCAL PROCEDURE CalcInvoice@145(SalesHeader@1000 : Record "Sales Header") NewInvoice : Boolean;
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
    BEGIN
      with SalesHeader do begin
        ResetTempLines(TempSalesLine);
        TempSalesLine.SETFILTER(Quantity,'<>0');
        if "Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"] then
          TempSalesLine.SETFILTER("Qty. to Invoice",'<>0');
        NewInvoice := not TempSalesLine.ISEMPTY;
        if NewInvoice then
          case "Document Type" of
            "Document Type"::Order:
              if not Ship then begin
                TempSalesLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
                NewInvoice := not TempSalesLine.ISEMPTY;
              end;
            "Document Type"::"Return Order":
              if not Receive then begin
                TempSalesLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
                NewInvoice := not TempSalesLine.ISEMPTY;
              end;
          end;
        exit(NewInvoice);
      end;
    END;

    LOCAL PROCEDURE CalcInvDiscount@18(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1001 : Record "Sales Line";
      TempInvoice@1004 : Boolean;
      TempShpt@1003 : Boolean;
      TempReturn@1002 : Boolean;
    BEGIN
      with SalesHeader do begin
        if not (SalesSetup."Calc. Inv. Discount" and (Status <> Status::Open)) then
          exit;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.FINDFIRST;
        TempInvoice := Invoice;
        TempShpt := Ship;
        TempReturn := Receive;
        CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
        RefreshTempLines(SalesHeader);
        GET("Document Type","No.");
        Invoice := TempInvoice;
        Ship := TempShpt;
        Receive := TempReturn;
        if not PreviewMode then
          COMMIT;
      end;
    END;

    LOCAL PROCEDURE CheckAndUpdate@153(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      GenJnlCheckLine@1001 : Codeunit "Gen. Jnl.-Check Line";
      ModifyHeader@1003 : Boolean;
    BEGIN
      with SalesHeader do begin
        // Check
        CheckMandatoryHeaderFields(SalesHeader);
        if GenJnlCheckLine.DateNotAllowed("Posting Date") then
          FIELDERROR("Posting Date",PostingDateNotAllowedErr);

        SetPostingFlags(SalesHeader);
        InitProgressWindow(SalesHeader);

        InvtPickPutaway := "Posting from Whse. Ref." <> 0;
        "Posting from Whse. Ref." := 0;

        CheckDim(SalesHeader);

        CheckPostRestrictions(SalesHeader);

        if Invoice then
          Invoice := CalcInvoice(SalesHeader);

        if Invoice then
          CopyAndCheckItemCharge(SalesHeader);

        if Invoice and not IsCreditDocType then
          TESTFIELD("Due Date");

        if Ship then begin
          InitPostATOs(SalesHeader);
          Ship := CheckTrackingAndWarehouseForShip(SalesHeader);
        end;

        if Receive then
          Receive := CheckTrackingAndWarehouseForReceive(SalesHeader);

        if not (Ship or Invoice or Receive) then
          ERROR(NothingToPostErr);

        if ("Shipping Advice" = "Shipping Advice"::Complete) and Ship then
          CheckShippingAdvice;

        OnAfterCheckSalesDoc(SalesHeader);

        // Update
        if Invoice then
          CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,true);

        ModifyHeader := UpdatePostingNos(SalesHeader);

        DropShipOrder := UpdateAssosOrderPostingNos(SalesHeader);

        OnBeforePostCommitSalesDoc(SalesHeader,GenJnlPostLine,PreviewMode,ModifyHeader);
        if not PreviewMode and ModifyHeader then begin
          MODIFY;
          COMMIT;
        end;

        CalcInvDiscount(SalesHeader);
        ReleaseSalesDocument(SalesHeader);

        if Ship or Receive then
          ArchiveUnpostedOrder(SalesHeader);

        CheckICPartnerBlocked(SalesHeader);
        SendICDocument(SalesHeader,ModifyHeader);
        UpdateHandledICInboxTransaction(SalesHeader);

        LockTables;

        SourceCodeSetup.GET;
        SrcCode := SourceCodeSetup.Sales;

        InsertPostedHeaders(SalesHeader);

        UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
      end;
    END;

    LOCAL PROCEDURE PostSalesLine@161(SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1001 : Record "Sales Line";VAR EverythingInvoiced@1004 : Boolean;VAR TempInvoicePostBuffer@1017 : TEMPORARY Record "Invoice Post. Buffer";VAR TempVATAmountLine@1005 : TEMPORARY Record "VAT Amount Line";VAR TempVATAmountLineRemainder@1006 : TEMPORARY Record "VAT Amount Line";VAR TempItemLedgEntryNotInvoiced@1007 : TEMPORARY Record "Item Ledger Entry";HasATOShippedNotInvoiced@1008 : Boolean;VAR TempDropShptPostBuffer@1009 : TEMPORARY Record "Drop Shpt. Post. Buffer";VAR ICGenJnlLineNo@1010 : Integer;VAR TempServiceItem2@1012 : TEMPORARY Record "Service Item";VAR TempServiceItemComp2@1013 : TEMPORARY Record "Service Item Component");
    VAR
      SalesInvLine@1014 : Record "Sales Invoice Line";
      SalesCrMemoLine@1015 : Record "Sales Cr.Memo Line";
      TempPostedATOLink@1003 : TEMPORARY Record "Posted Assemble-to-Order Link";
      InvoicePostBuffer@1016 : Record "Invoice Post. Buffer";
      CostBaseAmount@1002 : Decimal;
    BEGIN
      with SalesLine do begin
        if Type = Type::Item then
          CostBaseAmount := "Line Amount";
        if "Qty. per Unit of Measure" = 0 then
          "Qty. per Unit of Measure" := 1;

        TestSalesLine(SalesHeader,SalesLine);

        TempPostedATOLink.RESET;
        TempPostedATOLink.DELETEALL;
        if SalesHeader.Ship then
          PostATO(SalesHeader,SalesLine,TempPostedATOLink);

        UpdateSalesLineBeforePost(SalesHeader,SalesLine);

        TestUpdatedSalesLine(SalesLine);

        if "Qty. to Invoice" + "Quantity Invoiced" <> Quantity then
          EverythingInvoiced := false;

        if Quantity <> 0 then
          DivideAmount(SalesHeader,SalesLine,1,"Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);

        CheckItemReservDisruption(SalesLine);
        RoundAmount(SalesHeader,SalesLine,"Qty. to Invoice");

        if not IsCreditDocType then begin
          ReverseAmount(SalesLine);
          ReverseAmount(SalesLineACY);
        end;

        RemQtyToBeInvoiced := "Qty. to Invoice";
        RemQtyToBeInvoicedBase := "Qty. to Invoice (Base)";

        PostItemTrackingLine(SalesHeader,SalesLine,TempItemLedgEntryNotInvoiced,HasATOShippedNotInvoiced);

        case Type of
          Type::"G/L Account":
            PostGLAccICLine(SalesHeader,SalesLine,ICGenJnlLineNo);
          Type::Item:
            PostItemLine(SalesHeader,SalesLine,TempDropShptPostBuffer,TempPostedATOLink);
          Type::Resource:
            PostResJnlLine(SalesHeader,SalesLine,JobTaskSalesLine);
          Type::"Charge (Item)":
            PostItemChargeLine(SalesHeader,SalesLine);
        end;

        if (Type >= Type::"G/L Account") and ("Qty. to Invoice" <> 0) then begin
          AdjustPrepmtAmountLCY(SalesHeader,SalesLine);
          FillInvoicePostingBuffer(SalesHeader,SalesLine,SalesLineACY,TempInvoicePostBuffer,InvoicePostBuffer);
          InsertPrepmtAdjInvPostingBuf(SalesHeader,SalesLine,TempInvoicePostBuffer,InvoicePostBuffer);
        end;

        if not ("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) then
          TESTFIELD("Job No.",'');

        if (SalesShptHeader."No." <> '') and ("Shipment No." = '') and
           not RoundingLineInserted and not "Prepayment Line"
        then
          InsertShipmentLine(SalesHeader,SalesShptHeader,SalesLine,CostBaseAmount,TempServiceItem2,TempServiceItemComp2);

        if (ReturnRcptHeader."No." <> '') and ("Return Receipt No." = '') and
           not RoundingLineInserted
        then
          InsertReturnReceiptLine(ReturnRcptHeader,SalesLine,CostBaseAmount);

        if SalesHeader.Invoice then
          if SalesHeader."Document Type" in [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice] then begin
            SalesInvLine.InitFromSalesLine(SalesInvHeader,xSalesLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
            OnBeforeSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine);
            SalesInvLine.INSERT(true);
            OnAfterSalesInvLineInsert(SalesInvLine,SalesInvHeader,xSalesLine);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesInvLine.GetDocumentType,
              SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
          end else begin
            SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,xSalesLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
            OnBeforeSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine);
            SalesCrMemoLine.INSERT(true);
            OnAfterSalesCrMemoLineInsert(SalesCrMemoLine,SalesCrMemoHeader,xSalesLine);
            CreatePostedDeferralScheduleFromSalesDoc(xSalesLine,SalesCrMemoLine.GetDocumentType,
              SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
          end;
      end;
    END;

    LOCAL PROCEDURE PostGLAndCustomer@164(SalesHeader@1000 : Record "Sales Header";VAR TempInvoicePostBuffer@1001 : TEMPORARY Record "Invoice Post. Buffer";VAR CustLedgEntry@1002 : Record "Cust. Ledger Entry");
    BEGIN
      with SalesHeader do begin
        // Post sales and VAT to G/L entries from posting buffer
        PostInvoicePostBuffer(SalesHeader,TempInvoicePostBuffer);

        // Post customer entry
        if GUIALLOWED then
          Window.UPDATE(4,1);
        PostCustomerEntry(
          SalesHeader,TotalSalesLine,TotalSalesLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);

        UpdateSalesHeader(CustLedgEntry);

        // Balancing account
        if "Bal. Account No." <> '' then begin
          if GUIALLOWED then
            Window.UPDATE(5,1);
          PostBalancingEntry(
            SalesHeader,TotalSalesLine,TotalSalesLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
        end;
      end;
    END;

    LOCAL PROCEDURE PostGLAccICLine@160(SalesHeader@1000 : Record "Sales Header";SalesLine@1003 : Record "Sales Line";VAR ICGenJnlLineNo@1002 : Integer);
    VAR
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if (SalesLine."No." <> '') and not SalesLine."System-Created Entry" then begin
        GLAcc.GET(SalesLine."No.");
        GLAcc.TESTFIELD("Direct Posting",true);
        if (SalesLine."IC Partner Code" <> '') and SalesHeader.Invoice then
          InsertICGenJnlLine(SalesHeader,xSalesLine,ICGenJnlLineNo);
      end;
    END;

    LOCAL PROCEDURE PostItemLine@170(SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1001 : Record "Sales Line";VAR TempDropShptPostBuffer@1002 : TEMPORARY Record "Drop Shpt. Post. Buffer";VAR TempPostedATOLink@1003 : TEMPORARY Record "Posted Assemble-to-Order Link");
    VAR
      DummyTrackingSpecification@1004 : Record "Tracking Specification";
    BEGIN
      ItemLedgShptEntryNo := 0;
      with SalesHeader do begin
        if (SalesLine."Qty. to Ship" <> 0) and (SalesLine."Purch. Order Line No." <> 0) then begin
          TempDropShptPostBuffer."Order No." := SalesLine."Purchase Order No.";
          TempDropShptPostBuffer."Order Line No." := SalesLine."Purch. Order Line No.";
          TempDropShptPostBuffer.Quantity := -SalesLine."Qty. to Ship";
          TempDropShptPostBuffer."Quantity (Base)" := -SalesLine."Qty. to Ship (Base)";
          TempDropShptPostBuffer."Item Shpt. Entry No." :=
            PostAssocItemJnlLine(SalesHeader,SalesLine,TempDropShptPostBuffer.Quantity,TempDropShptPostBuffer."Quantity (Base)");
          TempDropShptPostBuffer.INSERT;
          SalesLine."Appl.-to Item Entry" := TempDropShptPostBuffer."Item Shpt. Entry No.";
        end;

        CLEAR(TempPostedATOLink);
        TempPostedATOLink.SETRANGE("Order No.",SalesLine."Document No.");
        TempPostedATOLink.SETRANGE("Order Line No.",SalesLine."Line No.");
        if TempPostedATOLink.FINDFIRST then
          PostATOAssocItemJnlLine(SalesHeader,SalesLine,TempPostedATOLink,RemQtyToBeInvoiced,RemQtyToBeInvoicedBase);

        if RemQtyToBeInvoiced <> 0 then
          ItemLedgShptEntryNo :=
            PostItemJnlLine(
              SalesHeader,SalesLine,
              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
              0,'',DummyTrackingSpecification,false);

        if SalesLine.IsCreditDocType then begin
          if ABS(SalesLine."Return Qty. to Receive") > ABS(RemQtyToBeInvoiced) then
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesHeader,SalesLine,
                SalesLine."Return Qty. to Receive" - RemQtyToBeInvoiced,
                SalesLine."Return Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                0,0,0,'',DummyTrackingSpecification,false);
        end else begin
          if ABS(SalesLine."Qty. to Ship") > ABS(RemQtyToBeInvoiced) + ABS(TempPostedATOLink."Assembled Quantity") then
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesHeader,SalesLine,
                SalesLine."Qty. to Ship" - TempPostedATOLink."Assembled Quantity" - RemQtyToBeInvoiced,
                SalesLine."Qty. to Ship (Base)" - TempPostedATOLink."Assembled Quantity (Base)" - RemQtyToBeInvoicedBase,
                0,0,0,'',DummyTrackingSpecification,false);
        end;
      end;
    END;

    LOCAL PROCEDURE PostItemChargeLine@172(SalesHeader@1001 : Record "Sales Header";SalesLine@1002 : Record "Sales Line");
    VAR
      SalesLineBackup@1000 : Record "Sales Line";
    BEGIN
      if not (SalesHeader.Invoice and (SalesLine."Qty. to Invoice" <> 0)) then
        exit;

      ItemJnlRollRndg := true;
      SalesLineBackup.COPY(SalesLine);
      if FindTempItemChargeAssgntSales(SalesLineBackup."Line No.") then
        repeat
          case TempItemChargeAssgntSales."Applies-to Doc. Type" of
            TempItemChargeAssgntSales."Applies-to Doc. Type"::Shipment:
              begin
                PostItemChargePerShpt(SalesHeader,SalesLineBackup);
                TempItemChargeAssgntSales.MARK(true);
              end;
            TempItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt":
              begin
                PostItemChargePerRetRcpt(SalesHeader,SalesLineBackup);
                TempItemChargeAssgntSales.MARK(true);
              end;
            TempItemChargeAssgntSales."Applies-to Doc. Type"::Order,
            TempItemChargeAssgntSales."Applies-to Doc. Type"::Invoice,
            TempItemChargeAssgntSales."Applies-to Doc. Type"::"Return Order",
            TempItemChargeAssgntSales."Applies-to Doc. Type"::"Credit Memo":
              CheckItemCharge(TempItemChargeAssgntSales);
          end;
        until TempItemChargeAssgntSales.NEXT = 0;
    END;

    LOCAL PROCEDURE PostItemTrackingLine@162(SalesHeader@1000 : Record "Sales Header";SalesLine@1001 : Record "Sales Line";VAR TempItemLedgEntryNotInvoiced@1004 : TEMPORARY Record "Item Ledger Entry";HasATOShippedNotInvoiced@1005 : Boolean);
    VAR
      TempTrackingSpecification@1003 : TEMPORARY Record "Tracking Specification";
      TrackingSpecificationExists@1002 : Boolean;
    BEGIN
      if SalesLine."Prepayment Line" then
        exit;

      if SalesHeader.Invoice then
        if SalesLine."Qty. to Invoice" = 0 then
          TrackingSpecificationExists := false
        else
          TrackingSpecificationExists :=
            ReserveSalesLine.RetrieveInvoiceSpecification(SalesLine,TempTrackingSpecification);

      PostItemTracking(
        SalesHeader,SalesLine,TrackingSpecificationExists,TempTrackingSpecification,
        TempItemLedgEntryNotInvoiced,HasATOShippedNotInvoiced);

      if TrackingSpecificationExists then
        SaveInvoiceSpecification(TempTrackingSpecification);
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(SalesHeader@1017 : Record "Sales Header";SalesLine@1000 : Record "Sales Line";QtyToBeShipped@1001 : Decimal;QtyToBeShippedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1009 : Record "Tracking Specification";IsATO@1007 : Boolean) : Integer;
    VAR
      ItemJnlLine@1010 : Record "Item Journal Line";
      TempWhseJnlLine@1012 : TEMPORARY Record "Warehouse Journal Line";
      TempWhseTrackingSpecification@1008 : TEMPORARY Record "Tracking Specification";
      OriginalItemJnlLine@1013 : Record "Item Journal Line";
      CurrExchRate@1015 : Record "Currency Exchange Rate";
      PostWhseJnlLine@1011 : Boolean;
      CheckApplFromItemEntry@1014 : Boolean;
    BEGIN
      if not ItemJnlRollRndg then begin
        RemAmt := 0;
        RemDiscAmt := 0;
      end;

      with ItemJnlLine do begin
        INIT;
        CopyFromSalesHeader(SalesHeader);
        CopyFromSalesLine(SalesLine);
        "Country/Region Code" := GetCountryCode(SalesLine,SalesHeader);

        CopyTrackingFromSpec(TrackingSpecification);
        "Item Shpt. Entry No." := ItemLedgShptEntryNo;

        Quantity := -QtyToBeShipped;
        "Quantity (Base)" := -QtyToBeShippedBase;
        "Invoiced Quantity" := -QtyToBeInvoiced;
        "Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;

        if QtyToBeShipped = 0 then
          if SalesLine.IsCreditDocType then
            CopyDocumentFields(
              "Document Type"::"Sales Credit Memo",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series")
          else
            CopyDocumentFields(
              "Document Type"::"Sales Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series")
        else begin
          if SalesLine.IsCreditDocType then
            CopyDocumentFields(
              "Document Type"::"Sales Return Receipt",
              ReturnRcptHeader."No.",ReturnRcptHeader."External Document No.",SrcCode,ReturnRcptHeader."No. Series")
          else
            CopyDocumentFields(
              "Document Type"::"Sales Shipment",SalesShptHeader."No.",SalesShptHeader."External Document No.",SrcCode,
              SalesShptHeader."No. Series");
          if QtyToBeInvoiced <> 0 then begin
            if "Document No." = '' then
              if SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo" then
                CopyDocumentFields(
                  "Document Type"::"Sales Credit Memo",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series")
              else
                CopyDocumentFields(
                  "Document Type"::"Sales Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series");
            "Posting No. Series" := SalesHeader."Posting No. Series";
          end;
        end;

        if QtyToBeInvoiced <> 0 then
          "Invoice No." := GenJnlLineDocNo;

        "Assemble to Order" := IsATO;
        if "Assemble to Order" then
          "Applies-to Entry" := SalesLine.FindOpenATOEntry('','')
        else
          "Applies-to Entry" := SalesLine."Appl.-to Item Entry";

        if ItemChargeNo <> '' then begin
          "Item Charge No." := ItemChargeNo;
          SalesLine."Qty. to Invoice" := QtyToBeInvoiced;
        end else
          "Applies-from Entry" := SalesLine."Appl.-from Item Entry";

        if QtyToBeInvoiced <> 0 then begin
          Amount := -(SalesLine.Amount * (QtyToBeInvoiced / SalesLine."Qty. to Invoice") - RemAmt);
          if SalesHeader."Prices Including VAT" then
            "Discount Amount" :=
              -((SalesLine."Line Discount Amount" + SalesLine."Inv. Discount Amount") /
                (1 + SalesLine."VAT %" / 100) * (QtyToBeInvoiced / SalesLine."Qty. to Invoice") - RemDiscAmt)
          else
            "Discount Amount" :=
              -((SalesLine."Line Discount Amount" + SalesLine."Inv. Discount Amount") *
                (QtyToBeInvoiced / SalesLine."Qty. to Invoice") - RemDiscAmt);
          RemAmt := Amount - ROUND(Amount);
          RemDiscAmt := "Discount Amount" - ROUND("Discount Amount");
          Amount := ROUND(Amount);
          "Discount Amount" := ROUND("Discount Amount");
        end else begin
          if SalesHeader."Prices Including VAT" then
            Amount :=
              -((QtyToBeShipped * SalesLine."Unit Price" * (1 - SalesLine."Line Discount %" / 100) /
                 (1 + SalesLine."VAT %" / 100)) - RemAmt)
          else
            Amount :=
              -((QtyToBeShipped * SalesLine."Unit Price" * (1 - SalesLine."Line Discount %" / 100)) - RemAmt);
          RemAmt := Amount - ROUND(Amount);
          if SalesHeader."Currency Code" <> '' then
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",SalesHeader."Currency Code",
                  Amount,SalesHeader."Currency Factor"))
          else
            Amount := ROUND(Amount);
        end;

        if not JobContractLine then begin
          if SalesSetup."Exact Cost Reversing Mandatory" and (SalesLine.Type = SalesLine.Type::Item) then
            if SalesLine.IsCreditDocType then
              CheckApplFromItemEntry := SalesLine.Quantity > 0
            else
              CheckApplFromItemEntry := SalesLine.Quantity < 0;

          if (SalesLine."Location Code" <> '') and (SalesLine.Type = SalesLine.Type::Item) and (Quantity <> 0) then
            if ShouldPostWhseJnlLine(SalesLine) then begin
              CreateWhseJnlLine(ItemJnlLine,SalesLine,TempWhseJnlLine);
              PostWhseJnlLine := true;
            end;

          if QtyToBeShippedBase <> 0 then begin
            if SalesLine.IsCreditDocType then
              ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,false)
            else
              TransferReservToItemJnlLine(
                SalesLine,ItemJnlLine,-QtyToBeShippedBase,TempTrackingSpecification,CheckApplFromItemEntry);

            if CheckApplFromItemEntry and (not SalesLine.IsServiceItem) then
              SalesLine.TESTFIELD("Appl.-from Item Entry");
          end;

          OriginalItemJnlLine := ItemJnlLine;
          ItemJnlPostLine.RunWithCheck(ItemJnlLine);

          if IsATO then
            PostItemJnlLineTracking(
              SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempATOTrackingSpecification)
          else
            PostItemJnlLineTracking(SalesLine,TempWhseTrackingSpecification,PostWhseJnlLine,QtyToBeInvoiced,TempHandlingSpecification);
          PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification);

          if (SalesLine.Type = SalesLine.Type::Item) and SalesHeader.Invoice then
            PostItemJnlLineItemCharges(SalesHeader,SalesLine,OriginalItemJnlLine,"Item Shpt. Entry No.");
        end;
        exit("Item Shpt. Entry No.");
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLineItemCharges@165(SalesHeader@1000 : Record "Sales Header";SalesLine@1001 : Record "Sales Line";VAR OriginalItemJnlLine@1003 : Record "Item Journal Line";ItemShptEntryNo@1004 : Integer);
    VAR
      ItemChargeSalesLine@1002 : Record "Sales Line";
    BEGIN
      with SalesLine do begin
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETCURRENTKEY(
          "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
        TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
        TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
        if TempItemChargeAssgntSales.FINDSET then
          repeat
            TESTFIELD("Allow Item Charge Assignment");
            GetItemChargeLine(SalesHeader,ItemChargeSalesLine);
            ItemChargeSalesLine.CALCFIELDS("Qty. Assigned");
            if (ItemChargeSalesLine."Qty. to Invoice" <> 0) or
               (ABS(ItemChargeSalesLine."Qty. Assigned") < ABS(ItemChargeSalesLine."Quantity Invoiced"))
            then begin
              OriginalItemJnlLine."Item Shpt. Entry No." := ItemShptEntryNo;
              PostItemChargePerOrder(SalesHeader,SalesLine,OriginalItemJnlLine,ItemChargeSalesLine);
              TempItemChargeAssgntSales.MARK(true);
            end;
          until TempItemChargeAssgntSales.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLineTracking@166(SalesLine@1000 : Record "Sales Line";VAR TempWhseTrackingSpecification@1002 : TEMPORARY Record "Tracking Specification";PostWhseJnlLine@1001 : Boolean;QtyToBeInvoiced@1003 : Decimal;VAR TempTrackingSpec@1004 : TEMPORARY Record "Tracking Specification");
    BEGIN
      if ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpec) then
        if TempTrackingSpec.FINDSET then
          repeat
            TempTrackingSpecification := TempTrackingSpec;
            TempTrackingSpecification.SetSourceFromSalesLine(SalesLine);
            if TempTrackingSpecification.INSERT then;
            if QtyToBeInvoiced <> 0 then begin
              TempTrackingSpecificationInv := TempTrackingSpecification;
              if TempTrackingSpecificationInv.INSERT then;
            end;
            if PostWhseJnlLine then begin
              TempWhseTrackingSpecification := TempTrackingSpecification;
              if TempWhseTrackingSpecification.INSERT then;
            end;
          until TempTrackingSpec.NEXT = 0;
    END;

    LOCAL PROCEDURE PostItemJnlLineWhseLine@173(VAR TempWhseJnlLine@1000 : TEMPORARY Record "Warehouse Journal Line";VAR TempWhseTrackingSpecification@1001 : TEMPORARY Record "Tracking Specification");
    VAR
      TempWhseJnlLine2@1002 : TEMPORARY Record "Warehouse Journal Line";
    BEGIN
      ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,false);
      if TempWhseJnlLine2.FINDSET then
        repeat
          WhseJnlPostLine.RUN(TempWhseJnlLine2);
        until TempWhseJnlLine2.NEXT = 0;
      TempWhseTrackingSpecification.DELETEALL;
    END;

    LOCAL PROCEDURE ShouldPostWhseJnlLine@73(SalesLine@1000 : Record "Sales Line") : Boolean;
    BEGIN
      with SalesLine do begin
        GetLocation("Location Code");
        if (("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) and
            Location."Directed Put-away and Pick") or
           (Location."Bin Mandatory" and not (WhseShip or WhseReceive or InvtPickPutaway or "Drop Shipment"))
        then
          exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(SalesHeader@1012 : Record "Sales Header";SalesLine@1013 : Record "Sales Line";ItemJnlLine2@1001 : Record "Item Journal Line";ItemChargeSalesLine@1002 : Record "Sales Line");
    VAR
      NonDistrItemJnlLine@1000 : Record "Item Journal Line";
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      OriginalAmt@1007 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      SignFactor@1006 : Integer;
      TotalChargeAmt2@1008 : Decimal;
      TotalChargeAmtLCY2@1011 : Decimal;
    BEGIN
      with TempItemChargeAssgntSales do begin
        SalesLine.TESTFIELD("Job No.",'');
        SalesLine.TESTFIELD("Allow Item Charge Assignment",true);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargeSalesLine.Description;
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        ItemJnlLine2."Applies-from Entry" := 0;
        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Return Qty. to Receive (Base)",SalesLine."Qty. to Invoice (Base)")
        else
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)");
        if ItemJnlLine2."Invoiced Quantity" = 0 then begin
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        end;
        ItemJnlLine2."Document Line No." := ItemChargeSalesLine."Line No.";

        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        if SalesHeader."Currency Code" <> '' then
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt2 + TotalSalesLine.Amount,SalesHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalSalesLineLCY.Amount
        else
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";

        if SalesHeader."Currency Code" <> '' then
          ItemJnlLine2."Discount Amount" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                ItemChargeSalesLine."Inv. Discount Amount" * ItemJnlLine2."Invoiced Qty. (Base)" /
                ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
                SalesHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        else
          ItemJnlLine2."Discount Amount" := ROUND(
              ItemChargeSalesLine."Inv. Discount Amount" * ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              GLSetup."Amount Rounding Precision");

        if SalesLine.IsCreditDocType then
          ItemJnlLine2."Discount Amount" := -ItemJnlLine2."Discount Amount";
        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargeSalesLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargeSalesLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Dimension Set ID" := ItemChargeSalesLine."Dimension Set ID";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargeSalesLine."Gen. Prod. Posting Group";
      end;

      with TempTrackingSpecificationInv do begin
        RESET;
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source ID",TempItemChargeAssgntSales."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.");
        if ISEMPTY then
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2)
        else begin
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          if ("Quantity (Base)" / OriginalQty) > 0 then
            SignFactor := 1
          else
            SignFactor := -1;
          repeat
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            if ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") then begin
              ItemJnlLine2."Quantity (Base)" := -"Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Item Shpt. Entry No." := "Item Ledger Entry No.";
              ItemJnlLine2."Applies-to Entry" := "Item Ledger Entry No.";
              ItemJnlLine2.CopyTrackingFromSpec(TempTrackingSpecificationInv);
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= ItemJnlLine2."Quantity (Base)";
              NonDistrItemJnlLine.Amount -= ItemJnlLine2.Amount;
              NonDistrItemJnlLine."Discount Amount" -= ItemJnlLine2."Discount Amount";
            end else begin // the last time
              NonDistrItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision");
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Applies-to Entry" := "Item Ledger Entry No.";
              NonDistrItemJnlLine.CopyTrackingFromSpec(TempTrackingSpecificationInv);
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            end;
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE PostItemChargePerShpt@5807(SalesHeader@1001 : Record "Sales Header";VAR SalesLine@1000 : Record "Sales Line");
    VAR
      SalesShptLine@1003 : Record "Sales Shipment Line";
      TempItemLedgEntry@1010 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      DistributeCharge@1011 : Boolean;
    BEGIN
      if not SalesShptLine.GET(
           TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      then
        ERROR(ShipmentLinesDeletedErr);
      SalesShptLine.TESTFIELD("Job No.",'');

      if SalesShptLine."Item Shpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      else begin
        DistributeCharge := true;
        if not ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
             DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
             '',0,SalesShptLine."Line No.",-SalesShptLine."Quantity (Base)")
        then
          ERROR(RelatedItemLedgEntriesNotFoundErr);
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          SalesHeader,SalesLine,TempItemLedgEntry,SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Qty. to Assign",TempItemChargeAssgntSales."Amount to Assign")
      else
        PostItemCharge(SalesHeader,SalesLine,
          SalesShptLine."Item Shpt. Entry No.",SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign");
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@5810(SalesHeader@1001 : Record "Sales Header";VAR SalesLine@1000 : Record "Sales Line");
    VAR
      ReturnRcptLine@1002 : Record "Return Receipt Line";
      TempItemLedgEntry@1010 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      DistributeCharge@1011 : Boolean;
    BEGIN
      if not ReturnRcptLine.GET(
           TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      then
        ERROR(ShipmentLinesDeletedErr);
      ReturnRcptLine.TESTFIELD("Job No.",'');

      if ReturnRcptLine."Item Rcpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      else begin
        DistributeCharge := true;
        if not ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
             DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
             '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)")
        then
          ERROR(RelatedItemLedgEntriesNotFoundErr);
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          SalesHeader,SalesLine,TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Qty. to Assign",TempItemChargeAssgntSales."Amount to Assign")
      else
        PostItemCharge(SalesHeader,SalesLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign")
    END;

    LOCAL PROCEDURE PostDistributeItemCharge@181(SalesHeader@1000 : Record "Sales Header";SalesLine@1001 : Record "Sales Line";VAR TempItemLedgEntry@1002 : TEMPORARY Record "Item Ledger Entry";NonDistrQuantity@1003 : Decimal;NonDistrQtyToAssign@1004 : Decimal;NonDistrAmountToAssign@1005 : Decimal);
    VAR
      Factor@1006 : Decimal;
      QtyToAssign@1007 : Decimal;
      AmountToAssign@1008 : Decimal;
    BEGIN
      if TempItemLedgEntry.FINDSET then
        repeat
          Factor := ABS(TempItemLedgEntry.Quantity) / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          if Factor < 1 then begin
            PostItemCharge(SalesHeader,SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              AmountToAssign,QtyToAssign);
            NonDistrQuantity := NonDistrQuantity - ABS(TempItemLedgEntry.Quantity);
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          end else // the last time
            PostItemCharge(SalesHeader,SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              NonDistrAmountToAssign,NonDistrQtyToAssign);
        until TempItemLedgEntry.NEXT = 0
      else
        ERROR(RelatedItemLedgEntriesNotFoundErr);
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(SalesHeader@1002 : Record "Sales Header";SalesLine@1003 : Record "Sales Line";QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      ItemJnlLine@1008 : Record "Item Journal Line";
      TempHandlingSpecification2@1005 : TEMPORARY Record "Tracking Specification";
      ItemEntryRelation@1004 : Record "Item Entry Relation";
      PurchOrderHeader@1007 : Record "Purchase Header";
      PurchOrderLine@1006 : Record "Purchase Line";
    BEGIN
      PurchOrderHeader.GET(
        PurchOrderHeader."Document Type"::Order,SalesLine."Purchase Order No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,SalesLine."Purchase Order No.",SalesLine."Purch. Order Line No.");

      with ItemJnlLine do begin
        INIT;
        "Entry Type" := "Entry Type"::Purchase;
        CopyDocumentFields(
          "Document Type"::"Purchase Receipt",PurchOrderHeader."Receiving No.",PurchOrderHeader."No.",SrcCode,
          PurchOrderHeader."Posting No. Series");

        CopyFromPurchHeader(PurchOrderHeader);
        "Posting Date" := SalesHeader."Posting Date";
        "Document Date" := SalesHeader."Document Date";
        CopyFromPurchLine(PurchOrderLine);

        Quantity := QtyToBeShipped;
        "Quantity (Base)" := QtyToBeShippedBase;
        "Invoiced Quantity" := 0;
        "Invoiced Qty. (Base)" := 0;
        "Source Currency Code" := SalesHeader."Currency Code";
        Amount := ROUND(PurchOrderLine.Amount * QtyToBeShipped / PurchOrderLine.Quantity);
        "Discount Amount" := PurchOrderLine."Line Discount Amount";

        "Applies-to Entry" := 0;
      end;

      if PurchOrderLine."Job No." = '' then begin
        TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,SalesLine,QtyToBeShippedBase);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);

        // Handle Item Tracking
        if ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) then begin
          if TempHandlingSpecification2.FINDSET then
            repeat
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification.SetSourceFromPurchLine(PurchOrderLine);
              if TempTrackingSpecification.INSERT then;
              ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification2);
              ItemEntryRelation.SetSource(DATABASE::"Purch. Rcpt. Line",0,PurchOrderHeader."Receiving No.",PurchOrderLine."Line No.");
              ItemEntryRelation.SetOrderInfo(PurchOrderLine."Document No.",PurchOrderLine."Line No.");
              ItemEntryRelation.INSERT;
            until TempHandlingSpecification2.NEXT = 0;
          exit(0);
        end;
      end;

      exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE ReleaseSalesDocument@19(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      TempAsmHeader@1005 : TEMPORARY Record "Assembly Header";
      ReleaseSalesDocument@1006 : Codeunit "Release Sales Document";
      TempInvoice@1003 : Boolean;
      LinesWereModified@1007 : Boolean;
      TempShpt@1002 : Boolean;
      TempReturn@1001 : Boolean;
      SavedStatus@1004 : Option;
    BEGIN
      with SalesHeader do begin
        if not (Status = Status::Open) or (Status = Status::"Pending Prepayment") then
          exit;

        TempInvoice := Invoice;
        TempShpt := Ship;
        TempReturn := Receive;
        SavedStatus := Status;
        GetOpenLinkedATOs(TempAsmHeader);
        LinesWereModified := ReleaseSalesDocument.ReleaseSalesHeader(SalesHeader,PreviewMode);
        if LinesWereModified then
          RefreshTempLines(SalesHeader);
        TESTFIELD(Status,Status::Released);
        Status := SavedStatus;
        Invoice := TempInvoice;
        Ship := TempShpt;
        Receive := TempReturn;
        ReopenAsmOrders(TempAsmHeader);
        if PreviewMode and ("Posting No." = '') then
          "Posting No." := '***';
        if not PreviewMode then begin
          MODIFY;
          COMMIT;
        end;
        Status := Status::Released;
      end;
    END;

    LOCAL PROCEDURE TestSalesLine@147(SalesHeader@1001 : Record "Sales Header";SalesLine@1000 : Record "Sales Line");
    VAR
      FA@1003 : Record "Fixed Asset";
      DeprBook@1004 : Record "Depreciation Book";
      DummyTrackingSpecification@1002 : Record "Tracking Specification";
    BEGIN
      with SalesHeader do begin
        if SalesLine.Type = SalesLine.Type::Item then
          DummyTrackingSpecification.CheckItemTrackingQuantity(
            DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
            SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)",Ship,Invoice);

        case "Document Type" of
          "Document Type"::Order:
            SalesLine.TESTFIELD("Return Qty. to Receive",0);
          "Document Type"::Invoice:
            begin
              if SalesLine."Shipment No." = '' then
                SalesLine.TESTFIELD("Qty. to Ship",SalesLine.Quantity);
              SalesLine.TESTFIELD("Return Qty. to Receive",0);
              SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
            end;
          "Document Type"::"Return Order":
            SalesLine.TESTFIELD("Qty. to Ship",0);
          "Document Type"::"Credit Memo":
            begin
              if SalesLine."Return Receipt No." = '' then
                SalesLine.TESTFIELD("Return Qty. to Receive",SalesLine.Quantity);
              SalesLine.TESTFIELD("Qty. to Ship",0);
              SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
            end;
        end;
        if SalesLine.Type = SalesLine.Type::"Charge (Item)" then begin
          SalesLine.TESTFIELD(Amount);
          SalesLine.TESTFIELD("Job No.",'');
          SalesLine.TESTFIELD("Job Contract Entry No.",0);
        end;
        if SalesLine.Type = SalesLine.Type::"Fixed Asset" then begin
          SalesLine.TESTFIELD("Job No.",'');
          SalesLine.TESTFIELD("Depreciation Book Code");
          DeprBook.GET(SalesLine."Depreciation Book Code");
          DeprBook.TESTFIELD("G/L Integration - Disposal",true);
          FA.GET(SalesLine."No.");
          FA.TESTFIELD("Budgeted Asset",false);
        end else begin
          SalesLine.TESTFIELD("Depreciation Book Code",'');
          SalesLine.TESTFIELD("Depr. until FA Posting Date",false);
          SalesLine.TESTFIELD("FA Posting Date",0D);
          SalesLine.TESTFIELD("Duplicate in Depreciation Book",'');
          SalesLine.TESTFIELD("Use Duplication List",false);
        end;
        if not ("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) then
          SalesLine.TESTFIELD("Job No.",'');
      end;
    END;

    LOCAL PROCEDURE TestUpdatedSalesLine@444(SalesLine@1000 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        if "Drop Shipment" then begin
          if Type <> Type::Item then
            TESTFIELD("Drop Shipment",false);
          if ("Qty. to Ship" <> 0) and ("Purch. Order Line No." = 0) then
            ERROR(DropShipmentErr,"Line No.");
        end;

        if Quantity = 0 then
          TESTFIELD(Amount,0)
        else begin
          TESTFIELD("No.");
          TESTFIELD(Type);
          TESTFIELD("Gen. Bus. Posting Group");
          TESTFIELD("Gen. Prod. Posting Group");
        end;
      end;
    END;

    LOCAL PROCEDURE UpdatePostingNos@154(VAR SalesHeader@1000 : Record "Sales Header") ModifyHeader : Boolean;
    VAR
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
    BEGIN
      with SalesHeader do begin
        if "Posting No." = '***' then
          "Posting No." := '';

        if Ship and ("Shipping No." = '') then
          if ("Document Type" = "Document Type"::Order) or
             (("Document Type" = "Document Type"::Invoice) and SalesSetup."Shipment on Invoice")
          then begin
            TESTFIELD("Shipping No. Series");
            "Shipping No." := NoSeriesMgt.GetNextNo("Shipping No. Series","Posting Date",true);
            ModifyHeader := true;
          end;

        if Receive and ("Return Receipt No." = '') then
          if ("Document Type" = "Document Type"::"Return Order") or
             (("Document Type" = "Document Type"::"Credit Memo") and SalesSetup."Return Receipt on Credit Memo")
          then begin
            TESTFIELD("Return Receipt No. Series");
            "Return Receipt No." := NoSeriesMgt.GetNextNo("Return Receipt No. Series","Posting Date",true);
            ModifyHeader := true;
          end;

        if Invoice and ("Posting No." = '') then begin
          if ("No. Series" <> '') or
             ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
          then
            TESTFIELD("Posting No. Series");
          if ("No. Series" <> "Posting No. Series") or
             ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
          then begin
            if not PreviewMode then begin
              "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",true);
              ModifyHeader := true;
            end else
              "Posting No." := '***';
          end;
        end;
      end;

      OnAfterUpdatePostingNos(SalesHeader,NoSeriesMgt);
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4(VAR TempDropShptPostBuffer@1001 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      PurchOrderHeader@1003 : Record "Purchase Header";
      PurchOrderLine@1002 : Record "Purchase Line";
      ReservePurchLine@1000 : Codeunit "Purch. Line-Reserve";
    BEGIN
      TempDropShptPostBuffer.RESET;
      if TempDropShptPostBuffer.ISEMPTY then
        exit;
      CLEAR(PurchOrderHeader);
      TempDropShptPostBuffer.FINDSET;
      repeat
        if PurchOrderHeader."No." <> TempDropShptPostBuffer."Order No." then begin
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,TempDropShptPostBuffer."Order No.");
          PurchOrderHeader."Last Receiving No." := PurchOrderHeader."Receiving No.";
          PurchOrderHeader."Receiving No." := '';
          PurchOrderHeader.MODIFY;
          ReservePurchLine.UpdateItemTrackingAfterPosting(PurchOrderHeader);
        end;
        PurchOrderLine.GET(
          PurchOrderLine."Document Type"::Order,
          TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
        PurchOrderLine."Quantity Received" := PurchOrderLine."Quantity Received" + TempDropShptPostBuffer.Quantity;
        PurchOrderLine."Qty. Received (Base)" := PurchOrderLine."Qty. Received (Base)" + TempDropShptPostBuffer."Quantity (Base)";
        PurchOrderLine.InitOutstanding;
        PurchOrderLine.ClearQtyIfBlank;
        PurchOrderLine.InitQtyToReceive;
        PurchOrderLine.MODIFY;
      until TempDropShptPostBuffer.NEXT = 0;
      TempDropShptPostBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateAssocLines@5(VAR SalesOrderLine@1000 : Record "Sales Line");
    VAR
      PurchOrderLine@1001 : Record "Purchase Line";
    BEGIN
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        SalesOrderLine."Purchase Order No.",SalesOrderLine."Purch. Order Line No.");
      PurchOrderLine."Sales Order No." := '';
      PurchOrderLine."Sales Order Line No." := 0;
      PurchOrderLine.MODIFY;
      SalesOrderLine."Purchase Order No." := '';
      SalesOrderLine."Purch. Order Line No." := 0;
    END;

    LOCAL PROCEDURE UpdateAssosOrderPostingNos@157(SalesHeader@1000 : Record "Sales Header") DropShipment : Boolean;
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
      PurchOrderHeader@1005 : Record "Purchase Header";
      NoSeriesMgt@1002 : Codeunit NoSeriesManagement;
      ReleasePurchaseDocument@1003 : Codeunit "Release Purchase Document";
    BEGIN
      with SalesHeader do begin
        ResetTempLines(TempSalesLine);
        TempSalesLine.SETFILTER("Purch. Order Line No.",'<>0');
        if not TempSalesLine.ISEMPTY then begin
          DropShipment := true;
          if Ship then begin
            TempSalesLine.FINDSET;
            repeat
              if PurchOrderHeader."No." <> TempSalesLine."Purchase Order No." then begin
                PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,TempSalesLine."Purchase Order No.");
                PurchOrderHeader.TESTFIELD("Pay-to Vendor No.");
                PurchOrderHeader.Receive := true;
                ReleasePurchaseDocument.ReleasePurchaseHeader(PurchOrderHeader,PreviewMode);
                if PurchOrderHeader."Receiving No." = '' then begin
                  PurchOrderHeader.TESTFIELD("Receiving No. Series");
                  PurchOrderHeader."Receiving No." :=
                    NoSeriesMgt.GetNextNo(PurchOrderHeader."Receiving No. Series","Posting Date",true);
                  PurchOrderHeader.MODIFY;
                end;
              end;
            until TempSalesLine.NEXT = 0;
          end;
        end;
        exit(DropShipment);
      end;
    END;

    LOCAL PROCEDURE UpdateAfterPosting@155(SalesHeader@1001 : Record "Sales Header");
    VAR
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETFILTER("Qty. to Assemble to Order",'<>0');
        if FINDSET then
          repeat
            FinalizePostATO(TempSalesLine);
          until NEXT = 0;

        ResetTempLines(TempSalesLine);
        SETFILTER("Blanket Order Line No.",'<>0');
        if FINDSET then
          repeat
            UpdateBlanketOrderLine(TempSalesLine,SalesHeader.Ship,SalesHeader.Receive,SalesHeader.Invoice);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateLastPostingNos@167(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      with SalesHeader do begin
        if Ship then begin
          "Last Shipping No." := "Shipping No.";
          "Shipping No." := '';
        end;
        if Invoice then begin
          "Last Posting No." := "Posting No.";
          "Posting No." := '';
        end;
        if Receive then begin
          "Last Return Receipt No." := "Return Receipt No.";
          "Return Receipt No." := '';
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateSalesLineBeforePost@137(SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1001 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        if not (SalesHeader.Ship or RoundingLineInserted) then begin
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
        end;
        if not (SalesHeader.Receive or RoundingLineInserted) then begin
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
        end;

        JobContractLine := false;
        if (Type = Type::Item) or (Type = Type::"G/L Account") or (Type = Type::" ") then
          if "Job Contract Entry No." > 0 then
            PostJobContractLine(SalesHeader,SalesLine);
        if Type = Type::Resource then
          JobTaskSalesLine := SalesLine;

        if (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) and ("Shipment No." <> '') then begin
          "Quantity Shipped" := Quantity;
          "Qty. Shipped (Base)" := "Quantity (Base)";
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
        end;

        if (SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo") and ("Return Receipt No." <> '') then begin
          "Return Qty. Received" := Quantity;
          "Return Qty. Received (Base)" := "Quantity (Base)";
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
        end;

        if SalesHeader.Invoice then begin
          if ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice) then
            InitQtyToInvoice;
        end else begin
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        end;

        if (Type = Type::Item) and ("No." <> '') then begin
          GetItem(SalesLine);
          if (Item."Costing Method" = Item."Costing Method"::Standard) and not IsShipment then
            GetUnitCost;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateWhseDocuments@163();
    BEGIN
      if WhseReceive then begin
        WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
        TempWhseRcptHeader.DELETE;
      end;
      if WhseShip then begin
        WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
        TempWhseShptHeader.DELETE;
      end;
    END;

    LOCAL PROCEDURE DeleteAfterPosting@159(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesCommentLine@1001 : Record "Sales Comment Line";
      SalesLine@1003 : Record "Sales Line";
      TempSalesLine@1004 : TEMPORARY Record "Sales Line";
      WarehouseRequest@1002 : Record "Warehouse Request";
      CustInvoiceDisc@1005 : Record "Cust. Invoice Disc.";
    BEGIN
      with SalesHeader do begin
        if HASLINKS then
          DELETELINKS;
        DELETE;
        ReserveSalesLine.DeleteInvoiceSpecFromHeader(SalesHeader);
        DeleteATOLinks(SalesHeader);
        ResetTempLines(TempSalesLine);
        if TempSalesLine.FINDFIRST then
          repeat
            if TempSalesLine."Deferral Code" <> '' then
              DeferralUtilities.RemoveOrSetDeferralSchedule(
                '',DeferralUtilities.GetSalesDeferralDocType,'','',TempSalesLine."Document Type",
                TempSalesLine."Document No.",TempSalesLine."Line No.",0,0D,TempSalesLine.Description,'',true);
            if TempSalesLine.HASLINKS then
              TempSalesLine.DELETELINKS;
          until TempSalesLine.NEXT = 0;

        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.DELETEALL;
        if IdentityManagement.IsInvAppId and CustInvoiceDisc.GET("Invoice Disc. Code") then
          CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts

        DeleteItemChargeAssgnt(SalesHeader);
        SalesCommentLine.DeleteComments("Document Type","No.");
        WarehouseRequest.DeleteRequest(DATABASE::"Sales Line","Document Type","No.");
      end;
    END;

    LOCAL PROCEDURE FinalizePosting@156(VAR SalesHeader@1000 : Record "Sales Header";EverythingInvoiced@1001 : Boolean;VAR TempDropShptPostBuffer@1002 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      O365CouponClaim@1008 : Record "O365 Coupon Claim";
      TempSalesLine@1005 : TEMPORARY Record "Sales Line";
      GenJnlPostPreview@1006 : Codeunit "Gen. Jnl.-Post Preview";
      ICInboxOutboxMgt@1003 : Codeunit ICInboxOutboxMgt;
      WhseSalesRelease@1004 : Codeunit "Whse.-Sales Release";
      ArchiveManagement@1007 : Codeunit ArchiveManagement;
    BEGIN
      with SalesHeader do begin
        if ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"]) and
           (not EverythingInvoiced)
        then begin
          MODIFY;
          InsertTrackingSpecification(SalesHeader);
          PostUpdateOrderLine(SalesHeader);
          UpdateAssocOrder(TempDropShptPostBuffer);
          UpdateWhseDocuments;
          WhseSalesRelease.Release(SalesHeader);
          UpdateItemChargeAssgnt;
        end else begin
          case "Document Type" of
            "Document Type"::Invoice:
              begin
                PostUpdateInvoiceLine;
                InsertTrackingSpecification(SalesHeader);
              end;
            "Document Type"::"Credit Memo":
              begin
                PostUpdateReturnReceiptLine;
                InsertTrackingSpecification(SalesHeader);
              end;
            else begin
              UpdateAssocOrder(TempDropShptPostBuffer);
              if DropShipOrder then
                InsertTrackingSpecification(SalesHeader);

              ResetTempLines(TempSalesLine);
              TempSalesLine.SETFILTER("Purch. Order Line No.",'<>0');
              if TempSalesLine.FINDSET then
                repeat
                  UpdateAssocLines(TempSalesLine);
                  TempSalesLine.MODIFY;
                until TempSalesLine.NEXT = 0;

              ResetTempLines(TempSalesLine);
              TempSalesLine.SETFILTER("Prepayment %",'<>0');
              if TempSalesLine.FINDSET then
                repeat
                  DecrementPrepmtAmtInvLCY(
                    TempSalesLine,TempSalesLine."Prepmt. Amount Inv. (LCY)",TempSalesLine."Prepmt. VAT Amount Inv. (LCY)");
                  TempSalesLine.MODIFY;
                until TempSalesLine.NEXT = 0;
            end;
          end;
          UpdateAfterPosting(SalesHeader);
          UpdateEmailParameters(SalesHeader);
          O365CouponClaim.RedeemCouponsForSalesDocument(SalesHeader);
          UpdateWhseDocuments;
          ArchiveManagement.AutoArchiveSalesDocument(SalesHeader);
          ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
          if not PreviewMode then
            DeleteAfterPosting(SalesHeader);
        end;

        InsertValueEntryRelation;
        if PreviewMode then begin
          Window.CLOSE;
          GenJnlPostPreview.ThrowError;
        end;
        if not InvtPickPutaway then
          COMMIT;
        ClearPostBuffers;
        Window.CLOSE;
        if Invoice and ("Bill-to IC Partner Code" <> '') then
          if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then
            ICInboxOutboxMgt.CreateOutboxSalesInvTrans(SalesInvHeader)
          else
            ICInboxOutboxMgt.CreateOutboxSalesCrMemoTrans(SalesCrMemoHeader);

        OnAfterFinalizePosting(SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,GenJnlPostLine);
      end;
    END;

    LOCAL PROCEDURE FillInvoicePostingBuffer@5804(SalesHeader@1011 : Record "Sales Header";SalesLine@1000 : Record "Sales Line";SalesLineACY@1001 : Record "Sales Line";VAR TempInvoicePostBuffer@1013 : TEMPORARY Record "Invoice Post. Buffer";VAR InvoicePostBuffer@1012 : Record "Invoice Post. Buffer");
    VAR
      GenPostingSetup@1006 : Record "General Posting Setup";
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
      AmtToDefer@1007 : Decimal;
      AmtToDeferACY@1008 : Decimal;
      TotalVATBase@1015 : Decimal;
      TotalVATBaseACY@1014 : Decimal;
      DeferralAccount@1009 : Code[20];
      SalesAccount@1010 : Code[20];
    BEGIN
      GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      InvoicePostBuffer.PrepareSales(SalesLine);

      TotalVAT := SalesLine."Amount Including VAT" - SalesLine.Amount;
      TotalVATACY := SalesLineACY."Amount Including VAT" - SalesLineACY.Amount;
      TotalAmount := SalesLine.Amount;
      TotalAmountACY := SalesLineACY.Amount;

      if SalesLine."Deferral Code" <> '' then
        GetAmountsForDeferral(SalesLine,AmtToDefer,AmtToDeferACY,DeferralAccount)
      else begin
        AmtToDefer := 0;
        AmtToDeferACY := 0;
        DeferralAccount := '';
      end;

      if SalesSetup."Discount Posting" in
         [SalesSetup."Discount Posting"::"Invoice Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      then begin
        CalcInvoiceDiscountPosting(SalesHeader,SalesLine,SalesLineACY,InvoicePostBuffer);
        if (InvoicePostBuffer.Amount <> 0) or (InvoicePostBuffer."Amount (ACY)" <> 0) then begin
          InvoicePostBuffer.SetAccount(
            GenPostingSetup.GetSalesInvDiscAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
          UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,true);
        end;
      end;

      if SalesSetup."Discount Posting" in
         [SalesSetup."Discount Posting"::"Line Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      then begin
        CalcLineDiscountPosting(SalesHeader,SalesLine,SalesLineACY,InvoicePostBuffer);
        if (InvoicePostBuffer.Amount <> 0) or (InvoicePostBuffer."Amount (ACY)" <> 0) then begin
          InvoicePostBuffer.SetAccount(
            GenPostingSetup.GetSalesLineDiscAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
          UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,true);
        end;
      end;

      // Don't adjust VAT Base Amounts if deferrals are adjusting total amount
      DeferralUtilities.AdjustTotalAmountForDeferrals(SalesLine."Deferral Code",
        AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY,TotalVATBase,TotalVATBaseACY);

      InvoicePostBuffer.SetAmounts(
        TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,SalesLine."VAT Difference",TotalVATBase,TotalVATBaseACY);

      if (SalesLine.Type = SalesLine.Type::"G/L Account") or (SalesLine.Type = SalesLine.Type::"Fixed Asset") then begin
        SalesAccount := SalesLine."No.";
        InvoicePostBuffer.SetAccount(
          DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
          TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY)
      end else
        if SalesLine.IsCreditDocType then begin
          SalesAccount := GenPostingSetup.GetSalesCrMemoAccount;
          InvoicePostBuffer.SetAccount(
            DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        end else begin
          SalesAccount := GenPostingSetup.GetSalesAccount;
          InvoicePostBuffer.SetAccount(
            DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        end;
      InvoicePostBuffer."Deferral Code" := SalesLine."Deferral Code";
      UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer,false);
      if SalesLine."Deferral Code" <> '' then
        FillDeferralPostingBuffer(SalesHeader,SalesLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,SalesAccount);
    END;

    LOCAL PROCEDURE UpdateInvoicePostBuffer@6(VAR TempInvoicePostBuffer@1004 : TEMPORARY Record "Invoice Post. Buffer";InvoicePostBuffer@1003 : Record "Invoice Post. Buffer";ForceGLAccountType@1000 : Boolean);
    VAR
      RestoreFAType@1002 : Boolean;
    BEGIN
      if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
        FALineNo := FALineNo + 1;
        InvoicePostBuffer."Fixed Asset Line No." := FALineNo;
        if ForceGLAccountType then begin
          RestoreFAType := true;
          InvoicePostBuffer.Type := InvoicePostBuffer.Type::"G/L Account";
        end;
      end;

      TempInvoicePostBuffer.Update(InvoicePostBuffer,InvDefLineNo,DeferralLineNo);

      if RestoreFAType then
        TempInvoicePostBuffer.Type := TempInvoicePostBuffer.Type::"Fixed Asset";
    END;

    LOCAL PROCEDURE InsertPrepmtAdjInvPostingBuf@80(SalesHeader@1003 : Record "Sales Header";PrepmtSalesLine@1000 : Record "Sales Line";VAR TempInvoicePostBuffer@1005 : TEMPORARY Record "Invoice Post. Buffer";InvoicePostBuffer@1004 : Record "Invoice Post. Buffer");
    VAR
      SalesPostPrepayments@1002 : Codeunit "Sales-Post Prepayments";
      AdjAmount@1001 : Decimal;
    BEGIN
      with PrepmtSalesLine do
        if "Prepayment Line" then
          if "Prepmt. Amount Inv. (LCY)" <> 0 then begin
            AdjAmount := -"Prepmt. Amount Inv. (LCY)";
            InvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
              "No.",AdjAmount,SalesHeader."Currency Code" = '');
            InvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
              SalesPostPrepayments.GetCorrBalAccNo(SalesHeader,AdjAmount > 0),
              -AdjAmount,SalesHeader."Currency Code" = '');
          end else
            if ("Prepayment %" = 100) and ("Prepmt. VAT Amount Inv. (LCY)" <> 0) then
              InvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
                SalesPostPrepayments.GetInvRoundingAccNo(SalesHeader."Customer Posting Group"),
                "Prepmt. VAT Amount Inv. (LCY)",SalesHeader."Currency Code" = '');
    END;

    LOCAL PROCEDURE GetCurrency@17(CurrencyCode@1000 : Code[10]);
    BEGIN
      if CurrencyCode = '' then
        Currency.InitRoundingPrecision
      else begin
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE DivideAmount@8(SalesHeader@1004 : Record "Sales Header";VAR SalesLine@1005 : Record "Sales Line";QtyType@1000 : 'General,Invoicing,Shipping';SalesLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record "VAT Amount Line";VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record "VAT Amount Line");
    VAR
      OriginalDeferralAmount@1006 : Decimal;
    BEGIN
      if RoundingLineInserted and (RoundingLineNo = SalesLine."Line No.") then
        exit;
      with SalesLine do
        if (SalesLineQty = 0) or ("Unit Price" = 0) then begin
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        end else begin
          OriginalDeferralAmount := GetDeferralAmount;
          TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",false,"Line Amount" >= 0);
          if "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" then
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          if not TempVATAmountLineRemainder.FIND then begin
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          end;
          "Line Amount" := GetLineAmountToHandle(SalesLineQty) + GetPrepmtDiffToLineAmount(SalesLine);
          if SalesLineQty <> Quantity then
            "Line Discount Amount" :=
              ROUND("Line Discount Amount" * SalesLineQty / Quantity,Currency."Amount Rounding Precision");

          if "Allow Invoice Disc." and (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) then
            if QtyType = QtyType::Invoicing then
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            else begin
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            end;

          if SalesHeader."Prices Including VAT" then begin
            if (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) or
               ("Line Amount" = 0)
            then begin
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            end else begin
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            end;
            if "Line Discount %" <> 100 then
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            else
              "Amount Including VAT" := 0;
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          end else
            if "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" then begin
              if "Line Discount %" <> 100 then
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              else
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            end else begin
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              if TempVATAmountLine."VAT Base" = 0 then
                TempVATAmountLineRemainder."VAT Amount" := 0
              else
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              if "Line Discount %" <> 100 then
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              else
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            end;

          TempVATAmountLineRemainder.MODIFY;
          if "Deferral Code" <> '' then
            CalcDeferralAmounts(SalesHeader,SalesLine,OriginalDeferralAmount);
        end;
    END;

    LOCAL PROCEDURE RoundAmount@9(SalesHeader@1003 : Record "Sales Header";VAR SalesLine@1004 : Record "Sales Line";SalesLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      NoVAT@1001 : Boolean;
    BEGIN
      with SalesLine do begin
        IncrAmount(SalesHeader,SalesLine,TotalSalesLine);
        Increment(TotalSalesLine."Net Weight",ROUND(SalesLineQty * "Net Weight",0.00001));
        Increment(TotalSalesLine."Gross Weight",ROUND(SalesLineQty * "Gross Weight",0.00001));
        Increment(TotalSalesLine."Unit Volume",ROUND(SalesLineQty * "Unit Volume",0.00001));
        Increment(TotalSalesLine.Quantity,SalesLineQty);
        if "Units per Parcel" > 0 then
          Increment(
            TotalSalesLine."Units per Parcel",
            ROUND(SalesLineQty / "Units per Parcel",1,'>'));

        xSalesLine := SalesLine;
        SalesLineACY := SalesLine;

        if SalesHeader."Currency Code" <> '' then begin
          if SalesHeader."Posting Date" = 0D then
            UseDate := WORKDATE
          else
            UseDate := SalesHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Amount Including VAT",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Amount Including VAT";
          if NoVAT then
            Amount := "Amount Including VAT"
          else
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  UseDate,SalesHeader."Currency Code",
                  TotalSalesLine.Amount,SalesHeader."Currency Factor")) -
              TotalSalesLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Inv. Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."VAT Difference",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."VAT Difference";
        end;
        IncrAmount(SalesHeader,SalesLine,TotalSalesLineLCY);
        Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
      end;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        "Qty. to Ship" := -"Qty. to Ship";
        "Qty. to Ship (Base)" := -"Qty. to Ship (Base)";
        "Return Qty. to Receive" := -"Return Qty. to Receive";
        "Return Qty. to Receive (Base)" := -"Return Qty. to Receive (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
      end;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(SalesHeader@1003 : Record "Sales Header";VAR SalesLine@1005 : Record "Sales Line";UseTempData@1000 : Boolean;BiggestLineNo@1004 : Integer);
    VAR
      CustPostingGr@1002 : Record "Customer Posting Group";
      TempSalesLineForCalc@1006 : TEMPORARY Record "Sales Line";
      InvoiceRoundingAmount@1001 : Decimal;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalSalesLine."Amount Including VAT" -
          ROUND(
            TotalSalesLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      if InvoiceRoundingAmount <> 0 then begin
        CustPostingGr.GET(SalesHeader."Customer Posting Group");
        with SalesLine do begin
          INIT;
          BiggestLineNo := BiggestLineNo + 10000;
          "System-Created Entry" := true;
          if UseTempData then begin
            "Line No." := 0;
            Type := Type::"G/L Account";
            CreateTempSalesLineForCalc(TempSalesLineForCalc,SalesLine,CustPostingGr.GetInvRoundingAccount);
            SalesLine := TempSalesLineForCalc;
          end else begin
            "Line No." := BiggestLineNo;
            VALIDATE(Type,Type::"G/L Account");
            VALIDATE("No.",CustPostingGr.GetInvRoundingAccount);
          end;
          VALIDATE(Quantity,1);
          if IsCreditDocType then
            VALIDATE("Return Qty. to Receive",Quantity)
          else
            VALIDATE("Qty. to Ship",Quantity);
          if SalesHeader."Prices Including VAT" then
            VALIDATE("Unit Price",InvoiceRoundingAmount)
          else
            VALIDATE(
              "Unit Price",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;
          LastLineRetrieved := false;
          RoundingLineInserted := true;
          RoundingLineNo := "Line No.";
        end;
      end;
    END;

    LOCAL PROCEDURE IncrAmount@13(SalesHeader@1001 : Record "Sales Header";SalesLine@1002 : Record "Sales Line";VAR TotalSalesLine@1000 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        if SalesHeader."Prices Including VAT" or
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        then
          Increment(TotalSalesLine."Line Amount","Line Amount");
        Increment(TotalSalesLine.Amount,Amount);
        Increment(TotalSalesLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalSalesLine."VAT Difference","VAT Difference");
        Increment(TotalSalesLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalSalesLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalSalesLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalSalesLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalSalesLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalSalesLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      end;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    [External]
    PROCEDURE GetSalesLines@16(VAR SalesHeader@1000 : Record "Sales Header";VAR NewSalesLine@1001 : Record "Sales Line";QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldSalesLine@1003 : Record "Sales Line";
      MergedSalesLines@1006 : TEMPORARY Record "Sales Line";
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      if QtyType = QtyType::Invoicing then begin
        CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,false);
        MergeSaleslines(SalesHeader,OldSalesLine,TempPrepaymentSalesLine,MergedSalesLines);
        SumSalesLines2(SalesHeader,NewSalesLine,MergedSalesLines,QtyType,true,false,TotalAdjCostLCY);
      end else
        SumSalesLines2(SalesHeader,NewSalesLine,OldSalesLine,QtyType,true,false,TotalAdjCostLCY);
    END;

    [Internal]
    PROCEDURE GetSalesLinesTemp@33(VAR SalesHeader@1000 : Record "Sales Header";VAR NewSalesLine@1001 : Record "Sales Line";VAR OldSalesLine@1002 : Record "Sales Line";QtyType@1003 : 'General,Invoicing,Shipping');
    VAR
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      OldSalesLine.SetSalesHeader(SalesHeader);
      SumSalesLines2(SalesHeader,NewSalesLine,OldSalesLine,QtyType,true,false,TotalAdjCostLCY);
    END;

    [External]
    PROCEDURE SumSalesLines@15(VAR NewSalesHeader@1000 : Record "Sales Header";QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1002 : Record "Sales Line";VAR NewTotalSalesLineLCY@1003 : Record "Sales Line";VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30];VAR ProfitLCY@1006 : Decimal;VAR ProfitPct@1007 : Decimal;VAR TotalAdjCostLCY@1010 : Decimal);
    VAR
      OldSalesLine@1008 : Record "Sales Line";
    BEGIN
      SumSalesLinesTemp(
        NewSalesHeader,OldSalesLine,QtyType,NewTotalSalesLine,NewTotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    [External]
    PROCEDURE SumSalesLinesTemp@25(VAR SalesHeader@1000 : Record "Sales Header";VAR OldSalesLine@1001 : Record "Sales Line";QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1003 : Record "Sales Line";VAR NewTotalSalesLineLCY@1004 : Record "Sales Line";VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30];VAR ProfitLCY@1007 : Decimal;VAR ProfitPct@1008 : Decimal;VAR TotalAdjCostLCY@1011 : Decimal);
    VAR
      SalesLine@1009 : Record "Sales Line";
    BEGIN
      with SalesHeader do begin
        SumSalesLines2(SalesHeader,SalesLine,OldSalesLine,QtyType,false,true,TotalAdjCostLCY);
        ProfitLCY := TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)";
        if TotalSalesLineLCY.Amount = 0 then
          ProfitPct := 0
        else
          ProfitPct := ROUND(ProfitLCY / TotalSalesLineLCY.Amount * 100,0.1);
        VATAmount := TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount;
        if TotalSalesLine."VAT %" = 0 then
          VATAmountText := VATAmountTxt
        else
          VATAmountText := STRSUBSTNO(VATRateTxt,TotalSalesLine."VAT %");
        NewTotalSalesLine := TotalSalesLine;
        NewTotalSalesLineLCY := TotalSalesLineLCY;
      end;
    END;

    LOCAL PROCEDURE SumSalesLines2@11(SalesHeader@1011 : Record "Sales Header";VAR NewSalesLine@1000 : Record "Sales Line";VAR OldSalesLine@1001 : Record "Sales Line";QtyType@1002 : 'General,Invoicing,Shipping';InsertSalesLine@1003 : Boolean;CalcAdCostLCY@1008 : Boolean;VAR TotalAdjCostLCY@1006 : Decimal);
    VAR
      SalesLine@1012 : Record "Sales Line";
      TempVATAmountLine@1010 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineRemainder@1009 : TEMPORARY Record "VAT Amount Line";
      SalesLineQty@1004 : Decimal;
      AdjCostLCY@1007 : Decimal;
      BiggestLineNo@1005 : Integer;
    BEGIN
      TotalAdjCostLCY := 0;
      TempVATAmountLineRemainder.DELETEALL;
      OldSalesLine.CalcVATAmountLines(QtyType,SalesHeader,OldSalesLine,TempVATAmountLine);
      with SalesHeader do begin
        GetGLSetup;
        SalesSetup.GET;
        GetCurrency("Currency Code");
        OldSalesLine.SETRANGE("Document Type","Document Type");
        OldSalesLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := false;
        if OldSalesLine.FINDSET then
          repeat
            if not RoundingLineInserted then
              SalesLine := OldSalesLine;
            case QtyType of
              QtyType::General:
                SalesLineQty := SalesLine.Quantity;
              QtyType::Invoicing:
                SalesLineQty := SalesLine."Qty. to Invoice";
              QtyType::Shipping:
                begin
                  if IsCreditDocType then
                    SalesLineQty := SalesLine."Return Qty. to Receive"
                  else
                    SalesLineQty := SalesLine."Qty. to Ship";
                end;
            end;
            DivideAmount(SalesHeader,SalesLine,QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            SalesLine.Quantity := SalesLineQty;
            if SalesLineQty <> 0 then begin
              if (SalesLine.Amount <> 0) and not RoundingLineInserted then
                if TotalSalesLine.Amount = 0 then
                  TotalSalesLine."VAT %" := SalesLine."VAT %"
                else
                  if TotalSalesLine."VAT %" <> SalesLine."VAT %" then
                    TotalSalesLine."VAT %" := 0;
              RoundAmount(SalesHeader,SalesLine,SalesLineQty);

              if (QtyType in [QtyType::General,QtyType::Invoicing]) and
                 not InsertSalesLine and CalcAdCostLCY
              then begin
                AdjCostLCY := CostCalcMgt.CalcSalesLineCostLCY(SalesLine,QtyType);
                TotalAdjCostLCY := TotalAdjCostLCY + GetSalesLineAdjCostLCY(SalesLine,QtyType,AdjCostLCY);
              end;

              SalesLine := xSalesLine;
            end;
            if InsertSalesLine then begin
              NewSalesLine := SalesLine;
              NewSalesLine.INSERT;
            end;
            if RoundingLineInserted then
              LastLineRetrieved := true
            else begin
              BiggestLineNo := MAX(BiggestLineNo,OldSalesLine."Line No.");
              LastLineRetrieved := OldSalesLine.NEXT = 0;
              if LastLineRetrieved and SalesSetup."Invoice Rounding" then
                InvoiceRounding(SalesHeader,SalesLine,true,BiggestLineNo);
            end;
          until LastLineRetrieved;
      end;
    END;

    LOCAL PROCEDURE GetSalesLineAdjCostLCY@48(SalesLine2@1000 : Record "Sales Line";QtyType@1002 : 'General,Invoicing,Shipping';AdjCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      with SalesLine2 do begin
        if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then
          AdjCostLCY := -AdjCostLCY;

        case true of
          "Shipment No." <> '',"Return Receipt No." <> '':
            exit(AdjCostLCY);
          QtyType = QtyType::General:
            exit(ROUND("Outstanding Quantity" * "Unit Cost (LCY)") + AdjCostLCY);
          "Document Type" in ["Document Type"::Order,"Document Type"::Invoice]:
            begin
              if "Qty. to Invoice" > "Qty. to Ship" then
                exit(ROUND("Qty. to Ship" * "Unit Cost (LCY)") + AdjCostLCY);
              exit(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            end;
          IsCreditDocType:
            begin
              if "Qty. to Invoice" > "Return Qty. to Receive" then
                exit(ROUND("Return Qty. to Receive" * "Unit Cost (LCY)") + AdjCostLCY);
              exit(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            end;
        end;
      end;
    END;

    [External]
    PROCEDURE UpdateBlanketOrderLine@21(SalesLine@1000 : Record "Sales Line";Ship@1001 : Boolean;Receive@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderSalesLine@1003 : Record "Sales Line";
      xBlanketOrderSalesLine@1007 : Record "Sales Line";
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      if (SalesLine."Blanket Order No." <> '') and (SalesLine."Blanket Order Line No." <> 0) and
         ((Ship and (SalesLine."Qty. to Ship" <> 0)) or
          (Receive and (SalesLine."Return Qty. to Receive" <> 0)) or
          (Invoice and (SalesLine."Qty. to Invoice" <> 0)))
      then
        if BlanketOrderSalesLine.GET(
             BlanketOrderSalesLine."Document Type"::"Blanket Order",SalesLine."Blanket Order No.",
             SalesLine."Blanket Order Line No.")
        then begin
          BlanketOrderSalesLine.TESTFIELD(Type,SalesLine.Type);
          BlanketOrderSalesLine.TESTFIELD("No.",SalesLine."No.");
          BlanketOrderSalesLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");

          ModifyLine := false;
          case SalesLine."Document Type" of
            SalesLine."Document Type"::Order,
            SalesLine."Document Type"::Invoice:
              Sign := 1;
            SalesLine."Document Type"::"Return Order",
            SalesLine."Document Type"::"Credit Memo":
              Sign := -1;
          end;
          if Ship and (SalesLine."Shipment No." = '') then begin
            xBlanketOrderSalesLine := BlanketOrderSalesLine;

            if BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            then
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Qty. to Ship"
            else
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Ship",0.00001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Qty. to Ship (Base)";
            ModifyLine := true;

            AsmPost.UpdateBlanketATO(xBlanketOrderSalesLine,BlanketOrderSalesLine);
          end;
          if Receive and (SalesLine."Return Receipt No." = '') then begin
            if BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            then
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Return Qty. to Receive"
            else
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Return Qty. to Receive",0.00001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Return Qty. to Receive (Base)";
            ModifyLine := true;
          end;
          if Invoice then begin
            if BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            then
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" + Sign * SalesLine."Qty. to Invoice"
            else
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Invoice",0.00001);
            BlanketOrderSalesLine."Qty. Invoiced (Base)" :=
              BlanketOrderSalesLine."Qty. Invoiced (Base)" + Sign * SalesLine."Qty. to Invoice (Base)";
            ModifyLine := true;
          end;

          if ModifyLine then begin
            BlanketOrderSalesLine.InitOutstanding;
            if (BlanketOrderSalesLine.Quantity * BlanketOrderSalesLine."Quantity Shipped" < 0) or
               (ABS(BlanketOrderSalesLine.Quantity) < ABS(BlanketOrderSalesLine."Quantity Shipped"))
            then
              BlanketOrderSalesLine.FIELDERROR(
                "Quantity Shipped",STRSUBSTNO(
                  BlanketOrderQuantityGreaterThanErr,
                  BlanketOrderSalesLine.FIELDCAPTION(Quantity)));

            if (BlanketOrderSalesLine."Quantity (Base)" *
                BlanketOrderSalesLine."Qty. Shipped (Base)" < 0) or
               (ABS(BlanketOrderSalesLine."Quantity (Base)") <
                ABS(BlanketOrderSalesLine."Qty. Shipped (Base)"))
            then
              BlanketOrderSalesLine.FIELDERROR(
                "Qty. Shipped (Base)",
                STRSUBSTNO(
                  BlanketOrderQuantityGreaterThanErr,
                  BlanketOrderSalesLine.FIELDCAPTION("Quantity (Base)")));

            BlanketOrderSalesLine.CALCFIELDS("Reserved Qty. (Base)");
            if ABS(BlanketOrderSalesLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderSalesLine."Reserved Qty. (Base)")
            then
              BlanketOrderSalesLine.FIELDERROR(
                "Reserved Qty. (Base)",BlanketOrderQuantityReducedErr);

            BlanketOrderSalesLine."Qty. to Invoice" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Invoiced";
            BlanketOrderSalesLine."Qty. to Ship" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Shipped";
            BlanketOrderSalesLine."Qty. to Invoice (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Invoiced (Base)";
            BlanketOrderSalesLine."Qty. to Ship (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Shipped (Base)";

            BlanketOrderSalesLine.MODIFY;
          end;
        end;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Integer;
    BEGIN
      exit(GenJnlPostLine.RunWithCheck(GenJnlLine));
    END;

    LOCAL PROCEDURE CheckDim@34(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      CheckDimCombHeader(SalesHeader);
      CheckDimValuePostingHeader(SalesHeader);
      CheckDimLines(SalesHeader);
    END;

    LOCAL PROCEDURE CheckDimCombHeader@178(SalesHeader@1000 : Record "Sales Header");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
    BEGIN
      with SalesHeader do
        if not DimMgt.CheckDimIDComb("Dimension Set ID") then
          ERROR(DimensionIsBlockedErr,"Document Type","No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimCombLine@171(SalesLine@1000 : Record "Sales Line");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
    BEGIN
      with SalesLine do
        if not DimMgt.CheckDimIDComb("Dimension Set ID") then
          ERROR(LineDimensionBlockedErr,"Document Type","Document No.","Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimLines@176(SalesHeader@1000 : Record "Sales Header");
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            if (SalesHeader.Invoice and ("Qty. to Invoice" <> 0)) or
               (SalesHeader.Ship and ("Qty. to Ship" <> 0)) or
               (SalesHeader.Receive and ("Return Qty. to Receive" <> 0))
            then begin
              CheckDimCombLine(TempSalesLine);
              CheckDimValuePostingLine(TempSalesLine);
            end
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckDimValuePostingHeader@177(SalesHeader@1000 : Record "Sales Header");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      with SalesHeader do begin
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := "Bill-to Customer No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := "Salesperson Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := "Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := "Responsibility Center";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") then
          ERROR(InvalidDimensionsErr,"Document Type","No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE CreateTempSalesLineForCalc@267(VAR SalesLineForCalc@1000 : Record "Sales Line";SalesLine@1001 : Record "Sales Line";InvoiceRoundingAccount@1002 : Code[20]);
    BEGIN
      SalesLineForCalc := SalesLine;
      SalesLineForCalc.SetHideValidationDialog(true);
      SalesLineForCalc.VALIDATE("No.",InvoiceRoundingAccount);
    END;

    LOCAL PROCEDURE CheckDimValuePostingLine@175(SalesLine@1000 : Record "Sales Line");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      with SalesLine do begin
        TableIDArr[1] := DimMgt.TypeToTableID3(Type);
        NumberArr[1] := "No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := "Job No.";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") then
          ERROR(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803(SalesHeader@1001 : Record "Sales Header");
    VAR
      ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesHeader."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesHeader."No.");
      if not ItemChargeAssgntSales.ISEMPTY then
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";
    BEGIN
      with TempItemChargeAssgntSales do begin
        ClearItemChargeAssgntFilter;
        MARKEDONLY(true);
        if FINDSET then
          repeat
            ItemChargeAssgntSales.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntSales."Qty. Assigned" :=
              ItemChargeAssgntSales."Qty. Assigned" + "Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateSalesOrderChargeAssgnt@5814(SalesOrderInvLine@1000 : Record "Sales Line";SalesOrderLine@1001 : Record "Sales Line");
    VAR
      SalesOrderLine2@1002 : Record "Sales Line";
      SalesOrderInvLine2@1003 : Record "Sales Line";
      SalesShptLine@1004 : Record "Sales Shipment Line";
      ReturnRcptLine@1005 : Record "Return Receipt Line";
    BEGIN
      with SalesOrderInvLine do begin
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntSales.MARKEDONLY(true);
        if TempItemChargeAssgntSales.FINDSET then
          repeat
            if TempItemChargeAssgntSales."Applies-to Doc. Type" = "Document Type" then begin
              SalesOrderInvLine2.GET(
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.");
              if ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order) and
                  (SalesOrderInvLine2."Shipment No." = "Shipment No.")) or
                 ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::"Return Order") and
                  (SalesOrderInvLine2."Return Receipt No." = "Return Receipt No."))
              then begin
                if SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order then begin
                  if not
                     SalesShptLine.GET(SalesOrderInvLine2."Shipment No.",SalesOrderInvLine2."Shipment Line No.")
                  then
                    ERROR(ShipmentLinesDeletedErr);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::Order,
                    SalesShptLine."Order No.",SalesShptLine."Order Line No.");
                end else begin
                  if not
                     ReturnRcptLine.GET(SalesOrderInvLine2."Return Receipt No.",SalesOrderInvLine2."Return Receipt Line No.")
                  then
                    ERROR(ReturnReceiptLinesDeletedErr);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::"Return Order",
                    ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
                end;
                UpdateSalesChargeAssgntLines(
                  SalesOrderLine,
                  SalesOrderLine2."Document Type",
                  SalesOrderLine2."Document No.",
                  SalesOrderLine2."Line No.",
                  TempItemChargeAssgntSales."Qty. to Assign");
              end;
            end else
              UpdateSalesChargeAssgntLines(
                SalesOrderLine,
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.",
                TempItemChargeAssgntSales."Qty. to Assign");
          until TempItemChargeAssgntSales.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateSalesChargeAssgntLines@5813(SalesOrderLine@1000 : Record "Sales Line";ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtyToAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntSales@1005 : Record "Item Charge Assignment (Sales)";
      TempItemChargeAssgntSales2@1007 : Record "Item Charge Assignment (Sales)";
      LastLineNo@1006 : Integer;
      TotalToAssign@1008 : Decimal;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      if ItemChargeAssgntSales.FINDFIRST then begin
        ItemChargeAssgntSales."Qty. Assigned" := ItemChargeAssgntSales."Qty. Assigned" + QtyToAssign;
        ItemChargeAssgntSales."Qty. to Assign" := 0;
        ItemChargeAssgntSales."Amount to Assign" := 0;
        ItemChargeAssgntSales.MODIFY;
      end else begin
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");

        // calculate total qty. to assign of the invoice charge line
        TempItemChargeAssgntSales2.SETRANGE("Document Type",TempItemChargeAssgntSales."Document Type");
        TempItemChargeAssgntSales2.SETRANGE("Document No.",TempItemChargeAssgntSales."Document No.");
        TempItemChargeAssgntSales2.SETRANGE("Document Line No.",TempItemChargeAssgntSales."Document Line No.");
        TempItemChargeAssgntSales2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntSales."Qty. to Assign" +
          TempItemChargeAssgntSales2."Qty. to Assign";

        if ItemChargeAssgntSales.FINDLAST then
          LastLineNo := ItemChargeAssgntSales."Line No.";

        if SalesOrderLine.Quantity < TotalToAssign then
          repeat
            TotalToAssign := TotalToAssign - ItemChargeAssgntSales."Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          until (ItemChargeAssgntSales.NEXT(-1) = 0) or
                (TotalToAssign = SalesOrderLine.Quantity);

        InsertAssocOrderCharge(
          SalesOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntSales."Applies-to Doc. Line Amount");
      end;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@45(SalesOrderLine@1000 : Record "Sales Line";ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;LastLineNo@1004 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntSales@1006 : Record "Item Charge Assignment (Sales)";
    BEGIN
      with NewItemChargeAssgntSales do begin
        INIT;
        "Document Type" := SalesOrderLine."Document Type";
        "Document No." := SalesOrderLine."Document No.";
        "Document Line No." := SalesOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntSales."Item Charge No.";
        "Item No." := TempItemChargeAssgntSales."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntSales."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntSales.Description;
        "Unit Cost" := TempItemChargeAssgntSales."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(SalesHeader@1000 : Record "Sales Header");
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
      SalesLine@1002 : Record "Sales Line";
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1003 : Decimal;
    BEGIN
      TempItemChargeAssgntSales.RESET;
      TempItemChargeAssgntSales.DELETEALL;

      // Check for max qty posting
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETRANGE(Type,Type::"Charge (Item)");
        if ISEMPTY then
          exit;

        ItemChargeAssgntSales.RESET;
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntSales.SETFILTER("Qty. to Assign",'<>0');
        if ItemChargeAssgntSales.FINDSET then
          repeat
            TempItemChargeAssgntSales.INIT;
            TempItemChargeAssgntSales := ItemChargeAssgntSales;
            TempItemChargeAssgntSales.INSERT;
          until ItemChargeAssgntSales.NEXT = 0;

        SETFILTER("Qty. to Invoice",'<>0');
        if FINDSET then
          repeat
            TESTFIELD("Job No.",'');
            TESTFIELD("Job Contract Entry No.",0);
            if ("Qty. to Ship" + "Return Qty. to Receive" <> 0) and
               ((SalesHeader.Ship or SalesHeader.Receive) or
                (ABS("Qty. to Invoice") >
                 ABS("Qty. Shipped Not Invoiced" + "Qty. to Ship") +
                 ABS("Ret. Qty. Rcd. Not Invd.(Base)" + "Return Qty. to Receive")))
            then
              TESTFIELD("Line Amount");

            if not SalesHeader.Ship then
              "Qty. to Ship" := 0;
            if not SalesHeader.Receive then
              "Return Qty. to Receive" := 0;
            if ABS("Qty. to Invoice") >
               ABS("Quantity Shipped" + "Qty. to Ship" + "Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced")
            then
              "Qty. to Invoice" :=
                "Quantity Shipped" + "Qty. to Ship" + "Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced";

            CALCFIELDS("Qty. to Assign","Qty. Assigned");
            if ABS("Qty. to Assign" + "Qty. Assigned") > ABS("Qty. to Invoice" + "Quantity Invoiced") then
              ERROR(CannotAssignMoreErr,
                "Qty. to Invoice" + "Quantity Invoiced" - "Qty. Assigned",
                FIELDCAPTION("Document Type"),"Document Type",
                FIELDCAPTION("Document No."),"Document No.",
                FIELDCAPTION("Line No."),"Line No.");
            if Quantity = "Qty. to Invoice" + "Quantity Invoiced" then begin
              if "Qty. to Assign" <> 0 then
                if Quantity = "Quantity Invoiced" then begin
                  TempItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
                  if TempItemChargeAssgntSales.FINDSET then
                    repeat
                      SalesLine.GET(
                        TempItemChargeAssgntSales."Applies-to Doc. Type",
                        TempItemChargeAssgntSales."Applies-to Doc. No.",
                        TempItemChargeAssgntSales."Applies-to Doc. Line No.");
                      if SalesLine.Quantity = SalesLine."Quantity Invoiced" then
                        ERROR(CannotAssignInvoicedErr,SalesLine.TABLECAPTION,
                          SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
                          SalesLine.FIELDCAPTION("Document No."),SalesLine."Document No.",
                          SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No.");
                    until TempItemChargeAssgntSales.NEXT = 0;
                end;
              if Quantity <> "Qty. to Assign" + "Qty. Assigned" then
                AssignError := true;
            end;

            if ("Qty. to Assign" + "Qty. Assigned") < ("Qty. to Invoice" + "Quantity Invoiced") then
              ERROR(MustAssignItemChargeErr,"No.");

            // check if all ILEs exist
            QtyNeeded := "Qty. to Assign";
            TempItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
            if TempItemChargeAssgntSales.FINDSET then
              repeat
                if (TempItemChargeAssgntSales."Applies-to Doc. Type" <> "Document Type") or
                   (TempItemChargeAssgntSales."Applies-to Doc. No." <> "Document No.")
                then
                  QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign"
                else begin
                  SalesLine.GET(
                    TempItemChargeAssgntSales."Applies-to Doc. Type",
                    TempItemChargeAssgntSales."Applies-to Doc. No.",
                    TempItemChargeAssgntSales."Applies-to Doc. Line No.");
                  if ItemLedgerEntryExist(SalesLine,SalesHeader.Ship or SalesHeader.Receive) then
                    QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign";
                end;
              until TempItemChargeAssgntSales.NEXT = 0;

            if QtyNeeded > 0 then
              ERROR(CannotInvoiceItemChargeErr,"No.");
          until NEXT = 0;

        // Check saleslines
        if AssignError then
          if SalesHeader."Document Type" in
             [SalesHeader."Document Type"::Invoice,SalesHeader."Document Type"::"Credit Memo"]
          then
            InvoiceEverything := true
          else begin
            RESET;
            SETFILTER(Type,'%1|%2',Type::Item,Type::"Charge (Item)");
            if FINDSET then
              repeat
                if SalesHeader.Ship or SalesHeader.Receive then
                  InvoiceEverything :=
                    Quantity = "Qty. to Invoice" + "Quantity Invoiced"
                else
                  InvoiceEverything :=
                    (Quantity = "Qty. to Invoice" + "Quantity Invoiced") and
                    ("Qty. to Invoice" =
                     "Qty. Shipped Not Invoiced" + "Ret. Qty. Rcd. Not Invd.(Base)");
              until (NEXT = 0) or (not InvoiceEverything);
          end;

        if InvoiceEverything and AssignError then
          ERROR(MustAssignErr);
      end;
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntSales.MARKEDONLY(false);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(SalesHeader@1005 : Record "Sales Header";VAR ItemChargeSalesLine@1000 : Record "Sales Line");
    VAR
      SalesShptLine@1001 : Record "Sales Shipment Line";
      ReturnReceiptLine@1003 : Record "Return Receipt Line";
      QtyShippedNotInvd@1002 : Decimal;
      QtyReceivedNotInvd@1004 : Decimal;
    BEGIN
      with TempItemChargeAssgntSales do
        if (ItemChargeSalesLine."Document Type" <> "Document Type") or
           (ItemChargeSalesLine."Document No." <> "Document No.") or
           (ItemChargeSalesLine."Line No." <> "Document Line No.")
        then begin
          ItemChargeSalesLine.GET("Document Type","Document No.","Document Line No.");
          if not SalesHeader.Ship then
            ItemChargeSalesLine."Qty. to Ship" := 0;
          if not SalesHeader.Receive then
            ItemChargeSalesLine."Return Qty. to Receive" := 0;
          if ItemChargeSalesLine."Shipment No." <> '' then begin
            SalesShptLine.GET(ItemChargeSalesLine."Shipment No.",ItemChargeSalesLine."Shipment Line No.");
            QtyShippedNotInvd := "Qty. to Assign" - "Qty. Assigned";
          end else
            QtyShippedNotInvd := ItemChargeSalesLine."Quantity Shipped";
          if ItemChargeSalesLine."Return Receipt No." <> '' then begin
            ReturnReceiptLine.GET(ItemChargeSalesLine."Return Receipt No.",ItemChargeSalesLine."Return Receipt Line No.");
            QtyReceivedNotInvd := "Qty. to Assign" - "Qty. Assigned";
          end else
            QtyReceivedNotInvd := ItemChargeSalesLine."Return Qty. Received";
          if ABS(ItemChargeSalesLine."Qty. to Invoice") >
             ABS(QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
               QtyReceivedNotInvd + ItemChargeSalesLine."Return Qty. to Receive" -
               ItemChargeSalesLine."Quantity Invoiced")
          then
            ItemChargeSalesLine."Qty. to Invoice" :=
              QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
              QtyReceivedNotInvd + ItemChargeSalesLine."Return Qty. to Receive" -
              ItemChargeSalesLine."Quantity Invoiced";
        end;
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@24(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(QtyToHandle) > ABS(QtyToInvoice) then
        exit(-QtyToHandle);

      exit(-QtyToInvoice);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR TempItemSalesLine@1000 : TEMPORARY Record "Sales Line");
    VAR
      WhseValidateSourceLine@1003 : Codeunit "Whse. Validate Source Line";
      ShowError@1002 : Boolean;
    BEGIN
      with TempItemSalesLine do begin
        SETRANGE(Type,Type::Item);
        SETRANGE("Drop Shipment",false);
        if FINDSET then
          repeat
            GetLocation("Location Code");
            case "Document Type" of
              "Document Type"::Order:
                if ((Location."Require Receive" or Location."Require Put-away") and (Quantity < 0)) or
                   ((Location."Require Shipment" or Location."Require Pick") and (Quantity >= 0))
                then begin
                  if Location."Directed Put-away and Pick" then
                    ShowError := true
                  else
                    if WhseValidateSourceLine.WhseLinesExist(
                         DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,Quantity)
                    then
                      ShowError := true;
                end;
              "Document Type"::"Return Order":
                if ((Location."Require Receive" or Location."Require Put-away") and (Quantity >= 0)) or
                   ((Location."Require Shipment" or Location."Require Pick") and (Quantity < 0))
                then begin
                  if Location."Directed Put-away and Pick" then
                    ShowError := true
                  else
                    if WhseValidateSourceLine.WhseLinesExist(
                         DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,Quantity)
                    then
                      ShowError := true;
                end;
              "Document Type"::Invoice,"Document Type"::"Credit Memo":
                if Location."Directed Put-away and Pick" then
                  Location.TESTFIELD("Adjustment Bin Code");
            end;
            if ShowError then
              ERROR(
                WarehouseRequiredErr,
                FIELDCAPTION("Document Type"),"Document Type",
                FIELDCAPTION("Document No."),"Document No.",
                FIELDCAPTION("Line No."),"Line No.");
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record "Item Journal Line";SalesLine@1001 : Record "Sales Line";VAR TempWhseJnlLine@1002 : TEMPORARY Record "Warehouse Journal Line");
    VAR
      WhseMgt@1003 : Codeunit "Whse. Management";
      WMSMgt@1004 : Codeunit "WMS Management";
    BEGIN
      with SalesLine do begin
        WMSMgt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,true);
        WMSMgt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,false);
        TempWhseJnlLine."Source Type" := DATABASE::"Sales Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Code" := SrcCode;
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        case "Document Type" of
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Shipment";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Shipment";
        end;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      end;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307(SalesLine@1001 : Record "Sales Line") : Boolean;
    VAR
      WhseSetup@1000 : Record "Warehouse Setup";
    BEGIN
      if (SalesLine.Type = SalesLine.Type::Item) and (not SalesLine."Drop Shipment") then begin
        if SalesLine."Location Code" = '' then begin
          WhseSetup.GET;
          if SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" then
            exit(WhseSetup."Require Receive");

          exit(WhseSetup."Require Shipment");
        end;

        GetLocation(SalesLine."Location Code");
        if SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" then
          exit(Location."Require Receive");

        exit(Location."Require Shipment");
      end;
      exit(false);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR SalesShptLine@1002 : Record "Sales Shipment Line") : Integer;
    VAR
      ItemEntryRelation@1001 : Record "Item Entry Relation";
    BEGIN
      TempHandlingSpecification.CopySpecification(TempTrackingSpecificationInv);
      TempHandlingSpecification.CopySpecification(TempATOTrackingSpecification);
      TempHandlingSpecification.RESET;
      if TempHandlingSpecification.FINDSET then begin
        repeat
          ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification);
          ItemEntryRelation.TransferFieldsSalesShptLine(SalesShptLine);
          ItemEntryRelation.INSERT;
        until TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        exit(0);
      end;
      exit(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnRcptLine@1002 : Record "Return Receipt Line") : Integer;
    VAR
      ItemEntryRelation@1001 : Record "Item Entry Relation";
    BEGIN
      TempHandlingSpecification.CopySpecification(TempTrackingSpecificationInv);
      TempHandlingSpecification.CopySpecification(TempATOTrackingSpecification);
      TempHandlingSpecification.RESET;
      if TempHandlingSpecification.FINDSET then begin
        repeat
          ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification);
          ItemEntryRelation.TransferFieldsReturnRcptLine(ReturnRcptLine);
          ItemEntryRelation.INSERT;
        until TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        exit(0);
      end;
      exit(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(SalesHeader@1002 : Record "Sales Header";VAR TempItemSalesLine@1019 : TEMPORARY Record "Sales Line");
    VAR
      ReservationEntry@1001 : Record "Reservation Entry";
      ItemTrackingCode@1009 : Record "Item Tracking Code";
      ItemJnlLine@1006 : Record "Item Journal Line";
      CreateReservEntry@1004 : Codeunit "Create Reserv. Entry";
      ItemTrackingManagement@1015 : Codeunit "Item Tracking Management";
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      SalesLineQtyToHandle@1023 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      CheckSalesLine@1008 : Boolean;
    BEGIN
      // if a SalesLine is posted with ItemTracking then tracked quantity must be equal to posted quantity
      if not (SalesHeader."Document Type" in
              [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"])
      then
        exit;

      TrackingQtyToHandle := 0;

      with TempItemSalesLine do begin
        SETRANGE(Type,Type::Item);
        if SalesHeader.Ship then begin
          SETFILTER("Quantity Shipped",'<>%1',0);
          ErrorFieldCaption := FIELDCAPTION("Qty. to Ship");
        end else begin
          SETFILTER("Return Qty. Received",'<>%1',0);
          ErrorFieldCaption := FIELDCAPTION("Return Qty. to Receive");
        end;

        if FINDSET then begin
          ReservationEntry."Source Type" := DATABASE::"Sales Line";
          ReservationEntry."Source Subtype" := SalesHeader."Document Type";
          SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
          repeat
            // Only Item where no SerialNo or LotNo is required
            GetItem(TempItemSalesLine);
            if Item."Item Tracking Code" <> '' then begin
              Inbound := (Quantity * SignFactor) > 0;
              ItemTrackingCode.Code := Item."Item Tracking Code";
              ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
                ItemJnlLine."Entry Type"::Sale,Inbound,
                SNRequired,LotRequired,SNInfoRequired,LotInfoRequired);
              CheckSalesLine := not SNRequired and not LotRequired;
              if CheckSalesLine then
                CheckSalesLine := CheckTrackingExists(TempItemSalesLine);
            end else
              CheckSalesLine := false;

            TrackingQtyToHandle := 0;

            if CheckSalesLine then begin
              GetTrackingQuantities(TempItemSalesLine,TrackingQtyToHandle);
              TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
              if SalesHeader.Ship then
                SalesLineQtyToHandle := "Qty. to Ship (Base)"
              else
                SalesLineQtyToHandle := "Return Qty. to Receive (Base)";
              if TrackingQtyToHandle <> SalesLineQtyToHandle then
                ERROR(STRSUBSTNO(ItemTrackQuantityMismatchErr,ErrorFieldCaption));
            end;
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckTrackingExists@168(SalesLine@1000 : Record "Sales Line") : Boolean;
    VAR
      TrackingSpecification@1004 : Record "Tracking Specification";
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      TrackingSpecification.SetSourceFilter(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",true);
      TrackingSpecification.SetSourceFilter2('',0);
      ReservEntry.SetSourceFilter(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",true);
      ReservEntry.SetSourceFilter2('',0);

      TrackingSpecification.SETRANGE(Correction,false);
      if not TrackingSpecification.ISEMPTY then
        exit(true);

      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      if not ReservEntry.ISEMPTY then
        exit(true);
      ReservEntry.SETRANGE("Serial No.");
      ReservEntry.SETFILTER("Lot No.",'<>%1','');
      if not ReservEntry.ISEMPTY then
        exit(true);
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(SalesLine@1000 : Record "Sales Line";VAR TrackingQtyToHandle@1003 : Decimal);
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEntry.SetSourceFilter(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",true);
      ReservEntry.SetSourceFilter2('',0);
      if ReservEntry.FINDSET then
        repeat
          if ReservEntry.TrackingExists then
            TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
        until ReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@37(VAR TempInvoicingSpecification@1000 : TEMPORARY Record "Tracking Specification");
    BEGIN
      TempInvoicingSpecification.RESET;
      if TempInvoicingSpecification.FINDSET then begin
        repeat
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity actual Handled (Base)";
          TempInvoicingSpecification."Quantity actual Handled (Base)" := 0;
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          if not TempTrackingSpecification.INSERT then begin
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          end;
        until TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35(SalesHeader@1001 : Record "Sales Header");
    BEGIN
      if not TempTrackingSpecification.ISEMPTY then begin
        TempTrackingSpecification.InsertSpecification;
        ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesHeader);
      end;
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record "Value Entry Relation";
    BEGIN
      TempValueEntryRelation.RESET;
      if TempValueEntryRelation.FINDSET then begin
        repeat
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        until TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE PostItemCharge@42(SalesHeader@1010 : Record "Sales Header";VAR SalesLine@1005 : Record "Sales Line";ItemEntryNo@1004 : Integer;QuantityBase@1003 : Decimal;AmountToAssign@1002 : Decimal;QtyToAssign@1001 : Decimal);
    VAR
      DummyTrackingSpecification@1000 : Record "Tracking Specification";
      SalesLineToPost@1006 : Record "Sales Line";
      CurrExchRate@1007 : Record "Currency Exchange Rate";
      TotalChargeAmt@1008 : Decimal;
      TotalChargeAmtLCY@1009 : Decimal;
    BEGIN
      with TempItemChargeAssgntSales do begin
        SalesLineToPost := SalesLine;
        SalesLineToPost."No." := "Item No.";
        SalesLineToPost."Appl.-to Item Entry" := ItemEntryNo;
        if not ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) then
          SalesLineToPost.Amount := -AmountToAssign
        else
          SalesLineToPost.Amount := AmountToAssign;

        if SalesLineToPost."Currency Code" <> '' then
          SalesLineToPost."Unit Cost" := ROUND(
              -SalesLineToPost.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        else
          SalesLineToPost."Unit Cost" := ROUND(
              -SalesLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        TotalChargeAmt := TotalChargeAmt + SalesLineToPost.Amount;

        if SalesHeader."Currency Code" <> '' then
          SalesLineToPost.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt,SalesHeader."Currency Factor");
        SalesLineToPost."Inv. Discount Amount" := ROUND(
            SalesLine."Inv. Discount Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLineToPost."Line Discount Amount" := ROUND(
            SalesLine."Line Discount Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLineToPost."Line Amount" := ROUND(
            SalesLine."Line Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLine."Inv. Discount Amount" := SalesLine."Inv. Discount Amount" - SalesLineToPost."Inv. Discount Amount";
        SalesLine."Line Discount Amount" := SalesLine."Line Discount Amount" - SalesLineToPost."Line Discount Amount";
        SalesLine."Line Amount" := SalesLine."Line Amount" - SalesLineToPost."Line Amount";
        SalesLine.Quantity := SalesLine.Quantity - QtyToAssign;
        SalesLineToPost.Amount := ROUND(SalesLineToPost.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        if SalesHeader."Currency Code" <> '' then
          TotalChargeAmtLCY := TotalChargeAmtLCY + SalesLineToPost.Amount;
        SalesLineToPost."Unit Cost (LCY)" := ROUND(
            SalesLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        UpdateSalesLineDimSetIDFromAppliedEntry(SalesLineToPost,SalesLine);
        SalesLineToPost."Line No." := "Document Line No.";
        PostItemJnlLine(
          SalesHeader,SalesLineToPost,
          0,0,-QuantityBase,-QuantityBase,
          SalesLineToPost."Appl.-to Item Entry",
          "Item Charge No.",DummyTrackingSpecification,false);
      end;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@31(VAR SalesLine3@1000 : Record "Sales Line";VAR TempSrcTrackingSpec@1001 : TEMPORARY Record "Tracking Specification");
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      if TempSrcTrackingSpec.FINDSET then
        repeat
          TempWhseSplitSpecification := TempSrcTrackingSpec;
          TempWhseSplitSpecification.SetSource(
            DATABASE::"Sales Line",SalesLine3."Document Type",SalesLine3."Document No.",SalesLine3."Line No.",'',0);
          TempWhseSplitSpecification.INSERT;
        until TempSrcTrackingSpec.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record "Sales Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";QtyToBeShippedBase@1002 : Decimal;VAR TempTrackingSpecification2@1003 : TEMPORARY Record "Tracking Specification";VAR CheckApplFromItemEntry@1004 : Boolean);
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      if QtyToBeShippedBase = 0 then
        exit;

      CLEAR(ReserveSalesLine);
      if not SalesOrderLine."Drop Shipment" then
        if not HasSpecificTracking(SalesOrderLine."No.") and HasInvtPickLine(SalesOrderLine) then
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,true)
        else
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,false)
      else begin
        TempTrackingSpecification2.RESET;
        TempTrackingSpecification2.SetSourceFilter(
          DATABASE::"Purchase Line",1,SalesOrderLine."Purchase Order No.",SalesOrderLine."Purch. Order Line No.",false);
        TempTrackingSpecification2.SetSourceFilter2('',0);
        if TempTrackingSpecification2.ISEMPTY then
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,false)
        else begin
          ReserveSalesLine.SetApplySpecificItemTracking(true);
          ReserveSalesLine.SetOverruleItemTracking(true);
          ReserveSalesLine.SetItemTrkgAlreadyOverruled(ItemTrkgAlreadyOverruled);
          TempTrackingSpecification2.FINDSET;
          if TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 then
            ERROR(ItemTrackingWrongSignErr);
          repeat
            ItemJnlLine.CopyTrackingFromSpec(TempTrackingSpecification2);
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification2."Item Ledger Entry No.";
            ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesOrderLine,ItemJnlLine,
              TempTrackingSpecification2."Quantity (Base)",CheckApplFromItemEntry,false);
          until TempTrackingSpecification2.NEXT = 0;
          ItemJnlLine.ClearTracking;
          ItemJnlLine."Applies-to Entry" := 0;
        end;
      end;
    END;

    LOCAL PROCEDURE TransferReservFromPurchLine@41(VAR PurchOrderLine@1000 : Record "Purchase Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";SalesLine@1008 : Record "Sales Line";QtyToBeShippedBase@1002 : Decimal);
    VAR
      ReservEntry@1004 : Record "Reservation Entry";
      TempTrackingSpecification2@1005 : TEMPORARY Record "Tracking Specification";
      ReservePurchLine@1003 : Codeunit "Purch. Line-Reserve";
      RemainingQuantity@1006 : Decimal;
      CheckApplToItemEntry@1007 : Boolean;
    BEGIN
      // Handle Item Tracking on Drop Shipment
      ItemTrkgAlreadyOverruled := false;
      if QtyToBeShippedBase = 0 then
        exit;

      ReservEntry.SetSourceFilter(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",true);
      ReservEntry.SetSourceFilter2('',0);
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
      if not ReservEntry.ISEMPTY then
        ItemTrackingMgt.SumUpItemTracking(ReservEntry,TempTrackingSpecification2,false,true);
      TempTrackingSpecification2.SETFILTER("Qty. to Handle (Base)",'<>0');
      if TempTrackingSpecification2.ISEMPTY then
        ReservePurchLine.TransferPurchLineToItemJnlLine(
          PurchOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplToItemEntry)
      else begin
        ReservePurchLine.SetOverruleItemTracking(true);
        ItemTrkgAlreadyOverruled := true;
        TempTrackingSpecification2.FINDSET;
        if -TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 then
          ERROR(ItemTrackingWrongSignErr);
        repeat
          ItemJnlLine.CopyTrackingFromSpec(TempTrackingSpecification2);
          RemainingQuantity :=
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchOrderLine,ItemJnlLine,
              -TempTrackingSpecification2."Qty. to Handle (Base)",CheckApplToItemEntry);
          if RemainingQuantity <> 0 then
            ERROR(ItemTrackingMismatchErr);
        until TempTrackingSpecification2.NEXT = 0;
        ItemJnlLine.ClearTracking;
        ItemJnlLine."Applies-to Entry" := 0;
      end;
    END;

    [External]
    PROCEDURE SetWhseRcptHeader@43(VAR WhseRcptHeader2@1000 : Record "Warehouse Receipt Header");
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    [External]
    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record "Warehouse Shipment Header");
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE GetItem@49(SalesLine@1000 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        if "No." <> Item."No." then
          Item.GET("No.");
      end;
    END;

    LOCAL PROCEDURE GetNextSalesline@50(VAR SalesLine@1000 : Record "Sales Line") : Boolean;
    BEGIN
      if not SalesLinesProcessed then
        if SalesLine.NEXT = 1 then
          exit(false);
      SalesLinesProcessed := true;
      if TempPrepaymentSalesLine.FIND('-') then begin
        SalesLine := TempPrepaymentSalesLine;
        TempPrepaymentSalesLine.DELETE;
        exit(false);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CreatePrepaymentLines@51(SalesHeader@1003 : Record "Sales Header";VAR TempPrepmtSalesLine@1004 : Record "Sales Line";CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record "G/L Account";
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
      TempExtTextLine@1012 : TEMPORARY Record "Extended Text Line";
      GenPostingSetup@1005 : Record "General Posting Setup";
      TransferExtText@1011 : Codeunit "Transfer Extended Text";
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrepmtAmtToDeduct@1016 : Decimal;
    BEGIN
      GetGLSetup;
      with TempSalesLine do begin
        FillTempLines(SalesHeader);
        ResetTempLines(TempSalesLine);
        if not FINDLAST then
          exit;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        TempPrepmtSalesLine.SetHasBeenShown;
        if FINDSET then begin
          if CompleteFunctionality and ("Document Type" = "Document Type"::Invoice) then
            TestGetShipmentPPmtAmtToDeduct;
          repeat
            if CompleteFunctionality then
              if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then begin
                if not SalesHeader.Ship and ("Qty. to Invoice" = Quantity - "Quantity Invoiced") then
                  if "Qty. Shipped Not Invoiced" < "Qty. to Invoice" then
                    VALIDATE("Qty. to Invoice","Qty. Shipped Not Invoiced");
                Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                if "Prepayment %" <> 100 then
                  case true of
                    ("Prepmt Amt to Deduct" <> 0) and
                    ("Prepmt Amt to Deduct" > ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(CannotBeGreaterThanErr,
                          ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                    ("Prepmt. Amt. Inv." <> 0) and
                    (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                     ROUND(
                       ROUND(
                         ROUND("Unit Price" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),
                           Currency."Amount Rounding Precision") *
                         (1 - ("Line Discount %" / 100)),Currency."Amount Rounding Precision") *
                       "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(CannotBeSmallerThanErr,
                          ROUND(
                            "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (1 - Fraction) * "Line Amount",
                            Currency."Amount Rounding Precision")));
                  end;
              end;
            if "Prepmt Amt to Deduct" <> 0 then begin
              if ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") or
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              then
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              GLAcc.GET(GenPostingSetup.GetSalesPrepmtAccount);
              TempLineFound := false;
              if SalesHeader."Compress Prepayment" then begin
                TempPrepmtSalesLine.SETRANGE("No.",GLAcc."No.");
                TempPrepmtSalesLine.SETRANGE("Dimension Set ID","Dimension Set ID");
                TempLineFound := TempPrepmtSalesLine.FINDFIRST;
              end;
              if TempLineFound then begin
                PrepmtAmtToDeduct :=
                  TempPrepmtSalesLine."Prepmt Amt to Deduct" +
                  InsertedPrepmtVATBaseToDeduct(
                    SalesHeader,TempSalesLine,TempPrepmtSalesLine."Line No.",TempPrepmtSalesLine."Unit Price");
                VATDifference := TempPrepmtSalesLine."VAT Difference";
                TempPrepmtSalesLine.VALIDATE(
                  "Unit Price",TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                if "Prepayment %" < TempPrepmtSalesLine."Prepayment %" then
                  TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
                TempPrepmtSalesLine.MODIFY;
              end else begin
                TempPrepmtSalesLine.INIT;
                TempPrepmtSalesLine."Document Type" := SalesHeader."Document Type";
                TempPrepmtSalesLine."Document No." := SalesHeader."No.";
                TempPrepmtSalesLine."Line No." := 0;
                TempPrepmtSalesLine."System-Created Entry" := true;
                if CompleteFunctionality then
                  TempPrepmtSalesLine.VALIDATE(Type,TempPrepmtSalesLine.Type::"G/L Account")
                else
                  TempPrepmtSalesLine.Type := TempPrepmtSalesLine.Type::"G/L Account";
                TempPrepmtSalesLine.VALIDATE("No.",GenPostingSetup."Sales Prepayments Account");
                TempPrepmtSalesLine.VALIDATE(Quantity,-1);
                TempPrepmtSalesLine."Qty. to Ship" := TempPrepmtSalesLine.Quantity;
                TempPrepmtSalesLine."Qty. to Invoice" := TempPrepmtSalesLine.Quantity;
                PrepmtAmtToDeduct := InsertedPrepmtVATBaseToDeduct(SalesHeader,TempSalesLine,NextLineNo,0);
                TempPrepmtSalesLine.VALIDATE("Unit Price","Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
                TempPrepmtSalesLine."Prepayment Line" := true;
                TempPrepmtSalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                TempPrepmtSalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                TempPrepmtSalesLine."Dimension Set ID" := "Dimension Set ID";
                TempPrepmtSalesLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                TempPrepmtSalesLine.INSERT;

                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtSalesLine."No.",DATABASE::"Sales Invoice Line",
                  SalesHeader."Document Date",SalesHeader."Language Code",TempExtTextLine);
                if TempExtTextLine.FIND('-') then
                  repeat
                    TempPrepmtSalesLine.INIT;
                    TempPrepmtSalesLine.Description := TempExtTextLine.Text;
                    TempPrepmtSalesLine."System-Created Entry" := true;
                    TempPrepmtSalesLine."Prepayment Line" := true;
                    TempPrepmtSalesLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtSalesLine.INSERT;
                  until TempExtTextLine.NEXT = 0;
              end;
            end;
          until NEXT = 0
        end;
      end;
      DividePrepmtAmountLCY(TempPrepmtSalesLine,SalesHeader);
    END;

    LOCAL PROCEDURE InsertedPrepmtVATBaseToDeduct@82(SalesHeader@1004 : Record "Sales Header";SalesLine@1000 : Record "Sales Line";PrepmtLineNo@1001 : Integer;TotalPrepmtAmtToDeduct@1002 : Decimal) : Decimal;
    VAR
      PrepmtVATBaseToDeduct@1003 : Decimal;
    BEGIN
      with SalesLine do begin
        if SalesHeader."Prices Including VAT" then
          PrepmtVATBaseToDeduct :=
            ROUND(
              (TotalPrepmtAmtToDeduct + "Prepmt Amt to Deduct") / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision") -
            ROUND(
              TotalPrepmtAmtToDeduct / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision")
        else
          PrepmtVATBaseToDeduct := "Prepmt Amt to Deduct";
      end;
      with TempPrepmtDeductLCYSalesLine do begin
        TempPrepmtDeductLCYSalesLine := SalesLine;
        if "Document Type" = "Document Type"::Order then
          "Qty. to Invoice" := GetQtyToInvoice(SalesLine,SalesHeader.Ship)
        else
          GetLineDataFromOrder(TempPrepmtDeductLCYSalesLine);
        CalcPrepaymentToDeduct;
        "Line Amount" := GetLineAmountToHandle("Qty. to Invoice");
        "Attached to Line No." := PrepmtLineNo;
        "VAT Base Amount" := PrepmtVATBaseToDeduct;
        INSERT;
      end;
      exit(PrepmtVATBaseToDeduct);
    END;

    LOCAL PROCEDURE DividePrepmtAmountLCY@83(VAR PrepmtSalesLine@1000 : Record "Sales Line";SalesHeader@1006 : Record "Sales Header");
    VAR
      CurrExchRate@1001 : Record "Currency Exchange Rate";
      ActualCurrencyFactor@1002 : Decimal;
    BEGIN
      with PrepmtSalesLine do begin
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            if SalesHeader."Currency Code" <> '' then
              ActualCurrencyFactor :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    SalesHeader."Posting Date",
                    SalesHeader."Currency Code",
                    "Prepmt Amt to Deduct",
                    SalesHeader."Currency Factor")) /
                "Prepmt Amt to Deduct"
            else
              ActualCurrencyFactor := 1;

            UpdatePrepmtAmountInvBuf("Line No.",ActualCurrencyFactor);
          until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmountInvBuf@92(PrepmtSalesLineNo@1000 : Integer;CurrencyFactor@1004 : Decimal);
    VAR
      PrepmtAmtRemainder@1002 : Decimal;
    BEGIN
      with TempPrepmtDeductLCYSalesLine do begin
        RESET;
        SETRANGE("Attached to Line No.",PrepmtSalesLineNo);
        if FINDSET(true) then
          repeat
            "Prepmt. Amount Inv. (LCY)" :=
              CalcRoundedAmount(CurrencyFactor * "VAT Base Amount",PrepmtAmtRemainder);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmountLCY@84(SalesHeader@1006 : Record "Sales Header";VAR PrepmtSalesLine@1000 : Record "Sales Line");
    VAR
      SalesLine@1005 : Record "Sales Line";
      SalesInvoiceLine@1013 : Record "Sales Line";
      DeductionFactor@1001 : Decimal;
      PrepmtVATPart@1009 : Decimal;
      PrepmtVATAmtRemainder@1010 : Decimal;
      TotalRoundingAmount@1011 : ARRAY [2] OF Decimal;
      TotalPrepmtAmount@1002 : ARRAY [2] OF Decimal;
      FinalInvoice@1003 : Boolean;
      PricesInclVATRoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      if PrepmtSalesLine."Prepayment Line" then begin
        PrepmtVATPart :=
          (PrepmtSalesLine."Amount Including VAT" - PrepmtSalesLine.Amount) / PrepmtSalesLine."Unit Price";

        with TempPrepmtDeductLCYSalesLine do begin
          RESET;
          SETRANGE("Attached to Line No.",PrepmtSalesLine."Line No.");
          if FINDSET(true) then begin
            FinalInvoice := IsFinalInvoice;
            repeat
              SalesLine := TempPrepmtDeductLCYSalesLine;
              SalesLine.FIND;
              if "Document Type" = "Document Type"::Invoice then begin
                SalesInvoiceLine := SalesLine;
                GetSalesOrderLine(SalesLine,SalesInvoiceLine);
                SalesLine."Qty. to Invoice" := SalesInvoiceLine."Qty. to Invoice";
              end;
              if SalesLine."Qty. to Invoice" <> "Qty. to Invoice" then
                SalesLine."Prepmt Amt to Deduct" := CalcPrepmtAmtToDeduct(SalesLine,SalesHeader.Ship);
              DeductionFactor :=
                SalesLine."Prepmt Amt to Deduct" /
                (SalesLine."Prepmt. Amt. Inv." - SalesLine."Prepmt Amt Deducted");

              "Prepmt. VAT Amount Inv. (LCY)" :=
                CalcRoundedAmount(SalesLine."Prepmt Amt to Deduct" * PrepmtVATPart,PrepmtVATAmtRemainder);
              if ("Prepayment %" <> 100) or IsFinalInvoice or ("Currency Code" <> '') then
                CalcPrepmtRoundingAmounts(TempPrepmtDeductLCYSalesLine,SalesLine,DeductionFactor,TotalRoundingAmount);
              MODIFY;

              if SalesHeader."Prices Including VAT" then
                if (("Prepayment %" <> 100) or IsFinalInvoice) and (DeductionFactor = 1) then begin
                  PricesInclVATRoundingAmount[1] := TotalRoundingAmount[1];
                  PricesInclVATRoundingAmount[2] := TotalRoundingAmount[2];
                end;

              if "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" then
                TotalPrepmtAmount[1] += "Prepmt. Amount Inv. (LCY)";
              TotalPrepmtAmount[2] += "Prepmt. VAT Amount Inv. (LCY)";
              FinalInvoice := FinalInvoice and IsFinalInvoice;
            until NEXT = 0;
          end;
        end;

        UpdatePrepmtSalesLineWithRounding(
          PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,
          FinalInvoice,PricesInclVATRoundingAmount);
      end;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtToDeduct@93(SalesLine@1000 : Record "Sales Line";Ship@1001 : Boolean) : Decimal;
    BEGIN
      with SalesLine do begin
        "Qty. to Invoice" := GetQtyToInvoice(SalesLine,Ship);
        CalcPrepaymentToDeduct;
        exit("Prepmt Amt to Deduct");
      end;
    END;

    LOCAL PROCEDURE GetQtyToInvoice@100(SalesLine@1000 : Record "Sales Line";Ship@1002 : Boolean) : Decimal;
    VAR
      AllowedQtyToInvoice@1001 : Decimal;
    BEGIN
      with SalesLine do begin
        AllowedQtyToInvoice := "Qty. Shipped Not Invoiced";
        if Ship then
          AllowedQtyToInvoice := AllowedQtyToInvoice + "Qty. to Ship";
        if "Qty. to Invoice" > AllowedQtyToInvoice then
          exit(AllowedQtyToInvoice);
        exit("Qty. to Invoice");
      end;
    END;

    LOCAL PROCEDURE GetLineDataFromOrder@94(VAR SalesLine@1000 : Record "Sales Line");
    VAR
      SalesShptLine@1001 : Record "Sales Shipment Line";
      SalesOrderLine@1002 : Record "Sales Line";
    BEGIN
      with SalesLine do begin
        SalesShptLine.GET("Shipment No.","Shipment Line No.");
        SalesOrderLine.GET("Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.");

        Quantity := SalesOrderLine.Quantity;
        "Qty. Shipped Not Invoiced" := SalesOrderLine."Qty. Shipped Not Invoiced";
        "Quantity Invoiced" := SalesOrderLine."Quantity Invoiced";
        "Prepmt Amt Deducted" := SalesOrderLine."Prepmt Amt Deducted";
        "Prepmt. Amt. Inv." := SalesOrderLine."Prepmt. Amt. Inv.";
        "Line Discount Amount" := SalesOrderLine."Line Discount Amount";
      end;
    END;

    LOCAL PROCEDURE CalcPrepmtRoundingAmounts@79(VAR PrepmtSalesLineBuf@1000 : Record "Sales Line";SalesLine@1003 : Record "Sales Line";DeductionFactor@1001 : Decimal;VAR TotalRoundingAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      with PrepmtSalesLineBuf do begin
        if "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" then begin
          RoundingAmount[1] :=
            "Prepmt. Amount Inv. (LCY)" - ROUND(DeductionFactor * SalesLine."Prepmt. Amount Inv. (LCY)");
          "Prepmt. Amount Inv. (LCY)" := "Prepmt. Amount Inv. (LCY)" - RoundingAmount[1];
          TotalRoundingAmount[1] += RoundingAmount[1];
        end;
        RoundingAmount[2] :=
          "Prepmt. VAT Amount Inv. (LCY)" - ROUND(DeductionFactor * SalesLine."Prepmt. VAT Amount Inv. (LCY)");
        "Prepmt. VAT Amount Inv. (LCY)" := "Prepmt. VAT Amount Inv. (LCY)" - RoundingAmount[2];
        TotalRoundingAmount[2] += RoundingAmount[2];
      end;
    END;

    LOCAL PROCEDURE UpdatePrepmtSalesLineWithRounding@89(VAR PrepmtSalesLine@1002 : Record "Sales Line";TotalRoundingAmount@1001 : ARRAY [2] OF Decimal;TotalPrepmtAmount@1000 : ARRAY [2] OF Decimal;FinalInvoice@1005 : Boolean;PricesInclVATRoundingAmount@1006 : ARRAY [2] OF Decimal);
    VAR
      AdjustAmount@1008 : Boolean;
      NewAmountIncludingVAT@1003 : Decimal;
      Prepmt100PctVATRoundingAmt@1004 : Decimal;
      AmountRoundingPrecision@1007 : Decimal;
    BEGIN
      with PrepmtSalesLine do begin
        NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
        if "Prepayment %" = 100 then
          TotalRoundingAmount[1] += "Amount Including VAT" - NewAmountIncludingVAT;
        AmountRoundingPrecision :=
          GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");

        if (ABS(TotalRoundingAmount[1]) <= AmountRoundingPrecision) and
           (ABS(TotalRoundingAmount[2]) <= AmountRoundingPrecision)
        then begin
          if "Prepayment %" = 100 then
            Prepmt100PctVATRoundingAmt := TotalRoundingAmount[1];
          TotalRoundingAmount[1] := 0;
        end;
        "Prepmt. Amount Inv. (LCY)" := TotalRoundingAmount[1];
        Amount := TotalPrepmtAmount[1] + TotalRoundingAmount[1];

        if (PricesInclVATRoundingAmount[1] <> 0) and (TotalRoundingAmount[1] = 0) then begin
          if ("Prepayment %" = 100) and FinalInvoice and
             (Amount + TotalPrepmtAmount[2] = "Amount Including VAT")
          then
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[1] := 0;
        end;

        if ((TotalRoundingAmount[2] <> 0) or FinalInvoice) and (TotalRoundingAmount[1] = 0) then begin
          if ("Prepayment %" = 100) and ("Prepmt. Amount Inv. (LCY)" = 0) then
            Prepmt100PctVATRoundingAmt += TotalRoundingAmount[2];
          TotalRoundingAmount[2] := 0;
        end;

        if (PricesInclVATRoundingAmount[2] <> 0) and (TotalRoundingAmount[2] = 0) then begin
          if ABS(Prepmt100PctVATRoundingAmt) <= AmountRoundingPrecision then
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[2] := 0;
        end;

        "Prepmt. VAT Amount Inv. (LCY)" := TotalRoundingAmount[2] + Prepmt100PctVATRoundingAmt;
        NewAmountIncludingVAT := Amount + TotalPrepmtAmount[2] + TotalRoundingAmount[2];
        if (PricesInclVATRoundingAmount[1] = 0) and (PricesInclVATRoundingAmount[2] = 0) or
           ("Currency Code" <> '') and FinalInvoice
        then
          Increment(
            TotalSalesLineLCY."Amount Including VAT",
            "Amount Including VAT" - NewAmountIncludingVAT - Prepmt100PctVATRoundingAmt);
        if "Currency Code" = '' then
          TotalSalesLine."Amount Including VAT" := TotalSalesLineLCY."Amount Including VAT";
        "Amount Including VAT" := NewAmountIncludingVAT;

        if FinalInvoice then
          AdjustAmount :=
            (TotalSalesLine.Amount = 0) and (TotalSalesLine."Amount Including VAT" <> 0) and
            (ABS(TotalSalesLine."Amount Including VAT") <= Currency."Amount Rounding Precision")
        else
          AdjustAmount := (TotalSalesLine.Amount < 0) and (TotalSalesLine."Amount Including VAT" < 0);
        if AdjustAmount then begin
          "Amount Including VAT" += TotalSalesLineLCY."Amount Including VAT";
          TotalSalesLine."Amount Including VAT" := 0;
          TotalSalesLineLCY."Amount Including VAT" := 0;
        end;
      end;
    END;

    LOCAL PROCEDURE CalcRoundedAmount@91(Amount@1000 : Decimal;VAR Remainder@1001 : Decimal) : Decimal;
    VAR
      AmountRnded@1002 : Decimal;
    BEGIN
      Amount := Amount + Remainder;
      AmountRnded := ROUND(Amount,GLSetup."Amount Rounding Precision");
      Remainder := Amount - AmountRnded;
      exit(AmountRnded);
    END;

    LOCAL PROCEDURE GetSalesOrderLine@85(VAR SalesOrderLine@1000 : Record "Sales Line";SalesLine@1001 : Record "Sales Line");
    VAR
      SalesShptLine@1002 : Record "Sales Shipment Line";
    BEGIN
      SalesShptLine.GET(SalesLine."Shipment No.",SalesLine."Shipment Line No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,
        SalesShptLine."Order No.",SalesShptLine."Order Line No.");
      SalesOrderLine."Prepmt Amt to Deduct" := SalesLine."Prepmt Amt to Deduct";
    END;

    LOCAL PROCEDURE DecrementPrepmtAmtInvLCY@86(SalesLine@1000 : Record "Sales Line";VAR PrepmtAmountInvLCY@1001 : Decimal;VAR PrepmtVATAmountInvLCY@1002 : Decimal);
    BEGIN
      TempPrepmtDeductLCYSalesLine.RESET;
      TempPrepmtDeductLCYSalesLine := SalesLine;
      if TempPrepmtDeductLCYSalesLine.FIND then begin
        PrepmtAmountInvLCY := PrepmtAmountInvLCY - TempPrepmtDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)";
        PrepmtVATAmountInvLCY := PrepmtVATAmountInvLCY - TempPrepmtDeductLCYSalesLine."Prepmt. VAT Amount Inv. (LCY)";
      end;
    END;

    LOCAL PROCEDURE AdjustFinalInvWith100PctPrepmt@97(VAR CombinedSalesLine@1000 : Record "Sales Line");
    VAR
      DiffToLineDiscAmt@1001 : Decimal;
    BEGIN
      with TempPrepmtDeductLCYSalesLine do begin
        RESET;
        SETRANGE("Prepayment %",100);
        if FINDSET(true) then
          repeat
            if IsFinalInvoice then begin
              DiffToLineDiscAmt := "Prepmt Amt to Deduct" - "Line Amount";
              if "Document Type" = "Document Type"::Order then
                DiffToLineDiscAmt := DiffToLineDiscAmt * Quantity / "Qty. to Invoice";
              if DiffToLineDiscAmt <> 0 then begin
                CombinedSalesLine.GET("Document Type","Document No.","Line No.");
                CombinedSalesLine."Line Discount Amount" -= DiffToLineDiscAmt;
                CombinedSalesLine.MODIFY;

                "Line Discount Amount" := CombinedSalesLine."Line Discount Amount";
                MODIFY;
              end;
            end;
          until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE GetPrepmtDiffToLineAmount@98(SalesLine@1000 : Record "Sales Line") : Decimal;
    BEGIN
      with TempPrepmtDeductLCYSalesLine do
        if SalesLine."Prepayment %" = 100 then
          if GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.") then
            exit("Prepmt Amt to Deduct" - "Line Amount");
      exit(0);
    END;

    LOCAL PROCEDURE MergeSaleslines@52(SalesHeader@1000000004 : Record "Sales Header";VAR SalesLine@1000 : Record "Sales Line";VAR SalesLine2@1000000002 : Record "Sales Line";VAR MergedSalesLine@1000000003 : Record "Sales Line");
    BEGIN
      with SalesLine do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        if FIND('-') then
          repeat
            MergedSalesLine := SalesLine;
            MergedSalesLine.INSERT;
          until NEXT = 0;
      end;
      with SalesLine2 do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        if FIND('-') then
          repeat
            MergedSalesLine := SalesLine2;
            MergedSalesLine.INSERT;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostJobContractLine@54(SalesHeader@1001 : Record "Sales Header";SalesLine@1000 : Record "Sales Line");
    BEGIN
      if SalesLine."Job Contract Entry No." = 0 then
        exit;
      if (SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice) and
         (SalesHeader."Document Type" <> SalesHeader."Document Type"::"Credit Memo")
      then
        SalesLine.TESTFIELD("Job Contract Entry No.",0);

      SalesLine.TESTFIELD("Job No.");
      SalesLine.TESTFIELD("Job Task No.");

      if SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice then
        SalesLine."Document No." := SalesInvHeader."No.";
      if SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" then
        SalesLine."Document No." := SalesCrMemoHeader."No.";
      JobContractLine := true;
      JobPostLine.PostInvoiceContractLine(SalesHeader,SalesLine);
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(SalesHeader@1005 : Record "Sales Header";SalesLine@1000 : Record "Sales Line";VAR ICGenJnlLineNo@1006 : Integer);
    VAR
      ICGLAccount@1001 : Record "IC G/L Account";
      Vend@1002 : Record Vendor;
      ICPartner@1003 : Record "IC Partner";
      CurrExchRate@1004 : Record "Currency Exchange Rate";
      GenJnlLine@1007 : Record "Gen. Journal Line";
    BEGIN
      SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
      SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
      SalesLine.TESTFIELD("IC Partner Ref. Type",SalesLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(SalesLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;

      with TempICGenJnlLine do begin
        InitNewLine(
          SalesHeader."Posting Date",SalesHeader."Document Date",SalesHeader."Posting Description",
          SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code",SalesLine."Dimension Set ID",
          SalesHeader."Reason Code");
        "Line No." := ICGenJnlLineNo;

        CopyDocumentFields(GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series");

        VALIDATE("Account Type","Account Type"::"IC Partner");
        VALIDATE("Account No.",SalesLine."IC Partner Code");
        "Source Currency Code" := SalesHeader."Currency Code";
        "Source Currency Amount" := Amount;
        Correction := SalesHeader.Correction;
        "Country/Region Code" := SalesHeader."VAT Country/Region Code";
        "Source Type" := GenJnlLine."Source Type"::Customer;
        "Source No." := SalesHeader."Bill-to Customer No.";
        "Source Line No." := SalesLine."Line No.";
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",SalesLine."No.");

        Vend.SETRANGE("IC Partner Code",SalesLine."IC Partner Code");
        if Vend.FINDFIRST then begin
          VALIDATE("Bal. Gen. Bus. Posting Group",Vend."Gen. Bus. Posting Group");
          VALIDATE("Bal. VAT Bus. Posting Group",Vend."VAT Bus. Posting Group");
        end;
        VALIDATE("Bal. VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group");
        "IC Partner Code" := SalesLine."IC Partner Code";
        "IC Partner G/L Acc. No." := SalesLine."IC Partner Reference";
        "IC Direction" := "IC Direction"::Outgoing;
        ICPartner.GET(SalesLine."IC Partner Code");
        if ICPartner."Cost Distribution in LCY" and (SalesLine."Currency Code" <> '') then begin
          "Currency Code" := '';
          "Currency Factor" := 0;
          Currency.GET(SalesLine."Currency Code");
          if SalesHeader.IsCreditDocType then
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",SalesLine."Currency Code",
                  SalesLine.Amount,SalesHeader."Currency Factor"))
          else
            Amount :=
              -ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",SalesLine."Currency Code",
                  SalesLine.Amount,SalesHeader."Currency Factor"));
        end else begin
          Currency.InitRoundingPrecision;
          "Currency Code" := SalesHeader."Currency Code";
          "Currency Factor" := SalesHeader."Currency Factor";
          if SalesHeader.IsCreditDocType then
            Amount := SalesLine.Amount
          else
            Amount := -SalesLine.Amount;
        end;
        if "Bal. VAT %" <> 0 then
          Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
        VALIDATE(Amount);
        OnBeforeInsertICGenJnlLine(TempICGenJnlLine,SalesHeader,SalesLine);
        INSERT;
      end;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInOutBoxMgt@1001 : Codeunit ICInboxOutboxMgt;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      TempICGenJnlLine.SETFILTER(Amount,'<>%1',0);
      if TempICGenJnlLine.FIND('-') then
        repeat
          ICTransactionNo := ICInOutBoxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,false);
          ICInOutBoxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine);
          GenJnlPostLine.RunWithCheck(TempICGenJnlLine);
        until TempICGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGetShipmentPPmtAmtToDeduct@29();
    VAR
      TempSalesLine@1004 : TEMPORARY Record "Sales Line";
      TempShippedSalesLine@1003 : TEMPORARY Record "Sales Line";
      TempTotalSalesLine@1007 : TEMPORARY Record "Sales Line";
      TempSalesShptLine@1009 : TEMPORARY Record "Sales Shipment Line";
      SalesShptLine@1002 : Record "Sales Shipment Line";
      MaxAmtToDeduct@1001 : Decimal;
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        SETFILTER("Shipment No.",'<>%1','');
        SETFILTER("Prepmt Amt to Deduct",'<>0');
        if ISEMPTY then
          exit;

        SETRANGE("Prepmt Amt to Deduct");
        if FINDSET then
          repeat
            if SalesShptLine.GET("Shipment No.","Shipment Line No.") then begin
              TempShippedSalesLine := TempSalesLine;
              TempShippedSalesLine.INSERT;
              TempSalesShptLine := SalesShptLine;
              if TempSalesShptLine.INSERT then;

              if not TempTotalSalesLine.GET("Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.") then begin
                TempTotalSalesLine.INIT;
                TempTotalSalesLine."Document Type" := "Document Type"::Order;
                TempTotalSalesLine."Document No." := SalesShptLine."Order No.";
                TempTotalSalesLine."Line No." := SalesShptLine."Order Line No.";
                TempTotalSalesLine.INSERT;
              end;
              TempTotalSalesLine."Qty. to Invoice" := TempTotalSalesLine."Qty. to Invoice" + "Qty. to Invoice";
              TempTotalSalesLine."Prepmt Amt to Deduct" := TempTotalSalesLine."Prepmt Amt to Deduct" + "Prepmt Amt to Deduct";
              AdjustInvLineWith100PctPrepmt(TempSalesLine,TempTotalSalesLine);
              TempTotalSalesLine.MODIFY;
            end;
          until NEXT = 0;

        if TempShippedSalesLine.FINDSET then
          repeat
            if TempSalesShptLine.GET(TempShippedSalesLine."Shipment No.",TempShippedSalesLine."Shipment Line No.") then
              if GET(TempShippedSalesLine."Document Type"::Order,TempSalesShptLine."Order No.",TempSalesShptLine."Order Line No.") then
                if TempTotalSalesLine.GET(
                     TempShippedSalesLine."Document Type"::Order,TempSalesShptLine."Order No.",TempSalesShptLine."Order Line No.")
                then begin
                  MaxAmtToDeduct := "Prepmt. Amt. Inv." - "Prepmt Amt Deducted";

                  if TempTotalSalesLine."Prepmt Amt to Deduct" > MaxAmtToDeduct then
                    ERROR(STRSUBSTNO(PrepAmountToDeductToBigErr,FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));

                  if (TempTotalSalesLine."Qty. to Invoice" = Quantity - "Quantity Invoiced") and
                     (TempTotalSalesLine."Prepmt Amt to Deduct" <> MaxAmtToDeduct)
                  then
                    ERROR(STRSUBSTNO(PrepAmountToDeductToSmallErr,FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));
                end;
          until TempShippedSalesLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AdjustInvLineWith100PctPrepmt@99(VAR SalesInvoiceLine@1000 : Record "Sales Line";VAR TempTotalSalesLine@1001 : TEMPORARY Record "Sales Line");
    VAR
      SalesOrderLine@1003 : Record "Sales Line";
      DiffAmtToDeduct@1002 : Decimal;
    BEGIN
      if SalesInvoiceLine."Prepayment %" = 100 then begin
        SalesOrderLine := TempTotalSalesLine;
        SalesOrderLine.FIND;
        if TempTotalSalesLine."Qty. to Invoice" = SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced" then begin
          DiffAmtToDeduct :=
            SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted" - TempTotalSalesLine."Prepmt Amt to Deduct";
          if DiffAmtToDeduct <> 0 then begin
            SalesInvoiceLine."Prepmt Amt to Deduct" := SalesInvoiceLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
            SalesInvoiceLine."Line Amount" := SalesInvoiceLine."Prepmt Amt to Deduct";
            SalesInvoiceLine."Line Discount Amount" := SalesInvoiceLine."Line Discount Amount" - DiffAmtToDeduct;
            ModifyTempLine(SalesInvoiceLine);
            TempTotalSalesLine."Prepmt Amt to Deduct" := TempTotalSalesLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE ArchiveUnpostedOrder@56(SalesHeader@1001 : Record "Sales Header");
    VAR
      SalesLine@1002 : Record "Sales Line";
      ArchiveManagement@1000 : Codeunit ArchiveManagement;
    BEGIN
      SalesSetup.GET;
      if not SalesSetup."Archive Quotes and Orders" then
        exit;
      if not (SalesHeader."Document Type" in [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"]) then
        exit;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Quantity,'<>0');
      if SalesHeader."Document Type" = SalesHeader."Document Type"::Order then
        SalesLine.SETFILTER("Qty. to Ship",'<>0')
      else
        SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
      if not SalesLine.ISEMPTY and not PreviewMode then begin
        RoundDeferralsForArchive(SalesHeader,SalesLine);
        ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);
      end;
    END;

    LOCAL PROCEDURE SynchBOMSerialNo@1204(VAR ServItemTmp3@1200 : TEMPORARY Record "Service Item";VAR ServItemTmpCmp3@1201 : TEMPORARY Record "Service Item Component");
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
      ItemLedgEntry2@1001 : Record "Item Ledger Entry";
      TempSalesShipMntLine@1002 : TEMPORARY Record "Sales Shipment Line";
      ServItemTmpCmp4@1003 : TEMPORARY Record "Service Item Component";
      ServItemCompLocal@1004 : Record "Service Item Component";
      TempItemLedgEntry2@1008 : TEMPORARY Record "Item Ledger Entry";
      ChildCount@1005 : Integer;
      EndLoop@1006 : Boolean;
    BEGIN
      if not ServItemTmpCmp3.FIND('-') then
        exit;

      if not ServItemTmp3.FIND('-') then
        exit;

      TempSalesShipMntLine.DELETEALL;
      repeat
        CLEAR(TempSalesShipMntLine);
        TempSalesShipMntLine."Document No." := ServItemTmp3."Sales/Serv. Shpt. Document No.";
        TempSalesShipMntLine."Line No." := ServItemTmp3."Sales/Serv. Shpt. Line No.";
        if TempSalesShipMntLine.INSERT then;
      until ServItemTmp3.NEXT = 0;

      if not TempSalesShipMntLine.FIND('-') then
        exit;

      ServItemTmp3.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
      CLEAR(ItemLedgEntry);
      ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");

      repeat
        ChildCount := 0;
        ServItemTmpCmp4.DELETEALL;
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Document No.",TempSalesShipMntLine."Document No.");
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Line No.",TempSalesShipMntLine."Line No.");
        if ServItemTmp3.FIND('-') then
          repeat
            ServItemTmpCmp3.SETRANGE(Active,true);
            ServItemTmpCmp3.SETRANGE("Parent Service Item No.",ServItemTmp3."No.");
            if ServItemTmpCmp3.FIND('-') then
              repeat
                ChildCount += 1;
                ServItemTmpCmp4 := ServItemTmpCmp3;
                ServItemTmpCmp4.INSERT;
              until ServItemTmpCmp3.NEXT = 0;
          until ServItemTmp3.NEXT = 0;
        ItemLedgEntry.SETRANGE("Document No.",TempSalesShipMntLine."Document No.");
        ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
        ItemLedgEntry.SETRANGE("Document Line No.",TempSalesShipMntLine."Line No.");
        if ItemLedgEntry.FINDFIRST and ServItemTmpCmp4.FIND('-') then begin
          CLEAR(ItemLedgEntry2);
          ItemLedgEntry2.GET(ItemLedgEntry."Entry No.");
          EndLoop := false;
          repeat
            if ItemLedgEntry2."Item No." = ServItemTmpCmp4."No." then
              EndLoop := true
            else
              if ItemLedgEntry2.NEXT = 0 then
                EndLoop := true;
          until EndLoop;
          ItemLedgEntry2.SETRANGE("Entry No.",ItemLedgEntry2."Entry No.",ItemLedgEntry2."Entry No." + ChildCount - 1);
          if ItemLedgEntry2.FINDSET then
            repeat
              TempItemLedgEntry2 := ItemLedgEntry2;
              TempItemLedgEntry2.INSERT;
            until ItemLedgEntry2.NEXT = 0;
          repeat
            if ServItemCompLocal.GET(
                 ServItemTmpCmp4.Active,
                 ServItemTmpCmp4."Parent Service Item No.",
                 ServItemTmpCmp4."Line No.")
            then begin
              TempItemLedgEntry2.SETRANGE("Item No.",ServItemCompLocal."No.");
              if TempItemLedgEntry2.FINDFIRST then begin
                ServItemCompLocal."Serial No." := TempItemLedgEntry2."Serial No.";
                ServItemCompLocal.MODIFY;
                TempItemLedgEntry2.DELETE;
              end;
            end;
          until ServItemTmpCmp4.NEXT = 0;
        end;
      until TempSalesShipMntLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetGLSetup@60();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE LockTables@58();
    VAR
      SalesLine@1000 : Record "Sales Line";
      PurchOrderHeader@1002 : Record "Purchase Header";
      PurchOrderLine@1001 : Record "Purchase Line";
    BEGIN
      SalesLine.LOCKTABLE;
      ItemChargeAssgntSales.LOCKTABLE;
      PurchOrderLine.LOCKTABLE;
      PurchOrderHeader.LOCKTABLE;
      GetGLSetup;
      if not GLSetup.OptimGLEntLockForMultiuserEnv then begin
        GLEntry.LOCKTABLE;
        if GLEntry.FINDLAST then;
      end;
    END;

    LOCAL PROCEDURE PostCustomerEntry@101(SalesHeader@1000 : Record "Sales Header";TotalSalesLine2@1005 : Record "Sales Line";TotalSalesLineLCY2@1006 : Record "Sales Line";DocType@1002 : Option;DocNo@1003 : Code[20];ExtDocNo@1004 : Code[35];SourceCode@1007 : Code[10]);
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          SalesHeader."Posting Date",SalesHeader."Document Date",SalesHeader."Posting Description",
          SalesHeader."Shortcut Dimension 1 Code",SalesHeader."Shortcut Dimension 2 Code",
          SalesHeader."Dimension Set ID",SalesHeader."Reason Code");

        CopyDocumentFields(DocType,DocNo,ExtDocNo,SourceCode,'');
        "Account Type" := "Account Type"::Customer;
        "Account No." := SalesHeader."Bill-to Customer No.";
        CopyFromSalesHeader(SalesHeader);
        SetCurrencyFactor(SalesHeader."Currency Code",SalesHeader."Currency Factor");

        "System-Created Entry" := true;

        CopyFromSalesHeaderApplyTo(SalesHeader);
        CopyFromSalesHeaderPayment(SalesHeader);

        Amount := -TotalSalesLine2."Amount Including VAT";
        "Source Currency Amount" := -TotalSalesLine2."Amount Including VAT";
        "Amount (LCY)" := -TotalSalesLineLCY2."Amount Including VAT";
        "Sales/Purch. (LCY)" := -TotalSalesLineLCY2.Amount;
        "Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
        "Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";

        OnBeforePostCustomerEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2);
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@102(VAR CustLedgerEntry@1000 : Record "Cust. Ledger Entry");
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      case GenJnlLineDocType of
        GenJnlLine."Document Type"::Invoice:
          begin
            FindCustLedgEntry(GenJnlLineDocType,GenJnlLineDocNo,CustLedgerEntry);
            SalesInvHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
            SalesInvHeader.MODIFY;
          end;
        GenJnlLine."Document Type"::"Credit Memo":
          begin
            FindCustLedgEntry(GenJnlLineDocType,GenJnlLineDocNo,CustLedgerEntry);
            SalesCrMemoHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
            SalesCrMemoHeader.MODIFY;
          end;
      end;
    END;

    LOCAL PROCEDURE MAX@55(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      if number1 > number2 then
        exit(number1);
      exit(number2);
    END;

    LOCAL PROCEDURE PostBalancingEntry@63(SalesHeader@1014 : Record "Sales Header";TotalSalesLine2@1013 : Record "Sales Line";TotalSalesLineLCY2@1011 : Record "Sales Line";DocType@1009 : Option;DocNo@1008 : Code[20];ExtDocNo@1007 : Code[35];SourceCode@1006 : Code[10]);
    VAR
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      FindCustLedgEntry(DocType,DocNo,CustLedgEntry);

      with GenJnlLine do begin
        InitNewLine(
          SalesHeader."Posting Date",SalesHeader."Document Date",SalesHeader."Posting Description",
          SalesHeader."Shortcut Dimension 1 Code",SalesHeader."Shortcut Dimension 2 Code",
          SalesHeader."Dimension Set ID",SalesHeader."Reason Code");

        CopyDocumentFields(0,DocNo,ExtDocNo,SourceCode,'');
        "Account Type" := "Account Type"::Customer;
        "Account No." := SalesHeader."Bill-to Customer No.";
        CopyFromSalesHeader(SalesHeader);
        SetCurrencyFactor(SalesHeader."Currency Code",SalesHeader."Currency Factor");

        if SalesHeader.IsCreditDocType then
          "Document Type" := "Document Type"::Refund
        else
          "Document Type" := "Document Type"::Payment;

        SetApplyToDocNo(SalesHeader,GenJnlLine,DocType,DocNo);

        Amount := TotalSalesLine2."Amount Including VAT" + CustLedgEntry."Remaining Pmt. Disc. Possible";
        "Source Currency Amount" := Amount;
        CustLedgEntry.CALCFIELDS(Amount);
        if CustLedgEntry.Amount = 0 then
          "Amount (LCY)" := TotalSalesLineLCY2."Amount Including VAT"
        else
          "Amount (LCY)" :=
            TotalSalesLineLCY2."Amount Including VAT" +
            ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
        "Allow Zero-Amount Posting" := true;

        OnBeforePostBalancingEntry(GenJnlLine,SalesHeader,TotalSalesLine2,TotalSalesLineLCY2);
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE SetApplyToDocNo@57(SalesHeader@1000 : Record "Sales Header";VAR GenJnlLine@1001 : Record "Gen. Journal Line";DocType@1002 : Option;DocNo@1003 : Code[20]);
    BEGIN
      with GenJnlLine do begin
        if SalesHeader."Bal. Account Type" = SalesHeader."Bal. Account Type"::"Bank Account" then
          "Bal. Account Type" := "Bal. Account Type"::"Bank Account";
        "Bal. Account No." := SalesHeader."Bal. Account No.";
        "Applies-to Doc. Type" := DocType;
        "Applies-to Doc. No." := DocNo;
      end;
    END;

    LOCAL PROCEDURE FindCustLedgEntry@71(DocType@1003 : Option;DocNo@1002 : Code[20];VAR CustLedgEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      CustLedgEntry.SETRANGE("Document Type",DocType);
      CustLedgEntry.SETRANGE("Document No.",DocNo);
      CustLedgEntry.FINDLAST;
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(SalesLine2@1000 : Record "Sales Line";ShipOrReceive@1002 : Boolean) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      if ShipOrReceive then
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((SalesLine2."Qty. to Ship" + SalesLine2."Quantity Shipped") <> 0) or
          ((SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced") <> 0) or
          ((SalesLine2."Return Qty. to Receive" + SalesLine2."Return Qty. Received") <> 0)
      else
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (SalesLine2."Quantity Shipped" <> 0) or
          (SalesLine2."Return Qty. Received" <> 0);

      exit(HasItemLedgerEntry);
    END;

    LOCAL PROCEDURE CheckPostRestrictions@115(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      with SalesHeader do begin
        if not PreviewMode then
          OnCheckSalesPostRestrictions;

        CheckCustBlockage(SalesHeader,"Sell-to Customer No.",true);

        if "Bill-to Customer No." <> "Sell-to Customer No." then
          CheckCustBlockage(SalesHeader,"Bill-to Customer No.",false);
      end;
    END;

    LOCAL PROCEDURE CheckCustBlockage@1029(SalesHeader@1000 : Record "Sales Header";CustCode@1011 : Code[20];ExecuteDocCheck@1012 : Boolean);
    VAR
      Cust@1039 : Record Customer;
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
    BEGIN
      with SalesHeader do begin
        Cust.GET(CustCode);
        if Receive then
          Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,true)
        else begin
          if Ship and CheckDocumentType(SalesHeader,ExecuteDocCheck) then begin
            ResetTempLines(TempSalesLine);
            TempSalesLine.SETFILTER("Qty. to Ship",'<>0');
            TempSalesLine.SETRANGE("Shipment No.",'');
            if not TempSalesLine.ISEMPTY then
              Cust.CheckBlockedCustOnDocs(Cust,"Document Type",true,true);
          end else
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,true);
        end;
      end;
    END;

    LOCAL PROCEDURE CheckDocumentType@1030(SalesHeader@1000 : Record "Sales Header";ExecuteDocCheck@1031 : Boolean) : Boolean;
    BEGIN
      with SalesHeader do
        if ExecuteDocCheck then
          exit(
            ("Document Type" = "Document Type"::Order) or
            (("Document Type" = "Document Type"::Invoice) and SalesSetup."Shipment on Invoice"));
      exit(true);
    END;

    LOCAL PROCEDURE UpdateWonOpportunities@66(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      Opp@1001 : Record Opportunity;
      OpportunityEntry@1002 : Record "Opportunity Entry";
    BEGIN
      with SalesHeader do
        if "Document Type" = "Document Type"::Order then begin
          Opp.RESET;
          Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
          Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Order);
          Opp.SETRANGE("Sales Document No.","No.");
          Opp.SETRANGE(Status,Opp.Status::Won);
          if Opp.FINDFIRST then begin
            Opp."Sales Document Type" := Opp."Sales Document Type"::"Posted Invoice";
            Opp."Sales Document No." := SalesInvHeader."No.";
            Opp.MODIFY;
            OpportunityEntry.RESET;
            OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
            OpportunityEntry.SETRANGE(Active,true);
            OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
            if OpportunityEntry.FINDFIRST then begin
              OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(SalesHeader);
              OpportunityEntry.MODIFY;
            end;
          end;
        end;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoicedForShipment@90(VAR QtyToBeInvoiced@1000 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1002 : Boolean;HasATOShippedNotInvoiced@1003 : Boolean;SalesLine@1007 : Record "Sales Line";SalesShptLine@1006 : Record "Sales Shipment Line";InvoicingTrackingSpecification@1004 : Record "Tracking Specification";ItemLedgEntryNotInvoiced@1005 : Record "Item Ledger Entry");
    BEGIN
      if TrackingSpecificationExists then begin
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      end else
        if HasATOShippedNotInvoiced then begin
          QtyToBeInvoicedBase := ItemLedgEntryNotInvoiced.Quantity - ItemLedgEntryNotInvoiced."Invoiced Quantity";
          if ABS(QtyToBeInvoicedBase) > ABS(RemQtyToBeInvoicedBase) then
            QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Qty. to Ship (Base)";
          QtyToBeInvoiced := ROUND(QtyToBeInvoicedBase / SalesShptLine."Qty. per Unit of Measure",0.00001);
        end else begin
          QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Qty. to Ship";
          QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Qty. to Ship (Base)";
        end;

      if ABS(QtyToBeInvoiced) > ABS(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced") then begin
        QtyToBeInvoiced := -(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced");
        QtyToBeInvoicedBase := -(SalesShptLine."Quantity (Base)" - SalesShptLine."Qty. Invoiced (Base)");
      end;
      if ABS(QtyToBeInvoiced) > ABS(RemQtyToBeInvoiced) then begin
        QtyToBeInvoiced := RemQtyToBeInvoiced;
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoicedForReturnReceipt@201(VAR QtyToBeInvoiced@1002 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1000 : Boolean;SalesLine@1004 : Record "Sales Line";ReturnReceiptLine@1003 : Record "Return Receipt Line";InvoicingTrackingSpecification@1005 : Record "Tracking Specification");
    BEGIN
      if TrackingSpecificationExists then begin
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      end else begin
        QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Return Qty. to Receive";
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Return Qty. to Receive (Base)";
      end;
      if ABS(QtyToBeInvoiced) >
         ABS(ReturnReceiptLine.Quantity - ReturnReceiptLine."Quantity Invoiced")
      then begin
        QtyToBeInvoiced := ReturnReceiptLine.Quantity - ReturnReceiptLine."Quantity Invoiced";
        QtyToBeInvoicedBase := ReturnReceiptLine."Quantity (Base)" - ReturnReceiptLine."Qty. Invoiced (Base)";
      end;
      if ABS(QtyToBeInvoiced) > ABS(RemQtyToBeInvoiced) then begin
        QtyToBeInvoiced := RemQtyToBeInvoiced;
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE UpdateRemainingQtyToBeInvoiced@125(SalesShptLine@1000 : Record "Sales Shipment Line";VAR RemQtyToInvoiceCurrLine@1001 : Decimal;VAR RemQtyToInvoiceCurrLineBase@1002 : Decimal);
    BEGIN
      RemQtyToInvoiceCurrLine := -SalesShptLine.Quantity + SalesShptLine."Quantity Invoiced";
      RemQtyToInvoiceCurrLineBase := -SalesShptLine."Quantity (Base)" + SalesShptLine."Qty. Invoiced (Base)";
      if RemQtyToInvoiceCurrLine < RemQtyToBeInvoiced then begin
        RemQtyToInvoiceCurrLine := RemQtyToBeInvoiced;
        RemQtyToInvoiceCurrLineBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE IsEndLoopForShippedNotInvoiced@96(RemQtyToBeInvoiced@1004 : Decimal;TrackingSpecificationExists@1001 : Boolean;VAR HasATOShippedNotInvoiced@1000 : Boolean;VAR SalesShptLine@1006 : Record "Sales Shipment Line";VAR InvoicingTrackingSpecification@1002 : Record "Tracking Specification";VAR ItemLedgEntryNotInvoiced@1003 : Record "Item Ledger Entry";SalesLine@1005 : Record "Sales Line") : Boolean;
    BEGIN
      if TrackingSpecificationExists then
        exit((InvoicingTrackingSpecification.NEXT = 0) or (RemQtyToBeInvoiced = 0));

      if HasATOShippedNotInvoiced then begin
        HasATOShippedNotInvoiced := ItemLedgEntryNotInvoiced.NEXT <> 0;
        if not HasATOShippedNotInvoiced then
          exit(not SalesShptLine.FINDSET or (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship")));
        exit(ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship"));
      end;

      exit((SalesShptLine.NEXT = 0) or (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship")));
    END;

    [External]
    PROCEDURE SetItemEntryRelation@87(VAR ItemEntryRelation@1000 : Record "Item Entry Relation";VAR SalesShptLine@1001 : Record "Sales Shipment Line";VAR InvoicingTrackingSpecification@1004 : Record "Tracking Specification";VAR ItemLedgEntryNotInvoiced@1005 : Record "Item Ledger Entry";TrackingSpecificationExists@1002 : Boolean;HasATOShippedNotInvoiced@1003 : Boolean);
    BEGIN
      if TrackingSpecificationExists then begin
        ItemEntryRelation.GET(InvoicingTrackingSpecification."Item Ledger Entry No.");
        SalesShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
      end else
        if HasATOShippedNotInvoiced then begin
          ItemEntryRelation."Item Entry No." := ItemLedgEntryNotInvoiced."Entry No.";
          SalesShptLine.GET(ItemLedgEntryNotInvoiced."Document No.",ItemLedgEntryNotInvoiced."Document Line No.");
        end else
          ItemEntryRelation."Item Entry No." := SalesShptLine."Item Shpt. Entry No.";
    END;

    LOCAL PROCEDURE PostATOAssocItemJnlLine@76(SalesHeader@1004 : Record "Sales Header";SalesLine@1003 : Record "Sales Line";VAR PostedATOLink@1000 : Record "Posted Assemble-to-Order Link";VAR RemQtyToBeInvoiced@1002 : Decimal;VAR RemQtyToBeInvoicedBase@1001 : Decimal);
    VAR
      DummyTrackingSpecification@1005 : Record "Tracking Specification";
    BEGIN
      with PostedATOLink do begin
        DummyTrackingSpecification.INIT;
        if SalesLine."Document Type" = SalesLine."Document Type"::Order then begin
          "Assembled Quantity" := -"Assembled Quantity";
          "Assembled Quantity (Base)" := -"Assembled Quantity (Base)";
          if ABS(RemQtyToBeInvoiced) >= ABS("Assembled Quantity") then begin
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesHeader,SalesLine,
                "Assembled Quantity","Assembled Quantity (Base)",
                "Assembled Quantity","Assembled Quantity (Base)",
                0,'',DummyTrackingSpecification,true);
            RemQtyToBeInvoiced -= "Assembled Quantity";
            RemQtyToBeInvoicedBase -= "Assembled Quantity (Base)";
          end else begin
            if RemQtyToBeInvoiced <> 0 then
              ItemLedgShptEntryNo :=
                PostItemJnlLine(
                  SalesHeader,SalesLine,
                  RemQtyToBeInvoiced,
                  RemQtyToBeInvoicedBase,
                  RemQtyToBeInvoiced,
                  RemQtyToBeInvoicedBase,
                  0,'',DummyTrackingSpecification,true);

            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesHeader,SalesLine,
                "Assembled Quantity" - RemQtyToBeInvoiced,
                "Assembled Quantity (Base)" - RemQtyToBeInvoicedBase,
                0,0,
                0,'',DummyTrackingSpecification,true);

            RemQtyToBeInvoiced := 0;
            RemQtyToBeInvoicedBase := 0;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE GetOpenLinkedATOs@72(VAR TempAsmHeader@1000 : TEMPORARY Record "Assembly Header");
    VAR
      TempSalesLine@1002 : TEMPORARY Record "Sales Line";
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        if FINDSET then
          repeat
            if AsmToOrderExists(AsmHeader) then
              if AsmHeader.Status = AsmHeader.Status::Open then begin
                TempAsmHeader.TRANSFERFIELDS(AsmHeader);
                TempAsmHeader.INSERT;
              end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ReopenAsmOrders@69(VAR TempAsmHeader@1002 : TEMPORARY Record "Assembly Header");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      if TempAsmHeader.FIND('-') then
        repeat
          AsmHeader.GET(TempAsmHeader."Document Type",TempAsmHeader."No.");
          AsmHeader.Status := AsmHeader.Status::Open;
          AsmHeader.MODIFY;
        until TempAsmHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE InitPostATO@53(SalesHeader@1002 : Record "Sales Header";VAR SalesLine@1000 : Record "Sales Line");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
      Window@1003 : Dialog;
    BEGIN
      if SalesLine.AsmToOrderExists(AsmHeader) then begin
        Window.OPEN(AssemblyCheckProgressMsg);
        Window.UPDATE(1,
          STRSUBSTNO('%1 %2 %3 %4',
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO('%1 %2',AsmHeader."Document Type",AsmHeader."No."));

        SalesLine.CheckAsmToOrder(AsmHeader);
        if not HasQtyToAsm(SalesLine,AsmHeader) then
          exit;

        AsmPost.SetPostingDate(true,SalesHeader."Posting Date");
        AsmPost.InitPostATO(AsmHeader);

        Window.CLOSE;
      end;
    END;

    LOCAL PROCEDURE InitPostATOs@179(SalesHeader@1001 : Record "Sales Header");
    VAR
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
    BEGIN
      with TempSalesLine do begin
        FindNotShippedLines(SalesHeader,TempSalesLine);
        SETFILTER("Qty. to Assemble to Order",'<>0');
        if FINDSET then
          repeat
            InitPostATO(SalesHeader,TempSalesLine);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostATO@59(SalesHeader@1005 : Record "Sales Header";VAR SalesLine@1000 : Record "Sales Line";VAR TempPostedATOLink@1004 : TEMPORARY Record "Posted Assemble-to-Order Link");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
      PostedATOLink@1002 : Record "Posted Assemble-to-Order Link";
      Window@1003 : Dialog;
    BEGIN
      if SalesLine.AsmToOrderExists(AsmHeader) then begin
        Window.OPEN(AssemblyPostProgressMsg);
        Window.UPDATE(1,
          STRSUBSTNO('%1 %2 %3 %4',
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO('%1 %2',AsmHeader."Document Type",AsmHeader."No."));

        SalesLine.CheckAsmToOrder(AsmHeader);
        if not HasQtyToAsm(SalesLine,AsmHeader) then
          exit;
        if AsmHeader."Remaining Quantity (Base)" = 0 then
          exit;

        PostedATOLink.INIT;
        PostedATOLink."Assembly Document Type" := PostedATOLink."Assembly Document Type"::Assembly;
        PostedATOLink."Assembly Document No." := AsmHeader."Posting No.";
        PostedATOLink."Document Type" := PostedATOLink."Document Type"::"Sales Shipment";
        PostedATOLink."Document No." := SalesHeader."Shipping No.";
        PostedATOLink."Document Line No." := SalesLine."Line No.";

        PostedATOLink."Assembly Order No." := AsmHeader."No.";
        PostedATOLink."Order No." := SalesLine."Document No.";
        PostedATOLink."Order Line No." := SalesLine."Line No.";

        PostedATOLink."Assembled Quantity" := AsmHeader."Quantity to Assemble";
        PostedATOLink."Assembled Quantity (Base)" := AsmHeader."Quantity to Assemble (Base)";
        PostedATOLink.INSERT;

        TempPostedATOLink := PostedATOLink;
        TempPostedATOLink.INSERT;

        AsmPost.PostATO(AsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlPostLine);

        Window.CLOSE;
      end;
    END;

    LOCAL PROCEDURE FinalizePostATO@61(VAR SalesLine@1000 : Record "Sales Line");
    VAR
      ATOLink@1002 : Record "Assemble-to-Order Link";
      AsmHeader@1003 : Record "Assembly Header";
      Window@1001 : Dialog;
    BEGIN
      if SalesLine.AsmToOrderExists(AsmHeader) then begin
        Window.OPEN(AssemblyFinalizeProgressMsg);
        Window.UPDATE(1,
          STRSUBSTNO('%1 %2 %3 %4',
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO('%1 %2',AsmHeader."Document Type",AsmHeader."No."));

        SalesLine.CheckAsmToOrder(AsmHeader);
        AsmHeader.TESTFIELD("Remaining Quantity (Base)",0);
        AsmPost.FinalizePostATO(AsmHeader);
        ATOLink.GET(AsmHeader."Document Type",AsmHeader."No.");
        ATOLink.DELETE;

        Window.CLOSE;
      end;
    END;

    LOCAL PROCEDURE CheckATOLink@78(SalesLine@1000 : Record "Sales Line");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      if SalesLine."Qty. to Asm. to Order (Base)" = 0 then
        exit;
      if SalesLine.AsmToOrderExists(AsmHeader) then
        SalesLine.CheckAsmToOrder(AsmHeader);
    END;

    LOCAL PROCEDURE DeleteATOLinks@67(SalesHeader@1000 : Record "Sales Header");
    VAR
      ATOLink@1001 : Record "Assemble-to-Order Link";
    BEGIN
      with ATOLink do begin
        SETCURRENTKEY(Type,"Document Type","Document No.");
        SETRANGE(Type,Type::Sale);
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        if not ISEMPTY then
          DELETEALL;
      end;
    END;

    LOCAL PROCEDURE HasQtyToAsm@68(SalesLine@1000 : Record "Sales Line";AsmHeader@1001 : Record "Assembly Header") : Boolean;
    BEGIN
      if SalesLine."Qty. to Asm. to Order (Base)" = 0 then
        exit(false);
      if SalesLine."Qty. to Ship (Base)" = 0 then
        exit(false);
      if AsmHeader."Quantity to Assemble (Base)" = 0 then
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE GetATOItemLedgEntriesNotInvoiced@77(SalesLine@1000 : Record "Sales Line";VAR ItemLedgEntryNotInvoiced@1001 : Record "Item Ledger Entry") : Boolean;
    VAR
      PostedATOLink@1002 : Record "Posted Assemble-to-Order Link";
      ItemLedgEntry@1003 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgEntryNotInvoiced.RESET;
      ItemLedgEntryNotInvoiced.DELETEALL;
      if PostedATOLink.FindLinksFromSalesLine(SalesLine) then
        repeat
          ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",PostedATOLink."Document Line No.");
          ItemLedgEntry.SETRANGE("Assemble to Order",true);
          ItemLedgEntry.SETRANGE("Completely Invoiced",false);
          if ItemLedgEntry.FINDSET then
            repeat
              if ItemLedgEntry.Quantity <> ItemLedgEntry."Invoiced Quantity" then begin
                ItemLedgEntryNotInvoiced := ItemLedgEntry;
                ItemLedgEntryNotInvoiced.INSERT;
              end;
            until ItemLedgEntry.NEXT = 0;
        until PostedATOLink.NEXT = 0;

      exit(ItemLedgEntryNotInvoiced.FINDSET);
    END;

    [External]
    PROCEDURE SetWhseJnlRegisterCU@26(VAR WhseJnlRegisterLine@1000 : Codeunit "Whse. Jnl.-Register Line");
    BEGIN
      WhseJnlPostLine := WhseJnlRegisterLine;
    END;

    LOCAL PROCEDURE PostWhseShptLines@74(VAR WhseShptLine2@1000 : Record "Warehouse Shipment Line";SalesShptLine2@1004 : Record "Sales Shipment Line";VAR SalesLine2@1007 : Record "Sales Line");
    VAR
      ATOWhseShptLine@1002 : Record "Warehouse Shipment Line";
      NonATOWhseShptLine@1001 : Record "Warehouse Shipment Line";
      ATOLineFound@1005 : Boolean;
      NonATOLineFound@1003 : Boolean;
      TotalSalesShptLineQty@1006 : Decimal;
    BEGIN
      WhseShptLine2.GetATOAndNonATOLines(ATOWhseShptLine,NonATOWhseShptLine,ATOLineFound,NonATOLineFound);
      if ATOLineFound then
        TotalSalesShptLineQty += ATOWhseShptLine."Qty. to Ship";
      if NonATOLineFound then
        TotalSalesShptLineQty += NonATOWhseShptLine."Qty. to Ship";
      SalesShptLine2.TESTFIELD(Quantity,TotalSalesShptLineQty);

      SaveTempWhseSplitSpec(SalesLine2,TempATOTrackingSpecification);
      WhsePostShpt.SetWhseJnlRegisterCU(WhseJnlPostLine);
      if ATOLineFound and (ATOWhseShptLine."Qty. to Ship (Base)" > 0) then
        WhsePostShpt.CreatePostedShptLine(
          ATOWhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);

      SaveTempWhseSplitSpec(SalesLine2,TempHandlingSpecification);
      if NonATOLineFound and (NonATOWhseShptLine."Qty. to Ship (Base)" > 0) then
        WhsePostShpt.CreatePostedShptLine(
          NonATOWhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
    END;

    LOCAL PROCEDURE GetCountryCode@75(SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header") : Code[10];
    VAR
      SalesShipmentHeader@1003 : Record "Sales Shipment Header";
    BEGIN
      if SalesLine."Shipment No." <> '' then begin
        SalesShipmentHeader.GET(SalesLine."Shipment No.");
        exit(
          GetCountryRegionCode(
            SalesLine."Sell-to Customer No.",
            SalesShipmentHeader."Ship-to Code",
            SalesShipmentHeader."Sell-to Country/Region Code"));
      end;
      exit(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
          SalesHeader."Ship-to Code",
          SalesHeader."Sell-to Country/Region Code"));
    END;

    LOCAL PROCEDURE GetCountryRegionCode@103(CustNo@1001 : Code[20];ShipToCode@1002 : Code[10];SellToCountryRegionCode@1003 : Code[10]) : Code[10];
    VAR
      ShipToAddress@1000 : Record "Ship-to Address";
    BEGIN
      if ShipToCode <> '' then begin
        ShipToAddress.GET(CustNo,ShipToCode);
        exit(ShipToAddress."Country/Region Code");
      end;
      exit(SellToCountryRegionCode);
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@95(IncomingDocNo@1000 : Integer;PostingDate@1002 : Date;GenJnlLineDocNo@1003 : Code[20]);
    VAR
      IncomingDocument@1001 : Record "Incoming Document";
    BEGIN
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocNo,PostingDate,GenJnlLineDocNo);
    END;

    LOCAL PROCEDURE CheckItemCharge@88(ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)");
    VAR
      SalesLineForCharge@1001 : Record "Sales Line";
    BEGIN
      with ItemChargeAssgntSales do
        case "Applies-to Doc. Type" of
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice:
            if SalesLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            then
              if (SalesLineForCharge."Quantity (Base)" = SalesLineForCharge."Qty. Shipped (Base)") and
                 (SalesLineForCharge."Qty. Shipped Not Invd. (Base)" = 0)
              then
                ERROR(ReassignItemChargeErr);
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            if SalesLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            then
              if (SalesLineForCharge."Quantity (Base)" = SalesLineForCharge."Return Qty. Received (Base)") and
                 (SalesLineForCharge."Ret. Qty. Rcd. Not Invd.(Base)" = 0)
              then
                ERROR(ReassignItemChargeErr);
        end;
    END;

    LOCAL PROCEDURE CheckItemReservDisruption@104(SalesLine@1001 : Record "Sales Line");
    VAR
      AvailableQty@1000 : Decimal;
    BEGIN
      with SalesLine do begin
        if not ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) or
           (Type <> Type::Item) or not ("Qty. to Ship (Base)" > 0)
        then
          exit;
        if ("Job Contract Entry No." <> 0) or
           Nonstock or "Special Order" or "Drop Shipment" or
           IsServiceItem or FullQtyIsForAsmToOrder or
           TempSKU.GET("Location Code","No.","Variant Code") // Warn against item
        then
          exit;

        Item.SETFILTER("Location Filter","Location Code");
        Item.SETFILTER("Variant Filter","Variant Code");
        Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
        CALCFIELDS("Reserved Qty. (Base)");
        AvailableQty := Item."Net Change" - (Item."Reserved Qty. on Inventory" - "Reserved Qty. (Base)");

        if (Item."Reserved Qty. on Inventory" > 0) and
           (AvailableQty < "Qty. to Ship (Base)") and
           (Item."Reserved Qty. on Inventory" > "Reserved Qty. (Base)")
        then begin
          InsertTempSKU("Location Code","No.","Variant Code");
          if not CONFIRM(
               ReservationDisruptedQst,false,FIELDCAPTION("No."),Item."No.",FIELDCAPTION("Location Code"),
               "Location Code",FIELDCAPTION("Variant Code"),"Variant Code")
          then
            ERROR('');
        end;
      end;
    END;

    LOCAL PROCEDURE InsertTempSKU@106(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    BEGIN
      with TempSKU do begin
        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InitProgressWindow@105(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if SalesHeader.Invoice then
        Window.OPEN(
          '#1#################################\\' +
          PostingLinesMsg +
          PostingSalesAndVATMsg +
          PostingCustomersMsg +
          PostingBalAccountMsg)
      else
        Window.OPEN(
          '#1#################################\\' +
          PostingLines2Msg);

      Window.UPDATE(1,STRSUBSTNO('%1 %2',SalesHeader."Document Type",SalesHeader."No."));
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@188(SalesShptHeader@1001 : Record "Sales Shipment Header";SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      CertificateOfSupply@1002 : Record "Certificate of Supply";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      if SalesShptLine.Quantity <> 0 then
        if VATPostingSetup.GET(SalesShptHeader."VAT Bus. Posting Group",SalesShptLine."VAT Prod. Posting Group") and
           VATPostingSetup."Certificate of Supply Required"
        then begin
          CertificateOfSupply.InitFromSales(SalesShptHeader);
          CertificateOfSupply.SetRequired(SalesShptHeader."No.");
        end;
    END;

    LOCAL PROCEDURE HasSpecificTracking@107(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item@1001 : Record Item;
      ItemTrackingCode@1002 : Record "Item Tracking Code";
    BEGIN
      Item.GET(ItemNo);
      if Item."Item Tracking Code" <> '' then begin
        ItemTrackingCode.GET(Item."Item Tracking Code");
        exit(ItemTrackingCode."SN Specific Tracking" or ItemTrackingCode."Lot Specific Tracking");
      end;
    END;

    LOCAL PROCEDURE HasInvtPickLine@108(SalesLine@1000 : Record "Sales Line") : Boolean;
    VAR
      WhseActivityLine@1001 : Record "Warehouse Activity Line";
    BEGIN
      with WhseActivityLine do begin
        SETRANGE("Activity Type","Activity Type"::"Invt. Pick");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source No.",SalesLine."Document No.");
        SETRANGE("Source Line No.",SalesLine."Line No.");
        exit(not ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE InsertPostedHeaders@139(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesShptLine@1001 : Record "Sales Shipment Line";
      GenJnlLine@1002 : Record "Gen. Journal Line";
    BEGIN
      with SalesHeader do begin
        // Insert shipment header
        if Ship then begin
          if ("Document Type" = "Document Type"::Order) or
             (("Document Type" = "Document Type"::Invoice) and SalesSetup."Shipment on Invoice")
          then begin
            if DropShipOrder then begin
              PurchRcptHeader.LOCKTABLE;
              PurchRcptLine.LOCKTABLE;
              SalesShptHeader.LOCKTABLE;
              SalesShptLine.LOCKTABLE;
            end;
            InsertShipmentHeader(SalesHeader,SalesShptHeader);
          end;

          ServItemMgt.CopyReservationEntry(SalesHeader);
          if ("Document Type" = "Document Type"::Invoice) and
             (not SalesSetup."Shipment on Invoice")
          then
            ServItemMgt.CreateServItemOnSalesInvoice(SalesHeader);
        end;

        ServItemMgt.DeleteServItemOnSaleCreditMemo(SalesHeader);

        // Insert return receipt header
        if Receive then
          if ("Document Type" = "Document Type"::"Return Order") or
             (("Document Type" = "Document Type"::"Credit Memo") and SalesSetup."Return Receipt on Credit Memo")
          then
            InsertReturnReceiptHeader(SalesHeader,ReturnRcptHeader);

        // Insert invoice header or credit memo header
        if Invoice then
          if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then begin
            InsertInvoiceHeader(SalesHeader,SalesInvHeader);
            GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
            GenJnlLineDocNo := SalesInvHeader."No.";
            GenJnlLineExtDocNo := SalesInvHeader."External Document No.";
          end else begin // Credit Memo
            InsertCrMemoHeader(SalesHeader,SalesCrMemoHeader);
            GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
            GenJnlLineDocNo := SalesCrMemoHeader."No.";
            GenJnlLineExtDocNo := SalesCrMemoHeader."External Document No.";
          end;
      end;
    END;

    LOCAL PROCEDURE InsertShipmentHeader@110(SalesHeader@1000 : Record "Sales Header";VAR SalesShptHeader@1001 : Record "Sales Shipment Header");
    VAR
      SalesCommentLine@1002 : Record "Sales Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with SalesHeader do begin
        SalesShptHeader.INIT;
        SalesShptHeader.TRANSFERFIELDS(SalesHeader);

        SalesShptHeader."No." := "Shipping No.";
        if "Document Type" = "Document Type"::Order then begin
          SalesShptHeader."Order No. Series" := "No. Series";
          SalesShptHeader."Order No." := "No.";
          if SalesSetup."Ext. Doc. No. Mandatory" then
            TESTFIELD("External Document No.");
        end;
        SalesShptHeader."Source Code" := SrcCode;
        SalesShptHeader."User ID" := USERID;
        SalesShptHeader."No. Printed" := 0;
        OnBeforeSalesShptHeaderInsert(SalesShptHeader,SalesHeader);
        SalesShptHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");

        if SalesSetup."Copy Comments Order to Shpt." then begin
          SalesCommentLine.CopyComments(
            "Document Type",SalesCommentLine."Document Type"::Shipment,"No.",SalesShptHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesShptHeader);
        end;
        if WhseShip then begin
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(
            PostedWhseShptHeader,WhseShptHeader,"Shipping No.","Posting Date");
        end;
        if WhseReceive then begin
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(
            PostedWhseRcptHeader,WhseRcptHeader,"Shipping No.","Posting Date");
        end;
      end;
    END;

    LOCAL PROCEDURE InsertReturnReceiptHeader@113(SalesHeader@1000 : Record "Sales Header";VAR ReturnRcptHeader@1001 : Record "Return Receipt Header");
    VAR
      SalesCommentLine@1002 : Record "Sales Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with SalesHeader do begin
        ReturnRcptHeader.INIT;
        ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
        ReturnRcptHeader."No." := "Return Receipt No.";
        if "Document Type" = "Document Type"::"Return Order" then begin
          ReturnRcptHeader."Return Order No. Series" := "No. Series";
          ReturnRcptHeader."Return Order No." := "No.";
          if SalesSetup."Ext. Doc. No. Mandatory" then
            TESTFIELD("External Document No.");
        end;
        ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        OnBeforeReturnRcptHeaderInsert(ReturnRcptHeader,SalesHeader);
        ReturnRcptHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");

        if SalesSetup."Copy Cmts Ret.Ord. to Ret.Rcpt" then begin
          SalesCommentLine.CopyComments(
            "Document Type",SalesCommentLine."Document Type"::"Posted Return Receipt","No.",ReturnRcptHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,ReturnRcptHeader);
        end;
        if WhseReceive then begin
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Receipt No.","Posting Date");
        end;
        if WhseShip then begin
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Receipt No.","Posting Date");
        end;
      end;
    END;

    LOCAL PROCEDURE InsertInvoiceHeader@116(SalesHeader@1000 : Record "Sales Header";VAR SalesInvHeader@1001 : Record "Sales Invoice Header");
    VAR
      SalesCommentLine@1002 : Record "Sales Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
      SegManagement@1004 : Codeunit SegManagement;
    BEGIN
      with SalesHeader do begin
        SalesInvHeader.INIT;
        CALCFIELDS("Work Description");
        SalesInvHeader.TRANSFERFIELDS(SalesHeader);

        if "Document Type" = "Document Type"::Order then begin
          if PreviewMode then
            SalesInvHeader."No." := '***'
          else
            SalesInvHeader."No." := "Posting No.";
          if SalesSetup."Ext. Doc. No. Mandatory" then
            TESTFIELD("External Document No.");
          SalesInvHeader."Pre-Assigned No. Series" := '';
          SalesInvHeader."Order No. Series" := "No. Series";
          SalesInvHeader."Order No." := "No.";
          Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",SalesInvHeader."No."));
        end else begin
          SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
          SalesInvHeader."Pre-Assigned No." := "No.";
          if "Posting No." <> '' then begin
            SalesInvHeader."No." := "Posting No.";
            Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",SalesInvHeader."No."));
          end;
        end;
        SalesInvHeader."Source Code" := SrcCode;
        SalesInvHeader."User ID" := USERID;
        SalesInvHeader."No. Printed" := 0;
        OnBeforeSalesInvHeaderInsert(SalesInvHeader,SalesHeader);
        SalesInvHeader.INSERT(true);

        UpdateWonOpportunities(SalesHeader);
        SegManagement.CreateCampaignEntryOnSalesInvoicePosting(SalesInvHeader);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesInvHeader.RECORDID,SalesInvHeader."No.");

        if SalesSetup."Copy Comments Order to Invoice" then begin
          SalesCommentLine.CopyComments(
            "Document Type",SalesCommentLine."Document Type"::"Posted Invoice","No.",SalesInvHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesInvHeader);
        end;
      end;
    END;

    LOCAL PROCEDURE InsertCrMemoHeader@118(SalesHeader@1000 : Record "Sales Header";VAR SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header");
    VAR
      SalesCommentLine@1002 : Record "Sales Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with SalesHeader do begin
        SalesCrMemoHeader.INIT;
        SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
        if "Document Type" = "Document Type"::"Return Order" then begin
          SalesCrMemoHeader."No." := "Posting No.";
          if SalesSetup."Ext. Doc. No. Mandatory" then
            TESTFIELD("External Document No.");
          SalesCrMemoHeader."Pre-Assigned No. Series" := '';
          SalesCrMemoHeader."Return Order No. Series" := "No. Series";
          SalesCrMemoHeader."Return Order No." := "No.";
          Window.UPDATE(1,STRSUBSTNO(CreditMemoNoMsg,"Document Type","No.",SalesCrMemoHeader."No."));
        end else begin
          SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          SalesCrMemoHeader."Pre-Assigned No." := "No.";
          if "Posting No." <> '' then begin
            SalesCrMemoHeader."No." := "Posting No.";
            Window.UPDATE(1,STRSUBSTNO(CreditMemoNoMsg,"Document Type","No.",SalesCrMemoHeader."No."));
          end;
        end;
        SalesCrMemoHeader."Source Code" := SrcCode;
        SalesCrMemoHeader."User ID" := USERID;
        SalesCrMemoHeader."No. Printed" := 0;
        OnBeforeSalesCrMemoHeaderInsert(SalesCrMemoHeader,SalesHeader);
        SalesCrMemoHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");

        if SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" then begin
          SalesCommentLine.CopyComments(
            "Document Type",SalesCommentLine."Document Type"::"Posted Credit Memo","No.",SalesCrMemoHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesCrMemoHeader);
        end;
      end;
    END;

    LOCAL PROCEDURE InsertShipmentLine@143(SalesHeader@1008 : Record "Sales Header";SalesShptHeader@1000 : Record "Sales Shipment Header";SalesLine@1001 : Record "Sales Line";CostBaseAmount@1003 : Decimal;VAR TempServiceItem2@1013 : TEMPORARY Record "Service Item";VAR TempServiceItemComp2@1009 : TEMPORARY Record "Service Item Component");
    VAR
      SalesShptLine@1004 : Record "Sales Shipment Line";
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
      WhseRcptLine@1006 : Record "Warehouse Receipt Line";
      TempServiceItem1@1012 : TEMPORARY Record "Service Item";
      TempServiceItemComp1@1010 : TEMPORARY Record "Service Item Component";
    BEGIN
      SalesShptLine.InitFromSalesLine(SalesShptHeader,xSalesLine);
      SalesShptLine."Quantity Invoiced" := ABS(RemQtyToBeInvoiced);
      SalesShptLine."Qty. Invoiced (Base)" := ABS(RemQtyToBeInvoicedBase);
      SalesShptLine."Qty. Shipped Not Invoiced" := SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";

      if (SalesLine.Type = SalesLine.Type::Item) and (SalesLine."Qty. to Ship" <> 0) then begin
        if WhseShip then begin
          WhseShptLine.GetWhseShptLine(
            WhseShptHeader."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
          PostWhseShptLines(WhseShptLine,SalesShptLine,SalesLine);
        end;
        if WhseReceive then begin
          WhseRcptLine.GetWhseRcptLine(
            WhseRcptHeader."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
          WhseRcptLine.TESTFIELD("Qty. to Receive",-SalesShptLine.Quantity);
          SaveTempWhseSplitSpec(SalesLine,TempHandlingSpecification);
          WhsePostRcpt.CreatePostedRcptLine(
            WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
        end;

        SalesShptLine."Item Shpt. Entry No." :=
          InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
        SalesShptLine."Item Charge Base Amount" :=
          ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
      end;
      OnBeforeSalesShptLineInsert(SalesShptLine,SalesShptHeader,SalesLine);
      SalesShptLine.INSERT(true);

      CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);

      ServItemMgt.CreateServItemOnSalesLineShpt(SalesHeader,xSalesLine,SalesShptLine);
      if SalesLine."BOM Item No." <> '' then begin
        ServItemMgt.ReturnServItemComp(TempServiceItem1,TempServiceItemComp1);
        if TempServiceItem1.FINDSET then
          repeat
            TempServiceItem2 := TempServiceItem1;
            if TempServiceItem2.INSERT then;
          until TempServiceItem1.NEXT = 0;
        if TempServiceItemComp1.FINDSET then
          repeat
            TempServiceItemComp2 := TempServiceItemComp1;
            if TempServiceItemComp2.INSERT then;
          until TempServiceItemComp1.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertReturnReceiptLine@146(ReturnRcptHeader@1000 : Record "Return Receipt Header";SalesLine@1001 : Record "Sales Line";CostBaseAmount@1003 : Decimal);
    VAR
      ReturnRcptLine@1004 : Record "Return Receipt Line";
      WhseShptLine@1006 : Record "Warehouse Shipment Line";
      WhseRcptLine@1005 : Record "Warehouse Receipt Line";
    BEGIN
      ReturnRcptLine.InitFromSalesLine(ReturnRcptHeader,xSalesLine);
      ReturnRcptLine."Quantity Invoiced" := ABS(RemQtyToBeInvoiced);
      ReturnRcptLine."Qty. Invoiced (Base)" := ABS(RemQtyToBeInvoicedBase);
      ReturnRcptLine."Return Qty. Rcd. Not Invd." := ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";

      if (SalesLine.Type = SalesLine.Type::Item) and (SalesLine."Return Qty. to Receive" <> 0) then begin
        if WhseReceive then begin
          WhseRcptLine.GetWhseRcptLine(
            WhseRcptHeader."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
          WhseRcptLine.TESTFIELD("Qty. to Receive",ReturnRcptLine.Quantity);
          SaveTempWhseSplitSpec(SalesLine,TempHandlingSpecification);
          WhsePostRcpt.CreatePostedRcptLine(
            WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
        end;
        if WhseShip then begin
          WhseShptLine.GetWhseShptLine(
            WhseShptHeader."No.",DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
          WhseShptLine.TESTFIELD("Qty. to Ship",-ReturnRcptLine.Quantity);
          SaveTempWhseSplitSpec(SalesLine,TempHandlingSpecification);
          WhsePostShpt.SetWhseJnlRegisterCU(WhseJnlPostLine);
          WhsePostShpt.CreatePostedShptLine(
            WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
        end;

        ReturnRcptLine."Item Rcpt. Entry No." :=
          InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
        ReturnRcptLine."Item Charge Base Amount" :=
          ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
      end;
      OnBeforeReturnRcptLineInsert(ReturnRcptLine,ReturnRcptHeader,SalesLine);
      ReturnRcptLine.INSERT(true);
    END;

    LOCAL PROCEDURE CheckICPartnerBlocked@20(SalesHeader@1000 : Record "Sales Header");
    VAR
      ICPartner@1001 : Record "IC Partner";
    BEGIN
      with SalesHeader do begin
        if "Sell-to IC Partner Code" <> '' then
          if ICPartner.GET("Sell-to IC Partner Code") then
            ICPartner.TESTFIELD(Blocked,false);
        if "Bill-to IC Partner Code" <> '' then
          if ICPartner.GET("Bill-to IC Partner Code") then
            ICPartner.TESTFIELD(Blocked,false);
      end;
    END;

    LOCAL PROCEDURE SendICDocument@109(VAR SalesHeader@1000 : Record "Sales Header";VAR ModifyHeader@1001 : Boolean);
    VAR
      ICInboxOutboxMgt@1002 : Codeunit ICInboxOutboxMgt;
    BEGIN
      with SalesHeader do
        if "Send IC Document" and ("IC Status" = "IC Status"::New) and ("IC Direction" = "IC Direction"::Outgoing) and
           ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
        then begin
          ICInboxOutboxMgt.SendSalesDoc(SalesHeader,true);
          "IC Status" := "IC Status"::Pending;
          ModifyHeader := true;
        end;
    END;

    LOCAL PROCEDURE UpdateHandledICInboxTransaction@111(SalesHeader@1000 : Record "Sales Header");
    VAR
      HandledICInboxTrans@1001 : Record "Handled IC Inbox Trans.";
      Customer@1002 : Record Customer;
    BEGIN
      with SalesHeader do
        if "IC Direction" = "IC Direction"::Incoming then begin
          HandledICInboxTrans.SETRANGE("Document No.","External Document No.");
          Customer.GET("Sell-to Customer No.");
          HandledICInboxTrans.SETRANGE("IC Partner Code",Customer."IC Partner Code");
          HandledICInboxTrans.LOCKTABLE;
          if HandledICInboxTrans.FINDFIRST then begin
            HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
            HandledICInboxTrans.MODIFY;
          end;
        end;
    END;

    [External]
    PROCEDURE GetPostedDocumentRecord@222(SalesHeader@1000 : Record "Sales Header";VAR PostedSalesDocumentVariant@1001 : Variant);
    VAR
      SalesInvHeader@1007 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1006 : Record "Sales Cr.Memo Header";
    BEGIN
      with SalesHeader do
        case "Document Type" of
          "Document Type"::Order:
            if Invoice then begin
              SalesInvHeader.GET("Last Posting No.");
              SalesInvHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesInvHeader;
            end;
          "Document Type"::Invoice:
            begin
              if "Last Posting No." = '' then
                SalesInvHeader.GET("No.")
              else
                SalesInvHeader.GET("Last Posting No.");

              SalesInvHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesInvHeader;
            end;
          "Document Type"::"Credit Memo":
            begin
              if "Last Posting No." = '' then
                SalesCrMemoHeader.GET("No.")
              else
                SalesCrMemoHeader.GET("Last Posting No.");
              SalesCrMemoHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesCrMemoHeader;
            end;
          else
            ERROR(STRSUBSTNO(NotSupportedDocumentTypeErr,"Document Type"));
        end;
    END;

    [Internal]
    PROCEDURE SendPostedDocumentRecord@223(SalesHeader@1000 : Record "Sales Header";VAR DocumentSendingProfile@1001 : Record "Document Sending Profile");
    VAR
      SalesInvHeader@1007 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1006 : Record "Sales Cr.Memo Header";
      SalesShipmentHeader@1002 : Record "Sales Shipment Header";
      OfficeManagement@1003 : Codeunit "Office Management";
    BEGIN
      with SalesHeader do
        case "Document Type" of
          "Document Type"::Order:
            begin
              OnSendSalesDocument(Invoice and Ship);
              if Invoice then begin
                SalesInvHeader.GET("Last Posting No.");
                SalesInvHeader.SETRECFILTER;
                SalesInvHeader.SendProfile(DocumentSendingProfile);
              end;
              if Ship and Invoice and not OfficeManagement.IsAvailable
              then
                if not CONFIRM(DownloadShipmentAlsoQst,true) then
                  exit;
              if Ship then begin
                SalesShipmentHeader.GET("Last Shipping No.");
                SalesShipmentHeader.SETRECFILTER;
                SalesShipmentHeader.SendProfile(DocumentSendingProfile);
              end;
            end;
          "Document Type"::Invoice:
            begin
              if "Last Posting No." = '' then
                SalesInvHeader.GET("No.")
              else
                SalesInvHeader.GET("Last Posting No.");

              SalesInvHeader.SETRECFILTER;
              SalesInvHeader.SendProfile(DocumentSendingProfile);
            end;
          "Document Type"::"Credit Memo":
            begin
              if "Last Posting No." = '' then
                SalesCrMemoHeader.GET("No.")
              else
                SalesCrMemoHeader.GET("Last Posting No.");
              SalesCrMemoHeader.SETRECFILTER;
              SalesCrMemoHeader.SendProfile(DocumentSendingProfile);
            end;
          else
            ERROR(STRSUBSTNO(NotSupportedDocumentTypeErr,"Document Type"));
        end;
    END;

    LOCAL PROCEDURE MakeInventoryAdjustment@112();
    VAR
      InvtSetup@1000 : Record "Inventory Setup";
      InvtAdjmt@1001 : Codeunit "Inventory Adjustment";
    BEGIN
      InvtSetup.GET;
      if InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      then begin
        InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetJobUpdateProperties(true);
        InvtAdjmt.MakeMultiLevelAdjmt;
      end;
    END;

    LOCAL PROCEDURE FindNotShippedLines@30(SalesHeader@1000 : Record "Sales Header";VAR TempSalesLine@1001 : TEMPORARY Record "Sales Line");
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETFILTER(Quantity,'<>0');
        if SalesHeader."Document Type" = SalesHeader."Document Type"::Order then
          SETFILTER("Qty. to Ship",'<>0');
        SETRANGE("Shipment No.",'');
      end;
    END;

    LOCAL PROCEDURE CheckTrackingAndWarehouseForShip@114(SalesHeader@1004 : Record "Sales Header") Ship : Boolean;
    VAR
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
    BEGIN
      with TempSalesLine do begin
        FindNotShippedLines(SalesHeader,TempSalesLine);
        Ship := FINDFIRST;
        WhseShip := TempWhseShptHeader.FINDFIRST;
        WhseReceive := TempWhseRcptHeader.FINDFIRST;
        if Ship then begin
          CheckTrackingSpecification(SalesHeader,TempSalesLine);
          if not (WhseShip or WhseReceive or InvtPickPutaway) then
            CheckWarehouse(TempSalesLine);
        end;
        exit(Ship);
      end;
    END;

    LOCAL PROCEDURE CheckTrackingAndWarehouseForReceive@117(SalesHeader@1004 : Record "Sales Header") Receive : Boolean;
    VAR
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
    BEGIN
      with TempSalesLine do begin
        ResetTempLines(TempSalesLine);
        SETFILTER(Quantity,'<>0');
        SETFILTER("Return Qty. to Receive",'<>0');
        SETRANGE("Return Receipt No.",'');
        Receive := FINDFIRST;
        WhseShip := TempWhseShptHeader.FINDFIRST;
        WhseReceive := TempWhseRcptHeader.FINDFIRST;
        if Receive then begin
          CheckTrackingSpecification(SalesHeader,TempSalesLine);
          if not (WhseReceive or WhseShip or InvtPickPutaway) then
            CheckWarehouse(TempSalesLine);
        end;
        exit(Receive);
      end;
    END;

    LOCAL PROCEDURE CalcInvoiceDiscountPosting@169(SalesHeader@1002 : Record "Sales Header";SalesLine@1001 : Record "Sales Line";SalesLineACY@1000 : Record "Sales Line";VAR InvoicePostBuffer@1003 : Record "Invoice Post. Buffer");
    BEGIN
      if SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" then
        InvoicePostBuffer.CalcDiscountNoVAT(-SalesLine."Inv. Discount Amount",-SalesLineACY."Inv. Discount Amount")
      else
        InvoicePostBuffer.CalcDiscount(
          SalesHeader."Prices Including VAT",-SalesLine."Inv. Discount Amount",-SalesLineACY."Inv. Discount Amount");
    END;

    LOCAL PROCEDURE CalcLineDiscountPosting@81(SalesHeader@1003 : Record "Sales Header";SalesLine@1002 : Record "Sales Line";SalesLineACY@1001 : Record "Sales Line";VAR InvoicePostBuffer@1000 : Record "Invoice Post. Buffer");
    BEGIN
      if SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" then
        InvoicePostBuffer.CalcDiscountNoVAT(-SalesLine."Line Discount Amount",-SalesLineACY."Line Discount Amount")
      else
        InvoicePostBuffer.CalcDiscount(
          SalesHeader."Prices Including VAT",-SalesLine."Line Discount Amount",-SalesLineACY."Line Discount Amount");
    END;

    LOCAL PROCEDURE FindTempItemChargeAssgntSales@119(SalesLineNo@1000 : Integer) : Boolean;
    BEGIN
      ClearItemChargeAssgntFilter;
      TempItemChargeAssgntSales.SETCURRENTKEY("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLineNo);
      exit(TempItemChargeAssgntSales.FINDSET);
    END;

    LOCAL PROCEDURE UpdateInvoicedQtyOnShipmentLine@120(VAR SalesShptLine@1000 : Record "Sales Shipment Line";QtyToBeInvoiced@1001 : Decimal;QtyToBeInvoicedBase@1002 : Decimal);
    BEGIN
      with SalesShptLine do begin
        "Quantity Invoiced" := "Quantity Invoiced" - QtyToBeInvoiced;
        "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
        "Qty. Shipped Not Invoiced" := Quantity - "Quantity Invoiced";
        MODIFY;
      end;
    END;

    [External]
    PROCEDURE SetPreviewMode@121(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE PostDropOrderShipment@144(VAR SalesHeader@1001 : Record "Sales Header";VAR TempDropShptPostBuffer@1004 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      PurchSetup@1000 : Record "Purchases & Payables Setup";
      PurchCommentLine@1002 : Record "Purch. Comment Line";
      PurchOrderHeader@1006 : Record "Purchase Header";
      PurchOrderLine@1005 : Record "Purchase Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      ArchivePurchaseOrders(TempDropShptPostBuffer);
      with SalesHeader do
        if TempDropShptPostBuffer.FINDSET then begin
          PurchSetup.GET;
          repeat
            PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,TempDropShptPostBuffer."Order No.");
            PurchRcptHeader.INIT;
            PurchRcptHeader.TRANSFERFIELDS(PurchOrderHeader);
            PurchRcptHeader."No." := PurchOrderHeader."Receiving No.";
            PurchRcptHeader."Order No." := PurchOrderHeader."No.";
            PurchRcptHeader."Posting Date" := "Posting Date";
            PurchRcptHeader."Document Date" := "Document Date";
            PurchRcptHeader."No. Printed" := 0;
            PurchRcptHeader.INSERT;

            ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");

            if PurchSetup."Copy Comments Order to Receipt" then begin
              PurchCommentLine.CopyComments(
                PurchOrderHeader."Document Type",PurchCommentLine."Document Type"::Receipt,
                PurchOrderHeader."No.",PurchRcptHeader."No.");
              RecordLinkManagement.CopyLinks(PurchOrderHeader,PurchRcptHeader);
            end;
            TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
            repeat
              PurchOrderLine.GET(
                PurchOrderLine."Document Type"::Order,
                TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
              PurchRcptLine.INIT;
              PurchRcptLine.TRANSFERFIELDS(PurchOrderLine);
              PurchRcptLine."Posting Date" := PurchRcptHeader."Posting Date";
              PurchRcptLine."Document No." := PurchRcptHeader."No.";
              PurchRcptLine.Quantity := TempDropShptPostBuffer.Quantity;
              PurchRcptLine."Quantity (Base)" := TempDropShptPostBuffer."Quantity (Base)";
              PurchRcptLine."Quantity Invoiced" := 0;
              PurchRcptLine."Qty. Invoiced (Base)" := 0;
              PurchRcptLine."Order No." := PurchOrderLine."Document No.";
              PurchRcptLine."Order Line No." := PurchOrderLine."Line No.";
              PurchRcptLine."Qty. Rcd. Not Invoiced" :=
                PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";

              if PurchRcptLine.Quantity <> 0 then begin
                PurchRcptLine."Item Rcpt. Entry No." := TempDropShptPostBuffer."Item Shpt. Entry No.";
                PurchRcptLine."Item Charge Base Amount" := PurchOrderLine."Line Amount"
              end;
              PurchRcptLine.INSERT;
              PurchPost.UpdateBlanketOrderLine(PurchOrderLine,true,false,false);
            until TempDropShptPostBuffer.NEXT = 0;
            TempDropShptPostBuffer.SETRANGE("Order No.");
          until TempDropShptPostBuffer.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE PostInvoicePostBuffer@140(SalesHeader@1000 : Record "Sales Header";VAR TempInvoicePostBuffer@1004 : TEMPORARY Record "Invoice Post. Buffer");
    VAR
      LineCount@1002 : Integer;
      GLEntryNo@1001 : Integer;
    BEGIN
      LineCount := 0;
      if TempInvoicePostBuffer.FIND('+') then
        repeat
          LineCount := LineCount + 1;
          if GUIALLOWED then
            Window.UPDATE(3,LineCount);

          GLEntryNo := PostInvoicePostBufferLine(SalesHeader,TempInvoicePostBuffer);

          if (TempInvoicePostBuffer."Job No." <> '') and
             (TempInvoicePostBuffer.Type = TempInvoicePostBuffer.Type::"G/L Account")
          then
            JobPostLine.PostSalesGLAccounts(TempInvoicePostBuffer,GLEntryNo);

        until TempInvoicePostBuffer.NEXT(-1) = 0;

      TempInvoicePostBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE PostInvoicePostBufferLine@158(SalesHeader@1000 : Record "Sales Header";InvoicePostBuffer@1001 : Record "Invoice Post. Buffer") GLEntryNo : Integer;
    VAR
      GenJnlLine@1002 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          SalesHeader."Posting Date",SalesHeader."Document Date",SalesHeader."Posting Description",
          InvoicePostBuffer."Global Dimension 1 Code",InvoicePostBuffer."Global Dimension 2 Code",
          InvoicePostBuffer."Dimension Set ID",SalesHeader."Reason Code");

        CopyDocumentFields(GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,'');

        CopyFromSalesHeader(SalesHeader);

        CopyFromInvoicePostBuffer(InvoicePostBuffer);
        if InvoicePostBuffer.Type <> InvoicePostBuffer.Type::"Prepmt. Exch. Rate Difference" then
          "Gen. Posting Type" := "Gen. Posting Type"::Sale;
        if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
          "FA Posting Type" := "FA Posting Type"::Disposal;
          CopyFromInvoicePostBufferFA(InvoicePostBuffer);
        end;

        OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,SalesHeader);
        GLEntryNo := RunGenJnlPostLine(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostItemTracking@152(SalesHeader@1000 : Record "Sales Header";SalesLine@1002 : Record "Sales Line";TrackingSpecificationExists@1004 : Boolean;VAR TempTrackingSpecification@1005 : TEMPORARY Record "Tracking Specification";VAR TempItemLedgEntryNotInvoiced@1009 : TEMPORARY Record "Item Ledger Entry";HasATOShippedNotInvoiced@1012 : Boolean);
    VAR
      ItemEntryRelation@1006 : Record "Item Entry Relation";
      ReturnRcptLine@1003 : Record "Return Receipt Line";
      SalesShptLine@1007 : Record "Sales Shipment Line";
      EndLoop@1001 : Boolean;
      RemQtyToInvoiceCurrLine@1011 : Decimal;
      RemQtyToInvoiceCurrLineBase@1010 : Decimal;
      QtyToBeInvoiced@1013 : Decimal;
      QtyToBeInvoicedBase@1008 : Decimal;
      QtyToInvoiceBaseInTrackingSpec@1014 : Decimal;
    BEGIN
      with SalesHeader do begin
        EndLoop := false;
        if TrackingSpecificationExists then begin
          TempTrackingSpecification.CALCSUMS("Qty. to Invoice (Base)");
          QtyToInvoiceBaseInTrackingSpec := TempTrackingSpecification."Qty. to Invoice (Base)";
          if not TempTrackingSpecification.FINDFIRST then
            TempTrackingSpecification.INIT;
        end;

        if SalesLine.IsCreditDocType then begin
          if (ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive")) or
             (ABS(RemQtyToBeInvoiced) >= ABS(QtyToInvoiceBaseInTrackingSpec)) and (QtyToInvoiceBaseInTrackingSpec <> 0)
          then begin
            ReturnRcptLine.RESET;
            case "Document Type" of
              "Document Type"::"Return Order":
                begin
                  ReturnRcptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                  ReturnRcptLine.SETRANGE("Return Order No.",SalesLine."Document No.");
                  ReturnRcptLine.SETRANGE("Return Order Line No.",SalesLine."Line No.");
                end;
              "Document Type"::"Credit Memo":
                begin
                  ReturnRcptLine.SETRANGE("Document No.",SalesLine."Return Receipt No.");
                  ReturnRcptLine.SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                end;
            end;
            ReturnRcptLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
            if ReturnRcptLine.FIND('-') then begin
              ItemJnlRollRndg := true;
              repeat
                if TrackingSpecificationExists then begin  // Item Tracking
                  ItemEntryRelation.GET(TempTrackingSpecification."Item Ledger Entry No.");
                  ReturnRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                end else
                  ItemEntryRelation."Item Entry No." := ReturnRcptLine."Item Rcpt. Entry No.";
                ReturnRcptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                ReturnRcptLine.TESTFIELD(Type,SalesLine.Type);
                ReturnRcptLine.TESTFIELD("No.",SalesLine."No.");
                ReturnRcptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                ReturnRcptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                ReturnRcptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                ReturnRcptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                ReturnRcptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                if SalesLine."Qty. to Invoice" * ReturnRcptLine.Quantity < 0 then
                  SalesLine.FIELDERROR("Qty. to Invoice",ReturnReceiptSameSignErr);
                UpdateQtyToBeInvoicedForReturnReceipt(
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  TrackingSpecificationExists,SalesLine,ReturnRcptLine,TempTrackingSpecification);

                if TrackingSpecificationExists then begin
                  TempTrackingSpecification."Quantity actual Handled (Base)" := QtyToBeInvoicedBase;
                  TempTrackingSpecification.MODIFY;
                end;

                if TrackingSpecificationExists then
                  ItemTrackingMgt.AdjustQuantityRounding(
                    RemQtyToBeInvoiced,QtyToBeInvoiced,
                    RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                ReturnRcptLine."Quantity Invoiced" :=
                  ReturnRcptLine."Quantity Invoiced" + QtyToBeInvoiced;
                ReturnRcptLine."Qty. Invoiced (Base)" :=
                  ReturnRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
                ReturnRcptLine."Return Qty. Rcd. Not Invd." :=
                  ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                ReturnRcptLine.MODIFY;
                if SalesLine.Type = SalesLine.Type::Item then
                  PostItemJnlLine(
                    SalesHeader,SalesLine,
                    0,0,
                    QtyToBeInvoiced,
                    QtyToBeInvoicedBase,
                    // ReturnRcptLine."Item Rcpt. Entry No."
                    ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification,false);
                if TrackingSpecificationExists then
                  EndLoop := (TempTrackingSpecification.NEXT = 0) or (RemQtyToBeInvoiced = 0)
                else
                  EndLoop :=
                    (ReturnRcptLine.NEXT = 0) or (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Return Qty. to Receive"));
              until EndLoop;
            end else
              ERROR(
                ReturnReceiptInvoicedErr,
                SalesLine."Return Receipt Line No.",SalesLine."Return Receipt No.");
          end;

          if ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive") then begin
            if "Document Type" = "Document Type"::"Credit Memo" then
              ERROR(
                InvoiceGreaterThanReturnReceiptErr,
                ReturnRcptLine."Document No.");
            ERROR(ReturnReceiptLinesDeletedErr);
          end;
        end else begin
          if (ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship")) or
             (ABS(RemQtyToBeInvoiced) >= ABS(QtyToInvoiceBaseInTrackingSpec)) and (QtyToInvoiceBaseInTrackingSpec <> 0)
          then begin
            SalesShptLine.RESET;
            case "Document Type" of
              "Document Type"::Order:
                begin
                  SalesShptLine.SETCURRENTKEY("Order No.","Order Line No.");
                  SalesShptLine.SETRANGE("Order No.",SalesLine."Document No.");
                  SalesShptLine.SETRANGE("Order Line No.",SalesLine."Line No.");
                end;
              "Document Type"::Invoice:
                begin
                  SalesShptLine.SETRANGE("Document No.",SalesLine."Shipment No.");
                  SalesShptLine.SETRANGE("Line No.",SalesLine."Shipment Line No.");
                end;
            end;

            if not TrackingSpecificationExists then
              HasATOShippedNotInvoiced := GetATOItemLedgEntriesNotInvoiced(SalesLine,TempItemLedgEntryNotInvoiced);

            SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
            if SalesShptLine.FINDFIRST then begin
              ItemJnlRollRndg := true;
              repeat
                SetItemEntryRelation(
                  ItemEntryRelation,SalesShptLine,
                  TempTrackingSpecification,TempItemLedgEntryNotInvoiced,
                  TrackingSpecificationExists,HasATOShippedNotInvoiced);

                UpdateRemainingQtyToBeInvoiced(SalesShptLine,RemQtyToInvoiceCurrLine,RemQtyToInvoiceCurrLineBase);

                SalesShptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                SalesShptLine.TESTFIELD(Type,SalesLine.Type);
                SalesShptLine.TESTFIELD("No.",SalesLine."No.");
                SalesShptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                SalesShptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                SalesShptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                SalesShptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                SalesShptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                if -SalesLine."Qty. to Invoice" * SalesShptLine.Quantity < 0 then
                  SalesLine.FIELDERROR("Qty. to Invoice",ShipmentSameSignErr);

                UpdateQtyToBeInvoicedForShipment(
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  TrackingSpecificationExists,HasATOShippedNotInvoiced,
                  SalesLine,SalesShptLine,
                  TempTrackingSpecification,TempItemLedgEntryNotInvoiced);

                if TrackingSpecificationExists then begin
                  TempTrackingSpecification."Quantity actual Handled (Base)" := QtyToBeInvoicedBase;
                  TempTrackingSpecification.MODIFY;
                end;

                if TrackingSpecificationExists or HasATOShippedNotInvoiced then
                  ItemTrackingMgt.AdjustQuantityRounding(
                    RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
                    RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);

                RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
                if SalesLine.Type = SalesLine.Type::Item then
                  PostItemJnlLine(
                    SalesHeader,SalesLine,
                    0,0,
                    QtyToBeInvoiced,
                    QtyToBeInvoicedBase,
                    // SalesShptLine."Item Shpt. Entry No."
                    ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification,false);
              until IsEndLoopForShippedNotInvoiced(
                      RemQtyToBeInvoiced,TrackingSpecificationExists,HasATOShippedNotInvoiced,
                      SalesShptLine,TempTrackingSpecification,TempItemLedgEntryNotInvoiced,SalesLine);
            end else
              ERROR(
                ShipmentInvoiceErr,SalesLine."Shipment Line No.",SalesLine."Shipment No.");
          end;

          if ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship") then begin
            if "Document Type" = "Document Type"::Invoice then
              ERROR(QuantityToInvoiceGreaterErr,SalesShptLine."Document No.");
            ERROR(ShipmentLinesDeletedErr);
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE PostUpdateOrderLine@149(SalesHeader@1000 : Record "Sales Header");
    VAR
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
    BEGIN
      ResetTempLines(TempSalesLine);
      with TempSalesLine do begin
        SETFILTER(Quantity,'<>0');
        if FINDSET then
          repeat
            if SalesHeader.Ship then begin
              "Quantity Shipped" += "Qty. to Ship";
              "Qty. Shipped (Base)" += "Qty. to Ship (Base)";
            end;
            if SalesHeader.Receive then begin
              "Return Qty. Received" += "Return Qty. to Receive";
              "Return Qty. Received (Base)" += "Return Qty. to Receive (Base)";
            end;
            if SalesHeader.Invoice then begin
              if "Document Type" = "Document Type"::Order then begin
                if ABS("Quantity Invoiced" + "Qty. to Invoice") > ABS("Quantity Shipped") then begin
                  VALIDATE("Qty. to Invoice","Quantity Shipped" - "Quantity Invoiced");
                  "Qty. to Invoice (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
                end
              end else
                if ABS("Quantity Invoiced" + "Qty. to Invoice") > ABS("Return Qty. Received") then begin
                  VALIDATE("Qty. to Invoice","Return Qty. Received" - "Quantity Invoiced");
                  "Qty. to Invoice (Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
                end;

              "Quantity Invoiced" += "Qty. to Invoice";
              "Qty. Invoiced (Base)" += "Qty. to Invoice (Base)";
              if "Qty. to Invoice" <> 0 then begin
                "Prepmt Amt Deducted" += "Prepmt Amt to Deduct";
                "Prepmt VAT Diff. Deducted" += "Prepmt VAT Diff. to Deduct";
                DecrementPrepmtAmtInvLCY(
                  TempSalesLine,"Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
                "Prepmt Amt to Deduct" := "Prepmt. Amt. Inv." - "Prepmt Amt Deducted";
                "Prepmt VAT Diff. to Deduct" := 0;
              end;
            end;

            UpdateBlanketOrderLine(TempSalesLine,SalesHeader.Ship,SalesHeader.Receive,SalesHeader.Invoice);
            InitOutstanding;
            CheckATOLink(TempSalesLine);
            if WhseHandlingRequired(TempSalesLine) or
               (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank)
            then begin
              if "Document Type" = "Document Type"::"Return Order" then begin
                "Return Qty. to Receive" := 0;
                "Return Qty. to Receive (Base)" := 0;
              end else begin
                "Qty. to Ship" := 0;
                "Qty. to Ship (Base)" := 0;
              end;
              InitQtyToInvoice;
            end else begin
              if "Document Type" = "Document Type"::"Return Order" then
                InitQtyToReceive
              else
                InitQtyToShip2;
            end;

            if ("Purch. Order Line No." <> 0) and (Quantity = "Quantity Invoiced") then
              UpdateAssocLines(TempSalesLine);
            SetDefaultQuantity;
            ModifyTempLine(TempSalesLine);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostUpdateInvoiceLine@141();
    VAR
      SalesOrderLine@1001 : Record "Sales Line";
      SalesShptLine@1002 : Record "Sales Shipment Line";
      TempSalesLine@1000 : TEMPORARY Record "Sales Line";
      TempSalesOrderHeader@1003 : TEMPORARY Record "Sales Header";
      CRMSalesDocumentPostingMgt@1004 : Codeunit "CRM Sales Document Posting Mgt";
    BEGIN
      ResetTempLines(TempSalesLine);
      with TempSalesLine do begin
        SETFILTER("Shipment No.",'<>%1','');
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            SalesShptLine.GET("Shipment No.","Shipment Line No.");
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              SalesShptLine."Order No.",SalesShptLine."Order Line No.");
            if Type = Type::"Charge (Item)" then
              UpdateSalesOrderChargeAssgnt(TempSalesLine,SalesOrderLine);
            SalesOrderLine."Quantity Invoiced" += "Qty. to Invoice";
            SalesOrderLine."Qty. Invoiced (Base)" += "Qty. to Invoice (Base)";
            if ABS(SalesOrderLine."Quantity Invoiced") > ABS(SalesOrderLine."Quantity Shipped") then
              ERROR(InvoiceMoreThanShippedErr,SalesOrderLine."Document No.");
            SalesOrderLine.InitQtyToInvoice;
            if SalesOrderLine."Prepayment %" <> 0 then begin
              SalesOrderLine."Prepmt Amt Deducted" += "Prepmt Amt to Deduct";
              SalesOrderLine."Prepmt VAT Diff. Deducted" += "Prepmt VAT Diff. to Deduct";
              DecrementPrepmtAmtInvLCY(
                TempSalesLine,SalesOrderLine."Prepmt. Amount Inv. (LCY)",SalesOrderLine."Prepmt. VAT Amount Inv. (LCY)");
              SalesOrderLine."Prepmt Amt to Deduct" :=
                SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted";
              SalesOrderLine."Prepmt VAT Diff. to Deduct" := 0;
            end;
            SalesOrderLine.InitOutstanding;
            if (SalesOrderLine."Purch. Order Line No." <> 0) and
               (SalesOrderLine.Quantity = SalesOrderLine."Quantity Invoiced")
            then
              UpdateAssocLines(SalesOrderLine);
            SalesOrderLine.MODIFY;
            if not TempSalesOrderHeader.GET(SalesOrderLine."Document Type",SalesOrderLine."Document No.") then begin
              TempSalesOrderHeader."Document Type" := SalesOrderLine."Document Type";
              TempSalesOrderHeader."No." := SalesOrderLine."Document No.";
              TempSalesOrderHeader.INSERT;
            end;
          until NEXT = 0;
        CRMSalesDocumentPostingMgt.CheckShippedOrders(TempSalesOrderHeader);
      end;
    END;

    LOCAL PROCEDURE PostUpdateReturnReceiptLine@142();
    VAR
      SalesOrderLine@1002 : Record "Sales Line";
      ReturnRcptLine@1000 : Record "Return Receipt Line";
      TempSalesLine@1001 : TEMPORARY Record "Sales Line";
    BEGIN
      ResetTempLines(TempSalesLine);
      with TempSalesLine do begin
        SETFILTER("Return Receipt No.",'<>%1','');
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::"Return Order",
              ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
            if Type = Type::"Charge (Item)" then
              UpdateSalesOrderChargeAssgnt(TempSalesLine,SalesOrderLine);
            SalesOrderLine."Quantity Invoiced" += "Qty. to Invoice";
            SalesOrderLine."Qty. Invoiced (Base)" += "Qty. to Invoice (Base)";
            if ABS(SalesOrderLine."Quantity Invoiced") > ABS(SalesOrderLine."Return Qty. Received") then
              ERROR(InvoiceMoreThanReceivedErr,SalesOrderLine."Document No.");
            SalesOrderLine.InitQtyToInvoice;
            SalesOrderLine.InitOutstanding;
            SalesOrderLine.MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@123(SalesHeader@1008 : Record "Sales Header";SalesLine@1000 : Record "Sales Line";InvoicePostBuffer@1009 : Record "Invoice Post. Buffer";RemainAmtToDefer@1001 : Decimal;RemainAmtToDeferACY@1002 : Decimal;DeferralAccount@1003 : Code[20];SalesAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record "Deferral Template";
    BEGIN
      DeferralTemplate.GET(SalesLine."Deferral Code");

      if TempDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
           SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      then begin
        if TempDeferralHeader."Amount to Defer" <> 0 then begin
          TempDeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
          TempDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
          TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
          TempDeferralLine.SETRANGE("Document Type",SalesLine."Document Type");
          TempDeferralLine.SETRANGE("Document No.",SalesLine."Document No.");
          TempDeferralLine.SETRANGE("Line No.",SalesLine."Line No.");

          // The remaining amounts only need to be adjusted into the deferral account and are always reversed
          if (RemainAmtToDefer <> 0) or (RemainAmtToDeferACY <> 0) then begin
            DeferralPostBuffer[1].PrepareSales(SalesLine,GenJnlLineDocNo);
            DeferralPostBuffer[1]."Amount (LCY)" := RemainAmtToDefer;
            DeferralPostBuffer[1].Amount := RemainAmtToDeferACY;
            DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := 0;
            DeferralPostBuffer[1]."Sales/Purch Amount" := 0;
            DeferralPostBuffer[1].ReverseAmounts;
            DeferralPostBuffer[1]."G/L Account" := SalesAccount;
            DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
            // Remainder always goes to the Posting Date
            DeferralPostBuffer[1]."Posting Date" := SalesHeader."Posting Date";
            DeferralPostBuffer[1].Description := SalesHeader."Posting Description";
            DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
            DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
            DeferralPostBuffer[1]."Partial Deferral" := true;
            UpdDeferralPostBuffer(InvoicePostBuffer);
          end;

          // Add the deferral lines for each period to the deferral posting buffer merging when they are the same
          if TempDeferralLine.FINDSET then
            repeat
              if (TempDeferralLine."Amount (LCY)" <> 0) or (TempDeferralLine.Amount <> 0) then begin
                DeferralPostBuffer[1].PrepareSales(SalesLine,GenJnlLineDocNo);
                DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                if not SalesLine.IsCreditDocType then
                  DeferralPostBuffer[1].ReverseAmounts;
                DeferralPostBuffer[1]."G/L Account" := SalesAccount;
                DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
                UpdDeferralPostBuffer(InvoicePostBuffer);
              end else
                ERROR(ZeroDeferralAmtErr,SalesLine."No.",SalesLine."Deferral Code");

            until TempDeferralLine.NEXT = 0

          else
            ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code");
        end else
          ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code")
      end else
        ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code");
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124(InvoicePostBuffer@1000 : Record "Invoice Post. Buffer");
    BEGIN
      DeferralPostBuffer[1]."Dimension Set ID" := InvoicePostBuffer."Dimension Set ID";
      DeferralPostBuffer[1]."Global Dimension 1 Code" := InvoicePostBuffer."Global Dimension 1 Code";
      DeferralPostBuffer[1]."Global Dimension 2 Code" := InvoicePostBuffer."Global Dimension 2 Code";

      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      if DeferralPostBuffer[2].FIND then begin
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";

        if not DeferralPostBuffer[1]."System-Created Entry" then
          DeferralPostBuffer[2]."System-Created Entry" := false;
        if IsCombinedDeferralZero then
          DeferralPostBuffer[2].DELETE
        else
          DeferralPostBuffer[2].MODIFY;
      end else
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RoundDeferralsForArchive@126(SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1001 : Record "Sales Line");
    VAR
      ArchiveManagement@1005 : Codeunit ArchiveManagement;
    BEGIN
      ArchiveManagement.RoundSalesDeferralsForArchive(SalesHeader,SalesLine);
    END;

    LOCAL PROCEDURE GetAmountsForDeferral@127(SalesLine@1001 : Record "Sales Line";VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR DeferralAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1005 : Record "Deferral Template";
    BEGIN
      DeferralTemplate.GET(SalesLine."Deferral Code");
      DeferralTemplate.TESTFIELD("Deferral Account");
      DeferralAccount := DeferralTemplate."Deferral Account";

      if TempDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
           SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      then begin
        AmtToDeferACY := TempDeferralHeader."Amount to Defer";
        AmtToDefer := TempDeferralHeader."Amount to Defer (LCY)";
      end;

      if not SalesLine.IsCreditDocType then begin
        AmtToDefer := -AmtToDefer;
        AmtToDeferACY := -AmtToDeferACY;
      end;
    END;

    LOCAL PROCEDURE CheckMandatoryHeaderFields@128(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      SalesHeader.TESTFIELD("Document Type");
      SalesHeader.TESTFIELD("Sell-to Customer No.");
      SalesHeader.TESTFIELD("Bill-to Customer No.");
      SalesHeader.TESTFIELD("Posting Date");
      SalesHeader.TESTFIELD("Document Date");

      OnAfterCheckMandatoryFields(SalesHeader);
    END;

    LOCAL PROCEDURE DefaultGLAccount@129(DeferralCode@1000 : Code[10];AmtToDefer@1001 : Decimal;GLAccNo@1002 : Code[20];DeferralAccNo@1003 : Code[20]) : Code[20];
    BEGIN
      if (DeferralCode <> '') and (AmtToDefer = 0) then
        exit(DeferralAccNo);

      exit(GLAccNo);
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      if (DeferralPostBuffer[2].Amount = 0) and (DeferralPostBuffer[2]."Amount (LCY)" = 0) and
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) and (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE ClearPostBuffers@132();
    BEGIN
      CLEAR(WhsePostRcpt);
      CLEAR(WhsePostShpt);
      CLEAR(GenJnlPostLine);
      CLEAR(ResJnlPostLine);
      CLEAR(JobPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(WhseJnlPostLine);
    END;

    LOCAL PROCEDURE SetPostingFlags@138(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      with SalesHeader do begin
        case "Document Type" of
          "Document Type"::Order:
            Receive := false;
          "Document Type"::Invoice:
            begin
              Ship := true;
              Invoice := true;
              Receive := false;
            end;
          "Document Type"::"Return Order":
            Ship := false;
          "Document Type"::"Credit Memo":
            begin
              Ship := false;
              Invoice := true;
              Receive := true;
            end;
        end;
        if not (Ship or Invoice or Receive) then
          ERROR(ShipInvoiceReceiveErr);
      end;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforePostSalesDoc@133(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforePostCommitSalesDoc@134(VAR SalesHeader@1000 : Record "Sales Header";VAR GenJnlPostLine@1003 : Codeunit "Gen. Jnl.-Post Line";PreviewMode@1001 : Boolean;ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckSalesDoc@1(SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterPostSalesDoc@135(VAR SalesHeader@1001 : Record "Sales Header";VAR GenJnlPostLine@1000 : Codeunit "Gen. Jnl.-Post Line";SalesShptHdrNo@1002 : Code[20];RetRcpHdrNo@1003 : Code[20];SalesInvHdrNo@1004 : Code[20];SalesCrMemoHdrNo@1005 : Code[20]);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterUpdatePostingNos@22(VAR SalesHeader@1000 : Record "Sales Header";VAR NoSeriesMgt@1001 : Codeunit NoSeriesManagement);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckMandatoryFields@195(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesInvLineInsert@174(VAR SalesInvLine@1000 : Record "Sales Invoice Line";VAR SalesInvHeader@1002 : Record "Sales Invoice Header";VAR SalesLine@1001 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesCrMemoLineInsert@182(VAR SalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";VAR SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header";VAR SalesLine@1001 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFinalizePosting@196(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesShipmentHeader@1001 : Record "Sales Shipment Header";VAR SalesInvoiceHeader@1002 : Record "Sales Invoice Header";VAR SalesCrMemoHeader@1003 : Record "Sales Cr.Memo Header";VAR ReturnReceiptHeader@1004 : Record "Return Receipt Header";VAR GenJnlPostLine@1005 : Codeunit "Gen. Jnl.-Post Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertICGenJnlLine@198(VAR ICGenJournalLine@1000 : Record "Gen. Journal Line";SalesHeader@1001 : Record "Sales Header";SalesLine@1002 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesShptHeaderInsert@183(VAR SalesShptHeader@1001 : Record "Sales Shipment Header";VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesShptLineInsert@192(VAR SalesShptLine@1001 : Record "Sales Shipment Line";VAR SalesShptHeader@1002 : Record "Sales Shipment Header";VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesInvHeaderInsert@185(VAR SalesInvHeader@1001 : Record "Sales Invoice Header";VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesInvLineInsert@189(VAR SalesInvLine@1001 : Record "Sales Invoice Line";VAR SalesInvHeader@1000 : Record "Sales Invoice Header";VAR SalesLine@1002 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesCrMemoHeaderInsert@187(VAR SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesCrMemoLineInsert@190(VAR SalesCrMemoLine@1001 : Record "Sales Cr.Memo Line";VAR SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";VAR SalesLine@1002 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReturnRcptHeaderInsert@186(VAR ReturnRcptHeader@1001 : Record "Return Receipt Header";VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReturnRcptLineInsert@191(VAR ReturnRcptLine@1001 : Record "Return Receipt Line";VAR ReturnRcptHeader@1002 : Record "Return Receipt Header";VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostCustomerEntry@193(VAR GenJnlLine@1003 : Record "Gen. Journal Line";VAR SalesHeader@1000 : Record "Sales Header";VAR TotalSalesLine@1001 : Record "Sales Line";VAR TotalSalesLineLCY@1002 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostBalancingEntry@194(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR SalesHeader@1003 : Record "Sales Header";VAR TotalSalesLine@1002 : Record "Sales Line";VAR TotalSalesLineLCY@1001 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostInvPostBuffer@148(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR InvoicePostBuffer@1001 : Record "Invoice Post. Buffer";VAR SalesHeader@1003 : Record "Sales Header");
    BEGIN
    END;

    LOCAL PROCEDURE PostResJnlLine@136(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesLine@1002 : Record "Sales Line";VAR JobTaskSalesLine@1003 : Record "Sales Line");
    VAR
      ResJnlLine@1001 : Record "Res. Journal Line";
    BEGIN
      if SalesLine."Qty. to Invoice" = 0 then
        exit;

      with ResJnlLine do begin
        INIT;
        "Posting Date" := SalesHeader."Posting Date";
        "Document Date" := SalesHeader."Document Date";
        "Reason Code" := SalesHeader."Reason Code";

        CopyDocumentFields(GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,SalesHeader."Posting No. Series");

        CopyFromSalesLine(SalesLine);

        ResJnlPostLine.RunWithCheck(ResJnlLine);
        if JobTaskSalesLine."Job Contract Entry No." > 0 then
          PostJobContractLine(SalesHeader,JobTaskSalesLine);
      end;
    END;

    LOCAL PROCEDURE ValidatePostingAndDocumentDate@199(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      BatchProcessingMgt@1002 : Codeunit "Batch Processing Mgt.";
      BatchPostParameterTypes@1003 : Codeunit "Batch Post Parameter Types";
      PostingDate@1007 : Date;
      ModifyHeader@1001 : Boolean;
      PostingDateExists@1006 : Boolean;
      ReplacePostingDate@1005 : Boolean;
      ReplaceDocumentDate@1004 : Boolean;
    BEGIN
      PostingDateExists :=
        BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) and
        BatchProcessingMgt.GetParameterBoolean(
          SalesHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) and
        BatchProcessingMgt.GetParameterDate(SalesHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);

      if PostingDateExists and (ReplacePostingDate or (SalesHeader."Posting Date" = 0D)) then begin
        SalesHeader."Posting Date" := PostingDate;
        SalesHeader.SynchronizeAsmHeader;
        SalesHeader.VALIDATE("Currency Code");
        ModifyHeader := true;
      end;

      if PostingDateExists and (ReplaceDocumentDate or (SalesHeader."Document Date" = 0D)) then begin
        SalesHeader.VALIDATE("Document Date",PostingDate);
        ModifyHeader := true;
      end;

      if ModifyHeader then
        SalesHeader.MODIFY;
    END;

    LOCAL PROCEDURE UpdateSalesLineDimSetIDFromAppliedEntry@62(VAR SalesLineToPost@1000 : Record "Sales Line";SalesLine@1001 : Record "Sales Line");
    VAR
      ItemLedgEntry@1002 : Record "Item Ledger Entry";
      DimensionMgt@1003 : Codeunit DimensionManagement;
      DimSetID@1004 : ARRAY [10] OF Integer;
    BEGIN
      DimSetID[1] := SalesLine."Dimension Set ID";
      with SalesLineToPost do begin
        if "Appl.-to Item Entry" <> 0 then begin
          ItemLedgEntry.GET("Appl.-to Item Entry");
          DimSetID[2] := ItemLedgEntry."Dimension Set ID";
        end;
        "Dimension Set ID" :=
          DimensionMgt.GetCombinedDimensionSetID(DimSetID,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      end;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@64(SalesHeader@1000 : Record "Sales Header";SalesLine@1003 : Record "Sales Line";OriginalDeferralAmount@1002 : Decimal);
    VAR
      DeferralHeader@1004 : Record "Deferral Header";
      DeferralLine@1005 : Record "Deferral Line";
      CurrExchRate@1006 : Record "Currency Exchange Rate";
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      // Populate temp and calculate the LCY amounts for posting
      if SalesHeader."Posting Date" = 0D then
        UseDate := WORKDATE
      else
        UseDate := SalesHeader."Posting Date";

      if DeferralHeader.GET(
           DeferralUtilities.GetSalesDeferralDocType,'','',SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      then begin
        TempDeferralHeader := DeferralHeader;
        if SalesLine.Quantity <> SalesLine."Qty. to Invoice" then
          TempDeferralHeader."Amount to Defer" :=
            ROUND(TempDeferralHeader."Amount to Defer" *
              SalesLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");
        TempDeferralHeader."Amount to Defer (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",
              TempDeferralHeader."Amount to Defer",SalesHeader."Currency Factor"));
        TempDeferralHeader.INSERT;

        with DeferralLine do begin
          SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type");
          SETRANGE("Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Template Name");
          SETRANGE("Gen. Jnl. Batch Name",DeferralHeader."Gen. Jnl. Batch Name");
          SETRANGE("Document Type",DeferralHeader."Document Type");
          SETRANGE("Document No.",DeferralHeader."Document No.");
          SETRANGE("Line No.",DeferralHeader."Line No.");
          if FINDSET then begin
            TotalDeferralCount := COUNT;
            repeat
              DeferralCount := DeferralCount + 1;
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;

              if DeferralCount = TotalDeferralCount then begin
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              end else begin
                if SalesLine.Quantity <> SalesLine."Qty. to Invoice" then
                  TempDeferralLine.Amount :=
                    ROUND(TempDeferralLine.Amount *
                      SalesLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");

                TempDeferralLine."Amount (LCY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      UseDate,SalesHeader."Currency Code",
                      TempDeferralLine.Amount,SalesHeader."Currency Factor"));
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              end;
              TempDeferralLine.INSERT;
            until NEXT = 0;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromSalesDoc@65(SalesLine@1008 : Record "Sales Line";NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date);
    VAR
      PostedDeferralHeader@1006 : Record "Posted Deferral Header";
      PostedDeferralLine@1005 : Record "Posted Deferral Line";
      DeferralTemplate@1004 : Record "Deferral Template";
      DeferralAccount@1001 : Code[20];
    BEGIN
      if SalesLine."Deferral Code" = '' then
        exit;

      if DeferralTemplate.GET(SalesLine."Deferral Code") then
        DeferralAccount := DeferralTemplate."Deferral Account";

      if TempDeferralHeader.GET(
           DeferralUtilities.GetSalesDeferralDocType,'','',SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      then begin
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader,'','',
          NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount,SalesLine."Sell-to Customer No.",PostingDate);
        with TempDeferralLine do begin
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",SalesLine."Document Type");
          SETRANGE("Document No.",SalesLine."Document No.");
          SETRANGE("Line No.",SalesLine."Line No.");
          if FINDSET then begin
            repeat
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
            until NEXT = 0;
          end;
        end;
      end;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnSendSalesDocument@70(ShipAndInvoice@1000 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE GetAmountRoundingPrecisionInLCY@122(DocType@1002 : Option;DocNo@1003 : Code[20];CurrencyCode@1000 : Code[10]) AmountRoundingPrecision : Decimal;
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      if CurrencyCode = '' then
        exit(GLSetup."Amount Rounding Precision");
      SalesHeader.GET(DocType,DocNo);
      AmountRoundingPrecision := Currency."Amount Rounding Precision" / SalesHeader."Currency Factor";
      if AmountRoundingPrecision < GLSetup."Amount Rounding Precision" then
        exit(GLSetup."Amount Rounding Precision");
      exit(AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE UpdateEmailParameters@197(SalesHeader@1000 : Record "Sales Header");
    VAR
      EmailParameter@1001 : Record "Email Parameter";
    BEGIN
      if SalesHeader."Last Posting No." = '' then
        exit;
      EmailParameter.SETRANGE("Document No",SalesHeader."No.");
      EmailParameter.SETRANGE("Document Type",SalesHeader."Document Type");
      if EmailParameter.FINDSET(true,true) then
        repeat
          EmailParameter.RENAME(SalesHeader."Last Posting No.",EmailParameter."Document Type",EmailParameter."Parameter Type");
        until EmailParameter.NEXT = 0;
    END;

    LOCAL PROCEDURE ArchivePurchaseOrders@200(VAR TempDropShptPostBuffer@1000 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      PurchOrderHeader@1002 : Record "Purchase Header";
      PurchOrderLine@1001 : Record "Purchase Line";
    BEGIN
      if TempDropShptPostBuffer.FINDSET then begin
        repeat
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,TempDropShptPostBuffer."Order No.");
          TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
          repeat
            PurchOrderLine.GET(
              PurchOrderLine."Document Type"::Order,
              TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
            PurchOrderLine."Qty. to Receive" := TempDropShptPostBuffer.Quantity;
            PurchOrderLine."Qty. to Receive (Base)" := TempDropShptPostBuffer."Quantity (Base)";
            PurchOrderLine.MODIFY;
          until TempDropShptPostBuffer.NEXT = 0;
          PurchPost.ArchiveUnpostedOrder(PurchOrderHeader);
          TempDropShptPostBuffer.SETRANGE("Order No.");
        until TempDropShptPostBuffer.NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

