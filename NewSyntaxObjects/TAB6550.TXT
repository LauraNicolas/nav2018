OBJECT Table 6550 Whse. Item Tracking Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Quantity Handled (Base)",0);
             END;

    CaptionML=ENU=Whse. Item Tracking Line;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                if "Quantity (Base)" < 0 then
                                                                  FIELDERROR("Quantity (Base)",Text004);

                                                                if "Quantity (Base)" < "Quantity Handled (Base)" then
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Quantity Handled (Base)")));

                                                                CheckSerialNoQty;

                                                                InitQtyToHandle;
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 11  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10" }
    { 12  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID }
    { 13  ;   ;Source Batch Name   ;Code10        ;CaptionML=ENU=Source Batch Name }
    { 14  ;   ;Source Prod. Order Line;Integer    ;CaptionML=ENU=Source Prod. Order Line }
    { 15  ;   ;Source Ref. No.     ;Integer       ;CaptionML=ENU=Source Ref. No. }
    { 24  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                if "Serial No." <> xRec."Serial No." then begin
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  if IsReclass("Source Type","Source Batch Name") then
                                                                    "New Serial No." := "Serial No.";
                                                                  CheckSerialNoQty;
                                                                  InitExpirationDate;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Serial No. }
    { 29  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 40  ;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 41  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                "New Expiration Date" := "Expiration Date";
                                                              END;

                                                   CaptionML=ENU=Expiration Date }
    { 50  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                if "Qty. to Handle (Base)" < 0 then
                                                                  FIELDERROR("Qty. to Handle (Base)",Text004);

                                                                if "Qty. to Handle (Base)" > ("Quantity (Base)" - "Quantity Handled (Base)")
                                                                then
                                                                  ERROR(
                                                                    Text001,
                                                                    "Quantity (Base)" - "Quantity Handled (Base)");

                                                                "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle (Base);
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Qty. to Invoice (Base);Decimal     ;CaptionML=ENU=Qty. to Invoice (Base);
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Quantity Handled (Base);Decimal    ;CaptionML=ENU=Quantity Handled (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Quantity Invoiced (Base);Decimal   ;CaptionML=ENU=Quantity Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 60  ;   ;Qty. to Handle      ;Decimal       ;CaptionML=ENU=Qty. to Handle;
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Buffer Status       ;Option        ;CaptionML=ENU=Buffer Status;
                                                   OptionCaptionML=ENU=" ,MODIFY";
                                                   OptionString=" ",MODIFY;
                                                   Editable=false }
    { 71  ;   ;Buffer Status2      ;Option        ;CaptionML=ENU=Buffer Status2;
                                                   OptionCaptionML=ENU=,ExpDate blocked;
                                                   OptionString=,"ExpDate blocked";
                                                   Editable=false }
    { 80  ;   ;New Serial No.      ;Code20        ;CaptionML=ENU=New Serial No. }
    { 81  ;   ;New Lot No.         ;Code20        ;CaptionML=ENU=New Lot No. }
    { 90  ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Type Filter;
                                                   OptionCaptionML=ENU=" ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet,Assembly";
                                                   OptionString=" ",Receipt,Shipment,"Internal Put-away","Internal Pick",Production,"Movement Worksheet",Assembly }
    { 91  ;   ;Qty. Registered (Base);Decimal     ;CaptionML=ENU=Qty. Registered (Base) }
    { 92  ;   ;Put-away Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=FILTER("Put-away"),
                                                                                                                              "Whse. Document Type"=FIELD("Source Type Filter"),
                                                                                                                              "Whse. Document No."=FIELD("Source ID"),
                                                                                                                              "Whse. Document Line No."=FIELD("Source Ref. No."),
                                                                                                                              "Serial No."=FIELD("Serial No."),
                                                                                                                              "Lot No."=FIELD("Lot No."),
                                                                                                                              "Action Type"=FILTER(" "|Take)));
                                                   CaptionML=ENU=Put-away Qty. (Base) }
    { 93  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=FILTER(Pick|Movement),
                                                                                                                              "Whse. Document Type"=FIELD("Source Type Filter"),
                                                                                                                              "Whse. Document No."=FIELD("Source ID"),
                                                                                                                              "Whse. Document Line No."=FIELD("Source Ref. No."),
                                                                                                                              "Serial No."=FIELD("Serial No."),
                                                                                                                              "Lot No."=FIELD("Lot No."),
                                                                                                                              "Action Type"=FILTER(" "|Place)));
                                                   CaptionML=ENU=Pick Qty. (Base) }
    { 94  ;   ;Created by Whse. Activity Line;Boolean;
                                                   CaptionML=ENU=Created by Whse. Activity Line }
    { 5400;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                if "Lot No." <> xRec."Lot No." then begin
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  if IsReclass("Source Type","Source Batch Name") then
                                                                    "New Lot No." := "Lot No.";
                                                                  InitExpirationDate;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Lot No. }
    { 5401;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
    { 6505;   ;New Expiration Date ;Date          ;CaptionML=ENU=New Expiration Date }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Source ID","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.","Location Code";
                                                   SumIndexFields="Quantity (Base)","Qty. to Handle (Base)","Qty. to Invoice (Base)","Quantity Handled (Base)","Quantity Invoiced (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Serial No.","Lot No."                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot handle more than %1 units.';
      Text002@1000 : TextConst 'ENU=must not be less than %1';
      Text003@1002 : TextConst 'ENU=%1 must be 0 or 1 when %2 is stated.';
      Text004@1004 : TextConst 'ENU=must not be negative';

    LOCAL PROCEDURE CheckSerialNoQty@1();
    BEGIN
      if "Serial No." <> '' then
        if not ("Quantity (Base)" in [0,1]) then
          ERROR(Text003,FIELDCAPTION("Quantity (Base)"),FIELDCAPTION("Serial No."));
    END;

    LOCAL PROCEDURE CalcQty@14(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      if "Qty. per Unit of Measure" = 0 then
        "Qty. per Unit of Measure" := 1;
      exit(ROUND(BaseQty / "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE InitQtyToHandle@15();
    BEGIN
      "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
      "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    END;

    [External]
    PROCEDURE InitExpirationDate@2();
    VAR
      Location@1003 : Record Location;
      ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
      ExpDate@1000 : Date;
      WarDate@1004 : Date;
    BEGIN
      if ("Serial No." = xRec."Serial No.") and ("Lot No." = xRec."Lot No.") then
        exit;

      "Expiration Date" := 0D;
      "Buffer Status2" := 0;

      Location.INIT;
      if "Location Code" <> '' then
        Location.GET("Location Code");

      if ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExpDate) then begin
        "Expiration Date" := ExpDate;
        "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
      end;

      if IsReclass("Source Type","Source Batch Name") then begin
        "New Expiration Date" := "Expiration Date";
        if ItemTrackingMgt.GetWhseWarrantyDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",WarDate) then
          "Warranty Date" := WarDate;
      end;
    END;

    [External]
    PROCEDURE IsReclass@4(SourceType@1001 : Integer;SourceBatchName@1002 : Code[10]) : Boolean;
    VAR
      WhseJnlLine@1000 : Record "Warehouse Journal Line";
    BEGIN
      if SourceType = DATABASE::"Warehouse Journal Line" then
        exit(WhseJnlLine.IsReclass(SourceBatchName));

      exit(false);
    END;

    [External]
    PROCEDURE LookUpTrackingSummary@50(VAR WhseItemTrackingLine@1000 : Record "Whse. Item Tracking Line";TrackingType@1001 : 'SerialNo,LotNo';MaxQuantity@1002 : Decimal;SignFactor@1003 : Integer;SearchForSupply@1004 : Boolean);
    VAR
      TempTrackingSpecification@1005 : TEMPORARY Record "Tracking Specification";
      WhseJnlLine@1006 : Record "Warehouse Journal Line";
      WhseWorksheetLine@1007 : Record "Whse. Worksheet Line";
      WhseInternalPutawayLine@1010 : Record "Whse. Internal Put-away Line";
      InternalMovementLine@1011 : Record "Internal Movement Line";
      ItemTrackingDataCollection@1008 : Codeunit "Item Tracking Data Collection";
      BinCode@1009 : Code[20];
    BEGIN
      with WhseItemTrackingLine do begin
        case "Source Type" of
          DATABASE::"Warehouse Journal Line":
            begin
              WhseJnlLine.GET("Source Batch Name","Source ID","Location Code","Source Ref. No.");
              BinCode := WhseJnlLine."Bin Code";
            end;
          DATABASE::"Whse. Worksheet Line":
            begin
              WhseWorksheetLine.GET("Source Batch Name","Source ID","Location Code","Source Ref. No.");
              BinCode := WhseWorksheetLine."From Bin Code";
            end;
          DATABASE::"Whse. Internal Put-away Line":
            begin
              WhseInternalPutawayLine.GET("Source ID","Source Ref. No.");
              BinCode := WhseInternalPutawayLine."From Bin Code";
            end;
          DATABASE::"Internal Movement Line":
            begin
              InternalMovementLine.GET("Source ID","Source Ref. No.");
              BinCode := InternalMovementLine."From Bin Code";
            end;
          else
            exit;
        end;

        TempTrackingSpecification.INIT;
        TempTrackingSpecification.SetItemData(
          "Item No.",Description,"Location Code","Variant Code",BinCode,"Qty. per Unit of Measure");
        TempTrackingSpecification.SetSource(
          "Source Type","Source Subtype","Source ID","Source Ref. No.","Source Batch Name","Source Prod. Order Line");
        TempTrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TempTrackingSpecification."Qty. to Handle" := "Qty. to Handle";
        TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
        CLEAR(ItemTrackingDataCollection);
        ItemTrackingDataCollection.AssistEditTrackingNo(
          TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,MaxQuantity);
        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");
        case TrackingType of
          TrackingType::SerialNo:
            if TempTrackingSpecification."Serial No." <> '' then
              VALIDATE("Serial No.",TempTrackingSpecification."Serial No.");
          TrackingType::LotNo:
            if TempTrackingSpecification."Lot No." <> '' then
              VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
        end;
      end;
    END;

    [External]
    PROCEDURE ClearTrackingFilter@35();
    BEGIN
      SETRANGE("Serial No.");
      SETRANGE("Lot No.");
    END;

    [External]
    PROCEDURE CopyTrackingFromItemLedgEntry@7(ItemLedgerEntry@1000 : Record "Item Ledger Entry");
    BEGIN
      "Serial No." := ItemLedgerEntry."Serial No.";
      "Lot No." := ItemLedgerEntry."Lot No.";
      "Warranty Date" := ItemLedgerEntry."Warranty Date";
      "Expiration Date" := ItemLedgerEntry."Expiration Date";
    END;

    [External]
    PROCEDURE CopyTrackingFromReservEntry@6(ReservEntry@1000 : Record "Reservation Entry");
    BEGIN
      "Serial No." := ReservEntry."Serial No.";
      "Lot No." := ReservEntry."Lot No.";
      "Warranty Date" := ReservEntry."Warranty Date";
      "Expiration Date" := ReservEntry."Expiration Date";
    END;

    [External]
    PROCEDURE SetSource@21(SourceType@1000 : Integer;SourceSubtype@1001 : Integer;SourceID@1002 : Code[20];SourceRefNo@1003 : Integer;SourceBatchName@1004 : Code[10];SourceProdOrderLine@1005 : Integer);
    BEGIN
      "Source Type" := SourceType;
      "Source Subtype" := SourceSubtype;
      "Source ID" := SourceID;
      "Source Ref. No." := SourceRefNo;
      "Source Batch Name" := SourceBatchName;
      "Source Prod. Order Line" := SourceProdOrderLine;
    END;

    [External]
    PROCEDURE SetSourceFilter@31(SourceType@1011 : Integer;SourceSubtype@1010 : Integer;SourceID@1009 : Code[20];SourceRefNo@1008 : Integer;SourceKey@1000 : Boolean);
    BEGIN
      if SourceKey then
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubtype >= 0 then
        SETRANGE("Source Subtype",SourceSubtype);
      SETRANGE("Source ID",SourceID);
      if SourceRefNo >= 0 then
        SETRANGE("Source Ref. No.",SourceRefNo);
    END;

    [External]
    PROCEDURE SetSourceFilter2@33(SourceBatchName@1007 : Code[10];SourceProdOrderLine@1006 : Integer);
    BEGIN
      SETRANGE("Source Batch Name",SourceBatchName);
      if SourceProdOrderLine >= 0 then
        SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
    END;

    [External]
    PROCEDURE SetTracking@5(SerialNo@1001 : Code[20];LotNo@1000 : Code[20];WarrantyDate@1002 : Date;ExpirationDate@1003 : Date);
    BEGIN
      "Serial No." := SerialNo;
      "Lot No." := LotNo;
      "Warranty Date" := WarrantyDate;
      "Expiration Date" := ExpirationDate;
    END;

    [External]
    PROCEDURE SetTrackingFilter@34(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      SETRANGE("Serial No.",SerialNo);
      SETRANGE("Lot No.",LotNo);
    END;

    [External]
    PROCEDURE SetTrackingFilterFromRelation@9(WhseItemEntryRelation@1000 : Record "Whse. Item Entry Relation");
    BEGIN
      SETRANGE("Serial No.",WhseItemEntryRelation."Serial No.");
      SETRANGE("Lot No.",WhseItemEntryRelation."Lot No.");
    END;

    [External]
    PROCEDURE SetTrackingFilterFromReservEntry@10(ReservEntry@1000 : Record "Reservation Entry");
    BEGIN
      SETRANGE("Serial No.",ReservEntry."Serial No.");
      SETRANGE("Lot No.",ReservEntry."Lot No.");
    END;

    [External]
    PROCEDURE SetTrackingFilterFromSpec@8(WhseItemTrackingLine@1000 : Record "Whse. Item Tracking Line");
    BEGIN
      SETRANGE("Serial No.",WhseItemTrackingLine."Serial No.");
      SETRANGE("Lot No.",WhseItemTrackingLine."Lot No.");
    END;

    [External]
    PROCEDURE TrackingExists@3() : Boolean;
    BEGIN
      exit(("Lot No." <> '') or ("Serial No." <> ''));
    END;

    BEGIN
    END.
  }
}

