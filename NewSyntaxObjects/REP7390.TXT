OBJECT Report 7390 Whse. Calculate Inventory
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Whse. Calculate Inventory;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 4810;    ;DataItem;Bin Content         ;
               DataItemTable="Bin Content";
               DataItemTableView=SORTING("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");
               OnPreDataItem=VAR
                               WhseJnlTemplate@1000 : Record "Warehouse Journal Template";
                               WhseJnlBatch@1001 : Record "Warehouse Journal Batch";
                             BEGIN
                               if RegisteringDate = 0D then
                                 ERROR(Text001,WhseJnlLine.FIELDCAPTION("Registering Date"));

                               SETRANGE("Location Code",WhseJnlLine."Location Code");

                               WhseJnlTemplate.GET(WhseJnlLine."Journal Template Name");
                               WhseJnlBatch.GET(
                                 WhseJnlLine."Journal Template Name",
                                 WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
                               if NextDocNo = '' then begin
                                 if WhseJnlBatch."No. Series" <> '' then begin
                                   WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlLine."Journal Template Name");
                                   WhseJnlLine.SETRANGE("Journal Batch Name",WhseJnlLine."Journal Batch Name");
                                   WhseJnlLine.SETRANGE("Location Code",WhseJnlLine."Location Code");
                                   if not WhseJnlLine.FINDFIRST then
                                     NextDocNo :=
                                       NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,false);
                                   WhseJnlLine.INIT;
                                 end;
                                 if NextDocNo = '' then
                                   ERROR(Text001,WhseJnlLine.FIELDCAPTION("Whse. Document No."));
                               end;

                               NextLineNo := 0;

                               if not HideValidationDialog then
                                 Window.OPEN(Text002,"Bin Code");
                             END;

               OnAfterGetRecord=BEGIN
                                  if SkipCycleSKU("Location Code","Item No.","Variant Code") then
                                    CurrReport.SKIP;

                                  if not HideValidationDialog then
                                    Window.UPDATE;
                                  CALCFIELDS("Quantity (Base)");
                                  if ("Quantity (Base)" <> 0) or ZeroQty then
                                    InsertWhseJnlLine("Bin Content");
                                END;

               OnPostDataItem=BEGIN
                                if not HideValidationDialog then
                                  Window.CLOSE;
                              END;

               ReqFilterFields="Zone Code","Bin Code","Item No.","Variant Code","Unit of Measure Code","Bin Type Code","Warehouse Class Code" }

    { 4820;    ;DataItem;Warehouse Entry     ;
               DataItemTable="Warehouse Entry";
               OnPreDataItem=BEGIN
                               if ("Bin Content".GETFILTER("Zone Code") = '') and
                                  ("Bin Content".GETFILTER("Bin Code") = '')
                               then
                                 CurrReport.BREAK;

                               "Bin Content".COPYFILTER("Location Code","Location Code");
                               "Bin Content".COPYFILTER("Zone Code","Zone Code");
                               "Bin Content".COPYFILTER("Bin Code","Bin Code");
                               "Bin Content".COPYFILTER("Item No.","Item No.");
                               "Bin Content".COPYFILTER("Variant Code","Variant Code");
                               "Bin Content".COPYFILTER("Unit of Measure Code","Unit of Measure Code");
                               "Bin Content".COPYFILTER("Bin Type Code","Bin Type Code");
                               "Bin Content".COPYFILTER("Lot No. Filter","Lot No.");
                               "Bin Content".COPYFILTER("Serial No. Filter","Serial No.");
                               TempBinContent.RESET;
                               TempBinContent.DELETEALL;
                             END;

               OnAfterGetRecord=VAR
                                  BinContent@1000 : Record "Bin Content";
                                BEGIN
                                  GetLocation("Location Code");
                                  if ("Bin Code" = Location."Adjustment Bin Code") or
                                     SkipCycleSKU("Location Code","Item No.","Variant Code")
                                  then
                                    CurrReport.SKIP;

                                  BinContent.COPYFILTERS("Bin Content");
                                  BinContent.SETRANGE("Location Code","Location Code");
                                  BinContent.SETRANGE("Item No.","Item No.");
                                  BinContent.SETRANGE("Variant Code","Variant Code");
                                  BinContent.SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                  if not BinContent.ISEMPTY then
                                    CurrReport.SKIP;

                                  TempBinContent.INIT;
                                  TempBinContent."Location Code" := "Location Code";
                                  TempBinContent."Item No." := "Item No.";
                                  TempBinContent."Zone Code" := "Zone Code";
                                  TempBinContent."Bin Code" := "Bin Code";
                                  TempBinContent."Variant Code" := "Variant Code";
                                  TempBinContent."Unit of Measure Code" := "Unit of Measure Code";
                                  TempBinContent."Quantity (Base)" := 0;
                                  if not TempBinContent.FIND then
                                    TempBinContent.INSERT;
                                END;

               OnPostDataItem=BEGIN
                                TempBinContent.RESET;
                                if TempBinContent.FINDSET then
                                  repeat
                                    InsertWhseJnlLine(TempBinContent);
                                  until TempBinContent.NEXT = 0;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if RegisteringDate = 0D then
                     RegisteringDate := WORKDATE;
                   ValidateRegisteringDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Registering Date;
                  CaptionML=ENU=Registering Date;
                  ToolTipML=ENU=Specifies the date for registering this batch job. The program automatically enters the work date in this field, but you can change it.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=RegisteringDate;
                  OnValidate=BEGIN
                               ValidateRegisteringDate;
                             END;
                              }

      { 9   ;2   ;Field     ;
                  Name=WhseDocumentNo;
                  CaptionML=ENU=Whse. Document No.;
                  ToolTipML=ENU=Specifies which document number will be entered in the Document No. field on the journal lines created by the batch job.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=NextDocNo }

      { 11  ;2   ;Field     ;
                  Name=Items Not on Inventory;
                  CaptionML=ENU=Items Not on Inventory;
                  ToolTipML=ENU=Specifies if journal lines should be created for items that are not on inventory, that is, items where the value in the Qty. (Calculated) field is 0.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ZeroQty }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Enter the %1.';
      Text002@1002 : TextConst 'ENU=Processing bins    #1##########';
      WhseJnlBatch@1004 : Record "Warehouse Journal Batch";
      WhseJnlLine@1005 : Record "Warehouse Journal Line";
      SourceCodeSetup@1003 : Record "Source Code Setup";
      Location@1006 : Record Location;
      Bin@1000 : Record Bin;
      TempBinContent@1012 : TEMPORARY Record "Bin Content";
      NoSeriesMgt@1017 : Codeunit NoSeriesManagement;
      Window@1019 : Dialog;
      RegisteringDate@1020 : Date;
      CycleSourceType@1008 : '" ",Item,SKU';
      PhysInvtCountCode@1009 : Code[10];
      NextDocNo@1021 : Code[20];
      NextLineNo@1023 : Integer;
      ZeroQty@1026 : Boolean;
      HideValidationDialog@1007 : Boolean;
      StockProposal@1010 : Boolean;

    [External]
    PROCEDURE SetWhseJnlLine@1(VAR NewWhseJnlLine@1000 : Record "Warehouse Journal Line");
    BEGIN
      WhseJnlLine := NewWhseJnlLine;
    END;

    LOCAL PROCEDURE ValidateRegisteringDate@4();
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",
        WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      if WhseJnlBatch."No. Series" = '' then
        NextDocNo := ''
      else begin
        NextDocNo :=
          NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,false);
        CLEAR(NoSeriesMgt);
      end;
    END;

    [External]
    PROCEDURE InsertWhseJnlLine@6(BinContent@1005 : Record "Bin Content");
    VAR
      WhseEntry@1000 : Record "Warehouse Entry";
      ItemUOM@1004 : Record "Item Unit of Measure";
      ItemTrackingMgt@1003 : Codeunit "Item Tracking Management";
      ExpDate@1001 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      with WhseJnlLine do begin
        if NextLineNo = 0 then begin
          LOCKTABLE;
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          SETRANGE("Location Code","Location Code");
          if FINDLAST then
            NextLineNo := "Line No.";

          SourceCodeSetup.GET;
        end;

        GetLocation(BinContent."Location Code");

        WhseEntry.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code",
          "Unit of Measure Code","Lot No.","Serial No.","Entry Type");
        WhseEntry.SETRANGE("Item No.",BinContent."Item No.");
        WhseEntry.SETRANGE("Bin Code",BinContent."Bin Code");
        WhseEntry.SETRANGE("Location Code",BinContent."Location Code");
        WhseEntry.SETRANGE("Variant Code",BinContent."Variant Code");
        WhseEntry.SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        if WhseEntry.FIND('-') then;
        repeat
          WhseEntry.SETRANGE("Lot No.",WhseEntry."Lot No.");
          WhseEntry.SETRANGE("Serial No.",WhseEntry."Serial No.");
          WhseEntry.CALCSUMS("Qty. (Base)");
          if (WhseEntry."Qty. (Base)" <> 0) or ZeroQty then begin
            ItemUOM.GET(BinContent."Item No.",BinContent."Unit of Measure Code");
            NextLineNo := NextLineNo + 10000;
            INIT;
            "Line No." := NextLineNo;
            VALIDATE("Registering Date",RegisteringDate);
            VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
            VALIDATE("Whse. Document No.",NextDocNo);
            VALIDATE("Item No.",BinContent."Item No.");
            VALIDATE("Variant Code",BinContent."Variant Code");
            VALIDATE("Location Code",BinContent."Location Code");
            "From Bin Code" := Location."Adjustment Bin Code";
            "From Zone Code" := Bin."Zone Code";
            "From Bin Type Code" := Bin."Bin Type Code";
            VALIDATE("To Zone Code",BinContent."Zone Code");
            VALIDATE("To Bin Code",BinContent."Bin Code");
            VALIDATE("Zone Code",BinContent."Zone Code");
            SetProposal(StockProposal);
            VALIDATE("Bin Code",BinContent."Bin Code");
            VALIDATE("Source Code",SourceCodeSetup."Whse. Phys. Invt. Journal");
            VALIDATE("Unit of Measure Code",BinContent."Unit of Measure Code");
            "Serial No." := WhseEntry."Serial No.";
            "Lot No." := WhseEntry."Lot No.";
            "Warranty Date" := WhseEntry."Warranty Date";
            ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",false,EntriesExist);
            if EntriesExist then
              "Expiration Date" := ExpDate
            else
              "Expiration Date" := WhseEntry."Expiration Date";
            "Phys. Inventory" := true;

            "Qty. (Calculated)" := ROUND(WhseEntry."Qty. (Base)" / ItemUOM."Qty. per Unit of Measure",0.00001);
            "Qty. (Calculated) (Base)" := WhseEntry."Qty. (Base)";

            VALIDATE("Qty. (Phys. Inventory)","Qty. (Calculated)");
            VALIDATE("Qty. (Phys. Inventory) (Base)",WhseEntry."Qty. (Base)");

            if Location."Use ADCS" then
              VALIDATE("Qty. (Phys. Inventory)",0);
            "Registering No. Series" := WhseJnlBatch."Registering No. Series";
            "Whse. Document Type" :=
              "Whse. Document Type"::"Whse. Phys. Inventory";
            "Phys Invt Counting Period Code" := PhysInvtCountCode;
            "Phys Invt Counting Period Type" := CycleSourceType;
            INSERT(true);
          end;
          if WhseEntry.FIND('+') then;
          WhseEntry.SETRANGE("Lot No.");
          WhseEntry.SETRANGE("Serial No.");
        until WhseEntry.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE InitializeRequest@2(NewRegisteringDate@1000 : Date;WhseDocNo@1001 : Code[20];ItemsNotOnInvt@1002 : Boolean);
    BEGIN
      RegisteringDate := NewRegisteringDate;
      NextDocNo := WhseDocNo;
      ZeroQty := ItemsNotOnInvt;
    END;

    [External]
    PROCEDURE InitializePhysInvtCount@7381(PhysInvtCountCode2@1000 : Code[10];CycleSourceType2@1001 : '" ",Item,SKU');
    BEGIN
      PhysInvtCountCode := PhysInvtCountCode2;
      CycleSourceType := CycleSourceType2;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE SkipCycleSKU@7382(LocationCode@1000 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]) : Boolean;
    VAR
      SKU@1001 : Record "Stockkeeping Unit";
    BEGIN
      if CycleSourceType = CycleSourceType::Item then
        if SKU.READPERMISSION then
          if SKU.GET(LocationCode,ItemNo,VariantCode) then
            exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE GetLocation@3(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then begin
        Location.GET(LocationCode);
        Location.TESTFIELD("Adjustment Bin Code");
        Bin.GET(Location.Code,Location."Adjustment Bin Code");
        Bin.TESTFIELD("Zone Code");
      end;
    END;

    [External]
    PROCEDURE SetProposalMode@5(NewValue@1000 : Boolean);
    BEGIN
      StockProposal := NewValue;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

