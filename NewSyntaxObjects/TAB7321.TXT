OBJECT Table 7321 Warehouse Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
               OrderStatus@1000 : Option;
             BEGIN
               TestReleased;

               if "Assemble to Order" then
                 VALIDATE("Qty. to Ship",0);

               if "Qty. Shipped" < "Qty. Picked" then
                 if not CONFIRM(
                      STRSUBSTNO(
                        Text007,
                        FIELDCAPTION("Qty. Picked"),"Qty. Picked",FIELDCAPTION("Qty. Shipped"),
                        "Qty. Shipped",TABLECAPTION),false)
                 then
                   ERROR('');

               ItemTrackingMgt.SetDeleteReservationEntries(true);
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",true);

               OrderStatus :=
                 WhseShptHeader.GetDocumentStatus("Line No.");
               if OrderStatus <> WhseShptHeader."Document Status" then begin
                 WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseShptHeader.MODIFY;
               end;
             END;

    OnRename=BEGIN
               ERROR(Text008,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Shipment Line;
    LookupPageID="Whse. Shipment Lines";
    DrillDownPageID="Whse. Shipment Lines";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=false }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No.;
                                                   Editable=false }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No.;
                                                   Editable=false }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer,,,,,,,,Service Order;
                                                   OptionString=,"Sales Order",,,"Sales Return Order","Purchase Order",,,"Purchase Return Order",,"Outbound Transfer",,,,,,,,"Service Order";
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record Bin;
                                                                WhseIntegrationMgt@1001 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                TestReleased;
                                                                if xRec."Bin Code" <> "Bin Code" then
                                                                  if "Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Shipment Line",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                      CheckBin(0,0);
                                                                    end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                if xRec."Zone Code" <> "Zone Code" then begin
                                                                  if "Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "Bin Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No.;
                                                   Editable=false }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                OrderStatus@1000 : Integer;
                                                              BEGIN
                                                                if Quantity <= 0 then
                                                                  FIELDERROR(Quantity,Text003);
                                                                TestReleased;
                                                                CheckSourceDocLineQty;

                                                                if Quantity < "Qty. Picked" then
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Picked"));
                                                                if Quantity < "Qty. Shipped" then
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Shipped"));

                                                                InitOutstandingQtys;
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                "Completely Picked" := (Quantity = "Qty. Picked") or ("Qty. (Base)" = "Qty. Picked (Base)");

                                                                GetLocation("Location Code");
                                                                if Location."Directed Put-away and Pick" then
                                                                  CheckBin(xRec.Cubage,xRec.Weight);

                                                                Status := CalcStatusShptLine;
                                                                if Status <> xRec.Status then begin
                                                                  GetWhseShptHeader("No.");
                                                                  OrderStatus := WhseShptHeader.GetDocumentStatus(0);
                                                                  if OrderStatus <> WhseShptHeader."Document Status" then begin
                                                                    WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                                                                    WhseShptHeader.MODIFY;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit "WMS Management";
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                if Location."Require Pick" then begin
                                                                  if "Assemble to Order" then
                                                                    VALIDATE("Qty. to Ship",0)
                                                                  else
                                                                    VALIDATE("Qty. to Ship","Qty. Picked" - (Quantity - "Qty. Outstanding"));
                                                                end else
                                                                  VALIDATE("Qty. to Ship","Qty. Outstanding");

                                                                if Location."Directed Put-away and Pick" then
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. Outstanding",Cubage,Weight);
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 21  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ATOLink@1001 : Record "Assemble-to-Order Link";
                                                                Confirmed@1000 : Boolean;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                if ("Qty. to Ship" > "Qty. Picked" - "Qty. Shipped") and
                                                                   Location."Require Pick" and
                                                                   not "Assemble to Order"
                                                                then
                                                                  FIELDERROR("Qty. to Ship",
                                                                    STRSUBSTNO(Text002,"Qty. Picked" - "Qty. Shipped"));

                                                                if "Qty. to Ship" > "Qty. Outstanding" then
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. Outstanding");

                                                                Confirmed := true;
                                                                if (CurrFieldNo = FIELDNO("Qty. to Ship")) and
                                                                   ("Shipping Advice" = "Shipping Advice"::Complete) and
                                                                   ("Qty. to Ship" <> "Qty. Outstanding") and
                                                                   ("Qty. to Ship" > 0)
                                                                then
                                                                  Confirmed :=
                                                                    CONFIRM(
                                                                      Text009 +
                                                                      Text010,
                                                                      false,
                                                                      FIELDCAPTION("Shipping Advice"),
                                                                      "Shipping Advice",
                                                                      FIELDCAPTION("Qty. to Ship"),
                                                                      "Qty. Outstanding");

                                                                if not Confirmed then
                                                                  ERROR('');

                                                                if CurrFieldNo <> FIELDNO("Qty. to Ship (Base)") then
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

                                                                if "Assemble to Order" then
                                                                  ATOLink.UpdateQtyToAsmFromWhseShptLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Qty. to Ship;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. to Ship",CalcQty("Qty. to Ship (Base)"));
                                                              END;

                                                   CaptionML=ENU=Qty. to Ship (Base);
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Picked         ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=ENU=Qty. Picked;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=ENU=Qty. Picked (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 25  ;   ;Qty. Shipped        ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Shipped (Base)" := CalcBaseQty("Qty. Shipped");
                                                              END;

                                                   CaptionML=ENU=Qty. Shipped;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 26  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=ENU=Qty. Shipped (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Activity Type"=CONST(Pick),
                                                                                                                       "Whse. Document Type"=CONST(Shipment),
                                                                                                                       "Whse. Document No."=FIELD("No."),
                                                                                                                       "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=FILTER(" "|Place),
                                                                                                                       "Original Breakbulk"=CONST(false),
                                                                                                                       "Breakbulk No."=CONST(0),
                                                                                                                       "Assemble to Order"=CONST(false)));
                                                   CaptionML=ENU=Pick Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 28  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=CONST(Pick),
                                                                                                                              "Whse. Document Type"=CONST(Shipment),
                                                                                                                              "Whse. Document No."=FIELD("No."),
                                                                                                                              "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                              "Action Type"=FILTER(" "|Place),
                                                                                                                              "Original Breakbulk"=CONST(false),
                                                                                                                              "Breakbulk No."=CONST(0),
                                                                                                                              "Assemble to Order"=CONST(false)));
                                                   CaptionML=ENU=Pick Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Unit of Measure Code;
                                                   Editable=false }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code;
                                                   Editable=false }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=false }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2;
                                                   Editable=false }
    { 34  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped";
                                                   OptionString=" ","Partially Picked","Partially Shipped","Completely Picked","Completely Shipped";
                                                   Editable=false }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=ENU=Destination Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Location";
                                                   OptionString=" ",Customer,Vendor,Location;
                                                   Editable=false }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF ("Destination Type"=CONST(Customer)) Customer."No."
                                                                 ELSE IF ("Destination Type"=CONST(Vendor)) Vendor."No."
                                                                 ELSE IF ("Destination Type"=CONST(Location)) Location.Code;
                                                   CaptionML=ENU=Destination No.;
                                                   Editable=false }
    { 41  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Shipping Advice     ;Option        ;CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete;
                                                   Editable=false }
    { 45  ;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 46  ;   ;Completely Picked   ;Boolean       ;CaptionML=ENU=Completely Picked;
                                                   Editable=false }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=ENU=Not upd. by Src. Doc. Post.;
                                                   Editable=false }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=ENU=Posting from Whse. Ref.;
                                                   Editable=false }
    { 900 ;   ;Assemble to Order   ;Boolean       ;AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=Assemble to Order;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"No.","Line No."                        ;Clustered=true }
    {    ;"No.","Sorting Sequence No."            ;MaintainSQLIndex=false }
    {    ;"No.","Item No."                        ;MaintainSQLIndex=false }
    {    ;"No.","Source Document","Source No."    ;MaintainSQLIndex=false }
    {    ;"No.","Shelf No."                       ;MaintainSQLIndex=false }
    {    ;"No.","Bin Code"                        ;MaintainSQLIndex=false }
    {    ;"No.","Due Date"                        ;MaintainSQLIndex=false }
    {    ;"No.","Destination Type","Destination No.";
                                                   MaintainSQLIndex=false }
    {    ;"Source Type","Source Subtype","Source No.","Source Line No.","Assemble to Order";
                                                   SumIndexFields="Qty. Outstanding","Qty. Outstanding (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"No.","Source Type","Source Subtype","Source No.","Source Line No.";
                                                   MaintainSQLIndex=false }
    {    ;"Item No.","Location Code","Variant Code","Due Date";
                                                   SumIndexFields="Qty. Outstanding (Base)","Qty. Picked (Base)","Qty. Shipped (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Bin Code","Location Code"              ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.';
      Location@1001 : Record Location;
      Item@1016 : Record Item;
      WhseShptHeader@1002 : Record "Warehouse Shipment Header";
      Text001@1003 : TextConst 'ENU=must not be less than %1 units';
      Text002@1004 : TextConst 'ENU=must not be greater than %1 units';
      Text003@1005 : TextConst 'ENU=must be greater than zero';
      Text005@1007 : TextConst 'ENU=The picked quantity is not enough to ship all lines.';
      HideValidationDialog@1008 : Boolean;
      Text007@1010 : TextConst '@@@="Qty. Picked = 2 is greater than Qty. Shipped = 0. If you delete the Warehouse Shipment Line, the items will remain in the shipping area until you put them away.\Related Item Tracking information defined during pick will be deleted.\Do you still want to delete the Warehouse Shipment Line?";ENU="%1 = %2 is greater than %3 = %4. If you delete the %5, the items will remain in the shipping area until you put them away.\Related Item Tracking information defined during pick will be deleted.\Do you still want to delete the %5?"';
      Text008@1011 : TextConst 'ENU=You cannot rename a %1.';
      Text009@1013 : TextConst 'ENU=%1 is set to %2. %3 should be %4.\\';
      Text010@1012 : TextConst 'ENU=Accept the entered value?';
      Text011@1014 : TextConst 'ENU=Nothing to handle.';
      IgnoreErrors@1006 : Boolean;
      ErrorOccured@1017 : Boolean;

    PROCEDURE InitNewLine@19(DocNo@1000 : Code[20]);
    BEGIN
      RESET;
      "No." := DocNo;
      SETRANGE("No.","No.");
      LOCKTABLE;
      if FINDLAST then;

      INIT;
      SetIgnoreErrors;
      "Line No." := "Line No." + 10000;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE TestReleased@37();
    BEGIN
      TESTFIELD("No.");
      GetWhseShptHeader("No.");
      WhseShptHeader.TESTFIELD(Status,WhseShptHeader.Status::Open);
    END;

    [External]
    PROCEDURE CheckBin@9(DeductCubage@1000 : Decimal;DeductWeight@1001 : Decimal);
    VAR
      Bin@1005 : Record Bin;
      BinContent@1004 : Record "Bin Content";
    BEGIN
      if "Bin Code" <> '' then begin
        GetLocation("Location Code");
        if not Location."Directed Put-away and Pick" then
          exit;

        if BinContent.GET(
             "Location Code","Bin Code",
             "Item No.","Variant Code","Unit of Measure Code")
        then begin
          if not BinContent.CheckIncreaseBinContent(
               "Qty. Outstanding","Qty. Outstanding",
               DeductCubage,DeductWeight,Cubage,Weight,false,IgnoreErrors)
          then
            ErrorOccured := true;
        end else begin
          Bin.GET("Location Code","Bin Code");
          if not Bin.CheckIncreaseBin(
               "Bin Code","Item No.","Qty. Outstanding",
               DeductCubage,DeductWeight,Cubage,Weight,false,IgnoreErrors)
          then
            ErrorOccured := true;
        end;
      end;
      if ErrorOccured then
        "Bin Code" := '';
    END;

    [External]
    PROCEDURE CheckSourceDocLineQty@3();
    VAR
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
      SalesLine@1002 : Record "Sales Line";
      PurchaseLine@1003 : Record "Purchase Line";
      TransferLine@1004 : Record "Transfer Line";
      ServiceLine@1007 : Record "Service Line";
      WhseQtyOutstandingBase@1006 : Decimal;
      QtyOutstandingBase@1000 : Decimal;
      QuantityBase@1001 : Decimal;
    BEGIN
      if "Qty. (Base)" = 0 then
        QuantityBase := CalcBaseQty(Quantity)
      else
        QuantityBase := "Qty. (Base)";

      WhseShptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",true);
      WhseShptLine.CALCSUMS("Qty. Outstanding (Base)");
      if WhseShptLine.FIND('-') then
        repeat
          if (WhseShptLine."No." <> "No.") or
             (WhseShptLine."Line No." <> "Line No.")
          then
            WhseQtyOutstandingBase := WhseQtyOutstandingBase + WhseShptLine."Qty. Outstanding (Base)";
        until WhseShptLine.NEXT = 0;

      case "Source Type" of
        DATABASE::"Sales Line":
          begin
            SalesLine.GET("Source Subtype","Source No.","Source Line No.");
            if ABS(SalesLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase then
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(SalesLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(SalesLine."Outstanding Qty. (Base)");
          end;
        DATABASE::"Purchase Line":
          begin
            PurchaseLine.GET("Source Subtype","Source No.","Source Line No.");
            if ABS(PurchaseLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase then
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(ABS(PurchaseLine."Outstanding Qty. (Base)") - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(PurchaseLine."Outstanding Qty. (Base)");
          end;
        DATABASE::"Transfer Line":
          begin
            TransferLine.GET("Source No.","Source Line No.");
            if TransferLine."Outstanding Qty. (Base)" < WhseQtyOutstandingBase + QuantityBase then
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(TransferLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := TransferLine."Outstanding Qty. (Base)";
          end;
        DATABASE::"Service Line":
          begin
            ServiceLine.GET("Source Subtype","Source No.","Source Line No.");
            if ABS(ServiceLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase then
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(ServiceLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(ServiceLine."Outstanding Qty. (Base)");
          end;
      end;
      if QuantityBase > QtyOutstandingBase then
        FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Qty. Outstanding")));
    END;

    [External]
    PROCEDURE CalcStatusShptLine@4() : Integer;
    BEGIN
      if (Quantity = "Qty. Shipped") or ("Qty. (Base)" = "Qty. Shipped (Base)") then
        exit(Status::"Completely Shipped");
      if "Qty. Shipped" > 0 then
        exit(Status::"Partially Shipped");
      if (Quantity = "Qty. Picked") or ("Qty. (Base)" = "Qty. Picked (Base)") then
        exit(Status::"Completely Picked");
      if "Qty. Picked" > 0 then
        exit(Status::"Partially Picked");
      exit(Status::" ");
    END;

    [External]
    PROCEDURE AutofillQtyToHandle@10(VAR WhseShptLine@1000 : Record "Warehouse Shipment Line");
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      with WhseShptLine do begin
        NotEnough := false;
        SetHideValidationDialog(true);
        if FIND('-') then
          repeat
            GetLocation("Location Code");
            if Location."Require Pick" then
              VALIDATE("Qty. to Ship (Base)","Qty. Picked (Base)" - "Qty. Shipped (Base)")
            else
              VALIDATE("Qty. to Ship (Base)","Qty. Outstanding (Base)");
            MODIFY;
            if not NotEnough then
              if ("Qty. to Ship (Base)" < "Qty. Outstanding (Base)") and
                 ("Shipping Advice" = "Shipping Advice"::Complete)
              then
                NotEnough := true;
          until NEXT = 0;
        SetHideValidationDialog(false);
        if NotEnough then
          MESSAGE(Text005);
      end;
    END;

    [External]
    PROCEDURE DeleteQtyToHandle@11(VAR WhseShptLine@1000 : Record "Warehouse Shipment Line");
    BEGIN
      with WhseShptLine do begin
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Ship",0);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetWhseShptHeader@6(WhseShptNo@1000 : Code[20]);
    BEGIN
      if WhseShptHeader."No." <> WhseShptNo then
        WhseShptHeader.GET(WhseShptNo);
    END;

    [External]
    PROCEDURE CreatePickDoc@7(VAR WhseShptLine@1000 : Record "Warehouse Shipment Line";WhseShptHeader2@1001 : Record "Warehouse Shipment Header");
    VAR
      CreatePickFromWhseShpt@1002 : Report "Whse.-Shipment - Create Pick";
    BEGIN
      WhseShptHeader2.TESTFIELD(Status,WhseShptHeader.Status::Released);
      WhseShptLine.SETFILTER(Quantity,'>0');
      WhseShptLine.SETRANGE("Completely Picked",false);
      if WhseShptLine.FIND('-') then begin
        CreatePickFromWhseShpt.SetWhseShipmentLine(WhseShptLine,WhseShptHeader2);
        CreatePickFromWhseShpt.SetHideValidationDialog(HideValidationDialog);
        CreatePickFromWhseShpt.USEREQUESTPAGE(not HideValidationDialog);
        CreatePickFromWhseShpt.RUNMODAL;
        CreatePickFromWhseShpt.GetResultMessage;
        CLEAR(CreatePickFromWhseShpt);
      end else
        if not HideValidationDialog then
          MESSAGE(Text011);
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
      SalesLine@1001 : Record "Sales Line";
      ServiceLine@1009 : Record "Service Line";
      TransferLine@1002 : Record "Transfer Line";
      ReservePurchLine@1003 : Codeunit "Purch. Line-Reserve";
      ReserveSalesLine@1004 : Codeunit "Sales Line-Reserve";
      ReserveTransferLine@1005 : Codeunit "Transfer Line-Reserve";
      ServiceLineReserve@1008 : Codeunit "Service Line-Reserve";
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Shipment Line";
      SecondSourceQtyArray[2] := "Qty. to Ship (Base)";
      SecondSourceQtyArray[3] := 0;

      case "Source Type" of
        DATABASE::"Sales Line":
          begin
            if SalesLine.GET("Source Subtype","Source No.","Source Line No.") then
              ReserveSalesLine.CallItemTrackingSecondSource(SalesLine,SecondSourceQtyArray,"Assemble to Order");
          end;
        DATABASE::"Service Line":
          begin
            if ServiceLine.GET("Source Subtype","Source No.","Source Line No.") then
              ServiceLineReserve.CallItemTracking(ServiceLine);
          end;
        DATABASE::"Purchase Line":
          begin
            if PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") then
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          end;
        DATABASE::"Transfer Line":
          begin
            Direction := Direction::Outbound;
            if TransferLine.GET("Source No.","Source Line No.") then
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          end
      end;
    END;

    [External]
    PROCEDURE SetIgnoreErrors@12();
    BEGIN
      IgnoreErrors := true;
    END;

    [External]
    PROCEDURE HasErrorOccured@13() : Boolean;
    BEGIN
      exit(ErrorOccured);
    END;

    [External]
    PROCEDURE GetATOAndNonATOLines@16(VAR ATOWhseShptLine@1001 : Record "Warehouse Shipment Line";VAR NonATOWhseShptLine@1002 : Record "Warehouse Shipment Line";VAR ATOLineFound@1004 : Boolean;VAR NonATOLineFound@1003 : Boolean);
    VAR
      WhseShptLine@1000 : Record "Warehouse Shipment Line";
    BEGIN
      WhseShptLine.COPY(Rec);
      WhseShptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",false);

      NonATOWhseShptLine.COPY(WhseShptLine);
      NonATOWhseShptLine.SETRANGE("Assemble to Order",false);
      NonATOLineFound := NonATOWhseShptLine.FINDFIRST;

      ATOWhseShptLine.COPY(WhseShptLine);
      ATOWhseShptLine.SETRANGE("Assemble to Order",true);
      ATOLineFound := ATOWhseShptLine.FINDFIRST;
    END;

    [External]
    PROCEDURE FullATOPosted@21() : Boolean;
    VAR
      SalesLine@1001 : Record "Sales Line";
      ATOWhseShptLine@1002 : Record "Warehouse Shipment Line";
    BEGIN
      if "Source Document" <> "Source Document"::"Sales Order" then
        exit(true);
      SalesLine.SETRANGE("Document Type","Source Subtype");
      SalesLine.SETRANGE("Document No.","Source No.");
      SalesLine.SETRANGE("Line No.","Source Line No.");
      if not SalesLine.FINDFIRST then
        exit(true);
      if SalesLine."Qty. Shipped (Base)" >= SalesLine."Qty. to Asm. to Order (Base)" then
        exit(true);
      ATOWhseShptLine.SETRANGE("No.","No.");
      ATOWhseShptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",false);
      ATOWhseShptLine.SETRANGE("Assemble to Order",true);
      ATOWhseShptLine.CALCSUMS("Qty. to Ship (Base)");
      exit((SalesLine."Qty. Shipped (Base)" + ATOWhseShptLine."Qty. to Ship (Base)") >= SalesLine."Qty. to Asm. to Order (Base)");
    END;

    [External]
    PROCEDURE InitOutstandingQtys@2();
    BEGIN
      VALIDATE("Qty. Outstanding",Quantity - "Qty. Shipped");
      "Qty. Outstanding (Base)" := "Qty. (Base)" - "Qty. Shipped (Base)";
    END;

    [External]
    PROCEDURE GetWhseShptLine@17(ShipmentNo@1004 : Code[20];SourceType@1001 : Integer;SourceSubtype@1002 : Option;SourceNo@1003 : Code[20];SourceLineNo@1005 : Integer) : Boolean;
    BEGIN
      SETRANGE("No.",ShipmentNo);
      SetSourceFilter(SourceType,SourceSubtype,SourceNo,SourceLineNo,false);
      if FINDFIRST then
        exit(true);
    END;

    [External]
    PROCEDURE CreateWhseItemTrackingLines@22();
    VAR
      WhseWkshLine@1007 : Record "Whse. Worksheet Line";
      ATOSalesLine@1006 : Record "Sales Line";
      AsmHeader@1005 : Record "Assembly Header";
      AsmLineMgt@1004 : Codeunit "Assembly Line Management";
      ItemTrackingMgt@1003 : Codeunit "Item Tracking Management";
      WhseSNRequired@1002 : Boolean;
      WhseLNRequired@1001 : Boolean;
    BEGIN
      if "Assemble to Order" then begin
        TESTFIELD("Source Type",DATABASE::"Sales Line");
        ATOSalesLine.GET("Source Subtype","Source No.","Source Line No.");
        ATOSalesLine.AsmToOrderExists(AsmHeader);
        AsmLineMgt.CreateWhseItemTrkgForAsmLines(AsmHeader);
      end else begin
        ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,false);
        if WhseSNRequired or WhseLNRequired then
          ItemTrackingMgt.InitItemTrkgForTempWkshLine(
            WhseWkshLine."Whse. Document Type"::Shipment,"No.",
            "Line No.","Source Type",
            "Source Subtype","Source No.",
            "Source Line No.",0);
      end;
    END;

    PROCEDURE SetItemData@29(ItemNo@1000 : Code[20];ItemDescription@1001 : Text[50];ItemDescription2@1006 : Text[50];LocationCode@1002 : Code[10];VariantCode@1003 : Code[10];UoMCode@1005 : Code[10];QtyPerUoM@1004 : Decimal);
    BEGIN
      "Item No." := ItemNo;
      Description := ItemDescription;
      "Description 2" := ItemDescription2;
      "Location Code" := LocationCode;
      "Variant Code" := VariantCode;
      "Unit of Measure Code" := UoMCode;
      "Qty. per Unit of Measure" := QtyPerUoM;
    END;

    [External]
    PROCEDURE SetSource@18(SourceType@1003 : Integer;SourceSubType@1002 : Option;SourceNo@1001 : Code[20];SourceLineNo@1000 : Integer);
    VAR
      WhseMgt@1004 : Codeunit "Whse. Management";
    BEGIN
      "Source Type" := SourceType;
      "Source Subtype" := SourceSubType;
      "Source No." := SourceNo;
      "Source Line No." := SourceLineNo;
      "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
    END;

    [External]
    PROCEDURE SetSourceFilter@42(SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SetKey@1005 : Boolean);
    BEGIN
      if SetKey then
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubType >= 0 then
        SETRANGE("Source Subtype",SourceSubType);
      SETRANGE("Source No.",SourceNo);
      if SourceLineNo >= 0 then
        SETRANGE("Source Line No.",SourceLineNo);
    END;

    [External]
    PROCEDURE ClearSourceFilter@46();
    BEGIN
      SETRANGE("Source Type");
      SETRANGE("Source Subtype");
      SETRANGE("Source No.");
      SETRANGE("Source Line No.");
    END;

    BEGIN
    END.
  }
}

