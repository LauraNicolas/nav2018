OBJECT Table 5965 Service Contract Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Contract No.",Description;
    OnInsert=BEGIN
               ServMgtSetup.GET;
               if "Contract No." = '' then begin
                 ServMgtSetup.TESTFIELD("Service Contract Nos.");
                 NoSeriesMgt.InitSeries(ServMgtSetup."Service Contract Nos.",xRec."No. Series",0D,
                   "Contract No.","No. Series");
               end;
               "Starting Date" := WORKDATE;
               "First Service Date" := WORKDATE;
               ServContractTmplt.RESET;
               if ServContractTmplt.FINDFIRST then
                 if CONFIRM(Text000,true) then begin
                   COMMIT;
                   CLEAR(ServContrQuoteTmplUpd);
                   ServContrQuoteTmplUpd.RUN(Rec);
                 end;
               VALIDATE("Starting Date");
             END;

    OnModify=BEGIN
               CheckChangeStatus;
               if ("Contract Type" = "Contract Type"::Contract) and ("Contract No." <> '') then begin
                 ServMgtSetup.GET;
                 if ServMgtSetup."Register Contract Changes" then
                   UpdContractChangeLog(xRec);

                 if (Status <> xRec.Status) and
                    (Status = Status::Canceled)
                 then
                   ContractGainLossEntry.AddEntry(3,"Contract Type","Contract No.",-"Annual Amount","Cancel Reason Code");
               end;

               if (Status = Status::Signed) and
                  ("Annual Amount" <> xRec."Annual Amount")
               then
                 ContractGainLossEntry.AddEntry(4,"Contract Type",
                   "Contract No.","Annual Amount" - xRec."Annual Amount",'');
             END;

    OnDelete=VAR
               ServLedgEntry@1000 : Record "Service Ledger Entry";
             BEGIN
               if not UserMgt.CheckRespCenter(2,"Responsibility Center") then
                 ERROR(
                   Text002,
                   RespCenter.TABLECAPTION,UserMgt.GetSalesFilter);

               if "Contract Type" = "Contract Type"::Contract then begin
                 MoveEntries.MoveServContractLedgerEntries(Rec);

                 if Status = Status::Signed then
                   ERROR(Text003,FORMAT(Status),TABLECAPTION);

                 ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
                 ServLedgEntry.SETRANGE("No.","Contract No.");
                 ServLedgEntry.SETRANGE(Prepaid,false);
                 ServLedgEntry.SETRANGE(Open,true);
                 if not ServLedgEntry.ISEMPTY then
                   if not CONFIRM(
                        Text052,
                        false,
                        ServLedgEntry.FIELDCAPTION(Open))
                   then
                     ERROR(Text053);
               end;
               ServContractLine.RESET;
               ServContractLine.SETRANGE("Contract Type","Contract Type");
               ServContractLine.SETRANGE("Contract No.","Contract No.");
               ServContractLine.DELETEALL;

               ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Contract");
               ServCommentLine.SETRANGE("Table Subtype","Contract Type");
               ServCommentLine.SETRANGE("No.","Contract No.");
               ServCommentLine.DELETEALL;

               ServHour.RESET;
               case "Contract Type" of
                 "Contract Type"::Quote:
                   ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Quote);
                 "Contract Type"::Contract:
                   ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Contract);
               end;
               ServHour.SETRANGE("Service Contract No.","Contract No.");
               ServHour.DELETEALL;

               FiledServContract.RESET;
               FiledServContract.SETCURRENTKEY("Contract Type Relation","Contract No. Relation");
               FiledServContract.SETRANGE("Contract Type Relation","Contract Type");
               FiledServContract.SETRANGE("Contract No. Relation","Contract No.");
               FiledServContract.DELETEALL(true);
             END;

    OnRename=BEGIN
               ERROR(Text063,TABLECAPTION);
             END;

    CaptionML=ENU=Service Contract Header;
    LookupPageID="Service Contract List";
    DrillDownPageID="Service Contract List";
  }
  FIELDS
  {
    { 1   ;   ;Contract No.        ;Code20        ;OnValidate=BEGIN
                                                                if "Contract No." <> xRec."Contract No." then begin
                                                                  ServMgtSetup.GET;
                                                                  NoSeriesMgt.TestManual(ServMgtSetup."Service Contract Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Contract No. }
    { 2   ;   ;Contract Type       ;Option        ;CaptionML=ENU=Contract Type;
                                                   OptionCaptionML=ENU=Quote,Contract;
                                                   OptionString=Quote,Contract }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 5   ;   ;Status              ;Option        ;OnValidate=VAR
                                                                ServLedgEntry@1001 : Record "Service Ledger Entry";
                                                                AnyServItemInOtherContract@1000 : Boolean;
                                                              BEGIN
                                                                if Status <> xRec.Status then begin
                                                                  if not SuspendChangeStatus then
                                                                    TESTFIELD("Change Status","Change Status"::Open);
                                                                  case "Contract Type" of
                                                                    "Contract Type"::Contract:
                                                                      begin
                                                                        if Status <> Status::Canceled then
                                                                          ERROR(Text006,FIELDCAPTION(Status));

                                                                        CALCFIELDS("No. of Unposted Invoices","No. of Unposted Credit Memos");
                                                                        case true of
                                                                          ("No. of Unposted Invoices" <> 0) and ("No. of Unposted Credit Memos" = 0):
                                                                            if not CONFIRM(Text048) then begin
                                                                              Status := xRec.Status;
                                                                              exit;
                                                                            end;
                                                                          ("No. of Unposted Invoices" = 0) and ("No. of Unposted Credit Memos" <> 0):
                                                                            if not CONFIRM(Text049) then begin
                                                                              Status := xRec.Status;
                                                                              exit;
                                                                            end;
                                                                          ("No. of Unposted Invoices" <> 0) and ("No. of Unposted Credit Memos" <> 0):
                                                                            if not CONFIRM(Text055) then begin
                                                                              Status := xRec.Status;
                                                                              exit;
                                                                            end;
                                                                        end;

                                                                        ServMgtSetup.GET;
                                                                        if ServMgtSetup."Use Contract Cancel Reason" then
                                                                          TESTFIELD("Cancel Reason Code");

                                                                        ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
                                                                        ServLedgEntry.SETRANGE("No.","Contract No.");
                                                                        ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",false);
                                                                        ServLedgEntry.SETRANGE(Open,false);
                                                                        ServLedgEntry.CALCSUMS("Amount (LCY)");
                                                                        if ServLedgEntry."Amount (LCY)" <> 0 then
                                                                          StrToInsert := OpenPrepaymentEntriesExistTxt;
                                                                        if not CONFIRM(CancelTheContractQst,false,StrToInsert) then begin
                                                                          Status := xRec.Status;
                                                                          exit;
                                                                        end;
                                                                        FiledServContract.FileContractBeforeCancellation(xRec);
                                                                      end;
                                                                    "Contract Type"::Quote:
                                                                      case Status of
                                                                        Status::" ":
                                                                          if xRec.Status = xRec.Status::Canceled then begin
                                                                            ServContractLine.RESET;
                                                                            ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                            ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                            if ServContractLine.FIND('-') then
                                                                              repeat
                                                                                ServContractLine2.RESET;
                                                                                ServContractLine2.SETCURRENTKEY("Service Item No.");
                                                                                ServContractLine2.SETRANGE("Service Item No.",ServContractLine."Service Item No.");
                                                                                ServContractLine2.SETRANGE("Contract Type","Contract Type"::Contract);
                                                                                if ServContractLine2.FINDFIRST then begin
                                                                                  AnyServItemInOtherContract := true;
                                                                                  ServContractLine.MARK(true);
                                                                                end;
                                                                              until ServContractLine.NEXT = 0;

                                                                            "Change Status" := "Change Status"::Open;

                                                                            if AnyServItemInOtherContract then
                                                                              if CONFIRM(Text062,true,FORMAT(xRec.Status),FIELDCAPTION(Status)) then begin
                                                                                ServContractLine.MARKEDONLY(true);
                                                                                PAGE.RUNMODAL(PAGE::"Service Contract Line List",ServContractLine);
                                                                              end;
                                                                          end;
                                                                        Status::Signed:
                                                                          ERROR(
                                                                            Text009,
                                                                            FIELDCAPTION(Status),Status,FIELDCAPTION("Contract Type"),"Contract Type");
                                                                        Status::Canceled:
                                                                          if not CONFIRM(STRSUBSTNO(
                                                                                 Text010,"Contract No."),false)
                                                                          then begin
                                                                            Status := xRec.Status;
                                                                            exit;
                                                                          end;
                                                                      end;
                                                                  end;
                                                                  if Status = Status::Canceled then
                                                                    "Change Status" := "Change Status"::Locked;
                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.MODIFYALL("Contract Status",Status);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Signed,Canceled";
                                                   OptionString=" ",Signed,Canceled;
                                                   Editable=true }
    { 6   ;   ;Change Status       ;Option        ;CaptionML=ENU=Change Status;
                                                   OptionCaptionML=ENU=Open,Locked;
                                                   OptionString=Open,Locked;
                                                   Editable=false }
    { 7   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                Cust.GET("Customer No.");
                                                                if "Customer No." <> xRec."Customer No." then begin
                                                                  if ContractLinesExist then
                                                                    case "Contract Type" of
                                                                      "Contract Type"::Contract:
                                                                        ERROR(Text011 + Text012,FIELDCAPTION("Customer No."));
                                                                      "Contract Type"::Quote:
                                                                        ERROR(Text011,FIELDCAPTION("Customer No."));
                                                                    end;
                                                                  VALIDATE("Ship-to Code",'');
                                                                end;

                                                                "Responsibility Center" := UserMgt.GetRespCenter(2,Cust."Responsibility Center");

                                                                if "Customer No." <> '' then begin
                                                                  if Cust."Bill-to Customer No." = '' then begin
                                                                    if "Bill-to Customer No." = "Customer No." then
                                                                      SkipBillToContact := true;
                                                                    VALIDATE("Bill-to Customer No.","Customer No.");
                                                                    SkipBillToContact := false;
                                                                  end else
                                                                    VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.");
                                                                  if not SkipContact then begin
                                                                    "Contact Name" := Cust.Contact;
                                                                    "Phone No." := Cust."Phone No.";
                                                                    "E-Mail" := Cust."E-Mail";
                                                                  end;
                                                                  "Fax No." := Cust."Fax No.";
                                                                end else begin
                                                                  "Contact Name" := '';
                                                                  "Phone No." := '';
                                                                  "Fax No." := '';
                                                                  "E-Mail" := '';
                                                                  "Service Zone Code" := '';
                                                                end;

                                                                if "Customer No." <> xRec."Customer No." then begin
                                                                  CALCFIELDS(
                                                                    Name,"Name 2",Address,"Address 2",
                                                                    "Post Code",City,County,"Country/Region Code");
                                                                  CALCFIELDS(
                                                                    "Bill-to Name","Bill-to Name 2","Bill-to Address","Bill-to Address 2",
                                                                    "Bill-to Post Code","Bill-to City","Bill-to County","Bill-to Country/Region Code");
                                                                  UpdateShiptoCode;
                                                                end;

                                                                if not SkipContact then
                                                                  UpdateCont("Customer No.");
                                                              END;

                                                   CaptionML=ENU=Customer No.;
                                                   NotBlank=true }
    { 8   ;   ;Name                ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Name;
                                                   Editable=false }
    { 9   ;   ;Address             ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Address;
                                                   Editable=false }
    { 10  ;   ;Address 2           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Address 2;
                                                   Editable=false }
    { 11  ;   ;Post Code           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Post Code;
                                                   Editable=false }
    { 12  ;   ;City                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=City;
                                                   Editable=false }
    { 13  ;   ;Contact Name        ;Text50        ;CaptionML=ENU=Contact Name }
    { 14  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 15  ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=BEGIN
                                                                CheckChangeStatus;
                                                                MODIFY;

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Service Contract Template","Template No.",
                                                                  DATABASE::"Service Order Type","Service Order Type");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 16  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                CustCheckCrLimit@1000 : Codeunit "Cust-Check Cr. Limit";
                                                              BEGIN
                                                                CheckChangeStatus;
                                                                if xRec."Bill-to Customer No." <> "Bill-to Customer No." then
                                                                  if xRec."Bill-to Customer No." <> '' then begin
                                                                    if HideValidationDialog then
                                                                      Confirmed := true
                                                                    else
                                                                      Confirmed := CONFIRM(Text014,false,FIELDCAPTION("Bill-to Customer No."));
                                                                  end else
                                                                    Confirmed := true;

                                                                if Confirmed then begin
                                                                  if "Bill-to Customer No." <> xRec."Bill-to Customer No." then
                                                                    if "Bill-to Customer No." <> '' then begin
                                                                      Cust.GET("Bill-to Customer No.");
                                                                      if Cust.Blocked = Cust.Blocked::All then
                                                                        Cust.CustBlockedErrorMessage(Cust,false)
                                                                    end;

                                                                  if "Customer No." <> '' then begin
                                                                    Cust.GET("Customer No.");
                                                                    if Cust."Bill-to Customer No." <> '' then
                                                                      if "Bill-to Customer No." = '' then
                                                                        "Bill-to Customer No." := Cust."Bill-to Customer No.";
                                                                  end;
                                                                  if "Bill-to Customer No." = '' then
                                                                    "Bill-to Customer No." := "Customer No.";
                                                                  if Cust.GET("Bill-to Customer No.") then begin
                                                                    "Currency Code" := Cust."Currency Code";
                                                                    "Payment Terms Code" := Cust."Payment Terms Code";
                                                                    "Language Code" := Cust."Language Code";
                                                                    "Salesperson Code" := Cust."Salesperson Code";
                                                                    if not SkipBillToContact then
                                                                      "Bill-to Contact" := Cust.Contact;
                                                                  end;

                                                                  if not HideValidationDialog then
                                                                    CustCheckCrLimit.ServiceContractHeaderCheck(Rec);

                                                                  CALCFIELDS(
                                                                    "Bill-to Name","Bill-to Name 2","Bill-to Address","Bill-to Address 2",
                                                                    "Bill-to Post Code","Bill-to City","Bill-to County","Bill-to Country/Region Code");

                                                                  if not SkipBillToContact then
                                                                    UpdateBillToCont("Bill-to Customer No.");
                                                                end else
                                                                  "Bill-to Customer No." := xRec."Bill-to Customer No.";

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Service Contract Template","Template No.",
                                                                  DATABASE::"Service Order Type","Service Order Type");
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 17  ;   ;Bill-to Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Name;
                                                   Editable=false }
    { 18  ;   ;Bill-to Address     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Address;
                                                   Editable=false }
    { 19  ;   ;Bill-to Address 2   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Address 2;
                                                   Editable=false }
    { 20  ;   ;Bill-to Post Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Post Code;
                                                   Editable=false }
    { 21  ;   ;Bill-to City        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to City;
                                                   Editable=false }
    { 22  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE ("Customer No."=FIELD("Customer No."));
                                                   OnValidate=BEGIN
                                                                if ("Customer No." <> xRec."Customer No.") or
                                                                   ("Ship-to Code" <> xRec."Ship-to Code")
                                                                then begin
                                                                  if ContractLinesExist then
                                                                    ERROR(Text011,FIELDCAPTION("Ship-to Code"));
                                                                  UpdateServZone;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 23  ;   ;Ship-to Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".Name WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                    Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Name;
                                                   Editable=false }
    { 24  ;   ;Ship-to Address     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".Address WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                       Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Address;
                                                   Editable=false }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Address 2" WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                           Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Address 2;
                                                   Editable=false }
    { 26  ;   ;Ship-to Post Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Post Code" WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                           Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Post Code;
                                                   Editable=false }
    { 27  ;   ;Ship-to City        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".City WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                    Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to City;
                                                   Editable=false }
    { 28  ;   ;Serv. Contract Acc. Gr. Code;Code10;TableRelation="Service Contract Account Group";
                                                   CaptionML=ENU=Serv. Contract Acc. Gr. Code }
    { 32  ;   ;Invoice Period      ;Option        ;OnValidate=BEGIN
                                                                CalcInvPeriodDuration;
                                                                if (FORMAT("Price Update Period") <> '') and
                                                                   (CALCDATE("Price Update Period","Starting Date") < CALCDATE(InvPeriodDuration,"Starting Date"))
                                                                then
                                                                  ERROR(Text065,FIELDCAPTION("Invoice Period"),FIELDCAPTION("Price Update Period"));

                                                                TESTFIELD("Change Status","Change Status"::Open);
                                                                if ("Invoice Period" = "Invoice Period"::None) and
                                                                   ("Last Invoice Date" <> 0D)
                                                                then
                                                                  ERROR(Text041,
                                                                    FIELDCAPTION("Invoice Period"),
                                                                    FORMAT("Invoice Period"),
                                                                    TABLECAPTION);

                                                                if "Invoice Period" = "Invoice Period"::None then begin
                                                                  "Amount per Period" := 0;
                                                                  "Next Invoice Date" := 0D;
                                                                  "Next Invoice Period Start" := 0D;
                                                                  "Next Invoice Period End" := 0D;
                                                                end else
                                                                  if Prepaid then begin
                                                                    if "Next Invoice Date" = 0D then begin
                                                                      if "Last Invoice Date" = 0D then begin
                                                                        TESTFIELD("Starting Date");
                                                                        if "Starting Date" = CALCDATE('<-CM>',"Starting Date") then
                                                                          VALIDATE("Next Invoice Date","Starting Date")
                                                                        else
                                                                          VALIDATE("Next Invoice Date",CALCDATE('<-CM+1M>',"Starting Date"));
                                                                      end else
                                                                        if "Last Invoice Date" = CALCDATE('<-CM>',"Last Invoice Date") then
                                                                          VALIDATE("Next Invoice Date",CALCDATE('<CM+1D>',"Last Invoice Period End"))
                                                                        else
                                                                          VALIDATE("Next Invoice Date",CALCDATE('<-CM+1M>',"Last Invoice Date"));
                                                                    end else
                                                                      VALIDATE("Next Invoice Date");
                                                                  end else
                                                                    VALIDATE("Last Invoice Date");
                                                              END;

                                                   CaptionML=ENU=Invoice Period;
                                                   OptionCaptionML=ENU=Month,Two Months,Quarter,Half Year,Year,None;
                                                   OptionString=Month,"Two Months",Quarter,"Half Year",Year,None }
    { 33  ;   ;Last Invoice Date   ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Starting Date");
                                                                if "Last Invoice Date" = 0D then
                                                                  if Prepaid then
                                                                    TempDate := CALCDATE('<-1D-CM>',"Starting Date")
                                                                  else
                                                                    TempDate := CALCDATE('<-1D+CM>',"Starting Date")
                                                                else
                                                                  TempDate := "Last Invoice Date";
                                                                case "Invoice Period" of
                                                                  "Invoice Period"::Month:
                                                                    "Next Invoice Date" := CALCDATE('<1M>',TempDate);
                                                                  "Invoice Period"::"Two Months":
                                                                    "Next Invoice Date" := CALCDATE('<2M>',TempDate);
                                                                  "Invoice Period"::Quarter:
                                                                    "Next Invoice Date" := CALCDATE('<3M>',TempDate);
                                                                  "Invoice Period"::"Half Year":
                                                                    "Next Invoice Date" := CALCDATE('<6M>',TempDate);
                                                                  "Invoice Period"::Year:
                                                                    "Next Invoice Date" := CALCDATE('<12M>',TempDate);
                                                                  "Invoice Period"::None:
                                                                    if Prepaid then
                                                                      "Next Invoice Date" := 0D;
                                                                end;
                                                                if not Prepaid and ("Next Invoice Date" <> 0D) then
                                                                  "Next Invoice Date" := CALCDATE('<CM>',"Next Invoice Date");

                                                                if ("Last Invoice Date" <> 0D) and ("Last Invoice Date" <> xRec."Last Invoice Date") then
                                                                  if Prepaid then
                                                                    VALIDATE("Last Invoice Period End","Next Invoice Period End")
                                                                  else
                                                                    VALIDATE("Last Invoice Period End","Last Invoice Date");

                                                                VALIDATE("Next Invoice Date");
                                                              END;

                                                   CaptionML=ENU=Last Invoice Date;
                                                   Editable=false }
    { 34  ;   ;Next Invoice Date   ;Date          ;OnValidate=VAR
                                                                ServLedgEntry@1000 : Record "Service Ledger Entry";
                                                              BEGIN
                                                                if "Next Invoice Date" = 0D then begin
                                                                  "Next Invoice Period Start" := 0D;
                                                                  "Next Invoice Period End" := 0D;
                                                                  exit;
                                                                end;
                                                                if "Last Invoice Date" <> 0D then
                                                                  if "Last Invoice Date" > "Next Invoice Date" then begin
                                                                    ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
                                                                    ServLedgEntry.SETRANGE("No.","Contract No.");
                                                                    if not ServLedgEntry.ISEMPTY then
                                                                      ERROR(Text023,FIELDCAPTION("Next Invoice Date"),FIELDCAPTION("Last Invoice Date"));
                                                                    "Last Invoice Date" := 0D;
                                                                  end;

                                                                if "Next Invoice Date" < "Starting Date" then
                                                                  ERROR(Text024,FIELDCAPTION("Next Invoice Date"),FIELDCAPTION("Starting Date"));

                                                                if Prepaid then begin
                                                                  if "Next Invoice Date" <> CALCDATE('<-CM>',"Next Invoice Date") then
                                                                    ERROR(Text026,FIELDCAPTION("Next Invoice Date"));
                                                                  TempDate := CalculateEndPeriodDate(true,"Next Invoice Date");
                                                                  if "Expiration Date" <> 0D then
                                                                    if "Next Invoice Date" > "Expiration Date" then
                                                                      "Next Invoice Date" := 0D
                                                                    else
                                                                      if TempDate > "Expiration Date" then
                                                                        TempDate := "Expiration Date";
                                                                  if ("Next Invoice Date" <> 0D) and (TempDate <> 0D) then begin
                                                                    "Next Invoice Period Start" := "Next Invoice Date";
                                                                    "Next Invoice Period End" := TempDate;
                                                                  end else begin
                                                                    "Next Invoice Period Start" := 0D;
                                                                    "Next Invoice Period End" := 0D;
                                                                  end;
                                                                end else begin
                                                                  if "Next Invoice Date" <> CALCDATE('<CM>',"Next Invoice Date") then
                                                                    ERROR(Text028,FIELDCAPTION("Next Invoice Date"));
                                                                  TempDate := CalculateEndPeriodDate(false,"Next Invoice Date");
                                                                  if TempDate < "Starting Date" then
                                                                    TempDate := "Starting Date";

                                                                  if "Expiration Date" <> 0D then
                                                                    if "Expiration Date" < TempDate then
                                                                      "Next Invoice Date" := 0D
                                                                    else
                                                                      if "Expiration Date" < "Next Invoice Date" then
                                                                        "Next Invoice Date" := "Expiration Date";

                                                                  if ("Next Invoice Date" <> 0D) and (TempDate <> 0D) then begin
                                                                    "Next Invoice Period Start" := TempDate;
                                                                    "Next Invoice Period End" := "Next Invoice Date";
                                                                  end else begin
                                                                    "Next Invoice Period Start" := 0D;
                                                                    "Next Invoice Period End" := 0D;
                                                                  end;
                                                                end;

                                                                ValidateNextInvoicePeriod;
                                                              END;

                                                   CaptionML=ENU=Next Invoice Date;
                                                   Editable=false }
    { 35  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckChangeStatus;

                                                                if "Last Invoice Date" <> 0D then
                                                                  ERROR(
                                                                    Text029,
                                                                    FIELDCAPTION("Starting Date"),FORMAT("Contract Type"));
                                                                if "Starting Date" = 0D then begin
                                                                  VALIDATE("Next Invoice Date",0D);
                                                                  "First Service Date" := 0D;
                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE("New Line",true);
                                                                  if ServContractLine.FIND('-') then begin
                                                                    repeat
                                                                      ServContractLine."Starting Date" := 0D;
                                                                      ServContractLine."Next Planned Service Date" := 0D;
                                                                      ServContractLine.MODIFY;
                                                                    until ServContractLine.NEXT = 0;
                                                                    MODIFY(true);
                                                                  end;
                                                                end else begin
                                                                  if "Starting Date" > "First Service Date" then
                                                                    "First Service Date" := "Starting Date";
                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE("New Line",true);
                                                                  if ServContractLine.FIND('-') then begin
                                                                    repeat
                                                                      ServContractLine.SuspendStatusCheck(true);
                                                                      ServContractLine."Starting Date" := "Starting Date";
                                                                      ServContractLine."Next Planned Service Date" := "First Service Date";
                                                                      ServContractLine.MODIFY;
                                                                    until ServContractLine.NEXT = 0;
                                                                    MODIFY(true);
                                                                  end;
                                                                  if "Next Price Update Date" = 0D then
                                                                    "Next Price Update Date" := CALCDATE("Price Update Period","Starting Date");
                                                                  if "Invoice Period" <> "Invoice Period"::None then
                                                                    if Prepaid then begin
                                                                      if "Starting Date" = CALCDATE('<-CM>',"Starting Date") then
                                                                        VALIDATE("Next Invoice Date","Starting Date")
                                                                      else
                                                                        VALIDATE("Next Invoice Date",CALCDATE('<-CM+1M>',"Starting Date"))
                                                                    end else
                                                                      VALIDATE("Last Invoice Date");
                                                                  VALIDATE("Service Period");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 36  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                CheckChangeStatus;

                                                                if "Expiration Date" <> xRec."Expiration Date" then begin
                                                                  if "Expiration Date" <> 0D then begin
                                                                    if "Expiration Date" < "Starting Date" then
                                                                      ERROR(Text023,FIELDCAPTION("Expiration Date"),FIELDCAPTION("Starting Date"));
                                                                    if "Last Invoice Date" <> 0D then
                                                                      if "Expiration Date" < "Last Invoice Date" then
                                                                        ERROR(
                                                                          Text023,FIELDCAPTION("Expiration Date"),FIELDCAPTION("Last Invoice Date"));
                                                                  end;

                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE(Credited,false);

                                                                  if ("Expiration Date" <> 0D) or
                                                                     ("Contract Type" = "Contract Type"::Quote)
                                                                  then begin
                                                                    if "Contract Type" = "Contract Type"::Contract then begin
                                                                      ServContractLine.SETFILTER("Contract Expiration Date",'>%1',"Expiration Date");
                                                                      if ServContractLine.FIND('-') then
                                                                        if not CONFIRM(
                                                                             Text056,
                                                                             true,
                                                                             FIELDCAPTION("Expiration Date"),
                                                                             TABLECAPTION,
                                                                             "Expiration Date")
                                                                        then
                                                                          ERROR('');
                                                                      ServContractLine.SETFILTER("Contract Expiration Date",'>%1 | %2',"Expiration Date",0D);
                                                                    end;

                                                                    if ServContractLine.FIND('-') then begin
                                                                      repeat
                                                                        ServContractLine."Contract Expiration Date" := "Expiration Date";
                                                                        ServContractLine."Credit Memo Date" := "Expiration Date";
                                                                        ServContractLine.MODIFY;
                                                                      until ServContractLine.NEXT = 0;
                                                                      MODIFY(true);
                                                                    end;
                                                                  end;
                                                                  VALIDATE("Invoice Period");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Expiration Date }
    { 38  ;   ;First Service Date  ;Date          ;OnValidate=BEGIN
                                                                if "First Service Date" <> xRec."First Service Date" then begin
                                                                  if ("Contract Type" = "Contract Type"::Contract) and
                                                                     (Status = Status::Signed)
                                                                  then
                                                                    ERROR(
                                                                      Text030,
                                                                      FIELDCAPTION("First Service Date"));

                                                                  if "First Service Date" < "Starting Date" then
                                                                    ERROR(
                                                                      Text023,
                                                                      FIELDCAPTION("First Service Date"),
                                                                      FIELDCAPTION("Starting Date"));

                                                                  if "Contract Type" = "Contract Type"::Quote then begin
                                                                    if ContractLinesExist then
                                                                      MESSAGE(
                                                                        Text031,FIELDCAPTION("First Service Date"));
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=First Service Date }
    { 39  ;   ;Max. Labor Unit Price;Decimal      ;CaptionML=ENU=Max. Labor Unit Price;
                                                   BlankZero=true;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Calcd. Annual Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Contract Line"."Line Amount" WHERE ("Contract Type"=FIELD("Contract Type"),
                                                                                                                "Contract No."=FIELD("Contract No.")));
                                                   CaptionML=ENU=Calcd. Annual Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 42  ;   ;Annual Amount       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Change Status","Change Status"::Open);
                                                                ServMgtSetup.GET;
                                                                DistributeAmounts;
                                                                VALIDATE("Invoice Period");
                                                              END;

                                                   CaptionML=ENU=Annual Amount;
                                                   MinValue=0;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 43  ;   ;Amount per Period   ;Decimal       ;CaptionML=ENU=Amount per Period;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 44  ;   ;Combine Invoices    ;Boolean       ;CaptionML=ENU=Combine Invoices }
    { 45  ;   ;Prepaid             ;Boolean       ;OnValidate=VAR
                                                                ServLedgEntry@1000 : Record "Service Ledger Entry";
                                                              BEGIN
                                                                if Prepaid <> xRec.Prepaid then begin
                                                                  if "Contract Type" = "Contract Type"::Contract then begin
                                                                    ServLedgEntry.SETCURRENTKEY("Service Contract No.");
                                                                    ServLedgEntry.SETRANGE("Service Contract No.","Contract No.");
                                                                    if not ServLedgEntry.ISEMPTY then
                                                                      ERROR(
                                                                        Text032,
                                                                        FIELDCAPTION(Prepaid),TABLECAPTION,"Contract No.");
                                                                  end;
                                                                  TESTFIELD("Starting Date");
                                                                  if Prepaid then begin
                                                                    if "Invoice after Service" then
                                                                      ERROR(
                                                                        Text057,
                                                                        FIELDCAPTION("Invoice after Service"),
                                                                        FIELDCAPTION(Prepaid));
                                                                    if "Invoice Period" = "Invoice Period"::None then
                                                                      VALIDATE("Next Invoice Date",0D)
                                                                    else
                                                                      if "Starting Date" = CALCDATE('<-CM>',"Starting Date") then
                                                                        VALIDATE("Next Invoice Date","Starting Date")
                                                                      else
                                                                        VALIDATE("Next Invoice Date",CALCDATE('<-CM+1M>',"Starting Date"));
                                                                  end else
                                                                    VALIDATE("Last Invoice Date");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Prepaid }
    { 46  ;   ;Next Invoice Period ;Text30        ;CaptionML=ENU=Next Invoice Period;
                                                   Editable=false }
    { 47  ;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Code }
    { 48  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 50  ;   ;Cancel Reason Code  ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Cancel Reason Code }
    { 51  ;   ;Last Price Update Date;Date        ;CaptionML=ENU=Last Price Update Date;
                                                   Editable=false }
    { 52  ;   ;Next Price Update Date;Date        ;OnValidate=BEGIN
                                                                if "Next Price Update Date" < "Next Invoice Date" then
                                                                  ERROR(Text064,FIELDCAPTION("Next Price Update Date"),FIELDCAPTION("Next Invoice Date"));
                                                              END;

                                                   CaptionML=ENU=Next Price Update Date }
    { 53  ;   ;Last Price Update % ;Decimal       ;CaptionML=ENU=Last Price Update %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 55  ;   ;Response Time (Hours);Decimal      ;OnValidate=BEGIN
                                                                CheckChangeStatus;

                                                                if "Response Time (Hours)" <> xRec."Response Time (Hours)" then begin
                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETFILTER("Response Time (Hours)",'>%1',"Response Time (Hours)");
                                                                  if ServContractLine.FIND('-') then
                                                                    if CONFIRM(
                                                                         Text034,
                                                                         true,
                                                                         FIELDCAPTION("Response Time (Hours)"))
                                                                    then
                                                                      ServContractLine.MODIFYALL("Response Time (Hours)","Response Time (Hours)",true);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Response Time (Hours);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true }
    { 56  ;   ;Contract Lines on Invoice;Boolean  ;CaptionML=ENU=Contract Lines on Invoice }
    { 57  ;   ;No. of Posted Invoices;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Document Register" WHERE ("Source Document Type"=CONST(Contract),
                                                                                                        "Source Document No."=FIELD("Contract No."),
                                                                                                        "Destination Document Type"=CONST("Posted Invoice")));
                                                   CaptionML=ENU=No. of Posted Invoices;
                                                   Editable=false }
    { 58  ;   ;No. of Unposted Invoices;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Document Register" WHERE ("Source Document Type"=CONST(Contract),
                                                                                                        "Source Document No."=FIELD("Contract No."),
                                                                                                        "Destination Document Type"=CONST(Invoice)));
                                                   CaptionML=ENU=No. of Unposted Invoices;
                                                   Editable=false }
    { 59  ;   ;Service Period      ;DateFormula   ;OnValidate=BEGIN
                                                                if "Service Period" <> xRec."Service Period" then begin
                                                                  if ("Contract Type" = "Contract Type"::Contract) and
                                                                     (Status = Status::Signed)
                                                                  then
                                                                    ERROR(
                                                                      Text030,
                                                                      FIELDCAPTION("Service Period"));
                                                                  if "Contract Type" = "Contract Type"::Quote then begin
                                                                    if ContractLinesExist then
                                                                      MESSAGE(
                                                                        Text031,
                                                                        FIELDCAPTION("Service Period"));
                                                                  end;
                                                                  if ContractLinesExist and (FORMAT("Service Period") <> '') then begin
                                                                    ServContractLine.RESET;
                                                                    ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                    ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                    if ServContractLine.FIND('-') then
                                                                      repeat
                                                                        if (FORMAT(ServContractLine."Service Period") = '') or
                                                                           (ServContractLine."Service Period" = xRec."Service Period")
                                                                        then begin
                                                                          ServContractLine."Service Period" := "Service Period";
                                                                          ServContractLine.MODIFY;
                                                                        end;
                                                                      until ServContractLine.NEXT = 0;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Service Period }
    { 60  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 62  ;   ;Invoice after Service;Boolean      ;OnValidate=BEGIN
                                                                if not ServHeader.READPERMISSION and
                                                                   "Invoice after Service" = true
                                                                then
                                                                  ERROR(Text054);
                                                                if "Invoice after Service" and
                                                                   Prepaid
                                                                then
                                                                  ERROR(
                                                                    Text057,
                                                                    FIELDCAPTION("Invoice after Service"),
                                                                    FIELDCAPTION(Prepaid));
                                                              END;

                                                   CaptionML=ENU=Invoice after Service }
    { 63  ;   ;Quote Type          ;Option        ;CaptionML=ENU=Quote Type;
                                                   OptionCaptionML=ENU=Quote 1,Quote 2,Quote 3,Quote 4,Quote 5,Quote 6,Quote 7,Quote 8;
                                                   OptionString="Quote 1","Quote 2","Quote 3","Quote 4","Quote 5","Quote 6","Quote 7","Quote 8" }
    { 64  ;   ;Allow Unbalanced Amounts;Boolean   ;OnValidate=BEGIN
                                                                TESTFIELD("Change Status","Change Status"::Open);
                                                                ServMgtSetup.GET;
                                                                if "Allow Unbalanced Amounts" <> xRec."Allow Unbalanced Amounts" then
                                                                  DistributeAmounts;
                                                              END;

                                                   CaptionML=ENU=Allow Unbalanced Amounts }
    { 65  ;   ;Contract Group Code ;Code10        ;TableRelation="Contract Group";
                                                   CaptionML=ENU=Contract Group Code }
    { 66  ;   ;Service Order Type  ;Code10        ;TableRelation="Service Order Type";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Service Order Type","Service Order Type",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Service Contract Template","Template No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code");
                                                              END;

                                                   CaptionML=ENU=Service Order Type }
    { 67  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                CheckChangeStatus;
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 68  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                CheckChangeStatus;
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 69  ;   ;Accept Before       ;Date          ;CaptionML=ENU=Accept Before }
    { 71  ;   ;Automatic Credit Memos;Boolean     ;CaptionML=ENU=Automatic Credit Memos }
    { 74  ;   ;Template No.        ;Code20        ;OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Service Contract Template","Template No.",
                                                                  DATABASE::"Service Order Type","Service Order Type");
                                                              END;

                                                   CaptionML=ENU=Template No. }
    { 75  ;   ;Price Update Period ;DateFormula   ;InitValue=1Y;
                                                   OnValidate=BEGIN
                                                                CalcInvPeriodDuration;
                                                                if (FORMAT("Price Update Period") <> '') and
                                                                   (CALCDATE("Price Update Period","Starting Date") < CALCDATE(InvPeriodDuration,"Starting Date"))
                                                                then
                                                                  ERROR(Text064,FIELDCAPTION("Price Update Period"),FIELDCAPTION("Invoice Period"));

                                                                if FORMAT("Price Update Period") <> '' then
                                                                  if "Last Price Update Date" <> 0D then
                                                                    "Next Price Update Date" := CALCDATE("Price Update Period","Last Price Update Date")
                                                                  else
                                                                    "Next Price Update Date" := CALCDATE("Price Update Period","Starting Date")
                                                                else
                                                                  "Next Price Update Date" := 0D;
                                                              END;

                                                   CaptionML=ENU=Price Update Period }
    { 79  ;   ;Price Inv. Increase Code;Code20    ;TableRelation="Standard Text";
                                                   CaptionML=ENU=Price Inv. Increase Code }
    { 80  ;   ;Print Increase Text ;Boolean       ;CaptionML=ENU=Print Increase Text }
    { 81  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                MESSAGE(Text042,FIELDCAPTION("Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 82  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 83  ;   ;Probability         ;Decimal       ;InitValue=100;
                                                   CaptionML=ENU=Probability;
                                                   DecimalPlaces=0:5 }
    { 84  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Comment Line" WHERE ("Table Name"=CONST("Service Contract"),
                                                                                                   "Table Subtype"=FIELD("Contract Type"),
                                                                                                   "No."=FIELD("Contract No."),
                                                                                                   "Table Line No."=FILTER(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 85  ;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                if not UserMgt.CheckRespCenter(2,"Responsibility Center") then
                                                                  ERROR(
                                                                    Text040,
                                                                    RespCenter.TABLECAPTION,UserMgt.GetSalesFilter);

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Service Contract Template","Template No.",
                                                                  DATABASE::"Service Order Type","Service Order Type");
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 86  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 87  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 88  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 89  ;   ;Bill-to County      ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.County WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to County;
                                                   Editable=false }
    { 90  ;   ;County              ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.County WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=County;
                                                   Editable=false }
    { 91  ;   ;Ship-to County      ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".County WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                      Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to County;
                                                   Editable=false }
    { 92  ;   ;Country/Region Code ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Country/Region Code" WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Country/Region Code;
                                                   Editable=false }
    { 93  ;   ;Bill-to Country/Region Code;Code10 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Country/Region Code" WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Country/Region Code;
                                                   Editable=false }
    { 94  ;   ;Ship-to Country/Region Code;Code10 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Country/Region Code" WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                                     Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Country/Region Code;
                                                   Editable=false }
    { 95  ;   ;Name 2              ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE ("No."=FIELD("Customer No.")));
                                                   CaptionML=ENU=Name 2;
                                                   Editable=false }
    { 96  ;   ;Bill-to Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE ("No."=FIELD("Bill-to Customer No.")));
                                                   CaptionML=ENU=Bill-to Name 2;
                                                   Editable=false }
    { 97  ;   ;Ship-to Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Name 2" WHERE ("Customer No."=FIELD("Customer No."),
                                                                                                        Code=FIELD("Ship-to Code")));
                                                   CaptionML=ENU=Ship-to Name 2;
                                                   Editable=false }
    { 98  ;   ;Next Invoice Period Start;Date     ;CaptionML=ENU=Next Invoice Period Start;
                                                   Editable=false }
    { 99  ;   ;Next Invoice Period End;Date       ;CaptionML=ENU=Next Invoice Period End;
                                                   Editable=false }
    { 100 ;   ;Contract Invoice Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Service Ledger Entry"."Amount (LCY)" WHERE ("Service Contract No."=FIELD("Contract No."),
                                                                                                                 "Entry Type"=CONST(Sale),
                                                                                                                 "Moved from Prepaid Acc."=CONST(true),
                                                                                                                 Type=FIELD("Type Filter"),
                                                                                                                 "Posting Date"=FIELD("Date Filter"),
                                                                                                                 Open=CONST(false)));
                                                   CaptionML=ENU=Contract Invoice Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 101 ;   ;Contract Prepaid Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Service Ledger Entry"."Amount (LCY)" WHERE ("Service Contract No."=FIELD("Contract No."),
                                                                                                                 "Entry Type"=CONST(Sale),
                                                                                                                 "Moved from Prepaid Acc."=CONST(false),
                                                                                                                 Type=CONST("Service Contract"),
                                                                                                                 "Posting Date"=FIELD("Date Filter"),
                                                                                                                 Open=CONST(false),
                                                                                                                 Prepaid=CONST(true)));
                                                   CaptionML=ENU=Contract Prepaid Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 102 ;   ;Contract Discount Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Ledger Entry"."Contract Disc. Amount" WHERE ("Service Contract No."=FIELD("Contract No."),
                                                                                                                         "Entry Type"=CONST(Sale),
                                                                                                                         "Moved from Prepaid Acc."=CONST(true),
                                                                                                                         Type=FIELD("Type Filter"),
                                                                                                                         "Posting Date"=FIELD("Date Filter"),
                                                                                                                         Open=CONST(false)));
                                                   CaptionML=ENU=Contract Discount Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 103 ;   ;Contract Cost Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Ledger Entry"."Cost Amount" WHERE ("Service Contract No."=FIELD("Contract No."),
                                                                                                               "Entry Type"=CONST(Usage),
                                                                                                               "Moved from Prepaid Acc."=CONST(true),
                                                                                                               Type=FIELD("Type Filter"),
                                                                                                               "Posting Date"=FIELD("Date Filter"),
                                                                                                               Open=CONST(false)));
                                                   CaptionML=ENU=Contract Cost Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 104 ;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE ("Contract No."=FIELD("Contract No."),
                                                                                                            "Reason Code"=FIELD("Reason Code Filter"),
                                                                                                            "Change Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Contract Gain/Loss Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 106 ;   ;No. of Posted Credit Memos;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Document Register" WHERE ("Source Document Type"=CONST(Contract),
                                                                                                        "Source Document No."=FIELD("Contract No."),
                                                                                                        "Destination Document Type"=CONST("Posted Credit Memo")));
                                                   CaptionML=ENU=No. of Posted Credit Memos;
                                                   Editable=false }
    { 107 ;   ;No. of Unposted Credit Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Service Document Register" WHERE ("Source Document Type"=CONST(Contract),
                                                                                                        "Source Document No."=FIELD("Contract No."),
                                                                                                        "Destination Document Type"=CONST("Credit Memo")));
                                                   CaptionML=ENU=No. of Unposted Credit Memos;
                                                   Editable=false }
    { 140 ;   ;Type Filter         ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Type Filter;
                                                   OptionCaptionML=ENU=" ,Resource,Item,Service Cost,Service Contract,G/L Account";
                                                   OptionString=" ",Resource,Item,"Service Cost","Service Contract","G/L Account" }
    { 141 ;   ;Reason Code Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code Filter }
    { 142 ;   ;Posted Service Order Filter;Code20 ;FieldClass=FlowFilter;
                                                   TableRelation="Service Shipment Header";
                                                   CaptionML=ENU=Posted Service Order Filter }
    { 143 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 144 ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=ENU=Item Filter }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5050;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1001 : Record Contact;
                                                                ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                              BEGIN
                                                                if ("Contact No." <> xRec."Contact No.") and (xRec."Contact No." <> '') then
                                                                  if not CONFIRM(Text014,false,FIELDCAPTION("Contact No.")) then begin
                                                                    "Contact No." := xRec."Contact No.";
                                                                    exit;
                                                                  end;

                                                                if ("Customer No." <> '') and ("Contact No." <> '') then begin
                                                                  Cont.GET("Contact No.");
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Customer No.") then
                                                                    if ContBusinessRelation."Contact No." <> Cont."Company No." then
                                                                      ERROR(Text045,Cont."No.",Cont.Name,"Customer No.");
                                                                end;

                                                                UpdateCust("Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record Contact;
                                                              ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                            BEGIN
                                                              if ("Customer No." <> '') and Cont.GET("Contact No.") then
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              else
                                                                if "Customer No." <> '' then begin
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Customer No.") then
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                end else
                                                                  Cont.SETFILTER("Company No.",'<>%1','''');

                                                              if "Contact No." <> '' then
                                                                if Cont.GET("Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                xRec := Rec;
                                                                VALIDATE("Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Contact No. }
    { 5051;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1001 : Record Contact;
                                                                ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                              BEGIN
                                                                if ("Bill-to Contact No." <> xRec."Bill-to Contact No.") and
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                then
                                                                  if not CONFIRM(Text014,false,FIELDCAPTION("Bill-to Contact No.")) then begin
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    exit;
                                                                  end;

                                                                if ("Bill-to Customer No." <> '') and ("Bill-to Contact No." <> '') then begin
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") then
                                                                    if ContBusinessRelation."Contact No." <> Cont."Company No." then
                                                                      ERROR(Text045,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                end;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record Contact;
                                                              ContBusinessRelation@1000 : Record "Contact Business Relation";
                                                            BEGIN
                                                              if ("Bill-to Customer No." <> '') and Cont.GET("Bill-to Contact No.") then
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              else
                                                                if Cust.GET("Bill-to Customer No.") then begin
                                                                  if ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") then
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                end else
                                                                  Cont.SETFILTER("Company No.",'<>%1','''');

                                                              if "Bill-to Contact No." <> '' then
                                                                if Cont.GET("Bill-to Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5052;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 5053;   ;Last Invoice Period End;Date       ;CaptionML=ENU=Last Invoice Period End }
  }
  KEYS
  {
    {    ;"Contract Type","Contract No."          ;Clustered=true }
    {    ;"Contract No.","Contract Type"           }
    {    ;"Customer No.","Ship-to Code"            }
    {    ;"Bill-to Customer No.","Contract Type","Combine Invoices","Next Invoice Date" }
    {    ;"Next Price Update Date"                 }
    {    ;"Responsibility Center","Service Zone Code",Status,"Contract Group Code" }
    {    ;"Salesperson Code",Status                }
    {    ;"Template No."                           }
    {    ;"Customer No.","Bill-to Customer No."   ;MaintainSQLIndex=false }
    {    ;"Customer No.","Currency Code","Ship-to Code";
                                                   MaintainSQLIndex=false }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"Contract No.",Description,"Customer No.",Status,"Change Status","Starting Date" }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to create the contract using a contract template?';
      Text002@1002 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text003@1003 : TextConst 'ENU=You cannot delete %1 %2.';
      Text006@1006 : TextConst 'ENU=The %1 field can only be changed to Canceled.';
      CancelTheContractQst@1007 : TextConst '@@@=%1: Text008;ENU=%1 It is not possible to change a service contract to its previous status.\\Do you want to cancel the contract?';
      OpenPrepaymentEntriesExistTxt@1008 : TextConst 'ENU=Open prepayment entries exist for the contract.';
      Text009@1009 : TextConst 'ENU=You cannot change the %1 field to %2 when the %3 field is %4.';
      Text010@1010 : TextConst 'ENU=Do you want to cancel %1?';
      Text011@1011 : TextConst 'ENU=You cannot change the %1 field manually because there are contract lines for this customer.\\';
      Text012@1012 : TextConst 'ENU=To change the customer, use the Change Customer function.';
      Text014@1014 : TextConst 'ENU=Do you want to change %1?';
      Text023@1015 : TextConst 'ENU=%1 cannot be less than %2.';
      Text024@1016 : TextConst 'ENU=The %1 cannot be before the %2.';
      Text026@1017 : TextConst 'ENU=%1 must be the first day in the month.';
      Text027@1018 : TextConst 'ENU=%1 to %2';
      Text028@1019 : TextConst 'ENU=%1 must be the last day in the month.';
      Text029@1020 : TextConst 'ENU=You are not allowed to change %1 because the %2 has been invoiced.';
      Text030@1021 : TextConst 'ENU=You cannot change the %1 field on signed service contracts.';
      Text031@1022 : TextConst 'ENU=You have changed the %1 field.\\The contract lines will not be updated.';
      Text032@1023 : TextConst 'ENU=You cannot change %1 because %2 %3 has been invoiced.';
      Text034@1024 : TextConst 'ENU=Some of the contract lines have a longer response time than the %1 field on the service contract header. Do you want to update them?';
      Text040@1030 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      ServHeader@1075 : Record "Service Header";
      ServContractTmplt@1049 : Record "Service Contract Template";
      ServContractHeader@1032 : Record "Service Contract Header";
      ServContractLine@1059 : Record "Service Contract Line";
      ServMgtSetup@1034 : Record "Service Mgt. Setup";
      ServCommentLine@1035 : Record "Service Comment Line";
      Cust@1036 : Record Customer;
      ShipToAddr@1037 : Record "Ship-to Address";
      ContractChangeLog@1038 : Record "Contract Change Log";
      FiledServContract@1039 : Record "Filed Service Contract Header";
      ContractGainLossEntry@1042 : Record "Contract Gain/Loss Entry";
      RespCenter@1044 : Record "Responsibility Center";
      ServHour@1069 : Record "Service Hour";
      ServContractLine2@1031 : Record "Service Contract Line";
      Currency@1061 : Record Currency;
      NoSeriesMgt@1045 : Codeunit NoSeriesManagement;
      UserMgt@1046 : Codeunit "User Setup Management";
      ServContractMgt@1047 : Codeunit ServContractManagement;
      ServOrderMgt@1048 : Codeunit ServOrderManagement;
      ServContrQuoteTmplUpd@1050 : Codeunit "ServContractQuote-Tmpl. Upd.";
      DimMgt@1040 : Codeunit DimensionManagement;
      MoveEntries@1077 : Codeunit MoveEntries;
      DaysInThisInvPeriod@1051 : Integer;
      DaysInFullInvPeriod@1052 : Integer;
      TempDate@1055 : Date;
      Text041@1056 : TextConst 'ENU=%1 cannot be changed to %2 because this %3 has been invoiced';
      Text042@1057 : TextConst 'ENU=The amounts on the service contract header and service contract lines have not been updated. The value of the %1 field indicates the currency in which the amounts in the sales documents belonging to this contract are calculated. The amounts on the service contract are presented in LCY only.';
      Text044@1067 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text045@1033 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text048@1065 : TextConst 'ENU=There are unposted invoices linked to this contract.\\Do you want to cancel the contract?';
      Text049@1066 : TextConst 'ENU=There are unposted credit memos linked to this contract.\\Do you want to cancel the contract?';
      Text051@1001 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      ContactNo@1068 : Code[20];
      Text052@1070 : TextConst 'ENU=%1 service ledger entries exist for this service contract\Would you like to continue?';
      Text053@1071 : TextConst 'ENU=The deletion process has been interrupted.';
      SuspendChangeStatus@1072 : Boolean;
      SkipContact@1074 : Boolean;
      SkipBillToContact@1073 : Boolean;
      Text054@1076 : TextConst 'ENU=You cannot checkmark this field because you do not have permissions for the Service Order Management Area.';
      Text055@1079 : TextConst 'ENU=There are unposted invoices and credit memos linked to this contract.\\Do you want to cancel the contract?';
      StrToInsert@1078 : Text[250];
      Text056@1080 : TextConst 'ENU=The contract expiration dates on the service contract lines that are later than %1 on the %2 will be replaced with %3.\Do you want to continue?';
      Text057@1081 : TextConst 'ENU=You cannot select both the %1 and the %2 check boxes.';
      Text058@1026 : TextConst 'ENU=You cannot use the Distribution functionality if there are no contract lines in the service contract.';
      Text059@1082 : TextConst 'ENU=You cannot use the Distribution Based on Profit option if the sum of values in the Profit field on the contract lines equals to zero.';
      Text060@1083 : TextConst 'ENU=You cannot use the Distribution Based on Line Amount option if the sum of values in the Line Amount field on the contract lines equals to zero.';
      Text061@1084 : TextConst 'ENU=The annual amount difference has been distributed and one or more contract lines have zero or less in the %1 fields.\You can enter an amount in the %1 field.';
      Text062@1085 : TextConst 'ENU=Some lines containing service items have been added to one or more contracts\while the quote had the %1 %2.\Do you want to see these lines?';
      HideValidationDialog@1004 : Boolean;
      Confirmed@1005 : Boolean;
      Text063@1025 : TextConst 'ENU=You cannot rename a %1.';
      InvPeriodDuration@1100 : DateFormula;
      Text064@1103 : TextConst 'ENU=%1 cannot be less than %2.';
      Text065@1104 : TextConst 'ENU=%1 cannot be more than %2.';

    [External]
    PROCEDURE UpdContractChangeLog@5(OldServContractHeader@1000 : Record "Service Contract Header");
    BEGIN
      if "Contract Type" <> OldServContractHeader."Contract Type" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Contract Type"),0,
          FORMAT(OldServContractHeader."Contract Type"),FORMAT("Contract Type"),
          '',0);
      if "Contract No." <> OldServContractHeader."Contract No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Contract No."),0,
          FORMAT(OldServContractHeader."Contract No."),FORMAT("Contract No."),
          '',0);
      if Description <> OldServContractHeader.Description then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION(Description),0,
          OldServContractHeader.Description,Description,
          '',0);
      if "Description 2" <> OldServContractHeader."Description 2" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Description 2"),0,
          OldServContractHeader."Description 2","Description 2",
          '',0);
      if Status <> OldServContractHeader.Status then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION(Status),0,
          FORMAT(OldServContractHeader.Status),FORMAT(Status),
          '',0);
      if "Customer No." <> OldServContractHeader."Customer No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Customer No."),0,
          OldServContractHeader."Customer No.","Customer No.",
          '',0);
      if "Contact Name" <> OldServContractHeader."Contact Name" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Contact Name"),0,
          OldServContractHeader."Contact Name","Contact Name",
          '',0);
      if "Your Reference" <> OldServContractHeader."Your Reference" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Your Reference"),0,
          OldServContractHeader."Your Reference","Your Reference",
          '',0);
      if "Salesperson Code" <> OldServContractHeader."Salesperson Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Salesperson Code"),0,
          OldServContractHeader."Salesperson Code","Salesperson Code",
          '',0);
      if "Bill-to Customer No." <> OldServContractHeader."Bill-to Customer No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Bill-to Customer No."),0,
          OldServContractHeader."Bill-to Customer No.","Bill-to Customer No.",
          '',0);
      if "Ship-to Code" <> OldServContractHeader."Ship-to Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Ship-to Code"),0,
          OldServContractHeader."Ship-to Code","Ship-to Code",
          '',0);
      if Prepaid <> OldServContractHeader.Prepaid then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION(Prepaid),0,
          FORMAT(OldServContractHeader.Prepaid),FORMAT(Prepaid),
          '',0);
      if "Invoice Period" <> OldServContractHeader."Invoice Period" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Invoice Period"),0,
          FORMAT(OldServContractHeader."Invoice Period"),FORMAT("Invoice Period"),
          '',0);
      if "Next Invoice Date" <> OldServContractHeader."Next Invoice Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Next Invoice Date"),0,
          FORMAT(OldServContractHeader."Next Invoice Date"),FORMAT("Next Invoice Date"),
          '',0);
      if "Starting Date" <> OldServContractHeader."Starting Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Starting Date"),0,
          FORMAT(OldServContractHeader."Starting Date"),FORMAT("Starting Date"),
          '',0);
      if "Expiration Date" <> OldServContractHeader."Expiration Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Expiration Date"),0,
          FORMAT(OldServContractHeader."Expiration Date"),FORMAT("Expiration Date"),
          '',0);
      if "First Service Date" <> OldServContractHeader."First Service Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("First Service Date"),0,
          FORMAT(OldServContractHeader."First Service Date"),FORMAT("First Service Date"),
          '',0);
      if "Max. Labor Unit Price" <> OldServContractHeader."Max. Labor Unit Price" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Max. Labor Unit Price"),0,
          FORMAT(OldServContractHeader."Max. Labor Unit Price"),FORMAT("Max. Labor Unit Price"),
          '',0);
      if "Annual Amount" <> OldServContractHeader."Annual Amount" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Annual Amount"),0,
          FORMAT(OldServContractHeader."Annual Amount"),FORMAT("Annual Amount"),
          '',0);
      if "Amount per Period" <> OldServContractHeader."Amount per Period" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Amount per Period"),0,
          FORMAT(OldServContractHeader."Amount per Period"),FORMAT("Amount per Period"),
          '',0);
      if "Combine Invoices" <> OldServContractHeader."Combine Invoices" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Combine Invoices"),0,
          FORMAT(OldServContractHeader."Combine Invoices"),FORMAT("Combine Invoices"),
          '',0);
      if "Next Invoice Period Start" <> OldServContractHeader."Next Invoice Period Start" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Next Invoice Period Start"),0,
          FORMAT(OldServContractHeader."Next Invoice Period Start"),FORMAT("Next Invoice Period Start"),
          '',0);
      if "Next Invoice Period End" <> OldServContractHeader."Next Invoice Period End" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Next Invoice Period End"),0,
          FORMAT(OldServContractHeader."Next Invoice Period End"),FORMAT("Next Invoice Period End"),
          '',0);
      if "Service Zone Code" <> OldServContractHeader."Service Zone Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Service Zone Code"),0,
          FORMAT(OldServContractHeader."Service Zone Code"),FORMAT("Service Zone Code"),
          '',0);
      if "Cancel Reason Code" <> OldServContractHeader."Cancel Reason Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Cancel Reason Code"),0,
          FORMAT(OldServContractHeader."Cancel Reason Code"),FORMAT("Cancel Reason Code"),
          '',0);
      if "Next Price Update Date" <> OldServContractHeader."Next Price Update Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Next Price Update Date"),0,
          FORMAT(OldServContractHeader."Next Price Update Date"),FORMAT("Next Price Update Date"),
          '',0);
      if "Response Time (Hours)" <> OldServContractHeader."Response Time (Hours)" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Response Time (Hours)"),0,
          FORMAT(OldServContractHeader."Response Time (Hours)"),FORMAT("Response Time (Hours)"),
          '',0);
      if "Contract Lines on Invoice" <> OldServContractHeader."Contract Lines on Invoice" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Contract Lines on Invoice"),0,
          FORMAT(OldServContractHeader."Contract Lines on Invoice"),FORMAT("Contract Lines on Invoice"),
          '',0);
      if "Service Period" <> OldServContractHeader."Service Period" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Service Period"),0,
          FORMAT(OldServContractHeader."Service Period"),FORMAT("Service Period"),
          '',0);
      if "Payment Terms Code" <> OldServContractHeader."Payment Terms Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Payment Terms Code"),0,
          FORMAT(OldServContractHeader."Payment Terms Code"),FORMAT("Payment Terms Code"),
          '',0);
      if "Contract Group Code" <> OldServContractHeader."Contract Group Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Contract Group Code"),0,
          OldServContractHeader."Contract Group Code","Contract Group Code",
          '',0);
      if "Service Order Type" <> OldServContractHeader."Service Order Type" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Service Order Type"),0,
          FORMAT(OldServContractHeader."Service Order Type"),FORMAT("Service Order Type"),
          '',0);
      if "Accept Before" <> OldServContractHeader."Accept Before" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Accept Before"),0,
          FORMAT(OldServContractHeader."Accept Before"),FORMAT("Accept Before"),
          '',0);
      if "Automatic Credit Memos" <> OldServContractHeader."Automatic Credit Memos" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Automatic Credit Memos"),0,
          FORMAT(OldServContractHeader."Automatic Credit Memos"),FORMAT("Automatic Credit Memos"),
          '',0);
      if "Price Update Period" <> OldServContractHeader."Price Update Period" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Price Update Period"),0,
          FORMAT(OldServContractHeader."Price Update Period"),FORMAT("Price Update Period"),
          '',0);
      if "Price Inv. Increase Code" <> OldServContractHeader."Price Inv. Increase Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Price Inv. Increase Code"),0,
          FORMAT(OldServContractHeader."Price Inv. Increase Code"),FORMAT("Price Inv. Increase Code"),
          '',0);
      if "Currency Code" <> OldServContractHeader."Currency Code" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Currency Code"),0,
          FORMAT(OldServContractHeader."Currency Code"),FORMAT("Currency Code"),
          '',0);
      if "Responsibility Center" <> OldServContractHeader."Responsibility Center" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Responsibility Center"),0,
          FORMAT(OldServContractHeader."Responsibility Center"),FORMAT("Responsibility Center"),
          '',0);
      if "Phone No." <> OldServContractHeader."Phone No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Phone No."),0,
          FORMAT(OldServContractHeader."Phone No."),FORMAT("Phone No."),
          '',0);
      if "Fax No." <> OldServContractHeader."Fax No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Fax No."),0,
          FORMAT(OldServContractHeader."Fax No."),FORMAT("Fax No."),
          '',0);
      if "E-Mail" <> OldServContractHeader."E-Mail" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("E-Mail"),0,
          FORMAT(OldServContractHeader."E-Mail"),FORMAT("E-Mail"),
          '',0);
      if "Allow Unbalanced Amounts" <> OldServContractHeader."Allow Unbalanced Amounts" then
        ContractChangeLog.LogContractChange(
          "Contract No.",0,FIELDCAPTION("Allow Unbalanced Amounts"),0,
          FORMAT(OldServContractHeader."Allow Unbalanced Amounts"),FORMAT("Allow Unbalanced Amounts"),
          '',0);
    END;

    [External]
    PROCEDURE AssistEdit@1(OldServContract@1000 : Record "Service Contract Header") : Boolean;
    BEGIN
      with ServContractHeader do begin
        ServContractHeader := Rec;
        ServMgtSetup.GET;
        ServMgtSetup.TESTFIELD("Service Contract Nos.");
        if NoSeriesMgt.SelectSeries(ServMgtSetup."Service Contract Nos.",OldServContract."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("Contract No.");
          Rec := ServContractHeader;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE ReturnNoOfPer@2(InvoicePeriod@1001 : 'Month,"Two Months",Quarter,"Half Year",Year') RetPer@1000 : Integer;
    BEGIN
      case InvoicePeriod of
        InvoicePeriod::Month:
          RetPer := 12;
        InvoicePeriod::"Two Months":
          RetPer := 6;
        InvoicePeriod::Quarter:
          RetPer := 4;
        InvoicePeriod::"Half Year":
          RetPer := 2;
        InvoicePeriod::Year:
          RetPer := 1;
        else
          RetPer := 0;
      end;
    END;

    LOCAL PROCEDURE CalculateEndPeriodDate@3(Prepaid@1000 : Boolean;NextInvDate@1001 : Date) : Date;
    VAR
      TempDate2@1002 : Date;
    BEGIN
      if NextInvDate = 0D then
        exit(0D);
      if Prepaid then begin
        case "Invoice Period" of
          "Invoice Period"::Month:
            TempDate2 := CALCDATE('<1M-1D>',NextInvDate);
          "Invoice Period"::"Two Months":
            TempDate2 := CALCDATE('<2M-1D>',NextInvDate);
          "Invoice Period"::Quarter:
            TempDate2 := CALCDATE('<3M-1D>',NextInvDate);
          "Invoice Period"::"Half Year":
            TempDate2 := CALCDATE('<6M-1D>',NextInvDate);
          "Invoice Period"::Year:
            TempDate2 := CALCDATE('<12M-1D>',NextInvDate);
          "Invoice Period"::None:
            TempDate2 := 0D;
        end;
        exit(TempDate2);
      end;
      case "Invoice Period" of
        "Invoice Period"::Month:
          TempDate2 := CALCDATE('<-CM>',NextInvDate);
        "Invoice Period"::"Two Months":
          TempDate2 := CALCDATE('<-CM-1M>',NextInvDate);
        "Invoice Period"::Quarter:
          TempDate2 := CALCDATE('<-CM-2M>',NextInvDate);
        "Invoice Period"::"Half Year":
          TempDate2 := CALCDATE('<-CM-5M>',NextInvDate);
        "Invoice Period"::Year:
          TempDate2 := CALCDATE('<-CM-11M>',NextInvDate);
        "Invoice Period"::None:
          TempDate2 := 0D;
      end;
      exit(TempDate2);
    END;

    [External]
    PROCEDURE UpdateServZone@4();
    BEGIN
      if "Ship-to Code" <> '' then begin
        ShipToAddr.GET("Customer No.","Ship-to Code");
        "Service Zone Code" := ShipToAddr."Service Zone Code";
      end else
        if "Customer No." <> '' then begin
          Cust.GET("Customer No.");
          "Service Zone Code" := Cust."Service Zone Code";
        end else
          "Service Zone Code" := '';
    END;

    LOCAL PROCEDURE ContractLinesExist@7() : Boolean;
    BEGIN
      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type","Contract Type");
      ServContractLine.SETRANGE("Contract No.","Contract No.");
      exit(ServContractLine.FIND('-'));
    END;

    [External]
    PROCEDURE UpdateShiptoCode@6();
    BEGIN
      if "Ship-to Code" = '' then begin
        "Ship-to Name" := Name;
        "Ship-to Name 2" := "Name 2";
        "Ship-to Address" := Address;
        "Ship-to Address 2" := "Address 2";
        "Ship-to Post Code" := "Post Code";
        "Ship-to City" := City;
        "Ship-to County" := County;
        "Ship-to Country/Region Code" := "Country/Region Code";
      end;
    END;

    [External]
    PROCEDURE NextInvoicePeriod@8() : Text[250];
    BEGIN
      if ("Next Invoice Period Start" <> 0D) and ("Next Invoice Period End" <> 0D) then
        exit(STRSUBSTNO(Text027,"Next Invoice Period Start","Next Invoice Period End"));
    END;

    [External]
    PROCEDURE ValidateNextInvoicePeriod@9();
    VAR
      InvFrom@1001 : Date;
      InvTo@1000 : Date;
    BEGIN
      if NextInvoicePeriod = '' then begin
        "Amount per Period" := 0;
        exit;
      end;
      Currency.InitRoundingPrecision;
      InvFrom := "Next Invoice Period Start";
      InvTo := "Next Invoice Period End";

      DaysInThisInvPeriod := InvTo - InvFrom + 1;

      if Prepaid then begin
        TempDate := CalculateEndPeriodDate(true,"Next Invoice Date");
        DaysInFullInvPeriod := TempDate - "Next Invoice Date" + 1;
      end else begin
        TempDate := CalculateEndPeriodDate(false,"Next Invoice Date");
        DaysInFullInvPeriod := "Next Invoice Date" - TempDate + 1;
        if (DaysInFullInvPeriod = DaysInThisInvPeriod) and ("Next Invoice Date" = "Expiration Date") then
          DaysInFullInvPeriod := CalculateEndPeriodDate(true,TempDate) - TempDate + 1;
      end;

      if DaysInFullInvPeriod = DaysInThisInvPeriod then
        "Amount per Period" :=
          ROUND("Annual Amount" / ReturnNoOfPer("Invoice Period"),Currency."Amount Rounding Precision")
      else
        "Amount per Period" := ROUND(
            ServContractMgt.CalcContractAmount(Rec,InvFrom,InvTo),Currency."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1007 : Integer;No4@1006 : Code[20];Type5@1009 : Integer;No5@1008 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record "Source Code Setup";
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
    BEGIN
      if "Change Status" <> "Change Status"::Open then
        exit;

      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Service Management",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@11(StatCheckParameter@1000 : Boolean);
    BEGIN
      SuspendChangeStatus := StatCheckParameter;
    END;

    [External]
    PROCEDURE UpdateCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record "Contact Business Relation";
      Cont@1002 : Record Contact;
      Cust@1004 : Record Customer;
    BEGIN
      if Cust.GET(CustomerNo) then begin
        CLEAR(ServOrderMgt);
        ContactNo := ServOrderMgt.FindContactInformation(Cust."No.");
        if Cont.GET(ContactNo) then begin
          "Contact No." := Cont."No.";
          "Contact Name" := Cont.Name;
          "Phone No." := Cont."Phone No.";
          "E-Mail" := Cont."E-Mail";
        end else begin
          if Cust."Primary Contact No." <> '' then
            "Contact No." := Cust."Primary Contact No."
          else
            if ContBusRel.FindByRelation(ContBusRel."Link to Table"::Customer,"Customer No.") then
              "Contact No." := ContBusRel."Contact No.";
          "Contact Name" := Cust.Contact;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record "Contact Business Relation";
      Cont@1002 : Record Contact;
      Cust@1001 : Record Customer;
    BEGIN
      if Cust.GET(CustomerNo) then begin
        CLEAR(ServOrderMgt);
        ContactNo := ServOrderMgt.FindContactInformation("Bill-to Customer No.");
        if Cont.GET(ContactNo) then begin
          "Bill-to Contact No." := Cont."No.";
          "Bill-to Contact" := Cont.Name;
        end else begin
          if Cust."Primary Contact No." <> '' then
            "Bill-to Contact No." := Cust."Primary Contact No."
          else
            if ContBusRel.FindByRelation(ContBusRel."Link to Table"::Customer,"Bill-to Customer No.") then
              "Bill-to Contact No." := ContBusRel."Contact No.";
          "Bill-to Contact" := Cust.Contact;
        end;
      end;
    END;

    [External]
    PROCEDURE UpdateCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record "Contact Business Relation";
      Cust@1006 : Record Customer;
      Cont@1005 : Record Contact;
    BEGIN
      if Cont.GET(ContactNo) then begin
        "Contact No." := Cont."No.";
        "Phone No." := Cont."Phone No.";
        "E-Mail" := Cont."E-Mail";
        if Cont.Type = Cont.Type::Person then
          "Contact Name" := Cont.Name
        else
          if Cust.GET("Customer No.") then
            "Contact Name" := Cust.Contact
          else
            "Contact Name" := ''
      end else begin
        "Contact Name" := '';
        "Phone No." := '';
        "E-Mail" := '';
        exit;
      end;

      if ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.") then begin
        if ("Customer No." <> '') and
           ("Customer No." <> ContBusinessRelation."No.")
        then
          ERROR(Text044,Cont."No.",Cont.Name,"Customer No.");
        if "Customer No." = '' then begin
          SkipContact := true;
          VALIDATE("Customer No.",ContBusinessRelation."No.");
          SkipContact := false;
        end;
      end else
        ERROR(Text051,Cont."No.",Cont.Name);

      if ("Customer No." = "Bill-to Customer No.") or
         ("Bill-to Customer No." = '')
      then
        VALIDATE("Bill-to Contact No.","Contact No.");
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record "Contact Business Relation";
      Cust@1004 : Record Customer;
      Cont@1003 : Record Contact;
    BEGIN
      if Cont.GET(ContactNo) then begin
        "Bill-to Contact No." := Cont."No.";
        if Cont.Type = Cont.Type::Person then
          "Bill-to Contact" := Cont.Name
        else
          if Cust.GET("Bill-to Customer No.") then
            "Bill-to Contact" := Cust.Contact
          else
            "Bill-to Contact" := '';
      end else begin
        "Bill-to Contact" := '';
        exit;
      end;

      if ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.") then begin
        if "Bill-to Customer No." = '' then begin
          SkipBillToContact := true;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := false;
        end else
          if "Bill-to Customer No." <> ContBusinessRelation."No." then
            ERROR(Text044,Cont."No.",Cont.Name,"Bill-to Customer No.");
      end else
        ERROR(Text051,Cont."No.",Cont.Name);
    END;

    LOCAL PROCEDURE EvenDistribution@12(VAR ServContractLine2@1001 : Record "Service Contract Line");
    VAR
      OldServContractLine@1002 : Record "Service Contract Line";
      AmountToAdjust@1000 : Decimal;
    BEGIN
      ServContractLine2.LOCKTABLE;
      CALCFIELDS("Calcd. Annual Amount");
      AmountToAdjust := ("Annual Amount" - "Calcd. Annual Amount") / ServContractLine2.COUNT;
      if ServContractLine2.FIND('-') then
        repeat
          OldServContractLine := ServContractLine2;
          ServContractLine2.VALIDATE(
            "Line Amount",
            ROUND(ServContractLine2."Line Amount" + AmountToAdjust,Currency."Amount Rounding Precision"));
          ServContractLine2.MODIFY;
          if ServMgtSetup."Register Contract Changes" then
            ServContractLine2.LogContractLineChanges(OldServContractLine);
        until ServContractLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE ProfitBasedDistribution@13(VAR ServContractLine2@1001 : Record "Service Contract Line");
    VAR
      OldServContractLine@1002 : Record "Service Contract Line";
      TotalProfit@1000 : Decimal;
    BEGIN
      ServContractLine2.LOCKTABLE;
      ServContractLine2.CALCSUMS(Profit);
      TotalProfit := ServContractLine2.Profit;
      if TotalProfit = 0 then
        ERROR(Text059);
      CALCFIELDS("Calcd. Annual Amount");
      if ServContractLine2.FIND('-') then
        repeat
          OldServContractLine := ServContractLine2;
          ServContractLine2.VALIDATE(
            "Line Amount",
            ROUND(
              ServContractLine."Line Amount" +
              ("Annual Amount" - "Calcd. Annual Amount") *
              (ServContractLine2.Profit / TotalProfit),Currency."Amount Rounding Precision"));
          ServContractLine2.MODIFY;
          if ServMgtSetup."Register Contract Changes" then
            ServContractLine2.LogContractLineChanges(OldServContractLine);
        until ServContractLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE AmountBasedDistribution@14(VAR ServContractLine2@1000 : Record "Service Contract Line");
    VAR
      OldServContractLine@1001 : Record "Service Contract Line";
    BEGIN
      ServContractLine2.LOCKTABLE;
      CALCFIELDS("Calcd. Annual Amount");
      if "Calcd. Annual Amount" = 0 then
        ERROR(Text060);
      if ServContractLine2.FIND('-') then
        repeat
          OldServContractLine := ServContractLine2;
          ServContractLine2.VALIDATE(
            "Line Amount",
            ROUND(
              ServContractLine2."Line Amount" +
              ("Annual Amount" - "Calcd. Annual Amount") *
              (ServContractLine2."Line Amount" / "Calcd. Annual Amount"),
              Currency."Amount Rounding Precision"));
          ServContractLine2.MODIFY;
          if ServMgtSetup."Register Contract Changes" then
            ServContractLine2.LogContractLineChanges(OldServContractLine);
        until ServContractLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE DistributeAmounts@17();
    VAR
      OldServContractLine@1002 : Record "Service Contract Line";
      ContractAmountDistribution@1000 : Page "Contract Amount Distribution";
      Result@1001 : Integer;
    BEGIN
      if not "Allow Unbalanced Amounts" then begin
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type","Contract Type");
        ServContractLine.SETRANGE("Contract No.","Contract No.");
        if not ServContractLine.FIND('-') and ("Annual Amount" <> 0) then
          ERROR(Text058);
        CALCFIELDS("Calcd. Annual Amount");
        if "Annual Amount" <> "Calcd. Annual Amount" then begin
          ServContractLine.SETRANGE("Line Value",0);
          if ServContractLine.FIND('-') then
            ServContractLine.TESTFIELD("Line Value");
          ServContractLine.SETRANGE("Line Value");
          if ServContractLine.NEXT <> 0 then begin
            CLEAR(ContractAmountDistribution);
            ContractAmountDistribution.SetValues("Annual Amount","Calcd. Annual Amount");
            if ContractAmountDistribution.RUNMODAL = ACTION::Yes then begin
              Result := ContractAmountDistribution.GetResult;
              Currency.InitRoundingPrecision;
              case Result of
                0:
                  EvenDistribution(ServContractLine);
                1:
                  ProfitBasedDistribution(ServContractLine);
                2:
                  AmountBasedDistribution(ServContractLine);
              end;
              CALCFIELDS("Calcd. Annual Amount");
              if "Annual Amount" <> "Calcd. Annual Amount" then begin
                ServContractLine.VALIDATE(
                  "Line Amount",
                  ServContractLine."Line Amount" + "Annual Amount" - "Calcd. Annual Amount");
                ServContractLine.MODIFY;
              end;
              ServContractLine.SETFILTER("Line Amount",'<=0');
              if ServContractLine.FIND('-') then
                MESSAGE(Text061,ServContractLine.FIELDCAPTION("Line Amount"));
            end else
              ERROR('');
          end else begin
            OldServContractLine := ServContractLine;
            ServContractLine.VALIDATE("Line Amount","Annual Amount");
            ServContractLine.MODIFY;
            if ServMgtSetup."Register Contract Changes" then
              ServContractLine.LogContractLineChanges(OldServContractLine);
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@15(Hide@1000 : Boolean);
    BEGIN
      HideValidationDialog := Hide;
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@42();
    BEGIN
      if UserMgt.GetServiceFilter <> '' then begin
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
        FILTERGROUP(0);
      end;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    [External]
    PROCEDURE ShowDocDim@18();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Contract Type","Contract No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CalcInvPeriodDuration@1102();
    BEGIN
      if "Invoice Period" <> "Invoice Period"::None then
        case "Invoice Period" of
          "Invoice Period"::Month:
            EVALUATE(InvPeriodDuration,'<1M>');
          "Invoice Period"::"Two Months":
            EVALUATE(InvPeriodDuration,'<2M>');
          "Invoice Period"::Quarter:
            EVALUATE(InvPeriodDuration,'<3M>');
          "Invoice Period"::"Half Year":
            EVALUATE(InvPeriodDuration,'<6M>');
          "Invoice Period"::Year:
            EVALUATE(InvPeriodDuration,'<1Y>');
        end;
    END;

    LOCAL PROCEDURE CheckChangeStatus@20();
    BEGIN
      if (Status <> Status::Canceled) and
         not SuspendChangeStatus
      then
        TESTFIELD("Change Status","Change Status"::Open);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR ServiceContractHeader@1000 : Record "Service Contract Header";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

