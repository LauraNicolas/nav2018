OBJECT Table 7152 Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Analysis View Entry"=rimd,
                TableData "Item Analysis View Budg. Entry"=rimd;
    DataCaptionFields="Analysis Area",Code,Name;
    OnDelete=VAR
               ItemAnalysisViewFilter@1000 : Record "Item Analysis View Filter";
             BEGIN
               ItemAnalysisViewReset;
               ItemAnalysisViewFilter.SETRANGE("Analysis Area","Analysis Area");
               ItemAnalysisViewFilter.SETRANGE("Analysis View Code",Code);
               ItemAnalysisViewFilter.DELETEALL;
             END;

    CaptionML=ENU=Item Analysis View;
    LookupPageID="Item Analysis View List";
  }
  FIELDS
  {
    { 1   ;   ;Analysis Area       ;Option        ;CaptionML=ENU=Analysis Area;
                                                   OptionCaptionML=ENU=Sales,Purchase,Inventory;
                                                   OptionString=Sales,Purchase,Inventory }
    { 2   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Last Entry No.      ;Integer       ;CaptionML=ENU=Last Entry No.;
                                                   Editable=false }
    { 5   ;   ;Last Budget Entry No.;Integer      ;CaptionML=ENU=Last Budget Entry No.;
                                                   Editable=false }
    { 6   ;   ;Last Date Updated   ;Date          ;CaptionML=ENU=Last Date Updated;
                                                   Editable=false }
    { 7   ;   ;Update on Posting   ;Boolean       ;CaptionML=ENU=Update on Posting;
                                                   Editable=false }
    { 8   ;   ;Blocked             ;Boolean       ;OnValidate=BEGIN
                                                                if not Blocked and "Refresh When Unblocked" then begin
                                                                  ValidateDelete(FIELDCAPTION(Blocked));
                                                                  ItemAnalysisViewReset;
                                                                  "Refresh When Unblocked" := false;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Blocked }
    { 9   ;   ;Item Filter         ;Code250       ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";
                                                                ItemAnalysisViewBudgetEntry@1001 : Record "Item Analysis View Budg. Entry";
                                                                Item@1002 : Record Item;
                                                              BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and (xRec."Item Filter" = '') and ("Item Filter" <> '') then begin
                                                                  ValidateModify(FIELDCAPTION("Item Filter"));
                                                                  Item.SETFILTER("No.","Item Filter");
                                                                  if Item.FIND('-') then
                                                                    repeat
                                                                      Item.MARK := true;
                                                                    until Item.NEXT = 0;
                                                                  Item.SETRANGE("No.");
                                                                  if Item.FIND('-') then
                                                                    repeat
                                                                      if not Item.MARK then begin
                                                                        ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                        ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                        ItemAnalysisViewEntry.SETRANGE("Item No.",Item."No.");
                                                                        ItemAnalysisViewEntry.DELETEALL;
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Item No.",Item."No.");
                                                                        ItemAnalysisViewBudgetEntry.DELETEALL;
                                                                      end;
                                                                    until Item.NEXT = 0;
                                                                end;
                                                                if ("Last Entry No." <> 0) and ("Item Filter" <> xRec."Item Filter") and (xRec."Item Filter" <> '') then begin
                                                                  ValidateDelete(FIELDCAPTION("Item Filter"));
                                                                  ItemAnalysisViewReset;
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Item Filter }
    { 10  ;   ;Location Filter     ;Code250       ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                Location@1000 : Record Location;
                                                                TempLocation@1003 : TEMPORARY Record Location;
                                                              BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and (xRec."Location Filter" = '') and
                                                                   ("Location Filter" <> xRec."Location Filter")
                                                                then begin
                                                                  ValidateModify(FIELDCAPTION("Location Filter"));
                                                                  if Location.FIND('-') then
                                                                    repeat
                                                                      TempLocation := Location;
                                                                      TempLocation.INSERT;
                                                                    until Location.NEXT = 0;
                                                                  TempLocation.INIT;
                                                                  TempLocation.Code := '';
                                                                  TempLocation.INSERT;
                                                                  TempLocation.SETFILTER(Code,"Location Filter");
                                                                  TempLocation.DELETEALL;
                                                                  TempLocation.SETRANGE(Code);
                                                                  if TempLocation.FIND('-') then
                                                                    repeat
                                                                      ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                      ItemAnalysisViewEntry.SETRANGE("Location Code",TempLocation.Code);
                                                                      ItemAnalysisViewEntry.DELETEALL;
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Location Code",TempLocation.Code);
                                                                      ItemAnalysisViewBudgetEntry.DELETEALL;
                                                                    until TempLocation.NEXT = 0
                                                                end;
                                                                if ("Last Entry No." <> 0) and (xRec."Location Filter" <> '') and
                                                                   ("Location Filter" <> xRec."Location Filter")
                                                                then begin
                                                                  ValidateDelete(FIELDCAPTION("Location Filter"));
                                                                  ItemAnalysisViewReset;
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Location Filter }
    { 11  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and ("Starting Date" <> xRec."Starting Date") then begin
                                                                  ValidateDelete(FIELDCAPTION("Starting Date"));
                                                                  ItemAnalysisViewReset;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 12  ;   ;Date Compression    ;Option        ;InitValue=Day;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and ("Date Compression" <> xRec."Date Compression") then begin
                                                                  ValidateDelete(FIELDCAPTION("Date Compression"));
                                                                  ItemAnalysisViewReset;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Date Compression;
                                                   OptionCaptionML=ENU=None,Day,Week,Month,Quarter,Year,Period;
                                                   OptionString=None,Day,Week,Month,Quarter,Year,Period }
    { 13  ;   ;Dimension 1 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 1 Code",20,'',Code,"Analysis Area") then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 1 Code"),"Dimension 1 Code",xRec."Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 1 Code }
    { 14  ;   ;Dimension 2 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 2 Code",21,'',Code,"Analysis Area") then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 2 Code"),"Dimension 2 Code",xRec."Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 2 Code }
    { 15  ;   ;Dimension 3 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 3 Code",22,'',Code,"Analysis Area") then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 3 Code"),"Dimension 3 Code",xRec."Dimension 3 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 3 Code }
    { 17  ;   ;Include Budgets     ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and xRec."Include Budgets" and not "Include Budgets" then begin
                                                                  ValidateDelete(FIELDCAPTION("Include Budgets"));
                                                                  AnalysisviewBudgetReset;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "Item Budget Name"=R;
                                                   CaptionML=ENU=Include Budgets }
    { 18  ;   ;Refresh When Unblocked;Boolean     ;CaptionML=ENU=Refresh When Unblocked }
  }
  KEYS
  {
    {    ;"Analysis Area",Code                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot use the same dimension twice in the same analysis view.';
      Text001@1001 : TextConst 'ENU=The dimension %1 is used in the analysis view %2 %3.';
      Text002@1002 : TextConst 'ENU=" You must therefore retain the dimension to keep consistency between the analysis view and the Item entries."';
      Text004@1004 : TextConst 'ENU=All analysis views must be updated with the latest Item entries and Item budget entries.';
      Text005@1005 : TextConst 'ENU=" Both blocked and unblocked analysis views must be updated."';
      Text007@1007 : TextConst 'ENU=" Note, you must remove the checkmark in the blocked field before updating the blocked analysis views.\"';
      Text008@1008 : TextConst 'ENU=Currently, %1 analysis views are not updated.';
      Text009@1009 : TextConst 'ENU=" Do you wish to update these analysis views?"';
      Text010@1010 : TextConst 'ENU=All analysis views must be updated with the latest Item entries.';
      Text011@1011 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be deleted.';
      Text012@1012 : TextConst 'ENU=\You will have to update again.\\Do you want to enter a new value in the %1 field?';
      Text013@1013 : TextConst 'ENU=The update has been interrupted in response to the warning.';
      Text014@1014 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be changed as well.\\';
      Text015@1015 : TextConst 'ENU=Do you want to enter a new value in the %1 field?';
      ItemAnalysisViewEntry@1016 : Record "Item Analysis View Entry";
      NewItemAnalysisViewEntry@1017 : Record "Item Analysis View Entry";
      ItemAnalysisViewBudgetEntry@1018 : Record "Item Analysis View Budg. Entry";
      NewItemAnalysisViewBudgetEntry@1019 : Record "Item Analysis View Budg. Entry";
      Dim@1020 : Record Dimension;
      Text017@1003 : TextConst 'ENU=When you enable %1, you need to update the analysis view. Do you want to update the analysis view now?';

    LOCAL PROCEDURE ModifyDim@2(DimFieldName@1000 : Text[100];DimValue@1001 : Code[20];xDimValue@1002 : Code[20]);
    BEGIN
      if ("Last Entry No." <> 0) and (DimValue <> xDimValue) then begin
        if DimValue <> '' then begin
          ValidateDelete(DimFieldName);
          ItemAnalysisViewReset;
        end;
        if DimValue = '' then begin
          ValidateModify(DimFieldName);
          case DimFieldName of
            FIELDCAPTION("Dimension 1 Code"):
              begin
                ItemAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
              end;
            FIELDCAPTION("Dimension 2 Code"):
              begin
                ItemAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
              end;
            FIELDCAPTION("Dimension 3 Code"):
              begin
                ItemAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
              end;
          end;
          ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
          ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
          ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
          ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
          if ItemAnalysisViewEntry.FIND('-') then
            repeat
              ItemAnalysisViewEntry.DELETE;
              NewItemAnalysisViewEntry := ItemAnalysisViewEntry;
              case DimFieldName of
                FIELDCAPTION("Dimension 1 Code"):
                  NewItemAnalysisViewEntry."Dimension 1 Value Code" := '';
                FIELDCAPTION("Dimension 2 Code"):
                  NewItemAnalysisViewEntry."Dimension 2 Value Code" := '';
                FIELDCAPTION("Dimension 3 Code"):
                  NewItemAnalysisViewEntry."Dimension 3 Value Code" := '';
              end;
              InsertItemAnalysisViewEntry;
            until ItemAnalysisViewEntry.NEXT = 0;
          if ItemAnalysisViewBudgetEntry.FIND('-') then
            repeat
              ItemAnalysisViewBudgetEntry.DELETE;
              NewItemAnalysisViewBudgetEntry := ItemAnalysisViewBudgetEntry;
              case DimFieldName of
                FIELDCAPTION("Dimension 1 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 1 Value Code" := '';
                FIELDCAPTION("Dimension 2 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 2 Value Code" := '';
                FIELDCAPTION("Dimension 3 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 3 Value Code" := '';
              end;
              InsertAnalysisViewBudgetEntry;
            until ItemAnalysisViewBudgetEntry.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertItemAnalysisViewEntry@1();
    BEGIN
      if not NewItemAnalysisViewEntry.INSERT then begin
        NewItemAnalysisViewEntry.FIND;
        NewItemAnalysisViewEntry."Sales Amount (Actual)" :=
          NewItemAnalysisViewEntry."Sales Amount (Actual)" + ItemAnalysisViewEntry."Sales Amount (Actual)";
        NewItemAnalysisViewEntry."Cost Amount (Actual)" :=
          NewItemAnalysisViewEntry."Cost Amount (Actual)" + ItemAnalysisViewEntry."Cost Amount (Actual)";
        NewItemAnalysisViewEntry.Quantity :=
          NewItemAnalysisViewEntry.Quantity + ItemAnalysisViewEntry.Quantity;
        NewItemAnalysisViewEntry."Invoiced Quantity" :=
          NewItemAnalysisViewEntry."Invoiced Quantity" + ItemAnalysisViewEntry."Invoiced Quantity";
        NewItemAnalysisViewEntry.MODIFY;
      end;
    END;

    LOCAL PROCEDURE InsertAnalysisViewBudgetEntry@6();
    BEGIN
      if not NewItemAnalysisViewBudgetEntry.INSERT then begin
        NewItemAnalysisViewBudgetEntry.FIND;
        NewItemAnalysisViewBudgetEntry."Sales Amount" :=
          NewItemAnalysisViewBudgetEntry."Sales Amount" + ItemAnalysisViewBudgetEntry."Sales Amount";
        NewItemAnalysisViewBudgetEntry.MODIFY;
      end;
    END;

    [External]
    PROCEDURE ItemAnalysisViewReset@5();
    VAR
      ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
      ItemAnalysisViewEntry.DELETEALL;
      "Last Entry No." := 0;
      "Last Date Updated" := 0D;
      AnalysisviewBudgetReset;
    END;

    [External]
    PROCEDURE CheckDimensionsAreRetained@3(ObjectType@1000 : Integer;ObjectID@1001 : Integer;OnlyIfIncludeBudgets@1002 : Boolean);
    BEGIN
      RESET;
      if OnlyIfIncludeBudgets then
        SETRANGE("Include Budgets",true);
      if FIND('-') then
        repeat
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 1 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 2 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 3 Code",Code,Name);
        until NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimIsRetained@8(ObjectType@1000 : Integer;ObjectID@1001 : Integer;DimCode@1002 : Code[20];AnalysisViewCode@1003 : Code[10];AnalysisViewName@1004 : Text[50]);
    VAR
      SelectedDim@1005 : Record "Selected Dimension";
    BEGIN
      if DimCode <> '' then
        if not SelectedDim.GET(USERID,ObjectType,ObjectID,'',DimCode) then
          ERROR(
            Text001 +
            Text002,
            DimCode,AnalysisViewCode,AnalysisViewName);
    END;

    [External]
    PROCEDURE CheckViewsAreUpdated@4();
    VAR
      ValueEntry@1000 : Record "Value Entry";
      ItemBudgetEntry@1001 : Record "Item Budget Entry";
      UpdateItemAnalysisView@1002 : Codeunit "Update Item Analysis View";
      NoNotUpdated@1003 : Integer;
    BEGIN
      if ValueEntry.FINDLAST or ItemBudgetEntry.FINDLAST then begin
        NoNotUpdated := 0;
        RESET;
        if FIND('-') then
          repeat
            if ("Last Entry No." < ValueEntry."Entry No.") or
               "Include Budgets" and ("Last Budget Entry No." < ItemBudgetEntry."Entry No.")
            then
              NoNotUpdated := NoNotUpdated + 1;
          until NEXT = 0;
        if NoNotUpdated > 0 then
          if CONFIRM(
               Text004 +
               Text005 +
               Text007 +
               Text008 +
               Text009,true,NoNotUpdated)
          then begin
            if FIND('-') then
              repeat
                if Blocked then begin
                  "Refresh When Unblocked" := true;
                  "Last Budget Entry No." := 0;
                  MODIFY;
                end else
                  UpdateItemAnalysisView.Update(Rec,2,true);
              until NEXT = 0;
          end else
            ERROR(Text010);
      end;
    END;

    [External]
    PROCEDURE ValidateDelete@10(FieldName@1000 : Text);
    VAR
      Question@1001 : Text;
    BEGIN
      Question := STRSUBSTNO(Text011 + Text012,FieldName);
      if not CONFIRM(Question,true) then
        ERROR(Text013);
    END;

    LOCAL PROCEDURE AnalysisviewBudgetReset@9();
    VAR
      ItemAnalysisViewBudgetEntry@1000 : Record "Item Analysis View Budg. Entry";
    BEGIN
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
      ItemAnalysisViewBudgetEntry.DELETEALL;
      "Last Budget Entry No." := 0;
    END;

    LOCAL PROCEDURE ValidateModify@11(FieldName@1000 : Text);
    VAR
      Question@1001 : Text;
    BEGIN
      Question := STRSUBSTNO(Text014 + Text015,FieldName);
      if not CONFIRM(Question,true) then
        ERROR(Text013);
    END;

    [External]
    PROCEDURE CopyAnalysisViewFilters@12(ObjectType@1000 : Integer;ObjectID@1001 : Integer;AnalysisArea@1006 : Integer;AnalysisViewCode@1002 : Code[10]);
    VAR
      AnalysisSelectedDim@1003 : Record "Analysis Selected Dimension";
      Item@1004 : Record Item;
      Location@1005 : Record Location;
    BEGIN
      if GET(AnalysisArea,AnalysisViewCode) then begin
        if "Item Filter" <> '' then
          if AnalysisSelectedDim.GET(
               USERID,ObjectType,ObjectID,AnalysisArea,AnalysisViewCode,Item.TABLECAPTION)
          then begin
            if AnalysisSelectedDim."Dimension Value Filter" = '' then begin
              AnalysisSelectedDim."Dimension Value Filter" := "Item Filter";
              AnalysisSelectedDim.MODIFY;
            end;
          end else begin
            AnalysisSelectedDim.INIT;
            AnalysisSelectedDim."User ID" := USERID;
            AnalysisSelectedDim."Object Type" := ObjectType;
            AnalysisSelectedDim."Object ID" := ObjectID;
            AnalysisSelectedDim."Analysis Area" := AnalysisArea;
            AnalysisSelectedDim."Analysis View Code" := AnalysisViewCode;
            AnalysisSelectedDim."Dimension Code" := Item.TABLECAPTION;
            AnalysisSelectedDim."Dimension Value Filter" := "Item Filter";
            AnalysisSelectedDim.INSERT;
          end;
        if "Location Filter" <> '' then
          if AnalysisSelectedDim.GET(
               USERID,ObjectType,ObjectID,AnalysisArea,AnalysisViewCode,Location.TABLECAPTION)
          then begin
            if AnalysisSelectedDim."Dimension Value Filter" = '' then begin
              AnalysisSelectedDim."Dimension Value Filter" := "Location Filter";
              AnalysisSelectedDim.MODIFY;
            end;
          end else begin
            AnalysisSelectedDim.INIT;
            AnalysisSelectedDim."User ID" := USERID;
            AnalysisSelectedDim."Object Type" := ObjectType;
            AnalysisSelectedDim."Object ID" := ObjectID;
            AnalysisSelectedDim."Analysis Area" := AnalysisArea;
            AnalysisSelectedDim."Analysis View Code" := AnalysisViewCode;
            AnalysisSelectedDim."Dimension Code" := Location.TABLECAPTION;
            AnalysisSelectedDim."Dimension Value Filter" := "Location Filter";
            AnalysisSelectedDim.INSERT;
          end;
      end;
    END;

    [External]
    PROCEDURE SetUpdateOnPosting@13(NewUpdateOnPosting@1000 : Boolean);
    BEGIN
      if "Update on Posting" = NewUpdateOnPosting then
        exit;

      if not "Update on Posting" and NewUpdateOnPosting then
        if not CONFIRM(STRSUBSTNO(Text017,FIELDCAPTION("Update on Posting")),false) then
          exit;

      "Update on Posting" := NewUpdateOnPosting;
      if "Update on Posting" then begin
        MODIFY;
        CODEUNIT.RUN(CODEUNIT::"Update Item Analysis View",Rec);
        FIND;
      end;
    END;

    BEGIN
    END.
  }
}

