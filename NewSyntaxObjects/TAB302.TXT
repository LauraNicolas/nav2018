OBJECT Table 302 Finance Charge Memo Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               SalesSetup.GET;
               if "No." = '' then begin
                 SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
                 SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
                 NoSeriesMgt.InitSeries(
                   SalesSetup."Fin. Chrg. Memo Nos.",xRec."No. Series","Posting Date",
                   "No.","No. Series");
               end;
               "Posting Description" := STRSUBSTNO(Text000,"No.");
               if ("No. Series" <> '') and
                  (SalesSetup."Fin. Chrg. Memo Nos." = SalesSetup."Issued Fin. Chrg. M. Nos.")
               then
                 "Issuing No. Series" := "No. Series"
               else
                 NoSeriesMgt.SetDefaultSeries("Issuing No. Series",SalesSetup."Issued Fin. Chrg. M. Nos.");
               if "Posting Date" = 0D then
                 "Posting Date" := WORKDATE;
               "Document Date" := WORKDATE;
               "Due Date" := WORKDATE;
               if GETFILTER("Customer No.") <> '' then
                 if GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") then
                   VALIDATE("Customer No.",GETRANGEMIN("Customer No."));
             END;

    OnDelete=BEGIN
               FinChrgMemoIssue.DeleteHeader(Rec,IssuedFinChrgMemoHdr);

               FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
               FinChrgMemoLine.DELETEALL;

               FinChrgMemoCommentLine.SETRANGE(Type,FinChrgMemoCommentLine.Type::"Finance Charge Memo");
               FinChrgMemoCommentLine.SETRANGE("No.","No.");
               FinChrgMemoCommentLine.DELETEALL;

               if IssuedFinChrgMemoHdr."No." <> '' then begin
                 COMMIT;
                 if CONFIRM(
                      Text001,true,
                      IssuedFinChrgMemoHdr."No.")
                 then begin
                   IssuedFinChrgMemoHdr.SETRECFILTER;
                   IssuedFinChrgMemoHdr.PrintRecords(true,false,false)
                 end;
               end;
             END;

    CaptionML=ENU=Finance Charge Memo Header;
    LookupPageID="Finance Charge Memo List";
    DrillDownPageID="Finance Charge Memo List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Fin. Chrg. Memo Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                                "Posting Description" := STRSUBSTNO(Text000,"No.");
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Customer No.") then
                                                                  if Undo then begin
                                                                    "Customer No." := xRec."Customer No.";
                                                                    exit;
                                                                  end;
                                                                if "Customer No." = '' then
                                                                  exit;
                                                                Cust.GET("Customer No.");
                                                                Name := Cust.Name;
                                                                "Name 2" := Cust."Name 2";
                                                                Address := Cust.Address;
                                                                "Address 2" := Cust."Address 2";
                                                                "Post Code" := Cust."Post Code";
                                                                City := Cust.City;
                                                                County := Cust.County;
                                                                Contact := Cust.Contact;
                                                                "Country/Region Code" := Cust."Country/Region Code";
                                                                "Language Code" := Cust."Language Code";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Shortcut Dimension 1 Code" := Cust."Global Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := Cust."Global Dimension 2 Code";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                VALIDATE("Fin. Charge Terms Code",Cust."Fin. Charge Terms Code");

                                                                CreateDim(DATABASE::Customer,"Customer No.");
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 10  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 11  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Currency Code") then
                                                                  if Undo then begin
                                                                    "Currency Code" := xRec."Currency Code";
                                                                    exit;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 14  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=false }
    { 18  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group;
                                                   Editable=false }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 20  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 22  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Document Date") then
                                                                  if Undo then begin
                                                                    "Document Date" := xRec."Document Date";
                                                                    exit;
                                                                  end;
                                                                VALIDATE("Fin. Charge Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 23  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   OnValidate=BEGIN
                                                                if CurrFieldNo = FIELDNO("Fin. Charge Terms Code") then
                                                                  if Undo then begin
                                                                    "Fin. Charge Terms Code" := xRec."Fin. Charge Terms Code";
                                                                    exit;
                                                                  end;
                                                                if "Fin. Charge Terms Code" <> '' then begin
                                                                  FinChrgTerms.GET("Fin. Charge Terms Code");
                                                                  "Post Interest" := FinChrgTerms."Post Interest";
                                                                  "Post Additional Fee" := FinChrgTerms."Post Additional Fee";
                                                                  if "Document Date" <> 0D then
                                                                    "Due Date" := CALCDATE(FinChrgTerms."Due Date Calculation","Document Date");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 26  ;   ;Post Interest       ;Boolean       ;CaptionML=ENU=Post Interest }
    { 27  ;   ;Post Additional Fee ;Boolean       ;CaptionML=ENU=Post Additional Fee }
    { 29  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Fin. Charge Comment Line" WHERE (Type=CONST("Finance Charge Memo"),
                                                                                                       "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 31  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Finance Charge Memo Line"."Remaining Amount" WHERE ("Finance Charge Memo No."=FIELD("No.")));
                                                   CaptionML=ENU=Remaining Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Interest Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Finance Charge Memo Line".Amount WHERE ("Finance Charge Memo No."=FIELD("No."),
                                                                                                            Type=CONST("Customer Ledger Entry")));
                                                   CaptionML=ENU=Interest Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 33  ;   ;Additional Fee      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Finance Charge Memo Line".Amount WHERE ("Finance Charge Memo No."=FIELD("No."),
                                                                                                            Type=CONST("G/L Account")));
                                                   CaptionML=ENU=Additional Fee;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 34  ;   ;VAT Amount          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Finance Charge Memo Line"."VAT Amount" WHERE ("Finance Charge Memo No."=FIELD("No.")));
                                                   CaptionML=ENU=VAT Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 37  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 38  ;   ;Issuing No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Issuing No. Series" <> '' then begin
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
                                                                  SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Issued Fin. Chrg. M. Nos.","Issuing No. Series");
                                                                end;
                                                                TESTFIELD("Issuing No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with FinChrgMemoHeader do begin
                                                                FinChrgMemoHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
                                                                SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
                                                                if NoSeriesMgt.LookupSeries(SalesSetup."Issued Fin. Chrg. M. Nos.","Issuing No. Series") then
                                                                  VALIDATE("Issuing No. Series");
                                                                Rec := FinChrgMemoHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Issuing No. Series }
    { 39  ;   ;Issuing No.         ;Code20        ;CaptionML=ENU=Issuing No. }
    { 41  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 42  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 43  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Customer No.","Currency Code"           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.","Customer No.",Name,"Due Date"     }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Finance Charge Memo %1';
      Text001@1001 : TextConst 'ENU=Do you want to print finance charge memo %1?';
      Text002@1002 : TextConst 'ENU=This change will cause the existing lines to be deleted for this finance charge memo.\\';
      Text003@1003 : TextConst 'ENU=Do you want to continue?';
      Text004@1004 : TextConst 'ENU=There is not enough space to insert the text.';
      Text005@1005 : TextConst 'ENU=Deleting this document will cause a gap in the number series for finance charge memos.';
      Text006@1006 : TextConst 'ENU=An empty finance charge memo %1 will be created to fill this gap in the number series.\\';
      Currency@1029 : Record Currency;
      SalesSetup@1007 : Record "Sales & Receivables Setup";
      CustPostingGr@1008 : Record "Customer Posting Group";
      FinChrgTerms@1009 : Record "Finance Charge Terms";
      CurrForFinChrgTerms@1010 : Record "Currency for Fin. Charge Terms";
      FinChrgText@1011 : Record "Finance Charge Text";
      FinChrgMemoHeader@1012 : Record "Finance Charge Memo Header";
      FinChrgMemoLine@1013 : Record "Finance Charge Memo Line";
      FinChrgMemoCommentLine@1014 : Record "Fin. Charge Comment Line";
      Cust@1015 : Record Customer;
      PostCode@1016 : Record "Post Code";
      IssuedFinChrgMemoHdr@1017 : Record "Issued Fin. Charge Memo Header";
      GenBusPostingGrp@1018 : Record "Gen. Business Posting Group";
      CurrExchRate@1019 : Record "Currency Exchange Rate";
      ApplicationManagement@1028 : Codeunit ApplicationManagement;
      NoSeriesMgt@1020 : Codeunit NoSeriesManagement;
      TransferExtendedText@1021 : Codeunit "Transfer Extended Text";
      FinChrgMemoIssue@1022 : Codeunit "FinChrgMemo-Issue";
      DimMgt@1023 : Codeunit DimensionManagement;
      NextLineNo@1024 : Integer;
      LineSpacing@1025 : Integer;
      FinChrgMemoTotal@1026 : Decimal;
      OK@1027 : Boolean;

    [External]
    PROCEDURE AssistEdit@5(OldFinChrgMemoHeader@1000 : Record "Finance Charge Memo Header") : Boolean;
    BEGIN
      with FinChrgMemoHeader do begin
        FinChrgMemoHeader := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
        SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
        if NoSeriesMgt.SelectSeries(SalesSetup."Fin. Chrg. Memo Nos.",OldFinChrgMemoHeader."No. Series","No. Series") then begin
          SalesSetup.GET;
          SalesSetup.TESTFIELD("Fin. Chrg. Memo Nos.");
          SalesSetup.TESTFIELD("Issued Fin. Chrg. M. Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := FinChrgMemoHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE Undo@6() : Boolean;
    BEGIN
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
      if FinChrgMemoLine.FIND('-') then begin
        COMMIT;
        if not
           CONFIRM(
             Text002 +
             Text003,
             false)
        then
          exit(true);
        FinChrgMemoLine.DELETEALL;
        MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE InsertLines@3();
    VAR
      CaptionManagement@1000 : Codeunit CaptionManagement;
    BEGIN
      TESTFIELD("Fin. Charge Terms Code");
      FinChrgTerms.GET("Fin. Charge Terms Code");
      FinChrgMemoLine.RESET;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
      FinChrgMemoLine."Finance Charge Memo No." := "No.";
      if FinChrgMemoLine.FIND('+') then
        NextLineNo := FinChrgMemoLine."Line No."
      else
        NextLineNo := 0;
      if (FinChrgMemoLine.Type <> FinChrgMemoLine.Type::" ") or
         (FinChrgMemoLine.Description <> '')
      then begin
        LineSpacing := 10000;
        InsertBlankLine(FinChrgMemoLine."Line Type"::"Finance Charge Memo Line");
      end;
      if FinChrgTerms."Additional Fee (LCY)" <> 0 then begin
        NextLineNo := NextLineNo + 10000;
        FinChrgMemoLine.INIT;
        FinChrgMemoLine."Line No." := NextLineNo;
        FinChrgMemoLine.Type := FinChrgMemoLine.Type::"G/L Account";
        TESTFIELD("Customer Posting Group");
        CustPostingGr.GET("Customer Posting Group");
        FinChrgMemoLine.VALIDATE("No.",CustPostingGr.GetAdditionalFeeAccount);
        FinChrgMemoLine.Description :=
          COPYSTR(
            CaptionManagement.GetTranslatedFieldCaption(
              "Language Code",DATABASE::"Currency for Fin. Charge Terms",
              CurrForFinChrgTerms.FIELDNO("Additional Fee")),1,100);
        if "Currency Code" = '' then
          FinChrgMemoLine.VALIDATE(Amount,FinChrgTerms."Additional Fee (LCY)")
        else begin
          if not CurrForFinChrgTerms.GET("Fin. Charge Terms Code","Currency Code") then
            CurrForFinChrgTerms."Additional Fee" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",
                FinChrgTerms."Additional Fee (LCY)",CurrExchRate.ExchangeRate(
                  "Posting Date","Currency Code"));
          FinChrgMemoLine.VALIDATE(Amount,CurrForFinChrgTerms."Additional Fee");
        end;
        FinChrgMemoLine.INSERT;
        if TransferExtendedText.FinChrgMemoCheckIfAnyExtText(FinChrgMemoLine,false) then
          TransferExtendedText.InsertFinChrgMemoExtText(FinChrgMemoLine);
      end;
      FinChrgMemoLine."Line No." := FinChrgMemoLine."Line No." + 10000;
      FinanceChargeRounding(Rec);
      InsertBeginTexts(Rec);
      InsertEndTexts(Rec);
      MODIFY;
    END;

    [External]
    PROCEDURE UpdateLines@8(FinChrgMemoHeader2@1000 : Record "Finance Charge Memo Header");
    BEGIN
      FinChrgMemoLine.RESET;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinChrgMemoHeader2."No.");
      OK := FinChrgMemoLine.FIND('-');
      while OK do begin
        OK :=
          (FinChrgMemoLine.Type = FinChrgMemoLine.Type::" ") and
          (FinChrgMemoLine."Attached to Line No." = 0);
        if OK then begin
          FinChrgMemoLine.DELETE(true);
          OK := FinChrgMemoLine.NEXT <> 0;
        end;
      end;
      OK := FinChrgMemoLine.FIND('+');
      while OK do begin
        OK :=
          (FinChrgMemoLine.Type = FinChrgMemoLine.Type::" ") and
          (FinChrgMemoLine."Attached to Line No." = 0);
        if OK then begin
          FinChrgMemoLine.DELETE(true);
          OK := FinChrgMemoLine.NEXT(-1) <> 0;
        end;
      end;
      FinChrgMemoLine.SETRANGE("Line Type",FinChrgMemoLine."Line Type"::Rounding);
      if FinChrgMemoLine.FINDFIRST then
        FinChrgMemoLine.DELETE(true);

      FinChrgMemoLine.SETRANGE("Line Type");
      FinChrgMemoLine.FINDLAST;
      FinChrgMemoLine."Line No." := FinChrgMemoLine."Line No." + 10000;
      FinanceChargeRounding(FinChrgMemoHeader2);

      InsertBeginTexts(FinChrgMemoHeader2);
      InsertEndTexts(FinChrgMemoHeader2);
    END;

    LOCAL PROCEDURE InsertBeginTexts@11(FinChrgMemoHeader2@1000 : Record "Finance Charge Memo Header");
    BEGIN
      FinChrgText.RESET;
      FinChrgText.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader2."Fin. Charge Terms Code");
      FinChrgText.SETRANGE(Position,FinChrgText.Position::Beginning);

      FinChrgMemoLine.RESET;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinChrgMemoHeader2."No.");
      FinChrgMemoLine."Finance Charge Memo No." := FinChrgMemoHeader2."No.";
      if FinChrgMemoLine.FIND('-') then begin
        LineSpacing := FinChrgMemoLine."Line No." div (FinChrgText.COUNT + 2);
        if LineSpacing = 0 then
          ERROR(Text004);
      end else
        LineSpacing := 10000;
      NextLineNo := 0;
      InsertTextLines(FinChrgMemoHeader2);
    END;

    LOCAL PROCEDURE InsertEndTexts@12(FinChrgMemoHeader2@1000 : Record "Finance Charge Memo Header");
    BEGIN
      FinChrgText.RESET;
      FinChrgText.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader2."Fin. Charge Terms Code");
      FinChrgText.SETRANGE(Position,FinChrgText.Position::Ending);

      FinChrgMemoLine.RESET;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinChrgMemoHeader2."No.");
      FinChrgMemoLine."Finance Charge Memo No." := FinChrgMemoHeader2."No.";
      if FinChrgMemoLine.FIND('+') then
        NextLineNo := FinChrgMemoLine."Line No."
      else begin
        FinChrgMemoLine.SETFILTER("Line Type",'%1|%2',
          FinChrgMemoLine."Line Type"::"Finance Charge Memo Line",
          FinChrgMemoLine."Line Type"::Rounding);
        if FinChrgMemoLine.FIND('+') then
          NextLineNo := FinChrgMemoLine."Line No."
        else
          NextLineNo := 0;
      end;
      FinChrgMemoLine.SETRANGE("Line Type");
      LineSpacing := 10000;
      InsertTextLines(FinChrgMemoHeader2);
    END;

    LOCAL PROCEDURE InsertTextLines@4(FinChrgMemoHeader2@1000 : Record "Finance Charge Memo Header");
    BEGIN
      if FinChrgText.FIND('-') then begin
        if FinChrgText.Position = FinChrgText.Position::Ending then
          InsertBlankLine(FinChrgMemoLine."Line Type"::"Ending Text");
        if not FinChrgTerms.GET(FinChrgMemoHeader2."Fin. Charge Terms Code") then
          FinChrgTerms.INIT;

        FinChrgMemoHeader2.CALCFIELDS(
          "Remaining Amount","Interest Amount","Additional Fee","VAT Amount");
        FinChrgMemoTotal :=
          FinChrgMemoHeader2."Remaining Amount" + FinChrgMemoHeader2."Interest Amount" +
          FinChrgMemoHeader2."Additional Fee" + FinChrgMemoHeader2."VAT Amount";

        repeat
          NextLineNo := NextLineNo + LineSpacing;
          FinChrgMemoLine.INIT;
          FinChrgMemoLine."Line No." := NextLineNo;
          FinChrgMemoLine.Description :=
            COPYSTR(
              STRSUBSTNO(
                FinChrgText.Text,
                FinChrgMemoHeader2."Document Date",
                FinChrgMemoHeader2."Due Date",
                FinChrgTerms."Interest Rate",
                FinChrgMemoHeader2."Remaining Amount",
                FinChrgMemoHeader2."Interest Amount",
                FinChrgMemoHeader2."Additional Fee",
                FORMAT(FinChrgMemoTotal,0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
                FinChrgMemoHeader2."Currency Code",
                FinChrgMemoHeader2."Posting Date"),
              1,MAXSTRLEN(FinChrgMemoLine.Description));
          if FinChrgText.Position = FinChrgText.Position::Beginning then
            FinChrgMemoLine."Line Type" := FinChrgMemoLine."Line Type"::"Beginning Text"
          else
            FinChrgMemoLine."Line Type" := FinChrgMemoLine."Line Type"::"Ending Text";
          FinChrgMemoLine.INSERT;
        until FinChrgText.NEXT = 0;
        if FinChrgText.Position = FinChrgText.Position::Beginning then
          InsertBlankLine(FinChrgMemoLine."Line Type"::"Beginning Text");
      end;
    END;

    LOCAL PROCEDURE InsertBlankLine@9(LineType@1000 : Integer);
    BEGIN
      NextLineNo := NextLineNo + LineSpacing;
      FinChrgMemoLine.INIT;
      FinChrgMemoLine."Line No." := NextLineNo;
      FinChrgMemoLine."Line Type" := LineType;
      FinChrgMemoLine.INSERT;
    END;

    [External]
    PROCEDURE PrintRecords@1();
    VAR
      FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      with FinChrgMemoHeader do begin
        COPY(Rec);
        ReportSelection.Print(ReportSelection.Usage::"F.C.Test",FinChrgMemoHeader,"Customer No.");
      end;
    END;

    [External]
    PROCEDURE ConfirmDeletion@2() : Boolean;
    BEGIN
      FinChrgMemoIssue.TestDeleteHeader(Rec,IssuedFinChrgMemoHdr);
      if IssuedFinChrgMemoHdr."No." <> '' then
        if not CONFIRM(
             Text005 +
             Text006 +
             Text003,true,
             IssuedFinChrgMemoHdr."No.")
        then
          exit;
      exit(true);
    END;

    LOCAL PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1003 : Record "Source Code Setup";
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Finance Charge Memo",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    LOCAL PROCEDURE FinanceChargeRounding@10(FinanceChargeHeader@1001 : Record "Finance Charge Memo Header");
    VAR
      TotalAmountInclVAT@1004 : Decimal;
      FinanceChargeRoundingAmount@1000 : Decimal;
    BEGIN
      GetCurrency(FinanceChargeHeader);
      if Currency."Invoice Rounding Precision" = 0 then
        exit;

      FinanceChargeHeader.CALCFIELDS(
        "Interest Amount","Additional Fee","VAT Amount");

      TotalAmountInclVAT := FinanceChargeHeader."Interest Amount" +
        FinanceChargeHeader."Additional Fee" +
        FinanceChargeHeader."VAT Amount";
      FinanceChargeRoundingAmount :=
        -ROUND(
          TotalAmountInclVAT -
          ROUND(
            TotalAmountInclVAT,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      if FinanceChargeRoundingAmount <> 0 then begin
        CustPostingGr.GET(FinanceChargeHeader."Customer Posting Group");
        with FinChrgMemoLine do begin
          INIT;
          VALIDATE(Type,Type::"G/L Account");
          "System-Created Entry" := true;
          VALIDATE("No.",CustPostingGr.GetInvRoundingAccount);
          VALIDATE(
            Amount,
            ROUND(
              FinanceChargeRoundingAmount / (1 + ("VAT %" / 100)),
              Currency."Amount Rounding Precision"));
          "VAT Amount" := FinanceChargeRoundingAmount - Amount;
          "Line Type" := "Line Type"::Rounding;
          INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE GetCurrency@17(FinanceChargeHeader@1001 : Record "Finance Charge Memo Header");
    BEGIN
      with FinanceChargeHeader do
        if "Currency Code" = '' then
          Currency.InitRoundingPrecision
        else begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
    END;

    [External]
    PROCEDURE UpdateFinanceChargeRounding@7(FinanceChargeHeader@1000 : Record "Finance Charge Memo Header");
    VAR
      OldLineNo@1001 : Integer;
    BEGIN
      FinChrgMemoLine.RESET;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeHeader."No.");
      FinChrgMemoLine.SETRANGE("Line Type",FinChrgMemoLine."Line Type"::Rounding);
      if FinChrgMemoLine.FINDFIRST then
        FinChrgMemoLine.DELETE(true);

      FinChrgMemoLine.SETRANGE("Line Type");
      FinChrgMemoLine.SETFILTER(Type,'<>%1',FinChrgMemoLine.Type::" ");
      if FinChrgMemoLine.FINDLAST then begin
        OldLineNo := FinChrgMemoLine."Line No.";
        FinChrgMemoLine.SETRANGE(Type);
        if FinChrgMemoLine.NEXT <> 0 then
          FinChrgMemoLine."Line No." := OldLineNo + ((FinChrgMemoLine."Line No." - OldLineNo) / 2)
        else
          FinChrgMemoLine."Line No." := FinChrgMemoLine."Line No." + 10000;
      end else
        FinChrgMemoLine."Line No." := 10000;

      FinanceChargeRounding(FinanceChargeHeader);
    END;

    [External]
    PROCEDURE ShowDocDim@13();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    BEGIN
      if GETFILTER("Customer No.") <> '' then
        if GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") then
          exit(GETRANGEMAX("Customer No."));
    END;

    [External]
    PROCEDURE SetCustomerFromFilter@186();
    BEGIN
      if GetFilterCustNo <> '' then
        VALIDATE("Customer No.",GetFilterCustNo);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR FinanceChargeMemoHeader@1000 : Record "Finance Charge Memo Header";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

