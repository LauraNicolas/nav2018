OBJECT Codeunit 1543 Workflow Webhook Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Workflow Webhook Entry"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ResponseAlreadyReceivedErr@1000 : TextConst 'ENU=A response has already been received.';
      ResponseNotExpectedErr@1003 : TextConst 'ENU=A response is not expected.';
      UnsupportedRecordTypeErr@1002 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported.';
      UserUnableToCancelErr@1004 : TextConst '@@@="%1 = NAV USERID";ENU=User %1 does not have the permission necessary to cancel the item.';
      UserUnableToContinueErr@1005 : TextConst '@@@="%1 = NAV USERID";ENU=User %1 does not have the permission necessary to continue the item.';
      UserUnableToRejectErr@1006 : TextConst '@@@="%1 = NAV USERID";ENU=User %1 does not have the permission necessary to reject the item.';
      WorkflowStepInstanceIdNotFoundErr@1001 : TextConst '@@@="%1=Id value of a record.";ENU=The workflow step instance id %1 was not found.';

    [Integration(DEFAULT,FALSE)]
    LOCAL PROCEDURE OnCancelWorkflow@2(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnContinueWorkflow@1(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRejectWorkflow@3(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
    END;

    [External]
    PROCEDURE CanCancel@11(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry") : Boolean;
    VAR
      UserSetup@1001 : Record "User Setup";
    BEGIN
      if WorkflowWebhookEntry.Response <> WorkflowWebhookEntry.Response::Pending then
        exit(false);

      if UserSetup.GET(USERID) then
        if UserSetup."Approval Administrator" then
          exit(true);

      exit(WorkflowWebhookEntry."Initiated By User ID" = USERID);
    END;

    [External]
    PROCEDURE CanRequestApproval@23(RecordId@1000 : RecordID) : Boolean;
    VAR
      WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
    BEGIN
      // Checks if the given record can have an approval request made, based on whether or not there's already a pending approval for it.
      exit(not FindWorkflowWebhookEntryByRecordIdAndResponse(WorkflowWebhookEntry,RecordId,WorkflowWebhookEntry.Response::Pending));
    END;

    [External]
    PROCEDURE GetCanRequestAndCanCancel@16(RecordId@1000 : RecordID;VAR CanRequestApprovalForFlow@1001 : Boolean;VAR CanCancelApprovalForFlow@1002 : Boolean);
    VAR
      WorkflowWebhookEntry@1003 : Record "Workflow Webhook Entry";
    BEGIN
      if FindWorkflowWebhookEntryByRecordIdAndResponse(WorkflowWebhookEntry,RecordId,WorkflowWebhookEntry.Response::Pending) then begin
        CanCancelApprovalForFlow := CanCancel(WorkflowWebhookEntry);
        CanRequestApprovalForFlow := false;
      end else begin
        CanCancelApprovalForFlow := false;
        CanRequestApprovalForFlow := true;
      end;
    END;

    [External]
    PROCEDURE GetCanRequestAndCanCancelJournalBatch@22(GenJournalBatch@1000 : Record "Gen. Journal Batch";VAR CanRequestBatchApproval@1001 : Boolean;VAR CanCancelBatchApproval@1002 : Boolean;VAR CanRequestLineApprovals@1003 : Boolean);
    VAR
      GenJournalLine@1004 : Record "Gen. Journal Line";
    BEGIN
      // Helper method to check the General Journal Batch and all its lines for ability to request/cancel approval.
      // Journal pages' ribbon buttons only let users request approval for the batch or its individual lines, but not both.

      GetCanRequestAndCanCancel(GenJournalBatch.RECORDID,CanRequestBatchApproval,CanCancelBatchApproval);

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      if GenJournalLine.ISEMPTY then begin
        CanRequestLineApprovals := true;
        exit;
      end;

      GenJournalLine.FINDSET;
      repeat
        if not CanRequestApproval(GenJournalLine.RECORDID) then begin
          CanRequestLineApprovals := false;
          exit;
        end;
      until GenJournalLine.NEXT = 0;

      CanRequestLineApprovals := true;
    END;

    [External]
    PROCEDURE Cancel@6(VAR WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
      VerifyResponseExpected(WorkflowWebhookEntry);

      if not CanCancel(WorkflowWebhookEntry) then
        ERROR(UserUnableToCancelErr,USERID);

      WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Cancel);
      WorkflowWebhookEntry.MODIFY(true);

      OnCancelWorkflow(WorkflowWebhookEntry);
    END;

    [External]
    PROCEDURE CancelByStepInstanceId@20(Id@1000 : GUID);
    VAR
      WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
    BEGIN
      if not FindWorkflowWebhookEntryByStepInstance(WorkflowWebhookEntry,Id) then
        ERROR(WorkflowStepInstanceIdNotFoundErr,Id);

      Cancel(WorkflowWebhookEntry);
    END;

    [External]
    PROCEDURE CanContinue@13(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry") : Boolean;
    BEGIN
      exit(CanAct(WorkflowWebhookEntry));
    END;

    [External]
    PROCEDURE CanReject@26(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry") : Boolean;
    BEGIN
      exit(CanAct(WorkflowWebhookEntry));
    END;

    [External]
    PROCEDURE Continue@5(VAR WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
      VerifyResponseExpected(WorkflowWebhookEntry);

      if not CanContinue(WorkflowWebhookEntry) then
        ERROR(UserUnableToContinueErr,USERID);

      WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Continue);
      WorkflowWebhookEntry.MODIFY(true);

      OnContinueWorkflow(WorkflowWebhookEntry);
    END;

    [External]
    PROCEDURE ContinueByStepInstanceId@24(Id@1000 : GUID);
    VAR
      WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
    BEGIN
      if not FindWorkflowWebhookEntryByStepInstance(WorkflowWebhookEntry,Id) then
        ERROR(WorkflowStepInstanceIdNotFoundErr,Id);

      Continue(WorkflowWebhookEntry);
    END;

    [External]
    PROCEDURE GenerateRequest@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      WorkflowWebhookEntry@1002 : Record "Workflow Webhook Entry";
    BEGIN
      CreateWorkflowWebhookEntry(RecRef,WorkflowStepInstance,WorkflowWebhookEntry);

      SendWebhookNotificaton(WorkflowStepInstance);
    END;

    [External]
    PROCEDURE Reject@7(VAR WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
      VerifyResponseExpected(WorkflowWebhookEntry);

      if not CanReject(WorkflowWebhookEntry) then
        ERROR(UserUnableToRejectErr,USERID);

      WorkflowWebhookEntry.VALIDATE(Response,WorkflowWebhookEntry.Response::Reject);
      WorkflowWebhookEntry.MODIFY(true);

      OnRejectWorkflow(WorkflowWebhookEntry);
    END;

    [External]
    PROCEDURE RejectByStepInstanceId@25(Id@1000 : GUID);
    VAR
      WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";
    BEGIN
      if not FindWorkflowWebhookEntryByStepInstance(WorkflowWebhookEntry,Id) then
        ERROR(WorkflowStepInstanceIdNotFoundErr,Id);

      Reject(WorkflowWebhookEntry);
    END;

    PROCEDURE SendWebhookNotificaton@17(WorkflowStepInstance@1002 : Record "Workflow Step Instance");
    VAR
      WorkflowWebhookNotification@1001 : Codeunit "Workflow Webhook Notification";
      IsTaskSchedulerAllowed@1000 : Boolean;
    BEGIN
      WorkflowWebhookNotification.StartNotification(WorkflowStepInstance.ID);

      IsTaskSchedulerAllowed := true;
      OnFindTaskSchedulerAllowed(IsTaskSchedulerAllowed);

      if IsTaskSchedulerAllowed then
        TASKSCHEDULER.CREATETASK(CODEUNIT::"Workflow Webhook Notify Task",0,true,
          COMPANYNAME,0DT,WorkflowStepInstance.RECORDID)
      else
        CODEUNIT.RUN(CODEUNIT::"Workflow Webhook Notify Task",WorkflowStepInstance);
    END;

    LOCAL PROCEDURE CanAct@21(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry") : Boolean;
    VAR
      UserSetup@1002 : Record "User Setup";
      WorkflowStepArgument@1001 : Record "Workflow Step Argument";
    BEGIN
      if WorkflowWebhookEntry.Response <> WorkflowWebhookEntry.Response::Pending then
        exit(false);

      if ISNULLGUID(WorkflowWebhookEntry."Response Argument") then
        exit(false);

      if not WorkflowStepArgument.GET(WorkflowWebhookEntry."Response Argument") then
        exit(false);

      case WorkflowStepArgument."Response Type" of
        WorkflowStepArgument."Response Type"::"User ID":
          begin
            if WorkflowStepArgument."Response User ID" <> USERID then
              exit(false);

            UserSetup.INIT;
            UserSetup.FILTERGROUP(-1);
            UserSetup.SETFILTER("Approver ID",'%1',USERID);
            UserSetup.SETFILTER(Substitute,'%1',USERID);
            exit(UserSetup.FINDFIRST)
          end
        else
          exit(false)
      end;
    END;

    LOCAL PROCEDURE CreateWorkflowWebhookEntry@9(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance";VAR WorkflowWebhookEntry@1002 : Record "Workflow Webhook Entry");
    VAR
      Customer@1008 : Record Customer;
      GenJournalBatch@1006 : Record "Gen. Journal Batch";
      GenJournalLine@1007 : Record "Gen. Journal Line";
      Item@1009 : Record Item;
      PurchaseHeader@1003 : Record "Purchase Header";
      SalesHeader@1004 : Record "Sales Header";
      Vendor@1010 : Record Vendor;
      WorkflowStepArgument@1005 : Record "Workflow Step Argument";
    BEGIN
      if ISNULLGUID(WorkflowStepInstance.Argument) or not WorkflowStepArgument.GET(WorkflowStepInstance.Argument) then
        CLEAR(WorkflowStepArgument);

      WorkflowWebhookEntry.INIT;
      WorkflowWebhookEntry."Workflow Step Instance ID" := WorkflowStepInstance.ID;
      WorkflowWebhookEntry."Initiated By User ID" := USERID;
      WorkflowWebhookEntry.Response := GetInitialResponseValue(WorkflowStepInstance.ID,WorkflowStepInstance."Workflow Code",
          WorkflowStepArgument);
      WorkflowWebhookEntry."Response Argument" := WorkflowStepArgument.ID;
      WorkflowWebhookEntry."Date-Time Initiated" := CURRENTDATETIME;
      WorkflowWebhookEntry."Last Date-Time Modified" := WorkflowWebhookEntry."Date-Time Initiated";
      WorkflowWebhookEntry."Record ID" := RecRef.RECORDID;

      case RecRef.NUMBER of
        DATABASE::Customer:
          begin
            RecRef.SETTABLE(Customer);
            WorkflowWebhookEntry."Data ID" := Customer.Id;
          end;
        DATABASE::"Gen. Journal Batch":
          begin
            RecRef.SETTABLE(GenJournalBatch);
            WorkflowWebhookEntry."Data ID" := GenJournalBatch.Id;
          end;
        DATABASE::"Gen. Journal Line":
          begin
            RecRef.SETTABLE(GenJournalLine);
            WorkflowWebhookEntry."Data ID" := GenJournalLine.Id;
          end;
        DATABASE::Item:
          begin
            RecRef.SETTABLE(Item);
            WorkflowWebhookEntry."Data ID" := Item.Id;
          end;
        DATABASE::"Purchase Header":
          begin
            RecRef.SETTABLE(PurchaseHeader);
            WorkflowWebhookEntry."Data ID" := PurchaseHeader.Id;
          end;
        DATABASE::"Sales Header":
          begin
            RecRef.SETTABLE(SalesHeader);
            WorkflowWebhookEntry."Data ID" := SalesHeader.Id;
          end;
        DATABASE::Vendor:
          begin
            RecRef.SETTABLE(Vendor);
            WorkflowWebhookEntry."Data ID" := Vendor.Id;
          end;
        else
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      end;

      WorkflowWebhookEntry.INSERT(true);
    END;

    LOCAL PROCEDURE GetInitialResponseValue@10(WorkflowStepInstanceID@1000 : GUID;WorkflowCode@1003 : Code[20];WorkflowStepArgument@1006 : Record "Workflow Step Argument") : Integer;
    VAR
      DummyWorkflowWebhookEntry@1004 : Record "Workflow Webhook Entry";
      WorkflowStepInstance@1001 : Record "Workflow Step Instance";
      WorkflowStep@1002 : Record "Workflow Step";
      WorkflowWebhookEvents@1005 : Codeunit "Workflow Webhook Events";
      ResponseTypeNotExpected@1007 : Option;
    BEGIN
      ResponseTypeNotExpected := WorkflowStepArgument."Response Type"::"Not Expected";

      if WorkflowStepArgument.ISEMPTY or (WorkflowStepArgument."Response Type" <> ResponseTypeNotExpected) then begin
        WorkflowStepInstance.INIT;
        WorkflowStepInstance.SETRANGE(ID,WorkflowStepInstanceID);
        WorkflowStepInstance.SETRANGE("Workflow Code",WorkflowCode);

        if WorkflowStepInstance.FINDSET then begin
          repeat
            if WorkflowStep.GET(WorkflowStepInstance."Workflow Code",WorkflowStepInstance."Workflow Step ID") then begin
              if WorkflowStep."Function Name" = WorkflowWebhookEvents.WorkflowWebhookResponseReceivedEventCode then
                exit(DummyWorkflowWebhookEntry.Response::Pending);
            end;
          until WorkflowStepInstance.NEXT = 0;
        end;
      end;

      exit(DummyWorkflowWebhookEntry.Response::NotExpected);
    END;

    LOCAL PROCEDURE FindWorkflowWebhookEntryByStepInstance@4(VAR WorkflowWebhookEntry@1001 : Record "Workflow Webhook Entry";Id@1000 : GUID) : Boolean;
    BEGIN
      WorkflowWebhookEntry.SETCURRENTKEY("Workflow Step Instance ID");
      WorkflowWebhookEntry.SETRANGE("Workflow Step Instance ID",Id);

      exit(WorkflowWebhookEntry.FINDFIRST);
    END;

    PROCEDURE FindWorkflowWebhookEntryByRecordIdAndResponse@15(VAR WorkflowWebhookEntry@1002 : Record "Workflow Webhook Entry";RecordId@1000 : RecordID;ResponseStatus@1001 : Option) : Boolean;
    BEGIN
      WorkflowWebhookEntry.SETRANGE("Record ID",RecordId);
      WorkflowWebhookEntry.SETRANGE(Response,ResponseStatus);

      exit(WorkflowWebhookEntry.FINDFIRST);
    END;

    PROCEDURE FindAndCancel@18(RecordId@1000 : RecordID);
    VAR
      WorkflowWebhookEntry@1002 : Record "Workflow Webhook Entry";
    BEGIN
      // Searches for and then cancels the webhook entry with the given ID, if possible.
      // (Used by the various Cancel ribbon buttons.)
      if FindWorkflowWebhookEntryByRecordIdAndResponse(WorkflowWebhookEntry,RecordId,WorkflowWebhookEntry.Response::Pending) and
         CanCancel(WorkflowWebhookEntry)
      then
        Cancel(WorkflowWebhookEntry);
    END;

    PROCEDURE RenameRecord@19(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      WorkflowWebhookEntry@1002 : Record "Workflow Webhook Entry";
    BEGIN
      WorkflowWebhookEntry.SETRANGE("Record ID",OldRecordId);
      if WorkflowWebhookEntry.FINDFIRST then
        WorkflowWebhookEntry.MODIFYALL("Record ID",NewRecordId,true);
    END;

    LOCAL PROCEDURE VerifyResponseExpected@12(WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry");
    BEGIN
      if WorkflowWebhookEntry.Response = WorkflowWebhookEntry.Response::NotExpected then
        ERROR(ResponseNotExpectedErr);

      if WorkflowWebhookEntry.Response <> WorkflowWebhookEntry.Response::Pending then
        ERROR(ResponseAlreadyReceivedErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnFindTaskSchedulerAllowed@14(VAR IsTaskSchedulingAllowed@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

