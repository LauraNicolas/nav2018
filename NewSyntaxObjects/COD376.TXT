OBJECT Codeunit 376 Check Entry Set Recon.-No.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot be %1';
      BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry";

    [External]
    PROCEDURE ToggleReconNo@5(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";VAR BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";ChangeAmount@1002 : Boolean);
    BEGIN
      BankAccLedgEntry.LOCKTABLE;
      CheckLedgEntry.LOCKTABLE;
      BankAccReconLine.LOCKTABLE;
      BankAccReconLine.FIND;
      if CheckLedgEntry."Statement No." = '' then begin
        SetReconNo(CheckLedgEntry,BankAccReconLine);
        BankAccReconLine."Applied Amount" := BankAccReconLine."Applied Amount" - CheckLedgEntry.Amount;
        BankAccReconLine."Applied Entries" := BankAccReconLine."Applied Entries" + 1;
      end else begin
        RemoveReconNo(CheckLedgEntry,BankAccReconLine,true);
        BankAccReconLine."Applied Amount" := BankAccReconLine."Applied Amount" + CheckLedgEntry.Amount;
        BankAccReconLine."Applied Entries" := BankAccReconLine."Applied Entries" - 1;
      end;
      if BankAccReconLine."Applied Entries" = 1 then
        BankAccReconLine."Check No." := CheckLedgEntry."Check No."
      else
        BankAccReconLine."Check No." := '';
      if ChangeAmount then
        BankAccReconLine.VALIDATE("Statement Amount",BankAccReconLine."Applied Amount")
      else
        BankAccReconLine.VALIDATE("Statement Amount");
      BankAccReconLine.MODIFY;
    END;

    [External]
    PROCEDURE SetReconNo@2(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";VAR BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      CheckLedgEntry.TESTFIELD(Open,true);
      if (CheckLedgEntry."Statement Status" <> CheckLedgEntry."Statement Status"::Open) and
         (CheckLedgEntry."Statement Status" <>
          CheckLedgEntry."Statement Status"::"Check Entry Applied")
      then
        CheckLedgEntry.FIELDERROR(
          "Statement Status",STRSUBSTNO(Text000,CheckLedgEntry."Statement Status"));
      CheckLedgEntry.TESTFIELD("Statement No.",'');
      CheckLedgEntry.TESTFIELD("Statement Line No.",0);
      if not (CheckLedgEntry."Entry Status" in
              [CheckLedgEntry."Entry Status"::Posted,CheckLedgEntry."Entry Status"::"Financially Voided"])
      then
        CheckLedgEntry.FIELDERROR(
          "Entry Status",STRSUBSTNO(Text000,CheckLedgEntry."Entry Status"));
      CheckLedgEntry.TESTFIELD("Bank Account No.",BankAccReconLine."Bank Account No.");
      CheckLedgEntry."Statement Status" := CheckLedgEntry."Statement Status"::"Check Entry Applied";
      CheckLedgEntry."Statement No." := BankAccReconLine."Statement No.";
      CheckLedgEntry."Statement Line No." := BankAccReconLine."Statement Line No.";
      CheckLedgEntry.MODIFY;

      BankAccLedgEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
      BankAccLedgEntry.TESTFIELD(Open,true);
      if (BankAccLedgEntry."Statement Status" <> BankAccLedgEntry."Statement Status"::Open) and
         (BankAccLedgEntry."Statement Status" <>
          BankAccLedgEntry."Statement Status"::"Check Entry Applied")
      then
        BankAccLedgEntry.FIELDERROR(
          "Statement Status",STRSUBSTNO(Text000,BankAccLedgEntry."Statement Status"));
      BankAccLedgEntry.TESTFIELD("Statement No.",'');
      BankAccLedgEntry.TESTFIELD("Statement Line No.",0);
      BankAccLedgEntry."Statement Status" :=
        BankAccLedgEntry."Statement Status"::"Check Entry Applied";
      BankAccLedgEntry."Statement No." := '';
      BankAccLedgEntry."Statement Line No." := 0;
      BankAccLedgEntry.MODIFY;
    END;

    [External]
    PROCEDURE RemoveReconNo@3(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";VAR BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";Test@1002 : Boolean);
    VAR
      CheckLedgEntry2@1003 : Record "Check Ledger Entry";
    BEGIN
      CheckLedgEntry.TESTFIELD(Open,true);
      if Test then begin
        CheckLedgEntry.TESTFIELD(
          "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
        CheckLedgEntry.TESTFIELD("Statement No.",BankAccReconLine."Statement No.");
        CheckLedgEntry.TESTFIELD("Statement Line No.",BankAccReconLine."Statement Line No.");
      end;
      CheckLedgEntry.TESTFIELD("Bank Account No.",BankAccReconLine."Bank Account No.");
      CheckLedgEntry."Statement Status" := CheckLedgEntry."Statement Status"::Open;
      CheckLedgEntry."Statement No." := '';
      CheckLedgEntry."Statement Line No." := 0;
      CheckLedgEntry.MODIFY;

      CheckLedgEntry2.RESET;
      CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
      CheckLedgEntry2.SETRANGE(
        "Bank Account Ledger Entry No.",CheckLedgEntry."Bank Account Ledger Entry No.");
      CheckLedgEntry2.SETRANGE(
        "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
      if not CheckLedgEntry2.FINDFIRST then begin
        BankAccLedgEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
        BankAccLedgEntry.TESTFIELD(Open,true);
        if Test then begin
          BankAccLedgEntry.TESTFIELD(
            "Statement Status",BankAccLedgEntry."Statement Status"::"Check Entry Applied");
          BankAccLedgEntry.TESTFIELD("Statement No.",'');
          BankAccLedgEntry.TESTFIELD("Statement Line No.",0);
        end;
        BankAccLedgEntry."Statement Status" := BankAccLedgEntry."Statement Status"::Open;
        BankAccLedgEntry."Statement No." := '';
        BankAccLedgEntry."Statement Line No." := 0;
        BankAccLedgEntry.MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

