OBJECT Table 363 Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Analysis View Entry"=rimd,
                TableData "Analysis View Budget Entry"=rimd;
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               AnalysisViewFilter@1000 : Record "Analysis View Filter";
             BEGIN
               AnalysisViewReset;
               AnalysisViewFilter.SETRANGE("Analysis View Code",Code);
               AnalysisViewFilter.DELETEALL;
             END;

    CaptionML=ENU=Analysis View;
    LookupPageID="Analysis View List";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Account Source      ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and ("Account Source" <> xRec."Account Source") then
                                                                  ValidateDelete(FIELDCAPTION("Account Source"));
                                                                VerificationForCashFlow;
                                                                AnalysisViewReset;
                                                                "Account Filter" := '';
                                                              END;

                                                   CaptionML=ENU=Account Source;
                                                   OptionCaptionML=ENU=G/L Account,Cash Flow Account;
                                                   OptionString="G/L Account","Cash Flow Account" }
    { 4   ;   ;Last Entry No.      ;Integer       ;CaptionML=ENU=Last Entry No. }
    { 5   ;   ;Last Budget Entry No.;Integer      ;CaptionML=ENU=Last Budget Entry No. }
    { 6   ;   ;Last Date Updated   ;Date          ;CaptionML=ENU=Last Date Updated }
    { 7   ;   ;Update on Posting   ;Boolean       ;OnValidate=BEGIN
                                                                VerificationForCashFlow;
                                                              END;

                                                   CaptionML=ENU=Update on Posting;
                                                   Editable=false }
    { 8   ;   ;Blocked             ;Boolean       ;OnValidate=BEGIN
                                                                if not Blocked and "Refresh When Unblocked" then begin
                                                                  ValidateDelete(FIELDCAPTION(Blocked));
                                                                  AnalysisViewReset;
                                                                  "Refresh When Unblocked" := false;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Blocked }
    { 9   ;   ;Account Filter      ;Code250       ;TableRelation=IF ("Account Source"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Account Source"=CONST("Cash Flow Account")) "Cash Flow Account";
                                                   OnValidate=VAR
                                                                AnalysisViewEntry@1000 : Record "Analysis View Entry";
                                                                AnalysisViewBudgetEntry@1001 : Record "Analysis View Budget Entry";
                                                                GLAcc@1002 : Record "G/L Account";
                                                                CFAccount@1003 : Record "Cash Flow Account";
                                                              BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if "Account Source" = "Account Source"::"G/L Account" then begin
                                                                  if ("Last Entry No." <> 0) and (xRec."Account Filter" = '') and ("Account Filter" <> '')
                                                                  then begin
                                                                    ValidateModify(FIELDCAPTION("Account Filter"));
                                                                    GLAcc.SETFILTER("No.","Account Filter");
                                                                    if GLAcc.FIND('-') then
                                                                      repeat
                                                                        GLAcc.MARK := true;
                                                                      until GLAcc.NEXT = 0;
                                                                    GLAcc.SETRANGE("No.");
                                                                    if GLAcc.FIND('-') then
                                                                      repeat
                                                                        if not GLAcc.MARK then begin
                                                                          AnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                          AnalysisViewEntry.SETRANGE("Account No.",GLAcc."No.");
                                                                          AnalysisViewEntry.DELETEALL;
                                                                          AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                          AnalysisViewBudgetEntry.SETRANGE("G/L Account No.",GLAcc."No.");
                                                                          AnalysisViewBudgetEntry.DELETEALL;
                                                                        end;
                                                                      until GLAcc.NEXT = 0;
                                                                  end;
                                                                  if ("Last Entry No." <> 0) and ("Account Filter" <> xRec."Account Filter") and (xRec."Account Filter" <> '')
                                                                  then  begin
                                                                    ValidateDelete(FIELDCAPTION("Account Filter"));
                                                                    AnalysisViewReset;
                                                                  end;
                                                                end else begin
                                                                  if ("Last Date Updated" <> 0D) and (xRec."Account Filter" = '') and ("Account Filter" <> '')
                                                                  then begin
                                                                    ValidateModify(FIELDCAPTION("Account Filter"));
                                                                    CFAccount.SETFILTER("No.","Account Filter");
                                                                    if CFAccount.FIND('-') then
                                                                      repeat
                                                                        CFAccount.MARK := true;
                                                                      until CFAccount.NEXT = 0;
                                                                    CFAccount.SETRANGE("No.");
                                                                    if CFAccount.FIND('-') then
                                                                      repeat
                                                                        if not CFAccount.MARK then begin
                                                                          AnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                          AnalysisViewEntry.SETRANGE("Account No.",CFAccount."No.");
                                                                          AnalysisViewEntry.DELETEALL;
                                                                        end;
                                                                      until CFAccount.NEXT = 0;
                                                                  end;
                                                                  if ("Last Date Updated" <> 0D) and ("Account Filter" <> xRec."Account Filter") and
                                                                     (xRec."Account Filter" <> '')
                                                                  then begin
                                                                    ValidateDelete(FIELDCAPTION("Account Filter"));
                                                                    AnalysisViewReset;
                                                                  end;
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Account Filter }
    { 10  ;   ;Business Unit Filter;Code250       ;TableRelation="Business Unit";
                                                   OnValidate=VAR
                                                                BusUnit@1000 : Record "Business Unit";
                                                                AnalysisViewEntry@1001 : Record "Analysis View Entry";
                                                                AnalysisViewBudgetEntry@1002 : Record "Analysis View Budget Entry";
                                                                TempBusUnit@1003 : TEMPORARY Record "Business Unit";
                                                              BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and (xRec."Business Unit Filter" = '') and
                                                                   ("Business Unit Filter" <> xRec."Business Unit Filter")
                                                                then begin
                                                                  ValidateModify(FIELDCAPTION("Business Unit Filter"));
                                                                  if BusUnit.FIND('-') then
                                                                    repeat
                                                                      TempBusUnit := BusUnit;
                                                                      TempBusUnit.INSERT;
                                                                    until BusUnit.NEXT = 0;
                                                                  TempBusUnit.INIT;
                                                                  TempBusUnit.Code := '';
                                                                  TempBusUnit.INSERT;
                                                                  TempBusUnit.SETFILTER(Code,"Business Unit Filter");
                                                                  TempBusUnit.DELETEALL;
                                                                  TempBusUnit.SETRANGE(Code);
                                                                  if TempBusUnit.FIND('-') then
                                                                    repeat
                                                                      AnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                      AnalysisViewEntry.SETRANGE("Business Unit Code",TempBusUnit.Code);
                                                                      AnalysisViewEntry.DELETEALL;
                                                                      AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                      AnalysisViewBudgetEntry.SETRANGE("Business Unit Code",TempBusUnit.Code);
                                                                      AnalysisViewBudgetEntry.DELETEALL;
                                                                    until TempBusUnit.NEXT = 0
                                                                end;
                                                                if ("Last Entry No." <> 0) and (xRec."Business Unit Filter" <> '') and
                                                                   ("Business Unit Filter" <> xRec."Business Unit Filter")
                                                                then begin
                                                                  ValidateDelete(FIELDCAPTION("Business Unit Filter"));
                                                                  AnalysisViewReset;
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Business Unit Filter }
    { 11  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if CheckIfLastEntryOrDateIsSet and ("Starting Date" <> xRec."Starting Date") then begin
                                                                  ValidateDelete(FIELDCAPTION("Starting Date"));
                                                                  AnalysisViewReset;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 12  ;   ;Date Compression    ;Option        ;InitValue=Day;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if CheckIfLastEntryOrDateIsSet and ("Date Compression" <> xRec."Date Compression") then begin
                                                                  ValidateDelete(FIELDCAPTION("Date Compression"));
                                                                  AnalysisViewReset;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Date Compression;
                                                   OptionCaptionML=ENU=None,Day,Week,Month,Quarter,Year,Period;
                                                   OptionString=None,Day,Week,Month,Quarter,Year,Period }
    { 13  ;   ;Dimension 1 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 1 Code",13,'',Code,0) then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 1 Code"),"Dimension 1 Code",xRec."Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 1 Code }
    { 14  ;   ;Dimension 2 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 2 Code",14,'',Code,0) then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 2 Code"),"Dimension 2 Code",xRec."Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 2 Code }
    { 15  ;   ;Dimension 3 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 3 Code",15,'',Code,0) then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 3 Code"),"Dimension 3 Code",xRec."Dimension 3 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 3 Code }
    { 16  ;   ;Dimension 4 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,false);
                                                                if Dim.CheckIfDimUsed("Dimension 4 Code",16,'',Code,0) then
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 4 Code"),"Dimension 4 Code",xRec."Dimension 4 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimension 4 Code }
    { 17  ;   ;Include Budgets     ;Boolean       ;OnValidate=BEGIN
                                                                VerificationForCashFlow;

                                                                TESTFIELD(Blocked,false);
                                                                if ("Last Entry No." <> 0) and (xRec."Include Budgets" = true) and ("Include Budgets" = false)
                                                                then begin
                                                                  ValidateDelete(FIELDCAPTION("Include Budgets"));
                                                                  AnalysisviewBudgetReset;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData "G/L Budget Name"=R;
                                                   CaptionML=ENU=Include Budgets }
    { 18  ;   ;Refresh When Unblocked;Boolean     ;CaptionML=ENU=Refresh When Unblocked }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;"Account Source"                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot use the same dimension twice in the same analysis view.';
      Text001@1001 : TextConst 'ENU=The dimension %1 is used in the analysis view %2 %3.';
      Text002@1002 : TextConst 'ENU=" You must therefore retain the dimension to keep consistency between the analysis view and the G/L entries."';
      Text004@1004 : TextConst 'ENU=All analysis views must be updated with the latest G/L entries and G/L budget entries.';
      Text005@1005 : TextConst 'ENU=" Both blocked and unblocked analysis views must be updated."';
      Text007@1007 : TextConst 'ENU=" Note, you must remove the checkmark in the blocked field before updating the blocked analysis views.\"';
      Text008@1008 : TextConst 'ENU=Currently, %1 analysis views are not updated.';
      Text009@1009 : TextConst 'ENU=" Do you wish to update these analysis views?"';
      Text010@1010 : TextConst 'ENU=All analysis views must be updated with the latest G/L entries.';
      Text011@1011 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be deleted.';
      Text012@1012 : TextConst 'ENU=\You will have to update again.\\Do you want to enter a new value in the %1 field?';
      Text013@1013 : TextConst 'ENU=The update has been interrupted in response to the warning.';
      Text014@1014 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be changed as well.\\';
      Text015@1015 : TextConst 'ENU=Do you want to enter a new value in the %1 field?';
      AnalysisViewEntry@1016 : Record "Analysis View Entry";
      NewAnalysisViewEntry@1017 : Record "Analysis View Entry";
      AnalysisViewBudgetEntry@1018 : Record "Analysis View Budget Entry";
      NewAnalysisViewBudgetEntry@1019 : Record "Analysis View Budget Entry";
      Dim@1020 : Record Dimension;
      Text016@1003 : TextConst 'ENU=%1 is not applicable for source type %2.';
      Text017@1006 : TextConst 'ENU=When you enable %1, you need to update the analysis view. Do you want to update the analysis view now?';
      SkipConfirmationDialogue@1021 : Boolean;

    LOCAL PROCEDURE ModifyDim@2(DimFieldName@1000 : Text[100];DimValue@1001 : Code[20];xDimValue@1002 : Code[20]);
    BEGIN
      if CheckIfLastEntryOrDateIsSet and (DimValue <> xDimValue) then begin
        if DimValue <> '' then begin
          ValidateDelete(DimFieldName);
          AnalysisViewReset;
        end;
        if DimValue = '' then begin
          ValidateModify(DimFieldName);
          case DimFieldName of
            FIELDCAPTION("Dimension 1 Code"):
              begin
                AnalysisViewEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
                if "Account Source" = "Account Source"::"G/L Account" then
                  AnalysisViewBudgetEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
              end;
            FIELDCAPTION("Dimension 2 Code"):
              begin
                AnalysisViewEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
                if "Account Source" = "Account Source"::"G/L Account" then
                  AnalysisViewBudgetEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
              end;
            FIELDCAPTION("Dimension 3 Code"):
              begin
                AnalysisViewEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
                if "Account Source" = "Account Source"::"G/L Account" then
                  AnalysisViewBudgetEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
              end;
            FIELDCAPTION("Dimension 4 Code"):
              begin
                AnalysisViewEntry.SETFILTER("Dimension 4 Value Code",'<>%1','');
                if "Account Source" = "Account Source"::"G/L Account" then
                  AnalysisViewBudgetEntry.SETFILTER("Dimension 4 Value Code",'<>%1','');
              end;
          end;
          AnalysisViewEntry.SETRANGE("Analysis View Code",Code);
          if "Account Source" = "Account Source"::"G/L Account" then
            AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
          if AnalysisViewEntry.FIND('-') then
            repeat
              AnalysisViewEntry.DELETE;
              NewAnalysisViewEntry := AnalysisViewEntry;
              case DimFieldName of
                FIELDCAPTION("Dimension 1 Code"):
                  NewAnalysisViewEntry."Dimension 1 Value Code" := '';
                FIELDCAPTION("Dimension 2 Code"):
                  NewAnalysisViewEntry."Dimension 2 Value Code" := '';
                FIELDCAPTION("Dimension 3 Code"):
                  NewAnalysisViewEntry."Dimension 3 Value Code" := '';
                FIELDCAPTION("Dimension 4 Code"):
                  NewAnalysisViewEntry."Dimension 4 Value Code" := '';
              end;
              InsertAnalysisViewEntry;
            until AnalysisViewEntry.NEXT = 0;
          if "Account Source" = "Account Source"::"G/L Account" then
            if AnalysisViewBudgetEntry.FIND('-') then
              repeat
                AnalysisViewBudgetEntry.DELETE;
                NewAnalysisViewBudgetEntry := AnalysisViewBudgetEntry;
                case DimFieldName of
                  FIELDCAPTION("Dimension 1 Code"):
                    NewAnalysisViewBudgetEntry."Dimension 1 Value Code" := '';
                  FIELDCAPTION("Dimension 2 Code"):
                    NewAnalysisViewBudgetEntry."Dimension 2 Value Code" := '';
                  FIELDCAPTION("Dimension 3 Code"):
                    NewAnalysisViewBudgetEntry."Dimension 3 Value Code" := '';
                  FIELDCAPTION("Dimension 4 Code"):
                    NewAnalysisViewBudgetEntry."Dimension 4 Value Code" := '';
                end;
                InsertAnalysisViewBudgetEntry;
              until AnalysisViewBudgetEntry.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertAnalysisViewEntry@1();
    BEGIN
      if not NewAnalysisViewEntry.INSERT then begin
        NewAnalysisViewEntry.FIND;
        NewAnalysisViewEntry.Amount := NewAnalysisViewEntry.Amount + AnalysisViewEntry.Amount;
        if "Account Source" = "Account Source"::"G/L Account" then begin
          NewAnalysisViewEntry."Debit Amount" :=
            NewAnalysisViewEntry."Debit Amount" + AnalysisViewEntry."Debit Amount";
          NewAnalysisViewEntry."Credit Amount" :=
            NewAnalysisViewEntry."Credit Amount" + AnalysisViewEntry."Credit Amount";
          NewAnalysisViewEntry."Add.-Curr. Debit Amount" :=
            NewAnalysisViewEntry."Add.-Curr. Debit Amount" + AnalysisViewEntry."Add.-Curr. Debit Amount";
          NewAnalysisViewEntry."Add.-Curr. Credit Amount" :=
            NewAnalysisViewEntry."Add.-Curr. Credit Amount" + AnalysisViewEntry."Add.-Curr. Credit Amount";
        end;
        NewAnalysisViewEntry.MODIFY;
      end;
    END;

    LOCAL PROCEDURE InsertAnalysisViewBudgetEntry@6();
    BEGIN
      if not NewAnalysisViewBudgetEntry.INSERT then begin
        NewAnalysisViewBudgetEntry.FIND;
        NewAnalysisViewBudgetEntry.Amount := NewAnalysisViewBudgetEntry.Amount + AnalysisViewBudgetEntry.Amount;
        NewAnalysisViewBudgetEntry.MODIFY;
      end;
    END;

    [External]
    PROCEDURE AnalysisViewReset@5();
    VAR
      AnalysisViewEntry@1000 : Record "Analysis View Entry";
    BEGIN
      AnalysisViewEntry.SETRANGE("Analysis View Code",Code);
      AnalysisViewEntry.DELETEALL;
      "Last Entry No." := 0;
      "Last Date Updated" := 0D;
      AnalysisviewBudgetReset;
    END;

    [External]
    PROCEDURE CheckDimensionsAreRetained@3(ObjectType@1000 : Integer;ObjectID@1001 : Integer;OnlyIfIncludeBudgets@1002 : Boolean);
    BEGIN
      RESET;
      if OnlyIfIncludeBudgets then
        SETRANGE("Include Budgets",true);
      if FIND('-') then
        repeat
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 1 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 2 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 3 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 4 Code",Code,Name);
        until NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimIsRetained@8(ObjectType@1000 : Integer;ObjectID@1001 : Integer;DimCode@1002 : Code[20];AnalysisViewCode@1003 : Code[10];AnalysisViewName@1004 : Text[50]);
    VAR
      SelectedDim@1005 : Record "Selected Dimension";
    BEGIN
      if DimCode <> '' then
        if not SelectedDim.GET(USERID,ObjectType,ObjectID,'',DimCode) then
          ERROR(
            Text001 +
            Text002,
            DimCode,AnalysisViewCode,AnalysisViewName);
    END;

    [External]
    PROCEDURE CheckViewsAreUpdated@4();
    VAR
      GLEntry@1000 : Record "G/L Entry";
      CFForecastEntry@1005 : Record "Cash Flow Forecast Entry";
      GLBudgetEntry@1001 : Record "G/L Budget Entry";
      UpdateAnalysisView@1002 : Codeunit "Update Analysis View";
      NoNotUpdated@1003 : Integer;
      RunCheck@1004 : Boolean;
    BEGIN
      if "Account Source" = "Account Source"::"G/L Account" then
        RunCheck := GLEntry.FINDLAST or GLBudgetEntry.FINDLAST
      else
        RunCheck := CFForecastEntry.FINDLAST;

      if RunCheck then begin
        NoNotUpdated := 0;
        RESET;
        if FIND('-') then
          repeat
            if ("Account Source" = "Account Source"::"Cash Flow Account") or
               (("Last Entry No." < GLEntry."Entry No.") or
                "Include Budgets" and ("Last Budget Entry No." < GLBudgetEntry."Entry No."))
            then
              NoNotUpdated := NoNotUpdated + 1;
          until NEXT = 0;
        if NoNotUpdated > 0 then
          if CONFIRM(
               Text004 +
               Text005 +
               Text007 +
               Text008 +
               Text009,true,NoNotUpdated)
          then begin
            if FIND('-') then
              repeat
                if Blocked then begin
                  "Refresh When Unblocked" := true;
                  "Last Budget Entry No." := 0;
                  MODIFY;
                end else
                  UpdateAnalysisView.Update(Rec,2,true);
              until NEXT = 0;
          end else
            ERROR(Text010);
      end;
    END;

    [External]
    PROCEDURE UpdateLastEntryNo@7();
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      if GLEntry.FINDLAST then begin
        SETRANGE(Blocked,false);
        if FIND('-') then
          repeat
            "Last Entry No." := GLEntry."Entry No.";
            MODIFY;
          until NEXT = 0;
        SETRANGE(Blocked);
      end;
    END;

    [External]
    PROCEDURE ValidateDelete@10(FieldName@1000 : Text);
    VAR
      Question@1001 : Text;
    BEGIN
      Question := STRSUBSTNO(
          Text011 +
          Text012,FieldName);
      if SkipConfirmationDialogue then
        exit;
      if not DIALOG.CONFIRM(Question,true) then
        ERROR(Text013);
    END;

    [External]
    PROCEDURE AnalysisviewBudgetReset@9();
    VAR
      AnalysisViewBudgetEntry@1000 : Record "Analysis View Budget Entry";
    BEGIN
      AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
      AnalysisViewBudgetEntry.DELETEALL;
      "Last Budget Entry No." := 0;
    END;

    LOCAL PROCEDURE ValidateModify@11(FieldName@1000 : Text);
    VAR
      Question@1001 : Text;
    BEGIN
      Question := STRSUBSTNO(
          Text014 +
          Text015,FieldName);
      if SkipConfirmationDialogue then
        exit;
      if not DIALOG.CONFIRM(Question,true) then
        ERROR(Text013);
    END;

    [External]
    PROCEDURE CopyAnalysisViewFilters@12(ObjectType@1000 : Integer;ObjectID@1001 : Integer;AnalysisViewCode@1002 : Code[10]);
    VAR
      SelectedDim@1003 : Record "Selected Dimension";
      GLAcc@1004 : Record "G/L Account";
      CFAcc@1007 : Record "Cash Flow Account";
      BusUnit@1005 : Record "Business Unit";
      DimensionCode@1006 : Text[30];
    BEGIN
      if GET(AnalysisViewCode) then begin
        if "Account Filter" <> '' then begin
          if "Account Source" = "Account Source"::"G/L Account" then
            DimensionCode := GLAcc.TABLECAPTION
          else
            DimensionCode := CFAcc.TABLECAPTION;

          if SelectedDim.GET(
               USERID,ObjectType,ObjectID,AnalysisViewCode,DimensionCode)
          then begin
            if SelectedDim."Dimension Value Filter" = '' then begin
              SelectedDim."Dimension Value Filter" := "Account Filter";
              SelectedDim.MODIFY;
            end;
          end else begin
            SelectedDim.INIT;
            SelectedDim."User ID" := USERID;
            SelectedDim."Object Type" := ObjectType;
            SelectedDim."Object ID" := ObjectID;
            SelectedDim."Analysis View Code" := AnalysisViewCode;
            SelectedDim."Dimension Code" := DimensionCode;
            SelectedDim."Dimension Value Filter" := "Account Filter";
            SelectedDim.INSERT;
          end;
        end;
        if "Business Unit Filter" <> '' then
          if SelectedDim.GET(
               USERID,ObjectType,ObjectID,AnalysisViewCode,BusUnit.TABLECAPTION)
          then begin
            if SelectedDim."Dimension Value Filter" = '' then begin
              SelectedDim."Dimension Value Filter" := "Business Unit Filter";
              SelectedDim.MODIFY;
            end;
          end else begin
            SelectedDim.INIT;
            SelectedDim."User ID" := USERID;
            SelectedDim."Object Type" := ObjectType;
            SelectedDim."Object ID" := ObjectID;
            SelectedDim."Analysis View Code" := AnalysisViewCode;
            SelectedDim."Dimension Code" := BusUnit.TABLECAPTION;
            SelectedDim."Dimension Value Filter" := "Business Unit Filter";
            SelectedDim.INSERT;
          end;
      end;
    END;

    LOCAL PROCEDURE VerificationForCashFlow@15();
    BEGIN
      if "Account Source" <> "Account Source"::"Cash Flow Account" then
        exit;

      if "Include Budgets" then
        ERROR(Text016,FIELDCAPTION("Include Budgets"),"Account Source");

      if "Update on Posting" then
        ERROR(Text016,FIELDCAPTION("Update on Posting"),"Account Source");
    END;

    LOCAL PROCEDURE CheckIfLastEntryOrDateIsSet@14() : Boolean;
    BEGIN
      if "Account Source" = "Account Source"::"G/L Account" then
        exit("Last Entry No." <> 0);

      exit("Last Date Updated" <> 0D);
    END;

    [External]
    PROCEDURE SetUpdateOnPosting@13(NewUpdateOnPosting@1000 : Boolean);
    BEGIN
      if "Update on Posting" = NewUpdateOnPosting then
        exit;

      if not "Update on Posting" and NewUpdateOnPosting then
        if not CONFIRM(STRSUBSTNO(Text017,FIELDCAPTION("Update on Posting")),false) then
          exit;

      "Update on Posting" := NewUpdateOnPosting;
      if "Update on Posting" then begin
        MODIFY;
        CODEUNIT.RUN(CODEUNIT::"Update Analysis View",Rec);
        FIND;
      end;
    END;

    PROCEDURE SetSkipConfirmationDialogue@16();
    BEGIN
      SkipConfirmationDialogue := true;
    END;

    BEGIN
    END.
  }
}

