OBJECT Table 7333 Whse. Internal Pick Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.";
    OnInsert=BEGIN
               WhseSetup.GET;
               if "No." = '' then begin
                 WhseSetup.TESTFIELD("Whse. Internal Pick Nos.");
                 NoSeriesMgt.InitSeries(
                   WhseSetup."Whse. Internal Pick Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;
             END;

    OnDelete=BEGIN
               TESTFIELD(Status,Status::Open);
               DeleteRelatedLines;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Whse. Internal Pick Header;
    LookupPageID="Whse. Internal Pick List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                WhseSetup.GET;
                                                                if "No." <> xRec."No." then begin
                                                                  NoSeriesMgt.TestManual(WhseSetup."Whse. Internal Pick Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                WhseInternalPickLine@1002 : Record "Whse. Internal Pick Line";
                                                              BEGIN
                                                                if not WmsManagement.LocationIsAllowed("Location Code") then
                                                                  ERROR(Text003,FIELDCAPTION("Location Code"),"Location Code");

                                                                CheckPickRequired("Location Code");
                                                                if "Location Code" <> '' then begin
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                end;
                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  "To Zone Code" := '';
                                                                  "To Bin Code" := '';
                                                                  WhseInternalPickLine.SETRANGE("No.","No.");
                                                                  if not WhseInternalPickLine.ISEMPTY then
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Location Code"));
                                                                end;
                                                                if USERID <> '' then begin
                                                                  FILTERGROUP := 2;
                                                                  SETRANGE("Location Code","Location Code");
                                                                  FILTERGROUP := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Assigned User ID" <> '' then begin
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                end else begin
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 000000T;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=ENU=Assignment Date;
                                                   Editable=false }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=ENU=Assignment Time;
                                                   Editable=false }
    { 6   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                if "Sorting Method" <> xRec."Sorting Method" then
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=ENU=Sorting Method;
                                                   OptionCaptionML=ENU=" ,Item,Shelf or Bin,Due Date";
                                                   OptionString=" ",Item,"Shelf or Bin","Due Date" }
    { 7   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE ("Table Name"=CONST("Internal Pick"),
                                                                                                     Type=CONST(" "),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 12  ;   ;To Bin Code         ;Code20        ;TableRelation=IF ("To Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("To Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Zone Code"=FIELD("To Zone Code"));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record Bin;
                                                              BEGIN
                                                                if xRec."To Bin Code" <> "To Bin Code" then begin
                                                                  TESTFIELD(Status,Status::Open);
                                                                  if "To Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if "To Bin Code" = Location."Adjustment Bin Code" then
                                                                      FIELDERROR(
                                                                        "To Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text005,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));
                                                                    Bin.GET("Location Code","To Bin Code");
                                                                    "To Zone Code" := Bin."Zone Code";
                                                                  end;
                                                                  MessageIfIntPickLinesExist(FIELDCAPTION("To Bin Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=To Bin Code }
    { 13  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "To Zone Code" <> xRec."To Zone Code" then begin
                                                                  TESTFIELD(Status,Status::Open);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                  "To Bin Code" := '';
                                                                  MessageIfIntPickLinesExist(FIELDCAPTION("To Zone Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=To Zone Code }
    { 34  ;   ;Document Status     ;Option        ;OnValidate=VAR
                                                                WhsePickRqst@1000 : Record "Whse. Pick Request";
                                                              BEGIN
                                                                if "Document Status" <> xRec."Document Status" then begin
                                                                  WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::"Internal Pick");
                                                                  WhsePickRqst.SETRANGE("Document No.","No.");
                                                                  if not WhsePickRqst.ISEMPTY then
                                                                    WhsePickRqst.MODIFYALL(
                                                                      "Completely Picked","Document Status" = "Document Status"::"Completely Picked");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Document Status;
                                                   OptionCaptionML=ENU=" ,Partially Picked,Completely Picked";
                                                   OptionString=" ","Partially Picked","Completely Picked";
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                MessageIfIntPickLinesExist(FIELDCAPTION("Due Date"));
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 47  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released;
                                                   OptionString=Open,Released;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1002 : Record Location;
      WhseSetup@1003 : Record "Warehouse Setup";
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
      Text000@1011 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1010 : TextConst 'ENU=You cannot change the %1, because the document has one or more lines.';
      WmsManagement@1004 : Codeunit "WMS Management";
      Text003@1005 : TextConst 'ENU=You are not allowed to use %1 %2.';
      ItemTrackingMgt@1006 : Codeunit "Item Tracking Management";
      HideValidationDialog@1007 : Boolean;
      Text005@1008 : TextConst 'ENU=must not be the %1 of the %2';
      Text006@1012 : TextConst 'ENU=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Internal Pick Lines.\';
      Text007@1009 : TextConst 'ENU=You must update the existing Warehouse Internal Pick Lines manually.';

    [External]
    PROCEDURE AssistEdit@8(OldWhseInternalPickHeader@1000 : Record "Whse. Internal Pick Header") : Boolean;
    VAR
      WhseInternalPickHeader@1001 : Record "Whse. Internal Pick Header";
    BEGIN
      WhseSetup.GET;
      with WhseInternalPickHeader do begin
        WhseInternalPickHeader := Rec;
        WhseSetup.TESTFIELD("Whse. Internal Pick Nos.");
        if NoSeriesMgt.SelectSeries(
             WhseSetup."Whse. Internal Pick Nos.",OldWhseInternalPickHeader."No. Series","No. Series")
        then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseInternalPickHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE SortWhseDoc@3();
    VAR
      WhseInternalPickLine@1001 : Record "Whse. Internal Pick Line";
      SequenceNo@1000 : Integer;
    BEGIN
      with WhseInternalPickLine do begin
        SETRANGE("No.",Rec."No.");
        case "Sorting Method" of
          "Sorting Method"::Item:
            SETCURRENTKEY("No.","Item No.");
          "Sorting Method"::"Shelf or Bin":
            begin
              GetLocation(Rec."Location Code");
              if Location."Bin Mandatory" then
                SETCURRENTKEY("No.","To Bin Code")
              else
                SETCURRENTKEY("No.","Shelf No.");
            end;
          "Sorting Method"::"Due Date":
            SETCURRENTKEY("No.","Due Date");
        end;

        if FIND('-') then begin
          SequenceNo := 10000;
          repeat
            "Sorting Sequence No." := SequenceNo;
            MODIFY;
            SequenceNo := SequenceNo + 10000;
          until NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE GetDocumentStatus@15(LineNo@1003 : Integer) : Integer;
    VAR
      WhseInternalPickLine@1001 : Record "Whse. Internal Pick Line";
    BEGIN
      WhseInternalPickLine.SETRANGE("No.","No.");
      with WhseInternalPickLine do begin
        if LineNo <> 0 then
          SETFILTER("Line No.",'<>%1',LineNo);
        if not FINDFIRST then
          exit(Status::" ");

        SETRANGE(Status,Status::"Partially Picked");
        if FINDFIRST then
          exit(Status);

        SETRANGE(Status,Status::"Completely Picked");
        if FINDFIRST then begin
          SETFILTER(Status,'<%1',Status::"Completely Picked");
          if FINDFIRST then
            exit(Status::"Partially Picked");

          exit(Status);
        end;

        exit(Status);
      end;
    END;

    LOCAL PROCEDURE MessageIfIntPickLinesExist@7(ChangedFieldName@1000 : Text[80]);
    VAR
      WhseInternalPickLine@1001 : Record "Whse. Internal Pick Line";
    BEGIN
      WhseInternalPickLine.SETRANGE("No.","No.");
      if not WhseInternalPickLine.ISEMPTY then
        if not HideValidationDialog then
          MESSAGE(
            STRSUBSTNO(
              Text006,ChangedFieldName,TABLECAPTION) + Text007);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE LookupWhseInternalPickHeader@1(VAR WhseInternalPickHeader@1001 : Record "Whse. Internal Pick Header");
    BEGIN
      COMMIT;
      if USERID <> '' then begin
        WhseInternalPickHeader.FILTERGROUP := 2;
        WhseInternalPickHeader.SETRANGE("Location Code");
      end;
      if PAGE.RUNMODAL(0,WhseInternalPickHeader) = ACTION::LookupOK then;
      if USERID <> '' then begin
        WhseInternalPickHeader.FILTERGROUP := 2;
        WhseInternalPickHeader.SETRANGE("Location Code",WhseInternalPickHeader."Location Code");
        WhseInternalPickHeader.FILTERGROUP := 0;
      end;
    END;

    [External]
    PROCEDURE SetWhseLocationFilter@2();
    VAR
      WmsManagement@1000 : Codeunit "WMS Management";
    BEGIN
      if USERID <> '' then begin
        FILTERGROUP := 2;
        SETRANGE("Location Code",WmsManagement.GetAllowedLocation("Location Code"));
        FILTERGROUP := 0;
      end;
    END;

    [External]
    PROCEDURE LookupLocation@4(VAR WhseInternalPickHeader@1001 : Record "Whse. Internal Pick Header");
    VAR
      Location@1000 : Record Location;
    BEGIN
      COMMIT;
      Location.FILTERGROUP := 2;
      Location.SETRANGE(Code);
      if PAGE.RUNMODAL(PAGE::"Locations with Warehouse List",Location) = ACTION::LookupOK then
        WhseInternalPickHeader.VALIDATE("Location Code",Location.Code);
      Location.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE DeleteRelatedLines@9();
    VAR
      WhseInternalPickLine@1003 : Record "Whse. Internal Pick Line";
      WhsePickRqst@1002 : Record "Whse. Pick Request";
      WhseCommentLine@1001 : Record "Warehouse Comment Line";
    BEGIN
      WhseInternalPickLine.SETRANGE("No.","No.");
      WhseInternalPickLine.DELETEALL;

      WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::"Internal Pick");
      WhsePickRqst.SETRANGE("Document No.","No.");
      if not WhsePickRqst.ISEMPTY then
        WhsePickRqst.DELETEALL;

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Internal Pick");
      WhseCommentLine.SETRANGE(Type,WhseCommentLine.Type::" ");
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;

      ItemTrackingMgt.DeleteWhseItemTrkgLines(
        DATABASE::"Whse. Internal Pick Line",0,"No.",'',0,0,'',false);
    END;

    [External]
    PROCEDURE CheckPickRequired@5(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then begin
        WhseSetup.GET;
        WhseSetup.TESTFIELD("Require Pick");
      end else begin
        GetLocation(LocationCode);
        Location.TESTFIELD("Require Pick");
      end;
    END;

    BEGIN
    END.
  }
}

