OBJECT Codeunit 367 CheckManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Cust. Ledger Entry"=rm,
                TableData "Vendor Ledger Entry"=rm,
                TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CheckAlreadyExistsErr@1000 : TextConst '@@@="%1=The check number., %2=The Bank Account table name.";ENU=Check %1 already exists for this %2.';
      VoidingCheckMsg@1001 : TextConst '@@@="%1=The check number being voided.";ENU=Voiding check %1.';
      GenJnlLine2@1002 : Record "Gen. Journal Line";
      BankAcc@1003 : Record "Bank Account";
      BankAccLedgEntry2@1004 : Record "Bank Account Ledger Entry";
      CheckLedgEntry2@1005 : Record "Check Ledger Entry";
      SourceCodeSetup@1006 : Record "Source Code Setup";
      VendorLedgEntry@1009 : Record "Vendor Ledger Entry";
      GLEntry@1010 : Record "G/L Entry";
      CustLedgEntry@1011 : Record "Cust. Ledger Entry";
      FALedgEntry@1012 : Record "FA Ledger Entry";
      BankAccLedgEntry3@1013 : Record "Bank Account Ledger Entry";
      GenJnlPostLine@1014 : Codeunit "Gen. Jnl.-Post Line";
      UpdateAnalysisView@1018 : Codeunit "Update Analysis View";
      NextCheckEntryNo@1016 : Integer;
      VoidingCheckErr@1017 : TextConst 'ENU=You cannot Financially Void checks posted in a non-balancing transaction.';
      AppliesIDCounter@1019 : Integer;
      PaymentOrRefundErr@1008 : TextConst '@@@="%1=Document Type for the payment., %2=Payment Document Type., %3=Refund Document Type.";ENU=%1 must be either %2 or %3.';
      BankAccountTypeErr@1015 : TextConst '@@@="%1=Account type., %2=Balancing Account type.";ENU=Either the %1 or the %2 must refer to a Bank Account.';
      NoAppliedEntryErr@1007 : TextConst 'ENU=Cannot find an applied entry within the specified filter.';

    [External]
    PROCEDURE InsertCheck@3(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";RecordIdToPrint@1001 : RecordID);
    BEGIN
      if NextCheckEntryNo = 0 then begin
        CheckLedgEntry2.LOCKTABLE;
        CheckLedgEntry2.RESET;
        if CheckLedgEntry2.FINDLAST then
          NextCheckEntryNo := CheckLedgEntry2."Entry No." + 1
        else
          NextCheckEntryNo := 1;
      end;

      CheckLedgEntry2.RESET;
      CheckLedgEntry2.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
      CheckLedgEntry2.SETRANGE("Bank Account No.",CheckLedgEntry."Bank Account No.");
      CheckLedgEntry2.SETFILTER(
        "Entry Status",'%1|%2|%3',
        CheckLedgEntry2."Entry Status"::Printed,
        CheckLedgEntry2."Entry Status"::Posted,
        CheckLedgEntry2."Entry Status"::"Financially Voided");
      CheckLedgEntry2.SETRANGE("Check No.",CheckLedgEntry."Document No.");
      if CheckLedgEntry2.FINDFIRST then
        ERROR(CheckAlreadyExistsErr,CheckLedgEntry."Document No.",BankAcc.TABLECAPTION);

      CheckLedgEntry.Open := CheckLedgEntry.Amount <> 0;
      CheckLedgEntry."User ID" := USERID;
      CheckLedgEntry."Entry No." := NextCheckEntryNo;
      CheckLedgEntry."Record ID to Print" := RecordIdToPrint;
      CheckLedgEntry.INSERT;
      NextCheckEntryNo := NextCheckEntryNo + 1;
    END;

    [External]
    PROCEDURE VoidCheck@4(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      Currency@1001 : Record Currency;
      CheckAmountLCY@1002 : Decimal;
    BEGIN
      GenJnlLine.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
      GenJnlLine.TESTFIELD("Check Printed",true);
      GenJnlLine.TESTFIELD("Document No.");

      if GenJnlLine."Bal. Account No." = '' then begin
        GenJnlLine."Check Printed" := false;
        GenJnlLine.DELETE(true);
      end;

      CheckAmountLCY := GenJnlLine."Amount (LCY)";
      if GenJnlLine."Currency Code" <> '' then
        Currency.GET(GenJnlLine."Currency Code");

      GenJnlLine2.RESET;
      GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine2.SETRANGE("Posting Date",GenJnlLine."Posting Date");
      GenJnlLine2.SETRANGE("Document No.",GenJnlLine."Document No.");
      if GenJnlLine2.FIND('-') then
        repeat
          if (GenJnlLine2."Line No." > GenJnlLine."Line No.") and
             (CheckAmountLCY = -GenJnlLine2."Amount (LCY)") and
             (GenJnlLine2."Currency Code" = '') and (GenJnlLine."Currency Code" <> '') and
             (GenJnlLine2."Account Type" = GenJnlLine2."Account Type"::"G/L Account") and
             (GenJnlLine2."Account No." in
              [Currency."Conv. LCY Rndg. Debit Acc.",Currency."Conv. LCY Rndg. Credit Acc."]) and
             (GenJnlLine2."Bal. Account No." = '') and not GenJnlLine2."Check Printed"
          then
            GenJnlLine2.DELETE // Rounding correction line
          else begin
            if GenJnlLine."Bal. Account No." = '' then begin
              if GenJnlLine2."Account No." = '' then begin
                GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"Bank Account";
                GenJnlLine2."Account No." := GenJnlLine."Account No.";
              end else begin
                GenJnlLine2."Bal. Account Type" := GenJnlLine2."Account Type"::"Bank Account";
                GenJnlLine2."Bal. Account No." := GenJnlLine."Account No.";
              end;
              GenJnlLine2.VALIDATE(Amount);
              GenJnlLine2."Bank Payment Type" := GenJnlLine."Bank Payment Type";
            end;
            GenJnlLine2."Document No." := '';
            GenJnlLine2."Document Date" := 0D;
            GenJnlLine2."Check Printed" := false;
            GenJnlLine2.UpdateSource;
            GenJnlLine2.MODIFY;
          end;
        until GenJnlLine2.NEXT = 0;

      CheckLedgEntry2.RESET;
      CheckLedgEntry2.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
      if GenJnlLine.Amount <= 0 then
        CheckLedgEntry2.SETRANGE("Bank Account No.",GenJnlLine."Account No.")
      else
        CheckLedgEntry2.SETRANGE("Bank Account No.",GenJnlLine."Bal. Account No.");
      CheckLedgEntry2.SETRANGE("Entry Status",CheckLedgEntry2."Entry Status"::Printed);
      CheckLedgEntry2.SETRANGE("Check No.",GenJnlLine."Document No.");
      CheckLedgEntry2.FINDFIRST;
      CheckLedgEntry2."Original Entry Status" := CheckLedgEntry2."Entry Status";
      CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Voided;
      CheckLedgEntry2."Positive Pay Exported" := false;
      CheckLedgEntry2.Open := false;
      CheckLedgEntry2.MODIFY;
    END;

    [Internal]
    PROCEDURE FinancialVoidCheck@5(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry");
    VAR
      VATPostingSetup@1002 : Record "VAT Posting Setup";
      Currency@1009 : Record Currency;
      ConfirmFinancialVoid@1008 : Page "Confirm Financial Void";
      AmountToVoid@1003 : Decimal;
      CheckAmountLCY@1004 : Decimal;
      BalanceAmountLCY@1005 : Decimal;
      TransactionBalance@1001 : Decimal;
    BEGIN
      CheckLedgEntry.TESTFIELD("Entry Status",CheckLedgEntry."Entry Status"::Posted);
      CheckLedgEntry.TESTFIELD("Statement Status",CheckLedgEntry."Statement Status"::Open);
      CheckLedgEntry.TESTFIELD("Bal. Account No.");
      BankAcc.GET(CheckLedgEntry."Bank Account No.");
      BankAccLedgEntry2.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
      SourceCodeSetup.GET;
      with GLEntry do begin
        SETCURRENTKEY("Transaction No.");
        SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
        SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
        CALCSUMS(Amount);
        TransactionBalance := Amount;
      end;
      if TransactionBalance <> 0 then
        ERROR(VoidingCheckErr);

      CLEAR(ConfirmFinancialVoid);
      ConfirmFinancialVoid.SetCheckLedgerEntry(CheckLedgEntry);
      if ConfirmFinancialVoid.RUNMODAL <> ACTION::Yes then
        exit;

      AmountToVoid := 0;
      with CheckLedgEntry2 do begin
        RESET;
        SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
        SETRANGE("Bank Account No.",CheckLedgEntry."Bank Account No.");
        SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Posted);
        SETRANGE("Statement Status",CheckLedgEntry."Statement Status"::Open);
        SETRANGE("Check No.",CheckLedgEntry."Check No.");
        SETRANGE("Check Date",CheckLedgEntry."Check Date");
        CALCSUMS(Amount);
        AmountToVoid := Amount;
      end;

      InitGenJnlLine(
        GenJnlLine2,CheckLedgEntry."Document No.",ConfirmFinancialVoid.GetVoidDate,
        GenJnlLine2."Account Type"::"Bank Account",CheckLedgEntry."Bank Account No.",
        STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No."));
      GenJnlLine2.VALIDATE(Amount,AmountToVoid);
      CheckAmountLCY := GenJnlLine2."Amount (LCY)";
      BalanceAmountLCY := 0;
      GenJnlLine2."Shortcut Dimension 1 Code" := BankAccLedgEntry2."Global Dimension 1 Code";
      GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
      GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
      GenJnlLine2."Allow Zero-Amount Posting" := true;
      GenJnlPostLine.RunWithCheck(GenJnlLine2);

      // Mark newly posted entry as cleared for bank reconciliation purposes.
      if ConfirmFinancialVoid.GetVoidDate = CheckLedgEntry."Check Date" then begin
        BankAccLedgEntry3.RESET;
        BankAccLedgEntry3.FINDLAST;
        BankAccLedgEntry3.Open := false;
        BankAccLedgEntry3."Remaining Amount" := 0;
        BankAccLedgEntry3."Statement Status" := BankAccLedgEntry2."Statement Status"::Closed;
        BankAccLedgEntry3.MODIFY;
      end;

      InitGenJnlLine(
        GenJnlLine2,CheckLedgEntry."Document No.",ConfirmFinancialVoid.GetVoidDate,
        CheckLedgEntry."Bal. Account Type",CheckLedgEntry."Bal. Account No.",
        STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No."));
      GenJnlLine2.VALIDATE("Currency Code",BankAcc."Currency Code");
      GenJnlLine2."Allow Zero-Amount Posting" := true;
      case CheckLedgEntry."Bal. Account Type" of
        CheckLedgEntry."Bal. Account Type"::"G/L Account":
          with GLEntry do begin
            SETCURRENTKEY("Transaction No.");
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            SETFILTER("Entry No.",'<>%1',BankAccLedgEntry2."Entry No.");
            SETRANGE("G/L Account No.",CheckLedgEntry."Bal. Account No.");
            if FINDSET then
              repeat
                GenJnlLine2.VALIDATE("Account No.","G/L Account No.");
                GenJnlLine2.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
                GenJnlLine2.VALIDATE(Amount,-Amount - "VAT Amount");
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                GenJnlLine2."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                GenJnlLine2."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
                GenJnlLine2."Gen. Posting Type" := "Gen. Posting Type";
                GenJnlLine2."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
                GenJnlLine2."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                GenJnlLine2."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                GenJnlLine2."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                if VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") then
                  GenJnlLine2."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
              until NEXT = 0;
          end;
        CheckLedgEntry."Bal. Account Type"::Customer:
          begin
            if ConfirmFinancialVoid.GetVoidType = 0 then begin    // Unapply entry
              if UnApplyCustInvoices(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate) then
                GenJnlLine2."Applies-to ID" := CheckLedgEntry."Document No.";
            end;
            with CustLedgEntry do begin
              SETCURRENTKEY("Transaction No.");
              SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
              SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
              SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
              if FINDSET then
                repeat
                  CALCFIELDS("Original Amount");
                  SetGenJnlLine(
                    GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                    "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                  BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                  GenJnlPostLine.RunWithCheck(GenJnlLine2);
                until NEXT = 0;
            end;
          end;
        CheckLedgEntry."Bal. Account Type"::Vendor:
          begin
            if ConfirmFinancialVoid.GetVoidType = 0 then begin    // Unapply entry
              if UnApplyVendInvoices(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate) then
                GenJnlLine2."Applies-to ID" := CheckLedgEntry."Document No.";
            end;
            with VendorLedgEntry do begin
              SETCURRENTKEY("Transaction No.");
              SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
              SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
              SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
              if FINDSET then
                repeat
                  CALCFIELDS("Original Amount");
                  SetGenJnlLine(
                    GenJnlLine2,-"Original Amount","Currency Code",CheckLedgEntry."Document No.",
                    "Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID");
                  BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                  GenJnlPostLine.RunWithCheck(GenJnlLine2);
                until NEXT = 0;
            end;
          end;
        CheckLedgEntry."Bal. Account Type"::"Bank Account":
          with BankAccLedgEntry3 do begin
            SETCURRENTKEY("Transaction No.");
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            SETFILTER("Entry No.",'<>%1',BankAccLedgEntry2."Entry No.");
            if FINDSET then
              repeat
                GenJnlLine2.VALIDATE(Amount,-Amount);
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                GenJnlLine2."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                GenJnlLine2."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
              until NEXT = 0;
          end;
        CheckLedgEntry."Bal. Account Type"::"Fixed Asset":
          with FALedgEntry do begin
            SETCURRENTKEY("Transaction No.");
            SETRANGE("Transaction No.",BankAccLedgEntry2."Transaction No.");
            SETRANGE("Document No.",BankAccLedgEntry2."Document No.");
            SETRANGE("Posting Date",BankAccLedgEntry2."Posting Date");
            if FINDSET then
              repeat
                GenJnlLine2.VALIDATE(Amount,-Amount);
                BalanceAmountLCY := BalanceAmountLCY + GenJnlLine2."Amount (LCY)";
                GenJnlLine2."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                GenJnlLine2."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
                GenJnlPostLine.RunWithCheck(GenJnlLine2);
              until NEXT = 0;
          end;
        else begin
          GenJnlLine2."Bal. Account Type" := CheckLedgEntry."Bal. Account Type";
          GenJnlLine2.VALIDATE("Bal. Account No.",CheckLedgEntry."Bal. Account No.");
          GenJnlLine2."Shortcut Dimension 1 Code" := '';
          GenJnlLine2."Shortcut Dimension 2 Code" := '';
          GenJnlLine2."Dimension Set ID" := 0;
          GenJnlPostLine.RunWithoutCheck(GenJnlLine2);
        end;
      end;

      if ConfirmFinancialVoid.GetVoidDate = CheckLedgEntry."Check Date" then begin
        BankAccLedgEntry2.Open := false;
        BankAccLedgEntry2."Remaining Amount" := 0;
        BankAccLedgEntry2."Statement Status" := BankAccLedgEntry2."Statement Status"::Closed;
        BankAccLedgEntry2.MODIFY;
      end;

      if CheckAmountLCY + BalanceAmountLCY <> 0 then begin  // rounding error from currency conversion
        Currency.GET(BankAcc."Currency Code");
        GenJnlLine2.INIT;
        GenJnlLine2."System-Created Entry" := true;
        GenJnlLine2."Financial Void" := true;
        GenJnlLine2."Document No." := CheckLedgEntry."Document No.";
        GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
        GenJnlLine2."Posting Date" := ConfirmFinancialVoid.GetVoidDate;
        if -(CheckAmountLCY + BalanceAmountLCY) > 0 then
          GenJnlLine2.VALIDATE("Account No.",Currency.GetConvLCYRoundingDebitAccount)
        else
          GenJnlLine2.VALIDATE("Account No.",Currency.GetConvLCYRoundingCreditAccount);
        GenJnlLine2.VALIDATE("Currency Code",BankAcc."Currency Code");
        GenJnlLine2.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
        GenJnlLine2."Source Code" := SourceCodeSetup."Financially Voided Check";
        GenJnlLine2."Allow Zero-Amount Posting" := true;
        GenJnlLine2.VALIDATE(Amount,0);
        GenJnlLine2."Amount (LCY)" := -(CheckAmountLCY + BalanceAmountLCY);
        GenJnlLine2."Shortcut Dimension 1 Code" := BankAccLedgEntry2."Global Dimension 1 Code";
        GenJnlLine2."Shortcut Dimension 2 Code" := BankAccLedgEntry2."Global Dimension 2 Code";
        GenJnlLine2."Dimension Set ID" := BankAccLedgEntry2."Dimension Set ID";
        GenJnlPostLine.RunWithCheck(GenJnlLine2);
      end;

      MarkCheckEntriesVoid(CheckLedgEntry,ConfirmFinancialVoid.GetVoidDate);
      COMMIT;
      UpdateAnalysisView.UpdateAll(0,true);
    END;

    LOCAL PROCEDURE UnApplyVendInvoices@6(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";VoidDate@1008 : Date) : Boolean;
    VAR
      BankAccountLedgerEntry@1001 : Record "Bank Account Ledger Entry";
      OrigPaymentVendorLedgerEntry@1002 : Record "Vendor Ledger Entry";
      PayDetailedVendorLedgEntry@1003 : Record "Detailed Vendor Ledg. Entry";
      GenJournalLine3@1004 : Record "Gen. Journal Line";
      AppliesID@1005 : Code[50];
    BEGIN
      // first, find first original payment line, if any
      BankAccountLedgerEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
      if CheckLedgEntry."Bal. Account Type" = CheckLedgEntry."Bal. Account Type"::Vendor then begin
        with OrigPaymentVendorLedgerEntry do begin
          SETCURRENTKEY("Transaction No.");
          SETRANGE("Transaction No.",BankAccountLedgerEntry."Transaction No.");
          SETRANGE("Document No.",BankAccountLedgerEntry."Document No.");
          SETRANGE("Posting Date",BankAccountLedgerEntry."Posting Date");
          if not FINDFIRST then
            exit(false);
        end;
      end else
        exit(false);

      AppliesID := CheckLedgEntry."Document No.";

      PayDetailedVendorLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type","Posting Date");
      PayDetailedVendorLedgEntry.SETRANGE("Vendor Ledger Entry No.",OrigPaymentVendorLedgerEntry."Entry No.");
      PayDetailedVendorLedgEntry.SETRANGE(Unapplied,false);
      PayDetailedVendorLedgEntry.SETFILTER("Applied Vend. Ledger Entry No.",'<>%1',0);
      PayDetailedVendorLedgEntry.SETRANGE("Entry Type",PayDetailedVendorLedgEntry."Entry Type"::Application);
      if not PayDetailedVendorLedgEntry.FINDFIRST then
        ERROR(NoAppliedEntryErr);
      GenJournalLine3."Document No." := OrigPaymentVendorLedgerEntry."Document No.";
      GenJournalLine3."Posting Date" := VoidDate;
      GenJournalLine3."Account Type" := GenJournalLine3."Account Type"::Vendor;
      GenJournalLine3."Account No." := OrigPaymentVendorLedgerEntry."Vendor No.";
      GenJournalLine3.Correction := true;
      GenJournalLine3.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
      GenJournalLine3."Shortcut Dimension 1 Code" := OrigPaymentVendorLedgerEntry."Global Dimension 1 Code";
      GenJournalLine3."Shortcut Dimension 2 Code" := OrigPaymentVendorLedgerEntry."Global Dimension 2 Code";
      GenJournalLine3."Dimension Set ID" := OrigPaymentVendorLedgerEntry."Dimension Set ID";
      GenJournalLine3."Posting Group" := OrigPaymentVendorLedgerEntry."Vendor Posting Group";
      GenJournalLine3."Source Type" := GenJournalLine3."Source Type"::Vendor;
      GenJournalLine3."Source No." := OrigPaymentVendorLedgerEntry."Vendor No.";
      GenJournalLine3."Source Code" := SourceCodeSetup."Financially Voided Check";
      GenJournalLine3."Source Currency Code" := OrigPaymentVendorLedgerEntry."Currency Code";
      GenJournalLine3."System-Created Entry" := true;
      GenJournalLine3."Financial Void" := true;
      GenJnlPostLine.UnapplyVendLedgEntry(GenJournalLine3,PayDetailedVendorLedgEntry);

      with OrigPaymentVendorLedgerEntry do begin
        FINDSET(true,false);  // re-get the now-modified payment entry.
        repeat                // set up to be applied by upcoming voiding entry.
          MakeAppliesID(AppliesID,CheckLedgEntry."Document No.");
          "Applies-to ID" := AppliesID;
          CALCFIELDS("Remaining Amount");
          "Amount to Apply" := "Remaining Amount";
          "Accepted Pmt. Disc. Tolerance" := false;
          "Accepted Payment Tolerance" := 0;
          MODIFY;
        until NEXT = 0;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE UnApplyCustInvoices@7(VAR CheckLedgEntry@1000 : Record "Check Ledger Entry";VoidDate@1006 : Date) : Boolean;
    VAR
      BankAccountLedgerEntry@1001 : Record "Bank Account Ledger Entry";
      OrigPaymentCustLedgerEntry@1003 : Record "Cust. Ledger Entry";
      PayDetailedCustLedgEntry@1004 : Record "Detailed Cust. Ledg. Entry";
      GenJournalLine3@1005 : Record "Gen. Journal Line";
      AppliesID@1002 : Code[50];
    BEGIN
      // first, find first original payment line, if any
      BankAccountLedgerEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
      if CheckLedgEntry."Bal. Account Type" = CheckLedgEntry."Bal. Account Type"::Customer then begin
        with OrigPaymentCustLedgerEntry do begin
          SETCURRENTKEY("Transaction No.");
          SETRANGE("Transaction No.",BankAccountLedgerEntry."Transaction No.");
          SETRANGE("Document No.",BankAccountLedgerEntry."Document No.");
          SETRANGE("Posting Date",BankAccountLedgerEntry."Posting Date");
          if not FINDFIRST then
            exit(false);
        end;
      end else
        exit(false);

      AppliesID := CheckLedgEntry."Document No.";

      PayDetailedCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      PayDetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",OrigPaymentCustLedgerEntry."Entry No.");
      PayDetailedCustLedgEntry.SETRANGE(Unapplied,false);
      PayDetailedCustLedgEntry.SETFILTER("Applied Cust. Ledger Entry No.",'<>%1',0);
      PayDetailedCustLedgEntry.SETRANGE("Entry Type",PayDetailedCustLedgEntry."Entry Type"::Application);
      if not PayDetailedCustLedgEntry.FINDFIRST then
        ERROR(NoAppliedEntryErr);
      GenJournalLine3."Document No." := OrigPaymentCustLedgerEntry."Document No.";
      GenJournalLine3."Posting Date" := VoidDate;
      GenJournalLine3."Account Type" := GenJournalLine3."Account Type"::Customer;
      GenJournalLine3."Account No." := OrigPaymentCustLedgerEntry."Customer No.";
      GenJournalLine3.Correction := true;
      GenJournalLine3.Description := STRSUBSTNO(VoidingCheckMsg,CheckLedgEntry."Check No.");
      GenJournalLine3."Shortcut Dimension 1 Code" := OrigPaymentCustLedgerEntry."Global Dimension 1 Code";
      GenJournalLine3."Shortcut Dimension 2 Code" := OrigPaymentCustLedgerEntry."Global Dimension 2 Code";
      GenJournalLine3."Dimension Set ID" := OrigPaymentCustLedgerEntry."Dimension Set ID";
      GenJournalLine3."Posting Group" := OrigPaymentCustLedgerEntry."Customer Posting Group";
      GenJournalLine3."Source Type" := GenJournalLine3."Source Type"::Customer;
      GenJournalLine3."Source No." := OrigPaymentCustLedgerEntry."Customer No.";
      GenJournalLine3."Source Code" := SourceCodeSetup."Financially Voided Check";
      GenJournalLine3."Source Currency Code" := OrigPaymentCustLedgerEntry."Currency Code";
      GenJournalLine3."System-Created Entry" := true;
      GenJournalLine3."Financial Void" := true;
      GenJnlPostLine.UnapplyCustLedgEntry(GenJournalLine3,PayDetailedCustLedgEntry);

      with OrigPaymentCustLedgerEntry do begin
        FINDSET(true,false);  // re-get the now-modified payment entry.
        repeat                // set up to be applied by upcoming voiding entry.
          MakeAppliesID(AppliesID,CheckLedgEntry."Document No.");
          "Applies-to ID" := AppliesID;
          CALCFIELDS("Remaining Amount");
          "Amount to Apply" := "Remaining Amount";
          "Accepted Pmt. Disc. Tolerance" := false;
          "Accepted Payment Tolerance" := 0;
          MODIFY;
        until NEXT = 0;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE MarkCheckEntriesVoid@8(VAR OriginalCheckLedgerEntry@1000 : Record "Check Ledger Entry";VoidDate@1001 : Date);
    VAR
      RelatedCheckLedgerEntry@1002 : Record "Check Ledger Entry";
      RelatedCheckLedgerEntry2@1003 : Record "Check Ledger Entry";
    BEGIN
      with RelatedCheckLedgerEntry do begin
        RESET;
        SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
        SETRANGE("Bank Account No.",OriginalCheckLedgerEntry."Bank Account No.");
        SETRANGE("Entry Status",OriginalCheckLedgerEntry."Entry Status"::Posted);
        SETRANGE("Statement Status",OriginalCheckLedgerEntry."Statement Status"::Open);
        SETRANGE("Check No.",OriginalCheckLedgerEntry."Check No.");
        SETRANGE("Check Date",OriginalCheckLedgerEntry."Check Date");
        SETFILTER("Entry No.",'<>%1',OriginalCheckLedgerEntry."Entry No.");
        if FINDSET then
          repeat
            RelatedCheckLedgerEntry2 := RelatedCheckLedgerEntry;
            RelatedCheckLedgerEntry2."Original Entry Status" := "Entry Status";
            RelatedCheckLedgerEntry2."Entry Status" := "Entry Status"::"Financially Voided";
            RelatedCheckLedgerEntry2."Positive Pay Exported" := false;
            if VoidDate = OriginalCheckLedgerEntry."Check Date" then begin
              RelatedCheckLedgerEntry2.Open := false;
              RelatedCheckLedgerEntry2."Statement Status" := RelatedCheckLedgerEntry2."Statement Status"::Closed;
            end;
            RelatedCheckLedgerEntry2.MODIFY;
          until NEXT = 0;
      end;

      with OriginalCheckLedgerEntry do begin
        "Original Entry Status" := "Entry Status";
        "Entry Status" := "Entry Status"::"Financially Voided";
        "Positive Pay Exported" := false;
        if VoidDate = "Check Date" then begin
          Open := false;
          "Statement Status" := "Statement Status"::Closed;
        end;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE MakeAppliesID@9(VAR AppliesID@1000 : Code[50];CheckDocNo@1001 : Code[20]);
    BEGIN
      if AppliesID = '' then
        exit;
      if AppliesID = CheckDocNo then
        AppliesIDCounter := 0;
      AppliesIDCounter := AppliesIDCounter + 1;
      AppliesID :=
        COPYSTR(FORMAT(AppliesIDCounter) + CheckDocNo,1,MAXSTRLEN(AppliesID));
    END;

    LOCAL PROCEDURE InitGenJnlLine@2(VAR GenJnlLine@1000 : Record "Gen. Journal Line";DocumentNo@1001 : Code[20];PostingDate@1002 : Date;AccountType@1005 : Option;AccountNo@1003 : Code[20];Description@1004 : Text[50]);
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."System-Created Entry" := true;
      GenJnlLine."Financial Void" := true;
      GenJnlLine."Document No." := DocumentNo;
      GenJnlLine."Account Type" := AccountType;
      GenJnlLine."Posting Date" := PostingDate;
      GenJnlLine.VALIDATE("Account No.",AccountNo);
      GenJnlLine.Description := Description;
      GenJnlLine."Source Code" := SourceCodeSetup."Financially Voided Check";
    END;

    LOCAL PROCEDURE SetGenJnlLine@1(VAR GenJnlLine@1000 : Record "Gen. Journal Line";OriginalAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];DocumentNo@1003 : Code[20];Dim1Code@1004 : Code[20];Dim2Code@1005 : Code[20];DimSetID@1006 : Integer);
    BEGIN
      GenJnlLine.VALIDATE(Amount,OriginalAmount);
      GenJnlLine.VALIDATE("Currency Code",CurrencyCode);
      MakeAppliesID(GenJnlLine."Applies-to ID",DocumentNo);
      GenJnlLine."Shortcut Dimension 1 Code" := Dim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := Dim2Code;
      GenJnlLine."Dimension Set ID" := DimSetID;
      GenJnlLine."Source Currency Code" := CurrencyCode;
    END;

    PROCEDURE ProcessElectronicPayment@10(VAR GenJournalLine@1000 : Record "Gen. Journal Line";WhichProcess@1001 : ',Void,Transmit');
    VAR
      CheckLedgerEntry3@1003 : Record "Check Ledger Entry";
      BankAccountNo@1002 : Code[20];
    BEGIN
      if not (GenJournalLine."Bank Payment Type" in
              [GenJournalLine."Bank Payment Type"::"Electronic Payment",
               GenJournalLine."Bank Payment Type"::"Electronic Payment-IAT"])
      then
        GenJournalLine.FIELDERROR("Bank Payment Type");
      GenJournalLine.TESTFIELD("Exported to Payment File",true);
      if not (GenJournalLine."Document Type" in [GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Refund]) then
        ERROR(PaymentOrRefundErr,GenJournalLine.FIELDCAPTION("Document Type"),GenJournalLine."Document Type"::Payment,
          GenJournalLine."Document Type"::Refund);
      GenJournalLine.TESTFIELD("Document No.");
      if GenJournalLine."Account Type" = GenJournalLine."Account Type"::"Bank Account" then begin
        GenJournalLine.TESTFIELD("Account No.");
        BankAccountNo := GenJournalLine."Account No.";
      end else
        if GenJournalLine."Bal. Account Type" = GenJournalLine."Bal. Account Type"::"Bank Account" then begin
          GenJournalLine.TESTFIELD("Bal. Account No.");
          BankAccountNo := GenJournalLine."Bal. Account No.";
        end else
          ERROR(BankAccountTypeErr,GenJournalLine.FIELDCAPTION("Account Type"),GenJournalLine.FIELDCAPTION("Bal. Account Type"));

      CheckLedgEntry2.RESET;
      CheckLedgEntry2.SETRANGE("Bank Account No.",BankAccountNo);
      CheckLedgEntry2.SETRANGE("Entry Status",CheckLedgEntry2."Entry Status"::Exported);
      CheckLedgEntry2.SETRANGE("Check No.",GenJournalLine."Document No.");
      if CheckLedgEntry2.FIND('-') then
        repeat
          CheckLedgerEntry3 := CheckLedgEntry2;
          CheckLedgerEntry3."Original Entry Status" := CheckLedgerEntry3."Entry Status";
          case WhichProcess of
            WhichProcess::Void:
              begin
                CheckLedgerEntry3."Entry Status" := CheckLedgerEntry3."Entry Status"::Voided;
                CheckLedgerEntry3."Positive Pay Exported" := false;
              end;
            WhichProcess::Transmit:
              CheckLedgerEntry3."Entry Status" := CheckLedgerEntry3."Entry Status"::Transmitted;
          end;
          CheckLedgerEntry3.MODIFY;
        until CheckLedgerEntry3.NEXT = 0;

      if WhichProcess = WhichProcess::Void then
        RemoveCreditTransfers(GenJournalLine);
    END;

    LOCAL PROCEDURE RemoveCreditTransfers@11(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      CreditTransferRegister@1001 : Record "Credit Transfer Register";
      CreditTransferEntry@1002 : Record "Credit Transfer Entry";
      GenJnlShowCTEntries@1003 : Codeunit "Gen. Jnl.-Show CT Entries";
    BEGIN
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(GenJournalLine,CreditTransferEntry);
      if CreditTransferEntry.FINDLAST then begin
        if CreditTransferRegister.GET(CreditTransferEntry."Credit Transfer Register No.") then
          CreditTransferRegister.DELETE;
        // For journal entries with multiple lines, the register would have already been deleted,
        // but subsequent lines still need to be deleted.
        CreditTransferEntry.DELETE;
        COMMIT;
      end;
    END;

    BEGIN
    END.
  }
}

