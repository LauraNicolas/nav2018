OBJECT Page 8614 Config. Package Card
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Config. Package Card;
    SourceTable="Config. Package";
    PageType=Document;
    PromotedActionCategoriesML=ENU=New,Process,Report,Manage,Package;
    OnInit=BEGIN
             SetActionVisibility;
           END;

    OnNewRecord=BEGIN
                  if not ActionVisible then
                    ERROR(UnsupportedNewErr);
                END;

    OnInsertRecord=BEGIN
                     if not ActionVisible then
                       ERROR(UnsupportedEditErr);
                   END;

    OnModifyRecord=BEGIN
                     if not ActionVisible then
                       ERROR(UnsupportedEditErr);
                   END;

    OnDeleteRecord=BEGIN
                     if not ActionVisible then
                       ERROR(UnsupportedDeleteErr);
                   END;

    ActionList=ACTIONS
    {
      { 11      ;    ;ActionContainer;
                      Name=ActionContainer11;
                      ActionContainerType=ActionItems }
      { 24      ;1   ;ActionGroup;
                      Name=Package;
                      CaptionML=ENU=Package }
      { 23      ;2   ;Action    ;
                      Name=Export Package;
                      Ellipsis=true;
                      CaptionML=ENU=Export Package;
                      ToolTipML=ENU=Create a .rapidstart file that which delivers the package contents in a compressed format. Configuration questionnaires, configuration templates, and the configuration worksheet are added to the package automatically unless you specifically decide to exclude them.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD(Code);
                                 ConfigXMLExchange.ExportPackage(Rec);
                               END;
                                }
      { 22      ;2   ;Action    ;
                      Name=Import Package;
                      Ellipsis=true;
                      CaptionML=ENU=Import Package;
                      ToolTipML=ENU=Import a .rapidstart package file.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ConfigXMLExchange.ImportPackageXMLFromClient;
                               END;
                                }
      { 21      ;2   ;Action    ;
                      Name=Export to Excel;
                      CaptionML=ENU=Export to Excel;
                      ToolTipML=ENU=Export the data in the package to Excel.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ExportToExcel;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ConfigPackageTable@1000 : Record "Config. Package Table";
                                 ConfigExcelExchange@1001 : Codeunit "Config. Excel Exchange";
                               BEGIN
                                 TESTFIELD(Code);

                                 ConfigPackageTable.SETRANGE("Package Code",Code);
                                 if CONFIRM(Text004,true,Code,ConfigPackageTable.COUNT) then
                                   ConfigExcelExchange.ExportExcelFromTables(ConfigPackageTable);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=Import from Excel;
                      CaptionML=ENU=Import from Excel;
                      ToolTipML=ENU=Begin the migration of legacy data.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ImportExcel;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ConfigExcelExchange@1000 : Codeunit "Config. Excel Exchange";
                               BEGIN
                                 ConfigExcelExchange.ImportExcelFromPackage;
                               END;
                                }
      { 19      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions }
      { 17      ;2   ;Action    ;
                      Name=Get Tables;
                      Ellipsis=true;
                      CaptionML=ENU=Get Tables;
                      ToolTipML=ENU=Select tables that you want to add to the configuration package.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=GetLines;
                      PromotedCategory=New;
                      OnAction=VAR
                                 GetPackageTables@1000 : Report "Get Package Tables";
                               BEGIN
                                 CurrPage.SAVERECORD;
                                 GetPackageTables.Set(Code);
                                 GetPackageTables.RUNMODAL;
                                 CLEAR(GetPackageTables);
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=Apply Package;
                      CaptionML=ENU=Apply Package;
                      ToolTipML=ENU=Import the configuration package and apply the package database data at the same time.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Apply;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigPackageTable@1002 : Record "Config. Package Table";
                                 ConfigPackageMgt@1000 : Codeunit "Config. Package Management";
                               BEGIN
                                 TESTFIELD(Code);
                                 if CONFIRM(Text003,true,Code) then begin
                                   ConfigPackageTable.SETRANGE("Package Code",Code);
                                   ConfigPackageMgt.ApplyPackage(Rec,ConfigPackageTable,true);
                                 end;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=Copy Package;
                      CaptionML=ENU=Copy Package;
                      ToolTipML=ENU=Copy an existing configuration package to create a new package based on the same content.;
                      ApplicationArea=#Advanced;
                      Image=CopyWorksheet;
                      OnAction=VAR
                                 CopyPackage@1000 : Report "Copy Package";
                               BEGIN
                                 TESTFIELD(Code);
                                 CopyPackage.Set(Rec);
                                 CopyPackage.RUNMODAL;
                                 CLEAR(CopyPackage);
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=Validate Package;
                      CaptionML=ENU=Validate Package;
                      ToolTipML=ENU=Determine if you have introduced errors, such as not including tables that the configuration relies on.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=CheckRulesSyntax;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigPackageTable@1000 : Record "Config. Package Table";
                                 TempConfigPackageTable@1001 : TEMPORARY Record "Config. Package Table";
                                 ConfigPackageMgt@1002 : Codeunit "Config. Package Management";
                               BEGIN
                                 if CONFIRM(Text002,true,"Package Name") then begin
                                   ConfigPackageTable.SETRANGE("Package Code",Code);
                                   ConfigPackageMgt.ValidatePackageRelations(ConfigPackageTable,TempConfigPackageTable,true);
                                 end;
                               END;
                                }
      { 7       ;2   ;Separator ;
                      Name=Separator7 }
      { 6       ;2   ;Action    ;
                      Name=Export to Translation;
                      CaptionML=ENU=Export to Translation;
                      ApplicationArea=#Advanced;
                      Visible=FALSE;
                      Image=Export;
                      OnAction=VAR
                                 ConfigPackageTable@1001 : Record "Config. Package Table";
                               BEGIN
                                 TESTFIELD(Code);

                                 ConfigXMLExchange.SetAdvanced(true);
                                 ConfigPackageTable.SETRANGE("Package Code",Code);
                                 if CONFIRM(Text004,true,Code,ConfigPackageTable.COUNT) then
                                   ConfigXMLExchange.ExportPackageXML(ConfigPackageTable,'');
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=ProcessData;
                      CaptionML=ENU=Process Data;
                      ToolTipML=ENU=Process data in the configuration package before you apply it to the database. For example, convert dates and decimals to the format required by the regional settings on a user's computer and remove leading/trailing spaces or special characters.;
                      ApplicationArea=#Basic,#Suite;
                      Image=DataEntry;
                      OnAction=BEGIN
                                 ProcessPackageTablesWithDefaultProcessingReport;
                                 ProcessPackageTablesWithCustomProcessingReports;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies a code for the configuration package.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Code;
                ImplicitType=Code20;
                ShowMandatory=TRUE }

    { 4   ;2   ;Field     ;
                Name=Package Name;
                ToolTipML=ENU=Specifies the name of the package.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Package Name";
                ImplicitType=Text50;
                ShowMandatory=TRUE }

    { 5   ;2   ;Field     ;
                Name=Product Version;
                ToolTipML=ENU=Specifies the version of the product that you are configuring. You can use this field to help differentiate among various versions of a solution.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Product Version";
                ImplicitType=Text80 }

    { 14  ;2   ;Field     ;
                Name=Language ID;
                ToolTipML=ENU=Specifies the ID of the Windows language to use for the configuration package. Choose the field and select a language ID from the list.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Language ID";
                ImplicitType=Integer }

    { 18  ;2   ;Field     ;
                Name=Processing Order;
                ToolTipML=ENU=Specifies the order in which the package is to be processed.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Processing Order";
                ImplicitType=Integer }

    { 9   ;2   ;Field     ;
                Name=Exclude Config. Tables;
                ToolTipML=ENU=Specifies whether to exclude configuration tables from the package. Select the check box to exclude these types of tables.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exclude Config. Tables";
                ImplicitType=Boolean }

    { 10  ;1   ;Part      ;
                Name=Part10;
                ApplicationArea=#Advanced;
                SubPageView=SORTING("Package Code","Table ID");
                SubPageLink="Package Code"=FIELD(Code);
                PagePartID="Config. Package Subform";
                PartType=Page }

    { 16  ;1   ;Part      ;
                Name=Part16;
                ApplicationArea=#Basic,#Suite;
                SubPageView=SORTING("Package Code","Table ID");
                SubPageLink="Package Code"=FIELD(Code);
                PagePartID="Config. Package Subform Saas";
                Visible=NOT ActionVisible;
                PartType=Page }

  }
  CODE
  {
    VAR
      ConfigXMLExchange@1001 : Codeunit "Config. XML Exchange";
      Text002@1005 : TextConst 'ENU=Validate package %1?';
      Text003@1004 : TextConst 'ENU=Apply data from package %1?';
      Text004@1003 : TextConst 'ENU=Export package %1 with %2 tables?';
      ActionVisible@1000 : Boolean;
      UnsupportedNewErr@1002 : TextConst 'ENU=You cannot create new Config. Packages.';
      UnsupportedEditErr@1006 : TextConst 'ENU=You cannot edit Config. Packages.';
      UnsupportedDeleteErr@1007 : TextConst 'ENU=You cannot delete Config. Packages.';

    LOCAL PROCEDURE ProcessPackageTablesWithDefaultProcessingReport@2();
    VAR
      ConfigPackageTable@1000 : Record "Config. Package Table";
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",Code);
      ConfigPackageTable.SETRANGE("Processing Report ID",0);
      if not ConfigPackageTable.ISEMPTY then
        REPORT.RUNMODAL(REPORT::"Config. Package - Process",false,false,ConfigPackageTable);
    END;

    LOCAL PROCEDURE ProcessPackageTablesWithCustomProcessingReports@3();
    VAR
      ConfigPackageTable@1000 : Record "Config. Package Table";
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",Code);
      ConfigPackageTable.SETFILTER("Processing Report ID",'<>0',0);
      if ConfigPackageTable.FINDSET then
        repeat
          REPORT.RUNMODAL(ConfigPackageTable."Processing Report ID",false,false,ConfigPackageTable)
        until ConfigPackageTable.NEXT = 0;
    END;

    LOCAL PROCEDURE SetActionVisibility@1();
    VAR
      ApplicationAreaSetup@1000 : Record "Application Area Setup";
    BEGIN
      ActionVisible := not ApplicationAreaSetup.IsFoundationEnabled;  // Only hide for Basic and Suite
    END;

    BEGIN
    END.
  }
}

