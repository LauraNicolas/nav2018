OBJECT Table 7190 Sales Shipment Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Shipment Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                   OptionString=" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)" }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST("Fixed Asset")) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=ENU=No. }
    { 7   ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity }
    { 8   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
  }
  KEYS
  {
    {    ;"Document No.","Line No.","Entry No."   ;SumIndexFields=Quantity;
                                                   Clustered=true }
    {    ;"Document No.","Line No.","Posting Date" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NextEntryNo@1000 : Integer;

    [External]
    PROCEDURE GetLinesForSalesInvoiceLine@1(VAR SalesInvoiceLine@1000 : Record "Sales Invoice Line";VAR SalesInvoiceHeader@1002 : Record "Sales Invoice Header");
    VAR
      ValueEntry@1001 : Record "Value Entry";
    BEGIN
      case SalesInvoiceLine.Type of
        SalesInvoiceLine.Type::Item:
          GenerateBufferFromValueEntry(
            ValueEntry."Document Type"::"Sales Invoice",
            SalesInvoiceLine."Document No.",
            SalesInvoiceLine."Line No.",
            SalesInvoiceLine.Type,
            SalesInvoiceLine."No.",
            SalesInvoiceHeader."Posting Date",
            SalesInvoiceLine."Quantity (Base)",
            SalesInvoiceLine."Qty. per Unit of Measure");
        SalesInvoiceLine.Type::"G/L Account",SalesInvoiceLine.Type::Resource,
        SalesInvoiceLine.Type::"Charge (Item)",SalesInvoiceLine.Type::"Fixed Asset":
          GenerateBufferFromShipment(SalesInvoiceLine,SalesInvoiceHeader);
      end;
    END;

    [External]
    PROCEDURE GetLinesForSalesCreditMemoLine@2(SalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header");
    VAR
      ValueEntry@1001 : Record "Value Entry";
    BEGIN
      case SalesCrMemoLine.Type of
        SalesCrMemoLine.Type::Item:
          GenerateBufferFromValueEntry(
            ValueEntry."Document Type"::"Sales Credit Memo",
            SalesCrMemoLine."Document No.",
            SalesCrMemoLine."Line No.",
            SalesCrMemoLine.Type,
            SalesCrMemoLine."No.",
            SalesCrMemoHeader."Posting Date",
            -SalesCrMemoLine."Quantity (Base)",
            SalesCrMemoLine."Qty. per Unit of Measure");
        SalesCrMemoLine.Type::"G/L Account",SalesCrMemoLine.Type::Resource,
        SalesCrMemoLine.Type::"Charge (Item)",SalesCrMemoLine.Type::"Fixed Asset":
          GenerateBufferFromReceipt(SalesCrMemoLine,SalesCrMemoHeader);
      end;
    END;

    LOCAL PROCEDURE GenerateBufferFromValueEntry@3(ValueEntryDocType@1002 : Option;DocNo@1005 : Code[20];DocLineNo@1006 : Integer;LineType@1010 : Option;ItemNo@1008 : Code[20];PostingDate@1007 : Date;QtyBase@1011 : Decimal;QtyPerUOM@1009 : Decimal);
    VAR
      ValueEntry@1000 : Record "Value Entry";
      ItemLedgerEntry@1001 : Record "Item Ledger Entry";
      TotalQuantity@1003 : Decimal;
      Quantity@1004 : Decimal;
    BEGIN
      TotalQuantity := QtyBase;
      ValueEntry.SETRANGE("Document Type",ValueEntryDocType);
      ValueEntry.SETRANGE("Document No.",DocNo);
      ValueEntry.SETRANGE("Document Line No.",DocLineNo);
      ValueEntry.SETRANGE("Posting Date",PostingDate);
      ValueEntry.SETRANGE("Item Charge No.",'');
      ValueEntry.SETRANGE("Item No.",ItemNo);
      if ValueEntry.FIND('-') then
        repeat
          if ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.") then begin
            if QtyPerUOM <> 0 then
              Quantity := ROUND(ValueEntry."Invoiced Quantity" / QtyPerUOM,0.00001)
            else
              Quantity := ValueEntry."Invoiced Quantity";
            AddBufferEntry(
              ABS(Quantity),
              ItemLedgerEntry."Posting Date",
              ItemLedgerEntry."Document No.",
              DocLineNo,LineType,ItemNo);
            TotalQuantity := TotalQuantity + ValueEntry."Invoiced Quantity";
          end;
        until (ValueEntry.NEXT = 0) or (TotalQuantity = 0);
    END;

    LOCAL PROCEDURE GenerateBufferFromShipment@8(SalesInvoiceLine2@1000 : Record "Sales Invoice Line";SalesInvoiceHeader2@1007 : Record "Sales Invoice Header");
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      SalesInvoiceLine@1002 : Record "Sales Invoice Line";
      SalesShipmentHeader@1006 : Record "Sales Shipment Header";
      SalesShipmentLine@1004 : Record "Sales Shipment Line";
      TotalQuantity@1003 : Decimal;
      Quantity@1005 : Decimal;
    BEGIN
      TotalQuantity := 0;
      SalesInvoiceHeader.SETFILTER("No.",'..%1',SalesInvoiceHeader2."No.");
      SalesInvoiceHeader.SETRANGE("Order No.",SalesInvoiceHeader2."Order No.");
      if SalesInvoiceHeader.FIND('-') then
        repeat
          SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          SalesInvoiceLine.SETRANGE("Line No.",SalesInvoiceLine2."Line No.");
          SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine2.Type);
          SalesInvoiceLine.SETRANGE("No.",SalesInvoiceLine2."No.");
          SalesInvoiceLine.SETRANGE("Unit of Measure Code",SalesInvoiceLine2."Unit of Measure Code");
          if SalesInvoiceLine.FIND('-') then
            repeat
              TotalQuantity := TotalQuantity + SalesInvoiceLine.Quantity;
            until SalesInvoiceLine.NEXT = 0;
        until SalesInvoiceHeader.NEXT = 0;

      SalesShipmentLine.SETRANGE("Order No.",SalesInvoiceHeader2."Order No.");
      SalesShipmentLine.SETRANGE("Order Line No.",SalesInvoiceLine2."Line No.");
      SalesShipmentLine.SETRANGE("Line No.",SalesInvoiceLine2."Line No.");
      SalesShipmentLine.SETRANGE(Type,SalesInvoiceLine2.Type);
      SalesShipmentLine.SETRANGE("No.",SalesInvoiceLine2."No.");
      SalesShipmentLine.SETRANGE("Unit of Measure Code",SalesInvoiceLine2."Unit of Measure Code");
      SalesShipmentLine.SETFILTER(Quantity,'<>%1',0);

      if SalesShipmentLine.FIND('-') then
        repeat
          if SalesInvoiceHeader2."Get Shipment Used" then
            CorrectShipment(SalesShipmentLine);
          if ABS(SalesShipmentLine.Quantity) <= ABS(TotalQuantity - SalesInvoiceLine2.Quantity) then
            TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity
          else begin
            if ABS(SalesShipmentLine.Quantity) > ABS(TotalQuantity) then
              SalesShipmentLine.Quantity := TotalQuantity;
            Quantity :=
              SalesShipmentLine.Quantity - (TotalQuantity - SalesInvoiceLine2.Quantity);

            TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity;
            SalesInvoiceLine.Quantity := SalesInvoiceLine.Quantity - Quantity;

            if SalesShipmentHeader.GET(SalesShipmentLine."Document No.") then
              AddBufferEntry(
                Quantity,
                SalesShipmentHeader."Posting Date",
                SalesShipmentHeader."No.",
                SalesInvoiceLine2."Line No.",
                SalesInvoiceLine2.Type,
                SalesInvoiceLine2."No.");
          end;
        until (SalesShipmentLine.NEXT = 0) or (TotalQuantity = 0);
    END;

    LOCAL PROCEDURE GenerateBufferFromReceipt@10(SalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";SalesCrMemoHeader@1007 : Record "Sales Cr.Memo Header");
    VAR
      SalesCrMemoHeader2@1001 : Record "Sales Cr.Memo Header";
      SalesCrMemoLine2@1002 : Record "Sales Cr.Memo Line";
      ReturnReceiptHeader@1006 : Record "Return Receipt Header";
      ReturnReceiptLine@1004 : Record "Return Receipt Line";
      TotalQuantity@1003 : Decimal;
      Quantity@1005 : Decimal;
    BEGIN
      if SalesCrMemoHeader."Return Order No." = '' then
        exit;

      TotalQuantity := 0;
      SalesCrMemoHeader2.SETCURRENTKEY("Return Order No.");
      SalesCrMemoHeader2.SETFILTER("No.",'..%1',SalesCrMemoHeader."No.");
      SalesCrMemoHeader2.SETRANGE("Return Order No.",SalesCrMemoHeader."Return Order No.");
      if SalesCrMemoHeader2.FIND('-') then
        repeat
          SalesCrMemoLine2.SETRANGE("Document No.",SalesCrMemoHeader2."No.");
          SalesCrMemoLine2.SETRANGE("Line No.",SalesCrMemoLine."Line No.");
          SalesCrMemoLine2.SETRANGE(Type,SalesCrMemoLine.Type);
          SalesCrMemoLine2.SETRANGE("No.",SalesCrMemoLine."No.");
          SalesCrMemoLine2.SETRANGE("Unit of Measure Code",SalesCrMemoLine."Unit of Measure Code");
          SalesCrMemoLine2.CALCSUMS(Quantity);
          TotalQuantity := TotalQuantity + SalesCrMemoLine2.Quantity;
        until SalesCrMemoHeader2.NEXT = 0;

      ReturnReceiptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
      ReturnReceiptLine.SETRANGE("Return Order No.",SalesCrMemoHeader."Return Order No.");
      ReturnReceiptLine.SETRANGE("Return Order Line No.",SalesCrMemoLine."Line No.");
      ReturnReceiptLine.SETRANGE("Line No.",SalesCrMemoLine."Line No.");
      ReturnReceiptLine.SETRANGE(Type,SalesCrMemoLine.Type);
      ReturnReceiptLine.SETRANGE("No.",SalesCrMemoLine."No.");
      ReturnReceiptLine.SETRANGE("Unit of Measure Code",SalesCrMemoLine."Unit of Measure Code");
      ReturnReceiptLine.SETFILTER(Quantity,'<>%1',0);

      if ReturnReceiptLine.FIND('-') then
        repeat
          if SalesCrMemoHeader."Get Return Receipt Used" then
            CorrectReceipt(ReturnReceiptLine);
          if ABS(ReturnReceiptLine.Quantity) <= ABS(TotalQuantity - SalesCrMemoLine.Quantity) then
            TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity
          else begin
            if ABS(ReturnReceiptLine.Quantity) > ABS(TotalQuantity) then
              ReturnReceiptLine.Quantity := TotalQuantity;
            Quantity :=
              ReturnReceiptLine.Quantity - (TotalQuantity - SalesCrMemoLine.Quantity);

            SalesCrMemoLine.Quantity := SalesCrMemoLine.Quantity - Quantity;
            TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity;

            if ReturnReceiptHeader.GET(ReturnReceiptLine."Document No.") then
              AddBufferEntry(
                Quantity,
                ReturnReceiptHeader."Posting Date",
                ReturnReceiptHeader."No.",
                SalesCrMemoLine."Line No.",
                SalesCrMemoLine.Type,
                SalesCrMemoLine."No.");
          end;
        until (ReturnReceiptLine.NEXT = 0) or (TotalQuantity = 0);
    END;

    LOCAL PROCEDURE AddBufferEntry@4(QtyOnShipment@1002 : Decimal;PostingDate@1003 : Date;ShipmentNo@1000 : Code[20];DocLineNo@1001 : Integer;LineType@1004 : Option;ItemNo@1005 : Code[20]);
    BEGIN
      SETRANGE("Document No.",ShipmentNo);
      SETRANGE("Line No.",DocLineNo);
      SETRANGE("Posting Date",PostingDate);
      if FINDFIRST then begin
        Quantity += QtyOnShipment;
        MODIFY;
        exit;
      end;

      NextEntryNo := NextEntryNo + 1;
      "Document No." := ShipmentNo;
      "Line No." := DocLineNo;
      "Entry No." := NextEntryNo;
      Type := LineType;
      "No." := ItemNo;
      Quantity := QtyOnShipment;
      "Posting Date" := PostingDate;
      INSERT;
    END;

    LOCAL PROCEDURE CorrectShipment@7(VAR SalesShipmentLine@1001 : Record "Sales Shipment Line");
    VAR
      SalesInvoiceLine@1000 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.SETCURRENTKEY("Shipment No.","Shipment Line No.");
      SalesInvoiceLine.SETRANGE("Shipment No.",SalesShipmentLine."Document No.");
      SalesInvoiceLine.SETRANGE("Shipment Line No.",SalesShipmentLine."Line No.");
      SalesInvoiceLine.CALCSUMS(Quantity);
      SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
    END;

    LOCAL PROCEDURE CorrectReceipt@11(VAR ReturnReceiptLine@1001 : Record "Return Receipt Line");
    VAR
      SalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";
    BEGIN
      SalesCrMemoLine.SETCURRENTKEY("Return Receipt No.","Return Receipt Line No.");
      SalesCrMemoLine.SETRANGE("Return Receipt No.",ReturnReceiptLine."Document No.");
      SalesCrMemoLine.SETRANGE("Return Receipt Line No.",ReturnReceiptLine."Line No.");
      SalesCrMemoLine.CALCSUMS(Quantity);
      ReturnReceiptLine.Quantity := ReturnReceiptLine.Quantity - SalesCrMemoLine.Quantity;
    END;

    BEGIN
    END.
  }
}

