OBJECT Table 485 Business Chart Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=ENU=Business Chart Buffer;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;CaptionML=ENU=ID }
    { 2   ;   ;Chart Type          ;Option        ;CaptionML=ENU=Chart Type;
                                                   OptionCaptionML=ENU=Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel;
                                                   OptionString=Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel }
    { 3   ;   ;Data Type           ;Option        ;CaptionML=ENU=Data Type;
                                                   OptionCaptionML=ENU=String,Integer,Decimal,DateTime;
                                                   OptionString=String,Integer,Decimal,DateTime }
    { 4   ;   ;XML                 ;BLOB          ;CaptionML=ENU=XML }
    { 5   ;   ;Drill-Down X Index  ;Integer       ;CaptionML=ENU=Drill-Down X Index }
    { 6   ;   ;Drill-Down Y Value  ;Decimal       ;CaptionML=ENU=Drill-Down Y Value }
    { 7   ;   ;Drill-Down Measure Index;Integer   ;CaptionML=ENU=Drill-Down Measure Index }
    { 8   ;   ;Period Length       ;Option        ;CaptionML=ENU=Period Length;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period,None;
                                                   OptionString=Day,Week,Month,Quarter,Year,"Accounting Period",None }
    { 9   ;   ;Period Filter Start Date;Date      ;CaptionML=ENU=Period Filter Start Date }
    { 10  ;   ;Period Filter End Date;Date        ;CaptionML=ENU=Period Filter End Date }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempBusChartMapToColumn@1001 : TEMPORARY Record "Business Chart Map";
      TempBusChartMapToMeasure@1000 : TEMPORARY Record "Business Chart Map";
      dotNetChartData@1012 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartData";
      dotNetDataTable@1013 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataTable";
      IsInitialized@1014 : Boolean;
      Text001@1002 : TextConst 'ENU=Data Type must be Integer or Decimal for Measure %1.';
      Text002@1007 : TextConst 'ENU=You cannot insert into table %1.';
      Text003@1005 : TextConst 'ENU=You cannot add more than %1 measures.';

    [Internal]
    PROCEDURE Initialize@2();
    VAR
      dotNetCultureInfo@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      if not IsInitialized then begin
        dotNetDataTable := dotNetDataTable.DataTable('DataTable');
        dotNetCultureInfo := dotNetCultureInfo.CultureInfo(WINDOWSLANGUAGE);
        dotNetDataTable.Locale := dotNetCultureInfo.InvariantCulture;

        dotNetChartData := dotNetChartData.BusinessChartData;
        IsInitialized := true;
      end;
      dotNetDataTable.Clear;
      dotNetDataTable.Columns.Clear;
      dotNetChartData.ClearMeasures;
      ClearMap(TempBusChartMapToColumn);
      ClearMap(TempBusChartMapToMeasure);
    END;

    LOCAL PROCEDURE ClearMap@16(VAR BusChartMap@1000 : Record "Business Chart Map");
    BEGIN
      BusChartMap.RESET;
      BusChartMap.DELETEALL;
    END;

    [External]
    PROCEDURE SetChartCondensed@30(Condensed@1000 : Boolean);
    BEGIN
      dotNetChartData.ShowChartCondensed := Condensed;
    END;

    [External]
    PROCEDURE SetXAxis@3(Caption@1000 : Text;Type@1001 : Option);
    BEGIN
      AddDataColumn(Caption,Type);
      dotNetChartData.XDimension := Caption;
    END;

    [Internal]
    PROCEDURE SetPeriodXAxis@38();
    VAR
      DataType@1000 : Option;
    BEGIN
      if "Period Length" = "Period Length"::Day then
        DataType := "Data Type"::DateTime
      else
        DataType := "Data Type"::String;
      SetXAxis(FORMAT("Period Length"),DataType);
    END;

    [External]
    PROCEDURE GetXCaption@35() : Text;
    BEGIN
      exit(dotNetChartData.XDimension);
    END;

    [External]
    PROCEDURE AddMeasure@4(Caption@1000 : Text;Value@1001 : Variant;ValueType@1004 : Option;ChartType@1002 : Integer);
    VAR
      DotNetChartType@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.DataMeasureType";
    BEGIN
      "Data Type" := ValueType;
      if not ("Data Type" in ["Data Type"::Integer,"Data Type"::Decimal]) then
        ERROR(Text001,Caption);
      AddDataColumn(Caption,ValueType);
      DotNetChartType := ChartType;
      dotNetChartData.AddMeasure(Caption,DotNetChartType);
      TempBusChartMapToMeasure.Add(
        COPYSTR(Caption,1,MAXSTRLEN(TempBusChartMapToMeasure.Name)),Value);
    END;

    [External]
    PROCEDURE GetMaxNumberOfMeasures@40() : Integer;
    VAR
      MaximumNumberOfColoursInChart@1000 : Integer;
    BEGIN
      MaximumNumberOfColoursInChart := 6;
      exit(MaximumNumberOfColoursInChart);
    END;

    [External]
    PROCEDURE RaiseErrorMaxNumberOfMeasuresExceeded@42();
    BEGIN
      ERROR(Text003,GetMaxNumberOfMeasures);
    END;

    [External]
    PROCEDURE AddColumn@9(Value@1002 : Variant);
    VAR
      Caption@1000 : Text;
    BEGIN
      ConvertDateToDateTime(Value);
      Caption := FORMAT(Value,0,9);
      AddColumnWithCaption(Value,Caption);
    END;

    [External]
    PROCEDURE AddPeriods@32(FromDate@1000 : Date;ToDate@1001 : Date);
    VAR
      ColumnNo@1002 : Integer;
      NumberOfPeriods@1003 : Integer;
    BEGIN
      NumberOfPeriods := CalcNumberOfPeriods(FromDate,ToDate);
      for ColumnNo := 1 to NumberOfPeriods do begin
        ToDate := CalcToDate(FromDate);
        AddPeriodColumn(ToDate);
        FromDate := CALCDATE('<1D>',ToDate);
      end;
    END;

    LOCAL PROCEDURE AddPeriodColumn@34(Value@1000 : Variant);
    VAR
      Caption@1001 : Text;
    BEGIN
      ConvertDateToDateTime(Value);
      Caption := GetPeriodCaption(Value);
      if "Period Length" = "Period Length"::Day then
        AddColumnWithCaption(Value,FORMAT(Value,0,9))
      else
        AddColumnWithCaption(Value,Caption);
    END;

    LOCAL PROCEDURE AddColumnWithCaption@37(Value@1000 : Variant;Caption@1001 : Text);
    VAR
      dotNetDataRow@1002 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
    BEGIN
      dotNetDataRow := dotNetDataTable.NewRow;
      dotNetDataRow.Item(GetXCaption,Caption);
      dotNetDataTable.Rows.Add(dotNetDataRow);
      TempBusChartMapToColumn.Add(Caption,Value);
    END;

    LOCAL PROCEDURE ConvertDateToDateTime@36(VAR Value@1000 : Variant);
    BEGIN
      if IsXAxisDateTime and Value.ISDATE then
        Value := CREATEDATETIME(Value,120000T);
    END;

    LOCAL PROCEDURE AddDataColumn@5(Caption@1003 : Text;ValueType@1002 : Option);
    VAR
      dotNetDataColumn@1001 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataColumn";
      dotNetSystemType@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      dotNetDataColumn := dotNetDataColumn.DataColumn(Caption);
      dotNetDataColumn.Caption := Caption;
      dotNetDataColumn.ColumnName(Caption);
      dotNetDataColumn.DataType(dotNetSystemType.GetType(GetSystemTypeName(ValueType)));
      dotNetDataTable.Columns.Add(dotNetDataColumn);
    END;

    LOCAL PROCEDURE GetSystemTypeName@6(Type@1000 : Option) : Text;
    BEGIN
      case Type of
        "Data Type"::String:
          exit('System.String');
        "Data Type"::Integer:
          exit('System.Int32');
        "Data Type"::Decimal:
          exit('System.Decimal');
        "Data Type"::DateTime:
          exit('System.DateTime');
      end;
    END;

    [Internal]
    PROCEDURE SetValue@10(MeasureName@1001 : Text;XAxisIndex@1000 : Integer;Value@1002 : Variant);
    VAR
      dotNetDataRow@1003 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
    BEGIN
      dotNetDataRow := dotNetDataTable.Rows.Item(XAxisIndex);
      dotNetDataRow.Item(MeasureName,Value);
    END;

    [External]
    PROCEDURE SetValueByIndex@11(MeasureIndex@1001 : Integer;XAxisIndex@1000 : Integer;Value@1002 : Variant);
    VAR
      dotNetDataRow@1003 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
    BEGIN
      dotNetDataRow := dotNetDataTable.Rows.Item(XAxisIndex);
      dotNetDataRow.Item(TempBusChartMapToMeasure.GetName(MeasureIndex),Value);
    END;

    [External]
    PROCEDURE FindFirstMeasure@23(VAR BusChartMap@1000 : Record "Business Chart Map") Result : Boolean;
    BEGIN
      TempBusChartMapToMeasure.RESET;
      Result := TempBusChartMapToMeasure.FINDSET;
      BusChartMap := TempBusChartMapToMeasure;
    END;

    [External]
    PROCEDURE NextMeasure@24(VAR BusChartMap@1000 : Record "Business Chart Map") Result : Boolean;
    BEGIN
      Result := TempBusChartMapToMeasure.NEXT <> 0;
      BusChartMap := TempBusChartMapToMeasure;
    END;

    [External]
    PROCEDURE FindFirstColumn@21(VAR BusChartMap@1000 : Record "Business Chart Map") Result : Boolean;
    BEGIN
      TempBusChartMapToColumn.RESET;
      Result := TempBusChartMapToColumn.FINDSET;
      BusChartMap := TempBusChartMapToColumn;
    END;

    [External]
    PROCEDURE FindMidColumn@29(VAR BusChartMap@1000 : Record "Business Chart Map") Result : Boolean;
    VAR
      MidColumnIndex@1001 : Integer;
    BEGIN
      TempBusChartMapToColumn.RESET;
      TempBusChartMapToColumn.FINDLAST;
      MidColumnIndex := -ROUND(TempBusChartMapToColumn.COUNT div 2);
      Result := MidColumnIndex = TempBusChartMapToColumn.NEXT(MidColumnIndex);
      BusChartMap := TempBusChartMapToColumn;
    END;

    [External]
    PROCEDURE NextColumn@22(VAR BusChartMap@1000 : Record "Business Chart Map") Result : Boolean;
    BEGIN
      Result := TempBusChartMapToColumn.NEXT <> 0;
      BusChartMap := TempBusChartMapToColumn;
    END;

    [External]
    PROCEDURE GetValue@14(MeasureName@1001 : Text;XAxisIndex@1000 : Integer;VAR Value@1002 : Variant);
    VAR
      dotNetDataRow@1003 : DotNet "'System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
    BEGIN
      dotNetDataRow := dotNetDataTable.Rows.Item(XAxisIndex);
      Value := dotNetDataRow.Item(MeasureName);
    END;

    [External]
    PROCEDURE GetXValue@7(XAxisIndex@1001 : Integer;VAR Value@1002 : Variant);
    BEGIN
      GetValue(GetXCaption,XAxisIndex,Value);
    END;

    [External]
    PROCEDURE GetXValueAsDate@19(XIndex@1000 : Integer) : Date;
    VAR
      Value@1001 : Variant;
    BEGIN
      if IsXAxisDateTime then begin
        GetXValue(XIndex,Value);
        exit(VARIANT2DATE(Value));
      end;
      TempBusChartMapToColumn.GET(XIndex);
      exit(TempBusChartMapToColumn.GetValueAsDate);
    END;

    [External]
    PROCEDURE GetMeasureValueString@8(MeasureIndex@1000 : Integer) : Text;
    BEGIN
      exit(TempBusChartMapToMeasure.GetValueString(MeasureIndex));
    END;

    [External]
    PROCEDURE GetMeasureName@41(MeasureIndex@1000 : Integer) : Text;
    BEGIN
      exit(TempBusChartMapToMeasure.GetName(MeasureIndex));
    END;

    [External]
    PROCEDURE GetCurrMeasureValueString@12() : Text;
    BEGIN
      exit(TempBusChartMapToMeasure.GetValueString("Drill-Down Measure Index"));
    END;

    [External]
    PROCEDURE Update@15(dotNetChartAddIn@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartAddIn");
    BEGIN
      dotNetChartData.DataTable := dotNetDataTable;
      dotNetChartAddIn.Update(dotNetChartData);
    END;

    [Internal]
    PROCEDURE SetDrillDownIndexes@1(dotNetPoint@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    VAR
      XValueString@1007 : Text;
      MeasureName@1004 : Text;
      YValue@1005 : Decimal;
    BEGIN
      MeasureName := dotNetPoint.Measures.GetValue(0);
      "Drill-Down Measure Index" := TempBusChartMapToMeasure.GetIndex(MeasureName);

      XValueString := dotNetPoint.XValueString;
      if IsXAxisDateTime then
        XValueString := GetDateString(XValueString);
      "Drill-Down X Index" := TempBusChartMapToColumn.GetIndex(XValueString);

      if EVALUATE(YValue,FORMAT(dotNetPoint.YValues.GetValue(0))) then
        "Drill-Down Y Value" := YValue;
    END;

    LOCAL PROCEDURE GetDateString@17(XValueString@1000 : Text) : Text;
    VAR
      Days@1002 : Decimal;
      DateTime@1001 : DateTime;
    BEGIN
      if EVALUATE(Days,XValueString,9) then begin
        DateTime := CREATEDATETIME(DMY2DATE(30,12,1899) + ROUND(Days,1,'<'),120000T);
        exit(FORMAT(DateTime,0,9));
      end;
      exit(XValueString);
    END;

    [Internal]
    PROCEDURE IsXAxisDateTime@26() : Boolean;
    BEGIN
      exit(FORMAT(dotNetDataTable.Columns.Item(0).DataType) = 'System.DateTime')
    END;

    [External]
    PROCEDURE WriteToXML@48(VAR XMLDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLElement@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      OutStream@1005 : OutStream;
      InStream@1004 : InStream;
      XMLLine@1003 : Text[80];
      XMLText@1001 : Text;
    BEGIN
      XML.CREATEOUTSTREAM(OutStream);
      dotNetDataTable.WriteXml(OutStream);
      XML.CREATEINSTREAM(InStream);
      while not InStream.EOS do begin
        InStream.READTEXT(XMLLine);
        XMLText := XMLText + XMLLine;
      end;
      XMLElement := XMLDoc.CreateElement('DataTable','test','');
      XMLElement.InnerXml(XMLText);
      XMLDoc.AppendChild(XMLElement);
    END;

    [External]
    PROCEDURE CalcFromDate@18(Date@1000 : Date) : Date;
    BEGIN
      exit(CalcPeriodDate(Date,true));
    END;

    [External]
    PROCEDURE CalcToDate@13(Date@1000 : Date) : Date;
    BEGIN
      exit(CalcPeriodDate(Date,false));
    END;

    LOCAL PROCEDURE CalcPeriodDate@39(Date@1000 : Date;CalcStartDate@1001 : Boolean) : Date;
    VAR
      Modificator@1002 : Text[1];
    BEGIN
      if Date = 0D then
        exit(Date);

      case "Period Length" of
        "Period Length"::Day:
          exit(Date);
        "Period Length"::Week,
        "Period Length"::Month,
        "Period Length"::Quarter,
        "Period Length"::Year:
          begin
            if CalcStartDate then
              Modificator := '-';
            exit(CALCDATE(STRSUBSTNO('<%1C%2>',Modificator,GetPeriodLength),Date));
          end;
      end;
    END;

    [External]
    PROCEDURE CalcNumberOfPeriods@28(FromDate@1000 : Date;ToDate@1001 : Date) : Integer;
    VAR
      NumberOfPeriods@1002 : Integer;
    BEGIN
      if FromDate = ToDate then
        exit(1);
      if ToDate < FromDate then
        SwapDates(FromDate,ToDate);

      case "Period Length" of
        "Period Length"::Day:
          NumberOfPeriods := ToDate - FromDate;
        "Period Length"::Week:
          NumberOfPeriods := (CALCDATE('<-CW>',ToDate) - CALCDATE('<-CW>',FromDate)) div 7;
        "Period Length"::Month:
          NumberOfPeriods := DATE2DMY(ToDate,2) - DATE2DMY(FromDate,2) + GetNumberOfYears(FromDate,ToDate) * 12;
        "Period Length"::Quarter:
          NumberOfPeriods := GetQuarterIndex(ToDate) - GetQuarterIndex(FromDate) + GetNumberOfYears(FromDate,ToDate) * 4;
        "Period Length"::Year:
          NumberOfPeriods := GetNumberOfYears(FromDate,ToDate);
      end;
      exit(NumberOfPeriods + 1);
    END;

    LOCAL PROCEDURE SwapDates@27(VAR FromDate@1000 : Date;VAR ToDate@1001 : Date);
    VAR
      Date@1002 : Date;
    BEGIN
      Date := FromDate;
      FromDate := ToDate;
      ToDate := Date;
    END;

    LOCAL PROCEDURE GetNumberOfYears@25(FromDate@1000 : Date;ToDate@1001 : Date) : Integer;
    BEGIN
      exit(DATE2DMY(ToDate,3) - DATE2DMY(FromDate,3));
    END;

    LOCAL PROCEDURE GetQuarterIndex@20(Date@1000 : Date) : Integer;
    BEGIN
      exit((DATE2DMY(Date,2) - 1) div 3 + 1);
    END;

    [External]
    PROCEDURE GetPeriodLength@31() : Text[1];
    BEGIN
      case "Period Length" of
        "Period Length"::Day:
          exit('D');
        "Period Length"::Week:
          exit('W');
        "Period Length"::Month:
          exit('M');
        "Period Length"::Quarter:
          exit('Q');
        "Period Length"::Year:
          exit('Y');
      end;
    END;

    LOCAL PROCEDURE GetPeriodCaption@33(Date@1000 : Variant) : Text;
    VAR
      PeriodFormManagement@1001 : Codeunit PeriodFormManagement;
    BEGIN
      if Date.ISDATETIME or Date.ISDATE then
        exit(PeriodFormManagement.CreatePeriodFormat("Period Length",Date));
      exit(FORMAT(Date,0,9));
    END;

    [Internal]
    PROCEDURE GetPeriodFromMapColumn@43(ColumnIndex@1002 : Integer;VAR FromDate@1001 : Date;VAR ToDate@1000 : Date);
    BEGIN
      ToDate := GetXValueAsDate(ColumnIndex);
      FromDate := CalcFromDate(ToDate);
    END;

    [External]
    PROCEDURE InitializePeriodFilter@46(StartDate@1000 : Date;EndDate@1001 : Date);
    BEGIN
      "Period Filter Start Date" := StartDate;
      "Period Filter End Date" := EndDate;
    END;

    [Internal]
    PROCEDURE RecalculatePeriodFilter@44(VAR StartDate@1005 : Date;VAR EndDate@1004 : Date;MovePeriod@1000 : '" ",Next,Previous');
    VAR
      Calendar@1003 : Record Date;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
      SearchText@1001 : Text[3];
    BEGIN
      if StartDate <> 0D then begin
        Calendar.SETFILTER("Period Start",'%1..%2',StartDate,EndDate);
        if not PeriodFormMgt.FindDate('+',Calendar,"Period Length") then
          PeriodFormMgt.FindDate('+',Calendar,Calendar."Period Type"::Date);
        Calendar.SETRANGE("Period Start");
      end;

      case MovePeriod of
        MovePeriod::Next:
          SearchText := '>=';
        MovePeriod::Previous:
          SearchText := '<=';
        else
          SearchText := '';
      end;

      PeriodFormMgt.FindDate(SearchText,Calendar,"Period Length");

      StartDate := Calendar."Period Start";
      EndDate := Calendar."Period End";
    END;

    BEGIN
    END.
  }
}

