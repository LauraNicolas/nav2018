OBJECT Report 9200 Void/Transmit Elec. Pmnts
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Void/Transmit Electronic Payments;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  BankAccount.GET(BankAccount."No.");
                  BankAccount.TESTFIELD(Blocked,false);

                  if UsageType <> UsageType::Transmit then
                    if not CONFIRM(ActionConfirmQst,
                         false,
                         UsageType,
                         BankAccount.TABLECAPTION,
                         BankAccount."No.")
                    then
                      CurrReport.QUIT;
                END;

  }
  DATASET
  {
    { 7024;    ;DataItem;Gen. Journal Line   ;
               DataItemTable="Gen. Journal Line";
               DataItemTableView=SORTING("Journal Template Name","Journal Batch Name","Line No.") WHERE("Document Type"=FILTER(Payment|Refund),"Bank Payment Type"=FILTER("Electronic Payment"|"Electronic Payment-IAT"),"Exported to Payment File"=CONST(true),"Check Transmitted"=CONST(false));
               OnPreDataItem=BEGIN
                               FirstTime := true;
                             END;

               OnAfterGetRecord=BEGIN
                                  if SkipReport("Account Type","Bal. Account Type","Account No.","Bal. Account No.",BankAccount."No.") then
                                    CurrReport.SKIP;

                                  if FirstTime then begin
                                    case UsageType of
                                      UsageType::Void:
                                        if "Check Transmitted" then
                                          ERROR(AlreadyTransmittedNoVoidErr);
                                      UsageType::Transmit:
                                        begin
                                          if "Check Transmitted" then
                                            ERROR(AlreadyTransmittedErr);
                                          if "Document No." = '' then
                                            ERROR(VoidedOrNoDocNoErr);
                                          if not RTCConfirmTransmit then
                                            exit;
                                        end;
                                    end;
                                    FirstTime := false;
                                  end;
                                  CheckManagement.ProcessElectronicPayment("Gen. Journal Line",UsageType);

                                  if UsageType = UsageType::Void then begin
                                    "Exported to Payment File" := false;
                                    "Check Exported" := false;
                                    "Check Printed" := false;
                                    "Document No." := '';
                                  end else
                                    "Check Transmitted" := true;

                                  MODIFY;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=false;
      OnOpenPage=BEGIN
                   DisplayUsageType := UsageType;
                   if DisplayUsageType = 0 then
                     ERROR(OnlyRunFromPaymentJournalErr);
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Bank Account No.;
                  CaptionML=ENU=Bank Account No.;
                  ToolTipML=ENU=Specifies the bank account that the payment is transmitted to.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=BankAccount."No.";
                  TableRelation="Bank Account" }

      { 3   ;2   ;Field     ;
                  Name=Operation;
                  CaptionML=ENU=Operation;
                  ToolTipML=ENU=Specifies if you want to transmit or void the electronic payment file. The Transmit option produces an electronic payment file to be transmitted to your bank for processing. The Void option voids the exported file. Confirm that the correct selection has been made before you process the electronic payment file.;
                  OptionCaptionML=ENU=,Void,Transmit;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DisplayUsageType;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      BankAccount@1000 : Record "Bank Account";
      CheckManagement@1001 : Codeunit CheckManagement;
      FirstTime@1004 : Boolean;
      UsageType@1005 : ',Void,Transmit';
      DisplayUsageType@1006 : ',Void,Transmit';
      ActionConfirmQst@1007 : TextConst '@@@="%1=Action taken., %2=Name of the Bank Account table., %3=Bank Account Number.";ENU=Are you SURE you want to %1 all of the Electronic Payments written against %2 %3?';
      AlreadyTransmittedNoVoidErr@1008 : TextConst 'ENU=The export file has already been transmitted. You can no longer void these entries.';
      AlreadyTransmittedErr@1010 : TextConst 'ENU=The export file has already been transmitted.';
      OnlyRunFromPaymentJournalErr@1003 : TextConst 'ENU=This process can only be run from the Payment Journal.';
      TransmittedQst@1009 : TextConst 'ENU=Has export file been successfully transmitted?';
      VoidedOrNoDocNoErr@1002 : TextConst 'ENU=The export file cannot be transmitted if the payment has been voided or is missing a Document No.';

    PROCEDURE SetUsageType@2(NewUsageType@1000 : ',Void,Transmit');
    BEGIN
      UsageType := NewUsageType;
    END;

    PROCEDURE RTCConfirmTransmit@3() : Boolean;
    BEGIN
      if not CONFIRM(TransmittedQst,false) then
        exit(false);

      exit(true);
    END;

    PROCEDURE SetBankAccountNo@1(AccountNumber@1000 : Code[20]);
    BEGIN
      BankAccount.GET(AccountNumber);
    END;

    LOCAL PROCEDURE SkipReport@4(AccountType@1000 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner"';BalAccountType@1001 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner"';AccountNo@1002 : Code[20];BalAccountNo@1003 : Code[20];BankAccountNo@1004 : Code[20]) : Boolean;
    BEGIN
      if AccountType = AccountType::"Bank Account" then
        if AccountNo <> BankAccountNo then
          exit(true);

      if BalAccountType = BalAccountType::"Bank Account" then
        if BalAccountNo <> BankAccountNo then
          exit(true);

      if (AccountType <> AccountType::"Bank Account") and (BalAccountType <> BalAccountType::"Bank Account") then
        exit(true);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

