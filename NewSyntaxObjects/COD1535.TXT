OBJECT Codeunit 1535 Approvals Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Approval Entry"=imd,
                TableData "Approval Comment Line"=imd,
                TableData "Posted Approval Entry"=imd,
                TableData "Posted Approval Comment Line"=imd,
                TableData "Overdue Approval Entry"=imd,
                TableData "Notification Entry"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserIdNotInSetupErr@1015 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the Approval User Setup window.';
      ApproverUserIdNotInSetupErr@1005 : TextConst '@@@=You must set up an approver for user ID NAVUser in the Approval User Setup window.;ENU=You must set up an approver for user ID %1 in the Approval User Setup window.';
      WFUserGroupNotInSetupErr@1013 : TextConst '@@@=The workflow user group member with user ID NAVUser does not exist in the Approval User Setup window.;ENU=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.';
      SubstituteNotFoundErr@1007 : TextConst '@@@=There is no substitute for user ID NAVUser in the Approval User Setup window.;ENU=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.';
      NoSuitableApproverFoundErr@1000 : TextConst 'ENU=No qualified approver was found.';
      DelegateOnlyOpenRequestsErr@1049 : TextConst 'ENU=You can only delegate open approval requests.';
      ApproveOnlyOpenRequestsErr@1060 : TextConst 'ENU=You can only approve open approval requests.';
      RejectOnlyOpenRequestsErr@1061 : TextConst 'ENU=You can only reject open approval entries.';
      ApprovalsDelegatedMsg@1018 : TextConst 'ENU=The selected approval requests have been delegated.';
      NoReqToApproveErr@1056 : TextConst 'ENU=There is no approval request to approve.';
      NoReqToRejectErr@1057 : TextConst 'ENU=There is no approval request to reject.';
      NoReqToDelegateErr@1059 : TextConst 'ENU=There is no approval request to delegate.';
      PendingApprovalMsg@1002 : TextConst 'ENU=An approval request has been sent.';
      NoApprovalsSentMsg@1006 : TextConst 'ENU=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.';
      PendingApprovalForSelectedLinesMsg@1020 : TextConst 'ENU=Approval requests have been sent.';
      PendingApprovalForSomeSelectedLinesMsg@1001 : TextConst 'ENU=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.';
      PurchaserUserNotFoundErr@1003 : TextConst '@@@=Example: The salesperson/purchaser user ID NAVUser does not exist in the Approval User Setup window for Salesperson/Purchaser code AB.;ENU=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.';
      NoApprovalRequestsFoundErr@1009 : TextConst 'ENU=No approval requests exist.';
      NoWFUserGroupMembersErr@1004 : TextConst 'ENU=A workflow user group with at least one member must be set up.';
      DocStatusChangedMsg@1010 : TextConst '@@@=Order 1001 has been automatically approved. The status has been changed to Released.;ENU=%1 %2 has been automatically approved. The status has been changed to %3.';
      UnsupportedRecordTypeErr@1011 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.';
      PrePostCheckErr@1012 : TextConst '@@@="%1=document type, %2=document no., e.g. Order 321 must be approved...";ENU=%1 %2 must be approved and released before you can perform this action.';
      WorkflowEventHandling@1071 : Codeunit "Workflow Event Handling";
      WorkflowManagement@1070 : Codeunit "Workflow Management";
      NoWorkflowEnabledErr@1101 : TextConst 'ENU=No approval workflow for this record type is enabled.';
      ApprovalReqCanceledForSelectedLinesMsg@1019 : TextConst 'ENU=The approval request for the selected record has been canceled.';
      PendingJournalBatchApprovalExistsErr@1017 : TextConst '@@@=%1 is the Document No. of the journal line;ENU=An approval request already exists.';
      ApporvalChainIsUnsupportedMsg@1016 : TextConst '@@@=Only Direct Approver is supported as Approver Limit Type option for Gen. Journal Batch DEFAULT, CASH. The approval request will be approved automatically.;ENU=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.';
      RecHasBeenApprovedMsg@1008 : TextConst '@@@="%1 = Record Id";ENU=%1 has been approved.';
      NoPermissionToDelegateErr@1014 : TextConst 'ENU=You do not have permission to delegate one or more of the selected approval requests.';
      NothingToApproveErr@1021 : TextConst 'ENU=There is nothing to approve.';

    [Integration]
    [External]
    PROCEDURE OnSendPurchaseDocForApproval@3(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendSalesDocForApproval@10(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendIncomingDocForApproval@191(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelPurchaseApprovalRequest@4(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelSalesApprovalRequest@34(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelIncomingDocApprovalRequest@100(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendCustomerForApproval@52(VAR Customer@1000 : Record Customer);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendVendorForApproval@56(VAR Vendor@1000 : Record Vendor);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendItemForApproval@64(VAR Item@1000 : Record Item);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelCustomerApprovalRequest@51(VAR Customer@1000 : Record Customer);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelVendorApprovalRequest@67(VAR Vendor@1000 : Record Vendor);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelItemApprovalRequest@69(VAR Item@1000 : Record Item);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalBatchForApproval@62(VAR GenJournalBatch@1000 : Record "Gen. Journal Batch");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalBatchApprovalRequest@61(VAR GenJournalBatch@1000 : Record "Gen. Journal Batch");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalLineForApproval@65(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalLineApprovalRequest@63(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnApproveApprovalRequest@68(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnRejectApprovalRequest@76(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnDelegateApprovalRequest@78(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnRenameRecordInApprovalRequest@96(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    BEGIN
    END;

    [External]
    PROCEDURE ApproveRecordApprovalRequest@48(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      if not FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) then
        ERROR(NoReqToApproveErr);

      ApprovalEntry.SETRECFILTER;
      ApproveApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE ApproveGenJournalLineRequest@103(GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
      ApprovalEntry@1002 : Record "Approval Entry";
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) then
        ApproveRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) then
        ApproveRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE RejectRecordApprovalRequest@57(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      if not FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) then
        ERROR(NoReqToRejectErr);

      ApprovalEntry.SETRECFILTER;
      RejectApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE RejectGenJournalLineRequest@104(GenJournalLine@1002 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
      ApprovalEntry@1000 : Record "Approval Entry";
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) then
        RejectRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) then
        RejectRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE DelegateRecordApprovalRequest@58(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      if not FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) then
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE DelegateGenJournalLineRequest@29(GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1002 : Record "Gen. Journal Batch";
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) then
        DelegateRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      if FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) then
        DelegateRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE ApproveApprovalRequests@108(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      if ApprovalEntry.FINDSET(true) then
        repeat
          ApproveSelectedApprovalRequest(ApprovalEntry);
        until ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RejectApprovalRequests@28(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      if ApprovalEntry.FINDSET(true) then
        repeat
          RejectSelectedApprovalRequest(ApprovalEntry);
        until ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelegateApprovalRequests@27(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      if ApprovalEntry.FINDSET(true) then begin
        repeat
          DelegateSelectedApprovalRequest(ApprovalEntry,true);
        until ApprovalEntry.NEXT = 0;
        MESSAGE(ApprovalsDelegatedMsg);
      end;
    END;

    LOCAL PROCEDURE ApproveSelectedApprovalRequest@5(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      if ApprovalEntry.Status <> ApprovalEntry.Status::Open then
        ERROR(ApproveOnlyOpenRequestsErr);

      if ApprovalEntry."Approver ID" <> USERID then
        CheckUserAsApprovalAdministrator;

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(true);
      OnApproveApprovalRequest(ApprovalEntry);
    END;

    LOCAL PROCEDURE RejectSelectedApprovalRequest@2(VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      if ApprovalEntry.Status <> ApprovalEntry.Status::Open then
        ERROR(RejectOnlyOpenRequestsErr);

      if ApprovalEntry."Approver ID" <> USERID then
        CheckUserAsApprovalAdministrator;

      OnRejectApprovalRequest(ApprovalEntry);
      ApprovalEntry.GET(ApprovalEntry."Entry No.");
      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFY(true);
    END;

    [External]
    PROCEDURE DelegateSelectedApprovalRequest@1(VAR ApprovalEntry@1000 : Record "Approval Entry";CheckCurrentUser@1001 : Boolean);
    BEGIN
      if ApprovalEntry.Status <> ApprovalEntry.Status::Open then
        ERROR(DelegateOnlyOpenRequestsErr);

      if CheckCurrentUser and (not ApprovalEntry.CanCurrentUserEdit) then
        ERROR(NoPermissionToDelegateErr);

      SubstituteUserIdForApprovalEntry(ApprovalEntry)
    END;

    LOCAL PROCEDURE SubstituteUserIdForApprovalEntry@86(ApprovalEntry@1000 : Record "Approval Entry");
    VAR
      UserSetup@1001 : Record "User Setup";
      ApprovalAdminUserSetup@1002 : Record "User Setup";
    BEGIN
      if not UserSetup.GET(ApprovalEntry."Approver ID") then
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      if UserSetup.Substitute = '' then
        if UserSetup."Approver ID" = '' then begin
          ApprovalAdminUserSetup.SETRANGE("Approval Administrator",true);
          if ApprovalAdminUserSetup.FINDFIRST then
            UserSetup.GET(ApprovalAdminUserSetup."User ID")
          else
            ERROR(SubstituteNotFoundErr,UserSetup."User ID");
        end else
          UserSetup.GET(UserSetup."Approver ID")
      else
        UserSetup.GET(UserSetup.Substitute);

      ApprovalEntry."Approver ID" := UserSetup."User ID";
      ApprovalEntry.MODIFY(true);
      OnDelegateApprovalRequest(ApprovalEntry);
    END;

    [External]
    PROCEDURE FindOpenApprovalEntryForCurrUser@43(VAR ApprovalEntry@1002 : Record "Approval Entry";RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      ApprovalEntry.SETRANGE("Related to Change",false);

      exit(ApprovalEntry.FINDFIRST);
    END;

    [External]
    PROCEDURE FindApprovalEntryForCurrUser@101(VAR ApprovalEntry@1002 : Record "Approval Entry";RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Approver ID",USERID);

      exit(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      PurchaseHeader.FIND;

      case PurchaseHeader.Status of
        PurchaseHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
        PurchaseHeader.Status::"Pending Approval":
          if HasOpenOrPendingApprovalEntries(PurchaseHeader.RECORDID) then
            MESSAGE(PendingApprovalMsg);
        PurchaseHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
      end;
    END;

    LOCAL PROCEDURE ShowSalesApprovalStatus@26(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      SalesHeader.FIND;

      case SalesHeader.Status of
        SalesHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
        SalesHeader.Status::"Pending Approval":
          if HasOpenOrPendingApprovalEntries(SalesHeader.RECORDID) then
            MESSAGE(PendingApprovalMsg);
        SalesHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
      end;
    END;

    LOCAL PROCEDURE ShowApprovalStatus@107(RecId@1000 : RecordID;WorkflowInstanceId@1001 : GUID);
    BEGIN
      if HasPendingApprovalEntriesForWorkflow(RecId,WorkflowInstanceId) then
        MESSAGE(PendingApprovalMsg)
      else
        MESSAGE(RecHasBeenApprovedMsg,FORMAT(RecId,0,1));
    END;

    [External]
    PROCEDURE ApproveApprovalRequestsForRecord@186(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      if ApprovalEntry.FINDSET(true) then
        repeat
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
          ApprovalEntry.MODIFY(true);
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        until ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CancelApprovalRequestsForRecord@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      if ApprovalEntry.FINDSET(true) then
        repeat
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Canceled);
          ApprovalEntry.MODIFY(true);
          if OldStatus in [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] then
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        until ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RejectApprovalRequestsForRecord@7(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      if ApprovalEntry.FINDSET(true) then begin
        repeat
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
          ApprovalEntry.MODIFY(true);
          if (OldStatus in [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved]) and
             (ApprovalEntry."Approver ID" <> USERID)
          then
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        until ApprovalEntry.NEXT = 0;
        if ApprovalEntry."Approver ID" <> ApprovalEntry."Sender ID" then begin
          ApprovalEntry."Approver ID" := ApprovalEntry."Sender ID";
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        end;
      end;
    END;

    [External]
    PROCEDURE SendApprovalRequestFromRecord@33(RecRef@1004 : RecordRef;WorkflowStepInstance@1002 : Record "Workflow Step Instance");
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
      ApprovalEntry2@1000 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);

      if ApprovalEntry.FINDFIRST then begin
        ApprovalEntry2.COPYFILTERS(ApprovalEntry);
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        if ApprovalEntry2.FINDSET(true) then
          repeat
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
            ApprovalEntry2.MODIFY(true);
            CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
          until ApprovalEntry2.NEXT = 0;
        exit;
      end;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      if ApprovalEntry.FINDLAST then
        OnApproveApprovalRequest(ApprovalEntry)
      else
        ERROR(NoApprovalRequestsFoundErr);
    END;

    [External]
    PROCEDURE SendApprovalRequestFromApprovalEntry@41(ApprovalEntry@1000 : Record "Approval Entry";WorkflowStepInstance@1002 : Record "Workflow Step Instance");
    VAR
      ApprovalEntry2@1001 : Record "Approval Entry";
      ApprovalEntry3@1003 : Record "Approval Entry";
    BEGIN
      if ApprovalEntry.Status = ApprovalEntry.Status::Open then begin
        CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        exit;
      end;

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Created);

      if ApprovalEntry2.FINDFIRST then begin
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        if ApprovalEntry3.FINDSET then
          repeat
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(true);
            CreateApprovalEntryNotification(ApprovalEntry3,WorkflowStepInstance);
          until ApprovalEntry3.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      WorkflowStepArgument@1003 : Record "Workflow Step Argument";
      ApprovalEntryArgument@1002 : Record "Approval Entry";
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);

      if WorkflowStepArgument.GET(WorkflowStepInstance.Argument) then
        case WorkflowStepArgument."Approver Type" of
          WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
            CreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::Approver:
            CreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::"Workflow User Group":
            CreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
        end;

      if WorkflowStepArgument."Show Confirmation Message" then
        InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    [Internal]
    PROCEDURE CreateAndAutomaticallyApproveRequest@44(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      ApprovalEntryArgument@1002 : Record "Approval Entry";
      WorkflowStepArgument@1003 : Record "Workflow Step Argument";
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);
      if not WorkflowStepArgument.GET(WorkflowStepInstance.Argument) then
        WorkflowStepArgument.INIT;

      CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);

      InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeSalespersPurchaser@32(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1002 : Record "Approval Entry");
    BEGIN
      ApprovalEntryArgument.TESTFIELD("Salespers./Purch. Code");

      case WorkflowStepArgument."Approver Limit Type" of
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          begin
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          end;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          begin
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          end;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          begin
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
          end;
      end;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeApprover@31(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    BEGIN
      case WorkflowStepArgument."Approver Limit Type" of
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          begin
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          end;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForApprover(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          begin
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          end;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
      end;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeWorkflowUserGroup@49(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    VAR
      UserSetup@1004 : Record "User Setup";
      WorkflowUserGroupMember@1006 : Record "Workflow User Group Member";
      ApproverId@1003 : Code[50];
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      with WorkflowUserGroupMember do begin
        SETCURRENTKEY("Workflow User Group Code","Sequence No.");
        SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");

        if not FINDSET then
          ERROR(NoWFUserGroupMembersErr);

        repeat
          ApproverId := "User Name";
          if not UserSetup.GET(ApproverId) then
            ERROR(WFUserGroupNotInSetupErr,ApproverId);
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateApprovalRequestForChainOfApprovers@18(WorkflowStepArgument@1008 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,false);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverWithSufficientLimit@45(WorkflowStepArgument@1008 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,true);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverChain@46(WorkflowStepArgument@1008 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry";SufficientApproverOnly@1003 : Boolean);
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
      UserSetup@1007 : Record "User Setup";
      ApproverId@1002 : Code[50];
      SequenceNo@1006 : Integer;
    BEGIN
      ApproverId := USERID;

      with ApprovalEntry do begin
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        SETRANGE(Status,Status::Created);
        if FINDLAST then
          ApproverId := "Approver ID"
        else
          if (WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser") and
             (WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver")
          then begin
            FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);
            ApproverId := UserSetup."User ID";
          end;
      end;

      if not UserSetup.GET(ApproverId) then
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      if not IsSufficientApprover(UserSetup,ApprovalEntryArgument) then
        repeat
          ApproverId := UserSetup."Approver ID";

          if ApproverId = '' then
            ERROR(NoSuitableApproverFoundErr);

          if not UserSetup.GET(ApproverId) then
            ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");

          // Approval Entry should not be created only when IsSufficientApprover is false and SufficientApproverOnly is true
          if IsSufficientApprover(UserSetup,ApprovalEntryArgument) or (not SufficientApproverOnly) then begin
            SequenceNo := GetLastSequenceNo(ApprovalEntryArgument) + 1;
            MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
          end;

        until IsSufficientApprover(UserSetup,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApprover@19(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    VAR
      UserSetup@1006 : Record "User Setup";
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      if not UserSetup.GET(USERID) then
        ERROR(UserIdNotInSetupErr,UsrId);

      UsrId := UserSetup."Approver ID";
      if not UserSetup.GET(UsrId) then begin
        if not UserSetup."Approval Administrator" then
          ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");
        UsrId := USERID;
      end;

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSalespersPurchaser@21(WorkflowStepArgument@1006 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    VAR
      UserSetup@1001 : Record "User Setup";
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);

      SequenceNo += 1;
      if WorkflowStepArgument."Approver Limit Type" <> WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver" then
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForUser@22(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    VAR
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,USERID,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSpecificUser@118(WorkflowStepArgument@1001 : Record "Workflow Step Argument";ApprovalEntryArgument@1000 : Record "Approval Entry");
    VAR
      UserSetup@1006 : Record "User Setup";
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := WorkflowStepArgument."Approver User ID";

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      if not UserSetup.GET(UsrId) then
        ERROR(UserIdNotInSetupErr,UsrId);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record "Approval Entry";SequenceNo@1001 : Integer;ApproverId@1003 : Code[50];WorkflowStepArgument@1005 : Record "Workflow Step Argument");
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
    BEGIN
      with ApprovalEntry do begin
        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := USERID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
        if ApproverId = USERID then
          Status := Status::Approved
        else
          Status := Status::Created;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := USERID;
        "Due Date" := CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY);

        case WorkflowStepArgument."Delegate After" of
          WorkflowStepArgument."Delegate After"::Never:
            EVALUATE("Delegation Date Formula",'');
          WorkflowStepArgument."Delegate After"::"1 day":
            EVALUATE("Delegation Date Formula",'<1D>');
          WorkflowStepArgument."Delegate After"::"2 days":
            EVALUATE("Delegation Date Formula",'<2D>');
          WorkflowStepArgument."Delegate After"::"5 days":
            EVALUATE("Delegation Date Formula",'<5D>');
          else
            EVALUATE("Delegation Date Formula",'');
        end;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        SetApproverType(WorkflowStepArgument,ApprovalEntry);
        SetLimitType(WorkflowStepArgument,ApprovalEntry);
        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Approval Code" := ApprovalEntryArgument."Approval Code";
        INSERT(true);
      end;
    END;

    [Internal]
    PROCEDURE CalcPurchaseDocAmount@24(PurchaseHeader@1002 : Record "Purchase Header";VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record "Purchase Line";
      TotalPurchaseLine@1008 : Record "Purchase Line";
      TotalPurchaseLineLCY@1007 : Record "Purchase Line";
      PurchPost@1006 : Codeunit "Purch.-Post";
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchaseHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    [Internal]
    PROCEDURE CalcSalesDocAmount@82(SalesHeader@1000 : Record "Sales Header";VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record "Sales Line";
      TotalSalesLine@1008 : Record "Sales Line";
      TotalSalesLineLCY@1007 : Record "Sales Line";
      SalesPost@1006 : Codeunit "Sales-Post";
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesHeader.CalcInvDiscForHeader;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    LOCAL PROCEDURE PopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;WorkflowStepInstance@1009 : Record "Workflow Step Instance";VAR ApprovalEntryArgument@1001 : Record "Approval Entry");
    VAR
      Customer@1006 : Record Customer;
      GenJournalBatch@1008 : Record "Gen. Journal Batch";
      GenJournalLine@1007 : Record "Gen. Journal Line";
      PurchaseHeader@1003 : Record "Purchase Header";
      SalesHeader@1004 : Record "Sales Header";
      IncomingDocument@1010 : Record "Incoming Document";
      ApprovalAmount@1002 : Decimal;
      ApprovalAmountLCY@1005 : Decimal;
    BEGIN
      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      case RecRef.NUMBER of
        DATABASE::"Purchase Header":
          begin
            RecRef.SETTABLE(PurchaseHeader);
            CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchaseHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchaseHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchaseHeader."Currency Code";
          end;
        DATABASE::"Sales Header":
          begin
            RecRef.SETTABLE(SalesHeader);
            CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := SalesHeader."Document Type";
            ApprovalEntryArgument."Document No." := SalesHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := SalesHeader."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := GetAvailableCreditLimit(SalesHeader);
          end;
        DATABASE::Customer:
          begin
            RecRef.SETTABLE(Customer);
            ApprovalEntryArgument."Salespers./Purch. Code" := Customer."Salesperson Code";
            ApprovalEntryArgument."Currency Code" := Customer."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := Customer.CalcAvailableCredit;
          end;
        DATABASE::"Gen. Journal Batch":
          RecRef.SETTABLE(GenJournalBatch);
        DATABASE::"Gen. Journal Line":
          begin
            RecRef.SETTABLE(GenJournalLine);
            ApprovalEntryArgument."Document Type" := GenJournalLine."Document Type";
            ApprovalEntryArgument."Document No." := GenJournalLine."Document No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := GenJournalLine."Salespers./Purch. Code";
            ApprovalEntryArgument.Amount := GenJournalLine.Amount;
            ApprovalEntryArgument."Amount (LCY)" := GenJournalLine."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := GenJournalLine."Currency Code";
          end;
        DATABASE::"Incoming Document":
          begin
            RecRef.SETTABLE(IncomingDocument);
            ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
          end;
      end;
    END;

    [External]
    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record "Approval Entry";WorkflowStepInstance@1001 : Record "Workflow Step Instance");
    VAR
      WorkflowStepArgument@1002 : Record "Workflow Step Argument";
      NotificationEntry@1003 : Record "Notification Entry";
      UserSetup@1004 : Record "User Setup";
    BEGIN
      if not WorkflowStepArgument.GET(WorkflowStepInstance.Argument) then
        exit;

      if WorkflowStepArgument."Notification User ID" = '' then begin
        if not UserSetup.GET(ApprovalEntry."Approver ID") then
          exit;
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");
      end;

      ApprovalEntry.RESET;
      NotificationEntry.CreateNew(
        NotificationEntry.Type::Approval,WorkflowStepArgument."Notification User ID",
        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE SetApproverType@71(WorkflowStepArgument@1001 : Record "Workflow Step Argument";VAR ApprovalEntry@1000 : Record "Approval Entry");
    BEGIN
      case WorkflowStepArgument."Approver Type" of
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Sales Pers./Purchaser";
        WorkflowStepArgument."Approver Type"::Approver:
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::Approver;
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Workflow User Group";
      end;
    END;

    LOCAL PROCEDURE SetLimitType@81(WorkflowStepArgument@1000 : Record "Workflow Step Argument";VAR ApprovalEntry@1001 : Record "Approval Entry");
    BEGIN
      case WorkflowStepArgument."Approver Limit Type" of
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"Approval Limits";
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
      end;

      if ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" then
        ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
    END;

    LOCAL PROCEDURE IsSufficientPurchApprover@12(UserSetup@1000 : Record "User Setup";DocumentType@1003 : Option;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
    BEGIN
      if UserSetup."User ID" = UserSetup."Approver ID" then
        exit(true);

      case DocumentType of
        PurchaseHeader."Document Type"::Quote:
          if UserSetup."Unlimited Request Approval" or
             ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") and (UserSetup."Request Amount Approval Limit" <> 0))
          then
            exit(true);
        else
          if UserSetup."Unlimited Purchase Approval" or
             ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") and (UserSetup."Purchase Amount Approval Limit" <> 0))
          then
            exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE IsSufficientSalesApprover@13(UserSetup@1000 : Record "User Setup";ApprovalAmountLCY@1002 : Decimal) : Boolean;
    BEGIN
      if UserSetup."User ID" = UserSetup."Approver ID" then
        exit(true);

      if UserSetup."Unlimited Sales Approval" or
         ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") and (UserSetup."Sales Amount Approval Limit" <> 0))
      then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE IsSufficientGenJournalLineApprover@89(UserSetup@1000 : Record "User Setup";ApprovalEntryArgument@1001 : Record "Approval Entry") : Boolean;
    VAR
      GenJournalLine@1003 : Record "Gen. Journal Line";
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GET(ApprovalEntryArgument."Record ID to Approve");
      RecRef.SETTABLE(GenJournalLine);

      if GenJournalLine.IsForPurchase then
        exit(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));

      if GenJournalLine.IsForSales then
        exit(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));

      exit(true);
    END;

    [External]
    PROCEDURE IsSufficientApprover@20(UserSetup@1001 : Record "User Setup";ApprovalEntryArgument@1003 : Record "Approval Entry") : Boolean;
    BEGIN
      case ApprovalEntryArgument."Table ID" of
        DATABASE::"Purchase Header":
          exit(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Sales Header":
          exit(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Gen. Journal Batch":
          MESSAGE(ApporvalChainIsUnsupportedMsg,FORMAT(ApprovalEntryArgument."Record ID to Approve"));
        DATABASE::"Gen. Journal Line":
          exit(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
      end;

      exit(true);
    END;

    LOCAL PROCEDURE GetAvailableCreditLimit@25(SalesHeader@1000 : Record "Sales Header") : Decimal;
    BEGIN
      exit(SalesHeader.CheckAvailableCreditLimit);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckSales@38(VAR SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      if (SalesHeader.Status = SalesHeader.Status::Open) and IsSalesApprovalsWorkflowEnabled(SalesHeader) then
        ERROR(PrePostCheckErr,SalesHeader."Document Type",SalesHeader."No.");

      exit(true);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record "Purchase Header") : Boolean;
    BEGIN
      if (PurchaseHeader.Status = PurchaseHeader.Status::Open) and IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) then
        ERROR(PrePostCheckErr,PurchaseHeader."Document Type",PurchaseHeader."No.");

      exit(true);
    END;

    [Internal]
    PROCEDURE IsIncomingDocApprovalsWorkflowEnabled@102(VAR IncomingDocument@1002 : Record "Incoming Document") : Boolean;
    BEGIN
      exit(WorkflowManagement.CanExecuteWorkflow(IncomingDocument,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode));
    END;

    [External]
    PROCEDURE IsPurchaseApprovalsWorkflowEnabled@59(VAR PurchaseHeader@1002 : Record "Purchase Header") : Boolean;
    BEGIN
      exit(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode));
    END;

    [Internal]
    PROCEDURE IsSalesApprovalsWorkflowEnabled@17(VAR SalesHeader@1002 : Record "Sales Header") : Boolean;
    BEGIN
      exit(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode));
    END;

    [Internal]
    PROCEDURE IsOverdueNotificationsWorkflowEnabled@42() : Boolean;
    VAR
      ApprovalEntry@1000 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.INIT;
      exit(WorkflowManagement.WorkflowExists(ApprovalEntry,ApprovalEntry,
          WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode));
    END;

    [Internal]
    PROCEDURE IsGeneralJournalBatchApprovalsWorkflowEnabled@70(VAR GenJournalBatch@1002 : Record "Gen. Journal Batch") : Boolean;
    BEGIN
      exit(WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode));
    END;

    [Internal]
    PROCEDURE IsGeneralJournalLineApprovalsWorkflowEnabled@72(VAR GenJournalLine@1002 : Record "Gen. Journal Line") : Boolean;
    BEGIN
      exit(WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode));
    END;

    [External]
    PROCEDURE CheckPurchaseApprovalPossible@77(VAR PurchaseHeader@1002 : Record "Purchase Header") : Boolean;
    BEGIN
      if not IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) then
        ERROR(NoWorkflowEnabledErr);

      if not PurchaseHeader.PurchLinesExist then
        ERROR(NothingToApproveErr);

      exit(true);
    END;

    [Internal]
    PROCEDURE CheckIncomingDocApprovalsWorkflowEnabled@192(VAR IncomingDocument@1002 : Record "Incoming Document") : Boolean;
    BEGIN
      if not IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    [External]
    PROCEDURE CheckSalesApprovalPossible@155(VAR SalesHeader@1002 : Record "Sales Header") : Boolean;
    BEGIN
      if not IsSalesApprovalsWorkflowEnabled(SalesHeader) then
        ERROR(NoWorkflowEnabledErr);

      if not SalesHeader.SalesLinesExist then
        ERROR(NothingToApproveErr);

      exit(true);
    END;

    [Internal]
    PROCEDURE CheckCustomerApprovalsWorkflowEnabled@11(VAR Customer@1002 : Record Customer) : Boolean;
    BEGIN
      if not WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    [Internal]
    PROCEDURE CheckVendorApprovalsWorkflowEnabled@83(VAR Vendor@1002 : Record Vendor) : Boolean;
    BEGIN
      if not WorkflowManagement.CanExecuteWorkflow(Vendor,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode) then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    [External]
    PROCEDURE CheckItemApprovalsWorkflowEnabled@84(VAR Item@1002 : Record Item) : Boolean;
    BEGIN
      if not WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    [Internal]
    PROCEDURE CheckGeneralJournalBatchApprovalsWorkflowEnabled@74(VAR GenJournalBatch@1002 : Record "Gen. Journal Batch") : Boolean;
    BEGIN
      if not
         WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode)
      then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    [Internal]
    PROCEDURE CheckGeneralJournalLineApprovalsWorkflowEnabled@73(VAR GenJournalLine@1002 : Record "Gen. Journal Line") : Boolean;
    BEGIN
      if not
         WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode)
      then
        ERROR(NoWorkflowEnabledErr);

      exit(true);
    END;

    PROCEDURE DeleteApprovalEntry@35(Variant@1001 : Variant);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      DeleteApprovalEntries(RecRef.RECORDID);
    END;

    [EventSubscriber(Table,81,OnMoveGenJournalLine)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalLine@91(VAR Sender@1000 : Record "Gen. Journal Line";ToRecordID@1002 : RecordID);
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,Sender."Document No.");
    END;

    [EventSubscriber(Table,81,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalLine@94(VAR Rec@1000 : Record "Gen. Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,232,OnMoveGenJournalBatch)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalBatch@36(VAR Sender@1000 : Record "Gen. Journal Batch";ToRecordID@1001 : RecordID);
    VAR
      RecordRestrictionMgt@1002 : Codeunit "Record Restriction Mgt.";
    BEGIN
      if PostApprovalEntries(Sender.RECORDID,ToRecordID,'') then begin
        RecordRestrictionMgt.AllowRecordUsage(Sender);
        DeleteApprovalEntries(Sender.RECORDID);
      end;
    END;

    [EventSubscriber(Table,232,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalBatch@98(VAR Rec@1000 : Record "Gen. Journal Batch";RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteCustomer@99(VAR Rec@1000 : Record Customer;RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteVendor@112(VAR Rec@1000 : Record Vendor;RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,27,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteItem@109(VAR Rec@1000 : Record Item;RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [External]
    PROCEDURE PostApprovalEntries@105(ApprovedRecordID@1003 : RecordID;PostedRecordID@1001 : RecordID;PostedDocNo@1002 : Code[20]) : Boolean;
    VAR
      ApprovalEntry@1000 : Record "Approval Entry";
      PostedApprovalEntry@1004 : Record "Posted Approval Entry";
    BEGIN
      ApprovalEntry.SETAUTOCALCFIELDS("Pending Approvals","Number of Approved Requests","Number of Rejected Requests");
      ApprovalEntry.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",ApprovedRecordID);
      if not ApprovalEntry.FINDSET then
        exit(false);

      repeat
        PostedApprovalEntry.INIT;
        PostedApprovalEntry.TRANSFERFIELDS(ApprovalEntry);
        PostedApprovalEntry."Number of Approved Requests" := ApprovalEntry."Number of Approved Requests";
        PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
        PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
        PostedApprovalEntry."Document No." := PostedDocNo;
        PostedApprovalEntry."Posted Record ID" := PostedRecordID;
        PostedApprovalEntry."Entry No." := 0;
        PostedApprovalEntry.INSERT(true);
      until ApprovalEntry.NEXT = 0;

      PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
      exit(true);
    END;

    LOCAL PROCEDURE PostApprovalCommentLines@90(ApprovedRecordID@1000 : RecordID;PostedRecordID@1003 : RecordID;PostedDocNo@1004 : Code[20]);
    VAR
      ApprovalCommentLine@1001 : Record "Approval Comment Line";
      PostedApprovalCommentLine@1002 : Record "Posted Approval Comment Line";
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovedRecordID);
      if ApprovalCommentLine.FINDSET then
        repeat
          PostedApprovalCommentLine.INIT;
          PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
          PostedApprovalCommentLine."Entry No." := 0;
          PostedApprovalCommentLine."Table ID" := PostedRecordID.TABLENO;
          PostedApprovalCommentLine."Document No." := PostedDocNo;
          PostedApprovalCommentLine."Posted Record ID" := PostedRecordID;
          PostedApprovalCommentLine.INSERT(true);
        until ApprovalCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowPostedApprovalEntries@60(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1001 : Record "Posted Approval Entry";
    BEGIN
      PostedApprovalEntry.FILTERGROUP(2);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
    END;

    [External]
    PROCEDURE DeletePostedApprovalEntries@40(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1003 : Record "Posted Approval Entry";
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.DELETEALL;
      DeletePostedApprovalCommentLines(PostedRecordID);
    END;

    LOCAL PROCEDURE DeletePostedApprovalCommentLines@37(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalCommentLine@1003 : Record "Posted Approval Comment Line";
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalCommentLine.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalCommentLine.DELETEALL;
    END;

    [External]
    PROCEDURE SetStatusToPendingApproval@47(VAR Variant@1000 : Variant);
    VAR
      SalesHeader@1002 : Record "Sales Header";
      PurchaseHeader@1003 : Record "Purchase Header";
      IncomingDocument@1004 : Record "Incoming Document";
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      case RecRef.NUMBER of
        DATABASE::"Purchase Header":
          begin
            RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::"Pending Approval");
            PurchaseHeader.MODIFY(true);
            Variant := PurchaseHeader;
          end;
        DATABASE::"Sales Header":
          begin
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.VALIDATE(Status,SalesHeader.Status::"Pending Approval");
            SalesHeader.MODIFY(true);
            Variant := SalesHeader;
          end;
        DATABASE::"Incoming Document":
          begin
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.VALIDATE(Status,IncomingDocument.Status::"Pending Approval");
            IncomingDocument.MODIFY(true);
            Variant := IncomingDocument;
          end;
        else
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      end;
    END;

    [External]
    PROCEDURE InformUserOnStatusChange@110(Variant@1001 : Variant;WorkflowInstanceId@1000 : GUID);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      case RecRef.NUMBER of
        DATABASE::"Purchase Header":
          ShowPurchApprovalStatus(Variant);
        DATABASE::"Sales Header":
          ShowSalesApprovalStatus(Variant);
        else
          ShowApprovalStatus(RecRef.RECORDID,WorkflowInstanceId);
      end;
    END;

    [External]
    PROCEDURE GetApprovalComment@53(Variant@1000 : Variant);
    VAR
      BlankGUID@1001 : GUID;
    BEGIN
      ShowApprovalComments(Variant,BlankGUID);
    END;

    [External]
    PROCEDURE GetApprovalCommentForWorkflowStepInstanceID@30(Variant@1000 : Variant;WorkflowStepInstanceID@1001 : GUID);
    BEGIN
      ShowApprovalComments(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE ShowApprovalComments@95(Variant@1002 : Variant;WorkflowStepInstanceID@1000 : GUID);
    VAR
      ApprovalCommentLine@1001 : Record "Approval Comment Line";
      ApprovalEntry@1004 : Record "Approval Entry";
      ApprovalComments@1003 : Page "Approval Comments";
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      case RecRef.NUMBER of
        DATABASE::"Approval Entry":
          begin
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
          end;
        DATABASE::"Purchase Header":
          begin
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          end;
        DATABASE::"Sales Header":
          begin
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          end;
        else begin
          ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
        end;
      end;

      if ISNULLGUID(WorkflowStepInstanceID) and (not ISNULLGUID(ApprovalEntry."Workflow Step Instance ID")) then
        WorkflowStepInstanceID := ApprovalEntry."Workflow Step Instance ID";

      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.SetWorkflowStepInstanceID(WorkflowStepInstanceID);
      ApprovalComments.RUN;
    END;

    [External]
    PROCEDURE HasOpenApprovalEntriesForCurrentUser@14(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      exit(FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID));
    END;

    [External]
    PROCEDURE HasOpenApprovalEntries@154(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",false);
      exit(not ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasOpenOrPendingApprovalEntries@115(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Related to Change",false);
      exit(not ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasApprovalEntries@15(RecordID@1001 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1000 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Related to Change",false);
      exit(not ApprovalEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE HasPendingApprovalEntriesForWorkflow@156(RecId@1000 : RecordID;WorkflowInstanceId@1002 : GUID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETFILTER("Workflow Step Instance ID",WorkflowInstanceId);
      exit(not ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasAnyOpenJournalLineApprovalEntries@187(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1001 : Record "Gen. Journal Line";
      ApprovalEntry@1002 : Record "Approval Entry";
      GenJournalLineRecRef@1008 : RecordRef;
      GenJournalLineRecordID@1006 : RecordID;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",false);
      if ApprovalEntry.ISEMPTY then
        exit(false);

      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      if GenJournalLine.ISEMPTY then
        exit(false);

      if GenJournalLine.COUNT < ApprovalEntry.COUNT then begin
        GenJournalLine.FINDSET;
        repeat
          if HasOpenApprovalEntries(GenJournalLine.RECORDID) then
            exit(true);
        until GenJournalLine.NEXT = 0;
      end else begin
        ApprovalEntry.FINDSET;
        repeat
          GenJournalLineRecordID := ApprovalEntry."Record ID to Approve";
          GenJournalLineRecRef := GenJournalLineRecordID.GETRECORD;
          GenJournalLineRecRef.SETTABLE(GenJournalLine);
          if (GenJournalLine."Journal Template Name" = JournalTemplateName) and
             (GenJournalLine."Journal Batch Name" = JournalBatchName)
          then
            exit(true);
        until ApprovalEntry.NEXT = 0;
      end;

      exit(false)
    END;

    [External]
    PROCEDURE TrySendJournalBatchApprovalRequest@54(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
      if HasOpenApprovalEntries(GenJournalBatch.RECORDID) or
         HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
      then
        ERROR(PendingJournalBatchApprovalExistsErr);
      OnSendGeneralJournalBatchForApproval(GenJournalBatch);
    END;

    [External]
    PROCEDURE TrySendJournalLineApprovalRequests@183(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      LinesSent@1001 : Integer;
    BEGIN
      if GenJournalLine.COUNT = 1 then
        CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);

      repeat
        if WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
             WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) and
           not HasOpenApprovalEntries(GenJournalLine.RECORDID)
        then begin
          OnSendGeneralJournalLineForApproval(GenJournalLine);
          LinesSent += 1;
        end;
      until GenJournalLine.NEXT = 0;

      case LinesSent of
        0:
          MESSAGE(NoApprovalsSentMsg);
        GenJournalLine.COUNT:
          MESSAGE(PendingApprovalForSelectedLinesMsg);
        else
          MESSAGE(PendingApprovalForSomeSelectedLinesMsg);
      end;
    END;

    [External]
    PROCEDURE TryCancelJournalBatchApprovalRequest@189(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
      WorkflowWebhookManagement@1002 : Codeunit "Workflow Webhook Management";
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
      WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
    END;

    [External]
    PROCEDURE TryCancelJournalLineApprovalRequests@88(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      WorkflowWebhookManagement@1001 : Codeunit "Workflow Webhook Management";
    BEGIN
      repeat
        if HasOpenApprovalEntries(GenJournalLine.RECORDID) then
          OnCancelGeneralJournalLineApprovalRequest(GenJournalLine);
        WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
      until GenJournalLine.NEXT = 0;
      MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
    END;

    [External]
    PROCEDURE ShowJournalApprovalEntries@55(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);

      ApprovalEntry.SETFILTER("Table ID",'%1|%2',DATABASE::"Gen. Journal Batch",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETFILTER("Record ID to Approve",'%1|%2',GenJournalBatch.RECORDID,GenJournalLine.RECORDID);
      ApprovalEntry.SETRANGE("Related to Change",false);
      PAGE.RUN(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE GetGeneralJournalBatch@87(VAR GenJournalBatch@1000 : Record "Gen. Journal Batch";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
      if not GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") then
        GenJournalBatch.GET(GenJournalLine.GETFILTER("Journal Template Name"),GenJournalLine.GETFILTER("Journal Batch Name"));
    END;

    [EventSubscriber(Codeunit,1535,OnRenameRecordInApprovalRequest)]
    [External]
    PROCEDURE RenameApprovalEntries@79(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",OldRecordId);
      if ApprovalEntry.FINDFIRST then
        ApprovalEntry.MODIFYALL("Record ID to Approve",NewRecordId,true);
      ChangeApprovalComments(OldRecordId,NewRecordId);
    END;

    LOCAL PROCEDURE ChangeApprovalComments@85(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalCommentLine@1002 : Record "Approval Comment Line";
    BEGIN
      ApprovalCommentLine.SETRANGE("Record ID to Approve",OldRecordId);
      ApprovalCommentLine.MODIFYALL("Record ID to Approve",NewRecordId,true);
    END;

    [External]
    PROCEDURE DeleteApprovalEntries@93(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalEntry.DELETEALL(true);
      DeleteApprovalCommentLines(RecordIDToApprove);
    END;

    [Internal]
    PROCEDURE DeleteApprovalCommentLines@92(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalCommentLine@1001 : Record "Approval Comment Line";
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalCommentLine.DELETEALL(true);
    END;

    [External]
    PROCEDURE CopyApprovalEntryQuoteToOrder@66(FromRecID@1006 : RecordID;ToDocNo@1007 : Code[20];ToRecID@1008 : RecordID);
    VAR
      FromApprovalEntry@1000 : Record "Approval Entry";
      ToApprovalEntry@1001 : Record "Approval Entry";
      FromApprovalCommentLine@1002 : Record "Approval Comment Line";
      ToApprovalCommentLine@1003 : Record "Approval Comment Line";
      LastEntryNo@1004 : Integer;
    BEGIN
      FromApprovalEntry.SETRANGE("Table ID",FromRecID.TABLENO);
      FromApprovalEntry.SETRANGE("Record ID to Approve",FromRecID);
      if FromApprovalEntry.FINDSET then begin
        ToApprovalEntry.FINDLAST;
        LastEntryNo := ToApprovalEntry."Entry No.";
        repeat
          ToApprovalEntry := FromApprovalEntry;
          ToApprovalEntry."Entry No." := LastEntryNo + 1;
          ToApprovalEntry."Document Type" := ToApprovalEntry."Document Type"::Order;
          ToApprovalEntry."Document No." := ToDocNo;
          ToApprovalEntry."Record ID to Approve" := ToRecID;
          LastEntryNo += 1;
          ToApprovalEntry.INSERT;
        until FromApprovalEntry.NEXT = 0;

        FromApprovalCommentLine.SETRANGE("Table ID",FromRecID.TABLENO);
        FromApprovalCommentLine.SETRANGE("Record ID to Approve",FromRecID);
        if FromApprovalCommentLine.FINDSET then begin
          ToApprovalCommentLine.FINDLAST;
          LastEntryNo := ToApprovalCommentLine."Entry No.";
          repeat
            ToApprovalCommentLine := FromApprovalCommentLine;
            ToApprovalCommentLine."Entry No." := LastEntryNo + 1;
            ToApprovalCommentLine."Document Type" := ToApprovalCommentLine."Document Type"::Order;
            ToApprovalCommentLine."Document No." := ToDocNo;
            ToApprovalCommentLine."Record ID to Approve" := ToRecID;
            ToApprovalCommentLine.INSERT;
            LastEntryNo += 1;
          until FromApprovalCommentLine.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE GetLastSequenceNo@16(ApprovalEntryArgument@1000 : Record "Approval Entry") : Integer;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      with ApprovalEntry do begin
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        if FINDLAST then
          exit("Sequence No.");
      end;
      exit(0);
    END;

    [External]
    PROCEDURE OpenApprovalEntriesPage@75(RecId@1000 : RecordID);
    VAR
      ApprovalEntry@1002 : Record "Approval Entry";
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecId.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETRANGE("Related to Change",false);
      PAGE.RUNMODAL(PAGE::"Approval Entries",ApprovalEntry);
    END;

    [External]
    PROCEDURE CanCancelApprovalForRecord@106(RecID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
      UserSetup@1002 : Record "User Setup";
    BEGIN
      if not UserSetup.GET(USERID) then
        exit(false);

      ApprovalEntry.SETRANGE("Table ID",RecID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",false);

      if not UserSetup."Approval Administrator" then
        ApprovalEntry.SETRANGE("Sender ID",USERID);
      exit(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FindUserSetupBySalesPurchCode@114(VAR UserSetup@1000 : Record "User Setup";ApprovalEntryArgument@1001 : Record "Approval Entry");
    BEGIN
      if ApprovalEntryArgument."Salespers./Purch. Code" <> '' then begin
        UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
        UserSetup.SETRANGE("Salespers./Purch. Code",ApprovalEntryArgument."Salespers./Purch. Code");
        if not UserSetup.FINDFIRST then
          ERROR(
            PurchaserUserNotFoundErr,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
            UserSetup."Salespers./Purch. Code");
        exit;
      end;
    END;

    LOCAL PROCEDURE CheckUserAsApprovalAdministrator@116();
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Approval Administrator");
    END;

    BEGIN
    END.
  }
}

