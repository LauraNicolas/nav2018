OBJECT Page 9807 User Card
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=User Card;
    SourceTable=User;
    DataCaptionExpr="Full Name";
    DelayedInsert=true;
    PageType=Card;
    OnInit=BEGIN
             DeployedToAzure := IdentityManagement.IsAzure;
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit "Permission Manager";
               BEGIN
                 SoftwareAsAService := PermissionManager.SoftwareAsAService;

                 HideExternalUsers;

                 IsWindowsClient := (CURRENTCLIENTTYPE = CLIENTTYPE::Windows);

                 OnPremAskFirstUserToCreateSuper;
               END;

    OnAfterGetRecord=VAR
                       PermissionManager@1000 : Codeunit "Permission Manager";
                     BEGIN
                       WindowsUserName := IdentityManagement.UserName("Windows Security ID");

                       TESTFIELD("User Name");

                       Password := IdentityManagement.GetMaskedNavPassword("User Security ID");
                       ACSStatus := IdentityManagement.GetACSStatus("User Security ID");
                       WebServiceExpiryDate := IdentityManagement.GetWebServiceExpiryDate("User Security ID");
                       AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                       HasExchangeIdentifier := "Exchange Identifier" <> '';
                       InitialState := State;

                       if not ISNULLGUID("Application ID") then
                         ApplicationID := "Application ID";

                       if PermissionManager.SoftwareAsAService and (USERID <> "User Name") then begin
                         AllowChangeWebServiceAccessKey := false;
                         WebServiceID := '*************************************';
                       end else begin
                         AllowChangeWebServiceAccessKey := true;
                         WebServiceID := IdentityManagement.GetWebServicesKey("User Security ID");
                       end;
                     END;

    OnNewRecord=BEGIN
                  if not ManageUsersIsAllowed then
                    ERROR('');
                  WindowsUserName := '';
                  Password := '';
                  "Change Password" := false;
                  WebServiceID := '';
                  CLEAR(WebServiceExpiryDate);
                END;

    OnInsertRecord=BEGIN
                     "User Security ID" := CREATEGUID;
                     TESTFIELD("User Name");
                   END;

    OnModifyRecord=BEGIN
                     TESTFIELD("User Name");
                   END;

    OnDeleteRecord=BEGIN
                     if not ManageUsersIsAllowed then
                       ERROR('');
                   END;

    OnQueryClosePage=BEGIN
                       if "User Name" <> '' then
                         exit(ValidateAuthentication);
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      Name=Authentication;
                      CaptionML=ENU=Authentication }
      { 21      ;2   ;Action    ;
                      Name=AcsSetup;
                      CaptionML=ENU=&ACS Setup;
                      ToolTipML=ENU=Set up Access Control Service authentication, such as generating an authentication key that the user can use to connect to Azure.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=true;
                      Image=ServiceSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditACSStatus;
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Name=ChangePassword;
                      CaptionML=ENU=Change &Password;
                      ToolTipML=ENU=Change the user's password if the user connects using password authentication.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=true;
                      Image=EncryptionKeys;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditNavPassword;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=ChangeWebServiceAccessKey;
                      CaptionML=ENU=Change &Web Service Key;
                      ToolTipML=ENU=Set up the key that web services use to access your data, and then specify the key on the user card for the relevant user accounts.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=AllowChangeWebServiceAccessKey;
                      PromotedIsBig=true;
                      Image=ServiceCode;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditWebServiceID;
                               END;
                                }
      { 35      ;2   ;Action    ;
                      Name=DeleteExchangeIdentifier;
                      CaptionML=ENU=Delete Exchange Identifier Mapping;
                      ToolTipML=ENU=Delete the document exchange mapping for the current user.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasExchangeIdentifier;
                      Image=DeleteXML;
                      OnAction=BEGIN
                                 if not CONFIRM(ConfirmRemoveExchangeIdentifierQst) then
                                   exit;

                                 CLEAR("Exchange Identifier");
                                 MODIFY(true);
                                 HasExchangeIdentifier := false;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=User Security ID;
                CaptionML=ENU=User Security ID;
                ToolTipML=ENU=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.;
                ApplicationArea=#Advanced;
                SourceExpr="User Security ID";
                Visible=FALSE;
                ImplicitType=GUID }

    { 4   ;2   ;Field     ;
                Name=User Name;
                ToolTipML=ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Name";
                Importance=Promoted;
                OnValidate=BEGIN
                             if xRec."User Name" <> "User Name" then
                               ValidateUserName;
                           END;

                ImplicitType=Code50 }

    { 5   ;2   ;Field     ;
                Name=Full Name;
                ToolTipML=ENU=Specifies the full name of the user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Full Name";
                Editable=NOT SoftwareAsAService;
                ImplicitType=Text80 }

    { 8   ;2   ;Field     ;
                Name=License Type;
                ToolTipML=ENU=Specifies the type of license that applies to the user.;
                ApplicationArea=#All;
                SourceExpr="License Type";
                Visible=NOT SoftwareAsAService;
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name=State;
                ToolTipML=ENU=Specifies if the user's login is enabled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=State;
                Importance=Promoted;
                ImplicitType=Option }

    { 13  ;2   ;Field     ;
                Name=Expiry Date;
                ToolTipML=ENU=Specifies a date past which the user will no longer be authorized to log on to the Windows client.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Expiry Date";
                Visible=NOT SoftwareAsAService;
                ImplicitType=DateTime }

    { 29  ;2   ;Field     ;
                Name=Contact Email;
                ToolTipML=ENU=Specifies the user's email address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Contact Email";
                ImplicitType=Text250 }

    { 11  ;1   ;Group     ;
                Name=Windows Authentication;
                CaptionML=ENU=Windows Authentication;
                Visible=(NOT DeployedToAzure) AND (NOT SoftwareAsAService);
                GroupType=Group }

    { 12  ;2   ;Field     ;
                Name=Windows Security ID;
                ToolTipML=ENU=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.;
                ApplicationArea=#Advanced;
                SourceExpr="Windows Security ID";
                Visible=FALSE;
                ImplicitType=Text119 }

    { 38  ;2   ;Field     ;
                Name=Windows User Name;
                AssistEdit=false;
                CaptionML=ENU=Windows User Name;
                ToolTipML=ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=NOT IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;

                ImplicitType=Text208 }

    { 7   ;2   ;Field     ;
                Name=Windows User Name Desktop;
                AssistEdit=true;
                CaptionML=ENU=Windows User Name;
                ToolTipML=ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;

                OnAssistEdit=VAR
                               DSOP@1000 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
                               result@1001 : Text;
                             BEGIN
                               DSOP := DSOP.DSObjectPickerWrapper;
                               result := DSOP.InvokeDialogAndReturnSid;
                               if result <> '' then begin
                                 "Windows Security ID" := result;
                                 ValidateSid;
                                 WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                                 SetUserName;
                               end;
                             END;

                ImplicitType=Text208 }

    { 31  ;1   ;Group     ;
                Name=ACS Authentication;
                CaptionML=ENU=Access Control Service Authentication;
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 22  ;2   ;Field     ;
                Name=ACSStatus;
                DrillDown=false;
                AssistEdit=true;
                CaptionML=ENU=ACS Access Status;
                ToolTipML=ENU=Specifies the user's status for ACS authentication. When you start creating a user, the status is Disabled. After you create a user, the status changes to Pending. After the user logs on successfully, the status changes to Enabled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ACSStatus;
                Importance=Promoted;
                Visible=NOT SoftwareAsAService;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditACSStatus;
                             END;

                ImplicitType=Option }

    { 15  ;1   ;Group     ;
                Name=NAV Password Authentication;
                CaptionML=ENU=Microsoft Dynamics NAV Password Authentication;
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 25  ;2   ;Field     ;
                Name=Password;
                ExtendedDatatype=Masked;
                AssistEdit=true;
                CaptionML=ENU=Password;
                ToolTipML=ENU=Specifies an initial password for the user. To sign in to the client, the user must provide the name that is specified in the User Name field and this password.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Password;
                Importance=Standard;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditNavPassword;
                             END;

                ImplicitType=Text80 }

    { 26  ;2   ;Field     ;
                Name=Change Password;
                CaptionML=ENU=User must change password at next login;
                ToolTipML=ENU=Specifies if the user will be prompted to change the password at next login.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Change Password";
                ImplicitType=Boolean }

    { 19  ;1   ;Group     ;
                Name=Web Service Access;
                CaptionML=ENU=Web Service Access;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                Name=WebServiceID;
                AssistEdit=true;
                CaptionML=ENU=Web Service Access Key;
                ToolTipML=ENU=Specifies a generated key that Dynamics 365 web service applications can use to authenticate to Dynamics 365 services. Choose the AssistEdit button to generate a key.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceID;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditWebServiceID;
                             END;

                ImplicitType=Text80 }

    { 30  ;2   ;Field     ;
                Name=WebServiceExpiryDate;
                CaptionML=ENU=Web Service Expiry Date;
                ToolTipML=ENU=Specifies an expiration date for the web services access key.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceExpiryDate;
                Importance=Promoted;
                Editable=FALSE;
                ImplicitType=DateTime }

    { 27  ;1   ;Group     ;
                Name=Office 365 Authentication;
                CaptionML=[@@@="{Locked=""Office 365""}";
                           ENU=Office 365 Authentication];
                GroupType=Group }

    { 28  ;2   ;Field     ;
                Name=Authentication Email;
                ToolTipML=ENU=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Authentication Email";
                Editable=NOT SoftwareAsAService;
                OnValidate=BEGIN
                             IdentityManagement.SetAuthenticationEmail("User Security ID","Authentication Email");
                             CurrPage.SAVERECORD;
                             AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                           END;

                ImplicitType=Text250 }

    { 36  ;2   ;Field     ;
                Name=ApplicationID;
                CaptionML=ENU=Application ID;
                ToolTipML=ENU=Specifies the client ID of the Microsoft Azure Active Directory application when authenticating web-service calls. This field is only relevant when the Dynamics 365 user is used for web services.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplicationID;
                OnValidate=BEGIN
                             if ApplicationID = '' then
                               CLEAR("Application ID")
                             else
                               "Application ID" := ApplicationID
                           END;

                ImplicitType=Text }

    { 34  ;2   ;Field     ;
                Name=MappedToExchangeIdentifier;
                CaptionML=ENU=Mapped To Exchange Identifier;
                ToolTipML=ENU=Specifies whether the user is mapped to a Microsoft Exchange identifier, which enables the user to access Dynamics 365 from Exchange applications (such as Outlook) without having to sign-in.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=HasExchangeIdentifier;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE;
                ImplicitType=Boolean }

    { 32  ;2   ;Field     ;
                Name=AuthenticationStatus;
                CaptionML=ENU=Authentication Status;
                ToolTipML=ENU=Specifies the user's status for Office 365 authentication. When you start to create a user, the status is Disabled. After you specify an authentication email address for the user, the status changes to Inactive. After the user logs on successfully, the status changes to Active.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AuthenticationStatus;
                Editable=FALSE;
                ImplicitType=Option }

    { 33  ;1   ;Part      ;
                Name=UserGroups;
                CaptionML=ENU=User Groups;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User Security ID"=FIELD("User Security ID");
                PagePartID="User Groups User SubPage";
                PartType=Page;
                UpdatePropagation=Both }

    { 14  ;1   ;Part      ;
                Name=Permissions;
                CaptionML=ENU=User Permission Sets;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="User Security ID"=FIELD("User Security ID");
                PagePartID="User Subform";
                PartType=Page }

    { 16  ;    ;Container ;
                Name=Container16;
                ContainerType=FactBoxArea }

    { 17  ;1   ;Part      ;
                Name=Part17;
                PartType=System;
                SystemPartID=Notes }

    { 18  ;1   ;Part      ;
                Name=Part18;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      UserSecID@1007 : Record User;
      IdentityManagement@1011 : Codeunit "Identity Management";
      WindowsUserName@1000 : Text[208];
      Text001@1003 : TextConst 'ENU=The account %1 is not a valid Windows account.';
      Text002@1002 : TextConst 'ENU=The account %1 already exists.';
      Text003@1001 : TextConst 'ENU=The account %1 is not allowed.';
      Password@1006 : Text[80];
      ACSStatus@1008 : 'Disabled,Pending,Registered,Unknown';
      WebServiceID@1009 : Text[80];
      Confirm001Qst@1010 : TextConst 'ENU=The current Web Service Access Key will not be valid after editing. All clients that use it have to be updated. Do you want to continue?';
      WebServiceExpiryDate@1012 : DateTime;
      Confirm002Qst@1013 : TextConst 'ENU=You have not completed all necessary fields for the Credential Type that this client is currently using. The user will not be able to log in unless you provide a value in the %1 field. Are you sure that you want to close the window?';
      DeployedToAzure@1014 : Boolean INDATASET;
      Confirm003Qst@1005 : TextConst 'ENU=The user will not be able to sign in unless you change the state to Enabled. Are you sure that you want to close the page?';
      HasExchangeIdentifier@1016 : Boolean;
      AuthenticationStatus@1004 : 'Disabled,Inactive,Active';
      Confirm004Qst@1015 : TextConst 'ENU=The user will not be able to sign in because no authentication data was provided. Are you sure that you want to close the page?';
      ConfirmRemoveExchangeIdentifierQst@1017 : TextConst 'ENU=If you delete the Exchange Identifier Mapping, the user will no longer automatically be signed in when they use Exchange applications.\Do you want to continue?';
      SoftwareAsAService@1018 : Boolean;
      ApplicationID@1019 : Text;
      CannotManageUsersQst@1029 : TextConst 'ENU=You cannot add or delete users on this page. Administrators can manage users in the Office 365 admin center.\\Do you want to go there now?';
      AllowChangeWebServiceAccessKey@1021 : Boolean;
      IsWindowsClient@1024 : Boolean;
      InitialState@1023 : Option;
      CreateFirstUserQst@1025 : TextConst '@@@=USERID;ENU=You will be locked out after creating first user. Would you first like to create a SUPER user for %1?';
      CreateFirstUserYesMsg@1026 : TextConst 'ENU=Yes';
      CreateFirstUserNoMsg@1027 : TextConst 'ENU=No';
      OfficePortalTxt@1022 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=844936"';
      OfficePPEPortalTxt@1020 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=844935"';

    LOCAL PROCEDURE ValidateSid@1();
    VAR
      User@1000 : Record User;
    BEGIN
      if "Windows Security ID" = '' then
        ERROR(Text001,"User Name");

      if ("Windows Security ID" = 'S-1-1-0') or ("Windows Security ID" = 'S-1-5-7') or ("Windows Security ID" = 'S-1-5-32-544') then
        ERROR(Text003,IdentityManagement.UserName("Windows Security ID"));

      User.SETFILTER("Windows Security ID","Windows Security ID");
      User.SETFILTER("User Security ID",'<>%1',"User Security ID");
      if not User.ISEMPTY then
        ERROR(Text002,User."User Name");
    END;

    LOCAL PROCEDURE ValidateAuthentication@7() : Boolean;
    VAR
      ValidationField@1000 : Text;
    BEGIN
      UserSecID.RESET;
      if (UserSecID.COUNT = 1) or (USERSECURITYID = "User Security ID") then begin
        if IdentityManagement.IsWindowsAuthentication and ("Windows Security ID" = '') then
          ValidationField := 'Windows User Name';

        if IdentityManagement.IsUserNamePasswordAuthentication and (Password = '') then
          ValidationField := 'Password';

        if IdentityManagement.IsAccessControlServiceAuthentication and (ACSStatus = 0) and (AuthenticationStatus = 0) then
          ValidationField := 'ACSStatus / AuthenticationStatus';

        if ValidationField <> '' then
          exit(CONFIRM(Confirm002Qst,false,ValidationField));
      end else begin
        if ("Windows Security ID" = '') and (Password = '') and (ACSStatus = 0) and (AuthenticationStatus = 0) then
          exit(CONFIRM(Confirm004Qst,false));
      end;

      if (InitialState = State::Enabled) and (State = State::Disabled) then
        exit(CONFIRM(Confirm003Qst,false));

      exit(true);
    END;

    LOCAL PROCEDURE ValidateUserName@3();
    VAR
      UserMgt@1000 : Codeunit "User Management";
    BEGIN
      UserMgt.ValidateUserName(Rec,xRec,WindowsUserName);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE EditWebServiceID@6();
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
      SetWebServiceAccessKey@1000 : Page "Set Web Service Access Key";
    BEGIN
      if PermissionManager.SoftwareAsAService and (USERSECURITYID <> "User Security ID") then
        exit;

      TESTFIELD("User Name");

      if CONFIRM(Confirm001Qst) then begin
        UserSecID.SETCURRENTKEY("User Security ID");
        UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
        SetWebServiceAccessKey.SETRECORD(UserSecID);
        SetWebServiceAccessKey.SETTABLEVIEW(UserSecID);
        if SetWebServiceAccessKey.RUNMODAL = ACTION::OK then
          CurrPage.UPDATE;
      end;
    END;

    LOCAL PROCEDURE EditNavPassword@8();
    VAR
      SetPassword@1000 : Page "Set Password";
    BEGIN
      TESTFIELD("User Name");

      CurrPage.SAVERECORD;
      COMMIT;

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      SetPassword.SETRECORD(UserSecID);
      SetPassword.SETTABLEVIEW(UserSecID);
      if SetPassword.RUNMODAL = ACTION::OK then
        CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE EditACSStatus@9();
    VAR
      UserACSSetup@1000 : Page "User ACS Setup";
    BEGIN
      TESTFIELD("User Name");

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      UserACSSetup.SETRECORD(UserSecID);
      UserACSSetup.SETTABLEVIEW(UserSecID);
      if UserACSSetup.RUNMODAL = ACTION::OK then
        CurrPage.UPDATE;
    END;

    [External]
    PROCEDURE ManageUsersIsAllowed@11() : Boolean;
    VAR
      PermissionManager@1000 : Codeunit "Permission Manager";
      EnvironmentMgt@1001 : Codeunit "Environment Mgt.";
    BEGIN
      if not PermissionManager.SoftwareAsAService then
        exit(true);

      if CONFIRM(CannotManageUsersQst,true) then
        if EnvironmentMgt.IsPPE then
          HYPERLINK(OfficePPEPortalTxt)
        else
          HYPERLINK(OfficePortalTxt);

      exit(false);
    END;

    LOCAL PROCEDURE SetUserName@4();
    BEGIN
      "User Name" := WindowsUserName;
      ValidateUserName;
    END;

    LOCAL PROCEDURE HideExternalUsers@2();
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      if not PermissionManager.SoftwareAsAService then
        exit;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    LOCAL PROCEDURE ValidateWindowsUserName@5();
    VAR
      UserSID@1001 : Text;
    BEGIN
      if WindowsUserName = '' then
        "Windows Security ID" := ''
      else begin
        UserSID := SID(WindowsUserName);
        WindowsUserName := IdentityManagement.UserName(UserSID);
        if WindowsUserName <> '' then begin
          "Windows Security ID" := UserSID;
          ValidateSid;
          SetUserName;
        end else
          ERROR(Text001,WindowsUserName);
      end;
    END;

    LOCAL PROCEDURE OnPremAskFirstUserToCreateSuper@10();
    VAR
      User@1001 : Record User;
      FormatedMessage@1002 : Text;
    BEGIN
      if SoftwareAsAService then
        exit;

      // Users already exist
      if not User.ISEMPTY then
        exit;

      // Copy localized message to a variable to bypass
      // Bug 195060: Argument size problem in CONFIRM function when using place holders in localized message
      FormatedMessage := CreateFirstUserQst;
      if CONFIRM(FormatedMessage,true,USERID,CreateFirstUserYesMsg,CreateFirstUserNoMsg) then
        CODEUNIT.RUN(CODEUNIT::"Users - Create Super User");
    END;

    BEGIN
    END.
  }
}

