OBJECT Table 272 Check Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Check Ledger Entry;
    LookupPageID="Check Ledger Entries";
    DrillDownPageID="Check Ledger Entries";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account No. }
    { 3   ;   ;Bank Account Ledger Entry No.;Integer;
                                                   TableRelation="Bank Account Ledger Entry";
                                                   CaptionML=ENU=Bank Account Ledger Entry No. }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 8   ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromBank }
    { 9   ;   ;Check Date          ;Date          ;CaptionML=ENU=Check Date }
    { 10  ;   ;Check No.           ;Code20        ;CaptionML=ENU=Check No. }
    { 11  ;   ;Check Type          ;Option        ;CaptionML=ENU=Check Type;
                                                   OptionCaptionML=ENU=Total Check,Partial Check;
                                                   OptionString="Total Check","Partial Check" }
    { 12  ;   ;Bank Payment Type   ;Option        ;CaptionML=ENU=Bank Payment Type;
                                                   OptionCaptionML=ENU=" ,Computer Check,Manual Check,Electronic Payment";
                                                   OptionString=" ","Computer Check","Manual Check","Electronic Payment" }
    { 13  ;   ;Entry Status        ;Option        ;CaptionML=ENU=Entry Status;
                                                   OptionCaptionML=ENU=,Printed,Voided,Posted,Financially Voided,Test Print,Exported,Transmitted;
                                                   OptionString=,Printed,Voided,Posted,"Financially Voided","Test Print",Exported,Transmitted }
    { 14  ;   ;Original Entry Status;Option       ;CaptionML=ENU=Original Entry Status;
                                                   OptionCaptionML=ENU=" ,Printed,Voided,Posted,Financially Voided";
                                                   OptionString=" ",Printed,Voided,Posted,"Financially Voided" }
    { 15  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset" }
    { 16  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Fixed Asset")) "Fixed Asset";
                                                   CaptionML=ENU=Bal. Account No. }
    { 17  ;   ;Open                ;Boolean       ;CaptionML=ENU=Open }
    { 18  ;   ;Statement Status    ;Option        ;CaptionML=ENU=Statement Status;
                                                   OptionCaptionML=ENU=Open,Bank Acc. Entry Applied,Check Entry Applied,Closed;
                                                   OptionString=Open,"Bank Acc. Entry Applied","Check Entry Applied",Closed }
    { 19  ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation Line"."Statement No." WHERE ("Bank Account No."=FIELD("Bank Account No."));
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Statement No. }
    { 20  ;   ;Statement Line No.  ;Integer       ;TableRelation="Bank Acc. Reconciliation Line"."Statement Line No." WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                                             "Statement No."=FIELD("Statement No."));
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Statement Line No. }
    { 21  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID }
    { 22  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 23  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=ENU=Data Exch. Entry No.;
                                                   Editable=false }
    { 24  ;   ;Data Exch. Voided Entry No.;Integer;TableRelation="Data Exch.";
                                                   CaptionML=ENU=Data Exch. Voided Entry No.;
                                                   Editable=false }
    { 25  ;   ;Positive Pay Exported;Boolean      ;CaptionML=ENU=Positive Pay Exported }
    { 26  ;   ;Record ID to Print  ;RecordID      ;CaptionML=ENU=Record ID to Print }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Bank Account No.","Check Date"          }
    {    ;"Bank Account No.","Entry Status","Check No." }
    {    ;"Bank Account Ledger Entry No."          }
    {    ;"Bank Account No.",Open                  }
    {    ;"Document No.","Posting Date"            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NothingToExportErr@1000 : TextConst 'ENU=There is nothing to export.';

    [External]
    PROCEDURE GetCurrencyCodeFromBank@1() : Code[10];
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      if "Bank Account No." = BankAcc."No." then
        exit(BankAcc."Currency Code");

      if BankAcc.GET("Bank Account No.") then
        exit(BankAcc."Currency Code");

      exit('');
    END;

    [External]
    PROCEDURE CopyFromBankAccLedgEntry@2(BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry");
    BEGIN
      "Bank Account No." := BankAccLedgEntry."Bank Account No.";
      "Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
      "Posting Date" := BankAccLedgEntry."Posting Date";
      "Document Type" := BankAccLedgEntry."Document Type";
      "Document No." := BankAccLedgEntry."Document No.";
      "External Document No." := BankAccLedgEntry."External Document No.";
      Description := BankAccLedgEntry.Description;
      "Bank Payment Type" := "Bank Payment Type";
      "Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
      "Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
      "Entry Status" := "Entry Status"::Posted;
      Open := true;
      "User ID" := USERID;
      "Check Date" := BankAccLedgEntry."Posting Date";
      "Check No." := BankAccLedgEntry."Document No.";

      OnAfterCopyFromBankAccLedgEntry(Rec,BankAccLedgEntry);
    END;

    [External]
    PROCEDURE ExportCheckFile@3();
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      if not FINDSET then
        ERROR(NothingToExportErr);

      BankAcc.GET("Bank Account No.");
      if BankAcc.GetPosPayExportCodeunitID > 0 then
        CODEUNIT.RUN(BankAcc.GetPosPayExportCodeunitID,Rec)
      else
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Pos. Pay",Rec);
    END;

    [External]
    PROCEDURE GetPayee@4() Payee : Text[50];
    VAR
      Vendor@1003 : Record Vendor;
      Customer@1002 : Record Customer;
      GLAccount@1001 : Record "G/L Account";
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      case "Bal. Account Type" of
        "Bal. Account Type"::"G/L Account":
          if "Bal. Account No." <> '' then begin
            GLAccount.GET("Bal. Account No.");
            Payee := GLAccount.Name;
          end;
        "Bal. Account Type"::Customer:
          if "Bal. Account No." <> '' then begin
            Customer.GET("Bal. Account No.");
            Payee := Customer.Name;
          end;
        "Bal. Account Type"::Vendor:
          if "Bal. Account No." <> '' then begin
            Vendor.GET("Bal. Account No.");
            Payee := Vendor.Name;
          end;
        "Bal. Account Type"::"Bank Account":
          if "Bal. Account No." <> '' then begin
            BankAccount.GET("Bal. Account No.");
            Payee := BankAccount.Name;
          end;
        "Bal. Account Type"::"Fixed Asset":
          Payee := "Bal. Account No.";
      end;
    END;

    [External]
    PROCEDURE SetFilterBankAccNoOpen@6(BankAccNo@1000 : Code[20]);
    BEGIN
      RESET;
      SETCURRENTKEY("Bank Account No.",Open);
      SETRANGE("Bank Account No.",BankAccNo);
      SETRANGE(Open,true);
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCopyFromBankAccLedgEntry@7(VAR CheckLedgerEntry@1000 : Record "Check Ledger Entry";BankAccountLedgerEntry@1001 : Record "Bank Account Ledger Entry");
    BEGIN
    END;

    BEGIN
    END.
  }
}

