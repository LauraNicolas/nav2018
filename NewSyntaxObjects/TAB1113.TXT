OBJECT Table 1113 Cost Object
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               SETRECFILTER;
               ConfirmDeleteIfEntriesExist(Rec,true);
               SETRANGE(Code);
             END;

    CaptionML=ENU=Cost Object;
    LookupPageID="Chart of Cost Objects";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnLookup=VAR
                                                              CostAccMgt@1000 : Codeunit "Cost Account Mgt";
                                                            BEGIN
                                                              CostAccMgt.LookupCostObjectFromDimValue(Code);
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Cost Type Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Type";
                                                   CaptionML=ENU=Cost Type Filter }
    { 4   ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5   ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cost Entry".Amount WHERE ("Cost Object Code"=FIELD(Code),
                                                                                              "Cost Object Code"=FIELD(FILTER(Totaling)),
                                                                                              "Cost Type No."=FIELD("Cost Type Filter"),
                                                                                              "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Net Change;
                                                   BlankZero=true;
                                                   Editable=false }
    { 6   ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cost Entry".Amount WHERE ("Cost Object Code"=FIELD(Code),
                                                                                              "Cost Object Code"=FIELD(FILTER(Totaling)),
                                                                                              "Cost Type No."=FIELD("Cost Type Filter"),
                                                                                              "Posting Date"=FIELD(UPPERLIMIT("Date Filter"))));
                                                   CaptionML=ENU=Balance at Date;
                                                   BlankZero=true;
                                                   Editable=false }
    { 7   ;   ;Sorting Order       ;Code10        ;CaptionML=ENU=Sorting Order }
    { 8   ;   ;Comment             ;Text50        ;CaptionML=ENU=Comment }
    { 9   ;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                // Change to other type. Entries exist?
                                                                if (("Line Type" <> "Line Type"::"Cost Object") and
                                                                    (xRec."Line Type" = xRec."Line Type"::"Cost Object")) or
                                                                   (("Line Type" <> "Line Type"::"Begin-Total") and
                                                                    (xRec."Line Type" = xRec."Line Type"::"Begin-Total"))
                                                                then
                                                                  ConfirmModifyIfEntriesExist(Rec);

                                                                if "Line Type" <> "Line Type"::"Cost Object" then begin
                                                                  Blocked := true;
                                                                end else
                                                                  Totaling := '';
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Cost Object,Heading,Total,Begin-Total,End-Total;
                                                   OptionString="Cost Object",Heading,Total,"Begin-Total","End-Total" }
    { 10  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 11  ;   ;New Page            ;Boolean       ;CaptionML=ENU=New Page }
    { 12  ;   ;Blank Line          ;Boolean       ;CaptionML=ENU=Blank Line;
                                                   MinValue=false }
    { 13  ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation;
                                                   MinValue=0;
                                                   Editable=false }
    { 14  ;   ;Totaling            ;Text250       ;OnValidate=BEGIN
                                                                if not ("Line Type" in ["Line Type"::Total,"Line Type"::"End-Total"]) then
                                                                  FIELDERROR("Line Type");

                                                                CALCFIELDS("Net Change");
                                                              END;

                                                   OnLookup=VAR
                                                              SelectionFilter@1000 : Text[1024];
                                                            BEGIN
                                                              if LookupCostObjectFilter(SelectionFilter) then
                                                                VALIDATE(Totaling,COPYSTR(SelectionFilter,1,MAXSTRLEN(Totaling)));
                                                            END;

                                                   CaptionML=ENU=Totaling }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;"Sorting Order"                          }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There are general ledger entries, cost entries, or cost budget entries that are posted to the selected cost object. Are you sure that you want to delete the cost object?';
      Text002@1002 : TextConst 'ENU=There are general ledger entries, cost entries, or cost budget entries that are posted to the selected cost object. Are you sure that you want to modify the cost object?';

    LOCAL PROCEDURE EntriesExist@2(VAR CostObject@1007 : Record "Cost Object") EntriesFound : Boolean;
    VAR
      CostAccSetup@1000 : Record "Cost Accounting Setup";
      GLEntry@1001 : Record "G/L Entry";
      CostEntry@1002 : Record "Cost Entry";
      CostBudgetEntry@1003 : Record "Cost Budget Entry";
      DimensionMgt@1004 : Codeunit DimensionManagement;
      DimFilter@1005 : Text;
    BEGIN
      CostAccSetup.GET;
      if CostObject.FINDSET then
        repeat
          DimensionMgt.GetDimSetIDsForFilter(CostAccSetup."Cost Center Dimension",CostObject.Code);
          DimFilter := DimensionMgt.GetDimSetFilter;
          if DimFilter <> '' then begin
            GLEntry.SETFILTER("Dimension Set ID",DimFilter);
            if GLEntry.FINDFIRST then
              EntriesFound := true;
          end;

          if not EntriesFound then begin
            CostBudgetEntry.SETCURRENTKEY("Budget Name","Cost Object Code");
            CostBudgetEntry.SETRANGE("Cost Center Code",CostObject.Code);
            EntriesFound := not CostBudgetEntry.ISEMPTY;
          end;

          if not EntriesFound then begin
            CostEntry.SETCURRENTKEY("Cost Object Code");
            CostEntry.SETRANGE("Cost Object Code",CostObject.Code);
            EntriesFound := not CostEntry.ISEMPTY;
          end;
        until (CostObject.NEXT = 0) or EntriesFound;
    END;

    [External]
    PROCEDURE ConfirmDeleteIfEntriesExist@3(VAR CostObject@1000 : Record "Cost Object";CalledFromOnInsert@1001 : Boolean);
    BEGIN
      if EntriesExist(CostObject) then
        if not CONFIRM(Text001,true) then
          ERROR('');
      if not CalledFromOnInsert then
        CostObject.DELETEALL;
    END;

    LOCAL PROCEDURE ConfirmModifyIfEntriesExist@4(VAR CostObject@1000 : Record "Cost Object");
    VAR
      CostObject2@1001 : Record "Cost Object";
    BEGIN
      CostObject2 := CostObject;
      CostObject2.SETRECFILTER;
      if EntriesExist(CostObject2) then
        if not CONFIRM(Text002,true) then
          ERROR('');
    END;

    [External]
    PROCEDURE LookupCostObjectFilter@9(VAR Text@1000 : Text) : Boolean;
    VAR
      ChartOfCostObjects@1002 : Page "Chart of Cost Objects";
    BEGIN
      ChartOfCostObjects.LOOKUPMODE(true);
      if ChartOfCostObjects.RUNMODAL = ACTION::LookupOK then begin
        Text := ChartOfCostObjects.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    BEGIN
    END.
  }
}

