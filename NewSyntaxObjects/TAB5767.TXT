OBJECT Table 5767 Warehouse Activity Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Whse. Item Tracking Line"=rmd;
    OnDelete=BEGIN
               DeleteRelatedWhseActivLines(Rec,false);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Activity Line;
    LookupPageID="Warehouse Activity Lines";
    DrillDownPageID="Warehouse Activity Lines";
  }
  FIELDS
  {
    { 1   ;   ;Activity Type       ;Option        ;CaptionML=ENU=Activity Type;
                                                   OptionCaptionML=ENU=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Invt. Movement";
                                                   OptionString=" ","Put-away",Pick,Movement,"Invt. Put-away","Invt. Pick","Invt. Movement";
                                                   Editable=false }
    { 2   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 4   ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=false }
    { 5   ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No.;
                                                   Editable=false }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 8   ;   ;Source Subline No.  ;Integer       ;CaptionML=ENU=Source Subline No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=" ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output,,,,,,Service Order,,Assembly Consumption,Assembly Order";
                                                   OptionString=" ","Sales Order",,,"Sales Return Order","Purchase Order",,,"Purchase Return Order","Inbound Transfer","Outbound Transfer","Prod. Consumption","Prod. Output",,,,,,"Service Order",,"Assembly Consumption","Assembly Order";
                                                   BlankZero=true;
                                                   Editable=false }
    { 11  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 12  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 13  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                if "Item No." <> xRec."Item No." then
                                                                  "Variant Code" := '';

                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No.;
                                                   Editable=false }
    { 15  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" = '' then
                                                                  VALIDATE("Item No.")
                                                                else begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                  "Description 2" := ItemVariant."Description 2";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Variant Code;
                                                   Editable=false }
    { 16  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                                VALIDATE("Qty. to Handle");
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   Editable=false }
    { 17  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 18  ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=false }
    { 19  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2;
                                                   Editable=false }
    { 20  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Handled"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 21  ;   ;Qty. (Base)         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Qty. (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Handle","Qty. Outstanding");
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 25  ;   ;Qty. Outstanding (Base);Decimal    ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. Outstanding","Qty. Outstanding (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 26  ;   ;Qty. to Handle      ;Decimal       ;OnValidate=BEGIN
                                                                if "Qty. to Handle" > "Qty. Outstanding" then
                                                                  ERROR(
                                                                    Text002,
                                                                    "Qty. Outstanding");

                                                                GetLocation("Location Code");
                                                                if Location."Directed Put-away and Pick" then
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. to Handle",Cubage,Weight);

                                                                if (CurrFieldNo <> 0) and
                                                                   ("Action Type" = "Action Type"::Place) and
                                                                   ("Breakbulk No." = 0) and
                                                                   ("Qty. to Handle" > 0) and
                                                                   Location."Directed Put-away and Pick"
                                                                then
                                                                  if GetBin("Location Code","Bin Code") then
                                                                    CheckIncreaseCapacity(true);

                                                                if not UseBaseQty then begin
                                                                  "Qty. to Handle (Base)" := CalcBaseQty("Qty. to Handle");
                                                                  if "Qty. to Handle (Base)" > "Qty. Outstanding (Base)" then // rounding error- qty same, not base qty
                                                                    "Qty. to Handle (Base)" := "Qty. Outstanding (Base)";
                                                                end;

                                                                if ("Activity Type" = "Activity Type"::"Put-away") and
                                                                   ("Action Type" = "Action Type"::Take) and
                                                                   (CurrFieldNo <> 0)
                                                                then
                                                                  if ("Breakbulk No." <> 0) or "Original Breakbulk" then
                                                                    UpdateBreakbulkQtytoHandle;

                                                                if ("Activity Type" in ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"]) and
                                                                   ("Action Type" <> "Action Type"::Place) and ("Lot No." <> '') and (CurrFieldNo <> 0)
                                                                then
                                                                  CheckReservedItemTrkg(1,"Lot No.");

                                                                if ("Qty. to Handle" = 0) and RegisteredWhseActLineIsEmpty then
                                                                  UpdateReservation(Rec,false)
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 27  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                UseBaseQty := true;
                                                                VALIDATE("Qty. to Handle",CalcQty("Qty. to Handle (Base)"));
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle (Base);
                                                   DecimalPlaces=0:5 }
    { 28  ;   ;Qty. Handled        ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Handled (Base)" := CalcBaseQty("Qty. Handled");
                                                              END;

                                                   CaptionML=ENU=Qty. Handled;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Qty. Handled (Base) ;Decimal       ;CaptionML=ENU=Qty. Handled (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Shipping Advice     ;Option        ;FieldClass=Normal;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete;
                                                   Editable=false }
    { 34  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=ENU=Destination Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Location,Item,Family,Sales Order";
                                                   OptionString=" ",Customer,Vendor,Location,Item,Family,"Sales Order";
                                                   Editable=false }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF ("Destination Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Destination Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Destination Type"=CONST(Location)) Location
                                                                 ELSE IF ("Destination Type"=CONST(Item)) Item
                                                                 ELSE IF ("Destination Type"=CONST(Family)) Family
                                                                 ELSE IF ("Destination Type"=CONST("Sales Order")) "Sales Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   CaptionML=ENU=Destination No.;
                                                   Editable=false }
    { 42  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 43  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 44  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 47  ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 900 ;   ;Assemble to Order   ;Boolean       ;AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=Assemble to Order;
                                                   Editable=false }
    { 901 ;   ;ATO Component       ;Boolean       ;CaptionML=ENU=ATO Component;
                                                   Editable=false }
    { 6500;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                if "Serial No." <> '' then begin
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,true);
                                                                  TESTFIELD("Qty. per Unit of Measure",1);

                                                                  if "Activity Type" in ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"] then
                                                                    CheckReservedItemTrkg(0,"Serial No.");

                                                                  CheckSNSpecificationExists;

                                                                  if SNRequired and LNRequired then
                                                                    FindLotNoBySerialNo;
                                                                end;

                                                                if "Serial No." <> xRec."Serial No." then
                                                                  "Expiration Date" := 0D;
                                                              END;

                                                   OnLookup=VAR
                                                              LookUpBinContent@1000 : Boolean;
                                                            BEGIN
                                                              LookUpBinContent := ("Activity Type" <= "Activity Type"::Movement) or ("Action Type" <> "Action Type"::Place);
                                                              LookUpTrackingSummary(Rec,LookUpBinContent,-1,0);
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 6501;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                if "Lot No." <> '' then begin
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,true);

                                                                  if "Activity Type" in ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"] then
                                                                    CheckReservedItemTrkg(1,"Lot No.");
                                                                end;

                                                                if "Lot No." <> xRec."Lot No." then
                                                                  "Expiration Date" := 0D;
                                                              END;

                                                   OnLookup=VAR
                                                              LookUpBinContent@1000 : Boolean;
                                                            BEGIN
                                                              LookUpBinContent := ("Activity Type" <= "Activity Type"::Movement) or ("Action Type" <> "Action Type"::Place);
                                                              LookUpTrackingSummary(Rec,LookUpBinContent,-1,1);
                                                            END;

                                                   CaptionML=ENU=Lot No. }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 6503;   ;Expiration Date     ;Date          ;OnValidate=VAR
                                                                WhseActivLine@1000 : Record "Warehouse Activity Line";
                                                              BEGIN
                                                                if "Lot No." <> '' then
                                                                  with WhseActivLine do begin
                                                                    RESET;
                                                                    SETCURRENTKEY("No.","Line No.","Activity Type");
                                                                    SETRANGE("No.",Rec."No.");
                                                                    SETRANGE("Item No.",Rec."Item No.");
                                                                    SETRANGE("Lot No.",Rec."Lot No.");

                                                                    if FINDSET then
                                                                      repeat
                                                                        if ("Line No." <> Rec."Line No.") and ("Expiration Date" <> Rec."Expiration Date") and
                                                                           (Rec."Expiration Date" <> 0D) and ("Expiration Date" <> 0D)
                                                                        then
                                                                          Rec.FIELDERROR("Expiration Date");
                                                                      until NEXT = 0;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Expiration Date }
    { 6504;   ;Serial No. Blocked  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serial No. Information".Blocked WHERE ("Item No."=FIELD("Item No."),
                                                                                                              "Variant Code"=FIELD("Variant Code"),
                                                                                                              "Serial No."=FIELD("Serial No.")));
                                                   CaptionML=ENU=Serial No. Blocked;
                                                   Editable=false }
    { 6505;   ;Lot No. Blocked     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Lot No. Information".Blocked WHERE ("Item No."=FIELD("Item No."),
                                                                                                           "Variant Code"=FIELD("Variant Code"),
                                                                                                           "Lot No."=FIELD("Lot No.")));
                                                   CaptionML=ENU=Lot No. Blocked;
                                                   Editable=false }
    { 7300;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=VAR
                                                                BinContent@1000 : Record "Bin Content";
                                                                BinType@1002 : Record "Bin Type";
                                                                QtyAvail@1001 : Decimal;
                                                                QtyOutstanding@1004 : Decimal;
                                                                AvailableQty@1006 : Decimal;
                                                                UOMCode@1003 : Code[10];
                                                                NewBinCode@1005 : Code[20];
                                                              BEGIN
                                                                CheckBinInSourceDoc;

                                                                if "Bin Code" <> '' then
                                                                  if not "Assemble to Order" and ("Action Type" = "Action Type"::Take) then
                                                                    WMSMgt.FindBinContent("Location Code","Bin Code","Item No.","Variant Code","Zone Code")
                                                                  else
                                                                    WMSMgt.FindBin("Location Code","Bin Code","Zone Code");

                                                                if "Bin Code" <> xRec."Bin Code" then begin
                                                                  CheckInvalidBinCode;
                                                                  if GetBin("Location Code","Bin Code") then begin
                                                                    if CurrFieldNo <> 0 then begin
                                                                      if ("Activity Type" = "Activity Type"::"Put-away") and
                                                                         ("Breakbulk No." <> 0)
                                                                      then
                                                                        ERROR(Text005,FIELDCAPTION("Bin Code"));
                                                                      CheckWhseDocLine;
                                                                      if "Action Type" = "Action Type"::Take then begin
                                                                        if (("Whse. Document Type" <> "Whse. Document Type"::Receipt) and
                                                                            (Bin."Bin Type Code" <> ''))
                                                                        then
                                                                          if BinType.GET(Bin."Bin Type Code") then
                                                                            BinType.TESTFIELD(Receive,false);
                                                                        GetLocation("Location Code");
                                                                        if Location."Directed Put-away and Pick" then begin
                                                                          UOMCode := "Unit of Measure Code";
                                                                          QtyOutstanding := "Qty. Outstanding";
                                                                        end else begin
                                                                          UOMCode := WMSMgt.GetBaseUOM("Item No.");
                                                                          QtyOutstanding := "Qty. Outstanding (Base)";
                                                                        end;
                                                                        NewBinCode := "Bin Code";
                                                                        if BinContent.GET("Location Code","Bin Code","Item No.","Variant Code",UOMCode) then begin
                                                                          if "Activity Type" in ["Activity Type"::Pick,"Activity Type"::"Invt. Pick","Activity Type"::"Invt. Movement"] then
                                                                            QtyAvail := BinContent.CalcQtyAvailToPick(0)
                                                                          else
                                                                            QtyAvail := BinContent.CalcQtyAvailToTake(0);
                                                                          if Location."Directed Put-away and Pick" then begin
                                                                            CreatePick.SetCrossDock(Bin."Cross-Dock Bin");
                                                                            AvailableQty :=
                                                                              CreatePick.CalcTotalAvailQtyToPick(
                                                                                "Location Code","Item No.","Variant Code","Lot No.","Serial No.",
                                                                                "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",0,false);
                                                                            AvailableQty := AvailableQty + "Qty. Outstanding (Base)";
                                                                            if AvailableQty < 0 then
                                                                              AvailableQty := 0;

                                                                            if AvailableQty = 0 then
                                                                              ERROR(Text015);
                                                                          end else
                                                                            AvailableQty := QtyAvail;

                                                                          if AvailableQty < QtyAvail then
                                                                            QtyAvail := AvailableQty;

                                                                          if (QtyAvail < QtyOutstanding) and not "Assemble to Order" then begin
                                                                            if not
                                                                               CONFIRM(
                                                                                 STRSUBSTNO(
                                                                                   Text012,
                                                                                   FIELDCAPTION("Qty. Outstanding"),QtyOutstanding,
                                                                                   QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                                 false)
                                                                            then
                                                                              ERROR(Text006);

                                                                            "Bin Code" := NewBinCode;
                                                                            MODIFY;
                                                                          end;
                                                                        end else begin
                                                                          if not "Assemble to Order" then
                                                                            if not
                                                                               CONFIRM(
                                                                                 STRSUBSTNO(
                                                                                   Text012,
                                                                                   FIELDCAPTION("Qty. Outstanding"),QtyOutstanding,
                                                                                   QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                                 false)
                                                                            then
                                                                              ERROR(Text006);

                                                                          "Bin Code" := NewBinCode;
                                                                          MODIFY;
                                                                        end;
                                                                      end else begin
                                                                        if "Qty. to Handle" > 0 then
                                                                          CheckIncreaseCapacity(false);
                                                                        DeleteBinContent(xRec);
                                                                      end;
                                                                    end;
                                                                    Dedicated := Bin.Dedicated;
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      "Bin Ranking" := Bin."Bin Ranking";
                                                                      "Bin Type Code" := Bin."Bin Type Code";
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    end;
                                                                  end else begin
                                                                    Dedicated := false;
                                                                    "Bin Ranking" := 0;
                                                                    "Bin Type Code" := '';
                                                                  end;
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              if "Action Type" = "Action Type"::Take then
                                                                BinCode := WMSMgt.BinContentLookUp2("Location Code","Item No.","Variant Code","Zone Code","Lot No.","Serial No.","Bin Code")
                                                              else
                                                                BinCode := WMSMgt.BinLookUp("Location Code","Item No.","Variant Code","Zone Code");

                                                              if BinCode <> '' then begin
                                                                VALIDATE("Bin Code",BinCode);
                                                                MODIFY;
                                                              end;
                                                            END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Bin Code }
    { 7301;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if xRec."Zone Code" <> "Zone Code" then begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                  if "Action Type" = "Action Type"::Place then
                                                                    DeleteBinContent(xRec);
                                                                  "Bin Code" := '';
                                                                  "Bin Ranking" := 0;
                                                                  "Bin Type Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 7305;   ;Action Type         ;Option        ;CaptionML=ENU=Action Type;
                                                   OptionCaptionML=ENU=" ,Take,Place";
                                                   OptionString=" ",Take,Place;
                                                   Editable=false }
    { 7306;   ;Whse. Document Type ;Option        ;CaptionML=ENU=Whse. Document Type;
                                                   OptionCaptionML=ENU=" ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet,,Assembly";
                                                   OptionString=" ",Receipt,Shipment,"Internal Put-away","Internal Pick",Production,"Movement Worksheet",,Assembly;
                                                   Editable=false }
    { 7307;   ;Whse. Document No.  ;Code20        ;TableRelation=IF ("Whse. Document Type"=CONST(Receipt)) "Posted Whse. Receipt Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Shipment)) "Warehouse Shipment Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Put-away")) "Whse. Internal Put-away Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Pick")) "Whse. Internal Pick Header"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Production)) "Production Order"."No." WHERE ("No."=FIELD("Whse. Document No."))
                                                                 ELSE IF ("Whse. Document Type"=CONST(Assembly)) "Assembly Header"."No." WHERE ("Document Type"=CONST(Order),
                                                                                                                                                "No."=FIELD("Whse. Document No."));
                                                   CaptionML=ENU=Whse. Document No.;
                                                   Editable=false }
    { 7308;   ;Whse. Document Line No.;Integer    ;TableRelation=IF ("Whse. Document Type"=CONST(Receipt)) "Posted Whse. Receipt Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                         "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                         ELSE IF ("Whse. Document Type"=CONST(Shipment)) "Warehouse Shipment Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                     "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                     ELSE IF ("Whse. Document Type"=CONST("Internal Put-away")) "Whse. Internal Put-away Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                                                                                                                                 "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                                                                                                                                 ELSE IF ("Whse. Document Type"=CONST("Internal Pick")) "Whse. Internal Pick Line"."Line No." WHERE ("No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "Line No."=FIELD("Whse. Document Line No."))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE IF ("Whse. Document Type"=CONST(Production)) "Prod. Order Line"."Line No." WHERE ("Prod. Order No."=FIELD("No."),
ine No."=FIELD("Line No."))
hse. Document Type"=CONST(Assembly)) "Assembly Line"."Line No." WHERE ("Document Type"=CONST(Order),
ocument No."=FIELD("Whse. Document No."),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              "Line No."=FIELD("Whse. Document Line No."));
                                                   CaptionML=ENU=Whse. Document Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 7309;   ;Bin Ranking         ;Integer       ;CaptionML=ENU=Bin Ranking;
                                                   Editable=false }
    { 7310;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 7311;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
    { 7312;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=ENU=Special Equipment Code }
    { 7313;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=ENU=Bin Type Code }
    { 7314;   ;Breakbulk No.       ;Integer       ;CaptionML=ENU=Breakbulk No.;
                                                   BlankZero=true }
    { 7315;   ;Original Breakbulk  ;Boolean       ;CaptionML=ENU=Original Breakbulk }
    { 7316;   ;Breakbulk           ;Boolean       ;CaptionML=ENU=Breakbulk }
    { 7317;   ;Cross-Dock Information;Option      ;CaptionML=ENU=Cross-Dock Information;
                                                   OptionCaptionML=ENU=" ,Cross-Dock Items,Some Items Cross-Docked";
                                                   OptionString=" ","Cross-Dock Items","Some Items Cross-Docked" }
    { 7318;   ;Dedicated           ;Boolean       ;CaptionML=ENU=Dedicated;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Activity Type","No.","Line No."        ;SumIndexFields="Qty. to Handle (Base)";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"No.","Line No.","Activity Type"         }
    {    ;"Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.","Unit of Measure Code","Action Type","Breakbulk No.","Original Breakbulk","Activity Type","Assemble to Order";
                                                   SumIndexFields="Qty. Outstanding","Qty. Outstanding (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Activity Type","No.","Sorting Sequence No.";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Shelf No."       ;MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Location Code","Source Document","Source No.","Action Type","Zone Code";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Due Date","Action Type","Bin Code";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Bin Code","Breakbulk No.","Action Type";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Bin Ranking","Breakbulk No.","Action Type";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Destination Type","Destination No.","Action Type","Bin Code";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Action Type","Bin Code";
                                                   MaintainSQLIndex=false }
    {    ;"Activity Type","No.","Item No.","Variant Code","Action Type","Bin Code";
                                                   MaintainSQLIndex=false }
    {    ;"Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.","Action Type","Unit of Measure Code","Original Breakbulk","Breakbulk No.","Lot No.","Serial No.","Assemble to Order";
                                                   SumIndexFields="Qty. Outstanding (Base)","Qty. Outstanding";
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","Bin Code","Location Code","Action Type","Variant Code","Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.","Original Breakbulk","Assemble to Order","ATO Component";
                                                   SumIndexFields=Quantity,"Qty. (Base)","Qty. Outstanding","Qty. Outstanding (Base)",Cubage,Weight;
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","Location Code","Activity Type","Bin Type Code","Unit of Measure Code","Variant Code","Breakbulk No.","Action Type","Lot No.","Serial No.","Assemble to Order";
                                                   SumIndexFields="Qty. Outstanding (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Bin Code","Location Code","Action Type","Breakbulk No.";
                                                   SumIndexFields=Cubage,Weight;
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    {    ;"Location Code","Activity Type"          }
    {    ;"Source No.","Source Line No.","Source Subline No.","Serial No.","Lot No.";
                                                   MaintainSQLIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.';
      Text003@1003 : TextConst 'ENU=must not be %1';
      Text004@1004 : TextConst 'ENU=If you delete %1 %2, %3 %4, %5 %6\the quantity to %7 will be imbalanced.\Do you still want to delete the %8?';
      Text005@1045 : TextConst 'ENU=You must not change the %1 in breakbulk lines.';
      Text006@1006 : TextConst 'ENU=The update was interrupted to respect the warning.';
      Location@1026 : Record Location;
      Item@1008 : Record Item;
      Bin@1025 : Record Bin;
      ItemUnitOfMeasure@1010 : Record "Item Unit of Measure";
      ItemTrackingCode@1020 : Record "Item Tracking Code";
      ItemTrackingMgt@1005 : Codeunit "Item Tracking Management";
      ItemTrackingDataCollection@1018 : Codeunit "Item Tracking Data Collection";
      WMSMgt@1019 : Codeunit "WMS Management";
      CreatePick@1032 : Codeunit "Create Pick";
      Text007@1007 : TextConst 'ENU=You must not split breakbulk lines.';
      Text008@1022 : TextConst 'ENU=Quantity available to pick is not enough to fill in all the lines.';
      Text009@1023 : TextConst 'ENU=If you delete the %1\you must recreate related Warehouse Worksheet Lines manually.\\Do you want to delete the %1?';
      Text011@1027 : TextConst 'ENU=You cannot enter the %1 of the %2 as %3.';
      Text012@1028 : TextConst 'ENU=The %1 %2 exceeds the quantity available to pick %3 of the %4.\Do you still want to enter this %5?';
      Text013@1029 : TextConst 'ENU=All related Warehouse Activity Lines are deleted.';
      ConfirmDeleteLine@1014 : Boolean;
      SNRequired@1009 : Boolean;
      LNRequired@1015 : Boolean;
      Text014@1030 : TextConst 'ENU=%1 %2 has already been reserved for another document.';
      Text015@1031 : TextConst 'ENU=The total available quantity has already been applied.';
      Text017@1000 : TextConst 'ENU=%1 %2 is not available in inventory, it has already been reserved for another document, or the quantity available is lower than the quantity to handle specified on the line.';
      UseBaseQty@1017 : Boolean;
      Text018@1024 : TextConst '@@@=Warehouse Activity Line already exists with Serial No. XXX;ENU=%1 already exists with %2 %3.';
      Text019@1011 : TextConst 'ENU=The %1 bin code must be different from the %2 bin code on location %3.';
      Text020@1012 : TextConst 'ENU=The %1 bin code must not be the Receipt Bin Code or the Shipment Bin Code that are set up on location %2.';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE AutofillQtyToHandle@10(VAR WhseActivLine@1000 : Record "Warehouse Activity Line");
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      with WhseActivLine do begin
        NotEnough := false;
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Handle","Qty. Outstanding");
            if "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" then
              VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
            MODIFY;

            if not NotEnough then
              if "Qty. to Handle" < "Qty. Outstanding" then
                NotEnough := true;
          until NEXT = 0;

        if NotEnough then
          MESSAGE(Text008);
      end;
    END;

    [External]
    PROCEDURE DeleteQtyToHandle@11(VAR WhseActivLine@1000 : Record "Warehouse Activity Line");
    BEGIN
      with WhseActivLine do begin
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Handle",0);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      if Item."No." = "Item No." then
        exit;

      Item.GET("Item No.");
      if Item."Item Tracking Code" <> '' then
        ItemTrackingCode.GET(Item."Item Tracking Code")
      else
        CLEAR(ItemTrackingCode);
    END;

    [External]
    PROCEDURE DeleteRelatedWhseActivLines@13(WhseActivLine@1003 : Record "Warehouse Activity Line";CalledFromHeader@1000 : Boolean);
    VAR
      WhseActivLine2@1002 : Record "Warehouse Activity Line";
      WhseActivLine3@1005 : Record "Warehouse Activity Line";
      WhseWkshLine@1001 : Record "Whse. Worksheet Line";
      Confirmed@1004 : Boolean;
    BEGIN
      with WhseActivLine do begin
        if ("Activity Type" in ["Activity Type"::"Invt. Put-away","Activity Type"::"Invt. Pick"]) and
           (not CalledFromHeader)
        then
          exit;

        WhseActivLine2.SETCURRENTKEY(
          "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        WhseActivLine2.SETRANGE("Activity Type","Activity Type");
        WhseActivLine2.SETRANGE("No.","No.");
        WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        if WhseActivLine2.FIND('-') then
          repeat
            WhseWkshLine.SETRANGE("Whse. Document Type",WhseActivLine2."Whse. Document Type");
            WhseWkshLine.SETRANGE("Whse. Document No.",WhseActivLine2."Whse. Document No.");
            WhseWkshLine.SETRANGE("Whse. Document Line No.",WhseActivLine2."Whse. Document Line No.");
            if not WhseWkshLine.ISEMPTY then begin
              if not CONFIRM(Text009,false,TABLECAPTION) then
                ERROR(Text006);

              Confirmed := true;
            end;
          until (WhseActivLine2.NEXT = 0) or Confirmed;

        if (not CalledFromHeader) and
           ("Action Type" <> "Action Type"::" ")
        then begin
          WhseActivLine2.SETRANGE("Whse. Document Type","Whse. Document Type");
          WhseActivLine2.SETRANGE("Whse. Document No.","Whse. Document No.");
          WhseActivLine2.SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
          WhseActivLine2.SETRANGE("Breakbulk No.","Breakbulk No.");
          WhseActivLine2.SETRANGE("Source No.","Source No.");
          WhseActivLine2.SETRANGE("Source Line No.","Source Line No.");
          WhseActivLine2.SETRANGE("Source Subline No.","Source Subline No.");
          WhseActivLine2.SETRANGE("Serial No.","Serial No.");
          WhseActivLine2.SETRANGE("Lot No.","Lot No.");
          if WhseActivLine2.FIND('-') then begin
            WhseActivLine3.COPY(WhseActivLine2);
            WhseActivLine3.SETRANGE("Action Type","Action Type");
            WhseActivLine3.SETFILTER("Line No.",'<>%1',"Line No.");
            if not WhseActivLine3.ISEMPTY then begin
              if not ConfirmDeleteLine then
                if not
                   CONFIRM(
                     STRSUBSTNO(
                       Text004,
                       FIELDCAPTION("Activity Type"),"Activity Type",FIELDCAPTION("No."),"No.",
                       FIELDCAPTION("Line No."),"Line No.","Action Type",TABLECAPTION),
                     false)
                then
                  ERROR(Text006);
              ConfirmDeleteLine := true;
              exit;
            end;
          end;
        end;
        if not CalledFromHeader then
          if "Action Type" <> "Action Type"::" " then
            WhseActivLine2.SETFILTER("Line No.",'<>%1',"Line No.")
          else
            WhseActivLine2.SETRANGE("Line No.","Line No.");
        if WhseActivLine2.FIND('-') then
          repeat
            WhseActivLine2.DELETE; // to ensure correct item tracking update
            DeleteBinContent(WhseActivLine2);
            UpdateRelatedItemTrkg(WhseActivLine2);
          until WhseActivLine2.NEXT = 0;
        if (not CalledFromHeader) and
           ("Action Type" <> "Action Type"::" ")
        then begin
          WhseActivLine2.RESET;
          WhseActivLine2.SETRANGE("Activity Type","Activity Type");
          WhseActivLine2.SETRANGE("No.","No.");
          if WhseActivLine2.FIND('-') then
            MESSAGE(Text013);
        end;
      end;
    END;

    [External]
    PROCEDURE CheckWhseDocLine@1();
    VAR
      PostedWhseRcptLine@1004 : Record "Posted Whse. Receipt Line";
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
      WhseInternalPutAwayLine@1005 : Record "Whse. Internal Put-away Line";
      WhseInternalPickLine@1002 : Record "Whse. Internal Pick Line";
      ProdOrderCompLine@1000 : Record "Prod. Order Component";
      AssemblyLine@1003 : Record "Assembly Line";
      WhseDocType2@1006 : Option;
    BEGIN
      if "Bin Code" <> '' then begin
        if "Breakbulk No." <> 0 then
          exit;
        if ("Activity Type" = "Activity Type"::Pick) and
           ("Action Type" = "Action Type"::Place)
        then begin
          if ("Whse. Document Type" = "Whse. Document Type"::Shipment) and "Assemble to Order" then
            WhseDocType2 := "Whse. Document Type"::Assembly
          else
            WhseDocType2 := "Whse. Document Type";
          case WhseDocType2 of
            "Whse. Document Type"::Shipment:
              begin
                WhseShptLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseShptLine."Bin Code");
              end;
            "Whse. Document Type"::"Internal Pick":
              begin
                WhseInternalPickLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseInternalPickLine."To Bin Code");
              end;
            "Whse. Document Type"::Production:
              begin
                GetLocation("Location Code");
                if Location."Directed Put-away and Pick" then begin
                  ProdOrderCompLine.GET("Source Subtype","Source No.","Source Line No.","Source Subline No.");
                  TESTFIELD("Bin Code",ProdOrderCompLine."Bin Code");
                end;
              end;
            "Whse. Document Type"::Assembly:
              begin
                GetLocation("Location Code");
                if Location."Directed Put-away and Pick" then begin
                  AssemblyLine.GET("Source Subtype","Source No.","Source Line No.");
                  TESTFIELD("Bin Code",AssemblyLine."Bin Code");
                end;
              end;
          end;
        end;
        if ("Activity Type" = "Activity Type"::"Put-away") and
           ("Action Type" = "Action Type"::Take)
        then
          case "Whse. Document Type" of
            "Whse. Document Type"::Receipt:
              begin
                PostedWhseRcptLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",PostedWhseRcptLine."Bin Code");
              end;
            "Whse. Document Type"::"Internal Put-away":
              begin
                WhseInternalPutAwayLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseInternalPutAwayLine."From Bin Code");
              end;
          end;
      end;
    END;

    [External]
    PROCEDURE CheckBinInSourceDoc@8();
    VAR
      ProdOrderComponentLine@1001 : Record "Prod. Order Component";
      AssemblyLine@1000 : Record "Assembly Line";
    BEGIN
      if not (("Activity Type" = "Activity Type"::"Invt. Movement") and
              ("Action Type" = "Action Type"::Place) and
              ("Source Type" <> 0))
      then
        exit;

      case "Source Type" of
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComponentLine.GET(
              "Source Subtype","Source No.",
              "Source Line No.","Source Subline No.");
            TESTFIELD("Bin Code",ProdOrderComponentLine."Bin Code");
          end;
        DATABASE::"Assembly Line":
          begin
            AssemblyLine.GET(
              "Source Subtype","Source No.",
              "Source Line No.");
            TESTFIELD("Bin Code",AssemblyLine."Bin Code");
          end;
      end;
    END;

    [External]
    PROCEDURE GetBin@19(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]) : Boolean;
    BEGIN
      if (Bin."Location Code" <> LocationCode) or
         (Bin.Code <> BinCode)
      then begin
        GetLocation(LocationCode);
        if not Location."Directed Put-away and Pick" then
          exit(true);
        if Bin.GET(LocationCode,BinCode) then begin
          CheckBin;
          exit(true);
        end;
        exit(false);
      end;

      CheckBin;
      exit(true);
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE CheckBin@17();
    BEGIN
      GetLocation("Location Code");
      Location.TESTFIELD("Directed Put-away and Pick");
      if Location."Adjustment Bin Code" <> '' then
        if "Bin Code" = Location."Adjustment Bin Code" then
          ERROR(
            Text011,
            Location.FIELDCAPTION("Adjustment Bin Code"),Location.TABLECAPTION,
            FIELDCAPTION("Bin Code"));
    END;

    LOCAL PROCEDURE CheckIncreaseCapacity@6(DeductLineCapacity@1003 : Boolean);
    VAR
      BinContent@1002 : Record "Bin Content";
      DeductCubage@1001 : Decimal;
      DeductWeight@1000 : Decimal;
    BEGIN
      if DeductLineCapacity then begin
        DeductCubage := xRec.Cubage;
        DeductWeight := xRec.Weight;
      end;

      if BinContent.GET("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code") then
        BinContent.CheckIncreaseBinContent(
          "Qty. to Handle (Base)","Qty. Outstanding (Base)",
          DeductCubage,DeductWeight,Cubage,Weight,false,false)
      else
        Bin.CheckIncreaseBin(
          "Bin Code","Item No.","Qty. to Handle",
          DeductCubage,DeductWeight,Cubage,Weight,false,false);
    END;

    [External]
    PROCEDURE SplitLine@27(VAR WhseActivLine@1000 : Record "Warehouse Activity Line");
    VAR
      NewWhseActivLine@1002 : Record "Warehouse Activity Line";
      LineSpacing@1001 : Integer;
    BEGIN
      WhseActivLine.TESTFIELD("Qty. to Handle");
      if WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Put-away" then begin
        if WhseActivLine."Breakbulk No." <> 0 then
          ERROR(Text007);
        WhseActivLine.TESTFIELD("Action Type",WhseActivLine."Action Type"::Place);
      end;
      if WhseActivLine."Qty. to Handle" = WhseActivLine."Qty. Outstanding" then
        WhseActivLine.FIELDERROR(
          "Qty. to Handle",STRSUBSTNO(Text003,WhseActivLine.FIELDCAPTION("Qty. Outstanding")));
      NewWhseActivLine := WhseActivLine;
      NewWhseActivLine.SETRANGE("No.",WhseActivLine."No.");
      if NewWhseActivLine.FIND('>') then
        LineSpacing :=
          (NewWhseActivLine."Line No." - WhseActivLine."Line No.") div 2
      else
        LineSpacing := 10000;

      NewWhseActivLine.RESET;
      NewWhseActivLine.INIT;
      NewWhseActivLine := WhseActivLine;
      NewWhseActivLine."Line No." := NewWhseActivLine."Line No." + LineSpacing;
      NewWhseActivLine.Quantity :=
        WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
      NewWhseActivLine."Qty. (Base)" :=
        WhseActivLine."Qty. Outstanding (Base)" - WhseActivLine."Qty. to Handle (Base)";
      NewWhseActivLine."Qty. Outstanding" := NewWhseActivLine.Quantity;
      NewWhseActivLine."Qty. Outstanding (Base)" := NewWhseActivLine."Qty. (Base)";
      NewWhseActivLine."Qty. to Handle" := NewWhseActivLine.Quantity;
      NewWhseActivLine."Qty. to Handle (Base)" := NewWhseActivLine."Qty. (Base)";
      NewWhseActivLine."Qty. Handled" := 0;
      NewWhseActivLine."Qty. Handled (Base)" := 0;
      GetLocation("Location Code");
      if Location."Directed Put-away and Pick" then begin
        WMSMgt.CalcCubageAndWeight(
          NewWhseActivLine."Item No.",NewWhseActivLine."Unit of Measure Code",
          NewWhseActivLine."Qty. to Handle",NewWhseActivLine.Cubage,NewWhseActivLine.Weight);
        if not
           (((NewWhseActivLine."Activity Type" = NewWhseActivLine."Activity Type"::"Put-away") and
             (NewWhseActivLine."Action Type" = NewWhseActivLine."Action Type"::Take)) or
            ((NewWhseActivLine."Activity Type" = NewWhseActivLine."Activity Type"::Pick) and
             (NewWhseActivLine."Action Type" = NewWhseActivLine."Action Type"::Place)) or
            ("Breakbulk No." <> 0))
        then begin
          NewWhseActivLine."Zone Code" := '';
          NewWhseActivLine."Bin Code" := '';
        end;
      end;
      NewWhseActivLine.INSERT;

      WhseActivLine.Quantity := WhseActivLine."Qty. to Handle" + WhseActivLine."Qty. Handled";
      WhseActivLine."Qty. (Base)" :=
        WhseActivLine."Qty. to Handle (Base)" + WhseActivLine."Qty. Handled (Base)";
      WhseActivLine."Qty. Outstanding" := WhseActivLine."Qty. to Handle";
      WhseActivLine."Qty. Outstanding (Base)" := WhseActivLine."Qty. to Handle (Base)";
      if Location."Directed Put-away and Pick" then
        WMSMgt.CalcCubageAndWeight(
          WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
          WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
      WhseActivLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateBreakbulkQtytoHandle@4();
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      WhseActivLine.SETCURRENTKEY(
        "Activity Type","No.","Whse. Document Type",
        "Whse. Document No.","Whse. Document Line No.");
      WhseActivLine.SETRANGE("Activity Type","Activity Type");
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETRANGE("Whse. Document Type","Whse. Document Type");
      WhseActivLine.SETRANGE("Whse. Document No.","Whse. Document No.");
      WhseActivLine.SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
      WhseActivLine.SETRANGE("Bin Code","Bin Code");
      WhseActivLine.SETRANGE("Lot No.","Lot No.");
      if "Original Breakbulk" then
        WhseActivLine.SETRANGE("Original Breakbulk",true)
      else
        WhseActivLine.SETRANGE("Breakbulk No.","Breakbulk No.");
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
      if WhseActivLine.FINDFIRST then begin
        WhseActivLine."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
        WhseActivLine."Qty. to Handle" := WhseActivLine.CalcQty("Qty. to Handle (Base)");
        WMSMgt.CalcCubageAndWeight(
          WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
          WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
        WhseActivLine.MODIFY;

        WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
        if "Original Breakbulk" then begin
          WhseActivLine.SETRANGE("Original Breakbulk");
          WhseActivLine.SETRANGE("Breakbulk No.",WhseActivLine."Breakbulk No.")
        end else begin
          WhseActivLine.SETRANGE("Breakbulk No.");
          WhseActivLine.SETRANGE("Original Breakbulk",true);
        end;
        if WhseActivLine.FINDFIRST then begin
          WhseActivLine."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
          WhseActivLine."Qty. to Handle" := WhseActivLine.CalcQty("Qty. to Handle (Base)");
          WMSMgt.CalcCubageAndWeight(
            WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
            WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
          WhseActivLine.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE ShowWhseDoc@22();
    VAR
      WhseShptHeader@1015 : Record "Warehouse Shipment Header";
      PostedWhseRcptHeader@1014 : Record "Posted Whse. Receipt Header";
      WhseIntPickHeader@1013 : Record "Whse. Internal Pick Header";
      WhseIntPutawayHeader@1012 : Record "Whse. Internal Put-away Header";
      RelProdOrder@1001 : Record "Production Order";
      AssemblyHeader@1002 : Record "Assembly Header";
      WhseShptCard@1011 : Page "Warehouse Shipment";
      PostedWhseRcptCard@1006 : Page "Posted Whse. Receipt";
      WhseIntPickCard@1004 : Page "Whse. Internal Pick";
      WhseIntPutawayCard@1000 : Page "Whse. Internal Put-away";
    BEGIN
      case "Whse. Document Type" of
        "Whse. Document Type"::Shipment:
          begin
            WhseShptHeader.SETRANGE("No.","Whse. Document No.");
            WhseShptCard.SETTABLEVIEW(WhseShptHeader);
            WhseShptCard.RUNMODAL;
          end;
        "Whse. Document Type"::Receipt:
          begin
            PostedWhseRcptHeader.SETRANGE("No.","Whse. Document No.");
            PostedWhseRcptCard.SETTABLEVIEW(PostedWhseRcptHeader);
            PostedWhseRcptCard.RUNMODAL;
          end;
        "Whse. Document Type"::"Internal Pick":
          begin
            WhseIntPickHeader.SETRANGE("No.","Whse. Document No.");
            WhseIntPickHeader.FINDFIRST;
            WhseIntPickCard.SETRECORD(WhseIntPickHeader);
            WhseIntPickCard.SETTABLEVIEW(WhseIntPickHeader);
            WhseIntPickCard.RUNMODAL;
          end;
        "Whse. Document Type"::"Internal Put-away":
          begin
            WhseIntPutawayHeader.SETRANGE("No.","Whse. Document No.");
            WhseIntPutawayHeader.FINDFIRST;
            WhseIntPutawayCard.SETRECORD(WhseIntPutawayHeader);
            WhseIntPutawayCard.SETTABLEVIEW(WhseIntPutawayHeader);
            WhseIntPutawayCard.RUNMODAL;
          end;
        "Whse. Document Type"::Production:
          begin
            RelProdOrder.SETRANGE(Status,"Source Subtype");
            RelProdOrder.SETRANGE("No.","Source No.");
            PAGE.RUNMODAL(PAGE::"Released Production Order",RelProdOrder);
          end;
        "Whse. Document Type"::Assembly:
          begin
            AssemblyHeader.SETRANGE("Document Type","Source Subtype");
            AssemblyHeader.SETRANGE("No.","Source No.");
            PAGE.RUNMODAL(PAGE::"Assembly Order",AssemblyHeader);
          end;
      end;
    END;

    [External]
    PROCEDURE ShowActivityDoc@23();
    VAR
      WhseActivHeader@1001 : Record "Warehouse Activity Header";
      WhsePickCard@1011 : Page "Warehouse Pick";
      WhsePutawayCard@1006 : Page "Warehouse Put-away";
      WhseMovCard@1004 : Page "Warehouse Movement";
      InvtPickCard@1000 : Page "Inventory Pick";
      InvtPutAwayCard@1002 : Page "Inventory Put-away";
    BEGIN
      WhseActivHeader.SETRANGE(Type,"Activity Type");
      WhseActivHeader.SETRANGE("No.","No.");
      case "Activity Type" of
        "Activity Type"::Pick:
          begin
            WhsePickCard.SETTABLEVIEW(WhseActivHeader);
            WhsePickCard.RUNMODAL;
          end;
        "Activity Type"::"Put-away":
          begin
            WhsePutawayCard.SETTABLEVIEW(WhseActivHeader);
            WhsePutawayCard.RUNMODAL;
          end;
        "Activity Type"::Movement:
          begin
            WhseMovCard.SETTABLEVIEW(WhseActivHeader);
            WhseMovCard.RUNMODAL;
          end;
        "Activity Type"::"Invt. Pick":
          begin
            InvtPickCard.SETTABLEVIEW(WhseActivHeader);
            InvtPickCard.RUNMODAL;
          end;
        "Activity Type"::"Invt. Put-away":
          begin
            InvtPutAwayCard.SETTABLEVIEW(WhseActivHeader);
            InvtPutAwayCard.RUNMODAL;
          end;
        "Activity Type"::"Invt. Movement":
          PAGE.RUNMODAL(PAGE::"Inventory Movement",WhseActivHeader);
      end;
    END;

    [External]
    PROCEDURE ChangeUOMCode@35(VAR WhseActivLine@1000 : Record "Warehouse Activity Line";VAR WhseActivLine2@1003 : Record "Warehouse Activity Line");
    BEGIN
      if "Breakbulk No." = 0 then
        if (Quantity <> "Qty. to Handle") or ("Qty. Handled" <> 0) then
          CreateNewUOMLine("Action Type",WhseActivLine,WhseActivLine2)
        else begin
          Rec := WhseActivLine2;
          GetLocation("Location Code");
          if Location."Directed Put-away and Pick" then
            WMSMgt.CalcCubageAndWeight(
              "Item No.","Unit of Measure Code","Qty. to Handle",Cubage,Weight);
          MODIFY;
        end;
    END;

    LOCAL PROCEDURE CreateNewUOMLine@34(ActType@1000 : ',Take,Place';WhseActivLine@1001 : Record "Warehouse Activity Line";WhseActivLine2@1002 : Record "Warehouse Activity Line");
    VAR
      NewWhseActivLine@1004 : Record "Warehouse Activity Line";
      LineSpacing@1003 : Integer;
    BEGIN
      NewWhseActivLine := WhseActivLine;
      if NewWhseActivLine.FIND('>') then
        LineSpacing :=
          (NewWhseActivLine."Line No." - WhseActivLine."Line No.") div 2
      else
        LineSpacing := 10000;

      NewWhseActivLine.RESET;
      NewWhseActivLine.INIT;
      NewWhseActivLine := WhseActivLine2;
      NewWhseActivLine."Line No." := NewWhseActivLine."Line No." + LineSpacing;
      GetLocation("Location Code");
      if Location."Directed Put-away and Pick" then
        WMSMgt.CalcCubageAndWeight(
          NewWhseActivLine."Item No.",NewWhseActivLine."Unit of Measure Code",
          NewWhseActivLine."Qty. to Handle",NewWhseActivLine.Cubage,NewWhseActivLine.Weight);
      NewWhseActivLine."Action Type" := ActType;
      NewWhseActivLine.VALIDATE("Qty. Handled",0);
      NewWhseActivLine.INSERT;

      WhseActivLine."Qty. Outstanding" :=
        WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
      WhseActivLine."Qty. Outstanding (Base)" :=
        WhseActivLine."Qty. Outstanding (Base)" - WhseActivLine."Qty. to Handle (Base)";
      WhseActivLine.Quantity :=
        WhseActivLine.Quantity - WhseActivLine."Qty. to Handle";
      WhseActivLine."Qty. (Base)" :=
        WhseActivLine."Qty. (Base)" - WhseActivLine."Qty. to Handle (Base)";
      WhseActivLine.VALIDATE("Qty. to Handle",WhseActivLine."Qty. Outstanding");
      if Location."Directed Put-away and Pick" then
        WMSMgt.CalcCubageAndWeight(
          WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
          WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
      WhseActivLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateRelatedItemTrkg@3(WhseActivLine@1000 : Record "Warehouse Activity Line");
    VAR
      WhseItemTrkgLine@1002 : Record "Whse. Item Tracking Line";
      WhseDocType2@1001 : Option;
    BEGIN
      if WhseActivLine.TrackingExists then begin
        WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
        WhseItemTrkgLine.SETRANGE("Serial No.",WhseActivLine."Serial No.");
        WhseItemTrkgLine.SETRANGE("Lot No.",WhseActivLine."Lot No.");
        if (WhseActivLine."Whse. Document Type" = WhseActivLine."Whse. Document Type"::Shipment) and
           WhseActivLine."Assemble to Order"
        then
          WhseDocType2 := WhseActivLine."Whse. Document Type"::Assembly
        else
          WhseDocType2 := WhseActivLine."Whse. Document Type";
        case WhseDocType2 of
          WhseActivLine."Whse. Document Type"::Shipment:
            begin
              WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
              WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
              WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
            end;
          WhseActivLine."Whse. Document Type"::"Internal Pick":
            begin
              WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Whse. Internal Pick Line");
              WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
              WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
            end;
          WhseActivLine."Whse. Document Type"::"Internal Put-away":
            begin
              WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Whse. Internal Put-away Line");
              WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
              WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
            end;
          WhseActivLine."Whse. Document Type"::Production:
            begin
              WhseItemTrkgLine.SETRANGE("Source Type",WhseActivLine."Source Type");
              WhseItemTrkgLine.SETRANGE("Source Subtype",WhseActivLine."Source Subtype");
              WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Source No.");
              WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",WhseActivLine."Source Line No.");
              WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Source Subline No.");
            end;
          WhseActivLine."Whse. Document Type"::Assembly:
            begin
              WhseItemTrkgLine.SETRANGE("Source Type",WhseActivLine."Source Type");
              WhseItemTrkgLine.SETRANGE("Source Subtype",WhseActivLine."Source Subtype");
              WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Source No.");
              WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Source Line No.");
            end;
        end;
        if WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement" then
          case WhseActivLine."Source Type" of
            DATABASE::"Prod. Order Component":
              begin
                WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                WhseItemTrkgLine.SETRANGE("Source Subtype",WhseActivLine."Source Subtype");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Source No.");
                WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",WhseActivLine."Source Line No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Source Subline No.");
              end;
            DATABASE::"Assembly Line":
              begin
                WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Assembly Line");
                WhseItemTrkgLine.SETRANGE("Source Subtype",WhseActivLine."Source Subtype");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Source No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Source Line No.");
              end;
          end;
        if WhseItemTrkgLine.FIND('-') then
          repeat
            ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine);
            UpdateReservation(WhseActivLine,true);
            if ((WhseActivLine."Whse. Document Type" in
                 [WhseActivLine."Whse. Document Type"::Production,WhseActivLine."Whse. Document Type"::Assembly]) or
                (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Movement")) and
               (WhseItemTrkgLine."Quantity Handled (Base)" = 0)
            then
              WhseItemTrkgLine.DELETE
            else
              WhseItemTrkgLine.MODIFY;
          until WhseItemTrkgLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE LookUpTrackingSummary@50(VAR WhseActivLine@1000 : Record "Warehouse Activity Line";SearchForSupply@1003 : Boolean;SignFactor@1004 : Integer;TrackingType@1002 : 'SerialNo,LotNo');
    VAR
      TempTrackingSpecification@1001 : TEMPORARY Record "Tracking Specification";
    BEGIN
      with WhseActivLine do begin
        InitTrackingSpecFromWhseActivLine(TempTrackingSpecification,WhseActivLine);
        TempTrackingSpecification."Quantity (Base)" := "Qty. Outstanding (Base)";
        TempTrackingSpecification."Qty. to Handle" := "Qty. Outstanding";
        TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. Outstanding (Base)";
        TempTrackingSpecification."Qty. to Invoice" := 0;
        TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
        TempTrackingSpecification."Quantity Handled (Base)" := 0;
        TempTrackingSpecification."Quantity Invoiced (Base)" := 0;

        GetItem;
        if not ItemTrackingDataCollection.CurrentDataSetMatches("Item No.","Variant Code","Location Code") then
          CLEAR(ItemTrackingDataCollection);
        ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode("Bin Code",ItemTrackingCode);
        ItemTrackingDataCollection.AssistEditTrackingNo(
          TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,"Qty. Outstanding");

        case TrackingType of
          TrackingType::SerialNo:
            if TempTrackingSpecification."Serial No." <> '' then begin
              VALIDATE("Serial No.",TempTrackingSpecification."Serial No.");
              VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
              VALIDATE("Expiration Date",TempTrackingSpecification."Expiration Date");
              MODIFY;
            end;
          TrackingType::LotNo:
            if TempTrackingSpecification."Lot No." <> '' then begin
              VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
              VALIDATE("Expiration Date",TempTrackingSpecification."Expiration Date");
              MODIFY;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckReservedItemTrkg@7(CheckType@1001 : '"Serial No.","Lot No."';ItemTrkgCode@1000 : Code[20]);
    VAR
      Item@1006 : Record Item;
      ReservEntry@1002 : Record "Reservation Entry";
      ReservEntry2@1003 : Record "Reservation Entry";
      TempWhseActivLine@1005 : TEMPORARY Record "Warehouse Activity Line";
      WhseAvailMgt@1004 : Codeunit "Warehouse Availability Mgt.";
      LineReservedQty@1007 : Decimal;
      AvailQtyFromOtherResvLines@1008 : Decimal;
    BEGIN
      if ("Activity Type" = "Activity Type"::"Invt. Pick") and "Assemble to Order" then
        exit;
      case CheckType of
        CheckType::"Serial No.":
          begin
            ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
            ReservEntry.SETRANGE("Item No.","Item No.");
            ReservEntry.SETRANGE("Variant Code","Variant Code");
            ReservEntry.SETRANGE("Location Code","Location Code");
            ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
            ReservEntry.SETRANGE("Serial No.",ItemTrkgCode);
            ReservEntry.SETRANGE(Positive,false);
            if ReservEntry.FIND('-') and
               ((ReservEntry."Source Type" <> "Source Type") or
                (ReservEntry."Source Subtype" <> "Source Subtype") or
                (ReservEntry."Source ID" <> "Source No.") or
                (((ReservEntry."Source Ref. No." <> "Source Line No.") and
                  (ReservEntry."Source Type" <> DATABASE::"Prod. Order Component")) or
                 (((ReservEntry."Source Prod. Order Line" <> "Source Line No.") or
                   (ReservEntry."Source Ref. No." <> "Source Subline No.")) and
                  (ReservEntry."Source Type" = DATABASE::"Prod. Order Component"))))
            then
              ERROR(Text014,FIELDCAPTION("Serial No."),ItemTrkgCode);
          end;
        CheckType::"Lot No.":
          begin
            Item.GET("Item No.");
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Lot No. Filter",ItemTrkgCode);
            Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
            LineReservedQty :=
              WhseAvailMgt.CalcLineReservedQtyOnInvt(
                "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",true,'',
                ItemTrkgCode,TempWhseActivLine);
            ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
            ReservEntry.SETRANGE("Item No.","Item No.");
            ReservEntry.SETRANGE("Variant Code","Variant Code");
            ReservEntry.SETRANGE("Location Code","Location Code");
            ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
            ReservEntry.SETRANGE("Lot No.",ItemTrkgCode);
            ReservEntry.SETRANGE(Positive,true);
            if ReservEntry.FIND('-') then
              repeat
                ReservEntry2.GET(ReservEntry."Entry No.",false);
                if ((ReservEntry2."Source Type" <> "Source Type") or
                    (ReservEntry2."Source Subtype" <> "Source Subtype") or
                    (ReservEntry2."Source ID" <> "Source No.") or
                    (((ReservEntry2."Source Ref. No." <> "Source Line No.") and
                      (ReservEntry2."Source Type" <> DATABASE::"Prod. Order Component")) or
                     (((ReservEntry2."Source Prod. Order Line" <> "Source Line No.") or
                       (ReservEntry2."Source Ref. No." <> "Source Subline No.")) and
                      (ReservEntry2."Source Type" = DATABASE::"Prod. Order Component")))) and
                   (ReservEntry2."Lot No." = '')
                then
                  AvailQtyFromOtherResvLines := AvailQtyFromOtherResvLines + ABS(ReservEntry2."Quantity (Base)");
              until ReservEntry.NEXT = 0;

            if (Item.Inventory - ABS(Item."Reserved Qty. on Inventory") +
                LineReservedQty + AvailQtyFromOtherResvLines +
                WhseAvailMgt.CalcReservQtyOnPicksShips("Location Code","Item No.","Variant Code",TempWhseActivLine)) <
               "Qty. to Handle (Base)"
            then
              ERROR(Text017,FIELDCAPTION("Lot No."),ItemTrkgCode);
          end;
      end;
    END;

    LOCAL PROCEDURE DeleteBinContent@21(WhseActivLine@1001 : Record "Warehouse Activity Line");
    VAR
      BinContent@1000 : Record "Bin Content";
    BEGIN
      with WhseActivLine do begin
        if "Action Type" <> "Action Type"::Place then
          exit;

        if BinContent.GET("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code") then
          if not BinContent.Fixed then begin
            BinContent.CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
            if (BinContent."Quantity (Base)" = 0) and
               (BinContent."Positive Adjmt. Qty. (Base)" = 0) and
               (BinContent."Put-away Quantity (Base)" - "Qty. Outstanding (Base)" <= 0)
            then
              BinContent.DELETE;
          end;
      end;
    END;

    LOCAL PROCEDURE UpdateReservation@90(TempWhseActivLine2@1000 : TEMPORARY Record "Warehouse Activity Line";Deletion@1002 : Boolean);
    VAR
      TempTrackingSpecification@1001 : TEMPORARY Record "Tracking Specification";
    BEGIN
      with TempWhseActivLine2 do begin
        if ("Action Type" <> "Action Type"::Take) and ("Breakbulk No." = 0) and
           ("Whse. Document Type" = "Whse. Document Type"::Shipment)
        then begin
          InitTrackingSpecFromWhseActivLine(TempTrackingSpecification,TempWhseActivLine2);
          if "Source Type" <> DATABASE::"Prod. Order Component" then begin
            TempTrackingSpecification."Source Prod. Order Line" := 0;
            TempTrackingSpecification."Source Ref. No." := "Source Line No.";
          end;
          TempTrackingSpecification."Qty. to Handle (Base)" := 0;
          TempTrackingSpecification."Entry No." := TempTrackingSpecification."Entry No." + 1;
          TempTrackingSpecification."Creation Date" := TODAY;
          TempTrackingSpecification."Warranty Date" := "Warranty Date";
          TempTrackingSpecification."Expiration Date" := "Expiration Date";
          TempTrackingSpecification.Correction := true;
          TempTrackingSpecification.INSERT;
        end;
        ItemTrackingMgt.SetPick("Activity Type" = "Activity Type"::Pick);
        ItemTrackingMgt.SynchronizeWhseItemTracking(TempTrackingSpecification,'',Deletion);
      end;
    END;

    [External]
    PROCEDURE TransferFromPickWkshLine@29(WhseWkshLine@1010 : Record "Whse. Worksheet Line");
    VAR
      WhseShptLine@1000 : Record "Warehouse Shipment Line";
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := WhseWkshLine."Source Type";
      "Source Subtype" := WhseWkshLine."Source Subtype";
      "Source No." := WhseWkshLine."Source No.";
      "Source Line No." := WhseWkshLine."Source Line No.";
      "Source Subline No." := WhseWkshLine."Source Subline No.";
      "Shelf No." := WhseWkshLine."Shelf No.";
      "Item No." := WhseWkshLine."Item No.";
      "Variant Code" := WhseWkshLine."Variant Code";
      Description := WhseWkshLine.Description;
      "Description 2" := WhseWkshLine."Description 2";
      "Due Date" := WhseWkshLine."Due Date";
      "Starting Date" := WORKDATE;
      "Destination Type" := WhseWkshLine."Destination Type";
      "Destination No." := WhseWkshLine."Destination No.";
      "Shipping Agent Code" := WhseWkshLine."Shipping Agent Code";
      "Shipping Agent Service Code" := WhseWkshLine."Shipping Agent Service Code";
      "Shipment Method Code" := WhseWkshLine."Shipment Method Code";
      "Shipping Advice" := WhseWkshLine."Shipping Advice";
      "Whse. Document Type" := WhseWkshLine."Whse. Document Type";
      "Whse. Document No." := WhseWkshLine."Whse. Document No.";
      "Whse. Document Line No." := WhseWkshLine."Whse. Document Line No.";

      if "Whse. Document Type" = "Whse. Document Type"::Shipment then begin
        WhseShptLine.GET("Whse. Document No.","Whse. Document Line No.");
        "Assemble to Order" := WhseShptLine."Assemble to Order";
      end;
    END;

    [External]
    PROCEDURE TransferFromShptLine@28(WhseShptLine@1005 : Record "Warehouse Shipment Line");
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := WhseShptLine."Source Type";
      "Source Subtype" := WhseShptLine."Source Subtype";
      "Source No." := WhseShptLine."Source No.";
      "Source Line No." := WhseShptLine."Source Line No.";
      "Shelf No." := WhseShptLine."Shelf No.";
      "Item No." := WhseShptLine."Item No.";
      "Variant Code" := WhseShptLine."Variant Code";
      Description := WhseShptLine.Description;
      "Description 2" := WhseShptLine."Description 2";
      "Due Date" := WhseShptLine."Due Date";
      "Starting Date" := WhseShptLine."Shipment Date";
      "Destination Type" := WhseShptLine."Destination Type";
      "Destination No." := WhseShptLine."Destination No.";
      "Shipping Advice" := WhseShptLine."Shipping Advice";
      "Whse. Document Type" := "Whse. Document Type"::Shipment;
      "Whse. Document No." := WhseShptLine."No.";
      "Whse. Document Line No." := WhseShptLine."Line No.";
    END;

    [External]
    PROCEDURE TransferFromATOShptLine@12(WhseShptLine@1005 : Record "Warehouse Shipment Line";AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
      WhseShptLine.TESTFIELD("Assemble to Order",true);
      TransferFromShptLine(WhseShptLine);
      TransferAllButWhseDocDetailsFromAssemblyLine(AssemblyLine);
    END;

    [External]
    PROCEDURE TransferFromIntPickLine@26(WhseInternalPickLine@1005 : Record "Whse. Internal Pick Line");
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Shelf No." := WhseInternalPickLine."Shelf No.";
      "Item No." := WhseInternalPickLine."Item No.";
      "Variant Code" := WhseInternalPickLine."Variant Code";
      Description := WhseInternalPickLine.Description;
      "Description 2" := WhseInternalPickLine."Description 2";
      "Due Date" := WhseInternalPickLine."Due Date";
      "Starting Date" := WORKDATE;
      "Source Type" := DATABASE::"Whse. Internal Pick Line";
      "Source No." := WhseInternalPickLine."No.";
      "Source Line No." := WhseInternalPickLine."Line No.";
      "Whse. Document Type" := "Whse. Document Type"::"Internal Pick";
      "Whse. Document No." := WhseInternalPickLine."No.";
      "Whse. Document Line No." := WhseInternalPickLine."Line No.";
    END;

    [External]
    PROCEDURE TransferFromCompLine@25(ProdOrderCompLine@1005 : Record "Prod. Order Component");
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := DATABASE::"Prod. Order Component";
      "Source Subtype" := ProdOrderCompLine.Status;
      "Source No." := ProdOrderCompLine."Prod. Order No.";
      "Source Line No." := ProdOrderCompLine."Prod. Order Line No.";
      "Source Subline No." := ProdOrderCompLine."Line No.";
      "Item No." := ProdOrderCompLine."Item No.";
      "Variant Code" := ProdOrderCompLine."Variant Code";
      Description := ProdOrderCompLine.Description;
      "Due Date" := ProdOrderCompLine."Due Date";
      "Whse. Document Type" := "Whse. Document Type"::Production;
      "Whse. Document No." := ProdOrderCompLine."Prod. Order No.";
      "Whse. Document Line No." := ProdOrderCompLine."Prod. Order Line No.";
    END;

    [External]
    PROCEDURE TransferFromAssemblyLine@24(AssemblyLine@1005 : Record "Assembly Line");
    BEGIN
      TransferAllButWhseDocDetailsFromAssemblyLine(AssemblyLine);
      "Whse. Document Type" := "Whse. Document Type"::Assembly;
      "Whse. Document No." := AssemblyLine."Document No.";
      "Whse. Document Line No." := AssemblyLine."Line No.";
    END;

    [External]
    PROCEDURE TransferFromMovWkshLine@20(WhseWkshLine@1010 : Record "Whse. Worksheet Line");
    BEGIN
      "Activity Type" := "Activity Type"::Movement;
      "Item No." := WhseWkshLine."Item No.";
      "Variant Code" := WhseWkshLine."Variant Code";
      "Starting Date" := WORKDATE;
      Description := WhseWkshLine.Description;
      "Description 2" := WhseWkshLine."Description 2";
      "Due Date" := WhseWkshLine."Due Date";
      Dedicated := Bin.Dedicated;
      "Zone Code" := Bin."Zone Code";
      "Bin Ranking" := Bin."Bin Ranking";
      "Bin Type Code" := Bin."Bin Type Code";
      "Whse. Document Type" := "Whse. Document Type"::"Movement Worksheet";
      "Whse. Document No." := WhseWkshLine.Name;
      "Whse. Document Line No." := WhseWkshLine."Line No.";
    END;

    LOCAL PROCEDURE TransferAllButWhseDocDetailsFromAssemblyLine@31(AssemblyLine@1000 : Record "Assembly Line");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := DATABASE::"Assembly Line";
      "Source Subtype" := AssemblyLine."Document Type";
      "Source No." := AssemblyLine."Document No.";
      "Source Line No." := AssemblyLine."Line No.";
      "Source Subline No." := 0;
      AssemblyLine.TESTFIELD(Type,AssemblyLine.Type::Item);
      "Item No." := AssemblyLine."No.";
      "Variant Code" := AssemblyLine."Variant Code";
      Description := AssemblyLine.Description;
      "Description 2" := AssemblyLine."Description 2";
      "Due Date" := AssemblyLine."Due Date";
      AsmHeader.GET(AssemblyLine."Document Type",AssemblyLine."Document No.");
      AsmHeader.CALCFIELDS("Assemble to Order");
      "Assemble to Order" := AsmHeader."Assemble to Order";
      "ATO Component" := true;
    END;

    LOCAL PROCEDURE CheckSNSpecificationExists@30();
    VAR
      WarehouseActivityLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      if "Serial No." <> '' then begin
        WarehouseActivityLine.SETCURRENTKEY("Item No.");
        WarehouseActivityLine.SETRANGE("Activity Type","Activity Type");
        WarehouseActivityLine.SETRANGE("Action Type","Action Type");
        WarehouseActivityLine.SETRANGE("No.","No.");
        WarehouseActivityLine.SETRANGE("Item No.","Item No.");
        WarehouseActivityLine.SETFILTER("Line No.",'<>%1',"Line No.");
        WarehouseActivityLine.SETRANGE("Serial No.","Serial No.");
        if not WarehouseActivityLine.ISEMPTY then
          ERROR(Text018,TABLECAPTION,FIELDCAPTION("Serial No."),"Serial No.");
      end;
    END;

    LOCAL PROCEDURE InitTrackingSpecFromWhseActivLine@37(VAR TrackingSpecification@1001 : Record "Tracking Specification";VAR WhseActivityLine@1000 : Record "Warehouse Activity Line");
    BEGIN
      with WhseActivityLine do begin
        TrackingSpecification.INIT;
        TrackingSpecification.SetSource(
          "Source Type","Source Subtype","Source No.","Source Line No.",'',"Source Subline No.");
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Serial No." := "Serial No.";
        TrackingSpecification."Lot No." := "Lot No.";
        TrackingSpecification."Expiration Date" := "Expiration Date";
        TrackingSpecification."Bin Code" := "Bin Code";
        TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
      end;
    END;

    LOCAL PROCEDURE FindLotNoBySerialNo@32();
    VAR
      TempTrackingSpecification@1000 : TEMPORARY Record "Tracking Specification";
    BEGIN
      InitTrackingSpecFromWhseActivLine(TempTrackingSpecification,Rec);

      VALIDATE("Lot No.",ItemTrackingDataCollection.FindLotNoBySN(TempTrackingSpecification));
    END;

    LOCAL PROCEDURE CheckInvalidBinCode@33();
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
      Location@1002 : Record Location;
      Direction@1001 : Text[1];
    BEGIN
      Location.GET("Location Code");
      if ("Action Type" = 0) or (not Location."Bin Mandatory") then
        exit;
      WhseActivLine := Rec;
      WhseActivLine.SETRANGE("Activity Type","Activity Type");
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
      WhseActivLine.SETFILTER("Action Type",'<>%1',"Action Type");
      if "Action Type" = "Action Type"::Take then
        Direction := '>'
      else
        Direction := '<';
      if WhseActivLine.FIND(Direction) then begin
        if ("Location Code" = WhseActivLine."Location Code") and
           ("Bin Code" = WhseActivLine."Bin Code") and
           ("Unit of Measure Code" = WhseActivLine."Unit of Measure Code")
        then
          ERROR(Text019,FORMAT("Action Type"),FORMAT(WhseActivLine."Action Type"),Location.Code);

        if (("Activity Type" = "Activity Type"::"Put-away") and ("Action Type" = "Action Type"::Place) and
            Location.IsBWReceive or ("Activity Type" = "Activity Type"::Pick) and
            ("Action Type" = "Action Type"::Take) and Location.IsBWShip) and Location.IsBinBWReceiveOrShip("Bin Code")
        then
          ERROR(Text020,FORMAT("Action Type"),Location.Code);
      end;
    END;

    LOCAL PROCEDURE RegisteredWhseActLineIsEmpty@45() : Boolean;
    VAR
      RegisteredWhseActivityLine@1000 : Record "Registered Whse. Activity Line";
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type","Activity Type"::Pick);
      RegisteredWhseActivityLine.SETRANGE("Source No.","Source No.");
      RegisteredWhseActivityLine.SETRANGE("Source Line No.","Source Line No.");
      RegisteredWhseActivityLine.SETRANGE("Source Type","Source Type");
      RegisteredWhseActivityLine.SETRANGE("Source Subtype","Source Subtype");
      RegisteredWhseActivityLine.SETRANGE("Lot No.","Lot No.");
      RegisteredWhseActivityLine.SETRANGE("Serial No.","Serial No.");
      exit(RegisteredWhseActivityLine.ISEMPTY);
    END;

    [External]
    PROCEDURE ShowItemAvailabilityByPeriod@36();
    VAR
      ItemAvailFormsMgt@1000 : Codeunit "Item Availability Forms Mgt";
    BEGIN
      ItemAvailFormsMgt.ShowItemAvailFromWhseActivLine(Rec,ItemAvailFormsMgt.ByPeriod);
    END;

    [External]
    PROCEDURE ShowItemAvailabilityByVariant@40();
    VAR
      ItemAvailFormsMgt@1000 : Codeunit "Item Availability Forms Mgt";
    BEGIN
      ItemAvailFormsMgt.ShowItemAvailFromWhseActivLine(Rec,ItemAvailFormsMgt.ByVariant);
    END;

    [External]
    PROCEDURE ShowItemAvailabilityByLocation@41();
    VAR
      ItemAvailFormsMgt@1000 : Codeunit "Item Availability Forms Mgt";
    BEGIN
      ItemAvailFormsMgt.ShowItemAvailFromWhseActivLine(Rec,ItemAvailFormsMgt.ByLocation);
    END;

    [External]
    PROCEDURE ShowItemAvailabilityByEvent@38();
    VAR
      ItemAvailFormsMgt@1000 : Codeunit "Item Availability Forms Mgt";
    BEGIN
      ItemAvailFormsMgt.ShowItemAvailFromWhseActivLine(Rec,ItemAvailFormsMgt.ByEvent);
    END;

    [External]
    PROCEDURE ActivityExists@16(SourceType@1004 : Integer;SourceSubtype@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SourceSublineNo@1000 : Integer;ActivityType@1005 : Option) : Boolean;
    BEGIN
      if ActivityType <> 0 then
        SETRANGE("Activity Type",ActivityType);
      SetSourceFilter(SourceType,SourceSubtype,SourceNo,SourceLineNo,SourceSublineNo,false);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE TrackingExists@39() : Boolean;
    BEGIN
      exit(("Lot No." <> '') or ("Serial No." <> ''));
    END;

    [External]
    PROCEDURE SetSource@9(SourceType@1000 : Integer;SourceSubtype@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer);
    BEGIN
      "Source Type" := SourceType;
      "Source Subtype" := SourceSubtype;
      "Source No." := SourceNo;
      "Source Line No." := SourceLineNo;
      "Source Subline No." := SourceSublineNo;
    END;

    [External]
    PROCEDURE SetSourceFilter@42(SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SourceSubLineNo@1000 : Integer;SetKey@1005 : Boolean);
    BEGIN
      if SetKey then
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubType >= 0 then
        SETRANGE("Source Subtype",SourceSubType);
      SETRANGE("Source No.",SourceNo);
      SETRANGE("Source Line No.",SourceLineNo);
      if SourceSubLineNo >= 0 then
        SETRANGE("Source Subline No.",SourceSubLineNo);
    END;

    [External]
    PROCEDURE ClearSourceFilter@46();
    BEGIN
      SETRANGE("Source Type");
      SETRANGE("Source Subtype");
      SETRANGE("Source No.");
      SETRANGE("Source Line No.");
      SETRANGE("Source Subline No.");
    END;

    [External]
    PROCEDURE ClearTracking@47();
    BEGIN
      "Serial No." := '';
      "Lot No." := '';
    END;

    [External]
    PROCEDURE ClearTrackingFilter@44();
    BEGIN
      SETRANGE("Serial No.");
      SETRANGE("Lot No.");
    END;

    [External]
    PROCEDURE CopyTrackingFromSpec@62(TrackingSpecification@1000 : Record "Tracking Specification");
    BEGIN
      "Serial No." := TrackingSpecification."Serial No.";
      "Lot No." := TrackingSpecification."Lot No.";
      "Expiration Date" := TrackingSpecification."Expiration Date";
    END;

    [External]
    PROCEDURE SetTrackingFilter@43(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      SETRANGE("Serial No.",SerialNo);
      SETRANGE("Lot No.",LotNo);
    END;

    BEGIN
    END.
  }
}

