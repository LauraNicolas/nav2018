OBJECT Page 1042 Copy Job Planning Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Job Planning Lines;
    PageType=StandardDialog;
    OnQueryClosePage=BEGIN
                       if CloseAction in [ACTION::OK,ACTION::LookupOK] then begin
                         ValidateUserInput;
                         CopyJob.SetCopyQuantity(CopyQuantity);
                         CopyJob.SetCopyJobPlanningLineType(PlanningLineType);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJobPlanningLines(SourceJobTask,TargetJobTask);
                         MESSAGE(Text001);
                       end
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                Name=Copy from;
                CaptionML=ENU=Copy from }

    { 11  ;2   ;Field     ;
                Name=SourceJobNo;
                CaptionML=ENU=Job No.;
                ToolTipML=ENU=Specifies the job number.;
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=VAR
                             SourceJob@1001 : Record Job;
                           BEGIN
                             if (SourceJobNo <> '') and not SourceJob.GET(SourceJobNo) then
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);

                             SourceJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=SourceJobTaskNo;
                CaptionML=ENU=Job Task No.;
                ToolTipML=ENU=Specifies the job task number.;
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record "Job Task";
                           BEGIN
                             if (SourceJobTaskNo <> '') and not JobTask.GET(SourceJobNo,SourceJobTaskNo) then
                               ERROR(Text003,JobTask.TABLECAPTION,SourceJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record "Job Task";
                         BEGIN
                           if SourceJobNo <> '' then begin
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             if PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK then
                               SourceJobTaskNo := JobTask."Job Task No.";
                           end;
                         END;
                          }

    { 2   ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=ENU=Incl. Planning Line Type;
                ToolTipML=ENU=Specifies how copy planning lines. Budget+Billable: All planning lines are copied. Budget: Only lines of type Budget or type Both Budget and Billable are copied. Billable: Only lines of type Billable or type Both Budget and Billable are copied.;
                OptionCaptionML=ENU=Budget+Billable,Budget,Billable;
                ApplicationArea=#Jobs;
                SourceExpr=PlanningLineType }

    { 8   ;2   ;Field     ;
                Name=FromDate;
                CaptionML=ENU=Starting Date;
                ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                ApplicationArea=#Jobs;
                SourceExpr=FromDate }

    { 4   ;2   ;Field     ;
                Name=ToDate;
                CaptionML=ENU=Ending Date;
                ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                ApplicationArea=#Jobs;
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                Name=Copy to;
                CaptionML=ENU=Copy to }

    { 3   ;2   ;Field     ;
                Name=TargetJobNo;
                CaptionML=ENU=Job No.;
                ToolTipML=ENU=Specifies the job number.;
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobNo;
                TableRelation=Job;
                OnValidate=VAR
                             TargetJob@1001 : Record Job;
                           BEGIN
                             if (TargetJobNo <> '') and not TargetJob.GET(TargetJobNo) then
                               ERROR(Text003,TargetJob.TABLECAPTION,TargetJobNo);

                             TargetJobTaskNo := '';
                           END;
                            }

    { 1   ;2   ;Field     ;
                Name=TargetJobTaskNo;
                CaptionML=ENU=Job Task No.;
                ToolTipML=ENU=Specifies the job task number.;
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record "Job Task";
                           BEGIN
                             if (TargetJobTaskNo <> '') and not JobTask.GET(TargetJobNo,TargetJobTaskNo) then
                               ERROR(Text003,JobTask.TABLECAPTION,TargetJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record "Job Task";
                         BEGIN
                           if TargetJobNo <> '' then begin
                             JobTask.SETRANGE("Job No.",TargetJobNo);
                             if PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK then
                               TargetJobTaskNo := JobTask."Job Task No.";
                           end;
                         END;
                          }

    { 6   ;1   ;Group     ;
                Name=Apply;
                CaptionML=ENU=Apply }

    { 26  ;2   ;Field     ;
                Name=CopyQuantity;
                CaptionML=ENU=Copy Quantity;
                ToolTipML=ENU=Specifies that the quantities will be copied to the new job.;
                ApplicationArea=#Jobs;
                SourceExpr=CopyQuantity }

  }
  CODE
  {
    VAR
      SourceJobTask@1003 : Record "Job Task";
      TargetJobTask@1000 : Record "Job Task";
      CopyJob@1012 : Codeunit "Copy Job";
      SourceJobNo@1009 : Code[20];
      SourceJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      TargetJobTaskNo@1001 : Code[20];
      Text001@1016 : TextConst 'ENU=The job was successfully copied.';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.';
      PlanningLineType@1005 : '"Budget+Billable",Budget,Billable';
      FromDate@1007 : Date;
      ToDate@1006 : Date;
      CopyQuantity@1011 : Boolean;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.';
      Text005@1002 : TextConst 'ENU=Provide a valid target %1.';

    LOCAL PROCEDURE ValidateUserInput@1();
    VAR
      Job@1000 : Record Job;
    BEGIN
      if SourceJobNo = '' then
        ERROR(Text004,Job.TABLECAPTION);
      if (SourceJobTaskNo = '') or not SourceJobTask.GET(SourceJobNo,SourceJobTaskNo) then
        ERROR(Text004,SourceJobTask.TABLECAPTION);

      if TargetJobNo = '' then
        ERROR(Text005,Job.TABLECAPTION);
      if (TargetJobTaskNo = '') or not TargetJobTask.GET(TargetJobNo,TargetJobTaskNo) then
        ERROR(Text005,TargetJobTask.TABLECAPTION);
    END;

    [External]
    PROCEDURE SetFromJobTask@3(SourceJobTask2@1000 : Record "Job Task");
    BEGIN
      SourceJobNo := SourceJobTask2."Job No.";
      SourceJobTask := SourceJobTask2;
      SourceJobTaskNo := SourceJobTask2."Job Task No.";
    END;

    [External]
    PROCEDURE SetToJobTask@4(TargetJobTask2@1000 : Record "Job Task");
    BEGIN
      TargetJobNo := TargetJobTask2."Job No.";
      TargetJobTask := TargetJobTask2;
      TargetJobTaskNo := TargetJobTask2."Job Task No.";
    END;

    BEGIN
    END.
  }
}

