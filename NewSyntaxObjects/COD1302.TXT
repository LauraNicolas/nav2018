OBJECT Codeunit 1302 Customer Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FiscalYearTotals@1003 : Boolean;

    [External]
    PROCEDURE AvgDaysToPay@2(CustNo@1000 : Code[20]) : Decimal;
    VAR
      CustLedgEntry@1015 : Record "Cust. Ledger Entry";
      CustLedgEntry2@1014 : Record "Cust. Ledger Entry";
      AvgDaysToPay@1006 : Decimal;
      TotalDaysToPay@1005 : Decimal;
      TotalNoOfInv@1004 : Integer;
    BEGIN
      with CustLedgEntry do begin
        AvgDaysToPay := 0;
        SETCURRENTKEY("Customer No.","Posting Date");
        SetFilterForPostedDocs(CustLedgEntry,CustNo,"Document Type"::Invoice);
        SETRANGE(Open,false);

        if FINDSET then
          repeat
            case true of
              "Closed at Date" > "Posting Date":
                UpdateDaysToPay("Closed at Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              "Closed by Entry No." <> 0:
                begin
                  if CustLedgEntry2.GET("Closed by Entry No.") then
                    UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
                end;
              else begin
                CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                CustLedgEntry2.SETRANGE("Closed by Entry No.","Entry No.");
                if CustLedgEntry2.FINDFIRST then
                  UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              end;
            end;
          until NEXT = 0;
      end;

      if TotalNoOfInv <> 0 then
        AvgDaysToPay := TotalDaysToPay / TotalNoOfInv;

      exit(AvgDaysToPay);
    END;

    LOCAL PROCEDURE UpdateDaysToPay@3(NoOfDays@1000 : Integer;VAR TotalDaysToPay@1002 : Decimal;VAR TotalNoOfInv@1001 : Integer);
    BEGIN
      TotalDaysToPay += NoOfDays;
      TotalNoOfInv += 1;
    END;

    [External]
    PROCEDURE CalculateStatistic@1(Customer@1022 : Record Customer;VAR AdjmtCostLCY@1017 : Decimal;VAR AdjCustProfit@1015 : Decimal;VAR AdjProfitPct@1014 : Decimal;VAR CustInvDiscAmountLCY@1011 : Decimal;VAR CustPaymentsLCY@1004 : Decimal;VAR CustSalesLCY@1002 : Decimal;VAR CustProfit@1001 : Decimal);
    VAR
      CostCalcuMgt@1023 : Codeunit "Cost Calculation Management";
    BEGIN
      with Customer do begin
        SETFILTER("Date Filter",GetCurrentYearFilter);

        CALCFIELDS("Sales (LCY)","Profit (LCY)","Inv. Discounts (LCY)","Payments (LCY)");

        // Costs (LCY):
        CustSalesLCY := "Sales (LCY)";
        CustProfit := "Profit (LCY)" + CostCalcuMgt.NonInvtblCostAmt(Customer);
        AdjmtCostLCY := CustSalesLCY - CustProfit + CostCalcuMgt.CalcCustActualCostLCY(Customer);
        AdjCustProfit := CustProfit + AdjmtCostLCY;

        // Profit %
        if "Sales (LCY)" <> 0 then
          AdjProfitPct := ROUND(100 * AdjCustProfit / "Sales (LCY)",0.1)
        else
          AdjProfitPct := 0;

        CustInvDiscAmountLCY := "Inv. Discounts (LCY)";

        CustPaymentsLCY := "Payments (LCY)";
      end;
    END;

    [External]
    PROCEDURE CalcAmountsOnPostedInvoices@4(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record "Cust. Ledger Entry";
    BEGIN
      exit(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::Invoice));
    END;

    [External]
    PROCEDURE CalcAmountsOnPostedCrMemos@5(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record "Cust. Ledger Entry";
    BEGIN
      exit(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::"Credit Memo"));
    END;

    [External]
    PROCEDURE CalcAmountsOnOrders@33(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record "Sales Header";
    BEGIN
      exit(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Order));
    END;

    [External]
    PROCEDURE CalcAmountsOnQuotes@34(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record "Sales Header";
    BEGIN
      exit(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Quote));
    END;

    LOCAL PROCEDURE CalcAmountsOnPostedDocs@22(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer;DocType@1001 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record "Cust. Ledger Entry";
    BEGIN
      with CustLedgEntry do begin
        SetFilterForPostedDocs(CustLedgEntry,CustNo,DocType);

        RecCount := COUNT;

        CALCSUMS("Sales (LCY)");
        exit("Sales (LCY)");
      end;
    END;

    [External]
    PROCEDURE CalculateAmountsWithVATOnUnpostedDocuments@16(CustNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1002 : Record "Sales Line";
      Result@1001 : Decimal;
      DocumentType@1003 : Integer;
    BEGIN
      DocumentType := -1; // All supported Documents Type
      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType,true);
      with SalesLine do begin
        if FINDSET then
          repeat
            case "Document Type" of
              "Document Type"::Invoice:
                Result += "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                Result -= "Outstanding Amount (LCY)";
            end;
          until NEXT = 0;
      end;

      exit(Result);
    END;

    [External]
    PROCEDURE CalculateAmountsOnUnpostedInvoices@8(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record "Sales Line";
    BEGIN
      exit(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::Invoice));
    END;

    [External]
    PROCEDURE CalculateAmountsOnUnpostedCrMemos@9(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record "Sales Line";
    BEGIN
      exit(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::"Credit Memo"));
    END;

    LOCAL PROCEDURE CalculateAmountsOnUnpostedDocs@11(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer;DocumentType@1003 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record "Sales Line";
      Result@1005 : Decimal;
      VAT@1006 : Decimal;
      OutstandingAmount@1007 : Decimal;
      OldDocumentNo@1008 : Code[20];
    BEGIN
      RecCount := 0;
      Result := 0;

      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType,false);
      with SalesLine do begin
        if FINDSET then
          repeat
            case "Document Type" of
              "Document Type"::Invoice,
              "Document Type"::Order,
              "Document Type"::Quote:
                OutstandingAmount := "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                OutstandingAmount := -"Outstanding Amount (LCY)";
            end;
            VAT := 100 + "VAT %";
            Result += OutstandingAmount * 100 / VAT;

            if OldDocumentNo <> "Document No." then begin
              OldDocumentNo := "Document No.";
              RecCount += 1;
            end;
          until NEXT = 0;
      end;

      exit(ROUND(Result));
    END;

    [External]
    PROCEDURE DrillDownOnPostedInvoices@20(CustNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
    BEGIN
      with SalesInvoiceHeader do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Posted Sales Invoices",SalesInvoiceHeader);
      end;
    END;

    [External]
    PROCEDURE DrillDownOnPostedCrMemo@6(CustNo@1001 : Code[20]);
    VAR
      SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";
    BEGIN
      with SalesCrMemoHeader do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader);
      end;
    END;

    [External]
    PROCEDURE DrillDownOnOrders@19(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      with SalesHeader do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Order);

        PAGE.RUN(PAGE::"Sales Order List",SalesHeader);
      end;
    END;

    [External]
    PROCEDURE DrillDownOnQuotes@23(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      with SalesHeader do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Quote);

        PAGE.RUN(PAGE::"Sales Quotes",SalesHeader);
      end;
    END;

    [External]
    PROCEDURE DrillDownMoneyOwedExpected@17(CustNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,-1);
      PAGE.RUN(PAGE::"Sales List",SalesHeader)
    END;

    [External]
    PROCEDURE DrillDownOnUnpostedInvoices@15(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::Invoice);
      PAGE.RUN(PAGE::"Sales Invoice List",SalesHeader)
    END;

    [External]
    PROCEDURE DrillDownOnUnpostedCrMemos@14(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::"Credit Memo");
      PAGE.RUN(PAGE::"Sales Credit Memos",SalesHeader)
    END;

    LOCAL PROCEDURE SetFilterForUnpostedDocs@7(VAR SalesHeader@1003 : Record "Sales Header";CustNo@1002 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      with SalesHeader do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        if DocumentType = -1 then
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        else
          SETRANGE("Document Type",DocumentType);
      end;
    END;

    LOCAL PROCEDURE SetFilterForUnpostedLines@12(VAR SalesLine@1003 : Record "Sales Line";CustNo@1002 : Code[20];DocumentType@1000 : Integer;Posted@1001 : Boolean);
    BEGIN
      with SalesLine do begin
        SETRANGE("Bill-to Customer No.",CustNo);
        if Posted then
          SETFILTER("Posting Date",GetCurrentYearFilter);

        if DocumentType = -1 then
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        else
          SETRANGE("Document Type",DocumentType);
      end;
    END;

    LOCAL PROCEDURE SetFilterForPostedDocs@27(VAR CustLedgEntry@1002 : Record "Cust. Ledger Entry";CustNo@1001 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      with CustLedgEntry do begin
        SETRANGE("Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);
        SETRANGE("Document Type",DocumentType);
      end;
    END;

    [External]
    PROCEDURE GetCurrentYearFilter@10() : Text[30];
    VAR
      DateFilterCalc@1002 : Codeunit "DateFilter-Calc";
      CustDateFilter@1001 : Text[30];
      CustDateName@1000 : Text[30];
      SkipSetFilter@1003 : Boolean;
    BEGIN
      SkipSettingFilter(SkipSetFilter);
      if SkipSetFilter then
        exit(CustDateFilter);

      if FiscalYearTotals then
        DateFilterCalc.CreateAccountingPeriodFilter(CustDateFilter,CustDateName,WORKDATE,0)
      else
        DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);

      exit(CustDateFilter);
    END;

    [External]
    PROCEDURE GetTotalSales@24(CustNo@1013 : Code[20]) : Decimal;
    VAR
      Totals@1006 : Decimal;
      AmountOnPostedInvoices@1007 : Decimal;
      AmountOnPostedCrMemos@1008 : Decimal;
      AmountOnOutstandingInvoices@1011 : Decimal;
      AmountOnOutstandingCrMemos@1012 : Decimal;
      NoPostedInvoices@1000 : Integer;
      NoPostedCrMemos@1001 : Integer;
      NoOutstandingInvoices@1002 : Integer;
      NoOutstandingCrMemos@1003 : Integer;
    BEGIN
      AmountOnPostedInvoices := CalcAmountsOnPostedInvoices(CustNo,NoPostedInvoices);
      AmountOnPostedCrMemos := CalcAmountsOnPostedCrMemos(CustNo,NoPostedCrMemos);

      AmountOnOutstandingInvoices := CalculateAmountsOnUnpostedInvoices(CustNo,NoOutstandingInvoices);
      AmountOnOutstandingCrMemos := CalculateAmountsOnUnpostedCrMemos(CustNo,NoOutstandingCrMemos);

      Totals := AmountOnPostedInvoices + AmountOnPostedCrMemos + AmountOnOutstandingInvoices + AmountOnOutstandingCrMemos;
      exit(Totals)
    END;

    [External]
    PROCEDURE GetYTDSales@25(CustNo@1000 : Code[20]) : Decimal;
    VAR
      Totals@1001 : Decimal;
    BEGIN
      FiscalYearTotals := true;
      Totals := GetTotalSales(CustNo);
      FiscalYearTotals := false;
      exit(Totals);
    END;

    PROCEDURE CalculateShipToBillToOptions@13(VAR ShipToOptions@1002 : '"Default (Sell-to Address)","Alternate Shipping Address","Custom Address"';VAR BillToOptions@1001 : '"Default (Customer)","Another Customer"';SalesHeader@1000 : Record "Sales Header");
    VAR
      ShipToNameEqualsSellToName@1003 : Boolean;
    BEGIN
      with SalesHeader do begin
        ShipToNameEqualsSellToName :=
          ("Ship-to Name" = "Sell-to Customer Name") and ("Ship-to Name 2" = "Sell-to Customer Name 2");

        case true of
          ("Ship-to Code" = '') and ShipToNameEqualsSellToName and ShipToAddressEqualsSellToAddress:
            ShipToOptions := ShipToOptions::"Default (Sell-to Address)";
          ("Ship-to Code" = '') and
          (not ShipToNameEqualsSellToName or not ShipToAddressEqualsSellToAddress):
            ShipToOptions := ShipToOptions::"Custom Address";
          "Ship-to Code" <> '':
            ShipToOptions := ShipToOptions::"Alternate Shipping Address";
        end;

        if "Bill-to Customer No." = "Sell-to Customer No." then
          BillToOptions := BillToOptions::"Default (Customer)"
        else
          BillToOptions := BillToOptions::"Another Customer";
      end;
    END;

    [Integration]
    LOCAL PROCEDURE SkipSettingFilter@18(VAR SkipSetFilter@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

