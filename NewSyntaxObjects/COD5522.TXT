OBJECT Codeunit 5522 Order Planning Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempUnplannedDemand@1007 : Record "Unplanned Demand";
      ProdOrderComp@1002 : Record "Prod. Order Component";
      CompanyInfo@1008 : Record "Company Information";
      DemandType@1000 : '" ",Production,Sales,Service,Jobs,Assembly';
      HasGotCompanyInfo@1006 : Boolean;
      Text000@1011 : TextConst 'ENU=Generating Lines to Plan @1@@@@@@@';
      Text001@1015 : TextConst 'ENU=Item Substitution is not possible for the active line.';
      Text003@1010 : TextConst 'ENU=You cannot use this function because the active line has no %1.';
      Text004@1016 : TextConst 'ENU=All items are available and no planning lines are created.';
      DelReqLine@1017 : Boolean;

    [Internal]
    PROCEDURE GetOrdersToPlan@1(VAR ReqLine@1000 : Record "Requisition Line");
    BEGIN
      PrepareRequisitionRecord(ReqLine);
      CODEUNIT.RUN(CODEUNIT::"Get Unplanned Demand",TempUnplannedDemand);
      TransformUnplannedDemandToRequisitionLines(ReqLine);
    END;

    [Internal]
    PROCEDURE PlanSpecificSalesOrder@32(VAR ReqLine@1000 : Record "Requisition Line";SalesOrderNo@1002 : Code[20]);
    VAR
      SalesHeader@1004 : Record "Sales Header";
      GetUnplannedDemand@1001 : Codeunit "Get Unplanned Demand";
    BEGIN
      SetSalesOrder;
      PrepareRequisitionRecord(ReqLine);

      GetUnplannedDemand.SetIncludeMetDemandForSpecificSalesOrderNo(SalesOrderNo);
      GetUnplannedDemand.RUN(TempUnplannedDemand);

      TransformUnplannedDemandToRequisitionLines(ReqLine);

      ReqLine.SETRANGE("Demand Order No.",SalesOrderNo);
      ReqLine.SETRANGE("Demand Subtype",SalesHeader."Document Type"::Order);
    END;

    LOCAL PROCEDURE PrepareRequisitionRecord@23(VAR RequisitionLine@1000 : Record "Requisition Line");
    BEGIN
      with TempUnplannedDemand do begin
        RequisitionLine.LOCKTABLE;
        RequisitionLine.SETCURRENTKEY("User ID","Worksheet Template Name");
        RequisitionLine.SETRANGE("User ID",USERID);
        RequisitionLine.SETRANGE("Worksheet Template Name",'');
        RequisitionLine.DELETEALL(true);

        RequisitionLine.RESET;
        RequisitionLine.SETRANGE("Worksheet Template Name",'');
        if RequisitionLine.FINDLAST then;
      end;
    END;

    LOCAL PROCEDURE TransformUnplannedDemandToRequisitionLines@24(VAR RequisitionLine@1000 : Record "Requisition Line");
    VAR
      Window@1004 : Dialog;
      WindowUpdateDateTime@1003 : DateTime;
      i@1002 : Integer;
      NoOfRecords@1001 : Integer;
    BEGIN
      with TempUnplannedDemand do begin
        SETCURRENTKEY("Demand Date",Level);
        SETRANGE(Level,0);

        i := 0;
        Window.OPEN(Text000);
        WindowUpdateDateTime := CURRENTDATETIME;
        NoOfRecords := COUNT;

        if FIND('-') then
          repeat
            i := i + 1;
            if CURRENTDATETIME - WindowUpdateDateTime >= 300 then begin
              WindowUpdateDateTime := CURRENTDATETIME;
              Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
            end;

            InsertDemandLines(RequisitionLine);
            DELETE;
          until NEXT = 0;

        Window.CLOSE;

        RequisitionLine.RESET;
        RequisitionLine.SETCURRENTKEY("User ID","Worksheet Template Name");
        RequisitionLine.SETRANGE("User ID",USERID);
        if not RequisitionLine.FINDFIRST then
          ERROR(Text004);
        COMMIT;
      end;
    END;

    LOCAL PROCEDURE InsertDemandLines@9(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      UnplannedDemand@1002 : Record "Unplanned Demand";
      Item@1003 : Record Item;
      SalesLine@1005 : Record "Sales Line";
      ProdOrderComp@1006 : Record "Prod. Order Component";
      ServLine@1008 : Record "Service Line";
      AsmLine@1009 : Record "Assembly Line";
      PlanningLineMgt@1004 : Codeunit "Planning Line Management";
      ItemTrackingMgt@1007 : Codeunit "Item Tracking Management";
      HeaderExists@1001 : Boolean;
    BEGIN
      with TempUnplannedDemand do begin
        UnplannedDemand.COPY(TempUnplannedDemand);

        RESET;
        SETRECFILTER;
        SETRANGE("Demand Line No.");
        SETRANGE("Demand Ref. No.");
        SETRANGE(Level,1);
        FIND('-');
        HeaderExists := false;

        repeat
          if DemandType in ["Demand Type",DemandType::" "] then begin
            if not HeaderExists then
              InsertDemandHeader(UnplannedDemand,ReqLine);
            HeaderExists := true;

            ReqLine.TransferFromUnplannedDemand(TempUnplannedDemand);
            ReqLine.SetSupplyQty("Quantity (Base)","Needed Qty. (Base)");
            ReqLine.SetSupplyDates("Demand Date");
            ReqLine.INSERT;

            if Item."No." <> "Item No." then
              Item.GET("Item No.");
            if Item."Item Tracking Code" <> '' then
              case "Demand Type" of
                "Demand Type"::Sales:
                  begin
                    SalesLine.GET("Demand SubType","Demand Order No.","Demand Line No.");
                    ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,ReqLine.RowID1,true);
                  end;
                "Demand Type"::Production:
                  begin
                    ProdOrderComp.GET("Demand SubType","Demand Order No.","Demand Line No.","Demand Ref. No.");
                    ItemTrackingMgt.CopyItemTracking(ProdOrderComp.RowID1,ReqLine.RowID1,true);
                  end;
                "Demand Type"::Service:
                  begin
                    ServLine.GET("Demand SubType","Demand Order No.","Demand Line No.");
                    ItemTrackingMgt.CopyItemTracking(ServLine.RowID1,ReqLine.RowID1,true);
                  end;
                "Demand Type"::Assembly:
                  begin
                    AsmLine.GET("Demand SubType","Demand Order No.","Demand Line No.");
                    ItemTrackingMgt.CopyItemTracking(AsmLine.RowID1,ReqLine.RowID1,true);
                  end;
              end;
            if ReqLine.Quantity > 0 then
              PlanningLineMgt.Calculate(ReqLine,1,true,true,0);
            ReqLine.FIND('+');
          end;
          DELETE;
        until NEXT = 0;

        COPY(UnplannedDemand);
      end;
    END;

    LOCAL PROCEDURE InsertDemandHeader@19(UnplannedDemand@1001 : Record "Unplanned Demand";VAR ReqLine@1000 : Record "Requisition Line");
    BEGIN
      with ReqLine do begin
        INIT;
        case UnplannedDemand."Demand Type" of
          UnplannedDemand."Demand Type"::Sales:
            "Demand Type" := DATABASE::"Sales Line";
          UnplannedDemand."Demand Type"::Production:
            "Demand Type" := DATABASE::"Prod. Order Component";
          UnplannedDemand."Demand Type"::Service:
            "Demand Type" := DATABASE::"Service Line";
          UnplannedDemand."Demand Type"::Job:
            "Demand Type" := DATABASE::"Job Planning Line";
          UnplannedDemand."Demand Type"::Assembly:
            "Demand Type" := DATABASE::"Assembly Line";
        end;
        "Demand Subtype" := UnplannedDemand."Demand SubType";
        "Demand Order No." := UnplannedDemand."Demand Order No.";
        Status := UnplannedDemand.Status;
        "Demand Date" := UnplannedDemand."Demand Date";
        Description := UnplannedDemand.Description;

        Level := 0;
        "Replenishment System" := "Replenishment System"::" ";
        "Line No." := "Line No." + 10000;
        "User ID" := USERID;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE DeleteLine@8() : Boolean;
    BEGIN
      exit(DelReqLine);
    END;

    [External]
    PROCEDURE CalcNeededQty@15(AvailableQty@1000 : Decimal;DemandQty@1001 : Decimal) : Decimal;
    BEGIN
      case true of
        AvailableQty >= DemandQty:
          exit(0);
        AvailableQty < 0:
          exit(DemandQty);
        else
          exit(DemandQty - AvailableQty);
      end;
    END;

    [External]
    PROCEDURE CalcATPQty@12(ItemNo@1009 : Text[250];VariantFilter@1008 : Text[250];LocationFilter@1007 : Text[250];DemandDate@1006 : Date) : Decimal;
    VAR
      Item@1004 : Record Item;
      AvailableToPromise@1005 : Codeunit "Available to Promise";
      GrossRequirement@1000 : Decimal;
      ScheduledRcpt@1001 : Decimal;
      ODF@1003 : DateFormula;
    BEGIN
      if ItemNo = '' then
        exit(0);

      Item.GET(ItemNo);
      Item.SETRANGE("Variant Filter",VariantFilter);
      Item.SETRANGE("Location Filter",LocationFilter);
      Item.SETRANGE("Date Filter",0D,DemandDate);
      Item.SETRANGE("Drop Shipment Filter",false);
      if DemandDate = 0D then
        DemandDate := WORKDATE;

      exit(AvailableToPromise.QtyAvailabletoPromise(Item,GrossRequirement,ScheduledRcpt,DemandDate,0,ODF))
    END;

    [External]
    PROCEDURE CalcATPEarliestDate@5(ItemNo@1007 : Text[250];VariantFilter@1006 : Text[250];LocationFilter@1002 : Text[250];DemandDate@1000 : Date;Quantity@1008 : Decimal) : Date;
    VAR
      Item@1004 : Record Item;
      AvailableToPromise@1005 : Codeunit "Available to Promise";
      AvailableQty@1003 : Decimal;
    BEGIN
      if ItemNo = '' then
        exit(0D);

      GetCompanyInfo;
      if DemandDate = 0D then
        DemandDate := WORKDATE;

      Item.GET(ItemNo);
      Item.SETRANGE("Variant Filter",VariantFilter);
      Item.SETRANGE("Location Filter",LocationFilter);
      Item.SETRANGE("Drop Shipment Filter",false);
      exit(
        AvailableToPromise.EarliestAvailabilityDate(
          Item,Quantity,DemandDate,Quantity,DemandDate,AvailableQty,
          CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc."));
    END;

    LOCAL PROCEDURE GetCompanyInfo@11();
    BEGIN
      if HasGotCompanyInfo then
        exit;
      HasGotCompanyInfo := CompanyInfo.GET;
    END;

    [External]
    PROCEDURE SetSalesOrder@2();
    BEGIN
      DemandType := DemandType::Sales;
    END;

    [External]
    PROCEDURE SetProdOrder@3();
    BEGIN
      DemandType := DemandType::Production;
    END;

    [External]
    PROCEDURE SetServOrder@7();
    BEGIN
      DemandType := DemandType::Service;
    END;

    [External]
    PROCEDURE SetJobOrder@13();
    BEGIN
      DemandType := DemandType::Jobs;
    END;

    [External]
    PROCEDURE SetAsmOrder@14();
    BEGIN
      DemandType := DemandType::Assembly;
    END;

    [Internal]
    PROCEDURE InsertAltSupplySubstitution@16(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      TempItemSub@1007 : TEMPORARY Record "Item Substitution";
      ReqLine2@1008 : TEMPORARY Record "Requisition Line";
      ItemSubst@1006 : Codeunit "Item Subst.";
      PlanningLineMgt@1004 : Codeunit "Planning Line Management";
      UnAvailableQtyBase@1002 : Decimal;
    BEGIN
      if not SubstitutionPossible(ReqLine) then
        ERROR(Text001);

      CLEAR(ItemSubst);
      if not ItemSubst.PrepareSubstList(
           ReqLine."No.",
           ReqLine."Variant Code",
           ReqLine."Location Code",
           ReqLine."Due Date",
           true)
      then
        ItemSubst.ErrorMessage(ReqLine."No.",ReqLine."Variant Code");

      ItemSubst.GetTempItemSubstList(TempItemSub);

      TempItemSub.RESET;
      TempItemSub.SETRANGE("Variant Code",ReqLine."Variant Code");
      TempItemSub.SETRANGE("Location Filter",ReqLine."Location Code");
      if TempItemSub.FINDFIRST then;
      if PAGE.RUNMODAL(PAGE::"Item Substitution Entries",TempItemSub) = ACTION::LookupOK then begin
        // Update sourceline
        with ReqLine do
          ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ItemSubst.UpdateComponent(
          ProdOrderComp,TempItemSub."Substitute No.",TempItemSub."Substitute Variant Code");
        ProdOrderComp.MODIFY(true);
        ProdOrderComp.AutoReserve;

        if TempItemSub."Quantity Avail. on Shpt. Date" >= ReqLine."Needed Quantity (Base)" then begin
          ReqLine.DELETE(true);
          DelReqLine := true;
        end else begin
          ReqLine2 := ReqLine; // Save Original Line

          UnAvailableQtyBase :=
            CalcNeededQty(
              TempItemSub."Quantity Avail. on Shpt. Date",ReqLine2."Demand Quantity (Base)");

          // Update Req.Line
          ReqLine."Worksheet Template Name" := ReqLine2."Worksheet Template Name";
          ReqLine."Journal Batch Name" := ReqLine2."Journal Batch Name";
          ReqLine."Line No." := ReqLine2."Line No.";
          ReqLine."Location Code" := ProdOrderComp."Location Code";
          ReqLine."Bin Code" := ProdOrderComp."Bin Code";
          ReqLine.VALIDATE("No.",ProdOrderComp."Item No.");
          ReqLine.VALIDATE("Variant Code",ProdOrderComp."Variant Code");
          ReqLine."Unit Of Measure Code (Demand)" := ProdOrderComp."Unit of Measure Code";
          ReqLine."Qty. per UOM (Demand)" := ProdOrderComp."Qty. per Unit of Measure";
          ReqLine.SetSupplyQty(ReqLine2."Demand Quantity (Base)",UnAvailableQtyBase);
          ReqLine.SetSupplyDates(ReqLine2."Demand Date");
          ReqLine."Original Item No." := ReqLine2."No.";
          ReqLine."Original Variant Code" := ReqLine2."Variant Code";
          ReqLine.MODIFY;
          PlanningLineMgt.Calculate(ReqLine,1,true,true,0);
        end;
      end;
    END;

    [External]
    PROCEDURE SubstitutionPossible@10(ReqLine@1000 : Record "Requisition Line") : Boolean;
    VAR
      Item@1001 : Record Item;
    BEGIN
      if (ReqLine.Type <> ReqLine.Type::Item) or
         (ReqLine."Demand Type" <> DATABASE::"Prod. Order Component")
      then
        exit(false);

      if not Item.GET(ReqLine."No.") then
        exit(false);

      if Item."Manufacturing Policy" = Item."Manufacturing Policy"::"Make-to-Order" then
        exit(false);

      ReqLine.CALCFIELDS("Reserved Qty. (Base)");
      if ReqLine."Reserved Qty. (Base)" <> 0 then
        exit(false);

      if ProdOrderComp.GET(
           ReqLine."Demand Subtype",
           ReqLine."Demand Order No.",
           ReqLine."Demand Line No.",
           ReqLine."Demand Ref. No.")
      then
        if ProdOrderComp."Supplied-by Line No." <> 0 then
          exit(false);

      Item.CALCFIELDS("Substitutes Exist");
      exit(Item."Substitutes Exist");
    END;

    [External]
    PROCEDURE InsertAltSupplyLocation@6(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      Location@1001 : Record Location;
      TempReqLine@1003 : TEMPORARY Record "Requisition Line";
      AvailableQtyBase@1005 : Decimal;
      NextLineNo@1004 : Integer;
    BEGIN
      ReqLine.TESTFIELD(Type,ReqLine.Type::Item);
      if ReqLine."Location Code" = '' then
        ERROR(Text003,ReqLine.FIELDCAPTION("Location Code"));

      NextLineNo := 0;

      Location.RESET;
      Location.SETRANGE("Use As In-Transit",false);
      Location.SETFILTER(Code,'<>%1',ReqLine."Location Code");
      if Location.FIND('-') then
        repeat
          AvailableQtyBase :=
            CalcATPQty(
              ReqLine."No.",ReqLine."Variant Code",Location.Code,ReqLine."Demand Date");

          if AvailableQtyBase > 0 then
            AvailableQtyBase -= PromisedTransferQty(ReqLine,Location.Code);

          if AvailableQtyBase > 0 then begin
            NextLineNo += 10000;
            TempReqLine := ReqLine;
            TempReqLine."Line No." += NextLineNo;
            TempReqLine."Transfer-from Code" := Location.Code;

            if TempReqLine."Qty. per Unit of Measure" = 0 then
              TempReqLine."Qty. per Unit of Measure" := 1;

            TempReqLine."Demand Qty. Available" :=
              ROUND(AvailableQtyBase / TempReqLine."Qty. per Unit of Measure",0.00001);
            TempReqLine.Quantity := ROUND(AvailableQtyBase / TempReqLine."Qty. per Unit of Measure",0.00001);
            TempReqLine."Quantity (Base)" := AvailableQtyBase;

            TempReqLine.INSERT;
          end;
        until Location.NEXT = 0;

      TempReqLine.SETRANGE("No.",TempReqLine."No.");
      if PAGE.RUNMODAL(PAGE::"Get Alternative Supply",TempReqLine) = ACTION::LookupOK then begin
        ReqLine.VALIDATE("Replenishment System",ReqLine."Replenishment System"::Transfer);
        ReqLine.VALIDATE("Supply From",TempReqLine."Transfer-from Code");
        ReqLine.CalcStartingDate('');
        if TempReqLine."Quantity (Base)" < ReqLine."Quantity (Base)" then
          ReqLine.VALIDATE(
            Quantity,ROUND(TempReqLine."Quantity (Base)" / ReqLine."Qty. per Unit of Measure" ,0.00001));
      end;
    END;

    LOCAL PROCEDURE PromisedTransferQty@20(ReqLine@1001 : Record "Requisition Line";LocationCode@1002 : Code[10]) OrderQtyBase : Decimal;
    VAR
      ReqLine2@1000 : Record "Requisition Line";
    BEGIN
      with ReqLine do begin
        ReqLine2.RESET;
        ReqLine2.SETCURRENTKEY("Worksheet Template Name","Journal Batch Name",Type,"No.","Due Date");
        ReqLine2.SETRANGE("Worksheet Template Name",'');
        ReqLine2.SETRANGE("Journal Batch Name",'');
        ReqLine2.SETRANGE(Type,ReqLine2.Type::Item);
        ReqLine2.SETRANGE("No.","No.");
        ReqLine2.SETRANGE("User ID",USERID);
        ReqLine2.SETRANGE("Variant Code","Variant Code");
        ReqLine2.SETRANGE("Replenishment System",ReqLine2."Replenishment System"::Transfer);
        ReqLine2.SETRANGE("Supply From",LocationCode);
        ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
        if ReqLine2.FIND('-') then
          repeat
            OrderQtyBase += ReqLine2."Quantity (Base)";
          until ReqLine2.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE AvailQtyOnOtherLocations@4(ReqLine@1001 : Record "Requisition Line") : Decimal;
    VAR
      Location@1002 : Record Location;
      AvailableQtyBase@1000 : Decimal;
      AvailableQtyBaseTotal@1003 : Decimal;
    BEGIN
      if ReqLine."Location Code" = '' then
        exit(0);

      AvailableQtyBaseTotal := 0;
      Location.RESET;
      Location.SETRANGE("Use As In-Transit",false);
      if ReqLine."Location Code" <> '' then
        Location.SETFILTER(Code,'<>%1',ReqLine."Location Code")
      else
        Location.SETFILTER(Code,'<>''''');
      if Location.FIND('-') then
        repeat
          AvailableQtyBase :=
            CalcATPQty(
              ReqLine."No.",ReqLine."Variant Code",Location.Code,ReqLine."Demand Date");

          if AvailableQtyBase > 0 then
            AvailableQtyBase -= PromisedTransferQty(ReqLine,Location.Code);
          if AvailableQtyBase > 0 then
            AvailableQtyBaseTotal += AvailableQtyBase;
        until Location.NEXT = 0;

      exit(AvailableQtyBaseTotal);
    END;

    BEGIN
    END.
  }
}

