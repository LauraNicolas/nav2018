OBJECT Page 1327 Adjust Inventory
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Adjust Inventory;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable=Location;
    DataCaptionExpr=Item."No." + ' - ' + Item.Description;
    PageType=StandardDialog;
    SourceTableTemporary=true;
    OnOpenPage=VAR
                 ApplicationAreaSetup@1000 : Record "Application Area Setup";
                 LineNo@1004 : Integer;
               BEGIN
                 GetLocationsIncludingUnspecifiedLocation(not ApplicationAreaSetup.IsLocationEnabled,true);
                 LocationCount := COUNT;

                 FINDSET;
                 repeat
                   TempItemJournalLine.INIT;
                   Item.SETFILTER("Location Filter",'%1',Code);
                   Item.CALCFIELDS(Inventory);
                   TempItemJournalLine."Line No." := LineNo;
                   TempItemJournalLine.Quantity := Item.Inventory;
                   TempItemJournalLine."Item No." := Item."No.";
                   TempItemJournalLine."Location Code" := Code;
                   TempItemJournalLine.INSERT;
                   LineNo := LineNo + 1;
                 until NEXT = 0;

                 FINDFIRST;
               END;

    OnAfterGetRecord=BEGIN
                       Item.SETFILTER("Location Filter",'%1',Code);
                       Item.CALCFIELDS(Inventory);
                       TempItemJournalLine.SETRANGE("Location Code",Code);
                       TempItemJournalLine.FINDFIRST;
                     END;

    OnQueryClosePage=VAR
                       AdjustItemInventory@1001 : Codeunit "Adjust Item Inventory";
                       ErrorText@1002 : Text;
                     BEGIN
                       if CloseAction in [ACTION::OK,ACTION::LookupOK] then begin
                         TempItemJournalLine.RESET;
                         ErrorText := AdjustItemInventory.PostMultipleAdjustmentsToItemLedger(TempItemJournalLine);
                         if ErrorText <> '' then
                           MESSAGE(ErrorText);
                       end;
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                Visible=LocationCount <= 1;
                GroupType=Group }

    { 8   ;2   ;Field     ;
                Name=BaseUnitofMeasureNoLocation;
                CaptionML=ENU=Base Unit of Measure;
                ToolTipML=ENU=Specifies the unit in which the item is held in inventory. The base unit of measure also serves as the conversion basis for alternate units of measure.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Item."Base Unit of Measure";
                Editable=FALSE }

    { 9   ;2   ;Field     ;
                Name=CurrentInventoryNoLocation;
                CaptionML=ENU=Current Inventory;
                ToolTipML=ENU=Specifies how many units, such as pieces, boxes, or cans, of the item are in inventory.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Item.Inventory;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                Name=NewInventoryNoLocation;
                CaptionML=ENU=New Inventory;
                ToolTipML=ENU=Specifies the inventory quantity that will be recorded for the item when you choose the OK button.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TempItemJournalLine.Quantity;
                OnValidate=BEGIN
                             TempItemJournalLine.MODIFY;
                           END;
                            }

    { 5   ;1   ;Group     ;
                Name=Group5;
                Visible=LocationCount > 1;
                GroupType=Repeater }

    { 7   ;2   ;Field     ;
                Name=Code;
                ApplicationArea=#Location;
                SourceExpr=Code;
                Editable=FALSE;
                ImplicitType=Code10 }

    { 6   ;2   ;Field     ;
                Name=Name;
                ApplicationArea=#Location;
                SourceExpr=Name;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 4   ;2   ;Field     ;
                Name=NewInventory;
                CaptionML=ENU=New Inventory;
                ToolTipML=ENU=Specifies the inventory quantity that will be recorded for the item when you choose the OK button.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TempItemJournalLine.Quantity;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             TempItemJournalLine.MODIFY;
                           END;
                            }

    { 3   ;2   ;Field     ;
                Name=BaseUnitofMeasure;
                CaptionML=ENU=Base Unit of Measure;
                ToolTipML=ENU=Specifies the unit in which the item is held in inventory. The base unit of measure also serves as the conversion basis for alternate units of measure.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Item."Base Unit of Measure";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Item@1000 : Record Item;
      TempItemJournalLine@1001 : TEMPORARY Record "Item Journal Line";
      LocationCount@1002 : Integer;

    PROCEDURE SetItem@3(ItemNo@1000 : Code[20]);
    BEGIN
      Item.GET(ItemNo);
    END;

    BEGIN
    END.
  }
}

