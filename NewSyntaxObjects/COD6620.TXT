OBJECT Codeunit 6620 Copy Document Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1034 : TextConst 'ENU=Please enter a Document No.';
      Text001@1033 : TextConst 'ENU=%1 %2 cannot be copied onto itself.';
      DeleteLinesQst@1032 : TextConst '@@@="%1=Document type, e.g. Invoice. %2=Document No., e.g. 001";ENU=The existing lines for %1 %2 will be deleted.\\Do you want to continue?';
      Text004@1030 : TextConst 'ENU=The document line(s) with a G/L account where direct posting is not allowed have not been copied to the new document by the Copy Document batch job.';
      Text006@1028 : TextConst 'ENU=NOTE: A Payment Discount was Granted by %1 %2.';
      Text007@1027 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Credit Memo,Posted Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt';
      Currency@1024 : Record Currency;
      Item@1023 : Record Item;
      AsmHeader@1049 : Record "Assembly Header";
      PostedAsmHeader@1051 : Record "Posted Assembly Header";
      TempAsmHeader@1052 : TEMPORARY Record "Assembly Header";
      TempAsmLine@1053 : TEMPORARY Record "Assembly Line";
      TempSalesInvLine@1056 : TEMPORARY Record "Sales Invoice Line";
      LanguageManagement@1031 : Codeunit LanguageManagement;
      CustCheckCreditLimit@1006 : Codeunit "Cust-Check Cr. Limit";
      ItemCheckAvail@1005 : Codeunit "Item-Check Avail.";
      TransferExtendedText@1015 : Codeunit "Transfer Extended Text";
      TransferOldExtLines@1004 : Codeunit "Transfer Old Ext. Text Lines";
      ItemTrackingDocMgt@1060 : Codeunit "Item Tracking Doc. Management";
      DeferralUtilities@1063 : Codeunit "Deferral Utilities";
      Window@1043 : Dialog;
      WindowUpdateDateTime@1044 : DateTime;
      InsertCancellationLine@1066 : Boolean;
      SalesDocType@1002 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Shipment","Posted Invoice","Posted Return Receipt","Posted Credit Memo"';
      PurchDocType@1003 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Receipt","Posted Invoice","Posted Return Shipment","Posted Credit Memo"';
      ServDocType@1016 : 'Quote,Contract';
      QtyToAsmToOrder@1055 : Decimal;
      QtyToAsmToOrderBase@1057 : Decimal;
      IncludeHeader@1001 : Boolean;
      RecalculateLines@1000 : Boolean;
      MoveNegLines@1009 : Boolean;
      Text008@1010 : TextConst 'ENU=There are no negative sales lines to move.';
      Text009@1007 : TextConst 'ENU=NOTE: A Payment Discount was Received by %1 %2.';
      Text010@1008 : TextConst 'ENU=There are no negative purchase lines to move.';
      CreateToHeader@1011 : Boolean;
      Text011@1012 : TextConst 'ENU=Please enter a Vendor No.';
      HideDialog@1013 : Boolean;
      Text012@1014 : TextConst 'ENU=There are no sales lines to copy.';
      Text013@1018 : TextConst 'ENU=Shipment No.,Invoice No.,Return Receipt No.,Credit Memo No.';
      Text014@1022 : TextConst 'ENU=Receipt No.,Invoice No.,Return Shipment No.,Credit Memo No.';
      Text015@1019 : TextConst 'ENU=%1 %2:';
      Text016@1026 : TextConst 'ENU="Inv. No. ,Shpt. No. ,Cr. Memo No. ,Rtrn. Rcpt. No. "';
      Text017@1035 : TextConst 'ENU="Inv. No. ,Rcpt. No. ,Cr. Memo No. ,Rtrn. Shpt. No. "';
      Text018@1029 : TextConst 'ENU=%1 - %2:';
      Text019@1037 : TextConst 'ENU=Exact Cost Reversing Link has not been created for all copied document lines.';
      Text020@1036 : TextConst 'ENU=\';
      Text022@1039 : TextConst 'ENU=Copying document lines...\';
      Text023@1041 : TextConst 'ENU=Processing source lines      #1######\';
      Text024@1040 : TextConst 'ENU=Creating new lines           #2######';
      ExactCostRevMandatory@1042 : Boolean;
      ApplyFully@1017 : Boolean;
      AskApply@1020 : Boolean;
      ReappDone@1021 : Boolean;
      Text025@1046 : TextConst 'ENU=For one or more return document lines, you chose to return the original quantity, which is already fully applied. Therefore, when you post the return document, the program will reapply relevant entries. Beware that this may change the cost of existing entries. To avoid this, you must delete the affected return document lines before posting.';
      SkippedLine@1047 : Boolean;
      Text029@1048 : TextConst 'ENU=One or more return document lines were not inserted or they contain only the remaining quantity of the original document line. This is because quantities on the posted document line are already fully or partially applied. If you want to reverse the full quantity, you must select Return Original Quantity before getting the posted document lines.';
      Text030@1025 : TextConst 'ENU=One or more return document lines were not copied. This is because quantities on the posted document line are already fully or partially applied, so the Exact Cost Reversing link could not be created.';
      Text031@1038 : TextConst 'ENU=Return document line contains only the original document line quantity, that is not already manually applied.';
      SomeAreFixed@1045 : Boolean;
      AsmHdrExistsForFromDocLine@1050 : Boolean;
      Text032@1054 : TextConst 'ENU=The posted sales invoice %1 covers more than one shipment of linked assembly orders that potentially have different assembly components. Select Posted Shipment as document type, and then select a specific shipment of assembled items.';
      SkipCopyFromDescription@1058 : Boolean;
      SkipTestCreditLimit@1059 : Boolean;
      WarningDone@1061 : Boolean;
      LinesApplied@1062 : Boolean;
      DiffPostDateOrderQst@1065 : TextConst 'ENU=The Posting Date of the copied document is different from the Posting Date of the original document. The original document already has a Posting No. based on a number series with date order. When you post the copied document, you may have the wrong date order in the posted documents.\Do you want to continue?';
      CopyPostedDeferral@1064 : Boolean;
      CrMemoCancellationMsg@1067 : TextConst '@@@="%1 = Document No.";ENU=Cancellation of credit memo %1.';
      CopyExtText@1068 : Boolean;
      CopyJobData@1069 : Boolean;

    [External]
    PROCEDURE SetProperties@2(NewIncludeHeader@1001 : Boolean;NewRecalculateLines@1000 : Boolean;NewMoveNegLines@1006 : Boolean;NewCreateToHeader@1002 : Boolean;NewHideDialog@1003 : Boolean;NewExactCostRevMandatory@1004 : Boolean;NewApplyFully@1005 : Boolean);
    BEGIN
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalculateLines;
      MoveNegLines := NewMoveNegLines;
      CreateToHeader := NewCreateToHeader;
      HideDialog := NewHideDialog;
      ExactCostRevMandatory := NewExactCostRevMandatory;
      ApplyFully := NewApplyFully;
      AskApply := false;
      ReappDone := false;
      SkippedLine := false;
      SomeAreFixed := false;
      SkipCopyFromDescription := false;
      SkipTestCreditLimit := false;
    END;

    [External]
    PROCEDURE SetPropertiesForCreditMemoCorrection@99();
    BEGIN
      SetProperties(true,false,false,false,true,true,false);
    END;

    [External]
    PROCEDURE SetPropertiesForInvoiceCorrection@60(NewSkipCopyFromDescription@1000 : Boolean);
    BEGIN
      SetProperties(true,false,false,false,true,false,false);
      SkipTestCreditLimit := true;
      SkipCopyFromDescription := NewSkipCopyFromDescription;
    END;

    [External]
    PROCEDURE SalesHeaderDocType@1(DocType@1001 : Option) : Integer;
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      case DocType of
        SalesDocType::Quote:
          exit(SalesHeader."Document Type"::Quote);
        SalesDocType::"Blanket Order":
          exit(SalesHeader."Document Type"::"Blanket Order");
        SalesDocType::Order:
          exit(SalesHeader."Document Type"::Order);
        SalesDocType::Invoice:
          exit(SalesHeader."Document Type"::Invoice);
        SalesDocType::"Return Order":
          exit(SalesHeader."Document Type"::"Return Order");
        SalesDocType::"Credit Memo":
          exit(SalesHeader."Document Type"::"Credit Memo");
      end;
    END;

    [External]
    PROCEDURE PurchHeaderDocType@19(DocType@1001 : Option) : Integer;
    VAR
      FromPurchHeader@1000 : Record "Purchase Header";
    BEGIN
      case DocType of
        PurchDocType::Quote:
          exit(FromPurchHeader."Document Type"::Quote);
        PurchDocType::"Blanket Order":
          exit(FromPurchHeader."Document Type"::"Blanket Order");
        PurchDocType::Order:
          exit(FromPurchHeader."Document Type"::Order);
        PurchDocType::Invoice:
          exit(FromPurchHeader."Document Type"::Invoice);
        PurchDocType::"Return Order":
          exit(FromPurchHeader."Document Type"::"Return Order");
        PurchDocType::"Credit Memo":
          exit(FromPurchHeader."Document Type"::"Credit Memo");
      end;
    END;

    [External]
    PROCEDURE CopySalesDocForInvoiceCancelling@98(FromDocNo@1000 : Code[20];VAR ToSalesHeader@1001 : Record "Sales Header");
    BEGIN
      CopyJobData := true;
      CopySalesDoc(SalesDocType::"Posted Invoice",FromDocNo,ToSalesHeader);
    END;

    [External]
    PROCEDURE CopySalesDocForCrMemoCancelling@71(FromDocNo@1000 : Code[20];VAR ToSalesHeader@1001 : Record "Sales Header");
    BEGIN
      InsertCancellationLine := true;
      CopySalesDoc(SalesDocType::"Posted Credit Memo",FromDocNo,ToSalesHeader);
      InsertCancellationLine := false;
    END;

    [External]
    PROCEDURE CopySalesDoc@16(FromDocType@1007 : Option;FromDocNo@1006 : Code[20];VAR ToSalesHeader@1008 : Record "Sales Header");
    VAR
      PaymentTerms@1009 : Record "Payment Terms";
      ToSalesLine@1025 : Record "Sales Line";
      OldSalesHeader@1024 : Record "Sales Header";
      FromSalesHeader@1023 : Record "Sales Header";
      FromSalesLine@1022 : Record "Sales Line";
      FromSalesShptHeader@1021 : Record "Sales Shipment Header";
      FromSalesShptLine@1020 : Record "Sales Shipment Line";
      FromSalesInvHeader@1019 : Record "Sales Invoice Header";
      FromSalesInvLine@1018 : Record "Sales Invoice Line";
      FromReturnRcptHeader@1017 : Record "Return Receipt Header";
      FromReturnRcptLine@1016 : Record "Return Receipt Line";
      FromSalesCrMemoHeader@1015 : Record "Sales Cr.Memo Header";
      FromSalesCrMemoLine@1014 : Record "Sales Cr.Memo Line";
      GLSetUp@1010 : Record "General Ledger Setup";
      ReleaseSalesDocument@1001 : Codeunit "Release Sales Document";
      OriginalId@1004 : GUID;
      NextLineNo@1003 : Integer;
      ItemChargeAssgntNextLineNo@1002 : Integer;
      LinesNotCopied@1000 : Integer;
      MissingExCostRevLink@1012 : Boolean;
      ReleaseDocument@1005 : Boolean;
    BEGIN
      with ToSalesHeader do begin
        if not CreateToHeader then begin
          TESTFIELD(Status,Status::Open);
          if FromDocNo = '' then
            ERROR(Text000);
          FIND;
        end;

        OnBeforeCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader);

        TransferOldExtLines.ClearLineNumbers;

        if not InitAndCheckSalesDocuments(
             FromDocType,FromDocNo,FromSalesHeader,ToSalesHeader,
             FromSalesShptHeader,FromSalesInvHeader,FromReturnRcptHeader,FromSalesCrMemoHeader)
        then
          exit;

        ToSalesLine.LOCKTABLE;

        ToSalesLine.SETRANGE("Document Type","Document Type");
        if CreateToHeader then begin
          INSERT(true);
          ToSalesLine.SETRANGE("Document No.","No.");
        end else begin
          ToSalesLine.SETRANGE("Document No.","No.");
          if IncludeHeader then
            if not ToSalesLine.ISEMPTY then begin
              COMMIT;
              if not CONFIRM(DeleteLinesQst,true,"Document Type","No.") then
                exit;
              ToSalesLine.DELETEALL(true);
            end;
        end;

        if ToSalesLine.FINDLAST then
          NextLineNo := ToSalesLine."Line No."
        else
          NextLineNo := 0;

        if IncludeHeader then begin
          CheckCustomer(FromSalesHeader,ToSalesHeader);
          OldSalesHeader := ToSalesHeader;
          OriginalId := Id;
          case FromDocType of
            SalesDocType::Quote,
            SalesDocType::"Blanket Order",
            SalesDocType::Order,
            SalesDocType::Invoice,
            SalesDocType::"Return Order",
            SalesDocType::"Credit Memo":
              begin
                FromSalesHeader.CALCFIELDS("Work Description");
                TRANSFERFIELDS(FromSalesHeader,false);
                UpdateSalesHeader(ToSalesHeader,OldSalesHeader,FromDocType);
              end;
            SalesDocType::"Posted Shipment":
              begin
                VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromSalesShptHeader,false);
              end;
            SalesDocType::"Posted Invoice":
              begin
                FromSalesInvHeader.CALCFIELDS("Work Description");
                VALIDATE("Sell-to Customer No.",FromSalesInvHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromSalesInvHeader,false);
              end;
            SalesDocType::"Posted Return Receipt":
              begin
                VALIDATE("Sell-to Customer No.",FromReturnRcptHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromReturnRcptHeader,false);
              end;
            SalesDocType::"Posted Credit Memo":
              TransferFieldsFromCrMemoToInv(ToSalesHeader,FromSalesCrMemoHeader);
          end;
          Invoice := false;
          Ship := false;
          Id := OriginalId;
          if Status = Status::Released then begin
            Status := Status::Open;
            ReleaseDocument := true;
          end;
          if MoveNegLines or IncludeHeader then
            VALIDATE("Location Code");
          CopyShiptoCodeFromInvToCrMemo(ToSalesHeader,FromSalesInvHeader,FromDocType);

          CopyFieldsFromOldSalesHeader(ToSalesHeader,OldSalesHeader);
          if RecalculateLines then
            CreateDim(
              DATABASE::"Responsibility Center","Responsibility Center",
              DATABASE::Customer,"Bill-to Customer No.",
              DATABASE::"Salesperson/Purchaser","Salesperson Code",
              DATABASE::Campaign,"Campaign No.",
              DATABASE::"Customer Template","Bill-to Customer Template Code");
          "No. Printed" := 0;
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';
          "Opportunity No." := '';
          "Quote No." := '';
          if ((FromDocType = SalesDocType::"Posted Invoice") and
              ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) or
             ((FromDocType = SalesDocType::"Posted Credit Memo") and
              not ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          then
            UpdateCustLedgEntry(ToSalesHeader,FromDocType,FromDocNo);

          if "Document Type" in ["Document Type"::"Blanket Order","Document Type"::Quote] then
            "Posting Date" := 0D;

          Correction := false;
          if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
            "Shipment Date" := 0D;
            GLSetUp.GET;
            Correction := GLSetUp."Mark Cr. Memos as Corrections";
            if ("Payment Terms Code" <> '') and ("Document Date" <> 0D) then
              PaymentTerms.GET("Payment Terms Code")
            else
              CLEAR(PaymentTerms);
            if not PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then begin
              "Payment Terms Code" := '';
              "Payment Discount %" := 0;
              "Pmt. Discount Date" := 0D;
            end;
          end;

          OnBeforeModifySalesHeader(ToSalesHeader,FromDocType,FromDocNo,IncludeHeader);

          if CreateToHeader then begin
            VALIDATE("Payment Terms Code");
            MODIFY(true);
          end else
            MODIFY;
        end;

        LinesNotCopied := 0;
        case FromDocType of
          SalesDocType::Quote,
          SalesDocType::"Blanket Order",
          SalesDocType::Order,
          SalesDocType::Invoice,
          SalesDocType::"Return Order",
          SalesDocType::"Credit Memo":
            begin
              ItemChargeAssgntNextLineNo := 0;
              FromSalesLine.RESET;
              FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
              FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
              if MoveNegLines then
                FromSalesLine.SETFILTER(Quantity,'<=0');
              if FromSalesLine.FIND('-') then
                repeat
                  if not ExtTxtAttachedToPosSalesLine(FromSalesHeader,MoveNegLines,FromSalesLine."Attached to Line No.") then begin
                    InitAsmCopyHandling(true);
                    ToSalesLine."Document Type" := "Document Type";
                    AsmHdrExistsForFromDocLine := FromSalesLine.AsmToOrderExists(AsmHeader);
                    if AsmHdrExistsForFromDocLine then begin
                      case ToSalesLine."Document Type" of
                        ToSalesLine."Document Type"::Order:
                          begin
                            QtyToAsmToOrder := FromSalesLine."Qty. to Assemble to Order";
                            QtyToAsmToOrderBase := FromSalesLine."Qty. to Asm. to Order (Base)";
                          end;
                        ToSalesLine."Document Type"::Quote,
                        ToSalesLine."Document Type"::"Blanket Order":
                          begin
                            QtyToAsmToOrder := FromSalesLine.Quantity;
                            QtyToAsmToOrderBase := FromSalesLine."Quantity (Base)";
                          end;
                      end;
                      GenerateAsmDataFromNonPosted(AsmHeader);
                    end;
                    if CopySalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
                         NextLineNo,LinesNotCopied,false,DeferralTypeForSalesDoc(FromDocType),CopyPostedDeferral,
                         FromSalesLine."Line No.")
                    then begin
                      if FromSalesLine.Type = FromSalesLine.Type::"Charge (Item)" then
                        CopyFromSalesDocAssgntToLine(ToSalesLine,FromSalesLine,ItemChargeAssgntNextLineNo);
                    end;
                  end;
                until FromSalesLine.NEXT = 0;
            end;
          SalesDocType::"Posted Shipment":
            begin
              FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
              FromSalesShptLine.RESET;
              FromSalesShptLine.SETRANGE("Document No.",FromSalesShptHeader."No.");
              if MoveNegLines then
                FromSalesShptLine.SETFILTER(Quantity,'<=0');
              CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShptLine,LinesNotCopied,MissingExCostRevLink);
            end;
          SalesDocType::"Posted Invoice":
            begin
              FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
              FromSalesInvLine.RESET;
              FromSalesInvLine.SETRANGE("Document No.",FromSalesInvHeader."No.");
              if MoveNegLines then
                FromSalesInvLine.SETFILTER(Quantity,'<=0');
              CopySalesInvLinesToDoc(ToSalesHeader,FromSalesInvLine,LinesNotCopied,MissingExCostRevLink);
            end;
          SalesDocType::"Posted Return Receipt":
            begin
              FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
              FromReturnRcptLine.RESET;
              FromReturnRcptLine.SETRANGE("Document No.",FromReturnRcptHeader."No.");
              if MoveNegLines then
                FromReturnRcptLine.SETFILTER(Quantity,'<=0');
              CopySalesReturnRcptLinesToDoc(ToSalesHeader,FromReturnRcptLine,LinesNotCopied,MissingExCostRevLink);
            end;
          SalesDocType::"Posted Credit Memo":
            begin
              FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
              FromSalesCrMemoLine.RESET;
              FromSalesCrMemoLine.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
              if MoveNegLines then
                FromSalesCrMemoLine.SETFILTER(Quantity,'<=0');
              CopySalesCrMemoLinesToDoc(ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
            end;
        end;
      end;

      if MoveNegLines then begin
        DeleteSalesLinesWithNegQty(FromSalesHeader,false);
        LinkJobPlanningLine(ToSalesHeader);
      end;

      if ReleaseDocument then begin
        ToSalesHeader.Status := ToSalesHeader.Status::Released;
        ReleaseSalesDocument.Reopen(ToSalesHeader);
      end else
        if (FromDocType in
            [SalesDocType::Quote,
             SalesDocType::"Blanket Order",
             SalesDocType::Order,
             SalesDocType::Invoice,
             SalesDocType::"Return Order",
             SalesDocType::"Credit Memo"])
           and not IncludeHeader and not RecalculateLines
        then
          if FromSalesHeader.Status = FromSalesHeader.Status::Released then begin
            ReleaseSalesDocument.RUN(ToSalesHeader);
            ReleaseSalesDocument.Reopen(ToSalesHeader);
          end;
      case true of
        MissingExCostRevLink and (LinesNotCopied <> 0):
          MESSAGE(Text019 + Text020 + Text004);
        MissingExCostRevLink:
          MESSAGE(Text019);
        LinesNotCopied <> 0:
          MESSAGE(Text004);
      end;

      OnAfterCopySalesDocument(FromDocType,FromDocNo,ToSalesHeader);
    END;

    LOCAL PROCEDURE CheckCustomer@146(VAR FromSalesHeader@1000 : Record "Sales Header";VAR ToSalesHeader@1002 : Record "Sales Header");
    VAR
      Cust@1001 : Record Customer;
    BEGIN
      if Cust.GET(FromSalesHeader."Sell-to Customer No.") then
        Cust.CheckBlockedCustOnDocs(Cust,ToSalesHeader."Document Type",false,false);
      if Cust.GET(FromSalesHeader."Bill-to Customer No.") then
        Cust.CheckBlockedCustOnDocs(Cust,ToSalesHeader."Document Type",false,false);
    END;

    [External]
    PROCEDURE CopyPurchaseDocForInvoiceCancelling@104(FromDocNo@1000 : Code[20];VAR ToPurchaseHeader@1001 : Record "Purchase Header");
    BEGIN
      CopyPurchDoc(PurchDocType::"Posted Invoice",FromDocNo,ToPurchaseHeader);
    END;

    [External]
    PROCEDURE CopyPurchDocForCrMemoCancelling@136(FromDocNo@1001 : Code[20];VAR ToPurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      InsertCancellationLine := true;
      CopyPurchDoc(SalesDocType::"Posted Credit Memo",FromDocNo,ToPurchaseHeader);
      InsertCancellationLine := false;
    END;

    [External]
    PROCEDURE CopyPurchDoc@22(FromDocType@1005 : Option;FromDocNo@1004 : Code[20];VAR ToPurchHeader@1017 : Record "Purchase Header");
    VAR
      PaymentTerms@1022 : Record "Payment Terms";
      ToPurchLine@1015 : Record "Purchase Line";
      OldPurchHeader@1014 : Record "Purchase Header";
      FromPurchHeader@1013 : Record "Purchase Header";
      FromPurchLine@1012 : Record "Purchase Line";
      FromPurchRcptHeader@1011 : Record "Purch. Rcpt. Header";
      FromPurchRcptLine@1010 : Record "Purch. Rcpt. Line";
      FromPurchInvHeader@1009 : Record "Purch. Inv. Header";
      FromPurchInvLine@1008 : Record "Purch. Inv. Line";
      FromReturnShptHeader@1002 : Record "Return Shipment Header";
      FromReturnShptLine@1001 : Record "Return Shipment Line";
      FromPurchCrMemoHeader@1007 : Record "Purch. Cr. Memo Hdr.";
      FromPurchCrMemoLine@1006 : Record "Purch. Cr. Memo Line";
      GLSetup@1023 : Record "General Ledger Setup";
      Vend@1024 : Record Vendor;
      ReleasePurchaseDocument@1000 : Codeunit "Release Purchase Document";
      NextLineNo@1020 : Integer;
      ItemChargeAssgntNextLineNo@1016 : Integer;
      LinesNotCopied@1018 : Integer;
      MissingExCostRevLink@1025 : Boolean;
      ReleaseDocument@1021 : Boolean;
    BEGIN
      with ToPurchHeader do begin
        if not CreateToHeader then begin
          TESTFIELD(Status,Status::Open);
          if FromDocNo = '' then
            ERROR(Text000);
          FIND;
        end;

        OnBeforeCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader);

        TransferOldExtLines.ClearLineNumbers;

        if not InitAndCheckPurchaseDocuments(
             FromDocType,FromDocNo,FromPurchHeader,ToPurchHeader,
             FromPurchRcptHeader,FromPurchInvHeader,FromReturnShptHeader,FromPurchCrMemoHeader)
        then
          exit;

        ToPurchLine.LOCKTABLE;

        if CreateToHeader then begin
          INSERT(true);
          ToPurchLine.SETRANGE("Document Type","Document Type");
          ToPurchLine.SETRANGE("Document No.","No.");
        end else begin
          ToPurchLine.SETRANGE("Document Type","Document Type");
          ToPurchLine.SETRANGE("Document No.","No.");
          if IncludeHeader then
            if ToPurchLine.FINDFIRST then begin
              COMMIT;
              if not CONFIRM(DeleteLinesQst,true,"Document Type","No.") then
                exit;
              ToPurchLine.DELETEALL(true);
            end;
        end;

        if ToPurchLine.FINDLAST then
          NextLineNo := ToPurchLine."Line No."
        else
          NextLineNo := 0;

        if IncludeHeader then begin
          if Vend.GET(FromPurchHeader."Buy-from Vendor No.") then
            Vend.CheckBlockedVendOnDocs(Vend,false);
          if Vend.GET(FromPurchHeader."Pay-to Vendor No.") then
            Vend.CheckBlockedVendOnDocs(Vend,false);
          OldPurchHeader := ToPurchHeader;
          case FromDocType of
            PurchDocType::Quote,
            PurchDocType::"Blanket Order",
            PurchDocType::Order,
            PurchDocType::Invoice,
            PurchDocType::"Return Order",
            PurchDocType::"Credit Memo":
              begin
                TRANSFERFIELDS(FromPurchHeader,false);
                "Last Receiving No." := '';
                Status := Status::Open;
                "IC Status" := "IC Status"::New;
                if "Document Type" <> "Document Type"::Order then
                  "Prepayment %" := 0;
                if FromDocType in [PurchDocType::Quote,PurchDocType::"Blanket Order"] then
                  if OldPurchHeader."Posting Date" = 0D then
                    "Posting Date" := WORKDATE
                  else
                    "Posting Date" := OldPurchHeader."Posting Date";
              end;
            PurchDocType::"Posted Receipt":
              begin
                VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchRcptHeader,false);
              end;
            PurchDocType::"Posted Invoice":
              begin
                VALIDATE("Buy-from Vendor No.",FromPurchInvHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchInvHeader,false);
              end;
            PurchDocType::"Posted Return Shipment":
              begin
                VALIDATE("Buy-from Vendor No.",FromReturnShptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromReturnShptHeader,false);
              end;
            PurchDocType::"Posted Credit Memo":
              begin
                VALIDATE("Buy-from Vendor No.",FromPurchCrMemoHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchCrMemoHeader,false);
              end;
          end;
          Invoice := false;
          Receive := false;
          if Status = Status::Released then begin
            Status := Status::Open;
            ReleaseDocument := true;
          end;
          if MoveNegLines or IncludeHeader then begin
            VALIDATE("Location Code");
            CopyShippingInfoPurchOrder(ToPurchHeader,FromPurchHeader);
          end;
          if MoveNegLines then
            VALIDATE("Order Address Code");

          CopyFieldsFromOldPurchHeader(ToPurchHeader,OldPurchHeader);
          if RecalculateLines then
            CreateDim(
              DATABASE::Vendor,"Pay-to Vendor No.",
              DATABASE::"Salesperson/Purchaser","Purchaser Code",
              DATABASE::Campaign,"Campaign No.",
              DATABASE::"Responsibility Center","Responsibility Center");
          "No. Printed" := 0;
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';
          "Quote No." := '';
          if ((FromDocType = PurchDocType::"Posted Invoice") and
              ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) or
             ((FromDocType = PurchDocType::"Posted Credit Memo") and
              not ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          then
            UpdateVendLedgEntry(ToPurchHeader,FromDocType,FromDocNo);

          if "Document Type" in ["Document Type"::"Blanket Order","Document Type"::Quote] then
            "Posting Date" := 0D;

          Correction := false;
          if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then begin
            "Expected Receipt Date" := 0D;
            GLSetup.GET;
            Correction := GLSetup."Mark Cr. Memos as Corrections";
            if ("Payment Terms Code" <> '') and ("Document Date" <> 0D) then
              PaymentTerms.GET("Payment Terms Code")
            else
              CLEAR(PaymentTerms);
            if not PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then begin
              "Payment Terms Code" := '';
              "Payment Discount %" := 0;
              "Pmt. Discount Date" := 0D;
            end;
          end;

          OnBeforeModifyPurchHeader(ToPurchHeader,FromDocType,FromDocNo,IncludeHeader);

          if CreateToHeader then begin
            VALIDATE("Payment Terms Code");
            MODIFY(true);
          end else
            MODIFY;
        end;

        LinesNotCopied := 0;
        case FromDocType of
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            begin
              ItemChargeAssgntNextLineNo := 0;
              FromPurchLine.RESET;
              FromPurchLine.SETRANGE("Document Type",FromPurchHeader."Document Type");
              FromPurchLine.SETRANGE("Document No.",FromPurchHeader."No.");
              if MoveNegLines then
                FromPurchLine.SETFILTER(Quantity,'<=0');
              if FromPurchLine.FIND('-') then
                repeat
                  if not ExtTxtAttachedToPosPurchLine(FromPurchHeader,MoveNegLines,FromPurchLine."Attached to Line No.") then
                    if CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
                         NextLineNo,LinesNotCopied,false,DeferralTypeForPurchDoc(FromDocType),CopyPostedDeferral,
                         FromPurchLine."Line No.")
                    then begin
                      if FromPurchLine.Type = FromPurchLine.Type::"Charge (Item)" then
                        CopyFromPurchDocAssgntToLine(ToPurchLine,FromPurchLine,ItemChargeAssgntNextLineNo);
                    end;
                until FromPurchLine.NEXT = 0;
            end;
          PurchDocType::"Posted Receipt":
            begin
              FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
              FromPurchRcptLine.RESET;
              FromPurchRcptLine.SETRANGE("Document No.",FromPurchRcptHeader."No.");
              if MoveNegLines then
                FromPurchRcptLine.SETFILTER(Quantity,'<=0');
              CopyPurchRcptLinesToDoc(ToPurchHeader,FromPurchRcptLine,LinesNotCopied,MissingExCostRevLink);
            end;
          PurchDocType::"Posted Invoice":
            begin
              FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              FromPurchInvLine.RESET;
              FromPurchInvLine.SETRANGE("Document No.",FromPurchInvHeader."No.");
              if MoveNegLines then
                FromPurchInvLine.SETFILTER(Quantity,'<=0');
              CopyPurchInvLinesToDoc(ToPurchHeader,FromPurchInvLine,LinesNotCopied,MissingExCostRevLink);
            end;
          PurchDocType::"Posted Return Shipment":
            begin
              FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
              FromReturnShptLine.RESET;
              FromReturnShptLine.SETRANGE("Document No.",FromReturnShptHeader."No.");
              if MoveNegLines then
                FromReturnShptLine.SETFILTER(Quantity,'<=0');
              CopyPurchReturnShptLinesToDoc(ToPurchHeader,FromReturnShptLine,LinesNotCopied,MissingExCostRevLink);
            end;
          PurchDocType::"Posted Credit Memo":
            begin
              FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              FromPurchCrMemoLine.RESET;
              FromPurchCrMemoLine.SETRANGE("Document No.",FromPurchCrMemoHeader."No.");
              if MoveNegLines then
                FromPurchCrMemoLine.SETFILTER(Quantity,'<=0');
              CopyPurchCrMemoLinesToDoc(ToPurchHeader,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
            end;
        end;
      end;

      if MoveNegLines then
        DeletePurchLinesWithNegQty(FromPurchHeader,false);

      if ReleaseDocument then begin
        ToPurchHeader.Status := ToPurchHeader.Status::Released;
        ReleasePurchaseDocument.Reopen(ToPurchHeader);
      end else
        if (FromDocType in
            [PurchDocType::Quote,
             PurchDocType::"Blanket Order",
             PurchDocType::Order,
             PurchDocType::Invoice,
             PurchDocType::"Return Order",
             PurchDocType::"Credit Memo"])
           and not IncludeHeader and not RecalculateLines
        then
          if FromPurchHeader.Status = FromPurchHeader.Status::Released then begin
            ReleasePurchaseDocument.RUN(ToPurchHeader);
            ReleasePurchaseDocument.Reopen(ToPurchHeader);
          end;

      case true of
        MissingExCostRevLink and (LinesNotCopied <> 0):
          MESSAGE(Text019 + Text020 + Text004);
        MissingExCostRevLink:
          MESSAGE(Text019);
        LinesNotCopied <> 0:
          MESSAGE(Text004);
      end;

      OnAfterCopyPurchaseDocument(FromDocType,FromDocNo,ToPurchHeader);
    END;

    [External]
    PROCEDURE ShowSalesDoc@15(ToSalesHeader@1000 : Record "Sales Header");
    BEGIN
      with ToSalesHeader do
        case "Document Type" of
          "Document Type"::Order:
            PAGE.RUN(PAGE::"Sales Order",ToSalesHeader);
          "Document Type"::Invoice:
            PAGE.RUN(PAGE::"Sales Invoice",ToSalesHeader);
          "Document Type"::"Return Order":
            PAGE.RUN(PAGE::"Sales Return Order",ToSalesHeader);
          "Document Type"::"Credit Memo":
            PAGE.RUN(PAGE::"Sales Credit Memo",ToSalesHeader);
        end;
    END;

    [External]
    PROCEDURE ShowPurchDoc@24(ToPurchHeader@1000 : Record "Purchase Header");
    BEGIN
      with ToPurchHeader do
        case "Document Type" of
          "Document Type"::Order:
            PAGE.RUN(PAGE::"Purchase Order",ToPurchHeader);
          "Document Type"::Invoice:
            PAGE.RUN(PAGE::"Purchase Invoice",ToPurchHeader);
          "Document Type"::"Return Order":
            PAGE.RUN(PAGE::"Purchase Return Order",ToPurchHeader);
          "Document Type"::"Credit Memo":
            PAGE.RUN(PAGE::"Purchase Credit Memo",ToPurchHeader);
        end;
    END;

    [External]
    PROCEDURE CopyFromSalesToPurchDoc@23(VendorNo@1004 : Code[20];FromSalesHeader@1000 : Record "Sales Header";VAR ToPurchHeader@1001 : Record "Purchase Header");
    VAR
      FromSalesLine@1003 : Record "Sales Line";
      ToPurchLine@1002 : Record "Purchase Line";
      NextLineNo@1005 : Integer;
    BEGIN
      if VendorNo = '' then
        ERROR(Text011);

      with ToPurchLine do begin
        LOCKTABLE;
        ToPurchHeader.INSERT(true);
        ToPurchHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
        ToPurchHeader.MODIFY(true);
        FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
        FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
        if not FromSalesLine.FIND('-') then
          ERROR(Text012);
        repeat
          NextLineNo := NextLineNo + 10000;
          CLEAR(ToPurchLine);
          INIT;
          "Document Type" := ToPurchHeader."Document Type";
          "Document No." := ToPurchHeader."No.";
          "Line No." := NextLineNo;
          if FromSalesLine.Type = FromSalesLine.Type::" " then
            Description := FromSalesLine.Description
          else begin
            TransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine);
            if (Type = Type::Item) and (Quantity <> 0) then
              CopyItemTrackingEntries(
                FromSalesLine,ToPurchLine,FromSalesHeader."Prices Including VAT",
                ToPurchHeader."Prices Including VAT");
          end;
          INSERT(true);
        until FromSalesLine.NEXT = 0;
      end;
    END;

    [Internal]
    PROCEDURE TransfldsFromSalesToPurchLine@3(VAR FromSalesLine@1000 : Record "Sales Line";VAR ToPurchLine@1001 : Record "Purchase Line");
    BEGIN
      with ToPurchLine do begin
        VALIDATE(Type,FromSalesLine.Type);
        VALIDATE("No.",FromSalesLine."No.");
        VALIDATE("Variant Code",FromSalesLine."Variant Code");
        VALIDATE("Location Code",FromSalesLine."Location Code");
        VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
        if (Type = Type::Item) and ("No." <> '') then
          UpdateUOMQtyPerStockQty;
        "Expected Receipt Date" := FromSalesLine."Shipment Date";
        "Bin Code" := FromSalesLine."Bin Code";
        if (FromSalesLine."Document Type" = FromSalesLine."Document Type"::"Return Order") and
           ("Document Type" = "Document Type"::"Return Order")
        then
          VALIDATE(Quantity,FromSalesLine.Quantity)
        else
          VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");
        VALIDATE("Return Reason Code",FromSalesLine."Return Reason Code");
        VALIDATE("Direct Unit Cost");
        Description := FromSalesLine.Description;
        "Description 2" := FromSalesLine."Description 2";
      end;
    END;

    LOCAL PROCEDURE DeleteSalesLinesWithNegQty@12(FromSalesHeader@1001 : Record "Sales Header";OnlyTest@1002 : Boolean);
    VAR
      FromSalesLine@1000 : Record "Sales Line";
    BEGIN
      with FromSalesLine do begin
        SETRANGE("Document Type",FromSalesHeader."Document Type");
        SETRANGE("Document No.",FromSalesHeader."No.");
        SETFILTER(Quantity,'<0');
        if OnlyTest then begin
          if not FIND('-') then
            ERROR(Text008);
          repeat
            TESTFIELD("Shipment No.",'');
            TESTFIELD("Return Receipt No.",'');
            TESTFIELD("Quantity Shipped",0);
            TESTFIELD("Quantity Invoiced",0);
          until NEXT = 0;
        end else
          DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE DeletePurchLinesWithNegQty@30(FromPurchHeader@1001 : Record "Purchase Header";OnlyTest@1002 : Boolean);
    VAR
      FromPurchLine@1000 : Record "Purchase Line";
    BEGIN
      with FromPurchLine do begin
        SETRANGE("Document Type",FromPurchHeader."Document Type");
        SETRANGE("Document No.",FromPurchHeader."No.");
        SETFILTER(Quantity,'<0');
        if OnlyTest then begin
          if not FIND('-') then
            ERROR(Text010);
          repeat
            TESTFIELD("Receipt No.",'');
            TESTFIELD("Return Shipment No.",'');
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Quantity Invoiced",0);
          until NEXT = 0;
        end else
          DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE CopySalesLine@7(VAR ToSalesHeader@1004 : Record "Sales Header";VAR ToSalesLine@1001 : Record "Sales Line";VAR FromSalesHeader@1005 : Record "Sales Header";VAR FromSalesLine@1002 : Record "Sales Line";VAR NextLineNo@1003 : Integer;VAR LinesNotCopied@1006 : Integer;RecalculateAmount@1008 : Boolean;FromSalesDocType@1007 : Option;VAR CopyPostedDeferral@1014 : Boolean;DocLineNo@1011 : Integer) : Boolean;
    VAR
      ToSalesLine2@1009 : Record "Sales Line";
      RoundingLineInserted@1013 : Boolean;
      CopyThisLine@1000 : Boolean;
      InvDiscountAmount@1020 : Decimal;
    BEGIN
      CopyThisLine := true;

      CheckSalesRounding(FromSalesLine,RoundingLineInserted);

      if ((ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") or RecalculateLines) and
         (FromSalesLine."Attached to Line No." <> 0) or
         FromSalesLine."Prepayment Line" or RoundingLineInserted
      then
        exit(false);
      ToSalesLine.SetSalesHeader(ToSalesHeader);
      if RecalculateLines and not FromSalesLine."System-Created Entry" then
        ToSalesLine.INIT
      else begin
        ToSalesLine := FromSalesLine;
        ToSalesLine."Returns Deferral Start Date" := 0D;
        if ToSalesHeader."Document Type" in [ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"] then
          ToSalesLine."Deferral Code" := '';
        if MoveNegLines and (ToSalesLine.Type <> ToSalesLine.Type::" ") then begin
          ToSalesLine.Amount := -ToSalesLine.Amount;
          ToSalesLine."Amount Including VAT" := -ToSalesLine."Amount Including VAT";
        end
      end;

      if (not RecalculateLines) and (ToSalesLine."No." <> '') then
        ToSalesLine.TESTFIELD("VAT Bus. Posting Group",ToSalesHeader."VAT Bus. Posting Group");

      NextLineNo := NextLineNo + 10000;
      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine."Line No." := NextLineNo;
      if (ToSalesLine.Type <> ToSalesLine.Type::" ") and
         (ToSalesLine."Document Type" in [ToSalesLine."Document Type"::"Return Order",ToSalesLine."Document Type"::"Credit Memo"])
      then begin
        ToSalesLine."Job Contract Entry No." := 0;
        if (ToSalesLine.Amount = 0) or
           (ToSalesHeader."Prices Including VAT" <> FromSalesHeader."Prices Including VAT") or
           (ToSalesHeader."Currency Factor" <> FromSalesHeader."Currency Factor")
        then begin
          InvDiscountAmount := ToSalesLine."Inv. Discount Amount";
          ToSalesLine.VALIDATE("Line Discount %");
          ToSalesLine.VALIDATE("Inv. Discount Amount",InvDiscountAmount);
        end;
      end;
      ToSalesLine.VALIDATE("Currency Code",FromSalesHeader."Currency Code");

      UpdateSalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,
        FromSalesLine,CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
      ToSalesLine.CheckLocationOnWMS;

      if ExactCostRevMandatory and
         (FromSalesLine.Type = FromSalesLine.Type::Item) and
         (FromSalesLine."Appl.-from Item Entry" <> 0) and
         not MoveNegLines
      then begin
        if RecalculateAmount then begin
          ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
          ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
          ToSalesLine.VALIDATE(
            "Line Discount Amount",
            ROUND(FromSalesLine."Line Discount Amount",Currency."Amount Rounding Precision"));
          ToSalesLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromSalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        end;
        ToSalesLine.VALIDATE("Appl.-from Item Entry",FromSalesLine."Appl.-from Item Entry");
        if not CreateToHeader then
          if ToSalesLine."Shipment Date" = 0D then begin
            if ToSalesHeader."Shipment Date" <> 0D then
              ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date"
            else
              ToSalesLine."Shipment Date" := WORKDATE;
          end;
      end;

      if MoveNegLines and (ToSalesLine.Type <> ToSalesLine.Type::" ") then begin
        ToSalesLine.VALIDATE(Quantity,-FromSalesLine.Quantity);
        ToSalesLine."Appl.-to Item Entry" := FromSalesLine."Appl.-to Item Entry";
        ToSalesLine."Appl.-from Item Entry" := FromSalesLine."Appl.-from Item Entry";
        ToSalesLine."Job No." := FromSalesLine."Job No.";
        ToSalesLine."Job Task No." := FromSalesLine."Job Task No.";
        ToSalesLine."Job Contract Entry No." := FromSalesLine."Job Contract Entry No.";
      end;

      if CopyJobData then begin
        ToSalesLine."Job No." := FromSalesLine."Job No.";
        ToSalesLine."Job Task No." := FromSalesLine."Job Task No.";
        if ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Invoice then
          ToSalesLine."Job Contract Entry No." :=
            CreateJobPlanningLine(ToSalesHeader,ToSalesLine,FromSalesLine."Job Contract Entry No.")
        else
          ToSalesLine."Job Contract Entry No." := FromSalesLine."Job Contract Entry No.";
      end;

      if (ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") or RecalculateLines or CopyExtText then begin
        if TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,false) then begin
          TransferExtendedText.InsertSalesExtText(ToSalesLine);
          ToSalesLine2.SETRANGE("Document Type",ToSalesLine."Document Type");
          ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
          ToSalesLine2.FINDLAST;
          NextLineNo := ToSalesLine2."Line No.";
        end;
      end else
        ToSalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(DocLineNo,NextLineNo,FromSalesLine."Attached to Line No.");

      if not RecalculateLines then begin
        ToSalesLine."Dimension Set ID" := FromSalesLine."Dimension Set ID";
        ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
        ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
      end;

      if CopyThisLine then begin
        ToSalesLine.INSERT;
        HandleAsmAttachedToSalesLine(ToSalesLine);
        if ToSalesLine.Reserve = ToSalesLine.Reserve::Always then
          ToSalesLine.AutoReserve;
      end else
        LinesNotCopied := LinesNotCopied + 1;
      exit(true);
    END;

    LOCAL PROCEDURE UpdateSalesHeader@162(VAR ToSalesHeader@1000 : Record "Sales Header";OriginalSalesHeader@1001 : Record "Sales Header";FromDocType@1002 : Option);
    BEGIN
      with ToSalesHeader do begin
        "Last Shipping No." := '';
        Status := Status::Open;
        if "Document Type" <> "Document Type"::Order then
          "Prepayment %" := 0;
        if FromDocType = SalesDocType::"Return Order" then
          VALIDATE("Ship-to Code");
        if FromDocType in [SalesDocType::Quote,SalesDocType::"Blanket Order"] then
          if OriginalSalesHeader."Posting Date" = 0D then
            "Posting Date" := WORKDATE
          else
            "Posting Date" := OriginalSalesHeader."Posting Date";
      end;
    END;

    LOCAL PROCEDURE UpdateSalesLine@132(VAR ToSalesHeader@1005 : Record "Sales Header";VAR ToSalesLine@1000 : Record "Sales Line";VAR FromSalesHeader@1001 : Record "Sales Header";VAR FromSalesLine@1002 : Record "Sales Line";VAR CopyThisLine@1004 : Boolean;RecalculateAmount@1006 : Boolean;FromSalesDocType@1008 : Option;VAR CopyPostedDeferral@1009 : Boolean);
    VAR
      GLAcc@1003 : Record "G/L Account";
      VATPostingSetup@1007 : Record "VAT Posting Setup";
      DeferralDocType@1010 : Integer;
    BEGIN
      OnBeforeUpdateSalesLine(
        ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
        CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);

      CopyPostedDeferral := false;
      DeferralDocType := DeferralUtilities.GetSalesDeferralDocType;
      if RecalculateLines and not FromSalesLine."System-Created Entry" then begin
        ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
        ToSalesLine.Description := FromSalesLine.Description;
        ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
        if (FromSalesLine.Type <> 0) and (FromSalesLine."No." <> '') then begin
          if ToSalesLine.Type = ToSalesLine.Type::"G/L Account" then begin
            ToSalesLine."No." := FromSalesLine."No.";
            if GLAcc."No." <> FromSalesLine."No." then
              GLAcc.GET(FromSalesLine."No.");
            CopyThisLine := GLAcc."Direct Posting";
            if CopyThisLine then
              ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
          end else
            ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
          ToSalesLine.VALIDATE("Variant Code",FromSalesLine."Variant Code");
          ToSalesLine.VALIDATE("Location Code",FromSalesLine."Location Code");
          ToSalesLine.VALIDATE("Unit of Measure",FromSalesLine."Unit of Measure");
          ToSalesLine.VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
          ToSalesLine.VALIDATE(Quantity,FromSalesLine.Quantity);

          if not (FromSalesLine.Type in [FromSalesLine.Type::Item,FromSalesLine.Type::Resource]) then begin
            if (FromSalesHeader."Currency Code" <> ToSalesHeader."Currency Code") or
               (FromSalesHeader."Prices Including VAT" <> ToSalesHeader."Prices Including VAT")
            then begin
              ToSalesLine."Unit Price" := 0;
              ToSalesLine."Line Discount %" := 0;
            end else begin
              ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
              ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
            end;
            if ToSalesLine.Quantity <> 0 then
              ToSalesLine.VALIDATE("Line Discount Amount",FromSalesLine."Line Discount Amount");
          end;
          ToSalesLine.VALIDATE("Work Type Code",FromSalesLine."Work Type Code");
          if (ToSalesLine."Document Type" = ToSalesLine."Document Type"::Order) and
             (FromSalesLine."Purchasing Code" <> '')
          then
            ToSalesLine.VALIDATE("Purchasing Code",FromSalesLine."Purchasing Code");
        end;
        if (FromSalesLine.Type = FromSalesLine.Type::" ") and (FromSalesLine."No." <> '') then
          ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
        if IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) then
          ToSalesLine.VALIDATE("Deferral Code",FromSalesLine."Deferral Code");
      end else begin
        SetDefaultValuesToSalesLine(ToSalesLine,ToSalesHeader,FromSalesLine."VAT Difference");
        if IsDeferralToBeCopied(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) then
          if IsDeferralPosted(DeferralDocType,FromSalesDocType) then
            CopyPostedDeferral := true
          else
            ToSalesLine."Returns Deferral Start Date" :=
              CopyDeferrals(DeferralDocType,FromSalesLine."Document Type",FromSalesLine."Document No.",
                FromSalesLine."Line No.",ToSalesLine."Document Type",ToSalesLine."Document No.",ToSalesLine."Line No.")
        else
          if IsDeferralToBeDefaulted(DeferralDocType,ToSalesLine."Document Type",FromSalesDocType) then
            InitSalesDeferralCode(ToSalesLine);

        if ToSalesLine."Document Type" <> ToSalesLine."Document Type"::Order then begin
          ToSalesLine."Drop Shipment" := false;
          ToSalesLine."Special Order" := false;
        end;
        if RecalculateAmount and (FromSalesLine."Appl.-from Item Entry" = 0) then begin
          if (ToSalesLine.Type <> ToSalesLine.Type::" ") and (ToSalesLine."No." <> '') then begin
            ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
            ToSalesLine.VALIDATE(
              "Inv. Discount Amount",ROUND(FromSalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
          end;
          ToSalesLine.VALIDATE("Unit Cost (LCY)",FromSalesLine."Unit Cost (LCY)");
        end;
        if VATPostingSetup.GET(ToSalesLine."VAT Bus. Posting Group",ToSalesLine."VAT Prod. Posting Group") then
          ToSalesLine."VAT Identifier" := VATPostingSetup."VAT Identifier";

        ToSalesLine.UpdateWithWarehouseShip;
        if (ToSalesLine.Type = ToSalesLine.Type::Item) and (ToSalesLine."No." <> '') then begin
          GetItem(ToSalesLine."No.");
          if (Item."Costing Method" = Item."Costing Method"::Standard) and not ToSalesLine.IsShipment then
            ToSalesLine.GetUnitCost;

          if Item.Reserve = Item.Reserve::Optional then
            ToSalesLine.Reserve := ToSalesHeader.Reserve
          else
            ToSalesLine.Reserve := Item.Reserve;
          if ToSalesLine.Reserve = ToSalesLine.Reserve::Always then
            if ToSalesHeader."Shipment Date" <> 0D then
              ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date"
            else
              ToSalesLine."Shipment Date" := WORKDATE;
        end;
      end;

      OnAfterUpdateSalesLine(
        ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,
        CopyThisLine,RecalculateAmount,FromSalesDocType,CopyPostedDeferral);
    END;

    LOCAL PROCEDURE HandleAsmAttachedToSalesLine@25(VAR ToSalesLine@1000 : Record "Sales Line");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with ToSalesLine do begin
        if Type <> Type::Item then
          exit;
        if not ("Document Type" in ["Document Type"::Quote,"Document Type"::Order,"Document Type"::"Blanket Order"]) then
          exit;
      end;
      if AsmHdrExistsForFromDocLine then begin
        ToSalesLine."Qty. to Assemble to Order" := QtyToAsmToOrder;
        ToSalesLine."Qty. to Asm. to Order (Base)" := QtyToAsmToOrderBase;
        ToSalesLine.MODIFY;
        CopyAsmOrderToAsmOrder(TempAsmHeader,TempAsmLine,ToSalesLine,GetAsmOrderType(ToSalesLine."Document Type"),'',true);
      end else begin
        Item.GET(ToSalesLine."No.");
        if (Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order") and
           (Item."Replenishment System" = Item."Replenishment System"::Assembly)
        then begin
          ToSalesLine.VALIDATE("Qty. to Assemble to Order",ToSalesLine.Quantity);
          ToSalesLine.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE CopyPurchLine@20(VAR ToPurchHeader@1011 : Record "Purchase Header";VAR ToPurchLine@1001 : Record "Purchase Line";VAR FromPurchHeader@1012 : Record "Purchase Header";VAR FromPurchLine@1003 : Record "Purchase Line";VAR NextLineNo@1006 : Integer;VAR LinesNotCopied@1005 : Integer;RecalculateAmount@1004 : Boolean;FromPurchDocType@1008 : Option;VAR CopyPostedDeferral@1002 : Boolean;DocLineNo@1009 : Integer) : Boolean;
    VAR
      ToPurchLine2@1007 : Record "Purchase Line";
      RoundingLineInserted@1013 : Boolean;
      CopyThisLine@1000 : Boolean;
      InvDiscountAmount@1020 : Decimal;
    BEGIN
      CopyThisLine := true;

      CheckPurchRounding(FromPurchLine,RoundingLineInserted);

      if ((ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") or RecalculateLines) and
         (FromPurchLine."Attached to Line No." <> 0) or
         FromPurchLine."Prepayment Line" or RoundingLineInserted
      then
        exit(false);

      if RecalculateLines and not FromPurchLine."System-Created Entry" then
        ToPurchLine.INIT
      else begin
        ToPurchLine := FromPurchLine;
        ToPurchLine."Returns Deferral Start Date" := 0D;
        if ToPurchHeader."Document Type" in [ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"] then
          ToPurchLine."Deferral Code" := '';
        if MoveNegLines and (ToPurchLine.Type <> ToPurchLine.Type::" ") then begin
          ToPurchLine.Amount := -ToPurchLine.Amount;
          ToPurchLine."Amount Including VAT" := -ToPurchLine."Amount Including VAT";
        end
      end;

      if (not RecalculateLines) and (ToPurchLine."No." <> '') then
        ToPurchLine.TESTFIELD("VAT Bus. Posting Group",ToPurchHeader."VAT Bus. Posting Group");

      NextLineNo := NextLineNo + 10000;
      ToPurchLine."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine."Document No." := ToPurchHeader."No.";
      ToPurchLine."Line No." := NextLineNo;
      ToPurchLine.VALIDATE("Currency Code",FromPurchHeader."Currency Code");
      if (ToPurchLine.Type <> ToPurchLine.Type::" ") and
         ((ToPurchLine.Amount = 0) or
          (ToPurchHeader."Prices Including VAT" <> FromPurchHeader."Prices Including VAT") or
          (ToPurchHeader."Currency Factor" <> FromPurchHeader."Currency Factor"))
      then begin
        InvDiscountAmount := ToPurchLine."Inv. Discount Amount";
        ToPurchLine.VALIDATE("Line Discount %");
        ToPurchLine.VALIDATE("Inv. Discount Amount",InvDiscountAmount);
      end;

      UpdatePurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
        CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
      ToPurchLine.CheckLocationOnWMS;

      if ExactCostRevMandatory and
         (FromPurchLine.Type = FromPurchLine.Type::Item) and
         (FromPurchLine."Appl.-to Item Entry" <> 0) and
         not MoveNegLines
      then begin
        if RecalculateAmount then begin
          ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
          ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
          ToPurchLine.VALIDATE(
            "Line Discount Amount",
            ROUND(FromPurchLine."Line Discount Amount",Currency."Amount Rounding Precision"));
          ToPurchLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromPurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        end;
        ToPurchLine.VALIDATE("Appl.-to Item Entry",FromPurchLine."Appl.-to Item Entry");
        if not CreateToHeader then
          if ToPurchLine."Expected Receipt Date" = 0D then begin
            if ToPurchHeader."Expected Receipt Date" <> 0D then
              ToPurchLine."Expected Receipt Date" := ToPurchHeader."Expected Receipt Date"
            else
              ToPurchLine."Expected Receipt Date" := WORKDATE;
          end;
      end;

      if MoveNegLines and (ToPurchLine.Type <> ToPurchLine.Type::" ") then begin
        ToPurchLine.VALIDATE(Quantity,-FromPurchLine.Quantity);
        ToPurchLine."Appl.-to Item Entry" := FromPurchLine."Appl.-to Item Entry"
      end;

      if (ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") or RecalculateLines or CopyExtText then begin
        if TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,false) then begin
          TransferExtendedText.InsertPurchExtText(ToPurchLine);
          ToPurchLine2.SETRANGE("Document Type",ToPurchLine."Document Type");
          ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
          ToPurchLine2.FINDLAST;
          NextLineNo := ToPurchLine2."Line No.";
        end;
      end else
        ToPurchLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(DocLineNo,NextLineNo,FromPurchLine."Attached to Line No.");

      ToPurchLine.VALIDATE("Job No.",FromPurchLine."Job No.");
      ToPurchLine.VALIDATE("Job Task No.",FromPurchLine."Job Task No.");
      ToPurchLine.VALIDATE("Job Line Type",FromPurchLine."Job Line Type");

      if not RecalculateLines then begin
        ToPurchLine."Dimension Set ID" := FromPurchLine."Dimension Set ID";
        ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
        ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
      end;

      if CopyThisLine then
        ToPurchLine.INSERT
      else
        LinesNotCopied := LinesNotCopied + 1;
      exit(true);
    END;

    LOCAL PROCEDURE UpdatePurchLine@135(VAR ToPurchHeader@1000 : Record "Purchase Header";VAR ToPurchLine@1001 : Record "Purchase Line";VAR FromPurchHeader@1005 : Record "Purchase Header";VAR FromPurchLine@1002 : Record "Purchase Line";VAR CopyThisLine@1004 : Boolean;RecalculateAmount@1006 : Boolean;FromPurchDocType@1008 : Option;VAR CopyPostedDeferral@1009 : Boolean);
    VAR
      GLAcc@1003 : Record "G/L Account";
      VATPostingSetup@1007 : Record "VAT Posting Setup";
      DeferralDocType@1010 : Integer;
    BEGIN
      OnBeforeUpdatePurchLine(
        ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
        CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);

      CopyPostedDeferral := false;
      DeferralDocType := DeferralUtilities.GetPurchDeferralDocType;
      if RecalculateLines and not FromPurchLine."System-Created Entry" then begin
        ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
        ToPurchLine.Description := FromPurchLine.Description;
        ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
        if (FromPurchLine.Type <> 0) and (FromPurchLine."No." <> '') then begin
          if ToPurchLine.Type = ToPurchLine.Type::"G/L Account" then begin
            ToPurchLine."No." := FromPurchLine."No.";
            if GLAcc."No." <> FromPurchLine."No." then
              GLAcc.GET(FromPurchLine."No.");
            CopyThisLine := GLAcc."Direct Posting";
            if CopyThisLine then
              ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          end else
            ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          ToPurchLine.VALIDATE("Variant Code",FromPurchLine."Variant Code");
          ToPurchLine.VALIDATE("Location Code",FromPurchLine."Location Code");
          ToPurchLine.VALIDATE("Unit of Measure",FromPurchLine."Unit of Measure");
          ToPurchLine.VALIDATE("Unit of Measure Code",FromPurchLine."Unit of Measure Code");
          ToPurchLine.VALIDATE(Quantity,FromPurchLine.Quantity);
          if FromPurchLine.Type <> FromPurchLine.Type::Item then begin
            ToPurchHeader.TESTFIELD("Currency Code",FromPurchHeader."Currency Code");
            ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
            ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
            if ToPurchLine.Quantity <> 0 then
              ToPurchLine.VALIDATE("Line Discount Amount",FromPurchLine."Line Discount Amount");
          end;
          if (ToPurchLine."Document Type" = ToPurchLine."Document Type"::Order) and
             (FromPurchLine."Purchasing Code" <> '') and not FromPurchLine."Drop Shipment" and
             not FromPurchLine."Special Order"
          then
            ToPurchLine.VALIDATE("Purchasing Code",FromPurchLine."Purchasing Code");
        end;
        if (FromPurchLine.Type = FromPurchLine.Type::" ") and (FromPurchLine."No." <> '') then
          ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
        if IsDeferralToBeCopied(DeferralDocType,ToPurchLine."Document Type",FromPurchDocType) then
          ToPurchLine.VALIDATE("Deferral Code",FromPurchLine."Deferral Code");
      end else begin
        SetDefaultValuesToPurchLine(ToPurchLine,ToPurchHeader,FromPurchLine."VAT Difference");
        if IsDeferralToBeCopied(DeferralDocType,ToPurchLine."Document Type",FromPurchDocType) then
          if IsDeferralPosted(DeferralDocType,FromPurchDocType) then
            CopyPostedDeferral := true
          else
            ToPurchLine."Returns Deferral Start Date" :=
              CopyDeferrals(DeferralDocType,FromPurchLine."Document Type",FromPurchLine."Document No.",
                FromPurchLine."Line No.",ToPurchLine."Document Type",ToPurchLine."Document No.",ToPurchLine."Line No.")
        else
          if IsDeferralToBeDefaulted(DeferralDocType,ToPurchLine."Document Type",FromPurchDocType) then
            InitPurchDeferralCode(ToPurchLine);

        if FromPurchLine."Drop Shipment" or FromPurchLine."Special Order" then
          ToPurchLine."Purchasing Code" := '';
        ToPurchLine."Drop Shipment" := false;
        ToPurchLine."Special Order" := false;
        if VATPostingSetup.GET(ToPurchLine."VAT Bus. Posting Group",ToPurchLine."VAT Prod. Posting Group") then
          ToPurchLine."VAT Identifier" := VATPostingSetup."VAT Identifier";

        CopyDocLines(RecalculateAmount,ToPurchLine,FromPurchLine);

        ToPurchLine.UpdateWithWarehouseReceive;
        ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
      end;

      OnAfterUpdatePurchLine(
        ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
        CopyThisLine,RecalculateAmount,FromPurchDocType,CopyPostedDeferral);
    END;

    LOCAL PROCEDURE CheckPurchRounding@8(FromPurchLine@1000 : Record "Purchase Line";VAR RoundingLineInserted@1002 : Boolean);
    VAR
      PurchSetup@1005 : Record "Purchases & Payables Setup";
      Vendor@1004 : Record Vendor;
      VendorPostingGroup@1003 : Record "Vendor Posting Group";
    BEGIN
      if (FromPurchLine.Type <> FromPurchLine.Type::"G/L Account") or (FromPurchLine."No." = '') then
        exit;
      if not FromPurchLine."System-Created Entry" then
        exit;

      PurchSetup.GET;
      if PurchSetup."Invoice Rounding" then begin
        Vendor.GET(FromPurchLine."Pay-to Vendor No.");
        VendorPostingGroup.GET(Vendor."Vendor Posting Group");
        RoundingLineInserted := FromPurchLine."No." = VendorPostingGroup.GetInvRoundingAccount;
      end;
    END;

    LOCAL PROCEDURE CheckSalesRounding@133(FromSalesLine@1000 : Record "Sales Line";VAR RoundingLineInserted@1002 : Boolean);
    VAR
      SalesSetup@1005 : Record "Sales & Receivables Setup";
      Customer@1004 : Record Customer;
      CustomerPostingGroup@1003 : Record "Customer Posting Group";
    BEGIN
      if (FromSalesLine.Type <> FromSalesLine.Type::"G/L Account") or (FromSalesLine."No." = '') then
        exit;
      if not FromSalesLine."System-Created Entry" then
        exit;

      SalesSetup.GET;
      if SalesSetup."Invoice Rounding" then begin
        Customer.GET(FromSalesLine."Bill-to Customer No.");
        CustomerPostingGroup.GET(Customer."Customer Posting Group");
        RoundingLineInserted := FromSalesLine."No." = CustomerPostingGroup.GetInvRoundingAccount;
      end;
    END;

    LOCAL PROCEDURE CopyFromSalesDocAssgntToLine@5800(VAR ToSalesLine@1005 : Record "Sales Line";FromSalesLine@1000 : Record "Sales Line";VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntSales@1002 : Record "Item Charge Assignment (Sales)";
      ToItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
      AssignItemChargeSales@1004 : Codeunit "Item Charge Assgnt. (Sales)";
    BEGIN
      with FromSalesLine do begin
        FromItemChargeAssgntSales.RESET;
        FromItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntSales.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        if FromItemChargeAssgntSales.FIND('-') then
          repeat
            ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
            ToItemChargeAssgntSales."Document Type" := ToSalesLine."Document Type";
            ToItemChargeAssgntSales."Document No." := ToSalesLine."Document No.";
            ToItemChargeAssgntSales."Document Line No." := ToSalesLine."Line No.";
            AssignItemChargeSales.InsertItemChargeAssgnt(
              ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
              ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
              ToItemChargeAssgntSales."Item No.",ToItemChargeAssgntSales.Description,ItemChargeAssgntNextLineNo);
          until FromItemChargeAssgntSales.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CopyFromPurchDocAssgntToLine@4(VAR ToPurchLine@1008 : Record "Purchase Line";FromPurchLine@1000 : Record "Purchase Line";VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntPurch@1002 : Record "Item Charge Assignment (Purch)";
      ToItemChargeAssgntPurch@1003 : Record "Item Charge Assignment (Purch)";
      AssignItemChargePurch@1004 : Codeunit "Item Charge Assgnt. (Purch.)";
    BEGIN
      with FromPurchLine do begin
        FromItemChargeAssgntPurch.RESET;
        FromItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntPurch.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        if FromItemChargeAssgntPurch.FIND('-') then
          repeat
            ToItemChargeAssgntPurch.COPY(FromItemChargeAssgntPurch);
            ToItemChargeAssgntPurch."Document Type" := ToPurchLine."Document Type";
            ToItemChargeAssgntPurch."Document No." := ToPurchLine."Document No.";
            ToItemChargeAssgntPurch."Document Line No." := ToPurchLine."Line No.";
            AssignItemChargePurch.InsertItemChargeAssgnt(
              ToItemChargeAssgntPurch,ToItemChargeAssgntPurch."Applies-to Doc. Type",
              ToItemChargeAssgntPurch."Applies-to Doc. No.",ToItemChargeAssgntPurch."Applies-to Doc. Line No.",
              ToItemChargeAssgntPurch."Item No.",ToItemChargeAssgntPurch.Description,ItemChargeAssgntNextLineNo);
          until FromItemChargeAssgntPurch.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CopyFromPurchLineItemChargeAssign@159(FromPurchLine@1000 : Record "Purchase Line";ToPurchLine@1001 : Record "Purchase Line";FromPurchHeader@1014 : Record "Purchase Header";VAR ItemChargeAssgntNextLineNo@1006 : Integer);
    VAR
      ToItemChargeAssignmentPurch@1002 : Record "Item Charge Assignment (Purch)";
      ValueEntry@1003 : Record "Value Entry";
      ItemLedgerEntry@1004 : Record "Item Ledger Entry";
      Item@1007 : Record Item;
      Currency@1012 : Record Currency;
      ItemChargeAssgntPurch@1005 : Codeunit "Item Charge Assgnt. (Purch.)";
      CurrencyFactor@1009 : Decimal;
      QtyToAssign@1011 : Decimal;
      SumQtyToAssign@1010 : Decimal;
      RemainingQty@1008 : Decimal;
    BEGIN
      if FromPurchLine."Document Type" = FromPurchLine."Document Type"::"Credit Memo" then
        ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Credit Memo")
      else
        ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");

      ValueEntry.SETRANGE("Document No.",FromPurchLine."Document No.");
      ValueEntry.SETRANGE("Document Line No.",FromPurchLine."Line No.");
      ValueEntry.SETRANGE("Item Charge No.",FromPurchLine."No.");
      ToItemChargeAssignmentPurch."Document Type" := ToPurchLine."Document Type";
      ToItemChargeAssignmentPurch."Document No." := ToPurchLine."Document No.";
      ToItemChargeAssignmentPurch."Document Line No." := ToPurchLine."Line No.";
      ToItemChargeAssignmentPurch."Item Charge No." := FromPurchLine."No.";
      ToItemChargeAssignmentPurch."Unit Cost" := FromPurchLine."Unit Cost";

      if ValueEntry.FINDSET then begin
        repeat
          if ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.") then
            if ItemLedgerEntry."Document Type" = ItemLedgerEntry."Document Type"::"Purchase Receipt" then begin
              Item.GET(ItemLedgerEntry."Item No.");
              CurrencyFactor := FromPurchHeader."Currency Factor";

              if not Currency.GET(FromPurchHeader."Currency Code") then begin
                CurrencyFactor := 1;
                Currency.InitRoundingPrecision;
              end;

              QtyToAssign := ValueEntry."Cost Amount (Actual)" * CurrencyFactor / ToPurchLine."Unit Cost";
              SumQtyToAssign += QtyToAssign;

              ItemChargeAssgntPurch.InsertItemChargeAssgntWithAssignValues(
                ToItemChargeAssignmentPurch,ToItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
                ItemLedgerEntry."Document No.",ItemLedgerEntry."Document Line No.",ItemLedgerEntry."Item No.",Item.Description,
                QtyToAssign,0,ItemChargeAssgntNextLineNo);
            end;
        until ValueEntry.NEXT = 0;

        // Use 2 passes to correct rounding issues
        ToItemChargeAssignmentPurch.SETRANGE("Document Type",ToPurchLine."Document Type");
        ToItemChargeAssignmentPurch.SETRANGE("Document No.",ToPurchLine."Document No.");
        ToItemChargeAssignmentPurch.SETRANGE("Document Line No.",ToPurchLine."Line No.");
        if ToItemChargeAssignmentPurch.FINDSET(true) then begin
          RemainingQty := (FromPurchLine.Quantity - SumQtyToAssign) / ValueEntry.COUNT;
          SumQtyToAssign := 0;
          repeat
            AddRemainingQtyToPurchItemCharge(ToItemChargeAssignmentPurch,RemainingQty);
            SumQtyToAssign += ToItemChargeAssignmentPurch."Qty. to Assign";
          until ToItemChargeAssignmentPurch.NEXT = 0;

          RemainingQty := FromPurchLine.Quantity - SumQtyToAssign;
          if RemainingQty <> 0 then
            AddRemainingQtyToPurchItemCharge(ToItemChargeAssignmentPurch,RemainingQty);
        end;
      end;
    END;

    LOCAL PROCEDURE CopyFromSalesLineItemChargeAssign@160(FromSalesLine@1000 : Record "Sales Line";ToSalesLine@1001 : Record "Sales Line";FromSalesHeader@1002 : Record "Sales Header";VAR ItemChargeAssgntNextLineNo@1003 : Integer);
    VAR
      ValueEntry@1004 : Record "Value Entry";
      Currency@1005 : Record Currency;
      ToItemChargeAssignmentSales@1006 : Record "Item Charge Assignment (Sales)";
      ItemLedgerEntry@1012 : Record "Item Ledger Entry";
      Item@1011 : Record Item;
      ItemChargeAssgntSales@1013 : Codeunit "Item Charge Assgnt. (Sales)";
      CurrencyFactor@1010 : Decimal;
      QtyToAssign@1009 : Decimal;
      SumQtyToAssign@1008 : Decimal;
      RemainingQty@1007 : Decimal;
    BEGIN
      if FromSalesLine."Document Type" = FromSalesLine."Document Type"::"Credit Memo" then
        ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Credit Memo")
      else
        ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");

      ValueEntry.SETRANGE("Document No.",FromSalesLine."Document No.");
      ValueEntry.SETRANGE("Document Line No.",FromSalesLine."Line No.");
      ValueEntry.SETRANGE("Item Charge No.",FromSalesLine."No.");
      ToItemChargeAssignmentSales."Document Type" := ToSalesLine."Document Type";
      ToItemChargeAssignmentSales."Document No." := ToSalesLine."Document No.";
      ToItemChargeAssignmentSales."Document Line No." := ToSalesLine."Line No.";
      ToItemChargeAssignmentSales."Item Charge No." := FromSalesLine."No.";
      ToItemChargeAssignmentSales."Unit Cost" := FromSalesLine."Unit Price";

      if ValueEntry.FINDSET then begin
        repeat
          if ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.") then
            if ItemLedgerEntry."Document Type" = ItemLedgerEntry."Document Type"::"Sales Shipment" then begin
              Item.GET(ItemLedgerEntry."Item No.");
              CurrencyFactor := FromSalesHeader."Currency Factor";

              if not Currency.GET(FromSalesHeader."Currency Code") then begin
                CurrencyFactor := 1;
                Currency.InitRoundingPrecision;
              end;

              QtyToAssign := ValueEntry."Cost Amount (Actual)" * CurrencyFactor / ToSalesLine."Unit Price";
              SumQtyToAssign += QtyToAssign;

              ItemChargeAssgntSales.InsertItemChargeAssgntWithAssignValues(
                ToItemChargeAssignmentSales,ToItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
                ItemLedgerEntry."Document No.",ItemLedgerEntry."Document Line No.",ItemLedgerEntry."Item No.",Item.Description,
                QtyToAssign,0,ItemChargeAssgntNextLineNo);
            end;
        until ValueEntry.NEXT = 0;

        // Use 2 passes to correct rounding issues
        ToItemChargeAssignmentSales.SETRANGE("Document Type",ToSalesLine."Document Type");
        ToItemChargeAssignmentSales.SETRANGE("Document No.",ToSalesLine."Document No.");
        ToItemChargeAssignmentSales.SETRANGE("Document Line No.",ToSalesLine."Line No.");
        if ToItemChargeAssignmentSales.FINDSET(true) then begin
          RemainingQty := (FromSalesLine.Quantity - SumQtyToAssign) / ValueEntry.COUNT;
          SumQtyToAssign := 0;
          repeat
            AddRemainingQtyToSalesItemCharge(ToItemChargeAssignmentSales,RemainingQty);
            SumQtyToAssign += ToItemChargeAssignmentSales."Qty. to Assign";
          until ToItemChargeAssignmentSales.NEXT = 0;

          RemainingQty := FromSalesLine.Quantity - SumQtyToAssign;
          if RemainingQty <> 0 then
            AddRemainingQtyToSalesItemCharge(ToItemChargeAssignmentSales,RemainingQty);
        end;
      end;
    END;

    LOCAL PROCEDURE AddRemainingQtyToPurchItemCharge@188(VAR ItemChargeAssignmentPurch@1000 : Record "Item Charge Assignment (Purch)";RemainingQty@1001 : Decimal);
    BEGIN
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",ROUND(ItemChargeAssignmentPurch."Qty. to Assign" + RemainingQty,0.00001));
      ItemChargeAssignmentPurch.MODIFY(true);
    END;

    LOCAL PROCEDURE AddRemainingQtyToSalesItemCharge@164(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";RemainingQty@1001 : Decimal);
    BEGIN
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",ROUND(ItemChargeAssignmentSales."Qty. to Assign" + RemainingQty,0.00001));
      ItemChargeAssignmentSales.MODIFY(true);
    END;

    LOCAL PROCEDURE WarnSalesInvoicePmtDisc@11(VAR ToSalesHeader@1001 : Record "Sales Header";VAR FromSalesHeader@1002 : Record "Sales Header";FromDocType@1004 : Option;FromDocNo@1003 : Code[20]);
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      if HideDialog then
        exit;

      if IncludeHeader and
         (ToSalesHeader."Document Type" in
          [ToSalesHeader."Document Type"::"Return Order",ToSalesHeader."Document Type"::"Credit Memo"])
      then begin
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document Type",FromSalesHeader."Document Type"::Invoice);
        CustLedgEntry.SETRANGE("Document No.",FromDocNo);
        if CustLedgEntry.FINDFIRST then begin
          if (CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0) and
             (CustLedgEntry."Journal Batch Name" = '')
          then
            MESSAGE(Text006,SELECTSTR(FromDocType,Text007),FromDocNo);
        end;
      end;

      if IncludeHeader and
         (ToSalesHeader."Document Type" in
          [ToSalesHeader."Document Type"::Invoice,ToSalesHeader."Document Type"::Order,
           ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"]) and
         (FromDocType = 9)
      then begin
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document Type",FromSalesHeader."Document Type"::"Credit Memo");
        CustLedgEntry.SETRANGE("Document No.",FromDocNo);
        if CustLedgEntry.FINDFIRST then begin
          if (CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0) and
             (CustLedgEntry."Journal Batch Name" = '')
          then
            MESSAGE(Text006,SELECTSTR(FromDocType - 1,Text007),FromDocNo);
        end;
      end;
    END;

    LOCAL PROCEDURE WarnPurchInvoicePmtDisc@10(VAR ToPurchHeader@1001 : Record "Purchase Header";VAR FromPurchHeader@1002 : Record "Purchase Header";FromDocType@1004 : Option;FromDocNo@1003 : Code[20]);
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      if HideDialog then
        exit;

      if IncludeHeader and
         (ToPurchHeader."Document Type" in
          [ToPurchHeader."Document Type"::"Return Order",ToPurchHeader."Document Type"::"Credit Memo"])
      then begin
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::Invoice);
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        if VendLedgEntry.FINDFIRST then begin
          if (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) and
             (VendLedgEntry."Journal Batch Name" = '')
          then
            MESSAGE(Text009,SELECTSTR(FromDocType,Text007),FromDocNo);
        end;
      end;

      if IncludeHeader and
         (ToPurchHeader."Document Type" in
          [ToPurchHeader."Document Type"::Invoice,ToPurchHeader."Document Type"::Order,
           ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"]) and
         (FromDocType = 9)
      then begin
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::"Credit Memo");
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        if VendLedgEntry.FINDFIRST then begin
          if (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) and
             (VendLedgEntry."Journal Batch Name" = '')
          then
            MESSAGE(Text006,SELECTSTR(FromDocType - 1,Text007),FromDocNo);
        end;
      end;
    END;

    LOCAL PROCEDURE CheckCopyFromSalesHeaderAvail@89(FromSalesHeader@1000 : Record "Sales Header";ToSalesHeader@1001 : Record "Sales Header");
    VAR
      FromSalesLine@1002 : Record "Sales Line";
      ToSalesLine@1003 : Record "Sales Line";
    BEGIN
      with ToSalesHeader do
        if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then begin
          FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
          FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
          FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
          FromSalesLine.SETFILTER("No.",'<>%1','');
          if FromSalesLine.FIND('-') then
            repeat
              if FromSalesLine.Quantity > 0 then begin
                ToSalesLine."No." := FromSalesLine."No.";
                ToSalesLine."Variant Code" := FromSalesLine."Variant Code";
                ToSalesLine."Location Code" := FromSalesLine."Location Code";
                ToSalesLine."Bin Code" := FromSalesLine."Bin Code";
                ToSalesLine."Unit of Measure Code" := FromSalesLine."Unit of Measure Code";
                ToSalesLine."Qty. per Unit of Measure" := FromSalesLine."Qty. per Unit of Measure";
                ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity;
                if "Document Type" = "Document Type"::Order then
                  ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity - FromSalesLine."Qty. to Assemble to Order";
                ToSalesLine."Qty. to Assemble to Order" := 0;
                ToSalesLine."Drop Shipment" := FromSalesLine."Drop Shipment";
                CheckItemAvailable(ToSalesHeader,ToSalesLine);

                if "Document Type" = "Document Type"::Order then begin
                  ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity;
                  ToSalesLine."Qty. to Assemble to Order" := FromSalesLine."Qty. to Assemble to Order";
                  CheckATOItemAvailable(FromSalesLine,ToSalesLine);
                end;
              end;
            until FromSalesLine.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE CheckCopyFromSalesShptAvail@91(FromSalesShptHeader@1000 : Record "Sales Shipment Header";ToSalesHeader@1001 : Record "Sales Header");
    VAR
      FromSalesShptLine@1002 : Record "Sales Shipment Line";
      ToSalesLine@1003 : Record "Sales Line";
      FromPostedAsmHeader@1004 : Record "Posted Assembly Header";
    BEGIN
      if not (ToSalesHeader."Document Type" in [ToSalesHeader."Document Type"::Order,ToSalesHeader."Document Type"::Invoice]) then
        exit;

      with ToSalesLine do begin
        FromSalesShptLine.SETRANGE("Document No.",FromSalesShptHeader."No.");
        FromSalesShptLine.SETRANGE(Type,FromSalesShptLine.Type::Item);
        FromSalesShptLine.SETFILTER("No.",'<>%1','');
        if FromSalesShptLine.FIND('-') then
          repeat
            if FromSalesShptLine.Quantity > 0 then begin
              "No." := FromSalesShptLine."No.";
              "Variant Code" := FromSalesShptLine."Variant Code";
              "Location Code" := FromSalesShptLine."Location Code";
              "Bin Code" := FromSalesShptLine."Bin Code";
              "Unit of Measure Code" := FromSalesShptLine."Unit of Measure Code";
              "Qty. per Unit of Measure" := FromSalesShptLine."Qty. per Unit of Measure";
              "Outstanding Quantity" := FromSalesShptLine.Quantity;

              if "Document Type" = "Document Type"::Order then
                if FromSalesShptLine.AsmToShipmentExists(FromPostedAsmHeader) then
                  "Outstanding Quantity" := FromSalesShptLine.Quantity - FromPostedAsmHeader.Quantity;
              "Qty. to Assemble to Order" := 0;
              "Drop Shipment" := FromSalesShptLine."Drop Shipment";
              CheckItemAvailable(ToSalesHeader,ToSalesLine);

              if "Document Type" = "Document Type"::Order then
                if FromSalesShptLine.AsmToShipmentExists(FromPostedAsmHeader) then begin
                  "Qty. to Assemble to Order" := FromPostedAsmHeader.Quantity;
                  CheckPostedATOItemAvailable(FromSalesShptLine,ToSalesLine);
                end;
            end;
          until FromSalesShptLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckCopyFromSalesInvoiceAvail@96(FromSalesInvHeader@1001 : Record "Sales Invoice Header";ToSalesHeader@1000 : Record "Sales Header");
    VAR
      FromSalesInvLine@1002 : Record "Sales Invoice Line";
      ToSalesLine@1003 : Record "Sales Line";
    BEGIN
      if not (ToSalesHeader."Document Type" in [ToSalesHeader."Document Type"::Order,ToSalesHeader."Document Type"::Invoice]) then
        exit;

      with ToSalesLine do begin
        FromSalesInvLine.SETRANGE("Document No.",FromSalesInvHeader."No.");
        FromSalesInvLine.SETRANGE(Type,FromSalesInvLine.Type::Item);
        FromSalesInvLine.SETFILTER("No.",'<>%1','');
        FromSalesInvLine.SETRANGE("Prepayment Line",false);
        if FromSalesInvLine.FIND('-') then
          repeat
            if FromSalesInvLine.Quantity > 0 then begin
              "No." := FromSalesInvLine."No.";
              "Variant Code" := FromSalesInvLine."Variant Code";
              "Location Code" := FromSalesInvLine."Location Code";
              "Bin Code" := FromSalesInvLine."Bin Code";
              "Unit of Measure Code" := FromSalesInvLine."Unit of Measure Code";
              "Qty. per Unit of Measure" := FromSalesInvLine."Qty. per Unit of Measure";
              "Outstanding Quantity" := FromSalesInvLine.Quantity;
              "Drop Shipment" := FromSalesInvLine."Drop Shipment";
              CheckItemAvailable(ToSalesHeader,ToSalesLine);
            end;
          until FromSalesInvLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckCopyFromSalesRetRcptAvail@97(FromReturnRcptHeader@1001 : Record "Return Receipt Header";ToSalesHeader@1000 : Record "Sales Header");
    VAR
      FromReturnRcptLine@1002 : Record "Return Receipt Line";
      ToSalesLine@1003 : Record "Sales Line";
    BEGIN
      if not (ToSalesHeader."Document Type" in [ToSalesHeader."Document Type"::Order,ToSalesHeader."Document Type"::Invoice]) then
        exit;

      with ToSalesLine do begin
        FromReturnRcptLine.SETRANGE("Document No.",FromReturnRcptHeader."No.");
        FromReturnRcptLine.SETRANGE(Type,FromReturnRcptLine.Type::Item);
        FromReturnRcptLine.SETFILTER("No.",'<>%1','');
        if FromReturnRcptLine.FIND('-') then
          repeat
            if FromReturnRcptLine.Quantity > 0 then begin
              "No." := FromReturnRcptLine."No.";
              "Variant Code" := FromReturnRcptLine."Variant Code";
              "Location Code" := FromReturnRcptLine."Location Code";
              "Bin Code" := FromReturnRcptLine."Bin Code";
              "Unit of Measure Code" := FromReturnRcptLine."Unit of Measure Code";
              "Qty. per Unit of Measure" := FromReturnRcptLine."Qty. per Unit of Measure";
              "Outstanding Quantity" := FromReturnRcptLine.Quantity;
              "Drop Shipment" := false;
              CheckItemAvailable(ToSalesHeader,ToSalesLine);
            end;
          until FromReturnRcptLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckCopyFromSalesCrMemoAvail@100(FromSalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";ToSalesHeader@1001 : Record "Sales Header");
    VAR
      FromSalesCrMemoLine@1003 : Record "Sales Cr.Memo Line";
      ToSalesLine@1002 : Record "Sales Line";
    BEGIN
      if not (ToSalesHeader."Document Type" in [ToSalesHeader."Document Type"::Order,ToSalesHeader."Document Type"::Invoice]) then
        exit;

      with ToSalesLine do begin
        FromSalesCrMemoLine.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
        FromSalesCrMemoLine.SETRANGE(Type,FromSalesCrMemoLine.Type::Item);
        FromSalesCrMemoLine.SETFILTER("No.",'<>%1','');
        FromSalesCrMemoLine.SETRANGE("Prepayment Line",false);
        if FromSalesCrMemoLine.FIND('-') then
          repeat
            if FromSalesCrMemoLine.Quantity > 0 then begin
              "No." := FromSalesCrMemoLine."No.";
              "Variant Code" := FromSalesCrMemoLine."Variant Code";
              "Location Code" := FromSalesCrMemoLine."Location Code";
              "Bin Code" := FromSalesCrMemoLine."Bin Code";
              "Unit of Measure Code" := FromSalesCrMemoLine."Unit of Measure Code";
              "Qty. per Unit of Measure" := FromSalesCrMemoLine."Qty. per Unit of Measure";
              "Outstanding Quantity" := FromSalesCrMemoLine.Quantity;
              "Drop Shipment" := false;
              CheckItemAvailable(ToSalesHeader,ToSalesLine);
            end;
          until FromSalesCrMemoLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckItemAvailable@5(VAR ToSalesHeader@1001 : Record "Sales Header";VAR ToSalesLine@1000 : Record "Sales Line");
    BEGIN
      if HideDialog then
        exit;

      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine.Type := ToSalesLine.Type::Item;
      ToSalesLine."Purchase Order No." := '';
      ToSalesLine."Purch. Order Line No." := 0;
      ToSalesLine."Drop Shipment" :=
        not RecalculateLines and ToSalesLine."Drop Shipment" and
        (ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Order);

      if ToSalesLine."Shipment Date" = 0D then begin
        if ToSalesHeader."Shipment Date" <> 0D then
          ToSalesLine.VALIDATE("Shipment Date",ToSalesHeader."Shipment Date")
        else
          ToSalesLine.VALIDATE("Shipment Date",WORKDATE);
      end;

      if ItemCheckAvail.SalesLineCheck(ToSalesLine) then
        ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    LOCAL PROCEDURE CheckATOItemAvailable@26(VAR FromSalesLine@1001 : Record "Sales Line";ToSalesLine@1000 : Record "Sales Line");
    VAR
      ATOLink@1002 : Record "Assemble-to-Order Link";
      AsmHeader@1005 : Record "Assembly Header";
      TempAsmHeader@1003 : TEMPORARY Record "Assembly Header";
      TempAsmLine@1004 : TEMPORARY Record "Assembly Line";
    BEGIN
      if HideDialog then
        exit;

      if ATOLink.ATOCopyCheckAvailShowWarning(
           AsmHeader,ToSalesLine,TempAsmHeader,TempAsmLine,
           not FromSalesLine.AsmToOrderExists(AsmHeader))
      then
        if ItemCheckAvail.ShowAsmWarningYesNo(TempAsmHeader,TempAsmLine) then
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    LOCAL PROCEDURE CheckPostedATOItemAvailable@88(VAR FromSalesShptLine@1001 : Record "Sales Shipment Line";ToSalesLine@1000 : Record "Sales Line");
    VAR
      ATOLink@1002 : Record "Assemble-to-Order Link";
      PostedAsmHeader@1005 : Record "Posted Assembly Header";
      TempAsmHeader@1003 : TEMPORARY Record "Assembly Header";
      TempAsmLine@1004 : TEMPORARY Record "Assembly Line";
    BEGIN
      if HideDialog then
        exit;

      if ATOLink.PstdATOCopyCheckAvailShowWarn(
           PostedAsmHeader,ToSalesLine,TempAsmHeader,TempAsmLine,
           not FromSalesShptLine.AsmToShipmentExists(PostedAsmHeader))
      then
        if ItemCheckAvail.ShowAsmWarningYesNo(TempAsmHeader,TempAsmLine) then
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    [External]
    PROCEDURE CopyServContractLines@27(ToServContractHeader@1002 : Record "Service Contract Header";FromDocType@1000 : Option;FromDocNo@1003 : Code[20];VAR FromServContractLine@1005 : Record "Service Contract Line") AllLinesCopied : Boolean;
    VAR
      ExistingServContractLine@1001 : Record "Service Contract Line";
      LineNo@1004 : Integer;
    BEGIN
      if FromDocNo = '' then
        ERROR(Text000);

      ExistingServContractLine.LOCKTABLE;
      ExistingServContractLine.RESET;
      ExistingServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
      ExistingServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
      if ExistingServContractLine.FINDLAST then
        LineNo := ExistingServContractLine."Line No." + 10000
      else
        LineNo := 10000;

      AllLinesCopied := true;
      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromDocType);
      FromServContractLine.SETRANGE("Contract No.",FromDocNo);
      if FromServContractLine.FIND('-') then
        repeat
          if not ProcessServContractLine(
               ToServContractHeader,
               FromServContractLine,
               LineNo)
          then begin
            AllLinesCopied := false;
            FromServContractLine.MARK(true)
          end else
            LineNo := LineNo + 10000
        until FromServContractLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ServContractHeaderDocType@28(DocType@1001 : Option) : Integer;
    VAR
      ServContractHeader@1000 : Record "Service Contract Header";
    BEGIN
      case DocType of
        ServDocType::Quote:
          exit(ServContractHeader."Contract Type"::Quote);
        ServDocType::Contract:
          exit(ServContractHeader."Contract Type"::Contract);
      end;
    END;

    LOCAL PROCEDURE ProcessServContractLine@29(ToServContractHeader@1003 : Record "Service Contract Header";VAR FromServContractLine@1000 : Record "Service Contract Line";LineNo@1005 : Integer) : Boolean;
    VAR
      ToServContractLine@1007 : Record "Service Contract Line";
      ExistingServContractLine@1006 : Record "Service Contract Line";
      ServItem@1004 : Record "Service Item";
    BEGIN
      if FromServContractLine."Service Item No." <> '' then begin
        ServItem.GET(FromServContractLine."Service Item No.");
        if ServItem."Customer No." <> ToServContractHeader."Customer No." then
          exit(false);

        ExistingServContractLine.RESET;
        ExistingServContractLine.SETCURRENTKEY("Service Item No.","Contract Status");
        ExistingServContractLine.SETRANGE("Service Item No.",FromServContractLine."Service Item No.");
        ExistingServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
        ExistingServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
        if not ExistingServContractLine.ISEMPTY then
          exit(false);
      end;

      ToServContractLine := FromServContractLine;
      ToServContractLine."Last Planned Service Date" := 0D;
      ToServContractLine."Last Service Date" := 0D;
      ToServContractLine."Last Preventive Maint. Date" := 0D;
      ToServContractLine."Invoiced to Date" := 0D;
      ToServContractLine."Contract Type" := ToServContractHeader."Contract Type";
      ToServContractLine."Contract No." := ToServContractHeader."Contract No.";
      ToServContractLine."Line No." := LineNo;
      ToServContractLine."New Line" := true;
      ToServContractLine.Credited := false;
      ToServContractLine.SetupNewLine;
      ToServContractLine.INSERT(true);
      exit(true);
    END;

    [External]
    PROCEDURE CopySalesShptLinesToDoc@39(ToSalesHeader@1002 : Record "Sales Header";VAR FromSalesShptLine@1001 : Record "Sales Shipment Line";VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1017 : TEMPORARY Record "Item Ledger Entry";
      FromSalesHeader@1006 : Record "Sales Header";
      FromSalesLine@1003 : Record "Sales Line";
      ToSalesLine@1010 : Record "Sales Line";
      FromSalesLineBuf@1007 : TEMPORARY Record "Sales Line";
      FromSalesShptHeader@1005 : Record "Sales Shipment Header";
      TempItemTrkgEntry@1021 : TEMPORARY Record "Reservation Entry";
      TempDocSalesLine@1012 : TEMPORARY Record "Sales Line";
      ItemTrackingMgt@1016 : Codeunit "Item Tracking Management";
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1019 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1022 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1020 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToSalesHeader."Currency Code");
      OpenWindow;

      with FromSalesShptLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromSalesShptHeader."No." <> "Document No." then begin
              FromSalesShptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromSalesShptHeader.TESTFIELD("Prices Including VAT",ToSalesHeader."Prices Including VAT");
            FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,0,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesShptLine);
            FromSalesLine."Appl.-from Item Entry" := 0;

            if "Document No." <> OldDocNo then begin
              OldDocNo := "Document No.";
              InsertDocNoLine := true;
            end;

            SplitLine := true;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            if not SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntry,FromSalesLineBuf,
                 FromSalesLine,TempDocSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,true)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,TempDocSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,true)
              else
                SplitLine := false;

            if not SplitLine then begin
              FromSalesLineBuf := FromSalesLine;
              CopyLine := true;
            end else
              CopyLine := FromSalesLineBuf.FINDSET and FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            if CopyLine then begin
              NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
              AsmHdrExistsForFromDocLine := AsmToShipmentExists(PostedAsmHeader);
              InitAsmCopyHandling(true);
              if AsmHdrExistsForFromDocLine then begin
                QtyToAsmToOrder := Quantity;
                QtyToAsmToOrderBase := "Quantity (Base)";
                GenerateAsmDataFromPosted(PostedAsmHeader,ToSalesHeader."Document Type");
              end;
              if InsertDocNoLine then begin
                InsertOldSalesDocNoLine(ToSalesHeader,"Document No.",1,NextLineNo);
                InsertDocNoLine := false;
              end;
              repeat
                ToLineCounter := ToLineCounter + 1;
                if IsTimeForUpdate then
                  Window.UPDATE(2,ToLineCounter);
                if CopySalesLine(
                     ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLineBuf,NextLineNo,LinesNotCopied,
                     false,DeferralTypeForSalesDoc(SalesDocType::"Posted Shipment"),CopyPostedDeferral,
                     FromSalesLineBuf."Line No.")
                then
                  if CopyItemTrkg then begin
                    if SplitLine then
                      ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                        TempItemTrkgEntry,TempTrkgItemLedgEntry,false,FromSalesLineBuf."Document No.",FromSalesLineBuf."Line No.")
                    else
                      ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntry);

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                      TempTrkgItemLedgEntry,ToSalesLine,
                      FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                      FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",true);
                  end;
              until FromSalesLineBuf.NEXT = 0;
            end;
          until NEXT = 0;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopySalesInvLinesToDoc@34(ToSalesHeader@1002 : Record "Sales Header";VAR FromSalesInvLine@1001 : Record "Sales Invoice Line";VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record "Item Ledger Entry";
      FromSalesHeader@1006 : Record "Sales Header";
      FromSalesLine@1003 : Record "Sales Line";
      FromSalesLine2@1022 : Record "Sales Line";
      ToSalesLine@1010 : Record "Sales Line";
      FromSalesLineBuf@1007 : TEMPORARY Record "Sales Line";
      FromSalesInvHeader@1005 : Record "Sales Invoice Header";
      TempItemTrkgEntry@1009 : TEMPORARY Record "Reservation Entry";
      TempDocSalesLine@1026 : TEMPORARY Record "Sales Line";
      ItemTrackingMgt@1018 : Codeunit "Item Tracking Management";
      OldInvDocNo@1011 : Code[20];
      OldShptDocNo@1014 : Code[20];
      OldBufDocNo@1037 : Code[20];
      NextLineNo@1000 : Integer;
      SalesCombDocLineNo@1015 : Integer;
      NextItemTrkgEntryNo@1023 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1024 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1021 : Boolean;
      FillExactCostRevLink@1013 : Boolean;
      SalesInvLineCount@1040 : Integer;
      SalesLineCount@1041 : Integer;
      BufferCount@1042 : Integer;
      FirstLineShipped@1016 : Boolean;
      FirstLineText@1017 : Boolean;
      ItemChargeAssgntNextLineNo@1027 : Integer;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToSalesHeader."Currency Code");
      FromSalesLineBuf.RESET;
      FromSalesLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;
      InitAsmCopyHandling(true);
      TempSalesInvLine.DELETEALL;

      // Fill sales line buffer
      SalesInvLineCount := 0;
      FirstLineText := false;
      with FromSalesInvLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            SetTempSalesInvLine(FromSalesInvLine,TempSalesInvLine,SalesInvLineCount,NextLineNo,FirstLineText);
            if FromSalesInvHeader."No." <> "Document No." then begin
              FromSalesInvHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromSalesInvHeader.TESTFIELD("Prices Including VAT",ToSalesHeader."Prices Including VAT");
            FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
            FillExactCostRevLink := IsSalesFillExactCostRevLink(ToSalesHeader,1,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
            FromSalesLine."Appl.-from Item Entry" := 0;
            // Reuse fields to buffer invoice line information
            FromSalesLine."Shipment No." := "Document No.";
            FromSalesLine."Shipment Line No." := 0;
            FromSalesLine."Return Receipt No." := '';
            FromSalesLine."Return Receipt Line No." := "Line No.";

            SplitLine := true;
            GetItemLedgEntries(ItemLedgEntryBuf,true);
            if not SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntryBuf,FromSalesLineBuf,
                 FromSalesLine,TempDocSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,false)
            then
              if CopyItemTrkg then
                SplitLine := SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,TempDocSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,false)
              else
                SplitLine := false;

            if not SplitLine then
              CopySalesLinesToBuffer(
                FromSalesHeader,FromSalesLine,FromSalesLine2,FromSalesLineBuf,
                ToSalesHeader,TempDocSalesLine,"Document No.",NextLineNo);
          until NEXT = 0;

      // Create sales line from buffer
      Window.UPDATE(1,FromLineCounter);
      BufferCount := 0;
      FirstLineShipped := true;
      with FromSalesLineBuf do begin
        // Sorting according to Sales Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        SalesLineCount := 0;
        if FINDSET then
          repeat
            if Type = Type::Item then
              SalesLineCount += 1;
          until NEXT = 0;
        if FINDSET then begin
          NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
          repeat
            ToLineCounter := ToLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(2,ToLineCounter);
            if "Shipment No." <> OldInvDocNo then begin
              OldInvDocNo := "Shipment No.";
              OldShptDocNo := '';
              FirstLineShipped := true;
              InsertOldSalesDocNoLine(ToSalesHeader,OldInvDocNo,2,NextLineNo);
            end;
            CheckFirstLineShipped("Document No.","Shipment Line No.",SalesCombDocLineNo,NextLineNo,FirstLineShipped);
            if ("Document No." <> OldShptDocNo) and ("Shipment Line No." > 0) then begin
              if FirstLineShipped then
                SalesCombDocLineNo := NextLineNo;
              OldShptDocNo := "Document No.";
              InsertOldSalesCombDocNoLine(ToSalesHeader,OldInvDocNo,OldShptDocNo,SalesCombDocLineNo,true);
              NextLineNo := NextLineNo + 10000;
              FirstLineShipped := true;
            end;

            InitFromSalesLine2(FromSalesLine2,FromSalesLineBuf);
            if GetSalesDocNo(TempDocSalesLine,"Line No.") <> OldBufDocNo then begin
              OldBufDocNo := GetSalesDocNo(TempDocSalesLine,"Line No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            AsmHdrExistsForFromDocLine := false;
            if Type = Type::Item then begin
              BufferCount += 1;
              AsmHdrExistsForFromDocLine := RetrieveSalesInvLine(FromSalesLine2,BufferCount,SalesLineCount = SalesInvLineCount);
              InitAsmCopyHandling(true);
              if AsmHdrExistsForFromDocLine then begin
                AsmHdrExistsForFromDocLine := GetAsmDataFromSalesInvLine(ToSalesHeader."Document Type");
                if AsmHdrExistsForFromDocLine then begin
                  QtyToAsmToOrder := TempSalesInvLine.Quantity;
                  QtyToAsmToOrderBase := TempSalesInvLine.Quantity * TempSalesInvLine."Qty. per Unit of Measure";
                end;
              end;
            end;
            if CopySalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine2,NextLineNo,LinesNotCopied,
                 "Return Receipt No." = '',DeferralTypeForSalesDoc(SalesDocType::"Posted Invoice"),CopyPostedDeferral,
                 GetSalesLineNo(TempDocSalesLine,FromSalesLine2."Line No."))
            then begin
              if CopyPostedDeferral then
                CopySalesPostedDeferrals(ToSalesLine,DeferralUtilities.GetSalesDeferralDocType,
                  DeferralTypeForSalesDoc(SalesDocType::"Posted Invoice"),"Shipment No.","Return Receipt Line No.",
                  ToSalesLine."Document Type",ToSalesLine."Document No.",ToSalesLine."Line No.");
              FromSalesInvLine.GET("Shipment No.","Return Receipt Line No.");

              // copy item charges
              if Type = Type::"Charge (Item)" then begin
                FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
                FromSalesLine."Document Type" := FromSalesLine."Document Type"::Invoice;
                CopyFromSalesLineItemChargeAssign(FromSalesLine,ToSalesLine,FromSalesHeader,ItemChargeAssgntNextLineNo);
              end;

              // copy item tracking
              if (Type = Type::Item) and (Quantity <> 0) and SalesDocCanReceiveTracking(ToSalesHeader) then begin
                FromSalesInvLine."Document No." := OldInvDocNo;
                FromSalesInvLine."Line No." := "Return Receipt Line No.";
                FromSalesInvLine.GetItemLedgEntries(ItemLedgEntryBuf,true);
                if IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) then begin
                  if MoveNegLines or not ExactCostRevMandatory then
                    ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                  else
                    ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                      TempItemTrkgEntry,TempTrkgItemLedgEntry,false,"Document No.","Line No.");

                  ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(TempTrkgItemLedgEntry,ToSalesLine,
                    FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                    FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",false);
                end;
              end;
            end;
          until NEXT = 0;
        end;
      end;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopySalesCrMemoLinesToDoc@31(ToSalesHeader@1002 : Record "Sales Header";VAR FromSalesCrMemoLine@1001 : Record "Sales Cr.Memo Line";VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record "Item Ledger Entry";
      FromSalesHeader@1006 : Record "Sales Header";
      FromSalesLine@1003 : Record "Sales Line";
      FromSalesLine2@1022 : Record "Sales Line";
      ToSalesLine@1010 : Record "Sales Line";
      FromSalesLineBuf@1007 : TEMPORARY Record "Sales Line";
      FromSalesCrMemoHeader@1005 : Record "Sales Cr.Memo Header";
      TempItemTrkgEntry@1009 : TEMPORARY Record "Reservation Entry";
      TempDocSalesLine@1026 : TEMPORARY Record "Sales Line";
      ItemTrackingMgt@1018 : Codeunit "Item Tracking Management";
      OldCrMemoDocNo@1011 : Code[20];
      OldReturnRcptDocNo@1014 : Code[20];
      OldBufDocNo@1016 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1023 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1024 : Integer;
      ItemChargeAssgntNextLineNo@1015 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1021 : Boolean;
      FillExactCostRevLink@1013 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToSalesHeader."Currency Code");
      FromSalesLineBuf.RESET;
      FromSalesLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill sales line buffer
      with FromSalesCrMemoLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromSalesCrMemoHeader."No." <> "Document No." then begin
              FromSalesCrMemoHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,3,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesCrMemoLine);
            FromSalesLine."Appl.-from Item Entry" := 0;
            // Reuse fields to buffer credit memo line information
            FromSalesLine."Shipment No." := "Document No.";
            FromSalesLine."Shipment Line No." := 0;
            FromSalesLine."Return Receipt No." := '';
            FromSalesLine."Return Receipt Line No." := "Line No.";

            SplitLine := true;
            GetItemLedgEntries(ItemLedgEntryBuf,true);
            if not SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntryBuf,FromSalesLineBuf,
                 FromSalesLine,TempDocSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,false)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,TempDocSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,false)
              else
                SplitLine := false;

            if not SplitLine then
              CopySalesLinesToBuffer(
                FromSalesHeader,FromSalesLine,FromSalesLine2,FromSalesLineBuf,
                ToSalesHeader,TempDocSalesLine,"Document No.",NextLineNo);
          until NEXT = 0;

      // Create sales line from buffer
      Window.UPDATE(1,FromLineCounter);
      with FromSalesLineBuf do begin
        // Sorting according to Sales Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        if FINDSET then begin
          NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
          repeat
            ToLineCounter := ToLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(2,ToLineCounter);
            if "Shipment No." <> OldCrMemoDocNo then begin
              OldCrMemoDocNo := "Shipment No.";
              OldReturnRcptDocNo := '';
              InsertOldSalesDocNoLine(ToSalesHeader,OldCrMemoDocNo,4,NextLineNo);
            end;
            if ("Document No." <> OldReturnRcptDocNo) and ("Shipment Line No." > 0) then begin
              OldReturnRcptDocNo := "Document No.";
              InsertOldSalesCombDocNoLine(ToSalesHeader,OldCrMemoDocNo,OldReturnRcptDocNo,NextLineNo,false);
            end;

            // Empty buffer fields
            FromSalesLine2 := FromSalesLineBuf;
            FromSalesLine2."Shipment No." := '';
            FromSalesLine2."Shipment Line No." := 0;
            FromSalesLine2."Return Receipt No." := '';
            FromSalesLine2."Return Receipt Line No." := 0;
            if GetSalesDocNo(TempDocSalesLine,"Line No.") <> OldBufDocNo then begin
              OldBufDocNo := GetSalesDocNo(TempDocSalesLine,"Line No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            if CopySalesLine(
                 ToSalesHeader,ToSalesLine,FromSalesHeader,
                 FromSalesLine2,NextLineNo,LinesNotCopied,"Return Receipt No." = '',
                 DeferralTypeForSalesDoc(SalesDocType::"Posted Credit Memo"),CopyPostedDeferral,
                 GetSalesLineNo(TempDocSalesLine,FromSalesLine2."Line No."))
            then begin
              if CopyPostedDeferral then
                CopySalesPostedDeferrals(ToSalesLine,DeferralUtilities.GetSalesDeferralDocType,
                  DeferralTypeForSalesDoc(SalesDocType::"Posted Credit Memo"),"Shipment No." ,
                  "Return Receipt Line No.",ToSalesLine."Document Type",ToSalesLine."Document No.",ToSalesLine."Line No.");
              FromSalesCrMemoLine.GET("Shipment No.","Return Receipt Line No.");

              // copy item charges
              if Type = Type::"Charge (Item)" then begin
                FromSalesLine.TRANSFERFIELDS(FromSalesCrMemoLine);
                FromSalesLine."Document Type" := FromSalesLine."Document Type"::"Credit Memo";
                CopyFromSalesLineItemChargeAssign(FromSalesLine,ToSalesLine,FromSalesHeader,ItemChargeAssgntNextLineNo);
              end;
              // copy item tracking
              if (Type = Type::Item) and (Quantity <> 0) then begin
                FromSalesCrMemoLine."Document No." := OldCrMemoDocNo;
                FromSalesCrMemoLine."Line No." := "Return Receipt Line No.";
                FromSalesCrMemoLine.GetItemLedgEntries(ItemLedgEntryBuf,true);
                if IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) then begin
                  if MoveNegLines or not ExactCostRevMandatory then
                    ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                  else
                    ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                      TempItemTrkgEntry,TempTrkgItemLedgEntry,false,"Document No.","Line No.");

                  ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                    TempTrkgItemLedgEntry,ToSalesLine,
                    FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                    FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",false);
                end;
              end;
            end;
          until NEXT = 0;
        end;
      end;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopySalesReturnRcptLinesToDoc@40(ToSalesHeader@1002 : Record "Sales Header";VAR FromReturnRcptLine@1001 : Record "Return Receipt Line";VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1019 : TEMPORARY Record "Item Ledger Entry";
      FromSalesHeader@1006 : Record "Sales Header";
      FromSalesLine@1003 : Record "Sales Line";
      ToSalesLine@1010 : Record "Sales Line";
      FromSalesLineBuf@1007 : TEMPORARY Record "Sales Line";
      FromReturnRcptHeader@1005 : Record "Return Receipt Header";
      TempItemTrkgEntry@1015 : TEMPORARY Record "Reservation Entry";
      TempDocSalesLine@1013 : TEMPORARY Record "Sales Line";
      ItemTrackingMgt@1020 : Codeunit "Item Tracking Management";
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1022 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1017 : Boolean;
      FillExactCostRevLink@1012 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToSalesHeader."Currency Code");
      OpenWindow;

      with FromReturnRcptLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromReturnRcptHeader."No." <> "Document No." then begin
              FromReturnRcptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,2,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromReturnRcptLine);
            FromSalesLine."Appl.-from Item Entry" := 0;

            if "Document No." <> OldDocNo then begin
              OldDocNo := "Document No.";
              InsertDocNoLine := true;
            end;

            SplitLine := true;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            if not SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntry,FromSalesLineBuf,
                 FromSalesLine,TempDocSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,true)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,TempDocSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,true)
              else
                SplitLine := false;

            if not SplitLine then begin
              FromSalesLineBuf := FromSalesLine;
              CopyLine := true;
            end else
              CopyLine := FromSalesLineBuf.FINDSET and FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            if CopyLine then begin
              NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
              if InsertDocNoLine then begin
                InsertOldSalesDocNoLine(ToSalesHeader,"Document No.",3,NextLineNo);
                InsertDocNoLine := false;
              end;
              repeat
                ToLineCounter := ToLineCounter + 1;
                if IsTimeForUpdate then
                  Window.UPDATE(2,ToLineCounter);
                if CopySalesLine(
                     ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLineBuf,NextLineNo,LinesNotCopied,
                     false,DeferralTypeForSalesDoc(SalesDocType::"Posted Return Receipt"),CopyPostedDeferral,
                     FromSalesLineBuf."Line No.")
                then
                  if CopyItemTrkg then begin
                    if SplitLine then
                      ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                        TempItemTrkgEntry,TempTrkgItemLedgEntry,false,FromSalesLineBuf."Document No.",FromSalesLineBuf."Line No.")
                    else
                      ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntry);

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                      TempTrkgItemLedgEntry,ToSalesLine,
                      FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                      FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",true);
                  end;
              until FromSalesLineBuf.NEXT = 0
            end;
          until NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopySalesLinesToBuffer@144(FromSalesHeader@1003 : Record "Sales Header";FromSalesLine@1002 : Record "Sales Line";VAR FromSalesLine2@1000 : Record "Sales Line";VAR TempSalesLineBuf@1001 : TEMPORARY Record "Sales Line";ToSalesHeader@1005 : Record "Sales Header";VAR TempDocSalesLine@1007 : TEMPORARY Record "Sales Line";DocNo@1006 : Code[20];VAR NextLineNo@1004 : Integer);
    BEGIN
      FromSalesLine2 := TempSalesLineBuf;
      TempSalesLineBuf := FromSalesLine;
      TempSalesLineBuf."Document No." := FromSalesLine2."Document No.";
      TempSalesLineBuf."Shipment Line No." := FromSalesLine2."Shipment Line No.";
      TempSalesLineBuf."Line No." := NextLineNo;
      NextLineNo := NextLineNo + 10000;
      if not IsRecalculateAmount(
           FromSalesHeader."Currency Code",ToSalesHeader."Currency Code",
           FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT")
      then
        TempSalesLineBuf."Return Receipt No." := DocNo;
      ReCalcSalesLine(FromSalesHeader,ToSalesHeader,TempSalesLineBuf);
      TempSalesLineBuf.INSERT;
      AddSalesDocLine(TempDocSalesLine,TempSalesLineBuf."Line No.",DocNo,FromSalesLine."Line No.");
    END;

    LOCAL PROCEDURE SplitPstdSalesLinesPerILE@35(ToSalesHeader@1011 : Record "Sales Header";FromSalesHeader@1017 : Record "Sales Header";VAR ItemLedgEntry@1003 : Record "Item Ledger Entry";VAR FromSalesLineBuf@1004 : Record "Sales Line";FromSalesLine@1001 : Record "Sales Line";VAR TempDocSalesLine@1008 : TEMPORARY Record "Sales Line";VAR NextLineNo@1006 : Integer;VAR CopyItemTrkg@1002 : Boolean;VAR MissingExCostRevLink@1005 : Boolean;FillExactCostRevLink@1000 : Boolean;FromShptOrRcpt@1016 : Boolean) : Boolean;
    VAR
      OrgQtyBase@1007 : Decimal;
    BEGIN
      if FromShptOrRcpt then begin
        FromSalesLineBuf.RESET;
        FromSalesLineBuf.DELETEALL;
      end else
        FromSalesLineBuf.INIT;

      CopyItemTrkg := false;

      if (FromSalesLine.Type <> FromSalesLine.Type::Item) or (FromSalesLine.Quantity = 0) then
        exit(false);
      if IsCopyItemTrkg(ItemLedgEntry,CopyItemTrkg,FillExactCostRevLink) or
         not FillExactCostRevLink or MoveNegLines or
         not ExactCostRevMandatory
      then
        exit(false);

      with ItemLedgEntry do begin
        FINDSET;
        if Quantity >= 0 then begin
          FromSalesLineBuf."Document No." := "Document No.";
          if GetSalesDocType(ItemLedgEntry) in
             [FromSalesLineBuf."Document Type"::Order,FromSalesLineBuf."Document Type"::"Return Order"]
          then
            FromSalesLineBuf."Shipment Line No." := 1;
          exit(false);
        end;
        OrgQtyBase := FromSalesLine."Quantity (Base)";
        repeat
          if "Shipped Qty. Not Returned" = 0 then
            LinesApplied := true;

          if "Shipped Qty. Not Returned" < 0 then begin
            FromSalesLineBuf := FromSalesLine;

            if -"Shipped Qty. Not Returned" < ABS(FromSalesLine."Quantity (Base)") then begin
              if FromSalesLine."Quantity (Base)" > 0 then
                FromSalesLineBuf."Quantity (Base)" := -"Shipped Qty. Not Returned"
              else
                FromSalesLineBuf."Quantity (Base)" := "Shipped Qty. Not Returned";
              if FromSalesLineBuf."Qty. per Unit of Measure" = 0 then
                FromSalesLineBuf.Quantity := FromSalesLineBuf."Quantity (Base)"
              else
                FromSalesLineBuf.Quantity :=
                  ROUND(FromSalesLineBuf."Quantity (Base)" / FromSalesLineBuf."Qty. per Unit of Measure",0.00001);
            end;
            FromSalesLine."Quantity (Base)" := FromSalesLine."Quantity (Base)" - FromSalesLineBuf."Quantity (Base)";
            FromSalesLine.Quantity := FromSalesLine.Quantity - FromSalesLineBuf.Quantity;
            FromSalesLineBuf."Appl.-from Item Entry" := "Entry No.";
            NextLineNo := NextLineNo + 1;
            FromSalesLineBuf."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            FromSalesLineBuf."Document No." := "Document No.";
            if GetSalesDocType(ItemLedgEntry) in
               [FromSalesLineBuf."Document Type"::Order,FromSalesLineBuf."Document Type"::"Return Order"]
            then
              FromSalesLineBuf."Shipment Line No." := 1;

            if not FromShptOrRcpt then
              UpdateRevSalesLineAmount(
                FromSalesLineBuf,OrgQtyBase,
                FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT");

            FromSalesLineBuf.INSERT;
            AddSalesDocLine(TempDocSalesLine,FromSalesLineBuf."Line No.","Document No.",FromSalesLine."Line No.");
          end;
        until (NEXT = 0) or (FromSalesLine."Quantity (Base)" = 0);

        if (FromSalesLine."Quantity (Base)" <> 0) and FillExactCostRevLink then
          MissingExCostRevLink := true;
        CheckUnappliedLines(LinesApplied,MissingExCostRevLink);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE SplitSalesDocLinesPerItemTrkg@57(VAR ItemLedgEntry@1003 : Record "Item Ledger Entry";VAR TempItemTrkgEntry@1002 : TEMPORARY Record "Reservation Entry";VAR FromSalesLineBuf@1004 : Record "Sales Line";FromSalesLine@1001 : Record "Sales Line";VAR TempDocSalesLine@1011 : TEMPORARY Record "Sales Line";VAR NextLineNo@1009 : Integer;VAR NextItemTrkgEntryNo@1007 : Integer;VAR MissingExCostRevLink@1005 : Boolean;FromShptOrRcpt@1010 : Boolean) : Boolean;
    VAR
      SalesLineBuf@1008 : ARRAY [2] OF TEMPORARY Record "Sales Line";
      Tracked@1013 : Boolean;
      ReversibleQtyBase@1000 : Decimal;
      SignFactor@1006 : Integer;
      i@1012 : Integer;
    BEGIN
      if FromShptOrRcpt then begin
        FromSalesLineBuf.RESET;
        FromSalesLineBuf.DELETEALL;
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.DELETEALL;
      end else
        FromSalesLineBuf.INIT;

      if MoveNegLines or not ExactCostRevMandatory then
        exit(false);

      if FromSalesLine."Quantity (Base)" < 0 then
        SignFactor := -1
      else
        SignFactor := 1;

      with ItemLedgEntry do begin
        SETCURRENTKEY("Document No.","Document Type","Document Line No.");
        FINDSET;
        repeat
          SalesLineBuf[1] := FromSalesLine;
          SalesLineBuf[1]."Line No." := NextLineNo;
          SalesLineBuf[1]."Quantity (Base)" := 0;
          SalesLineBuf[1].Quantity := 0;
          SalesLineBuf[1]."Document No." := "Document No.";
          if GetSalesDocType(ItemLedgEntry) in
             [SalesLineBuf[1]."Document Type"::Order,SalesLineBuf[1]."Document Type"::"Return Order"]
          then
            SalesLineBuf[1]."Shipment Line No." := 1;
          SalesLineBuf[2] := SalesLineBuf[1];
          SalesLineBuf[2]."Line No." := SalesLineBuf[2]."Line No." + 1;

          if not FromShptOrRcpt then begin
            SETRANGE("Document No.","Document No.");
            SETRANGE("Document Type","Document Type");
            SETRANGE("Document Line No.","Document Line No.");
          end;
          repeat
            i := 1;
            if not Positive then
              "Shipped Qty. Not Returned" :=
                "Shipped Qty. Not Returned" -
                CalcDistributedQty(TempItemTrkgEntry,ItemLedgEntry,SalesLineBuf[2]."Line No." + 1);

            if "Document Type" in ["Document Type"::"Sales Return Receipt","Document Type"::"Sales Credit Memo"] then
              if "Remaining Quantity" < FromSalesLine."Quantity (Base)" * SignFactor then
                ReversibleQtyBase := "Remaining Quantity" * SignFactor
              else
                ReversibleQtyBase := FromSalesLine."Quantity (Base)"
            else
              if Positive then begin
                ReversibleQtyBase := "Remaining Quantity";
                if ReversibleQtyBase < FromSalesLine."Quantity (Base)" * SignFactor then
                  ReversibleQtyBase := ReversibleQtyBase * SignFactor
                else
                  ReversibleQtyBase := FromSalesLine."Quantity (Base)";
              end else
                if -"Shipped Qty. Not Returned" < FromSalesLine."Quantity (Base)" * SignFactor then
                  ReversibleQtyBase := -"Shipped Qty. Not Returned" * SignFactor
                else
                  ReversibleQtyBase := FromSalesLine."Quantity (Base)";

            if ReversibleQtyBase <> 0 then begin
              if not Positive then
                if IsSplitItemLedgEntry(ItemLedgEntry) then
                  i := 2;

              SalesLineBuf[i]."Quantity (Base)" := SalesLineBuf[i]."Quantity (Base)" + ReversibleQtyBase;
              if SalesLineBuf[i]."Qty. per Unit of Measure" = 0 then
                SalesLineBuf[i].Quantity := SalesLineBuf[i]."Quantity (Base)"
              else
                SalesLineBuf[i].Quantity :=
                  ROUND(SalesLineBuf[i]."Quantity (Base)" / SalesLineBuf[i]."Qty. per Unit of Measure",0.00001);
              FromSalesLine."Quantity (Base)" := FromSalesLine."Quantity (Base)" - ReversibleQtyBase;
              // Fill buffer with exact cost reversing link
              InsertTempItemTrkgEntry(
                ItemLedgEntry,TempItemTrkgEntry,-ABS(ReversibleQtyBase),
                SalesLineBuf[i]."Line No.",NextItemTrkgEntryNo,true);
              Tracked := true;
            end;
          until (NEXT = 0) or (FromSalesLine."Quantity (Base)" = 0);

          for i := 1 to 2 do
            if SalesLineBuf[i]."Quantity (Base)" <> 0 then begin
              FromSalesLineBuf := SalesLineBuf[i];
              FromSalesLineBuf.INSERT;
              AddSalesDocLine(TempDocSalesLine,FromSalesLineBuf."Line No.","Document No.",FromSalesLine."Line No.");
              NextLineNo := SalesLineBuf[i]."Line No." + 1;
            end;

          if not FromShptOrRcpt then begin
            SETRANGE("Document No.");
            SETRANGE("Document Type");
            SETRANGE("Document Line No.");
          end;
        until (NEXT = 0) or FromShptOrRcpt;

        if (FromSalesLine."Quantity (Base)" <> 0) and not Tracked then
          MissingExCostRevLink := true;
      end;

      exit(true);
    END;

    [External]
    PROCEDURE CopyPurchRcptLinesToDoc@53(ToPurchHeader@1002 : Record "Purchase Header";VAR FromPurchRcptLine@1001 : Record "Purch. Rcpt. Line";VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1019 : TEMPORARY Record "Item Ledger Entry";
      FromPurchHeader@1006 : Record "Purchase Header";
      FromPurchLine@1003 : Record "Purchase Line";
      ToPurchLine@1010 : Record "Purchase Line";
      FromPurchLineBuf@1007 : TEMPORARY Record "Purchase Line";
      FromPurchRcptHeader@1005 : Record "Purch. Rcpt. Header";
      TempItemTrkgEntry@1022 : TEMPORARY Record "Reservation Entry";
      TempDocPurchaseLine@1013 : TEMPORARY Record "Purchase Line";
      ItemTrackingMgt@1020 : Codeunit "Item Tracking Management";
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1012 : Integer;
      CopyItemTrkg@1004 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      SplitLine@1017 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToPurchHeader."Currency Code");
      OpenWindow;

      with FromPurchRcptLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromPurchRcptHeader."No." <> "Document No." then begin
              FromPurchRcptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,0,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
            FromPurchLine."Appl.-to Item Entry" := 0;

            if "Document No." <> OldDocNo then begin
              OldDocNo := "Document No.";
              InsertDocNoLine := true;
            end;

            SplitLine := true;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            if not SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntry,FromPurchLineBuf,
                 FromPurchLine,TempDocPurchaseLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,true)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,TempDocPurchaseLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,true)
              else
                SplitLine := false;

            if not SplitLine then begin
              FromPurchLineBuf := FromPurchLine;
              CopyLine := true;
            end else
              CopyLine := FromPurchLineBuf.FINDSET and FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            if CopyLine then begin
              NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
              if InsertDocNoLine then begin
                InsertOldPurchDocNoLine(ToPurchHeader,"Document No.",1,NextLineNo);
                InsertDocNoLine := false;
              end;
              repeat
                ToLineCounter := ToLineCounter + 1;
                if IsTimeForUpdate then
                  Window.UPDATE(2,ToLineCounter);
                if FromPurchLine."Prod. Order No." <> '' then
                  FromPurchLine."Quantity (Base)" := 0;
                if CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,
                     false,DeferralTypeForPurchDoc(PurchDocType::"Posted Receipt"),CopyPostedDeferral,FromPurchLineBuf."Line No.")
                then
                  if CopyItemTrkg then begin
                    if SplitLine then
                      ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                        TempItemTrkgEntry,TempTrkgItemLedgEntry,true,FromPurchLineBuf."Document No.",FromPurchLineBuf."Line No.")
                    else
                      ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntry);

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                      TempTrkgItemLedgEntry,ToPurchLine,
                      FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                      FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",true);
                  end;
              until FromPurchLineBuf.NEXT = 0
            end;
          until NEXT = 0;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopyPurchInvLinesToDoc@52(ToPurchHeader@1002 : Record "Purchase Header";VAR FromPurchInvLine@1001 : Record "Purch. Inv. Line";VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1018 : TEMPORARY Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record "Item Ledger Entry";
      FromPurchHeader@1006 : Record "Purchase Header";
      FromPurchLine@1003 : Record "Purchase Line";
      FromPurchLine2@1022 : Record "Purchase Line";
      ToPurchLine@1010 : Record "Purchase Line";
      FromPurchLineBuf@1007 : TEMPORARY Record "Purchase Line";
      FromPurchInvHeader@1005 : Record "Purch. Inv. Header";
      TempItemTrkgEntry@1009 : TEMPORARY Record "Reservation Entry";
      TempDocPurchaseLine@1015 : TEMPORARY Record "Purchase Line";
      ItemTrackingMgt@1021 : Codeunit "Item Tracking Management";
      OldInvDocNo@1011 : Code[20];
      OldRcptDocNo@1023 : Code[20];
      OldBufDocNo@1016 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1024 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1008 : Boolean;
      FillExactCostRevLink@1014 : Boolean;
      ItemChargeAssgntNextLineNo@1017 : Integer;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;
      // Fill purchase line buffer
      with FromPurchInvLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromPurchInvHeader."No." <> "Document No." then begin
              FromPurchInvHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromPurchInvHeader.TESTFIELD("Prices Including VAT",ToPurchHeader."Prices Including VAT");
            FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
            FillExactCostRevLink := IsPurchFillExactCostRevLink(ToPurchHeader,1,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer invoice line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";

            SplitLine := true;
            GetItemLedgEntries(ItemLedgEntryBuf,true);
            if not SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntryBuf,FromPurchLineBuf,
                 FromPurchLine,TempDocPurchaseLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,false)
            then
              if CopyItemTrkg then
                SplitLine := SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,TempDocPurchaseLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,false)
              else
                SplitLine := false;

            if not SplitLine then
              CopyPurchLinesToBuffer(
                FromPurchHeader,FromPurchLine,FromPurchLine2,FromPurchLineBuf,ToPurchHeader,TempDocPurchaseLine,
                "Document No.",NextLineNo);
          until NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      with FromPurchLineBuf do begin
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        if FINDSET then begin
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          repeat
            ToLineCounter := ToLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(2,ToLineCounter);
            if "Receipt No." <> OldInvDocNo then begin
              OldInvDocNo := "Receipt No.";
              OldRcptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldInvDocNo,2,NextLineNo);
            end;
            if ("Document No." <> OldRcptDocNo) and ("Receipt Line No." > 0) then begin
              OldRcptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldInvDocNo,OldRcptDocNo,NextLineNo,true);
            end;

            // Empty buffer fields
            FromPurchLine2 := FromPurchLineBuf;
            FromPurchLine2."Receipt No." := '';
            FromPurchLine2."Receipt Line No." := 0;
            FromPurchLine2."Return Shipment No." := '';
            FromPurchLine2."Return Shipment Line No." := 0;
            if GetPurchDocNo(TempDocPurchaseLine,"Line No.") <> OldBufDocNo then begin
              OldBufDocNo := GetPurchDocNo(TempDocPurchaseLine,"Line No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            if CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine2,NextLineNo,LinesNotCopied,
                 "Return Shipment No." = '',DeferralTypeForPurchDoc(PurchDocType::"Posted Invoice"),CopyPostedDeferral,
                 GetPurchLineNo(TempDocPurchaseLine,FromPurchLine2."Line No."))
            then begin
              if CopyPostedDeferral then
                CopyPurchPostedDeferrals(ToPurchLine,DeferralUtilities.GetPurchDeferralDocType,
                  DeferralTypeForPurchDoc(PurchDocType::"Posted Invoice"),"Receipt No.",
                  "Return Shipment Line No.",ToPurchLine."Document Type",ToPurchLine."Document No.",ToPurchLine."Line No.");
              FromPurchInvLine.GET("Receipt No.","Return Shipment Line No.");

              // copy item charges
              if Type = Type::"Charge (Item)" then begin
                FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
                FromPurchLine."Document Type" := FromPurchLine."Document Type"::Invoice;
                CopyFromPurchLineItemChargeAssign(FromPurchLine,ToPurchLine,FromPurchHeader,ItemChargeAssgntNextLineNo);
              end;
              // copy item tracking
              if (Type = Type::Item) and (Quantity <> 0) and ("Prod. Order No." = '') and
                 PurchaseDocCanReceiveTracking(ToPurchHeader)
              then begin
                FromPurchInvLine."Document No." := OldInvDocNo;
                FromPurchInvLine."Line No." := "Return Shipment Line No.";
                FromPurchInvLine.GetItemLedgEntries(ItemLedgEntryBuf,true);
                if IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) then begin
                  if "Job No." <> '' then
                    ItemLedgEntryBuf.SETFILTER("Entry Type",'<> %1',ItemLedgEntryBuf."Entry Type"::"Negative Adjmt.");
                  if MoveNegLines or not ExactCostRevMandatory then
                    ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                  else
                    ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                      TempItemTrkgEntry,TempTrkgItemLedgEntry,true,"Document No.","Line No.");

                  ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(TempTrkgItemLedgEntry,ToPurchLine,
                    FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                    FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",false);
                end;
              end;
            end;
          until NEXT = 0;
        end;
      end;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopyPurchCrMemoLinesToDoc@51(ToPurchHeader@1002 : Record "Purchase Header";VAR FromPurchCrMemoLine@1001 : Record "Purch. Cr. Memo Line";VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1018 : TEMPORARY Record "Item Ledger Entry";
      FromPurchHeader@1006 : Record "Purchase Header";
      FromPurchLine@1003 : Record "Purchase Line";
      FromPurchLine2@1022 : Record "Purchase Line";
      ToPurchLine@1010 : Record "Purchase Line";
      FromPurchLineBuf@1007 : TEMPORARY Record "Purchase Line";
      FromPurchCrMemoHeader@1005 : Record "Purch. Cr. Memo Hdr.";
      TempItemTrkgEntry@1021 : TEMPORARY Record "Reservation Entry";
      TempDocPurchaseLine@1026 : TEMPORARY Record "Purchase Line";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      OldCrMemoDocNo@1011 : Code[20];
      OldReturnShptDocNo@1023 : Code[20];
      OldBufDocNo@1016 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1024 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      ItemChargeAssgntNextLineNo@1015 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1012 : Boolean;
      FillExactCostRevLink@1014 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill purchase line buffer
      with FromPurchCrMemoLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromPurchCrMemoHeader."No." <> "Document No." then begin
              FromPurchCrMemoHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,3,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchCrMemoLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer credit memo line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";

            SplitLine := true;
            GetItemLedgEntries(ItemLedgEntryBuf,true);
            if not SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntryBuf,FromPurchLineBuf,
                 FromPurchLine,TempDocPurchaseLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,false)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,TempDocPurchaseLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,false)
              else
                SplitLine := false;

            if not SplitLine then
              CopyPurchLinesToBuffer(
                FromPurchHeader,FromPurchLine,FromPurchLine2,FromPurchLineBuf,ToPurchHeader,TempDocPurchaseLine,
                "Document No.",NextLineNo);
          until NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      with FromPurchLineBuf do begin
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        if FINDSET then begin
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          repeat
            ToLineCounter := ToLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(2,ToLineCounter);
            if "Receipt No." <> OldCrMemoDocNo then begin
              OldCrMemoDocNo := "Receipt No.";
              OldReturnShptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldCrMemoDocNo,4,NextLineNo);
            end;
            if "Document No." <> OldReturnShptDocNo then begin
              OldReturnShptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldCrMemoDocNo,OldReturnShptDocNo,NextLineNo,false);
            end;

            // Empty buffer fields
            FromPurchLine2 := FromPurchLineBuf;
            FromPurchLine2."Receipt No." := '';
            FromPurchLine2."Receipt Line No." := 0;
            FromPurchLine2."Return Shipment No." := '';
            FromPurchLine2."Return Shipment Line No." := 0;
            if GetPurchDocNo(TempDocPurchaseLine,"Line No.") <> OldBufDocNo then begin
              OldBufDocNo := GetPurchDocNo(TempDocPurchaseLine,"Line No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            if CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine2,NextLineNo,LinesNotCopied,
                 "Return Shipment No." = '',DeferralTypeForPurchDoc(PurchDocType::"Posted Credit Memo"),CopyPostedDeferral,
                 GetPurchLineNo(TempDocPurchaseLine,FromPurchLine2."Line No."))
            then begin
              if CopyPostedDeferral then
                CopyPurchPostedDeferrals(ToPurchLine,DeferralUtilities.GetPurchDeferralDocType,
                  DeferralTypeForPurchDoc(PurchDocType::"Posted Credit Memo"),"Receipt No.",
                  "Return Shipment Line No.",ToPurchLine."Document Type",ToPurchLine."Document No.",ToPurchLine."Line No.");
              FromPurchCrMemoLine.GET("Receipt No.","Return Shipment Line No.");

              // copy item charges
              if Type = Type::"Charge (Item)" then begin
                FromPurchLine.TRANSFERFIELDS(FromPurchCrMemoLine);
                FromPurchLine."Document Type" := FromPurchLine."Document Type"::"Credit Memo";
                CopyFromPurchLineItemChargeAssign(FromPurchLine,ToPurchLine,FromPurchHeader,ItemChargeAssgntNextLineNo);
              end;
              // copy item tracking
              if (Type = Type::Item) and (Quantity <> 0) and ("Prod. Order No." = '') then begin
                FromPurchCrMemoLine."Document No." := OldCrMemoDocNo;
                FromPurchCrMemoLine."Line No." := "Return Shipment Line No.";
                FromPurchCrMemoLine.GetItemLedgEntries(ItemLedgEntryBuf,true);
                if IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) then begin
                  if "Job No." <> '' then
                    ItemLedgEntryBuf.SETFILTER("Entry Type",'<> %1',ItemLedgEntryBuf."Entry Type"::"Negative Adjmt.");
                  if MoveNegLines or not ExactCostRevMandatory then
                    ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                  else
                    ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                      TempItemTrkgEntry,TempTrkgItemLedgEntry,true,"Document No.","Line No.");

                  ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                    TempTrkgItemLedgEntry,ToPurchLine,
                    FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                    FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",false);
                end;
              end;
            end;
          until NEXT = 0;
        end;
      end;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CopyPurchReturnShptLinesToDoc@50(ToPurchHeader@1002 : Record "Purchase Header";VAR FromReturnShptLine@1001 : Record "Return Shipment Line";VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record "Item Ledger Entry";
      TempTrkgItemLedgEntry@1020 : TEMPORARY Record "Item Ledger Entry";
      FromPurchHeader@1006 : Record "Purchase Header";
      FromPurchLine@1003 : Record "Purchase Line";
      ToPurchLine@1010 : Record "Purchase Line";
      FromPurchLineBuf@1007 : TEMPORARY Record "Purchase Line";
      FromReturnShptHeader@1005 : Record "Return Shipment Header";
      TempItemTrkgEntry@1022 : TEMPORARY Record "Reservation Entry";
      TempDocPurchaseLine@1013 : TEMPORARY Record "Purchase Line";
      ItemTrackingMgt@1019 : Codeunit "Item Tracking Management";
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1012 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1017 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      CopyLine@1025 : Boolean;
      InsertDocNoLine@1024 : Boolean;
    BEGIN
      MissingExCostRevLink := false;
      InitCurrency(ToPurchHeader."Currency Code");
      OpenWindow;

      with FromReturnShptLine do
        if FINDSET then
          repeat
            FromLineCounter := FromLineCounter + 1;
            if IsTimeForUpdate then
              Window.UPDATE(1,FromLineCounter);
            if FromReturnShptHeader."No." <> "Document No." then begin
              FromReturnShptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            end;
            FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,2,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromReturnShptLine);
            FromPurchLine."Appl.-to Item Entry" := 0;

            if "Document No." <> OldDocNo then begin
              OldDocNo := "Document No.";
              InsertDocNoLine := true;
            end;

            SplitLine := true;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            if not SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntry,FromPurchLineBuf,
                 FromPurchLine,TempDocPurchaseLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,true)
            then
              if CopyItemTrkg then
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,TempDocPurchaseLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,true)
              else
                SplitLine := false;

            if not SplitLine then begin
              FromPurchLineBuf := FromPurchLine;
              CopyLine := true;
            end else
              CopyLine := FromPurchLineBuf.FINDSET and FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            if CopyLine then begin
              NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
              if InsertDocNoLine then begin
                InsertOldPurchDocNoLine(ToPurchHeader,"Document No.",3,NextLineNo);
                InsertDocNoLine := false;
              end;
              repeat
                ToLineCounter := ToLineCounter + 1;
                if IsTimeForUpdate then
                  Window.UPDATE(2,ToLineCounter);
                if CopyPurchLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,
                     false,DeferralTypeForPurchDoc(PurchDocType::"Posted Return Shipment"),CopyPostedDeferral,
                     FromPurchLineBuf."Line No.")
                then
                  if CopyItemTrkg then begin
                    if SplitLine then
                      ItemTrackingDocMgt.CollectItemTrkgPerPostedDocLine(
                        TempItemTrkgEntry,TempTrkgItemLedgEntry,true,FromPurchLineBuf."Document No.",FromPurchLineBuf."Line No.")
                    else
                      ItemTrackingDocMgt.CopyItemLedgerEntriesToTemp(TempTrkgItemLedgEntry,ItemLedgEntry);

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                      TempTrkgItemLedgEntry,ToPurchLine,
                      FillExactCostRevLink and ExactCostRevMandatory,MissingExCostRevLink,
                      FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",true);
                  end;
              until FromPurchLineBuf.NEXT = 0
            end;
          until NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyPurchLinesToBuffer@145(FromPurchHeader@1006 : Record "Purchase Header";FromPurchLine@1005 : Record "Purchase Line";VAR FromPurchLine2@1004 : Record "Purchase Line";VAR TempPurchLineBuf@1003 : TEMPORARY Record "Purchase Line";ToPurchHeader@1002 : Record "Purchase Header";VAR TempDocPurchaseLine@1007 : TEMPORARY Record "Purchase Line";DocNo@1001 : Code[20];VAR NextLineNo@1000 : Integer);
    BEGIN
      FromPurchLine2 := TempPurchLineBuf;
      TempPurchLineBuf := FromPurchLine;
      TempPurchLineBuf."Document No." := FromPurchLine2."Document No.";
      TempPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
      TempPurchLineBuf."Line No." := NextLineNo;
      NextLineNo := NextLineNo + 10000;
      if not IsRecalculateAmount(
           FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
           FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT")
      then
        TempPurchLineBuf."Return Shipment No." := DocNo;
      ReCalcPurchLine(FromPurchHeader,ToPurchHeader,TempPurchLineBuf);
      TempPurchLineBuf.INSERT;
      AddPurchDocLine(TempDocPurchaseLine,TempPurchLineBuf."Line No.",DocNo,FromPurchLine."Line No.");
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@155(SalesHeader@1004 : Record "Sales Header";SalesLine@1005 : Record "Sales Line";JobContractEntryNo@1000 : Integer) : Integer;
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
      NewJobPlanningLine@1002 : Record "Job Planning Line";
      JobPlanningLineInvoice@1003 : Record "Job Planning Line Invoice";
    BEGIN
      JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      JobPlanningLine.SETRANGE("Job Contract Entry No.",JobContractEntryNo);
      if JobPlanningLine.FINDFIRST then begin
        NewJobPlanningLine.InitFromJobPlanningLine(JobPlanningLine,SalesLine.Quantity);

        JobPlanningLineInvoice.InitFromJobPlanningLine(NewJobPlanningLine);
        JobPlanningLineInvoice.InitFromSales(SalesHeader,SalesHeader."Posting Date",SalesLine."Line No.");
        JobPlanningLineInvoice.INSERT;

        NewJobPlanningLine.UpdateQtyToTransfer;
        NewJobPlanningLine.INSERT;
      end;

      exit(NewJobPlanningLine."Job Contract Entry No.");
    END;

    LOCAL PROCEDURE SplitPstdPurchLinesPerILE@55(ToPurchHeader@1008 : Record "Purchase Header";FromPurchHeader@1009 : Record "Purchase Header";VAR ItemLedgEntry@1003 : Record "Item Ledger Entry";VAR FromPurchLineBuf@1004 : Record "Purchase Line";FromPurchLine@1001 : Record "Purchase Line";VAR TempDocPurchaseLine@1011 : TEMPORARY Record "Purchase Line";VAR NextLineNo@1006 : Integer;VAR CopyItemTrkg@1002 : Boolean;VAR MissingExCostRevLink@1005 : Boolean;FillExactCostRevLink@1000 : Boolean;FromShptOrRcpt@1010 : Boolean) : Boolean;
    VAR
      Item@1012 : Record Item;
      ApplyRec@1019 : Record "Item Application Entry";
      OrgQtyBase@1007 : Decimal;
    BEGIN
      if FromShptOrRcpt then begin
        FromPurchLineBuf.RESET;
        FromPurchLineBuf.DELETEALL;
      end else
        FromPurchLineBuf.INIT;

      CopyItemTrkg := false;

      if (FromPurchLine.Type <> FromPurchLine.Type::Item) or (FromPurchLine.Quantity = 0) or (FromPurchLine."Prod. Order No." <> '')
      then
        exit(false);

      Item.GET(FromPurchLine."No.");
      if Item.Type = Item.Type::Service then
        exit(false);

      if IsCopyItemTrkg(ItemLedgEntry,CopyItemTrkg,FillExactCostRevLink) or
         not FillExactCostRevLink or MoveNegLines or
         not ExactCostRevMandatory
      then
        exit(false);

      if FromPurchLine."Job No." <> '' then
        exit(false);

      with ItemLedgEntry do begin
        FINDSET;
        if Quantity <= 0 then begin
          FromPurchLineBuf."Document No." := "Document No.";
          if GetPurchDocType(ItemLedgEntry) in
             [FromPurchLineBuf."Document Type"::Order,FromPurchLineBuf."Document Type"::"Return Order"]
          then
            FromPurchLineBuf."Receipt Line No." := 1;
          exit(false);
        end;
        OrgQtyBase := FromPurchLine."Quantity (Base)";
        repeat
          if not ApplyFully then begin
            ApplyRec.AppliedOutbndEntryExists("Entry No.",false,false);
            if ApplyRec.FIND('-') then
              SkippedLine := SkippedLine or ApplyRec.FIND('-');
          end;
          if ApplyFully then begin
            ApplyRec.AppliedOutbndEntryExists("Entry No.",false,false);
            if ApplyRec.FIND('-') then
              repeat
                SomeAreFixed := SomeAreFixed or ApplyRec.Fixed;
              until ApplyRec.NEXT = 0;
          end;

          if AskApply and ("Item Tracking" = "Item Tracking"::None) then
            if not ("Remaining Quantity" > 0) or ("Item Tracking" <> "Item Tracking"::None) then
              ConfirmApply;
          if AskApply then
            if "Remaining Quantity" < ABS(FromPurchLine."Quantity (Base)") then
              ConfirmApply;
          if ("Remaining Quantity" > 0) or ApplyFully then begin
            FromPurchLineBuf := FromPurchLine;
            if "Remaining Quantity" < ABS(FromPurchLine."Quantity (Base)") then
              if not ApplyFully then begin
                if FromPurchLine."Quantity (Base)" > 0 then
                  FromPurchLineBuf."Quantity (Base)" := "Remaining Quantity"
                else
                  FromPurchLineBuf."Quantity (Base)" := -"Remaining Quantity";
                ConvertFromBase(
                  FromPurchLineBuf.Quantity,FromPurchLineBuf."Quantity (Base)",FromPurchLineBuf."Qty. per Unit of Measure");
              end else begin
                ReappDone := true;
                FromPurchLineBuf."Quantity (Base)" := Sign(Quantity) * Quantity - ApplyRec.Returned("Entry No.");
                ConvertFromBase(
                  FromPurchLineBuf.Quantity,FromPurchLineBuf."Quantity (Base)",FromPurchLineBuf."Qty. per Unit of Measure");
              end;
            FromPurchLine."Quantity (Base)" := FromPurchLine."Quantity (Base)" - FromPurchLineBuf."Quantity (Base)";
            FromPurchLine.Quantity := FromPurchLine.Quantity - FromPurchLineBuf.Quantity;
            FromPurchLineBuf."Appl.-to Item Entry" := "Entry No.";
            FromPurchLineBuf."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            FromPurchLineBuf."Document No." := "Document No.";
            if GetPurchDocType(ItemLedgEntry) in
               [FromPurchLineBuf."Document Type"::Order,FromPurchLineBuf."Document Type"::"Return Order"]
            then
              FromPurchLineBuf."Receipt Line No." := 1;

            if not FromShptOrRcpt then
              UpdateRevPurchLineAmount(
                FromPurchLineBuf,OrgQtyBase,
                FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT");
            if FromPurchLineBuf.Quantity <> 0 then begin
              FromPurchLineBuf.INSERT;
              AddPurchDocLine(TempDocPurchaseLine,FromPurchLineBuf."Line No.","Document No.",FromPurchLine."Line No.");
            end else
              SkippedLine := true;
          end else
            if "Remaining Quantity" = 0 then
              SkippedLine := true;
        until (NEXT = 0) or (FromPurchLine."Quantity (Base)" = 0);

        if (FromPurchLine."Quantity (Base)" <> 0) and FillExactCostRevLink then
          MissingExCostRevLink := true;
      end;
      CheckUnappliedLines(SkippedLine,MissingExCostRevLink);

      exit(true);
    END;

    LOCAL PROCEDURE SplitPurchDocLinesPerItemTrkg@59(VAR ItemLedgEntry@1003 : Record "Item Ledger Entry";VAR TempItemTrkgEntry@1009 : TEMPORARY Record "Reservation Entry";VAR FromPurchLineBuf@1004 : Record "Purchase Line";FromPurchLine@1001 : Record "Purchase Line";VAR TempDocPurchaseLine@1010 : TEMPORARY Record "Purchase Line";VAR NextLineNo@1008 : Integer;VAR NextItemTrkgEntryNo@1002 : Integer;VAR MissingExCostRevLink@1005 : Boolean;FromShptOrRcpt@1007 : Boolean) : Boolean;
    VAR
      PurchLineBuf@1012 : ARRAY [2] OF TEMPORARY Record "Purchase Line";
      ApplyRec@1019 : Record "Item Application Entry";
      Tracked@1011 : Boolean;
      RemainingQtyBase@1000 : Decimal;
      SignFactor@1006 : Integer;
      i@1013 : Integer;
    BEGIN
      if FromShptOrRcpt then begin
        FromPurchLineBuf.RESET;
        FromPurchLineBuf.DELETEALL;
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.DELETEALL;
      end else
        FromPurchLineBuf.INIT;

      if MoveNegLines or not ExactCostRevMandatory then
        exit(false);

      if FromPurchLine."Quantity (Base)" < 0 then
        SignFactor := -1
      else
        SignFactor := 1;

      with ItemLedgEntry do begin
        SETCURRENTKEY("Document No.","Document Type","Document Line No.");
        FINDSET;
        repeat
          PurchLineBuf[1] := FromPurchLine;
          PurchLineBuf[1]."Line No." := NextLineNo;
          PurchLineBuf[1]."Quantity (Base)" := 0;
          PurchLineBuf[1].Quantity := 0;
          PurchLineBuf[1]."Document No." := "Document No.";
          if GetPurchDocType(ItemLedgEntry) in
             [PurchLineBuf[1]."Document Type"::Order,PurchLineBuf[1]."Document Type"::"Return Order"]
          then
            PurchLineBuf[1]."Receipt Line No." := 1;
          PurchLineBuf[2] := PurchLineBuf[1];
          PurchLineBuf[2]."Line No." := PurchLineBuf[2]."Line No." + 1;

          if not FromShptOrRcpt then begin
            SETRANGE("Document No.","Document No.");
            SETRANGE("Document Type","Document Type");
            SETRANGE("Document Line No.","Document Line No.");
          end;
          repeat
            i := 1;
            if Positive then
              "Remaining Quantity" :=
                "Remaining Quantity" -
                CalcDistributedQty(TempItemTrkgEntry,ItemLedgEntry,PurchLineBuf[2]."Line No." + 1);

            if "Document Type" in ["Document Type"::"Purchase Return Shipment","Document Type"::"Purchase Credit Memo"] then
              if -"Shipped Qty. Not Returned" < FromPurchLine."Quantity (Base)" * SignFactor then
                RemainingQtyBase := -"Shipped Qty. Not Returned" * SignFactor
              else
                RemainingQtyBase := FromPurchLine."Quantity (Base)"
            else
              if not Positive then begin
                RemainingQtyBase := -"Shipped Qty. Not Returned";
                if RemainingQtyBase < FromPurchLine."Quantity (Base)" * SignFactor then
                  RemainingQtyBase := RemainingQtyBase * SignFactor
                else
                  RemainingQtyBase := FromPurchLine."Quantity (Base)";
              end else
                if "Remaining Quantity" < FromPurchLine."Quantity (Base)" * SignFactor then begin
                  if ("Item Tracking" = "Item Tracking"::None) and AskApply then
                    ConfirmApply;
                  if (not ApplyFully) or ("Item Tracking" <> "Item Tracking"::None) then
                    RemainingQtyBase := GetQtyOfPurchILENotShipped("Entry No.") * SignFactor
                  else
                    RemainingQtyBase := FromPurchLine."Quantity (Base)" - ApplyRec.Returned("Entry No.");
                end else
                  RemainingQtyBase := FromPurchLine."Quantity (Base)";

            if RemainingQtyBase <> 0 then begin
              if Positive then
                if IsSplitItemLedgEntry(ItemLedgEntry) then
                  i := 2;

              PurchLineBuf[i]."Quantity (Base)" := PurchLineBuf[i]."Quantity (Base)" + RemainingQtyBase;
              if PurchLineBuf[i]."Qty. per Unit of Measure" = 0 then
                PurchLineBuf[i].Quantity := PurchLineBuf[i]."Quantity (Base)"
              else
                PurchLineBuf[i].Quantity :=
                  ROUND(PurchLineBuf[i]."Quantity (Base)" / PurchLineBuf[i]."Qty. per Unit of Measure",0.00001);
              FromPurchLine."Quantity (Base)" := FromPurchLine."Quantity (Base)" - RemainingQtyBase;
              // Fill buffer with exact cost reversing link for remaining quantity
              if "Document Type" in ["Document Type"::"Purchase Return Shipment","Document Type"::"Purchase Credit Memo"] then
                InsertTempItemTrkgEntry(
                  ItemLedgEntry,TempItemTrkgEntry,-ABS(RemainingQtyBase),
                  PurchLineBuf[i]."Line No.",NextItemTrkgEntryNo,true)
              else
                InsertTempItemTrkgEntry(
                  ItemLedgEntry,TempItemTrkgEntry,ABS(RemainingQtyBase),
                  PurchLineBuf[i]."Line No.",NextItemTrkgEntryNo,true);
              Tracked := true;
            end;
          until (NEXT = 0) or (FromPurchLine."Quantity (Base)" = 0);

          for i := 1 to 2 do
            if PurchLineBuf[i]."Quantity (Base)" <> 0 then begin
              FromPurchLineBuf := PurchLineBuf[i];
              FromPurchLineBuf.INSERT;
              AddPurchDocLine(TempDocPurchaseLine,FromPurchLineBuf."Line No.","Document No.",FromPurchLine."Line No.");
              NextLineNo := PurchLineBuf[i]."Line No." + 1;
            end;

          if not FromShptOrRcpt then begin
            SETRANGE("Document No.");
            SETRANGE("Document Type");
            SETRANGE("Document Line No.");
          end;
        until (NEXT = 0) or FromShptOrRcpt;
        if (FromPurchLine."Quantity (Base)" <> 0) and not Tracked then
          MissingExCostRevLink := true;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE CalcDistributedQty@76(VAR TempItemTrkgEntry@1000 : TEMPORARY Record "Reservation Entry";ItemLedgEntry@1002 : Record "Item Ledger Entry";NextLineNo@1001 : Integer) : Decimal;
    BEGIN
      with ItemLedgEntry do begin
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
        TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
        TempItemTrkgEntry.SETFILTER("Source Ref. No.",'<%1',NextLineNo);
        TempItemTrkgEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
        TempItemTrkgEntry.CALCSUMS("Quantity (Base)");
        TempItemTrkgEntry.RESET;
        exit(TempItemTrkgEntry."Quantity (Base)");
      end;
    END;

    LOCAL PROCEDURE IsSplitItemLedgEntry@83(OrgItemLedgEntry@1000 : Record "Item Ledger Entry") : Boolean;
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      with OrgItemLedgEntry do begin
        ItemLedgEntry.SETCURRENTKEY("Document No.");
        ItemLedgEntry.SETRANGE("Document No.","Document No.");
        ItemLedgEntry.SETRANGE("Document Type","Document Type");
        ItemLedgEntry.SETRANGE("Document Line No.","Document Line No.");
        ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
        ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
        ItemLedgEntry.SETFILTER("Entry No.",'<%1',"Entry No.");
        exit(not ItemLedgEntry.ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE IsCopyItemTrkg@33(VAR ItemLedgEntry@1000 : Record "Item Ledger Entry";VAR CopyItemTrkg@1001 : Boolean;FillExactCostRevLink@1002 : Boolean) : Boolean;
    BEGIN
      with ItemLedgEntry do begin
        if ISEMPTY then
          exit(true);
        SETFILTER("Lot No.",'<>''''');
        if not ISEMPTY then begin
          if FillExactCostRevLink then
            CopyItemTrkg := true;
          exit(true);
        end;
        SETRANGE("Lot No.");
        SETFILTER("Serial No.",'<>''''');
        if not ISEMPTY then begin
          if FillExactCostRevLink then
            CopyItemTrkg := true;
          exit(true);
        end;
        SETRANGE("Serial No.");
      end;
      exit(false);
    END;

    LOCAL PROCEDURE InsertTempItemTrkgEntry@70(ItemLedgEntry@1001 : Record "Item Ledger Entry";VAR TempItemTrkgEntry@1000 : Record "Reservation Entry";QtyBase@1002 : Decimal;DocLineNo@1004 : Integer;VAR NextEntryNo@1003 : Integer;FillExactCostRevLink@1005 : Boolean);
    BEGIN
      if QtyBase = 0 then
        exit;

      with ItemLedgEntry do begin
        TempItemTrkgEntry.INIT;
        TempItemTrkgEntry."Entry No." := NextEntryNo;
        NextEntryNo := NextEntryNo + 1;
        if not FillExactCostRevLink then
          TempItemTrkgEntry."Reservation Status" := TempItemTrkgEntry."Reservation Status"::Prospect;
        TempItemTrkgEntry."Source ID" := "Document No.";
        TempItemTrkgEntry."Source Ref. No." := DocLineNo;
        TempItemTrkgEntry."Item Ledger Entry No." := "Entry No.";
        TempItemTrkgEntry."Quantity (Base)" := QtyBase;
        TempItemTrkgEntry.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetLastToSalesLineNo@36(ToSalesHeader@1000 : Record "Sales Header") : Decimal;
    VAR
      ToSalesLine@1001 : Record "Sales Line";
    BEGIN
      ToSalesLine.LOCKTABLE;
      ToSalesLine.SETRANGE("Document Type",ToSalesHeader."Document Type");
      ToSalesLine.SETRANGE("Document No.",ToSalesHeader."No.");
      if ToSalesLine.FINDLAST then
        exit(ToSalesLine."Line No.");
      exit(0);
    END;

    LOCAL PROCEDURE GetLastToPurchLineNo@54(ToPurchHeader@1000 : Record "Purchase Header") : Decimal;
    VAR
      ToPurchLine@1001 : Record "Purchase Line";
    BEGIN
      ToPurchLine.LOCKTABLE;
      ToPurchLine.SETRANGE("Document Type",ToPurchHeader."Document Type");
      ToPurchLine.SETRANGE("Document No.",ToPurchHeader."No.");
      if ToPurchLine.FINDLAST then
        exit(ToPurchLine."Line No.");
      exit(0);
    END;

    LOCAL PROCEDURE InsertOldSalesDocNoLine@41(ToSalesHeader@1001 : Record "Sales Header";OldDocNo@1000 : Code[20];OldDocType@1004 : Integer;VAR NextLineNo@1002 : Integer);
    VAR
      ToSalesLine2@1003 : Record "Sales Line";
    BEGIN
      if SkipCopyFromDescription then
        exit;

      NextLineNo := NextLineNo + 10000;
      ToSalesLine2.INIT;
      ToSalesLine2."Line No." := NextLineNo;
      ToSalesLine2."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine2."Document No." := ToSalesHeader."No.";

      LanguageManagement.SetGlobalLanguageByCode(ToSalesHeader."Language Code");
      if InsertCancellationLine then
        ToSalesLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
      else
        ToSalesLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text013),OldDocNo);
      LanguageManagement.RestoreGlobalLanguage;

      ToSalesLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldSalesCombDocNoLine@62(ToSalesHeader@1001 : Record "Sales Header";OldDocNo@1000 : Code[20];OldDocNo2@1005 : Code[20];VAR NextLineNo@1002 : Integer;CopyFromInvoice@1004 : Boolean);
    VAR
      ToSalesLine2@1003 : Record "Sales Line";
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToSalesLine2.INIT;
      ToSalesLine2."Line No." := NextLineNo;
      ToSalesLine2."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine2."Document No." := ToSalesHeader."No.";

      LanguageManagement.SetGlobalLanguageByCode(ToSalesHeader."Language Code");
      if CopyFromInvoice then
        ToSalesLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(1,Text016) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(2,Text016) + OldDocNo2,1,23))
      else
        ToSalesLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(3,Text016) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(4,Text016) + OldDocNo2,1,23));
      LanguageManagement.RestoreGlobalLanguage;

      ToSalesLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldPurchDocNoLine@56(ToPurchHeader@1001 : Record "Purchase Header";OldDocNo@1000 : Code[20];OldDocType@1004 : Integer;VAR NextLineNo@1002 : Integer);
    VAR
      ToPurchLine2@1003 : Record "Purchase Line";
    BEGIN
      if SkipCopyFromDescription then
        exit;

      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Document No." := ToPurchHeader."No.";

      LanguageManagement.SetGlobalLanguageByCode(ToPurchHeader."Language Code");
      if InsertCancellationLine then
        ToPurchLine2.Description := STRSUBSTNO(CrMemoCancellationMsg,OldDocNo)
      else
        ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
      LanguageManagement.RestoreGlobalLanguage;

      ToPurchLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldPurchCombDocNoLine@72(ToPurchHeader@1001 : Record "Purchase Header";OldDocNo@1000 : Code[20];OldDocNo2@1005 : Code[20];VAR NextLineNo@1002 : Integer;CopyFromInvoice@1004 : Boolean);
    VAR
      ToPurchLine2@1003 : Record "Purchase Line";
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Document No." := ToPurchHeader."No.";

      LanguageManagement.SetGlobalLanguageByCode(ToPurchHeader."Language Code");
      if CopyFromInvoice then
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(1,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(2,Text017) + OldDocNo2,1,23))
      else
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
      LanguageManagement.RestoreGlobalLanguage;

      ToPurchLine2.INSERT;
    END;

    [External]
    PROCEDURE IsSalesFillExactCostRevLink@38(ToSalesHeader@1000 : Record "Sales Header";FromDocType@1001 : '"Sales Shipment","Sales Invoice","Sales Return Receipt","Sales Credit Memo"';CurrencyCode@1002 : Code[10]) : Boolean;
    BEGIN
      with ToSalesHeader do
        case FromDocType of
          FromDocType::"Sales Shipment":
            exit("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
          FromDocType::"Sales Invoice":
            exit(
              ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) and
              ("Currency Code" = CurrencyCode));
          FromDocType::"Sales Return Receipt":
            exit("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]);
          FromDocType::"Sales Credit Memo":
            exit(
              ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
              ("Currency Code" = CurrencyCode));
        end;
      exit(false);
    END;

    [External]
    PROCEDURE IsPurchFillExactCostRevLink@44(ToPurchHeader@1000 : Record "Purchase Header";FromDocType@1001 : '"Purchase Receipt","Purchase Invoice","Purchase Return Shipment","Purchase Credit Memo"';CurrencyCode@1002 : Code[10]) : Boolean;
    BEGIN
      with ToPurchHeader do
        case FromDocType of
          FromDocType::"Purchase Receipt":
            exit("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
          FromDocType::"Purchase Invoice":
            exit(
              ("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) and
              ("Currency Code" = CurrencyCode));
          FromDocType::"Purchase Return Shipment":
            exit("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]);
          FromDocType::"Purchase Credit Memo":
            exit(
              ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
              ("Currency Code" = CurrencyCode));
        end;
      exit(false);
    END;

    LOCAL PROCEDURE GetSalesDocType@68(ItemLedgEntry@1000 : Record "Item Ledger Entry") : Integer;
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with ItemLedgEntry do
        case "Document Type" of
          "Document Type"::"Sales Shipment":
            exit(SalesLine."Document Type"::Order);
          "Document Type"::"Sales Invoice":
            exit(SalesLine."Document Type"::Invoice);
          "Document Type"::"Sales Credit Memo":
            exit(SalesLine."Document Type"::"Credit Memo");
          "Document Type"::"Sales Return Receipt":
            exit(SalesLine."Document Type"::"Return Order");
        end;
    END;

    LOCAL PROCEDURE GetPurchDocType@45(ItemLedgEntry@1000 : Record "Item Ledger Entry") : Integer;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      with ItemLedgEntry do
        case "Document Type" of
          "Document Type"::"Purchase Receipt":
            exit(PurchLine."Document Type"::Order);
          "Document Type"::"Purchase Invoice":
            exit(PurchLine."Document Type"::Invoice);
          "Document Type"::"Purchase Credit Memo":
            exit(PurchLine."Document Type"::"Credit Memo");
          "Document Type"::"Purchase Return Shipment":
            exit(PurchLine."Document Type"::"Return Order");
        end;
    END;

    LOCAL PROCEDURE GetItem@42(ItemNo@1000 : Code[20]);
    BEGIN
      if ItemNo <> Item."No." then
        if not Item.GET(ItemNo) then
          Item.INIT;
    END;

    LOCAL PROCEDURE CalcVAT@48(VAR Value@1003 : Decimal;VATPercentage@1005 : Decimal;FromPricesInclVAT@1000 : Boolean;ToPricesInclVAT@1002 : Boolean;RndgPrecision@1001 : Decimal);
    BEGIN
      if (ToPricesInclVAT = FromPricesInclVAT) or (Value = 0) then
        exit;

      if ToPricesInclVAT then
        Value := ROUND(Value * (100 + VATPercentage) / 100,RndgPrecision)
      else
        Value := ROUND(Value * 100 / (100 + VATPercentage),RndgPrecision);
    END;

    LOCAL PROCEDURE ReCalcSalesLine@46(FromSalesHeader@1001 : Record "Sales Header";ToSalesHeader@1002 : Record "Sales Header";VAR SalesLine@1003 : Record "Sales Line");
    VAR
      CurrExchRate@1004 : Record "Currency Exchange Rate";
      SalesLineAmount@1000 : Decimal;
    BEGIN
      with ToSalesHeader do begin
        if not IsRecalculateAmount(
             FromSalesHeader."Currency Code","Currency Code",
             FromSalesHeader."Prices Including VAT","Prices Including VAT")
        then
          exit;

        if FromSalesHeader."Currency Code" <> "Currency Code" then begin
          if SalesLine.Quantity <> 0 then
            SalesLineAmount := SalesLine."Unit Price" * SalesLine.Quantity
          else
            SalesLineAmount := SalesLine."Unit Price";
          if FromSalesHeader."Currency Code" <> '' then begin
            SalesLineAmount :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLineAmount,FromSalesHeader."Currency Factor");
            SalesLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLine."Line Discount Amount",FromSalesHeader."Currency Factor");
            SalesLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLine."Inv. Discount Amount",FromSalesHeader."Currency Factor");
          end;

          if "Currency Code" <> '' then begin
            SalesLineAmount :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLineAmount,"Currency Factor");
            SalesLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLine."Line Discount Amount","Currency Factor");
            SalesLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLine."Inv. Discount Amount","Currency Factor");
          end;
        end;

        SalesLine."Currency Code" := "Currency Code";
        if SalesLine.Quantity <> 0 then begin
          SalesLineAmount := ROUND(SalesLineAmount,Currency."Amount Rounding Precision");
          SalesLine."Unit Price" := ROUND(SalesLineAmount / SalesLine.Quantity,Currency."Unit-Amount Rounding Precision");
        end else
          SalesLine."Unit Price" := ROUND(SalesLineAmount,Currency."Unit-Amount Rounding Precision");
        SalesLine."Line Discount Amount" := ROUND(SalesLine."Line Discount Amount",Currency."Amount Rounding Precision");
        SalesLine."Inv. Discount Amount" := ROUND(SalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision");

        CalcVAT(
          SalesLine."Unit Price",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Unit-Amount Rounding Precision");
        CalcVAT(
          SalesLine."Line Discount Amount",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
        CalcVAT(
          SalesLine."Inv. Discount Amount",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE ReCalcPurchLine@61(FromPurchHeader@1001 : Record "Purchase Header";ToPurchHeader@1002 : Record "Purchase Header";VAR PurchLine@1003 : Record "Purchase Line");
    VAR
      CurrExchRate@1004 : Record "Currency Exchange Rate";
      PurchLineAmount@1000 : Decimal;
    BEGIN
      with ToPurchHeader do begin
        if not IsRecalculateAmount(
             FromPurchHeader."Currency Code","Currency Code",
             FromPurchHeader."Prices Including VAT","Prices Including VAT")
        then
          exit;

        if FromPurchHeader."Currency Code" <> "Currency Code" then begin
          if PurchLine.Quantity <> 0 then
            PurchLineAmount := PurchLine."Direct Unit Cost" * PurchLine.Quantity
          else
            PurchLineAmount := PurchLine."Direct Unit Cost";
          if FromPurchHeader."Currency Code" <> '' then begin
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLineAmount,FromPurchHeader."Currency Factor");
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Line Discount Amount",FromPurchHeader."Currency Factor");
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Inv. Discount Amount",FromPurchHeader."Currency Factor");
          end;

          if "Currency Code" <> '' then begin
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLineAmount,"Currency Factor");
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLine."Line Discount Amount","Currency Factor");
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLine."Inv. Discount Amount","Currency Factor");
          end;
        end;

        PurchLine."Currency Code" := "Currency Code";
        if PurchLine.Quantity <> 0 then begin
          PurchLineAmount := ROUND(PurchLineAmount,Currency."Amount Rounding Precision");
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount / PurchLine.Quantity,Currency."Unit-Amount Rounding Precision");
        end else
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount,Currency."Unit-Amount Rounding Precision");
        PurchLine."Line Discount Amount" := ROUND(PurchLine."Line Discount Amount",Currency."Amount Rounding Precision");
        PurchLine."Inv. Discount Amount" := ROUND(PurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision");

        CalcVAT(
          PurchLine."Direct Unit Cost",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Unit-Amount Rounding Precision");
        CalcVAT(
          PurchLine."Line Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
        CalcVAT(
          PurchLine."Inv. Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE IsRecalculateAmount@63(FromCurrencyCode@1000 : Code[10];ToCurrencyCode@1002 : Code[10];FromPricesInclVAT@1001 : Boolean;ToPricesInclVAT@1003 : Boolean) : Boolean;
    BEGIN
      exit(
        (FromCurrencyCode <> ToCurrencyCode) or
        (FromPricesInclVAT <> ToPricesInclVAT));
    END;

    LOCAL PROCEDURE UpdateRevSalesLineAmount@67(VAR SalesLine@1000 : Record "Sales Line";OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      Amount@1007 : Decimal;
    BEGIN
      if (OrgQtyBase = 0) or (SalesLine.Quantity = 0) or
         ((FromPricesInclVAT = ToPricesInclVAT) and (OrgQtyBase = SalesLine."Quantity (Base)"))
      then
        exit;

      Amount := SalesLine.Quantity * SalesLine."Unit Price";
      CalcVAT(
        Amount,SalesLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      SalesLine."Unit Price" := Amount / SalesLine.Quantity;
      SalesLine."Line Discount Amount" :=
        ROUND(
          ROUND(SalesLine.Quantity * SalesLine."Unit Price",Currency."Amount Rounding Precision") *
          SalesLine."Line Discount %" / 100,
          Currency."Amount Rounding Precision");
      Amount :=
        ROUND(SalesLine."Inv. Discount Amount" / OrgQtyBase * SalesLine."Quantity (Base)",Currency."Amount Rounding Precision");
      CalcVAT(
        Amount,SalesLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      SalesLine."Inv. Discount Amount" := Amount;
    END;

    [External]
    PROCEDURE CalculateRevSalesLineAmount@84(VAR SalesLine@1000 : Record "Sales Line";OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      UnitPrice@1007 : Decimal;
      LineDiscAmt@1001 : Decimal;
      InvDiscAmt@1002 : Decimal;
    BEGIN
      UpdateRevSalesLineAmount(SalesLine,OrgQtyBase,FromPricesInclVAT,ToPricesInclVAT);

      UnitPrice := SalesLine."Unit Price";
      LineDiscAmt := SalesLine."Line Discount Amount";
      InvDiscAmt := SalesLine."Inv. Discount Amount";

      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.VALIDATE("Line Discount Amount",LineDiscAmt);
      SalesLine.VALIDATE("Inv. Discount Amount",InvDiscAmt);
    END;

    LOCAL PROCEDURE UpdateRevPurchLineAmount@65(VAR PurchLine@1000 : Record "Purchase Line";OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      Amount@1007 : Decimal;
    BEGIN
      if (OrgQtyBase = 0) or (PurchLine.Quantity = 0) or
         ((FromPricesInclVAT = ToPricesInclVAT) and (OrgQtyBase = PurchLine."Quantity (Base)"))
      then
        exit;

      Amount := PurchLine.Quantity * PurchLine."Direct Unit Cost";
      CalcVAT(
        Amount,PurchLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      PurchLine."Direct Unit Cost" := Amount / PurchLine.Quantity;
      PurchLine."Line Discount Amount" :=
        ROUND(
          ROUND(PurchLine.Quantity * PurchLine."Direct Unit Cost",Currency."Amount Rounding Precision") *
          PurchLine."Line Discount %" / 100,
          Currency."Amount Rounding Precision");
      Amount :=
        ROUND(PurchLine."Inv. Discount Amount" / OrgQtyBase * PurchLine."Quantity (Base)",Currency."Amount Rounding Precision");
      CalcVAT(
        Amount,PurchLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      PurchLine."Inv. Discount Amount" := Amount;
    END;

    [External]
    PROCEDURE CalculateRevPurchLineAmount@82(VAR PurchLine@1000 : Record "Purchase Line";OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      DirectUnitCost@1007 : Decimal;
      LineDiscAmt@1001 : Decimal;
      InvDiscAmt@1002 : Decimal;
    BEGIN
      UpdateRevPurchLineAmount(PurchLine,OrgQtyBase,FromPricesInclVAT,ToPricesInclVAT);

      DirectUnitCost := PurchLine."Direct Unit Cost";
      LineDiscAmt := PurchLine."Line Discount Amount";
      InvDiscAmt := PurchLine."Inv. Discount Amount";

      PurchLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchLine.VALIDATE("Line Discount Amount",LineDiscAmt);
      PurchLine.VALIDATE("Inv. Discount Amount",InvDiscAmt);
    END;

    LOCAL PROCEDURE InitCurrency@81(CurrencyCode@1000 : Code[10]);
    BEGIN
      if CurrencyCode <> '' then
        Currency.GET(CurrencyCode)
      else
        Currency.InitRoundingPrecision;

      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      Currency.TESTFIELD("Amount Rounding Precision");
    END;

    LOCAL PROCEDURE OpenWindow@79();
    BEGIN
      Window.OPEN(
        Text022 +
        Text023 +
        Text024);
      WindowUpdateDateTime := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@75() : Boolean;
    BEGIN
      if CURRENTDATETIME - WindowUpdateDateTime >= 1000 then begin
        WindowUpdateDateTime := CURRENTDATETIME;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE ConfirmApply@32();
    BEGIN
      AskApply := false;
      ApplyFully := false;
    END;

    LOCAL PROCEDURE ConvertFromBase@47(VAR Quantity@1000 : Decimal;QuantityBase@1001 : Decimal;QtyPerUOM@1002 : Decimal);
    BEGIN
      if QtyPerUOM = 0 then
        Quantity := QuantityBase
      else
        Quantity :=
          ROUND(QuantityBase / QtyPerUOM,0.00001);
    END;

    LOCAL PROCEDURE Sign@77(Quantity@1000 : Decimal) : Decimal;
    BEGIN
      if Quantity < 0 then
        exit(-1);
      exit(1);
    END;

    [External]
    PROCEDURE ShowMessageReapply@80(OriginalQuantity@1000 : Boolean);
    VAR
      Text@1001 : Text[1024];
    BEGIN
      Text := '';
      if SkippedLine then
        Text := Text029;
      if OriginalQuantity and ReappDone then
        if Text = '' then
          Text := Text025;
      if SomeAreFixed then
        MESSAGE(Text031);
      if Text <> '' then
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE LinkJobPlanningLine@86(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1001 : Record "Sales Line";
      JobPlanningLine@1002 : Record "Job Planning Line";
      JobPlanningLineInvoice@1003 : Record "Job Planning Line Invoice";
    BEGIN
      JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      repeat
        JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
        if JobPlanningLine.FINDFIRST then begin
          JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
          JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
          JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
          case SalesHeader."Document Type" of
            SalesHeader."Document Type"::Invoice:
              begin
                JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::Invoice;
                JobPlanningLineInvoice."Quantity Transferred" := SalesLine.Quantity;
              end;
            SalesHeader."Document Type"::"Credit Memo":
              begin
                JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Credit Memo";
                JobPlanningLineInvoice."Quantity Transferred" := -SalesLine.Quantity;
              end;
            else
              exit;
          end;
          JobPlanningLineInvoice."Document No." := SalesHeader."No.";
          JobPlanningLineInvoice."Line No." := SalesLine."Line No.";
          JobPlanningLineInvoice."Transferred Date" := SalesHeader."Posting Date";
          JobPlanningLineInvoice.INSERT;

          JobPlanningLine.UpdateQtyToTransfer;
          JobPlanningLine.MODIFY;
        end;
      until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetQtyOfPurchILENotShipped@6(ItemLedgerEntryNo@1000 : Integer) : Decimal;
    VAR
      ItemApplicationEntry@1003 : Record "Item Application Entry";
      ItemLedgerEntryLocal@1001 : Record "Item Ledger Entry";
      QtyNotShipped@1002 : Decimal;
    BEGIN
      QtyNotShipped := 0;
      with ItemApplicationEntry do begin
        RESET;
        SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.");
        SETRANGE("Inbound Item Entry No.",ItemLedgerEntryNo);
        SETRANGE("Outbound Item Entry No.",0);
        if not FINDFIRST then
          exit(QtyNotShipped);
        QtyNotShipped := Quantity;
        SETFILTER("Outbound Item Entry No.",'<>0');
        if not FINDSET(false,false) then
          exit(QtyNotShipped);
        repeat
          ItemLedgerEntryLocal.GET("Outbound Item Entry No.");
          if (ItemLedgerEntryLocal."Entry Type" in
              [ItemLedgerEntryLocal."Entry Type"::Sale,
               ItemLedgerEntryLocal."Entry Type"::Purchase]) or
             ((ItemLedgerEntryLocal."Entry Type" in
               [ItemLedgerEntryLocal."Entry Type"::"Positive Adjmt.",ItemLedgerEntryLocal."Entry Type"::"Negative Adjmt."]) and
              (ItemLedgerEntryLocal."Job No." = ''))
          then
            QtyNotShipped += Quantity;
        until NEXT = 0;
      end;
      exit(QtyNotShipped);
    END;

    LOCAL PROCEDURE CopyAsmOrderToAsmOrder@13(VAR TempFromAsmHeader@1007 : TEMPORARY Record "Assembly Header";VAR TempFromAsmLine@1008 : TEMPORARY Record "Assembly Line";ToSalesLine@1000 : Record "Sales Line";ToAsmHeaderDocType@1002 : Integer;ToAsmHeaderDocNo@1009 : Code[20];InclAsmHeader@1012 : Boolean);
    VAR
      FromAsmHeader@1001 : Record "Assembly Header";
      ToAsmHeader@1004 : Record "Assembly Header";
      TempToAsmHeader@1100 : TEMPORARY Record "Assembly Header";
      AssembleToOrderLink@1003 : Record "Assemble-to-Order Link";
      ToAsmLine@1006 : Record "Assembly Line";
      BasicAsmOrderCopy@1010 : Boolean;
    BEGIN
      if ToAsmHeaderDocType = -1 then
        exit;
      BasicAsmOrderCopy := ToAsmHeaderDocNo <> '';
      if BasicAsmOrderCopy then
        ToAsmHeader.GET(ToAsmHeaderDocType,ToAsmHeaderDocNo)
      else begin
        if ToSalesLine.AsmToOrderExists(FromAsmHeader) then
          exit;
        CLEAR(ToAsmHeader);
        AssembleToOrderLink.InsertAsmHeader(ToAsmHeader,ToAsmHeaderDocType,'');
        InclAsmHeader := true;
      end;

      if InclAsmHeader then begin
        if BasicAsmOrderCopy then begin
          TempToAsmHeader := ToAsmHeader;
          TempToAsmHeader.INSERT;
          ProcessToAsmHeader(TempToAsmHeader,TempFromAsmHeader,ToSalesLine,true,true); // Basic, Availabilitycheck
          CheckAsmOrderAvailability(TempToAsmHeader,TempFromAsmLine,ToSalesLine);
        end;
        ProcessToAsmHeader(ToAsmHeader,TempFromAsmHeader,ToSalesLine,BasicAsmOrderCopy,false);
      end else
        if BasicAsmOrderCopy then
          CheckAsmOrderAvailability(ToAsmHeader,TempFromAsmLine,ToSalesLine);
      CreateToAsmLines(ToAsmHeader,TempFromAsmLine,ToAsmLine,ToSalesLine,BasicAsmOrderCopy,false);
      if not BasicAsmOrderCopy then
        with AssembleToOrderLink do begin
          "Assembly Document Type" := ToAsmHeader."Document Type";
          "Assembly Document No." := ToAsmHeader."No.";
          Type := Type::Sale;
          "Document Type" := ToSalesLine."Document Type";
          "Document No." := ToSalesLine."Document No.";
          "Document Line No." := ToSalesLine."Line No.";
          INSERT;
          if ToSalesLine."Document Type" = ToSalesLine."Document Type"::Order then begin
            if ToSalesLine."Shipment Date" = 0D then begin
              ToSalesLine."Shipment Date" := ToAsmHeader."Due Date";
              ToSalesLine.MODIFY;
            end;
            ReserveAsmToSale(ToSalesLine,ToSalesLine.Quantity,ToSalesLine."Quantity (Base)");
          end;
        end;

      ToAsmHeader.ShowDueDateBeforeWorkDateMsg;
    END;

    [External]
    PROCEDURE CopyAsmHeaderToAsmHeader@90(FromAsmHeader@1000 : Record "Assembly Header";ToAsmHeader@1001 : Record "Assembly Header";IncludeHeader@1003 : Boolean);
    VAR
      EmptyToSalesLine@1002 : Record "Sales Line";
    BEGIN
      InitialToAsmHeaderCheck(ToAsmHeader,IncludeHeader);
      GenerateAsmDataFromNonPosted(FromAsmHeader);
      CLEAR(EmptyToSalesLine);
      EmptyToSalesLine.INIT;
      CopyAsmOrderToAsmOrder(TempAsmHeader,TempAsmLine,EmptyToSalesLine,ToAsmHeader."Document Type",ToAsmHeader."No.",IncludeHeader);
    END;

    [External]
    PROCEDURE CopyPostedAsmHeaderToAsmHeader@14(PostedAsmHeader@1000 : Record "Posted Assembly Header";ToAsmHeader@1001 : Record "Assembly Header";IncludeHeader@1003 : Boolean);
    VAR
      EmptyToSalesLine@1002 : Record "Sales Line";
    BEGIN
      InitialToAsmHeaderCheck(ToAsmHeader,IncludeHeader);
      GenerateAsmDataFromPosted(PostedAsmHeader,0);
      CLEAR(EmptyToSalesLine);
      EmptyToSalesLine.INIT;
      CopyAsmOrderToAsmOrder(TempAsmHeader,TempAsmLine,EmptyToSalesLine,ToAsmHeader."Document Type",ToAsmHeader."No.",IncludeHeader);
    END;

    LOCAL PROCEDURE GenerateAsmDataFromNonPosted@18(AsmHeader@1000 : Record "Assembly Header");
    VAR
      AsmLine@1001 : Record "Assembly Line";
    BEGIN
      InitAsmCopyHandling(false);
      TempAsmHeader := AsmHeader;
      TempAsmHeader.INSERT;
      AsmLine.SETRANGE("Document Type",AsmHeader."Document Type");
      AsmLine.SETRANGE("Document No.",AsmHeader."No.");
      if AsmLine.FINDSET then
        repeat
          TempAsmLine := AsmLine;
          TempAsmLine.INSERT;
        until AsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GenerateAsmDataFromPosted@87(PostedAsmHeader@1000 : Record "Posted Assembly Header";DocType@1001 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"');
    VAR
      PostedAsmLine@1002 : Record "Posted Assembly Line";
    BEGIN
      InitAsmCopyHandling(false);
      TempAsmHeader.TRANSFERFIELDS(PostedAsmHeader);
      case DocType of
        DocType::Quote:
          TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::Quote;
        DocType::Order:
          TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::Order;
        DocType::"Blanket Order":
          TempAsmHeader."Document Type" := TempAsmHeader."Document Type"::"Blanket Order";
        else
          exit;
      end;
      TempAsmHeader.INSERT;
      PostedAsmLine.SETRANGE("Document No.",PostedAsmHeader."No.");
      if PostedAsmLine.FINDSET then
        repeat
          TempAsmLine.TRANSFERFIELDS(PostedAsmLine);
          TempAsmLine."Document No." := TempAsmHeader."No.";
          TempAsmLine."Cost Amount" := PostedAsmLine.Quantity * PostedAsmLine."Unit Cost";
          TempAsmLine.INSERT;
        until PostedAsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAsmDataFromSalesInvLine@9(DocType@1001 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"') : Boolean;
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ValueEntry2@1000 : Record "Value Entry";
      ItemLedgerEntry@1003 : Record "Item Ledger Entry";
      ItemLedgerEntry2@1005 : Record "Item Ledger Entry";
      SalesShipmentLine@1004 : Record "Sales Shipment Line";
    BEGIN
      CLEAR(PostedAsmHeader);
      if TempSalesInvLine.Type <> TempSalesInvLine.Type::Item then
        exit(false);
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.",TempSalesInvLine."Document No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.SETRANGE("Document Line No.",TempSalesInvLine."Line No.");
      if not ValueEntry.FINDFIRST then
        exit(false);
      if not ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.") then
        exit(false);
      if ItemLedgerEntry."Document Type" <> ItemLedgerEntry."Document Type"::"Sales Shipment" then
        exit(false);
      SalesShipmentLine.GET(ItemLedgerEntry."Document No.",ItemLedgerEntry."Document Line No.");
      if not SalesShipmentLine.AsmToShipmentExists(PostedAsmHeader) then
        exit(false);
      if ValueEntry.COUNT > 1 then begin
        ValueEntry2.COPY(ValueEntry);
        ValueEntry2.SETFILTER("Item Ledger Entry No.",'<>%1',ValueEntry."Item Ledger Entry No.");
        if ValueEntry2.FINDSET then
          repeat
            ItemLedgerEntry2.GET(ValueEntry2."Item Ledger Entry No.");
            if (ItemLedgerEntry2."Document Type" <> ItemLedgerEntry."Document Type") or
               (ItemLedgerEntry2."Document No." <> ItemLedgerEntry."Document No.") or
               (ItemLedgerEntry2."Document Line No." <> ItemLedgerEntry."Document Line No.")
            then
              ERROR(Text032,TempSalesInvLine."Document No.");
          until ValueEntry2.NEXT = 0;
      end;
      GenerateAsmDataFromPosted(PostedAsmHeader,DocType);
      exit(true);
    END;

    [External]
    PROCEDURE InitAsmCopyHandling@17(ResetQuantities@1000 : Boolean);
    BEGIN
      if ResetQuantities then begin
        QtyToAsmToOrder := 0;
        QtyToAsmToOrderBase := 0;
      end;
      TempAsmHeader.DELETEALL;
      TempAsmLine.DELETEALL;
    END;

    LOCAL PROCEDURE RetrieveSalesInvLine@92(SalesLine@1000 : Record "Sales Line";PosNo@1001 : Integer;LineCountsEqual@1002 : Boolean) : Boolean;
    BEGIN
      if not LineCountsEqual then
        exit(false);
      TempSalesInvLine.FINDSET;
      if PosNo > 1 then
        TempSalesInvLine.NEXT(PosNo - 1);
      exit((SalesLine.Type = TempSalesInvLine.Type) and (SalesLine."No." = TempSalesInvLine."No."));
    END;

    [External]
    PROCEDURE InitialToAsmHeaderCheck@21(ToAsmHeader@1000 : Record "Assembly Header";IncludeHeader@1001 : Boolean);
    BEGIN
      ToAsmHeader.TESTFIELD("No.");
      if IncludeHeader then begin
        ToAsmHeader.TESTFIELD("Item No.",'');
        ToAsmHeader.TESTFIELD(Quantity,0);
      end else begin
        ToAsmHeader.TESTFIELD("Item No.");
        ToAsmHeader.TESTFIELD(Quantity);
      end;
    END;

    LOCAL PROCEDURE GetAsmOrderType@85(SalesLineDocType@1000 : 'Quote,Order,,,"Blanket Order"') : Integer;
    BEGIN
      if SalesLineDocType in [SalesLineDocType::Quote,SalesLineDocType::Order,SalesLineDocType::"Blanket Order"] then
        exit(SalesLineDocType);
      exit(-1);
    END;

    LOCAL PROCEDURE ProcessToAsmHeader@1110(VAR ToAsmHeader@1101 : Record "Assembly Header";TempFromAsmHeader@1102 : TEMPORARY Record "Assembly Header";ToSalesLine@1104 : Record "Sales Line";BasicAsmOrderCopy@1105 : Boolean;AvailabilityCheck@1106 : Boolean);
    BEGIN
      with ToAsmHeader do begin
        if AvailabilityCheck then begin
          "Item No." := TempFromAsmHeader."Item No.";
          "Location Code" := TempFromAsmHeader."Location Code";
          "Variant Code" := TempFromAsmHeader."Variant Code";
          "Unit of Measure Code" := TempFromAsmHeader."Unit of Measure Code";
        end else begin
          VALIDATE("Item No.",TempFromAsmHeader."Item No.");
          VALIDATE("Location Code",TempFromAsmHeader."Location Code");
          VALIDATE("Variant Code",TempFromAsmHeader."Variant Code");
          VALIDATE("Unit of Measure Code",TempFromAsmHeader."Unit of Measure Code");
        end;
        if BasicAsmOrderCopy then begin
          VALIDATE("Due Date",TempFromAsmHeader."Due Date");
          Quantity := TempFromAsmHeader.Quantity;
          "Quantity (Base)" := TempFromAsmHeader."Quantity (Base)";
        end else begin
          if ToSalesLine."Shipment Date" <> 0D then
            VALIDATE("Due Date",ToSalesLine."Shipment Date");
          Quantity := QtyToAsmToOrder;
          "Quantity (Base)" := QtyToAsmToOrderBase;
        end;
        "Unit Cost" := TempFromAsmHeader."Unit Cost";
        RoundQty(Quantity);
        RoundQty("Quantity (Base)");
        "Cost Amount" := ROUND(Quantity * "Unit Cost");
        InitRemainingQty;
        InitQtyToAssemble;
        if not AvailabilityCheck then begin
          VALIDATE("Quantity to Assemble");
          VALIDATE("Planning Flexibility",TempFromAsmHeader."Planning Flexibility");
        end;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE CreateToAsmLines@94(ToAsmHeader@1001 : Record "Assembly Header";VAR FromAsmLine@1000 : Record "Assembly Line";VAR ToAssemblyLine@1002 : Record "Assembly Line";ToSalesLine@1005 : Record "Sales Line";BasicAsmOrderCopy@1003 : Boolean;AvailabilityCheck@1011 : Boolean);
    VAR
      AssemblyLineMgt@1010 : Codeunit "Assembly Line Management";
      UOMMgt@1004 : Codeunit "Unit of Measure Management";
    BEGIN
      if FromAsmLine.FINDSET then
        repeat
          ToAssemblyLine.INIT;
          ToAssemblyLine."Document Type" := ToAsmHeader."Document Type";
          ToAssemblyLine."Document No." := ToAsmHeader."No.";
          ToAssemblyLine."Line No." := AssemblyLineMgt.GetNextAsmLineNo(ToAssemblyLine,AvailabilityCheck);
          ToAssemblyLine.INSERT(not AvailabilityCheck);
          if AvailabilityCheck then begin
            ToAssemblyLine.Type := FromAsmLine.Type;
            ToAssemblyLine."No." := FromAsmLine."No.";
            ToAssemblyLine."Resource Usage Type" := FromAsmLine."Resource Usage Type";
            ToAssemblyLine."Unit of Measure Code" := FromAsmLine."Unit of Measure Code";
            ToAssemblyLine."Quantity per" := FromAsmLine."Quantity per";
            ToAssemblyLine.Quantity := GetAppliedQuantityForAsmLine(BasicAsmOrderCopy,ToAsmHeader,FromAsmLine,ToSalesLine);
          end else begin
            ToAssemblyLine.VALIDATE(Type,FromAsmLine.Type);
            ToAssemblyLine.VALIDATE("No.",FromAsmLine."No.");
            ToAssemblyLine.VALIDATE("Resource Usage Type",FromAsmLine."Resource Usage Type");
            ToAssemblyLine.VALIDATE("Unit of Measure Code",FromAsmLine."Unit of Measure Code");
            if ToAssemblyLine.Type <> ToAssemblyLine.Type::" " then
              ToAssemblyLine.VALIDATE("Quantity per",FromAsmLine."Quantity per");
            ToAssemblyLine.VALIDATE(Quantity,GetAppliedQuantityForAsmLine(BasicAsmOrderCopy,ToAsmHeader,FromAsmLine,ToSalesLine));
          end;
          ToAssemblyLine.ValidateDueDate(ToAsmHeader,ToAsmHeader."Starting Date",false);
          ToAssemblyLine.ValidateLeadTimeOffset(ToAsmHeader,FromAsmLine."Lead-Time Offset",false);
          ToAssemblyLine.Description := FromAsmLine.Description;
          ToAssemblyLine."Description 2" := FromAsmLine."Description 2";
          ToAssemblyLine.Position := FromAsmLine.Position;
          ToAssemblyLine."Position 2" := FromAsmLine."Position 2";
          ToAssemblyLine."Position 3" := FromAsmLine."Position 3";
          if ToAssemblyLine.Type <> ToAssemblyLine.Type::" " then begin
            ToAssemblyLine.VALIDATE("Unit Cost",FromAsmLine."Unit Cost");
            if AvailabilityCheck then begin
              with ToAssemblyLine do begin
                "Quantity (Base)" := UOMMgt.CalcBaseQty(Quantity,"Qty. per Unit of Measure");
                "Remaining Quantity" := "Quantity (Base)";
                "Quantity to Consume" := ToAsmHeader."Quantity to Assemble" * FromAsmLine."Quantity per";
                "Quantity to Consume (Base)" := UOMMgt.CalcBaseQty("Quantity to Consume","Qty. per Unit of Measure");
              end;
            end else
              ToAssemblyLine.VALIDATE("Quantity to Consume",ToAsmHeader."Quantity to Assemble" * FromAsmLine."Quantity per");
          end;
          if ToAssemblyLine.Type = ToAssemblyLine.Type::Item then
            if AvailabilityCheck then begin
              ToAssemblyLine."Location Code" := FromAsmLine."Location Code";
              ToAssemblyLine."Variant Code" := FromAsmLine."Variant Code";
            end else begin
              ToAssemblyLine.VALIDATE("Location Code",FromAsmLine."Location Code");
              ToAssemblyLine.VALIDATE("Variant Code",FromAsmLine."Variant Code");
            end;
          ToAssemblyLine.MODIFY(not AvailabilityCheck);
        until FromAsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckAsmOrderAvailability@95(ToAsmHeader@1007 : Record "Assembly Header";VAR FromAsmLine@1006 : Record "Assembly Line";ToSalesLine@1004 : Record "Sales Line");
    VAR
      TempToAsmHeader@1002 : TEMPORARY Record "Assembly Header";
      TempToAsmLine@1003 : TEMPORARY Record "Assembly Line";
      AsmLineOnDestinationOrder@1010 : Record "Assembly Line";
      AssemblyLineMgt@1008 : Codeunit "Assembly Line Management";
      ItemCheckAvail@1009 : Codeunit "Item-Check Avail.";
      LineNo@1005 : Integer;
    BEGIN
      TempToAsmHeader := ToAsmHeader;
      TempToAsmHeader.INSERT;
      CreateToAsmLines(TempToAsmHeader,FromAsmLine,TempToAsmLine,ToSalesLine,true,true);
      if TempToAsmLine.FINDLAST then
        LineNo := TempToAsmLine."Line No.";
      CLEAR(TempToAsmLine);
      with AsmLineOnDestinationOrder do begin
        SETRANGE("Document Type",ToAsmHeader."Document Type");
        SETRANGE("Document No.",ToAsmHeader."No.");
        SETRANGE(Type,Type::Item);
      end;
      if AsmLineOnDestinationOrder.FINDSET then
        repeat
          TempToAsmLine := AsmLineOnDestinationOrder;
          LineNo += 10000;
          TempToAsmLine."Line No." := LineNo;
          TempToAsmLine.INSERT;
        until AsmLineOnDestinationOrder.NEXT = 0;
      if AssemblyLineMgt.ShowAvailability(false,TempToAsmHeader,TempToAsmLine) then
        ItemCheckAvail.RaiseUpdateInterruptedError;
      TempToAsmLine.DELETEALL;
    END;

    LOCAL PROCEDURE GetAppliedQuantityForAsmLine@101(BasicAsmOrderCopy@1000 : Boolean;ToAsmHeader@1001 : Record "Assembly Header";TempFromAsmLine@1002 : TEMPORARY Record "Assembly Line";ToSalesLine@1003 : Record "Sales Line") : Decimal;
    BEGIN
      if BasicAsmOrderCopy then
        exit(ToAsmHeader.Quantity * TempFromAsmLine."Quantity per");
      case ToSalesLine."Document Type" of
        ToSalesLine."Document Type"::Order:
          exit(ToSalesLine."Qty. to Assemble to Order" * TempFromAsmLine."Quantity per");
        ToSalesLine."Document Type"::Quote,
        ToSalesLine."Document Type"::"Blanket Order":
          exit(ToSalesLine.Quantity * TempFromAsmLine."Quantity per");
      end;
    END;

    LOCAL PROCEDURE CopyDocLines@93(RecalculateAmount@1002 : Boolean;ToPurchLine@1001 : Record "Purchase Line";VAR FromPurchLine@1000 : Record "Purchase Line");
    BEGIN
      if not RecalculateAmount then
        exit;
      if (ToPurchLine.Type <> ToPurchLine.Type::" ") and (ToPurchLine."No." <> '') then begin
        ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
        ToPurchLine.VALIDATE(
          "Inv. Discount Amount",
          ROUND(FromPurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
      end;
    END;

    LOCAL PROCEDURE CheckCreditLimit@73(FromSalesHeader@1000 : Record "Sales Header";ToSalesHeader@1001 : Record "Sales Header");
    BEGIN
      if SkipTestCreditLimit then
        exit;

      if IncludeHeader then
        CustCheckCreditLimit.SalesHeaderCheck(FromSalesHeader)
      else
        CustCheckCreditLimit.SalesHeaderCheck(ToSalesHeader);
    END;

    LOCAL PROCEDURE CheckUnappliedLines@102(SkippedLine@1000 : Boolean;VAR MissingExCostRevLink@1001 : Boolean);
    BEGIN
      if SkippedLine and MissingExCostRevLink then begin
        if not WarningDone then
          MESSAGE(Text030);
        MissingExCostRevLink := false;
        WarningDone := true;
      end;
    END;

    LOCAL PROCEDURE SetDefaultValuesToSalesLine@103(VAR ToSalesLine@1000 : Record "Sales Line";ToSalesHeader@1001 : Record "Sales Header";VATDifference@1002 : Decimal);
    BEGIN
      if ToSalesLine."Document Type" <> ToSalesLine."Document Type"::Order then begin
        ToSalesLine."Prepayment %" := 0;
        ToSalesLine."Prepayment VAT %" := 0;
        ToSalesLine."Prepmt. VAT Calc. Type" := 0;
        ToSalesLine."Prepayment VAT Identifier" := '';
        ToSalesLine."Prepayment VAT %" := 0;
        ToSalesLine."Prepayment Tax Group Code" := '';
        ToSalesLine."Prepmt. Line Amount" := 0;
        ToSalesLine."Prepmt. Amt. Incl. VAT" := 0;
      end;
      ToSalesLine."Prepmt. Amt. Inv." := 0;
      ToSalesLine."Prepmt. Amount Inv. (LCY)" := 0;
      ToSalesLine."Prepayment Amount" := 0;
      ToSalesLine."Prepmt. VAT Base Amt." := 0;
      ToSalesLine."Prepmt Amt to Deduct" := 0;
      ToSalesLine."Prepmt Amt Deducted" := 0;
      ToSalesLine."Prepmt. Amount Inv. Incl. VAT" := 0;
      ToSalesLine."Prepayment VAT Difference" := 0;
      ToSalesLine."Prepmt VAT Diff. to Deduct" := 0;
      ToSalesLine."Prepmt VAT Diff. Deducted" := 0;
      ToSalesLine."Prepmt. Amt. Incl. VAT" := 0;
      ToSalesLine."Prepmt. VAT Amount Inv. (LCY)" := 0;
      ToSalesLine."Quantity Shipped" := 0;
      ToSalesLine."Qty. Shipped (Base)" := 0;
      ToSalesLine."Return Qty. Received" := 0;
      ToSalesLine."Return Qty. Received (Base)" := 0;
      ToSalesLine."Quantity Invoiced" := 0;
      ToSalesLine."Qty. Invoiced (Base)" := 0;
      ToSalesLine."Reserved Quantity" := 0;
      ToSalesLine."Reserved Qty. (Base)" := 0;
      ToSalesLine."Qty. to Ship" := 0;
      ToSalesLine."Qty. to Ship (Base)" := 0;
      ToSalesLine."Return Qty. to Receive" := 0;
      ToSalesLine."Return Qty. to Receive (Base)" := 0;
      ToSalesLine."Qty. to Invoice" := 0;
      ToSalesLine."Qty. to Invoice (Base)" := 0;
      ToSalesLine."Qty. Shipped Not Invoiced" := 0;
      ToSalesLine."Return Qty. Rcd. Not Invd." := 0;
      ToSalesLine."Shipped Not Invoiced" := 0;
      ToSalesLine."Return Rcd. Not Invd." := 0;
      ToSalesLine."Qty. Shipped Not Invd. (Base)" := 0;
      ToSalesLine."Ret. Qty. Rcd. Not Invd.(Base)" := 0;
      ToSalesLine."Shipped Not Invoiced (LCY)" := 0;
      ToSalesLine."Return Rcd. Not Invd. (LCY)" := 0;
      ToSalesLine."Job No." := '';
      ToSalesLine."Job Task No." := '';
      ToSalesLine."Job Contract Entry No." := 0;
      if ToSalesLine."Document Type" in
         [ToSalesLine."Document Type"::"Blanket Order",
          ToSalesLine."Document Type"::"Credit Memo",
          ToSalesLine."Document Type"::"Return Order"]
      then begin
        ToSalesLine."Blanket Order No." := '';
        ToSalesLine."Blanket Order Line No." := 0;
      end;
      ToSalesLine.InitOutstanding;
      if ToSalesLine."Document Type" in
         [ToSalesLine."Document Type"::"Return Order",ToSalesLine."Document Type"::"Credit Memo"]
      then
        ToSalesLine.InitQtyToReceive
      else
        ToSalesLine.InitQtyToShip;
      ToSalesLine."VAT Difference" := VATDifference;
      ToSalesLine."Shipment No." := '';
      ToSalesLine."Shipment Line No." := 0;
      if not CreateToHeader and RecalculateLines then
        ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date";
      ToSalesLine."Appl.-from Item Entry" := 0;
      ToSalesLine."Appl.-to Item Entry" := 0;

      ToSalesLine."Purchase Order No." := '';
      ToSalesLine."Purch. Order Line No." := 0;
      ToSalesLine."Special Order Purchase No." := '';
      ToSalesLine."Special Order Purch. Line No." := 0;
    END;

    LOCAL PROCEDURE SetDefaultValuesToPurchLine@108(VAR ToPurchLine@1000 : Record "Purchase Line";ToPurchHeader@1002 : Record "Purchase Header";VATDifference@1001 : Decimal);
    BEGIN
      if ToPurchLine."Document Type" <> ToPurchLine."Document Type"::Order then begin
        ToPurchLine."Prepayment %" := 0;
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepmt. VAT Calc. Type" := 0;
        ToPurchLine."Prepayment VAT Identifier" := '';
        ToPurchLine."Prepayment VAT %" := 0;
        ToPurchLine."Prepayment Tax Group Code" := '';
        ToPurchLine."Prepmt. Line Amount" := 0;
        ToPurchLine."Prepmt. Amt. Incl. VAT" := 0;
      end;
      ToPurchLine."Prepmt. Amt. Inv." := 0;
      ToPurchLine."Prepmt. Amount Inv. (LCY)" := 0;
      ToPurchLine."Prepayment Amount" := 0;
      ToPurchLine."Prepmt. VAT Base Amt." := 0;
      ToPurchLine."Prepmt Amt to Deduct" := 0;
      ToPurchLine."Prepmt Amt Deducted" := 0;
      ToPurchLine."Prepmt. Amount Inv. Incl. VAT" := 0;
      ToPurchLine."Prepayment VAT Difference" := 0;
      ToPurchLine."Prepmt VAT Diff. to Deduct" := 0;
      ToPurchLine."Prepmt VAT Diff. Deducted" := 0;
      ToPurchLine."Prepmt. Amt. Incl. VAT" := 0;
      ToPurchLine."Prepmt. VAT Amount Inv. (LCY)" := 0;
      ToPurchLine."Quantity Received" := 0;
      ToPurchLine."Qty. Received (Base)" := 0;
      ToPurchLine."Return Qty. Shipped" := 0;
      ToPurchLine."Return Qty. Shipped (Base)" := 0;
      ToPurchLine."Quantity Invoiced" := 0;
      ToPurchLine."Qty. Invoiced (Base)" := 0;
      ToPurchLine."Reserved Quantity" := 0;
      ToPurchLine."Reserved Qty. (Base)" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced" := 0;
      ToPurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
      ToPurchLine."Return Qty. Shipped Not Invd." := 0;
      ToPurchLine."Ret. Qty. Shpd Not Invd.(Base)" := 0;
      ToPurchLine."Qty. to Receive" := 0;
      ToPurchLine."Qty. to Receive (Base)" := 0;
      ToPurchLine."Return Qty. to Ship" := 0;
      ToPurchLine."Return Qty. to Ship (Base)" := 0;
      ToPurchLine."Qty. to Invoice" := 0;
      ToPurchLine."Qty. to Invoice (Base)" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced" := 0;
      ToPurchLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
      ToPurchLine."Return Shpd. Not Invd." := 0;
      ToPurchLine."Return Shpd. Not Invd. (LCY)" := 0;
      if ToPurchLine."Document Type" in
         [ToPurchLine."Document Type"::"Blanket Order",
          ToPurchLine."Document Type"::"Credit Memo",
          ToPurchLine."Document Type"::"Return Order"]
      then begin
        ToPurchLine."Blanket Order No." := '';
        ToPurchLine."Blanket Order Line No." := 0;
      end;

      ToPurchLine.InitOutstanding;
      if ToPurchLine."Document Type" in
         [ToPurchLine."Document Type"::"Return Order",ToPurchLine."Document Type"::"Credit Memo"]
      then
        ToPurchLine.InitQtyToShip
      else
        ToPurchLine.InitQtyToReceive;
      ToPurchLine."VAT Difference" := VATDifference;
      ToPurchLine."Receipt No." := '';
      ToPurchLine."Receipt Line No." := 0;
      if not CreateToHeader then
        ToPurchLine."Expected Receipt Date" := ToPurchHeader."Expected Receipt Date";
      ToPurchLine."Appl.-to Item Entry" := 0;

      ToPurchLine."Sales Order No." := '';
      ToPurchLine."Sales Order Line No." := 0;
      ToPurchLine."Special Order Sales No." := '';
      ToPurchLine."Special Order Sales Line No." := 0;
    END;

    LOCAL PROCEDURE CopyItemTrackingEntries@126(SalesLine@1000 : Record "Sales Line";VAR PurchLine@1001 : Record "Purchase Line";SalesPricesIncludingVAT@1006 : Boolean;PurchPricesIncludingVAT@1005 : Boolean);
    VAR
      TempItemLedgerEntry@1003 : TEMPORARY Record "Item Ledger Entry";
      TrackingSpecification@1008 : Record "Tracking Specification";
      ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
      MissingExCostRevLink@1004 : Boolean;
    BEGIN
      FindTrackingEntries(
        TempItemLedgerEntry,DATABASE::"Sales Line",TrackingSpecification."Source Subtype"::"5",
        SalesLine."Document No.",'',0,SalesLine."Line No.",SalesLine."No.");
      ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
        TempItemLedgerEntry,PurchLine,false,MissingExCostRevLink,
        SalesPricesIncludingVAT,PurchPricesIncludingVAT,true);
    END;

    LOCAL PROCEDURE FindTrackingEntries@125(VAR TempItemLedgerEntry@1007 : TEMPORARY Record "Item Ledger Entry";Type@1006 : Integer;Subtype@1005 : Integer;ID@1004 : Code[20];BatchName@1003 : Code[10];ProdOrderLine@1002 : Integer;RefNo@1001 : Integer;ItemNo@1000 : Code[20]);
    VAR
      TrackingSpecification@1008 : Record "Tracking Specification";
    BEGIN
      with TrackingSpecification do begin
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source ID",ID);
        SETRANGE("Source Ref. No.",RefNo);
        SETRANGE("Source Type",Type);
        SETRANGE("Source Subtype",Subtype);
        SETRANGE("Source Batch Name",BatchName);
        SETRANGE("Source Prod. Order Line",ProdOrderLine);
        SETRANGE("Item No.",ItemNo);
        if FINDSET then
          repeat
            AddItemLedgerEntry(TempItemLedgerEntry,"Lot No.","Serial No.","Entry No.");
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AddItemLedgerEntry@127(VAR TempItemLedgerEntry@1000 : TEMPORARY Record "Item Ledger Entry";LotNo@1003 : Code[20];SerialNo@1004 : Code[20];EntryNo@1001 : Integer);
    VAR
      ItemLedgerEntry@1002 : Record "Item Ledger Entry";
    BEGIN
      if (LotNo = '') and (SerialNo = '') then
        exit;

      if not ItemLedgerEntry.GET(EntryNo) then
        exit;

      TempItemLedgerEntry := ItemLedgerEntry;
      if TempItemLedgerEntry.INSERT then;
    END;

    LOCAL PROCEDURE CopyFieldsFromOldSalesHeader@111(VAR ToSalesHeader@1000 : Record "Sales Header";OldSalesHeader@1001 : Record "Sales Header");
    BEGIN
      with ToSalesHeader do begin
        "No. Series" := OldSalesHeader."No. Series";
        "Posting Description" := OldSalesHeader."Posting Description";
        "Posting No." := OldSalesHeader."Posting No.";
        "Posting No. Series" := OldSalesHeader."Posting No. Series";
        "Shipping No." := OldSalesHeader."Shipping No.";
        "Shipping No. Series" := OldSalesHeader."Shipping No. Series";
        "Return Receipt No." := OldSalesHeader."Return Receipt No.";
        "Return Receipt No. Series" := OldSalesHeader."Return Receipt No. Series";
        "Prepayment No. Series" := OldSalesHeader."Prepayment No. Series";
        "Prepayment No." := OldSalesHeader."Prepayment No.";
        "Prepmt. Posting Description" := OldSalesHeader."Prepmt. Posting Description";
        "Prepmt. Cr. Memo No. Series" := OldSalesHeader."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := OldSalesHeader."Prepmt. Cr. Memo No.";
        "Prepmt. Posting Description" := OldSalesHeader."Prepmt. Posting Description";
      end
    END;

    LOCAL PROCEDURE CopyFieldsFromOldPurchHeader@119(VAR ToPurchHeader@1000 : Record "Purchase Header";OldPurchHeader@1001 : Record "Purchase Header");
    BEGIN
      with ToPurchHeader do begin
        "No. Series" := OldPurchHeader."No. Series";
        "Posting Description" := OldPurchHeader."Posting Description";
        "Posting No." := OldPurchHeader."Posting No.";
        "Posting No. Series" := OldPurchHeader."Posting No. Series";
        "Receiving No." := OldPurchHeader."Receiving No.";
        "Receiving No. Series" := OldPurchHeader."Receiving No. Series";
        "Return Shipment No." := OldPurchHeader."Return Shipment No.";
        "Return Shipment No. Series" := OldPurchHeader."Return Shipment No. Series";
        "Prepayment No. Series" := OldPurchHeader."Prepayment No. Series";
        "Prepayment No." := OldPurchHeader."Prepayment No.";
        "Prepmt. Posting Description" := OldPurchHeader."Prepmt. Posting Description";
        "Prepmt. Cr. Memo No. Series" := OldPurchHeader."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := OldPurchHeader."Prepmt. Cr. Memo No.";
        "Prepmt. Posting Description" := OldPurchHeader."Prepmt. Posting Description";
      end;
    END;

    LOCAL PROCEDURE CheckFromSalesHeader@105(SalesHeaderFrom@1000 : Record "Sales Header";SalesHeaderTo@1001 : Record "Sales Header");
    BEGIN
      with SalesHeaderTo do begin
        SalesHeaderFrom.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
        SalesHeaderFrom.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
        SalesHeaderFrom.TESTFIELD("Customer Posting Group","Customer Posting Group");
        SalesHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        SalesHeaderFrom.TESTFIELD("Currency Code","Currency Code");
        SalesHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
      end;
    END;

    LOCAL PROCEDURE CheckFromSalesShptHeader@106(SalesShipmentHeaderFrom@1000 : Record "Sales Shipment Header";SalesHeaderTo@1001 : Record "Sales Header");
    BEGIN
      with SalesHeaderTo do begin
        SalesShipmentHeaderFrom.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
        SalesShipmentHeaderFrom.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
        SalesShipmentHeaderFrom.TESTFIELD("Customer Posting Group","Customer Posting Group");
        SalesShipmentHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        SalesShipmentHeaderFrom.TESTFIELD("Currency Code","Currency Code");
        SalesShipmentHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
      end;
    END;

    LOCAL PROCEDURE CheckFromSalesInvHeader@109(SalesInvoiceHeaderFrom@1000 : Record "Sales Invoice Header";SalesHeaderTo@1001 : Record "Sales Header");
    BEGIN
      with SalesHeaderTo do begin
        SalesInvoiceHeaderFrom.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
        SalesInvoiceHeaderFrom.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
        SalesInvoiceHeaderFrom.TESTFIELD("Customer Posting Group","Customer Posting Group");
        SalesInvoiceHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        SalesInvoiceHeaderFrom.TESTFIELD("Currency Code","Currency Code");
        SalesInvoiceHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
      end;
    END;

    LOCAL PROCEDURE CheckFromSalesReturnRcptHeader@107(ReturnReceiptHeaderFrom@1000 : Record "Return Receipt Header";SalesHeaderTo@1001 : Record "Sales Header");
    BEGIN
      with SalesHeaderTo do begin
        ReturnReceiptHeaderFrom.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
        ReturnReceiptHeaderFrom.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
        ReturnReceiptHeaderFrom.TESTFIELD("Customer Posting Group","Customer Posting Group");
        ReturnReceiptHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        ReturnReceiptHeaderFrom.TESTFIELD("Currency Code","Currency Code");
        ReturnReceiptHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
      end;
    END;

    LOCAL PROCEDURE CheckFromSalesCrMemoHeader@110(SalesCrMemoHeaderFrom@1000 : Record "Sales Cr.Memo Header";SalesHeaderTo@1001 : Record "Sales Header");
    BEGIN
      with SalesHeaderTo do begin
        SalesCrMemoHeaderFrom.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
        SalesCrMemoHeaderFrom.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
        SalesCrMemoHeaderFrom.TESTFIELD("Customer Posting Group","Customer Posting Group");
        SalesCrMemoHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        SalesCrMemoHeaderFrom.TESTFIELD("Currency Code","Currency Code");
        SalesCrMemoHeaderFrom.TESTFIELD("Prices Including VAT","Prices Including VAT");
      end;
    END;

    LOCAL PROCEDURE CheckFromPurchaseHeader@118(PurchaseHeaderFrom@1000 : Record "Purchase Header";PurchaseHeaderTo@1001 : Record "Purchase Header");
    BEGIN
      with PurchaseHeaderTo do begin
        PurchaseHeaderFrom.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
        PurchaseHeaderFrom.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
        PurchaseHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
        PurchaseHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        PurchaseHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      end;
    END;

    LOCAL PROCEDURE CheckFromPurchaseRcptHeader@117(PurchRcptHeaderFrom@1000 : Record "Purch. Rcpt. Header";PurchaseHeaderTo@1001 : Record "Purchase Header");
    BEGIN
      with PurchaseHeaderTo do begin
        PurchRcptHeaderFrom.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
        PurchRcptHeaderFrom.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
        PurchRcptHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
        PurchRcptHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        PurchRcptHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      end;
    END;

    LOCAL PROCEDURE CheckFromPurchaseInvHeader@116(PurchInvHeaderFrom@1000 : Record "Purch. Inv. Header";PurchaseHeaderTo@1001 : Record "Purchase Header");
    BEGIN
      with PurchaseHeaderTo do begin
        PurchInvHeaderFrom.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
        PurchInvHeaderFrom.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
        PurchInvHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
        PurchInvHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        PurchInvHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      end;
    END;

    LOCAL PROCEDURE CheckFromPurchaseReturnShptHeader@114(ReturnShipmentHeaderFrom@1000 : Record "Return Shipment Header";PurchaseHeaderTo@1001 : Record "Purchase Header");
    BEGIN
      with PurchaseHeaderTo do begin
        ReturnShipmentHeaderFrom.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
        ReturnShipmentHeaderFrom.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
        ReturnShipmentHeaderFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
        ReturnShipmentHeaderFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        ReturnShipmentHeaderFrom.TESTFIELD("Currency Code","Currency Code");
      end;
    END;

    LOCAL PROCEDURE CheckFromPurchaseCrMemoHeader@115(PurchCrMemoHdrFrom@1000 : Record "Purch. Cr. Memo Hdr.";PurchaseHeaderTo@1001 : Record "Purchase Header");
    BEGIN
      with PurchaseHeaderTo do begin
        PurchCrMemoHdrFrom.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
        PurchCrMemoHdrFrom.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
        PurchCrMemoHdrFrom.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
        PurchCrMemoHdrFrom.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
        PurchCrMemoHdrFrom.TESTFIELD("Currency Code","Currency Code");
      end;
    END;

    LOCAL PROCEDURE CopyDeferrals@74(DeferralDocType@1010 : Integer;FromDocType@1001 : Integer;FromDocNo@1002 : Code[20];FromLineNo@1003 : Integer;ToDocType@1000 : Integer;ToDocNo@1008 : Code[20];ToLineNo@1009 : Integer) StartDate : Date;
    VAR
      FromDeferralHeader@1004 : Record "Deferral Header";
      FromDeferralLine@1005 : Record "Deferral Line";
      ToDeferralHeader@1006 : Record "Deferral Header";
      ToDeferralLine@1007 : Record "Deferral Line";
      SalesCommentLine@1011 : Record "Sales Comment Line";
    BEGIN
      StartDate := 0D;
      if FromDeferralHeader.GET(
           DeferralDocType,'','',
           FromDocType,FromDocNo,FromLineNo)
      then begin
        RemoveDefaultDeferralCode(DeferralDocType,ToDocType,ToDocNo,ToLineNo);
        ToDeferralHeader.INIT;
        ToDeferralHeader.TRANSFERFIELDS(FromDeferralHeader);
        ToDeferralHeader."Document Type" := ToDocType;
        ToDeferralHeader."Document No." := ToDocNo;
        ToDeferralHeader."Line No." := ToLineNo;
        ToDeferralHeader.INSERT;
        FromDeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
        FromDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
        FromDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
        FromDeferralLine.SETRANGE("Document Type",FromDocType);
        FromDeferralLine.SETRANGE("Document No.",FromDocNo);
        FromDeferralLine.SETRANGE("Line No.",FromLineNo);
        if FromDeferralLine.FINDSET then
          with ToDeferralLine do
            repeat
              INIT;
              TRANSFERFIELDS(FromDeferralLine);
              "Document Type" := ToDocType;
              "Document No." := ToDocNo;
              "Line No." := ToLineNo;
              INSERT;
            until FromDeferralLine.NEXT = 0;
        if ToDocType = SalesCommentLine."Document Type"::"Return Order" then
          StartDate := FromDeferralHeader."Start Date"
      end;
    END;

    LOCAL PROCEDURE CopyPostedDeferrals@112(DeferralDocType@1010 : Integer;FromDocType@1000 : Integer;FromDocNo@1001 : Code[20];FromLineNo@1002 : Integer;ToDocType@1003 : Integer;ToDocNo@1004 : Code[20];ToLineNo@1005 : Integer) StartDate : Date;
    VAR
      PostedDeferralHeader@1006 : Record "Posted Deferral Header";
      PostedDeferralLine@1007 : Record "Posted Deferral Line";
      DeferralHeader@1008 : Record "Deferral Header";
      DeferralLine@1009 : Record "Deferral Line";
      SalesCommentLine@1011 : Record "Sales Comment Line";
      InitialAmountToDefer@1012 : Decimal;
    BEGIN
      StartDate := 0D;
      if PostedDeferralHeader.GET(DeferralDocType,'','',
           FromDocType,FromDocNo,FromLineNo)
      then begin
        RemoveDefaultDeferralCode(DeferralDocType,ToDocType,ToDocNo,ToLineNo);
        InitialAmountToDefer := 0;
        DeferralHeader.INIT;
        DeferralHeader.TRANSFERFIELDS(PostedDeferralHeader);
        DeferralHeader."Document Type" := ToDocType;
        DeferralHeader."Document No." := ToDocNo;
        DeferralHeader."Line No." := ToLineNo;
        DeferralHeader.INSERT;
        PostedDeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
        PostedDeferralLine.SETRANGE("Gen. Jnl. Document No.",'');
        PostedDeferralLine.SETRANGE("Account No.",'');
        PostedDeferralLine.SETRANGE("Document Type",FromDocType);
        PostedDeferralLine.SETRANGE("Document No.",FromDocNo);
        PostedDeferralLine.SETRANGE("Line No.",FromLineNo);
        if PostedDeferralLine.FINDSET then
          with DeferralLine do
            repeat
              INIT;
              TRANSFERFIELDS(PostedDeferralLine);
              "Document Type" := ToDocType;
              "Document No." := ToDocNo;
              "Line No." := ToLineNo;
              if PostedDeferralLine."Amount (LCY)" <> 0.0 then
                InitialAmountToDefer := InitialAmountToDefer + PostedDeferralLine."Amount (LCY)"
              else
                InitialAmountToDefer := InitialAmountToDefer + PostedDeferralLine.Amount;
              INSERT;
            until PostedDeferralLine.NEXT = 0;
        if ToDocType = SalesCommentLine."Document Type"::"Return Order" then
          StartDate := PostedDeferralHeader."Start Date";
        if DeferralHeader.GET(DeferralDocType,'','',ToDocType,ToDocNo,ToLineNo) then begin
          DeferralHeader."Initial Amount to Defer" := InitialAmountToDefer;
          DeferralHeader.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE IsDeferralToBeCopied@113(DeferralDocType@1004 : Integer;ToDocType@1000 : Option;FromDocType@1001 : Option) : Boolean;
    VAR
      SalesLine@1002 : Record "Sales Line";
      SalesCommentLine@1003 : Record "Sales Comment Line";
      PurchLine@1006 : Record "Purchase Line";
      PurchCommentLine@1005 : Record "Purch. Comment Line";
      DeferralHeader@1007 : Record "Deferral Header";
    BEGIN
      if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Sales then
        case ToDocType of
          SalesLine."Document Type"::Order,
          SalesLine."Document Type"::Invoice,
          SalesLine."Document Type"::"Credit Memo",
          SalesLine."Document Type"::"Return Order":
            case FromDocType of
              SalesCommentLine."Document Type"::Order,
              SalesCommentLine."Document Type"::Invoice,
              SalesCommentLine."Document Type"::"Credit Memo",
              SalesCommentLine."Document Type"::"Return Order",
              SalesCommentLine."Document Type"::"Posted Invoice",
              SalesCommentLine."Document Type"::"Posted Credit Memo":
                exit(true)
            end;
        end
      else
        if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Purchase then
          case ToDocType of
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice,
            PurchLine."Document Type"::"Credit Memo",
            PurchLine."Document Type"::"Return Order":
              case FromDocType of
                PurchCommentLine."Document Type"::Order,
                PurchCommentLine."Document Type"::Invoice,
                PurchCommentLine."Document Type"::"Credit Memo",
                PurchCommentLine."Document Type"::"Return Order",
                PurchCommentLine."Document Type"::"Posted Invoice",
                PurchCommentLine."Document Type"::"Posted Credit Memo":
                  exit(true)
              end;
          end;

      exit(false);
    END;

    LOCAL PROCEDURE IsDeferralToBeDefaulted@120(DeferralDocType@1004 : Integer;ToDocType@1000 : Option;FromDocType@1001 : Option) : Boolean;
    VAR
      SalesLine@1002 : Record "Sales Line";
      SalesCommentLine@1003 : Record "Sales Comment Line";
      PurchLine@1006 : Record "Purchase Line";
      PurchCommentLine@1005 : Record "Purch. Comment Line";
      DeferralHeader@1007 : Record "Deferral Header";
    BEGIN
      if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Sales then
        case ToDocType of
          SalesLine."Document Type"::Order,
          SalesLine."Document Type"::Invoice,
          SalesLine."Document Type"::"Credit Memo",
          SalesLine."Document Type"::"Return Order":
            case FromDocType of
              SalesCommentLine."Document Type"::Quote,
              SalesCommentLine."Document Type"::"Blanket Order",
              SalesCommentLine."Document Type"::Shipment,
              SalesCommentLine."Document Type"::"Posted Return Receipt":
                exit(true)
            end;
        end
      else
        if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Purchase then
          case ToDocType of
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice,
            PurchLine."Document Type"::"Credit Memo",
            PurchLine."Document Type"::"Return Order":
              case FromDocType of
                PurchCommentLine."Document Type"::Quote,
                PurchCommentLine."Document Type"::"Blanket Order",
                PurchCommentLine."Document Type"::Receipt,
                PurchCommentLine."Document Type"::"Posted Return Shipment":
                  exit(true)
              end;
          end;

      exit(false);
    END;

    LOCAL PROCEDURE IsDeferralPosted@121(DeferralDocType@1002 : Integer;FromDocType@1000 : Option) : Boolean;
    VAR
      SalesCommentLine@1001 : Record "Sales Comment Line";
      PurchCommentLine@1003 : Record "Purch. Comment Line";
      DeferralHeader@1004 : Record "Deferral Header";
    BEGIN
      if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Sales then
        case FromDocType of
          SalesCommentLine."Document Type"::Shipment,
          SalesCommentLine."Document Type"::"Posted Invoice",
          SalesCommentLine."Document Type"::"Posted Credit Memo",
          SalesCommentLine."Document Type"::"Posted Return Receipt":
            exit(true);
        end
      else
        if DeferralDocType = DeferralHeader."Deferral Doc. Type"::Purchase then
          case FromDocType of
            PurchCommentLine."Document Type"::Receipt,
            PurchCommentLine."Document Type"::"Posted Invoice",
            PurchCommentLine."Document Type"::"Posted Credit Memo",
            PurchCommentLine."Document Type"::"Posted Return Shipment":
              exit(true);
          end;

      exit(false);
    END;

    LOCAL PROCEDURE InitSalesDeferralCode@122(VAR ToSalesLine@1000 : Record "Sales Line");
    VAR
      GLAccount@1001 : Record "G/L Account";
      Item@1002 : Record Item;
      Resource@1003 : Record Resource;
    BEGIN
      case ToSalesLine."Document Type" of
        ToSalesLine."Document Type"::Order,
        ToSalesLine."Document Type"::Invoice,
        ToSalesLine."Document Type"::"Credit Memo",
        ToSalesLine."Document Type"::"Return Order":
          case ToSalesLine.Type of
            ToSalesLine.Type::"G/L Account":
              begin
                GLAccount.GET(ToSalesLine."No.");
                ToSalesLine.VALIDATE("Deferral Code",GLAccount."Default Deferral Template Code");
              end;
            ToSalesLine.Type::Item:
              begin
                Item.GET(ToSalesLine."No.");
                ToSalesLine.VALIDATE("Deferral Code",Item."Default Deferral Template Code");
              end;
            ToSalesLine.Type::Resource:
              begin
                Resource.GET(ToSalesLine."No.");
                ToSalesLine.VALIDATE("Deferral Code",Resource."Default Deferral Template Code");
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE InitFromSalesLine2@123(VAR FromSalesLine2@1000 : Record "Sales Line";VAR FromSalesLineBuf@1001 : Record "Sales Line");
    BEGIN
      // Empty buffer fields
      FromSalesLine2 := FromSalesLineBuf;
      FromSalesLine2."Shipment No." := '';
      FromSalesLine2."Shipment Line No." := 0;
      FromSalesLine2."Return Receipt No." := '';
      FromSalesLine2."Return Receipt Line No." := 0;
    END;

    LOCAL PROCEDURE RemoveDefaultDeferralCode@124(DeferralDocType@1005 : Integer;DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer);
    VAR
      DeferralHeader@1003 : Record "Deferral Header";
      DeferralLine@1004 : Record "Deferral Line";
    BEGIN
      if DeferralHeader.GET(DeferralDocType,'','',DocType,DocNo,LineNo) then
        DeferralHeader.DELETE;

      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
      DeferralLine.DELETEALL;
    END;

    [External]
    PROCEDURE DeferralTypeForSalesDoc@128(DocType@1001 : Option) : Integer;
    VAR
      SalesCommentLine@1000 : Record "Sales Comment Line";
    BEGIN
      case DocType of
        SalesDocType::Quote:
          exit(SalesCommentLine."Document Type"::Quote);
        SalesDocType::"Blanket Order":
          exit(SalesCommentLine."Document Type"::"Blanket Order");
        SalesDocType::Order:
          exit(SalesCommentLine."Document Type"::Order);
        SalesDocType::Invoice:
          exit(SalesCommentLine."Document Type"::Invoice);
        SalesDocType::"Return Order":
          exit(SalesCommentLine."Document Type"::"Return Order");
        SalesDocType::"Credit Memo":
          exit(SalesCommentLine."Document Type"::"Credit Memo");
        SalesDocType::"Posted Shipment":
          exit(SalesCommentLine."Document Type"::Shipment);
        SalesDocType::"Posted Invoice":
          exit(SalesCommentLine."Document Type"::"Posted Invoice");
        SalesDocType::"Posted Return Receipt":
          exit(SalesCommentLine."Document Type"::"Posted Return Receipt");
        SalesDocType::"Posted Credit Memo":
          exit(SalesCommentLine."Document Type"::"Posted Credit Memo");
      end;
    END;

    [External]
    PROCEDURE DeferralTypeForPurchDoc@129(DocType@1001 : Option) : Integer;
    VAR
      PurchCommentLine@1000 : Record "Purch. Comment Line";
    BEGIN
      case DocType of
        PurchDocType::Quote:
          exit(PurchCommentLine."Document Type"::Quote);
        PurchDocType::"Blanket Order":
          exit(PurchCommentLine."Document Type"::"Blanket Order");
        PurchDocType::Order:
          exit(PurchCommentLine."Document Type"::Order);
        PurchDocType::Invoice:
          exit(PurchCommentLine."Document Type"::Invoice);
        PurchDocType::"Return Order":
          exit(PurchCommentLine."Document Type"::"Return Order");
        PurchDocType::"Credit Memo":
          exit(PurchCommentLine."Document Type"::"Credit Memo");
        PurchDocType::"Posted Receipt":
          exit(PurchCommentLine."Document Type"::Receipt);
        PurchDocType::"Posted Invoice":
          exit(PurchCommentLine."Document Type"::"Posted Invoice");
        PurchDocType::"Posted Return Shipment":
          exit(PurchCommentLine."Document Type"::"Posted Return Shipment");
        PurchDocType::"Posted Credit Memo":
          exit(PurchCommentLine."Document Type"::"Posted Credit Memo");
      end;
    END;

    LOCAL PROCEDURE InitPurchDeferralCode@131(VAR ToPurchLine@1000 : Record "Purchase Line");
    VAR
      GLAccount@1001 : Record "G/L Account";
      Item@1002 : Record Item;
    BEGIN
      case ToPurchLine."Document Type" of
        ToPurchLine."Document Type"::Order,
        ToPurchLine."Document Type"::Invoice,
        ToPurchLine."Document Type"::"Credit Memo",
        ToPurchLine."Document Type"::"Return Order":
          case ToPurchLine.Type of
            ToPurchLine.Type::"G/L Account":
              begin
                GLAccount.GET(ToPurchLine."No.");
                ToPurchLine.VALIDATE("Deferral Code",GLAccount."Default Deferral Template Code");
              end;
            ToPurchLine.Type::Item:
              begin
                Item.GET(ToPurchLine."No.");
                ToPurchLine.VALIDATE("Deferral Code",Item."Default Deferral Template Code");
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE CopySalesPostedDeferrals@138(ToSalesLine@1012 : Record "Sales Line";DeferralDocType@1010 : Integer;FromDocType@1000 : Integer;FromDocNo@1001 : Code[20];FromLineNo@1002 : Integer;ToDocType@1003 : Integer;ToDocNo@1004 : Code[20];ToLineNo@1005 : Integer);
    BEGIN
      ToSalesLine."Returns Deferral Start Date" :=
        CopyPostedDeferrals(DeferralDocType,
          FromDocType,FromDocNo,FromLineNo,
          ToDocType,ToDocNo,ToLineNo);
      ToSalesLine.MODIFY;
    END;

    LOCAL PROCEDURE CopyPurchPostedDeferrals@139(ToPurchaseLine@1012 : Record "Purchase Line";DeferralDocType@1010 : Integer;FromDocType@1000 : Integer;FromDocNo@1001 : Code[20];FromLineNo@1002 : Integer;ToDocType@1003 : Integer;ToDocNo@1004 : Code[20];ToLineNo@1005 : Integer);
    BEGIN
      ToPurchaseLine."Returns Deferral Start Date" :=
        CopyPostedDeferrals(DeferralDocType,
          FromDocType,FromDocNo,FromLineNo,
          ToDocType,ToDocNo,ToLineNo);
      ToPurchaseLine.MODIFY;
    END;

    LOCAL PROCEDURE CheckDateOrder@37(PostingNo@1003 : Code[20];PostingNoSeries@1000 : Code[20];OldPostingDate@1004 : Date;NewPostingDate@1001 : Date) : Boolean;
    VAR
      NoSeries@1002 : Record "No. Series";
    BEGIN
      if IncludeHeader then
        if (PostingNo <> '') and (OldPostingDate <> NewPostingDate) then
          if NoSeries.GET(PostingNoSeries) then
            if NoSeries."Date Order" then
              exit(CONFIRM(DiffPostDateOrderQst));
      exit(true)
    END;

    LOCAL PROCEDURE CheckSalesDocItselfCopy@49(FromSalesHeader@1000 : Record "Sales Header";ToSalesHeader@1001 : Record "Sales Header");
    BEGIN
      if (FromSalesHeader."Document Type" = ToSalesHeader."Document Type") and
         (FromSalesHeader."No." = ToSalesHeader."No.")
      then
        ERROR(Text001,ToSalesHeader."Document Type",ToSalesHeader."No.");
    END;

    LOCAL PROCEDURE CheckPurchDocItselfCopy@58(FromPurchHeader@1000 : Record "Purchase Header";ToPurchHeader@1001 : Record "Purchase Header");
    BEGIN
      if (FromPurchHeader."Document Type" = ToPurchHeader."Document Type") and
         (FromPurchHeader."No." = ToPurchHeader."No.")
      then
        ERROR(Text001,ToPurchHeader."Document Type",ToPurchHeader."No.");
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@43(VAR ToSalesHeader@1004 : Record "Sales Header";FromDocType@1000 : Option;FromDocNo@1002 : Code[20]);
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      if FromDocType = SalesDocType::"Posted Invoice" then
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice)
      else
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::"Credit Memo");
      CustLedgEntry.SETRANGE("Document No.",FromDocNo);
      CustLedgEntry.SETRANGE("Customer No.",ToSalesHeader."Bill-to Customer No.");
      CustLedgEntry.SETRANGE(Open,true);
      if CustLedgEntry.FINDFIRST then begin
        ToSalesHeader."Bal. Account No." := '';
        if FromDocType = SalesDocType::"Posted Invoice" then begin
          ToSalesHeader."Applies-to Doc. Type" := ToSalesHeader."Applies-to Doc. Type"::Invoice;
          ToSalesHeader."Applies-to Doc. No." := FromDocNo;
        end else begin
          ToSalesHeader."Applies-to Doc. Type" := ToSalesHeader."Applies-to Doc. Type"::"Credit Memo";
          ToSalesHeader."Applies-to Doc. No." := FromDocNo;
        end;
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      end;
    END;

    [External]
    PROCEDURE UpdateVendLedgEntry@66(VAR ToPurchHeader@1001 : Record "Purchase Header";FromDocType@1002 : Option;FromDocNo@1003 : Code[20]);
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      if FromDocType = PurchDocType::"Posted Invoice" then
        VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
      else
        VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
      VendLedgEntry.SETRANGE("Document No.",FromDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",ToPurchHeader."Pay-to Vendor No.");
      VendLedgEntry.SETRANGE(Open,true);
      if VendLedgEntry.FINDFIRST then begin
        if FromDocType = PurchDocType::"Posted Invoice" then begin
          ToPurchHeader."Applies-to Doc. Type" := ToPurchHeader."Applies-to Doc. Type"::Invoice;
          ToPurchHeader."Applies-to Doc. No." := FromDocNo;
        end else begin
          ToPurchHeader."Applies-to Doc. Type" := ToPurchHeader."Applies-to Doc. Type"::"Credit Memo";
          ToPurchHeader."Applies-to Doc. No." := FromDocNo;
        end;
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      end;
    END;

    LOCAL PROCEDURE ExtTxtAttachedToPosSalesLine@130(SalesHeader@1002 : Record "Sales Header";MoveNegLines@1003 : Boolean;AttachedToLineNo@1001 : Integer) : Boolean;
    VAR
      AttachedToSalesLine@1000 : Record "Sales Line";
    BEGIN
      if MoveNegLines then
        if AttachedToLineNo <> 0 then
          if AttachedToSalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",AttachedToLineNo) then
            if AttachedToSalesLine.Quantity >= 0 then
              exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE ExtTxtAttachedToPosPurchLine@134(PurchHeader@1002 : Record "Purchase Header";MoveNegLines@1003 : Boolean;AttachedToLineNo@1001 : Integer) : Boolean;
    VAR
      AttachedToPurchLine@1000 : Record "Purchase Line";
    BEGIN
      if MoveNegLines then
        if AttachedToLineNo <> 0 then
          if AttachedToPurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",AttachedToLineNo) then
            if AttachedToPurchLine.Quantity >= 0 then
              exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE SalesDocCanReceiveTracking@64(SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      exit(
        (SalesHeader."Document Type" <> SalesHeader."Document Type"::Quote) and
        (SalesHeader."Document Type" <> SalesHeader."Document Type"::"Blanket Order"));
    END;

    LOCAL PROCEDURE PurchaseDocCanReceiveTracking@69(PurchaseHeader@1000 : Record "Purchase Header") : Boolean;
    BEGIN
      exit(
        (PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Quote) and
        (PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::"Blanket Order"));
    END;

    LOCAL PROCEDURE CheckFirstLineShipped@177(DocNo@1000 : Code[20];ShipmentLineNo@1001 : Integer;VAR SalesCombDocLineNo@1003 : Integer;VAR NextLineNo@1004 : Integer;VAR FirstLineShipped@1002 : Boolean);
    BEGIN
      if (DocNo = '') and (ShipmentLineNo = 0) and FirstLineShipped then begin
        FirstLineShipped := false;
        SalesCombDocLineNo := NextLineNo;
        NextLineNo := NextLineNo + 10000;
      end;
    END;

    LOCAL PROCEDURE SetTempSalesInvLine@78(FromSalesInvLine@1000 : Record "Sales Invoice Line";VAR TempSalesInvLine@1001 : TEMPORARY Record "Sales Invoice Line";VAR SalesInvLineCount@1003 : Integer;VAR NextLineNo@1004 : Integer;VAR FirstLineText@1002 : Boolean);
    BEGIN
      if FromSalesInvLine.Type = FromSalesInvLine.Type::Item then begin
        SalesInvLineCount += 1;
        TempSalesInvLine := FromSalesInvLine;
        TempSalesInvLine.INSERT;
        if FirstLineText then begin
          NextLineNo := NextLineNo + 10000;
          FirstLineText := false;
        end;
      end else
        if FromSalesInvLine.Type = FromSalesInvLine.Type::" " then
          FirstLineText := true;
    END;

    LOCAL PROCEDURE InitAndCheckSalesDocuments@143(FromDocType@1001 : Option;FromDocNo@1003 : Code[20];VAR FromSalesHeader@1002 : Record "Sales Header";VAR ToSalesHeader@1000 : Record "Sales Header";VAR FromSalesShipmentHeader@1004 : Record "Sales Shipment Header";VAR FromSalesInvoiceHeader@1005 : Record "Sales Invoice Header";VAR FromReturnReceiptHeader@1006 : Record "Return Receipt Header";VAR FromSalesCrMemoHeader@1007 : Record "Sales Cr.Memo Header") : Boolean;
    BEGIN
      with ToSalesHeader do
        case FromDocType of
          SalesDocType::Quote,
          SalesDocType::"Blanket Order",
          SalesDocType::Order,
          SalesDocType::Invoice,
          SalesDocType::"Return Order",
          SalesDocType::"Credit Memo":
            begin
              FromSalesHeader.GET(SalesHeaderDocType(FromDocType),FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromSalesHeader."Posting Date")
              then
                exit(false);
              if MoveNegLines then
                DeleteSalesLinesWithNegQty(FromSalesHeader,true);
              CheckSalesDocItselfCopy(ToSalesHeader,FromSalesHeader);

              if "Document Type" <= "Document Type"::Invoice then begin
                FromSalesHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesHeader."Amount Including VAT";
                CheckCreditLimit(FromSalesHeader,ToSalesHeader);
              end;
              CheckCopyFromSalesHeaderAvail(FromSalesHeader,ToSalesHeader);

              if not IncludeHeader and not RecalculateLines then
                CheckFromSalesHeader(FromSalesHeader,ToSalesHeader);
            end;
          SalesDocType::"Posted Shipment":
            begin
              FromSalesShipmentHeader.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromSalesShipmentHeader."Posting Date")
              then
                exit(false);
              CheckCopyFromSalesShptAvail(FromSalesShipmentHeader,ToSalesHeader);

              if not IncludeHeader and not RecalculateLines then
                CheckFromSalesShptHeader(FromSalesShipmentHeader,ToSalesHeader);
            end;
          SalesDocType::"Posted Invoice":
            begin
              FromSalesInvoiceHeader.GET(FromDocNo);
              FromSalesInvoiceHeader.TESTFIELD("Prepayment Invoice",false);
              WarnSalesInvoicePmtDisc(ToSalesHeader,FromSalesHeader,FromDocType,FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromSalesInvoiceHeader."Posting Date")
              then
                exit(false);
              if "Document Type" <= "Document Type"::Invoice then begin
                FromSalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesInvoiceHeader."Amount Including VAT";
                if IncludeHeader then
                  FromSalesHeader.TRANSFERFIELDS(FromSalesInvoiceHeader);
                CheckCreditLimit(FromSalesHeader,ToSalesHeader);
              end;
              CheckCopyFromSalesInvoiceAvail(FromSalesInvoiceHeader,ToSalesHeader);

              if not IncludeHeader and not RecalculateLines then
                CheckFromSalesInvHeader(FromSalesInvoiceHeader,ToSalesHeader);
            end;
          SalesDocType::"Posted Return Receipt":
            begin
              FromReturnReceiptHeader.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromReturnReceiptHeader."Posting Date")
              then
                exit(false);
              CheckCopyFromSalesRetRcptAvail(FromReturnReceiptHeader,ToSalesHeader);

              if not IncludeHeader and not RecalculateLines then
                CheckFromSalesReturnRcptHeader(FromReturnReceiptHeader,ToSalesHeader);
            end;
          SalesDocType::"Posted Credit Memo":
            begin
              FromSalesCrMemoHeader.GET(FromDocNo);
              FromSalesCrMemoHeader.TESTFIELD("Prepayment Credit Memo",false);
              WarnSalesInvoicePmtDisc(ToSalesHeader,FromSalesHeader,FromDocType,FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromSalesCrMemoHeader."Posting Date")
              then
                exit(false);
              if "Document Type" <= "Document Type"::Invoice then begin
                FromSalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesCrMemoHeader."Amount Including VAT";
                if IncludeHeader then
                  FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
                CheckCreditLimit(FromSalesHeader,ToSalesHeader);
              end;
              CheckCopyFromSalesCrMemoAvail(FromSalesCrMemoHeader,ToSalesHeader);

              if not IncludeHeader and not RecalculateLines then
                CheckFromSalesCrMemoHeader(FromSalesCrMemoHeader,ToSalesHeader);
            end;
        end;

      exit(true);
    END;

    LOCAL PROCEDURE InitAndCheckPurchaseDocuments@147(FromDocType@1007 : Option;FromDocNo@1006 : Code[20];VAR FromPurchaseHeader@1005 : Record "Purchase Header";VAR ToPurchaseHeader@1004 : Record "Purchase Header";VAR FromPurchRcptHeader@1003 : Record "Purch. Rcpt. Header";VAR FromPurchInvHeader@1002 : Record "Purch. Inv. Header";VAR FromReturnShipmentHeader@1001 : Record "Return Shipment Header";VAR FromPurchCrMemoHdr@1000 : Record "Purch. Cr. Memo Hdr.") : Boolean;
    BEGIN
      with ToPurchaseHeader do
        case FromDocType of
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            begin
              FromPurchaseHeader.GET(PurchHeaderDocType(FromDocType),FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromPurchaseHeader."Posting Date")
              then
                exit(false);
              if MoveNegLines then
                DeletePurchLinesWithNegQty(FromPurchaseHeader,true);
              CheckPurchDocItselfCopy(ToPurchaseHeader,FromPurchaseHeader);
              if not IncludeHeader and not RecalculateLines then
                CheckFromPurchaseHeader(FromPurchaseHeader,ToPurchaseHeader);
            end;
          PurchDocType::"Posted Receipt":
            begin
              FromPurchRcptHeader.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromPurchRcptHeader."Posting Date")
              then
                exit(false);
              if not IncludeHeader and not RecalculateLines then
                CheckFromPurchaseRcptHeader(FromPurchRcptHeader,ToPurchaseHeader);
            end;
          PurchDocType::"Posted Invoice":
            begin
              FromPurchInvHeader.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromPurchInvHeader."Posting Date")
              then
                exit(false);
              FromPurchInvHeader.TESTFIELD("Prepayment Invoice",false);
              WarnPurchInvoicePmtDisc(ToPurchaseHeader,FromPurchaseHeader,FromDocType,FromDocNo);
              if not IncludeHeader and not RecalculateLines then
                CheckFromPurchaseInvHeader(FromPurchInvHeader,ToPurchaseHeader);
            end;
          PurchDocType::"Posted Return Shipment":
            begin
              FromReturnShipmentHeader.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromReturnShipmentHeader."Posting Date")
              then
                exit(false);
              if not IncludeHeader and not RecalculateLines then
                CheckFromPurchaseReturnShptHeader(FromReturnShipmentHeader,ToPurchaseHeader);
            end;
          PurchDocType::"Posted Credit Memo":
            begin
              FromPurchCrMemoHdr.GET(FromDocNo);
              if not CheckDateOrder(
                   "Posting No.","Posting No. Series",
                   "Posting Date",FromPurchCrMemoHdr."Posting Date")
              then
                exit(false);
              FromPurchCrMemoHdr.TESTFIELD("Prepayment Credit Memo",false);
              WarnPurchInvoicePmtDisc(ToPurchaseHeader,FromPurchaseHeader,FromDocType,FromDocNo);
              if not IncludeHeader and not RecalculateLines then
                CheckFromPurchaseCrMemoHeader(FromPurchCrMemoHdr,ToPurchaseHeader);
            end;
        end;

      exit(true);
    END;

    [External]
    PROCEDURE CopySalesLinesToDoc@149(FromDocType@1004 : Option;ToSalesHeader@1006 : Record "Sales Header";VAR FromSalesShipmentLine@1003 : Record "Sales Shipment Line";VAR FromSalesInvoiceLine@1002 : Record "Sales Invoice Line";VAR FromReturnReceiptLine@1001 : Record "Return Receipt Line";VAR FromSalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";VAR LinesNotCopied@1009 : Integer;VAR MissingExCostRevLink@1008 : Boolean);
    BEGIN
      CopyExtText := true;
      case FromDocType of
        SalesDocType::"Posted Shipment":
          CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShipmentLine,LinesNotCopied,MissingExCostRevLink);
        SalesDocType::"Posted Invoice":
          CopySalesInvLinesToDoc(ToSalesHeader,FromSalesInvoiceLine,LinesNotCopied,MissingExCostRevLink);
        SalesDocType::"Posted Return Receipt":
          CopySalesReturnRcptLinesToDoc(ToSalesHeader,FromReturnReceiptLine,LinesNotCopied,MissingExCostRevLink);
        SalesDocType::"Posted Credit Memo":
          CopySalesCrMemoLinesToDoc(ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
      end;
      CopyExtText := false;
    END;

    [External]
    PROCEDURE CopyPurchaseLinesToDoc@153(FromDocType@1004 : Option;ToPurchaseHeader@1006 : Record "Purchase Header";VAR FromPurchRcptLine@1003 : Record "Purch. Rcpt. Line";VAR FromPurchInvLine@1002 : Record "Purch. Inv. Line";VAR FromReturnShipmentLine@1001 : Record "Return Shipment Line";VAR FromPurchCrMemoLine@1000 : Record "Purch. Cr. Memo Line";VAR LinesNotCopied@1009 : Integer;VAR MissingExCostRevLink@1008 : Boolean);
    BEGIN
      CopyExtText := true;
      case FromDocType of
        PurchDocType::"Posted Receipt":
          CopyPurchRcptLinesToDoc(ToPurchaseHeader,FromPurchRcptLine,LinesNotCopied,MissingExCostRevLink);
        PurchDocType::"Posted Invoice":
          CopyPurchInvLinesToDoc(ToPurchaseHeader,FromPurchInvLine,LinesNotCopied,MissingExCostRevLink);
        PurchDocType::"Posted Return Shipment":
          CopyPurchReturnShptLinesToDoc(ToPurchaseHeader,FromReturnShipmentLine,LinesNotCopied,MissingExCostRevLink);
        PurchDocType::"Posted Credit Memo":
          CopyPurchCrMemoLinesToDoc(ToPurchaseHeader,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
      end;
      CopyExtText := false;
    END;

    LOCAL PROCEDURE CopyShiptoCodeFromInvToCrMemo@150(VAR ToSalesHeader@1000 : Record "Sales Header";FromSalesInvHeader@1001 : Record "Sales Invoice Header";FromDocType@1002 : Option);
    BEGIN
      if (FromDocType = SalesDocType::"Posted Invoice") and
         (FromSalesInvHeader."Ship-to Code" <> '') and
         (ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::"Credit Memo")
      then
        ToSalesHeader."Ship-to Code" := FromSalesInvHeader."Ship-to Code";
    END;

    LOCAL PROCEDURE TransferFieldsFromCrMemoToInv@151(VAR ToSalesHeader@1000 : Record "Sales Header";FromSalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header");
    BEGIN
      ToSalesHeader.VALIDATE("Sell-to Customer No.",FromSalesCrMemoHeader."Sell-to Customer No.");
      ToSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader,false);
      if (ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Invoice) and IncludeHeader then begin
        ToSalesHeader.CopySellToAddressToShipToAddress;
        ToSalesHeader.VALIDATE("Ship-to Code",FromSalesCrMemoHeader."Ship-to Code");
      end;
    END;

    LOCAL PROCEDURE CopyShippingInfoPurchOrder@161(VAR ToPurchaseHeader@1000 : Record "Purchase Header";FromPurchaseHeader@1001 : Record "Purchase Header");
    BEGIN
      if (ToPurchaseHeader."Document Type" = ToPurchaseHeader."Document Type"::Order) and
         (FromPurchaseHeader."Document Type" = FromPurchaseHeader."Document Type"::Order)
      then begin
        ToPurchaseHeader."Ship-to Address" := FromPurchaseHeader."Ship-to Address";
        ToPurchaseHeader."Ship-to Address 2" := FromPurchaseHeader."Ship-to Address 2";
        ToPurchaseHeader."Ship-to City" := FromPurchaseHeader."Ship-to City";
        ToPurchaseHeader."Ship-to Country/Region Code" := FromPurchaseHeader."Ship-to Country/Region Code";
        ToPurchaseHeader."Ship-to County" := FromPurchaseHeader."Ship-to County";
        ToPurchaseHeader."Ship-to Name" := FromPurchaseHeader."Ship-to Name";
        ToPurchaseHeader."Ship-to Name 2" := FromPurchaseHeader."Ship-to Name 2";
        ToPurchaseHeader."Ship-to Post Code" := FromPurchaseHeader."Ship-to Post Code";
        ToPurchaseHeader."Ship-to Contact" := FromPurchaseHeader."Ship-to Contact";
        ToPurchaseHeader."Inbound Whse. Handling Time" := FromPurchaseHeader."Inbound Whse. Handling Time";
      end;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeCopySalesDocument@137(FromDocumentType@1000 : Option;FromDocumentNo@1001 : Code[20];VAR ToSalesHeader@1002 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeCopyPurchaseDocument@140(FromDocumentType@1002 : Option;FromDocumentNo@1001 : Code[20];VAR ToPurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifySalesHeader@148(VAR ToSalesHeader@1000 : Record "Sales Header";FromDocType@1001 : Option;FromDocNo@1002 : Code[20];IncludeHeader@1003 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE AddSalesDocLine@246(VAR TempDocSalesLine@1002 : TEMPORARY Record "Sales Line";BufferLineNo@1000 : Integer;DocumentNo@1003 : Code[20];DocumentLineNo@1001 : Integer);
    BEGIN
      TempDocSalesLine."Document No." := DocumentNo;
      TempDocSalesLine."Line No." := DocumentLineNo;
      TempDocSalesLine."Shipment Line No." := BufferLineNo;
      TempDocSalesLine.INSERT;
    END;

    LOCAL PROCEDURE GetSalesLineNo@257(VAR TempDocSalesLine@1000 : TEMPORARY Record "Sales Line";BufferLineNo@1001 : Integer) : Integer;
    BEGIN
      TempDocSalesLine.SETRANGE("Shipment Line No.",BufferLineNo);
      if not TempDocSalesLine.FINDFIRST then
        exit(0);
      exit(TempDocSalesLine."Line No.");
    END;

    LOCAL PROCEDURE GetSalesDocNo@256(VAR TempDocSalesLine@1000 : TEMPORARY Record "Sales Line";BufferLineNo@1001 : Integer) : Code[20];
    BEGIN
      TempDocSalesLine.SETRANGE("Shipment Line No.",BufferLineNo);
      if not TempDocSalesLine.FINDFIRST then
        exit('');
      exit(TempDocSalesLine."Document No.");
    END;

    LOCAL PROCEDURE AddPurchDocLine@249(VAR TempDocPurchaseLine@1002 : TEMPORARY Record "Purchase Line";BufferLineNo@1000 : Integer;DocumentNo@1003 : Code[20];DocumentLineNo@1001 : Integer);
    BEGIN
      TempDocPurchaseLine."Document No." := DocumentNo;
      TempDocPurchaseLine."Line No." := DocumentLineNo;
      TempDocPurchaseLine."Receipt Line No." := BufferLineNo;
      TempDocPurchaseLine.INSERT;
    END;

    LOCAL PROCEDURE GetPurchLineNo@248(VAR TempDocPurchaseLine@1000 : TEMPORARY Record "Purchase Line";BufferLineNo@1001 : Integer) : Integer;
    BEGIN
      TempDocPurchaseLine.SETRANGE("Receipt Line No.",BufferLineNo);
      if not TempDocPurchaseLine.FINDFIRST then
        exit(0);
      exit(TempDocPurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE GetPurchDocNo@247(VAR TempDocPurchaseLine@1000 : TEMPORARY Record "Purchase Line";BufferLineNo@1001 : Integer) : Code[20];
    BEGIN
      TempDocPurchaseLine.SETRANGE("Receipt Line No.",BufferLineNo);
      if not TempDocPurchaseLine.FINDFIRST then
        exit('');
      exit(TempDocPurchaseLine."Document No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateSalesLine@152(VAR ToSalesHeader@1007 : Record "Sales Header";VAR ToSalesLine@1006 : Record "Sales Line";VAR FromSalesHeader@1005 : Record "Sales Header";VAR FromSalesLine@1004 : Record "Sales Line";VAR CopyThisLine@1003 : Boolean;RecalculateAmount@1002 : Boolean;FromSalesDocType@1001 : Option;VAR CopyPostedDeferral@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifyPurchHeader@157(VAR ToPurchHeader@1000 : Record "Purchase Header";FromDocType@1001 : Option;FromDocNo@1002 : Code[20];IncludeHeader@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdatePurchLine@156(VAR ToPurchHeader@1007 : Record "Purchase Header";VAR ToPurchLine@1006 : Record "Purchase Line";VAR FromPurchHeader@1005 : Record "Purchase Header";VAR FromPurchLine@1004 : Record "Purchase Line";VAR CopyThisLine@1003 : Boolean;RecalculateAmount@1002 : Boolean;FromPurchDocType@1001 : Option;VAR CopyPostedDeferral@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterCopySalesDocument@141(FromDocumentType@1002 : Option;FromDocumentNo@1001 : Code[20];VAR ToSalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterCopyPurchaseDocument@142(FromDocumentType@1002 : Option;FromDocumentNo@1001 : Code[20];VAR ToPurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateSalesLine@154(VAR ToSalesHeader@1007 : Record "Sales Header";VAR ToSalesLine@1006 : Record "Sales Line";VAR FromSalesHeader@1005 : Record "Sales Header";VAR FromSalesLine@1004 : Record "Sales Line";VAR CopyThisLine@1003 : Boolean;RecalculateAmount@1002 : Boolean;FromSalesDocType@1001 : Option;VAR CopyPostedDeferral@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdatePurchLine@158(VAR ToPurchHeader@1007 : Record "Purchase Header";VAR ToPurchLine@1006 : Record "Purchase Line";VAR FromPurchHeader@1005 : Record "Purchase Header";VAR FromPurchLine@1004 : Record "Purchase Line";VAR CopyThisLine@1003 : Boolean;RecalculateAmount@1002 : Boolean;FromPurchDocType@1001 : Option;VAR CopyPostedDeferral@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

