OBJECT Page 354 Item Turnover Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    LinksAllowed=false;
    SourceTable=Date;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 RESET;
               END;

    OnFindRecord=BEGIN
                   exit(PeriodFormMgt.FindDate(Which,Rec,PeriodType));
                 END;

    OnNextRecord=BEGIN
                   exit(PeriodFormMgt.NextDate(Steps,Rec,PeriodType));
                 END;

    OnAfterGetRecord=BEGIN
                       SetDateFilter;
                       Item.CALCFIELDS("Purchases (Qty.)","Purchases (LCY)","Sales (Qty.)","Sales (LCY)");
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Period Start;
                CaptionML=ENU=Period Start;
                ToolTipML=ENU=Specifies the start date of the period defined on the line, related to year-to-date inventory turnover.;
                ApplicationArea=#Advanced;
                SourceExpr="Period Start";
                ImplicitType=Date }

    { 12  ;2   ;Field     ;
                Name=Period Name;
                CaptionML=ENU=Period Name;
                ToolTipML=ENU=Specifies the name of the period defined on the line, related to year-to-date inventory turnover.;
                ApplicationArea=#Advanced;
                SourceExpr="Period Name";
                ImplicitType=Text31 }

    { 4   ;2   ;Field     ;
                Name=PurchasesQty;
                DrillDown=true;
                CaptionML=ENU=Purchases (Qty.);
                ToolTipML=ENU=Specifies how many units of the item have been purchased. The program automatically calculates and updates the contents of the field, using the Invoiced Quantity field in the Item Ledger Entry table for those entries of the Purchase type.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=Item."Purchases (Qty.)";
                OnDrillDown=BEGIN
                              ShowItemEntries(false);
                            END;
                             }

    { 6   ;2   ;Field     ;
                Name=PurchasesLCY;
                DrillDown=true;
                CaptionML=ENU=Purchases (LCY);
                ToolTipML=ENU=Specifies the total purchase amount, in LCY, of the item that has been purchased. The program automatically calculates and updates the contents of the field, using the Sales Amount (Actual) field in the Value Entry table for those entries that have been posted as purchases.;
                ApplicationArea=#Advanced;
                SourceExpr=Item."Purchases (LCY)";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowValueEntries(false);
                            END;
                             }

    { 8   ;2   ;Field     ;
                Name=SalesQty;
                DrillDown=true;
                CaptionML=ENU=Sales (Qty.);
                ToolTipML=ENU=Specifies how many units of the item have been sold. The program automatically calculates and updates the contents of the field, using the Invoiced Quantity field in the Item Ledger Entry table for those entries of the Sales type.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=Item."Sales (Qty.)";
                OnDrillDown=BEGIN
                              ShowItemEntries(true);
                            END;
                             }

    { 10  ;2   ;Field     ;
                Name=SalesLCY;
                DrillDown=true;
                CaptionML=ENU=Sales (LCY);
                ToolTipML=ENU=Specifies the sales amount, in LCY, of the item that has been sold. The program automatically calculates and updates the contents of the field, using the Sales Amount (Actual) field in the Value Entry table for those entries that have been posted as sales.;
                ApplicationArea=#Advanced;
                SourceExpr=Item."Sales (LCY)";
                AutoFormatType=1;
                OnDrillDown=BEGIN
                              ShowValueEntries(true);
                            END;
                             }

  }
  CODE
  {
    VAR
      Item@1000 : Record Item;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      AmountType@1004 : '"Net Change","Balance at Date"';

    [External]
    PROCEDURE Set@1(VAR NewItem@1000 : Record Item;NewPeriodType@1001 : Integer;NewAmountType@1002 : '"Net Change","Balance at Date"');
    BEGIN
      Item.COPY(NewItem);
      PeriodType := NewPeriodType;
      AmountType := NewAmountType;
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ShowItemEntries@2(ShowSales@1000 : Boolean);
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      SetDateFilter;
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ItemLedgEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      ItemLedgEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ItemLedgEntry.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      if ShowSales then
        ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale)
      else
        ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Purchase);
      PAGE.RUN(0,ItemLedgEntry);
    END;

    LOCAL PROCEDURE ShowValueEntries@3(ShowSales@1000 : Boolean);
    VAR
      ValueEntry@1001 : Record "Value Entry";
    BEGIN
      SetDateFilter;
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY(
        "Item No.","Posting Date","Item Ledger Entry Type","Entry Type","Variance Type","Item Charge No.",
        "Location Code","Variant Code","Global Dimension 1 Code","Global Dimension 2 Code","Source Type","Source No.");
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ValueEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      ValueEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ValueEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ValueEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ValueEntry.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      if ShowSales then
        ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale)
      else
        ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Purchase);
      PAGE.RUN(0,ValueEntry);
    END;

    LOCAL PROCEDURE SetDateFilter@4();
    BEGIN
      if AmountType = AmountType::"Net Change" then
        Item.SETRANGE("Date Filter","Period Start","Period End")
      else
        Item.SETRANGE("Date Filter",0D,"Period End");
    END;

    BEGIN
    END.
  }
}

