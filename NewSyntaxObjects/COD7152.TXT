OBJECT Codeunit 7152 Export Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1007 : Record Item;
      TempDimValue2@1042 : TEMPORARY Record "Dimension Value";
      TempDimValue3@1037 : TEMPORARY Record "Dimension Value";
      FileMgt@1039 : Codeunit "File Management";
      xlApp@1011 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      xlWorkSheet@1009 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      xlWorkSheet2@1008 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      xlPivotTable@1006 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable" RUNONCLIENT;
      xlPivotCache@1005 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotCache" RUNONCLIENT;
      xlRange@1047 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range" RUNONCLIENT;
      xlPivotField@1002 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotField" RUNONCLIENT;
      xlWorkSheet3@1038 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      ExcelHelper@1010 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      NoOfColumns@1001 : Integer;
      MaxLevelDim@1019 : ARRAY [3] OF Integer;
      FileName@1013 : Text;
      Text000@1012 : TextConst 'ENU=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.';
      Text002@1023 : TextConst 'ENU=General Info._';
      Text003@1020 : TextConst 'ENU=None';
      Text004@1033 : TextConst 'ENU=Day';
      Text005@1024 : TextConst 'ENU=Week';
      Text006@1014 : TextConst 'ENU=Month';
      Text007@1025 : TextConst 'ENU=Quarter';
      Text008@1026 : TextConst 'ENU=Year';
      Text009@1027 : TextConst 'ENU=Accounting Period';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension "';
      Text012@1030 : TextConst 'ENU=Amount Type';
      Text015@1018 : TextConst 'ENU=Date Filter';
      Text016@1022 : TextConst 'ENU=Budget Filter';
      Text017@1034 : TextConst 'ENU=Pivot Table_';
      Text018@1017 : TextConst 'ENU=Item';
      Text019@1035 : TextConst 'ENU=Period';
      Text020@1021 : TextConst 'ENU=Budg. Sales Amount';
      Text022@1043 : TextConst 'ENU=Level';
      Text023@1040 : TextConst 'ENU=Analysis View Name';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign';
      Text029@1004 : TextConst 'ENU=Yes';
      Text030@1003 : TextConst 'ENU=No';
      Text031@1051 : TextConst 'ENU=Data_';
      Text032@1000 : TextConst 'ENU=Sales Amount';
      Text033@1053 : TextConst 'ENU=Cost Amount';
      Text035@1055 : TextConst 'ENU=Budg Cost Amount';
      Text036@1056 : TextConst 'ENU=Budg. Quantity';
      Text037@1041 : TextConst 'ENU=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.';
      Text038@1032 : TextConst 'ENU=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.';
      Text039@1036 : TextConst 'ENU=Location';
      ExcelVersion@1046 : Text[30];
      AccNoPrefix@1045 : Code[10];

    [Internal]
    PROCEDURE ExportData@3(VAR ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";Line@1002 : Text[30];Column@1005 : Text[30];AmountField@1009 : Option;PeriodType@1010 : Option;ShowName@1011 : Boolean;DateFilter@1013 : Code[250];ItemFilter@1004 : Code[250];BudgetFilter@1014 : Code[250];Dim1Filter@1015 : Code[250];Dim2Filter@1017 : Code[250];Dim3Filter@1018 : Code[250];ShowActualBudg@1024 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%"';LocationFilter@1031 : Code[250];Sign@1006 : Boolean);
    VAR
      ItemAnalysisViewFilter@1028 : Record "Item Analysis View Filter";
      GLSetup@1025 : Record "General Ledger Setup";
      ExcelBuffer@1023 : TEMPORARY Record "Excel Buffer";
      ItemAnalysisView@1001 : Record "Item Analysis View";
      PivotFieldOrientation@1007 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlPivotFieldOrientation" RUNONCLIENT;
      PivotFieldFunction@1008 : DotNet "'Microsoft.Office.Interop.Excel, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlConsolidationFunction" RUNONCLIENT;
      FormatString@1012 : Text[30];
      NoOfRows@1003 : Integer;
      RowNoCount@1020 : Integer;
      xlSheetName@1032 : Text[100];
    BEGIN
      if (ShowActualBudg <> 0) and (ShowActualBudg <> 1) then
        ERROR(Text000);

      xlApp := xlApp.ApplicationClass;

      with ItemAnalysisViewEntry do begin
        NoOfRows := CreateFile(
            ItemAnalysisViewEntry,ShowName,ItemFilter,Dim1Filter,Dim2Filter,
            Dim3Filter,DateFilter,LocationFilter,BudgetFilter,Sign);
        FileName := FileMgt.DownloadTempFile(FileName);

        ExcelHelper.CallOpenText(xlApp,FileName);

        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text031) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;

        if AccNoPrefix <> '' then begin
          ExcelBuffer.VALIDATE("Column No.",NoOfColumns);
          xlRange := ExcelHelper.FindRange(xlWorkSheet,'A2:' + ExcelBuffer.xlColID + FORMAT(NoOfRows + 1));
          xlRange.NumberFormat := '@';
          ExcelHelper.ReplaceInRange(xlRange,AccNoPrefix,'''');
        end;
        xlWorkSheet3 := ExcelHelper.AddWorksheet(xlApp.ActiveWorkbook);
        xlWorkSheet3.Name := FORMAT(Text002) + CONVERTSTR("Analysis View Code",' -+','___');
        ExcelHelper.FindRange(xlWorkSheet3,'A1').Value2 := ItemAnalysisView.TABLECAPTION;
        ExcelHelper.FindRange(xlWorkSheet3,'B2').Value2 := FIELDCAPTION("Analysis View Code");
        ExcelHelper.FindRange(xlWorkSheet3,'C2').Value2 := "Analysis View Code";
        ExcelHelper.FindRange(xlWorkSheet3,'B3').Value2 := FORMAT(Text023);
        ItemAnalysisView.GET("Analysis Area","Analysis View Code");
        ExcelHelper.FindRange(xlWorkSheet3,'C3').Value2 := ItemAnalysisView.Name;
        RowNoCount := 3;
        if ItemAnalysisView."Item Filter" <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView.FIELDCAPTION("Item Filter");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView."Item Filter";
        end;
        RowNoCount := RowNoCount + 1;

        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView.FIELDCAPTION("Date Compression");

        case ItemAnalysisView."Date Compression" of
          0:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text003);
          1:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text004);
          2:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text005);
          3:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text006);
          4:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text007);
          5:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text008);
          6:
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text009);
        end;
        if ItemAnalysisView."Starting Date" <> 0D then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView.FIELDCAPTION("Starting Date");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(ItemAnalysisView."Starting Date");
        end;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView.FIELDCAPTION("Last Date Updated");
        ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView."Last Date Updated";
        ItemAnalysisViewFilter.SETRANGE("Analysis Area","Analysis Area");
        ItemAnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        if ItemAnalysisViewFilter.FIND('-') then
          repeat
            RowNoCount := RowNoCount + 1;
            ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisViewFilter."Dimension Code";
            ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := ItemAnalysisViewFilter."Dimension Value Filter";
          until ItemAnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'A' + FORMAT(RowNoCount)).Value2 := FORMAT(Text011);
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text012);

        if DateFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text015);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := DateFilter;
        end;
        if ItemFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView.FIELDCAPTION("Item Filter");
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := ItemFilter;
        end;
        if LocationFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text039);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := LocationFilter;
        end;

        if BudgetFilter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text016);
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := BudgetFilter;
        end;
        if Dim1Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView."Dimension 1 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim1Filter;
        end;
        if Dim2Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView."Dimension 2 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim2Filter;
        end;
        if Dim3Filter <> '' then begin
          RowNoCount := RowNoCount + 1;
          ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := ItemAnalysisView."Dimension 3 Code";
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := Dim3Filter;
        end;
        RowNoCount := RowNoCount + 1;
        ExcelHelper.FindRange(xlWorkSheet3,'B' + FORMAT(RowNoCount)).Value2 := FORMAT(Text028);
        if Sign then
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text029)
        else
          ExcelHelper.FindRange(xlWorkSheet3,'C' + FORMAT(RowNoCount)).Value2 := FORMAT(Text030);

        ExcelBuffer.VALIDATE("Column No.",13 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
              xlSheetName,ExcelBuffer.xlColID,NoOfRows + 1));
        ExcelHelper.CreatePivotTable(xlPivotCache,'','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet;
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text017) + CONVERTSTR("Analysis View Code",' -+','___');

        if Line <> '' then
          case Line of
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0));
            Text019:
              case PeriodType of
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              end;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            ItemAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            ItemAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            ItemAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
          end;

        xlPivotField.Orientation := PivotFieldOrientation.xlRowField;
        xlPivotField.Position := 1;

        if Column <> '' then
          case Column of
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0));
            Text019:
              case PeriodType of
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              end;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            ItemAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            ItemAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            ItemAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
          end;
        xlPivotField.Orientation := PivotFieldOrientation.xlColumnField;
        xlPivotField.Position := 1;

        if ShowActualBudg = 0 then
          case AmountField of
            0:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text032));
            1:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text033));
            2:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION(Quantity));
          end
        else
          xlPivotField := xlPivotTable.PivotFields(FORMAT(Text020));

        xlPivotField.Orientation := PivotFieldOrientation.xlDataField;
        xlPivotField.Position := 1;
        xlPivotField.Function := PivotFieldFunction.xlSum;

        GLSetup.GET;
        FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');
        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        if STRLEN(FormatString) >= 8 then
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; // '#.##0,00';

        xlPivotTable.SmallGrid := false;
      end;
      xlApp.Visible := true
    END;

    LOCAL PROCEDURE CreateFile@1(VAR ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";ShowName@1018 : Boolean;ItemFilter@1020 : Code[250];Dim1Filter@1025 : Code[250];Dim2Filter@1024 : Code[250];Dim3Filter@1023 : Code[250];DateFilter@1011 : Code[250];LocationFilter@1030 : Text[250];BudgetFilter@1045 : Code[250];Sign@1009 : Boolean) : Integer;
    VAR
      ItemAnalysisViewEntry2@1001 : Record "Item Analysis View Entry";
      ItemAnalysisView@1002 : Record "Item Analysis View";
      ItemAnalysisViewBudgetEntry2@1032 : Record "Item Analysis View Budg. Entry";
      TextFile@1003 : File;
      Column@1019 : Text;
      Line@1004 : ARRAY [5] OF Text;
      Line2@1038 : Text;
      Tab@1005 : Text[1];
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      NoOfRows@1008 : Integer;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      i@1012 : Integer;
      j@1016 : Integer;
    BEGIN
      // UTF16 here as ASCII or UTF8 are not read as expected by Excel later in the process.
      TextFile.CREATETEMPFILE(TEXTENCODING::UTF16);
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.TEXTMODE(true);
      TextFile.CREATE(FileName,TEXTENCODING::UTF16);
      ItemAnalysisViewEntry2.COPY(ItemAnalysisViewEntry);
      ItemAnalysisView.GET(ItemAnalysisViewEntry."Analysis Area",ItemAnalysisViewEntry."Analysis View Code");
      ItemAnalysisViewEntry2.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
      ItemAnalysisViewEntry2.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
      FindDimLevel(ItemAnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(ItemAnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(ItemAnalysisView."Dimension 3 Code",Dim3Filter,3);

      Tab[1] := 9;
      SignValue := 1;
      if Sign then
        SignValue := -1;

      NoOfRows := 0;

      with ItemAnalysisViewEntry2 do begin
        Line[1] := Line[1] + FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0) + Tab;
        NoOfColumns := NoOfColumns + 1;
        if ItemAnalysisView."Dimension 1 Code" <> '' then
          for i := 0 to MaxLevelDim[1] do begin
            Line[1] := Line[1] + ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;
        if ItemAnalysisView."Dimension 2 Code" <> '' then
          for i := 0 to MaxLevelDim[2] do begin
            Line[1] := Line[1] + ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;
        if ItemAnalysisView."Dimension 3 Code" <> '' then
          for i := 0 to MaxLevelDim[3] do begin
            Line[1] := Line[1] + ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          end;

        Line[1] := Line[1] + Text004 + Tab + Text005 + Tab + Text006 + Tab + Text007 +
          Tab + Text008 + Tab + Text009 + Tab + Text032 + Tab +
          Text033 + Tab + FIELDCAPTION(Quantity) + Tab + Text039 + Tab +
          Text020 + Tab + Text035 + Tab + Text036 + Tab;

        TextFile.WRITE(Line[1]);
        StartDate := "Posting Date";

        if FIND('-') then
          repeat
            if "Item No." <> Item."No." then
              if Item.GET("Item No.") then
                Item.MARK(true);
            if "Posting Date" = NORMALDATE("Posting Date") then begin
              if "Posting Date" >= EndDate then
                EndDate := "Posting Date"
              else
                if "Posting Date" <= StartDate then
                  StartDate := "Posting Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line[1] := FillOutItem("Item No.",ShowName);
              if ItemAnalysisView."Dimension 1 Code" <> '' then
                Line[2] := FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName);
              if ItemAnalysisView."Dimension 2 Code" <> '' then
                Line[3] := FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName);
              if ItemAnalysisView."Dimension 3 Code" <> '' then
                Line[4] := FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                FORMAT(("Sales Amount (Actual)" + "Sales Amount (Expected)") * SignValue) + Tab +
                FORMAT(("Cost Amount (Actual)" + "Cost Amount (Expected)" + "Cost Amount (Non-Invtbl.)") * SignValue) + Tab +
                FORMAT(Quantity * SignValue) + Tab + FORMAT("Location Code") + Tab;

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line2);
            end;
          until NEXT = 0;
      end;

      Line2 := '';
      with ItemAnalysisViewBudgetEntry2 do begin
        SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
        SETRANGE("Analysis View Code",ItemAnalysisView.Code);
        SETFILTER("Posting Date",DateFilter);
        SETFILTER("Item No.",ItemFilter);
        SETFILTER("Location Code",LocationFilter);
        SETFILTER("Budget Name",BudgetFilter);
        SETFILTER("Dimension 1 Value Code",Dim1Filter);
        SETFILTER("Dimension 2 Value Code",Dim2Filter);
        SETFILTER("Dimension 3 Value Code",Dim3Filter);
        if FIND('-') then
          repeat
            if "Item No." <> Item."No." then
              if Item.GET("Item No.") then
                Item.MARK(true);
            if "Posting Date" = NORMALDATE("Posting Date") then begin
              if "Posting Date" >= EndDate then
                EndDate := "Posting Date"
              else
                if "Posting Date" <= StartDate then
                  StartDate := "Posting Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line[1] := FillOutItem("Item No.",ShowName);

              if ItemAnalysisView."Dimension 1 Code" <> '' then
                Line[2] := FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName);
              if ItemAnalysisView."Dimension 2 Code" <> '' then
                Line[3] := FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName);
              if ItemAnalysisView."Dimension 3 Code" <> '' then
                Line[4] := FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                Tab + Tab + Tab + FORMAT("Location Code") + Tab + FORMAT("Sales Amount" * SignValue) + Tab +
                FORMAT("Cost Amount" * SignValue) + Tab + FORMAT(Quantity * SignValue) + Tab ;

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            end;
          until NEXT = 0;
      end;

      Line2 := '';
      if ItemFilter <> '' then
        Item.SETFILTER("No.",ItemFilter);
      if Item.FIND('-') then
        repeat
          if not Item.MARK then begin
            NoOfRows := NoOfRows + 1;
            CheckNoOfRows(NoOfRows,ItemAnalysisView);
            Line2 := FillOutItem(Item."No.",ShowName);
            TextFile.WRITE(Line2);
          end;
        until Item.NEXT = 0;

      if ItemAnalysisView."Dimension 1 Code" <> '' then begin
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim1Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 1 Code");
        Line[1] := '';
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        if TempDimValue2.FIND('-') then
          repeat
            if not TempDimValue2.MARK then begin
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 := FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 1 Code",1,ShowName);
              TextFile.WRITE(Tab + Line[1] + Line2);
            end;
          until TempDimValue2.NEXT = 0;
      end;

      if ItemAnalysisView."Dimension 2 Code" <> '' then begin
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim2Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 2 Code");
        Line[1] := '';
        for j := 1 to MaxLevelDim[1] do
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        if TempDimValue2.FIND('-') then
          repeat
            if not TempDimValue2.MARK then begin
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 := FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 2 Code",2,ShowName);
              TextFile.WRITE(Tab + Tab + Line[1] + Line2);
            end;
          until TempDimValue2.NEXT = 0;
      end;

      if ItemAnalysisView."Dimension 3 Code" <> '' then begin
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim3Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 3 Code");
        Line[1] := '';
        for j := 1 to MaxLevelDim[1] + MaxLevelDim[2] do
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        if TempDimValue2.FIND('-') then
          repeat
            if not TempDimValue2.MARK then begin
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 := FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 3 Code",3,ShowName);
              TextFile.WRITE(Tab + Tab + Tab + Line[1] + Line2);
            end;
          until TempDimValue2.NEXT = 0;
      end;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := '';
      for i := 1 to NoOfColumns do
        Line2 := Line2 + Tab;

      while StartDate <= EndDate do begin
        NoOfRows := NoOfRows + 1;
        CheckNoOfRows(NoOfRows,ItemAnalysisView);
        TextFile.WRITE(
          Line2 + Tab + FORMAT(StartDate) + Tab + FORMAT(CalculatePeriodStart(StartDate,1)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2)) + Tab + FORMAT(CalculatePeriodStart(StartDate,3)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4)));
        StartDate := CALCDATE('<1W>',StartDate);
      end;

      TextFile.CLOSE;
      exit(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      case DateCompression of
        0:// Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:// Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:// Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:// Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:// Period :
          begin
            if PostingDate <> PrevPostingDate then begin
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              if AccountingPeriod.FINDLAST then begin
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              end else
                PrevCalculatedPostingDate := PostingDate;
            end;
            PostingDate := PrevCalculatedPostingDate;
          end;
      end;
      exit(PostingDate);
    END;

    LOCAL PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Code[250];ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record "Dimension Value";
    BEGIN
      if DimCode = '' then
        exit;
      DimValue.SETRANGE("Dimension Code",DimCode);
      if DimValue.FIND('-') then
        repeat
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        until DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      if TempDimValue2.FIND('-') then
        repeat
          if MaxLevelDim[ArrayNo] < TempDimValue2.Indentation then
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        until TempDimValue2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      if TempDimValue3.Indentation <> 0 then begin
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      end;
      Account := TempDimValue3.Code;
    END;

    LOCAL PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean) Line@1000 : Text;
    VAR
      Indent@1002 : Integer;
      i@1001 : Integer;
      DimValueCode2@1011 : Code[20];
    BEGIN
      if DimValueCode <> '' then begin
        if TempDimValue2.GET(DimCode,DimValueCode) then
          TempDimValue2.MARK(true)
        else
          TempDimValue2.INIT;
        DimValueCode2 := DimValueCode;
        Indent := TempDimValue2.Indentation;
        AddAcc(Line,ShowName,true,DimValueCode2,TempDimValue2.Name);
        if Indent <> MaxLevelDim[DimNo] then
          for i := (Indent + 1) to MaxLevelDim[DimNo] do
            AddAcc(Line,ShowName,true,DimValueCode2,TempDimValue2.Name);
        if Indent <> 0 then
          for i := Indent downto 1 do begin
            FindDimParent(DimValueCode2,DimCode);
            TempDimValue2.GET(DimCode,DimValueCode2);
            TempDimValue2.MARK(true);
            AddAcc(Line,ShowName,false,DimValueCode2,TempDimValue2.Name);
          end;
      end else
        for i := 0 to MaxLevelDim[DimNo] do
          AddAcc(Line,false,true,'','');
      exit(Line)
    END;

    LOCAL PROCEDURE FillOutItem@5(ItemNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text;
    BEGIN
      AddAcc(Line,ShowName and (ItemNo <> ''),true,ItemNo,Item.Description);
    END;

    [External]
    PROCEDURE SetCommonFilters@10(CurrentAnalysisArea@1001 : Option;CurrentAnalysisViewCode@1002 : Code[10];VAR ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";DateFilter@1006 : Text[30];ItemFilter@1007 : Code[250];Dim1Filter@1009 : Code[250];Dim2Filter@1010 : Code[250];Dim3Filter@1011 : Code[250];LocationFilter@1013 : Code[250]);
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Analysis Area",CurrentAnalysisArea);
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",CurrentAnalysisViewCode);
      if DateFilter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Posting Date",DateFilter);
      if ItemFilter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Item No.",ItemFilter);
      if Dim1Filter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",Dim1Filter);
      if Dim2Filter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",Dim2Filter);
      if Dim3Filter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",Dim3Filter);
      if LocationFilter <> '' then
        ItemAnalysisViewEntry.SETFILTER("Location Code",LocationFilter);
    END;

    LOCAL PROCEDURE CheckNoOfRows@7(NoOfRows@1000 : Integer;ItemAnalysisView@1001 : Record "Item Analysis View");
    BEGIN
      if ExcelVersion = '' then
        if not ISNULL(xlApp) then
          ExcelVersion := COPYSTR(xlApp.Version,1,MAXSTRLEN(ExcelVersion));

      if (ExcelVersion < '12.0') and (NoOfRows > 65000) then
        ERROR(Text037,65000,ItemAnalysisView.FIELDCAPTION("Date Compression"),ItemAnalysisView.TABLECAPTION);
    END;

    LOCAL PROCEDURE AddAcc@14(VAR Line@1005 : Text;ShowName@1002 : Boolean;AppendToLine@1003 : Boolean;Account@1000 : Code[20];AccName@1001 : Text[50]);
    VAR
      Tab@1007 : Text[1];
      s@1004 : Text[80];
    BEGIN
      Tab[1] := 9;
      if Account = '' then
        s := ''
      else
        if ShowName then
          s := Account + ' ' + AccName
        else
          s := AddAccPrefix(Account);

      if STRLEN(Line) + STRLEN(s) + 1 > MAXSTRLEN(Line) then
        ERROR(Text038);

      if AppendToLine then
        Line := Line + s + Tab
      else
        Line := s + Tab + Line;
    END;

    LOCAL PROCEDURE AddAccPrefix@12(Acc@1000 : Code[20]) : Code[30];
    BEGIN
      if AccNoPrefix = '' then
        AccNoPrefix := '_NAV_'; // Used to ensure that Acc. No. and Dim values are formatted as text.

      if Acc[1] in ['0'..'9'] then
        exit(AccNoPrefix + Acc);
      exit(Acc);
    END;

    BEGIN
    END.
  }
}

