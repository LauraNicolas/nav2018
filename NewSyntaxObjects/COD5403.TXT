OBJECT Codeunit 5403 AddOnIntegrManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1002 : Record "General Ledger Setup";
      Currency@1003 : Record Currency;
      CostCalcMgt@1007 : Codeunit "Cost Calculation Management";
      RndgSetupRead@1009 : Boolean;

    [External]
    PROCEDURE CheckReceiptOrderStatus@7(VAR SalesLine@1000 : Record "Sales Line");
    VAR
      CheckReceiptOrderStatus@1001 : Codeunit "Check Prod. Order Status";
    BEGIN
      if SalesLine."Document Type" <> SalesLine."Document Type"::Order then
        exit;

      if SalesLine.Type <> SalesLine.Type::Item then
        exit;

      CheckReceiptOrderStatus.SalesLineCheck(SalesLine);
    END;

    [External]
    PROCEDURE ValidateProdOrderOnPurchLine@9(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      Item@1001 : Record Item;
      ProdOrder@1002 : Record "Production Order";
      ProdOrderLine@1003 : Record "Prod. Order Line";
    BEGIN
      with PurchLine do begin
        TESTFIELD(Type,Type::Item);

        if ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.") then begin
          ProdOrder.TESTFIELD(Blocked,false);
          ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
          ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderLine.SETRANGE("Item No.","No.");
          if ProdOrderLine.FINDFIRST then
            "Routing No." := ProdOrderLine."Routing No.";
          Item.GET("No.");
          VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
        end;
      end;
    END;

    [External]
    PROCEDURE ResetReqLineFields@5(VAR ReqLine@1000 : Record "Requisition Line");
    BEGIN
      with ReqLine do begin
        "Prod. Order Line No." := 0;
        "Routing No." := '';
        "Routing Reference No." := 0;
        "Operation No." := '';
        "Work Center No." := '';
      end;
    END;

    [External]
    PROCEDURE ValidateProdOrderOnReqLine@6(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      Item@1001 : Record Item;
      ProdOrder@1002 : Record "Production Order";
      ProdOrderLine@1003 : Record "Prod. Order Line";
    BEGIN
      with ReqLine do begin
        TESTFIELD(Type,Type::Item);

        if ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.") then begin
          ProdOrder.TESTFIELD(Blocked,false);
          ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
          ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderLine.SETRANGE("Item No.","No.");
          if ProdOrderLine.FINDFIRST then begin
            "Routing No." := ProdOrderLine."Routing No.";
            "Routing Reference No." := ProdOrderLine."Line No.";
            "Prod. Order Line No." := ProdOrderLine."Line No.";
            "Requester ID" := USERID;
          end;
          Item.GET("No.");
          VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
        end;
      end;
    END;

    [External]
    PROCEDURE InitMfgSetup@1();
    VAR
      MfgSetup@1000 : Record "Manufacturing Setup";
    BEGIN
      with MfgSetup do
        if not FINDFIRST then begin
          INIT;
          INSERT;
        end;
    END;

    [External]
    PROCEDURE TransferFromReqLineToPurchLine@4(VAR PurchOrderLine@1000 : Record "Purchase Line";ReqLine@1001 : Record "Requisition Line");
    VAR
      MfgSetup@1002 : Record "Manufacturing Setup";
      WorkCenter@1003 : Record "Work Center";
      ProdOrderRtngLine@1004 : Record "Prod. Order Routing Line";
    BEGIN
      with ReqLine do begin
        PurchOrderLine."Routing No." := "Routing No.";
        PurchOrderLine."Routing Reference No." := "Routing Reference No.";
        PurchOrderLine."Operation No." := "Operation No.";
        PurchOrderLine.VALIDATE("Work Center No.","Work Center No.");
        if "Prod. Order No." <> '' then
          if "Work Center No." <> '' then begin
            WorkCenter.GET(PurchOrderLine."Work Center No.");
            if WorkCenter."Unit Cost Calculation" = WorkCenter."Unit Cost Calculation"::Time then begin
              ProdOrderRtngLine.GET(
                ProdOrderRtngLine.Status::Released,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
              MfgSetup.GET;
              CostCalcMgt.GetRndgSetup(GLSetup,Currency,RndgSetupRead);
              if MfgSetup."Cost Incl. Setup" and (Quantity <> 0) then begin
                PurchOrderLine."Overhead Rate" :=
                  ROUND(
                    WorkCenter."Overhead Rate" *
                    (ProdOrderRtngLine."Setup Time" /
                     Quantity +
                     ProdOrderRtngLine."Run Time"),
                    GLSetup."Unit-Amount Rounding Precision");
              end else
                PurchOrderLine."Overhead Rate" :=
                  ROUND(
                    WorkCenter."Overhead Rate" * ProdOrderRtngLine."Run Time",
                    GLSetup."Unit-Amount Rounding Precision");
            end else
              PurchOrderLine."Overhead Rate" := WorkCenter."Overhead Rate";
            PurchOrderLine."Indirect Cost %" := WorkCenter."Indirect Cost %";
            PurchOrderLine."Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
            PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");
          end;
      end;
    END;

    BEGIN
    END.
  }
}

