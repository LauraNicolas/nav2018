OBJECT Page 5507 Sales Credit Memo Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesCreditMemos];
    SourceTable="Sales Cr. Memo Entity Buffer";
    DelayedInsert=true;
    PageType=API;
    OnOpenPage=BEGIN
                 SetPemissionsFilters;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                       GraphMgtSalCrMemoBuf.RedistributeCreditMemoDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalCrMemoBuf.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnModifyRecord=BEGIN
                     if xRec.Id <> Id then
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalCrMemoBuf.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnDeleteRecord=BEGIN
                     GraphMgtSalCrMemoBuf.PropagateOnDelete(Rec);

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                Name=Container21;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 19  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;

                ImplicitType=GUID }

    { 18  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=number];
                ApplicationArea=#All;
                SourceExpr="No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;

                ImplicitType=Code20 }

    { 17  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;

                ImplicitType=Code35 }

    { 24  ;2   ;Field     ;
                Name=creditMemoDate;
                CaptionML=[@@@={Locked};
                           ENU=creditMemoDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := true;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;

                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             DueDateVar := "Due Date";
                             DueDateSet := true;

                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;

                ImplicitType=Date }

    { 14  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             if not Customer.FINDFIRST then
                               ERROR(CouldNotFindCustomerErr);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=GUID }

    { 25  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record Contact;
                             Customer@1001 : Record Customer;
                             GraphIntContact@1003 : Codeunit "Graph Int. - Contact";
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             if "Contact Graph Id" = '' then
                               ERROR(ContactIdHasToHaveValueErr);

                             if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) then
                               exit;

                             UpdateCustomerFromGraphContactId(Customer);

                             if Contact."Company No." = Customer."No." then begin
                               VALIDATE("Sell-to Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-to Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             end;
                           END;

                ImplicitType=Text250 }

    { 12  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=BEGIN
                             if Customer."No." <> '' then begin
                               if Customer."No." <> "Sell-to Customer No." then
                                 ERROR(CustomerValuesDontMatchErr);
                               exit;
                             end;

                             if not Customer.GET("Sell-to Customer No.") then
                               ERROR(CouldNotFindCustomerErr);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=Code20 }

    { 15  ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE;
                ImplicitType=Text50 }

    { 6   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress];
                ToolTipML=ENU=Specifies the billing address of the Sales Credit Memo.;
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := true;
                           END;

                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 22  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             if "Currency Id" = BlankGUID then
                               "Currency Code" := ''
                             else begin
                               Currency.SETRANGE(Id,"Currency Id");
                               if not Currency.FINDFIRST then
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=GUID }

    { 23  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             if Currency.Code <> '' then begin
                               if Currency.Code <> "Currency Code" then
                                 ERROR(CurrencyValuesDontMatchErr);
                               exit;
                             end;

                             if "Currency Code" = '' then
                               "Currency Id" := BlankGUID
                             else begin
                               if not Currency.GET("Currency Code") then
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=Text }

    { 16  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             if "Payment Terms Id" = BlankGUID then
                               "Payment Terms Code" := ''
                             else begin
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               if not PaymentTerms.FINDFIRST then
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=GUID }

    { 5   ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=paymentTerms];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Code";
                OnValidate=BEGIN
                             if PaymentTerms.Code <> '' then begin
                               if PaymentTerms.Code <> "Payment Terms Code" then
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Terms Code" = '' then
                               "Payment Terms Id" := BlankGUID
                             else begin
                               if not PaymentTerms.GET("Payment Terms Code") then
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=Code10 }

    { 3   ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;

                ImplicitType=Code20 }

    { 28  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Prices Including VAT"));
                           END;

                ImplicitType=Boolean }

    { 1   ;2   ;Part      ;
                Name=salesCreditMemoLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines];
                ApplicationArea=#All;
                SubPageLink="Document Id"=FIELD(Id);
                PagePartID="Sales Credit Memo Line Entity";
                PartType=Page }

    { 11  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             DiscountAmountSet := true;
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                           END;

                ImplicitType=Decimal }

    { 10  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE;
                ImplicitType=Boolean }

    { 9   ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 8   ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount];
                ToolTipML=ENU=Specifies the total tax amount for the sales credit memo.;
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;

                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;

                ImplicitType=Decimal }

    { 13  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status];
                ToolTipML=ENU=Specifies the status of the Sales Credit Memo (cancelled, paid, on hold, created).;
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE;
                ImplicitType=Option }

    { 2   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE;
                ImplicitType=DateTime }

    { 29  ;2   ;Field     ;
                Name=invoiceId;
                CaptionML=[@@@={Locked};
                           ENU=invoiceId];
                ApplicationArea=#All;
                SourceExpr=InvoiceId;
                OnValidate=VAR
                             SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
                             EmptyGuid@1002 : GUID;
                           BEGIN
                             if InvoiceId = EmptyGuid then begin
                               "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
                               CLEAR("Applies-to Doc. No.");
                               CLEAR(InvoiceNo);
                               RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                               RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                               exit;
                             end;

                             SalesInvoiceHeader.SETRANGE(Id,InvoiceId);
                             if not SalesInvoiceHeader.FINDFIRST then
                               ERROR(InvoiceIdDoesNotMatchAnInvoiceErr);

                             "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                             "Applies-to Doc. No." := SalesInvoiceHeader."No.";
                             InvoiceNo := "Applies-to Doc. No.";
                             RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                             RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                           END;

                ImplicitType=GUID }

    { 30  ;2   ;Field     ;
                Name=invoiceNumber;
                CaptionML=[@@@={Locked};
                           ENU=invoiceNumber];
                ApplicationArea=#All;
                SourceExpr="Applies-to Doc. No.";
                OnValidate=BEGIN
                             if InvoiceNo <> '' then begin
                               if "Applies-to Doc. No." <> InvoiceNo then
                                 ERROR(InvoiceValuesDontMatchErr);
                               exit;
                             end;

                             "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;

                             RegisterFieldSet(FIELDNO("Applies-to Doc. Type"));
                             RegisterFieldSet(FIELDNO("Applies-to Doc. No."));
                           END;

                ImplicitType=Code20 }

  }
  CODE
  {
    VAR
      CannotChangeIDErr@1004 : TextConst '@@@={Locked};ENU=The id cannot be changed.';
      TempFieldBuffer@1001 : TEMPORARY Record "Field Buffer";
      Customer@1003 : Record Customer;
      Currency@1019 : Record Currency;
      PaymentTerms@1018 : Record "Payment Terms";
      GraphMgtSalesCreditMemo@1012 : Codeunit "Graph Mgt - Sales Credit Memo";
      GraphMgtSalCrMemoBuf@1007 : Codeunit "Graph Mgt - Sal. Cr. Memo Buf.";
      GraphMgtGeneralTools@1009 : Codeunit "Graph Mgt - General Tools";
      LCYCurrencyCode@1008 : Code[10];
      CurrencyCodeTxt@1006 : Text;
      BillingPostalAddressJSONText@1002 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CouldNotFindCustomerErr@1005 : TextConst '@@@={Locked};ENU=The customer cannot be found.';
      CustomerNotProvidedErr@1022 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1024 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.';
      DiscountAmountSet@1023 : Boolean;
      InvoiceDiscountAmount@1021 : Decimal;
      InvoiceId@1025 : GUID;
      InvoiceNo@1026 : Code[20];
      InvoiceValuesDontMatchErr@1027 : TextConst '@@@={Locked};ENU=The invoiceId and invoiceNumber do not match to a specific Invoice.';
      InvoiceIdDoesNotMatchAnInvoiceErr@1028 : TextConst '@@@={Locked};ENU=The invoiceId does not match to an Invoice.';
      ContactIdHasToHaveValueErr@1011 : TextConst 'ENU=Contact Id must have a value set.';
      CurrencyValuesDontMatchErr@1017 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1016 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1015 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.';
      PaymentTermsValuesDontMatchErr@1014 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1013 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1010 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.';
      BlankGUID@1020 : GUID;
      DocumentDateSet@1032 : Boolean;
      DocumentDateVar@1031 : Date;
      DueDateSet@1030 : Boolean;
      DueDateVar@1029 : Date;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesCreditMemo@1000 : Codeunit "Graph Mgt - Sales Credit Memo";
    BEGIN
      SetInvoiceId;
      BillingPostalAddressJSONText := GraphMgtSalesCreditMemo.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(InvoiceId);
      CLEAR(InvoiceNo);
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(InvoiceDiscountAmount);
      CLEAR(DiscountAmountSet);
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      if TempFieldBuffer.FINDLAST then
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Cr. Memo Entity Buffer";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    BEGIN
      if not BillingPostalAddressSet then
        exit;

      GraphMgtSalesCreditMemo.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      if xRec."Sell-to Address" <> "Sell-to Address" then
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      if xRec."Sell-to Address 2" <> "Sell-to Address 2" then
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      if xRec."Sell-to City" <> "Sell-to City" then
        RegisterFieldSet(FIELDNO("Sell-to City"));

      if xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" then
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      if xRec."Sell-to Post Code" <> "Sell-to Post Code" then
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      if xRec."Sell-to County" <> "Sell-to County" then
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record Customer);
    VAR
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      if not UpdateCustomer then begin
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := not TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      end;

      if UpdateCustomer then begin
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      end;
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      if ("Sell-to Customer No." = '') and
         ("Customer Id" = BlankGUID)
      then
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE SetInvoiceId@18();
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
    BEGIN
      CLEAR(InvoiceId);

      if "Applies-to Doc. No." = '' then
        exit;

      if SalesInvoiceHeader.GET("Applies-to Doc. No.") then
        InvoiceId := SalesInvoiceHeader.Id;
    END;

    LOCAL PROCEDURE SetPemissionsFilters@4();
    VAR
      SalesHeader@1001 : Record "Sales Header";
      SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";
      FilterText@1002 : Text;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      if not SalesHeader.READPERMISSION then
        FilterText := STRSUBSTNO('<>%1&<>%2',Status::Draft,Status::"In Review");

      if not SalesCrMemoHeader.READPERMISSION then begin
        if FilterText <> '' then
          FilterText += '&';
        FilterText +=
          STRSUBSTNO(
            '<>%1&<>%2&<>%3&<>%4',Status::Canceled,Status::Corrective,
            Status::Open,Status::Paid);
      end;

      if FilterText <> '' then begin
        FILTERGROUP(2);
        SETFILTER(Status,FilterText);
        FILTERGROUP(0);
      end;
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record "Sales Header";
      SalesCalcDiscountByType@1000 : Codeunit "Sales - Calc Discount By Type";
    BEGIN
      if not DiscountAmountSet then begin
        GraphMgtSalCrMemoBuf.RedistributeCreditMemoDiscounts(Rec);
        exit;
      end;

      SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo","No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@8();
    VAR
      GraphMgtSalCrMemoBuf@1000 : Codeunit "Graph Mgt - Sal. Cr. Memo Buf.";
    BEGIN
      if not (DueDateSet or DocumentDateSet) then
        exit;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      if DocumentDateSet then begin
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      end;

      if DueDateSet then begin
        "Due Date" := DueDateVar;
        RegisterFieldSet(FIELDNO("Due Date"));
      end;

      GraphMgtSalCrMemoBuf.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    BEGIN
    END.
  }
}

