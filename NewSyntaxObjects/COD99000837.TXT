OBJECT Codeunit 99000837 Prod. Order Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd,
                TableData "Action Message Entry"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.';
      CreateReservEntry@1005 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1006 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1007 : Codeunit "Reservation Management";
      Blocked@1008 : Boolean;
      SetFromType@1009 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      Text006@1021 : TextConst 'ENU=The %1 %2 %3 has item tracking. Do you want to delete it anyway?';
      Text007@1017 : TextConst 'ENU=The %1 %2 %3 has components with item tracking. Do you want to delete it anyway?';
      Text008@1022 : TextConst 'ENU=The %1 %2 %3 and its components have item tracking. Do you want to delete them anyway?';

    [External]
    PROCEDURE CreateReservation@1(VAR ProdOrderLine@1000 : Record "Prod. Order Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text004);

      ProdOrderLine.TESTFIELD("Item No.");
      ProdOrderLine.TESTFIELD("Due Date");

      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(ProdOrderLine."Remaining Qty. (Base)") < ABS(ProdOrderLine."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(ProdOrderLine."Remaining Qty. (Base)") - ABS(ProdOrderLine."Reserved Qty. (Base)"));

      ProdOrderLine.TESTFIELD("Location Code",SetFromLocationCode);
      ProdOrderLine.TESTFIELD("Variant Code",SetFromVariantCode);

      if QuantityBase < 0 then
        ShipmentDate := ProdOrderLine."Due Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ProdOrderLine."Due Date";
      end;

      if ProdOrderLine."Planning Flexibility" <> ProdOrderLine."Planning Flexibility"::Unlimited then
        CreateReservEntry.SetPlanningFlexibility(ProdOrderLine."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,
        ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0,
        ProdOrderLine."Qty. per Unit of Measure",Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@9(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record "Reservation Entry";ProdOrderLine@1001 : Record "Prod. Order Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",0,false);
      FilterReservEntry.SetSourceFilter2('',ProdOrderLine."Line No.");
    END;

    [External]
    PROCEDURE Caption@30(ProdOrderLine@1001 : Record "Prod. Order Line") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Prod. Order No.",ProdOrderLine."Item No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(ProdOrderLine@1000 : Record "Prod. Order Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ProdOrderLine);
      exit(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewProdOrderLine@1000 : Record "Prod. Order Line";VAR OldProdOrderLine@1001 : Record "Prod. Order Line");
    VAR
      ProdOrderLine@1005 : Record "Prod. Order Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if NewProdOrderLine.Status = NewProdOrderLine.Status::Finished then
        exit;
      if Blocked then
        exit;
      if NewProdOrderLine."Line No." = 0 then
        if not ProdOrderLine.GET(
             NewProdOrderLine.Status,
             NewProdOrderLine."Prod. Order No.",
             NewProdOrderLine."Line No.")
        then
          exit;

      NewProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProdOrderLine."Reserved Qty. (Base)" <> 0;

      if NewProdOrderLine."Due Date" = 0D then
        if ShowError then
          NewProdOrderLine.FIELDERROR("Due Date",Text002)
        else
          HasError := true;

      if NewProdOrderLine."Item No." <> OldProdOrderLine."Item No." then
        if ShowError then
          NewProdOrderLine.FIELDERROR("Item No.",Text003)
        else
          HasError := true;
      if NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code" then
        if ShowError then
          NewProdOrderLine.FIELDERROR("Location Code",Text003)
        else
          HasError := true;
      if NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code" then
        if ShowError then
          NewProdOrderLine.FIELDERROR("Variant Code",Text003)
        else
          HasError := true;
      if NewProdOrderLine."Line No." <> OldProdOrderLine."Line No." then
        HasError := true;

      if HasError then
        if (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") or
           FindReservEntry(NewProdOrderLine,TempReservEntry)
        then begin
          if NewProdOrderLine."Item No." <> OldProdOrderLine."Item No." then begin
            ReservMgt.SetProdOrderLine(OldProdOrderLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
          end else begin
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewProdOrderLine."Remaining Qty. (Base)");
        end;

      if HasError or (NewProdOrderLine."Due Date" <> OldProdOrderLine."Due Date")
      then begin
        AssignForPlanning(NewProdOrderLine);
        if (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") or
           (NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code") or
           (NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code")
        then
          AssignForPlanning(OldProdOrderLine);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@5(VAR NewProdOrderLine@1000 : Record "Prod. Order Line";VAR OldProdOrderLine@1001 : Record "Prod. Order Line");
    VAR
      ProdOrderLine@1002 : Record "Prod. Order Line";
    BEGIN
      if Blocked then
        exit;

      with NewProdOrderLine do begin
        if Status = Status::Finished then
          exit;
        if "Line No." = OldProdOrderLine."Line No." then
          if "Quantity (Base)" = OldProdOrderLine."Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") then
            exit;
        ReservMgt.SetProdOrderLine(NewProdOrderLine);
        if "Qty. per Unit of Measure" <> OldProdOrderLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        ReservMgt.DeleteReservEntries(false,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewProdOrderLine);
      end;
    END;

    [External]
    PROCEDURE UpdatePlanningFlexibility@2(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      if FindReservEntry(ProdOrderLine,ReservEntry) then
        ReservEntry.MODIFYALL("Planning Flexibility",ProdOrderLine."Planning Flexibility");
    END;

    [External]
    PROCEDURE TransferPOLineToPOLine@31(VAR OldProdOrderLine@1000 : Record "Prod. Order Line";VAR NewProdOrderLine@1001 : Record "Prod. Order Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldProdOrderLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      NewProdOrderLine.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code",
        TransferAll,TransferQty,NewProdOrderLine."Qty. per Unit of Measure",
        DATABASE::"Prod. Order Line",NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",'',NewProdOrderLine."Line No.",0);
    END;

    [External]
    PROCEDURE TransferPOLineToItemJnlLine@3(VAR OldProdOrderLine@1000 : Record "Prod. Order Line";VAR NewItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
      ItemTrackingFilterIsSet@1005 : Boolean;
      EndLoop@1006 : Boolean;
    BEGIN
      if not FindReservEntry(OldProdOrderLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      // Handle Item Tracking on output:
      CLEAR(CreateReservEntry);
      if NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Output then
        if NewItemJnlLine.TrackingExists then begin
          // Try to match against Item Tracking on the prod. order line:
          OldReservEntry.SetTrackingFilterFromItemJnlLine(NewItemJnlLine);
          if OldReservEntry.ISEMPTY then
            OldReservEntry.ClearTrackingFilter
          else
            ItemTrackingFilterIsSet := true;
        end;

      NewItemJnlLine.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

      if TransferQty = 0 then
        exit;

      if ReservEngineMgt.InitRecordSet(OldReservEntry) then
        repeat
          if NewItemJnlLine.TrackingExists then
            CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          OldReservEntry.TestItemFields(OldProdOrderLine."Item No.",OldProdOrderLine."Variant Code",OldProdOrderLine."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
              NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          if ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 then
            if ItemTrackingFilterIsSet then begin
              OldReservEntry.ClearTrackingFilter;
              ItemTrackingFilterIsSet := false;
              EndLoop := not ReservEngineMgt.InitRecordSet(OldReservEntry);
            end else
              EndLoop := true;

        until EndLoop or (TransferQty = 0);
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR ProdOrderLine@1000 : Record "Prod. Order Line") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEntry2@1002 : Record "Reservation Entry";
      ConfirmMessage@1004 : Text[250];
      HasItemTracking@1003 : 'None,Line,Components,"Line and Components"';
    BEGIN
      with ReservEntry do begin
        FilterReservFor(ReservEntry,ProdOrderLine);
        SETFILTER("Item Tracking",'<> %1',"Item Tracking"::None);
        if not ISEMPTY then
          HasItemTracking := HasItemTracking::Line;

        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETFILTER("Source Ref. No.",' > %1',0);
        if not ISEMPTY then
          if HasItemTracking = HasItemTracking::Line then
            HasItemTracking := HasItemTracking::"Line and Components"
          else
            HasItemTracking := HasItemTracking::Components;

        if HasItemTracking = HasItemTracking::None then
          exit(true);

        case HasItemTracking of
          HasItemTracking::Line:
            ConfirmMessage := Text006;
          HasItemTracking::Components:
            ConfirmMessage := Text007;
          HasItemTracking::"Line and Components":
            ConfirmMessage := Text008;
        end;

        if not CONFIRM(ConfirmMessage,false,ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Line No.") then
          exit(false);

        SETFILTER("Source Type",'%1|%2',DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component");
        SETRANGE("Source Ref. No.");
        if FINDSET then
          repeat
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          until NEXT = 0;
      end;

      exit(true);
    END;

    [External]
    PROCEDURE DeleteLine@6(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    BEGIN
      if Blocked then
        exit;

      with ProdOrderLine do begin
        ReservMgt.SetProdOrderLine(ProdOrderLine);
        ReservMgt.DeleteReservEntries(true,0);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ProdOrderLine);
      end;
    END;

    [External]
    PROCEDURE AssignForPlanning@7(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with ProdOrderLine do begin
        if Status = Status::Simulated then
          exit;
        if "Item No." <> '' then
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code",WORKDATE);
      end;
    END;

    [External]
    PROCEDURE Block@8(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR ProdOrderLine@1003 : Record "Prod. Order Line");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingDocMgt@1000 : Codeunit "Item Tracking Doc. Management";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      if ProdOrderLine.Status = ProdOrderLine.Status::Finished then
        ItemTrackingDocMgt.ShowItemTrackingForProdOrderComp(DATABASE::"Prod. Order Line",
          ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",0)
      else begin
        ProdOrderLine.TESTFIELD("Item No.");
        TrackingSpecification.InitFromProdOrderLine(ProdOrderLine);
        ItemTrackingLines.SetSourceSpec(TrackingSpecification,ProdOrderLine."Due Date");
        ItemTrackingLines.SetInbound(ProdOrderLine.IsInbound);
        ItemTrackingLines.RUNMODAL;
      end;
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@11(ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      CreateReservEntry@1002 : Codeunit "Create Reserv. Entry";
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEntry.SetSourceFilter(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",-1,true);
      ReservEntry.SetSourceFilter2('',ProdOrderLine."Line No.");
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    BEGIN
    END.
  }
}

