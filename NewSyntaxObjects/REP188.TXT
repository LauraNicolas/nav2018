OBJECT Report 188 Create Reminders
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Reminders;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   OverdueEntriesOnly := true;
                 END;

    OnPreReport=BEGIN
                  CustLedgEntry.COPY(CustLedgEntry2);
                  if CustLedgEntryLineFeeOnFilters.GETFILTERS <> '' then
                    CustLedgEntryLineFeeOn.COPYFILTERS(CustLedgEntryLineFeeOnFilters);
                END;

  }
  DATASET
  {
    { 6836;    ;DataItem;Customer            ;
               DataItemTable=Customer;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=VAR
                               SalesSetup@1000 : Record "Sales & Receivables Setup";
                             BEGIN
                               if ReminderHeaderReq."Document Date" = 0D then
                                 ERROR(Text000,ReminderHeaderReq.FIELDCAPTION("Document Date"));
                               FILTERGROUP := 2;
                               SETFILTER("Reminder Terms Code",'<>%1','');
                               FILTERGROUP := 0;
                               NoOfRecords := COUNT;
                               SalesSetup.GET;
                               SalesSetup.TESTFIELD("Reminder Nos.");
                               if NoOfRecords = 1 then
                                 Window.OPEN(Text001)
                               else begin
                                 Window.OPEN(Text002);
                                 OldTime := TIME;
                               end;
                               ReminderHeaderReq."Use Header Level" := UseHeaderLevel;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  CLEAR(MakeReminder);
                                  MakeReminder.Set(Customer,CustLedgEntry,ReminderHeaderReq,OverdueEntriesOnly,IncludeEntriesOnHold,CustLedgEntryLineFeeOn);
                                  if NoOfRecords = 1 then begin
                                    MakeReminder.Code;
                                    MARK := false;
                                  end else begin
                                    NewTime := TIME;
                                    if (NewTime - OldTime > 100) or (NewTime < OldTime) then begin
                                      NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                      if NewProgress <> OldProgress then begin
                                        Window.UPDATE(1,NewProgress * 100);
                                        OldProgress := NewProgress;
                                      end;
                                      OldTime := TIME;
                                    end;
                                    MARK := not MakeReminder.Code;
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                                MARKEDONLY := true;
                                COMMIT;
                                if FIND('-') then
                                  if CONFIRM(Text003,true) then
                                    PAGE.RUNMODAL(0,Customer);
                              END;

               ReqFilterFields="No." }

    { 9065;    ;DataItem;CustLedgEntry2      ;
               DataItemTable="Cust. Ledger Entry";
               DataItemTableView=SORTING("Customer No.");
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields="Document Type" }

    { 1000;    ;DataItem;CustLedgEntryLineFeeOn;
               DataItemTable="Cust. Ledger Entry";
               DataItemTableView=SORTING("Entry No.") ORDER(Ascending);
               ReqFilterHeadingML=ENU=Apply Fee per Line On;
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               ReqFilterFields="Document Type" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if ReminderHeaderReq."Document Date" = 0D then begin
                     ReminderHeaderReq."Document Date" := WORKDATE;
                     ReminderHeaderReq."Posting Date" := WORKDATE;
                   end;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date that will appear as the posting date on the header of the reminder that is created by the batch job.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ReminderHeaderReq."Posting Date" }

      { 1   ;2   ;Field     ;
                  Name=DocumentDate;
                  CaptionML=ENU=Document Date;
                  ToolTipML=ENU=Specifies the date that will appear as the document date on the header of the reminder that is created by the batch job. This date is used for any interest calculations and to determine the due date of the reminder.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ReminderHeaderReq."Document Date" }

      { 5   ;2   ;Field     ;
                  Name=Only Entries with Overdue Amounts;
                  CaptionML=ENU=Only Entries with Overdue Amounts;
                  ToolTipML=ENU=Specifies if the batch job will only insert open entries that are overdue, meaning they have a due date earlier than the document date on the reminder header.;
                  ApplicationArea=#Advanced;
                  SourceExpr=OverdueEntriesOnly;
                  MultiLine=true }

      { 1102601001;2;Field  ;
                  Name=Include Entries On Hold;
                  CaptionML=ENU=Include Entries On Hold;
                  ToolTipML=ENU=Specifies if you want to create reminders for entries that are on hold.;
                  ApplicationArea=#Advanced;
                  SourceExpr=IncludeEntriesOnHold }

      { 7   ;2   ;Field     ;
                  Name=Use Header Level;
                  CaptionML=ENU=Use Header Level;
                  ToolTipML=ENU=Specifies if the batch job will apply the condition of the reminder level to all the reminder lines.;
                  ApplicationArea=#Advanced;
                  SourceExpr=UseHeaderLevel }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be specified.';
      Text001@1001 : TextConst 'ENU=Making reminders...';
      Text002@1002 : TextConst 'ENU=Making reminders @1@@@@@@@@@@@@@';
      Text003@1003 : TextConst 'ENU=It was not possible to create reminders for some of the selected customers.\Do you want to see these customers?';
      CustLedgEntry@1005 : Record "Cust. Ledger Entry";
      ReminderHeaderReq@1006 : Record "Reminder Header";
      CustLedgEntryLineFeeOnFilters@1004 : Record "Cust. Ledger Entry";
      MakeReminder@1007 : Codeunit "Reminder-Make";
      Window@1008 : Dialog;
      NoOfRecords@1009 : Integer;
      RecordNo@1010 : Integer;
      NewProgress@1011 : Integer;
      OldProgress@1012 : Integer;
      NewTime@1013 : Time;
      OldTime@1014 : Time;
      OverdueEntriesOnly@1015 : Boolean;
      UseHeaderLevel@1016 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;

    PROCEDURE InitializeRequest@1(DocumentDate@1000 : Date;PostingDate@1001 : Date;OverdueEntries@1002 : Boolean;NewUseHeaderLevel@1003 : Boolean;IncludeEntries@1004 : Boolean);
    BEGIN
      ReminderHeaderReq."Document Date" := DocumentDate;
      ReminderHeaderReq."Posting Date" := PostingDate;
      OverdueEntriesOnly := OverdueEntries;
      UseHeaderLevel := NewUseHeaderLevel;
      IncludeEntriesOnHold := IncludeEntries;
    END;

    PROCEDURE SetApplyLineFeeOnFilters@1000(VAR CustLedgEntryLineFeeOn2@1000 : Record "Cust. Ledger Entry");
    BEGIN
      CustLedgEntryLineFeeOnFilters.COPYFILTERS(CustLedgEntryLineFeeOn2);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

