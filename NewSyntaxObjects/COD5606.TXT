OBJECT Codeunit 5606 FA Check Consistency
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="FA Ledger Entry";
    Permissions=TableData "FA Ledger Entry"=r,
                TableData "FA Posting Type Setup"=r,
                TableData "FA Depreciation Book"=rm,
                TableData "Maintenance Ledger Entry"=rm,
                TableData "Ins. Coverage Ledger Entry"=rm;
    OnRun=BEGIN
            if ("FA Posting Category" <> "FA Posting Category"::" ") or
               ("FA Posting Type" = "FA Posting Type"::"Gain/Loss") or
               ("FA Posting Type" = "FA Posting Type"::"Book Value on Disposal")
            then
              exit;
            CLEARALL;
            FALedgEntry := Rec;
            // This record is not modified in the codeunit.
            FALedgEntry2 := Rec;
            with FALedgEntry do begin
              DeprBookCode := "Depreciation Book Code";
              FANo := "FA No.";
              FAPostingDate := "FA Posting Date";
              FA.GET(FANo);
              DeprBook.GET(DeprBookCode);
              FADeprBook.GET(FANo,DeprBookCode);
              case "FA Posting Type" of
                "FA Posting Type"::"Write-Down":
                  FAPostingTypeSetup.GET(
                    DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Write-Down");
                "FA Posting Type"::Appreciation:
                  FAPostingTypeSetup.GET(
                    DeprBookCode,FAPostingTypeSetup."FA Posting Type"::Appreciation);
                "FA Posting Type"::"Custom 1":
                  FAPostingTypeSetup.GET(
                    DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Custom 1");
                "FA Posting Type"::"Custom 2":
                  FAPostingTypeSetup.GET(
                    DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Custom 2");
              end;
              if "FA Posting Type" = "FA Posting Type"::"Proceeds on Disposal" then
                CheckSalesPosting
              else
                CheckNormalPosting;
            end;
            SetFAPostingDate(FALedgEntry2,true);
            CheckInsuranceIntegration;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The first entry must be an %2 for %1.';
      Text001@1001 : TextConst 'ENU=%1 is disposed.';
      InvalidDisposalDateErr@1002 : TextConst '@@@="%1=code value, e.g.E000140, %2=in depreciation book code x(x= a code value, e.g. COMPANY), remains empty when depr. book code is empty";ENU=The disposal date of fixed asset code %1 must be the last date%2.';
      Text003@1003 : TextConst 'ENU=Accumulated';
      Text004@1004 : TextConst 'ENU=%2%3 must not be positive on %4 for %1.';
      Text005@1005 : TextConst 'ENU=%2%3 must not be negative on %4 for %1.';
      Text006@1006 : TextConst 'ENU=%2 must not be negative or less than %3 on %4 for %1.';
      Text007@1007 : TextConst 'ENU=%2 must not be negative on %3 for %1.';
      DeprBook@1008 : Record "Depreciation Book";
      FA@1009 : Record "Fixed Asset";
      FADeprBook@1010 : Record "FA Depreciation Book";
      FAPostingTypeSetup@1011 : Record "FA Posting Type Setup";
      FALedgEntry@1012 : Record "FA Ledger Entry";
      FALedgEntry2@1013 : Record "FA Ledger Entry";
      FAJnlLine@1014 : Record "FA Journal Line";
      FANo@1015 : Code[20];
      DeprBookCode@1016 : Code[10];
      FAPostingDate@1017 : Date;
      BookValue@1019 : Decimal;
      DeprBasis@1020 : Decimal;
      SalvageValue@1021 : Decimal;
      NewAmount@1022 : Decimal;

    LOCAL PROCEDURE CheckNormalPosting@1();
    BEGIN
      with FALedgEntry do begin
        if FADeprBook."Disposal Date" > 0D then
          CreateDisposedError;
        SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Date");
        SETRANGE("FA No.",FANo);
        SETRANGE("Depreciation Book Code",DeprBookCode);
        if FIND('-') then begin
          if "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" then
            CreateAcquisitionCostError;
          if not FADeprBook."Use FA Ledger Check" then
            DeprBook.TESTFIELD("Use FA Ledger Check",false)
          else begin
            SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","FA Posting Date");
            SETRANGE("Part of Book Value",true);
            SETRANGE("FA Posting Date",0D,FAPostingDate - 1);
            CALCSUMS(Amount);
            BookValue := Amount;
            SETRANGE("Part of Book Value");
            SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Depreciable Basis","FA Posting Date");
            SETRANGE("Part of Depreciable Basis",true);
            CALCSUMS(Amount);
            DeprBasis := Amount;
            SETRANGE("Part of Depreciable Basis");
            SETCURRENTKEY(
              "FA No.","Depreciation Book Code",
              "FA Posting Category","FA Posting Type","FA Posting Date");
            SETRANGE("FA Posting Category","FA Posting Category"::" ");
            SETRANGE("FA Posting Type","FA Posting Type"::"Salvage Value");
            CALCSUMS(Amount);
            SalvageValue := Amount;
            SETRANGE("FA Posting Type",FALedgEntry2."FA Posting Type");
            CALCSUMS(Amount);
            NewAmount := Amount;
            SETRANGE("FA Posting Type");
            SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Date");
            SETFILTER("FA Posting Date",'%1..',FAPostingDate);
            SETRANGE(Reversed,false);
            if FIND('-') then
              repeat
                if "Part of Book Value" then
                  BookValue := BookValue + Amount;
                if "Part of Depreciable Basis" then
                  DeprBasis := DeprBasis + Amount;
                if "FA Posting Type" = "FA Posting Type"::"Salvage Value" then
                  SalvageValue := SalvageValue + Amount;
                if "FA Posting Type" = FALedgEntry2."FA Posting Type" then
                  NewAmount := NewAmount + Amount;
                CheckForError;
              until NEXT = 0;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckSalesPosting@2();
    BEGIN
      with FALedgEntry do begin
        if FADeprBook."Acquisition Date" = 0D then
          CreateAcquisitionCostError;
        SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","FA Posting Date");
        SETRANGE("FA No.",FANo);
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE("Part of Book Value",true);
        SETFILTER("FA Posting Date",'%1..',FAPostingDate + 1);
        if FIND('-') then
          CreateDisposalError;
        SETRANGE("Part of Book Value");
        SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Depreciable Basis","FA Posting Date");
        SETRANGE("Part of Depreciable Basis",true);
        if FIND('-') then
          CreateDisposalError;
        SETRANGE("Part of Depreciable Basis");
        if not FADeprBook."Use FA Ledger Check" then
          DeprBook.TESTFIELD("Use FA Ledger Check",false)
        else begin
          SETCURRENTKEY(
            "FA No.","Depreciation Book Code",
            "FA Posting Category","FA Posting Type","FA Posting Date");
          SETRANGE("FA Posting Category","FA Posting Category"::" ");
          SETRANGE("FA Posting Type","FA Posting Type"::"Proceeds on Disposal");
          SETRANGE("FA Posting Date");
          if FIND('-') then
            repeat
              NewAmount := NewAmount + Amount;
              if NewAmount > 0 then
                CreatePostingTypeError;
            until NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE SetFAPostingDate@6(VAR FALedgEntry2@1000 : Record "FA Ledger Entry";LocalCall@1001 : Boolean);
    VAR
      MaxDate@1002 : Date;
      MinDate@1003 : Date;
      GLDate@1004 : Date;
    BEGIN
      with FALedgEntry2 do
        if not LocalCall then begin
          FANo := "FA No.";
          DeprBookCode := "Depreciation Book Code";
          FADeprBook.GET(FANo,DeprBookCode);
        end;
      with FALedgEntry do begin
        RESET;
        SETCURRENTKEY(
          "FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type","FA Posting Date");
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE("FA No.",FANo);
        SETRANGE("FA Posting Category","FA Posting Category"::" ");
        SETRANGE("FA Posting Type",FALedgEntry2."FA Posting Type");
        if FIND('+') then
          MaxDate := "FA Posting Date"
        else
          MaxDate := 0D;
        case FALedgEntry2."FA Posting Type" of
          FALedgEntry2."FA Posting Type"::"Acquisition Cost",
          FALedgEntry2."FA Posting Type"::"Proceeds on Disposal":
            if FIND('-') then
              MinDate := "FA Posting Date"
            else
              MinDate := 0D;
        end;
        case FALedgEntry2."FA Posting Type" of
          FALedgEntry2."FA Posting Type"::"Acquisition Cost":
            begin
              SETCURRENTKEY(
                "FA No.","Depreciation Book Code",
                "FA Posting Category","FA Posting Type","Posting Date");
              if FIND('-') then
                GLDate := "Posting Date"
              else
                GLDate := 0D;
            end;
        end;
      end;
      with FALedgEntry2 do
        case "FA Posting Type" of
          "FA Posting Type"::"Acquisition Cost":
            begin
              FADeprBook."Last Acquisition Cost Date" := MaxDate;
              FADeprBook."Acquisition Date" := MinDate;
              FADeprBook."G/L Acquisition Date" := GLDate;
            end;
          "FA Posting Type"::"Salvage Value":
            FADeprBook."Last Salvage Value Date" := MaxDate;
          "FA Posting Type"::Depreciation:
            FADeprBook."Last Depreciation Date" := MaxDate;
          "FA Posting Type"::"Write-Down":
            FADeprBook."Last Write-Down Date" := MaxDate;
          "FA Posting Type"::Appreciation:
            FADeprBook."Last Appreciation Date" := MaxDate;
          "FA Posting Type"::"Custom 1":
            FADeprBook."Last Custom 1 Date" := MaxDate;
          "FA Posting Type"::"Custom 2":
            FADeprBook."Last Custom 2 Date" := MaxDate;
          "FA Posting Type"::"Proceeds on Disposal":
            FADeprBook."Disposal Date" := MinDate;
        end;

      FADeprBook.MODIFY;
    END;

    LOCAL PROCEDURE CheckInsuranceIntegration@10();
    VAR
      FASetup@1000 : Record "FA Setup";
      InsCoverageLedgEntry@1001 : Record "Ins. Coverage Ledger Entry";
    BEGIN
      if FALedgEntry2."FA Posting Type" <> FALedgEntry2."FA Posting Type"::"Proceeds on Disposal" then
        exit;
      if InsCoverageLedgEntry.ISEMPTY then
        exit;
      FASetup.GET;
      FASetup.TESTFIELD("Insurance Depr. Book");
      if DeprBook.Code <> FASetup."Insurance Depr. Book" then
        exit;
      InsCoverageLedgEntry.SETCURRENTKEY("FA No.");
      InsCoverageLedgEntry.SETRANGE("FA No.",FA."No.");
      InsCoverageLedgEntry.MODIFYALL("Disposed FA",FADeprBook."Disposal Date" > 0D)
    END;

    LOCAL PROCEDURE CheckForError@3();
    BEGIN
      with FALedgEntry2 do begin
        case "FA Posting Type" of
          "FA Posting Type"::"Acquisition Cost":
            if NewAmount < 0 then
              CreatePostingTypeError;
          "FA Posting Type"::Depreciation,
          "FA Posting Type"::"Salvage Value":
            if NewAmount > 0 then
              CreatePostingTypeError;
          "FA Posting Type"::"Write-Down",
          "FA Posting Type"::Appreciation,
          "FA Posting Type"::"Custom 1",
          "FA Posting Type"::"Custom 2":
            begin
              if NewAmount > 0 then
                if FAPostingTypeSetup.Sign = FAPostingTypeSetup.Sign::Credit then
                  CreatePostingTypeError;
              if NewAmount < 0 then
                if FAPostingTypeSetup.Sign = FAPostingTypeSetup.Sign::Debit then
                  CreatePostingTypeError;
            end;
        end;
        if BookValue + SalvageValue < 0 then
          if not DeprBook."Allow Depr. below Zero" or
             ("FA Posting Type" <> "FA Posting Type"::Depreciation)
          then
            if not DeprBook."Allow Acq. Cost below Zero" or
               ("FA Posting Type" <> "FA Posting Type"::"Acquisition Cost") or
               not "Index Entry"
            then
              CreateBookValueError;
        if DeprBasis < 0 then
          CreateDeprBasisError;
      end;
    END;

    LOCAL PROCEDURE CreateAcquisitionCostError@4();
    BEGIN
      FAJnlLine."FA Posting Type" := FAJnlLine."FA Posting Type"::"Acquisition Cost";
      ERROR(Text000,
        FAName,FAJnlLine."FA Posting Type");
    END;

    LOCAL PROCEDURE CreateDisposedError@9();
    BEGIN
      ERROR(Text001,FAName);
    END;

    LOCAL PROCEDURE CreateDisposalError@8();
    BEGIN
      FAJnlLine."FA Posting Type" := FAJnlLine."FA Posting Type"::Disposal;
      ERROR(InvalidDisposalDateErr,FA."No.",FADeprBookName);
    END;

    LOCAL PROCEDURE CreatePostingTypeError@5();
    VAR
      AccumText@1000 : Text[30];
    BEGIN
      FAJnlLine."FA Posting Type" := FALedgEntry2.ConvertPostingType;
      if FAJnlLine."FA Posting Type" = FAJnlLine."FA Posting Type"::Depreciation then
        AccumText := STRSUBSTNO('%1 %2',Text003,'');
      if NewAmount > 0 then
        ERROR(Text004,FAName,AccumText,FAJnlLine."FA Posting Type",FALedgEntry."FA Posting Date");
      if NewAmount < 0 then
        ERROR(Text005,FAName,AccumText,FAJnlLine."FA Posting Type",FALedgEntry."FA Posting Date");
    END;

    LOCAL PROCEDURE CreateBookValueError@7();
    BEGIN
      FAJnlLine."FA Posting Type" := FAJnlLine."FA Posting Type"::"Salvage Value";
      ERROR(
        Text006,
        FAName,FADeprBook.FIELDCAPTION("Book Value"),FAJnlLine."FA Posting Type",FALedgEntry."FA Posting Date");
    END;

    LOCAL PROCEDURE CreateDeprBasisError@12();
    BEGIN
      ERROR(
        Text007,FAName,FADeprBook.FIELDCAPTION("Depreciable Basis"),FALedgEntry."FA Posting Date");
    END;

    LOCAL PROCEDURE FAName@15() : Text[200];
    VAR
      DepreciationCalc@1000 : Codeunit "Depreciation Calculation";
    BEGIN
      exit(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    LOCAL PROCEDURE FADeprBookName@13() : Text[200];
    VAR
      DepreciationCalculation@1000 : Codeunit "Depreciation Calculation";
    BEGIN
      exit(DepreciationCalculation.FADeprBookName(DeprBookCode));
    END;

    BEGIN
    END.
  }
}

