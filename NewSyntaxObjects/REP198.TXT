OBJECT Report 198 Date Compress Customer Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rimd,
                TableData "Cust. Ledger Entry"=rimd,
                TableData "G/L Register"=rimd,
                TableData "Date Compr. Register"=rimd,
                TableData "Reminder/Fin. Charge Entry"=rimd,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "Detailed Cust. Ledg. Entry"=rimd;
    CaptionML=ENU=Date Compress Customer Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Customer Ledger",'',RetainDimText,Text010);
                  CustLedgEntryFilter := COPYSTR("Cust. Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 8503;    ;DataItem;Cust. Ledger Entry  ;
               DataItemTable="Cust. Ledger Entry";
               DataItemTableView=SORTING("Customer No.","Posting Date") WHERE(Open=CONST(false));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not
                                  CONFIRM(Text000,false)
                               then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Cust. Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Customer Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Customer Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Customer Ledger",'',GLSetup."Global Dimension 2 Code");

                               GLEntry.LOCKTABLE;
                               ReminderEntry.LOCKTABLE;
                               NewDtldCustLedgEntry.LOCKTABLE;
                               NewCustLedgEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if GLEntry.FINDLAST then;
                               LastEntryNo := GLEntry."Entry No.";
                               NextTransactionNo := GLEntry."Transaction No." + 1;
                               if NewDtldCustLedgEntry.FINDLAST then;
                               LastDtldEntryNo := NewDtldCustLedgEntry."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  if not CompressDetails("Cust. Ledger Entry") then
                                    CurrReport.SKIP;
                                  ReminderEntry.SETCURRENTKEY("Customer Entry No.");
                                  CustLedgEntry2 := "Cust. Ledger Entry";
                                  with CustLedgEntry2 do begin
                                    SETCURRENTKEY("Customer No.","Posting Date");
                                    COPYFILTERS("Cust. Ledger Entry");
                                    SETRANGE("Customer No.","Customer No.");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));
                                    SETRANGE("Customer Posting Group","Customer Posting Group");
                                    SETRANGE("Currency Code","Currency Code");
                                    SETRANGE("Document Type","Document Type");

                                    if RetainNo(FIELDNO("Document No.")) then
                                      SETRANGE("Document No.","Document No.");
                                    if RetainNo(FIELDNO("Sell-to Customer No.")) then
                                      SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
                                    if RetainNo(FIELDNO("Salesperson Code")) then
                                      SETRANGE("Salesperson Code","Salesperson Code");
                                    if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                    CALCFIELDS(Amount);
                                    if Amount >= 0 then
                                      SummarizePositive := true
                                    else
                                      SummarizePositive := false;

                                    InitNewEntry(NewCustLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,false,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewCustLedgEntry,CustLedgEntry2);

                                    while NEXT <> 0 do begin
                                      CALCFIELDS(Amount);
                                      if ((Amount >= 0) and SummarizePositive) or
                                         ((Amount < 0) and (not SummarizePositive))
                                      then
                                        if CompressDetails(CustLedgEntry2) then begin
                                          DimBufMgt.CollectDimEntryNo(
                                            TempSelectedDim,"Dimension Set ID","Entry No.",
                                            ComprDimEntryNo,true,DimEntryNo);
                                          if DimEntryNo = ComprDimEntryNo then
                                            SummarizeEntry(NewCustLedgEntry,CustLedgEntry2);
                                        end;
                                    end;

                                    InsertNewEntry(NewCustLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields="Customer No.","Customer Posting Group","Currency Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies a text that accompanies the entries that result from the compression. The default description is Date Compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdCustLedgEntry.Description }

      { 25  ;2   ;Group     ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  Name=Sell-to Customer No.;
                  CaptionML=ENU=Sell-to Customer No.;
                  ToolTipML=ENU=Specifies the customer for whom ledger entries are date compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  Name=Salesperson Code;
                  CaptionML=ENU=Salesperson Code;
                  ToolTipML=ENU=Specifies the salesperson for whom customer ledger entries are date compressed;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[3] }

      { 9   ;2   ;Field     ;
                  Name=Retain Dimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Customer Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing customer ledger entries...\\';
      Text005@1005 : TextConst 'ENU=Customer No.         #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      GLReg@1014 : Record "G/L Register";
      EntrdCustLedgEntry@1015 : Record "Cust. Ledger Entry";
      NewCustLedgEntry@1016 : Record "Cust. Ledger Entry";
      CustLedgEntry2@1017 : Record "Cust. Ledger Entry";
      NewDtldCustLedgEntry@1018 : Record "Detailed Cust. Ledg. Entry";
      DtldCustLedgEntryBuffer@1019 : TEMPORARY Record "Detailed Cust. Ledg. Entry";
      GLEntry@1020 : Record "G/L Entry";
      ReminderEntry@1021 : Record "Reminder/Fin. Charge Entry";
      SelectedDim@1022 : Record "Selected Dimension";
      TempSelectedDim@1023 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1024 : Record "Dimension Selection Buffer";
      DateComprMgt@1025 : Codeunit DateComprMgt;
      DimBufMgt@1026 : Codeunit "Dimension Buffer Management";
      DimMgt@1027 : Codeunit DimensionManagement;
      Window@1028 : Dialog;
      CustLedgEntryFilter@1029 : Text[250];
      NoOfFields@1030 : Integer;
      Retain@1031 : ARRAY [10] OF Boolean;
      FieldNumber@1032 : ARRAY [10] OF Integer;
      FieldNameArray@1033 : ARRAY [10] OF Text[100];
      LastEntryNo@1034 : Integer;
      NextTransactionNo@1035 : Integer;
      NoOfDeleted@1036 : Integer;
      LastDtldEntryNo@1037 : Integer;
      LastTmpDtldEntryNo@1038 : Integer;
      GLRegExists@1039 : Boolean;
      i@1040 : Integer;
      ComprDimEntryNo@1041 : Integer;
      DimEntryNo@1042 : Integer;
      RetainDimText@1043 : Text[250];
      SummarizePositive@1044 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if GLReg.FIND('+') then;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Cust. Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        CustLedgEntryFilter,GLReg."No.",SourceCodeSetup."Compress Cust. Ledger");
      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      GLRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record "G/L Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      GLEntry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLEntry."Entry No." := LastEntryNo;
      GLEntry."Posting Date" := TODAY;
      GLEntry.Description := EntrdCustLedgEntry.Description;
      GLEntry."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
      GLEntry."System-Created Entry" := true;
      GLEntry."User ID" := USERID;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry.INSERT;
      GLEntry.CONSISTENT(GLEntry.Amount = 0);
      GLReg."To Entry No." := GLEntry."Entry No.";

      if GLRegExists then begin
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := true;
      end;
      COMMIT;

      GLEntry.LOCKTABLE;
      ReminderEntry.LOCKTABLE;
      NewDtldCustLedgEntry.LOCKTABLE;
      NewCustLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      if GLEntry.FINDLAST then;
      if NewCustLedgEntry.FIND('+') then;
      if (LastEntryNo <> GLEntry."Entry No.") or
         (LastEntryNo <> NewCustLedgEntry."Entry No." + 1)
      then begin
        LastEntryNo := GLEntry."Entry No.";
        NextTransactionNo := GLEntry."Transaction No." + 1;
        InitRegisters;
      end;
      if NewDtldCustLedgEntry.FINDLAST then;
      LastDtldEntryNo := NewDtldCustLedgEntry."Entry No.";
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewCustLedgEntry@1000 : Record "Cust. Ledger Entry";CustLedgEntry@1001 : Record "Cust. Ledger Entry");
    VAR
      DtldCustLedgEntry@1003 : Record "Detailed Cust. Ledg. Entry";
    BEGIN
      with CustLedgEntry do begin
        NewCustLedgEntry."Sales (LCY)" := NewCustLedgEntry."Sales (LCY)" + "Sales (LCY)";
        NewCustLedgEntry."Profit (LCY)" := NewCustLedgEntry."Profit (LCY)" + "Profit (LCY)";
        NewCustLedgEntry."Inv. Discount (LCY)" := NewCustLedgEntry."Inv. Discount (LCY)" + "Inv. Discount (LCY)";
        NewCustLedgEntry."Original Pmt. Disc. Possible" :=
          NewCustLedgEntry."Original Pmt. Disc. Possible" + "Original Pmt. Disc. Possible";
        NewCustLedgEntry."Remaining Pmt. Disc. Possible" :=
          NewCustLedgEntry."Remaining Pmt. Disc. Possible" + "Remaining Pmt. Disc. Possible";
        NewCustLedgEntry."Closed by Amount (LCY)" :=
          NewCustLedgEntry."Closed by Amount (LCY)" + "Closed by Amount (LCY)";

        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.","Entry No.");
        if DtldCustLedgEntry.FIND('-') then begin
          repeat
            SummarizeDtldEntry(DtldCustLedgEntry,NewCustLedgEntry);
          until DtldCustLedgEntry.NEXT = 0;
          DtldCustLedgEntry.DELETEALL;
        end;

        ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
        ReminderEntry.DELETEALL;
        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      CustLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,CustLedgEntryNo) then begin
        InitNewEntry(NewCustLedgEntry);
        repeat
          CustLedgEntry.GET(CustLedgEntryNo);
          SummarizeEntry(NewCustLedgEntry,CustLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,CustLedgEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewCustLedgEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewCustLedgEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewCustLedgEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      with CustLedgEntry2 do begin
        NewCustLedgEntry.INIT;
        NewCustLedgEntry."Entry No." := LastEntryNo;
        NewCustLedgEntry."Customer No." := "Customer No.";
        NewCustLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewCustLedgEntry.Description := EntrdCustLedgEntry.Description;
        NewCustLedgEntry."Customer Posting Group" := "Customer Posting Group";
        NewCustLedgEntry."Currency Code" := "Currency Code";
        NewCustLedgEntry."Document Type" := "Document Type";
        NewCustLedgEntry."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
        NewCustLedgEntry."User ID" := USERID;
        NewCustLedgEntry."Transaction No." := NextTransactionNo;

        if RetainNo(FIELDNO("Document No.")) then
          NewCustLedgEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Sell-to Customer No.")) then
          NewCustLedgEntry."Sell-to Customer No." := "Sell-to Customer No.";
        if RetainNo(FIELDNO("Salesperson Code")) then
          NewCustLedgEntry."Salesperson Code" := "Salesperson Code";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewCustLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewCustLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewCustLedgEntry."Customer No.");
        Window.UPDATE(2,NewCustLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewCustLedgEntry@1000 : Record "Cust. Ledger Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewCustLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewCustLedgEntry.INSERT;
      InsertDtldEntries;
    END;

    LOCAL PROCEDURE CompressDetails@8(CustLedgEntry@1000 : Record "Cust. Ledger Entry") : Boolean;
    VAR
      DtldCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry";
    BEGIN
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      if EntrdDateComprReg."Starting Date" <> 0D then begin
        DtldCustLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '..%1|%2..',
            CALCDATE('<-1D>',EntrdDateComprReg."Starting Date"),
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));
      end else
        DtldCustLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '%1..',
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));

      exit(not DtldCustLedgEntry.FINDLAST);
    END;

    LOCAL PROCEDURE SummarizeDtldEntry@9(VAR DtldCustLedgEntry@1000 : Record "Detailed Cust. Ledg. Entry";VAR NewCustLedgEntry@1001 : Record "Cust. Ledger Entry");
    VAR
      NewEntry@1003 : Boolean;
      PostingDate@1004 : Date;
    BEGIN
      DtldCustLedgEntryBuffer.SETFILTER(
        "Posting Date",
        DateComprMgt.GetDateFilter(DtldCustLedgEntry."Posting Date",EntrdDateComprReg,true));
      PostingDate := DtldCustLedgEntryBuffer.GETRANGEMIN("Posting Date");
      DtldCustLedgEntryBuffer.SETRANGE("Posting Date",PostingDate);
      DtldCustLedgEntryBuffer.SETRANGE("Entry Type",DtldCustLedgEntry."Entry Type");
      if RetainNo("Cust. Ledger Entry".FIELDNO("Document No.")) then
        DtldCustLedgEntryBuffer.SETRANGE("Document No.","Cust. Ledger Entry"."Document No.");
      if RetainNo("Cust. Ledger Entry".FIELDNO("Sell-to Customer No.")) then
        DtldCustLedgEntryBuffer.SETRANGE("Customer No.","Cust. Ledger Entry"."Sell-to Customer No.");
      if RetainNo("Cust. Ledger Entry".FIELDNO("Global Dimension 1 Code")) then
        DtldCustLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 1","Cust. Ledger Entry"."Global Dimension 1 Code");
      if RetainNo("Cust. Ledger Entry".FIELDNO("Global Dimension 2 Code")) then
        DtldCustLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 2","Cust. Ledger Entry"."Global Dimension 2 Code");

      if not DtldCustLedgEntryBuffer.FIND('-') then begin
        DtldCustLedgEntryBuffer.RESET;
        CLEAR(DtldCustLedgEntryBuffer);

        LastTmpDtldEntryNo := LastTmpDtldEntryNo + 1;
        DtldCustLedgEntryBuffer."Entry No." := LastTmpDtldEntryNo;
        DtldCustLedgEntryBuffer."Posting Date" := PostingDate;
        DtldCustLedgEntryBuffer."Document Type" := NewCustLedgEntry."Document Type";
        DtldCustLedgEntryBuffer."Initial Document Type" := NewCustLedgEntry."Document Type";
        DtldCustLedgEntryBuffer."Document No." := NewCustLedgEntry."Document No.";
        DtldCustLedgEntryBuffer."Entry Type" := DtldCustLedgEntry."Entry Type";
        DtldCustLedgEntryBuffer."Cust. Ledger Entry No." := NewCustLedgEntry."Entry No.";
        DtldCustLedgEntryBuffer."Customer No." := NewCustLedgEntry."Customer No.";
        DtldCustLedgEntryBuffer."Currency Code" := NewCustLedgEntry."Currency Code";
        DtldCustLedgEntryBuffer."User ID" := NewCustLedgEntry."User ID";
        DtldCustLedgEntryBuffer."Source Code" := NewCustLedgEntry."Source Code";
        DtldCustLedgEntryBuffer."Transaction No." := NewCustLedgEntry."Transaction No.";
        DtldCustLedgEntryBuffer."Journal Batch Name" := NewCustLedgEntry."Journal Batch Name";
        DtldCustLedgEntryBuffer."Reason Code" := NewCustLedgEntry."Reason Code";
        DtldCustLedgEntryBuffer."Initial Entry Due Date" := NewCustLedgEntry."Due Date";
        DtldCustLedgEntryBuffer."Initial Entry Global Dim. 1" := NewCustLedgEntry."Global Dimension 1 Code";
        DtldCustLedgEntryBuffer."Initial Entry Global Dim. 2" := NewCustLedgEntry."Global Dimension 2 Code";

        NewEntry := true;
      end;

      DtldCustLedgEntryBuffer.Amount :=
        DtldCustLedgEntryBuffer.Amount + DtldCustLedgEntry.Amount;
      DtldCustLedgEntryBuffer."Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Amount (LCY)" + DtldCustLedgEntry."Amount (LCY)";
      DtldCustLedgEntryBuffer."Debit Amount" :=
        DtldCustLedgEntryBuffer."Debit Amount" + DtldCustLedgEntry."Debit Amount";
      DtldCustLedgEntryBuffer."Credit Amount" :=
        DtldCustLedgEntryBuffer."Credit Amount" + DtldCustLedgEntry."Credit Amount";
      DtldCustLedgEntryBuffer."Debit Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Debit Amount (LCY)" + DtldCustLedgEntry."Debit Amount (LCY)";
      DtldCustLedgEntryBuffer."Credit Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Credit Amount (LCY)" + DtldCustLedgEntry."Credit Amount (LCY)";

      if NewEntry then
        DtldCustLedgEntryBuffer.INSERT
      else
        DtldCustLedgEntryBuffer.MODIFY;
    END;

    LOCAL PROCEDURE InsertDtldEntries@20();
    BEGIN
      DtldCustLedgEntryBuffer.RESET;
      if DtldCustLedgEntryBuffer.FIND('-') then
        repeat
          if ((DtldCustLedgEntryBuffer.Amount <> 0) or
              (DtldCustLedgEntryBuffer."Amount (LCY)" <> 0) or
              (DtldCustLedgEntryBuffer."Debit Amount" <> 0) or
              (DtldCustLedgEntryBuffer."Credit Amount" <> 0) or
              (DtldCustLedgEntryBuffer."Debit Amount (LCY)" <> 0) or
              (DtldCustLedgEntryBuffer."Credit Amount (LCY)" <> 0))
          then begin
            LastDtldEntryNo := LastDtldEntryNo + 1;

            NewDtldCustLedgEntry := DtldCustLedgEntryBuffer;
            NewDtldCustLedgEntry."Entry No." := LastDtldEntryNo;
            NewDtldCustLedgEntry.INSERT(true);
          end;
        until DtldCustLedgEntryBuffer.NEXT = 0;
      DtldCustLedgEntryBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      if EntrdDateComprReg."Ending Date" = 0D then
        EntrdDateComprReg."Ending Date" := TODAY;
      if EntrdCustLedgEntry.Description = '' then
        EntrdCustLedgEntry.Description := Text009;

      with "Cust. Ledger Entry" do begin
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Sell-to Customer No."),FIELDCAPTION("Sell-to Customer No."));
        InsertField(FIELDNO("Salesperson Code"),FIELDCAPTION("Salesperson Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
      end;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Customer Ledger",'');
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;Description@1004 : Text[50];RetainDocumentNo@1003 : Boolean;RetainSelltoCustomerNo@1002 : Boolean;RetainSalespersonCode@1001 : Boolean;RetainDimensionText@1000 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdCustLedgEntry.Description := Description;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainSelltoCustomerNo;
      Retain[3] := RetainSalespersonCode;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

