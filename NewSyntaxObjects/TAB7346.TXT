OBJECT Table 7346 Internal Movement Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               InvtSetup.GET;
               if "No." = '' then begin
                 InvtSetup.TESTFIELD("Internal Movement Nos.");
                 NoSeriesMgt.InitSeries(
                   InvtSetup."Internal Movement Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;
             END;

    OnDelete=BEGIN
               DeleteRelatedLines;
             END;

    OnRename=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=ENU=Internal Movement Header;
    LookupPageID="Internal Movement List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                InvtSetup.GET;
                                                                if "No." <> xRec."No." then begin
                                                                  NoSeriesMgt.TestManual(InvtSetup."Internal Movement Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                if not WmsManagement.LocationIsAllowed("Location Code") then
                                                                  ERROR(Text003,"Location Code");

                                                                CheckLocationSettings("Location Code");
                                                                if "Location Code" <> xRec."Location Code" then
                                                                  "To Bin Code" := '';

                                                                FILTERGROUP := 2;
                                                                SETRANGE("Location Code","Location Code");
                                                                FILTERGROUP := 0;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Assigned User ID" <> '' then begin
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                end else begin
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 000000T;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=ENU=Assignment Date;
                                                   Editable=false }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=ENU=Assignment Time;
                                                   Editable=false }
    { 6   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 7   ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE ("Table Name"=CONST("Internal Movement"),
                                                                                                     Type=CONST(" "),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 8   ;   ;To Bin Code         ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                BinType@1000 : Record "Bin Type";
                                                                InternalMovementLine@1001 : Record "Internal Movement Line";
                                                              BEGIN
                                                                if xRec."To Bin Code" <> "To Bin Code" then begin
                                                                  if "To Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if "To Bin Code" = Location."Adjustment Bin Code" then
                                                                      FIELDERROR(
                                                                        "To Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text001,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));

                                                                    Bin.GET("Location Code","To Bin Code");
                                                                    if Bin."Bin Type Code" <> '' then
                                                                      if BinType.GET(Bin."Bin Type Code") then
                                                                        BinType.TESTFIELD(Receive,false);
                                                                  end;
                                                                  InternalMovementLine.SETRANGE("No.","No.");
                                                                  if not InternalMovementLine.ISEMPTY then
                                                                    MESSAGE(Text004,FIELDCAPTION("To Bin Code"),TABLECAPTION);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=To Bin Code }
    { 10  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 12  ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                if "Sorting Method" <> xRec."Sorting Method" then
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=ENU=Sorting Method;
                                                   OptionCaptionML=ENU=" ,Item,Shelf or Bin,Due Date";
                                                   OptionString=" ",Item,"Shelf or Bin","Due Date" }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record Location;
      Bin@1011 : Record Bin;
      InvtSetup@1001 : Record "Inventory Setup";
      NoSeriesMgt@1003 : Codeunit NoSeriesManagement;
      WmsManagement@1014 : Codeunit "WMS Management";
      ItemTrackingMgt@1015 : Codeunit "Item Tracking Management";
      Text001@1008 : TextConst 'ENU=must not be the %1 of the %2';
      Text002@1010 : TextConst 'ENU=You cannot rename a %1.';
      Text003@1013 : TextConst 'ENU=You cannot use Location Code %1.';
      Text004@1002 : TextConst 'ENU=You have changed the %1 on the %2, but it has not been changed on the existing internal movement lines.\You must update the existing internal movement lines manually.';
      NoAllowedLocationsErr@1000 : TextConst 'ENU=Internal movement is not possible at any locations where you are a warehouse employee.';

    LOCAL PROCEDURE SortWhseDoc@3();
    VAR
      InternalMovementLine@1001 : Record "Internal Movement Line";
      SequenceNo@1000 : Integer;
    BEGIN
      InternalMovementLine.RESET;
      InternalMovementLine.SETRANGE("No.","No.");
      case "Sorting Method" of
        "Sorting Method"::Item:
          InternalMovementLine.SETCURRENTKEY("No.","Item No.");
        "Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              InternalMovementLine.SETCURRENTKEY("No.","From Bin Code")
            else
              InternalMovementLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        "Sorting Method"::"Due Date":
          InternalMovementLine.SETCURRENTKEY("No.","Due Date");
      end;

      if InternalMovementLine.FIND('-') then begin
        SequenceNo := 10000;
        repeat
          InternalMovementLine."Sorting Sequence No." := SequenceNo;
          InternalMovementLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        until InternalMovementLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE AssistEdit@8() : Boolean;
    BEGIN
      InvtSetup.GET;
      InvtSetup.TESTFIELD("Internal Movement Nos.");
      if NoSeriesMgt.SelectSeries(InvtSetup."Internal Movement Nos.",xRec."No. Series","No. Series")
      then begin
        NoSeriesMgt.SetSeries("No.");
        exit(true);
      end;
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE OpenInternalMovementHeader@2(VAR InternalMovementHeader@1001 : Record "Internal Movement Header");
    VAR
      WhseEmployee@1003 : Record "Warehouse Employee";
      CurrentLocationCode@1006 : Code[10];
    BEGIN
      WhseEmployee.SETRANGE("Location Code",InternalMovementHeader."Location Code");
      if not WhseEmployee.ISEMPTY then
        CurrentLocationCode := InternalMovementHeader."Location Code"
      else
        CurrentLocationCode := GetDefaultOrFirstAllowedLocation;

      InternalMovementHeader.FILTERGROUP := 2;
      InternalMovementHeader.SETRANGE("Location Code",CurrentLocationCode);
      InternalMovementHeader.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE LookupInternalMovementHeader@1(VAR InternalMovementHeader@1001 : Record "Internal Movement Header");
    BEGIN
      COMMIT;
      InternalMovementHeader.FILTERGROUP := 2;
      InternalMovementHeader.SETRANGE("Location Code");
      if PAGE.RUNMODAL(0,InternalMovementHeader) = ACTION::LookupOK then;
      InternalMovementHeader.SETRANGE("Location Code",InternalMovementHeader."Location Code");
      InternalMovementHeader.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE DeleteRelatedLines@9();
    VAR
      InternalMovementLine@1003 : Record "Internal Movement Line";
      WhseCommentLine@1001 : Record "Warehouse Comment Line";
    BEGIN
      InternalMovementLine.SETRANGE("No.","No.");
      InternalMovementLine.DELETEALL;

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Internal Movement");
      WhseCommentLine.SETRANGE(Type,WhseCommentLine.Type::" ");
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;

      ItemTrackingMgt.DeleteWhseItemTrkgLines(
        DATABASE::"Internal Movement Line",0,"No.",'',0,0,'',false);
    END;

    [External]
    PROCEDURE CheckLocationSettings@5(LocationCode@1000 : Code[10]);
    BEGIN
      GetLocation(LocationCode);
      Location.TESTFIELD("Directed Put-away and Pick",false);
      Location.TESTFIELD("Bin Mandatory",true);
    END;

    LOCAL PROCEDURE GetDefaultOrFirstAllowedLocation@16() LocationCode : Code[10];
    VAR
      WhseEmployeesatLocations@1001 : Query "Whse. Employees at Locations";
    BEGIN
      WhseEmployeesatLocations.SETRANGE(User_ID,USERID);
      WhseEmployeesatLocations.SETRANGE(Bin_Mandatory,true);
      WhseEmployeesatLocations.SETRANGE(Directed_Put_away_and_Pick,false);

      WhseEmployeesatLocations.SETRANGE(Default,true);
      if GetFirstLocationCodeFromLocationsofWhseEmployee(LocationCode,WhseEmployeesatLocations) then
        exit(LocationCode);

      WhseEmployeesatLocations.SETRANGE(Default);
      if GetFirstLocationCodeFromLocationsofWhseEmployee(LocationCode,WhseEmployeesatLocations) then
        exit(LocationCode);

      ERROR(NoAllowedLocationsErr);
    END;

    LOCAL PROCEDURE GetFirstLocationCodeFromLocationsofWhseEmployee@24(VAR LocationCode@1001 : Code[10];VAR WhseEmployeesatLocations@1000 : Query "Whse. Employees at Locations") : Boolean;
    BEGIN
      WhseEmployeesatLocations.TOPNUMBEROFROWS(1);
      if WhseEmployeesatLocations.OPEN then
        if WhseEmployeesatLocations.READ then begin
          LocationCode := WhseEmployeesatLocations.Code;
          WhseEmployeesatLocations.CLOSE;
          exit(true);
        end;

      exit(false);
    END;

    BEGIN
    END.
  }
}

