OBJECT Codeunit 130400 CAL Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="CAL Test Line";
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=BEGIN
            if (GLOBALLANGUAGE <> 1033) and CALTestMgt.ISTESTMODE then
              ERROR(LanguageErr);

            if CALTestSuite.GET("Test Suite") then begin
              CALTestLine.COPY(Rec);
              CALTestLine.SETRANGE("Test Suite","Test Suite");
              RunTests;
            end;
          END;

  }
  CODE
  {
    VAR
      CALTestSuite@1028 : Record "CAL Test Suite";
      CALTestLine@1106000008 : Record "CAL Test Line";
      CALTestLineFunction@1000 : Record "CAL Test Line";
      CALTestMgt@1106000005 : Codeunit "CAL Test Management";
      LibraryRandom@1030 : Codeunit "Library - Random";
      Window@1002 : Dialog;
      CompanyWorkDate@1029 : Date;
      TestRunNo@1027 : Integer;
      MaxLineNo@1021 : Integer;
      MinLineNo@1022 : Integer;
      Filter@1001 : Text;
      ExecutingTestsMsg@1003 : TextConst '@@@={Locked};ENU=Executing Tests...\';
      TestSuiteMsg@1004 : TextConst '@@@={Locked};ENU=Test Suite    #1###################\';
      TestCodeunitMsg@1012 : TextConst '@@@={Locked};ENU=Test Codeunit #2################### @3@@@@@@@@@@@@@\';
      TestFunctionMsg@1013 : TextConst '@@@={Locked};ENU=Test Function #4################### @5@@@@@@@@@@@@@\';
      NoOfResultsMsg@1005 : TextConst '@@@={Locked};ENU=No. of Results with:\';
      WindowUpdateDateTime@1007 : DateTime;
      WindowIsOpen@1006 : Boolean;
      WindowTestSuite@1014 : Code[10];
      WindowTestGroup@1010 : Text;
      WindowTestCodeunit@1009 : Text;
      WindowTestFunction@1008 : Text;
      WindowTestSuccess@1015 : Integer;
      WindowTestFailure@1016 : Integer;
      WindowTestSkip@1017 : Integer;
      SuccessMsg@1018 : TextConst '@@@={Locked};ENU="    Success   #6######\"';
      FailureMsg@1019 : TextConst '@@@={Locked};ENU="    Failure   #7######\"';
      SkipMsg@1020 : TextConst '@@@={Locked};ENU="    Skip      #8######\"';
      WindowNoOfTestCodeunitTotal@1011 : Integer;
      WindowNoOfFunctionTotal@1023 : Integer;
      WindowNoOfTestCodeunit@1025 : Integer;
      WindowNoOfFunction@1024 : Integer;
      LanguageErr@1026 : TextConst 'ENU=You must change the language to English (US) before you run any test. The tests contain captions in English (US) and not the current language. If you do not change the language, tests will fail because they cannot find the text in English (US).';

    LOCAL PROCEDURE RunTests@1106000002();
    VAR
      CALTestResult@1000 : Record "CAL Test Result";
      CodeCoverageMgt@1001 : Codeunit "Code Coverage Mgt.";
    BEGIN
      with CALTestLine do begin
        OpenWindow;
        MODIFYALL(Result,Result::" ");
        MODIFYALL("First Error",'');
        COMMIT;
        TestRunNo := CALTestResult.LastTestRunNo + 1;
        CompanyWorkDate := WORKDATE;
        Filter := GETVIEW;
        WindowNoOfTestCodeunitTotal := CountTestCodeunitsToRun(CALTestLine);
        SETRANGE("Line Type","Line Type"::Codeunit);
        if FIND('-') then
          repeat
            if UpdateTCM then
              CodeCoverageMgt.Start(true);

            MinLineNo := "Line No.";
            MaxLineNo := GetMaxCodeunitLineNo(WindowNoOfFunctionTotal);
            if Run then
              WindowNoOfTestCodeunit += 1;
            WindowNoOfFunction := 0;

            if CALTestMgt.ISPUBLISHMODE then
              DeleteChildren;

            CODEUNIT.RUN("Test Codeunit");

            if UpdateTCM then begin
              CodeCoverageMgt.Stop;
              CALTestMgt.ExtendTestCoverage("Test Codeunit");
            end;
          until NEXT = 0;

        CloseWindow;
      end;
    END;

    [External]
    PROCEDURE OnBeforeTestRun@1102601000(CodeunitID@1102601000 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601002 : Text[128];FunctionTestPermissions@1102601003 : TestPermissions) : Boolean;
    BEGIN
      LibraryRandom.SetSeed(1);
      APPLICATIONAREA('');
      WORKDATE := CompanyWorkDate;
      UpDateWindow(
        CALTestLine."Test Suite",CALTestLine.Name,CodeunitName,FunctionName,
        WindowTestSuccess,WindowTestFailure,WindowTestSkip,
        WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
        WindowNoOfTestCodeunit,WindowNoOfFunction);

      InitCodeunitLine;

      if FunctionName = '' then begin
        CALTestLine.Result := CALTestLine.Result::" ";
        CALTestLine."Start Time" := CURRENTDATETIME;
        exit(true);
      end;

      if CALTestMgt.ISPUBLISHMODE then
        AddTestMethod(FunctionName)
      else begin
        if not TryFindTestFunctionInGroup(FunctionName) then
          exit(false);

        InitTestFunctionLine;
        if not CALTestLineFunction.Run or not CALTestLine.Run then
          exit(false);

        UpDateWindow(
          CALTestLine."Test Suite",CALTestLine.Name,CodeunitName,FunctionName,
          WindowTestSuccess,WindowTestFailure,WindowTestSkip,
          WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
          WindowNoOfTestCodeunit,WindowNoOfFunction + 1);
      end;

      if FunctionName = 'OnRun' then
        exit(true);
      exit(CALTestMgt.ISTESTMODE);
    END;

    [Internal]
    PROCEDURE OnAfterTestRun@1102601001(CodeunitID@1102601002 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601000 : Text[128];FunctionTestPermissions@1102601004 : TestPermissions;IsSuccess@1102601003 : Boolean);
    BEGIN
      if (FunctionName <> '') and (FunctionName <> 'OnRun') then
        if IsSuccess then
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess + 1,WindowTestFailure,WindowTestSkip,
            WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
            WindowNoOfTestCodeunit,WindowNoOfFunction)
        else
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess,WindowTestFailure + 1,WindowTestSkip,
            WindowNoOfTestCodeunitTotal,WindowNoOfFunctionTotal,
            WindowNoOfTestCodeunit,WindowNoOfFunction);

      UpdateCodeunitLine(IsSuccess);

      if FunctionName = '' then
        exit;

      UpdateTestFunctionLine(IsSuccess);

      COMMIT;
      APPLICATIONAREA('');
      CLEARLASTERROR;
    END;

    [External]
    PROCEDURE AddTestMethod@4(FunctionName@1000 : Text[128]);
    BEGIN
      with CALTestLineFunction do begin
        CALTestLineFunction := CALTestLine;
        "Line No." := MaxLineNo + 1;
        "Line Type" := "Line Type"::"Function";
        VALIDATE("Function",FunctionName);
        Run := CALTestLine.Run;
        "Start Time" := CURRENTDATETIME;
        "Finish Time" := CURRENTDATETIME;
        INSERT(true);
      end;
      MaxLineNo := MaxLineNo + 1;
    END;

    [External]
    PROCEDURE InitCodeunitLine@11();
    BEGIN
      with CALTestLine do begin
        if CALTestMgt.ISTESTMODE and (Result = Result::" ") then
          Result := Result::Skipped;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE UpdateCodeunitLine@5(IsSuccess@1001 : Boolean);
    BEGIN
      with CALTestLine do begin
        if CALTestMgt.ISPUBLISHMODE and IsSuccess then
          Result := Result::" "
        else
          if Result <> Result::Failure then
            if IsSuccess then
              Result := Result::Success
            else begin
              "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
              Result := Result::Failure
            end;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      end;
    END;

    [External]
    PROCEDURE InitTestFunctionLine@8();
    BEGIN
      with CALTestLineFunction do begin
        "Start Time" := CURRENTDATETIME;
        "Finish Time" := "Start Time";
        Result := Result::Skipped;
        MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE UpdateTestFunctionLine@6(IsSuccess@1001 : Boolean);
    VAR
      CALTestResult@1000 : Record "CAL Test Result";
    BEGIN
      with CALTestLineFunction do begin
        if IsSuccess then
          Result := CALTestLine.Result::Success
        else begin
          "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
          Result := Result::Failure
        end;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;

        CALTestResult.Add(CALTestLineFunction,TestRunNo);
      end;
    END;

    [External]
    PROCEDURE TryFindTestFunctionInGroup@9(FunctionName@1000 : Text[128]) : Boolean;
    BEGIN
      with CALTestLineFunction do begin
        RESET;
        SETVIEW(Filter);
        SETRANGE("Test Suite",CALTestLine."Test Suite");
        SETRANGE("Test Codeunit",CALTestLine."Test Codeunit");
        SETRANGE("Function",FunctionName);
        if FIND('-') then
          repeat
            if "Line No." in [MinLineNo..MaxLineNo] then
              exit(true);
          until NEXT = 0;
        exit(false);
      end;
    END;

    [External]
    PROCEDURE CountTestCodeunitsToRun@7(VAR CALTestLine@1000 : Record "CAL Test Line") NoOfTestCodeunits : Integer;
    BEGIN
      if not CALTestMgt.ISTESTMODE then
        exit;

      with CALTestLine do begin
        SETRANGE("Line Type","Line Type"::Codeunit);
        SETRANGE(Run,true);
        NoOfTestCodeunits := COUNT;
      end;
    END;

    [External]
    PROCEDURE UpdateTCM@1() : Boolean;
    BEGIN
      exit(CALTestMgt.ISTESTMODE and CALTestSuite."Update Test Coverage Map");
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      if not CALTestMgt.ISTESTMODE then
        exit;

      Window.OPEN(
        ExecutingTestsMsg +
        TestSuiteMsg +
        TestCodeunitMsg +
        TestFunctionMsg +
        NoOfResultsMsg +
        SuccessMsg +
        FailureMsg +
        SkipMsg);
      WindowIsOpen := true;
    END;

    LOCAL PROCEDURE UpDateWindow@31(NewWindowTestSuite@1000 : Code[10];NewWindowTestGroup@1004 : Text;NewWindowTestCodeunit@1003 : Text;NewWindowTestFunction@1001 : Text;NewWindowTestSuccess@1006 : Integer;NewWindowTestFailure@1005 : Integer;NewWindowTestSkip@1002 : Integer;NewWindowNoOfTestCodeunitTotal@1010 : Integer;NewWindowNoOfFunctionTotal@1009 : Integer;NewWindowNoOfTestCodeunit@1008 : Integer;NewWindowNoOfFunction@1007 : Integer);
    BEGIN
      if not CALTestMgt.ISTESTMODE then
        exit;

      WindowTestSuite := NewWindowTestSuite;
      WindowTestGroup := NewWindowTestGroup;
      WindowTestCodeunit := NewWindowTestCodeunit;
      WindowTestFunction := NewWindowTestFunction;
      WindowTestSuccess := NewWindowTestSuccess;
      WindowTestFailure := NewWindowTestFailure;
      WindowTestSkip := NewWindowTestSkip;

      WindowNoOfTestCodeunitTotal := NewWindowNoOfTestCodeunitTotal;
      WindowNoOfFunctionTotal := NewWindowNoOfFunctionTotal;
      WindowNoOfTestCodeunit := NewWindowNoOfTestCodeunit;
      WindowNoOfFunction := NewWindowNoOfFunction;

      if IsTimeForUpdate then begin
        if not WindowIsOpen then
          OpenWindow;
        Window.UPDATE(1,WindowTestSuite);
        Window.UPDATE(2,WindowTestCodeunit);
        Window.UPDATE(4,WindowTestFunction);
        Window.UPDATE(6,WindowTestSuccess);
        Window.UPDATE(7,WindowTestFailure);
        Window.UPDATE(8,WindowTestSkip);

        if NewWindowNoOfTestCodeunitTotal <> 0 then
          Window.UPDATE(3,ROUND(NewWindowNoOfTestCodeunit / NewWindowNoOfTestCodeunitTotal * 10000,1));
        if NewWindowNoOfFunctionTotal <> 0 then
          Window.UPDATE(5,ROUND(NewWindowNoOfFunction / NewWindowNoOfFunctionTotal * 10000,1));
      end;
    END;

    LOCAL PROCEDURE CloseWindow@2();
    BEGIN
      if not CALTestMgt.ISTESTMODE then
        exit;

      if WindowIsOpen then begin
        Window.CLOSE;
        WindowIsOpen := false;
      end;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@69() : Boolean;
    BEGIN
      if true in [WindowUpdateDateTime = 0DT,CURRENTDATETIME - WindowUpdateDateTime >= 1000] then begin
        WindowUpdateDateTime := CURRENTDATETIME;
        exit(true);
      end;
      exit(false);
    END;

    BEGIN
    END.
  }
}

