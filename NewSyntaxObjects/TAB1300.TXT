OBJECT Table 1300 Mini Customer Template
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FieldRefArray@1001 : ARRAY [23] OF FieldRef;
               RecRef@1000 : RecordRef;
             BEGIN
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);

               InsertConfigurationTemplateHeaderAndLines;
             END;

    OnModify=VAR
               FieldRefArray@1000 : ARRAY [23] OF FieldRef;
               RecRef@1001 : RecordRef;
             BEGIN
               TESTFIELD(Code);
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);
               ConfigTemplateManagement.UpdateConfigTemplateAndLines(Code,"Template Name",DATABASE::Customer,FieldRefArray);
             END;

    OnDelete=VAR
               ConfigTemplateHeader@1000 : Record "Config. Template Header";
             BEGIN
               if ConfigTemplateHeader.GET(Code) then begin
                 ConfigTemplateManagement.DeleteRelatedTemplates(Code,DATABASE::"Default Dimension");
                 ConfigTemplateHeader.DELETE(true);
               end;
             END;

    CaptionML=ENU=Mini Customer Template;
  }
  FIELDS
  {
    { 1   ;   ;Key                 ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Key }
    { 2   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Template Name       ;Text50        ;CaptionML=ENU=Template Name;
                                                   NotBlank=true }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=VAR
                                                                PostCodeRec@1000 : Record "Post Code";
                                                              BEGIN
                                                                if City <> '' then begin
                                                                  PostCodeRec.SETFILTER("Search City",City);

                                                                  case PostCodeRec.COUNT of
                                                                    0:
                                                                      exit;
                                                                    1:
                                                                      PostCodeRec.FINDFIRST;
                                                                    else
                                                                      if PAGE.RUNMODAL(PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) <> ACTION::LookupOK then
                                                                        exit;
                                                                  end;

                                                                  "Post Code" := PostCodeRec.Code;
                                                                  "Country/Region Code" := PostCodeRec."Country/Region Code";
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 11  ;   ;Document Sending Profile;Code20    ;TableRelation="Document Sending Profile".Code;
                                                   CaptionML=ENU=Document Sending Profile }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=ENU=Credit Limit (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=ENU=Print Statements }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,"Apply to Oldest" }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 88  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=VAR
                                                                PostCodeRec@1000 : Record "Post Code";
                                                              BEGIN
                                                                if "Post Code" <> '' then begin
                                                                  PostCodeRec.SETFILTER(Code,"Post Code");

                                                                  case PostCodeRec.COUNT of
                                                                    0:
                                                                      exit;
                                                                    1:
                                                                      PostCodeRec.FINDFIRST;
                                                                    else
                                                                      if PAGE.RUNMODAL(PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) <> ACTION::LookupOK then
                                                                        exit;
                                                                  end;

                                                                  City := PostCodeRec.City;
                                                                  "Country/Region Code" := PostCodeRec."Country/Region Code";
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 110 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;CaptionML=ENU=Block Payment Tolerance }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7602;   ;Validate EU Vat Reg. No.;Boolean   ;CaptionML=ENU=Validate EU Vat Reg. No. }
  }
  KEYS
  {
    {    ;Key                                     ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigTemplateManagement@1000 : Codeunit "Config. Template Management";

    [External]
    PROCEDURE CreateFieldRefArray@12(VAR FieldRefArray@1000 : ARRAY [23] OF FieldRef;RecRef@1003 : RecordRef);
    VAR
      I@1002 : Integer;
    BEGIN
      I := 1;

      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(City)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Document Sending Profile")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Credit Limit (LCY)")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Customer Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Currency Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Customer Price Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Language Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Payment Terms Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Fin. Charge Terms Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Customer Disc. Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Country/Region Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Print Statements")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Payment Method Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Application Method")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Prices Including VAT")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Gen. Bus. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Post Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(County)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Reminder Terms Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Bus. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Block Payment Tolerance")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Allow Line Disc.")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Validate EU Vat Reg. No.")));
    END;

    LOCAL PROCEDURE AddToArray@4(VAR FieldRefArray@1000 : ARRAY [24] OF FieldRef;VAR I@1001 : Integer;CurrFieldRef@1002 : FieldRef);
    BEGIN
      FieldRefArray[I] := CurrFieldRef;
      I += 1;
    END;

    [External]
    PROCEDURE InitializeTempRecordFromConfigTemplate@1(VAR TempMiniCustomerTemplate@1000 : TEMPORARY Record "Mini Customer Template";ConfigTemplateHeader@1001 : Record "Config. Template Header");
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      TempMiniCustomerTemplate.INIT;
      TempMiniCustomerTemplate.Code := ConfigTemplateHeader.Code;
      TempMiniCustomerTemplate."Template Name" := ConfigTemplateHeader.Description;
      TempMiniCustomerTemplate.INSERT;

      RecRef.GETTABLE(TempMiniCustomerTemplate);

      ConfigTemplateManagement.ApplyTemplateLinesWithoutValidation(ConfigTemplateHeader,RecRef);

      RecRef.SETTABLE(TempMiniCustomerTemplate);
    END;

    [External]
    PROCEDURE CreateConfigTemplateFromExistingCustomer@5(Customer@1000 : Record Customer;VAR TempMiniCustomerTemplate@1001 : TEMPORARY Record "Mini Customer Template");
    VAR
      DimensionsTemplate@1002 : Record "Dimensions Template";
      ConfigTemplateHeader@1006 : Record "Config. Template Header";
      RecRef@1005 : RecordRef;
      FieldRefArray@1004 : ARRAY [23] OF FieldRef;
      NewTemplateCode@1003 : Code[10];
    BEGIN
      RecRef.GETTABLE(Customer);
      CreateFieldRefArray(FieldRefArray,RecRef);

      ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Customer,FieldRefArray);
      ConfigTemplateHeader.GET(NewTemplateCode);
      DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Customer."No.",NewTemplateCode,DATABASE::Customer);
      InitializeTempRecordFromConfigTemplate(TempMiniCustomerTemplate,ConfigTemplateHeader);
    END;

    [External]
    PROCEDURE SaveAsTemplate@7(Customer@1000 : Record Customer);
    VAR
      TempMiniCustomerTemplate@1001 : TEMPORARY Record "Mini Customer Template";
      CustTemplateCard@1002 : Page "Cust. Template Card";
    BEGIN
      CustTemplateCard.CreateFromCust(Customer);
      CustTemplateCard.SETRECORD(TempMiniCustomerTemplate);
      CustTemplateCard.LOOKUPMODE := true;
      if CustTemplateCard.RUNMODAL = ACTION::LookupOK then;
    END;

    LOCAL PROCEDURE InsertConfigurationTemplateHeaderAndLines@2();
    VAR
      FieldRefArray@1001 : ARRAY [23] OF FieldRef;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      CreateFieldRefArray(FieldRefArray,RecRef);
      ConfigTemplateManagement.CreateConfigTemplateAndLines(Code,"Template Name",DATABASE::Customer,FieldRefArray);
    END;

    [Internal]
    PROCEDURE NewCustomerFromTemplate@3(VAR Customer@1001 : Record Customer) : Boolean;
    VAR
      ConfigTemplateHeader@1004 : Record "Config. Template Header";
      ConfigTemplates@1005 : Page "Config Templates";
    BEGIN
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
      ConfigTemplateHeader.SETRANGE(Enabled,true);

      if ConfigTemplateHeader.COUNT = 1 then begin
        ConfigTemplateHeader.FINDFIRST;
        InsertCustomerFromTemplate(ConfigTemplateHeader,Customer);
        exit(true);
      end;

      if (ConfigTemplateHeader.COUNT > 1) and GUIALLOWED then begin
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        ConfigTemplates.SetNewMode;
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          InsertCustomerFromTemplate(ConfigTemplateHeader,Customer);
          exit(true);
        end;
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE UpdateCustomerFromTemplate@8(VAR Customer@1000 : Record Customer);
    VAR
      ConfigTemplateHeader@1001 : Record "Config. Template Header";
      DimensionsTemplate@1004 : Record "Dimensions Template";
      ConfigTemplates@1003 : Page "Config Templates";
      CustomerRecRef@1002 : RecordRef;
    BEGIN
      if GUIALLOWED then begin
        ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
        ConfigTemplateHeader.SETRANGE(Enabled,true);
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          CustomerRecRef.GETTABLE(Customer);
          ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,CustomerRecRef);
          DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Customer."No.",DATABASE::Customer);
          CustomerRecRef.SETTABLE(Customer);
        end;
      end;
    END;

    [External]
    PROCEDURE InsertCustomerFromTemplate@16(ConfigTemplateHeader@1006 : Record "Config. Template Header";VAR Customer@1003 : Record Customer);
    VAR
      DimensionsTemplate@1001 : Record "Dimensions Template";
      ConfigTemplateMgt@1002 : Codeunit "Config. Template Management";
      RecRef@1000 : RecordRef;
    BEGIN
      Customer.SetInsertFromTemplate(true);
      Customer.INSERT(true);
      RecRef.GETTABLE(Customer);
      ConfigTemplateMgt.UpdateRecord(ConfigTemplateHeader,RecRef);
      RecRef.SETTABLE(Customer);

      DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Customer."No.",DATABASE::Customer);
    END;

    [Internal]
    PROCEDURE UpdateCustomersFromTemplate@6(VAR Customer@1000 : Record Customer);
    VAR
      ConfigTemplateHeader@1001 : Record "Config. Template Header";
      DimensionsTemplate@1004 : Record "Dimensions Template";
      ConfigTemplates@1003 : Page "Config Templates";
      CustomerRecRef@1002 : RecordRef;
    BEGIN
      if GUIALLOWED then begin
        ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
        ConfigTemplateHeader.SETRANGE(Enabled,true);
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          CustomerRecRef.GETTABLE(Customer);
          if CustomerRecRef.FINDSET then
            repeat
              ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,CustomerRecRef);
              DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Customer."No.",DATABASE::Customer);
            until CustomerRecRef.NEXT = 0;
          CustomerRecRef.SETTABLE(Customer);
        end;
      end;
    END;

    BEGIN
    END.
  }
}

