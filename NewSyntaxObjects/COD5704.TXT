OBJECT Codeunit 5704 TransferOrder-Post Shipment
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Transfer Header";
    Permissions=TableData "Item Entry Relation"=i;
    OnRun=VAR
            Item@1000 : Record Item;
            SourceCodeSetup@1001 : Record "Source Code Setup";
            InvtSetup@1002 : Record "Inventory Setup";
            NoSeriesMgt@1003 : Codeunit NoSeriesManagement;
            UpdateAnalysisView@1004 : Codeunit "Update Analysis View";
            UpdateItemAnalysisView@1009 : Codeunit "Update Item Analysis View";
            CreateReservEntry@1010 : Codeunit "Create Reserv. Entry";
            RecordLinkManagement@1011 : Codeunit "Record Link Management";
            Window@1006 : Dialog;
            LineCount@1005 : Integer;
            NextLineNo@1008 : Integer;
          BEGIN
            ReleaseDocument(Rec);
            TransHeader := Rec;
            TransHeader.SetHideValidationDialog(HideValidationDialog);

            OnBeforeTransferOrderPostShipment(TransHeader);

            with TransHeader do begin
              CheckBeforePost;

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              if "Shipping Advice" = "Shipping Advice"::Complete then
                if not GetShippingAdvice then
                  ERROR(Text008);

              CheckDim;

              TransLine.RESET;
              TransLine.SETRANGE("Document No.","No.");
              TransLine.SETRANGE("Derived From Line No.",0);
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              if TransLine.ISEMPTY then
                ERROR(Text001);

              WhseShip := TempWhseShptHeader.FINDFIRST;
              InvtPickPutaway := WhseReference <> 0;
              CheckItemInInventoryAndWarehouse(TransLine,not (WhseShip or InvtPickPutaway));

              GetLocation("Transfer-from Code");
              if Location."Bin Mandatory" and not (WhseShip or InvtPickPutaway) then
                WhsePosting := true;

              Window.OPEN(
                '#1#################################\\' +
                Text003);

              Window.UPDATE(1,STRSUBSTNO(Text004,"No."));

              SourceCodeSetup.GET;
              SourceCode := SourceCodeSetup.Transfer;
              InvtSetup.GET;
              InvtSetup.TESTFIELD("Posted Transfer Shpt. Nos.");

              CheckInvtPostingSetup;

              LockTables(InvtSetup."Automatic Cost Posting");

              // Insert shipment header
              PostedWhseShptHeader.LOCKTABLE;
              TransShptHeader.LOCKTABLE;
              TransShptHeader.INIT;
              TransShptHeader.CopyFromTransferHeader(TransHeader);
              TransShptHeader."No. Series" := InvtSetup."Posted Transfer Shpt. Nos.";
              TransShptHeader."No." :=
                NoSeriesMgt.GetNextNo(
                  InvtSetup."Posted Transfer Shpt. Nos.","Posting Date",true);
              TransShptHeader.INSERT;

              if InvtSetup."Copy Comments Order to Shpt." then begin
                CopyCommentLines(1,2,"No.",TransShptHeader."No.");
                RecordLinkManagement.CopyLinks(Rec,TransShptHeader);
              end;

              if WhseShip then begin
                WhseShptHeader.GET(TempWhseShptHeader."No.");
                WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,TransShptHeader."No.","Posting Date");
              end;

              // Insert shipment lines
              LineCount := 0;
              if WhseShip then
                PostedWhseShptLine.LOCKTABLE;
              if InvtPickPutaway then
                WhseRqst.LOCKTABLE;
              TransShptLine.LOCKTABLE;
              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              if TransLine.FIND('-') then
                repeat
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);

                  if TransLine."Item No." <> '' then begin
                    Item.GET(TransLine."Item No.");
                    Item.TESTFIELD(Blocked,false);
                  end;

                  TransShptLine.INIT;
                  TransShptLine."Document No." := TransShptHeader."No.";
                  TransShptLine.CopyFromTransferLine(TransLine);

                  if TransLine."Qty. to Ship" > 0 then begin
                    OriginalQuantity := TransLine."Qty. to Ship";
                    OriginalQuantityBase := TransLine."Qty. to Ship (Base)";
                    PostItemJnlLine(TransLine,TransShptHeader,TransShptLine);
                    TransShptLine."Item Shpt. Entry No." := InsertShptEntryRelation(TransShptLine);
                    if WhseShip then begin
                      WhseShptLine.SETCURRENTKEY(
                        "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                      WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                      WhseShptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                      WhseShptLine.SETRANGE("Source No.",TransLine."Document No.");
                      WhseShptLine.SETRANGE("Source Line No.",TransLine."Line No.");
                      WhseShptLine.FINDFIRST;
                      WhseShptLine.TESTFIELD("Qty. to Ship",TransShptLine.Quantity);
                      WhsePostShpt.CreatePostedShptLine(
                        WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                    end;
                    if WhsePosting then
                      PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
                  end;
                  TransShptLine.INSERT;
                until TransLine.NEXT = 0;

              InvtSetup.GET;
              if InvtSetup."Automatic Cost Adjustment" <> InvtSetup."Automatic Cost Adjustment"::Never then begin
                InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              end;

              if WhseShip then
                WhseShptLine.LOCKTABLE;
              TransLine.LOCKTABLE;
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              if TransLine.FIND('-') then begin
                NextLineNo := AssignLineNo(TransLine."Document No.");
                repeat
                  CopyTransLine(TransLine2,TransLine,NextLineNo,TransHeader);
                  TransferTracking(TransLine,TransLine2,TransLine."Qty. to Ship (Base)");

                  TransLine.VALIDATE("Quantity Shipped",TransLine."Quantity Shipped" + TransLine."Qty. to Ship");

                  TransLine.UpdateWithWarehouseShipReceive;

                  TransLine.MODIFY;
                until TransLine.NEXT = 0;
              end;

              if WhseShip then
                WhseShptLine.LOCKTABLE;
              LOCKTABLE;
              if WhseShip then begin
                WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                TempWhseShptHeader.DELETE;
              end;

              "Last Shipment No." := TransShptHeader."No.";
              MODIFY;

              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              if ShouldDeleteOneTransferOrder(TransLine) then
                DeleteOneTransferOrder(TransHeader,TransLine)
              else begin
                WhseTransferRelease.Release(TransHeader);
                ReserveTransLine.UpdateItemTrackingAfterPosting(TransHeader,0);
                CreateReservEntry.UpdReservEntryAfterPostingPick(TransHeader);
              end;

              if not InvtPickPutaway then
                COMMIT;
              CLEAR(WhsePostShpt);
              CLEAR(InvtAdjmt);
              Window.CLOSE;
            end;
            UpdateAnalysisView.UpdateAll(0,true);
            UpdateItemAnalysisView.UpdateAll(0,true);
            Rec := TransHeader;
            OnAfterTransferOrderPostShipment(Rec);
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There is nothing to post.';
      Text002@1002 : TextConst 'ENU="Warehouse handling is required for Transfer order = %1, %2 = %3."';
      Text003@1003 : TextConst 'ENU=Posting transfer lines     #2######';
      Text004@1004 : TextConst 'ENU=Transfer Order %1';
      Text005@1005 : TextConst 'ENU=The combination of dimensions used in transfer order %1 is blocked. %2';
      Text006@1006 : TextConst 'ENU=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3';
      Text007@1007 : TextConst 'ENU=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.';
      TransShptHeader@1008 : Record "Transfer Shipment Header";
      TransShptLine@1009 : Record "Transfer Shipment Line";
      TransHeader@1010 : Record "Transfer Header";
      TransLine@1011 : Record "Transfer Line";
      TransLine2@1012 : Record "Transfer Line";
      Location@1015 : Record Location;
      ItemJnlLine@1016 : Record "Item Journal Line";
      WhseRqst@1027 : Record "Warehouse Request";
      WhseShptHeader@1022 : Record "Warehouse Shipment Header";
      TempWhseShptHeader@1030 : TEMPORARY Record "Warehouse Shipment Header";
      WhseShptLine@1028 : Record "Warehouse Shipment Line";
      PostedWhseShptHeader@1034 : Record "Posted Whse. Shipment Header";
      PostedWhseShptLine@1035 : Record "Posted Whse. Shipment Line";
      TempWhseSplitSpecification@1037 : TEMPORARY Record "Tracking Specification";
      TempHandlingSpecification@1018 : TEMPORARY Record "Tracking Specification";
      ItemJnlPostLine@1021 : Codeunit "Item Jnl.-Post Line";
      DimMgt@1017 : Codeunit DimensionManagement;
      WhseTransferRelease@1019 : Codeunit "Whse.-Transfer Release";
      ReserveTransLine@1020 : Codeunit "Transfer Line-Reserve";
      WhsePostShpt@1036 : Codeunit "Whse.-Post Shipment";
      InvtAdjmt@1041 : Codeunit "Inventory Adjustment";
      WhseJnlRegisterLine@1045 : Codeunit "Whse. Jnl.-Register Line";
      SourceCode@1023 : Code[10];
      HideValidationDialog@1024 : Boolean;
      WhseShip@1026 : Boolean;
      WhsePosting@1033 : Boolean;
      InvtPickPutaway@1039 : Boolean;
      WhseReference@1038 : Integer;
      OriginalQuantity@1031 : Decimal;
      OriginalQuantityBase@1032 : Decimal;
      Text008@11042 : TextConst 'ENU=This order must be a complete shipment.';
      Text009@1042 : TextConst 'ENU=Item %1 is not in inventory.';

    LOCAL PROCEDURE PostItemJnlLine@2(VAR TransLine3@1000 : Record "Transfer Line";TransShptHeader2@1001 : Record "Transfer Shipment Header";TransShptLine2@1002 : Record "Transfer Shipment Line");
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine."Posting Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document No." := TransShptHeader2."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Transfer Shipment";
      ItemJnlLine."Document Line No." := TransShptLine2."Line No.";
      ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Transfer;
      ItemJnlLine."Order No." := TransShptHeader2."Transfer Order No.";
      ItemJnlLine."Order Line No." := TransLine3."Line No.";
      ItemJnlLine."External Document No." := TransShptHeader2."External Document No.";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Transfer;
      ItemJnlLine."Item No." := TransShptLine2."Item No.";
      ItemJnlLine.Description := TransShptLine2.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."New Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."New Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."New Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."Location Code" := TransShptHeader2."Transfer-from Code";
      ItemJnlLine."New Location Code" := TransHeader."In-Transit Code";
      ItemJnlLine.Quantity := TransShptLine2.Quantity;
      ItemJnlLine."Invoiced Quantity" := TransShptLine2.Quantity;
      ItemJnlLine."Quantity (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Invoiced Qty. (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Source Code" := SourceCode;
      ItemJnlLine."Gen. Prod. Posting Group" := TransShptLine2."Gen. Prod. Posting Group";
      ItemJnlLine."Inventory Posting Group" := TransShptLine2."Inventory Posting Group";
      ItemJnlLine."Unit of Measure Code" := TransShptLine2."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := TransShptLine2."Qty. per Unit of Measure";
      ItemJnlLine."Variant Code" := TransShptLine2."Variant Code";
      ItemJnlLine."Bin Code" := TransLine."Transfer-from Bin Code";
      ItemJnlLine."Country/Region Code" := TransShptHeader2."Trsf.-from Country/Region Code";
      ItemJnlLine."Transaction Type" := TransShptHeader2."Transaction Type";
      ItemJnlLine."Transport Method" := TransShptHeader2."Transport Method";
      ItemJnlLine."Entry/Exit Point" := TransShptHeader2."Entry/Exit Point";
      ItemJnlLine.Area := TransShptHeader2.Area;
      ItemJnlLine."Transaction Specification" := TransShptHeader2."Transaction Specification";
      ItemJnlLine."Product Group Code" := TransLine."Product Group Code";
      ItemJnlLine."Item Category Code" := TransLine."Item Category Code";
      ItemJnlLine."Applies-to Entry" := TransLine."Appl.-to Item Entry";

      ReserveTransLine.TransferTransferToItemJnlLine(TransLine3,
        ItemJnlLine,ItemJnlLine."Quantity (Base)",0);

      OnBeforePostItemJournalLine(ItemJnlLine,TransLine3,TransShptHeader2,TransShptLine2);
      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      InvtCommentLine@1004 : Record "Inventory Comment Line";
      InvtCommentLine2@1005 : Record "Inventory Comment Line";
    BEGIN
      InvtCommentLine.SETRANGE("Document Type",FromDocumentType);
      InvtCommentLine.SETRANGE("No.",FromNumber);
      if InvtCommentLine.FIND('-') then
        repeat
          InvtCommentLine2 := InvtCommentLine;
          InvtCommentLine2."Document Type" := ToDocumentType;
          InvtCommentLine2."No." := ToNumber;
          InvtCommentLine2.INSERT;
        until InvtCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDim@34();
    BEGIN
      TransLine."Line No." := 0;
      CheckDimComb(TransHeader,TransLine);
      CheckDimValuePosting(TransHeader,TransLine);

      TransLine.SETRANGE("Document No.",TransHeader."No.");
      if TransLine.FINDFIRST then begin
        CheckDimComb(TransHeader,TransLine);
        CheckDimValuePosting(TransHeader,TransLine);
      end;
    END;

    LOCAL PROCEDURE CheckDimComb@30(TransferHeader@1001 : Record "Transfer Header";TransferLine@1000 : Record "Transfer Line");
    BEGIN
      if TransferLine."Line No." = 0 then
        if not DimMgt.CheckDimIDComb(TransferHeader."Dimension Set ID") then
          ERROR(
            Text005,
            TransHeader."No.",DimMgt.GetDimCombErr);
      if TransferLine."Line No." <> 0 then
        if not DimMgt.CheckDimIDComb(TransferLine."Dimension Set ID") then
          ERROR(
            Text006,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(TransferHeader@1001 : Record "Transfer Header";TransferLine@1000 : Record "Transfer Line");
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableIDArr[1] := DATABASE::Item;
      NumberArr[1] := TransferLine."Item No.";
      if TransferLine."Line No." = 0 then
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferHeader."Dimension Set ID") then
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);

      if TransferLine."Line No." <> 0 then
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferLine."Dimension Set ID") then
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE AssignLineNo@1(FromDocNo@1000 : Code[20]) : Integer;
    VAR
      TransLine3@1002 : Record "Transfer Line";
    BEGIN
      TransLine3.SETRANGE("Document No.",FromDocNo);
      if TransLine3.FINDLAST then
        exit(TransLine3."Line No." + 10000);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR TransShptLine@1002 : Record "Transfer Shipment Line") : Integer;
    VAR
      TempHandlingSpecification2@1000 : TEMPORARY Record "Tracking Specification";
      ItemEntryRelation@1001 : Record "Item Entry Relation";
      ItemTrackingMgt@1005 : Codeunit "Item Tracking Management";
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      if WhsePosting then begin
        TempWhseSplitSpecification.RESET;
        TempWhseSplitSpecification.DELETEALL;
      end;

      TempHandlingSpecification2.RESET;
      if ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) then begin
        TempHandlingSpecification2.SETRANGE("Buffer Status",0);
        if TempHandlingSpecification2.FIND('-') then begin
          repeat
            if WhsePosting or WhseShip or InvtPickPutaway then begin
              ItemTrackingMgt.CheckWhseItemTrkgSetup(
                TransShptLine."Item No.",WhseSNRequired,WhseLNRequired,false);
              if WhseSNRequired or WhseLNRequired then begin
                TempWhseSplitSpecification := TempHandlingSpecification2;
                TempWhseSplitSpecification."Source Type" := DATABASE::"Transfer Line";
                TempWhseSplitSpecification."Source ID" := TransLine."Document No.";
                TempWhseSplitSpecification."Source Ref. No." := TransLine."Line No.";
                TempWhseSplitSpecification.INSERT;
              end;
            end;

            ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification2);
            ItemEntryRelation.TransferFieldsTransShptLine(TransShptLine);
            ItemEntryRelation.INSERT;
            TempHandlingSpecification := TempHandlingSpecification2;
            TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
            TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
            TempHandlingSpecification.INSERT;
          until TempHandlingSpecification2.NEXT = 0;
          exit(0);
        end;
      end else
        exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE TransferTracking@3(VAR FromTransLine@1003 : Record "Transfer Line";VAR ToTransLine@1004 : Record "Transfer Line";TransferQty@1001 : Decimal);
    VAR
      DummySpecification@1005 : Record "Tracking Specification";
    BEGIN
      TempHandlingSpecification.RESET;
      TempHandlingSpecification.SETRANGE("Source Prod. Order Line",ToTransLine."Derived From Line No.");
      if TempHandlingSpecification.FIND('-') then begin
        repeat
          ReserveTransLine.TransferTransferToTransfer(
            FromTransLine,ToTransLine,-TempHandlingSpecification."Quantity (Base)",1,TempHandlingSpecification);
          TransferQty += TempHandlingSpecification."Quantity (Base)";
        until TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
      end;

      if TransferQty > 0 then
        ReserveTransLine.TransferTransferToTransfer(
          FromTransLine,ToTransLine,TransferQty,1,DummySpecification);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(TransLine@1000 : Record "Transfer Line");
    VAR
      WhseValidateSourceLine@1003 : Codeunit "Whse. Validate Source Line";
      ShowError@1002 : Boolean;
    BEGIN
      GetLocation(TransLine."Transfer-from Code");
      if Location."Require Pick" or Location."Require Shipment" then begin
        if Location."Bin Mandatory" then
          ShowError := true
        else
          if WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,// Out
               TransLine."Document No.",
               TransLine."Line No.",
               0,
               TransLine.Quantity)
          then
            ShowError := true;

        if ShowError then
          ERROR(
            Text002,
            TransLine."Document No.",
            TransLine.FIELDCAPTION("Line No."),
            TransLine."Line No.");
      end;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE PostWhseJnlLine@4(ItemJnlLine@1000 : Record "Item Journal Line";OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1006 : Decimal);
    VAR
      WhseJnlLine@1002 : Record "Warehouse Journal Line";
      TempWhseJnlLine2@1005 : TEMPORARY Record "Warehouse Journal Line";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      WMSMgmt@1007 : Codeunit "WMS Management";
    BEGIN
      with ItemJnlLine do begin
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        if Location."Bin Mandatory" then
          if WMSMgmt.CreateWhseJnlLine(ItemJnlLine,1,WhseJnlLine,false) then begin
            WMSMgmt.SetTransferLine(TransLine,WhseJnlLine,0,TransShptHeader."No.");
            ItemTrackingMgt.SplitWhseJnlLine(
              WhseJnlLine,TempWhseJnlLine2,TempWhseSplitSpecification,true);
            if TempWhseJnlLine2.FIND('-') then
              repeat
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,true);
                WhseJnlRegisterLine.RegisterWhseJnlLine(TempWhseJnlLine2);
              until TempWhseJnlLine2.NEXT = 0;
          end;
      end;
    END;

    [External]
    PROCEDURE SetWhseShptHeader@5(VAR WhseShptHeader2@1000 : Record "Warehouse Shipment Header");
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE GetShippingAdvice@6() : Boolean;
    VAR
      TransLine@1000 : Record "Transfer Line";
    BEGIN
      TransLine.SETRANGE("Document No.",TransHeader."No.");
      if TransLine.FIND('-') then
        repeat
          if TransLine."Quantity (Base)" <>
             TransLine."Qty. to Ship (Base)" + TransLine."Qty. Shipped (Base)"
          then
            exit(false);
        until TransLine.NEXT = 0;
      exit(true);
    END;

    LOCAL PROCEDURE CheckItemInInventory@1043(TransLine@1000 : Record "Transfer Line");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do begin
        GET(TransLine."Item No.");
        SETFILTER("Variant Filter",TransLine."Variant Code");
        SETFILTER("Location Filter",TransLine."Transfer-from Code");
        CALCFIELDS(Inventory);
        if Inventory <= 0 then
          ERROR(Text009,TransLine."Item No.");
      end;
    END;

    LOCAL PROCEDURE CheckItemInInventoryAndWarehouse@8(VAR TransLine@1000 : Record "Transfer Line";NeedCheckWarehouse@1001 : Boolean);
    VAR
      TransLine2@1002 : Record "Transfer Line";
    BEGIN
      TransLine2.COPYFILTERS(TransLine);
      TransLine2.FINDSET;
      repeat
        CheckItemInInventory(TransLine2);
        if  NeedCheckWarehouse then
          CheckWarehouse(TransLine2);
      until TransLine2.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostItemJournalLine@13(VAR ItemJournalLine@1003 : Record "Item Journal Line";TransferLine@1000 : Record "Transfer Line";TransferShipmentHeader@1001 : Record "Transfer Shipment Header";TransferShipmentLine@1002 : Record "Transfer Shipment Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferOrderPostShipment@7(VAR TransferHeader@1000 : Record "Transfer Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferOrderPostShipment@10(VAR TransferHeader@1000 : Record "Transfer Header");
    BEGIN
    END;

    LOCAL PROCEDURE LockTables@9(AutoCostPosting@1000 : Boolean);
    VAR
      GLEntry@1001 : Record "G/L Entry";
      NoSeriesLine@1002 : Record "No. Series Line";
    BEGIN
      NoSeriesLine.LOCKTABLE;
      if NoSeriesLine.FINDLAST then;
      if AutoCostPosting then begin
        GLEntry.LOCKTABLE;
        if GLEntry.FINDLAST then;
      end;
    END;

    LOCAL PROCEDURE CopyTransLine@11(VAR NewTransferLine@1000 : Record "Transfer Line";TransferLine@1001 : Record "Transfer Line";VAR NextLineNo@1002 : Integer;TransferHeader@1003 : Record "Transfer Header");
    BEGIN
      NewTransferLine.INIT;
      NewTransferLine := TransferLine;
      if TransferHeader."In-Transit Code" <> '' then
        NewTransferLine."Transfer-from Code" := TransferLine."In-Transit Code";
      NewTransferLine."In-Transit Code" := '';
      NewTransferLine."Derived From Line No." := TransferLine."Line No.";
      NewTransferLine."Line No." := NextLineNo;
      NextLineNo := NextLineNo + 10000;
      NewTransferLine.Quantity := TransferLine."Qty. to Ship";
      NewTransferLine."Quantity (Base)" := TransferLine."Qty. to Ship (Base)";
      NewTransferLine."Qty. to Ship" := NewTransferLine.Quantity;
      NewTransferLine."Qty. to Ship (Base)" := NewTransferLine."Quantity (Base)";
      NewTransferLine."Qty. to Receive" := NewTransferLine.Quantity;
      NewTransferLine."Qty. to Receive (Base)" := NewTransferLine."Quantity (Base)";
      NewTransferLine.ResetPostedQty;
      NewTransferLine."Outstanding Quantity" := NewTransferLine.Quantity;
      NewTransferLine."Outstanding Qty. (Base)" := NewTransferLine."Quantity (Base)";
      NewTransferLine.INSERT;
    END;

    LOCAL PROCEDURE ReleaseDocument@12(VAR TransferHeader@1000 : Record "Transfer Header");
    BEGIN
      if TransferHeader.Status = TransferHeader.Status::Open then begin
        CODEUNIT.RUN(CODEUNIT::"Release Transfer Document",TransferHeader);
        TransferHeader.Status := TransferHeader.Status::Open;
        TransferHeader.MODIFY;
        COMMIT;
        TransferHeader.Status := TransferHeader.Status::Released;
      end;
    END;

    BEGIN
    END.
  }
}

