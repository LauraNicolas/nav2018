OBJECT Codeunit 5770 Whse.-Service Release
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseRqst@1004 : Record "Warehouse Request";
      ServiceLine@1003 : Record "Service Line";
      Location@1002 : Record Location;
      OldLocationCode@1001 : Code[10];
      First@1000 : Boolean;

    [External]
    PROCEDURE Release@1(ServiceHeader@1000 : Record "Service Header");
    VAR
      WhseType@1001 : 'Inbound,Outbound';
      OldWhseType@1002 : 'Inbound,Outbound';
    BEGIN
      with ServiceHeader do begin
        if "Document Type" <> "Document Type"::Order then
          exit;
        WhseRqst."Source Document" := WhseRqst."Source Document"::"Service Order";

        ServiceLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","No.");
        ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
        ServiceLine.SETRANGE("Job No.",'');
        if ServiceLine.FINDSET then begin
          First := true;
          repeat
            if ("Document Type" = "Document Type"::Order) and (ServiceLine.Quantity >= 0) then
              WhseType := WhseType::Outbound
            else
              WhseType := WhseType::Inbound;

            if First or (ServiceLine."Location Code" <> OldLocationCode) or
               (WhseType <> OldWhseType)
            then
              CreateWhseRqst(ServiceHeader,WhseType);

            First := false;
            OldLocationCode := ServiceLine."Location Code";
            OldWhseType := WhseType;
          until ServiceLine.NEXT = 0;
        end;
        SetWhseRqstFiltersByStatus(ServiceHeader,WhseRqst,"Release Status"::Open);
        WhseRqst.DELETEALL(true);
      end;
    END;

    [External]
    PROCEDURE Reopen@2(ServiceHeader@1000 : Record "Service Header");
    VAR
      WhseRqst@1001 : Record "Warehouse Request";
    BEGIN
      with ServiceHeader do begin
        WhseRqst.Type := WhseRqst.Type::Outbound;
        SetWhseRqstFiltersByStatus(ServiceHeader,WhseRqst,"Release Status"::"Released to Ship");
        WhseRqst.LOCKTABLE;
        if WhseRqst.FINDSET then
          repeat
            WhseRqst."Document Status" := "Release Status"::Open;
            WhseRqst.MODIFY;
          until WhseRqst.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateWhseRqst@3(VAR ServiceHeader@1000 : Record "Service Header";WhseType@1002 : 'Inbound,Outbound');
    VAR
      ServiceLine2@1001 : Record "Service Line";
    BEGIN
      if ((WhseType = WhseType::Outbound) and
          (Location.RequireShipment(ServiceLine."Location Code") or
           Location.RequirePicking(ServiceLine."Location Code"))) or
         ((WhseType = WhseType::Inbound) and
          (Location.RequireReceive(ServiceLine."Location Code") or
           Location.RequirePutaway(ServiceLine."Location Code")))
      then begin
        ServiceLine2.COPY(ServiceLine);
        ServiceLine2.SETRANGE("Location Code",ServiceLine."Location Code");
        ServiceLine2.SETRANGE("Unit of Measure Code",'');
        if ServiceLine2.FINDFIRST then
          ServiceLine2.TESTFIELD("Unit of Measure Code");

        with WhseRqst do begin
          Type := WhseType;
          "Source Type" := DATABASE::"Service Line";
          "Source Subtype" := ServiceHeader."Document Type";
          "Source No." := ServiceHeader."No.";
          "Shipping Advice" := ServiceHeader."Shipping Advice";
          "Document Status" := ServiceHeader."Release Status"::"Released to Ship";
          "Location Code" := ServiceLine."Location Code";
          "Destination Type" := "Destination Type"::Customer;
          "Destination No." := ServiceHeader."Bill-to Customer No.";
          "External Document No." := '';
          "Shipment Date" := ServiceLine.GetShipmentDate;
          "Shipment Method Code" := ServiceHeader."Shipment Method Code";
          "Shipping Agent Code" := ServiceHeader."Shipping Agent Code";
          "Completely Handled" := CalcCompletelyShipped(ServiceLine);
          if not INSERT then
            MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE CalcCompletelyShipped@5(ServiceLine@1000 : Record "Service Line") : Boolean;
    VAR
      ServiceLineWithItem@1001 : Record "Service Line";
    BEGIN
      with ServiceLineWithItem do begin
        SETRANGE("Document Type",ServiceLine."Document Type");
        SETRANGE("Document No.",ServiceLine."Document No.");
        SETRANGE("Location Code",ServiceLine."Location Code");
        SETRANGE(Type,Type::Item);
        SETRANGE("Completely Shipped",false);
        exit(ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE SetWhseRqstFiltersByStatus@4(ServiceHeader@1002 : Record "Service Header";VAR WarehouseRequest@1001 : Record "Warehouse Request";Status@1000 : 'Open,"Released to Ship",,"Pending Approval","Pending Prepayment"');
    BEGIN
      with WarehouseRequest do begin
        RESET;
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE(Type,Type);
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",ServiceHeader."Document Type");
        SETRANGE("Source No.",ServiceHeader."No.");
        SETRANGE("Document Status",Status);
      end;
    END;

    BEGIN
    END.
  }
}

