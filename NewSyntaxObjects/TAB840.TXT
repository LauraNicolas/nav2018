OBJECT Table 840 Cash Flow Forecast
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Cash Flow Account Comment"=rimd,
                TableData "Cash Flow Forecast Entry"=rimd;
    OnInsert=BEGIN
               if "No." = '' then begin
                 CFSetup.GET;
                 CFSetup.TESTFIELD("Cash Flow Forecast No. Series");
                 NoSeriesMgt.InitSeries(CFSetup."Cash Flow Forecast No. Series",xRec."No. Series",0D,"No.","No. Series");
               end;

               "Creation Date" := WORKDATE;
               "Created By" := USERID;
               "Manual Payments From" := WORKDATE;
               "G/L Budget From" := WORKDATE;
             END;

    OnDelete=BEGIN
               if GetShowInChart then
                 CFSetup.SetChartRoleCenterCFNo('');

               CFAccountComment.RESET;
               CFAccountComment.SETRANGE("Table Name",CFAccountComment."Table Name"::"Cash Flow Forecast");
               CFAccountComment.SETRANGE("No.","No.");
               CFAccountComment.DELETEALL;

               CFForecastEntry.RESET;
               CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
               CFForecastEntry.SETRANGE("Cash Flow Forecast No.","No.");
               CFForecastEntry.DELETEALL;
             END;

    CaptionML=ENU=Cash Flow Forecast;
    LookupPageID="Cash Flow Forecast List";
    DrillDownPageID="Cash Flow Forecast List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=No. }
    { 2   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                if ("Search Name" = UPPERCASE(xRec.Description)) or ("Search Name" = '') then
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 5   ;   ;Consider Discount   ;Boolean       ;OnValidate=BEGIN
                                                                if not "Consider Discount" then
                                                                  "Consider Pmt. Disc. Tol. Date" := false;
                                                              END;

                                                   CaptionML=ENU=Consider Discount }
    { 6   ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 7   ;   ;Created By          ;Code50        ;CaptionML=ENU=Created By }
    { 8   ;   ;Manual Payments To  ;Date          ;CaptionML=ENU=Manual Payments To }
    { 9   ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cash Flow Account Comment" WHERE ("Table Name"=CONST("Cash Flow Forecast"),
                                                                                                        "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment }
    { 10  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 11  ;   ;Manual Payments From;Date          ;CaptionML=ENU=Manual Payments From }
    { 12  ;   ;G/L Budget From     ;Date          ;AccessByPermission=TableData "G/L Budget Name"=R;
                                                   CaptionML=ENU=G/L Budget From }
    { 13  ;   ;G/L Budget To       ;Date          ;AccessByPermission=TableData "G/L Budget Name"=R;
                                                   CaptionML=ENU=G/L Budget To }
    { 14  ;   ;Consider CF Payment Terms;Boolean  ;CaptionML=ENU=Consider CF Payment Terms }
    { 15  ;   ;Consider Pmt. Disc. Tol. Date;Boolean;
                                                   CaptionML=ENU=Consider Pmt. Disc. Tol. Date }
    { 16  ;   ;Consider Pmt. Tol. Amount;Boolean  ;CaptionML=ENU=Consider Pmt. Tol. Amount }
    { 17  ;   ;Account No. Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Account No. Filter }
    { 18  ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Type Filter;
                                                   OptionCaptionML=ENU=" ,Receivables,Payables,Liquid Funds,Cash Flow Manual Expense,Cash Flow Manual Revenue,Sales Order,Purchase Order,Fixed Assets Budget,Fixed Assets Disposal,Service Orders,G/L Budget,,,Job,Tax,Cortana Intelligence";
                                                   OptionString=" ",Receivables,Payables,"Liquid Funds","Cash Flow Manual Expense","Cash Flow Manual Revenue","Sales Order","Purchase Order","Fixed Assets Budget","Fixed Assets Disposal","Service Orders","G/L Budget",,,Job,Tax,"Cortana Intelligence" }
    { 19  ;   ;Cash Flow Date Filter;Date         ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Cash Flow Date Filter }
    { 20  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cash Flow Forecast Entry"."Amount (LCY)" WHERE ("Cash Flow Forecast No."=FIELD("No."),
                                                                                                                    "Cash Flow Date"=FIELD("Cash Flow Date Filter"),
                                                                                                                    "Source Type"=FIELD("Source Type Filter"),
                                                                                                                    "Cash Flow Account No."=FIELD("Account No. Filter"),
                                                                                                                    Positive=FIELD("Positive Filter")));
                                                   CaptionML=ENU=Amount (LCY) }
    { 21  ;   ;Positive Filter     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Positive Filter }
    { 22  ;   ;Overdue CF Dates to Work Date;Boolean;
                                                   CaptionML=ENU=Overdue CF Dates to Work Date }
    { 23  ;   ;Default G/L Budget Name;Code10     ;TableRelation="G/L Budget Name";
                                                   CaptionML=ENU=Default G/L Budget Name }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Description,"Description 2","Creation Date" }
  }
  CODE
  {
    VAR
      CFSetup@1000 : Record "Cash Flow Setup";
      CashFlowForecast@1001 : Record "Cash Flow Forecast";
      CFAccountComment@1002 : Record "Cash Flow Account Comment";
      CFForecastEntry@1003 : Record "Cash Flow Forecast Entry";
      NoSeriesMgt@1005 : Codeunit NoSeriesManagement;

    [External]
    PROCEDURE AssistEdit@2(OldCashFlowForecast@1000 : Record "Cash Flow Forecast") : Boolean;
    BEGIN
      with CashFlowForecast do begin
        CashFlowForecast := Rec;
        CFSetup.GET;
        CFSetup.TESTFIELD("Cash Flow Forecast No. Series");
        if NoSeriesMgt.SelectSeries(CFSetup."Cash Flow Forecast No. Series",OldCashFlowForecast."No. Series","No. Series") then begin
          CFSetup.GET;
          CFSetup.TESTFIELD("Cash Flow Forecast No. Series");
          NoSeriesMgt.SetSeries("No.");
          Rec := CashFlowForecast;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE DrillDown@17();
    VAR
      CFForecastEntry@1000 : Record "Cash Flow Forecast Entry";
    BEGIN
      CFForecastEntry.DrillDownOnEntries(Rec);
    END;

    [External]
    PROCEDURE CalcAmountForPosNeg@18(PositiveAmount@1000 : Boolean) : Decimal;
    BEGIN
      SETRANGE("Positive Filter",PositiveAmount);
      exit(CalcAmount);
    END;

    [External]
    PROCEDURE DrillDownPosNegEntries@16(PositiveAmount@1000 : Boolean);
    BEGIN
      SETRANGE("Positive Filter",PositiveAmount);
      DrillDown;
    END;

    [External]
    PROCEDURE CalcAmountForAccountNo@12(AccountNo@1000 : Code[20]) : Decimal;
    BEGIN
      SetAccountNoFilter(AccountNo);
      exit(CalcAmount);
    END;

    [External]
    PROCEDURE SetAccountNoFilter@13(AccountNo@1000 : Code[20]);
    BEGIN
      if AccountNo = '' then
        SETRANGE("Account No. Filter")
      else
        SETRANGE("Account No. Filter",AccountNo);
    END;

    [External]
    PROCEDURE DrillDownEntriesForAccNo@15(AccountNo@1000 : Code[20]);
    BEGIN
      SetAccountNoFilter(AccountNo);
      DrillDown;
    END;

    [External]
    PROCEDURE CalcAmountFromSource@4(SourceType@1001 : Option) : Decimal;
    BEGIN
      SetSourceTypeFilter(SourceType);
      exit(CalcAmount);
    END;

    [External]
    PROCEDURE SetSourceTypeFilter@7(SourceType@1000 : Option);
    BEGIN
      if SourceType = 0 then
        SETRANGE("Source Type Filter")
      else
        SETRANGE("Source Type Filter",SourceType);
    END;

    [External]
    PROCEDURE DrillDownEntriesFromSource@5(SourceType@1000 : Option);
    BEGIN
      SetSourceTypeFilter(SourceType);
      DrillDown;
    END;

    [External]
    PROCEDURE CalcAmount@14() : Decimal;
    BEGIN
      CALCFIELDS("Amount (LCY)");
      exit("Amount (LCY)");
    END;

    [External]
    PROCEDURE SetCashFlowDateFilter@6(FromDate@1000 : Date;ToDate@1001 : Date);
    BEGIN
      if (FromDate = 0D) and (ToDate = 0D) then
        SETRANGE("Cash Flow Date Filter")
      else
        if ToDate = 0D then
          SETFILTER("Cash Flow Date Filter",'%1..',FromDate)
        else
          SETRANGE("Cash Flow Date Filter",FromDate,ToDate);
    END;

    [External]
    PROCEDURE PrintRecords@1();
    VAR
      CashFlowForecast@1001 : Record "Cash Flow Forecast";
      CFReportSelection@1002 : Record "Cash Flow Report Selection";
    BEGIN
      with CashFlowForecast do begin
        COPY(Rec);
        CFReportSelection.SETFILTER("Report ID",'<>0');
        if CFReportSelection.FINDSET then
          repeat
            REPORT.RUNMODAL(CFReportSelection."Report ID",true,false,CashFlowForecast);
          until CFReportSelection.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE LookupCashFlowFilter@9(VAR Text@1000 : Text) : Boolean;
    VAR
      CashFlowForecastList@1002 : Page "Cash Flow Forecast List";
    BEGIN
      CashFlowForecastList.LOOKUPMODE(true);
      if CashFlowForecastList.RUNMODAL = ACTION::LookupOK then begin
        Text := CashFlowForecastList.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    [External]
    PROCEDURE CalculateAllAmounts@3(FromDate@1003 : Date;ToDate@1002 : Date;VAR Amounts@1010 : ARRAY [14] OF Decimal;VAR TotalAmount@1001 : Decimal);
    VAR
      SourceType@1000 : Option;
    BEGIN
      CLEAR(Amounts);
      SetCashFlowDateFilter(FromDate,ToDate);
      for SourceType := 1 to ARRAYLEN(Amounts) do
        Amounts[SourceType] := CalcAmountFromSource(SourceType);
      TotalAmount := CalcAmountFromSource(0);
    END;

    [External]
    PROCEDURE ValidateShowInChart@8(ShowInChart@1000 : Boolean) : Boolean;
    VAR
      NewCashFlowNo@1003 : Code[20];
    BEGIN
      if ShowInChart then
        NewCashFlowNo := "No."
      else
        NewCashFlowNo := '';

      CFSetup.GET;
      CFSetup.VALIDATE("CF No. on Chart in Role Center",NewCashFlowNo);
      CFSetup.MODIFY;
      exit(GetShowInChart);
    END;

    [External]
    PROCEDURE GetShowInChart@10() : Boolean;
    VAR
      ChartRoleCenterCFNo@1000 : Code[20];
    BEGIN
      ChartRoleCenterCFNo := CFSetup.GetChartRoleCenterCFNo;
      if ChartRoleCenterCFNo = '' then
        exit(false);

      exit("No." = ChartRoleCenterCFNo);
    END;

    [External]
    PROCEDURE GetEntryDate@11(Which@1001 : 'First,Last') : Date;
    VAR
      CFForecastEntry@1000 : Record "Cash Flow Forecast Entry";
    BEGIN
      CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.","Cash Flow Date");
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.","No.");
      case Which of
        Which::First:
          if not CFForecastEntry.FINDFIRST then
            exit(0D);
        Which::Last:
          if not CFForecastEntry.FINDLAST then
            exit(0D);
      end;
      exit(CFForecastEntry."Cash Flow Date");
    END;

    BEGIN
    END.
  }
}

