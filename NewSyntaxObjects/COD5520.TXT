OBJECT Codeunit 5520 Get Unplanned Demand
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Unplanned Demand";
    OnRun=BEGIN
            DELETEALL;
            SalesLine.SETFILTER("Document Type",'%1|%2',SalesLine."Document Type"::Order,SalesLine."Document Type"::"Return Order");
            ProdOrderComp.SETFILTER(
              Status,'%1|%2|%3',ProdOrderComp.Status::Planned,ProdOrderComp.Status::"Firm Planned",ProdOrderComp.Status::Released);
            ServLine.SETRANGE("Document Type",ServLine."Document Type"::Order);
            AsmLine.SETRANGE("Document Type",AsmLine."Document Type"::Order);
            JobPlanningLine.SETRANGE(Status,JobPlanningLine.Status::Order);

            OpenWindow(Text000,SalesLine.COUNT + ProdOrderComp.COUNT + ServLine.COUNT + JobPlanningLine.COUNT);
            GetUnplannedSalesLine(Rec);
            GetUnplannedProdOrderComp(Rec);
            GetUnplannedAsmLine(Rec);
            GetUnplannedServLine(Rec);
            GetUnplannedJobPlanningLine(Rec);
            Window.CLOSE;

            RESET;
            SETCURRENTKEY("Demand Date",Level);
            SETRANGE(Level,1);
            OpenWindow(Text000,COUNT);
            CalcNeededDemands(Rec);
            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      SalesLine@1000 : Record "Sales Line";
      ProdOrderComp@1002 : Record "Prod. Order Component";
      Text000@1004 : TextConst 'ENU=Determining Unplanned Orders @1@@@@@@@';
      ServLine@1007 : Record "Service Line";
      JobPlanningLine@1006 : Record "Job Planning Line";
      AsmLine@1010 : Record "Assembly Line";
      Window@1009 : Dialog;
      WindowUpdateDateTime@1008 : DateTime;
      NoOfRecords@1005 : Integer;
      i@1003 : Integer;
      DemandQtyBase@1001 : Decimal;
      IncludeMetDemandForSpecificSalesOrderNo@1011 : Code[20];

    [External]
    PROCEDURE SetIncludeMetDemandForSpecificSalesOrderNo@8(SalesOrderNo@1000 : Code[20]);
    BEGIN
      IncludeMetDemandForSpecificSalesOrderNo := SalesOrderNo;
    END;

    LOCAL PROCEDURE GetUnplannedSalesLine@5(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      with UnplannedDemand do
        if SalesLine.FIND('-') then
          repeat
            UpdateWindow;
            DemandQtyBase := GetSalesLineNeededQty(SalesLine);
            if DemandQtyBase > 0 then begin
              if not ((SalesLine."Document Type" = "Demand SubType") and
                      (SalesLine."Document No." = "Demand Order No."))
              then begin
                SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
                InsertUnplannedDemand(
                  UnplannedDemand,"Demand Type"::Sales,SalesLine."Document Type",SalesLine."Document No.",SalesHeader.Status);
              end;
              InsertSalesLine(UnplannedDemand);
            end;
          until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUnplannedProdOrderComp@6(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    BEGIN
      with UnplannedDemand do
        if ProdOrderComp.FIND('-') then
          repeat
            UpdateWindow;
            DemandQtyBase := GetProdOrderCompNeededQty(ProdOrderComp);
            if DemandQtyBase > 0 then begin
              if not ((ProdOrderComp.Status = "Demand SubType") and
                      (ProdOrderComp."Prod. Order No." = "Demand Order No."))
              then
                InsertUnplannedDemand(
                  UnplannedDemand,"Demand Type"::Production,ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp.Status);
              InsertProdOrderCompLine(UnplannedDemand);
            end;
          until ProdOrderComp.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUnplannedAsmLine@14(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      with UnplannedDemand do
        if AsmLine.FIND('-') then
          repeat
            UpdateWindow;
            DemandQtyBase := GetAsmLineNeededQty(AsmLine);
            if DemandQtyBase > 0 then begin
              if not ((AsmLine."Document Type" = "Demand SubType") and
                      (AsmLine."Document No." = "Demand Order No."))
              then begin
                AsmHeader.GET(AsmLine."Document Type",AsmLine."Document No.");
                InsertUnplannedDemand(
                  UnplannedDemand,"Demand Type"::Assembly,AsmLine."Document Type",AsmLine."Document No.",AsmHeader.Status);
              end;
              InsertAsmLine(UnplannedDemand);
            end;
          until AsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUnplannedServLine@17(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      ServHeader@1001 : Record "Service Header";
    BEGIN
      with UnplannedDemand do
        if ServLine.FIND('-') then
          repeat
            UpdateWindow;
            DemandQtyBase := GetServLineNeededQty(ServLine);
            if DemandQtyBase > 0 then begin
              if not ((ServLine."Document Type" = "Demand SubType") and
                      (ServLine."Document No." = "Demand Order No."))
              then begin
                ServHeader.GET(ServLine."Document Type",ServLine."Document No.");
                InsertUnplannedDemand(
                  UnplannedDemand,"Demand Type"::Service,ServLine."Document Type",ServLine."Document No.",ServHeader.Status);
              end;
              InsertServLine(UnplannedDemand);
            end;
          until ServLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUnplannedJobPlanningLine@19(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      Job@1001 : Record Job;
    BEGIN
      with UnplannedDemand do
        if JobPlanningLine.FIND('-') then
          repeat
            UpdateWindow;
            DemandQtyBase := GetJobPlanningLineNeededQty(JobPlanningLine);
            if DemandQtyBase > 0 then begin
              if not ((JobPlanningLine.Status = "Demand SubType") and
                      (JobPlanningLine."Job No." = "Demand Order No."))
              then begin
                Job.GET(JobPlanningLine."Job No.");
                InsertUnplannedDemand(
                  UnplannedDemand,"Demand Type"::Job,JobPlanningLine.Status,JobPlanningLine."Job No.",Job.Status);
              end;
              InsertJobPlanningLine(UnplannedDemand);
            end;
          until JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSalesLineNeededQty@1(SalesLine@1000 : Record "Sales Line") : Decimal;
    BEGIN
      with SalesLine do begin
        if Planned or ("No." = '') or (Type <> Type::Item) or "Drop Shipment" or "Special Order" or IsServiceItem then
          exit(0);

        CALCFIELDS("Reserved Qty. (Base)");
        exit(-SignedXX("Outstanding Qty. (Base)" - "Reserved Qty. (Base)"));
      end;
    END;

    LOCAL PROCEDURE GetProdOrderCompNeededQty@2(ProdOrderComp@1000 : Record "Prod. Order Component") : Decimal;
    BEGIN
      with ProdOrderComp do begin
        if "Item No." = '' then
          exit(0);

        CALCFIELDS("Reserved Qty. (Base)");
        exit("Remaining Qty. (Base)" - "Reserved Qty. (Base)");
      end;
    END;

    LOCAL PROCEDURE GetAsmLineNeededQty@15(AsmLine@1000 : Record "Assembly Line") : Decimal;
    BEGIN
      with AsmLine do begin
        if ("No." = '') or (Type <> Type::Item) then
          exit(0);

        CALCFIELDS("Reserved Qty. (Base)");
        exit(-SignedXX("Remaining Quantity (Base)" - "Reserved Qty. (Base)"));
      end;
    END;

    LOCAL PROCEDURE GetServLineNeededQty@21(ServLine@1000 : Record "Service Line") : Decimal;
    BEGIN
      with ServLine do begin
        if Planned or ("No." = '') or (Type <> Type::Item) then
          exit(0);

        CALCFIELDS("Reserved Qty. (Base)");
        exit(-SignedXX("Outstanding Qty. (Base)" - "Reserved Qty. (Base)"));
      end;
    END;

    LOCAL PROCEDURE GetJobPlanningLineNeededQty@22(JobPlanningLine@1000 : Record "Job Planning Line") : Decimal;
    BEGIN
      with JobPlanningLine do begin
        if Planned or ("No." = '') or (Type <> Type::Item) then
          exit(0);

        CALCFIELDS("Reserved Qty. (Base)");
        exit("Remaining Qty. (Base)" - "Reserved Qty. (Base)");
      end;
    END;

    LOCAL PROCEDURE InsertSalesLine@4(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1001 : Record "Unplanned Demand";
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        InitRecord(
          SalesLine."Line No.",0,SalesLine."No.",SalesLine.Description,SalesLine."Variant Code",SalesLine."Location Code",
          SalesLine."Bin Code",SalesLine."Unit of Measure Code",SalesLine."Qty. per Unit of Measure",
          DemandQtyBase,SalesLine."Shipment Date");
        Reserve := SalesLine.Reserve = SalesLine.Reserve::Always;
        "Special Order" := SalesLine."Special Order";
        "Purchasing Code" := SalesLine."Purchasing Code";
        INSERT;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE InsertProdOrderCompLine@7(VAR UnplannedDemand@1001 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1000 : Record "Unplanned Demand";
      Item@1002 : Record Item;
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        InitRecord(
          ProdOrderComp."Prod. Order Line No.",ProdOrderComp."Line No.",ProdOrderComp."Item No.",ProdOrderComp.Description,
          ProdOrderComp."Variant Code",ProdOrderComp."Location Code",ProdOrderComp."Bin Code",ProdOrderComp."Unit of Measure Code",
          ProdOrderComp."Qty. per Unit of Measure",DemandQtyBase,ProdOrderComp."Due Date");
        Item.GET("Item No.");
        Reserve :=
          (Item.Reserve = Item.Reserve::Always) and
          not (("Demand Type" = "Demand Type"::Production) and
               ("Demand SubType" = ProdOrderComp.Status::Planned));
        INSERT;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE InsertAsmLine@13(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1001 : Record "Unplanned Demand";
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        InitRecord(
          AsmLine."Line No.",0,AsmLine."No.",AsmLine.Description,AsmLine."Variant Code",AsmLine."Location Code",
          AsmLine."Bin Code",AsmLine."Unit of Measure Code",AsmLine."Qty. per Unit of Measure",
          DemandQtyBase,AsmLine."Due Date");
        Reserve := AsmLine.Reserve = AsmLine.Reserve::Always;
        INSERT;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE InsertServLine@23(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1001 : Record "Unplanned Demand";
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        InitRecord(
          ServLine."Line No.",0,ServLine."No.",ServLine.Description,ServLine."Variant Code",ServLine."Location Code",
          ServLine."Bin Code",ServLine."Unit of Measure Code",ServLine."Qty. per Unit of Measure",
          DemandQtyBase,ServLine."Needed by Date");
        Reserve := ServLine.Reserve = ServLine.Reserve::Always;
        INSERT;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE InsertJobPlanningLine@24(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1001 : Record "Unplanned Demand";
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        InitRecord(
          JobPlanningLine."Job Contract Entry No.",0,JobPlanningLine."No.",JobPlanningLine.Description,JobPlanningLine."Variant Code",
          JobPlanningLine."Location Code",JobPlanningLine."Bin Code",JobPlanningLine."Unit of Measure Code",
          JobPlanningLine."Qty. per Unit of Measure",DemandQtyBase,JobPlanningLine."Planning Date");
        Reserve := JobPlanningLine.Reserve = JobPlanningLine.Reserve::Always;
        INSERT;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE InsertUnplannedDemand@20(VAR UnplannedDemand@1000 : Record "Unplanned Demand";DemandType@1001 : Integer;DemandSubtype@1002 : Integer;DemandOrderNo@1003 : Code[20];DemandStatus@1004 : Integer);
    BEGIN
      with UnplannedDemand do begin
        INIT;
        "Demand Type" := DemandType;
        "Demand SubType" := DemandSubtype;
        VALIDATE("Demand Order No.",DemandOrderNo);
        Status := DemandStatus;
        Level := 0;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CalcNeededDemands@10(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      TempUnplannedDemand@1004 : TEMPORARY Record "Unplanned Demand";
      OrderPlanningMgt@1002 : Codeunit "Order Planning Mgt.";
      HeaderExists@1005 : Boolean;
      ForceIncludeDemand@1001 : Boolean;
    BEGIN
      with TempUnplannedDemand do begin
        UnplannedDemand.RESET;
        MoveUnplannedDemand(UnplannedDemand,TempUnplannedDemand);

        SETCURRENTKEY("Demand Date",Level);
        SETRANGE(Level,1);
        while FIND('-') do begin
          HeaderExists := false;
          repeat
            UpdateWindow;
            UnplannedDemand := TempUnplannedDemand;
            if UnplannedDemand."Special Order" then
              UnplannedDemand."Needed Qty. (Base)" := "Quantity (Base)"
            else
              UnplannedDemand."Needed Qty. (Base)" :=
                OrderPlanningMgt.CalcNeededQty(
                  OrderPlanningMgt.CalcATPQty("Item No.","Variant Code","Location Code","Demand Date") +
                  CalcDemand(TempUnplannedDemand,false) + CalcDemand(UnplannedDemand,true),
                  "Quantity (Base)");

            ForceIncludeDemand :=
              (UnplannedDemand."Demand Order No." = IncludeMetDemandForSpecificSalesOrderNo) and
              (UnplannedDemand."Demand Type" = UnplannedDemand."Demand Type"::Sales) and
              (UnplannedDemand."Demand SubType" = SalesLine."Document Type"::Order);

            if ForceIncludeDemand or (UnplannedDemand."Needed Qty. (Base)" > 0) then begin
              UnplannedDemand.INSERT;
              if not HeaderExists then begin
                InsertUnplannedDemandHeader(TempUnplannedDemand,UnplannedDemand);
                HeaderExists := true;
                SETRANGE("Demand Type","Demand Type");
                SETRANGE("Demand SubType","Demand SubType");
                SETRANGE("Demand Order No.","Demand Order No.");
              end;
            end;
            DELETE;
          until NEXT = 0;
          SETRANGE("Demand Type");
          SETRANGE("Demand SubType");
          SETRANGE("Demand Order No.");
        end;
      end;
    END;

    LOCAL PROCEDURE CalcDemand@9(VAR UnplannedDemand@1000 : Record "Unplanned Demand";Planned@1001 : Boolean) DemandQty : Decimal;
    VAR
      UnplannedDemand2@1002 : Record "Unplanned Demand";
    BEGIN
      with UnplannedDemand do begin
        UnplannedDemand2.COPY(UnplannedDemand);
        RESET;
        SETCURRENTKEY("Item No.","Variant Code","Location Code","Demand Date");
        SETRANGE("Item No.","Item No.");
        SETRANGE("Variant Code","Variant Code");
        SETRANGE("Location Code","Location Code");
        if Planned then begin
          SETRANGE("Demand Date",0D,"Demand Date");
          CALCSUMS("Needed Qty. (Base)");
          DemandQty := "Needed Qty. (Base)";
        end else begin
          SETRANGE("Demand Date","Demand Date");
          CALCSUMS("Quantity (Base)");
          DemandQty := "Quantity (Base)";
        end;
        COPY(UnplannedDemand2);
      end;
    END;

    LOCAL PROCEDURE MoveUnplannedDemand@11(VAR FromUnplannedDemand@1000 : Record "Unplanned Demand";VAR ToUnplannedDemand@1001 : Record "Unplanned Demand");
    BEGIN
      with FromUnplannedDemand do begin
        ToUnplannedDemand.DELETEALL;
        if FIND('-') then
          repeat
            ToUnplannedDemand := FromUnplannedDemand;
            ToUnplannedDemand.INSERT;
            DELETE;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertUnplannedDemandHeader@18(VAR FromUnplannedDemand@1001 : Record "Unplanned Demand";VAR ToUnplannedDemand@1000 : Record "Unplanned Demand");
    VAR
      UnplannedDemand2@1002 : Record "Unplanned Demand";
    BEGIN
      UnplannedDemand2.COPY(FromUnplannedDemand);

      with FromUnplannedDemand do begin
        RESET;
        SETRANGE("Demand Type","Demand Type");
        SETRANGE("Demand SubType","Demand SubType");
        SETRANGE("Demand Order No.","Demand Order No.");
        SETRANGE(Level,0);
        FIND('-');
        ToUnplannedDemand := FromUnplannedDemand;
        ToUnplannedDemand."Demand Date" := UnplannedDemand2."Demand Date";
        ToUnplannedDemand.INSERT;
      end;

      FromUnplannedDemand.COPY(UnplannedDemand2);
    END;

    LOCAL PROCEDURE OpenWindow@12(DisplayText@1001 : Text[250];NoOfRecords2@1000 : Integer);
    BEGIN
      i := 0;
      NoOfRecords := NoOfRecords2;
      WindowUpdateDateTime := CURRENTDATETIME;
      Window.OPEN(DisplayText);
    END;

    LOCAL PROCEDURE UpdateWindow@3();
    BEGIN
      i := i + 1;
      if CURRENTDATETIME - WindowUpdateDateTime >= 300 then begin
        WindowUpdateDateTime := CURRENTDATETIME;
        Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
      end;
    END;

    BEGIN
    END.
  }
}

