OBJECT Page 1328 Purch. Order From Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Purchase Orders;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="Requisition Line";
    PageType=Worksheet;
    PromotedActionCategoriesML=ENU=New,Process,Report,Item Availability;
    OnOpenPage=BEGIN
                 PlanForOrder;
               END;

    OnAfterGetRecord=VAR
                       Vendor@1000 : Record Vendor;
                     BEGIN
                       if Vendor.GET("Supply From") then
                         VendorName := Vendor.Name
                       else
                         VendorName := '';
                     END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::LookupOK then
                         ValidateSupplyFromVendor;
                     END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      Name=ActionContainer3;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;ActionGroup;
                      Name=Set View;
                      CaptionML=ENU=Set View }
      { 8       ;2   ;Action    ;
                      Name=ShowAll;
                      CaptionML=ENU=Show All;
                      ToolTipML=ENU=Show lines both for items that are fully available and for items where a sales quantity is unavailable and must be purchased.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled=ShowAllDocsIsEnable;
                      PromotedIsBig=true;
                      Image=AllLines;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 SetProcessedDocumentsVisibility(true);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=ShowUnavailable;
                      CaptionML=ENU=Show Unavailable;
                      ToolTipML=ENU=Show lines only for items where a sales quantity is unavailable and must be purchased.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled=NOT ShowAllDocsIsEnable;
                      PromotedIsBig=true;
                      Image=Document;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 SetProcessedDocumentsVisibility(false);
                               END;
                                }
      { 19      ;0   ;ActionContainer;
                      Name=ActionContainer19;
                      ActionContainerType=RelatedInformation }
      { 18      ;1   ;ActionGroup;
                      Name=Item Availability by;
                      CaptionML=ENU=Item Availability by;
                      Image=ItemAvailability }
      { 17      ;2   ;Action    ;
                      Name=Event;
                      CaptionML=ENU=Event;
                      ToolTipML=ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=Event;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByEvent)
                               END;
                                }
      { 16      ;2   ;Action    ;
                      Name=Period;
                      CaptionML=ENU=Period;
                      ToolTipML=ENU=Show the projected quantity of the item over time according to time periods, such as day, week, or month.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Image=Period;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByPeriod)
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=Variant;
                      CaptionML=ENU=Variant;
                      ToolTipML=ENU=View or edit the item's variants. Instead of setting up each color of an item as a separate item, you can set up the various colors as variants of the item.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Image=ItemVariant;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByVariant)
                               END;
                                }
      { 14      ;2   ;Action    ;
                      Name=Location;
                      AccessByPermission=TableData Location=R;
                      CaptionML=ENU=Location;
                      ToolTipML=ENU=View the actual and projected quantity of the item per location.;
                      ApplicationArea=#Location;
                      Promoted=true;
                      Image=Warehouse;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByLocation)
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=BOM Level;
                      CaptionML=ENU=BOM Level;
                      ToolTipML=ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                      ApplicationArea=#Assembly;
                      Promoted=true;
                      Image=BOMLevel;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByBOM)
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=Timeline;
                      CaptionML=ENU=Timeline;
                      ToolTipML=ENU=Get a graphical view of an item's projected inventory based on future supply and demand events, with or without planning suggestions. The result is a graphical representation of the inventory profile.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Image=Timeline;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ShowTimeline(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 5   ;2   ;Field     ;
                Name=No.;
                ToolTipML=ENU=Specifies the number of the related sales order line.;
                ApplicationArea=#Suite;
                SourceExpr="No.";
                Editable=FALSE;
                Style=Subordinate;
                StyleExpr=Quantity = 0;
                ImplicitType=Code20 }

    { 6   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the purchase order.;
                ApplicationArea=#Suite;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Subordinate;
                StyleExpr=Quantity = 0;
                ImplicitType=Text50 }

    { 10  ;2   ;Field     ;
                Name=Demand Quantity;
                CaptionML=ENU=Sales Order Quantity;
                ToolTipML=ENU=Specifies the sales order quantity relating to the purchase order line item.;
                ApplicationArea=#Suite;
                SourceExpr="Demand Quantity";
                Style=Subordinate;
                StyleExpr=Quantity = 0;
                ImplicitType=Decimal }

    { 9   ;2   ;Field     ;
                Name=Vendor;
                CaptionML=ENU=Vendor;
                ToolTipML=ENU=Specifies the vendor who will ship the items in the purchase order.;
                ApplicationArea=#Suite;
                SourceExpr=VendorName;
                Style=Subordinate;
                StyleExpr=Quantity = 0;
                OnValidate=VAR
                             Vendor@1000 : Record Vendor;
                           BEGIN
                             TESTFIELD("Replenishment System","Replenishment System"::Purchase);
                             VALIDATE("Supply From",Vendor.GetVendorNo(VendorName));
                             if Vendor.GET("Supply From") then
                               VendorName := Vendor.Name
                             else
                               VendorName := "Supply From";
                           END;

                OnLookup=VAR
                           Vendor@1000 : Record Vendor;
                         BEGIN
                           TESTFIELD("Replenishment System","Replenishment System"::Purchase);
                           if not LookupVendor(Vendor,false) then
                             exit;

                           VALIDATE("Supply From",Vendor."No.");
                           VendorName := Vendor.Name;
                         END;

                ImplicitType=Text50;
                ShowMandatory=TRUE }

    { 4   ;2   ;Field     ;
                Name=Quantity;
                CaptionML=ENU=Quantity to Purchase;
                ToolTipML=ENU=Specifies the quantity to be purchased.;
                ApplicationArea=#Suite;
                SourceExpr=Quantity;
                Style=Strong;
                ImplicitType=Decimal }

  }
  CODE
  {
    VAR
      ItemAvailFormsMgt@1003 : Codeunit "Item Availability Forms Mgt";
      OrderNo@1001 : Code[20];
      EntireOrderIsAvailableTxt@1002 : TextConst 'ENU=All items on the sales order are available.';
      ShowAllDocsIsEnable@1000 : Boolean;
      VendorName@1004 : Text[50];
      CannotCreatePurchaseOrderWithoutVendorErr@1005 : TextConst 'ENU=You cannot create purchase orders without specifying a vendor for all lines.';

    PROCEDURE SetSalesOrderNo@2(SalesOrderNo@1000 : Code[20]);
    BEGIN
      OrderNo := SalesOrderNo;
    END;

    LOCAL PROCEDURE PlanForOrder@3();
    VAR
      OrderPlanningMgt@1000 : Codeunit "Order Planning Mgt.";
      AllItemsAreAvailableNotification@1001 : Notification;
    BEGIN
      OrderPlanningMgt.PlanSpecificSalesOrder(Rec,OrderNo);
      SETRANGE(Level,1);

      SETFILTER("Replenishment System",'<>%1',"Replenishment System"::Purchase);
      if FINDSET then
        repeat
          VALIDATE("Replenishment System","Replenishment System"::Purchase);
          MODIFY(true);
        until NEXT = 0;
      SETRANGE("Replenishment System");

      SETFILTER(Quantity,'>%1',0);
      if ISEMPTY then begin
        AllItemsAreAvailableNotification.MESSAGE := EntireOrderIsAvailableTxt;
        AllItemsAreAvailableNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
        AllItemsAreAvailableNotification.SEND;
      end;
      SETRANGE(Quantity);
    END;

    LOCAL PROCEDURE SetProcessedDocumentsVisibility@1(ShowAll@1000 : Boolean);
    BEGIN
      FILTERGROUP(0);
      if ShowAll then begin
        SETRANGE("Needed Quantity");
        ShowAllDocsIsEnable := false;
      end else begin
        SETFILTER("Needed Quantity",'>%1',0);
        ShowAllDocsIsEnable := true;
      end;
    END;

    LOCAL PROCEDURE ValidateSupplyFromVendor@4();
    VAR
      RecordsWithoutSupplyFromVendor@1000 : Boolean;
    BEGIN
      SETRANGE("Supply From",'');
      SETFILTER(Quantity,'>%1',0);
      RecordsWithoutSupplyFromVendor := not ISEMPTY;
      SETRANGE("Supply From");
      SETRANGE(Quantity);
      if RecordsWithoutSupplyFromVendor then
        ERROR(CannotCreatePurchaseOrderWithoutVendorErr);
    END;

    BEGIN
    END.
  }
}

