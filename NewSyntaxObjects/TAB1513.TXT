OBJECT Table 1513 Notification Schedule
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnModify=VAR
               JobQueueEntry@1000 : Record "Job Queue Entry";
             BEGIN
               if JobQueueEntry.GET("Last Scheduled Job") then begin
                 JobQueueEntry.DELETE(true);
                 Schedule;
               end;
             END;

    OnDelete=VAR
               JobQueueEntry@1000 : Record "Job Queue Entry";
             BEGIN
               if JobQueueEntry.GET("Last Scheduled Job") then begin
                 JobQueueEntry.DELETE(true);
                 ScheduleNow;
               end;
             END;

    CaptionML=ENU=Notification Schedule;
    LookupPageID="Notification Schedule";
    DrillDownPageID="Notification Schedule";
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=User ID }
    { 2   ;   ;Notification Type   ;Option        ;CaptionML=ENU=Notification Type;
                                                   OptionCaptionML=ENU=New Record,Approval,Overdue;
                                                   OptionString="New Record",Approval,Overdue }
    { 3   ;   ;Recurrence          ;Option        ;InitValue=Instantly;
                                                   CaptionML=ENU=Recurrence;
                                                   OptionCaptionML=ENU=Instantly,Daily,Weekly,Monthly;
                                                   OptionString=Instantly,Daily,Weekly,Monthly }
    { 4   ;   ;Time                ;Time          ;InitValue=120000T;
                                                   CaptionML=ENU=Time }
    { 5   ;   ;Daily Frequency     ;Option        ;InitValue=Weekday;
                                                   OnValidate=BEGIN
                                                                UpdateDailyFrequency;
                                                              END;

                                                   CaptionML=ENU=Daily Frequency;
                                                   OptionCaptionML=ENU=Weekday,Daily;
                                                   OptionString=Weekday,Daily }
    { 6   ;   ;Monday              ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Monday }
    { 7   ;   ;Tuesday             ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Tuesday }
    { 8   ;   ;Wednesday           ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Wednesday }
    { 9   ;   ;Thursday            ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Thursday }
    { 10  ;   ;Friday              ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Friday }
    { 11  ;   ;Saturday            ;Boolean       ;CaptionML=ENU=Saturday }
    { 12  ;   ;Sunday              ;Boolean       ;CaptionML=ENU=Sunday }
    { 13  ;   ;Date of Month       ;Integer       ;CaptionML=ENU=Date of Month;
                                                   MinValue=1;
                                                   MaxValue=31 }
    { 14  ;   ;Monthly Notification Date;Option   ;CaptionML=ENU=Monthly Notification Date;
                                                   OptionCaptionML=ENU=First Workday,Last Workday,Custom;
                                                   OptionString="First Workday","Last Workday",Custom }
    { 15  ;   ;Last Scheduled Job  ;GUID          ;TableRelation="Job Queue Entry";
                                                   CaptionML=ENU=Last Scheduled Job }
  }
  KEYS
  {
    {    ;"User ID","Notification Type"           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NotifyNowDescriptionTxt@1000 : TextConst 'ENU=Instant Notification Job';

    [External]
    PROCEDURE NewRecord@4(NewUserID@1000 : Code[50];NewNotificationType@1001 : Option);
    BEGIN
      INIT;
      "User ID" := NewUserID;
      "Notification Type" := NewNotificationType;

      INSERT;
    END;

    LOCAL PROCEDURE UpdateDailyFrequency@8();
    BEGIN
      Monday := true;
      Tuesday := true;
      Wednesday := true;
      Thursday := true;
      Friday := true;
      Saturday := "Daily Frequency" <> "Daily Frequency"::Weekday;
      Sunday := "Daily Frequency" <> "Daily Frequency"::Weekday;
    END;

    LOCAL PROCEDURE GetFirstWorkdateOfMonth@9(CurrentDate@1000 : Date) : Date;
    VAR
      Day@1002 : ',Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday';
    BEGIN
      if DATE2DWY(CALCDATE('<-CM>',CurrentDate),1) in [Day::Saturday,Day::Sunday] then
        exit(CALCDATE('<-CM+WD1>',CurrentDate));

      exit(CALCDATE('<-CM>',CurrentDate))
    END;

    LOCAL PROCEDURE GetScheduledFirstWorkdateOfMonth@2(CurrentDateTime@1000 : DateTime;ScheduledTime@1001 : Time) ScheduledDateTime : DateTime;
    VAR
      CurrentDate@1002 : Date;
    BEGIN
      CurrentDate := DT2DATE(CurrentDateTime);
      ScheduledDateTime := CREATEDATETIME(GetFirstWorkdateOfMonth(CurrentDate),ScheduledTime);

      if ScheduledDateTime < CurrentDateTime then
        ScheduledDateTime := CREATEDATETIME(GetFirstWorkdateOfMonth(CALCDATE('<+1M>',CurrentDate)),ScheduledTime);
    END;

    LOCAL PROCEDURE GetLastWorkdateOfMonth@5(CurrentDate@1000 : Date) : Date;
    VAR
      Day@1002 : ',Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday';
    BEGIN
      if DATE2DWY(CALCDATE('<+CM>',CurrentDate),1) in [Day::Saturday,Day::Sunday] then
        exit(CALCDATE('<+CM-WD5>',CurrentDate));

      exit(CALCDATE('<+CM>',CurrentDate))
    END;

    LOCAL PROCEDURE GetScheduledLastWorkdateOfMonth@26(CurrentDateTime@1000 : DateTime;ScheduledTime@1001 : Time) ScheduledDateTime : DateTime;
    VAR
      CurrentDate@1002 : Date;
    BEGIN
      CurrentDate := DT2DATE(CurrentDateTime);
      ScheduledDateTime := CREATEDATETIME(GetLastWorkdateOfMonth(CurrentDate),ScheduledTime);

      if ScheduledDateTime < CurrentDateTime then
        ScheduledDateTime := CREATEDATETIME(GetLastWorkdateOfMonth(CALCDATE('<+1M>',CurrentDate)),ScheduledTime);
    END;

    LOCAL PROCEDURE GetLastDateOfMonth@41(CurrentDate@1000 : Date) : Date;
    BEGIN
      exit(CALCDATE('<+CM>',CurrentDate))
    END;

    LOCAL PROCEDURE GetScheduledCustomWorkdateOfMonth@43(CurrentDateTime@1000 : DateTime;ScheduledTime@1001 : Time;ScheduledDay@1004 : Integer) : DateTime;
    VAR
      CurrentDate@1002 : Date;
      CurrentTime@1003 : Time;
      CurrentDay@1005 : Integer;
      CurrentMonth@1006 : Integer;
      CurrentYear@1007 : Integer;
    BEGIN
      CurrentDate := DT2DATE(CurrentDateTime);
      CurrentTime := DT2TIME(CurrentDateTime);
      CurrentDay := DATE2DMY(CurrentDate,1);
      CurrentMonth := DATE2DMY(CurrentDate,2);
      CurrentYear := DATE2DMY(CurrentDate,3);

      if (ScheduledDay = CurrentDay) and (CurrentTime < ScheduledTime) then
        exit(CREATEDATETIME(DMY2DATE(ScheduledDay,CurrentMonth,CurrentYear),ScheduledTime));

      if ScheduledDay <= CurrentDay then begin
        CurrentDate := CALCDATE('<+1M>',CurrentDate);
        CurrentMonth := DATE2DMY(CurrentDate,2);
        CurrentYear := DATE2DMY(CurrentDate,3);
      end;

      CurrentDate := GetLastDateOfMonth(CurrentDate);
      if ScheduledDay > DATE2DMY(CurrentDate,1) then
        exit(CREATEDATETIME(CurrentDate,ScheduledTime));
      exit(CREATEDATETIME(DMY2DATE(ScheduledDay,CurrentMonth,CurrentYear),ScheduledTime))
    END;

    LOCAL PROCEDURE GetScheduledWeekDay@31(CurrentDateTime@1000 : DateTime;ScheduledTime@1001 : Time) : DateTime;
    VAR
      CurrentDate@1002 : Date;
      CurrentTime@1003 : Time;
      WeekDays@1005 : ARRAY [7] OF Boolean;
      Idx@1009 : Integer;
      NextWeekDayIdx@1006 : Integer;
      CurrWeekDay@1008 : Integer;
      NextWeekDay@1007 : Integer;
    BEGIN
      CurrentDate := DT2DATE(CurrentDateTime);
      CurrentTime := DT2TIME(CurrentDateTime);

      CurrWeekDay := DATE2DWY(CurrentDate,1);
      NextWeekDay := CurrWeekDay;

      WeekDays[1] := Monday;
      WeekDays[2] := Tuesday;
      WeekDays[3] := Wednesday;
      WeekDays[4] := Thursday;
      WeekDays[5] := Friday;
      WeekDays[6] := Saturday;
      WeekDays[7] := Sunday;

      if WeekDays[CurrWeekDay] and (CurrentTime < ScheduledTime) then
        exit(CREATEDATETIME(CurrentDate,ScheduledTime));

      for Idx := 0 to 6 do begin
        NextWeekDayIdx := ((CurrWeekDay + Idx) mod 7) + 1;
        if WeekDays[NextWeekDayIdx] then begin
          NextWeekDay := NextWeekDayIdx;
          break;
        end;
      end;

      exit(CREATEDATETIME(CALCDATE(STRSUBSTNO('+WD%1',NextWeekDay),CurrentDate),ScheduledTime));
    END;

    [External]
    PROCEDURE CalculateExecutionTime@18(DateTime@1001 : DateTime) : DateTime;
    BEGIN
      case Recurrence of
        Recurrence::Instantly:
          exit(CURRENTDATETIME);
        Recurrence::Daily,
        Recurrence::Weekly:
          exit(GetScheduledWeekDay(DateTime,Time));
        Recurrence::Monthly:
          case "Monthly Notification Date" of
            "Monthly Notification Date"::"First Workday":
              exit(GetScheduledFirstWorkdateOfMonth(DateTime,Time));
            "Monthly Notification Date"::"Last Workday":
              exit(GetScheduledLastWorkdateOfMonth(DateTime,Time));
            "Monthly Notification Date"::Custom:
              exit(GetScheduledCustomWorkdateOfMonth(DateTime,Time,"Date of Month"));
          end;
      end;
    END;

    LOCAL PROCEDURE Schedule@12();
    BEGIN
      if Recurrence = Recurrence::Instantly then
        ScheduleNow
      else
        ScheduleForLater
    END;

    [External]
    PROCEDURE ScheduleNotification@7(NotificationEntry@1000 : Record "Notification Entry");
    BEGIN
      // Try to get a schedule if none exist use the default record values
      if GET(NotificationEntry."Recipient User ID",NotificationEntry.Type) then;

      Schedule;
    END;

    LOCAL PROCEDURE OneMinuteFromNow@13() : DateTime;
    BEGIN
      exit(CURRENTDATETIME + 60000);
    END;

    LOCAL PROCEDURE ScheduleNow@10();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      JobQueueCategory@1001 : Record "Job Queue Category";
    BEGIN
      if JobQueueEntry.ReuseExistingJobFromCatagory(JobQueueCategory.NotifyNowCode,OneMinuteFromNow) then
        exit;

      JobQueueCategory.InsertRec(JobQueueCategory.NotifyNowCode,NotifyNowDescriptionTxt);
      JobQueueEntry.ScheduleJobQueueEntryForLater(
        CODEUNIT::"Notification Entry Dispatcher",OneMinuteFromNow,JobQueueCategory.NotifyNowCode,'');
    END;

    LOCAL PROCEDURE ScheduleForLater@11();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      NotificationEntry@1002 : Record "Notification Entry";
      ExcetutionDateTime@1001 : DateTime;
    BEGIN
      ExcetutionDateTime := CalculateExecutionTime(CURRENTDATETIME);
      if JobQueueEntry.ReuseExistingJobFromID("Last Scheduled Job",ExcetutionDateTime) then
        exit;

      NotificationEntry.SETRANGE("Recipient User ID","User ID");
      NotificationEntry.SETRANGE(Type,"Notification Type");
      JobQueueEntry.ScheduleJobQueueEntryForLater(
        CODEUNIT::"Notification Entry Dispatcher",ExcetutionDateTime,'',NotificationEntry.GETVIEW);
      "Last Scheduled Job" := JobQueueEntry.ID;
      MODIFY
    END;

    BEGIN
    END.
  }
}

