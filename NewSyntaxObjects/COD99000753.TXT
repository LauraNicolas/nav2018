OBJECT Codeunit 99000753 Routing Line-Copy Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 cannot be copied to itself.';
      Text001@1001 : TextConst 'ENU=%1 on %2 %3 must not be %4';
      Text002@1002 : TextConst 'ENU=%1 on %2 %3 %4 must not be %5';

    [External]
    PROCEDURE CopyRouting@1(FromRoutingHeaderNo@1000 : Code[20];FromVersionCode@1001 : Code[20];VAR RoutingHeader@1002 : Record "Routing Header";ToVersionCode@1003 : Code[20]);
    VAR
      RoutingVersion@1004 : Record "Routing Version";
      RoutingLine@1005 : Record "Routing Line";
      RoutingLine2@1006 : Record "Routing Line";
      RoutingTool@1007 : Record "Routing Tool";
      FromRoutingTool@1008 : Record "Routing Tool";
      RoutingPersonnel@1009 : Record "Routing Personnel";
      FromRoutingPersonnel@1010 : Record "Routing Personnel";
      RoutingQualityMeasure@1011 : Record "Routing Quality Measure";
      FromRoutingQualityMeasure@1012 : Record "Routing Quality Measure";
      RoutingCommentLine@1013 : Record "Routing Comment Line";
      FromRoutingCommentLine@1014 : Record "Routing Comment Line";
    BEGIN
      if (FromRoutingHeaderNo = RoutingHeader."No.") and (FromVersionCode = ToVersionCode) then
        ERROR(Text000,RoutingHeader.TABLECAPTION);

      if ToVersionCode = '' then begin
        if RoutingHeader.Status = RoutingHeader.Status::Certified then
          ERROR(
            Text001,
            RoutingHeader.FIELDCAPTION(Status),
            RoutingHeader.TABLECAPTION,
            RoutingHeader."No.",
            RoutingHeader.Status);
      end else begin
        RoutingVersion.GET(RoutingHeader."No.",ToVersionCode);
        if RoutingVersion.Status = RoutingVersion.Status::Certified then
          ERROR(
            Text002,
            RoutingVersion.FIELDCAPTION(Status),
            RoutingVersion.TABLECAPTION,
            RoutingVersion."Routing No.",
            RoutingVersion."Version Code",
            RoutingVersion.Status);
      end;

      RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      RoutingLine.SETRANGE("Version Code",ToVersionCode);
      RoutingLine.DELETEALL(true);

      OnAfterDeleteRouting(RoutingHeader,ToVersionCode);

      RoutingLine2.SETRANGE("Routing No.",FromRoutingHeaderNo);
      RoutingLine2.SETRANGE("Version Code",FromVersionCode);
      if RoutingLine2.FIND('-') then
        repeat
          RoutingLine := RoutingLine2;
          RoutingLine."Routing No." := RoutingHeader."No.";
          RoutingLine."Version Code" := ToVersionCode;
          RoutingLine.INSERT;
        until RoutingLine2.NEXT = 0;

      FromRoutingTool.SETRANGE("Routing No.",FromRoutingHeaderNo);
      FromRoutingTool.SETRANGE("Version Code",FromVersionCode);
      if FromRoutingTool.FIND('-') then
        repeat
          RoutingTool := FromRoutingTool;
          RoutingTool."Routing No." := RoutingHeader."No.";
          RoutingTool."Version Code" := ToVersionCode;
          RoutingTool.INSERT;
        until FromRoutingTool.NEXT = 0;

      FromRoutingPersonnel.SETRANGE("Routing No.",FromRoutingHeaderNo);
      FromRoutingPersonnel.SETRANGE("Version Code",FromVersionCode);
      if FromRoutingPersonnel.FIND('-') then
        repeat
          RoutingPersonnel := FromRoutingPersonnel;
          RoutingPersonnel."Routing No." := RoutingHeader."No.";
          RoutingPersonnel."Version Code" := ToVersionCode;
          RoutingPersonnel.INSERT;
        until FromRoutingPersonnel.NEXT = 0;

      FromRoutingQualityMeasure.SETRANGE("Routing No.",FromRoutingHeaderNo);
      FromRoutingQualityMeasure.SETRANGE("Version Code",FromVersionCode);
      if FromRoutingQualityMeasure.FIND('-') then
        repeat
          RoutingQualityMeasure := FromRoutingQualityMeasure;
          RoutingQualityMeasure."Routing No." := RoutingHeader."No.";
          RoutingQualityMeasure."Version Code" := ToVersionCode;
          RoutingQualityMeasure.INSERT;
        until FromRoutingQualityMeasure.NEXT = 0;

      FromRoutingCommentLine.SETRANGE("Routing No.",FromRoutingHeaderNo);
      FromRoutingCommentLine.SETRANGE("Version Code",FromVersionCode);
      if FromRoutingCommentLine.FIND('-') then
        repeat
          RoutingCommentLine := FromRoutingCommentLine;
          RoutingCommentLine."Routing No." := RoutingHeader."No.";
          RoutingCommentLine."Version Code" := ToVersionCode;
          RoutingCommentLine.INSERT;
        until FromRoutingCommentLine.NEXT = 0;

      OnAfterCopyRouting(RoutingHeader,FromRoutingHeaderNo,FromVersionCode,ToVersionCode);
    END;

    [External]
    PROCEDURE SelectCopyFromVersionList@2(VAR FromRoutingVersion@1000 : Record "Routing Version");
    VAR
      RoutingHeader@1001 : Record "Routing Header";
      OldRoutingVersion@1002 : Record "Routing Version";
    BEGIN
      OldRoutingVersion := FromRoutingVersion;

      RoutingHeader."No." := FromRoutingVersion."Routing No.";
      if PAGE.RUNMODAL(0,FromRoutingVersion) = ACTION::LookupOK then begin
        if OldRoutingVersion.Status = OldRoutingVersion.Status::Certified then
          ERROR(
            Text002,
            OldRoutingVersion.FIELDCAPTION(Status),
            OldRoutingVersion.TABLECAPTION,
            OldRoutingVersion."Routing No.",
            OldRoutingVersion."Version Code",
            OldRoutingVersion.Status);
        CopyRouting(RoutingHeader."No.",FromRoutingVersion."Version Code",RoutingHeader,OldRoutingVersion."Version Code");
      end;
      FromRoutingVersion := OldRoutingVersion;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyRouting@9(VAR RoutingHeader@1000 : Record "Routing Header";FromRoutingHeaderNo@1001 : Code[20];FromVersionCode@1002 : Code[20];ToVersionCode@1003 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteRouting@3(VAR RoutingHeader@1000 : Record "Routing Header";ToVersionCode@1001 : Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

