OBJECT Table 9600 XML Schema
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnDelete=VAR
               XMLSchemaElement@1000 : Record "XML Schema Element";
               XMLSchemaRestriction@1001 : Record "XML Schema Restriction";
               ChildXMLSchema@1002 : Record "XML Schema";
               ReferencedXMLSchema@1003 : Record "Referenced XML Schema";
               TopSchemaCode@1005 : Code[20];
             BEGIN
               if Indentation > 0 then
                 TopSchemaCode := GetTopSchemaCode(Rec)
               else
                 TopSchemaCode := Code;

               ReferencedXMLSchema.SETFILTER(Code,STRSUBSTNO('%1:*|%1',TopSchemaCode));
               ReferencedXMLSchema.DELETEALL(true);

               XMLSchemaElement.SETFILTER("XML Schema Code",STRSUBSTNO('%1:*|%1',TopSchemaCode));
               XMLSchemaElement.DELETEALL(true);

               XMLSchemaRestriction.SETFILTER("XML Schema Code",STRSUBSTNO('%1:*|%1',TopSchemaCode));
               XMLSchemaRestriction.DELETEALL(true);

               ChildXMLSchema.SETFILTER(Code,STRSUBSTNO('(%1:*|%1)&(<>%2)',TopSchemaCode,Code));
               ChildXMLSchema.DELETEALL(false);
             END;

    CaptionML=ENU=XML Schema;
    LookupPageID="XML Schemas";
    DrillDownPageID="XML Schemas";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 2   ;   ;Description         ;Text80        ;CaptionML=ENU=Description }
    { 3   ;   ;Target Namespace    ;Text250       ;CaptionML=ENU=Target Namespace }
    { 4   ;   ;XSD                 ;BLOB          ;CaptionML=ENU=XSD }
    { 6   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 7   ;   ;Path                ;Text250       ;CaptionML=ENU=Path }
    { 10  ;   ;Target Namespace Aliases;Text250   ;CaptionML=ENU=Target Namespace Aliases }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReplaceQst@1000 : TextConst 'ENU=Do you want to replace the existing definition?';

    [Internal]
    PROCEDURE LoadSchema@4();
    VAR
      TempBlob@1004 : Record TempBlob;
      XMLSchema@1006 : Record "XML Schema";
      FileMgt@1003 : Codeunit "File Management";
      XSDParser@1005 : Codeunit "XSD Parser";
      XMLExists@1002 : Boolean;
      FileName@1001 : Text;
      i@1000 : Integer;
    BEGIN
      CALCFIELDS(XSD);
      XMLExists := XSD.HASVALUE;

      FileName := FileMgt.BLOBImport(TempBlob,'*.xsd');
      if FileName = '' then
        exit;

      if XMLExists then begin
        if not CONFIRM(ReplaceQst,false) then
          exit;

        TESTFIELD(Code);
        XMLSchema := Rec;
        DELETE(true);
        XMLSchema.INSERT;
        Rec := XMLSchema;
      end;

      XSD := TempBlob.Blob;
      if STRPOS(FileName,'\') <> 0 then begin
        i := STRLEN(FileName);
        while (i > 0) and (FileName[i] <> '\') do
          i := i - 1;
      end;

      Description := COPYSTR(FileMgt.GetFileName(FileName),1,MAXSTRLEN(Description));
      Path := COPYSTR(FileName,1,MAXSTRLEN(Path));
      XSDParser.LoadSchema(Rec);
      MODIFY;
    END;

    [Internal]
    PROCEDURE ExportSchema@6(ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
      FileMgt@1000 : Codeunit "File Management";
    BEGIN
      CALCFIELDS(XSD);
      if XSD.HASVALUE then begin
        TempBlob.Blob := XSD;
        exit(FileMgt.BLOBExport(TempBlob,'*.xsd',ShowFileDialog));
      end;
    END;

    [External]
    PROCEDURE GetSchemaContext@1() : Text;
    VAR
      XMLSchemaElement@1000 : Record "XML Schema Element";
      XMLSchemaElement2@1001 : Record "XML Schema Element";
      Context@1002 : Text;
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code",Code);
      XMLSchemaElement.SETCURRENTKEY(Indentation);

      Context := '';
      if XMLSchemaElement.FINDSET then
        repeat
          XMLSchemaElement2.COPYFILTERS(XMLSchemaElement);
          XMLSchemaElement2.SETRANGE(Indentation,XMLSchemaElement.Indentation);
          if XMLSchemaElement2.COUNT > 1 then
            exit(Context);
          Context := XMLSchemaElement.GetFullPath;
        until XMLSchemaElement.NEXT = 0;
    END;

    [External]
    PROCEDURE GetTopSchemaCode@32(XMLSchema@1000 : Record "XML Schema") : Code[20];
    VAR
      TopElementCode@1001 : Text;
    BEGIN
      TopElementCode := XMLSchema.Code;
      if STRPOS(XMLSchema.Code,':') > 1 then
        TopElementCode := COPYSTR(XMLSchema.Code,1,STRPOS(XMLSchema.Code,':') - 1);

      exit(TopElementCode);
    END;

    BEGIN
    END.
  }
}

