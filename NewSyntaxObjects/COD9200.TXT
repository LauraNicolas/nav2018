OBJECT Codeunit 9200 Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The previous column set could not be found.';
      Text002@1001 : TextConst 'ENU=The period could not be found.';
      Text003@1002 : TextConst 'ENU=There are no Calendar entries within the filter.';
      RoundingFormatTxt@1003 : TextConst '@@@={Locked};ENU=<Precision,%1><Standard Format,0>';
      GeneralLedgerSetup@1005 : Record "General Ledger Setup";
      GLSetupRead@1004 : Boolean;
      SetOption@1006 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';

    [Internal]
    PROCEDURE SetPeriodColumnSet@3(DateFilter@1012 : Text;PeriodType@1013 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';Direction@1010 : 'Backward,Forward';VAR FirstColumn@1009 : Date;VAR LastColumn@1007 : Date;NoOfColumns@1006 : Integer);
    VAR
      Period@1008 : Record Date;
      PeriodFormMgt@1005 : Codeunit PeriodFormManagement;
      Steps@1004 : Integer;
      TmpFirstColumn@1001 : Date;
      TmpLastColumn@1000 : Date;
    BEGIN
      Period.SETRANGE("Period Type",PeriodType);
      if DateFilter = '' then begin
        Period."Period Start" := WORKDATE;
        if PeriodFormMgt.FindDate('<=',Period,PeriodType) then
          Steps := 1;
        PeriodFormMgt.NextDate(Steps,Period,PeriodType);
        DateFilter := '>=' + FORMAT(Period."Period Start");
      end else begin
        Period.SETFILTER("Period Start",DateFilter);
        Period.FIND('-');
      end;

      if (FORMAT(FirstColumn) = '') and (FORMAT(LastColumn) = '') then begin
        FirstColumn := Period."Period Start";
        Period.NEXT(NoOfColumns - 1);
        LastColumn := Period."Period Start";
        exit;
      end;

      if Direction = Direction::Forward then begin
        Period.SETFILTER("Period Start",DateFilter);
        if Period.GET(PeriodType,LastColumn) then
          Period.NEXT;
        TmpFirstColumn := Period."Period Start";
        Period.NEXT(NoOfColumns - 1);
        TmpLastColumn := Period."Period Start";
        if TmpFirstColumn <> LastColumn then begin
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        end;
        exit;
      end;

      if Direction = Direction::Backward then begin
        if Period.GET(PeriodType,FirstColumn) then
          Period.NEXT(-1);
        TmpLastColumn := Period."Period Start";
        Period.NEXT(-NoOfColumns + 1);
        TmpFirstColumn := Period."Period Start";
        if TmpLastColumn <> FirstColumn then begin
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        end;
      end;
    END;

    [External]
    PROCEDURE SetDimColumnSet@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Text;SetWanted@1008 : Option;VAR RecordPosition@1010 : Text;VAR FirstColumn@1007 : Text;VAR LastColumn@1006 : Text;NoOfColumns@1004 : Integer);
    VAR
      DimVal@1005 : Record "Dimension Value";
      TmpFirstColumn@1001 : Text[1024];
      TmpLastColumn@1000 : Text[1024];
      TmpSteps@1009 : Integer;
    BEGIN
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      if DimFilter <> '' then
        DimVal.SETFILTER(Code,DimFilter);

      case SetWanted of
        SetOption::Initial:
          begin
            if DimVal.FIND('-') then begin
              RecordPosition := DimVal.GETPOSITION;
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            end;
          end;
        SetOption::Same:
          begin
            if RecordPosition <> '' then begin
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            end;
          end;
        SetOption::Next:
          begin
            if RecordPosition <> '' then begin
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              if DimVal.NEXT(NoOfColumns) <> 0 then begin
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                if TmpFirstColumn <> LastColumn then begin
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                end;
              end else
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            end;
          end;
        SetOption::Previous:
          begin
            if RecordPosition <> '' then begin
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              if DimVal.NEXT(-1) <> 0 then begin
                TmpLastColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(-NoOfColumns + 1);
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                if TmpLastColumn <> FirstColumn then begin
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                end;
              end else
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            end;
          end;
        SetOption::NextColumn:
          begin
            if RecordPosition <> '' then begin
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              if DimVal.NEXT <> 0 then begin
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                if TmpFirstColumn <> LastColumn then begin
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                end;
              end else
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            end;
          end;
        SetOption::PreviousColumn:
          begin
            if RecordPosition <> '' then begin
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              if DimVal.NEXT(-1) <> 0 then begin
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                if TmpLastColumn <> FirstColumn then begin
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                end;
              end else
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            end;
          end;
      end;

      if ABS(TmpSteps) <> NoOfColumns then
        NoOfColumns := ABS(TmpSteps);
    END;

    [Internal]
    PROCEDURE DimToCaptions@9(VAR CaptionSet@1000 : ARRAY [32] OF Text[80];VAR MatrixRecords@1007 : ARRAY [32] OF Record "Dimension Code Buffer";DimensionCode@1001 : Code[20];FirstColumn@1003 : Text;LastColumn@1011 : Text;VAR NumberOfColumns@1006 : Integer;ShowColumnName@1008 : Boolean;VAR CaptionRange@1009 : Text;DimensionValueFilter@1002 : Text);
    VAR
      DimensionValue@1004 : Record "Dimension Value";
      i@1005 : Integer;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE(Code,FirstColumn,LastColumn);
      DimensionValue.FILTERGROUP(7);
      if DimensionValueFilter <> '' then
        DimensionValue.SETFILTER(Code,DimensionValueFilter);
      DimensionValue.FILTERGROUP(0);

      i := 0;
      if DimensionValue.FINDSET then
        repeat
          i := i + 1;
          MatrixRecords[i].Code := DimensionValue.Code;
          MatrixRecords[i].Name := DimensionValue.Name;
          MatrixRecords[i].Totaling := DimensionValue.Totaling;
          if ShowColumnName then
            CaptionSet[i] := DimensionValue.Name
          else
            CaptionSet[i] := DimensionValue.Code
        until (i = ARRAYLEN(CaptionSet)) or (DimensionValue.NEXT = 0);

      NumberOfColumns := i;

      if NumberOfColumns > 1 then
        CaptionRange := COPYSTR(CaptionSet[1] + '..' + CaptionSet[NumberOfColumns],1,MAXSTRLEN(CaptionRange))
      else
        CaptionRange := CaptionSet[1];
    END;

    [External]
    PROCEDURE GenerateMatrixData@7(VAR RecRef@1000 : RecordRef;SetWanted@1008 : Option;MaximumSetLength@1001 : Integer;CaptionFieldNo@1002 : Integer;VAR RecordPosition@1006 : Text;VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR CaptionRange@1004 : Text;VAR CurrSetLength@1007 : Integer);
    VAR
      Steps@1009 : Integer;
      Caption@1003 : Text;
      MaxCaptionLength@1010 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;

      if RecRef.ISEMPTY then begin
        RecordPosition := '';
        exit;
      end;

      case SetWanted of
        SetOption::Initial:
          RecRef.FINDFIRST;
        SetOption::Previous:
          begin
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            Steps := RecRef.NEXT(-MaximumSetLength);
            if not (Steps in [-MaximumSetLength,0]) then
              ERROR(Text001);
          end;
        SetOption::Same:
          begin
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
          end;
        SetOption::Next:
          begin
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            if not (RecRef.NEXT(MaximumSetLength) = MaximumSetLength) then begin
              RecRef.SETPOSITION(RecordPosition);
              RecRef.GET(RecRef.RECORDID);
            end;
          end;
        SetOption::PreviousColumn:
          begin
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            Steps := RecRef.NEXT(-1);
            if not (Steps in [-1,0]) then
              ERROR(Text001);
          end;
        SetOption::NextColumn:
          begin
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            if not (RecRef.NEXT(1) = 1) then begin
              RecRef.SETPOSITION(RecordPosition);
              RecRef.GET(RecRef.RECORDID);
            end;
          end;
      end;

      RecordPosition := RecRef.GETPOSITION;

      repeat
        CurrSetLength := CurrSetLength + 1;
        Caption := FORMAT(RecRef.FIELD(CaptionFieldNo).VALUE);
        MaxCaptionLength := MAXSTRLEN(CaptionSet[CurrSetLength]);
        if STRLEN(Caption) <= MaxCaptionLength then
          CaptionSet[CurrSetLength] := COPYSTR(Caption,1,MaxCaptionLength)
        else
          CaptionSet[CurrSetLength] := COPYSTR(Caption,1,MaxCaptionLength - 3) + '...';
      until (CurrSetLength = MaximumSetLength) or (RecRef.NEXT <> 1);

      if CurrSetLength = 1 then
        CaptionRange := CaptionSet[1]
      else
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];
    END;

    [External]
    PROCEDURE GeneratePeriodMatrixData@1(SetWanted@1008 : Option;MaximumSetLength@1001 : Integer;UseNameForCaption@1002 : Boolean;PeriodType@1003 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';DateFilter@1000 : Text;VAR RecordPosition@1006 : Text;VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR CaptionRange@1004 : Text;VAR CurrSetLength@1007 : Integer;VAR PeriodRecords@1011 : ARRAY [32] OF TEMPORARY Record Date);
    VAR
      Calendar@1010 : Record Date;
      PeriodFormMgt@1012 : Codeunit PeriodFormManagement;
      Steps@1009 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;
      CLEAR(PeriodRecords);
      CLEAR(Calendar);
      CLEAR(PeriodFormMgt);

      Calendar.SETFILTER("Period Start",PeriodFormMgt.GetFullPeriodDateFilter(PeriodType,DateFilter));

      if not FindDate('-',Calendar,PeriodType,false) then begin
        RecordPosition := '';
        ERROR(Text003);
      end;

      case SetWanted of
        SetOption::Initial:
          begin
            if (PeriodType = PeriodType::"Accounting Period") or (DateFilter <> '') then begin
              FindDate('-',Calendar,PeriodType,true);
            end else
              Calendar."Period Start" := 0D;
            FindDate('=><',Calendar,PeriodType,true);
          end;
        SetOption::Previous:
          begin
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,true);
            Steps := PeriodFormMgt.NextDate(-MaximumSetLength,Calendar,PeriodType);
            if not (Steps in [-MaximumSetLength,0]) then
              ERROR(Text001);
          end;
        SetOption::PreviousColumn:
          begin
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,true);
            Steps := PeriodFormMgt.NextDate(-1,Calendar,PeriodType);
            if not (Steps in [-1,0]) then
              ERROR(Text001);
          end;
        SetOption::NextColumn:
          begin
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,true);
            if not (PeriodFormMgt.NextDate(1,Calendar,PeriodType) = 1) then begin
              Calendar.SETPOSITION(RecordPosition);
              FindDate('=',Calendar,PeriodType,true);
            end;
          end;
        SetOption::Same:
          begin
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,true)
          end;
        SetOption::Next:
          begin
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,true);
            if not (PeriodFormMgt.NextDate(MaximumSetLength,Calendar,PeriodType) = MaximumSetLength) then begin
              Calendar.SETPOSITION(RecordPosition);
              FindDate('=',Calendar,PeriodType,true);
            end;
          end;
      end;

      RecordPosition := Calendar.GETPOSITION;

      repeat
        CurrSetLength := CurrSetLength + 1;
        if UseNameForCaption then
          CaptionSet[CurrSetLength] := FORMAT(Calendar."Period Name")
        else
          CaptionSet[CurrSetLength] := PeriodFormMgt.CreatePeriodFormat(PeriodType,Calendar."Period Start");
        PeriodRecords[CurrSetLength].COPY(Calendar);
      until (CurrSetLength = MaximumSetLength) or (PeriodFormMgt.NextDate(1,Calendar,PeriodType) <> 1);

      if CurrSetLength = 1 then
        CaptionRange := CaptionSet[1]
      else
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];

      AdjustPeriodWithDateFilter(DateFilter,PeriodRecords[1]."Period Start",
        PeriodRecords[CurrSetLength]."Period End");
    END;

    LOCAL PROCEDURE FindDate@10(SearchString@1000 : Text[3];VAR Calendar@1001 : Record Date;PeriodType@1002 : Option;ErrorWhenNotFound@1005 : Boolean) : Boolean;
    VAR
      PeriodFormMgt@1004 : Codeunit PeriodFormManagement;
      Found@1003 : Boolean;
    BEGIN
      CLEAR(PeriodFormMgt);
      Found := PeriodFormMgt.FindDate(SearchString,Calendar,PeriodType);
      if ErrorWhenNotFound and not Found then
        ERROR(Text002);
      exit(Found);
    END;

    [External]
    PROCEDURE SetIndentation@8(VAR TextString@1000 : Text[1024];Indentation@1001 : Integer);
    VAR
      Substr@1002 : Text[1024];
    BEGIN
      Substr := PADSTR(Substr,Indentation * 2,' ');
      TextString := Substr + TextString;
    END;

    [Internal]
    PROCEDURE GetPKRange@11(VAR RecRef@1001 : RecordRef;KeyFieldNo@1002 : Integer;RecordPosition@1003 : Text;CurrSetLength@1004 : Integer) PKRange : Text[100];
    VAR
      FieldRef@1000 : FieldRef;
      CurFilter@1006 : Text;
      RecCount@1005 : Integer;
    BEGIN
      RecRef.SETPOSITION(RecordPosition);
      RecRef.GET(RecRef.RECORDID);
      PKRange := FORMAT(RecRef.FIELD(KeyFieldNo).VALUE);
      if CurrSetLength = 1 then
        exit(PKRange);
      RecRef.NEXT(CurrSetLength);
      PKRange := PKRange + '..' + FORMAT(RecRef.FIELD(KeyFieldNo).VALUE);
      FieldRef := RecRef.FIELD(KeyFieldNo);
      CurFilter := FieldRef.GETFILTER;
      if CurFilter = '' then
        exit(PKRange);
      FieldRef.SETFILTER(PKRange);
      RecCount := RecRef.COUNT;
      FieldRef.SETFILTER(CurFilter);
      if CurrSetLength = RecCount then
        exit(PKRange);
      exit('');
    END;

    [Internal]
    PROCEDURE GenerateDimColumnCaption@12(DimensionCode@1006 : Code[20];DimFilter@1005 : Text;SetWanted@1004 : Option;VAR RecordPosition@1003 : Text;FirstColumn@1002 : Text;LastColumn@1001 : Text;VAR CaptionSet@1016 : ARRAY [32] OF Text[80];VAR DimensionCodeBuffer@1015 : ARRAY [32] OF Record "Dimension Code Buffer";VAR NumberOfColumns@1011 : Integer;ShowColumnName@1010 : Boolean;VAR CaptionRange@1009 : Text);
    BEGIN
      SetDimColumnSet(
        DimensionCode,DimFilter,SetWanted,RecordPosition,FirstColumn,LastColumn,NumberOfColumns);
      DimToCaptions(
        CaptionSet,DimensionCodeBuffer,DimensionCode,
        FirstColumn,LastColumn,NumberOfColumns,ShowColumnName,CaptionRange,DimFilter);
    END;

    LOCAL PROCEDURE AdjustPeriodWithDateFilter@13(DateFilter@1000 : Text;VAR PeriodStartDate@1001 : Date;VAR PeriodEndDate@1002 : Date);
    VAR
      Period@1003 : Record Date;
    BEGIN
      if DateFilter <> '' then begin
        Period.SETFILTER("Period End",DateFilter);
        if Period.GETRANGEMAX("Period End") < PeriodEndDate then
          PeriodEndDate := Period.GETRANGEMAX("Period End");
        Period.RESET;
        Period.SETFILTER("Period Start",DateFilter);
        if Period.GETRANGEMIN("Period Start") > PeriodStartDate then
          PeriodStartDate := Period.GETRANGEMIN("Period Start");
      end;
    END;

    [External]
    PROCEDURE RoundValue@46(Value@1000 : Decimal;RoundingFactor@1001 : 'None,"1","1000","1000000"') : Decimal;
    BEGIN
      if Value <> 0 then
        case RoundingFactor of
          RoundingFactor::"1":
            exit(ROUND(Value,1));
          RoundingFactor::"1000":
            exit(ROUND(Value / 1000,0.1));
          RoundingFactor::"1000000":
            exit(ROUND(Value / 1000000,0.1));
        end;

      exit(Value);
    END;

    [External]
    PROCEDURE FormatValue@24(Value@1004 : Decimal;RoundingFactor@1002 : 'None,"1","1000","1000000"';AddCurrency@1000 : Boolean) : Text[30];
    BEGIN
      Value := RoundValue(Value,RoundingFactor);

      if Value <> 0 then
        exit(FORMAT(Value,0,GetFormatString(RoundingFactor,AddCurrency)));
    END;

    LOCAL PROCEDURE ReadNormalDecimalFormat@14(AddCurrency@1000 : Boolean) : Text;
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      if not GLSetupRead then begin
        GeneralLedgerSetup.GET;
        GLSetupRead := true;
        if AddCurrency then
          GeneralLedgerSetup.TESTFIELD("Additional Reporting Currency");
      end;

      if AddCurrency and
         Currency.GET(GeneralLedgerSetup."Additional Reporting Currency")
      then
        exit(Currency."Amount Decimal Places");

      exit(GeneralLedgerSetup."Amount Decimal Places");
    END;

    [External]
    PROCEDURE GetFormatString@15(RoundingFactor@1001 : 'None,"1","1000","1000000"';AddCurrency@1000 : Boolean) : Text;
    VAR
      AmountDecimal@1002 : Text;
    BEGIN
      case RoundingFactor of
        RoundingFactor::None:
          AmountDecimal := ReadNormalDecimalFormat(AddCurrency);
        RoundingFactor::"1":
          AmountDecimal := FORMAT(0);
        RoundingFactor::"1000",RoundingFactor::"1000000":
          AmountDecimal := FORMAT(1);
      end;
      exit(STRSUBSTNO(RoundingFormatTxt,AmountDecimal));
    END;

    BEGIN
    END.
  }
}

