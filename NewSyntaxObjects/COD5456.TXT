OBJECT Codeunit 5456 Graph Connection Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PwdConnectionStringTxt@1000 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=%1;{ENTITYENDPOINT}=%2"';
      S2SConnectionStringTxt@1002 : TextConst '@@@={Locked};ENU="{ENTITYLISTENDPOINT}=%1;{ENTITYENDPOINT}=%2;{EXORESOURCEURI}=%3;{EXORESOURCEROLE}=%4;"';
      AzureSecretNameTxt@1001 : TextConst '@@@={Locked};ENU=ExchangeAuthMethod';
      GraphResourceUrlTxt@1009 : TextConst '@@@={Locked};ENU=https://outlook.office365.com/';

    [External]
    PROCEDURE CanRunSync@14() : Boolean;
    VAR
      ForceSync@1000 : Boolean;
    BEGIN
      OnCheckForceSync(ForceSync);
      if ForceSync then
        exit(true);

      if GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph) <> '' then
        exit(false);

      exit(true);
    END;

    [External]
    PROCEDURE ConstructConnectionString@2(EntityEndpoint@1000 : Text;EntityListEndpoint@1001 : Text;ResourceUri@1002 : Text;ResourceRoles@1003 : Text) ConnectionString : Text;
    BEGIN
      if IsS2SAuthenticationEnabled then
        ConnectionString := S2SConnectionStringTxt
      else
        ConnectionString := PwdConnectionStringTxt;

      if ResourceUri = '' then
        ResourceUri := GraphResourceUrlTxt;

      ConnectionString := STRSUBSTNO(ConnectionString,EntityListEndpoint,EntityEndpoint,ResourceUri,ResourceRoles);
    END;

    [External]
    PROCEDURE GetGraphNotificationUrl@3() : Text[250];
    VAR
      WebhookManagement@1000 : Codeunit "Webhook Management";
    BEGIN
      exit(WebhookManagement.GetNotificationUrl);
    END;

    [External]
    PROCEDURE GetInboundConnectionName@8(TableID@1000 : Integer) ConnectionName : Text;
    BEGIN
      OnGetInboundConnectionName(TableID,ConnectionName);
    END;

    [External]
    PROCEDURE GetInboundConnectionString@20(TableID@1000 : Integer) ConnectionString : Text;
    BEGIN
      OnGetInboundConnectionString(TableID,ConnectionString);
    END;

    [External]
    PROCEDURE GetSubscriptionConnectionName@9(TableID@1000 : Integer) ConnectionName : Text;
    BEGIN
      OnGetSubscriptionConnectionName(TableID,ConnectionName);
    END;

    [External]
    PROCEDURE GetSubscriptionConnectionString@11(TableID@1000 : Integer) ConnectionString : Text;
    BEGIN
      OnGetSubscriptionConnectionString(TableID,ConnectionString);
    END;

    [External]
    PROCEDURE GetSynchronizeConnectionName@10(TableID@1000 : Integer) ConnectionName : Text;
    BEGIN
      OnGetSynchronizeConnectionName(TableID,ConnectionName);
    END;

    [External]
    PROCEDURE GetSynchronizeConnectionString@7(TableID@1000 : Integer) ConnectionString : Text;
    BEGIN
      OnGetSynchronizeConnectionString(TableID,ConnectionString);
    END;

    [External]
    PROCEDURE RegisterConnectionForEntity@16(InboundConnectionName@1000 : Text;InboundConnectionString@1003 : Text;SubscriptionConnectionName@1004 : Text;SubscriptionConnectionString@1005 : Text;SynchronizeConnectionName@1006 : Text;SynchronizeConnectionString@1007 : Text);
    BEGIN
      RegisterConnectionWithName(InboundConnectionName,InboundConnectionString);
      RegisterConnectionWithName(SubscriptionConnectionName,SubscriptionConnectionString);
      RegisterConnectionWithName(SynchronizeConnectionName,SynchronizeConnectionString);
    END;

    [External]
    PROCEDURE RegisterConnections@4();
    BEGIN
      OnRegisterConnections;
    END;

    PROCEDURE IsS2SAuthenticationEnabled@1() : Boolean;
    VAR
      AzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management";
      AzureSecret@1001 : Text;
    BEGIN
      if not AzureKeyVaultManagement.IsEnable then
        exit(false);

      AzureKeyVaultManagement.GetAzureKeyVaultSecret(AzureSecret,AzureSecretNameTxt);
      case UPPERCASE(AzureSecret) of
        'S2SAUTH':
          exit(true);
        'PASSWORDAUTH':
          exit(false);
      end;
    END;

    LOCAL PROCEDURE RegisterConnectionWithName@13(ConnectionName@1000 : Text;ConnectionString@1001 : Text);
    BEGIN
      if '' in [ConnectionName,ConnectionString] then
        exit;

      if not HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionName) then
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,ConnectionName,ConnectionString);
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckForceSync@21(VAR Force@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetInboundConnectionName@6(TableID@1000 : Integer;VAR ConnectionName@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetInboundConnectionString@17(TableID@1000 : Integer;VAR ConnectionString@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSubscriptionConnectionName@15(TableID@1000 : Integer;VAR ConnectionName@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSubscriptionConnectionString@18(TableID@1000 : Integer;VAR ConnectionString@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSynchronizeConnectionName@5(TableID@1000 : Integer;VAR ConnectionName@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSynchronizeConnectionString@19(TableID@1000 : Integer;VAR ConnectionString@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRegisterConnections@12();
    BEGIN
    END;

    BEGIN
    END.
  }
}

