OBJECT Report 86 Adjust Add. Reporting Currency
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=im,
                TableData "Item Ledger Entry"=m,
                TableData "G/L Register"=im,
                TableData "Job Ledger Entry"=m,
                TableData "VAT Entry"=m,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "Value Entry"=m;
    CaptionML=ENU=Adjust Add. Reporting Currency;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   if GLSetup."Additional Reporting Currency" = '' then
                     GLSetup.GET;
                 END;

    OnPreReport=VAR
                  GenJnlLine@1000 : Record "Gen. Journal Line";
                BEGIN
                  Currency.GET(GLSetup."Additional Reporting Currency");
                  Currency.TESTFIELD("Amount Rounding Precision");
                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                  Currency.TESTFIELD("Residual Gains Account");
                  ResidualGLAcc.GET(Currency."Residual Gains Account");
                  ResidualGLAcc.TESTFIELD(Blocked,false);
                  ResidualGLAcc.TESTFIELD("Account Type",ResidualGLAcc."Account Type"::Posting);
                  Currency.TESTFIELD("Residual Losses Account");
                  ResidualGLAcc.GET(Currency."Residual Losses Account");
                  ResidualGLAcc.TESTFIELD(Blocked,false);
                  ResidualGLAcc.TESTFIELD("Account Type",ResidualGLAcc."Account Type"::Posting);
                  SourceCodeSetup.GET;
                  SourceCodeSetup.TESTFIELD("Adjust Add. Reporting Currency");

                  if DocumentNo = '' then
                    ERROR(
                      Text000,GenJnlLine.FIELDCAPTION("Document No."));
                  if RetainedEarningsGLAcc."No." = '' then
                    ERROR(Text001);
                END;

    OnPostReport=BEGIN
                   ReportIsExecuted := true;
                 END;

  }
  DATASET
  {
    { 7612;    ;DataItem;VAT Entry           ;
               DataItemTable="VAT Entry";
               DataItemTableView=SORTING(Type,Closed) WHERE(Type=FILTER(Purchase..Sale));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               Window.OPEN(
                                 Text002);
                               if COUNT > 0 then
                                 VATEntryStep := 10000 * 100000 div COUNT;

                               GLSetup.GET;
                               if not GLSetup."Unrealized VAT" then
                                 SETRANGE(Closed,false);
                             END;

               OnAfterGetRecord=BEGIN
                                  VATEntryCount := VATEntryCount + VATEntryStep;
                                  if VATEntryOldCount div 100000 <> VATEntryCount div 100000 then begin
                                    Window.UPDATE(1,VATEntryCount div 100000);
                                    VATEntryOldCount := VATEntryCount;
                                  end;

                                  "Additional-Currency Amount" := ExchangeAmtLCYToFCY("Posting Date",Amount,false);
                                  "Additional-Currency Base" := ExchangeAmtLCYToFCY("Posting Date",Base,false);
                                  "Add.-Currency Unrealized Amt." := ExchangeAmtLCYToFCY("Posting Date","Unrealized Amount",false);
                                  "Add.-Currency Unrealized Base" := ExchangeAmtLCYToFCY("Posting Date","Unrealized Base",false);
                                  "Add.-Curr. Rem. Unreal. Amount" := ExchangeAmtLCYToFCY("Posting Date","Remaining Unrealized Amount",false);
                                  "Add.-Curr. Rem. Unreal. Base" := ExchangeAmtLCYToFCY("Posting Date","Remaining Unrealized Base",false);
                                  MODIFY;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;
                               }

    { 7069;    ;DataItem;G/L Entry           ;
               DataItemTable="G/L Entry";
               DataItemTableView=SORTING("Entry No.");
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text003 +
                                 Text004);
                             END;

               OnAfterGetRecord=VAR
                                  GLAccNo@1000 : Code[20];
                                BEGIN
                                  if OldGLEntry."Posting Date" < "Posting Date" then begin
                                    Window.UPDATE(1,"Posting Date");
                                    OldGLEntry := "G/L Entry";
                                  end;
                                  "Additional-Currency Amount" := ExchangeAmtLCYToFCY("Posting Date",Amount,false);
                                  if "Debit Amount" <> 0 then begin
                                    "Add.-Currency Debit Amount" := "Additional-Currency Amount";
                                    "Add.-Currency Credit Amount" := 0;
                                  end else begin
                                    "Add.-Currency Debit Amount" := 0;
                                    "Add.-Currency Credit Amount" := -"Additional-Currency Amount";
                                  end;
                                  MODIFY;

                                  TotalAddCurrAmount := TotalAddCurrAmount + "Additional-Currency Amount";
                                  TotalAmount := TotalAmount + Amount;
                                  if TotalAmount = 0 then
                                    if TotalAddCurrAmount <> 0 then begin
                                      if TotalAddCurrAmount < 0 then
                                        GLAccNo := Currency."Residual Losses Account"
                                      else
                                        GLAccNo := Currency."Residual Gains Account";
                                      InsertGLEntry(
                                        "Posting Date","Document Date","Document Type","Document No.",GLAccNo,
                                        "Journal Batch Name","Reason Code",-TotalAddCurrAmount);
                                      TotalAddCurrAmount := 0;
                                    end;

                                  if "Entry No." = LastEntryNo then
                                    CurrReport.BREAK;

                                  if "Posting Date" = CLOSINGDATE("Posting Date") then begin
                                    TmpCloseIncomeStatementBuffer."Closing Date" := "Posting Date";
                                    TmpCloseIncomeStatementBuffer."G/L Account No." := "G/L Account No.";
                                    if TmpCloseIncomeStatementBuffer.INSERT then;
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if TmpCloseIncomeStatementBuffer.FIND('-') then
                                  repeat
                                    if IsAccountingPeriodClosingDate(
                                         TmpCloseIncomeStatementBuffer."Closing Date")
                                    then begin
                                      CheckCombination(TmpCloseIncomeStatementBuffer);

                                      CLEAR(TmpCloseIncomeStatementBuffer3);
                                      TmpCloseIncomeStatementBuffer3."Closing Date" := "Posting Date";
                                      TmpCloseIncomeStatementBuffer3."G/L Account No." := Currency."Residual Gains Account";
                                      if TmpCloseIncomeStatementBuffer3.INSERT then;
                                      TmpCloseIncomeStatementBuffer3."Closing Date" := "Posting Date";
                                      TmpCloseIncomeStatementBuffer3."G/L Account No." := Currency."Residual Losses Account";
                                      if TmpCloseIncomeStatementBuffer3.INSERT then;
                                    end;
                                  until TmpCloseIncomeStatementBuffer.NEXT = 0;

                                if TmpCloseIncomeStatementBuffer3.FIND('-') then
                                  repeat
                                    CheckCombination(TmpCloseIncomeStatementBuffer3);
                                  until TmpCloseIncomeStatementBuffer3.NEXT = 0;

                                if GLReg."To Entry No." <> 0 then
                                  GLReg.INSERT;
                                Window.CLOSE;
                              END;
                               }

    { 8894;    ;DataItem;Value Entry         ;
               DataItemTable="Value Entry";
               DataItemTableView=SORTING("Item No.");
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text011 +
                                 Text006);
                             END;

               OnAfterGetRecord=VAR
                                  ItemLedgerEntry@1000 : Record "Item Ledger Entry";
                                  PostingDate@1001 : Date;
                                BEGIN
                                  if OldValueEntry."Item No." <> "Item No." then begin
                                    Window.UPDATE(1,"Item No.");
                                    OldValueEntry := "Value Entry";
                                  end;

                                  if "Entry Type" = "Entry Type"::Revaluation then begin
                                    ItemLedgerEntry.GET("Item Ledger Entry No.");
                                    PostingDate := ItemLedgerEntry."Posting Date";
                                  end else
                                    PostingDate := "Posting Date";

                                  "Cost per Unit (ACY)" := ExchangeAmtLCYToFCY(PostingDate,"Cost per Unit",true);
                                  "Cost Amount (Actual) (ACY)" := ExchangeAmtLCYToFCY(PostingDate,"Cost Amount (Actual)",false);
                                  "Cost Amount (Expected) (ACY)" := ExchangeAmtLCYToFCY(PostingDate,"Cost Amount (Expected)",false);
                                  "Cost Amount (Non-Invtbl.)(ACY)" := ExchangeAmtLCYToFCY(PostingDate,"Cost Amount (Non-Invtbl.)",false);
                                  "Cost Posted to G/L (ACY)" := ExchangeAmtLCYToFCY(PostingDate,"Cost Posted to G/L",false);

                                  MODIFY;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;
                               }

    { 5612;    ;DataItem;Job Ledger Entry    ;
               DataItemTable="Job Ledger Entry";
               DataItemTableView=SORTING("Job No.","Posting Date");
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text007 +
                                 Text008);
                             END;

               OnAfterGetRecord=BEGIN
                                  if OldJobLedgEntry."Job No." <> "Job No." then begin
                                    Window.UPDATE(1,"Job No.");
                                    OldJobLedgEntry := "Job Ledger Entry";
                                  end;

                                  "Additional-Currency Total Cost" := ExchangeAmtLCYToFCY("Posting Date","Total Cost (LCY)",false);
                                  "Add.-Currency Total Price" := ExchangeAmtLCYToFCY("Posting Date","Total Price (LCY)",false);
                                  MODIFY;
                                END;
                                 }

    { 3581;    ;DataItem;Prod. Order Line    ;
               DataItemTable="Prod. Order Line";
               DataItemTableView=SORTING(Status,"Prod. Order No.","Line No.");
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text99000004 +
                                 Text99000002);
                             END;

               OnAfterGetRecord=BEGIN
                                  if OldProdOrderLine."Prod. Order No." <> "Prod. Order No." then begin
                                    Window.UPDATE(1,"Prod. Order No.");
                                    OldProdOrderLine := "Prod. Order Line";
                                  end;

                                  "Cost Amount (ACY)" := ExchangeAmtLCYToFCY(WORKDATE,"Cost Amount",false);
                                  "Unit Cost (ACY)" := ExchangeAmtLCYToFCY(WORKDATE,"Unit Cost",true);
                                  MODIFY;
                                END;
                                 }

    { 5276;    ;DataItem;Cost Entry          ;
               DataItemTable="Cost Entry";
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text012 +
                                 Text004);
                             END;

               OnAfterGetRecord=BEGIN
                                  if OldCostEntry."Posting Date" < "Posting Date" then begin
                                    Window.UPDATE(1,"Posting Date");
                                    OldCostEntry := "Cost Entry";
                                  end;
                                  "Additional-Currency Amount" := ExchangeAmtLCYToFCY("Posting Date",Amount,false);
                                  if "Debit Amount" <> 0 then begin
                                    "Add.-Currency Debit Amount" := "Additional-Currency Amount";
                                    "Add.-Currency Credit Amount" := 0;
                                  end else begin
                                    "Add.-Currency Debit Amount" := 0;
                                    "Add.-Currency Credit Amount" := -"Additional-Currency Amount";
                                  end;
                                  MODIFY;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   GLSetup.TESTFIELD("Additional Reporting Currency");
                   GLSetup2 := GLSetup;
                   CurrencyFactor := CurrExchRate.ExchangeRate(WORKDATE,GLSetup."Additional Reporting Currency");
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 7   ;2   ;Field     ;
                  Name=Additional Reporting Currency;
                  CaptionML=ENU=Additional Reporting Currency;
                  ToolTipML=ENU=Specifies the currency code from the Additional Reporting Currency field in the General Ledger Setup window.;
                  ApplicationArea=#Suite;
                  SourceExpr=GLSetup."Additional Reporting Currency";
                  Editable=TRUE;
                  OnValidate=BEGIN
                               GLSetup := GLSetup2;
                             END;

                  OnAssistEdit=BEGIN
                                 ChangeExchangeRate.SetParameter(GLSetup."Additional Reporting Currency",CurrencyFactor,WORKDATE);
                                 if ChangeExchangeRate.RUNMODAL = ACTION::OK then
                                   CurrencyFactor := ChangeExchangeRate.GetParameter;
                                 CLEAR(ChangeExchangeRate);
                               END;
                                }

      { 1   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies a document number that will be copied to rounding entries if another document number does not apply. The batch job creates these rounding entries.;
                  ApplicationArea=#Suite;
                  SourceExpr=DocumentNo }

      { 4   ;2   ;Field     ;
                  Name=RetainedEarningsAcc;
                  CaptionML=ENU=Retained Earnings Acc.;
                  ToolTipML=ENU=Specifies the retained earnings account that the batch job posts to. This account should be the same as the account that is used by the Close Income Statement batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainedEarningsGLAcc."No.";
                  TableRelation="G/L Account";
                  OnValidate=BEGIN
                               if RetainedEarningsGLAcc."No." <> '' then begin
                                 RetainedEarningsGLAcc.FIND;
                                 RetainedEarningsGLAcc.CheckGLAcc;
                               end;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter a %1.';
      Text001@1001 : TextConst 'ENU=Enter Retained Earnings Account No.';
      Text002@1002 : TextConst 'ENU=Processing VAT Entries @1@@@@@@@@@@\';
      Text003@1003 : TextConst 'ENU=Processing G/L Entries...\\';
      Text004@1004 : TextConst 'ENU=Posting Date #1##########\';
      Text006@1005 : TextConst 'ENU=Item No. #1##########\';
      Text007@1006 : TextConst 'ENU=Processing Job Ledger Entries...\\';
      Text008@1007 : TextConst 'ENU=Job No. #1##########\';
      Text010@1008 : TextConst 'ENU=Residual caused by rounding of %1';
      Text011@1009 : TextConst 'ENU=Processing Value Entries...\\';
      Text012@1012 : TextConst 'ENU=Processing Cost Entries...\\';
      Text99000002@1011 : TextConst 'ENU=Prod. Order No. #1##########\';
      Text99000004@1013 : TextConst 'ENU=Processing Finished Prod. Order Lines...\\';
      GLSetup@1014 : Record "General Ledger Setup";
      GLSetup2@1015 : Record "General Ledger Setup";
      SourceCodeSetup@1016 : Record "Source Code Setup";
      OldGLEntry@1017 : Record "G/L Entry";
      OldValueEntry@1018 : Record "Value Entry";
      OldJobLedgEntry@1019 : Record "Job Ledger Entry";
      OldProdOrderLine@1022 : Record "Prod. Order Line";
      OldCostEntry@1010 : Record "Cost Entry";
      CurrExchRate@1023 : Record "Currency Exchange Rate";
      Currency@1024 : Record Currency;
      GLEntry2@1025 : Record "G/L Entry";
      GLReg@1026 : Record "G/L Register";
      AccountingPeriod@1027 : Record "Accounting Period";
      TmpCloseIncomeStatementBuffer@1028 : TEMPORARY Record "Close Income Statement Buffer";
      TmpCloseIncomeStatementBuffer3@1029 : TEMPORARY Record "Close Income Statement Buffer";
      GLEntry3@1030 : Record "G/L Entry";
      RetainedEarningsGLAcc@1031 : Record "G/L Account";
      ResidualGLAcc@1020 : Record "G/L Account";
      ChangeExchangeRate@1032 : Page "Change Exchange Rate";
      Window@1021 : Dialog;
      CurrencyFactor@1033 : Decimal;
      TotalAddCurrAmount@1035 : Decimal;
      TotalAmount@1036 : Decimal;
      NextEntryNo@1037 : Integer;
      LastEntryNo@1038 : Integer;
      NextTransactionNo@1039 : Integer;
      FiscalYearStartDate@1040 : Date;
      ReportIsExecuted@1041 : Boolean;
      VATEntryCount@1042 : Integer;
      VATEntryOldCount@1043 : Integer;
      VATEntryStep@1044 : Integer;
      FiscalYearStartDate2@1045 : Date;
      FiscalYearEndDate2@1046 : Date;
      LastDateChecked@1047 : Date;
      LastFiscalYearStartDate@1048 : Date;
      LastFiscalYearEndDate@1049 : Date;
      LastIsAccPeriodClosingDate@1050 : Boolean;
      DocumentNo@1051 : Code[20];

    [External]
    PROCEDURE SetAddCurr@2(AddCurr@1000 : Code[10]);
    BEGIN
      GLSetup."Additional Reporting Currency" := AddCurr;
    END;

    [External]
    PROCEDURE IsExecuted@3() : Boolean;
    BEGIN
      exit(ReportIsExecuted);
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY@1(PostingDate@1003 : Date;Amount@1000 : Decimal;IsUnitAmount@1001 : Boolean) : Decimal;
    VAR
      AmtRndgPrec@1002 : Decimal;
    BEGIN
      if IsUnitAmount then
        AmtRndgPrec := Currency."Unit-Amount Rounding Precision"
      else
        AmtRndgPrec := Currency."Amount Rounding Precision";
      exit(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            PostingDate,GLSetup."Additional Reporting Currency",Amount,
            CurrExchRate.ExchangeRate(PostingDate,GLSetup."Additional Reporting Currency")),
          AmtRndgPrec));
    END;

    [External]
    PROCEDURE IsAccountingPeriodClosingDate@5(Date@1000 : Date) : Boolean;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
      OK@1002 : Boolean;
    BEGIN
      if Date <> LastDateChecked then begin
        OK := AccountingPeriod.GET(NORMALDATE(Date) + 1);
        if OK then
          OK := AccountingPeriod."New Fiscal Year";
        if OK then begin
          LastFiscalYearEndDate := CLOSINGDATE(Date);
          AccountingPeriod.SETRANGE("New Fiscal Year",true);
          OK := AccountingPeriod.FIND('<');
          LastFiscalYearStartDate := AccountingPeriod."Starting Date";
          LastIsAccPeriodClosingDate := true;
        end else begin
          LastIsAccPeriodClosingDate := false;
          LastFiscalYearStartDate := 0D;
          LastFiscalYearEndDate := 0D;
        end;
      end;
      FiscalYearStartDate2 := LastFiscalYearStartDate;
      FiscalYearEndDate2 := LastFiscalYearEndDate;
      exit(LastIsAccPeriodClosingDate);
    END;

    [External]
    PROCEDURE CheckCombination@7(CloseIncomeStmtBuffer2@1000 : Record "Close Income Statement Buffer");
    BEGIN
      CLEAR(GLEntry3);
      GLEntry3.SETCURRENTKEY("G/L Account No.","Posting Date");
      GLEntry3.SETRANGE("G/L Account No.",CloseIncomeStmtBuffer2."G/L Account No.");
      GLEntry3.SETRANGE("Posting Date",FiscalYearStartDate2,FiscalYearEndDate2);

      GLEntry3.CALCSUMS(Amount);
      if GLEntry3.Amount = 0 then begin
        GLEntry3.CALCSUMS("Additional-Currency Amount");
        if GLEntry3."Additional-Currency Amount" <> 0 then begin
          InsertGLEntry(
            FiscalYearEndDate2,FiscalYearEndDate2,GLEntry3."Document Type"::" ",DocumentNo,
            CloseIncomeStmtBuffer2."G/L Account No.",
            '','',-GLEntry3."Additional-Currency Amount");

          InsertGLEntry(
            FiscalYearEndDate2,FiscalYearEndDate2,GLEntry3."Document Type"::" ",DocumentNo,
            RetainedEarningsGLAcc."No.",
            '','',GLEntry3."Additional-Currency Amount");
        end;
      end;
    END;

    [External]
    PROCEDURE InsertGLEntry@10(PostingDate@1000 : Date;DocumentDate@1001 : Date;DocumentType@1002 : Integer;DocumentNo@1003 : Code[20];GLAccountNo@1004 : Code[20];JnlBatchName@1005 : Code[10];ReasonCode@1006 : Code[10];AddCurrAmount@1007 : Decimal);
    BEGIN
      if NextEntryNo = 0 then begin
        if GLEntry2.FINDLAST then begin
          LastEntryNo := GLEntry2."Entry No.";
          NextEntryNo := GLEntry2."Entry No." + 1;
          NextTransactionNo := GLEntry2."Transaction No." + 1;
        end;

        AccountingPeriod.RESET;
        AccountingPeriod.SETCURRENTKEY(Closed);
        AccountingPeriod.SETRANGE(Closed,false);
        AccountingPeriod.FINDFIRST;
        FiscalYearStartDate := AccountingPeriod."Starting Date";

        GLReg.LOCKTABLE;
        if GLReg.FINDLAST then
          GLReg."No." := GLReg."No." + 1
        else
          GLReg."No." := 1;
        GLReg.INIT;
        GLReg."From Entry No." := NextEntryNo;
        GLReg."From VAT Entry No." := 0;
        GLReg."To VAT Entry No." := 0;
        GLReg."Creation Date" := TODAY;
        GLReg."Source Code" := SourceCodeSetup."Adjust Add. Reporting Currency";
        GLReg."Journal Batch Name" := '';
        GLReg."User ID" := USERID;
      end else
        NextEntryNo := NextEntryNo + 1;

      GLEntry2.INIT;
      GLEntry2."Posting Date" := PostingDate;
      GLEntry2."Document Date" := DocumentDate;
      GLEntry2."Document Type" := DocumentType;
      GLEntry2."Document No." := DocumentNo;
      GLEntry2."External Document No." := '';
      GLEntry2.Description :=
        COPYSTR(
          STRSUBSTNO(
            Text010,
            GLEntry2.FIELDCAPTION("Additional-Currency Amount")),
          1,MAXSTRLEN(GLEntry2.Description));
      GLEntry2."Source Code" := SourceCodeSetup."Adjust Add. Reporting Currency";
      GLEntry2."Source Type" := 0;
      GLEntry2."Source No." := '';
      GLEntry2."Job No." := '';
      GLEntry2.Quantity := 0;
      GLEntry2."Journal Batch Name" := JnlBatchName;
      GLEntry2."Reason Code" := ReasonCode;
      GLEntry2."Entry No." := NextEntryNo;
      GLEntry2."Transaction No." := NextTransactionNo;
      GLEntry2."G/L Account No." := GLAccountNo;
      GLEntry2.Amount := 0;
      GLEntry2."User ID" := USERID;
      GLEntry2."No. Series" := '';
      GLEntry2."System-Created Entry" := true;
      GLEntry2."Prior-Year Entry" := GLEntry2."Posting Date" < FiscalYearStartDate;
      GLEntry2."Additional-Currency Amount" := AddCurrAmount;
      if GLEntry2."Additional-Currency Amount" > 0 then begin
        GLEntry2."Add.-Currency Debit Amount" := GLEntry2."Additional-Currency Amount";
        GLEntry2."Add.-Currency Credit Amount" := 0;
      end else begin
        GLEntry2."Add.-Currency Debit Amount" := 0;
        GLEntry2."Add.-Currency Credit Amount" := -GLEntry2."Additional-Currency Amount";
      end;
      GLEntry2.INSERT;

      GLReg."To Entry No." := GLEntry2."Entry No.";
    END;

    [Internal]
    PROCEDURE InitializeRequest@4(NewDocumentNo@1000 : Code[20];NewRetainedEarningsGLAccNo@1001 : Code[20]);
    BEGIN
      DocumentNo := NewDocumentNo;
      RetainedEarningsGLAcc."No." := NewRetainedEarningsGLAccNo;
      GLSetup2 := GLSetup;
      CurrencyFactor := CurrExchRate.ExchangeRate(WORKDATE,GLSetup."Additional Reporting Currency");
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

