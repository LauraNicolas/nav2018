OBJECT Page 6401 Flow Selector
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Manage Flows;
    LinksAllowed=false;
    OnOpenPage=BEGIN
                 if FlowServiceManagement.IsPPE then begin
                   ShowErrorMessage(FlowServiceManagement.GetFlowPPEError);
                   exit;
                 end;

                 IsErrorMessageVisible := false;
                 if not TryInitialize then
                   ShowErrorMessage(GETLASTERRORTEXT);
                 if not FlowServiceManagement.IsUserReadyForFlow then
                   ERROR('');
                 IsUserReadyForFlow := true;

                 if not FlowServiceManagement.HasUserSelectedFlowEnvironment then
                   FlowServiceManagement.SetSelectedFlowEnvironmentIDToDefault;
               END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      Name=ActionContainer6;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=FlowEntries;
                      CaptionML=ENU=Flow Entries;
                      ToolTipML=ENU=View and configure Flow entries.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Flow;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 WorkflowWebhookEntry@1000 : Record "Workflow Webhook Entry";
                               BEGIN
                                 WorkflowWebhookEntry.SetDefaultFilter(WorkflowWebhookEntry);
                                 PAGE.RUN(PAGE::"Workflow Webhook Entries",WorkflowWebhookEntry);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=OpenMyFlows;
                      CaptionML=ENU=Open Flow;
                      ToolTipML=ENU=View and configure Flows on the Flow website.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Flow;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 HYPERLINK(FlowServiceManagement.GetFlowManageUrl);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=SelectFlowUserEnvironment;
                      CaptionML=ENU=Select Environment;
                      ToolTipML=ENU=Select your Flow environment.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=CheckList;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 FlowUserEnvironmentConfig@1002 : Record "Flow User Environment Config";
                                 TempFlowUserEnvironmentBuffer@1000 : TEMPORARY Record "Flow User Environment Buffer";
                                 FlowUserEnvSelection@1001 : Page "Flow User Env. Selection";
                               BEGIN
                                 TempFlowUserEnvironmentBuffer.RESET;
                                 FlowServiceManagement.GetEnvironments(TempFlowUserEnvironmentBuffer);
                                 FlowUserEnvSelection.SetFlowEnvironmentBuffer(TempFlowUserEnvironmentBuffer);
                                 FlowUserEnvSelection.LOOKUPMODE(true);

                                 if FlowUserEnvSelection.RUNMODAL <> ACTION::LookupOK then
                                   exit;

                                 TempFlowUserEnvironmentBuffer.RESET;
                                 TempFlowUserEnvironmentBuffer.SETRANGE(Enabled,true);

                                 // Remove any previous selection since user did not select anything
                                 if not TempFlowUserEnvironmentBuffer.FINDFIRST then begin
                                   if FlowUserEnvironmentConfig.GET(USERSECURITYID) then
                                     FlowUserEnvironmentConfig.DELETE;
                                   exit;
                                 end;

                                 FlowServiceManagement.SaveFlowUserEnvironmentSelection(TempFlowUserEnvironmentBuffer);
                                 LoadFlows;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Flow Selector;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                Name=Group10;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=GridLayout }

    { 11  ;2   ;Field     ;
                Name=EnvironmentNameText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=EnvironmentNameText;
                ShowCaption=false }

    { 3   ;1   ;Group     ;
                Name=Group3;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=FlowAddin;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.FlowIntegration;PublicKeyToken=31bf3856ad364e35] }

    { 4   ;1   ;Group     ;
                Name=Group4;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=ErrorMessageText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorMessageText;
                Editable=False;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      AzureAdMgt@1000 : Codeunit "Azure AD Mgt.";
      FlowServiceManagement@1001 : Codeunit "Flow Service Management";
      IsErrorMessageVisible@1002 : Boolean;
      ErrorMessageText@1003 : Text;
      IsUserReadyForFlow@1004 : Boolean;
      AddInReady@1005 : Boolean;
      EnvironmentNameText@1006 : Text;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      IsUserReadyForFlow := FlowServiceManagement.IsUserReadyForFlow;

      if not IsUserReadyForFlow then begin
        if AzureAdMgt.IsSaaS then
          ERROR(FlowServiceManagement.GetGenericError);
        if not TryAzureAdMgtGetAccessToken then
          ShowErrorMessage(GETLASTERRORTEXT);
        CurrPage.UPDATE;
      end;
    END;

    LOCAL PROCEDURE LoadFlows@7();
    BEGIN
      EnvironmentNameText := FlowServiceManagement.GetSelectedFlowEnvironmentName;
      CurrPage.FlowAddin.LoadFlows(FlowServiceManagement.GetFlowEnvironmentID);
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryInitialize@2();
    BEGIN
      Initialize;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@3();
    BEGIN
      AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,true);
    END;

    LOCAL PROCEDURE ShowErrorMessage@6(TextToShow@1000 : Text);
    BEGIN
      IsErrorMessageVisible := true;
      IsUserReadyForFlow := false;
      if TextToShow = '' then
        TextToShow := FlowServiceManagement.GetGenericError;
      ErrorMessageText := TextToShow;
      CurrPage.UPDATE;
    END;

    EVENT FlowAddin@-2::ControlAddInReady@3();
    BEGIN
      CurrPage.FlowAddin.Initialize(
        FlowServiceManagement.GetFlowUrl,FlowServiceManagement.GetLocale,
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,false),
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowGraphResourceUrl,FlowServiceManagement.GetFlowResourceName,false));

      LoadFlows;

      AddInReady := true;
    END;

    EVENT FlowAddin@-2::ErrorOccurred@4(error@1001 : Text;description@1000 : Text);
    VAR
      Company@1002 : Record Company;
      ActivityLog@1003 : Record "Activity Log";
    BEGIN
      Company.GET(COMPANYNAME); // Dummy record to attach to activity log
      ActivityLog.LogActivityForUser(
        Company.RECORDID,ActivityLog.Status::Failed,'Microsoft Flow',description,error,USERID);
      ShowErrorMessage(FlowServiceManagement.GetGenericError);
    END;

    EVENT FlowAddin@-2::Refresh@5();
    BEGIN
      if AddInReady then
        LoadFlows;
    END;

    BEGIN
    END.
  }
}

