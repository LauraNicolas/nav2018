OBJECT Page 5920 Service Document Log
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Service Document Log;
    SourceTable="Service Document Log";
    DataCaptionExpr=GetCaptionHeader;
    SourceTableView=SORTING("Change Date","Change Time")
                    ORDER(Descending);
    PageType=List;
    RefreshOnActivate=true;
    OnInit=BEGIN
             DocumentNoVisible := true;
             DocumentTypeVisible := true;
           END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 17      ;2   ;Action    ;
                      Name=&Delete Service Document Log;
                      Ellipsis=true;
                      CaptionML=ENU=&Delete Service Document Log;
                      ToolTipML=ENU=Delete the automatically generated service document log entries, for example, the unnecessary or outdated ones.;
                      ApplicationArea=#Service;
                      Image=Delete;
                      OnAction=VAR
                                 ServOrderLog@1002 : Record "Service Document Log";
                                 DeleteServOrderLog@1000 : Report "Delete Service Document Log";
                               BEGIN
                                 ServOrderLog.SETRANGE("Document Type","Document Type");
                                 ServOrderLog.SETRANGE("Document No.","Document No.");
                                 DeleteServOrderLog.SETTABLEVIEW(ServOrderLog);
                                 DeleteServOrderLog.RUNMODAL;

                                 if DeleteServOrderLog.GetOnPostReportStatus then begin
                                   ServOrderLog.RESET;
                                   DeleteServOrderLog.GetServDocLog(ServOrderLog);
                                   COPYFILTERS(ServOrderLog);
                                   DELETEALL;
                                   RESET;
                                   SETCURRENTKEY("Change Date","Change Time");
                                   ASCENDING(false);
                                 end;
                               END;
                                }
      { 18      ;1   ;Action    ;
                      Name=&Show;
                      CaptionML=ENU=&Show;
                      ToolTipML=ENU=View the log details.;
                      ApplicationArea=#Service;
                      Promoted=true;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServShptHeader@1001 : Record "Service Shipment Header";
                                 ServInvHeader@1002 : Record "Service Invoice Header";
                                 ServCrMemoHeader@1003 : Record "Service Cr.Memo Header";
                                 PageManagement@1000 : Codeunit "Page Management";
                                 isError@1004 : Boolean;
                               BEGIN
                                 if "Document Type" in
                                    ["Document Type"::Order,"Document Type"::Quote,
                                     "Document Type"::Invoice,"Document Type"::"Credit Memo"]
                                 then
                                   if ServOrderHeaderRec.GET("Document Type","Document No.") then begin
                                     isError := false;
                                     PageManagement.PageRun(ServOrderHeaderRec);
                                   end else
                                     isError := true
                                 else begin // posted documents
                                   isError := true;
                                   case "Document Type" of
                                     "Document Type"::Shipment:
                                       if ServShptHeader.GET("Document No.") then begin
                                         isError := false;
                                         PAGE.RUN(PAGE::"Posted Service Shipment",ServShptHeader);
                                       end;
                                     "Document Type"::"Posted Invoice":
                                       if ServInvHeader.GET("Document No.") then begin
                                         isError := false;
                                         PAGE.RUN(PAGE::"Posted Service Invoice",ServInvHeader);
                                       end;
                                     "Document Type"::"Posted Credit Memo":
                                       if ServCrMemoHeader.GET("Document No.") then begin
                                         isError := false;
                                         PAGE.RUN(PAGE::"Posted Service Credit Memo",ServCrMemoHeader);
                                       end;
                                   end;
                                 end;
                                 if isError then
                                   ERROR(Text001,"Document Type","Document No.");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 12  ;2   ;Field     ;
                Name=Document Type;
                ToolTipML=ENU=Specifies the type of the service document that underwent changes.;
                ApplicationArea=#Service;
                SourceExpr="Document Type";
                Visible=DocumentTypeVisible;
                ImplicitType=Option }

    { 29  ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies the number of the service document that has undergone changes.;
                ApplicationArea=#Service;
                SourceExpr="Document No.";
                Visible=DocumentNoVisible;
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=Service Item Line No.;
                ToolTipML=ENU=Specifies the number of the service item line, if the event is linked to a service item line.;
                ApplicationArea=#Service;
                SourceExpr="Service Item Line No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 31  ;2   ;Field     ;
                Name=Entry No.;
                ToolTipML=ENU=Specifies the number assigned to this entry.;
                ApplicationArea=#Service;
                SourceExpr="Entry No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 33  ;2   ;Field     ;
                Name=Description;
                CaptionML=ENU=Description;
                ToolTipML=ENU=Specifies the description of the event that occurred to a particular service document.;
                ApplicationArea=#Service;
                SourceExpr=ServLogMgt.ServOrderEventDescription("Event No.") }

    { 2   ;2   ;Field     ;
                Name=After;
                ToolTipML=ENU=Specifies the contents of the modified field after the event takes place.;
                ApplicationArea=#Service;
                SourceExpr=After;
                ImplicitType=Text50 }

    { 4   ;2   ;Field     ;
                Name=Before;
                ToolTipML=ENU=Specifies the contents of the modified field before the event takes place.;
                ApplicationArea=#Service;
                SourceExpr=Before;
                ImplicitType=Text50 }

    { 6   ;2   ;Field     ;
                Name=Change Date;
                ToolTipML=ENU=Specifies the date of the event.;
                ApplicationArea=#Service;
                SourceExpr="Change Date";
                ImplicitType=Date }

    { 8   ;2   ;Field     ;
                Name=Change Time;
                ToolTipML=ENU=Specifies the time of the event.;
                ApplicationArea=#Service;
                SourceExpr="Change Time";
                ImplicitType=Time }

    { 10  ;2   ;Field     ;
                Name=User ID;
                ToolTipML=ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                ApplicationArea=#Service;
                SourceExpr="User ID";
                ImplicitType=Code50 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ServOrderHeaderRec@1001 : Record "Service Header";
      ServLogMgt@1000 : Codeunit ServLogManagement;
      Text001@1003 : TextConst '@@@=Service Order 2001 does not exist.;ENU=Service %1 %2 does not exist.';
      DocumentTypeVisible@19012068 : Boolean INDATASET;
      DocumentNoVisible@19042234 : Boolean INDATASET;

    LOCAL PROCEDURE GetCaptionHeader@1() : Text[250];
    VAR
      ServHeader@1000 : Record "Service Header";
    BEGIN
      if GETFILTER("Document No.") <> '' then begin
        DocumentTypeVisible := false;
        DocumentNoVisible := false;
        if ServHeader.GET("Document Type","Document No.") then
          exit(FORMAT("Document Type") + ' ' + "Document No." + ' ' + ServHeader.Description);

        exit(FORMAT("Document Type") + ' ' + "Document No.");
      end;

      DocumentTypeVisible := true;
      DocumentNoVisible := true;
      exit('');
    END;

    BEGIN
    END.
  }
}

