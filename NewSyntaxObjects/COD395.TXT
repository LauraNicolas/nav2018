OBJECT Codeunit 395 FinChrgMemo-Issue
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Cust. Ledger Entry"=rm,
                TableData "Reminder/Fin. Charge Entry"=rimd,
                TableData "Issued Fin. Charge Memo Header"=rimd,
                TableData "Issued Fin. Charge Memo Line"=rimd;
    OnRun=VAR
            CustPostingGr@1002 : Record "Customer Posting Group";
            CustLedgEntry@1004 : Record "Cust. Ledger Entry";
            CustLedgEntry2@1003 : Record "Cust. Ledger Entry";
            FinChrgMemoLine@1001 : Record "Finance Charge Memo Line";
            ReminderFinChargeEntry@1000 : Record "Reminder/Fin. Charge Entry";
            FinChrgCommentLine@1006 : Record "Fin. Charge Comment Line";
          BEGIN
            OnBeforeIssueFinChargeMemo(FinChrgMemoHeader);

            with FinChrgMemoHeader do begin
              UpdateFinanceChargeRounding(FinChrgMemoHeader);
              if (PostingDate <> 0D) and (ReplacePostingDate or ("Posting Date" = 0D)) then
                VALIDATE("Posting Date",PostingDate);
              TESTFIELD("Customer No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Document Date");
              TESTFIELD("Due Date");
              TESTFIELD("Customer Posting Group");
              if not DimMgt.CheckDimIDComb("Dimension Set ID") then
                ERROR(
                  Text002,
                  TABLECAPTION,"No.",DimMgt.GetDimCombErr);

              TableID[1] := DATABASE::Customer;
              No[1] := "Customer No.";
              if not DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") then
                ERROR(
                  Text003,
                  TABLECAPTION,"No.",DimMgt.GetDimValuePostingErr);

              CustPostingGr.GET("Customer Posting Group");
              CALCFIELDS("Interest Amount","Additional Fee","Remaining Amount");
              if ("Interest Amount" = 0) and ("Additional Fee" = 0) and ("Remaining Amount" = 0) then
                ERROR(Text000);
              SourceCodeSetup.GET;
              SourceCodeSetup.TESTFIELD("Finance Charge Memo");
              SrcCode := SourceCodeSetup."Finance Charge Memo";

              if ("Issuing No." = '') and ("No. Series" <> "Issuing No. Series") then begin
                TESTFIELD("Issuing No. Series");
                "Issuing No." := NoSeriesMgt.GetNextNo("Issuing No. Series","Posting Date",true);
                MODIFY;
                COMMIT;
              end;
              if "Issuing No." = '' then
                DocNo := "No."
              else
                DocNo := "Issuing No.";

              FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","No.");
              if FinChrgMemoLine.FIND('-') then
                repeat
                  case FinChrgMemoLine.Type of
                    FinChrgMemoLine.Type::" ":
                      FinChrgMemoLine.TESTFIELD(Amount,0);
                    FinChrgMemoLine.Type::"G/L Account":
                      if (FinChrgMemoLine.Amount <> 0) and "Post Additional Fee" then begin
                        FinChrgMemoLine.TESTFIELD("No.");
                        InitGenJnlLine(GenJnlLine."Account Type"::"G/L Account",
                          FinChrgMemoLine."No.",
                          FinChrgMemoLine."Line Type" = FinChrgMemoLine."Line Type"::Rounding);
                        GenJnlLine."Gen. Prod. Posting Group" := FinChrgMemoLine."Gen. Prod. Posting Group";
                        GenJnlLine."VAT Prod. Posting Group" := FinChrgMemoLine."VAT Prod. Posting Group";
                        GenJnlLine."VAT Calculation Type" := FinChrgMemoLine."VAT Calculation Type";
                        if FinChrgMemoLine."VAT Calculation Type" =
                           FinChrgMemoLine."VAT Calculation Type"::"Sales Tax"
                        then begin
                          GenJnlLine."Tax Area Code" := "Tax Area Code";
                          GenJnlLine."Tax Liable" := "Tax Liable";
                          GenJnlLine."Tax Group Code" := FinChrgMemoLine."Tax Group Code";
                        end;
                        GenJnlLine."VAT %" := FinChrgMemoLine."VAT %";
                        GenJnlLine.VALIDATE(Amount,-FinChrgMemoLine.Amount - FinChrgMemoLine."VAT Amount");
                        GenJnlLine."VAT Amount" := -FinChrgMemoLine."VAT Amount";
                        GenJnlLine.UpdateLineBalance;
                        TotalAmount := TotalAmount - GenJnlLine.Amount;
                        TotalAmountLCY := TotalAmountLCY - GenJnlLine."Balance (LCY)";
                        GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
                        GenJnlLine.INSERT;
                      end;
                    FinChrgMemoLine.Type::"Customer Ledger Entry":
                      begin
                        FinChrgMemoLine.TESTFIELD("Entry No.");
                        CustLedgEntry.GET(FinChrgMemoLine."Entry No.");
                        CustLedgEntry.TESTFIELD("Currency Code","Currency Code");
                        if FinChrgMemoLine.Amount < 0 then
                          FinChrgMemoLine.FIELDERROR(Amount,Text001);
                        FinChrgMemoInterestAmount := FinChrgMemoInterestAmount + FinChrgMemoLine.Amount;
                        FinChrgMemoInterestVATAmount := FinChrgMemoInterestVATAmount + FinChrgMemoLine."VAT Amount";
                      end;
                  end;
                until FinChrgMemoLine.NEXT = 0;

              if (FinChrgMemoInterestAmount <> 0) and "Post Interest" then begin
                InitGenJnlLine(GenJnlLine."Account Type"::"G/L Account",CustPostingGr.GetInterestAccount,true);
                GenJnlLine.VALIDATE("VAT Bus. Posting Group","VAT Bus. Posting Group");
                GenJnlLine.VALIDATE(Amount,-FinChrgMemoInterestAmount - FinChrgMemoInterestVATAmount);
                GenJnlLine.UpdateLineBalance;
                TotalAmount := TotalAmount - GenJnlLine.Amount;
                TotalAmountLCY := TotalAmountLCY - GenJnlLine."Balance (LCY)";
                GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
                GenJnlLine.INSERT;
              end;

              if (TotalAmount <> 0) or (TotalAmountLCY <> 0) then begin
                InitGenJnlLine(GenJnlLine."Account Type"::Customer,"Customer No.",true);
                GenJnlLine.VALIDATE(Amount,TotalAmount);
                GenJnlLine.VALIDATE("Amount (LCY)",TotalAmountLCY);
                GenJnlLine.INSERT;
              end;
              if GenJnlLine.FIND('-') then
                repeat
                  GenJnlLine2 := GenJnlLine;
                  GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
                  GenJnlPostLine.RunWithCheck(GenJnlLine2);
                until GenJnlLine.NEXT = 0;

              GenJnlLine.DELETEALL;

              if FinChrgMemoInterestAmount <> 0 then begin
                TESTFIELD("Fin. Charge Terms Code");
                FinChrgTerms.GET("Fin. Charge Terms Code");
                if FinChrgTerms."Interest Calculation" in
                   [FinChrgTerms."Interest Calculation"::"Closed Entries",
                    FinChrgTerms."Interest Calculation"::"All Entries"]
                then begin
                  FinChrgMemoLine.SETRANGE(Type,FinChrgMemoLine.Type::"Customer Ledger Entry");
                  if FinChrgMemoLine.FIND('-') then
                    repeat
                      CustLedgEntry.GET(FinChrgMemoLine."Entry No.");
                      CustLedgEntry.SETFILTER("Date Filter",'..%1',"Document Date");
                      CustLedgEntry.CALCFIELDS("Remaining Amount");
                      if CustLedgEntry."Remaining Amount" = 0 then begin
                        CustLedgEntry."Calculate Interest" := false;
                        CustLedgEntry.MODIFY;
                      end;
                      CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                      CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
                      CustLedgEntry2.SETRANGE("Closing Interest Calculated",false);
                      CustLedgEntry2.MODIFYALL("Closing Interest Calculated",true);
                    until FinChrgMemoLine.NEXT = 0;
                  FinChrgMemoLine.SETRANGE(Type);
                end;
              end;

              InsertIssuedFinChrgMemoHeader(FinChrgMemoHeader,IssuedFinChrgMemoHeader);

              if NextEntryNo = 0 then begin
                ReminderFinChargeEntry.LOCKTABLE;
                if ReminderFinChargeEntry.FINDLAST then
                  NextEntryNo := ReminderFinChargeEntry."Entry No." + 1
                else
                  NextEntryNo := 1;
              end;

              FinChrgCommentLine.CopyComments(
                FinChrgCommentLine.Type::"Finance Charge Memo",FinChrgCommentLine.Type::"Issued Finance Charge Memo","No.",
                IssuedFinChrgMemoHeader."No.");

              if FinChrgMemoLine.FINDSET then
                repeat
                  if FinChrgMemoLine.Type = FinChrgMemoLine.Type::"Customer Ledger Entry" then begin
                    InsertFinChargeEntry(IssuedFinChrgMemoHeader,FinChrgMemoLine);
                    NextEntryNo := NextEntryNo + 1;
                  end;
                  InsertIssuedFinChrgMemoLine(FinChrgMemoLine,IssuedFinChrgMemoHeader."No.");
                until FinChrgMemoLine.NEXT = 0;

              FinChrgMemoLine.DELETEALL;
              DELETE;
            end;

            OnAfterIssueFinChargeMemo(FinChrgMemoHeader,IssuedFinChrgMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There is nothing to issue.';
      Text001@1001 : TextConst 'ENU=must be positive or 0';
      Text002@1002 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3';
      Text003@1003 : TextConst 'ENU=A dimension in %1 %2 has caused an error. %3';
      SourceCodeSetup@1004 : Record "Source Code Setup";
      FinChrgTerms@1008 : Record "Finance Charge Terms";
      FinChrgMemoHeader@1009 : Record "Finance Charge Memo Header";
      IssuedFinChrgMemoHeader@1011 : Record "Issued Fin. Charge Memo Header";
      GenJnlLine@1016 : TEMPORARY Record "Gen. Journal Line";
      GenJnlLine2@1017 : Record "Gen. Journal Line";
      SourceCode@1018 : Record "Source Code";
      DimMgt@1022 : Codeunit DimensionManagement;
      NoSeriesMgt@1023 : Codeunit NoSeriesManagement;
      GenJnlPostLine@1024 : Codeunit "Gen. Jnl.-Post Line";
      DocNo@1025 : Code[20];
      NextEntryNo@1026 : Integer;
      ReplacePostingDate@1027 : Boolean;
      PostingDate@1028 : Date;
      SrcCode@1029 : Code[10];
      FinChrgMemoInterestAmount@1030 : Decimal;
      FinChrgMemoInterestVATAmount@1031 : Decimal;
      TotalAmount@1032 : Decimal;
      TotalAmountLCY@1033 : Decimal;
      TableID@1034 : ARRAY [10] OF Integer;
      No@1035 : ARRAY [10] OF Code[20];

    [External]
    PROCEDURE Set@6(VAR NewFinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";NewReplacePostingDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      FinChrgMemoHeader := NewFinChrgMemoHeader;
      ReplacePostingDate := NewReplacePostingDate;
      PostingDate := NewPostingDate;
    END;

    [External]
    PROCEDURE GetIssuedFinChrgMemo@10(VAR NewIssuedFinChrgMemoHeader@1000 : Record "Issued Fin. Charge Memo Header");
    BEGIN
      NewIssuedFinChrgMemoHeader := IssuedFinChrgMemoHeader;
    END;

    LOCAL PROCEDURE InitGenJnlLine@7(AccType@1000 : Integer;AccNo@1001 : Code[20];SystemCreatedEntry@1002 : Boolean);
    BEGIN
      with FinChrgMemoHeader do begin
        GenJnlLine.INIT;
        GenJnlLine."Line No." := GenJnlLine."Line No." + 1;
        GenJnlLine."Document Type" := GenJnlLine."Document Type"::"Finance Charge Memo";
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine."Account Type" := AccType;
        GenJnlLine."Account No." := AccNo;
        GenJnlLine.VALIDATE("Account No.");
        if GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" then begin
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
          GenJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
          GenJnlLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        end;
        GenJnlLine.VALIDATE("Currency Code","Currency Code");
        if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer then begin
          GenJnlLine.VALIDATE(Amount,TotalAmount);
          GenJnlLine.VALIDATE("Amount (LCY)",TotalAmountLCY);
          GenJnlLine."Due Date" := "Due Date";
        end;
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."System-Created Entry" := SystemCreatedEntry;
        GenJnlLine."Posting No. Series" := "Issuing No. Series";
        GenJnlLine."Salespers./Purch. Code" := '';
      end;
    END;

    [External]
    PROCEDURE DeleteIssuedFinChrgLines@1(IssuedFinChrgMemoHeader@1000 : Record "Issued Fin. Charge Memo Header");
    VAR
      IssuedFinChrgMemoLine@1001 : Record "Issued Fin. Charge Memo Line";
    BEGIN
      IssuedFinChrgMemoLine.SETRANGE("Finance Charge Memo No.",IssuedFinChrgMemoHeader."No.");
      IssuedFinChrgMemoLine.DELETEALL;
    END;

    [External]
    PROCEDURE IncrNoPrinted@3(VAR IssuedFinChrgMemoHeader@1000 : Record "Issued Fin. Charge Memo Header");
    BEGIN
      with IssuedFinChrgMemoHeader do begin
        FIND;
        "No. Printed" := "No. Printed" + 1;
        MODIFY;
        COMMIT;
      end;
    END;

    [External]
    PROCEDURE TestDeleteHeader@19(FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";VAR IssuedFinChrgMemoHeader@1001 : Record "Issued Fin. Charge Memo Header");
    BEGIN
      with FinChrgMemoHeader do begin
        CLEAR(IssuedFinChrgMemoHeader);
        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        if ("Issuing No. Series" <> '') and
           (("Issuing No." <> '') or ("No. Series" = "Issuing No. Series"))
        then begin
          IssuedFinChrgMemoHeader.TRANSFERFIELDS(FinChrgMemoHeader);
          if "Issuing No." <> '' then
            IssuedFinChrgMemoHeader."No." := "Issuing No.";
          IssuedFinChrgMemoHeader."Pre-Assigned No. Series" := "No. Series";
          IssuedFinChrgMemoHeader."Pre-Assigned No." := "No.";
          IssuedFinChrgMemoHeader."Posting Date" := TODAY;
          IssuedFinChrgMemoHeader."User ID" := USERID;
          IssuedFinChrgMemoHeader."Source Code" := SourceCode.Code;
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteHeader@18(FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";VAR IssuedFinChrgMemoHeader@1001 : Record "Issued Fin. Charge Memo Header");
    VAR
      IssuedFinChrgMemoLine@1002 : Record "Issued Fin. Charge Memo Line";
    BEGIN
      with FinChrgMemoHeader do begin
        TestDeleteHeader(FinChrgMemoHeader,IssuedFinChrgMemoHeader);
        if IssuedFinChrgMemoHeader."No." <> '' then begin
          IssuedFinChrgMemoHeader."Shortcut Dimension 1 Code" := '';
          IssuedFinChrgMemoHeader."Shortcut Dimension 2 Code" := '';
          IssuedFinChrgMemoHeader.INSERT;
          IssuedFinChrgMemoLine.INIT;
          IssuedFinChrgMemoLine."Finance Charge Memo No." := "No.";
          IssuedFinChrgMemoLine."Line No." := 10000;
          IssuedFinChrgMemoLine.Description := SourceCode.Description;
          IssuedFinChrgMemoLine.INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertIssuedFinChrgMemoHeader@5(FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";VAR IssuedFinChrgMemoHeader@1001 : Record "Issued Fin. Charge Memo Header");
    BEGIN
      IssuedFinChrgMemoHeader.INIT;
      IssuedFinChrgMemoHeader.TRANSFERFIELDS(FinChrgMemoHeader);
      IssuedFinChrgMemoHeader."No." := DocNo;
      IssuedFinChrgMemoHeader."Pre-Assigned No." := FinChrgMemoHeader."No.";
      IssuedFinChrgMemoHeader."Source Code" := SrcCode;
      IssuedFinChrgMemoHeader."User ID" := USERID;
      IssuedFinChrgMemoHeader.INSERT;
    END;

    LOCAL PROCEDURE InsertIssuedFinChrgMemoLine@8(FinChrgMemoLine@1000 : Record "Finance Charge Memo Line";IssuedDocNo@1001 : Code[20]);
    VAR
      IssuedFinChrgMemoLine@1002 : Record "Issued Fin. Charge Memo Line";
    BEGIN
      IssuedFinChrgMemoLine.INIT;
      IssuedFinChrgMemoLine.TRANSFERFIELDS(FinChrgMemoLine);
      IssuedFinChrgMemoLine."Finance Charge Memo No." := IssuedDocNo;
      IssuedFinChrgMemoLine.INSERT;
    END;

    LOCAL PROCEDURE InsertFinChargeEntry@11(IssuedFinChrgMemoHeader@1000 : Record "Issued Fin. Charge Memo Header";FinChrgMemoLine@1001 : Record "Finance Charge Memo Line");
    VAR
      ReminderFinChargeEntry@1002 : Record "Reminder/Fin. Charge Entry";
    BEGIN
      with ReminderFinChargeEntry do begin
        INIT;
        "Entry No." := NextEntryNo;
        Type := Type::"Finance Charge Memo";
        "No." := IssuedFinChrgMemoHeader."No.";
        "Posting Date" := IssuedFinChrgMemoHeader."Posting Date";
        "Due Date" := IssuedFinChrgMemoHeader."Due Date";
        "Document Date" := IssuedFinChrgMemoHeader."Document Date";
        "Customer No." := IssuedFinChrgMemoHeader."Customer No.";
        "Customer Entry No." := FinChrgMemoLine."Entry No.";
        "Document Type" := FinChrgMemoLine."Document Type";
        "Document No." := FinChrgMemoLine."Document No.";
        "Remaining Amount" := FinChrgMemoLine."Remaining Amount";
        "Interest Amount" := FinChrgMemoLine.Amount;
        "Interest Posted" := (FinChrgMemoInterestAmount <> 0) and FinChrgMemoHeader."Post Interest";
        "User ID" := USERID;
        INSERT;
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIssueFinChargeMemo@2(VAR FinChargeMemoHeader@1000 : Record "Finance Charge Memo Header";IssuedFinChargeMemoNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIssueFinChargeMemo@4(VAR FinChargeMemoHeader@1000 : Record "Finance Charge Memo Header");
    BEGIN
    END;

    BEGIN
    END.
  }
}

