OBJECT Page 6400 Flow Template Selector
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Select an Existing Flow Template;
    OnOpenPage=BEGIN
                 if FlowServiceManagement.IsPPE then begin
                   ShowErrorMessage(FlowServiceManagement.GetFlowPPEError);
                   exit;
                 end;

                 IsErrorMessageVisible := false;
                 if not TryInitialize then
                   ShowErrorMessage(GETLASTERRORTEXT);
                 if not FlowServiceManagement.IsUserReadyForFlow then
                   ERROR('');
                 IsUserReadyForFlow := true;
                 if SearchText = '' then
                   SearchText := DefaultSearchTxt;
                 SetSearchText(SearchText);

                 if not FlowServiceManagement.HasUserSelectedFlowEnvironment then
                   FlowServiceManagement.SetSelectedFlowEnvironmentIDToDefault;
               END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=FlowIntegration;
                ContainerType=ContentArea }

    { 7   ;1   ;Group     ;
                Name=Group7;
                GroupType=GridLayout }

    { 8   ;2   ;Group     ;
                Name=Group8;
                GroupType=Group }

    { 11  ;3   ;Group     ;
                Name=Group11;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 9   ;4   ;Field     ;
                Name=EnvironmentNameText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=EnvironmentNameText;
                Editable=False;
                ShowCaption=false }

    { 4   ;3   ;Group     ;
                Name=Group4;
                Visible=IsUserReadyForFlow AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 3   ;4   ;Field     ;
                Name=SearchFilter;
                CaptionML=ENU=Search Filter;
                ToolTipML=ENU=Specifies a search filter on the templates.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SearchText;
                OnLookup=BEGIN
                           if AddInReady then
                             CurrPage.FlowAddin.LoadTemplates(FlowServiceManagement.GetFlowEnvironmentID,SearchText,
                               FlowServiceManagement.GetFlowTemplatePageSize,FlowServiceManagement.GetFlowTemplateDestinationNew);
                         END;
                          }

    { 2   ;4   ;Field     ;
                Name=FlowAddin;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.FlowIntegration;PublicKeyToken=31bf3856ad364e35] }

    { 5   ;3   ;Group     ;
                Name=Group5;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 6   ;4   ;Field     ;
                Name=ErrorMessageText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorMessageText;
                Editable=False;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      AzureAdMgt@1001 : Codeunit "Azure AD Mgt.";
      FlowServiceManagement@1002 : Codeunit "Flow Service Management";
      SearchText@1000 : Text;
      ErrorMessageText@1003 : Text;
      IsErrorMessageVisible@1004 : Boolean;
      IsUserReadyForFlow@1005 : Boolean;
      AddInReady@1006 : Boolean;
      DefaultSearchTxt@1007 : TextConst 'ENU=Dynamics 365 for Finance and Operations';
      EnvironmentNameText@1008 : Text;

    PROCEDURE SetSearchText@3(Search@1000 : Text);
    BEGIN
      if Search = '' then
        Search := DefaultSearchTxt;
      SearchText := Search;
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      IsUserReadyForFlow := FlowServiceManagement.IsUserReadyForFlow;

      if not IsUserReadyForFlow then begin
        if AzureAdMgt.IsSaaS then
          ERROR(FlowServiceManagement.GetGenericError);
        if not TryAzureAdMgtGetAccessToken then
          ShowErrorMessage(GETLASTERRORTEXT);
        CurrPage.UPDATE;
      end;
    END;

    LOCAL PROCEDURE LoadTemplates@7();
    BEGIN
      EnvironmentNameText := FlowServiceManagement.GetSelectedFlowEnvironmentName;
      CurrPage.FlowAddin.LoadTemplates(FlowServiceManagement.GetFlowEnvironmentID,SearchText,
        FlowServiceManagement.GetFlowTemplatePageSize,FlowServiceManagement.GetFlowTemplateDestinationNew);
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryInitialize@2();
    BEGIN
      Initialize;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@4();
    BEGIN
      AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,true);
    END;

    LOCAL PROCEDURE ShowErrorMessage@5(TextToShow@1000 : Text);
    BEGIN
      IsErrorMessageVisible := true;
      IsUserReadyForFlow := false;
      if TextToShow = '' then
        TextToShow := FlowServiceManagement.GetGenericError;
      ErrorMessageText := TextToShow;
      CurrPage.UPDATE;
    END;

    [External]
    PROCEDURE GetSearchText@6() : Text;
    BEGIN
      exit(DefaultSearchTxt);
    END;

    EVENT FlowAddin@-2::ControlAddInReady@3();
    BEGIN
      CurrPage.FlowAddin.Initialize(
        FlowServiceManagement.GetFlowUrl,FlowServiceManagement.GetLocale,
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowARMResourceUrl,FlowServiceManagement.GetFlowResourceName,false),
        AzureAdMgt.GetAccessToken(FlowServiceManagement.GetFlowGraphResourceUrl,FlowServiceManagement.GetFlowResourceName,false));

      LoadTemplates;

      AddInReady := true;
    END;

    EVENT FlowAddin@-2::ErrorOccurred@4(error@1001 : Text;description@1000 : Text);
    VAR
      Company@1002 : Record Company;
      ActivityLog@1003 : Record "Activity Log";
    BEGIN
      Company.GET(COMPANYNAME); // Dummy record to attach to activity log
      ActivityLog.LogActivityForUser(
        Company.RECORDID,ActivityLog.Status::Failed,'Microsoft Flow',description,error,USERID);
      ShowErrorMessage(FlowServiceManagement.GetGenericError);
    END;

    EVENT FlowAddin@-2::Refresh@5();
    BEGIN
      if AddInReady then
        LoadTemplates;
    END;

    BEGIN
    END.
  }
}

