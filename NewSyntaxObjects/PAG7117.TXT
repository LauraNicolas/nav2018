OBJECT Page 7117 Sales Analysis Report
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Analysis Report;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Analysis Line";
    DataCaptionExpr=GetCaption;
    SourceTableView=WHERE("Analysis Area"=CONST(Sales));
    PageType=Card;
    OnOpenPage=VAR
                 AnalysisLineTemplate@1001 : Record "Analysis Line Template";
               BEGIN
                 if (NewCurrentReportName <> '') and (NewCurrentReportName <> CurrentReportName) then begin
                   CurrentReportName := NewCurrentReportName;
                   AnalysisReportMgt.CheckReportName(CurrentReportName,Rec);
                   ValidateReportName;
                   AnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
                   ValidateAnalysisTemplateName;
                 end;

                 AnalysisReportMgt.OpenAnalysisLines(CurrentLineTemplate,Rec);
                 AnalysisReportMgt.OpenColumns(CurrentColumnTemplate,Rec,AnalysisColumn);

                 AnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,AnalysisColumn);
                 AnalysisReportMgt.SetSourceType(Rec,CurrentSourceTypeFilter);
                 AnalysisReportMgt.SetSourceNo(Rec,CurrentSourceTypeNoFilter);

                 GLSetup.GET;

                 if AnalysisLineTemplate.GET(GETRANGEMAX("Analysis Area"),CurrentLineTemplate) then
                   if AnalysisLineTemplate."Item Analysis View Code" <> '' then
                     ItemAnalysisView.GET(GETRANGEMAX("Analysis Area"),AnalysisLineTemplate."Item Analysis View Code")
                   else begin
                     CLEAR(ItemAnalysisView);
                     ItemAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
                     ItemAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
                   end;

                 FindPeriod('');

                 NoOfColumns := SalesAnalysisMatrix.GetMatrixDimension;
                 Direction := Direction::Forward;

                 ClearPoints;
                 SetPointsAnalysisColumn;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 13      ;1   ;ActionGroup;
                      Name=&Actions;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 17      ;2   ;Action    ;
                      Name=Set Up &Lines;
                      Ellipsis=true;
                      CaptionML=ENU=Set Up &Lines;
                      ToolTipML=ENU=Open the list of analysis lines that exist for this type of analysis report, for example to set up new lines that you can select from.;
                      ApplicationArea=#SalesAnalysis;
                      Image=SetupLines;
                      OnAction=BEGIN
                                 AnalysisReportMgt.OpenAnalysisLinesForm(Rec,CurrentLineTemplate);
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 18      ;2   ;Action    ;
                      Name=Set Up &Columns;
                      Ellipsis=true;
                      CaptionML=ENU=Set Up &Columns;
                      ToolTipML=ENU=Open the list of analysis columns that exist for this type of analysis report, for example to set up new columns that you can select from.;
                      ApplicationArea=#SalesAnalysis;
                      Image=SetupColumns;
                      OnAction=BEGIN
                                 AnalysisReportMgt.OpenAnalysisColumnsForm(Rec,CurrentColumnTemplate);
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 19      ;2   ;Separator ;
                      Name=Separator19 }
      { 2       ;2   ;ActionGroup;
                      Name=Export to Excel;
                      CaptionML=ENU=Export to Excel;
                      Image=ExportToExcel }
      { 20      ;3   ;Action    ;
                      Name=Create New Document;
                      CaptionML=ENU=Create New Document;
                      ToolTipML=ENU=Open the analysis report in a new Excel workbook. This creates an Excel workbook on your device.;
                      ApplicationArea=#SalesAnalysis;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportAnalysisRepToExcel@1000 : Report "Export Analysis Rep. to Excel";
                               BEGIN
                                 ExportAnalysisRepToExcel.SetOptions(Rec,CurrentColumnTemplate,CurrentLineTemplate);
                                 ExportAnalysisRepToExcel.RUN;
                               END;
                                }
      { 4       ;3   ;Action    ;
                      Name=Update Existing Document;
                      CaptionML=ENU=Update Existing Document;
                      ToolTipML=ENU=Refresh the analysis report in an existing Excel workbook. You must specify the workbook that you want to update.;
                      ApplicationArea=#SalesAnalysis;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportAnalysisRepToExcel@1000 : Report "Export Analysis Rep. to Excel";
                               BEGIN
                                 ExportAnalysisRepToExcel.SetOptions(Rec,CurrentColumnTemplate,CurrentLineTemplate);
                                 ExportAnalysisRepToExcel.SetUpdateExistingWorksheet(true);
                                 ExportAnalysisRepToExcel.RUN;
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      Name=&Reports;
                      CaptionML=ENU=&Reports;
                      Image=Report }
      { 23      ;2   ;Action    ;
                      Name=Print;
                      Ellipsis=true;
                      CaptionML=ENU=Print;
                      ToolTipML=ENU=Print the information in the window. A print request window opens where you can specify what to include on the print-out.;
                      ApplicationArea=#SalesAnalysis;
                      Image=Print;
                      OnAction=VAR
                                 AnalysisReport@1006 : Report "Analysis Report";
                                 DateFilter@1005 : Text;
                                 ItemBudgetFilter@1004 : Text;
                                 LocationFilter@1003 : Text;
                                 Dim1Filter@1002 : Text;
                                 Dim2Filter@1001 : Text;
                                 Dim3Filter@1000 : Text;
                               BEGIN
                                 AnalysisReport.SetParams(GETRANGEMAX("Analysis Area"),CurrentReportName,CurrentLineTemplate,CurrentColumnTemplate);
                                 DateFilter := GETFILTER("Date Filter");
                                 ItemBudgetFilter := GETFILTER("Item Budget Filter");
                                 LocationFilter := GETFILTER("Location Filter");
                                 Dim1Filter := GETFILTER("Dimension 1 Filter");
                                 Dim2Filter := GETFILTER("Dimension 2 Filter");
                                 Dim3Filter := GETFILTER("Dimension 3 Filter");
                                 AnalysisReport.SetFilters(
                                   DateFilter,ItemBudgetFilter,LocationFilter,Dim1Filter,Dim2Filter,Dim3Filter,
                                   CurrentSourceTypeFilter,CurrentSourceTypeNoFilter);
                                 AnalysisReport.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the actual analysis report according to the selected filters and options.;
                      ApplicationArea=#SalesAnalysis;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetFilters;
                                 CLEAR(MatrixColumnCaptions);
                                 FillMatrixColumns;
                                 CLEAR(SalesAnalysisMatrix);
                                 SalesAnalysisMatrix.Load(AnalysisColumn,MatrixColumnCaptions,FirstLineNo,LastLineNo);
                                 SalesAnalysisMatrix.SETTABLEVIEW(AnalysisLine);
                                 SalesAnalysisMatrix.RUNMODAL;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#SalesAnalysis;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Direction := Direction::Backward;
                                 SetPointsAnalysisColumn;
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#SalesAnalysis;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Direction := Direction::Forward;
                                 SetPointsAnalysisColumn;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 29  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 40  ;2   ;Field     ;
                Name=CurrentReportName;
                CaptionML=ENU=Analysis Report Name;
                ToolTipML=ENU=Specifies the name of the analysis report.;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=CurrentReportName;
                OnValidate=BEGIN
                             AnalysisReportMgt.CheckReportName(CurrentReportName,Rec);
                             CurrentReportNameOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           if AnalysisReportMgt.LookupReportName(GETRANGEMAX("Analysis Area"),CurrentReportName) then begin
                             Text := CurrentReportName;
                             CurrentReportNameOnAfterValidate;
                             exit(true);
                           end;
                         END;

                ImplicitType=Code10 }

    { 9   ;2   ;Field     ;
                Name=CurrentLineTemplate;
                CaptionML=ENU=Analysis Line Template;
                ToolTipML=ENU=Specifies the line template that is used for the analysis view.;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=CurrentLineTemplate;
                OnValidate=BEGIN
                             AnalysisReportMgt.CheckAnalysisLineTemplName(CurrentLineTemplate,Rec);
                             CurrentLineTemplateOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           CurrPage.SAVERECORD;
                           AnalysisReportMgt.LookupAnalysisLineTemplName(CurrentLineTemplate,Rec);
                           ValidateAnalysisTemplateName;
                           CurrPage.UPDATE(false);
                         END;

                ImplicitType=Code10 }

    { 8   ;2   ;Field     ;
                Name=CurrentColumnTemplate;
                CaptionML=ENU=Analysis Column Template;
                ToolTipML=ENU=Specifies the column template that is used for the analysis view.;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=CurrentColumnTemplate;
                OnValidate=BEGIN
                             AnalysisReportMgt.GetColumnTemplate(GETRANGEMAX("Analysis Area"),CurrentColumnTemplate);
                             CurrentColumnTemplateOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           if AnalysisReportMgt.LookupColumnName(GETRANGEMAX("Analysis Area"),CurrentColumnTemplate) then begin
                             Text := CurrentColumnTemplate;
                             CurrentColumnTemplateOnAfterValidate;
                             exit(true);
                           end;
                         END;

                ImplicitType=Code10 }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 27  ;2   ;Field     ;
                Name=CurrentSourceTypeFilter;
                CaptionML=ENU=Source Type Filter;
                ToolTipML=ENU=Specifies filters for what is shown in the analysis view.;
                OptionCaptionML=ENU=" ,Customer,Vendor,Item";
                ApplicationArea=#SalesAnalysis;
                SourceExpr=CurrentSourceTypeFilter;
                OnValidate=BEGIN
                             SETRANGE("Source Type Filter",CurrentSourceTypeFilter);
                             CurrentSourceTypeNoFilter := '';
                             AnalysisReportMgt.SetSourceNo(Rec,CurrentSourceTypeNoFilter);
                             CurrentSourceTypeFilterOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 25  ;2   ;Field     ;
                Name=CurrentSourceTypeNoFilter;
                CaptionML=ENU=Source No. Filter;
                ToolTipML=ENU=Specifies filters for what is shown in the analysis view.;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=CurrentSourceTypeNoFilter;
                OnValidate=BEGIN
                             CurrentSourceTypeNoFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           AnalysisReportMgt.LookupSourceNo(Rec,CurrentSourceTypeFilter,CurrentSourceTypeNoFilter);
                           CurrPage.UPDATE(false);
                         END;

                ImplicitType=Text }

    { 1906098301;1;Group  ;
                Name=Matrix Options;
                CaptionML=ENU=Matrix Options }

    { 3   ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                           END;

                ImplicitType=Option }

    { 5   ;2   ;Field     ;
                Name=Column Set;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#SalesAnalysis;
                SourceExpr=ColumnsSet }

  }
  CODE
  {
    VAR
      GLSetup@1017 : Record "General Ledger Setup";
      AnalysisColumn@1003 : TEMPORARY Record "Analysis Column";
      ItemAnalysisView@1016 : Record "Item Analysis View";
      AnalysisLine@1020 : Record "Analysis Line";
      AnalysisReportMgt@1000 : Codeunit "Analysis Report Management";
      SalesAnalysisMatrix@1004 : Page "Sales Analysis Matrix";
      CurrentReportName@1005 : Code[10];
      CurrentLineTemplate@1001 : Code[10];
      CurrentColumnTemplate@1002 : Code[10];
      NewCurrentReportName@1010 : Code[10];
      CurrentSourceTypeNoFilter@1015 : Text;
      CurrentSourceTypeFilter@1014 : '" ",Customer,Vendor,Item';
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      Direction@1012 : 'Backward,Forward';
      NoOfColumns@1013 : Integer;
      FirstLineNo@1018 : Integer;
      LastLineNo@1019 : Integer;
      FirstColumn@1021 : Text[1024];
      LastColumn@1022 : Text[1024];
      MatrixColumnCaptions@1009 : ARRAY [32] OF Text[1024];

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record Date;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
    BEGIN
      if GETFILTER("Date Filter") <> '' then begin
        Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
        if not PeriodFormMgt.FindDate('+',Calendar,PeriodType) then
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      end;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      if GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") then
        SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
    END;

    LOCAL PROCEDURE ValidateAnalysisTemplateName@3();
    VAR
      AnalysisLineTemplate@1001 : Record "Analysis Line Template";
      PrevItemAnalysisView@1000 : Record "Item Analysis View";
    BEGIN
      if AnalysisLineTemplate.GET(GETRANGEMAX("Analysis Area"),CurrentLineTemplate) then
        if (AnalysisLineTemplate."Default Column Template Name" <> '') and
           (CurrentColumnTemplate <> AnalysisLineTemplate."Default Column Template Name")
        then begin
          CurrentColumnTemplate := AnalysisLineTemplate."Default Column Template Name";
          AnalysisReportMgt.OpenColumns(CurrentColumnTemplate,Rec,AnalysisColumn);
          AnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,AnalysisColumn);
        end;

      if AnalysisLineTemplate."Item Analysis View Code" <> ItemAnalysisView.Code then begin
        PrevItemAnalysisView := ItemAnalysisView;
        if AnalysisLineTemplate."Item Analysis View Code" <> '' then
          ItemAnalysisView.GET(GETRANGEMAX("Analysis Area"),AnalysisLineTemplate."Item Analysis View Code")
        else begin
          CLEAR(ItemAnalysisView);
          ItemAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          ItemAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        end;
        if PrevItemAnalysisView."Dimension 1 Code" <> ItemAnalysisView."Dimension 1 Code" then
          SETRANGE("Dimension 1 Filter");
        if PrevItemAnalysisView."Dimension 2 Code" <> ItemAnalysisView."Dimension 2 Code" then
          SETRANGE("Dimension 2 Filter");
        if PrevItemAnalysisView."Dimension 3 Code" <> ItemAnalysisView."Dimension 3 Code" then
          SETRANGE("Dimension 3 Filter");
      end;
    END;

    LOCAL PROCEDURE ValidateReportName@1();
    VAR
      AnalysisReportName@1000 : Record "Analysis Report Name";
    BEGIN
      if AnalysisReportName.GET(GETRANGEMAX("Analysis Area"),CurrentReportName) then begin
        if AnalysisReportName."Analysis Line Template Name" <> '' then
          CurrentLineTemplate := AnalysisReportName."Analysis Line Template Name";
        if AnalysisReportName."Analysis Column Template Name" <> '' then
          CurrentColumnTemplate := AnalysisReportName."Analysis Column Template Name";
      end;
    END;

    LOCAL PROCEDURE GetCaption@6() : Text[250];
    VAR
      AnalysisReportName@1000 : Record "Analysis Report Name";
    BEGIN
      if CurrentReportName <> '' then
        if AnalysisReportName.GET("Analysis Area"::Sales,CurrentReportName) then
          exit(AnalysisReportName.Name + ' ' + AnalysisReportName.Description);
    END;

    [External]
    PROCEDURE SetFilters@4();
    BEGIN
      AnalysisColumn.RESET;
      AnalysisColumn.SETRANGE("Analysis Area","Analysis Area"::Sales);
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTemplate);

      AnalysisLine.COPY(Rec);
      AnalysisLine.SETRANGE("Analysis Area","Analysis Area"::Sales);
      AnalysisLine.SETRANGE("Analysis Line Template Name",CurrentLineTemplate);
    END;

    LOCAL PROCEDURE ColumnsSet@7() : Text[80];
    BEGIN
      if FirstColumn = LastColumn then
        exit(FirstColumn);

      exit(FirstColumn + '..' + LastColumn);
    END;

    LOCAL PROCEDURE SetPointsAnalysisColumn@22();
    VAR
      AnalysisColumn2@1013 : Record "Analysis Column";
      tmpFirstColumn@1000 : Text[80];
      tmpLastColumn@1001 : Text[80];
      tmpFirstLineNo@1003 : Integer;
      tmpLastLineNo@1002 : Integer;
    BEGIN
      AnalysisColumn2.SETRANGE("Analysis Area",AnalysisColumn2."Analysis Area"::Sales);
      AnalysisColumn2.SETRANGE("Analysis Column Template",CurrentColumnTemplate);

      if (Direction = Direction::Forward) or
         (FirstColumn = '')
      then begin
        if LastColumn = '' then begin
          AnalysisColumn2.FIND('-');
          tmpFirstColumn := AnalysisColumn2."Column Header";
          tmpFirstLineNo := AnalysisColumn2."Line No.";
          AnalysisColumn2.NEXT(NoOfColumns - 1);
          tmpLastColumn := AnalysisColumn2."Column Header";
          tmpLastLineNo := AnalysisColumn2."Line No.";
        end else begin
          if AnalysisColumn2.GET(AnalysisColumn2."Analysis Area"::Sales,CurrentColumnTemplate,LastLineNo) then;
          AnalysisColumn2.NEXT(1);
          tmpFirstColumn := AnalysisColumn2."Column Header";
          tmpFirstLineNo := AnalysisColumn2."Line No.";
          AnalysisColumn2.NEXT(NoOfColumns - 1);
          tmpLastColumn := AnalysisColumn2."Column Header";
          tmpLastLineNo := AnalysisColumn2."Line No.";
        end;
      end else begin
        if AnalysisColumn2.GET(AnalysisColumn2."Analysis Area"::Sales,CurrentColumnTemplate,FirstLineNo) then;
        AnalysisColumn2.NEXT(-1);
        tmpLastColumn := AnalysisColumn2."Column Header";
        tmpLastLineNo := AnalysisColumn2."Line No.";
        AnalysisColumn2.NEXT(-NoOfColumns + 1);
        tmpFirstColumn := AnalysisColumn2."Column Header";
        tmpFirstLineNo := AnalysisColumn2."Line No.";
      end;

      if (tmpFirstColumn = tmpLastColumn) and
         ((tmpLastColumn = LastColumn) or (tmpFirstColumn = FirstColumn))
      then
        exit;

      FirstColumn := tmpFirstColumn;
      LastColumn := tmpLastColumn;
      FirstLineNo := tmpFirstLineNo;
      LastLineNo := tmpLastLineNo;
    END;

    LOCAL PROCEDURE FillMatrixColumns@8();
    VAR
      AnalysisColumn2@1013 : Record "Analysis Column";
      i@1004 : Integer;
    BEGIN
      AnalysisColumn2.SETRANGE("Analysis Area",AnalysisColumn2."Analysis Area"::Sales);
      AnalysisColumn2.SETRANGE("Analysis Column Template",CurrentColumnTemplate);
      AnalysisColumn2.SETRANGE("Line No.",FirstLineNo,LastLineNo);
      AnalysisColumn2.SETFILTER(Show,'<>%1',AnalysisColumn2.Show::Never);
      i := 1;

      if AnalysisColumn2.FINDSET then
        repeat
          MatrixColumnCaptions[i] := AnalysisColumn2."Column Header";
          i := i + 1;
        until (AnalysisColumn2.NEXT = 0) or (i > ARRAYLEN(MatrixColumnCaptions));
    END;

    LOCAL PROCEDURE ClearPoints@5();
    BEGIN
      CLEAR(FirstColumn);
      CLEAR(LastColumn);
    END;

    [External]
    PROCEDURE SetReportName@10(NewReportName@1000 : Code[10]);
    BEGIN
      NewCurrentReportName := NewReportName;
    END;

    LOCAL PROCEDURE CurrentReportNameOnAfterValidate@19043622();
    BEGIN
      CurrPage.SAVERECORD;
      ValidateReportName;
      AnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
      ValidateAnalysisTemplateName;
      AnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,AnalysisColumn);
      CurrPage.UPDATE(false);
      ClearPoints;
      SetPointsAnalysisColumn;
    END;

    LOCAL PROCEDURE CurrentLineTemplateOnAfterValidate@19002239();
    BEGIN
      CurrPage.SAVERECORD;
      AnalysisReportMgt.SetAnalysisLineTemplName(CurrentLineTemplate,Rec);
      ValidateAnalysisTemplateName;
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE CurrentColumnTemplateOnAfterValidate@19007060();
    BEGIN
      AnalysisReportMgt.CopyColumnsToTemp(Rec,CurrentColumnTemplate,AnalysisColumn);
      CurrPage.UPDATE(false);
      ClearPoints;
      SetPointsAnalysisColumn;
    END;

    LOCAL PROCEDURE CurrentSourceTypeNoFilterOnAfterValidate@19027013();
    BEGIN
      AnalysisReportMgt.SetSourceNo(Rec,CurrentSourceTypeNoFilter);
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE CurrentSourceTypeFilterOnAfterValidate@19072332();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    BEGIN
    END.
  }
}

