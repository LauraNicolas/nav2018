OBJECT Page 192 Incoming Document Approvers
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Incoming Document Approvers;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=User;
    SourceTableView=SORTING("User Name")
                    WHERE(State=CONST(Enabled));
    DataCaptionFields="User Name";
    PageType=List;
    OnOpenPage=BEGIN
                 HideExternalUsers;
               END;

    OnAfterGetRecord=BEGIN
                       IsApprover := IncomingDocumentApprover.GET("User Security ID");
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=User Name;
                ToolTipML=ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                ApplicationArea=#Suite;
                SourceExpr="User Name";
                ImplicitType=Code50 }

    { 4   ;2   ;Field     ;
                Name=Full Name;
                ToolTipML=ENU=Specifies the full name of the user.;
                ApplicationArea=#Suite;
                SourceExpr="Full Name";
                ImplicitType=Text80 }

    { 5   ;2   ;Field     ;
                Name=IsApprover;
                CaptionML=ENU=Approver;
                ToolTipML=ENU=Specifies the incoming document approver. Note that this approver is not related to approval workflows.;
                ApplicationArea=#Suite;
                SourceExpr=IsApprover;
                OnValidate=BEGIN
                             IncomingDocumentApprover.SetIsApprover(Rec,IsApprover);
                           END;

                ImplicitType=Boolean }

    { 6   ;2   ;Field     ;
                Name=License Type;
                ToolTipML=ENU=Specifies the type of license that applies to the user. For more information, see License Types.;
                ApplicationArea=#Suite;
                SourceExpr="License Type";
                ImplicitType=Option }

  }
  CODE
  {
    VAR
      IncomingDocumentApprover@1001 : Record "Incoming Document Approver";
      IsApprover@1000 : Boolean;

    LOCAL PROCEDURE HideExternalUsers@5();
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      if not PermissionManager.SoftwareAsAService then
        exit;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    BEGIN
    END.
  }
}

