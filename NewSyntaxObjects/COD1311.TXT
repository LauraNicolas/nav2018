OBJECT Codeunit 1311 Activities Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE CalcOverdueSalesInvoiceAmount@11(CalledFromWebService@1002 : Boolean) Amount : Decimal;
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
      CustLedgEntryRemainAmtQuery@1000 : Query "Cust. Ledg. Entry Remain. Amt." SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Document_Type,CustLedgerEntry."Document Type"::Invoice);
      CustLedgEntryRemainAmtQuery.SETRANGE(IsOpen,true);
      if CalledFromWebService then
        CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',TODAY)
      else
        CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      CustLedgEntryRemainAmtQuery.OPEN;

      if CustLedgEntryRemainAmtQuery.READ then
        Amount := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    [External]
    PROCEDURE DrillDownCalcOverdueSalesInvoiceAmount@31();
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,true);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      CustLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      CustLedgerEntry.ASCENDING := false;

      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    [External]
    PROCEDURE CalcOverduePurchaseInvoiceAmount@8(CalledFromWebService@1002 : Boolean) Amount : Decimal;
    VAR
      VendorLedgerEntry@1000 : Record "Vendor Ledger Entry";
      VendLedgEntryRemainAmtQuery@1001 : Query "Vend. Ledg. Entry Remain. Amt." SECURITYFILTERING(Filtered);
    BEGIN
      VendLedgEntryRemainAmtQuery.SETRANGE(Document_Type,VendorLedgerEntry."Document Type"::Invoice);
      VendLedgEntryRemainAmtQuery.SETRANGE(IsOpen,true);
      if CalledFromWebService then
        VendLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',TODAY)
      else
        VendLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      VendLedgEntryRemainAmtQuery.OPEN;

      if VendLedgEntryRemainAmtQuery.READ then
        Amount := ABS(VendLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY);
    END;

    [External]
    PROCEDURE DrillDownOverduePurchaseInvoiceAmount@30();
    VAR
      VendorLedgerEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      VendorLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      VendorLedgerEntry.ASCENDING := true;

      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    [External]
    PROCEDURE CalcSalesThisMonthAmount@4(CalledFromWebService@1000 : Boolean) Amount : Decimal;
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
      CustLedgEntrySales@1002 : Query "Cust. Ledg. Entry Sales" SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntrySales.SETFILTER(Document_Type,'%1|%2',
        CustLedgerEntry."Document Type"::Invoice,CustLedgerEntry."Document Type"::"Credit Memo");
      if CalledFromWebService then
        CustLedgEntrySales.SETRANGE(Posting_Date,CALCDATE('<-CM>',TODAY),TODAY)
      else
        CustLedgEntrySales.SETRANGE(Posting_Date,CALCDATE('<-CM>',WORKDATE),WORKDATE);
      CustLedgEntrySales.OPEN;

      if CustLedgEntrySales.READ then
        Amount := CustLedgEntrySales.Sum_Sales_LCY;
    END;

    [External]
    PROCEDURE DrillDownSalesThisMonth@29();
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgerEntry.SETFILTER("Document Type",'%1|%2',
        CustLedgerEntry."Document Type"::Invoice,CustLedgerEntry."Document Type"::"Credit Memo");
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<-CM>',WORKDATE),WORKDATE);
      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    [External]
    PROCEDURE CalcSalesYTD@18() Amount : Decimal;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
      CustLedgEntrySales@1000 : Query "Cust. Ledg. Entry Sales" SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntrySales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(WORKDATE),WORKDATE);
      CustLedgEntrySales.OPEN;

      if CustLedgEntrySales.READ then
        Amount := CustLedgEntrySales.Sum_Sales_LCY;
    END;

    [External]
    PROCEDURE CalcTop10CustomerSalesYTD@14() Amount : Decimal;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
      Top10CustomerSales@1005 : Query "Top 10 Customer Sales";
    BEGIN
      // Total Sales (LCY) by top 10 list of customers year-to-date.
      Top10CustomerSales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(WORKDATE),WORKDATE);
      Top10CustomerSales.OPEN;

      while Top10CustomerSales.READ do
        Amount += Top10CustomerSales.Sum_Sales_LCY;
    END;

    [External]
    PROCEDURE CalcTop10CustomerSalesRatioYTD@7() Amount : Decimal;
    VAR
      TotalSales@1000 : Decimal;
    BEGIN
      // Ratio of Sales by top 10 list of customers year-to-date.
      TotalSales := CalcSalesYTD;
      if TotalSales <> 0 then
        Amount := CalcTop10CustomerSalesYTD / TotalSales;
    END;

    [External]
    PROCEDURE CalcAverageCollectionDays@3() AverageDays : Decimal;
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
      SumCollectionDays@1000 : Integer;
      CountInvoices@1003 : Integer;
    BEGIN
      GetPaidSalesInvoices(CustLedgerEntry);
      if CustLedgerEntry.FINDSET then begin
        repeat
          SumCollectionDays += (CustLedgerEntry."Closed at Date" - CustLedgerEntry."Posting Date");
          CountInvoices += 1;
        until CustLedgerEntry.NEXT = 0;

        AverageDays := SumCollectionDays / CountInvoices;
      end
    END;

    [External]
    PROCEDURE CalcUninvoicedBookings@2() : Integer;
    VAR
      TempBookingItem@1000 : TEMPORARY Record "Booking Item";
      BookingManager@1001 : Codeunit "Booking Manager";
    BEGIN
      BookingManager.GetBookingItems(TempBookingItem);
      exit(TempBookingItem.COUNT);
    END;

    LOCAL PROCEDURE GetPaidSalesInvoices@1(VAR CustLedgerEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,false);
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<CM-3M>',WORKDATE),WORKDATE);
      CustLedgerEntry.SETRANGE("Closed at Date",CALCDATE('<CM-3M>',WORKDATE),WORKDATE);
    END;

    [External]
    PROCEDURE CalcCashAccountsBalances@5() CashAccountBalance : Decimal;
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      GLAccount.SETRANGE("Account Category",GLAccount."Account Category"::Assets);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE("Account Subcategory Entry No.",3);
      if GLAccount.FINDSET then begin
        repeat
          GLAccount.CALCFIELDS(Balance);
          CashAccountBalance += GLAccount.Balance;
        until GLAccount.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE DrillDownCalcCashAccountsBalances@6();
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      GLAccount.SETRANGE("Account Category",GLAccount."Account Category"::Assets);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE("Account Subcategory Entry No.",3);
      PAGE.RUN(PAGE::"Chart of Accounts",GLAccount);
    END;

    BEGIN
    END.
  }
}

