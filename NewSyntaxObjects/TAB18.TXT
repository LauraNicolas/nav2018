OBJECT Table 18 Customer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Cust. Ledger Entry"=r,
                TableData Job=r,
                TableData "VAT Registration Log"=rd,
                TableData "Service Header"=r,
                TableData "Service Item"=rm,
                TableData "Service Contract Header"=rm,
                TableData "Sales Price"=rd,
                TableData "Sales Line Discount"=rd;
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               if "No." = '' then begin
                 SalesSetup.GET;
                 SalesSetup.TESTFIELD("Customer Nos.");
                 NoSeriesMgt.InitSeries(SalesSetup."Customer Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;

               if "Invoice Disc. Code" = '' then
                 "Invoice Disc. Code" := "No.";

               if not (InsertFromContact or (InsertFromTemplate and (Contact <> '')) or ISTEMPORARY) then
                 UpdateContFromCust.OnInsert(Rec);

               if "Salesperson Code" = '' then
                 SetDefaultSalesperson;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Customer,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;
               if (Name <> xRec.Name) or
                  ("Search Name" <> xRec."Search Name") or
                  ("Name 2" <> xRec."Name 2") or
                  (Address <> xRec.Address) or
                  ("Address 2" <> xRec."Address 2") or
                  (City <> xRec.City) or
                  ("Phone No." <> xRec."Phone No.") or
                  ("Telex No." <> xRec."Telex No.") or
                  ("Territory Code" <> xRec."Territory Code") or
                  ("Currency Code" <> xRec."Currency Code") or
                  ("Language Code" <> xRec."Language Code") or
                  ("Salesperson Code" <> xRec."Salesperson Code") or
                  ("Country/Region Code" <> xRec."Country/Region Code") or
                  ("Fax No." <> xRec."Fax No.") or
                  ("Telex Answer Back" <> xRec."Telex Answer Back") or
                  ("VAT Registration No." <> xRec."VAT Registration No.") or
                  ("Post Code" <> xRec."Post Code") or
                  (County <> xRec.County) or
                  ("E-Mail" <> xRec."E-Mail") or
                  ("Home Page" <> xRec."Home Page") or
                  (Contact <> xRec.Contact)
               then begin
                 MODIFY;
                 UpdateContFromCust.OnModify(Rec);
                 if not FIND then begin
                   RESET;
                   if FIND then;
                 end;
               end;
             END;

    OnDelete=VAR
               CampaignTargetGr@1000 : Record "Campaign Target Group";
               ContactBusRel@1001 : Record "Contact Business Relation";
               Job@1004 : Record Job;
               SocialListeningSearchTopic@1007 : Record "Social Listening Search Topic";
               StdCustSalesCode@1003 : Record "Standard Customer Sales Code";
               CustomReportSelection@1008 : Record "Custom Report Selection";
               MyCustomer@1005 : Record "My Customer";
               ServHeader@1009 : Record "Service Header";
               CampaignTargetGrMgmt@1002 : Codeunit "Campaign Target Group Mgt";
               VATRegistrationLogMgt@1006 : Codeunit "VAT Registration Log Mgt.";
             BEGIN
               ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);

               ServiceItem.SETRANGE("Customer No.","No.");
               if ServiceItem.FINDFIRST then
                 if CONFIRM(
                      Text008,
                      false,
                      TABLECAPTION,
                      "No.",
                      ServiceItem.FIELDCAPTION("Customer No."))
                 then
                   ServiceItem.MODIFYALL("Customer No.",'')
                 else
                   ERROR(Text009);

               Job.SETRANGE("Bill-to Customer No.","No.");
               if not Job.ISEMPTY then
                 ERROR(Text015,TABLECAPTION,"No.",Job.TABLECAPTION);

               MoveEntries.MoveCustEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Customer);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               CustBankAcc.SETRANGE("Customer No.","No.");
               CustBankAcc.DELETEALL;

               ShipToAddr.SETRANGE("Customer No.","No.");
               ShipToAddr.DELETEALL;

               SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
               SalesPrice.SETRANGE("Sales Code","No.");
               SalesPrice.DELETEALL;

               SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Customer);
               SalesLineDisc.SETRANGE("Sales Code","No.");
               SalesLineDisc.DELETEALL;

               SalesPrepmtPct.SETCURRENTKEY("Sales Type","Sales Code");
               SalesPrepmtPct.SETRANGE("Sales Type",SalesPrepmtPct."Sales Type"::Customer);
               SalesPrepmtPct.SETRANGE("Sales Code","No.");
               SalesPrepmtPct.DELETEALL;

               StdCustSalesCode.SETRANGE("Customer No.","No.");
               StdCustSalesCode.DELETEALL(true);

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               if not SocialListeningSearchTopic.ISEMPTY then begin
                 SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Customer,"No.");
                 SocialListeningSearchTopic.DELETEALL;
               end;

               SalesOrderLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
               SalesOrderLine.SETFILTER(
                 "Document Type",'%1|%2',
                 SalesOrderLine."Document Type"::Order,
                 SalesOrderLine."Document Type"::"Return Order");
               SalesOrderLine.SETRANGE("Bill-to Customer No.","No.");
               if SalesOrderLine.FINDFIRST then
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               SalesOrderLine.SETRANGE("Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Sell-to Customer No.","No.");
               if SalesOrderLine.FINDFIRST then
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               CampaignTargetGr.SETRANGE("No.","No.");
               CampaignTargetGr.SETRANGE(Type,CampaignTargetGr.Type::Customer);
               if CampaignTargetGr.FIND('-') then begin
                 ContactBusRel.SETRANGE("Link to Table",ContactBusRel."Link to Table"::Customer);
                 ContactBusRel.SETRANGE("No.","No.");
                 ContactBusRel.FINDFIRST;
                 repeat
                   CampaignTargetGrMgmt.ConverttoContact(Rec,ContactBusRel."Contact No.");
                 until CampaignTargetGr.NEXT = 0;
               end;

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Customer No.","No.");
               if not ServContract.ISEMPTY then
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Customer No.",'');

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Bill-to Customer No.","No.");
               if not ServContract.ISEMPTY then
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Bill-to Customer No.",'');

               ServHeader.SETCURRENTKEY("Customer No.","Order Date");
               ServHeader.SETRANGE("Customer No.","No.");
               if ServHeader.FINDFIRST then
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               ServHeader.SETRANGE("Bill-to Customer No.");
               if ServHeader.FINDFIRST then
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               UpdateContFromCust.OnDelete(Rec);

               CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
               CustomReportSelection.SETRANGE("Source No.","No.");
               CustomReportSelection.DELETEALL;

               MyCustomer.SETRANGE("Customer No.","No.");
               MyCustomer.DELETEALL;
               VATRegistrationLogMgt.DeleteCustomerLog(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Customer,"No.");
             END;

    OnRename=VAR
               CustomerTemplate@1000 : Record "Customer Template";
             BEGIN
               ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID);

               SetLastModifiedDateTime;
               if xRec."Invoice Disc. Code" = xRec."No." then
                 "Invoice Disc. Code" := "No.";
               CustomerTemplate.SETRANGE("Invoice Disc. Code",xRec."No.");
               CustomerTemplate.MODIFYALL("Invoice Disc. Code","No.");
             END;

    CaptionML=ENU=Customer;
    LookupPageID="Customer List";
    DrillDownPageID="Customer List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Customer Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                                if "Invoice Disc. Code" = '' then
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                if ("Search Name" = UPPERCASE(xRec.Name)) or ("Search Name" = '') then
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;OnValidate=BEGIN
                                                                if RMSetup.GET then
                                                                  if RMSetup."Bus. Rel. Code for Customers" <> '' then
                                                                    if (xRec.Contact = '') and (xRec."Primary Contact No." = '') and (Contact <> '') then begin
                                                                      MODIFY;
                                                                      UpdateContFromCust.OnModify(Rec);
                                                                      UpdateContFromCust.InsertNewContactPerson(Rec,false);
                                                                      MODIFY(true);
                                                                    end
                                                              END;

                                                   OnLookup=VAR
                                                              ContactBusinessRelation@1001 : Record "Contact Business Relation";
                                                              Cont@1000 : Record Contact;
                                                            BEGIN
                                                              if ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,"No.") then
                                                                Cont.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
                                                              else
                                                                Cont.SETRANGE("Company No.",'');

                                                              if "Primary Contact No." <> '' then
                                                                if Cont.GET("Primary Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                            END;

                                                   CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 11  ;   ;Document Sending Profile;Code20    ;TableRelation="Document Sending Profile".Code;
                                                   CaptionML=ENU=Document Sending Profile }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=ENU=Our Account No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=ENU=Chain Name }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=ENU=Budgeted Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=ENU=Credit Limit (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyId;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsId;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 29  ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Salesperson Code }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodId;
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                if "Shipping Agent Code" <> xRec."Shipping Agent Code" then
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=ENU=Place of Export }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCountryCode(City,"Post Code",County,"Country/Region Code");
                                                                if "Country/Region Code" <> xRec."Country/Region Code" then
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 36  ;   ;Collection Method   ;Code20        ;CaptionML=ENU=Collection Method }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE ("Table Name"=CONST(Customer),
                                                                                           "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 39  ;   ;Blocked             ;Option        ;OnValidate=VAR
                                                                CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
                                                                AccountingPeriod@1002 : Record "Accounting Period";
                                                                IdentityManagement@1000 : Codeunit "Identity Management";
                                                              BEGIN
                                                                if not IdentityManagement.IsInvAppId then
                                                                  exit;

                                                                CustLedgerEntry.RESET;
                                                                CustLedgerEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                CustLedgerEntry.SETRANGE("Customer No.","No.");
                                                                AccountingPeriod.SETRANGE(Closed,false);
                                                                if AccountingPeriod.FINDFIRST then
                                                                  CustLedgerEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                if not CustLedgerEntry.ISEMPTY then
                                                                  ERROR(CannotDeleteBecauseInInvErr,TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Ship,Invoice,All";
                                                   OptionString=" ",Ship,Invoice,All }
    { 40  ;   ;Invoice Copies      ;Integer       ;CaptionML=ENU=Invoice Copies }
    { 41  ;   ;Last Statement No.  ;Integer       ;CaptionML=ENU=Last Statement No. }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=ENU=Print Statements }
    { 45  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No. }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                PaymentMethod@1000 : Record "Payment Method";
                                                              BEGIN
                                                                if "Payment Method Code" = '' then
                                                                  exit;
                                                                PaymentMethod.GET("Payment Method Code");
                                                                if PaymentMethod."Direct Debit" and ("Payment Terms Code" = '') then
                                                                  VALIDATE("Payment Terms Code",PaymentMethod."Direct Debit Pmt. Terms Code");

                                                                UpdatePaymentMethodId;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 53  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=false }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Balance;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 62  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                             "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                             "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                             "Posting Date"=FIELD("Date Filter"),
                                                                                                             "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 63  ;   ;Profit (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Profit (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                              "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Inv. Discount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                     "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                     "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                     "Posting Date"=FIELD("Date Filter"),
                                                                                                                     "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Inv. Discounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                       "Entry Type"=FILTER("Payment Discount"..'"Payment Discount (VAT Adjustment)"'),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Pmt. Discounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Customer No."=FIELD("No."),
                                                                                                              "Posting Date"=FIELD(UPPERLIMIT("Date Filter")),
                                                                                                              "Initial Entry Due Date"=FIELD(UPPERLIMIT("Date Filter")),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Balance Due;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                      "Posting Date"=FIELD(UPPERLIMIT("Date Filter")),
                                                                                                                      "Initial Entry Due Date"=FIELD(UPPERLIMIT("Date Filter")),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Balance Due (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST(Payment),
                                                                                                               "Entry Type"=CONST("Initial Entry"),
                                                                                                               "Customer No."=FIELD("No."),
                                                                                                               "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                               "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                               "Posting Date"=FIELD("Date Filter"),
                                                                                                               "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Payments;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST(Invoice),
                                                                                                              "Entry Type"=CONST("Initial Entry"),
                                                                                                              "Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Invoice Amounts;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST("Credit Memo"),
                                                                                                               "Entry Type"=CONST("Initial Entry"),
                                                                                                               "Customer No."=FIELD("No."),
                                                                                                               "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                               "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                               "Posting Date"=FIELD("Date Filter"),
                                                                                                               "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Cr. Memo Amounts;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST("Finance Charge Memo"),
                                                                                                              "Entry Type"=CONST("Initial Entry"),
                                                                                                              "Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Finance Charge Memo Amounts;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST(Payment),
                                                                                                                       "Entry Type"=CONST("Initial Entry"),
                                                                                                                       "Customer No."=FIELD("No."),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Payments (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST(Invoice),
                                                                                                                      "Entry Type"=CONST("Initial Entry"),
                                                                                                                      "Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Inv. Amounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST("Credit Memo"),
                                                                                                                       "Entry Type"=CONST("Initial Entry"),
                                                                                                                       "Customer No."=FIELD("No."),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Cr. Memo Amounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST("Finance Charge Memo"),
                                                                                                                      "Entry Type"=CONST("Initial Entry"),
                                                                                                                      "Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Fin. Charge Memo Amounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE ("Document Type"=CONST(Order),
                                                                                                            "Bill-to Customer No."=FIELD("No."),
                                                                                                            "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                            "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                            "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Outstanding Orders;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Shipped Not Invoiced;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced" WHERE ("Document Type"=CONST(Order),
                                                                                                              "Bill-to Customer No."=FIELD("No."),
                                                                                                              "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,"Apply to Oldest" }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Location Code }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                if "VAT Registration No." <> xRec."VAT Registration No." then
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 87  ;   ;Combine Shipments   ;Boolean       ;AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Combine Shipments }
    { 88  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit "GLN Calculator";
                                                              BEGIN
                                                                if GLN <> '' then
                                                                  GLNCalculator.AssertValidCheckDigit13(GLN);
                                                              END;

                                                   CaptionML=ENU=GLN;
                                                   Numeric=true }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE ("Customer No."=FIELD("No."),
                                                                                                                      "Entry Type"=FILTER(<>Application),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE ("Customer No."=FIELD("No."),
                                                                                                                       "Entry Type"=FILTER(<>Application),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                            "Entry Type"=FILTER(<>Application),
                                                                                                                            "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                            "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                            "Posting Date"=FIELD("Date Filter"),
                                                                                                                            "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                             "Entry Type"=FILTER(<>Application),
                                                                                                                             "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                             "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                             "Posting Date"=FIELD("Date Filter"),
                                                                                                                             "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 105 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST(Reminder),
                                                                                                              "Entry Type"=CONST("Initial Entry"),
                                                                                                              "Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Reminder Amounts;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST(Reminder),
                                                                                                                      "Entry Type"=CONST("Initial Entry"),
                                                                                                                      "Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Reminder Amounts (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 110 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Filter }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE ("Document Type"=CONST(Order),
                                                                                                                  "Bill-to Customer No."=FIELD("No."),
                                                                                                                  "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                  "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                  "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Outstanding Orders (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 114 ;   ;Shipped Not Invoiced (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE ("Document Type"=CONST(Order),
                                                                                                                    "Bill-to Customer No."=FIELD("No."),
                                                                                                                    "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                    "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                    "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipped Not Invoiced (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 115 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;OnValidate=BEGIN
                                                                UpdatePaymentTolerance((CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   CaptionML=ENU=Block Payment Tolerance }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                       "Entry Type"=FILTER("Payment Discount Tolerance"|'"Payment Discount Tolerance (VAT Adjustment)"'|'"Payment Discount Tolerance (VAT Excl.)"'),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Pmt. Disc. Tolerance (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Customer No."=FIELD("No."),
                                                                                                                       "Entry Type"=FILTER("Payment Tolerance"|'"Payment Tolerance (VAT Adjustment)"'|'"Payment Tolerance (VAT Excl.)"'),
                                                                                                                       "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                       "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                       "Posting Date"=FIELD("Date Filter"),
                                                                                                                       "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                CustLedgEntry@1001 : Record "Cust. Ledger Entry";
                                                                AccountingPeriod@1000 : Record "Accounting Period";
                                                                ICPartner@1002 : Record "IC Partner";
                                                              BEGIN
                                                                if xRec."IC Partner Code" <> "IC Partner Code" then begin
                                                                  if not CustLedgEntry.SETCURRENTKEY("Customer No.",Open) then
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  CustLedgEntry.SETRANGE(Open,true);
                                                                  if CustLedgEntry.FINDLAST then
                                                                    ERROR(Text012,FIELDCAPTION("IC Partner Code"),TABLECAPTION);

                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,false);
                                                                  if AccountingPeriod.FINDFIRST then begin
                                                                    CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                    if CustLedgEntry.FINDFIRST then
                                                                      if not CONFIRM(Text011,false,TABLECAPTION) then
                                                                        "IC Partner Code" := xRec."IC Partner Code";
                                                                  end;
                                                                end;

                                                                if "IC Partner Code" <> '' then begin
                                                                  ICPartner.GET("IC Partner Code");
                                                                  if (ICPartner."Customer No." <> '') and (ICPartner."Customer No." <> "No.") then
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Customer No.");
                                                                  ICPartner."Customer No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                end;

                                                                if (xRec."IC Partner Code" <> "IC Partner Code") and ICPartner.GET(xRec."IC Partner Code") then begin
                                                                  ICPartner."Customer No." := '';
                                                                  ICPartner.MODIFY;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST(Refund),
                                                                                                              "Entry Type"=CONST("Initial Entry"),
                                                                                                              "Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Refunds }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST(Refund),
                                                                                                                      "Entry Type"=CONST("Initial Entry"),
                                                                                                                      "Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Refunds (LCY) }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE ("Initial Document Type"=CONST(" "),
                                                                                                              "Entry Type"=CONST("Initial Entry"),
                                                                                                              "Customer No."=FIELD("No."),
                                                                                                              "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                              "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                              "Posting Date"=FIELD("Date Filter"),
                                                                                                              "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Other Amounts }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE ("Initial Document Type"=CONST(" "),
                                                                                                                      "Entry Type"=CONST("Initial Entry"),
                                                                                                                      "Customer No."=FIELD("No."),
                                                                                                                      "Initial Entry Global Dim. 1"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Initial Entry Global Dim. 2"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Other Amounts (LCY) }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE ("Document Type"=CONST(Invoice),
                                                                                                                  "Bill-to Customer No."=FIELD("No."),
                                                                                                                  "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                  "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                  "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Outstanding Invoices (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 126 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE ("Document Type"=CONST(Invoice),
                                                                                                            "Bill-to Customer No."=FIELD("No."),
                                                                                                            "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                            "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                            "Currency Code"=FIELD("Currency Filter")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Outstanding Invoices;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;Bill-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE ("Document Type"=CONST(Order),
                                                                                                   "Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-to No. Of Archived Doc. }
    { 131 ;   ;Sell-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE ("Document Type"=CONST(Order),
                                                                                                   "Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Sell-to No. Of Archived Doc. }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=ENU=Partner Type;
                                                   OptionCaptionML=ENU=" ,Company,Person";
                                                   OptionString=" ",Company,Person }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=ENU=Image }
    { 288 ;   ;Preferred Bank Account Code;Code10 ;TableRelation="Customer Bank Account".Code WHERE ("Customer No."=FIELD("No."));
                                                   CaptionML=ENU=Preferred Bank Account Code }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Cash Flow Payment Terms Code }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record Contact;
                                                                ContBusRel@1001 : Record "Contact Business Relation";
                                                              BEGIN
                                                                Contact := '';
                                                                if "Primary Contact No." <> '' then begin
                                                                  Cont.GET("Primary Contact No.");

                                                                  ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                  ContBusRel.SETRANGE("No.","No.");
                                                                  ContBusRel.FINDFIRST;

                                                                  if Cont."Company No." <> ContBusRel."Contact No." then
                                                                    ERROR(Text003,Cont."No.",Cont.Name,"No.",Name);

                                                                  if Cont.Type = Cont.Type::Person then
                                                                    Contact := Cont.Name;

                                                                  if Cont.Image.HASVALUE then
                                                                    CopyContactPicture(Cont);

                                                                  if Cont."Phone No." <> '' then
                                                                    "Phone No." := Cont."Phone No.";
                                                                  if Cont."E-Mail" <> '' then
                                                                    "E-Mail" := Cont."E-Mail";
                                                                end else
                                                                  if Image.HASVALUE then
                                                                    CLEAR(Image);
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record Contact;
                                                              ContBusRel@1001 : Record "Contact Business Relation";
                                                              TempCust@1002 : TEMPORARY Record Customer;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              if ContBusRel.FINDFIRST then
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
                                                              else
                                                                Cont.SETRANGE("No.",'');

                                                              if "Primary Contact No." <> '' then
                                                                if Cont.GET("Primary Contact No.") then ;
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                TempCust.COPY(Rec);
                                                                FIND;
                                                                TRANSFERFIELDS(TempCust,false);
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Primary Contact No. }
    { 5050;   ;Contact Type        ;Option        ;CaptionML=ENU=Contact Type;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5790;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   OnValidate=BEGIN
                                                                if ("Shipping Agent Code" <> '') and
                                                                   ("Shipping Agent Service Code" <> '')
                                                                then
                                                                  if ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") then
                                                                    "Shipping Time" := ShippingAgentService."Shipping Time"
                                                                  else
                                                                    EVALUATE("Shipping Time",'<>');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Code }
    { 5902;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE ("Customer No."=FIELD("No."),
                                                                                                            "Ship-to Code"=FIELD("Ship-to Filter"),
                                                                                                            "Change Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Contract Gain/Loss Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5903;   ;Ship-to Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Ship-to Address".Code WHERE ("Customer No."=FIELD("No."));
                                                   CaptionML=ENU=Ship-to Filter }
    { 5910;   ;Outstanding Serv. Orders (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE ("Document Type"=CONST(Order),
                                                                                                                    "Bill-to Customer No."=FIELD("No."),
                                                                                                                    "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                    "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                    "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Outstanding Serv. Orders (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5911;   ;Serv Shipped Not Invoiced(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Shipped Not Invoiced (LCY)" WHERE ("Document Type"=CONST(Order),
                                                                                                                      "Bill-to Customer No."=FIELD("No."),
                                                                                                                      "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Serv Shipped Not Invoiced(LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5912;   ;Outstanding Serv.Invoices(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE ("Document Type"=CONST(Invoice),
                                                                                                                    "Bill-to Customer No."=FIELD("No."),
                                                                                                                    "Shortcut Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                    "Shortcut Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                    "Currency Code"=FIELD("Currency Filter")));
                                                   CaptionML=ENU=Outstanding Serv.Invoices(LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7171;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Quote),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Quotes;
                                                   Editable=false }
    { 7172;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Blanket Order"),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=No. of Blanket Orders;
                                                   Editable=false }
    { 7173;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Order),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=No. of Orders;
                                                   Editable=false }
    { 7174;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Invoice),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Invoices;
                                                   Editable=false }
    { 7175;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Return Order"),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Return Receipt Header"=R;
                                                   CaptionML=ENU=No. of Return Orders;
                                                   Editable=false }
    { 7176;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Credit Memo"),
                                                                                           "Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Credit Memos;
                                                   Editable=false }
    { 7177;   ;No. of Pstd. Shipments;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE ("Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Pstd. Shipments;
                                                   Editable=false }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE ("Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Pstd. Invoices;
                                                   Editable=false }
    { 7179;   ;No. of Pstd. Return Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE ("Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Pstd. Return Receipts;
                                                   Editable=false }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE ("Sell-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Pstd. Credit Memos;
                                                   Editable=false }
    { 7181;   ;No. of Ship-to Addresses;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Ship-to Address" WHERE ("Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Ship-to Addresses;
                                                   Editable=false }
    { 7182;   ;Bill-To No. of Quotes;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Quote),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Quotes;
                                                   Editable=false }
    { 7183;   ;Bill-To No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Blanket Order"),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Bill-To No. of Blanket Orders;
                                                   Editable=false }
    { 7184;   ;Bill-To No. of Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Order),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Bill-To No. of Orders;
                                                   Editable=false }
    { 7185;   ;Bill-To No. of Invoices;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST(Invoice),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Invoices;
                                                   Editable=false }
    { 7186;   ;Bill-To No. of Return Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Return Order"),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   AccessByPermission=TableData "Return Receipt Header"=R;
                                                   CaptionML=ENU=Bill-To No. of Return Orders;
                                                   Editable=false }
    { 7187;   ;Bill-To No. of Credit Memos;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE ("Document Type"=CONST("Credit Memo"),
                                                                                           "Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Credit Memos;
                                                   Editable=false }
    { 7188;   ;Bill-To No. of Pstd. Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE ("Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Shipments;
                                                   Editable=false }
    { 7189;   ;Bill-To No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE ("Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Invoices;
                                                   Editable=false }
    { 7190;   ;Bill-To No. of Pstd. Return R.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE ("Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Return R.;
                                                   Editable=false }
    { 7191;   ;Bill-To No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE ("Bill-to Customer No."=FIELD("No.")));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Cr. Memos;
                                                   Editable=false }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Copy Sell-to Addr. to Qte From;Option;
                                                   AccessByPermission=TableData Contact=R;
                                                   CaptionML=ENU=Copy Sell-to Addr. to Qte From;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 7602;   ;Validate EU Vat Reg. No.;Boolean   ;CaptionML=ENU=Validate EU Vat Reg. No. }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 8001;   ;Currency Id         ;GUID          ;TableRelation=Currency.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyCode;
                                                              END;

                                                   CaptionML=ENU=Currency Id }
    { 8002;   ;Payment Terms Id    ;GUID          ;TableRelation="Payment Terms".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsCode;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Id }
    { 8003;   ;Shipment Method Id  ;GUID          ;TableRelation="Shipment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodCode;
                                                              END;

                                                   CaptionML=ENU=Shipment Method Id }
    { 8004;   ;Payment Method Id   ;GUID          ;TableRelation="Payment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentMethodCode;
                                                              END;

                                                   CaptionML=ENU=Payment Method Id }
    { 9003;   ;Tax Area ID         ;GUID          ;OnValidate=BEGIN
                                                                UpdateTaxAreaCode;
                                                              END;

                                                   CaptionML=ENU=Tax Area ID }
    { 9004;   ;Tax Area Display Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tax Area".Description WHERE (Code=FIELD("Tax Area Code")));
                                                   CaptionML=ENU=Tax Area Display Name }
    { 9005;   ;Contact ID          ;GUID          ;CaptionML=ENU=Contact ID }
    { 9006;   ;Contact Graph Id    ;Text250       ;CaptionML=ENU=Contact Graph Id }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Customer Posting Group"                 }
    {    ;"Currency Code"                          }
    {    ;"Country/Region Code"                    }
    {    ;"Gen. Bus. Posting Group"                }
    {    ;Name,Address,City                        }
    {    ;"VAT Registration No."                   }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;"Post Code"                              }
    {    ;"Phone No."                              }
    {    ;Contact                                  }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Name,City,"Post Code","Phone No.",Contact }
    { 2   ;Brick               ;"No.",Name,"Balance (LCY)",Contact,"Balance Due (LCY)",Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.';
      Text002@1001 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      SalesSetup@1002 : Record "Sales & Receivables Setup";
      CommentLine@1004 : Record "Comment Line";
      SalesOrderLine@1005 : Record "Sales Line";
      CustBankAcc@1006 : Record "Customer Bank Account";
      ShipToAddr@1007 : Record "Ship-to Address";
      PostCode@1008 : Record "Post Code";
      GenBusPostingGrp@1009 : Record "Gen. Business Posting Group";
      ShippingAgentService@1010 : Record "Shipping Agent Services";
      ItemCrossReference@1016 : Record "Item Cross Reference";
      RMSetup@1018 : Record "Marketing Setup";
      SalesPrice@1021 : Record "Sales Price";
      SalesLineDisc@1022 : Record "Sales Line Discount";
      SalesPrepmtPct@1003 : Record "Sales Prepayment %";
      ServContract@1026 : Record "Service Contract Header";
      ServiceItem@1027 : Record "Service Item";
      PaymentToleranceMgt@1038 : Codeunit "Payment Tolerance Management";
      NoSeriesMgt@1011 : Codeunit NoSeriesManagement;
      MoveEntries@1012 : Codeunit MoveEntries;
      UpdateContFromCust@1013 : Codeunit "CustCont-Update";
      DimMgt@1014 : Codeunit DimensionManagement;
      ApprovalsMgmt@1039 : Codeunit "Approvals Mgmt.";
      InsertFromContact@1015 : Boolean;
      Text003@1020 : TextConst 'ENU=Contact %1 %2 is not related to customer %3 %4.';
      Text004@1023 : TextConst 'ENU=post';
      Text005@1024 : TextConst 'ENU=create';
      Text006@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3';
      Text007@1028 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.';
      Text008@1029 : TextConst 'ENU=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?';
      Text009@1030 : TextConst 'ENU=Cannot delete customer.';
      Text010@1031 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.';
      Text011@1033 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text012@1032 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text013@1035 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.';
      Text014@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text015@1036 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 associated to this customer.';
      AllowPaymentToleranceQst@1037 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?';
      RemovePaymentRoleranceQst@1019 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?';
      CreateNewCustTxt@1041 : TextConst '@@@="%1 is the name to be used to create the customer. ";ENU=Create a new customer card for %1';
      SelectCustErr@1040 : TextConst 'ENU=You must select an existing customer.';
      CustNotRegisteredTxt@1042 : TextConst 'ENU=This customer is not registered. To continue, choose one of the following options:';
      SelectCustTxt@1043 : TextConst 'ENU=Select an existing customer';
      InsertFromTemplate@1044 : Boolean;
      LookupRequested@1034 : Boolean;
      OverrideImageQst@1045 : TextConst 'ENU=Override Image?';
      CannotDeleteBecauseInInvErr@1046 : TextConst '@@@="%1 = the object to be deleted (example: Item, Customer).";ENU=You cannot delete %1 because it has open invoices.';

    [External]
    PROCEDURE AssistEdit@2(OldCust@1000 : Record Customer) : Boolean;
    VAR
      Cust@1001 : Record Customer;
    BEGIN
      with Cust do begin
        Cust := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Customer Nos.");
        if NoSeriesMgt.SelectSeries(SalesSetup."Customer Nos.",OldCust."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := Cust;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    [External]
    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
      Cont@1001 : Record Contact;
      OfficeContact@1002 : Record Contact;
      OfficeMgt@1003 : Codeunit "Office Management";
    BEGIN
      if OfficeMgt.GetContact(OfficeContact,"No.") and (OfficeContact.COUNT = 1) then
        PAGE.RUN(PAGE::"Contact Card",OfficeContact)
      else begin
        if "No." = '' then
          exit;

        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.","No.");
        if not ContBusRel.FINDFIRST then begin
          if not CONFIRM(Text002,false,TABLECAPTION,"No.") then
            exit;
          UpdateContFromCust.InsertNewContact(Rec,false);
          ContBusRel.FINDFIRST;
        end;
        COMMIT;

        Cont.FILTERGROUP(2);
        Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
        if Cont.ISEMPTY then begin
          Cont.SETRANGE("Company No.");
          Cont.SETRANGE("No.",ContBusRel."Contact No.");
        end;
        PAGE.RUN(PAGE::"Contact List",Cont);
      end;
    END;

    [External]
    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnDocs@5(Cust2@1000 : Record Customer;DocType@1001 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';Shipment@1005 : Boolean;Transaction@1003 : Boolean);
    BEGIN
      with Cust2 do begin
        if ((Blocked = Blocked::All) or
            ((Blocked = Blocked::Invoice) and
             (DocType in [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"])) or
            ((Blocked = Blocked::Ship) and (DocType in [DocType::Quote,DocType::Order,DocType::"Blanket Order"]) and
             (not Transaction)) or
            ((Blocked = Blocked::Ship) and (DocType in [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"]) and
             Shipment and Transaction))
        then
          CustBlockedErrorMessage(Cust2,Transaction);
      end;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnJnls@7(Cust2@1003 : Record Customer;DocType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';Transaction@1000 : Boolean);
    BEGIN
      with Cust2 do begin
        if (Blocked = Blocked::All) or
           ((Blocked = Blocked::Invoice) and (DocType in [DocType::Invoice,DocType::" "]))
        then
          CustBlockedErrorMessage(Cust2,Transaction)
      end;
    END;

    [External]
    PROCEDURE CustBlockedErrorMessage@4(Cust2@1001 : Record Customer;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      if Transaction then
        Action := Text004
      else
        Action := Text005;
      ERROR(Text006,Action,Cust2."No.",Cust2.Blocked);
    END;

    [Internal]
    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::Customer,GETPOSITION)
      else
        MESSAGE(Text014);
    END;

    [External]
    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      exit(GetTotalAmountLCYCommon);
    END;

    [External]
    PROCEDURE GetTotalAmountLCYUI@16() : Decimal;
    BEGIN
      SETAUTOCALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      exit(GetTotalAmountLCYCommon);
    END;

    LOCAL PROCEDURE GetTotalAmountLCYCommon@17() : Decimal;
    VAR
      SalesLine@1000 : Record "Sales Line";
      ServiceLine@1002 : Record "Service Line";
      SalesOutstandingAmountFromShipment@1001 : Decimal;
      ServOutstandingAmountFromShipment@1003 : Decimal;
      InvoicedPrepmtAmountLCY@1004 : Decimal;
    BEGIN
      SalesOutstandingAmountFromShipment := SalesLine.OutstandingInvoiceAmountFromShipment("No.");
      ServOutstandingAmountFromShipment := ServiceLine.OutstandingInvoiceAmountFromShipment("No.");
      InvoicedPrepmtAmountLCY := GetInvoicedPrepmtAmountLCY;

      exit("Balance (LCY)" + "Outstanding Orders (LCY)" + "Shipped Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" +
        "Outstanding Serv. Orders (LCY)" + "Serv Shipped Not Invoiced(LCY)" + "Outstanding Serv.Invoices(LCY)" -
        SalesOutstandingAmountFromShipment - ServOutstandingAmountFromShipment - InvoicedPrepmtAmountLCY);
    END;

    [External]
    PROCEDURE GetSalesLCY@13() : Decimal;
    VAR
      CustomerSalesYTD@1005 : Record Customer;
      AccountingPeriod@1004 : Record "Accounting Period";
      StartDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      StartDate := AccountingPeriod.GetFiscalYearStartDate(WORKDATE);
      EndDate := AccountingPeriod.GetFiscalYearEndDate(WORKDATE);
      CustomerSalesYTD := Rec;
      CustomerSalesYTD."SECURITYFILTERING"("SECURITYFILTERING");
      CustomerSalesYTD.SETRANGE("Date Filter",StartDate,EndDate);
      CustomerSalesYTD.CALCFIELDS("Sales (LCY)");
      exit(CustomerSalesYTD."Sales (LCY)");
    END;

    [External]
    PROCEDURE CalcAvailableCredit@9() : Decimal;
    BEGIN
      exit(CalcAvailableCreditCommon(false));
    END;

    [External]
    PROCEDURE CalcAvailableCreditUI@15() : Decimal;
    BEGIN
      exit(CalcAvailableCreditCommon(true));
    END;

    LOCAL PROCEDURE CalcAvailableCreditCommon@14(CalledFromUI@1000 : Boolean) : Decimal;
    BEGIN
      if "Credit Limit (LCY)" = 0 then
        exit(0);
      if CalledFromUI then
        exit("Credit Limit (LCY)" - GetTotalAmountLCYUI);
      exit("Credit Limit (LCY)" - GetTotalAmountLCY);
    END;

    [External]
    PROCEDURE CalcOverdueBalance@11() OverDueBalance : Decimal;
    VAR
      CustLedgEntryRemainAmtQuery@1000 : Query "Cust. Ledg. Entry Remain. Amt." SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Customer_No,"No.");
      CustLedgEntryRemainAmtQuery.SETRANGE(IsOpen,true);
      CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      CustLedgEntryRemainAmtQuery.OPEN;

      if CustLedgEntryRemainAmtQuery.READ then
        OverDueBalance := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    [External]
    PROCEDURE GetLegalEntityType@6() : Text;
    BEGIN
      exit(FORMAT("Partner Type"));
    END;

    [External]
    PROCEDURE GetLegalEntityTypeLbl@26() : Text;
    BEGIN
      exit(FIELDCAPTION("Partner Type"));
    END;

    [External]
    PROCEDURE SetStyle@12() : Text;
    BEGIN
      if CalcAvailableCredit < 0 then
        exit('Unfavorable');
      exit('');
    END;

    [External]
    PROCEDURE HasValidDDMandate@23(Date@1000 : Date) : Boolean;
    VAR
      SEPADirectDebitMandate@1001 : Record "SEPA Direct Debit Mandate";
    BEGIN
      exit(SEPADirectDebitMandate.GetDefaultMandate("No.",Date) <> '');
    END;

    [External]
    PROCEDURE GetInvoicedPrepmtAmountLCY@18() : Decimal;
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
      exit(SalesLine."Prepmt. Amount Inv. (LCY)" + SalesLine."Prepmt. VAT Amount Inv. (LCY)");
    END;

    [External]
    PROCEDURE CalcCreditLimitLCYExpendedPct@19() : Decimal;
    BEGIN
      if "Credit Limit (LCY)" = 0 then
        exit(0);

      if "Balance (LCY)" / "Credit Limit (LCY)" < 0 then
        exit(0);

      if "Balance (LCY)" / "Credit Limit (LCY)" > 1 then
        exit(10000);

      exit(ROUND("Balance (LCY)" / "Credit Limit (LCY)" * 10000,1));
    END;

    [External]
    PROCEDURE CreateAndShowNewInvoice@21();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(true);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Invoice",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewOrder@30();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(true);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Order",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewCreditMemo@22();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(true);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewQuote@24();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(true);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Quote",SalesHeader)
    END;

    LOCAL PROCEDURE UpdatePaymentTolerance@20(UseDialog@1000 : Boolean);
    BEGIN
      if "Block Payment Tolerance" then begin
        if UseDialog then
          if not CONFIRM(RemovePaymentRoleranceQst,false) then
            exit;
        PaymentToleranceMgt.DelTolCustLedgEntry(Rec);
      end else begin
        if UseDialog then
          if not CONFIRM(AllowPaymentToleranceQst,false) then
            exit;
        PaymentToleranceMgt.CalcTolCustLedgEntry(Rec);
      end;
    END;

    [External]
    PROCEDURE GetBillToCustomerNo@27() : Code[20];
    BEGIN
      if "Bill-to Customer No." <> '' then
        exit("Bill-to Customer No.");
      exit("No.");
    END;

    [External]
    PROCEDURE HasAddressIgnoreCountryCode@37() : Boolean;
    BEGIN
      case true of
        Address <> '':
          exit(true);
        "Address 2" <> '':
          exit(true);
        City <> '':
          exit(true);
        County <> '':
          exit(true);
        "Post Code" <> '':
          exit(true);
        Contact <> '':
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE HasAddress@25() : Boolean;
    BEGIN
      exit(HasAddressIgnoreCountryCode or ("Country/Region Code" <> ''));
    END;

    [External]
    PROCEDURE GetCustNo@44(CustomerText@1000 : Text) : Text;
    BEGIN
      exit(GetCustNoOpenCard(CustomerText,true,true));
    END;

    [External]
    PROCEDURE GetCustNoOpenCard@36(CustomerText@1000 : Text;ShowCustomerCard@1006 : Boolean;ShowCreateCustomerOption@1007 : Boolean) : Code[20];
    VAR
      Customer@1001 : Record Customer;
      CustomerNo@1002 : Code[20];
      CustomerWithoutQuote@1005 : Text;
      CustomerFilterFromStart@1004 : Text;
      CustomerFilterContains@1003 : Text;
    BEGIN
      if CustomerText = '' then
        exit('');

      if STRLEN(CustomerText) <= MAXSTRLEN(Customer."No.") then
        if Customer.GET(COPYSTR(CustomerText,1,MAXSTRLEN(Customer."No."))) then
          exit(Customer."No.");

      CustomerWithoutQuote := CONVERTSTR(CustomerText,'''','?');

      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      Customer.SETFILTER(Name,'''@' + CustomerWithoutQuote + '''');
      if Customer.FINDFIRST then
        exit(Customer."No.");
      Customer.SETRANGE(Name);

      CustomerFilterFromStart := '''@' + CustomerWithoutQuote + '*''';

      Customer.FILTERGROUP := -1;
      Customer.SETFILTER("No.",CustomerFilterFromStart);

      Customer.SETFILTER(Name,CustomerFilterFromStart);

      if Customer.FINDFIRST then
        exit(Customer."No.");

      CustomerFilterContains := '''@*' + CustomerWithoutQuote + '*''';

      Customer.SETFILTER("No.",CustomerFilterContains);
      Customer.SETFILTER(Name,CustomerFilterContains);
      Customer.SETFILTER(City,CustomerFilterContains);
      Customer.SETFILTER(Contact,CustomerFilterContains);
      Customer.SETFILTER("Phone No.",CustomerFilterContains);
      Customer.SETFILTER("Post Code",CustomerFilterContains);

      if Customer.COUNT = 0 then
        MarkCustomersWithSimilarName(Customer,CustomerText);

      if Customer.COUNT = 1 then begin
        Customer.FINDFIRST;
        exit(Customer."No.");
      end;

      if not GUIALLOWED then
        ERROR(SelectCustErr);

      if Customer.COUNT = 0 then begin
        if Customer.WRITEPERMISSION then
          if ShowCreateCustomerOption then
            case STRMENU(
                   STRSUBSTNO(
                     '%1,%2',STRSUBSTNO(CreateNewCustTxt,CONVERTSTR(CustomerText,',','.')),SelectCustTxt),1,CustNotRegisteredTxt) of
              0:
                ERROR(SelectCustErr);
              1:
                exit(CreateNewCustomer(COPYSTR(CustomerText,1,MAXSTRLEN(Customer.Name)),ShowCustomerCard));
            end
          else
            exit('');
        Customer.RESET;
      end;

      if ShowCustomerCard then
        CustomerNo := PickCustomer(Customer)
      else begin
        LookupRequested := true;
        exit('');
      end;

      if CustomerNo <> '' then
        exit(CustomerNo);

      ERROR(SelectCustErr);
    END;

    LOCAL PROCEDURE MarkCustomersWithSimilarName@33(VAR Customer@1001 : Record Customer;CustomerText@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit "Type Helper";
      CustomerCount@1003 : Integer;
      CustomerTextLenght@1004 : Integer;
      Treshold@1005 : Integer;
    BEGIN
      if CustomerText = '' then
        exit;
      if STRLEN(CustomerText) > MAXSTRLEN(Customer.Name) then
        exit;
      CustomerTextLenght := STRLEN(CustomerText);
      Treshold := CustomerTextLenght div 5;
      if Treshold = 0 then
        exit;

      Customer.RESET;
      Customer.ASCENDING(false); // most likely to search for newest customers
      if Customer.FINDSET then
        repeat
          CustomerCount += 1;
          if ABS(CustomerTextLenght - STRLEN(Customer.Name)) <= Treshold then
            if TypeHelper.TextDistance(UPPERCASE(CustomerText),UPPERCASE(Customer.Name)) <= Treshold then
              Customer.MARK(true);
        until Customer.MARK or (Customer.NEXT = 0) or (CustomerCount > 1000);
      Customer.MARKEDONLY(true);
    END;

    [Internal]
    PROCEDURE CreateNewCustomer@28(CustomerName@1000 : Text[50];ShowCustomerCard@1001 : Boolean) : Code[20];
    VAR
      Customer@1005 : Record Customer;
      MiniCustomerTemplate@1006 : Record "Mini Customer Template";
      CustomerCard@1002 : Page "Customer Card";
    BEGIN
      Customer.Name := CustomerName;
      if not MiniCustomerTemplate.NewCustomerFromTemplate(Customer) then
        Customer.INSERT(true)
      else
        if CustomerName <> Customer.Name then begin
          Customer.Name := CustomerName;
          Customer.MODIFY(true);
        end;

      COMMIT;
      if not ShowCustomerCard then
        exit(Customer."No.");
      Customer.SETRANGE("No.",Customer."No.");
      CustomerCard.SETTABLEVIEW(Customer);
      if not (CustomerCard.RUNMODAL = ACTION::OK) then
        ERROR(SelectCustErr);

      exit(Customer."No.");
    END;

    LOCAL PROCEDURE PickCustomer@51(VAR Customer@1000 : Record Customer) : Code[20];
    VAR
      CustomerList@1001 : Page "Customer List";
    BEGIN
      if Customer.FINDSET then
        repeat
          Customer.MARK(true);
        until Customer.NEXT = 0;
      if Customer.FINDFIRST then;
      Customer.MARKEDONLY := true;

      CustomerList.SETTABLEVIEW(Customer);
      CustomerList.SETRECORD(Customer);
      CustomerList.LOOKUPMODE := true;
      if CustomerList.RUNMODAL = ACTION::LookupOK then
        CustomerList.GETRECORD(Customer)
      else
        CLEAR(Customer);

      exit(Customer."No.");
    END;

    [External]
    PROCEDURE OpenCustomerLedgerEntries@31(FilterOnDueEntries@1002 : Boolean);
    VAR
      DetailedCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry";
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Customer No.","No.");
      COPYFILTER("Global Dimension 1 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 1");
      COPYFILTER("Global Dimension 2 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 2");
      if FilterOnDueEntries and (GETFILTER("Date Filter") <> '') then begin
        COPYFILTER("Date Filter",DetailedCustLedgEntry."Initial Entry Due Date");
        DetailedCustLedgEntry.SETFILTER("Posting Date",'<=%1',GETRANGEMAX("Date Filter"));
      end;
      COPYFILTER("Currency Filter",DetailedCustLedgEntry."Currency Code");
      CustLedgerEntry.DrillDownOnEntries(DetailedCustLedgEntry);
    END;

    [External]
    PROCEDURE SetInsertFromTemplate@32(FromTemplate@1000 : Boolean);
    BEGIN
      InsertFromTemplate := FromTemplate;
    END;

    [External]
    PROCEDURE IsLookupRequested@34() Result : Boolean;
    BEGIN
      Result := LookupRequested;
      LookupRequested := false;
    END;

    LOCAL PROCEDURE CopyContactPicture@38(VAR Cont@1000 : Record Contact);
    VAR
      TempNameValueBuffer@1005 : TEMPORARY Record "Name/Value Buffer";
      FileManagement@1001 : Codeunit "File Management";
      ExportPath@1006 : Text;
    BEGIN
      if Image.HASVALUE then
        if not CONFIRM(OverrideImageQst) then
          exit;

      ExportPath := TEMPORARYPATH + Cont."No." + FORMAT(Cont.Image.MEDIAID);
      Cont.Image.EXPORTFILE(ExportPath);
      FileManagement.GetServerDirectoryFilesList(TempNameValueBuffer,TEMPORARYPATH);
      TempNameValueBuffer.SETFILTER(Name,STRSUBSTNO('%1*',ExportPath));
      TempNameValueBuffer.FINDFIRST;

      CLEAR(Image);
      Image.IMPORTFILE(TempNameValueBuffer.Name,'');
      MODIFY;
      if FileManagement.DeleteServerFile(TempNameValueBuffer.Name) then;
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@35();
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      if not UserSetup.GET(USERID) then
        exit;

      if UserSetup."Salespers./Purch. Code" <> '' then
        VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
      "Last Date Modified" := TODAY;
    END;

    LOCAL PROCEDURE VATRegistrationValidation@47();
    VAR
      VATRegistrationNoFormat@1005 : Record "VAT Registration No. Format";
      VATRegistrationLog@1004 : Record "VAT Registration Log";
      VATRegNoSrvConfig@1003 : Record "VAT Reg. No. Srv Config";
      VATRegistrationLogMgt@1002 : Codeunit "VAT Registration Log Mgt.";
      ResultRecordRef@1001 : RecordRef;
      ApplicableCountryCode@1000 : Code[10];
    BEGIN
      if not VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer) then
        exit;
      VATRegistrationLogMgt.LogCustomer(Rec);
      if ("Country/Region Code" = '') and (VATRegistrationNoFormat."Country/Region Code" = '') then
        exit;
      ApplicableCountryCode := "Country/Region Code";
      if ApplicableCountryCode = '' then
        ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";
      if VATRegNoSrvConfig.VATRegNoSrvIsEnabled then begin
        VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"No.",
          VATRegistrationLog."Account Type"::Customer,ApplicableCountryCode);
        ResultRecordRef.SETTABLE(Rec);
      end;
    END;

    PROCEDURE SetAddress@40(CustomerAddress@1001 : Text[50];CustomerAddress2@1002 : Text[50];CustomerPostCode@1003 : Code[20];CustomerCity@1000 : Text[30];CustomerCounty@1004 : Text[30];CustomerCountryCode@1005 : Code[10];CustomerContact@1006 : Text[50]);
    BEGIN
      Address := CustomerAddress;
      "Address 2" := CustomerAddress2;
      "Post Code" := CustomerPostCode;
      City := CustomerCity;
      County := CustomerCounty;
      "Country/Region Code" := CustomerCountryCode;
      UpdateContFromCust.OnModify(Rec);
      Contact := CustomerContact;
    END;

    PROCEDURE FindByEmail@41(VAR Customer@1001 : Record Customer;Email@1000 : Text) : Boolean;
    VAR
      LocalContact@1002 : Record Contact;
      ContactBusinessRelation@1003 : Record "Contact Business Relation";
      MarketingSetup@1004 : Record "Marketing Setup";
    BEGIN
      Customer.SETRANGE("E-Mail",Email);
      if Customer.FINDFIRST then
        exit(true);

      Customer.SETRANGE("E-Mail");
      LocalContact.SETRANGE("E-Mail",Email);
      if LocalContact.FINDSET then begin
        MarketingSetup.GET;
        repeat
          if ContactBusinessRelation.GET(LocalContact."No.",MarketingSetup."Bus. Rel. Code for Customers") then begin
            Customer.GET(ContactBusinessRelation."No.");
            exit(true);
          end;
        until LocalContact.NEXT = 0
      end;
    END;

    PROCEDURE UpdateCurrencyId@55();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      if "Currency Code" = '' then begin
        CLEAR("Currency Id");
        exit;
      end;

      if not Currency.GET("Currency Code") then
        exit;

      "Currency Id" := Currency.Id;
    END;

    LOCAL PROCEDURE UpdateCurrencyCode@54();
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      if ISNULLGUID("Currency Id") then
        exit;

      Currency.SETRANGE(Id,"Currency Id");
      if not Currency.FINDFIRST then
        exit;

      "Currency Code" := Currency.Code;
    END;

    PROCEDURE UpdatePaymentTermsId@57();
    VAR
      PaymentTerms@1000 : Record "Payment Terms";
    BEGIN
      if "Payment Terms Code" = '' then begin
        CLEAR("Payment Terms Id");
        exit;
      end;

      if not PaymentTerms.GET("Payment Terms Code") then
        exit;

      "Payment Terms Id" := PaymentTerms.Id;
    END;

    LOCAL PROCEDURE UpdatePaymentTermsCode@56();
    VAR
      PaymentTerms@1001 : Record "Payment Terms";
    BEGIN
      if ISNULLGUID("Payment Terms Id") then
        exit;

      PaymentTerms.SETRANGE(Id,"Payment Terms Id");
      if not PaymentTerms.FINDFIRST then
        exit;

      "Payment Terms Code" := PaymentTerms.Code;
    END;

    PROCEDURE UpdateShipmentMethodId@59();
    VAR
      ShipmentMethod@1000 : Record "Shipment Method";
    BEGIN
      if "Shipment Method Code" = '' then begin
        CLEAR("Shipment Method Id");
        exit;
      end;

      if not ShipmentMethod.GET("Shipment Method Code") then
        exit;

      "Shipment Method Id" := ShipmentMethod.Id;
    END;

    LOCAL PROCEDURE UpdateShipmentMethodCode@58();
    VAR
      ShipmentMethod@1001 : Record "Shipment Method";
    BEGIN
      if ISNULLGUID("Shipment Method Id") then
        exit;

      ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
      if not ShipmentMethod.FINDFIRST then
        exit;

      "Shipment Method Code" := ShipmentMethod.Code;
    END;

    PROCEDURE UpdatePaymentMethodId@45();
    VAR
      PaymentMethod@1000 : Record "Payment Method";
    BEGIN
      if "Payment Method Code" = '' then begin
        CLEAR("Payment Method Id");
        exit;
      end;

      if not PaymentMethod.GET("Payment Method Code") then
        exit;

      "Payment Method Id" := PaymentMethod.Id;
    END;

    LOCAL PROCEDURE UpdatePaymentMethodCode@43();
    VAR
      PaymentMethod@1001 : Record "Payment Method";
    BEGIN
      if ISNULLGUID("Payment Method Id") then
        exit;

      PaymentMethod.SETRANGE(Id,"Payment Method Id");
      if not PaymentMethod.FINDFIRST then
        exit;

      "Payment Method Code" := PaymentMethod.Code;
    END;

    PROCEDURE UpdateTaxAreaId@1166();
    VAR
      VATBusinessPostingGroup@1002 : Record "VAT Business Posting Group";
      TaxArea@1000 : Record "Tax Area";
      GeneralLedgerSetup@1001 : Record "General Ledger Setup";
    BEGIN
      if GeneralLedgerSetup.UseVat then begin
        if "VAT Bus. Posting Group" = '' then begin
          CLEAR("Tax Area ID");
          exit;
        end;

        if not VATBusinessPostingGroup.GET("VAT Bus. Posting Group") then
          exit;

        "Tax Area ID" := VATBusinessPostingGroup.Id;
      end else begin
        if "Tax Area Code" = '' then begin
          CLEAR("Tax Area ID");
          exit;
        end;

        if not TaxArea.GET("Tax Area Code") then
          exit;

        "Tax Area ID" := TaxArea.Id;
      end;
    END;

    LOCAL PROCEDURE UpdateTaxAreaCode@1164();
    VAR
      TaxArea@1001 : Record "Tax Area";
      VATBusinessPostingGroup@1000 : Record "VAT Business Posting Group";
      GeneralLedgerSetup@1002 : Record "General Ledger Setup";
    BEGIN
      if ISNULLGUID("Tax Area ID") then
        exit;

      if GeneralLedgerSetup.UseVat then begin
        VATBusinessPostingGroup.SETRANGE(Id,"Tax Area ID");
        VATBusinessPostingGroup.FINDFIRST;
        "VAT Bus. Posting Group" := VATBusinessPostingGroup.Code;
      end else begin
        TaxArea.SETRANGE(Id,"Tax Area ID");
        TaxArea.FINDFIRST;
        "Tax Area Code" := TaxArea.Code;
      end;
    END;

    BEGIN
    END.
  }
}

