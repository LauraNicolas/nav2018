OBJECT Codeunit 364 PostPurch-Delete
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Purch. Rcpt. Header"=i,
                TableData "Purch. Rcpt. Line"=rid,
                TableData "Purch. Inv. Header"=ri,
                TableData "Purch. Inv. Line"=rid,
                TableData "Purch. Cr. Memo Hdr."=i,
                TableData "Purch. Cr. Memo Line"=rid,
                TableData "Return Shipment Header"=i,
                TableData "Return Shipment Line"=rid;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      MoveEntries@1005 : Codeunit MoveEntries;
      DocumentDeletionErr@1006 : TextConst '@@@=%1 - Posting Date;ENU=You cannot delete posted purchase documents that are posted after %1. \\The date is defined by the Allow Document Deletion Before field in the Purchases & Payables Setup window.';

    [External]
    PROCEDURE DeleteHeader@18(PurchHeader@1000 : Record "Purchase Header";VAR PurchRcptHeader@1001 : Record "Purch. Rcpt. Header";VAR PurchInvHeader@1002 : Record "Purch. Inv. Header";VAR PurchCrMemoHdr@1003 : Record "Purch. Cr. Memo Hdr.";VAR ReturnShptHeader@1004 : Record "Return Shipment Header";VAR PurchInvHeaderPrepmt@1006 : Record "Purch. Inv. Header";VAR PurchCrMemoHdrPrepmt@1005 : Record "Purch. Cr. Memo Hdr.");
    VAR
      PurchInvLine@1007 : Record "Purch. Inv. Line";
      PurchCrMemoLine@1008 : Record "Purch. Cr. Memo Line";
      PurchRcptLine@1009 : Record "Purch. Rcpt. Line";
      ReturnShptLine@1012 : Record "Return Shipment Line";
      SourceCode@1010 : Record "Source Code";
      SourceCodeSetup@1011 : Record "Source Code Setup";
    BEGIN
      with PurchHeader do begin
        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        InitDeleteHeader(
          PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHdr,
          ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHdrPrepmt,SourceCode.Code);
        if PurchRcptHeader."No." <> '' then begin
          PurchRcptHeader.INSERT;
          PurchRcptLine.INIT;
          PurchRcptLine."Document No." := PurchRcptHeader."No.";
          PurchRcptLine."Line No." := 10000;
          PurchRcptLine.Description := SourceCode.Description;
          PurchRcptLine.INSERT;
        end;

        if ReturnShptHeader."No." <> '' then begin
          ReturnShptHeader.INSERT;
          ReturnShptLine.INIT;
          ReturnShptLine."Document No." := ReturnShptHeader."No.";
          ReturnShptLine."Line No." := 10000;
          ReturnShptLine.Description := SourceCode.Description;
          ReturnShptLine.INSERT;
        end;

        if PurchInvHeader."No." <> '' then begin
          PurchInvHeader.INSERT;
          PurchInvLine.INIT;
          PurchInvLine."Document No." := PurchInvHeader."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        end;

        if PurchCrMemoHdr."No." <> '' then begin
          PurchCrMemoHdr.INSERT(true);
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHdr."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        end;

        if PurchInvHeaderPrepmt."No." <> '' then begin
          PurchInvHeaderPrepmt.INSERT;
          PurchInvLine."Document No." := PurchInvHeaderPrepmt."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        end;

        if PurchCrMemoHdrPrepmt."No." <> '' then begin
          PurchCrMemoHdrPrepmt.INSERT;
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHdrPrepmt."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        end;
      end;
    END;

    [External]
    PROCEDURE DeletePurchRcptLines@1(PurchRcptHeader@1000 : Record "Purch. Rcpt. Header");
    VAR
      PurchRcptLine@1001 : Record "Purch. Rcpt. Line";
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      if PurchRcptLine.FIND('-') then
        repeat
          PurchRcptLine.TESTFIELD("Quantity Invoiced",PurchRcptLine.Quantity);
          PurchRcptLine.DELETE;
        until PurchRcptLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Purch. Rcpt. Line",0,PurchRcptHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");
    END;

    [External]
    PROCEDURE DeletePurchInvLines@2(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      PurchInvLine@1001 : Record "Purch. Inv. Line";
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      if PurchInvLine.FIND('-') then
        repeat
          PurchInvLine.DELETE;
          ItemTrackingMgt.DeleteValueEntryRelation(PurchInvLine.RowID1);
        until PurchInvLine.NEXT = 0;

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
    END;

    [External]
    PROCEDURE DeletePurchCrMemoLines@3(PurchCrMemoHeader@1000 : Record "Purch. Cr. Memo Hdr.");
    VAR
      PurchCrMemoLine@1001 : Record "Purch. Cr. Memo Line";
    BEGIN
      PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
      if PurchCrMemoLine.FIND('-') then
        repeat
          PurchCrMemoLine.DELETE;
        until PurchCrMemoLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Purch. Cr. Memo Line",0,PurchCrMemoHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHeader."No.");
    END;

    [External]
    PROCEDURE DeletePurchShptLines@5800(ReturnShptHeader@1000 : Record "Return Shipment Header");
    VAR
      ReturnShipmentLine@1001 : Record "Return Shipment Line";
    BEGIN
      ReturnShipmentLine.SETRANGE("Document No.",ReturnShptHeader."No.");
      if ReturnShipmentLine.FIND('-') then
        repeat
          ReturnShipmentLine.TESTFIELD("Quantity Invoiced",ReturnShipmentLine.Quantity);
          ReturnShipmentLine.DELETE;
        until ReturnShipmentLine.NEXT = 0;
      ItemTrackingMgt.DeleteItemEntryRelation(
        DATABASE::"Return Shipment Line",0,ReturnShptHeader."No.",'',0,0,true);

      MoveEntries.MoveDocRelatedEntries(DATABASE::"Return Shipment Header",ReturnShptHeader."No.");
    END;

    [External]
    PROCEDURE InitDeleteHeader@19(PurchHeader@1000 : Record "Purchase Header";VAR PurchRcptHeader@1001 : Record "Purch. Rcpt. Header";VAR PurchInvHeader@1002 : Record "Purch. Inv. Header";VAR PurchCrMemoHdr@1003 : Record "Purch. Cr. Memo Hdr.";VAR ReturnShptHeader@1004 : Record "Return Shipment Header";VAR PurchInvHeaderPrepmt@1006 : Record "Purch. Inv. Header";VAR PurchCrMemoHdrPrepmt@1005 : Record "Purch. Cr. Memo Hdr.";SourceCode@1008 : Code[10]);
    VAR
      PurchSetup@1007 : Record "Purchases & Payables Setup";
    BEGIN
      with PurchHeader do begin
        CLEAR(PurchRcptHeader);
        CLEAR(PurchInvHeader);
        CLEAR(PurchCrMemoHdr);
        CLEAR(ReturnShptHeader);
        PurchSetup.GET;

        if ("Receiving No. Series" <> '') and ("Receiving No." <> '') then begin
          PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
          PurchRcptHeader."No." := "Receiving No.";
          PurchRcptHeader."Posting Date" := TODAY;
          PurchRcptHeader."User ID" := USERID;
          PurchRcptHeader."Source Code" := SourceCode;
        end;

        if ("Return Shipment No. Series" <> '') and ("Return Shipment No." <> '') then begin
          ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
          ReturnShptHeader."No." := "Return Shipment No.";
          ReturnShptHeader."Posting Date" := TODAY;
          ReturnShptHeader."User ID" := USERID;
          ReturnShptHeader."Source Code" := SourceCode;
        end;

        if ("Posting No. Series" <> '') and
           (("Document Type" in ["Document Type"::Order,"Document Type"::Invoice]) and
            ("Posting No." <> '') or
            ("Document Type" = "Document Type"::Invoice) and
            ("No. Series" = "Posting No. Series"))
        then begin
          PurchInvHeader.TRANSFERFIELDS(PurchHeader);
          if "Posting No." <> '' then
            PurchInvHeader."No." := "Posting No.";
          if "Document Type" = "Document Type"::Invoice then begin
            PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
            PurchInvHeader."Pre-Assigned No." := "No.";
          end else begin
            PurchInvHeader."Pre-Assigned No. Series" := '';
            PurchInvHeader."Pre-Assigned No." := '';
            PurchInvHeader."Order No. Series" := "No. Series";
            PurchInvHeader."Order No." := "No.";
          end;
          PurchInvHeader."Posting Date" := TODAY;
          PurchInvHeader."User ID" := USERID;
          PurchInvHeader."Source Code" := SourceCode;
        end;

        if ("Posting No. Series" <> '') and
           (("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) and
            ("Posting No." <> '') or
            ("Document Type" = "Document Type"::"Credit Memo") and
            ("No. Series" = "Posting No. Series"))
        then begin
          PurchCrMemoHdr.TRANSFERFIELDS(PurchHeader);
          if "Posting No." <> '' then
            PurchCrMemoHdr."No." := "Posting No.";
          PurchCrMemoHdr."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHdr."Pre-Assigned No." := "No.";
          PurchCrMemoHdr."Posting Date" := TODAY;
          PurchCrMemoHdr."User ID" := USERID;
          PurchCrMemoHdr."Source Code" := SourceCode;
        end;

        if ("Prepayment No. Series" <> '') and ("Prepayment No." <> '') then begin
          TESTFIELD("Document Type","Document Type"::Order);
          PurchInvHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchInvHeaderPrepmt."No." := "Prepayment No.";
          PurchInvHeaderPrepmt."Order No. Series" := "No. Series";
          PurchInvHeaderPrepmt."Prepayment Order No." := "No.";
          PurchInvHeaderPrepmt."Posting Date" := TODAY;
          PurchInvHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchInvHeaderPrepmt."Pre-Assigned No." := '';
          PurchInvHeaderPrepmt."User ID" := USERID;
          PurchInvHeaderPrepmt."Source Code" := SourceCode;
          PurchInvHeaderPrepmt."Prepayment Invoice" := true;
        end;

        if ("Prepmt. Cr. Memo No. Series" <> '') and ("Prepmt. Cr. Memo No." <> '') then begin
          TESTFIELD("Document Type","Document Type"::Order);
          PurchCrMemoHdrPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchCrMemoHdrPrepmt."No." := "Prepmt. Cr. Memo No.";
          PurchCrMemoHdrPrepmt."Prepayment Order No." := "No.";
          PurchCrMemoHdrPrepmt."Posting Date" := TODAY;
          PurchCrMemoHdrPrepmt."Pre-Assigned No. Series" := '';
          PurchCrMemoHdrPrepmt."Pre-Assigned No." := '';
          PurchCrMemoHdrPrepmt."User ID" := USERID;
          PurchCrMemoHdrPrepmt."Source Code" := SourceCode;
          PurchCrMemoHdrPrepmt."Prepayment Credit Memo" := true;
        end;
      end;
    END;

    [External]
    PROCEDURE IsDocumentDeletionAllowed@4(PostingDate@1001 : Date);
    VAR
      PurchSetup@1000 : Record "Purchases & Payables Setup";
    BEGIN
      PurchSetup.GET;
      if PurchSetup."Allow Document Deletion Before" <> 0D then
        if PostingDate >= PurchSetup."Allow Document Deletion Before" then
          ERROR(STRSUBSTNO(DocumentDeletionErr,PurchSetup."Allow Document Deletion Before"));
    END;

    BEGIN
    END.
  }
}

