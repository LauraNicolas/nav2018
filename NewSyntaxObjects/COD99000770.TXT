OBJECT Codeunit 99000770 Where-Used Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Production BOM Header"=r,
                TableData "Production BOM Version"=r,
                TableData "Where-Used Line"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhereUsedList@1001 : TEMPORARY Record "Where-Used Line";
      UOMMgt@1002 : Codeunit "Unit of Measure Management";
      VersionMgt@1003 : Codeunit VersionManagement;
      CostCalcMgt@1004 : Codeunit "Cost Calculation Management";
      MultiLevel@1005 : Boolean;
      NextWhereUsedEntryNo@1006 : Integer;

    [External]
    PROCEDURE FindRecord@2(Which@1000 : Text[30];VAR WhereUsedList2@1001 : Record "Where-Used Line") : Boolean;
    BEGIN
      WhereUsedList.COPY(WhereUsedList2);
      if not WhereUsedList.FIND(Which) then
        exit(false);
      WhereUsedList2 := WhereUsedList;

      exit(true);
    END;

    [External]
    PROCEDURE NextRecord@3(Steps@1000 : Integer;VAR WhereUsedList2@1001 : Record "Where-Used Line") : Integer;
    VAR
      CurrentSteps@1002 : Integer;
    BEGIN
      WhereUsedList.COPY(WhereUsedList2);
      CurrentSteps := WhereUsedList.NEXT(Steps);
      if CurrentSteps <> 0 then
        WhereUsedList2 := WhereUsedList;

      exit(CurrentSteps);
    END;

    [External]
    PROCEDURE WhereUsedFromItem@4(Item@1000 : Record Item;CalcDate@1001 : Date;NewMultiLevel@1002 : Boolean);
    BEGIN
      WhereUsedList.DELETEALL;
      NextWhereUsedEntryNo := 1;
      MultiLevel := NewMultiLevel;

      BuildWhereUsedList(1,Item."No.",CalcDate,1,1);
    END;

    [External]
    PROCEDURE WhereUsedFromProdBOM@5(ProdBOM@1000 : Record "Production BOM Header";CalcDate@1001 : Date;NewMultiLevel@1002 : Boolean);
    BEGIN
      WhereUsedList.DELETEALL;
      NextWhereUsedEntryNo := 1;
      MultiLevel := NewMultiLevel;

      BuildWhereUsedList(2,ProdBOM."No.",CalcDate,1,1);
    END;

    LOCAL PROCEDURE BuildWhereUsedList@1(Type@1000 : '" ",Item,"Production BOM"';No@1001 : Code[20];CalcDate@1002 : Date;Level@1003 : Integer;Quantity@1004 : Decimal);
    VAR
      ItemAssembly@1005 : Record Item;
      ProdBOMComponent@1006 : Record "Production BOM Line";
    BEGIN
      if Level > 30 then
        exit;

      if Type = Type::"Production BOM" then begin
        ItemAssembly.SETCURRENTKEY("Production BOM No.");
        ItemAssembly.SETRANGE("Production BOM No.",No);
        if ItemAssembly.FINDSET then
          repeat
            WhereUsedList."Entry No." := NextWhereUsedEntryNo;
            WhereUsedList."Item No." := ItemAssembly."No.";
            WhereUsedList.Description := ItemAssembly.Description;
            WhereUsedList."Level Code" := Level;
            WhereUsedList."Quantity Needed" :=
              Quantity *
              (1 + ItemAssembly."Scrap %" / 100) *
              UOMMgt.GetQtyPerUnitOfMeasure(
                ItemAssembly,
                ItemAssembly."Base Unit of Measure") /
              UOMMgt.GetQtyPerUnitOfMeasure(
                ItemAssembly,
                VersionMgt.GetBOMUnitOfMeasure(
                  ItemAssembly."Production BOM No.",
                  VersionMgt.GetBOMVersion(
                    ItemAssembly."Production BOM No.",
                    CalcDate,false)));
            WhereUsedList."Version Code" := VersionMgt.GetBOMVersion(No,CalcDate,true);
            WhereUsedList.INSERT;
            NextWhereUsedEntryNo := NextWhereUsedEntryNo + 1;
            if MultiLevel then
              BuildWhereUsedList(
                1,
                ItemAssembly."No.",
                CalcDate,
                Level + 1,
                WhereUsedList."Quantity Needed");
          until ItemAssembly.NEXT = 0;
      end;

      ProdBOMComponent.SETCURRENTKEY(Type,"No.");
      ProdBOMComponent.SETRANGE(Type,Type);
      ProdBOMComponent.SETRANGE("No.",No);
      if CalcDate <> 0D then begin
        ProdBOMComponent.SETFILTER("Starting Date",'%1|..%2',0D,CalcDate);
        ProdBOMComponent.SETFILTER("Ending Date",'%1|%2..',0D,CalcDate);
      end;

      if ProdBOMComponent.FINDSET then
        repeat
          if VersionMgt.GetBOMVersion(
               ProdBOMComponent."Production BOM No.",CalcDate,true) =
             ProdBOMComponent."Version Code"
          then begin
            if IsActiveProductionBOM(ProdBOMComponent) then
              BuildWhereUsedList(
                2,
                ProdBOMComponent."Production BOM No.",
                CalcDate,
                Level,
                CostCalcMgt.CalcCompItemQtyBase(ProdBOMComponent,CalcDate,Quantity,'',false));
          end;
        until ProdBOMComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE IsActiveProductionBOM@9(ProductionBOMLine@1000 : Record "Production BOM Line") : Boolean;
    BEGIN
      if ProductionBOMLine."Version Code" = '' then
        exit(not IsProductionBOMClosed(ProductionBOMLine));

      exit(not IsProdBOMVersionClosed(ProductionBOMLine));
    END;

    LOCAL PROCEDURE IsProductionBOMClosed@10(ProductionBOMLine@1000 : Record "Production BOM Line") : Boolean;
    VAR
      ProdBOMHeader@1001 : Record "Production BOM Header";
    BEGIN
      ProdBOMHeader.GET(ProductionBOMLine."Production BOM No.");
      exit(ProdBOMHeader.Status = ProdBOMHeader.Status::Closed);
    END;

    LOCAL PROCEDURE IsProdBOMVersionClosed@11(ProductionBOMLine@1000 : Record "Production BOM Line") : Boolean;
    VAR
      ProductionBOMVersion@1001 : Record "Production BOM Version";
    BEGIN
      ProductionBOMVersion.GET(ProductionBOMLine."Production BOM No.",ProductionBOMLine."Version Code");
      exit(ProductionBOMVersion.Status = ProductionBOMVersion.Status::Closed);
    END;

    BEGIN
    END.
  }
}

