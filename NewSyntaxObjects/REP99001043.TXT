OBJECT Report 99001043 Exchange Production BOM Item
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Exchange Production BOM Item;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   Recertify := true;
                   CopyRoutingLink := true;
                 END;

    OnPreReport=BEGIN
                  if StartingDate = 0D then
                    ERROR(Text000);

                  if Type[1] = Type[1]::" " then
                    ERROR(Text001);

                  if No[1] = '' then
                    ERROR(Text002);

                  if (Type[1] = Type[2]) and (No[1] = No[2]) then
                    ERROR(ItemBOMExchangeErr,SELECTSTR(Type[1] + 1,TypeTxt),No[1],SELECTSTR(Type[2] + 1,TypeTxt),No[2]);
                END;

  }
  DATASET
  {
    { 5444;    ;DataItem;Integer             ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnPostDataItem=VAR
                                ProdBOMHeader2@1000 : Record "Production BOM Header";
                                FirstVersion@1001 : Boolean;
                              BEGIN
                                Window.OPEN(
                                  Text004 +
                                  Text005);

                                Window.UPDATE(1,SELECTSTR(Type[1] + 1,TypeTxt));
                                Window.UPDATE(2,No[1]);

                                ProdBOMLine.SETCURRENTKEY(Type,"No.");
                                ProdBOMLine.SETRANGE(Type,Type[1]);
                                ProdBOMLine.SETRANGE("No.",No[1]);

                                if ProdBOMLine.FIND('+') then
                                  repeat
                                    FirstVersion := true;
                                    ProdBOMHeader.GET(ProdBOMLine."Production BOM No.");
                                    if ProdBOMLine."Version Code" <> '' then begin
                                      ProdBOMVersionList.GET(
                                        ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code");
                                      ProdBOMHeader.Status := ProdBOMVersionList.Status;
                                      ProdBOMHeader2 := ProdBOMHeader;
                                      ProdBOMHeader2."Unit of Measure Code" := ProdBOMVersionList."Unit of Measure Code";
                                    end else begin
                                      ProdBOMVersionList.SETRANGE("Production BOM No.");
                                      ProdBOMVersionList."Version Code" := '';
                                      ProdBOMHeader2 := ProdBOMHeader;
                                    end;

                                    if IsActiveBOMVersion(ProdBOMHeader,ProdBOMLine) then begin
                                      Window.UPDATE(3,ProdBOMLine."Production BOM No.");
                                      if not CreateNewVersion then begin
                                        if ProdBOMLine."Version Code" <> '' then begin
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::"Under Development";
                                          ProdBOMVersionList.MODIFY;
                                          ProdBOMVersionList.MARK(true);
                                        end else begin
                                          ProdBOMHeader.Status := ProdBOMHeader.Status::"Under Development";
                                          ProdBOMHeader.MODIFY;
                                          ProdBOMHeader.MARK(true);
                                        end;
                                      end else begin
                                        if ProdBOMLine."Production BOM No." <> ProdBOMLine2."Production BOM No." then begin
                                          ProdBOMVersionList.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");

                                          if ProdBOMVersionList.FIND('+') then
                                            ProdBOMVersionList."Version Code" := IncrementVersionNo(ProdBOMVersionList."Production BOM No.")
                                          else begin
                                            ProdBOMVersionList."Production BOM No." := ProdBOMLine."Production BOM No.";
                                            ProdBOMVersionList."Version Code" := '1';
                                          end;
                                          ProdBOMVersionList.Description := ProdBOMHeader2.Description;
                                          ProdBOMVersionList.VALIDATE("Starting Date",StartingDate);
                                          ProdBOMVersionList."Unit of Measure Code" := ProdBOMHeader2."Unit of Measure Code";
                                          ProdBOMVersionList."Last Date Modified" := TODAY;
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::New;
                                          if  ProdBOMHeader2."Version Nos." <> '' then begin
                                            ProdBOMVersionList."No. Series" := ProdBOMHeader2."Version Nos.";
                                            ProdBOMVersionList."Version Code" := '';
                                            ProdBOMVersionList.INSERT(true);
                                          end else
                                            ProdBOMVersionList.INSERT;
                                          ProdBOMVersionList.MARK(true);
                                          ProdBOMLine3.RESET;
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          if ProdBOMLine3.FIND('-') then
                                            repeat
                                              if (ProdBOMLine.Type <> ProdBOMLine3.Type) or
                                                 (ProdBOMLine."No." <> ProdBOMLine3."No.")
                                              then begin
                                                ProdBOMLine2 := ProdBOMLine3;
                                                ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                                ProdBOMLine2.INSERT;
                                              end;
                                            until ProdBOMLine3.NEXT = 0;
                                        end else
                                          FirstVersion := false;
                                      end;

                                      if (No[2] <> '') and FirstVersion then
                                        if CreateNewVersion then begin
                                          ProdBOMLine3.SETCURRENTKEY("Production BOM No.","Version Code");
                                          ProdBOMLine3.SETRANGE(Type,Type[1]);
                                          ProdBOMLine3.SETRANGE("No.",No[1]);
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          if ProdBOMLine3.FIND('-') then
                                            repeat
                                              ProdBOMLine2 := ProdBOMLine3;
                                              ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                              ProdBOMLine2.VALIDATE(Type,Type[2]);
                                              ProdBOMLine2.VALIDATE("No.",No[2]);
                                              ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine3."Quantity per" * QtyMultiply);
                                              if CopyRoutingLink then
                                                ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine3."Routing Link Code");
                                              ProdBOMLine2."Ending Date" := 0D;
                                              ProdBOMLine2.INSERT;
                                            until ProdBOMLine3.NEXT = 0;
                                        end else begin
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMVersionList."Version Code");
                                          if not ProdBOMLine3.FIND('+') then
                                            CLEAR(ProdBOMLine3);
                                          ProdBOMLine3."Line No." := ProdBOMLine3."Line No." + 10000;
                                          ProdBOMLine2 := ProdBOMLine;
                                          ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                          ProdBOMLine2."Line No." := ProdBOMLine3."Line No.";
                                          ProdBOMLine2.VALIDATE(Type,Type[2]);
                                          ProdBOMLine2.VALIDATE("No.",No[2]);
                                          ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine."Quantity per" * QtyMultiply);
                                          if CopyRoutingLink then
                                            ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine."Routing Link Code");
                                          if not CreateNewVersion then
                                            ProdBOMLine2."Starting Date" := StartingDate;
                                          ProdBOMLine2."Ending Date" := 0D;
                                          ProdBOMLine2.INSERT;
                                          if DeleteExcComp then
                                            ProdBOMLine.DELETE(true)
                                          else begin
                                            ProdBOMLine."Ending Date" := StartingDate - 1;
                                            ProdBOMLine.MODIFY;
                                          end;
                                        end;
                                    end;
                                  until ProdBOMLine.NEXT(-1) = 0;
                              END;
                               }

    { 5317;    ;DataItem;RecertifyLoop       ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  if Recertify then begin
                                    ProdBOMHeader.MARKEDONLY(true);
                                    if ProdBOMHeader.FIND('-') then
                                      repeat
                                        ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
                                        ProdBOMHeader.MODIFY;
                                      until ProdBOMHeader.NEXT = 0;

                                    ProdBOMVersionList.SETRANGE("Production BOM No.");
                                    ProdBOMVersionList.MARKEDONLY(true);
                                    if ProdBOMVersionList.FIND('-') then
                                      repeat
                                        ProdBOMVersionList.VALIDATE(Status,ProdBOMVersionList.Status::Certified);
                                        ProdBOMVersionList.MODIFY;
                                      until ProdBOMVersionList.NEXT = 0;
                                  end;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               DeleteExchangedComponentEditab := true;
               CreateNewVersionEditable := true;
               CreateNewVersion := true;
               QtyMultiply := 1;
               StartingDate := WORKDATE;
             END;

      OnOpenPage=BEGIN
                   CreateNewVersionEditable := not DeleteExcComp;
                   DeleteExchangedComponentEditab := not CreateNewVersion;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 4   ;2   ;Group     ;
                  Name=Exchange;
                  CaptionML=ENU=Exchange }

      { 5   ;3   ;Field     ;
                  Name=ExchangeType;
                  CaptionML=ENU=Type;
                  ToolTipML=ENU=Specifies what is to be exchanged here - Item or Production BOM.;
                  OptionCaptionML=ENU=" ,Item,Production BOM";
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Type[1];
                  OnValidate=BEGIN
                               No[1] := '';
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=ExchangeNo;
                  CaptionML=ENU=No.;
                  ToolTipML=ENU=Specifies the number of the item.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=No[1];
                  OnValidate=BEGIN
                               if Type[1] = Type::" " then
                                 ERROR(Text006);

                               case Type[1] of
                                 Type[1]::Item:
                                   Item.GET(No[1]);
                                 Type[1]::"Production BOM":
                                   ProdBOMHeader.GET(No[1]);
                               end;
                             END;

                  OnLookup=BEGIN
                             case Type[1] of
                               Type[1]::Item:
                                 if PAGE.RUNMODAL(0,Item) = ACTION::LookupOK then begin
                                   Text := Item."No.";
                                   exit(true);
                                 end;
                               Type[1]::"Production BOM":
                                 if PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK then begin
                                   Text := ProdBOMHeader."No.";
                                   exit(true);
                                 end;
                             end;
                           END;
                            }

      { 8   ;2   ;Group     ;
                  Name=With;
                  CaptionML=ENU=With }

      { 12  ;3   ;Field     ;
                  Name=WithType;
                  CaptionML=ENU=Type;
                  ToolTipML=ENU=Specifies your new selection that will replace what you selected in the Exchange Type field - Item or Production BOM.;
                  OptionCaptionML=ENU=" ,Item,Production BOM";
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Type[2];
                  OnValidate=BEGIN
                               No[2] := '';
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=WithNo;
                  CaptionML=ENU=No.;
                  ToolTipML=ENU=Specifies the number of the item.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=No[2];
                  OnValidate=BEGIN
                               if Type[1] = Type::" " then
                                 ERROR(Text006);

                               case Type[2] of
                                 Type[2]::Item:
                                   Item.GET(No[2]);
                                 Type[2]::"Production BOM":
                                   ProdBOMHeader.GET(No[2]);
                               end;
                             END;

                  OnLookup=BEGIN
                             case Type[2] of
                               Type[2]::Item:
                                 if PAGE.RUNMODAL(0,Item) = ACTION::LookupOK then begin
                                   Text := Item."No.";
                                   exit(true);
                                 end;
                               Type[2]::"Production BOM":
                                 if PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK then begin
                                   Text := ProdBOMHeader."No.";
                                   exit(true);
                                 end;
                             end;
                             exit(false);
                           END;
                            }

      { 15  ;2   ;Field     ;
                  Name=Create New Version;
                  CaptionML=ENU=Create New Version;
                  ToolTipML=ENU=Specifies if you want to make the exchange in a new version.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=CreateNewVersion;
                  Editable=CreateNewVersionEditable;
                  OnValidate=BEGIN
                               CreateNewVersionOnAfterValidat;
                             END;
                              }

      { 13  ;2   ;Field     ;
                  Name=MultiplyQtyWith;
                  CaptionML=ENU=Multiply Qty. with;
                  ToolTipML=ENU=Specifies the value of a quantity change here. If the quantity is to remain the same, enter 1 here. If you enter 2, the new quantities doubled in comparison with original quantity.;
                  ApplicationArea=#Manufacturing;
                  DecimalPlaces=0:5;
                  SourceExpr=QtyMultiply }

      { 3   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which these changes are to become valid.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=StartingDate }

      { 19  ;2   ;Field     ;
                  Name=Recertify;
                  CaptionML=ENU=Recertify;
                  ToolTipML=ENU=Specifies if you want the production BOM to be certified after the change.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=Recertify }

      { 17  ;2   ;Field     ;
                  Name=CopyRoutingLink;
                  CaptionML=ENU=Copy Routing Link;
                  ToolTipML=ENU=Specifies whether or not you want the routing link copied.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=CopyRoutingLink }

      { 21  ;2   ;Field     ;
                  Name=Delete Exchanged Component;
                  CaptionML=ENU=Delete Exchanged Component;
                  ToolTipML=ENU=Specifies whether you want the exchanged component deleted.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=DeleteExcComp;
                  Editable=DeleteExchangedComponentEditab;
                  OnValidate=BEGIN
                               DeleteExcCompOnAfterValidate;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must enter a Starting Date.';
      Text001@1001 : TextConst 'ENU=You must enter the Type to exchange.';
      Text002@1002 : TextConst 'ENU=You must enter the No. to exchange.';
      ItemBOMExchangeErr@1003 : TextConst '@@@=%1 and %3 are strings (''Item'' or ''Production BOM''), %2 and %4 are either an Item No. or a Production BOM Header No. (Code[20]);ENU=You cannot exchange %1 %2 with %3 %4.';
      Text004@1004 : TextConst 'ENU=Exchanging #1########## #2############\';
      Text005@1005 : TextConst 'ENU=Production BOM No.      #3############';
      Text006@1006 : TextConst 'ENU=Type must be entered.';
      Item@1007 : Record Item;
      ProdBOMHeader@1008 : Record "Production BOM Header";
      ProdBOMVersionList@1009 : Record "Production BOM Version";
      ProdBOMLine@1010 : Record "Production BOM Line";
      ProdBOMLine2@1011 : Record "Production BOM Line";
      ProdBOMLine3@1012 : Record "Production BOM Line";
      Window@1013 : Dialog;
      Type@1014 : ARRAY [2] OF '" ",Item,"Production BOM"';
      No@1015 : ARRAY [2] OF Code[20];
      QtyMultiply@1016 : Decimal;
      CreateNewVersion@1017 : Boolean;
      StartingDate@1018 : Date;
      Recertify@1019 : Boolean;
      TypeTxt@1020 : TextConst 'ENU=" ,Item,Production BOM"';
      CopyRoutingLink@1021 : Boolean;
      DeleteExcComp@1022 : Boolean;
      CreateNewVersionEditable@19037184 : Boolean INDATASET;
      DeleteExchangedComponentEditab@19075716 : Boolean INDATASET;

    LOCAL PROCEDURE CreateNewVersionOnAfterValidat@19007803();
    BEGIN
      CreateNewVersionEditable := not DeleteExcComp;
      DeleteExchangedComponentEditab := not CreateNewVersion;
    END;

    LOCAL PROCEDURE DeleteExcCompOnAfterValidate@19039897();
    BEGIN
      CreateNewVersionEditable := not DeleteExcComp;
      DeleteExchangedComponentEditab := not CreateNewVersion;
    END;

    LOCAL PROCEDURE IsActiveBOMVersion@1(ProdBOMHeader@1000 : Record "Production BOM Header";ProdBOMLine@1003 : Record "Production BOM Line") : Boolean;
    VAR
      VersionManagement@1002 : Codeunit VersionManagement;
    BEGIN
      if ProdBOMHeader.Status = ProdBOMHeader.Status::Closed then
        exit(false);

      exit(ProdBOMLine."Version Code" = VersionManagement.GetBOMVersion(ProdBOMLine."Production BOM No.",StartingDate,true));
    END;

    LOCAL PROCEDURE IncrementVersionNo@5(ProductionBOMNo@1000 : Code[20]) Result : Code[20];
    VAR
      ProductionBOMVersion@1001 : Record "Production BOM Version";
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      if ProductionBOMVersion.FINDLAST then begin
        Result := INCSTR(ProductionBOMVersion."Version Code");
        ProductionBOMVersion.SETRANGE("Version Code",Result);
        while not ProductionBOMVersion.ISEMPTY do begin
          Result := INCSTR(Result);
          if Result = '' then
            exit(Result);
          ProductionBOMVersion.SETRANGE("Version Code",Result);
        end;
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

