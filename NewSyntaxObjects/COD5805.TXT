OBJECT Codeunit 5805 Item Charge Assgnt. (Purch.)
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Purchase Header"=r,
                TableData "Purchase Line"=r,
                TableData "Purch. Rcpt. Line"=r,
                TableData "Item Charge Assignment (Purch)"=imd,
                TableData "Return Shipment Line"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Equally,By Amount,By Weight,By Volume';
      SuggestItemChargeMsg@1001 : TextConst 'ENU=Select how to distribute the assigned item charge when the document has more than one line of type Item.';

    [External]
    PROCEDURE InsertItemChargeAssgnt@1(ItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";ApplToDocType@1001 : Option;ApplToDocNo2@1002 : Code[20];ApplToDocLineNo2@1003 : Integer;ItemNo2@1004 : Code[20];Description2@1005 : Text[50];VAR NextLineNo@1006 : Integer);
    BEGIN
      InsertItemChargeAssgntWithAssignValues(
        ItemChargeAssgntPurch,ApplToDocType,ApplToDocNo2,ApplToDocLineNo2,ItemNo2,Description2,0,0,NextLineNo);
    END;

    PROCEDURE InsertItemChargeAssgntWithAssignValues@19(FromItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";ApplToDocType@1001 : Option;FromApplToDocNo@1002 : Code[20];FromApplToDocLineNo@1003 : Integer;FromItemNo@1004 : Code[20];FromDescription@1005 : Text[50];QtyToAssign@1008 : Decimal;AmountToAssign@1009 : Decimal;VAR NextLineNo@1006 : Integer);
    VAR
      ItemChargeAssgntPurch@1007 : Record "Item Charge Assignment (Purch)";
    BEGIN
      NextLineNo := NextLineNo + 10000;

      // TODO: try to use InsertPurchChargeAssignLine from COD103492 if possibile
      ItemChargeAssgntPurch."Document No." := FromItemChargeAssgntPurch."Document No.";
      ItemChargeAssgntPurch."Document Type" := FromItemChargeAssgntPurch."Document Type";
      ItemChargeAssgntPurch."Document Line No." := FromItemChargeAssgntPurch."Document Line No.";
      ItemChargeAssgntPurch."Item Charge No." := FromItemChargeAssgntPurch."Item Charge No.";
      ItemChargeAssgntPurch."Line No." := NextLineNo;
      ItemChargeAssgntPurch."Applies-to Doc. No." := FromApplToDocNo;
      ItemChargeAssgntPurch."Applies-to Doc. Type" := ApplToDocType;
      ItemChargeAssgntPurch."Applies-to Doc. Line No." := FromApplToDocLineNo;
      ItemChargeAssgntPurch."Item No." := FromItemNo;
      ItemChargeAssgntPurch.Description := FromDescription;
      ItemChargeAssgntPurch."Unit Cost" := FromItemChargeAssgntPurch."Unit Cost";
      if QtyToAssign <> 0 then begin
        ItemChargeAssgntPurch."Amount to Assign" := AmountToAssign;
        ItemChargeAssgntPurch.VALIDATE("Qty. to Assign",QtyToAssign);
      end;
      ItemChargeAssgntPurch.INSERT;
    END;

    [External]
    PROCEDURE CreateDocChargeAssgnt@2(LastItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";ReceiptNo@1001 : Code[20]);
    VAR
      FromPurchLine@1002 : Record "Purchase Line";
      ItemChargeAssgntPurch@1003 : Record "Item Charge Assignment (Purch)";
      NextLineNo@1004 : Integer;
    BEGIN
      with LastItemChargeAssgntPurch do begin
        FromPurchLine.SETRANGE("Document Type","Document Type");
        FromPurchLine.SETRANGE("Document No.","Document No.");
        FromPurchLine.SETRANGE(Type,FromPurchLine.Type::Item);
        if FromPurchLine.FIND('-') then begin
          NextLineNo := "Line No.";
          ItemChargeAssgntPurch.RESET;
          ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");
          ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
          repeat
            if (FromPurchLine.Quantity <> 0) and
               (FromPurchLine.Quantity <> FromPurchLine."Quantity Invoiced") and
               (FromPurchLine."Work Center No." = '') and
               ((ReceiptNo = '') or (FromPurchLine."Receipt No." = ReceiptNo)) and
               FromPurchLine."Allow Item Charge Assignment"
            then begin
              ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",FromPurchLine."Line No.");
              if not ItemChargeAssgntPurch.FINDFIRST then
                InsertItemChargeAssgnt(
                  LastItemChargeAssgntPurch,FromPurchLine."Document Type",
                  FromPurchLine."Document No.",FromPurchLine."Line No.",
                  FromPurchLine."No.",FromPurchLine.Description,NextLineNo);
            end;
          until FromPurchLine.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE CreateRcptChargeAssgnt@3(VAR FromPurchRcptLine@1000 : Record "Purch. Rcpt. Line";ItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)");
    VAR
      ItemChargeAssgntPurch2@1002 : Record "Item Charge Assignment (Purch)";
      NextLine@1003 : Integer;
    BEGIN
      FromPurchRcptLine.TESTFIELD("Work Center No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt);
      repeat
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromPurchRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromPurchRcptLine."Line No.");
        if not ItemChargeAssgntPurch2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt,
            FromPurchRcptLine."Document No.",FromPurchRcptLine."Line No.",
            FromPurchRcptLine."No.",FromPurchRcptLine.Description,NextLine);
      until FromPurchRcptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateTransferRcptChargeAssgnt@4(VAR FromTransRcptLine@1000 : Record "Transfer Receipt Line";ItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)");
    VAR
      ItemChargeAssgntPurch2@1002 : Record "Item Charge Assignment (Purch)";
      NextLine@1003 : Integer;
    BEGIN
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt");
      repeat
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromTransRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromTransRcptLine."Line No.");
        if not ItemChargeAssgntPurch2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt",
            FromTransRcptLine."Document No.",FromTransRcptLine."Line No.",
            FromTransRcptLine."Item No.",FromTransRcptLine.Description,NextLine);
      until FromTransRcptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateShptChargeAssgnt@6(VAR FromReturnShptLine@1000 : Record "Return Shipment Line";ItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)");
    VAR
      ItemChargeAssgntPurch2@1002 : Record "Item Charge Assignment (Purch)";
      NextLine@1003 : Integer;
    BEGIN
      FromReturnShptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment");
      repeat
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnShptLine."Line No.");
        if not ItemChargeAssgntPurch2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment",
            FromReturnShptLine."Document No.",FromReturnShptLine."Line No.",
            FromReturnShptLine."No.",FromReturnShptLine.Description,NextLine);
      until FromReturnShptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateSalesShptChargeAssgnt@8(VAR FromSalesShptLine@1000 : Record "Sales Shipment Line";ItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)");
    VAR
      ItemChargeAssgntPurch2@1002 : Record "Item Charge Assignment (Purch)";
      NextLine@1003 : Integer;
    BEGIN
      FromSalesShptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment");
      repeat
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromSalesShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromSalesShptLine."Line No.");
        if not ItemChargeAssgntPurch2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment",
            FromSalesShptLine."Document No.",FromSalesShptLine."Line No.",
            FromSalesShptLine."No.",FromSalesShptLine.Description,NextLine);
      until FromSalesShptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateReturnRcptChargeAssgnt@7(VAR FromReturnRcptLine@1000 : Record "Return Receipt Line";ItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)");
    VAR
      ItemChargeAssgntPurch2@1002 : Record "Item Charge Assignment (Purch)";
      NextLine@1003 : Integer;
    BEGIN
      FromReturnRcptLine.TESTFIELD("Job No.",'');
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt");
      repeat
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnRcptLine."Line No.");
        if not ItemChargeAssgntPurch2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt",
            FromReturnRcptLine."Document No.",FromReturnRcptLine."Line No.",
            FromReturnRcptLine."No.",FromReturnRcptLine.Description,NextLine);
      until FromReturnRcptLine.NEXT = 0;
    END;

    [Internal]
    PROCEDURE SuggestAssgnt@5(PurchLine@1000 : Record "Purchase Line";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1003 : Decimal);
    VAR
      ItemChargeAssgntPurch@1004 : Record "Item Charge Assignment (Purch)";
      Selection@1002 : Integer;
    BEGIN
      with PurchLine do begin
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      end;
      if ItemChargeAssgntPurch.ISEMPTY then
        exit;

      ItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");

      Selection := 1;
      if ItemChargeAssgntPurch.COUNT > 1 then
        Selection := STRMENU(Text000,2,SuggestItemChargeMsg);

      if Selection = 0 then
        exit;

      SuggestAssgnt2(PurchLine,TotalQtyToAssign,TotalAmtToAssign,Selection);
    END;

    [External]
    PROCEDURE SuggestAssgnt2@9(PurchLine@1000 : Record "Purchase Line";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1021 : Decimal;Selection@1018 : Integer);
    VAR
      Currency@1014 : Record Currency;
      PurchHeader@1003 : Record "Purchase Header";
      ItemChargeAssgntPurch@1007 : Record "Item Charge Assignment (Purch)";
    BEGIN
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

      if not Currency.GET(PurchHeader."Currency Code") then
        Currency.InitRoundingPrecision;

      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
      if ItemChargeAssgntPurch.FINDFIRST then
        case Selection of
          1:
            AssignEqually(ItemChargeAssgntPurch,Currency,TotalQtyToAssign,TotalAmtToAssign);
          2:
            AssignByAmount(ItemChargeAssgntPurch,Currency,PurchHeader,TotalQtyToAssign,TotalAmtToAssign);
          3:
            AssignByWeight(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
          4:
            AssignByVolume(ItemChargeAssgntPurch,Currency,TotalQtyToAssign);
        end;
    END;

    LOCAL PROCEDURE AssignEqually@26(VAR ItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";Currency@1003 : Record Currency;TotalQtyToAssign@1005 : Decimal;TotalAmtToAssign@1004 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1001 : TEMPORARY Record "Item Charge Assignment (Purch)";
      RemainingNumOfLines@1002 : Integer;
    BEGIN
      repeat
        if not ItemChargeAssgntPurch.PurchLineInvoiced then begin
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
        end;
      until ItemChargeAssgntPurch.NEXT = 0;

      if TempItemChargeAssgntPurch.FINDSET(true) then begin
        RemainingNumOfLines := TempItemChargeAssgntPurch.COUNT;
        repeat
          ItemChargeAssgntPurch.GET(
            TempItemChargeAssgntPurch."Document Type",
            TempItemChargeAssgntPurch."Document No.",
            TempItemChargeAssgntPurch."Document Line No.",
            TempItemChargeAssgntPurch."Line No.");
          ItemChargeAssgntPurch."Qty. to Assign" := ROUND(TotalQtyToAssign / RemainingNumOfLines,0.00001);
          ItemChargeAssgntPurch."Amount to Assign" :=
            ROUND(
              ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
              Currency."Amount Rounding Precision");
          TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
          TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          RemainingNumOfLines := RemainingNumOfLines - 1;
          ItemChargeAssgntPurch.MODIFY;
        until TempItemChargeAssgntPurch.NEXT = 0;
      end;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByAmount@27(VAR ItemChargeAssgntPurch@1003 : Record "Item Charge Assignment (Purch)";Currency@1002 : Record Currency;PurchHeader@1008 : Record "Purchase Header";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1000 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record "Item Charge Assignment (Purch)";
      PurchLine@1005 : Record "Purchase Line";
      PurchRcptLine@1006 : Record "Purch. Rcpt. Line";
      CurrExchRate@1009 : Record "Currency Exchange Rate";
      ReturnRcptLine@1010 : Record "Return Receipt Line";
      ReturnShptLine@1011 : Record "Return Shipment Line";
      SalesShptLine@1012 : Record "Sales Shipment Line";
      CurrencyCode@1007 : Code[10];
      TotalAppliesToDocLineAmount@1013 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssgntPurch.PurchLineInvoiced then begin
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          case ItemChargeAssgntPurch."Applies-to Doc. Type" of
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Quote,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Order,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Invoice,
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Order",
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Credit Memo":
              begin
                PurchLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. Type",
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                  ABS(PurchLine."Line Amount");
              end;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
              begin
                PurchRcptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := PurchRcptLine.GetCurrencyCodeFromHeader;
                if CurrencyCode = PurchHeader."Currency Code" then
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(PurchRcptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(PurchRcptLine."Item Charge Base Amount"));
              end;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
              begin
                ReturnShptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := ReturnShptLine.GetCurrencyCode;
                if CurrencyCode = PurchHeader."Currency Code" then
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(ReturnShptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(ReturnShptLine."Item Charge Base Amount"));
              end;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
              begin
                SalesShptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := SalesShptLine.GetCurrencyCode;
                if CurrencyCode = PurchHeader."Currency Code" then
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(SalesShptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(SalesShptLine."Item Charge Base Amount"));
              end;
            ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
              begin
                ReturnRcptLine.GET(
                  ItemChargeAssgntPurch."Applies-to Doc. No.",
                  ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                CurrencyCode := ReturnRcptLine.GetCurrencyCode;
                if CurrencyCode = PurchHeader."Currency Code" then
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    ABS(ReturnRcptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                      ABS(ReturnRcptLine."Item Charge Base Amount"));
              end;
          end;
          if TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" <> 0 then
            TempItemChargeAssgntPurch.INSERT
          else begin
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          end;
          TotalAppliesToDocLineAmount += TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
        end;
      until ItemChargeAssgntPurch.NEXT = 0;

      if TempItemChargeAssgntPurch.FINDSET(true) then
        repeat
          ItemChargeAssgntPurch.GET(
            TempItemChargeAssgntPurch."Document Type",
            TempItemChargeAssgntPurch."Document No.",
            TempItemChargeAssgntPurch."Document Line No.",
            TempItemChargeAssgntPurch."Line No.");
          if TotalQtyToAssign <> 0 then begin
            ItemChargeAssgntPurch."Qty. to Assign" :=
              ROUND(
                TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" / TotalAppliesToDocLineAmount * TotalQtyToAssign,
                0.00001);
            ItemChargeAssgntPurch."Amount to Assign" :=
              ROUND(
                ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
            TotalAppliesToDocLineAmount -= TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
            ItemChargeAssgntPurch.MODIFY;
          end;
        until TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByWeight@29(VAR ItemChargeAssgntPurch@1003 : Record "Item Charge Assignment (Purch)";Currency@1002 : Record Currency;TotalQtyToAssign@1001 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record "Item Charge Assignment (Purch)";
      LineAray@1005 : ARRAY [3] OF Decimal;
      TotalGrossWeight@1006 : Decimal;
      QtyRemainder@1007 : Decimal;
      AmountRemainder@1008 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssgntPurch.PurchLineInvoiced then begin
          TempItemChargeAssgntPurch.INIT;
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          TotalGrossWeight := TotalGrossWeight + (LineAray[2] * LineAray[1]);
        end;
      until ItemChargeAssgntPurch.NEXT = 0;

      if TempItemChargeAssgntPurch.FINDSET(true) then
        repeat
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          if TotalGrossWeight <> 0 then
            TempItemChargeAssgntPurch."Qty. to Assign" :=
              (TotalQtyToAssign * LineAray[2] * LineAray[1]) / TotalGrossWeight + QtyRemainder
          else
            TempItemChargeAssgntPurch."Qty. to Assign" := 0;
          AssignPurchItemCharge(ItemChargeAssgntPurch,TempItemChargeAssgntPurch,Currency,QtyRemainder,AmountRemainder);
        until TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByVolume@28(VAR ItemChargeAssgntPurch@1003 : Record "Item Charge Assignment (Purch)";Currency@1002 : Record Currency;TotalQtyToAssign@1001 : Decimal);
    VAR
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record "Item Charge Assignment (Purch)";
      LineAray@1005 : ARRAY [3] OF Decimal;
      TotalUnitVolume@1006 : Decimal;
      QtyRemainder@1007 : Decimal;
      AmountRemainder@1008 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssgntPurch.PurchLineInvoiced then begin
          TempItemChargeAssgntPurch.INIT;
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          TotalUnitVolume := TotalUnitVolume + (LineAray[3] * LineAray[1]);
        end;
      until ItemChargeAssgntPurch.NEXT = 0;

      if TempItemChargeAssgntPurch.FINDSET(true) then
        repeat
          GetItemValues(TempItemChargeAssgntPurch,LineAray);
          if TotalUnitVolume <> 0 then
            TempItemChargeAssgntPurch."Qty. to Assign" :=
              (TotalQtyToAssign * LineAray[3] * LineAray[1]) / TotalUnitVolume + QtyRemainder
          else
            TempItemChargeAssgntPurch."Qty. to Assign" := 0;
          AssignPurchItemCharge(ItemChargeAssgntPurch,TempItemChargeAssgntPurch,Currency,QtyRemainder,AmountRemainder);
        until TempItemChargeAssgntPurch.NEXT = 0;
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE AssignPurchItemCharge@12(VAR ItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";ItemChargeAssgntPurch2@1001 : Record "Item Charge Assignment (Purch)";Currency@1002 : Record Currency;VAR QtyRemainder@1004 : Decimal;VAR AmountRemainder@1003 : Decimal);
    BEGIN
      ItemChargeAssgntPurch.GET(
        ItemChargeAssgntPurch2."Document Type",
        ItemChargeAssgntPurch2."Document No.",
        ItemChargeAssgntPurch2."Document Line No.",
        ItemChargeAssgntPurch2."Line No.");
      ItemChargeAssgntPurch."Qty. to Assign" := ROUND(ItemChargeAssgntPurch2."Qty. to Assign",0.00001);
      ItemChargeAssgntPurch."Amount to Assign" :=
        ItemChargeAssgntPurch."Qty. to Assign" * ItemChargeAssgntPurch."Unit Cost" + AmountRemainder;
      AmountRemainder := ItemChargeAssgntPurch."Amount to Assign" -
        ROUND(ItemChargeAssgntPurch."Amount to Assign",Currency."Amount Rounding Precision");
      QtyRemainder := ItemChargeAssgntPurch2."Qty. to Assign" - ItemChargeAssgntPurch."Qty. to Assign";
      ItemChargeAssgntPurch."Amount to Assign" :=
        ROUND(ItemChargeAssgntPurch."Amount to Assign",Currency."Amount Rounding Precision");
      ItemChargeAssgntPurch.MODIFY;
    END;

    PROCEDURE GetItemValues@35(TempItemChargeAssgntPurch@1000 : TEMPORARY Record "Item Charge Assignment (Purch)";VAR DecimalArray@1001 : ARRAY [3] OF Decimal);
    VAR
      PurchLine@1002 : Record "Purchase Line";
      PurchRcptLine@1003 : Record "Purch. Rcpt. Line";
      ReturnShptLine@1004 : Record "Return Shipment Line";
      TransferRcptLine@1005 : Record "Transfer Receipt Line";
      SalesShptLine@1006 : Record "Sales Shipment Line";
      ReturnRcptLine@1007 : Record "Return Receipt Line";
    BEGIN
      CLEAR(DecimalArray);
      with TempItemChargeAssgntPurch do
        case "Applies-to Doc. Type" of
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice,
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            begin
              PurchLine.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := PurchLine.Quantity;
              DecimalArray[2] := PurchLine."Gross Weight";
              DecimalArray[3] := PurchLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::Receipt:
            begin
              PurchRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := PurchRcptLine.Quantity;
              DecimalArray[2] := PurchRcptLine."Gross Weight";
              DecimalArray[3] := PurchRcptLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::"Return Receipt":
            begin
              ReturnRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := ReturnRcptLine.Quantity;
              DecimalArray[2] := ReturnRcptLine."Gross Weight";
              DecimalArray[3] := ReturnRcptLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::"Return Shipment":
            begin
              ReturnShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := ReturnShptLine.Quantity;
              DecimalArray[2] := ReturnShptLine."Gross Weight";
              DecimalArray[3] := ReturnShptLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::"Transfer Receipt":
            begin
              TransferRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := TransferRcptLine.Quantity;
              DecimalArray[2] := TransferRcptLine."Gross Weight";
              DecimalArray[3] := TransferRcptLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::"Sales Shipment":
            begin
              SalesShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := SalesShptLine.Quantity;
              DecimalArray[2] := SalesShptLine."Gross Weight";
              DecimalArray[3] := SalesShptLine."Unit Volume";
            end;
        end;
    END;

    [External]
    PROCEDURE SuggestAssgntFromLine@11(VAR FromItemChargeAssignmentPurch@1000 : Record "Item Charge Assignment (Purch)");
    VAR
      Currency@1014 : Record Currency;
      PurchHeader@1003 : Record "Purchase Header";
      ItemChargeAssignmentPurch@1007 : Record "Item Charge Assignment (Purch)";
      TempItemChargeAssgntPurch@1008 : TEMPORARY Record "Item Charge Assignment (Purch)";
      TotalAmountToAssign@1013 : Decimal;
      TotalQtyToAssign@1012 : Decimal;
      ItemChargeAssgntLineAmt@1001 : Decimal;
      ItemChargeAssgntLineQty@1011 : Decimal;
    BEGIN
      with FromItemChargeAssignmentPurch do begin
        PurchHeader.GET("Document Type","Document No.");
        if not Currency.GET(PurchHeader."Currency Code") then
          Currency.InitRoundingPrecision;

        GetItemChargeAssgntLineAmounts(
          "Document Type","Document No.","Document Line No.",
          ItemChargeAssgntLineQty,ItemChargeAssgntLineAmt);

        if not ItemChargeAssignmentPurch.GET("Document Type","Document No.","Document Line No.","Line No.") then
          exit;

        ItemChargeAssignmentPurch."Qty. to Assign" := "Qty. to Assign";
        ItemChargeAssignmentPurch."Amount to Assign" := "Amount to Assign";
        ItemChargeAssignmentPurch.MODIFY;

        ItemChargeAssignmentPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssignmentPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssignmentPurch.SETRANGE("Document Line No.","Document Line No.");
        ItemChargeAssignmentPurch.CALCSUMS("Qty. to Assign","Amount to Assign");
        TotalQtyToAssign := ItemChargeAssignmentPurch."Qty. to Assign";
        TotalAmountToAssign := ItemChargeAssignmentPurch."Amount to Assign";

        if TotalAmountToAssign = ItemChargeAssgntLineAmt then
          exit;

        if TotalQtyToAssign = ItemChargeAssgntLineQty then begin
          TotalAmountToAssign := ItemChargeAssgntLineAmt;
          ItemChargeAssignmentPurch.FINDSET;
          repeat
            if not ItemChargeAssignmentPurch.PurchLineInvoiced then begin
              TempItemChargeAssgntPurch := ItemChargeAssignmentPurch;
              TempItemChargeAssgntPurch.INSERT;
            end;
          until ItemChargeAssignmentPurch.NEXT = 0;

          if TempItemChargeAssgntPurch.FINDSET then begin
            repeat
              ItemChargeAssignmentPurch.GET(
                TempItemChargeAssgntPurch."Document Type",
                TempItemChargeAssgntPurch."Document No.",
                TempItemChargeAssgntPurch."Document Line No.",
                TempItemChargeAssgntPurch."Line No.");
              if TotalQtyToAssign <> 0 then begin
                ItemChargeAssignmentPurch."Amount to Assign" :=
                  ROUND(
                    ItemChargeAssignmentPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmountToAssign,
                    Currency."Amount Rounding Precision");
                TotalQtyToAssign -= ItemChargeAssignmentPurch."Qty. to Assign";
                TotalAmountToAssign -= ItemChargeAssignmentPurch."Amount to Assign";
                ItemChargeAssignmentPurch.MODIFY;
              end;
            until TempItemChargeAssgntPurch.NEXT = 0;
          end;
        end;

        ItemChargeAssignmentPurch.GET("Document Type","Document No.","Document Line No.","Line No.");
      end;

      FromItemChargeAssignmentPurch := ItemChargeAssignmentPurch;
    END;

    LOCAL PROCEDURE GetItemChargeAssgntLineAmounts@14(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];DocumentLineNo@1002 : Integer;VAR ItemChargeAssgntLineQty@1003 : Decimal;VAR ItemChargeAssgntLineAmt@1004 : Decimal);
    VAR
      PurchLine@1005 : Record "Purchase Line";
      PurchHeader@1006 : Record "Purchase Header";
      Currency@1007 : Record Currency;
    BEGIN
      PurchHeader.GET(DocumentType,DocumentNo);
      if not Currency.GET(PurchHeader."Currency Code") then
        Currency.InitRoundingPrecision;

      with PurchLine do begin
        GET(DocumentType,DocumentNo,DocumentLineNo);
        TESTFIELD(Type,Type::"Charge (Item)");
        TESTFIELD("No.");
        TESTFIELD(Quantity);

        if ("Inv. Discount Amount" = 0) and
           ("Line Discount Amount" = 0) and
           (not PurchHeader."Prices Including VAT")
        then
          ItemChargeAssgntLineAmt := "Line Amount"
        else
          if PurchHeader."Prices Including VAT" then
            ItemChargeAssgntLineAmt :=
              ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                Currency."Amount Rounding Precision")
          else
            ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";

        ItemChargeAssgntLineAmt :=
          ROUND(
            ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
            Currency."Amount Rounding Precision");
        ItemChargeAssgntLineQty := "Qty. to Invoice";
      end;
    END;

    BEGIN
    END.
  }
}

