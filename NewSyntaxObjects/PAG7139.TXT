OBJECT Page 7139 Sales Budget Overview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Budget Overview;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    PageType=ListPlus;
    OnInit=BEGIN
             BudgetDim3FilterEnable := true;
             BudgetDim2FilterEnable := true;
             BudgetDim1FilterEnable := true;
           END;

    OnOpenPage=BEGIN
                 if ValueType = 0 then
                   ValueType := ValueType::"Sales Amount";
                 CurrentAnalysisArea := CurrentAnalysisArea::Sales;
                 ItemBudgetManagement.BudgetNameSelection(
                   CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);

                 if (NewBudgetName <> '') and (CurrentBudgetName <> NewBudgetName) then begin
                   CurrentBudgetName := NewBudgetName;
                   ItemBudgetManagement.CheckBudgetName(CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName);
                   ItemBudgetManagement.SetItemBudgetName(
                     CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                     BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                 end;

                 ItemBudgetManagement.SetLineAndColDim(
                   ItemBudgetName,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);

                 GLSetup.GET;
                 SourceTypeFilter := SourceTypeFilter::Customer;

                 UpdateDimCtrls;

                 FindPeriod('');
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                 UpdateMatrixSubForm;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 40      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 41      ;2   ;Action    ;
                      Name=Reverse Lines and Columns;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#SalesBudget;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemBudgetManagement.ValidateLineDimCode(
                                   ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemBudgetManagement.ValidateColumnDimCode(
                                   ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 53      ;2   ;Separator ;
                      Name=Separator53 }
      { 54      ;2   ;Action    ;
                      Name=DeleteBudget;
                      CaptionML=ENU=Delete Budget;
                      ToolTipML=ENU=Delete the current budget.;
                      ApplicationArea=#SalesBudget;
                      Image=Delete;
                      OnAction=BEGIN
                                 ItemBudgetManagement.DeleteBudget(
                                   CurrentAnalysisArea,CurrentBudgetName,
                                   ItemFilter,DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                               END;
                                }
      { 55      ;2   ;Separator ;
                      Name=Separator55 }
      { 42      ;1   ;ActionGroup;
                      Name=Export to Excel;
                      CaptionML=ENU=Export to Excel;
                      Image=ExportToExcel }
      { 38      ;2   ;Action    ;
                      Name=Create New Document;
                      CaptionML=ENU=Create New Document;
                      ToolTipML=ENU=Open the analysis report in a new Excel workbook. This creates an Excel workbook on your device.;
                      ApplicationArea=#SalesBudget;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportItemBudgetToExcel@1000 : Report "Export Item Budget to Excel";
                               BEGIN
                                 ExportItemBudgetToExcel.SetOptions(
                                   CurrentAnalysisArea,
                                   CurrentBudgetName,
                                   ValueType,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter,
                                   DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   ItemFilter,
                                   InternalDateFilter,PeriodInitialized,PeriodType,
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,RoundingFactor);
                                 ExportItemBudgetToExcel.RUN;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=Update Existing Document;
                      CaptionML=ENU=Update Existing Document;
                      ToolTipML=ENU=Refresh the data in an existing Excel workbook. You must specify the workbook that you want to update.;
                      ApplicationArea=#SalesBudget;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportItemBudgetToExcel@1000 : Report "Export Item Budget to Excel";
                               BEGIN
                                 ExportItemBudgetToExcel.SetOptions(
                                   CurrentAnalysisArea,
                                   CurrentBudgetName,
                                   ValueType,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter,
                                   DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   ItemFilter,
                                   InternalDateFilter,PeriodInitialized,PeriodType,
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,RoundingFactor);
                                 ExportItemBudgetToExcel.SetUpdateExistingWorksheet(true);
                                 ExportItemBudgetToExcel.RUN;
                               END;
                                }
      { 56      ;1   ;Action    ;
                      Name=Import from Excel;
                      Ellipsis=true;
                      CaptionML=ENU=Import from Excel;
                      ToolTipML=ENU=Import a budget that you exported to Excel earlier.;
                      ApplicationArea=#SalesBudget;
                      Image=ImportExcel;
                      OnAction=VAR
                                 ImportItemBudgetFromExcel@1000 : Report "Import Item Budget from Excel";
                               BEGIN
                                 ImportItemBudgetFromExcel.SetParameters(CurrentBudgetName,CurrentAnalysisArea,ValueType);
                                 ImportItemBudgetFromExcel.RUNMODAL;
                                 CLEAR(ImportItemBudgetFromExcel);
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=Next Period;
                      CaptionML=ENU=Next Period;
                      ToolTipML=ENU=Show the information based on the next period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 if (LineDimOption = LineDimOption::Period) or (ColumnDimOption = ColumnDimOption::Period) then
                                   exit;
                                 FindPeriod('>');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Previous Period;
                      CaptionML=ENU=Previous Period;
                      ToolTipML=ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 if (LineDimOption = LineDimOption::Period) or (ColumnDimOption = ColumnDimOption::Period) then
                                   exit;
                                 FindPeriod('<');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Previous Column;
                      CaptionML=ENU=Previous Column;
                      ToolTipML=ENU=Go to the previous column.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::PreviousColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=Next Column;
                      CaptionML=ENU=Next Column;
                      ToolTipML=ENU=Go to the next column.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::NextColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 24      ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#SalesBudget;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                                 UpdateMatrixSubForm;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 3   ;2   ;Field     ;
                Name=CurrentBudgetName;
                CaptionML=ENU=Item Budget Name;
                ToolTipML=ENU=Specifies the name of the budget to be shown in the window.;
                ApplicationArea=#SalesBudget;
                SourceExpr=CurrentBudgetName;
                OnValidate=BEGIN
                             ItemBudgetManagement.CheckBudgetName(CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName);
                             UpdateMatrixSubForm;
                             CurrentBudgetNameOnAfterValida;
                           END;

                OnLookup=BEGIN
                           ItemBudgetManagement.LookupItemBudgetName(
                             CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                             BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                           ItemBudgetManagement.ValidateLineDimCode(
                             ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                             InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                           ItemBudgetManagement.ValidateColumnDimCode(
                             ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                             InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                           UpdateDimCtrls;
                           UpdateMatrixSubForm;
                           CurrPage.UPDATE(false);
                         END;
                          }

    { 5   ;2   ;Field     ;
                Name=LineDimCode;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#SalesBudget;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               ColumnDimCode := '';
                               ItemBudgetManagement.ValidateColumnDimCode(
                                 ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             end;
                             ItemBudgetManagement.ValidateLineDimCode(
                               ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1000 : Text[30];
                         BEGIN
                           NewCode := ItemBudgetManagement.GetDimSelection(LineDimCode,ItemBudgetName);
                           if NewCode <> LineDimCode then begin
                             Text := NewCode;
                             exit(true);
                           end;
                         END;
                          }

    { 7   ;2   ;Field     ;
                Name=ColumnDimCode;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#SalesBudget;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               LineDimCode := '';
                               ItemBudgetManagement.ValidateLineDimCode(
                                 ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             end;
                             ItemBudgetManagement.ValidateColumnDimCode(
                               ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);

                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1000 : Text[30];
                         BEGIN
                           NewCode := ItemBudgetManagement.GetDimSelection(ColumnDimCode,ItemBudgetName);
                           if NewCode <> ColumnDimCode then begin
                             Text := NewCode;
                             exit(true);
                           end;
                         END;
                          }

    { 14  ;2   ;Field     ;
                Name=ValueType;
                CaptionML=ENU=Show Value as;
                ToolTipML=ENU=Specifies if you want to view the item values by sales amount, COGS amount, or quantity.;
                OptionCaptionML=ENU=Sales Amount,COGS Amount,Quantity;
                ApplicationArea=#SalesBudget;
                SourceExpr=ValueType;
                OnValidate=BEGIN
                             ValueTypeOnAfterValidate;
                           END;
                            }

    { 21  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#SalesBudget;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=RoundingFactor;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts in the columns.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#SalesBudget;
                SourceExpr=RoundingFactor;
                OnValidate=BEGIN
                             RoundingFactorOnAfterValidate;
                           END;
                            }

    { 26  ;2   ;Field     ;
                Name=ShowColumnName;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#SalesBudget;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 17  ;1   ;Part      ;
                Name=MATRIX;
                ApplicationArea=#SalesBudget;
                PagePartID="Sales Budget Overview Matrix" }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 33  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies a date filter by which budget amounts are displayed.;
                ApplicationArea=#SalesBudget;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             ApplicationManagement@1001 : Codeunit ApplicationManagement;
                           BEGIN
                             if ApplicationManagement.MakeDateFilter(DateFilter) = 0 then;
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 31  ;2   ;Field     ;
                Name=SalesCodeFilterCtrl;
                CaptionML=ENU=Customer Filter;
                ToolTipML=ENU=Specifies the filter that applies to the customers to whom items are sold.;
                ApplicationArea=#SalesBudget;
                SourceExpr=SourceNoFilter;
                OnValidate=BEGIN
                             SourceNoFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           CustList@1005 : Page "Customer List";
                           VendList@1004 : Page "Vendor List";
                         BEGIN
                           case SourceTypeFilter of
                             SourceTypeFilter::Customer:
                               begin
                                 CustList.LOOKUPMODE := true;
                                 if CustList.RUNMODAL = ACTION::LookupOK then
                                   Text := CustList.GetSelectionFilter
                                 else
                                   exit(false);
                               end;
                             SourceTypeFilter::Vendor:
                               begin
                                 VendList.LOOKUPMODE := true;
                                 if VendList.RUNMODAL = ACTION::LookupOK then
                                   Text := VendList.GetSelectionFilter
                                 else
                                   exit(false);
                               end;
                           end;

                           exit(true);
                         END;
                          }

    { 32  ;2   ;Field     ;
                Name=ItemFilter;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies which items to include in the budget overview.;
                ApplicationArea=#SalesBudget;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page "Item List";
                         BEGIN
                           ItemList.LOOKUPMODE(true);
                           if ItemList.RUNMODAL = ACTION::LookupOK then begin
                             Text := ItemList.GetSelectionFilter;
                             exit(true);
                           end;
                         END;
                          }

    { 47  ;2   ;Field     ;
                Name=BudgetDim1Filter;
                CaptionML=ENU=Budget Dimension 1 Filter;
                ToolTipML=ENU="Specifies a filter by a budget dimension. ";
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=BudgetDim1FilterEnable;
                OnValidate=BEGIN
                             BudgetDim1FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(ItemBudgetName."Budget Dimension 1 Code",Text));
                         END;
                          }

    { 44  ;2   ;Field     ;
                Name=BudgetDim2Filter;
                CaptionML=ENU=Budget Dimension 2 Filter;
                ToolTipML=ENU="Specifies a second filter by a budget dimension. ";
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=BudgetDim2FilterEnable;
                OnValidate=BEGIN
                             BudgetDim2FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(ItemBudgetName."Budget Dimension 2 Code",Text));
                         END;
                          }

    { 43  ;2   ;Field     ;
                Name=BudgetDim3Filter;
                CaptionML=ENU=Budget Dimension 3 Filter;
                ToolTipML=ENU="Specifies a third filter by a budget dimension. ";
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=BudgetDim3FilterEnable;
                OnValidate=BEGIN
                             BudgetDim3FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(ItemBudgetName."Budget Dimension 3 Code",Text));
                         END;
                          }

    { 50  ;2   ;Field     ;
                Name=GlobalDim1Filter;
                CaptionML=ENU=Global Dimension 1 Filter;
                ToolTipML=ENU=Specifies the budget dimension as a filter, so that the values in the budget fields are based only on budget entries with these dimension values, for example Customer group and Salesperson.;
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                OnValidate=BEGIN
                             GlobalDim1FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(GLSetup."Global Dimension 1 Code",Text));
                         END;
                          }

    { 49  ;2   ;Field     ;
                Name=GlobalDim2Filter;
                CaptionML=ENU=Global Dimension 2 Filter;
                ToolTipML=ENU=Specifies the budget dimension as a filter, so that the values in the budget fields are based only on budget entries with these dimension values, for example Customer group and Salesperson.;
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                OnValidate=BEGIN
                             GlobalDim2FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(GLSetup."Global Dimension 2 Code",Text));
                         END;
                          }

  }
  CODE
  {
    VAR
      GLSetup@1026 : Record "General Ledger Setup";
      ItemBudgetName@1010 : Record "Item Budget Name";
      ItemStatisticsBuffer@1006 : Record "Item Statistics Buffer";
      MATRIX_MatrixRecords@1137 : ARRAY [32] OF Record "Dimension Code Buffer";
      ItemBudgetManagement@1003 : Codeunit "Item Budget Management";
      MATRIX_CaptionSet@1138 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1139 : Text;
      FirstColumn@1020 : Text;
      LastColumn@1021 : Text;
      MATRIX_PrimKeyFirstCaptionInCu@1143 : Text;
      MATRIX_CurrentNoOfColumns@1144 : Integer;
      CurrentAnalysisArea@1005 : 'Sales,Purchase,Inventory';
      CurrentBudgetName@1002 : Code[10];
      SourceTypeFilter@1017 : '" ",Customer,Vendor,Item';
      SourceNoFilter@1016 : Text;
      ItemFilter@1019 : Text;
      ValueType@1018 : '"Sales Amount","COGS Amount",Quantity';
      RoundingFactor@1028 : 'None,"1","1000","1000000"';
      LineDimOption@1001 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';
      ColumnDimOption@1000 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';
      PeriodType@1022 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      GlobalDim1Filter@1024 : Text;
      GlobalDim2Filter@1023 : Text;
      BudgetDim1Filter@1009 : Text;
      BudgetDim2Filter@1008 : Text;
      BudgetDim3Filter@1007 : Text;
      LineDimCode@1012 : Text[30];
      ColumnDimCode@1011 : Text[30];
      DateFilter@1014 : Text;
      InternalDateFilter@1013 : Text;
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1025 : Boolean;
      Text003@1034 : TextConst 'ENU=1,6,,Budget Dimension 1 Filter';
      Text004@1033 : TextConst 'ENU=1,6,,Budget Dimension 2 Filter';
      Text005@1004 : TextConst 'ENU=1,6,,Budget Dimension 3 Filter';
      Text100@1036 : TextConst 'ENU=Period';
      NewBudgetName@1037 : Code[10];
      MATRIX_Step@1029 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      BudgetDim1FilterEnable@19060021 : Boolean INDATASET;
      BudgetDim2FilterEnable@19020249 : Boolean INDATASET;
      BudgetDim3FilterEnable@19077914 : Boolean INDATASET;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1152(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      MATRIX_PeriodRecords@1001 : ARRAY [32] OF Record Date;
      Location@1005 : Record Location;
      Item@1007 : Record Item;
      Customer@1008 : Record Customer;
      Vendor@1009 : Record Vendor;
      MatrixMgt@1003 : Codeunit "Matrix Management";
      RecRef@1004 : RecordRef;
      FieldRef@1011 : FieldRef;
      i@1002 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);
      FirstColumn := '';
      LastColumn := '';
      MATRIX_CurrentNoOfColumns := 12;

      if ColumnDimCode = '' then
        exit;

      case ColumnDimCode of
        Text100:  // Period
          begin
            MatrixMgt.GeneratePeriodMatrixData(
              MATRIX_SetWanted,12,ShowColumnName,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            for i := 1 to 12 do begin
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            end;
            FirstColumn := FORMAT(MATRIX_PeriodRecords[1]."Period Start");
            LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrentNoOfColumns]."Period End");
          end;
        Location.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        Item.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Item);
            RecRef.SETTABLE(Item);
            if ItemFilter <> '' then begin
              FieldRef := RecRef.FIELDINDEX(1);
              FieldRef.SETFILTER(ItemFilter);
            end;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,3,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        Customer.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Customer);
            RecRef.SETTABLE(Customer);
            if SourceNoFilter <> '' then begin
              FieldRef := RecRef.FIELDINDEX(1);
              FieldRef.SETFILTER(SourceNoFilter);
            end;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        Vendor.TABLECAPTION:
          begin
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Vendor);
            RecRef.SETTABLE(Vendor);
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            for i := 1 to MATRIX_CurrentNoOfColumns do
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            if ShowColumnName then
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          end;
        GLSetup."Global Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 1 Code",
            GlobalDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLSetup."Global Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 2 Code",
            GlobalDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 1 Code",
            BudgetDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 2 Code",
            BudgetDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 3 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 3 Code",
            BudgetDim3Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
      end;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[3]);
    VAR
      PeriodFormMgt@1003 : Codeunit PeriodFormManagement;
    BEGIN
      PeriodFormMgt.FindPeriodOnMatrixPage(
        DateFilter,InternalDateFilter,SearchText,PeriodType,
        (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period));
    END;

    LOCAL PROCEDURE GetCaptionClass@13(BudgetDimType@1000 : Integer) : Text[250];
    BEGIN
      if ItemBudgetName.Name <> CurrentBudgetName then
        ItemBudgetName.GET(CurrentAnalysisArea,CurrentBudgetName);
      case BudgetDimType of
        1:
          begin
            if ItemBudgetName."Budget Dimension 1 Code" <> '' then
              exit('1,6,' + ItemBudgetName."Budget Dimension 1 Code");
            exit(Text003);
          end;
        2:
          begin
            if ItemBudgetName."Budget Dimension 2 Code" <> '' then
              exit('1,6,' + ItemBudgetName."Budget Dimension 2 Code");
            exit(Text004);
          end;
        3:
          begin
            if ItemBudgetName."Budget Dimension 3 Code" <> '' then
              exit('1,6,' + ItemBudgetName."Budget Dimension 3 Code");
            exit(Text005);
          end;
      end;
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      if Dim = '' then
        exit(false);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      DimValList.LOOKUPMODE(true);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE UpdateDimCtrls@1();
    BEGIN
      BudgetDim1FilterEnable := ItemBudgetName."Budget Dimension 1 Code" <> '';
      BudgetDim2FilterEnable := ItemBudgetName."Budget Dimension 2 Code" <> '';
      BudgetDim3FilterEnable := ItemBudgetName."Budget Dimension 3 Code" <> '';
    END;

    [External]
    PROCEDURE SetNewBudgetName@5(NewPurchBudgetName@1000 : Code[10]);
    BEGIN
      NewBudgetName := NewPurchBudgetName;
    END;

    LOCAL PROCEDURE UpdateMatrixSubForm@7();
    BEGIN
      CurrPage.MATRIX.PAGE.SetFilters(
        DateFilter,ItemFilter,SourceNoFilter,
        GlobalDim1Filter,GlobalDim2Filter,
        BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      CurrPage.MATRIX.PAGE.Load(
        MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
        CurrentBudgetName,LineDimOption,ColumnDimOption,RoundingFactor,ValueType,PeriodType);
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE CurrentBudgetNameOnAfterValida@19022925();
    BEGIN
      ItemBudgetManagement.SetItemBudgetName(
        CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
        BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      ItemBudgetManagement.ValidateLineDimCode(
        ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
        InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
      ItemBudgetManagement.ValidateColumnDimCode(
        ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
        InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
      UpdateDimCtrls;
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ValueTypeOnAfterValidate@19028630();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    VAR
      MATRIX_SetWanted@1000 : 'First,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE RoundingFactorOnAfterValidate@19029817();
    BEGIN
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim3FilterOnAfterValidat@19015715();
    BEGIN
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 3" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim2FilterOnAfterValidat@19061952();
    BEGIN
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 2" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim1FilterOnAfterValidat@19002351();
    BEGIN
      if ColumnDimOption = ColumnDimOption::"Budget Dimension 1" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE GlobalDim2FilterOnAfterValidat@19025957();
    BEGIN
      if ColumnDimOption = ColumnDimOption::"Global Dimension 2" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE GlobalDim1FilterOnAfterValidat@19037628();
    BEGIN
      if ColumnDimOption = ColumnDimOption::"Global Dimension 1" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE SourceNoFilterOnAfterValidate@19003103();
    BEGIN
      if ColumnDimOption = ColumnDimOption::Customer then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      if ColumnDimOption = ColumnDimOption::Item then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    BEGIN
    END.
  }
}

