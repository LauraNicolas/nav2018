OBJECT Codeunit 764 Aged Acc. Payable
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ChartDescriptionMsg@1000 : TextConst 'ENU=Shows pending payment amounts to vendors summed for a period that you select.\\The first column shows the amount on pending payments that are not past the due date. The following column or columns show overdue amounts within the selected period from the payment due date. The chart shows overdue payment amounts going back up to five years from today''s date depending on the period that you select.';
      ChartPerVendorDescriptionMsg@1001 : TextConst 'ENU=Shows pending payment amount to the vendor summed for a period that you select.\The first column shows the amount on pending payments that are not past the due date. The following column or columns show overdue amounts within the selected period from the payment due date. The chart shows overdue payment amounts going back up to five years from today''s date depending on the period that you select.';

    [Internal]
    PROCEDURE UpdateData@7(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VAR TempEntryNoAmountBuf@1002 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      PeriodIndex@1006 : Integer;
      PeriodLength@1001 : Text[1];
      NoOfPeriods@1004 : Integer;
    BEGIN
      with BusChartBuf do begin
        Initialize;
        SetXAxis(OverDueText,"Data Type"::String);
        AddMeasure(AmountText,1,"Data Type"::Decimal,"Chart Type"::Column);

        InitParameters(BusChartBuf,PeriodLength,NoOfPeriods,TempEntryNoAmountBuf);
        CalculateAgedAccPayable(
          "Period Filter Start Date",PeriodLength,NoOfPeriods,
          TempEntryNoAmountBuf);

        if TempEntryNoAmountBuf.FINDSET then
          repeat
            PeriodIndex := TempEntryNoAmountBuf."Entry No.";
            AddColumn(FormatColumnName(PeriodIndex,PeriodLength,NoOfPeriods,"Period Length"));
            SetValueByIndex(0,PeriodIndex,RoundAmount(TempEntryNoAmountBuf.Amount));
          until TempEntryNoAmountBuf.NEXT = 0
      end;
    END;

    [Internal]
    PROCEDURE UpdateDataPerVendor@2(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VendorNo@1007 : Code[20];VAR TempEntryNoAmountBuf@1002 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      PeriodIndex@1006 : Integer;
      PeriodLength@1001 : Text[1];
      NoOfPeriods@1004 : Integer;
    BEGIN
      with BusChartBuf do begin
        Initialize;
        SetXAxis(OverDueText,"Data Type"::String);
        AddMeasure(AmountText,1,"Data Type"::Decimal,"Chart Type"::Column);

        InitParameters(BusChartBuf,PeriodLength,NoOfPeriods,TempEntryNoAmountBuf);
        CalculateAgedAccPayablePerVendor(
          VendorNo,'',"Period Filter Start Date",PeriodLength,NoOfPeriods,
          TempEntryNoAmountBuf);

        if TempEntryNoAmountBuf.FINDSET then
          repeat
            PeriodIndex := TempEntryNoAmountBuf."Entry No.";
            AddColumn(FormatColumnName(PeriodIndex,PeriodLength,NoOfPeriods,"Period Length"));
            SetValueByIndex(0,PeriodIndex,RoundAmount(TempEntryNoAmountBuf.Amount));
          until TempEntryNoAmountBuf.NEXT = 0
      end;
    END;

    LOCAL PROCEDURE CalculateAgedAccPayable@1(StartDate@1001 : Date;PeriodLength@1002 : Text[1];NoOfPeriods@1003 : Integer;VAR TempEntryNoAmountBuffer@1004 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      VendLedgEntry@1006 : Record "Vendor Ledger Entry";
      RemainingAmountLCY@1008 : Decimal;
      EndDate@1007 : Date;
      Index@1005 : Integer;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE(Open,true);
      VendLedgEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");

      for Index := 0 to NoOfPeriods - 1 do begin
        RemainingAmountLCY := 0;
        VendLedgEntry.SETFILTER(
          "Due Date",
          DateFilterByAge(Index,StartDate,PeriodLength,NoOfPeriods,EndDate));
        if VendLedgEntry.FINDSET then
          repeat
            RemainingAmountLCY += VendLedgEntry."Remaining Amt. (LCY)";
          until VendLedgEntry.NEXT = 0;

        InsertAmountBuffer(Index,'',-RemainingAmountLCY,StartDate,EndDate,TempEntryNoAmountBuffer)
      end;
    END;

    LOCAL PROCEDURE CalculateAgedAccPayablePerVendor@4(VendorNo@1000 : Code[20];VendorGroupCode@1009 : Code[20];StartDate@1001 : Date;PeriodLength@1002 : Text[1];NoOfPeriods@1003 : Integer;VAR TempEntryNoAmountBuffer@1004 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      VendLedgEntryRemainAmt@1006 : Query "Vend. Ledg. Entry Remain. Amt.";
      RemainingAmountLCY@1008 : Decimal;
      EndDate@1007 : Date;
      Index@1005 : Integer;
    BEGIN
      if VendorNo <> '' then
        VendLedgEntryRemainAmt.SETRANGE(Vendor_No,VendorNo);
      if VendorGroupCode <> '' then
        VendLedgEntryRemainAmt.SETRANGE(Vendor_Posting_Group,VendorGroupCode);
      VendLedgEntryRemainAmt.SETRANGE(IsOpen,true);

      for Index := 0 to NoOfPeriods - 1 do begin
        RemainingAmountLCY := 0;
        VendLedgEntryRemainAmt.SETFILTER(
          Due_Date,
          DateFilterByAge(Index,StartDate,PeriodLength,NoOfPeriods,EndDate));
        VendLedgEntryRemainAmt.OPEN;
        if VendLedgEntryRemainAmt.READ then
          RemainingAmountLCY := VendLedgEntryRemainAmt.Sum_Remaining_Amt_LCY;

        InsertAmountBuffer(Index,VendorGroupCode,RemainingAmountLCY,StartDate,EndDate,TempEntryNoAmountBuffer)
      end;
    END;

    LOCAL PROCEDURE DateFilterByAge@14(Index@1000 : Integer;VAR StartDate@1007 : Date;PeriodLength@1006 : Text[1];NoOfPeriods@1005 : Integer;VAR EndDate@1002 : Date) : Text;
    VAR
      AgedAccReceivable@1001 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.DateFilterByAge(Index,StartDate,PeriodLength,NoOfPeriods,EndDate));
    END;

    LOCAL PROCEDURE InsertAmountBuffer@3(Index@1000 : Integer;BussUnitCode@1005 : Code[20];AmountLCY@1001 : Decimal;StartDate@1003 : Date;EndDate@1004 : Date;VAR TempEntryNoAmountBuffer@1002 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      AgedAccReceivable@1006 : Codeunit "Aged Acc. Receivable";
    BEGIN
      AgedAccReceivable.InsertAmountBuffer(
        Index,BussUnitCode,AmountLCY,StartDate,EndDate,TempEntryNoAmountBuffer);
    END;

    LOCAL PROCEDURE InitParameters@13(BusChartBuf@1000 : Record "Business Chart Buffer";VAR PeriodLength@1001 : Text[1];VAR NoOfPeriods@1002 : Integer;VAR TempEntryNoAmountBuf@1005 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      AgedAccReceivable@1004 : Codeunit "Aged Acc. Receivable";
    BEGIN
      AgedAccReceivable.InitParameters(BusChartBuf,PeriodLength,NoOfPeriods,TempEntryNoAmountBuf);
    END;

    LOCAL PROCEDURE FormatColumnName@6(Index@1000 : Integer;PeriodLength@1001 : Text[1];NoOfColumns@1003 : Integer;Period@1002 : Option) : Text;
    VAR
      AgedAccReceivable@1007 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.FormatColumnName(Index,PeriodLength,NoOfColumns,Period));
    END;

    [External]
    PROCEDURE DrillDown@18(VAR BusChartBuf@1000 : Record "Business Chart Buffer";VendorNo@1001 : Code[20];VAR TempEntryNoAmountBuf@1003 : TEMPORARY Record "Entry No. Amount Buffer");
    VAR
      MeasureName@1004 : Text;
      VendorGroupCode@1002 : Code[10];
    BEGIN
      with TempEntryNoAmountBuf do begin
        if VendorNo <> '' then
          VendorGroupCode := ''
        else begin
          MeasureName := BusChartBuf.GetMeasureName(BusChartBuf."Drill-Down Measure Index");
          VendorGroupCode := COPYSTR(MeasureName,1,MAXSTRLEN(VendorGroupCode));
        end;
        if GET('',BusChartBuf."Drill-Down X Index") then
          DrillDownVendLedgEntries(VendorNo,"Start Date","End Date");
      end;
    END;

    [External]
    PROCEDURE DrillDownByGroup@9(VAR BusChartBuf@1001 : Record "Business Chart Buffer";VAR TempEntryNoAmountBuf@1000 : TEMPORARY Record "Entry No. Amount Buffer");
    BEGIN
      DrillDown(BusChartBuf,'',TempEntryNoAmountBuf);
    END;

    LOCAL PROCEDURE DrillDownVendLedgEntries@21(VendorNo@1003 : Code[20];StartDate@1000 : Date;EndDate@1001 : Date);
    VAR
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      if VendorNo <> '' then
        VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      if EndDate = 0D then
        VendLedgEntry.SETFILTER("Due Date",'>=%1',StartDate)
      else
        VendLedgEntry.SETRANGE("Due Date",StartDate,EndDate);
      VendLedgEntry.SETRANGE(Open,true);
      if VendLedgEntry.ISEMPTY then
        exit;
      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendLedgEntry);
    END;

    [External]
    PROCEDURE Description@10(PerVendor@1000 : Boolean) : Text;
    BEGIN
      if PerVendor then
        exit(ChartPerVendorDescriptionMsg);
      exit(ChartDescriptionMsg);
    END;

    [External]
    PROCEDURE UpdateStatusText@11(BusChartBuf@1000 : Record "Business Chart Buffer") : Text;
    VAR
      AgedAccReceivable@1001 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.UpdateStatusText(BusChartBuf));
    END;

    [External]
    PROCEDURE SaveSettings@8(BusChartBuf@1001 : Record "Business Chart Buffer");
    VAR
      BusChartUserSetup@1000 : Record "Business Chart User Setup";
    BEGIN
      BusChartUserSetup."Period Length" := BusChartBuf."Period Length";
      BusChartUserSetup.SaveSetupCU(BusChartUserSetup,CODEUNIT::"Aged Acc. Payable");
    END;

    LOCAL PROCEDURE RoundAmount@5(Amount@1000 : Decimal) : Decimal;
    VAR
      AgedAccReceivable@1001 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.RoundAmount(Amount));
    END;

    LOCAL PROCEDURE OverDueText@16() : Text;
    VAR
      AgedAccReceivable@1000 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.OverDueText);
    END;

    LOCAL PROCEDURE AmountText@17() : Text;
    VAR
      AgedAccReceivable@1000 : Codeunit "Aged Acc. Receivable";
    BEGIN
      exit(AgedAccReceivable.AmountText);
    END;

    BEGIN
    END.
  }
}

