OBJECT Page 1872 Item Availability Check
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Availability Check;
    SaveValues=false;
    MultipleNewLines=false;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=Item;
    DelayedInsert=false;
    PopulateAllFields=false;
    SourceTableTemporary=false;
    AutoSplitKey=false;
    PromotedActionCategoriesML=ENU=New,Process,Report,Manage;
    ShowFilter=true;
    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      Name=Action1;
                      ActionContainerType=RelatedInformation }
      { 7       ;1   ;ActionGroup;
                      Name=&Manage;
                      CaptionML=ENU=&Manage }
      { 8       ;2   ;Action    ;
                      Name=Page Item Card;
                      CaptionML=ENU=Item;
                      ToolTipML=ENU=View and edit detailed information for the item.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Item Card";
                      RunPageLink="No."=FIELD("No."),
                                  "Date Filter"=FIELD("Date Filter"),
                                  "Global Dimension 1 Filter"=FIELD("Global Dimension 1 Filter"),
                                  "Global Dimension 2 Filter"=FIELD("Global Dimension 2 Filter");
                      Promoted=true;
                      PromotedIsBig=false;
                      Image=Item;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      RunPageMode=View }
      { 9       ;1   ;ActionGroup;
                      Name=Create;
                      CaptionML=ENU=Create }
      { 10      ;2   ;Action    ;
                      Name=Purchase Invoice;
                      CaptionML=ENU=Create Purchase Invoice;
                      ToolTipML=ENU=Create Purchase Invoice;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=false;
                      Image=NewPurchaseInvoice;
                      PromotedCategory=New;
                      PromotedOnly=true;
                      OnAction=VAR
                                 PurchaseHeader@1000 : Record "Purchase Header";
                                 PurchaseLine2@1001 : Record "Purchase Line";
                                 Vendor@1002 : Record Vendor;
                               BEGIN
                                 if "Vendor No." = '' then begin
                                   if not SelectVendor(Vendor) then
                                     exit;

                                   "Vendor No." := Vendor."No."
                                 end;
                                 PurchaseHeader.INIT;
                                 PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::Invoice);
                                 PurchaseHeader.INSERT(true);
                                 PurchaseHeader.VALIDATE("Buy-from Vendor No.","Vendor No.");
                                 PurchaseHeader.MODIFY(true);

                                 PurchaseLine2.INIT;
                                 PurchaseLine2.VALIDATE("Document Type",PurchaseHeader."Document Type");
                                 PurchaseLine2.VALIDATE("Document No.",PurchaseHeader."No.");
                                 PurchaseLine2.VALIDATE("Line No.",10000);
                                 PurchaseLine2.INSERT(true);

                                 PurchaseLine2.VALIDATE(Type,PurchaseLine2.Type::Item);
                                 PurchaseLine2.VALIDATE("No.","No.");

                                 PurchaseLine2.MODIFY(true);
                                 PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 6   ;1   ;Field     ;
                Name=Control2;
                ApplicationArea=#Basic,#Suite;
                CaptionClass=Heading }

    { 13  ;1   ;Group     ;
                Name=Inventory;
                CaptionML=ENU=Inventory;
                GroupType=Group }

    { 4   ;2   ;Field     ;
                Name=InventoryQty;
                ToolTipML=ENU=Specifies the quantity of the item that is currently in inventory and not reserved for other demand.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=InventoryQty;
                CaptionClass=AvailableInventoryCaption;
                Editable=false;
                ImplicitType=Decimal }

    { 5   ;2   ;Field     ;
                Name=TotalQuantity;
                CaptionML=ENU=Inventory Shortage;
                ToolTipML=ENU="Specifies the total quantity of the item that is currently in inventory. The Total Quantity field is used to calculate the Available Inventory field as follows: Available Inventory = Total Quantity - Reserved Quantity.";
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalQuantity;
                Editable=false;
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=All locations;
                CaptionML=ENU=All locations;
                ToolTipML=ENU=Specifies the total quantity of the item that is currently in inventory at all locations.;
                ApplicationArea=#Location;
                DecimalPlaces=0:5;
                SourceExpr=Inventory;
                OnDrillDown=BEGIN
                              PAGE.RUNMODAL(PAGE::"Item Availability by Location",Rec)
                            END;

                ImplicitType=Decimal }

    { 3   ;1   ;Part      ;
                Name=AvailabilityCheckDetails;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="No."=FIELD("No.");
                PagePartID="Item Availability Check Det.";
                Editable=FALSE;
                PartType=Page }

  }
  CODE
  {
    VAR
      TotalQuantity@1000 : Decimal;
      InventoryQty@1001 : Decimal;
      LocationCode@1004 : Code[10];
      Heading@1003 : Text;
      SelectVentorTxt@1002 : TextConst 'ENU=Select a vendor to buy from.';
      AvailableInventoryLbl@1005 : TextConst 'ENU=Available Inventory';
      AvailableInventoryCaption@1006 : Text;

    [External]
    PROCEDURE PopulateDataOnNotification@1(VAR AvailabilityCheckNotification@1000 : Notification;ItemNo@1012 : Code[20];UnitOfMeasureCode@1011 : Code[20];InventoryQty@1010 : Decimal;GrossReq@1009 : Decimal;ReservedReq@1008 : Decimal;SchedRcpt@1007 : Decimal;ReservedRcpt@1006 : Decimal;CurrentQuantity@1005 : Decimal;CurrentReservedQty@1004 : Decimal;TotalQuantity@1003 : Decimal;EarliestAvailDate@1002 : Date;LocationCode@1001 : Code[10]);
    BEGIN
      AvailabilityCheckNotification.SETDATA('ItemNo',ItemNo);
      AvailabilityCheckNotification.SETDATA('UnitOfMeasureCode',UnitOfMeasureCode);
      AvailabilityCheckNotification.SETDATA('GrossReq',FORMAT(GrossReq));
      AvailabilityCheckNotification.SETDATA('ReservedReq',FORMAT(ReservedReq));
      AvailabilityCheckNotification.SETDATA('SchedRcpt',FORMAT(SchedRcpt));
      AvailabilityCheckNotification.SETDATA('ReservedRcpt',FORMAT(ReservedRcpt));
      AvailabilityCheckNotification.SETDATA('CurrentQuantity',FORMAT(CurrentQuantity));
      AvailabilityCheckNotification.SETDATA('CurrentReservedQty',FORMAT(CurrentReservedQty));
      AvailabilityCheckNotification.SETDATA('TotalQuantity',FORMAT(TotalQuantity));
      AvailabilityCheckNotification.SETDATA('InventoryQty',FORMAT(InventoryQty));
      AvailabilityCheckNotification.SETDATA('EarliestAvailDate',FORMAT(EarliestAvailDate));
      AvailabilityCheckNotification.SETDATA('LocationCode',LocationCode);
    END;

    [Internal]
    PROCEDURE InitializeFromNotification@4(AvailabilityCheckNotification@1000 : Notification);
    VAR
      GrossReq@1007 : Decimal;
      SchedRcpt@1006 : Decimal;
      ReservedReq@1005 : Decimal;
      ReservedRcpt@1004 : Decimal;
      CurrentQuantity@1003 : Decimal;
      CurrentReservedQty@1002 : Decimal;
      EarliestAvailDate@1001 : Date;
    BEGIN
      GET(AvailabilityCheckNotification.GETDATA('ItemNo'));
      SETRANGE("No.",AvailabilityCheckNotification.GETDATA('ItemNo'));
      EVALUATE(TotalQuantity,AvailabilityCheckNotification.GETDATA('TotalQuantity'));
      EVALUATE(InventoryQty,AvailabilityCheckNotification.GETDATA('InventoryQty'));
      EVALUATE(LocationCode,AvailabilityCheckNotification.GETDATA('LocationCode'));
      CurrPage.AvailabilityCheckDetails.PAGE.SetUnitOfMeasureCode(
        AvailabilityCheckNotification.GETDATA('UnitOfMeasureCode'));

      if AvailabilityCheckNotification.GETDATA('GrossReq') <> '' then begin
        EVALUATE(GrossReq,AvailabilityCheckNotification.GETDATA('GrossReq'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetGrossReq(GrossReq);
      end;
      if AvailabilityCheckNotification.GETDATA('ReservedReq') <> '' then begin
        EVALUATE(ReservedReq,AvailabilityCheckNotification.GETDATA('ReservedReq'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetReservedReq(ReservedReq);
      end;
      if AvailabilityCheckNotification.GETDATA('SchedRcpt') <> '' then begin
        EVALUATE(SchedRcpt,AvailabilityCheckNotification.GETDATA('SchedRcpt'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetSchedRcpt(SchedRcpt);
      end;
      if AvailabilityCheckNotification.GETDATA('ReservedRcpt') <> '' then begin
        EVALUATE(ReservedRcpt,AvailabilityCheckNotification.GETDATA('ReservedRcpt'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetReservedRcpt(ReservedRcpt);
      end;
      if AvailabilityCheckNotification.GETDATA('CurrentQuantity') <> '' then begin
        EVALUATE(CurrentQuantity,AvailabilityCheckNotification.GETDATA('CurrentQuantity'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetCurrentQuantity(CurrentQuantity);
      end;
      if AvailabilityCheckNotification.GETDATA('CurrentReservedQty') <> '' then begin
        EVALUATE(CurrentReservedQty,AvailabilityCheckNotification.GETDATA('CurrentReservedQty'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetCurrentReservedQty(CurrentReservedQty);
      end;
      if AvailabilityCheckNotification.GETDATA('EarliestAvailDate') <> '' then begin
        EVALUATE(EarliestAvailDate,AvailabilityCheckNotification.GETDATA('EarliestAvailDate'));
        CurrPage.AvailabilityCheckDetails.PAGE.SetEarliestAvailDate(EarliestAvailDate);
      end;

      if LocationCode = '' then
        AvailableInventoryCaption := AvailableInventoryLbl
      else
        AvailableInventoryCaption := STRSUBSTNO('%1 (%2)',AvailableInventoryLbl,LocationCode);
    END;

    [External]
    PROCEDURE SetHeading@21(Value@1000 : Text);
    BEGIN
      Heading := Value;
    END;

    LOCAL PROCEDURE SelectVendor@2(VAR Vendor@1000 : Record Vendor) : Boolean;
    VAR
      VendorList@1003 : Page "Vendor List";
    BEGIN
      VendorList.LOOKUPMODE(true);
      VendorList.CAPTION(SelectVentorTxt);
      if VendorList.RUNMODAL = ACTION::LookupOK then begin
        VendorList.GETRECORD(Vendor);
        exit(true);
      end;

      exit(false);
    END;

    BEGIN
    END.
  }
}

