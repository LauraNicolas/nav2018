OBJECT Table 99000757 Calendar Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calendar Entry;
    LookupPageID="Calendar Entries";
    DrillDownPageID="Calendar Entries";
  }
  FIELDS
  {
    { 1   ;   ;Capacity Type       ;Option        ;OnValidate=BEGIN
                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';
                                                              END;

                                                   CaptionML=ENU=Capacity Type;
                                                   OptionCaptionML=ENU=Work Center,Machine Center;
                                                   OptionString="Work Center","Machine Center" }
    { 2   ;   ;No.                 ;Code20        ;TableRelation=IF ("Capacity Type"=CONST("Work Center")) "Work Center"
                                                                 ELSE IF ("Capacity Type"=CONST("Machine Center")) "Machine Center";
                                                   OnValidate=BEGIN
                                                                if "No." = '' then
                                                                  exit;

                                                                case "Capacity Type" of
                                                                  "Capacity Type"::"Work Center":
                                                                    begin
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      "Work Center Group Code" := WorkCenter."Work Center Group Code";
                                                                      Efficiency := WorkCenter.Efficiency;
                                                                      if not WorkCenter."Consolidated Calendar" then
                                                                        Capacity := WorkCenter.Capacity;
                                                                    end;
                                                                  "Capacity Type"::"Machine Center":
                                                                    begin
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD("Work Center No.");
                                                                      WorkCenter.GET(MachineCenter."Work Center No.");
                                                                      WorkCenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      "Work Center Group Code" := WorkCenter."Work Center Group Code";
                                                                      Efficiency := MachineCenter.Efficiency;
                                                                      Capacity := MachineCenter.Capacity;
                                                                    end;
                                                                end;
                                                                if "Ending Time" <> 000000T then
                                                                  VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=No.;
                                                   NotBlank=true }
    { 4   ;   ;Date                ;Date          ;OnValidate=BEGIN
                                                                CheckRedundancy;
                                                              END;

                                                   CaptionML=ENU=Date;
                                                   NotBlank=true }
    { 5   ;   ;Work Shift Code     ;Code10        ;TableRelation="Work Shift";
                                                   OnValidate=BEGIN
                                                                CheckRedundancy;
                                                              END;

                                                   CaptionML=ENU=Work Shift Code;
                                                   NotBlank=true }
    { 6   ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                if ("Ending Time" = 000000T) or
                                                                   ("Ending Time" < "Starting Time")
                                                                then begin
                                                                  CalendarEntry.RESET;
                                                                  CalendarEntry.SETRANGE("Capacity Type","Capacity Type");
                                                                  CalendarEntry.SETRANGE("No.","No.");
                                                                  CalendarEntry.SETRANGE(Date,Date);
                                                                  CalendarEntry.SETRANGE("Starting Time","Starting Time",235959T);
                                                                  if CalendarEntry.FIND('-') then
                                                                    "Ending Time" := CalendarEntry."Starting Time"
                                                                  else
                                                                    "Ending Time" := 235959T;
                                                                end;
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Starting Time;
                                                   NotBlank=true }
    { 7   ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                if ("Ending Time" < "Starting Time") and
                                                                   ("Ending Time" <> 000000T)
                                                                then
                                                                  ERROR(Text000,FIELDCAPTION("Ending Time"),FIELDCAPTION("Starting Time"));

                                                                CalculateCapacity;

                                                                CheckRedundancy;

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Ending Time;
                                                   NotBlank=true }
    { 8   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=false }
    { 9   ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=ENU=Work Center Group Code;
                                                   Editable=false }
    { 10  ;   ;Capacity (Total)    ;Decimal       ;CaptionML=ENU=Capacity (Total);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 11  ;   ;Capacity (Effective);Decimal       ;CaptionML=ENU=Capacity (Effective);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Efficiency          ;Decimal       ;OnValidate=BEGIN
                                                                "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,0.001);
                                                              END;

                                                   CaptionML=ENU=Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Capacity            ;Decimal       ;OnValidate=BEGIN
                                                                CalculateCapacity;
                                                              END;

                                                   CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Absence Efficiency  ;Decimal       ;OnValidate=BEGIN
                                                                "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,0.001);
                                                              END;

                                                   CaptionML=ENU=Absence Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 23  ;   ;Absence Capacity    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateCapacity;
                                                              END;

                                                   CaptionML=ENU=Absence Capacity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 24  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                Date := DT2DATE("Starting Date-Time");
                                                                VALIDATE("Starting Time",DT2TIME("Starting Date-Time"));
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 25  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                Date := DT2DATE("Ending Date-Time");
                                                                VALIDATE("Ending Time",DT2TIME("Ending Date-Time"));
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
  }
  KEYS
  {
    {    ;"Capacity Type","No.",Date,"Starting Time","Ending Time","Work Shift Code";
                                                   SumIndexFields="Capacity (Total)","Capacity (Effective)";
                                                   Clustered=true }
    {    ;"Work Center No.",Date,"Work Shift Code";SumIndexFields="Capacity (Total)","Capacity (Effective)" }
    {    ;"Work Center Group Code",Date,"Work Shift Code";
                                                   SumIndexFields="Capacity (Total)","Capacity (Effective)" }
    {    ;"Capacity Type","No.","Starting Date-Time","Ending Date-Time","Absence Capacity" }
    {    ;"Capacity Type","No.","Ending Date-Time","Starting Date-Time" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be higher than %2.';
      Text001@1001 : TextConst 'ENU=There is redundancy in %1 within the calendar of %2. From %3 to %4. Conflicting time from %5 to %6.';
      WorkCenter@1002 : Record "Work Center";
      MachineCenter@1003 : Record "Machine Center";
      CalendarEntry@1004 : Record "Calendar Entry";
      CalendarMgt@1005 : Codeunit CalendarManagement;

    LOCAL PROCEDURE CheckRedundancy@1();
    BEGIN
      if ("Starting Time" = 000000T) and ("Ending Time" = 000000T) then
        exit;

      CalendarEntry.SETRANGE("Capacity Type","Capacity Type");
      CalendarEntry.SETRANGE("No.","No.");
      CalendarEntry.SETRANGE(Date,Date);
      CalendarEntry.SETFILTER("Starting Time",'<%1',"Ending Time");
      CalendarEntry.SETFILTER("Ending Time",'>%1|%2',"Starting Time",000000T);

      if CalendarEntry.FIND('-') then
        repeat
          if (CalendarEntry."Starting Time" <> xRec."Starting Time") or
             (CalendarEntry."Ending Time" <> xRec."Ending Time") or
             (CalendarEntry."Work Shift Code" <> xRec."Work Shift Code")
          then
            ERROR(
              Text001,
              "Capacity Type",
              "No.",
              "Starting Time",
              "Ending Time",
              CalendarEntry."Starting Time",
              CalendarEntry."Ending Time");
        until CalendarEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateCapacity@2();
    BEGIN
      WorkCenter.GET("Work Center No.");

      if ("Starting Time" = 000000T) and
         ("Ending Time" = 000000T)
      then begin
        VALIDATE("Capacity (Total)",0);
        exit;
      end;

      "Capacity (Total)" :=
        ROUND(
          CalendarMgt.CalcTimeDelta("Ending Time","Starting Time") /
          CalendarMgt.TimeFactor(WorkCenter."Unit of Measure Code") *
          (Capacity - "Absence Capacity"),WorkCenter."Calendar Rounding Precision");

      "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,WorkCenter."Calendar Rounding Precision");
    END;

    [External]
    PROCEDURE Caption@3() : Text[100];
    BEGIN
      if "Capacity Type" = "Capacity Type"::"Machine Center" then begin
        if not MachineCenter.GET(GETFILTER("No.")) then
          exit('');
        exit(
          STRSUBSTNO('%1 %2',
            MachineCenter."No.",MachineCenter.Name));
      end;
      if not WorkCenter.GET(GETFILTER("No.")) then
        exit('');
      exit(
        STRSUBSTNO('%1 %2',
          WorkCenter."No.",WorkCenter.Name));
    END;

    LOCAL PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME(Date,"Starting Time");
      "Ending Date-Time" := CREATEDATETIME(Date,"Ending Time");
    END;

    [External]
    PROCEDURE SetCapacityFilters@4(CapType@1000 : Option;CapNo@1001 : Code[20]);
    BEGIN
      RESET;
      SETCURRENTKEY("Capacity Type","No.","Starting Date-Time","Ending Date-Time");
      SETRANGE("Capacity Type",CapType);
      SETRANGE("No.",CapNo);
    END;

    BEGIN
    END.
  }
}

