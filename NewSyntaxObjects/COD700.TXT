OBJECT Codeunit 700 Page Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataTypeManagement@1001 : Codeunit "Data Type Management";

    [External]
    PROCEDURE PageRun@7(RecRelatedVariant@1000 : Variant) : Boolean;
    VAR
      RecordRef@1002 : RecordRef;
      RecordRefVariant@1003 : Variant;
      PageID@1004 : Integer;
    BEGIN
      if not GUIALLOWED then
        exit(false);

      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit(false);

      PageID := GetPageID(RecordRef);

      if PageID <> 0 then begin
        RecordRefVariant := RecordRef;
        PAGE.RUN(PageID,RecordRefVariant);
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE PageRunModal@10(RecRelatedVariant@1000 : Variant) : Boolean;
    VAR
      RecordRef@1002 : RecordRef;
      RecordRefVariant@1003 : Variant;
      PageID@1004 : Integer;
    BEGIN
      if not GUIALLOWED then
        exit(false);

      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit(false);

      PageID := GetPageID(RecordRef);

      if PageID <> 0 then begin
        RecordRefVariant := RecordRef;
        PAGE.RUNMODAL(PageID,RecordRefVariant);
        exit(true);
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE PageRunModalWithFieldFocus@1(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer) : Boolean;
    VAR
      RecordRef@1002 : RecordRef;
      RecordRefVariant@1003 : Variant;
      PageID@1004 : Integer;
    BEGIN
      if not GUIALLOWED then
        exit(false);

      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit(false);

      PageID := GetPageID(RecordRef);

      if PageID <> 0 then begin
        RecordRefVariant := RecordRef;
        PAGE.RUNMODAL(PageID,RecordRefVariant,FieldNumber);
        exit(true);
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE GetPageID@4(RecRelatedVariant@1001 : Variant) : Integer;
    VAR
      RecordRef@1004 : RecordRef;
      EmptyRecRef@1002 : RecordRef;
      PageID@1003 : Integer;
    BEGIN
      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit;

      EmptyRecRef.OPEN(RecordRef.NUMBER);
      PageID := GetConditionalCardPageID(RecordRef);
      // Choose default card only if record exists
      if RecordRef.RECORDID <> EmptyRecRef.RECORDID then
        if PageID = 0 then
          PageID := GetDefaultCardPageID(RecordRef.NUMBER);

      if PageID = 0 then
        PageID := GetDefaultLookupPageID(RecordRef.NUMBER);

      exit(PageID);
    END;

    [External]
    PROCEDURE GetDefaultCardPageID@2(TableID@1000 : Integer) : Integer;
    VAR
      PageMetadata@1002 : Record "Page Metadata";
      LookupPageID@1003 : Integer;
    BEGIN
      if TableID = 0 then
        exit(0);

      LookupPageID := GetDefaultLookupPageID(TableID);
      if LookupPageID <> 0 then begin
        PageMetadata.GET(LookupPageID);
        if PageMetadata.CardPageID <> 0 then
          exit(PageMetadata.CardPageID);
      end;
      exit(0);
    END;

    [External]
    PROCEDURE GetDefaultLookupPageID@8(TableID@1000 : Integer) : Integer;
    VAR
      TableMetadata@1001 : Record "Table Metadata";
    BEGIN
      if TableID = 0 then
        exit(0);

      TableMetadata.GET(TableID);
      exit(TableMetadata.LookupPageID);
    END;

    [External]
    PROCEDURE GetConditionalCardPageID@3(RecordRef@1001 : RecordRef) : Integer;
    BEGIN
      case RecordRef.NUMBER of
        DATABASE::"Company Information":
          exit(PAGE::"Company Information");
        DATABASE::"Sales Header":
          exit(GetSalesHeaderPageID(RecordRef));
        DATABASE::"Purchase Header":
          exit(GetPurchaseHeaderPageID(RecordRef));
        DATABASE::"Service Header":
          exit(GetServiceHeaderPageID(RecordRef));
        DATABASE::"Gen. Journal Batch":
          exit(GetGenJournalBatchPageID(RecordRef));
        DATABASE::"Gen. Journal Line":
          exit(GetGenJournalLinePageID(RecordRef));
        DATABASE::"Sales Header Archive":
          exit(GetSalesHeaderArchivePageID(RecordRef));
        DATABASE::"Purchase Header Archive":
          exit(GetPurchaseHeaderArchivePageID(RecordRef));
        DATABASE::"Res. Journal Line":
          exit(PAGE::"Resource Journal");
        DATABASE::"Job Journal Line":
          exit(PAGE::"Job Journal");
        DATABASE::"Item Analysis View":
          exit(GetAnalysisViewPageID(RecordRef));
        DATABASE::"Purchases & Payables Setup":
          exit(PAGE::"Purchases & Payables Setup");
        DATABASE::"Approval Entry":
          exit(GetApprovalEntryPageID(RecordRef));
        DATABASE::"Doc. Exch. Service Setup":
          exit(PAGE::"Doc. Exch. Service Setup");
        DATABASE::"Incoming Documents Setup":
          exit(PAGE::"Incoming Documents Setup");
        DATABASE::"Text-to-Account Mapping":
          exit(PAGE::"Text-to-Account Mapping Wksh.");
        DATABASE::"Cash Flow Setup":
          exit(PAGE::"Cash Flow Setup");
      end;
      exit(0);
    END;

    LOCAL PROCEDURE GetSalesHeaderPageID@15(RecordRef@1000 : RecordRef) : Integer;
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      RecordRef.SETTABLE(SalesHeader);
      case SalesHeader."Document Type" of
        SalesHeader."Document Type"::Quote:
          exit(PAGE::"Sales Quote");
        SalesHeader."Document Type"::Order:
          exit(PAGE::"Sales Order");
        SalesHeader."Document Type"::Invoice:
          exit(PAGE::"Sales Invoice");
        SalesHeader."Document Type"::"Credit Memo":
          exit(PAGE::"Sales Credit Memo");
        SalesHeader."Document Type"::"Blanket Order":
          exit(PAGE::"Blanket Sales Order");
        SalesHeader."Document Type"::"Return Order":
          exit(PAGE::"Sales Return Order");
      end;
    END;

    LOCAL PROCEDURE GetPurchaseHeaderPageID@17(RecordRef@1000 : RecordRef) : Integer;
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
    BEGIN
      RecordRef.SETTABLE(PurchaseHeader);
      case PurchaseHeader."Document Type" of
        PurchaseHeader."Document Type"::Quote:
          exit(PAGE::"Purchase Quote");
        PurchaseHeader."Document Type"::Order:
          exit(PAGE::"Purchase Order");
        PurchaseHeader."Document Type"::Invoice:
          exit(PAGE::"Purchase Invoice");
        PurchaseHeader."Document Type"::"Credit Memo":
          exit(PAGE::"Purchase Credit Memo");
        PurchaseHeader."Document Type"::"Blanket Order":
          exit(PAGE::"Blanket Purchase Order");
        PurchaseHeader."Document Type"::"Return Order":
          exit(PAGE::"Purchase Return Order");
      end;
    END;

    LOCAL PROCEDURE GetServiceHeaderPageID@21(RecordRef@1000 : RecordRef) : Integer;
    VAR
      ServiceHeader@1001 : Record "Service Header";
    BEGIN
      RecordRef.SETTABLE(ServiceHeader);
      case ServiceHeader."Document Type" of
        ServiceHeader."Document Type"::Quote:
          exit(PAGE::"Service Quote");
        ServiceHeader."Document Type"::Order:
          exit(PAGE::"Service Order");
        ServiceHeader."Document Type"::Invoice:
          exit(PAGE::"Service Invoice");
        ServiceHeader."Document Type"::"Credit Memo":
          exit(PAGE::"Service Credit Memo");
      end;
    END;

    LOCAL PROCEDURE GetGenJournalBatchPageID@13(RecordRef@1000 : RecordRef) : Integer;
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
      GenJournalLine@1003 : Record "Gen. Journal Line";
    BEGIN
      RecordRef.SETTABLE(GenJournalBatch);

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      if not GenJournalLine.FINDFIRST then
        exit(PAGE::"General Journal");

      RecordRef.GETTABLE(GenJournalLine);
      exit(GetGenJournalLinePageID(RecordRef));
    END;

    LOCAL PROCEDURE GetGenJournalLinePageID@20(RecordRef@1000 : RecordRef) : Integer;
    VAR
      GenJournalLine@1003 : Record "Gen. Journal Line";
      GenJournalTemplate@1002 : Record "Gen. Journal Template";
    BEGIN
      RecordRef.SETTABLE(GenJournalLine);
      GenJournalTemplate.GET(GenJournalLine."Journal Template Name");
      if GenJournalTemplate.Recurring then
        exit(PAGE::"Recurring General Journal");
      case GenJournalTemplate.Type of
        GenJournalTemplate.Type::General:
          exit(PAGE::"General Journal");
        GenJournalTemplate.Type::Sales:
          exit(PAGE::"Sales Journal");
        GenJournalTemplate.Type::Purchases:
          exit(PAGE::"Purchase Journal");
        GenJournalTemplate.Type::"Cash Receipts":
          exit(PAGE::"Cash Receipt Journal");
        GenJournalTemplate.Type::Payments:
          exit(PAGE::"Payment Journal");
        GenJournalTemplate.Type::Assets:
          exit(PAGE::"Fixed Asset G/L Journal");
        GenJournalTemplate.Type::Intercompany:
          exit(PAGE::"IC General Journal");
        GenJournalTemplate.Type::Jobs:
          exit(PAGE::"Job G/L Journal");
      end;
    END;

    LOCAL PROCEDURE GetSalesHeaderArchivePageID@19(RecordRef@1000 : RecordRef) : Integer;
    VAR
      SalesHeaderArchive@1003 : Record "Sales Header Archive";
    BEGIN
      RecordRef.SETTABLE(SalesHeaderArchive);
      case SalesHeaderArchive."Document Type" of
        SalesHeaderArchive."Document Type"::Quote:
          exit(PAGE::"Sales Quote Archive");
        SalesHeaderArchive."Document Type"::Order:
          exit(PAGE::"Sales Order Archive");
        SalesHeaderArchive."Document Type"::"Return Order":
          exit(PAGE::"Sales Return Order Archive");
      end;
    END;

    LOCAL PROCEDURE GetPurchaseHeaderArchivePageID@18(RecordRef@1000 : RecordRef) : Integer;
    VAR
      PurchaseHeaderArchive@1002 : Record "Purchase Header Archive";
    BEGIN
      RecordRef.SETTABLE(PurchaseHeaderArchive);
      case PurchaseHeaderArchive."Document Type" of
        PurchaseHeaderArchive."Document Type"::Quote:
          exit(PAGE::"Purchase Quote Archive");
        PurchaseHeaderArchive."Document Type"::Order:
          exit(PAGE::"Purchase Order Archive");
        PurchaseHeaderArchive."Document Type"::"Return Order":
          exit(PAGE::"Purchase Return Order Archive");
      end;
    END;

    LOCAL PROCEDURE GetAnalysisViewPageID@12(RecordRef@1000 : RecordRef) : Integer;
    VAR
      ItemAnalysisView@1002 : Record "Item Analysis View";
    BEGIN
      RecordRef.SETTABLE(ItemAnalysisView);
      case ItemAnalysisView."Analysis Area" of
        ItemAnalysisView."Analysis Area"::Sales:
          exit(PAGE::"Sales Analysis View Card");
        ItemAnalysisView."Analysis Area"::Purchase:
          exit(PAGE::"Purchase Analysis View Card");
        ItemAnalysisView."Analysis Area"::Inventory:
          exit(PAGE::"Invt. Analysis View Card");
      end;
    END;

    LOCAL PROCEDURE GetApprovalEntryPageID@9(RecordRef@1000 : RecordRef) : Integer;
    VAR
      ApprovalEntry@1001 : Record "Approval Entry";
    BEGIN
      RecordRef.SETTABLE(ApprovalEntry);
      case ApprovalEntry.Status of
        ApprovalEntry.Status::Open:
          exit(PAGE::"Requests to Approve");
        else
          exit(PAGE::"Approval Entries");
      end;
    END;

    [Internal]
    PROCEDURE GetRTCUrl@6(VAR RecRef@1000 : RecordRef;PageID@1001 : Integer) : Text;
    BEGIN
      if not RecRef.HASFILTER then
        RecRef.SETRECFILTER;

      if not VerifyPageID(RecRef.NUMBER,PageID) then
        PageID := GetPageID(RecRef);

      exit(GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PageID,RecRef,false));
    END;

    [External]
    PROCEDURE GetWebUrl@5(VAR RecRef@1000 : RecordRef;PageID@1001 : Integer) : Text;
    BEGIN
      if not RecRef.HASFILTER then
        RecRef.SETRECFILTER;

      if not VerifyPageID(RecRef.NUMBER,PageID) then
        PageID := GetPageID(RecRef);

      exit(GETURL(CLIENTTYPE::Web,COMPANYNAME,OBJECTTYPE::Page,PageID,RecRef,false));
    END;

    LOCAL PROCEDURE VerifyPageID@11(TableID@1000 : Integer;PageID@1001 : Integer) : Boolean;
    VAR
      PageMetadata@1002 : Record "Page Metadata";
    BEGIN
      exit(PageMetadata.GET(PageID) and (PageMetadata.SourceTable = TableID));
    END;

    BEGIN
    END.
  }
}

