OBJECT Table 1501 Workflow
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Workflow Step"=rimd,
                TableData "Workflow Step Instance"=rm;
    DataCaptionFields=Code,Description;
    OnDelete=BEGIN
               CanDelete(true);
               DeleteWorkflowSteps;
             END;

    OnRename=BEGIN
               CheckEditingIsAllowed;
             END;

    CaptionML=ENU=Workflow;
    DrillDownPageID=Workflow;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                Workflow@1000 : Record Workflow;
                                                              BEGIN
                                                                CheckEditingIsAllowed;
                                                                CheckWorkflowCodeDoesNotExistAsTemplate;
                                                                if (xRec.Code = '') and Workflow.GET then begin
                                                                  Workflow.RENAME(Code);
                                                                  GET(Code);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 3   ;   ;Enabled             ;Boolean       ;OnValidate=VAR
                                                                Window@1000 : Dialog;
                                                              BEGIN
                                                                if Template then
                                                                  ERROR(CannotEditTemplateWorkflowErr);

                                                                if Enabled then begin
                                                                  Window.OPEN(ValidateWorkflowProgressMsg);

                                                                  SetEntryPoint;
                                                                  CheckEntryPointsAreEvents;
                                                                  CheckEntryPointsAreNotSubWorkflows;
                                                                  CheckSingleEntryPointAsRoot;
                                                                  CheckOrphansNotExist;
                                                                  CheckFunctionNames;
                                                                  CheckSubWorkflowsEnabled;
                                                                  CheckResponseOptions;
                                                                  CheckEntryPointEventConditions;
                                                                  CheckEventTableRelation;
                                                                  CheckRecordChangedWorkflows;

                                                                  Window.CLOSE;
                                                                end else begin
                                                                  Window.OPEN(DisableReferringWorkflowsMsg);

                                                                  CheckEditingReferringWorkflowsIsAllowed;
                                                                  ClearEntryPointIfFirst;

                                                                  Window.CLOSE;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Enabled }
    { 4   ;   ;Template            ;Boolean       ;InitValue=false;
                                                   OnValidate=BEGIN
                                                                if xRec.Template and Template then
                                                                  ERROR(CannotEditTemplateWorkflowErr);
                                                              END;

                                                   CaptionML=ENU=Template }
    { 5   ;   ;Category            ;Code20        ;TableRelation="Workflow Category";
                                                   CaptionML=ENU=Category }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CannotDeleteEnabledWorkflowErr@1000 : TextConst 'ENU=Enabled workflows cannot be deleted.\\You must clear the Enabled field box before you delete the workflow.';
      CannotDeleteWorkflowWithActiveInstancesErr@1008 : TextConst 'ENU=You cannot delete the workflow because active workflow step instances exist.';
      CannotEditEnabledWorkflowErr@1007 : TextConst 'ENU=Enabled workflows cannot be edited.\\You must clear the Enabled field box before you edit the workflow.';
      CannotEditTemplateWorkflowErr@1001 : TextConst 'ENU=Workflow templates cannot be edited.\\You must create a workflow from the template to edit it.';
      DisableReferringWorkflowsErr@1012 : TextConst '@@@="%1 = Workflow identifier (e.g. You cannot edit the MS-PIW workflow because it is used as a sub-workflow in other workflows. You must first disable the workflows that use the MS-PIW workflow.)";ENU=You cannot edit the %1 workflow because it is used as a sub-workflow in other workflows. You must first disable the workflows that use the %1 workflow.';
      DisableReferringWorkflowsMsg@1011 : TextConst 'ENU=Other workflows where the workflow is used as a sub-workflow are being disabled.';
      DisableReferringWorkflowsQst@1010 : TextConst '@@@="%1 = Workflow Identifier (e.g. The MS-PIW workflow is used as a sub-workflow in other workflows, which you must disable before you can edit the MS-PIW workflow.\\Do you want to disable all workflows where the MS-PIW workflow is used?)";ENU=The %1 workflow is used as a sub-workflow in other workflows, which you must disable before you can edit the %1 workflow.\\Do you want to disable all workflows where the %1 workflow is used?';
      EventOnlyEntryPointsErr@1006 : TextConst 'ENU=Events can only be specified as entry points.';
      MissingFunctionNamesErr@1015 : TextConst 'ENU=All workflow steps must have valid function names.';
      MissingRespOptionsErr@1003 : TextConst 'ENU=Response options are missing in one or more workflow steps.';
      OneRootStepErr@1013 : TextConst 'ENU=Enabled workflows must have one step that is an entry point and does not have a value in the Previous Workflow Step ID field.';
      OrphanWorkflowStepsErr@1002 : TextConst 'ENU=There can be only one left-aligned workflow step.';
      SameEventConditionsErr@1005 : TextConst '@@@="%1=Table Caption";ENU=One or more entry-point steps exist that use the same event on table %1. You must specify unique event conditions on entry-point steps that use the same table.';
      SubWorkflowNotEnabledErr@1009 : TextConst '@@@="%1 and %2 = Workflow Identifiers (e.g. You must enable the sub-workflow MS-PIW before you can enable the MS-SIAPW workflow.)";ENU=You must enable the sub-workflow %1 before you can enable the %2 workflow.';
      ValidateWorkflowProgressMsg@1004 : TextConst 'ENU=The workflow is being validated.';
      WorkflowStepInstanceLinkErr@1014 : TextConst '@@@="%1 and %2 = Workflow Identifiers (e.g. The MS-PIW workflow cannot start because all ending steps in the MS-SIAPW sub-workflow have a value in the Next Workflow Step ID field.\\Make sure that at least one step in the MS-SIAPW sub-workflow does not have a value in the Next Workflow Step ID field.)";ENU=The %1 workflow cannot start because all ending steps in the %2 sub-workflow have a value in the Next Workflow Step ID field.\\Make sure that at least one step in the %2 sub-workflow does not have a value in the Next Workflow Step ID field.';
      ValidateTableRelationErr@1016 : TextConst 'ENU=You must define a table relation between all records used in events.';
      WorkflowExistsAsTemplateErr@1017 : TextConst 'ENU=The record already exists, as a workflow template.';
      WorkflowMustApplySavedValuesErr@1018 : TextConst 'ENU=The workflow does not contain a response to apply the saved values to.';
      WorkflowMustRevertValuesErr@1019 : TextConst 'ENU=The workflow does not contain a response to revert and save the changed field values.';
      CannotDeleteWorkflowTemplatesErr@1020 : TextConst 'ENU=You cannot delete a workflow template.';

    [External]
    PROCEDURE CreateInstance@24(VAR WorkflowStepInstance@1003 : Record "Workflow Step Instance");
    VAR
      NextWorkflowStepQueue@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";
      LeafWorkflowStepQueue@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";
      WorkflowInstanceID@1001 : GUID;
      WorkflowInstanceCode@1000 : Code[20];
      WorkflowInstancePreviousStepID@1002 : Integer;
    BEGIN
      WorkflowInstanceID := CREATEGUID;
      WorkflowInstanceCode := Code;
      WorkflowInstancePreviousStepID := 0;

      NextWorkflowStepQueue := NextWorkflowStepQueue.Queue;

      CreateInstanceBreadthFirst(Code,WorkflowInstanceID,WorkflowInstanceCode,
        WorkflowInstancePreviousStepID,LeafWorkflowStepQueue,NextWorkflowStepQueue);

      UpdateWorkflowStepInstanceNextLinks(NextWorkflowStepQueue,WorkflowInstanceID);

      WorkflowStepInstance.SETRANGE(ID,WorkflowInstanceID);
      WorkflowStepInstance.SETRANGE("Entry Point",true);
    END;

    LOCAL PROCEDURE CreateInstanceBreadthFirst@22(WorkflowCode@1000 : Code[20];InitialWorkflowInstanceID@1010 : GUID;InitialWorkflowInstanceCode@1011 : Code[20];InitialWorkflowInstancePreviousStepID@1013 : Integer;VAR LeafWorkflowStepQueue@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";VAR NextWorkflowStepQueue@1015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue");
    VAR
      ChildWorkflowStep@1008 : Record "Workflow Step";
      ParentWorkflowStep@1006 : Record "Workflow Step";
      ParentWorkflowStepInstance@1009 : Record "Workflow Step Instance";
      WorkflowStep@1001 : Record "Workflow Step";
      ParentWorkflowStepQueue@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";
      WorkflowInstanceID@1002 : GUID;
      WorkflowInstanceCode@1012 : Code[20];
      WorkflowInstancePreviousStepID@1014 : Integer;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);

      ParentWorkflowStepQueue := ParentWorkflowStepQueue.Queue;
      LeafWorkflowStepQueue := LeafWorkflowStepQueue.Queue;

      WorkflowStep.SETRANGE("Entry Point",true);

      if WorkflowStep.FINDFIRST then begin
        WorkflowInstanceID := InitialWorkflowInstanceID;
        WorkflowInstanceCode := InitialWorkflowInstanceCode;
        WorkflowInstancePreviousStepID := InitialWorkflowInstancePreviousStepID;

        if WorkflowStep.Type = WorkflowStep.Type::"Sub-Workflow" then
          CreateInstanceBreadthFirst(COPYSTR(WorkflowStep."Function Name",1,20),WorkflowInstanceID,WorkflowInstanceCode,
            WorkflowInstancePreviousStepID,LeafWorkflowStepQueue,NextWorkflowStepQueue)
        else begin
          WorkflowStep.CreateInstance(
            WorkflowInstanceID,WorkflowInstanceCode,WorkflowInstancePreviousStepID,WorkflowStep);

          UpdateWorkflowStepInstanceLeafLinks(ChildWorkflowStep,LeafWorkflowStepQueue,WorkflowInstanceID);

          if WorkflowStep."Next Workflow Step ID" > 0 then
            NextWorkflowStepQueue.Enqueue(WorkflowStep.ToString);
        end;

        ParentWorkflowStepQueue.Enqueue(WorkflowStep.ToString);

        while ParentWorkflowStepQueue.Count > 0 do begin
          ParentWorkflowStep.FindByAttributes(ParentWorkflowStepQueue.Dequeue);

          if ParentWorkflowStep.Type <> ParentWorkflowStep.Type::"Sub-Workflow" then
            FindWorkflowStepInstance(ParentWorkflowStepInstance,ParentWorkflowStep,WorkflowInstanceID);

          if not FindChildWorkflowSteps(ChildWorkflowStep,ParentWorkflowStep) then
            LeafWorkflowStepQueue.Enqueue(ParentWorkflowStep.ToString)
          else
            repeat
              if ChildWorkflowStep.Type = ChildWorkflowStep.Type::"Sub-Workflow" then begin
                WorkflowInstancePreviousStepID := ParentWorkflowStepInstance."Workflow Step ID";

                CreateInstanceBreadthFirst(COPYSTR(ChildWorkflowStep."Function Name",1,20),WorkflowInstanceID,WorkflowInstanceCode,
                  WorkflowInstancePreviousStepID,LeafWorkflowStepQueue,NextWorkflowStepQueue);
              end else begin
                ChildWorkflowStep.CreateInstance(
                  WorkflowInstanceID,WorkflowInstanceCode,
                  ParentWorkflowStepInstance."Workflow Step ID",ChildWorkflowStep);

                UpdateWorkflowStepInstanceLeafLinks(ChildWorkflowStep,LeafWorkflowStepQueue,WorkflowInstanceID);

                if ChildWorkflowStep."Next Workflow Step ID" > 0 then
                  NextWorkflowStepQueue.Enqueue(ChildWorkflowStep.ToString);
              end;

              ParentWorkflowStepQueue.Enqueue(ChildWorkflowStep.ToString);
            until ChildWorkflowStep.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateWorkflowStepInstanceLeafLinks@12(WorkflowStep@1005 : Record "Workflow Step";VAR LeafWorkflowStepQueue@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";InstanceID@1010 : GUID);
    VAR
      LeafWorkflowStep@1000 : Record "Workflow Step";
      LeafWorkflowStepInstance@1006 : Record "Workflow Step Instance";
      NextWorkflowStepInstance@1009 : Record "Workflow Step Instance";
      PreviousWorkflowStep@1007 : Record "Workflow Step";
      WorkflowStepInstance@1001 : Record "Workflow Step Instance";
      LeafCount@1002 : Integer;
      LoopLeafCount@1003 : Integer;
      WorkflowStepInstanceIsUpdated@1008 : Boolean;
    BEGIN
      if LeafWorkflowStepQueue.Count = 0 then
        exit;

      if not PreviousWorkflowStepIsSubWorkflow(PreviousWorkflowStep,WorkflowStep) then
        exit;

      FindWorkflowStepInstance(WorkflowStepInstance,WorkflowStep,InstanceID);
      LeafCount := LeafWorkflowStepQueue.Count;

      while LeafWorkflowStepQueue.Count > 0 do begin
        LeafWorkflowStep.FindByAttributes(LeafWorkflowStepQueue.Dequeue);
        FindWorkflowStepInstance(LeafWorkflowStepInstance,LeafWorkflowStep,InstanceID);

        if LeafWorkflowStepInstance."Next Workflow Step ID" > 0 then begin
          LoopLeafCount += 1;

          if FindNextWorkflowStepInstance(NextWorkflowStepInstance,WorkflowStep,
               LeafWorkflowStepInstance.ID,LeafWorkflowStepInstance."Workflow Code")
          then begin
            LeafWorkflowStepInstance.VALIDATE("Next Workflow Step ID",NextWorkflowStepInstance."Workflow Step ID");
            LeafWorkflowStepInstance.MODIFY(true);
          end;
        end else
          if WorkflowStepInstanceIsUpdated then begin
            LeafWorkflowStepInstance.VALIDATE("Next Workflow Step ID",WorkflowStepInstance."Workflow Step ID");
            LeafWorkflowStepInstance.MODIFY(true);
          end else begin
            WorkflowStepInstance.VALIDATE("Previous Workflow Step ID",LeafWorkflowStepInstance."Workflow Step ID");
            WorkflowStepInstance.MODIFY(true);
            WorkflowStepInstanceIsUpdated := true;
          end;
      end;

      if (not WorkflowStepInstanceIsUpdated) or (LoopLeafCount >= LeafCount) then
        ERROR(WorkflowStepInstanceLinkErr,WorkflowStepInstance."Original Workflow Code",PreviousWorkflowStep."Function Name");
    END;

    LOCAL PROCEDURE UpdateWorkflowStepInstanceNextLinks@21(NextWorkflowStepQueue@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Queue";InstanceID@1004 : GUID);
    VAR
      NextWorkflowStepInstance@1003 : Record "Workflow Step Instance";
      WorkflowStep@1001 : Record "Workflow Step";
      WorkflowStepInstance@1002 : Record "Workflow Step Instance";
    BEGIN
      while NextWorkflowStepQueue.Count > 0 do begin
        WorkflowStep.FindByAttributes(NextWorkflowStepQueue.Dequeue);

        if FindWorkflowStepInstance(WorkflowStepInstance,WorkflowStep,InstanceID) then
          if FindNextWorkflowStepInstance(NextWorkflowStepInstance,WorkflowStep,InstanceID,WorkflowStepInstance."Workflow Code")
          then begin
            WorkflowStepInstance.VALIDATE("Next Workflow Step ID",NextWorkflowStepInstance."Workflow Step ID");
            WorkflowStepInstance.MODIFY(true);
          end;
      end;
    END;

    LOCAL PROCEDURE PreviousWorkflowStepIsSubWorkflow@14(VAR PreviousWorkflowStep@1001 : Record "Workflow Step";WorkflowStep@1000 : Record "Workflow Step") : Boolean;
    BEGIN
      PreviousWorkflowStep.GET(WorkflowStep."Workflow Code",WorkflowStep."Previous Workflow Step ID");
      exit(PreviousWorkflowStep.Type = PreviousWorkflowStep.Type::"Sub-Workflow");
    END;

    LOCAL PROCEDURE FindChildWorkflowSteps@23(VAR ChildWorkflowStep@1000 : Record "Workflow Step";ParentWorkflowStep@1001 : Record "Workflow Step") : Boolean;
    BEGIN
      ChildWorkflowStep.SETRANGE("Workflow Code",ParentWorkflowStep."Workflow Code");
      ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ParentWorkflowStep.ID);
      exit(ChildWorkflowStep.FINDSET);
    END;

    LOCAL PROCEDURE FindWorkflowStepInstance@15(VAR WorkflowStepInstance@1000 : Record "Workflow Step Instance";WorkflowStep@1001 : Record "Workflow Step";InstanceID@1002 : GUID) : Boolean;
    BEGIN
      WorkflowStepInstance.SETRANGE(ID,InstanceID);
      WorkflowStepInstance.SETRANGE("Original Workflow Code",WorkflowStep."Workflow Code");
      WorkflowStepInstance.SETRANGE("Original Workflow Step ID",WorkflowStep.ID);
      WorkflowStepInstance.SETRANGE(Type,WorkflowStep.Type);
      exit(WorkflowStepInstance.FINDFIRST);
    END;

    LOCAL PROCEDURE FindNextWorkflowStepInstance@27(VAR WorkflowStepInstance@1000 : Record "Workflow Step Instance";WorkflowStep@1001 : Record "Workflow Step";InstanceID@1002 : GUID;WorkflowCode@1003 : Code[20]) : Boolean;
    BEGIN
      WorkflowStepInstance.SETRANGE(ID,InstanceID);
      WorkflowStepInstance.SETRANGE("Workflow Code",WorkflowCode);
      WorkflowStepInstance.SETRANGE("Original Workflow Code",WorkflowStep."Workflow Code");
      WorkflowStepInstance.SETRANGE("Original Workflow Step ID",WorkflowStep."Next Workflow Step ID");
      exit(WorkflowStepInstance.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteWorkflowSteps@1();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.DELETEALL(true);
    END;

    LOCAL PROCEDURE SetEntryPoint@2();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.MODIFYALL("Entry Point",false,true);

      WorkflowStep.SETRANGE("Previous Workflow Step ID",0);
      if WorkflowStep.FINDFIRST then begin
        WorkflowStep.VALIDATE("Entry Point",true);
        WorkflowStep.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE ClearEntryPointIfFirst@25();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.MODIFYALL("Entry Point",false,false);
    END;

    LOCAL PROCEDURE CheckEntryPointsAreEvents@4();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Entry Point",true);
      WorkflowStep.SETFILTER(Type,'<>%1',WorkflowStep.Type::"Event");

      if not WorkflowStep.ISEMPTY then
        ERROR(EventOnlyEntryPointsErr);
    END;

    LOCAL PROCEDURE CheckEntryPointsAreNotSubWorkflows@16();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Entry Point",true);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Sub-Workflow");

      if not WorkflowStep.ISEMPTY then
        ERROR(EventOnlyEntryPointsErr);
    END;

    LOCAL PROCEDURE CheckSingleEntryPointAsRoot@19();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Entry Point",true);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",0);

      if WorkflowStep.COUNT <> 1 then
        ERROR(OneRootStepErr);
    END;

    LOCAL PROCEDURE CheckOrphansNotExist@5();
    VAR
      PreviousWorkflowStep@1002 : Record "Workflow Step";
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Entry Point",false);

      WorkflowStep.SETRANGE("Previous Workflow Step ID",0);
      if not WorkflowStep.ISEMPTY then
        ERROR(OrphanWorkflowStepsErr);

      WorkflowStep.SETFILTER("Previous Workflow Step ID",'<>%1',0);
      if WorkflowStep.FINDSET then
        repeat
          if not PreviousWorkflowStep.GET(Code,WorkflowStep."Previous Workflow Step ID") then
            ERROR(OrphanWorkflowStepsErr);
        until WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckFunctionNames@17();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Function Name",'');

      if not WorkflowStep.ISEMPTY then
        ERROR(MissingFunctionNamesErr);
    END;

    LOCAL PROCEDURE CheckSubWorkflowsEnabled@11();
    VAR
      Workflow@1001 : Record Workflow;
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Sub-Workflow");

      if WorkflowStep.FINDSET then
        repeat
          Workflow.GET(WorkflowStep."Function Name");

          if not Workflow.Enabled then
            ERROR(SubWorkflowNotEnabledErr,WorkflowStep."Function Name",Code);
        until WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckResponseOptions@8();
    VAR
      WorkflowStep@1003 : Record "Workflow Step";
      WorkflowResponseHandling@1001 : Codeunit "Workflow Response Handling";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::Response);

      if WorkflowStep.FINDSET then
        repeat
          if not WorkflowResponseHandling.HasRequiredArguments(WorkflowStep) then
            ERROR(MissingRespOptionsErr);
        until WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckEntryPointEventConditions@10();
    VAR
      ThisWorkflowStep@1004 : Record "Workflow Step";
      ThisWorkflowDefinition@1000 : Query "Workflow Definition";
      SkipBlob@1002 : Boolean;
    BEGIN
      SkipBlob := true;

      ThisWorkflowDefinition.SETRANGE(Code,Code);
      ThisWorkflowDefinition.SETRANGE(Entry_Point,true);
      ThisWorkflowDefinition.SETRANGE(Type,ThisWorkflowDefinition.Type::"Event");
      ThisWorkflowDefinition.OPEN;

      while ThisWorkflowDefinition.READ do begin
        ThisWorkflowStep.GET(ThisWorkflowDefinition.Code,ThisWorkflowDefinition.ID);
        CheckEntryPointsInSameWorkflow(ThisWorkflowStep,ThisWorkflowDefinition,SkipBlob);
        CheckEntryPointsInOtherEnabledWorkflows(ThisWorkflowStep,ThisWorkflowDefinition,SkipBlob);
      end;
    END;

    LOCAL PROCEDURE CheckEntryPointsInSameWorkflow@9(ThisWorkflowStep@1000 : Record "Workflow Step";ThisWorkflowDefinition@1001 : Query "Workflow Definition";SkipBlob@1006 : Boolean);
    VAR
      OtherWorkflowStep@1004 : Record "Workflow Step";
      OtherWorkflowDefinition@1005 : Query "Workflow Definition";
    BEGIN
      OtherWorkflowDefinition.SETRANGE(Code,ThisWorkflowDefinition.Code);
      OtherWorkflowDefinition.SETFILTER(ID,'<>%1',ThisWorkflowDefinition.ID);
      OtherWorkflowDefinition.SETRANGE(Entry_Point,true);
      OtherWorkflowDefinition.SETRANGE(Type,OtherWorkflowDefinition.Type::"Event");
      OtherWorkflowDefinition.SETRANGE(Function_Name,ThisWorkflowDefinition.Function_Name);
      OtherWorkflowDefinition.SETRANGE(Table_ID,ThisWorkflowDefinition.Table_ID);
      OtherWorkflowDefinition.OPEN;

      while OtherWorkflowDefinition.READ do begin
        OtherWorkflowStep.GET(OtherWorkflowDefinition.Code,OtherWorkflowDefinition.ID);
        CompareWorkflowStepArguments(ThisWorkflowStep,OtherWorkflowStep,ThisWorkflowDefinition,ThisWorkflowDefinition,SkipBlob);
      end;
    END;

    LOCAL PROCEDURE CheckEntryPointsInOtherEnabledWorkflows@20(ThisWorkflowStep@1000 : Record "Workflow Step";ThisWorkflowDefinition@1001 : Query "Workflow Definition";SkipBlob@1006 : Boolean);
    VAR
      OtherWorkflowStep@1004 : Record "Workflow Step";
      OtherWorkflowDefinition@1005 : Query "Workflow Definition";
    BEGIN
      OtherWorkflowDefinition.SETFILTER(Code,'<>%1',ThisWorkflowDefinition.Code);
      OtherWorkflowDefinition.SETRANGE(Enabled,true);
      OtherWorkflowDefinition.SETRANGE(Entry_Point,true);
      OtherWorkflowDefinition.SETRANGE(Type,OtherWorkflowDefinition.Type::"Event");
      OtherWorkflowDefinition.SETRANGE(Function_Name,ThisWorkflowDefinition.Function_Name);
      OtherWorkflowDefinition.SETRANGE(Table_ID,ThisWorkflowDefinition.Table_ID);
      OtherWorkflowDefinition.OPEN;

      while OtherWorkflowDefinition.READ do begin
        OtherWorkflowStep.GET(OtherWorkflowDefinition.Code,OtherWorkflowDefinition.ID);
        CompareWorkflowStepArguments(ThisWorkflowStep,OtherWorkflowStep,ThisWorkflowDefinition,ThisWorkflowDefinition,SkipBlob);
      end;
    END;

    LOCAL PROCEDURE CheckEventTableRelation@28();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
      NextWorkflowStep@1003 : Record "Workflow Step";
      WorkflowEvent@1002 : Record "Workflow Event";
      WorkflowTableRelation@1005 : Record "Workflow - Table Relation";
      CurrentTable@1001 : Integer;
      NextTable@1004 : Integer;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Event");
      if WorkflowStep.FINDSET then
        repeat
          WorkflowEvent.GET(WorkflowStep."Function Name");
          CurrentTable := WorkflowEvent."Table ID";
          if WorkflowStep.HasEventsInSubtree(NextWorkflowStep) then begin
            WorkflowEvent.GET(NextWorkflowStep."Function Name");
            NextTable := WorkflowEvent."Table ID";
            if CurrentTable <> NextTable then begin
              WorkflowTableRelation.SETRANGE("Table ID",CurrentTable);
              WorkflowTableRelation.SETRANGE("Related Table ID",NextTable);
              if WorkflowTableRelation.ISEMPTY then
                ERROR(ValidateTableRelationErr);
            end;
          end;
        until WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckRecordChangedWorkflows@29();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
      WorkflowResponseHandling@1001 : Codeunit "Workflow Response Handling";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::Response);
      WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.RevertValueForFieldCode);
      if not WorkflowStep.ISEMPTY then begin
        WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.ApplyNewValuesCode);
        if WorkflowStep.ISEMPTY then
          ERROR(WorkflowMustApplySavedValuesErr);
      end;

      WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.ApplyNewValuesCode);
      if not WorkflowStep.ISEMPTY then begin
        WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.RevertValueForFieldCode);
        if WorkflowStep.ISEMPTY then
          ERROR(WorkflowMustRevertValuesErr);
      end;
    END;

    LOCAL PROCEDURE CompareWorkflowStepArguments@3(ThisWorkflowStep@1004 : Record "Workflow Step";OtherWorkflowStep@1005 : Record "Workflow Step";ThisWorkflowDefinition@1000 : Query "Workflow Definition";OtherWorkflowDefinition@1001 : Query "Workflow Definition";SkipBlob@1003 : Boolean);
    VAR
      OtherWorkflowStepArgument@1007 : Record "Workflow Step Argument";
      ThisWorkflowStepArgument@1006 : Record "Workflow Step Argument";
      ThisWorkflowRule@1009 : Record "Workflow Rule";
      OtherWorkflowRule@1008 : Record "Workflow Rule";
      TableCaption@1002 : Text;
    BEGIN
      TableCaption := GetTableCaption(ThisWorkflowDefinition.Table_ID);

      if ((not ThisWorkflowStepArgument.GET(ThisWorkflowDefinition.Argument)) and
          (not ThisWorkflowStep.FindWorkflowRules(ThisWorkflowRule))) or
         ((not OtherWorkflowStepArgument.GET(OtherWorkflowDefinition.Argument)) and
          (not OtherWorkflowStep.FindWorkflowRules(OtherWorkflowRule)))
      then
        ERROR(SameEventConditionsErr,TableCaption);

      if ThisWorkflowStepArgument.Equals(OtherWorkflowStepArgument,SkipBlob) and
         ThisWorkflowStep.CompareEventConditions(OtherWorkflowStep) and
         ThisWorkflowStep.CompareEventRule(OtherWorkflowStep)
      then
        ERROR(SameEventConditionsErr,TableCaption);
    END;

    LOCAL PROCEDURE GetTableCaption@26(TableID@1000 : Integer) : Text;
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      if TableID = 0 then
        exit('');

      RecRef.OPEN(TableID);
      exit(RecRef.CAPTION);
    END;

    LOCAL PROCEDURE CheckEditingReferringWorkflowsIsAllowed@13();
    VAR
      Workflow@1002 : Record Workflow;
      WorkflowStep@1001 : Record "Workflow Step";
      WorkflowDefinition@1000 : Query "Workflow Definition";
    BEGIN
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Sub-Workflow");
      WorkflowStep.SETRANGE("Function Name",Code);

      if not WorkflowStep.ISEMPTY then
        if not CONFIRM(DisableReferringWorkflowsQst,false,Code) then
          ERROR(DisableReferringWorkflowsErr,Code);

      WorkflowDefinition.SETFILTER(Code,'<>%1',Code);
      WorkflowDefinition.SETRANGE(Type,WorkflowDefinition.Type::"Sub-Workflow");
      WorkflowDefinition.SETRANGE(Function_Name,Code);
      WorkflowDefinition.SETRANGE(Enabled,true);
      WorkflowDefinition.OPEN;

      while WorkflowDefinition.READ do begin
        Workflow.GET(WorkflowDefinition.Code);
        Workflow.VALIDATE(Enabled,false);
        Workflow.MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE CheckEditingIsAllowed@6();
    BEGIN
      if Template then
        ERROR(CannotEditTemplateWorkflowErr);
      if Enabled then
        ERROR(CannotEditEnabledWorkflowErr);
    END;

    LOCAL PROCEDURE CheckWorkflowCodeDoesNotExistAsTemplate@30();
    VAR
      Workflow@1000 : Record Workflow;
    BEGIN
      Workflow.SETRANGE(Template,true);
      Workflow.SETRANGE(Code,Code);
      if not Workflow.ISEMPTY then
        ERROR(WorkflowExistsAsTemplateErr);
    END;

    [External]
    PROCEDURE LookupOtherWorkflowCode@7(VAR LookupCode@1001 : Code[20]) : Boolean;
    VAR
      Workflow@1000 : Record Workflow;
    BEGIN
      Workflow.SETFILTER(Code,'<>%1',Code);

      if PAGE.RUNMODAL(0,Workflow) = ACTION::LookupOK then begin
        LookupCode := Workflow.Code;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE InsertAfterFunctionName@18(FunctionName@1001 : Code[128];NewFunctionName@1003 : Code[128];NewEntryPoint@1004 : Boolean;NewType@1005 : Option);
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
      NewWorkflowStep@1002 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Code);
      WorkflowStep.SETRANGE("Function Name",FunctionName);
      if WorkflowStep.FINDSET then
        repeat
          NewWorkflowStep.INIT;
          NewWorkflowStep.VALIDATE("Workflow Code",Code);
          NewWorkflowStep.VALIDATE(Type,NewType);
          NewWorkflowStep.VALIDATE("Function Name",NewFunctionName);
          NewWorkflowStep.VALIDATE("Entry Point",NewEntryPoint);
          NewWorkflowStep.INSERT(true);
          WorkflowStep.InsertAfterStep(NewWorkflowStep);
        until WorkflowStep.NEXT = 0;
    END;

    [Internal]
    PROCEDURE ExportToBlob@31(VAR TempBlob@1000 : Record TempBlob);
    VAR
      OutStream@1001 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      XMLPORT.EXPORT(XMLPORT::"Import / Export Workflow",OutStream,Rec);
    END;

    [Internal]
    PROCEDURE ImportFromBlob@32(VAR TempBlob@1000 : Record TempBlob);
    VAR
      ImportExportWorkflow@1002 : XMLport "Import / Export Workflow";
      InStream@1001 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      ImportExportWorkflow.SETSOURCE(InStream);
      ImportExportWorkflow.InitWorkflow(Code);
      ImportExportWorkflow.SETTABLEVIEW(Rec);
      ImportExportWorkflow.IMPORT;
    END;

    PROCEDURE CanDelete@33(ThrowErrors@1000 : Boolean) : Boolean;
    VAR
      WorkflowStepInstance@1001 : Record "Workflow Step Instance";
    BEGIN
      if Enabled then
        exit(ThrowOrReturnFalse(ThrowErrors,CannotDeleteEnabledWorkflowErr));

      WorkflowStepInstance.SETRANGE("Workflow Code",Code);
      WorkflowStepInstance.SETRANGE(Status,WorkflowStepInstance.Status::Inactive,WorkflowStepInstance.Status::Active);
      if not WorkflowStepInstance.ISEMPTY then
        exit(ThrowOrReturnFalse(ThrowErrors,CannotDeleteWorkflowWithActiveInstancesErr));

      if Template then
        exit(ThrowOrReturnFalse(ThrowErrors,CannotDeleteWorkflowTemplatesErr));

      exit(true);
    END;

    LOCAL PROCEDURE ThrowOrReturnFalse@34(ShouldThrow@1000 : Boolean;Message@1001 : Text) : Boolean;
    BEGIN
      if ShouldThrow then
        ERROR(Message);

      exit(false);
    END;

    BEGIN
    END.
  }
}

