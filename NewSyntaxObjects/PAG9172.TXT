OBJECT Page 9172 User Personalization Card
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=User Personalization Card;
    SourceTable="User Personalization";
    DataCaptionExpr="User ID";
    DelayedInsert=true;
    PageType=Card;
    OnOpenPage=BEGIN
                 HideExternalUsers;
                 ProfileID := "Profile ID";
               END;

    OnInsertRecord=BEGIN
                     TESTFIELD("User SID");
                   END;

    OnModifyRecord=BEGIN
                     TESTFIELD("User SID");
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 13      ;1   ;ActionGroup;
                      Name=User &Personalization;
                      CaptionML=ENU=User &Personalization;
                      Image=Grid }
      { 14      ;2   ;Action    ;
                      Name=List;
                      ShortCutKey=Shift+Ctrl+L;
                      CaptionML=ENU=List;
                      ToolTipML=ENU=View or edit a list of all users who have personalized their user interface by customizing one or more pages.;
                      ApplicationArea=#Basic,#Suite;
                      Image=OpportunitiesList;
                      OnAction=VAR
                                 UserPersList@1102601000 : Page "User Personalization List";
                               BEGIN
                                 UserPersList.LOOKUPMODE := true;
                                 UserPersList.SETRECORD(Rec);
                                 if UserPersList.RUNMODAL = ACTION::LookupOK then
                                   UserPersList.GETRECORD(Rec);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 20      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 21      ;2   ;Action    ;
                      Name=C&lear Personalized Pages;
                      CaptionML=ENU=C&lear Personalized Pages;
                      ToolTipML=ENU=Delete all personalizations made by the specified user across display targets.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Cancel;
                      OnAction=BEGIN
                                 ConfPersMgt.ClearUserPersonalization(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 4   ;2   ;Field     ;
                Name=User ID;
                DrillDown=false;
                CaptionML=ENU=User ID;
                ToolTipML=ENU=Specifies the user ID of a user who is using Database Server Authentication to log on to Dynamics 365.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User ID";
                Editable=FALSE;
                OnAssistEdit=VAR
                               UserPersonalization@1005 : Record "User Personalization";
                               UserMgt@1002 : Codeunit "User Management";
                               SID@1006 : GUID;
                               UserID@1001 : Code[50];
                             BEGIN
                               UserMgt.LookupUser(UserID,SID);

                               if (SID <> "User SID") and not ISNULLGUID(SID) then begin
                                 if UserPersonalization.GET(SID) then begin
                                   UserPersonalization.CALCFIELDS("User ID");
                                   ERROR(Text000,TABLECAPTION,UserPersonalization."User ID");
                                 end;

                                 VALIDATE("User SID",SID);
                                 CALCFIELDS("User ID");

                                 CurrPage.UPDATE;
                               end;
                             END;

                ImplicitType=Code50 }

    { 6   ;2   ;Field     ;
                Name=ProfileID;
                DrillDown=false;
                CaptionML=ENU=Profile ID;
                ToolTipML=ENU=Specifies the ID of the profile that is associated with the current user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfileID;
                Editable=False;
                LookupPageID="Profile List";
                OnValidate=BEGIN
                             SetExperienceToSuite("Profile ID");
                           END;

                OnAssistEdit=VAR
                               AllProfileTable@1000 : Record "All Profile";
                             BEGIN
                               if PAGE.RUNMODAL(PAGE::"Available Profiles",AllProfileTable) = ACTION::LookupOK then begin
                                 "Profile ID" := AllProfileTable."Profile ID";
                                 "App ID" := AllProfileTable."App ID";
                                 Scope := AllProfileTable.Scope;
                                 ProfileID := "Profile ID";
                               end
                             END;

                ImplicitType=Code30 }

    { 8   ;2   ;Field     ;
                Name=Language ID;
                CaptionML=ENU=Language ID;
                ToolTipML=ENU=Specifies the ID of the language that Microsoft Windows is set up to run for the selected user.;
                ApplicationArea=#Advanced;
                BlankZero=true;
                SourceExpr="Language ID";
                OnValidate=VAR
                             ApplicationManagement@1001 : Codeunit ApplicationManagement;
                           BEGIN
                             ApplicationManagement.ValidateApplicationlLanguage("Language ID");
                           END;

                OnLookup=VAR
                           ApplicationManagement@1002 : Codeunit ApplicationManagement;
                         BEGIN
                           ApplicationManagement.LookupApplicationlLanguage("Language ID");

                           if "Language ID" <> xRec."Language ID" then
                             VALIDATE("Language ID","Language ID");
                         END;

                ImplicitType=Integer }

    { 2   ;2   ;Field     ;
                Name=Locale ID;
                CaptionML=ENU=Locale ID;
                ToolTipML=ENU=Specifies the ID of the locale that Microsoft Windows is set up to run for the selected user.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Locale ID";
                TableRelation="Windows Language"."Language ID";
                Importance=Additional;
                ImplicitType=Integer }

    { 3   ;2   ;Field     ;
                Name=Time Zone;
                CaptionML=ENU=Time Zone;
                ToolTipML=ENU=Specifies the time zone that Microsoft Windows is set up to run for the selected user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Time Zone";
                Importance=Additional;
                OnValidate=BEGIN
                             ConfPersMgt.ValidateTimeZone("Time Zone")
                           END;

                OnLookup=BEGIN
                           exit(ConfPersMgt.LookupTimeZone(Text))
                         END;

                ImplicitType=Text180 }

    { 10  ;2   ;Field     ;
                Name=Company;
                CaptionML=ENU=Company;
                ToolTipML=ENU=Specifies the company that is associated with the user.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Company;
                ImplicitType=Text30 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ConfPersMgt@1000 : Codeunit "Conf./Personalization Mgt.";
      Text000@1008 : TextConst '@@@=User Personalization User1 already exists.;ENU=%1 %2 already exists.';
      AccountantTxt@1002 : TextConst '@@@=Please translate all caps;ENU=ACCOUNTANT';
      ProjectManagerTxt@1003 : TextConst '@@@=Please translate all caps;ENU=PROJECT MANAGER';
      TeamMemberTxt@1001 : TextConst '@@@=Please translate all caps;ENU=TEAM MEMBER';
      ExperienceMsg@1004 : TextConst 'ENU=You are changing to a Role Center that has more functionality. To display the full functionality for this role, your Experience setting will be set to Suite.';
      ProfileID@1005 : Code[30];

    LOCAL PROCEDURE HideExternalUsers@5();
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      if not PermissionManager.SoftwareAsAService then
        exit;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      CALCFIELDS("License Type");
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    PROCEDURE SetExperienceToSuite@8(SelectedProfileID@1003 : Text[30]);
    VAR
      ApplicationAreaSetup@1002 : Record "Application Area Setup";
      CompanyInformationMgt@1001 : Codeunit "Company Information Mgt.";
      ExperienceTier@1000 : ',,,,,Basic,,,,,,,,,,Suite,,,,,Custom,,,,,Advanced';
    BEGIN
      if CompanyInformationMgt.IsDemoCompany then begin
        ApplicationAreaSetup.GetExperienceTierCurrentCompany(ExperienceTier);
        if ExperienceTier = ExperienceTier::Basic then
          if (SelectedProfileID = TeamMemberTxt) or
             (SelectedProfileID = AccountantTxt) or
             (SelectedProfileID = ProjectManagerTxt)
          then begin
            MESSAGE(ExperienceMsg);
            ExperienceTier := ExperienceTier::Suite;
            ApplicationAreaSetup.SetExperienceTierCurrentCompany(ExperienceTier);
          end;
      end;
    END;

    BEGIN
    END.
  }
}

