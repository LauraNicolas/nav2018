OBJECT Table 5717 Item Cross Reference
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if ("Cross-Reference Type No." <> '') and
                  ("Cross-Reference Type" = "Cross-Reference Type"::" ")
               then
                 ERROR(Text000,FIELDCAPTION("Cross-Reference Type No."));

               Item.GET("Item No.");
               if "Unit of Measure" = '' then
                 VALIDATE("Unit of Measure",Item."Base Unit of Measure");
               CreateItemVendor;
             END;

    OnDelete=BEGIN
               if "Cross-Reference Type" = "Cross-Reference Type"::Vendor then
                 DeleteItemVendor(Rec)
             END;

    OnRename=BEGIN
               if ("Cross-Reference Type No." <> '') and
                  ("Cross-Reference Type" = "Cross-Reference Type"::" ")
               then
                 ERROR(Text000,FIELDCAPTION("Cross-Reference Type No."));

               if ("Cross-Reference Type" = "Cross-Reference Type"::Vendor) and not ItemVendorResetRequired(xRec,Rec) then
                 UpdateItemVendorNo(xRec,"Cross-Reference No.")
               else begin
                 if xRec."Cross-Reference Type" = "Cross-Reference Type"::Vendor then
                   DeleteItemVendor(xRec);
                 if "Cross-Reference Type" = "Cross-Reference Type"::Vendor then
                   CreateItemVendor;
               end;
             END;

    CaptionML=ENU=Item Cross Reference;
    LookupPageID="Cross Reference List";
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 2   ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
    { 3   ;   ;Unit of Measure     ;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Unit of Measure }
    { 4   ;   ;Cross-Reference Type;Option        ;OnValidate=BEGIN
                                                                if ("Cross-Reference Type" <> xRec."Cross-Reference Type") and
                                                                   (xRec."Cross-Reference Type" <> xRec."Cross-Reference Type"::" ") or
                                                                   ("Cross-Reference Type" = "Cross-Reference Type"::"Bar Code")
                                                                then
                                                                  "Cross-Reference Type No." := '';
                                                              END;

                                                   CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=" ",Customer,Vendor,"Bar Code" }
    { 5   ;   ;Cross-Reference Type No.;Code30    ;TableRelation=IF ("Cross-Reference Type"=CONST(Customer)) Customer."No."
                                                                 ELSE IF ("Cross-Reference Type"=CONST(Vendor)) Vendor."No.";
                                                   CaptionML=ENU=Cross-Reference Type No. }
    { 6   ;   ;Cross-Reference No. ;Code20        ;CaptionML=ENU=Cross-Reference No.;
                                                   NotBlank=true }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 8   ;   ;Discontinue Bar Code;Boolean       ;OnValidate=BEGIN
                                                                if "Discontinue Bar Code" and
                                                                   ("Cross-Reference Type" <> "Cross-Reference Type"::"Bar Code")
                                                                then
                                                                  ERROR(Text001,TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=Discontinue Bar Code }
  }
  KEYS
  {
    {    ;"Item No.","Variant Code","Unit of Measure","Cross-Reference Type","Cross-Reference Type No.","Cross-Reference No.";
                                                   Clustered=true }
    {    ;"Cross-Reference No."                    }
    {    ;"Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code" }
    {    ;"Cross-Reference Type","Cross-Reference No." }
    {    ;"Item No.","Variant Code","Unit of Measure","Cross-Reference Type","Cross-Reference No.","Discontinue Bar Code" }
    {    ;"Cross-Reference Type","Cross-Reference Type No." }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot enter a %1 for a blank Cross-Reference Type.';
      Text001@1001 : TextConst 'ENU=This %1 is not a bar code.';
      Item@1002 : Record Item;
      ItemVend@1003 : Record "Item Vendor";

    LOCAL PROCEDURE CreateItemVendor@1();
    BEGIN
      if ("Cross-Reference Type" = "Cross-Reference Type"::Vendor) and
         ItemVend.WRITEPERMISSION
      then begin
        ItemVend.RESET;
        ItemVend.SETRANGE("Item No.","Item No.");
        ItemVend.SETRANGE("Vendor No.","Cross-Reference Type No.");
        ItemVend.SETRANGE("Variant Code","Variant Code");
        if ItemVend.ISEMPTY then begin
          ItemVend."Item No." := "Item No.";
          ItemVend."Vendor No." := "Cross-Reference Type No.";
          ItemVend.VALIDATE("Vendor No.");
          ItemVend."Variant Code" := "Variant Code";
          ItemVend."Vendor Item No." := "Cross-Reference No.";
          ItemVend.INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE DeleteItemVendor@2(ItemCrossReference@1000 : Record "Item Cross Reference");
    BEGIN
      if not MultipleCrossReferencesExist(ItemCrossReference) then
        if ItemVend.GET(ItemCrossReference."Cross-Reference Type No.",ItemCrossReference."Item No.",ItemCrossReference."Variant Code") then
          if UPPERCASE(DELCHR(ItemVend."Vendor Item No.",'<',' ')) = ItemCrossReference."Cross-Reference No." then
            ItemVend.DELETE;
    END;

    LOCAL PROCEDURE UpdateItemVendorNo@3(ItemCrossReference@1000 : Record "Item Cross Reference";NewCrossRefNo@1002 : Code[20]);
    BEGIN
      if not MultipleCrossReferencesExist(ItemCrossReference) then
        if ItemVend.GET(ItemCrossReference."Cross-Reference Type No.",ItemCrossReference."Item No.",ItemCrossReference."Variant Code") then begin
          ItemVend.VALIDATE("Vendor Item No.",NewCrossRefNo);
          ItemVend.MODIFY;
        end;
    END;

    LOCAL PROCEDURE ItemVendorResetRequired@5(OldItemCrossRef@1000 : Record "Item Cross Reference";NewItemCrossRef@1001 : Record "Item Cross Reference") : Boolean;
    BEGIN
      exit(
        (OldItemCrossRef."Item No." <> NewItemCrossRef."Item No.") or
        (OldItemCrossRef."Variant Code" <> NewItemCrossRef."Variant Code") or
        (OldItemCrossRef."Cross-Reference Type" <> NewItemCrossRef."Cross-Reference Type") or
        (OldItemCrossRef."Cross-Reference Type No." <> NewItemCrossRef."Cross-Reference Type No."));
    END;

    LOCAL PROCEDURE MultipleCrossReferencesExist@8(ItemCrossReference@1000 : Record "Item Cross Reference") : Boolean;
    VAR
      ItemCrossReference2@1001 : Record "Item Cross Reference";
    BEGIN
      ItemCrossReference2.SETRANGE("Item No.",ItemCrossReference."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",ItemCrossReference."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type");
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",ItemCrossReference."Cross-Reference Type No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
      ItemCrossReference2.SETFILTER("Unit of Measure",'<>%1',ItemCrossReference."Unit of Measure");

      exit(not ItemCrossReference2.ISEMPTY);
    END;

    PROCEDURE GetItemDescription@4(VAR ItemDescription@1006 : Text;ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];UnitOfMeasureCode@1002 : Code[10];CrossRefType@1003 : Option;CrossRefTypeNo@1004 : Code[20]) : Boolean;
    VAR
      ItemCrossReference@1005 : Record "Item Cross Reference";
    BEGIN
      ItemCrossReference.SETRANGE("Item No.",ItemNo);
      ItemCrossReference.SETRANGE("Variant Code",VariantCode);
      ItemCrossReference.SETRANGE("Unit of Measure",UnitOfMeasureCode);
      ItemCrossReference.SETRANGE("Cross-Reference Type",CrossRefType);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",CrossRefTypeNo);
      if ItemCrossReference.FINDFIRST then begin
        ItemDescription := ItemCrossReference.Description;
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE HasValidUnitOfMeasure@38() : Boolean;
    VAR
      ItemUnitOfMeasure@1000 : Record "Item Unit of Measure";
    BEGIN
      if "Unit of Measure" = '' then
        exit(true);
      ItemUnitOfMeasure.SETRANGE("Item No.","Item No.");
      ItemUnitOfMeasure.SETRANGE(Code,"Unit of Measure");
      exit(ItemUnitOfMeasure.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

