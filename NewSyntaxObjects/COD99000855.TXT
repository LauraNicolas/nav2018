OBJECT Codeunit 99000855 Planning-Get Parameters
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GlobalSKU@1001 : Record "Stockkeeping Unit";
      Item@1002 : Record Item;
      MfgSetup@1003 : Record "Manufacturing Setup";
      HasGotMfgSetUp@1004 : Boolean;
      LotForLot@1000 : Boolean;

    [External]
    PROCEDURE AtSKU@1(VAR SKU@1000 : Record "Stockkeeping Unit";ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      GetMfgSetUp;
      with GlobalSKU do begin
        if (ItemNo <> "Item No.") or
           (VariantCode <> "Variant Code") or
           (LocationCode <> "Location Code")
        then begin
          CLEAR(GlobalSKU);
          SETRANGE("Item No.",ItemNo);
          SETRANGE("Variant Code",VariantCode);
          SETRANGE("Location Code",LocationCode);
          if not FINDFIRST then begin
            GetItem(ItemNo);
            "Item No." := ItemNo;
            "Variant Code" := VariantCode;
            "Location Code" := LocationCode;
            CopyFromItem(Item);
            if LotForLot then begin
              "Reorder Point" := 0;
              "Maximum Inventory" := 0;
              "Reorder Quantity" := 0;
              case Item."Reordering Policy" of
                "Reordering Policy"::" ":
                  "Reordering Policy" := "Reordering Policy"::" ";
                "Reordering Policy"::Order:
                  "Reordering Policy" := "Reordering Policy"::Order;
                "Reordering Policy"::"Lot-for-Lot":
                  "Reordering Policy" := "Reordering Policy"::"Lot-for-Lot";
                else
                  "Reordering Policy" := "Reordering Policy"::"Lot-for-Lot";
              end;
              if "Reordering Policy" = "Reordering Policy"::"Lot-for-Lot" then
                "Include Inventory" := true
              else
                "Include Inventory" := Item."Include Inventory";
              "Minimum Order Quantity" := 0;
              "Maximum Order Quantity" := 0;
              "Safety Stock Quantity" := 0;
              "Order Multiple" := 0;
              "Overflow Level" := 0;
            end;
          end;
          if "Components at Location" = '' then begin
            if MfgSetup."Components at Location" <> '' then
              "Components at Location" := MfgSetup."Components at Location"
            else
              "Components at Location" := LocationCode;
          end;
        end;
        if FORMAT("Safety Lead Time") = '' then
          if FORMAT(MfgSetup."Default Safety Lead Time") <> '' then
            "Safety Lead Time" := MfgSetup."Default Safety Lead Time"
          else
            EVALUATE("Safety Lead Time",'<0D>');
        AdjustInvalidSettings(GlobalSKU);
      end;
      SKU := GlobalSKU;
    END;

    LOCAL PROCEDURE GetItem@6(ItemNo@1000 : Code[20]);
    BEGIN
      if Item."No." <> ItemNo then
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE GetMfgSetUp@2();
    BEGIN
      if not HasGotMfgSetUp then
        HasGotMfgSetUp := MfgSetup.GET;
    END;

    [External]
    PROCEDURE SetLotForLot@8();
    BEGIN
      LotForLot := true;
    END;

    [External]
    PROCEDURE SetUpPlanningControls@4(ReorderingPolicy@1001 : '" ","Fixed Reorder Qty.","Maximum Qty.",Order,"Lot-for-Lot"';IncludeInventory@1012 : Boolean;VAR TimeBucketEnabled@1009 : Boolean;VAR SafetyLeadTimeEnabled@1008 : Boolean;VAR SafetyStockQtyEnabled@1007 : Boolean;VAR ReorderPointEnabled@1006 : Boolean;VAR ReorderQuantityEnabled@1005 : Boolean;VAR MaximumInventoryEnabled@1004 : Boolean;VAR MinimumOrderQtyEnabled@1003 : Boolean;VAR MaximumOrderQtyEnabled@1002 : Boolean;VAR OrderMultipleEnabled@1000 : Boolean;VAR IncludeInventoryEnabled@1011 : Boolean;VAR ReschedulingPeriodEnabled@1013 : Boolean;VAR LotAccumulationPeriodEnabled@1014 : Boolean;VAR DampenerPeriodEnabled@1015 : Boolean;VAR DampenerQuantityEnabled@1016 : Boolean;VAR OverflowLevelEnabled@1017 : Boolean);
    VAR
      ParamArray@1010 : ARRAY [15] OF Boolean;
    BEGIN
      case ReorderingPolicy of
        ReorderingPolicy::" ":
          AssignToArray(ParamArray,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false);
        ReorderingPolicy::"Fixed Reorder Qty.":
          AssignToArray(ParamArray,true,true,true,true,true,false,true,true,true,false,false,false,false,true,true);
        ReorderingPolicy::"Maximum Qty.":
          AssignToArray(ParamArray,true,true,true,true,false,true,true,true,true,false,false,false,false,true,true);
        ReorderingPolicy::Order:
          AssignToArray(ParamArray,false,true,false,false,false,false,false,false,false,false,false,false,true,false,false);
        ReorderingPolicy::"Lot-for-Lot":
          AssignToArray(ParamArray,false,true,IncludeInventory,false,false,false,true,true,true,true,true,true,true,true,false);
      end;

      TimeBucketEnabled := ParamArray[1];
      SafetyLeadTimeEnabled := ParamArray[2];
      SafetyStockQtyEnabled := ParamArray[3];
      ReorderPointEnabled := ParamArray[4];
      ReorderQuantityEnabled := ParamArray[5];
      MaximumInventoryEnabled := ParamArray[6];
      MinimumOrderQtyEnabled := ParamArray[7];
      MaximumOrderQtyEnabled := ParamArray[8];
      OrderMultipleEnabled := ParamArray[9];
      IncludeInventoryEnabled := ParamArray[10];
      ReschedulingPeriodEnabled := ParamArray[11];
      LotAccumulationPeriodEnabled := ParamArray[12];
      DampenerPeriodEnabled := ParamArray[13];
      DampenerQuantityEnabled := ParamArray[14];
      OverflowLevelEnabled := ParamArray[15];
    END;

    LOCAL PROCEDURE AssignToArray@3(VAR ParamArray@1009 : ARRAY [15] OF Boolean;Bool1@1008 : Boolean;Bool2@1007 : Boolean;Bool3@1006 : Boolean;Bool4@1005 : Boolean;Bool5@1004 : Boolean;Bool6@1003 : Boolean;Bool7@1002 : Boolean;Bool8@1001 : Boolean;Bool9@1000 : Boolean;Bool10@1010 : Boolean;Bool11@1011 : Boolean;Bool12@1012 : Boolean;Bool13@1013 : Boolean;Bool14@1014 : Boolean;Bool15@1015 : Boolean);
    BEGIN
      ParamArray[1] := Bool1;
      ParamArray[2] := Bool2;
      ParamArray[3] := Bool3;
      ParamArray[4] := Bool4;
      ParamArray[5] := Bool5;
      ParamArray[6] := Bool6;
      ParamArray[7] := Bool7;
      ParamArray[8] := Bool8;
      ParamArray[9] := Bool9;
      ParamArray[10] := Bool10;
      ParamArray[11] := Bool11;
      ParamArray[12] := Bool12;
      ParamArray[13] := Bool13;
      ParamArray[14] := Bool14;
      ParamArray[15] := Bool15;
    END;

    [External]
    PROCEDURE AdjustInvalidSettings@5(VAR SKU@1000 : Record "Stockkeeping Unit");
    VAR
      TimebucketEnabled@1010 : Boolean;
      SafetyLeadTimeEnabled@1009 : Boolean;
      SafetyStockQtyEnabled@1008 : Boolean;
      ReorderPointEnabled@1007 : Boolean;
      ReorderQuantityEnabled@1006 : Boolean;
      MaximumInventoryEnabled@1005 : Boolean;
      MinimumOrderQtyEnabled@1004 : Boolean;
      MaximumOrderQtyEnabled@1003 : Boolean;
      OrderMultipleEnabled@1002 : Boolean;
      IncludeInventoryEnabled@1001 : Boolean;
      ReschedulingPeriodEnabled@1011 : Boolean;
      LotAccumulationPeriodEnabled@1012 : Boolean;
      DampenerPeriodEnabled@1013 : Boolean;
      DampenerQuantityEnabled@1014 : Boolean;
      OverflowLevelEnabled@1015 : Boolean;
    BEGIN
      SetUpPlanningControls(SKU."Reordering Policy",SKU."Include Inventory",
        TimebucketEnabled,SafetyLeadTimeEnabled,SafetyStockQtyEnabled,
        ReorderPointEnabled,ReorderQuantityEnabled,MaximumInventoryEnabled,
        MinimumOrderQtyEnabled,MaximumOrderQtyEnabled,OrderMultipleEnabled,IncludeInventoryEnabled,
        ReschedulingPeriodEnabled,LotAccumulationPeriodEnabled,
        DampenerPeriodEnabled,DampenerQuantityEnabled,OverflowLevelEnabled);

      if not TimebucketEnabled then
        EVALUATE(SKU."Time Bucket",'<0D>');
      if not SafetyLeadTimeEnabled then
        EVALUATE(SKU."Safety Lead Time",'<0D>');
      if not SafetyStockQtyEnabled then
        SKU."Safety Stock Quantity" := 0;
      if not ReorderPointEnabled then
        SKU."Reorder Point" := 0;
      if not ReorderQuantityEnabled then
        SKU."Reorder Quantity" := 0;
      if not MaximumInventoryEnabled then
        SKU."Maximum Inventory" := 0;
      if not MinimumOrderQtyEnabled then
        SKU."Minimum Order Quantity" := 0;
      if not MaximumOrderQtyEnabled then
        SKU."Maximum Order Quantity" := 0;
      if not OrderMultipleEnabled then
        SKU."Order Multiple" := 0;
      if not ReschedulingPeriodEnabled then
        EVALUATE(SKU."Rescheduling Period",'<0D>');
      if not LotAccumulationPeriodEnabled then
        EVALUATE(SKU."Lot Accumulation Period",'<0D>');
      if not DampenerPeriodEnabled then
        EVALUATE(SKU."Dampener Period",'<0D>');
      if not DampenerQuantityEnabled then
        SKU."Dampener Quantity" := 0;
      if not OverflowLevelEnabled then
        SKU."Overflow Level" := 0;

      AdjustInvalidValues(SKU,ReorderPointEnabled);
    END;

    LOCAL PROCEDURE AdjustInvalidValues@7(VAR SKU@1000 : Record "Stockkeeping Unit";ReorderPointEnabled@1001 : Boolean);
    BEGIN
      if SKU."Reorder Point" < 0 then
        SKU."Reorder Point" := 0;

      if SKU."Safety Stock Quantity" < 0 then
        SKU."Safety Stock Quantity" := 0;

      if (SKU."Reorder Point" < SKU."Safety Stock Quantity") and
         ReorderPointEnabled
      then
        SKU."Reorder Point" := SKU."Safety Stock Quantity";

      if SKU."Maximum Order Quantity" < 0 then
        SKU."Maximum Order Quantity" := 0;

      if SKU."Minimum Order Quantity" < 0 then
        SKU."Minimum Order Quantity" := 0;

      if SKU."Maximum Order Quantity" <> 0 then
        if SKU."Maximum Order Quantity" < SKU."Minimum Order Quantity" then
          SKU."Maximum Order Quantity" := SKU."Minimum Order Quantity";

      if (SKU."Maximum Inventory" < SKU."Safety Stock Quantity") or
         (SKU."Maximum Inventory" < SKU."Reorder Point")
      then
        SKU."Maximum Inventory" := 0;

      if SKU."Overflow Level" <> 0 then
        case SKU."Reordering Policy" of
          SKU."Reordering Policy"::"Fixed Reorder Qty.":
            if SKU."Overflow Level" < (SKU."Reorder Point" + SKU."Reorder Quantity") then
              SKU."Overflow Level" := SKU."Reorder Point" + SKU."Reorder Quantity";
          SKU."Reordering Policy"::"Maximum Qty.":
            if SKU."Overflow Level" < SKU."Maximum Inventory" then
              SKU."Overflow Level" := SKU."Maximum Inventory";
        end;
    END;

    [External]
    PROCEDURE CalcDampenerDays@9(SKU@1000 : Record "Stockkeeping Unit") DampenerDays : Integer;
    BEGIN
      if FORMAT(SKU."Dampener Period") = '' then begin
        GetMfgSetUp;
        DampenerDays := CALCDATE(MfgSetup."Default Dampener Period") - TODAY;
      end else
        DampenerDays := CALCDATE(SKU."Dampener Period") - TODAY;

      // The Dampener Period must not be less than the Lot Accumulation Period unless
      // the Reordering Policy is order
      if SKU."Reordering Policy" <> SKU."Reordering Policy"::Order then
        if DampenerDays > CALCDATE(SKU."Lot Accumulation Period") - TODAY then
          DampenerDays := CALCDATE(SKU."Lot Accumulation Period") - TODAY;
    END;

    [External]
    PROCEDURE CalcDampenerQty@10(SKU@1000 : Record "Stockkeeping Unit") DampenerQty : Decimal;
    BEGIN
      if SKU."Reordering Policy" <> SKU."Reordering Policy"::Order then
        if SKU."Dampener Quantity" = 0 then begin
          GetMfgSetUp;
          DampenerQty := SKU."Lot Size" * MfgSetup."Default Dampener %" / 100;
        end else
          DampenerQty := SKU."Dampener Quantity"
      else
        DampenerQty := 0;
    END;

    [External]
    PROCEDURE CalcOverflowLevel@11(SKU@1000 : Record "Stockkeeping Unit") WarningLevel : Decimal;
    BEGIN
      if SKU."Overflow Level" <> 0 then
        WarningLevel := SKU."Overflow Level"
      else begin
        GetMfgSetUp;
        if MfgSetup."Blank Overflow Level" = MfgSetup."Blank Overflow Level"::"Allow Default Calculation" then begin
          case SKU."Reordering Policy" of
            SKU."Reordering Policy"::"Maximum Qty.":
              WarningLevel := SKU."Maximum Inventory" + SKU."Minimum Order Quantity";
            SKU."Reordering Policy"::"Fixed Reorder Qty.":
              begin
                if SKU."Minimum Order Quantity" > SKU."Reorder Quantity" then
                  WarningLevel := SKU."Minimum Order Quantity"
                else
                  WarningLevel := SKU."Reorder Quantity";
                WarningLevel += SKU."Reorder Point";
              end
            else
              WarningLevel := 0;
          end;
          if SKU."Order Multiple" > 0 then
            WarningLevel := ROUND(WarningLevel,SKU."Order Multiple",'>');
        end else
          WarningLevel := 0;
      end;
    END;

    BEGIN
    END.
  }
}

