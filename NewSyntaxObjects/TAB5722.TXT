OBJECT Table 5722 Item Category
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               UpdatePresentationOrderAfterTheTrigger;
               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               if "Has Children" then
                 ERROR(DeleteWithChildrenErr);
               UpdateDeletedCategoryItems;
               DeleteAssignedAttributes;

               ProductGroup.SETRANGE("Item Category Code",Code);
               ProductGroup.DELETEALL;
             END;

    OnRename=BEGIN
               UpdatePresentationOrderAfterTheTrigger;
               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    CaptionML=ENU=Item Category;
    LookupPageID="Item Categories";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Parent Category     ;Code20        ;TableRelation="Item Category";
                                                   OnValidate=VAR
                                                                ItemCategory@1000 : Record "Item Category";
                                                                ItemAttributeManagement@1002 : Codeunit "Item Attribute Management";
                                                                ParentCategory@1001 : Code[20];
                                                              BEGIN
                                                                ParentCategory := "Parent Category";
                                                                while ItemCategory.GET(ParentCategory) do begin
                                                                  if ItemCategory.Code = Code then
                                                                    ERROR(CyclicInheritanceErr);
                                                                  ParentCategory := ItemCategory."Parent Category";
                                                                end;
                                                                ItemAttributeManagement.UpdateCategoryAttributesAfterChangingParentCategory(Code,"Parent Category",xRec."Parent Category");
                                                              END;

                                                   CaptionML=ENU=Parent Category }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 9   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation;
                                                   MinValue=0 }
    { 10  ;   ;Presentation Order  ;Integer       ;CaptionML=ENU=Presentation Order }
    { 11  ;   ;Has Children        ;Boolean       ;CaptionML=ENU=Has Children }
    { 12  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=false }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;"Parent Category"                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProductGroup@1000 : Record "Product Group";
      CyclicInheritanceErr@1001 : TextConst 'ENU=An item category cannot be a parent of itself or any of its children.';
      ItemCategoryManagement@1002 : Codeunit "Item Category Management";
      DeleteWithChildrenErr@1003 : TextConst 'ENU=You cannot delete this item category because it has child item categories.';
      DeleteItemInheritedAttributesQst@1004 : TextConst '@@@=%1 - item category code;ENU="One or more items belong to item category ''''%1''''.\\Do you want to delete the inherited item attributes for the items in question? "';

    [External]
    PROCEDURE HasChildren@1() : Boolean;
    VAR
      ItemCategory@1000 : Record "Item Category";
    BEGIN
      ItemCategory.SETRANGE("Parent Category",Code);
      exit(not ItemCategory.ISEMPTY)
    END;

    LOCAL PROCEDURE UpdatePresentationOrderAfterTheTrigger@2();
    BEGIN
      if BINDSUBSCRIPTION(ItemCategoryManagement) then;
    END;

    [External]
    PROCEDURE GetStyleText@3() : Text;
    BEGIN
      if Indentation = 0 then
        exit('Strong');

      if "Has Children" then
        exit('Strong');

      exit('');
    END;

    LOCAL PROCEDURE UpdateDeletedCategoryItems@6();
    VAR
      CategoryItem@1001 : Record Item;
      TempCategoryItemAttributeValue@1000 : TEMPORARY Record "Item Attribute Value";
      ItemAttributeManagement@1003 : Codeunit "Item Attribute Management";
      DeleteItemInheritedAttributes@1002 : Boolean;
    BEGIN
      CategoryItem.SETRANGE("Item Category Code",Code);
      if CategoryItem.ISEMPTY then
        exit;
      DeleteItemInheritedAttributes := CONFIRM(STRSUBSTNO(DeleteItemInheritedAttributesQst,Code));
      if DeleteItemInheritedAttributes then
        TempCategoryItemAttributeValue.LoadCategoryAttributesFactBoxData(Code);
      if CategoryItem.FIND('-') then
        repeat
          CategoryItem.VALIDATE("Item Category Code",'');
          CategoryItem.MODIFY;
          if DeleteItemInheritedAttributes then
            ItemAttributeManagement.DeleteItemAttributeValueMapping(CategoryItem,TempCategoryItemAttributeValue);
        until CategoryItem.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteAssignedAttributes@4();
    VAR
      ItemAttributeValueMapping@1000 : Record "Item Attribute Value Mapping";
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::"Item Category");
      ItemAttributeValueMapping.SETRANGE("No.",Code);
      ItemAttributeValueMapping.DELETEALL;
    END;

    BEGIN
    END.
  }
}

