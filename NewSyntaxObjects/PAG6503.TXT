OBJECT Page 6503 Avail. - Item Tracking Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rm;
    Editable=false;
    CaptionML=ENU=Avail. - Item Tracking Lines;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Reservation Entry";
    DataCaptionExpr=CaptionText;
    DataCaptionFields="Lot No.","Serial No.";
    PageType=List;
    OnInit=BEGIN
             FunctionButton2Visible := true;
             FunctionButton1Visible := true;
           END;

    OnOpenPage=BEGIN
                 FunctionButton1Visible := EnableReservations;
                 FunctionButton2Visible := not EnableReservations;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;ActionGroup;
                      Name=FunctionButton2;
                      CaptionML=ENU=F&unctions;
                      Visible=FunctionButton2Visible;
                      Image=Action }
      { 21      ;2   ;Action    ;
                      Name=&Show Document;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Show Document;
                      ToolTipML=ENU=Open the document that the information on the line comes from.;
                      ApplicationArea=#ItemTracking;
                      Image=View;
                      OnAction=BEGIN
                                 ReservMgt.LookupDocument("Source Type","Source Subtype","Source ID",
                                   "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      Name=FunctionButton1;
                      CaptionML=ENU=F&unctions;
                      Visible=FunctionButton1Visible;
                      Image=Action }
      { 35      ;2   ;Action    ;
                      Name=&Cancel Reservation;
                      AccessByPermission=TableData Item=R;
                      CaptionML=ENU=&Cancel Reservation;
                      ToolTipML=ENU=Cancel the reservation that exists for the document line that you opened this window for.;
                      ApplicationArea=#ItemTracking;
                      Image=Cancel;
                      OnAction=BEGIN
                                 if not EnableReservations then
                                   exit;
                                 if not CONFIRM(Text001,false) then
                                   exit;
                                 ReservEngineMgt.CancelReservation(Rec);
                                 UpdateReservFrom;
                               END;
                                }
      { 36      ;2   ;Action    ;
                      Name=Action36;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Show Document;
                      ToolTipML=ENU=Open the document that the information on the line comes from.;
                      ApplicationArea=#ItemTracking;
                      Image=View;
                      OnAction=BEGIN
                                 ReservMgt.LookupDocument("Source Type","Source Subtype","Source ID",
                                   "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 26  ;2   ;Field     ;
                Name=Reservation Status;
                ToolTipML=ENU=Specifies the status of the reservation.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Reservation Status";
                Visible=FALSE;
                ImplicitType=Option }

    { 2   ;2   ;Field     ;
                Name=Document Type;
                CaptionML=ENU=Document Type;
                ToolTipML=ENU=Specifies the type of document.;
                ApplicationArea=#ItemTracking;
                SourceExpr=TextCaption;
                ImplicitType=Text255 }

    { 28  ;2   ;Field     ;
                Name=Source Type;
                ToolTipML=ENU=Specifies for which source type the reservation entry is related to.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Source Type";
                Visible=FALSE;
                ImplicitType=Integer }

    { 4   ;2   ;Field     ;
                Name=Source ID;
                ToolTipML=ENU=Specifies which source ID the reservation entry is related to.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Source ID";
                ImplicitType=Code20 }

    { 6   ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the Location of the items that have been reserved in the entry.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Location Code";
                ImplicitType=Code10 }

    { 30  ;2   ;Field     ;
                Name=Serial No.;
                ToolTipML=ENU=Specifies the serial number of the item that is being handled on the document line.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Serial No.";
                ImplicitType=Code20 }

    { 32  ;2   ;Field     ;
                Name=Lot No.;
                ToolTipML=ENU=Specifies the lot number of the item that is being handled with the associated document line.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Lot No.";
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Expected Receipt Date;
                ToolTipML=ENU=Specifies the date on which the reserved items are expected to enter inventory.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Expected Receipt Date";
                ImplicitType=Date }

    { 10  ;2   ;Field     ;
                Name=Quantity (Base);
                ToolTipML=ENU=Specifies the quantity of the item that has been reserved in the entry.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Quantity (Base)";
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=Reserved Qty. (Base);
                CaptionML=ENU=Reserved Qty. (Base);
                ToolTipML=ENU=Specifies the quantity that has been reserved for the item.;
                ApplicationArea=#ItemTracking;
                SourceExpr=ReservedQtyBase;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Name=QtyToReserve;
                CaptionML=ENU=Available Quantity;
                ToolTipML=ENU=Specifies the quantity of the item that is available for reservation.;
                ApplicationArea=#ItemTracking;
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=Current Reserved Quantity;
                CaptionML=ENU=Current Reserved Quantity;
                ToolTipML=ENU=Specifies the quantity of the item that is reserved for the document type.;
                ApplicationArea=#ItemTracking;
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                ApplicationArea=#ItemTracking;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                ApplicationArea=#ItemTracking;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Cancel reservation?';
      ReservEntry@1003 : Record "Reservation Entry";
      SalesLine@1006 : Record "Sales Line";
      PurchLine@1007 : Record "Purchase Line";
      ItemJnlLine@1008 : Record "Item Journal Line";
      ReqLine@1009 : Record "Requisition Line";
      ProdOrderLine@1010 : Record "Prod. Order Line";
      ProdOrderComp@1011 : Record "Prod. Order Component";
      PlanningComponent@1012 : Record "Planning Component";
      TransLine@1013 : Record "Transfer Line";
      ServiceInvLine@1014 : Record "Service Line";
      JobPlanningLine@1000 : Record "Job Planning Line";
      AssemblyHeader@1027 : Record "Assembly Header";
      AssemblyLine@1036 : Record "Assembly Line";
      AssemblyLineReserve@1035 : Codeunit "Assembly Line-Reserve";
      AssemblyHeaderReserve@1004 : Codeunit "Assembly Header-Reserve";
      ReservMgt@1015 : Codeunit "Reservation Management";
      ReservEngineMgt@1016 : Codeunit "Reservation Engine Mgt.";
      ReserveSalesLine@1017 : Codeunit "Sales Line-Reserve";
      ReserveReqLine@1018 : Codeunit "Req. Line-Reserve";
      ReservePurchLine@1019 : Codeunit "Purch. Line-Reserve";
      ReserveItemJnlLine@1020 : Codeunit "Item Jnl. Line-Reserve";
      ReserveProdOrderLine@1021 : Codeunit "Prod. Order Line-Reserve";
      ReserveProdOrderComp@1022 : Codeunit "Prod. Order Comp.-Reserve";
      ReservePlanningComponent@1023 : Codeunit "Plng. Component-Reserve";
      ReserveTransLine@1024 : Codeunit "Transfer Line-Reserve";
      ReserveServiceInvLine@1025 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1002 : Codeunit "Job Planning Line-Reserve";
      QtyToReserve@1026 : Decimal;
      CaptionText@1029 : Text[80];
      EnableReservations@1030 : Boolean;
      FunctionButton1Visible@19004938 : Boolean INDATASET;
      FunctionButton2Visible@19075899 : Boolean INDATASET;

    [External]
    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record "Sales Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
    END;

    [External]
    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record "Requisition Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    [External]
    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record "Purchase Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    [External]
    PROCEDURE SetItemJnlLine@21(VAR CurrentItemJnlLine@1000 : Record "Item Journal Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveItemJnlLine.FilterReservFor(ReservEntry,ItemJnlLine);
      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    END;

    [External]
    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record "Prod. Order Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    [External]
    PROCEDURE SetProdOrderComponent@1(VAR CurrentProdOrderComp@1000 : Record "Prod. Order Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    [External]
    PROCEDURE SetPlanningComponent@15(VAR CurrentPlanningComponent@1000 : Record "Planning Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    [External]
    PROCEDURE SetTransferLine@16(VAR CurrentTransLine@1000 : Record "Transfer Line";CurrentReservEntry@1001 : Record "Reservation Entry";Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    [External]
    PROCEDURE SetServiceInvLine@8(VAR CurrentServiceInvLine@1000 : Record "Service Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
    END;

    [External]
    PROCEDURE SetJobPlanningLine@9(VAR CurrentJobPlanningLine@1000 : Record "Job Planning Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    END;

    [External]
    PROCEDURE SetItemTrackingLine@3(LookupType@1000 : Integer;LookupSubtype@1002 : Integer;CurrentReservEntry@1001 : Record "Reservation Entry";SearchForSupply@1004 : Boolean;AvailabilityDate@1003 : Date);
    BEGIN
      ReservMgt.SetMatchFilter(CurrentReservEntry,Rec,SearchForSupply,AvailabilityDate);
      SETRANGE("Source Type",LookupType);
      SETRANGE("Source Subtype",LookupSubtype);
      EnableReservations := true;
    END;

    LOCAL PROCEDURE UpdateReservFrom@17();
    BEGIN
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          begin
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          end;
        DATABASE::"Requisition Line":
          begin
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          end;
        DATABASE::"Purchase Line":
          begin
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          end;
        DATABASE::"Item Journal Line":
          begin
            ItemJnlLine.FIND;
            SetItemJnlLine(ItemJnlLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Line":
          begin
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          end;
        DATABASE::"Planning Component":
          begin
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          end;
        DATABASE::"Transfer Line":
          begin
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          end;
        DATABASE::"Service Line":
          begin
            ServiceInvLine.FIND;
            SetServiceInvLine(ServiceInvLine,ReservEntry);
          end;
        DATABASE::"Job Planning Line":
          begin
            JobPlanningLine.FIND;
            SetJobPlanningLine(JobPlanningLine,ReservEntry);
          end;
      end;
    END;

    LOCAL PROCEDURE ReservedThisLine@2() : Decimal;
    BEGIN
      // This procedure is intentionally left blank.
    END;

    LOCAL PROCEDURE ReservedQtyBase@5() : Decimal;
    BEGIN
      // This procedure is intentionally left blank.
    END;

    [External]
    PROCEDURE SetAssemblyLine@4(VAR CurrentAsmLine@1002 : Record "Assembly Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentAsmLine.TESTFIELD(Type,CurrentAsmLine.Type::Item);
      AssemblyLine := CurrentAsmLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyLineReserve.FilterReservFor(ReservEntry,AssemblyLine);
      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    END;

    [External]
    PROCEDURE SetAssemblyHeader@7(VAR CurrentAsmHeader@1000 : Record "Assembly Header";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      AssemblyHeader := CurrentAsmHeader;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,AssemblyHeader);
      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    END;

    BEGIN
    END.
  }
}

