OBJECT Report 7131 Import Item Budget from Excel
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Item Budget from Excel;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if ToItemBudgetName = '' then
                    ERROR(Text000);

                  if not ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) then begin
                    if not CONFIRM(Text001,false,ToItemBudgetName) then
                      CurrReport.BREAK;
                    ItemBudgetName."Analysis Area" := AnalysisArea;
                    ItemBudgetName.Name := ToItemBudgetName;
                    ItemBudgetName.INSERT;
                  end else begin
                    if ItemBudgetName.Blocked then
                      ERROR(Text002,ItemBudgetEntry.FIELDCAPTION("Budget Name"),ToItemBudgetName);
                    if not CONFIRM(
                         Text003,false,
                         LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text010))),
                         ToItemBudgetName)
                    then
                      CurrReport.BREAK;
                  end;

                  ExcelBuf.LOCKTABLE;
                  ItemBudgetBuf.LOCKTABLE;

                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;

                  AnalyseData;
                END;

    OnPostReport=BEGIN
                   ExcelBuf.DELETEALL;
                   ItemBudgetBuf.DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;ItemBudgetBuf       ;
               DataItemTable="Item Budget Buffer";
               DataItemTableView=SORTING("Item No.","Source Type","Source No.","Location Code","Global Dimension 1 Code","Global Dimension 2 Code","Budget Dimension 1 Code","Budget Dimension 2 Code","Budget Dimension 3 Code",Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;

                               if ImportOption = ImportOption::"Replace entries" then begin
                                 ItemBudgetEntry.SETRANGE("Analysis Area",AnalysisArea);
                                 ItemBudgetEntry.SETRANGE("Budget Name",ToItemBudgetName);
                                 ItemBudgetEntry.DELETEALL(true);
                               end;

                               ItemBudgetEntry.RESET;
                               if ItemBudgetEntry.FINDLAST then
                                 EntryNo := ItemBudgetEntry."Entry No." + 1
                               else
                                 EntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  ItemBudgetEntry.INIT;
                                  ItemBudgetEntry.VALIDATE("Entry No.",EntryNo);
                                  ItemBudgetEntry.VALIDATE("Analysis Area",AnalysisArea);
                                  ItemBudgetEntry.VALIDATE("Budget Name",ToItemBudgetName);
                                  ItemBudgetEntry.VALIDATE("Item No.","Item No.");
                                  ItemBudgetEntry.VALIDATE("Location Code","Location Code");
                                  ItemBudgetEntry.VALIDATE(Date,Date);
                                  ItemBudgetEntry.VALIDATE(Description,Description);
                                  ItemBudgetEntry.VALIDATE("Source Type","Source Type");
                                  ItemBudgetEntry.VALIDATE("Source No.","Source No.");
                                  ItemBudgetEntry.VALIDATE("Sales Amount","Sales Amount");
                                  ItemBudgetEntry.VALIDATE(Quantity,Quantity);
                                  ItemBudgetEntry.VALIDATE("Cost Amount","Cost Amount");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 1 Code","Global Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 2 Code","Global Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 1 Code","Budget Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 2 Code","Budget Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 3 Code","Budget Dimension 3 Code");
                                  ItemBudgetEntry.VALIDATE("User ID",USERID);
                                  ItemBudgetEntry.INSERT(true);
                                  EntryNo := EntryNo + 1;
                                END;

               OnPostDataItem=BEGIN
                                if RecNo > 0 then
                                  MESSAGE(Text004,ItemBudgetEntry.TABLECAPTION,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               PurchValueTypeVisible := true;
               SalesValueTypeVisible := true;
             END;

      OnOpenPage=VAR
                   ItemBudgetName@1000 : Record "Item Budget Name";
                 BEGIN
                   Description := Text005 + FORMAT(WORKDATE);
                   if not ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) then
                     ToItemBudgetName := '';

                   ValueType := ValueTypeHidden;
                   SalesValueTypeVisible := AnalysisArea = AnalysisArea::Sales;
                   PurchValueTypeVisible := AnalysisArea = AnalysisArea::Purchase;
                 END;

      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit "File Management";
                       BEGIN
                         if CloseAction = ACTION::OK then begin
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelExtensionTok);
                           if ServerFileName = '' then
                             exit(false);

                           SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                           if SheetName = '' then
                             exit(false);
                         end;
                       END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 9   ;2   ;Field     ;
                  Name=Budget Name;
                  CaptionML=ENU=Budget Name;
                  ToolTipML=ENU=Specifies the name of the budget.;
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ToItemBudgetName;
                  OnLookup=VAR
                             ItemBudgetName@1002 : Record "Item Budget Name";
                           BEGIN
                             ItemBudgetName.FILTERGROUP := 2;
                             ItemBudgetName.SETRANGE("Analysis Area",AnalysisArea);
                             ItemBudgetName.FILTERGROUP := 0;
                             if PAGE.RUNMODAL(PAGE::"Item Budget Names",ItemBudgetName) = ACTION::LookupOK then begin
                               Text := ItemBudgetName.Name;
                               exit(true);
                             end;
                           END;
                            }

      { 7   ;2   ;Field     ;
                  Name=Option;
                  CaptionML=ENU=Option;
                  ToolTipML=ENU=Specifies whether you want the program to add the budget entries from Excel to budget entries currently in the program, or you want the program to replace entries in Microsoft Dynamics NAV with the budget entries from Excel.;
                  OptionCaptionML=ENU=Replace entries,Add entries;
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ImportOption }

      { 5   ;2   ;Field     ;
                  Name=Description;
                  CaptionML=ENU=Description;
                  ToolTipML=ENU=Specifies the description of what you are importing from Excel.;
                  ApplicationArea=#ItemBudget;
                  SourceExpr=Description }

      { 15  ;2   ;Field     ;
                  Name=PurchValueType;
                  CaptionML=ENU=Import Value as;
                  ToolTipML=ENU=Specifies the type of value that the imported Excel budget contains.;
                  OptionCaptionML=ENU=,Cost Amount,Quantity;
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ValueType;
                  Visible=PurchValueTypeVisible }

      { 13  ;2   ;Field     ;
                  Name=SalesValueType;
                  CaptionML=ENU=Import Value as;
                  ToolTipML=ENU=Specifies the type of value that the imported Excel budget contains.;
                  OptionCaptionML=ENU=Sales Amount,COGS Amount,Quantity;
                  ApplicationArea=#ItemBudget;
                  SourceExpr=ValueType;
                  Visible=SalesValueTypeVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify a budget name to import to.';
      Text001@1001 : TextConst 'ENU=Do you want to create Item Budget Name %1?';
      Text002@1002 : TextConst 'ENU=%1 %2 is blocked. You cannot import entries.';
      Text003@1003 : TextConst 'ENU=Are you sure you want to %1 for Budget Name %2?';
      Text004@1004 : TextConst 'ENU=%1 table has been successfully updated with %2 entries.';
      Text005@1005 : TextConst 'ENU="Imported from Excel "';
      Text006@1006 : TextConst 'ENU=Import Excel File';
      Text007@1023 : TextConst 'ENU=Table Data';
      Text008@1022 : TextConst 'ENU=Show as Lines';
      Text009@1009 : TextConst 'ENU=Show as Columns';
      Text010@1010 : TextConst 'ENU=Replace Entries,Add Entries';
      Text011@1011 : TextConst 'ENU=The text %1 can only be specified once in the Excel worksheet.';
      Text012@1017 : TextConst 'ENU=The filters specified by worksheet must be placed in the lines before the table.';
      Text013@1015 : TextConst 'ENU=Date Filter';
      ExcelBuf@1027 : Record "Excel Buffer";
      GLSetup@1034 : Record "General Ledger Setup";
      ItemBudgetName@1053 : Record "Item Budget Name";
      ItemBudgetEntry@1013 : Record "Item Budget Entry";
      ItemBudgetManagement@1024 : Codeunit "Item Budget Management";
      Window@1040 : Dialog;
      ServerFileName@1028 : Text;
      SheetName@1038 : Text[250];
      Description@1041 : Text[50];
      ToItemBudgetName@1039 : Code[10];
      RecNo@1016 : Integer;
      EntryNo@1012 : Integer;
      ImportOption@1054 : '"Replace entries","Add entries"';
      AnalysisArea@1048 : 'Sales,Purchase,Inventory';
      ValueType@1057 : '"Sales Amount","COGS / Cost Amount",Quantity';
      ValueTypeHidden@1026 : '"Sales Amount","COGS / Cost Amount",Quantity';
      GlSetupRead@1029 : Boolean;
      Text014@1014 : TextConst 'ENU=Customer Filter';
      Text015@1021 : TextConst 'ENU=Vendor Filter';
      Text016@1008 : TextConst 'ENU=Analyzing Data...\\';
      Text017@1007 : TextConst 'ENU=Item Filter';
      Text018@1018 : TextConst 'ENU=%1 is not a valid dimension value.';
      Text019@1020 : TextConst 'ENU=%1 is not a valid line definition.';
      Text020@1019 : TextConst 'ENU=%1 is not a valid column definition.';
      Text021@1025 : TextConst 'ENU=You must specify a dimension value in row %1, column %2.';
      SalesValueTypeVisible@19059405 : Boolean INDATASET;
      PurchValueTypeVisible@19069465 : Boolean INDATASET;
      ExcelExtensionTok@1030 : TextConst '@@@={Locked};ENU=.xlsx';

    LOCAL PROCEDURE AnalyseData@2();
    VAR
      DateFilter@1003 : Text[30];
      LineDimCode@1014 : Text[30];
      ColumnDimCode@1013 : Text[30];
      ItemFilter@1004 : Code[20];
      LocationFilter@1017 : Code[10];
      GlobalDim1Filter@1009 : Code[20];
      GlobalDim2Filter@1008 : Code[20];
      BudgetDim1Filter@1007 : Code[20];
      BudgetDim2Filter@1006 : Code[20];
      BudgetDim3Filter@1005 : Code[20];
      SourceNoFilter@1010 : Code[20];
      CurrLineDimValue@1000 : Code[20];
      CurrColumnDimValue@1001 : Code[20];
      TotalRecNo@1002 : Integer;
      HeaderRowNo@1011 : Integer;
      SourceTypeFilter@1012 : '" ",Customer,Vendor,Item';
      LineDimOption@1016 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';
      ColumnDimOption@1015 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';
    BEGIN
      Window.OPEN(Text016 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuf.COUNT;

      ItemBudgetBuf.DELETEALL;

      if ExcelBuf.FIND('-') then
        repeat
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          case true of
            STRPOS(ExcelBuf."Cell Value as Text",Text007) <> 0:
              begin
                if HeaderRowNo = 0 then
                  HeaderRowNo := ExcelBuf."Row No."
                else
                  ERROR(STRSUBSTNO(Text011,Text007));

                ConvertFiltersToValue(
                  DateFilter,
                  ItemFilter,
                  GlobalDim1Filter,
                  GlobalDim2Filter,
                  BudgetDim1Filter,
                  BudgetDim2Filter,
                  BudgetDim3Filter,
                  SourceNoFilter,
                  SourceTypeFilter);

                if ItemBudgetManagement.DimCodeNotAllowed(LineDimCode,ItemBudgetName) then
                  ERROR(Text019,LineDimCode);

                if ItemBudgetManagement.DimCodeNotAllowed(ColumnDimCode,ItemBudgetName) then
                  ERROR(Text020,ColumnDimCode);

                ItemBudgetManagement.SetLineAndColDim(
                  ItemBudgetName,
                  LineDimCode,
                  LineDimOption,
                  ColumnDimCode,
                  ColumnDimOption);
              end;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(1)) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  GlobalDim1Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(GlobalDim1Filter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(2)) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  GlobalDim2Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(GlobalDim2Filter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(1)) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  BudgetDim1Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim1Filter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(2)) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  BudgetDim2Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim2Filter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(3)) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  BudgetDim3Filter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(BudgetDim3Filter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text017) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  ItemFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(ItemFilter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text013) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  DateFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(DateFilter));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text014) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then begin
                  SourceTypeFilter := SourceTypeFilter::Customer;
                  SourceNoFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(SourceNoFilter));
                end;
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text015) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then begin
                  SourceTypeFilter := SourceTypeFilter::Vendor;
                  SourceNoFilter := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(SourceNoFilter));
                end;
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text008) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  LineDimCode := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(LineDimCode));
                ExcelBuf.SETRANGE("Row No.");
              end;
            STRPOS(ExcelBuf."Cell Value as Text",Text009) <> 0:
              begin
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                if ExcelBuf.NEXT <> 0 then
                  ColumnDimCode := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(ColumnDimCode));
                ExcelBuf.SETRANGE("Row No.");
              end;
            (ExcelBuf."Row No." > HeaderRowNo) and (HeaderRowNo <> 0):
              begin
                CurrLineDimValue := COPYSTR(ExcelBuf."Cell Value as Text",1,MAXSTRLEN(CurrLineDimValue));
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                while ExcelBuf.NEXT <> 0 do begin
                  CurrColumnDimValue := GetCurrColumnDimValue(ExcelBuf."Column No.",HeaderRowNo);
                  ExchangeFiltersWithDimValue(
                    CurrLineDimValue,
                    CurrColumnDimValue,
                    LineDimOption,
                    ColumnDimOption,
                    DateFilter,
                    ItemFilter,
                    LocationFilter,
                    GlobalDim1Filter,
                    GlobalDim2Filter,
                    BudgetDim1Filter,
                    BudgetDim2Filter,
                    BudgetDim3Filter,
                    SourceNoFilter,
                    SourceTypeFilter);

                  ItemBudgetBuf.INIT;
                  ItemBudgetBuf."Item No." := ItemFilter;
                  if SourceTypeFilter <> 0 then
                    ItemBudgetBuf."Source Type" := SourceTypeFilter
                  else
                    ItemBudgetBuf."Source Type" := LineDimOption;
                  ItemBudgetBuf."Source No." := SourceNoFilter;
                  ItemBudgetBuf."Location Code" := LocationFilter;
                  ItemBudgetBuf."Global Dimension 1 Code" := GlobalDim1Filter;
                  ItemBudgetBuf."Global Dimension 2 Code" := GlobalDim2Filter;
                  ItemBudgetBuf."Budget Dimension 1 Code" := BudgetDim1Filter;
                  ItemBudgetBuf."Budget Dimension 2 Code" := BudgetDim2Filter;
                  ItemBudgetBuf."Budget Dimension 3 Code" := BudgetDim3Filter;
                  EVALUATE(ItemBudgetBuf.Date,DateFilter);
                  case ValueType of
                    ValueType::"Sales Amount":
                      EVALUATE(ItemBudgetBuf."Sales Amount",ExcelBuf."Cell Value as Text");
                    ValueType::"COGS / Cost Amount":
                      EVALUATE(ItemBudgetBuf."Cost Amount",ExcelBuf."Cell Value as Text");
                    ValueType::Quantity:
                      EVALUATE(ItemBudgetBuf.Quantity,ExcelBuf."Cell Value as Text");
                  end;
                  ItemBudgetBuf.INSERT;
                end;
                ExcelBuf.SETRANGE("Row No.");
              end;
          end;
        until ExcelBuf.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExchangeFiltersWithDimValue@10(CurrLineDimValue@1000 : Code[20];CurrColumnDimValue@1001 : Code[20];LineDimOption@1003 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';ColumnDimOption@1002 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';VAR DateFilter@1012 : Text[30];VAR ItemFilter@1011 : Code[20];VAR LocationFilter@1013 : Code[10];VAR GlobalDim1Filter@1010 : Code[20];VAR GlobalDim2Filter@1009 : Code[20];VAR BudgetDim1Filter@1008 : Code[20];VAR BudgetDim2Filter@1007 : Code[20];VAR BudgetDim3Filter@1006 : Code[20];VAR SourceNoFilter@1005 : Code[20];VAR SourceTypeFilter@1004 : '" ",Customer,Vendor,Item');
    BEGIN
      case LineDimOption of
        LineDimOption::Item:
          ItemFilter := CurrLineDimValue;
        LineDimOption::Customer:
          begin
            SourceNoFilter := CurrLineDimValue;
            if SourceTypeFilter = SourceTypeFilter::" " then
              SourceTypeFilter := SourceTypeFilter::Customer;
          end;
        LineDimOption::Vendor:
          begin
            SourceNoFilter := CurrLineDimValue;
            if SourceTypeFilter = SourceTypeFilter::" " then
              SourceTypeFilter := SourceTypeFilter::Vendor;
          end;
        LineDimOption::Period:
          DateFilter := CurrLineDimValue;
        LineDimOption::Location:
          LocationFilter := COPYSTR(CurrLineDimValue,1,MAXSTRLEN(LocationFilter));
        LineDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrLineDimValue;
        LineDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrLineDimValue;
        else
          ERROR(Text018,CurrLineDimValue);
      end;

      case ColumnDimOption of
        ColumnDimOption::Item:
          ItemFilter := CurrColumnDimValue;
        ColumnDimOption::Customer:
          begin
            SourceNoFilter := CurrColumnDimValue;
            if SourceTypeFilter = SourceTypeFilter::" " then
              SourceTypeFilter := SourceTypeFilter::Customer;
          end;
        ColumnDimOption::Vendor:
          begin
            SourceNoFilter := CurrColumnDimValue;
            if SourceTypeFilter = SourceTypeFilter::" " then
              SourceTypeFilter := SourceTypeFilter::Vendor;
          end;
        ColumnDimOption::Period:
          DateFilter := CurrColumnDimValue;
        ColumnDimOption::Location:
          LocationFilter := COPYSTR(CurrColumnDimValue,1,MAXSTRLEN(LocationFilter));
        ColumnDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrColumnDimValue;
        else
          ERROR(Text018,CurrColumnDimValue);
      end;
    END;

    LOCAL PROCEDURE GetCurrColumnDimValue@7(ColNo@1000 : Integer;HeaderRowNo@1002 : Integer) : Code[20];
    VAR
      ExcelBuf2@1001 : Record "Excel Buffer";
    BEGIN
      if not ExcelBuf2.GET(HeaderRowNo,ColNo) then
        ERROR(Text021,HeaderRowNo,ColNo);
      exit(ExcelBuf2."Cell Value as Text");
    END;

    LOCAL PROCEDURE ConvertFiltersToValue@13(VAR DateFilter@1005 : Text[30];VAR ItemFilter@1006 : Code[20];VAR GlobalDim1Filter@1011 : Code[20];VAR GlobalDim2Filter@1010 : Code[20];VAR BudgetDim1Filter@1009 : Code[20];VAR BudgetDim2Filter@1008 : Code[20];VAR BudgetDim3Filter@1007 : Code[20];VAR SourceNoFilter@1012 : Code[20];SourceTypeFilter@1013 : '" ",Customer,Vendor,Item');
    VAR
      Item@1000 : Record Item;
      Calendar@1001 : Record Date;
      Cust@1002 : Record Customer;
      Vend@1003 : Record Vendor;
      DimValue@1004 : Record "Dimension Value";
      CurrDate@1014 : Date;
    BEGIN
      if ItemFilter <> '' then begin
        Item.SETFILTER("No.",ItemFilter);
        ItemFilter := Item.GETRANGEMIN("No.");
        Item.GET(ItemFilter);
      end;

      if DateFilter <> '' then begin
        Calendar.SETFILTER("Period Start",DateFilter);
        DateFilter := FORMAT(Calendar.GETRANGEMIN("Period Start"));
        EVALUATE(CurrDate,DateFilter);
        Calendar.GET(Calendar."Period Type"::Date,CurrDate);
      end;

      if SourceNoFilter <> '' then
        case SourceTypeFilter of
          SourceTypeFilter::Customer:
            begin
              Cust.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Cust.GETRANGEMIN("No.");
              Cust.GET(SourceNoFilter);
            end;
          SourceTypeFilter::Vendor:
            begin
              Vend.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Vend.GETRANGEMIN("No.");
              Vend.GET(SourceNoFilter);
            end;
        end;

      GetGLSetup;
      if GlobalDim1Filter <> '' then begin
        DimValue.SETFILTER(Code,GlobalDim1Filter);
        GlobalDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 1 Code",GlobalDim1Filter);
      end;

      if GlobalDim2Filter <> '' then begin
        DimValue.SETFILTER(Code,GlobalDim2Filter);
        GlobalDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 2 Code",GlobalDim2Filter);
      end;

      if BudgetDim1Filter <> '' then begin
        DimValue.SETFILTER(Code,BudgetDim1Filter);
        BudgetDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 1 Code",BudgetDim1Filter);
      end;

      if BudgetDim2Filter <> '' then begin
        DimValue.SETFILTER(Code,BudgetDim2Filter);
        BudgetDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 2 Code",BudgetDim2Filter);
      end;

      if BudgetDim3Filter <> '' then begin
        DimValue.SETFILTER(Code,BudgetDim3Filter);
        BudgetDim3Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 3 Code",BudgetDim3Filter);
      end;
    END;

    LOCAL PROCEDURE CheckFilterRowNo@12(HeaderRowNo@1000 : Integer);
    BEGIN
      if (HeaderRowNo <> 0) and (ExcelBuf."Row No." > HeaderRowNo) then
        ERROR(Text012);
    END;

    LOCAL PROCEDURE IsGlobalDimFilter@3(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record Dimension;
    BEGIN
      GetGLSetup;
      case DimNo of
        1:
          if Dim.GET(GLSetup."Global Dimension 1 Code") then;
        2:
          if Dim.GET(GLSetup."Global Dimension 2 Code") then;
      end;
      exit(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE IsBudgetDimFilter@11(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record Dimension;
    BEGIN
      case DimNo of
        1:
          if Dim.GET(ItemBudgetName."Budget Dimension 1 Code") then;
        2:
          if Dim.GET(ItemBudgetName."Budget Dimension 2 Code") then;
        3:
          if Dim.GET(ItemBudgetName."Budget Dimension 3 Code") then;
      end;
      exit(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE GetGLSetup@5();
    BEGIN
      if not GlSetupRead then
        GLSetup.GET;
      GlSetupRead := true;
    END;

    [External]
    PROCEDURE SetParameters@6(NewToItemBudgetName@1000 : Code[10];NewAnalysisArea@1001 : Integer;NewValueType@1002 : Integer);
    BEGIN
      ToItemBudgetName := NewToItemBudgetName;
      AnalysisArea := NewAnalysisArea;
      ValueTypeHidden := NewValueType;
    END;

    [External]
    PROCEDURE SetFileNameSilent@1(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

