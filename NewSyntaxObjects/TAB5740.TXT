OBJECT Table 5740 Transfer Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetInventorySetup;
               if "No." = '' then begin
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               end;
               InitRecord;
               VALIDATE("Shipment Date",WORKDATE);
             END;

    OnDelete=VAR
               TransLine@1000 : Record "Transfer Line";
               InvtCommentLine@1001 : Record "Inventory Comment Line";
               ReservMgt@1002 : Codeunit "Reservation Management";
             BEGIN
               TESTFIELD(Status,Status::Open);

               WhseRequest.SETRANGE("Source Type",DATABASE::"Transfer Line");
               WhseRequest.SETRANGE("Source No.","No.");
               if not WhseRequest.ISEMPTY then
                 WhseRequest.DELETEALL(true);

               ReservMgt.DeleteDocumentReservation(DATABASE::"Transfer Line",0,"No.",HideValidationDialog);

               TransLine.SETRANGE("Document No.","No.");
               TransLine.DELETEALL(true);

               InvtCommentLine.SETRANGE("Document Type",InvtCommentLine."Document Type"::"Transfer Order");
               InvtCommentLine.SETRANGE("No.","No.");
               InvtCommentLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Transfer Header;
    LookupPageID="Transfer Orders";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  GetInventorySetup;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                Location@1000 : Record Location;
                                                                Confirmed@1001 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                if ("Transfer-from Code" = "Transfer-to Code") and
                                                                   ("Transfer-from Code" <> '')
                                                                then
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"),
                                                                    TABLECAPTION,"No.");
                                                                if xRec."Transfer-from Code" <> "Transfer-from Code" then begin
                                                                  if HideValidationDialog or
                                                                     (xRec."Transfer-from Code" = '')
                                                                  then
                                                                    Confirmed := true
                                                                  else begin
                                                                    if xRec.HasTransferLines then
                                                                      Confirmed := CONFIRM(UpdateTransferFromCodeQst,false)
                                                                    else
                                                                      Confirmed := CONFIRM(Text002,false,FIELDCAPTION("Transfer-from Code"));
                                                                  end;
                                                                  if Confirmed then begin
                                                                    if Location.GET("Transfer-from Code") then begin
                                                                      "Transfer-from Name" := Location.Name;
                                                                      "Transfer-from Name 2" := Location."Name 2";
                                                                      "Transfer-from Address" := Location.Address;
                                                                      "Transfer-from Address 2" := Location."Address 2";
                                                                      "Transfer-from Post Code" := Location."Post Code";
                                                                      "Transfer-from City" := Location.City;
                                                                      "Transfer-from County" := Location.County;
                                                                      "Trsf.-from Country/Region Code" := Location."Country/Region Code";
                                                                      "Transfer-from Contact" := Location.Contact;
                                                                      if not "Direct Transfer" then begin
                                                                        "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                        TransferRoute.GetTransferRoute(
                                                                          "Transfer-from Code","Transfer-to Code","In-Transit Code",
                                                                          "Shipping Agent Code","Shipping Agent Service Code");
                                                                        TransferRoute.GetShippingTime(
                                                                          "Transfer-from Code","Transfer-to Code",
                                                                          "Shipping Agent Code","Shipping Agent Service Code",
                                                                          "Shipping Time");
                                                                        TransferRoute.CalcReceiptDate(
                                                                          "Shipment Date",
                                                                          "Receipt Date",
                                                                          "Shipping Time",
                                                                          "Outbound Whse. Handling Time",
                                                                          "Inbound Whse. Handling Time",
                                                                          "Transfer-from Code",
                                                                          "Transfer-to Code",
                                                                          "Shipping Agent Code",
                                                                          "Shipping Agent Service Code");
                                                                      end;
                                                                    end;
                                                                    TransLine.LOCKTABLE;
                                                                    TransLine.SETRANGE("Document No.","No.");
                                                                    if TransLine.FINDSET then
                                                                      TransLine.DELETEALL(true);
                                                                  end else
                                                                    "Transfer-from Code" := xRec."Transfer-from Code";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Transfer-from Code }
    { 3   ;   ;Transfer-from Name  ;Text50        ;CaptionML=ENU=Transfer-from Name }
    { 4   ;   ;Transfer-from Name 2;Text50        ;CaptionML=ENU=Transfer-from Name 2 }
    { 5   ;   ;Transfer-from Address;Text50       ;CaptionML=ENU=Transfer-from Address }
    { 6   ;   ;Transfer-from Address 2;Text50     ;CaptionML=ENU=Transfer-from Address 2 }
    { 7   ;   ;Transfer-from Post Code;Code20     ;TableRelation=IF ("Trsf.-from Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Trsf.-from Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Trsf.-from Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Transfer-from City","Transfer-from Post Code",
                                                                  "Transfer-from County","Trsf.-from Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Transfer-from Post Code }
    { 8   ;   ;Transfer-from City  ;Text30        ;TableRelation=IF ("Trsf.-from Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Trsf.-from Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Trsf.-from Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Transfer-from City","Transfer-from Post Code",
                                                                  "Transfer-from County","Trsf.-from Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Transfer-from City }
    { 9   ;   ;Transfer-from County;Text30        ;CaptionML=ENU=Transfer-from County }
    { 10  ;   ;Trsf.-from Country/Region Code;Code10;
                                                   TableRelation="Country/Region";
                                                   CaptionML=ENU=Trsf.-from Country/Region Code }
    { 11  ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                Location@1000 : Record Location;
                                                                Confirmed@1001 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                if ("Transfer-from Code" = "Transfer-to Code") and
                                                                   ("Transfer-to Code" <> '')
                                                                then
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"),
                                                                    TABLECAPTION,"No.");
                                                                if xRec."Transfer-to Code" <> "Transfer-to Code" then begin
                                                                  if HideValidationDialog or (xRec."Transfer-to Code" = '') then
                                                                    Confirmed := true
                                                                  else
                                                                    Confirmed := CONFIRM(Text002,false,FIELDCAPTION("Transfer-to Code"));
                                                                  if Confirmed then begin
                                                                    if Location.GET("Transfer-to Code") then begin
                                                                      "Transfer-to Name" := Location.Name;
                                                                      "Transfer-to Name 2" := Location."Name 2";
                                                                      "Transfer-to Address" := Location.Address;
                                                                      "Transfer-to Address 2" := Location."Address 2";
                                                                      "Transfer-to Post Code" := Location."Post Code";
                                                                      "Transfer-to City" := Location.City;
                                                                      "Transfer-to County" := Location.County;
                                                                      "Trsf.-to Country/Region Code" := Location."Country/Region Code";
                                                                      "Transfer-to Contact" := Location.Contact;
                                                                      if not "Direct Transfer" then begin
                                                                        "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                        TransferRoute.GetTransferRoute(
                                                                          "Transfer-from Code","Transfer-to Code","In-Transit Code",
                                                                          "Shipping Agent Code","Shipping Agent Service Code");
                                                                        TransferRoute.GetShippingTime(
                                                                          "Transfer-from Code","Transfer-to Code",
                                                                          "Shipping Agent Code","Shipping Agent Service Code",
                                                                          "Shipping Time");
                                                                        TransferRoute.CalcReceiptDate(
                                                                          "Shipment Date",
                                                                          "Receipt Date",
                                                                          "Shipping Time",
                                                                          "Outbound Whse. Handling Time",
                                                                          "Inbound Whse. Handling Time",
                                                                          "Transfer-from Code",
                                                                          "Transfer-to Code",
                                                                          "Shipping Agent Code",
                                                                          "Shipping Agent Service Code");
                                                                      end;
                                                                      TransLine.LOCKTABLE;
                                                                      TransLine.SETRANGE("Document No.","No.");
                                                                      if TransLine.FINDSET then;
                                                                    end;
                                                                    UpdateTransLines(Rec,FIELDNO("Transfer-to Code"));
                                                                  end else begin
                                                                    "Transfer-to Code" := xRec."Transfer-to Code";
                                                                    exit;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Transfer-to Code }
    { 12  ;   ;Transfer-to Name    ;Text50        ;CaptionML=ENU=Transfer-to Name }
    { 13  ;   ;Transfer-to Name 2  ;Text50        ;CaptionML=ENU=Transfer-to Name 2 }
    { 14  ;   ;Transfer-to Address ;Text50        ;CaptionML=ENU=Transfer-to Address }
    { 15  ;   ;Transfer-to Address 2;Text50       ;CaptionML=ENU=Transfer-to Address 2 }
    { 16  ;   ;Transfer-to Post Code;Code20       ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Transfer-to City","Transfer-to Post Code","Transfer-to County",
                                                                  "Trsf.-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Transfer-to Post Code }
    { 17  ;   ;Transfer-to City    ;Text30        ;TableRelation=IF ("Trsf.-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Trsf.-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Trsf.-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Transfer-to City","Transfer-to Post Code","Transfer-to County",
                                                                  "Trsf.-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Transfer-to City }
    { 18  ;   ;Transfer-to County  ;Text30        ;CaptionML=ENU=Transfer-to County }
    { 19  ;   ;Trsf.-to Country/Region Code;Code10;TableRelation="Country/Region";
                                                   CaptionML=ENU=Trsf.-to Country/Region Code }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");
                                                                UpdateTransLines(Rec,FIELDNO("Shipment Date"));
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 22  ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.CalcShipmentDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");
                                                                UpdateTransLines(Rec,FIELDNO("Receipt Date"));
                                                              END;

                                                   CaptionML=ENU=Receipt Date }
    { 23  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                UpdateTransLines(Rec,FIELDNO(Status));
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released;
                                                   OptionString=Open,Released;
                                                   Editable=false }
    { 24  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Inventory Comment Line" WHERE ("Document Type"=CONST("Transfer Order"),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 25  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 26  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 27  ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(true));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateTransLines(Rec,FIELDNO("In-Transit Code"));
                                                              END;

                                                   CaptionML=ENU=In-Transit Code }
    { 28  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 29  ;   ;Last Shipment No.   ;Code20        ;TableRelation="Transfer Shipment Header";
                                                   CaptionML=ENU=Last Shipment No.;
                                                   Editable=false }
    { 30  ;   ;Last Receipt No.    ;Code20        ;TableRelation="Transfer Receipt Header";
                                                   CaptionML=ENU=Last Receipt No.;
                                                   Editable=false }
    { 31  ;   ;Transfer-from Contact;Text50       ;CaptionML=ENU=Transfer-from Contact }
    { 32  ;   ;Transfer-to Contact ;Text50        ;CaptionML=ENU=Transfer-to Contact }
    { 33  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 34  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Shipping Agent Code" <> xRec."Shipping Agent Code" then
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                                UpdateTransLines(Rec,FIELDNO("Shipping Agent Code"));
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 35  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.GetShippingTime(
                                                                  "Transfer-from Code","Transfer-to Code",
                                                                  "Shipping Agent Code","Shipping Agent Service Code",
                                                                  "Shipping Time");
                                                                TransferRoute.CalcReceiptDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");

                                                                UpdateTransLines(Rec,FIELDNO("Shipping Agent Service Code"));
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 36  ;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");

                                                                UpdateTransLines(Rec,FIELDNO("Shipping Time"));
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Time }
    { 37  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 47  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 48  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 63  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 64  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 70  ;   ;Direct Transfer     ;Boolean       ;OnValidate=BEGIN
                                                                if "Direct Transfer" then
                                                                  VALIDATE("In-Transit Code",'');
                                                                if not "Direct Transfer" and HasTransferLines then
                                                                  VALIDATE("Direct Transfer",true);

                                                                MODIFY(true);
                                                                UpdateTransLines(Rec,FIELDNO("Direct Transfer"));
                                                              END;

                                                   CaptionML=ENU=Direct Transfer }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                if "Shipping Advice" <> xRec."Shipping Advice" then begin
                                                                  TestStatusOpen;
                                                                  WhseSourceHeader.TransHeaderVerifyChange(Rec,xRec);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Posting from Whse. Ref.;Integer    ;CaptionML=ENU=Posting from Whse. Ref. }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Transfer Line"."Completely Shipped" WHERE ("Document No."=FIELD("No."),
                                                                                                               "Shipment Date"=FIELD("Date Filter"),
                                                                                                               "Transfer-from Code"=FIELD("Location Filter"),
                                                                                                               "Derived From Line No."=CONST(0)));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=false }
    { 5753;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Transfer Line"."Completely Received" WHERE ("Document No."=FIELD("No."),
                                                                                                                "Receipt Date"=FIELD("Date Filter"),
                                                                                                                "Transfer-to Code"=FIELD("Location Filter"),
                                                                                                                "Derived From Line No."=CONST(0)));
                                                   CaptionML=ENU=Completely Received;
                                                   Editable=false }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");

                                                                UpdateTransLines(Rec,FIELDNO("Outbound Whse. Handling Time"));
                                                              END;

                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate(
                                                                  "Shipment Date",
                                                                  "Receipt Date",
                                                                  "Shipping Time",
                                                                  "Outbound Whse. Handling Time",
                                                                  "Inbound Whse. Handling Time",
                                                                  "Transfer-from Code",
                                                                  "Transfer-to Code",
                                                                  "Shipping Agent Code",
                                                                  "Shipping Agent Service Code");

                                                                UpdateTransLines(Rec,FIELDNO("Inbound Whse. Handling Time"));
                                                              END;

                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 8000;   ;Has Shipped Lines   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Transfer Line" WHERE ("Document No."=FIELD("No."),
                                                                                            "Quantity Shipped"=FILTER(>0)));
                                                   CaptionML=ENU=Has Shipped Lines }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.","Transfer-from Code","Transfer-to Code","Shipment Date",Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=%1 and %2 cannot be the same in %3 %4.';
      Text002@1002 : TextConst 'ENU=Do you want to change %1?';
      TransferOrderPostedMsg1@1003 : TextConst '@@@="%1 = transfer order number e.g. Transfer order 1003 was successfully posted and is now deleted ";ENU=Transfer order %1 was successfully posted and is now deleted.';
      TransferRoute@1004 : Record "Transfer Route";
      TransHeader@1005 : Record "Transfer Header";
      TransLine@1016 : Record "Transfer Line";
      PostCode@1006 : Record "Post Code";
      InvtSetup@1007 : Record "Inventory Setup";
      WhseRequest@1008 : Record "Warehouse Request";
      DimMgt@1009 : Codeunit DimensionManagement;
      NoSeriesMgt@1010 : Codeunit NoSeriesManagement;
      WhseSourceHeader@1011 : Codeunit "Whse. Validate Source Header";
      HideValidationDialog@1013 : Boolean;
      HasInventorySetup@1012 : Boolean;
      CalledFromWhse@1015 : Boolean;
      UpdateTransferFromCodeQst@1018 : TextConst 'ENU=If you change the transfer-from location, the transfer order lines will be deleted.\\Do you want to continue?';
      Text007@1014 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';

    [External]
    PROCEDURE InitRecord@10();
    BEGIN
      if "Posting Date" = 0D then
        VALIDATE("Posting Date",WORKDATE);
    END;

    [External]
    PROCEDURE AssistEdit@1(OldTransHeader@1000 : Record "Transfer Header") : Boolean;
    BEGIN
      with TransHeader do begin
        TransHeader := Rec;
        GetInventorySetup;
        TestNoSeries;
        if NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldTransHeader."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := TransHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      InvtSetup.TESTFIELD("Transfer Order Nos.");
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      exit(InvtSetup."Transfer Order Nos.");
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1002 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if TransferLinesExist then
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE GetInventorySetup@2();
    BEGIN
      if not HasInventorySetup then begin
        InvtSetup.GET;
        HasInventorySetup := true;
      end;
    END;

    LOCAL PROCEDURE UpdateTransLines@15(TransferHeader@1002 : Record "Transfer Header";FieldRef@1000 : Integer);
    VAR
      TransferLine@1001 : Record "Transfer Line";
    BEGIN
      TransferLine.SETRANGE("Document No.","No.");
      TransferLine.SETFILTER("Item No.",'<>%1','');
      if TransferLine.FINDSET then begin
        TransferLine.LOCKTABLE;
        repeat
          case FieldRef of
            FIELDNO("In-Transit Code"):
              TransferLine.VALIDATE("In-Transit Code",TransferHeader."In-Transit Code");
            FIELDNO("Transfer-from Code"):
              begin
                TransferLine.VALIDATE("Transfer-from Code",TransferHeader."Transfer-from Code");
                TransferLine.VALIDATE("Shipping Agent Code",TransferHeader."Shipping Agent Code");
                TransferLine.VALIDATE("Shipping Agent Service Code",TransferHeader."Shipping Agent Service Code");
                TransferLine.VALIDATE("Shipment Date",TransferHeader."Shipment Date");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
              end;
            FIELDNO("Transfer-to Code"):
              begin
                TransferLine.VALIDATE("Transfer-to Code",TransferHeader."Transfer-to Code");
                TransferLine.VALIDATE("Shipping Agent Code",TransferHeader."Shipping Agent Code");
                TransferLine.VALIDATE("Shipping Agent Service Code",TransferHeader."Shipping Agent Service Code");
                TransferLine.VALIDATE("Shipment Date",TransferHeader."Shipment Date");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
              end;
            FIELDNO("Shipping Agent Code"):
              begin
                TransferLine.VALIDATE("Shipping Agent Code",TransferHeader."Shipping Agent Code");
                TransferLine.BlockDynamicTracking(true);
                TransferLine.VALIDATE("Shipping Agent Service Code",TransferHeader."Shipping Agent Service Code");
                TransferLine.VALIDATE("Shipment Date",TransferHeader."Shipment Date");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
                TransferLine.BlockDynamicTracking(false);
                TransferLine.DateConflictCheck;
              end;
            FIELDNO("Shipping Agent Service Code"):
              begin
                TransferLine.BlockDynamicTracking(true);
                TransferLine.VALIDATE("Shipping Agent Service Code",TransferHeader."Shipping Agent Service Code");
                TransferLine.VALIDATE("Shipment Date",TransferHeader."Shipment Date");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
                TransferLine.BlockDynamicTracking(false);
                TransferLine.DateConflictCheck;
              end;
            FIELDNO("Shipment Date"):
              begin
                TransferLine.BlockDynamicTracking(true);
                TransferLine.VALIDATE("Shipment Date",TransferHeader."Shipment Date");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
                TransferLine.BlockDynamicTracking(false);
                TransferLine.DateConflictCheck;
              end;
            FIELDNO("Receipt Date"),FIELDNO("Shipping Time"):
              begin
                TransferLine.BlockDynamicTracking(true);
                TransferLine.VALIDATE("Shipping Time",TransferHeader."Shipping Time");
                TransferLine.VALIDATE("Receipt Date",TransferHeader."Receipt Date");
                TransferLine.BlockDynamicTracking(false);
                TransferLine.DateConflictCheck;
              end;
            FIELDNO("Outbound Whse. Handling Time"):
              TransferLine.VALIDATE("Outbound Whse. Handling Time",TransferHeader."Outbound Whse. Handling Time");
            FIELDNO("Inbound Whse. Handling Time"):
              TransferLine.VALIDATE("Inbound Whse. Handling Time",TransferHeader."Inbound Whse. Handling Time");
            FIELDNO(Status):
              TransferLine.VALIDATE(Status,TransferHeader.Status);
            FIELDNO("Direct Transfer"):
              begin
                TransferLine.VALIDATE("In-Transit Code",TransferHeader."In-Transit Code");
                TransferLine.VALIDATE("Item No.",TransferLine."Item No.");
              end;
          end;
          TransferLine.MODIFY(true);
        until TransferLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE ShouldDeleteOneTransferOrder@11(VAR TransLine2@1000 : Record "Transfer Line") : Boolean;
    BEGIN
      if TransLine2.FIND('-') then
        repeat
          if (TransLine2.Quantity <> TransLine2."Quantity Shipped") or
             (TransLine2.Quantity <> TransLine2."Quantity Received") or
             (TransLine2."Quantity (Base)" <> TransLine2."Qty. Shipped (Base)") or
             (TransLine2."Quantity (Base)" <> TransLine2."Qty. Received (Base)") or
             (TransLine2."Quantity Shipped" <> TransLine2."Quantity Received") or
             (TransLine2."Qty. Shipped (Base)" <> TransLine2."Qty. Received (Base)")
          then
            exit(false);
        until TransLine2.NEXT = 0;

      exit(true);
    END;

    [External]
    PROCEDURE DeleteOneTransferOrder@4(VAR TransHeader2@1000 : Record "Transfer Header";VAR TransLine2@1001 : Record "Transfer Line");
    VAR
      ItemChargeAssgntPurch@1002 : Record "Item Charge Assignment (Purch)";
      WhseRequest@1003 : Record "Warehouse Request";
      InvtCommentLine@1004 : Record "Inventory Comment Line";
      No@1007 : Code[20];
    BEGIN
      No := TransHeader2."No.";

      WhseRequest.SETRANGE("Source Type",DATABASE::"Transfer Line");
      WhseRequest.SETRANGE("Source No.",No);
      if not WhseRequest.ISEMPTY then
        WhseRequest.DELETEALL(true);

      InvtCommentLine.SETRANGE("Document Type",InvtCommentLine."Document Type"::"Transfer Order");
      InvtCommentLine.SETRANGE("No.",No);
      InvtCommentLine.DELETEALL;

      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",TransLine2."Document No.");
      ItemChargeAssgntPurch.DELETEALL;

      if TransLine2.FIND('-') then
        TransLine2.DELETEALL;

      TransHeader2.DELETE;
      if not HideValidationDialog then
        MESSAGE(TransferOrderPostedMsg1,No);
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      if not CalledFromWhse then
        TESTFIELD(Status,Status::Open);
    END;

    [External]
    PROCEDURE CalledFromWarehouse@7300(CalledFromWhse2@1000 : Boolean);
    BEGIN
      CalledFromWhse := CalledFromWhse2;
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record "Warehouse Request";
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      WhseRequest.SETFILTER(
        "Source Document",'%1|%2',
        WhseRequest."Source Document"::"Inbound Transfer",
        WhseRequest."Source Document"::"Outbound Transfer");
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",true,false,WhseRequest);
    END;

    [External]
    PROCEDURE ShowDocDim@3();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if TransferLinesExist then
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE TransferLinesExist@5() : Boolean;
    BEGIN
      TransLine.RESET;
      TransLine.SETRANGE("Document No.","No.");
      exit(TransLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
      ShippedLineDimChangeConfirmed@1003 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      if NewParentDimSetID = OldParentDimSetID then
        exit;
      if not CONFIRM(Text007) then
        exit;

      TransLine.RESET;
      TransLine.SETRANGE("Document No.","No.");
      TransLine.LOCKTABLE;
      if TransLine.FIND('-') then
        repeat
          NewDimSetID := DimMgt.GetDeltaDimSetID(TransLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          if TransLine."Dimension Set ID" <> NewDimSetID then begin
            TransLine."Dimension Set ID" := NewDimSetID;

            VerifyShippedLineDimChange(ShippedLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              TransLine."Dimension Set ID",TransLine."Shortcut Dimension 1 Code",TransLine."Shortcut Dimension 2 Code");
            TransLine.MODIFY;
          end;
        until TransLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippedLineDimChange@71(VAR ShippedLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      if TransLine.IsShippedDimChanged then
        if not ShippedLineDimChangeConfirmed then
          ShippedLineDimChangeConfirmed := TransLine.ConfirmShippedDimChange;
    END;

    [External]
    PROCEDURE CheckBeforePost@7();
    BEGIN
      TESTFIELD("Transfer-from Code");
      TESTFIELD("Transfer-to Code");
      if "Transfer-from Code" = "Transfer-to Code" then
        ERROR(
          Text001,
          FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"),
          TABLECAPTION,"No.");

      if not "Direct Transfer" then
        TESTFIELD("In-Transit Code");
      TESTFIELD(Status,Status::Released);
      TESTFIELD("Posting Date");
    END;

    [External]
    PROCEDURE CheckInvtPostingSetup@8();
    VAR
      InventoryPostingSetup@1000 : Record "Inventory Posting Setup";
    BEGIN
      InventoryPostingSetup.SETRANGE("Location Code","Transfer-from Code");
      InventoryPostingSetup.FINDFIRST;
      InventoryPostingSetup.SETRANGE("Location Code","Transfer-to Code");
      InventoryPostingSetup.FINDFIRST;
    END;

    PROCEDURE HasShippedItems@23() : Boolean;
    VAR
      TransferLine@1000 : Record "Transfer Line";
    BEGIN
      TransferLine.SETRANGE("Document No.","No.");
      TransferLine.SETFILTER("Item No.",'<>%1','');
      TransferLine.SETFILTER("Quantity Shipped",'>%1',0);
      exit(not TransferLine.ISEMPTY);
    END;

    PROCEDURE HasTransferLines@24() : Boolean;
    VAR
      TransferLine@1000 : Record "Transfer Line";
    BEGIN
      TransferLine.SETRANGE("Document No.","No.");
      TransferLine.SETFILTER("Item No.",'<>%1','');
      exit(not TransferLine.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

