OBJECT Report 5914 Delete Invoiced Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Delete Invoiced Service Orders;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 1634;    ;DataItem;Service Header      ;
               DataItemTable="Service Header";
               DataItemTableView=SORTING("Document Type","No.") WHERE("Document Type"=CONST(Order));
               ReqFilterHeadingML=ENU=Service Order;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=VAR
                                  ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
                                BEGIN
                                  Window.UPDATE(1,"No.");

                                  ItemChargeAssgntService.RESET;
                                  ItemChargeAssgntService.SETRANGE("Document Type","Document Type");
                                  ItemChargeAssgntService.SETRANGE("Document No.","No.");

                                  ServiceOrderLine.RESET;
                                  ServiceOrderLine.SETRANGE("Document Type","Document Type");
                                  ServiceOrderLine.SETRANGE("Document No.","No.");
                                  ServiceOrderLine.SETFILTER("Quantity Invoiced",'<>0');
                                  if ServiceOrderLine.FIND('-') then begin
                                    ServiceOrderLine.SETRANGE("Quantity Invoiced");
                                    ServiceOrderLine.SETFILTER("Outstanding Quantity",'<>0');
                                    if not ServiceOrderLine.FIND('-') then begin
                                      ServiceOrderLine.SETRANGE("Outstanding Quantity");
                                      ServiceOrderLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
                                      if not ServiceOrderLine.FIND('-') then begin
                                        ServiceOrderLine.LOCKTABLE;
                                        if not ServiceOrderLine.FIND('-') then begin
                                          ServiceOrderLine.SETRANGE("Qty. Shipped Not Invoiced");
                                          if ServiceOrderLine.FIND('-') then
                                            repeat
                                              ServiceOrderLine.DELETE;
                                            until ServiceOrderLine.NEXT = 0;

                                          ServiceOrderItemLine.RESET;
                                          ServiceOrderItemLine.SETRANGE("Document Type","Document Type");
                                          ServiceOrderItemLine.SETRANGE("Document No.","No.");
                                          if ServiceOrderItemLine.FINDSET then
                                            repeat
                                              ServiceOrderItemLine.DELETE;
                                            until ServiceOrderItemLine.NEXT = 0;

                                          ServicePost.DeleteHeader("Service Header",ServiceShptHeader,ServiceInvHeader,ServiceCrMemoHeader);

                                          ReserveServiceLine.DeleteInvoiceSpecFromHeader("Service Header");

                                          ServiceCommentLine.SETRANGE(Type,"Document Type");
                                          ServiceCommentLine.SETRANGE("No.","No.");
                                          ServiceCommentLine.DELETEALL;

                                          WhseRequest.SETRANGE("Source Type",DATABASE::"Service Line");
                                          WhseRequest.SETRANGE("Source Subtype","Document Type");
                                          WhseRequest.SETRANGE("Source No.","No.");
                                          if not WhseRequest.ISEMPTY then
                                            WhseRequest.DELETEALL(true);

                                          ServOrderAlloc.RESET;
                                          ServOrderAlloc.SETCURRENTKEY("Document Type");
                                          ServOrderAlloc.SETRANGE("Document Type","Document Type");
                                          ServOrderAlloc.SETRANGE("Document No.","No.");
                                          ServOrderAlloc.SETRANGE(Posted,false);
                                          ServOrderAlloc.DELETEALL;
                                          ServAllocMgt.SetServOrderAllocStatus("Service Header");

                                          ApprovalsMgmt.DeleteApprovalEntries(RECORDID);

                                          DELETE;
                                          COMMIT;
                                        end;
                                      end;
                                    end;
                                  end;
                                END;

               ReqFilterFields="No.","Customer No.","Bill-to Customer No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing Service orders #1##########';
      ServiceOrderItemLine@1012 : Record "Service Item Line";
      ServiceOrderLine@1001 : Record "Service Line";
      ServiceShptHeader@1009 : Record "Service Shipment Header";
      ServiceInvHeader@1010 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1011 : Record "Service Cr.Memo Header";
      ServiceCommentLine@1002 : Record "Service Comment Line";
      ItemChargeAssgntService@1007 : Record "Item Charge Assignment (Sales)";
      WhseRequest@1008 : Record "Warehouse Request";
      ServOrderAlloc@1014 : Record "Service Order Allocation";
      ServicePost@1005 : Codeunit "Service-Post";
      ReserveServiceLine@1006 : Codeunit "Service Line-Reserve";
      ServAllocMgt@1013 : Codeunit ServAllocationManagement;
      Window@1004 : Dialog;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

