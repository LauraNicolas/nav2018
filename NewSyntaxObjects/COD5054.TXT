OBJECT Codeunit 5054 WordManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=Merging Microsoft Word Documents...\\';
      Text004@1004 : TextConst 'ENU=Preparing';
      Text005@1005 : TextConst 'ENU=Program status';
      Text006@1006 : TextConst 'ENU=Preparing Merge...';
      Text007@1007 : TextConst 'ENU=Waiting for print job...';
      Text008@1008 : TextConst 'ENU=Transferring %1 data to Microsoft Word...';
      Text009@1049 : TextConst 'ENU=Sending individual email messages...';
      Text010@1010 : TextConst '@@@=Attachment No. must have File Extension DOC or DOCX.;ENU=%1 %2 must have %3 DOC or DOCX.';
      Text011@1011 : TextConst 'ENU=Attachment file error.';
      Text012@1012 : TextConst 'ENU=Creating merge source...';
      Text013@1013 : TextConst 'ENU=Microsoft Word is opening merge source...';
      Text014@1014 : TextConst 'ENU=Merging %1 in Microsoft Word...';
      Text015@1015 : TextConst 'ENU=FaxMailTo';
      Text017@1017 : TextConst 'ENU=The merge source file is locked by another process.\';
      Text018@1018 : TextConst 'ENU=Please try again later.';
      Text019@1019 : TextConst 'ENU=" Mail Address"';
      Text020@1020 : TextConst 'ENU="Document "';
      Text021@1021 : TextConst 'ENU="Import attachment "';
      Text022@1022 : TextConst 'ENU=Delete %1?';
      Text023@1023 : TextConst 'ENU=Another user has modified the record for this %1\after you retrieved it from the database.\\Enter the changes again in the updated document.';
      FileMgt@1038 : Codeunit "File Management";
      AttachmentManagement@1035 : Codeunit AttachmentManagement;
      WordHelper@1037 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      Window@1034 : Dialog;
      Text030@1001 : TextConst 'ENU=Formal Salutation';
      Text031@1000 : TextConst 'ENU=Informal Salutation';
      MergeSourceBufferFile@1016 : File;
      MergeSourceBufferFileName@1002 : Text;
      Text032@1024 : TextConst 'ENU=*.htm|*.htm';
      ImportAttachmentQst@1009 : TextConst '@@@=%1: Text Caption;ENU=Do you want to import attachment %1?';

    [Internal]
    PROCEDURE CreateWordAttachment@13(WordCaption@1001 : Text[260];LanguageCode@1100 : Code[10]) NewAttachNo@1000 : Integer;
    VAR
      Attachment@1002 : Record Attachment;
      WordApplication@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordMergefile@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      FileName@1004 : Text;
      MergeFileName@1005 : Text;
      ParamInt@1006 : Integer;
    BEGIN
      WordMergefile := WordMergefile.MergeHandler;

      MergeFileName := FileMgt.ClientTempFileName('HTM');
      CreateHeader(WordMergefile,true,MergeFileName,LanguageCode); // Header without data

      WordApplication := WordApplication.ApplicationClass;
      Attachment."File Extension" := GetWordDocumentExtension(WordApplication.Version);
      WordDocument := WordHelper.AddDocument(WordApplication);
      WordDocument.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
      ParamInt := 7; // 7 = HTML
      WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);

      FileName := Attachment.ConstFilename;
      WordHelper.CallSaveAs(WordDocument,FileName);
      if WordHandler(WordDocument,Attachment,WordCaption,false,FileName,false) then
        NewAttachNo := Attachment."No."
      else
        NewAttachNo := 0;

      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      WordHelper.CallQuit(WordApplication,false);
      CLEAR(WordApplication);

      DeleteFile(MergeFileName);
    END;

    [Internal]
    PROCEDURE OpenWordAttachment@5(VAR Attachment@1000 : Record Attachment;FileName@1001 : Text;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      WordApplication@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordMergefile@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      MergeFileName@1005 : Text;
      ParamInt@1006 : Integer;
    BEGIN
      WordMergefile := WordMergefile.MergeHandler;

      MergeFileName := FileMgt.ClientTempFileName('HTM');
      CreateHeader(WordMergefile,true,MergeFileName,LanguageCode);

      WordApplication := WordApplication.ApplicationClass;

      WordDocument := WordHelper.CallOpen(WordApplication,FileName,false,Attachment."Read Only");

      if ISNULL(WordDocument.MailMerge.MainDocumentType) then begin
        WordDocument.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);
      end;

      if WordDocument.MailMerge.Fields.Count > 0 then begin
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);
      end;

      WordHandler(WordDocument,Attachment,Caption,IsTemporary,FileName,false);

      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      WordHelper.CallQuit(WordApplication,false);
      CLEAR(WordApplication);

      DeleteFile(MergeFileName);
    END;

    [Internal]
    PROCEDURE Merge@1(VAR TempDeliverySorter@1000 : TEMPORARY Record "Delivery Sorter");
    VAR
      TempDeliverySorter2@1001 : TEMPORARY Record "Delivery Sorter";
      WordApplication@1012 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      LastAttachmentNo@1002 : Integer;
      LastCorrType@1003 : Integer;
      LastSubject@1004 : Text[50];
      LastSendWordDocsAsAttmt@1005 : Boolean;
      LineCount@1006 : Integer;
      NoOfRecords@1007 : Integer;
      WordHided@1008 : Boolean;
      Param@1009 : Boolean;
      FirstRecord@1010 : Boolean;
    BEGIN
      Window.OPEN(
        Text003 +
        '#1############ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
        '#3############ @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\' +
        '#5############ #6################################');

      Window.UPDATE(1,Text004);
      Window.UPDATE(5,Text005);

      Window.UPDATE(6,Text006);
      TempDeliverySorter.SETCURRENTKEY(
        "Attachment No.","Correspondence Type",Subject,"Send Word Docs. as Attmt.");
      TempDeliverySorter.SETFILTER("Correspondence Type",'<>0');
      NoOfRecords := TempDeliverySorter.COUNT;
      TempDeliverySorter.FIND('-');

      WordApplication := WordApplication.ApplicationClass;
      if WordApplication.Documents.Count > 0 then begin
        WordApplication.Visible := false;
        WordHided := true;
      end;

      FirstRecord := true;
      repeat
        LineCount := LineCount + 1;
        Window.UPDATE(2,ROUND(LineCount / NoOfRecords * 10000,1));
        Window.UPDATE(3,STRSUBSTNO('%1',TempDeliverySorter."Correspondence Type"));

        if not FirstRecord and
           ((TempDeliverySorter."Attachment No." <> LastAttachmentNo) or
            (TempDeliverySorter."Correspondence Type" <> LastCorrType) or
            (TempDeliverySorter.Subject <> LastSubject) or
            (TempDeliverySorter."Send Word Docs. as Attmt." <> LastSendWordDocsAsAttmt))
        then begin
          ExecuteMerge(WordApplication,TempDeliverySorter2);
          TempDeliverySorter2.DELETEALL;
          if TempDeliverySorter."Attachment No." <> LastAttachmentNo then
            ImportMergeSourceFile(LastAttachmentNo)
        end;

        TempDeliverySorter2 := TempDeliverySorter;
        TempDeliverySorter2.INSERT;
        LastAttachmentNo := TempDeliverySorter."Attachment No.";
        LastCorrType := TempDeliverySorter."Correspondence Type";
        LastSubject := TempDeliverySorter.Subject;
        LastSendWordDocsAsAttmt := TempDeliverySorter."Send Word Docs. as Attmt.";

        FirstRecord := false;
      until TempDeliverySorter.NEXT = 0;

      if TempDeliverySorter2.FIND('-') then begin
        ExecuteMerge(WordApplication,TempDeliverySorter2);
        ImportMergeSourceFile(TempDeliverySorter2."Attachment No.")
      end;

      if WordHided then
        WordApplication.Visible := true
      else begin
        // Wait for print job to finish
        if WordApplication.BackgroundPrintingStatus <> 0 then
          repeat
            Window.UPDATE(6,Text007);
            SLEEP(500);
          until WordApplication.BackgroundPrintingStatus = 0;

        Param := false;
        WordHelper.CallQuit(WordApplication,Param);
      end;

      CLEAR(WordApplication);
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExecuteMerge@6(VAR WordApplication@1021 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;VAR TempDeliverySorter@1000 : TEMPORARY Record "Delivery Sorter");
    VAR
      Attachment@1001 : Record Attachment;
      InteractLogEntry@1002 : Record "Interaction Log Entry";
      TempSegLine@1010 : TEMPORARY Record "Segment Line";
      WordDocument@1020 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordInlineShape@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.InlineShape" RUNONCLIENT;
      WordMergefile@1019 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      WordOLEFormat@1027 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.OLEFormat" RUNONCLIENT;
      WordLinkFormat@1023 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.LinkFormat" RUNONCLIENT;
      WordShape@1003 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Shape" RUNONCLIENT;
      MergeFile@1028 : File;
      MergeClientFileName@1025 : Text;
      MainFileName@1011 : Text;
      NoOfRecords@1012 : Integer;
      ParamBln@1013 : Boolean;
      ParamInt@1014 : Integer;
      Row@1018 : Integer;
      ShapesIndex@1024 : Integer;
      HeaderIsReady@1026 : Boolean;
      FaxMailToValue@1030 : Text;
    BEGIN
      Window.UPDATE(
        6,STRSUBSTNO(Text008,
          FORMAT(TempDeliverySorter."Correspondence Type")));

      if TempDeliverySorter.FIND('-') then
        NoOfRecords := TempDeliverySorter.COUNT;

      Attachment.GET(TempDeliverySorter."Attachment No.");
      Attachment.CALCFIELDS("Attachment File");

      // Handle Word documents without mergefields
      if not DocumentContainMergefields(Attachment) and
         TempDeliverySorter."Send Word Docs. as Attmt."
      then begin
        SendAttachmentWithoutMergeFields(WordApplication,TempDeliverySorter,Attachment);
        exit;
      end;

      with TempDeliverySorter do begin
        SETCURRENTKEY("Attachment No.","Correspondence Type",Subject);
        FIND('-');
      end;
      Row := 2;

      MainFileName := FileMgt.ClientTempFileName('DOC');
      TempDeliverySorter.FIND('-');
      Attachment.GET(TempDeliverySorter."Attachment No.");
      Attachment.CALCFIELDS("Attachment File");
      if not IsWordDocumentExtension(Attachment."File Extension") then
        ERROR(STRSUBSTNO(Text010,Attachment.TABLECAPTION,Attachment."No.",Attachment.FIELDCAPTION("File Extension")));

      if not Attachment.ExportAttachmentToClientFile(MainFileName) then
        ERROR(Text011);

      Window.UPDATE(6,Text012);
      Attachment.CALCFIELDS("Merge Source");
      if Attachment."Merge Source".HASVALUE then begin
        CreateMergeSource(MergeFile);
        repeat
          PopulateInterLogEntryToMergeSource(
            MergeFile,Attachment,TempDeliverySorter."No.",HeaderIsReady,TempDeliverySorter."Correspondence Type");
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        until TempDeliverySorter.NEXT = 0;
        MergeClientFileName := CloseAndDownloadMergeSource(MergeFile);
      end else begin
        MergeClientFileName := FileMgt.ClientTempFileName('HTM');
        WordMergefile := WordMergefile.MergeHandler;
        CreateHeader(WordMergefile,false,MergeClientFileName,TempDeliverySorter."Language Code");
        repeat
          InteractLogEntry.GET(TempDeliverySorter."No.");

          // This field must come last in the merge source file
          case TempDeliverySorter."Correspondence Type" of
            TempDeliverySorter."Correspondence Type"::Fax:
              FaxMailToValue := AttachmentManagement.InteractionFax(InteractLogEntry);
            TempDeliverySorter."Correspondence Type"::Email:
              FaxMailToValue := AttachmentManagement.InteractionEMail(InteractLogEntry);
            else
              FaxMailToValue := '';
          end;

          AddFieldsToMergeSource(WordMergefile,InteractLogEntry,TempSegLine,FaxMailToValue);
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        until TempDeliverySorter.NEXT = 0;
        WordMergefile.CloseMergeFile;
      end;

      WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,false,false);
      WordDocument.MailMerge.MainDocumentType := 0;

      Window.UPDATE(6,Text013);
      ParamInt := 7; // 7 = HTML
      WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeClientFileName,ParamInt);
      Window.UPDATE(6,STRSUBSTNO(Text014,TempDeliverySorter."Correspondence Type"));

      for ShapesIndex := 1 to WordDocument.InlineShapes.Count do begin
        WordInlineShape := WordHelper.GetInlineShapeItem(WordDocument,ShapesIndex);
        WordInlineShape.Select;
        if not ISNULL(WordInlineShape) then begin
          WordShape := WordInlineShape.ConvertToShape;
          WordLinkFormat := WordShape.LinkFormat;
          WordOLEFormat := WordShape.OLEFormat;
          if not ISNULL(WordOLEFormat) then
            WordDocument.MailMerge.MailAsAttachment := WordDocument.MailMerge.MailAsAttachment or WordOLEFormat.DisplayAsIcon;
          if not ISNULL(WordLinkFormat) then begin
            WordLinkFormat.SavePictureWithDocument := true;
            WordLinkFormat.BreakLink;
            WordLinkFormat.Update;
          end;
        end;
      end;

      case TempDeliverySorter."Correspondence Type" of
        TempDeliverySorter."Correspondence Type"::Fax:
          begin
            WordDocument.MailMerge.Destination := 3;
            WordDocument.MailMerge.MailAddressFieldName := Text015;
            WordDocument.MailMerge.MailAsAttachment := true;
            WordHelper.CallMailMergeExecute(WordDocument);
          end;
        TempDeliverySorter."Correspondence Type"::Email:
          begin
            WordDocument.MailMerge.Destination := 2;
            WordDocument.MailMerge.MailAddressFieldName := Text015;
            WordDocument.MailMerge.MailSubject := TempDeliverySorter.Subject;
            WordDocument.MailMerge.MailAsAttachment :=
              WordDocument.MailMerge.MailAsAttachment or TempDeliverySorter."Send Word Docs. as Attmt.";
            WordHelper.CallMailMergeExecute(WordDocument);
          end;
        TempDeliverySorter."Correspondence Type"::"Hard Copy":
          begin
            WordDocument.MailMerge.Destination := 0; // 0 = wdSendToNewDocument
            WordHelper.CallMailMergeExecute(WordDocument);
            WordHelper.CallPrintOut(WordHelper.GetActiveDocument(WordApplication));
          end;
      end;

      // Update delivery status on Interaction Log Entry
      if TempDeliverySorter.FIND('-') then begin
        InteractLogEntry.LOCKTABLE;
        repeat
          with InteractLogEntry do begin
            GET(TempDeliverySorter."No.");
            "Delivery Status" := "Delivery Status"::" ";
            MODIFY;
          end;
        until TempDeliverySorter.NEXT = 0;
        COMMIT;
      end;

      ParamBln := false;
      WordHelper.CallClose(WordDocument,ParamBln);
      if not Attachment."Merge Source".HASVALUE then
        AppendToMergeSource(MergeClientFileName);
      DeleteFile(MainFileName);
      DeleteFile(MergeClientFileName);

      if not ISNULL(WordLinkFormat) then
        CLEAR(WordLinkFormat);
      if not ISNULL(WordOLEFormat) then
        CLEAR(WordOLEFormat);
      CLEAR(WordMergefile);
      CLEAR(WordDocument);
    END;

    [Internal]
    PROCEDURE ShowMergedDocument@11(VAR SegLine@1000 : Record "Segment Line";VAR Attachment@1001 : Record Attachment;WordCaption@1002 : Text[260];IsTemporary@1016 : Boolean);
    BEGIN
      RunMergedDocument(SegLine,Attachment,WordCaption,IsTemporary,true,true);
    END;

    [External]
    PROCEDURE CreateHeader@4(VAR WordMergefile@1011 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;MergeFieldsOnly@1000 : Boolean;MergeFileName@1001 : Text;LanguageCode@1100 : Code[10]);
    VAR
      Salesperson@1002 : Record "Salesperson/Purchaser";
      Country@1003 : Record "Country/Region";
      Contact@1004 : Record Contact;
      SegLine@1005 : Record "Segment Line";
      CompanyInfo@1006 : Record "Company Information";
      RMSetup@1010 : Record "Marketing Setup";
      InteractionLogEntry@1012 : Record "Interaction Log Entry";
      Language@1013 : Record Language;
      I@1007 : Integer;
      MainLanguage@1009 : Integer;
    BEGIN
      if not WordMergefile.CreateMergeFile(MergeFileName) then
        ERROR(Text017 + Text018);

      // Create HTML Header source
      with WordMergefile do begin
        MainLanguage := GLOBALLANGUAGE;

        if LanguageCode = '' then begin
          RMSetup.GET;
          if RMSetup."Mergefield Language ID" <> 0 then
            GLOBALLANGUAGE := RMSetup."Mergefield Language ID";
        end else
          GLOBALLANGUAGE := Language.GetLanguageID(LanguageCode);
        AddField(InteractionLogEntry.FIELDCAPTION("Entry No."));
        AddField(Contact.TABLECAPTION + Text019);
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Company Name"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Name));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Name 2"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Address));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Address 2"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Post Code"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(City));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(County));
        AddField(Contact.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' + Country.FIELDCAPTION(Name));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Job Title"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Phone No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Fax No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("E-Mail"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Mobile Phone No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("VAT Registration No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Home Page"));
        AddField(Text030);
        AddField(Text031);
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Code));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Name));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Job Title"));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Phone No."));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("E-Mail"));
        AddField(Text020 + SegLine.FIELDCAPTION(Date));
        AddField(Text020 + SegLine.FIELDCAPTION("Campaign No."));
        AddField(Text020 + SegLine.FIELDCAPTION("Segment No."));
        AddField(Text020 + SegLine.FIELDCAPTION(Description));
        AddField(Text020 + SegLine.FIELDCAPTION(Subject));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Name));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Name 2"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Address));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Address 2"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Post Code"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(City));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(County));
        AddField(CompanyInfo.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' + Country.FIELDCAPTION(Name));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("VAT Registration No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Registration No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Phone No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."));
        GLOBALLANGUAGE := MainLanguage;
        AddField(Text015);
        WriteLine;

        // Mergesource must be at least two lines
        if MergeFieldsOnly then begin
          for I := 1 to 48 do
            AddField('');
          WriteLine;
          CloseMergeFile;
        end;
      end;
    END;

    LOCAL PROCEDURE WordHandler@7(VAR WordDocument@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR Attachment@1001 : Record Attachment;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;FileName@1004 : Text;IsInherited@1008 : Boolean) DocImported@1000 : Boolean;
    VAR
      Attachment2@1005 : Record Attachment;
      WordHandler@1006 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT;
      NewFileName@1007 : Text;
    BEGIN
      WordHandler := WordHandler.WordHandler;

      WordDocument.ActiveWindow.Caption := Caption;
      WordDocument.Application.Visible := true; // Visible before WindowState KB176866 - http://support.microsoft.com/kb/176866
      WordDocument.ActiveWindow.WindowState := 1; // 1 = wdWindowStateMaximize
      WordDocument.Saved := true;
      WordDocument.Application.Activate;

      NewFileName := WordHandler.WaitForDocument(WordDocument);

      if not Attachment."Read Only" then
        if WordHandler.IsDocumentClosed then
          if WordHandler.HasDocumentChanged then begin
            CLEAR(WordHandler);
            if CONFIRM(ImportAttachmentQst,true,Caption) then begin
              if (not IsTemporary) and Attachment2.GET(Attachment."No.") then
                if Attachment2."Last Time Modified" <> Attachment."Last Time Modified" then begin
                  DeleteFile(FileName);
                  if NewFileName <> FileName then
                    if CONFIRM(STRSUBSTNO(Text022,NewFileName),false) then
                      DeleteFile(NewFileName);
                  ERROR(STRSUBSTNO(Text023,Attachment.TABLECAPTION));
                end;
              Attachment.ImportAttachmentFromClientFile(NewFileName,IsTemporary,IsInherited);
              DeleteFile(NewFileName);
              DocImported := true;
            end;
          end;

      CLEAR(WordHandler);
      DeleteFile(FileName);
    END;

    LOCAL PROCEDURE DeleteFile@8(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      // Wait for Word to release the files
      if FileName = '' then
        exit(false);

      if not FileMgt.ClientFileExists(FileName) then
        exit(true);

      repeat
        SLEEP(250);
        I := I + 1;
      until FileMgt.DeleteClientFile(FileName) or (I = 25);
      exit(not FileMgt.ClientFileExists(FileName));
    END;

    LOCAL PROCEDURE DocumentContainMergefields@2(VAR Attachment@1001 : Record Attachment) MergeFields@1000 : Boolean;
    VAR
      WordApplication@1005 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1004 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      ParamBln@1002 : Boolean;
      FileName@1003 : Text;
    BEGIN
      WordApplication := WordApplication.ApplicationClass;
      if (UPPERCASE(Attachment."File Extension") <> 'DOC') and
         (UPPERCASE(Attachment."File Extension") <> 'DOCX')
      then
        exit(false);
      FileName := Attachment.ConstFilename;
      Attachment.ExportAttachmentToClientFile(FileName);
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,false,false);

      MergeFields := (WordDocument.MailMerge.Fields.Count > 0);
      ParamBln := false;
      WordHelper.CallClose(WordDocument,ParamBln);
      DeleteFile(FileName);

      CLEAR(WordDocument);
      WordHelper.CallQuit(WordApplication,false);
      CLEAR(WordApplication);
    END;

    LOCAL PROCEDURE CreateMergeSource@14(VAR MergeFile@1000 : File);
    VAR
      MergeServerFileName@1001 : Text;
    BEGIN
      MergeServerFileName := FileMgt.ServerTempFileName('HTM');
      MergeFile.WRITEMODE := true;
      MergeFile.TEXTMODE := true;
      MergeFile.CREATE(MergeServerFileName);
    END;

    LOCAL PROCEDURE CloseAndDownloadMergeSource@15(VAR MergeFile@1000 : File) MergeClientFileName : Text;
    VAR
      MergeServerFileName@1001 : Text;
    BEGIN
      MergeServerFileName := MergeFile.NAME;
      MergeFile.WRITE('</table>');
      MergeFile.WRITE('</body>');
      MergeFile.WRITE('</html>');
      MergeFile.CLOSE;

      MergeClientFileName := FileMgt.DownloadTempFile(MergeServerFileName);

      // We don't need the file any more on ServiceTier
      ERASE(MergeServerFileName);

      exit(MergeClientFileName);
    END;

    [Internal]
    PROCEDURE PopulateInterLogEntryToMergeSource@12(VAR MergeFile@1000 : File;VAR Attachment@1006 : Record Attachment;EntryNo@1011 : Integer;VAR HeaderIsReady@1001 : Boolean;CorrespondenceType@1012 : ',"Hard Copy",Email,Fax');
    VAR
      InteractLogEntry@1004 : Record "Interaction Log Entry";
      InStreamBLOB@1005 : InStream;
      CurrentLine@1003 : Text[250];
      NewLine@1002 : Text[250];
      SearchValue@1007 : Text[30];
      LineIsFound@1010 : Boolean;
    BEGIN
      Attachment.CALCFIELDS("Merge Source");
      Attachment."Merge Source".CREATEINSTREAM(InStreamBLOB);
      SearchValue := '<td>' + FORMAT(EntryNo) + '</td>';
      repeat
        InStreamBLOB.READTEXT(CurrentLine);
        if (STRPOS(CurrentLine,'<tr>') > 0) and HeaderIsReady then begin
          InStreamBLOB.READTEXT(NewLine);
          if STRPOS(NewLine,SearchValue) > 0 then begin
            MergeFile.WRITE(CurrentLine);
            MergeFile.WRITE(NewLine);
            LineIsFound := true
          end
        end;

        if not HeaderIsReady then begin
          MergeFile.WRITE(CurrentLine);
          if STRPOS(CurrentLine,'</tr>') > 0 then
            HeaderIsReady := true
        end
      until LineIsFound or InStreamBLOB.EOS;

      if LineIsFound then begin
        InStreamBLOB.READTEXT(NewLine);
        while STRPOS(NewLine,'</tr>') = 0 do begin
          CurrentLine := NewLine;
          InStreamBLOB.READTEXT(NewLine);
          if STRPOS(NewLine,'</tr>') = 0 then
            MergeFile.WRITE(CurrentLine);
        end;
        if InteractLogEntry.GET(EntryNo) then begin
          case CorrespondenceType of
            CorrespondenceType::Fax:
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionFax(InteractLogEntry) + '</td>');
            CorrespondenceType::Email:
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionEMail(InteractLogEntry) + '</td>')
            else
              MergeFile.WRITE('<td></td>')
          end
        end
      end;
    END;

    [External]
    PROCEDURE AddFieldsToMergeSource@16(VAR WordMergefile@1012 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;VAR InteractLogEntry@1000 : Record "Interaction Log Entry";VAR SegLine@1007 : Record "Segment Line";FaxMailToValue@1013 : Text);
    VAR
      Salesperson@1006 : Record "Salesperson/Purchaser";
      Country@1005 : Record "Country/Region";
      Country2@1004 : Record "Country/Region";
      Contact@1003 : Record Contact;
      CompanyInfo@1002 : Record "Company Information";
      FormatAddr@1001 : Codeunit "Format Address";
      ContAddr@1011 : ARRAY [8] OF Text[50];
      ContAddr2@1010 : ARRAY [8] OF Text[50];
      LineNo@1016 : Text;
      SalesPersonCode@1014 : Code[20];
      ContactNo@1015 : Code[20];
      ContactAltAddressCode@1017 : Code[10];
      LanguageCode@1019 : Code[10];
      Date@1018 : Date;
      ContactAddressDimension@1008 : Integer;
    BEGIN
      if InteractLogEntry.ISEMPTY then begin
        ContactNo := SegLine."Contact No.";
        SalesPersonCode := SegLine."Salesperson Code";
        LineNo := FORMAT(SegLine."Line No.");
        ContactAltAddressCode := SegLine."Contact Alt. Address Code";
        Date := SegLine.Date;
        LanguageCode := SegLine."Language Code";
      end else begin
        ContactNo := InteractLogEntry."Contact No.";
        SalesPersonCode := InteractLogEntry."Salesperson Code";
        LineNo := FORMAT(InteractLogEntry."Entry No.");
        ContactAltAddressCode := InteractLogEntry."Contact Alt. Address Code";
        Date := InteractLogEntry.Date;
        LanguageCode := InteractLogEntry."Interaction Language Code";
      end;

      Contact.GET(ContactNo);
      CompanyInfo.GET;
      if not Country2.GET(CompanyInfo."Country/Region Code") then
        CLEAR(Country2);

      if not Country.GET(Contact."Country/Region Code") then
        CLEAR(Country);

      if not Salesperson.GET(SalesPersonCode) then
        CLEAR(Salesperson);

      // This field must come first in the merge source file
      WordMergefile.AddField(LineNo);

      // Add multiline fielddata
      ContactAddressDimension := 1;
      FormatAddr.ContactAddrAlt(ContAddr,Contact,ContactAltAddressCode,Date);

      WordMergefile.OpenNewMultipleValueField;
      COPYARRAY(ContAddr2,ContAddr,1);
      COMPRESSARRAY(ContAddr2);
      while ContAddr2[1] <> '' do begin
        if ContAddr[ContactAddressDimension] <> '' then begin
          WordMergefile.AddDataToMultipleValueField(ContAddr[ContactAddressDimension]);
          ContAddr2[1] := '';
          COMPRESSARRAY(ContAddr2);
        end else
          WordMergefile.AddDataToMultipleValueField('&nbsp;');
        ContactAddressDimension := ContactAddressDimension + 1;
      end;
      WordMergefile.CloseMultipleValueField;

      with WordMergefile do begin
        AddField(Contact."No.");
        AddField(Contact."Company Name");
        AddField(Contact.Name);
        AddField(Contact."Name 2");
        AddField(Contact.Address);
        AddField(Contact."Address 2");
        AddField(Contact."Post Code");
        AddField(Contact.City);
        AddField(Contact.County);
        AddField(Country.Name);
        AddField(Contact."Job Title");
        AddField(Contact."Phone No.");
        AddField(Contact."Fax No.");
        AddField(Contact."E-Mail");
        AddField(Contact."Mobile Phone No.");
        AddField(Contact."VAT Registration No.");
        AddField(Contact."Home Page");
        AddField(Contact.GetSalutation(0,LanguageCode));
        AddField(Contact.GetSalutation(1,LanguageCode));
        AddField(Salesperson.Code);
        AddField(Salesperson.Name);
        AddField(Salesperson."Job Title");
        AddField(Salesperson."Phone No.");
        AddField(Salesperson."E-Mail");

        if InteractLogEntry.ISEMPTY then begin
          AddField(FORMAT(SegLine.Date));
          AddField(SegLine."Campaign No.");
          AddField(SegLine."Segment No.");
          AddField(SegLine.Description);
          AddField(SegLine.Subject);
        end else begin
          AddField(FORMAT(InteractLogEntry.Date));
          AddField(InteractLogEntry."Campaign No.");
          AddField(InteractLogEntry."Segment No.");
          AddField(InteractLogEntry.Description);
          AddField(InteractLogEntry.Subject);
        end;

        AddField(CompanyInfo.Name);
        AddField(CompanyInfo."Name 2");
        AddField(CompanyInfo.Address);
        AddField(CompanyInfo."Address 2");
        AddField(CompanyInfo."Post Code");
        AddField(CompanyInfo.City);
        AddField(CompanyInfo.County);
        AddField(Country2.Name);
        AddField(CompanyInfo."VAT Registration No.");
        AddField(CompanyInfo."Registration No.");
        AddField(CompanyInfo."Phone No.");
        AddField(CompanyInfo."Fax No.");
        AddField(CompanyInfo."Bank Branch No.");
        AddField(CompanyInfo."Bank Name");
        AddField(CompanyInfo."Bank Account No.");
        AddField(CompanyInfo."Giro No.");

        AddField(FaxMailToValue);

        WriteLine
      end;
    END;

    LOCAL PROCEDURE ImportMergeSourceFile@10(AttachmentNo@1000 : Integer);
    VAR
      Attachment@1001 : Record Attachment;
    BEGIN
      Attachment.GET(AttachmentNo);
      Attachment.CALCFIELDS("Merge Source");
      if not Attachment."Merge Source".HASVALUE then begin
        if not DocumentContainMergefields(Attachment) then
          exit;
        MergeSourceBufferFile.WRITE('</table>');
        MergeSourceBufferFile.WRITE('</body>');
        MergeSourceBufferFile.WRITE('</html>');
        MergeSourceBufferFile.CLOSE;
        Attachment."Merge Source".IMPORT(MergeSourceBufferFileName);
        Attachment.MODIFY;
        DeleteFile(MergeSourceBufferFileName);
        MergeSourceBufferFileName := ''
      end
    END;

    LOCAL PROCEDURE AppendToMergeSource@41(MergeFileName@1000 : Text);
    VAR
      SourceFile@1003 : File;
      CurrentLine@1004 : Text[250];
      SkipHeader@1005 : Boolean;
      MergeFileNameServer@1006 : Text;
    BEGIN
      if MergeSourceBufferFileName = '' then begin
        MergeSourceBufferFileName := FileMgt.ServerTempFileName('HTM');
        MergeSourceBufferFile.WRITEMODE := true;
        MergeSourceBufferFile.TEXTMODE := true;
        MergeSourceBufferFile.CREATE(MergeSourceBufferFileName);
      end else
        SkipHeader := true;
      SourceFile.TEXTMODE := true;

      MergeFileNameServer := FileMgt.ServerTempFileName('HTM');
      UPLOAD(Text021,'',Text032,MergeFileName,MergeFileNameServer);

      SourceFile.OPEN(MergeFileNameServer);
      if SkipHeader then
        repeat
          SourceFile.READ(CurrentLine)
        until (STRPOS(CurrentLine,'</tr>') <> 0);
      while (STRPOS(CurrentLine,'</table>') = 0) and (SourceFile.POS <> SourceFile.LEN) do begin
        SourceFile.READ(CurrentLine);
        if STRPOS(CurrentLine,'</table>') = 0 then
          MergeSourceBufferFile.WRITE(CurrentLine);
      end;
      SourceFile.CLOSE;

      ERASE(MergeFileNameServer);
    END;

    [External]
    PROCEDURE GetWordDocumentExtension@17(VersionTxt@1001 : Text[30]) : Code[4];
    VAR
      Version@1200 : Decimal;
      SeparatorPos@1201 : Integer;
      CommaStr@1202 : Code[1];
      DefaultStr@1203 : Code[10];
      EvalOK@1204 : Boolean;
    BEGIN
      DefaultStr := 'DOC';
      SeparatorPos := STRPOS(VersionTxt,'.');
      if SeparatorPos = 0 then
        SeparatorPos := STRPOS(VersionTxt,',');
      if SeparatorPos = 0 then
        EvalOK := EVALUATE(Version,VersionTxt)
      else begin
        CommaStr := COPYSTR(FORMAT(11 / 10),2,1);
        EvalOK := EVALUATE(Version,COPYSTR(VersionTxt,1,SeparatorPos - 1) + CommaStr + COPYSTR(VersionTxt,SeparatorPos + 1));
      end;
      if EvalOK and (Version >= 12.0) then
        exit('DOCX');
      exit(DefaultStr);
    END;

    LOCAL PROCEDURE HandleWordDocumentWithoutMerge@18(VAR WordDocument@1021 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR DeliverySorter@1022 : Record "Delivery Sorter";MainFileName@1023 : Text);
    VAR
      InteractLogEntry@1001 : Record "Interaction Log Entry";
      Contact@1002 : Record Contact;
      Mail@1003 : Codeunit Mail;
    BEGIN
      with InteractLogEntry do
        repeat
          LOCKTABLE;
          GET(DeliverySorter."No.");
          if DeliverySorter."Correspondence Type" = DeliverySorter."Correspondence Type"::Email then begin
            Contact.GET("Contact No.");
            Mail.NewMessage(
              AttachmentManagement.InteractionEMail(InteractLogEntry),'','',
              DeliverySorter.Subject,'',MainFileName,false);
          end else
            WordHelper.CallPrintOut(WordDocument);
          "Delivery Status" := "Delivery Status"::" ";
          MODIFY;
          COMMIT;
        until DeliverySorter.NEXT = 0;
    END;

    LOCAL PROCEDURE SendAttachmentWithoutMergeFields@3(VAR WordApplication@1002 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass";VAR TempDeliverySorter@1001 : TEMPORARY Record "Delivery Sorter";VAR Attachment@1003 : Record Attachment);
    VAR
      WordDocument@1004 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName('DOC');
      Attachment.ExportAttachmentToClientFile(FileName);
      case TempDeliverySorter."Correspondence Type" of
        TempDeliverySorter."Correspondence Type"::"Hard Copy":
          begin
            WordDocument := WordHelper.CallOpen(WordApplication,FileName,false,false);
            HandleWordDocumentWithoutMerge(WordDocument,TempDeliverySorter,FileName);
            WordHelper.CallClose(WordDocument,false);
          end;
        TempDeliverySorter."Correspondence Type"::Email:
          begin
            // Send attachment to all contacts in buffer
            Window.UPDATE(6,Text009);
            Attachment.TESTFIELD("File Extension");
            HandleWordDocumentWithoutMerge(WordDocument,TempDeliverySorter,FileName);
            DeleteFile(FileName);
          end;
      end;
    END;

    [External]
    PROCEDURE IsWordDocumentExtension@19(FileExtension@1000 : Text) : Boolean;
    BEGIN
      if (UPPERCASE(FileExtension) <> 'DOC') and
         (UPPERCASE(FileExtension) <> 'DOCX') and
         (UPPERCASE(FileExtension) <> '.DOC') and
         (UPPERCASE(FileExtension) <> '.DOCX')
      then
        exit(false);

      exit(true);
    END;

    [Internal]
    PROCEDURE RunMergedDocument@20(VAR SegLine@1000 : Record "Segment Line";VAR Attachment@1001 : Record Attachment;WordCaption@1002 : Text[260];IsTemporary@1016 : Boolean;IsVisible@1003 : Boolean;Handler@1005 : Boolean);
    VAR
      TempInteractLogEntry@1026 : TEMPORARY Record "Interaction Log Entry";
      WordMergefile@1006 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      WordApplication@1019 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1018 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      MergeFile@1004 : File;
      MergeClientFileName@1009 : Text;
      MainFileName@1010 : Text;
      ParamInt@1011 : Integer;
      IsInherited@1021 : Boolean;
      HeaderIsReady@1023 : Boolean;
    BEGIN
      if not IsWordDocumentExtension(Attachment."File Extension") then
        ERROR(STRSUBSTNO(Text010,Attachment.TABLECAPTION,Attachment."No.",
            Attachment.FIELDCAPTION("File Extension")));

      if SegLine.AttachmentInherited then
        IsInherited := true;

      MainFileName := FileMgt.ClientTempFileName('DOC');

      // Handle Word documents without mergefields
      if not DocumentContainMergefields(Attachment) then begin
        Attachment.ExportAttachmentToClientFile(MainFileName);
        WordApplication := WordApplication.ApplicationClass;
        WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,false,Attachment."Read Only");
      end else begin
        // Merge possible
        if not Attachment.ExportAttachmentToClientFile(MainFileName) then
          ERROR(Text011);

        Attachment.CALCFIELDS("Merge Source");
        if Attachment."Merge Source".HASVALUE then begin
          CreateMergeSource(MergeFile);
          PopulateInterLogEntryToMergeSource(MergeFile,Attachment,SegLine."Line No.",HeaderIsReady,0);
          MergeClientFileName := CloseAndDownloadMergeSource(MergeFile);
        end else begin
          MergeClientFileName := FileMgt.ClientTempFileName('HTM');
          WordMergefile := WordMergefile.MergeHandler;
          CreateHeader(WordMergefile,false,MergeClientFileName,SegLine."Language Code");

          AddFieldsToMergeSource(WordMergefile,TempInteractLogEntry,SegLine,'');
          WordMergefile.CloseMergeFile;
        end;

        WordApplication := WordApplication.ApplicationClass;
        WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,false,false);
        WordDocument.MailMerge.MainDocumentType := 0;
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeClientFileName,ParamInt);
        ParamInt := 9999998; // 9999998 = wdToggle
        WordDocument.MailMerge.ViewMailMergeFieldCodes(ParamInt);
      end;

      if Handler then
        WordHandler(WordDocument,Attachment,WordCaption,IsTemporary,MainFileName,IsInherited)
      else
        WordMerge(WordDocument,Attachment,WordCaption,IsTemporary,MainFileName,IsInherited,IsVisible);

      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      WordHelper.CallQuit(WordApplication,false);
      CLEAR(WordApplication);

      DeleteFile(MergeClientFileName);
    END;

    LOCAL PROCEDURE WordMerge@9(VAR WordDocument@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR Attachment@1001 : Record Attachment;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;FileName@1004 : Text;IsInherited@1008 : Boolean;IsVisible@1012 : Boolean) DocImported@1000 : Boolean;
    VAR
      FileManagement@1007 : Codeunit "File Management";
      WordHandler@1011 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT;
      TempFileName@1010 : Text;
      NewFileName@1005 : Text;
    BEGIN
      WordHandler := WordHandler.WordHandler;

      if IsVisible then begin
        WordDocument.ActiveWindow.Caption := Caption;
        WordDocument.Application.Visible := true; // Visible before WindowState KB176866 - http://support.microsoft.com/kb/176866
        WordDocument.ActiveWindow.WindowState := 1; // 1 = wdWindowStateMaximize
        WordDocument.Application.Activate;
        NewFileName := WordHandler.WaitForDocument(WordDocument);
      end else begin
        WordHelper.CallClose(WordDocument,true);
        NewFileName := FileName;
      end;

      if IsTemporary then begin
        TempFileName := FileManagement.ClientTempFileName(FileManagement.GetExtension(NewFileName));
        FileManagement.CopyClientFile(NewFileName,TempFileName,true);
        Attachment.ImportAttachmentFromClientFile(TempFileName,IsTemporary,IsInherited);
        FileManagement.DeleteClientFile(TempFileName);
        DeleteFile(NewFileName);
        DocImported := true;
      end;

      CLEAR(WordHandler);
      DeleteFile(FileName);
    END;

    BEGIN
    END.
  }
}

