OBJECT Report 6037 Change Customer in Contract
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Change Customer in Contract;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if NewCustomerNo = '' then
                    ERROR(Text000);
                  Cust.GET(NewCustomerNo);
                  if NewShiptoCode <> '' then
                    ShipToAddr.GET(NewCustomerNo,NewShiptoCode);
                  if (NewShiptoCode = ServContract."Ship-to Code") and
                     (NewCustomerNo = ServContract."Customer No.")
                  then
                    ERROR(Text011);

                  if not CONFIRM(Text002,false) then
                    CurrReport.QUIT;

                  if TempServContract.COUNT > 1 then
                    if not CONFIRM(
                         Text009,false,
                         TempServContract.COUNT,
                         TempServItem.COUNT)
                    then
                      CurrReport.QUIT;
                END;

    OnPostReport=VAR
                   ServItem@1006 : Record "Service Item";
                   Window@1005 : Dialog;
                   CounterTotal@1003 : Integer;
                   Counter@1002 : Integer;
                   CounterBreak@1000 : Integer;
                   ItemCounter@1004 : Integer;
                 BEGIN
                   ServItem.LOCKTABLE;
                   ServContractLine.LOCKTABLE;
                   ServContract.LOCKTABLE;
                   CLEAR(TempServContract);
                   CLEAR(TempServItem);
                   ServContractMgt.GetAffectedItemsOnCustChange(
                     ContractNo,
                     TempServContract,
                     TempServItem,
                     false,
                     ServContractLine."Contract Type"::Contract);

                   Window.OPEN(
                     Text005 +
                     Text006 +
                     '#1###' +
                     Text007 +
                     '#2###  @3@@@@@@@@@\\' +
                     Text008 +
                     '#4###' +
                     Text007 +
                     '#5###  @6@@@@@@@@@\\');
                   Window.UPDATE(2,TempServContract.COUNT);
                   Window.UPDATE(5,TempServItem.COUNT);

                   CounterTotal := TempServContract.COUNT;
                   Counter := 0;
                   ItemCounter := 0;
                   CounterBreak := ROUND(CounterTotal / 100,1,'>');
                   if TempServContract.FIND('-') then
                     repeat
                       Counter := Counter + 1;
                       ItemCounter := ItemCounter + 1;
                       if Counter >= CounterBreak then begin
                         Counter := 0;
                         Window.UPDATE(3,ROUND(ItemCounter / CounterTotal * 10000,1));
                       end;
                       Window.UPDATE(1,ItemCounter);
                       ServContract.GET(TempServContract."Contract Type",TempServContract."Contract No.");
                       ServContractMgt.ChangeCustNoOnServContract(NewCustomerNo,NewShiptoCode,ServContract)
                     until TempServContract.NEXT = 0
                   else
                     Window.UPDATE(3,10000);

                   CounterTotal := TempServItem.COUNT;
                   Counter := 0;
                   ItemCounter := 0;
                   CounterBreak := ROUND(CounterTotal / 100,1,'>');
                   if TempServItem.FIND('-') then
                     repeat
                       Counter := Counter + 1;
                       ItemCounter := ItemCounter + 1;
                       if Counter >= CounterBreak then begin
                         Counter := 0;
                         Window.UPDATE(6,ROUND(ItemCounter / CounterTotal * 10000,1));
                       end;
                       Window.UPDATE(4,ItemCounter);
                       ServItem.GET(TempServItem."No.");
                       ServContractMgt.ChangeCustNoOnServItem(NewCustomerNo,NewShiptoCode,ServItem)
                     until TempServItem.NEXT = 0
                   else
                     Window.UPDATE(6,10000);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   ServContractMgt.GetAffectedItemsOnCustChange(
                     ContractNo,
                     TempServContract,
                     TempServItem,
                     false,
                     ServContractLine."Contract Type"::Contract);

                   if TempServContract.COUNT > 1 then
                     ContractNoText := Text004
                   else
                     ContractNoText := TempServContract."Contract No.";

                   if TempServItem.COUNT > 1 then
                     ServiceItemNoText := Text004
                   else
                     ServiceItemNoText := TempServItem."No.";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Contract No.;
                  DrillDown=true;
                  CaptionML=ENU=Contract No.;
                  ToolTipML=ENU=Specifies all billable profits for the job task, expressed in the local currency.;
                  ApplicationArea=#Service;
                  SourceExpr=ContractNoText;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                PAGE.RUNMODAL(PAGE::"Service Contract List",TempServContract);
                              END;
                               }

      { 11  ;2   ;Field     ;
                  Name=Service Item No.;
                  DrillDown=true;
                  CaptionML=ENU=Service Item No.;
                  ToolTipML=ENU=Specifies the field to see the list of related service items, if there are a number of service items.;
                  ApplicationArea=#Service;
                  SourceExpr=ServiceItemNoText;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                PAGE.RUNMODAL(PAGE::"Service Item List",TempServItem);
                              END;
                               }

      { 3   ;2   ;Field     ;
                  Name=Existing Customer No.;
                  CaptionML=ENU=Existing Customer No.;
                  ToolTipML=ENU=Specifies the field to see the existing customer number in the contract.;
                  ApplicationArea=#Service;
                  SourceExpr=ServContract."Customer No.";
                  Editable=FALSE }

      { 5   ;2   ;Field     ;
                  Name=Existing Ship-to Code;
                  CaptionML=ENU=Existing Ship-to Code;
                  ToolTipML=ENU=Specifies the field to see the existing ship-to code in the contract.;
                  ApplicationArea=#Service;
                  SourceExpr=ServContract."Ship-to Code";
                  Editable=FALSE }

      { 7   ;2   ;Field     ;
                  Name=New Customer No.;
                  CaptionML=ENU=New Customer No.;
                  ToolTipML=ENU=Specifies the number of the new customer that you want to include in the batch job. Choose the field to see the existing customer numbers.;
                  ApplicationArea=#Service;
                  SourceExpr=NewCustomerNo;
                  OnValidate=BEGIN
                               if NewCustomerNo <> '' then
                                 VerifyCustNo(NewCustomerNo,NewShiptoCode);
                             END;

                  OnLookup=BEGIN
                             CLEAR(Cust);
                             Cust."No." := NewCustomerNo;
                             Cust.SETFILTER(Blocked,'<>%1',Cust.Blocked::All);
                             if PAGE.RUNMODAL(0,Cust) = ACTION::LookupOK then
                               if Cust."No." <> '' then begin
                                 VerifyCustNo(Cust."No.",NewShiptoCode);
                                 NewCustomerNo := Cust."No.";
                               end;
                           END;
                            }

      { 9   ;2   ;Field     ;
                  Name=New Ship-to Code;
                  CaptionML=ENU=New Ship-to Code;
                  ToolTipML=ENU=Specifies the new ship-to code that you want to include in the batch job. Choose the field to see the existing ship-to codes.;
                  ApplicationArea=#Service;
                  SourceExpr=NewShiptoCode;
                  OnValidate=BEGIN
                               if NewShiptoCode <> '' then
                                 ShipToAddr.GET(NewCustomerNo,NewShiptoCode);
                             END;

                  OnLookup=BEGIN
                             CLEAR(ShipToAddr);
                             ShipToAddr.SETRANGE("Customer No.",NewCustomerNo);
                             ShipToAddr.Code := NewShiptoCode;
                             if PAGE.RUNMODAL(0,ShipToAddr) = ACTION::LookupOK then begin
                               ShipToAddr.GET(ShipToAddr."Customer No.",ShipToAddr.Code);
                               NewShiptoCode := ShipToAddr.Code;
                             end;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must fill in the New Customer No. field.';
      ServContract@1002 : Record "Service Contract Header";
      Cust@1005 : Record Customer;
      ShipToAddr@1006 : Record "Ship-to Address";
      ServContractLine@1027 : Record "Service Contract Line";
      TempServContract@1019 : TEMPORARY Record "Service Contract Header";
      TempServItem@1018 : TEMPORARY Record "Service Item";
      ServContractMgt@1017 : Codeunit ServContractManagement;
      ContractNo@1009 : Code[20];
      NewCustomerNo@1011 : Code[20];
      NewShiptoCode@1012 : Code[10];
      Text002@1013 : TextConst 'ENU=If you change the customer number or the ship-to code, the related service orders and sales invoices will not be updated.\\Do you want to continue?';
      Text004@1020 : TextConst 'ENU=(Multiple)';
      ContractNoText@1021 : Text[20];
      ServiceItemNoText@1022 : Text[20];
      Text005@1023 : TextConst 'ENU=Updating related objects...\\';
      Text006@1024 : TextConst 'ENU="Contract     "';
      Text007@1025 : TextConst 'ENU=" from "';
      Text008@1026 : TextConst 'ENU="Service item "';
      Text009@1015 : TextConst 'ENU=Are you sure that you want to change the customer number in %1 related contracts/quotes and %2 related service items?';
      Text010@1016 : TextConst 'ENU=You cannot select a customer with the status Blocked.';
      Text011@1003 : TextConst 'ENU=The customer number and the ship-to code that you have selected are the same as the ones on this document.';

    PROCEDURE SetRecord@1(ContrNo@1000 : Code[20]);
    BEGIN
      ContractNo := ContrNo;
      ServContract.GET(ServContract."Contract Type"::Contract,ContractNo);
      ServContract.TESTFIELD("Change Status",ServContract."Change Status"::Open);
    END;

    LOCAL PROCEDURE VerifyCustNo@3(CustNo@1000 : Code[20];ShiptoCode@1001 : Code[20]);
    BEGIN
      if CustNo <> '' then begin
        Cust.GET(CustNo);
        if Cust.Blocked = Cust.Blocked::All then
          ERROR(Text010);
        if not ShipToAddr.GET(CustNo,ShiptoCode) then
          NewShiptoCode := '';
      end;
    END;

    PROCEDURE InitializeRequest@2(NewCustomerNoFrom@1000 : Code[20];NewShipToCodeFrom@1001 : Code[10]);
    BEGIN
      NewCustomerNo := NewCustomerNoFrom;
      NewShiptoCode := NewShipToCodeFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

