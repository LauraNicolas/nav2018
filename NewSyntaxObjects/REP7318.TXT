OBJECT Report 7318 Whse.-Shipment - Create Pick
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Whse.-Shipment - Create Pick;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  CLEAR(CreatePick);
                  EverythingHandled := true;
                END;

    OnPostReport=VAR
                   WhseActivHeader@1000 : Record "Warehouse Activity Header";
                   TempWhseItemTrkgLine@1001 : TEMPORARY Record "Whse. Item Tracking Line";
                   ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
                 BEGIN
                   CreatePick.CreateWhseDocument(FirstActivityNo,LastActivityNo,true);

                   CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                   ItemTrackingMgt.UpdateWhseItemTrkgLines(TempWhseItemTrkgLine);

                   WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                   WhseActivHeader.SETRANGE("No.",FirstActivityNo,LastActivityNo);
                   if WhseActivHeader.FIND('-') then begin
                     repeat
                       if SortActivity > 0 then
                         WhseActivHeader.SortWhseDoc;
                     until WhseActivHeader.NEXT = 0;

                     if PrintDoc then
                       REPORT.RUN(REPORT::"Picking List",false,false,WhseActivHeader);
                   end else
                     ERROR(NothingToHandleErr);
                 END;

  }
  DATASET
  {
    { 6896;    ;DataItem;Warehouse Shipment Line;
               DataItemTable="Warehouse Shipment Line";
               DataItemTableView=SORTING("No.","Line No.");
               OnPreDataItem=BEGIN
                               CreatePick.SetValues(
                                 AssignedID,1,SortActivity,1,0,0,false,DoNotFillQtytoHandle,BreakbulkFilter,false);

                               COPYFILTERS(WhseShptLine);
                               SETFILTER("Qty. (Base)",'>0');
                             END;

               OnAfterGetRecord=VAR
                                  QtyToPick@1002 : Decimal;
                                  QtyToPickBase@1001 : Decimal;
                                BEGIN
                                  if Location."Directed Put-away and Pick" then
                                    CheckBin(0,0);

                                  WhseWkshLine.RESET;
                                  WhseWkshLine.SETCURRENTKEY(
                                    "Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                                  WhseWkshLine.SETRANGE(
                                    "Whse. Document Type",WhseWkshLine."Whse. Document Type"::Shipment);
                                  WhseWkshLine.SETRANGE("Whse. Document No.",WhseShptHeader."No.");

                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then begin
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
                                    QtyToPickBase := "Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
                                    QtyToPick := Quantity - ("Qty. Picked" + "Pick Qty.");
                                    if QtyToPick > 0 then begin
                                      if "Destination Type" = "Destination Type"::Customer then begin
                                        TESTFIELD("Destination No.");
                                        Cust.GET("Destination No.");
                                        Cust.CheckBlockedCustOnDocs(Cust,"Source Document",false,false);
                                      end;

                                      CreatePick.SetWhseShipment(
                                        "Warehouse Shipment Line",1,WhseShptHeader."Shipping Agent Code",
                                        WhseShptHeader."Shipping Agent Service Code",WhseShptHeader."Shipment Method Code");
                                      if not "Assemble to Order" then begin
                                        CreatePick.SetTempWhseItemTrkgLine(
                                          "No.",DATABASE::"Warehouse Shipment Line",
                                          '',0,"Line No.","Location Code");
                                        CreatePick.CreateTempLine(
                                          "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                          '',"Bin Code","Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
                                      end;
                                    end;
                                  end else
                                    WhseWkshLineFound := true;
                                END;

               OnPostDataItem=VAR
                                TempWhseItemTrkgLine@1000 : TEMPORARY Record "Whse. Item Tracking Line";
                                ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
                              BEGIN
                                CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                                if TempWhseItemTrkgLine.FIND('-') then
                                  repeat
                                    ItemTrackingMgt.CalcWhseItemTrkgLine(TempWhseItemTrkgLine);
                                  until TempWhseItemTrkgLine.NEXT = 0;
                              END;
                               }

    { 3252;1   ;DataItem;Assembly Header     ;
               DataItemTable="Assembly Header";
               DataItemTableView=SORTING("Document Type","No.");
               OnPreDataItem=VAR
                               SalesLine@1000 : Record "Sales Line";
                             BEGIN
                               if not "Warehouse Shipment Line"."Assemble to Order" then
                                 CurrReport.BREAK;

                               SalesLine.GET("Warehouse Shipment Line"."Source Subtype",
                                 "Warehouse Shipment Line"."Source No.",
                                 "Warehouse Shipment Line"."Source Line No.");
                               SalesLine.AsmToOrderExists("Assembly Header");
                               SETRANGE("Document Type","Document Type");
                               SETRANGE("No.","No.");
                             END;
                              }

    { 6911;2   ;DataItem;Assembly Line       ;
               DataItemTable="Assembly Line";
               DataItemTableView=SORTING("Document Type","Document No.","Line No.");
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               SETFILTER("Remaining Quantity (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY(
                                 "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                               WhseWkshLine.SETRANGE("Source Type",DATABASE::"Assembly Line");
                               WhseWkshLine.SETRANGE("Source Subtype","Assembly Header"."Document Type");
                               WhseWkshLine.SETRANGE("Source No.","Assembly Header"."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1001 : Codeunit "WMS Management";
                                BEGIN
                                  WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Source Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then
                                    CreatePick.CreateAssemblyPickLine("Assembly Line")
                                  else
                                    WhseWkshLineFound := true;
                                END;

               DataItemLink="Document Type"=FIELD("Document Type"),"Document No."=FIELD("No.") }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   if Location."Use ADCS" then
                     DoNotFillQtytoHandle := true;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Assigned User ID;
                  CaptionML=ENU=Assigned User ID;
                  ToolTipML=ENU=Specifies the ID of the assigned user to perform the pick instruction.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=AssignedID;
                  TableRelation="Warehouse Employee";
                  OnValidate=VAR
                               WhseEmployee@1000 : Record "Warehouse Employee";
                             BEGIN
                               if AssignedID <> '' then
                                 WhseEmployee.GET(AssignedID,Location.Code);
                             END;

                  OnLookup=VAR
                             WhseEmployee@1001 : Record "Warehouse Employee";
                             LookupWhseEmployee@1000 : Page "Warehouse Employee List";
                           BEGIN
                             WhseEmployee.SETCURRENTKEY("Location Code");
                             WhseEmployee.SETRANGE("Location Code",Location.Code);
                             LookupWhseEmployee.LOOKUPMODE(true);
                             LookupWhseEmployee.SETTABLEVIEW(WhseEmployee);
                             if LookupWhseEmployee.RUNMODAL = ACTION::LookupOK then begin
                               LookupWhseEmployee.GETRECORD(WhseEmployee);
                               AssignedID := WhseEmployee."User ID";
                             end;
                           END;
                            }

      { 2   ;2   ;Field     ;
                  Name=SortingMethodForActivityLines;
                  CaptionML=ENU=Sorting Method for Activity Lines;
                  ToolTipML=ENU=Specifies the method by which the lines in the instruction will be sorted. The options are by item, document, shelf or bin (if the location uses bins, this functions as the bin code), due date, bin ranking, or action type.;
                  OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type";
                  ApplicationArea=#Warehouse;
                  SourceExpr=SortActivity;
                  MultiLine=true }

      { 9   ;2   ;Field     ;
                  Name=Set Breakbulk Filter;
                  CaptionML=ENU=Set Breakbulk Filter;
                  ToolTipML=ENU=Specifies if you want the program to hide intermediate break-bulk lines when an entire larger unit of measure is converted to a smaller unit of measure and picked completely.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BreakbulkFilter }

      { 11  ;2   ;Field     ;
                  Name=Do Not Fill Qty. to Handle;
                  CaptionML=ENU=Do Not Fill Qty. to Handle;
                  ToolTipML=ENU=Specifies if you want to manually fill in the Quantity to Handle field on each line.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=DoNotFillQtytoHandle }

      { 3   ;2   ;Field     ;
                  Name=Print Document;
                  CaptionML=ENU=Print Document;
                  ToolTipML=ENU=Specifies if you want the pick document to be printed. Otherwise, you can print it later from the Whse. Pick window.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDoc }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Location@1027 : Record Location;
      WhseShptHeader@1007 : Record "Warehouse Shipment Header";
      WhseShptLine@1012 : Record "Warehouse Shipment Line";
      WhseWkshLine@1019 : Record "Whse. Worksheet Line";
      Cust@1006 : Record Customer;
      CreatePick@1003 : Codeunit "Create Pick";
      FirstActivityNo@1002 : Code[20];
      LastActivityNo@1001 : Code[20];
      AssignedID@1008 : Code[50];
      SortActivity@1005 : '" ",Item,Document,"Shelf or Bin","Due Date",Destination,"Bin Ranking","Action Type"';
      PrintDoc@1004 : Boolean;
      EverythingHandled@1017 : Boolean;
      WhseWkshLineFound@1020 : Boolean;
      HideValidationDialog@1022 : Boolean;
      DoNotFillQtytoHandle@1014 : Boolean;
      BreakbulkFilter@1029 : Boolean;
      SingleActivCreatedMsg@1011 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=Concatenates ExpiredItemMessageText";ENU=%1 activity no. %2 has been created.%3';
      SingleActivAndWhseShptCreatedMsg@1021 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=WhseActivHeader.Type;%4=Concatenates ExpiredItemMessageText";ENU=%1 activity no. %2 has been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %3 lines have been created.%4';
      MultipleActivCreatedMsg@1010 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=Concatenates ExpiredItemMessageText";ENU=%1 activities no. %2 to %3 have been created.%4';
      MultipleActivAndWhseShptCreatedMsg@1024 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=WhseActivHeader.Type;%5=Concatenates ExpiredItemMessageText";ENU=%1 activities no. %2 to %3 have been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %4 lines have been created.%5';
      NothingToHandleErr@1023 : TextConst 'ENU=There is nothing to handle.';

    [External]
    PROCEDURE SetWhseShipmentLine@1(VAR WhseShptLine2@1000 : Record "Warehouse Shipment Line";WhseShptHeader2@1001 : Record "Warehouse Shipment Header");
    BEGIN
      WhseShptLine.COPY(WhseShptLine2);
      WhseShptHeader := WhseShptHeader2;
      AssignedID := WhseShptHeader2."Assigned User ID";
      GetLocation(WhseShptLine."Location Code");
    END;

    [External]
    PROCEDURE GetResultMessage@3() : Boolean;
    VAR
      WhseActivHeader@1000 : Record "Warehouse Activity Header";
      ExpiredItemMessageText@1001 : Text[100];
    BEGIN
      ExpiredItemMessageText := CreatePick.GetExpiredItemMessage;
      if FirstActivityNo = '' then
        exit(false);

      if not HideValidationDialog then begin
        WhseActivHeader.Type := WhseActivHeader.Type::Pick;
        if WhseWkshLineFound then begin
          if FirstActivityNo = LastActivityNo then
            MESSAGE(
              STRSUBSTNO(
                SingleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,
                FORMAT(WhseActivHeader.Type),ExpiredItemMessageText))
          else
            MESSAGE(
              STRSUBSTNO(
                MultipleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,LastActivityNo,
                FORMAT(WhseActivHeader.Type),ExpiredItemMessageText));
        end else begin
          if FirstActivityNo = LastActivityNo then
            MESSAGE(
              STRSUBSTNO(SingleActivCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,ExpiredItemMessageText))
          else
            MESSAGE(
              STRSUBSTNO(MultipleActivCreatedMsg,FORMAT(WhseActivHeader.Type),
                FirstActivityNo,LastActivityNo,ExpiredItemMessageText));
        end;
      end;
      exit(EverythingHandled);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetLocation@7(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then begin
        if LocationCode = '' then
          CLEAR(Location)
        else
          Location.GET(LocationCode);
      end;
    END;

    [External]
    PROCEDURE Initialize@9(AssignedID2@1004 : Code[50];SortActivity2@1002 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';PrintDoc2@1001 : Boolean;DoNotFillQtytoHandle2@1000 : Boolean;BreakbulkFilter2@1003 : Boolean);
    BEGIN
      AssignedID := AssignedID2;
      SortActivity := SortActivity2;
      PrintDoc := PrintDoc2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

