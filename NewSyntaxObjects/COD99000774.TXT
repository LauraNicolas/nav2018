OBJECT Codeunit 99000774 Calculate Routing Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Prod. Order Line"=r,
                TableData "Work Center"=r,
                TableData "Calendar Entry"=r,
                TableData "Machine Center"=r,
                TableData "Manufacturing Setup"=r,
                TableData "Production Order"=r,
                TableData "Prod. Order Routing Line"=im,
                TableData "Prod. Order Capacity Need"=imd,
                TableData "Capacity Constrained Resource"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Error when calculating %1. Calendar is not available %2 %3 for %4 %5.';
      Text001@1001 : TextConst 'ENU=backward';
      Text002@1002 : TextConst 'ENU=before';
      Text003@1003 : TextConst 'ENU=forward';
      Text004@1004 : TextConst 'ENU=after';
      Text005@1005 : TextConst 'ENU=The sum of setup, move and wait time exceeds the available time in the period.';
      Text006@1006 : TextConst 'ENU=fixed schedule';
      Text007@1007 : TextConst 'ENU=Starting time must be before ending time.';
      MfgSetup@1008 : Record "Manufacturing Setup";
      Workcenter@1009 : Record "Work Center";
      Workcenter2@1010 : Record "Work Center";
      MachineCenter@1011 : Record "Machine Center";
      ProdOrder@1012 : Record "Production Order";
      ProdOrderLine@1013 : Record "Prod. Order Line";
      ProdOrderRoutingLine@1014 : Record "Prod. Order Routing Line";
      ProdOrderCapNeed@1015 : Record "Prod. Order Capacity Need";
      ProdOrderCapNeed2@1016 : Record "Prod. Order Capacity Need";
      CalendarEntry@1017 : Record "Calendar Entry";
      CalendarMgt@1018 : Codeunit CalendarManagement;
      NextCapNeedLineNo@1020 : Integer;
      ProdStartingTime@1021 : Time;
      ProdEndingTime@1022 : Time;
      ProdStartingDate@1023 : Date;
      ProdEndingDate@1024 : Date;
      MaxLotSize@1025 : Decimal;
      TotalLotSize@1026 : Decimal;
      ProdOrderQty@1027 : Decimal;
      TotalScrap@1028 : Decimal;
      LotSize@1029 : Decimal;
      RemainNeedQty@1030 : Decimal;
      ConCurrCap@1031 : Decimal;
      RunStartingDateTime@1032 : DateTime;
      RunEndingDateTime@1033 : DateTime;
      FirstInBatch@1034 : Boolean;
      FirstEntry@1035 : Boolean;
      UpdateDates@1036 : Boolean;
      WaitTimeOnly@1019 : Boolean;
      CurrentWorkCenterNo@1038 : Code[20];
      CurrentTimeFactor@1039 : Decimal;
      CurrentRounding@1040 : Decimal;

    LOCAL PROCEDURE TestForError@15(DirectionTxt@1000 : Text[30];BefAfterTxt@1001 : Text[30];Date@1002 : Date);
    BEGIN
      if RemainNeedQty <> 0 then
        ERROR(
          Text000,
          DirectionTxt,
          BefAfterTxt,
          Date,
          ProdOrderRoutingLine.Type,
          ProdOrderRoutingLine."No.");
    END;

    LOCAL PROCEDURE CreateCapNeed@7(NeedDate@1000 : Date;StartingTime@1001 : Time;EndingTime@1002 : Time;NeedQty@1003 : Decimal;TimeType@1004 : '"Setup Time","Run Time"';Direction@1005 : 'Forward,Backward');
    BEGIN
      ProdOrderCapNeed.INIT;
      ProdOrderCapNeed.Status := ProdOrder.Status;
      ProdOrderCapNeed."Prod. Order No." := ProdOrder."No.";
      ProdOrderCapNeed."Routing No." := ProdOrderRoutingLine."Routing No.";
      ProdOrderCapNeed."Routing Reference No." := ProdOrderRoutingLine."Routing Reference No.";
      ProdOrderCapNeed."Line No." := NextCapNeedLineNo;
      ProdOrderCapNeed.Type := ProdOrderRoutingLine.Type;
      ProdOrderCapNeed."No." := ProdOrderRoutingLine."No.";
      ProdOrderCapNeed."Work Center No." := ProdOrderRoutingLine."Work Center No.";
      ProdOrderCapNeed."Operation No." := ProdOrderRoutingLine."Operation No.";
      ProdOrderCapNeed."Work Center Group Code" := ProdOrderRoutingLine."Work Center Group Code";
      ProdOrderCapNeed.Date := NeedDate;
      ProdOrderCapNeed."Starting Time" := StartingTime;
      ProdOrderCapNeed."Ending Time" := EndingTime;
      ProdOrderCapNeed."Needed Time" := NeedQty;
      ProdOrderCapNeed."Needed Time (ms)" := NeedQty * CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code");
      ProdOrderCapNeed."Concurrent Capacities" := ConCurrCap;
      ProdOrderCapNeed.Efficiency := CalendarEntry.Efficiency;
      ProdOrderCapNeed."Requested Only" := false;
      ProdOrderCapNeed.Active := true;
      if ProdOrder.Status <> ProdOrder.Status::Simulated then begin
        ProdOrderCapNeed."Allocated Time" := NeedQty;
        ProdOrderRoutingLine."Expected Capacity Need" :=
          ProdOrderRoutingLine."Expected Capacity Need" + ProdOrderCapNeed."Needed Time (ms)";
      end;

      ProdOrderCapNeed."Time Type" := TimeType;
      if TimeType = TimeType::"Run Time" then
        ProdOrderCapNeed."Lot Size" := LotSize;

      if TimeType = TimeType::"Run Time" then
        if RemainNeedQty = 0 then begin
          if FirstInBatch then
            ProdOrderCapNeed."Send-Ahead Type" := ProdOrderCapNeed."Send-Ahead Type"::Both
          else
            case Direction of
              Direction::Forward:
                ProdOrderCapNeed."Send-Ahead Type" := ProdOrderCapNeed."Send-Ahead Type"::Output;
              Direction::Backward:
                ProdOrderCapNeed."Send-Ahead Type" := ProdOrderCapNeed."Send-Ahead Type"::Input;
            end;
        end else
          if FirstInBatch then
            case Direction of
              Direction::Forward:
                ProdOrderCapNeed."Send-Ahead Type" := ProdOrderCapNeed."Send-Ahead Type"::Input;
              Direction::Backward:
                ProdOrderCapNeed."Send-Ahead Type" := ProdOrderCapNeed."Send-Ahead Type"::Output;
            end;

      ProdOrderCapNeed.UpdateDatetime;

      ProdOrderCapNeed.INSERT;

      NextCapNeedLineNo := NextCapNeedLineNo + 1;
    END;

    LOCAL PROCEDURE CreateLoadBack@16(TimeType@1000 : '"Setup Time","Run Time","Wait Time","Move Time","Queue Time"';Write@1001 : Boolean);
    VAR
      OldCalendarEntry@1006 : Record "Calendar Entry";
      AvQtyBase@1002 : Decimal;
      RelevantEfficiency@1003 : Decimal;
      xConCurrCap@1005 : Decimal;
      RemainNeedQtyBase@1009 : Decimal;
      StartingTime@1004 : Time;
      StopLoop@1008 : Boolean;
    BEGIN
      xConCurrCap := 1;
      if (RemainNeedQty = 0) and ((not FirstEntry) or (not Write) or WaitTimeOnly) then
        exit;
      if CalendarEntry.FIND('+') then begin
        if (TimeType = TimeType::"Wait Time") and (CalendarEntry.Date < ProdEndingDate) then begin
          CalendarEntry.Date := ProdEndingDate;
          CreateCalendarEntry(CalendarEntry);
        end;
        GetCurrentWorkCenterTimeFactorAndRounding(CalendarEntry."Work Center No.");
        RemainNeedQtyBase := ROUND(RemainNeedQty * CurrentTimeFactor,CurrentRounding);
        repeat
          OldCalendarEntry := CalendarEntry;
          ConCurrCap := ProdOrderRoutingLine."Concurrent Capacities";
          if (ConCurrCap = 0) or (CalendarEntry.Capacity < ConCurrCap) then
            ConCurrCap := CalendarEntry.Capacity;
          if TimeType <> TimeType::"Run Time" then
            RemainNeedQtyBase := ROUND(RemainNeedQtyBase * ConCurrCap / xConCurrCap,CurrentRounding);
          xConCurrCap := ConCurrCap;
          AvQtyBase :=
            CalcAvailQtyBase(
              CalendarEntry,ProdEndingDate,ProdEndingTime,TimeType,ConCurrCap,false,CurrentTimeFactor,CurrentRounding);

          if AvQtyBase > RemainNeedQtyBase then
            AvQtyBase := RemainNeedQtyBase;
          if TimeType in [TimeType::"Setup Time",TimeType::"Run Time"] then
            RelevantEfficiency := CalendarEntry.Efficiency
          else
            RelevantEfficiency := 100;
          StartingTime :=
            CalendarMgt.CalcTimeSubtract(
              CalendarEntry."Ending Time",
              ROUND(AvQtyBase * 100 / RelevantEfficiency / ConCurrCap,1,'>'));
          RemainNeedQtyBase := RemainNeedQtyBase - AvQtyBase;
          if Write then begin
            RemainNeedQty := ROUND(RemainNeedQtyBase / CurrentTimeFactor,CurrentRounding);
            CreateCapNeed(
              CalendarEntry.Date,StartingTime,CalendarEntry."Ending Time",
              ROUND(AvQtyBase / CurrentTimeFactor,CurrentRounding),TimeType,1);
            FirstInBatch := false;
            FirstEntry := false;
          end;
          if UpdateDates and
             ((CalendarEntry."Capacity (Effective)" <> 0) or (TimeType = TimeType::"Wait Time"))
          then begin
            ProdOrderRoutingLine."Ending Time" := CalendarEntry."Ending Time";
            ProdOrderRoutingLine."Ending Date" := CalendarEntry.Date;
            UpdateDates := false;
          end;
          ProdEndingTime := StartingTime;
          ProdEndingDate := CalendarEntry.Date;
          ProdOrderRoutingLine."Starting Time" := StartingTime;
          ProdOrderRoutingLine."Starting Date" := CalendarEntry.Date;

          if (RemainNeedQtyBase = 0) and ((not FirstEntry) or (not Write)) then
            StopLoop := true
          else
            if TimeType = TimeType::"Wait Time" then begin
              StopLoop := false;
              ReturnNextCalendarEntry(CalendarEntry,OldCalendarEntry,0);
            end else begin
              CalendarEntry := OldCalendarEntry;
              StopLoop := CalendarEntry.NEXT(-1) = 0;
            end;
        until StopLoop;
        RemainNeedQty := ROUND(RemainNeedQtyBase / CurrentTimeFactor,CurrentRounding);
      end;
    END;

    LOCAL PROCEDURE CreateLoadForward@6(TimeType@1000 : '"Setup Time","Run Time","Wait Time","Move Time","Queue Time"';Write@1001 : Boolean;LoadFactor@1002 : Decimal);
    VAR
      OldCalendarEntry@1007 : Record "Calendar Entry";
      AvQtyBase@1003 : Decimal;
      RelevantEfficiency@1004 : Decimal;
      xConCurrCap@1006 : Decimal;
      RemainNeedQtyBase@1010 : Decimal;
      EndingTime@1005 : Time;
      StopLoop@1009 : Boolean;
    BEGIN
      xConCurrCap := 1;
      if (RemainNeedQty = 0) and ((not FirstEntry) or (not Write) or WaitTimeOnly) then
        exit;
      if CalendarEntry.FIND('-') then begin
        if (TimeType = TimeType::"Wait Time") and (CalendarEntry.Date > ProdStartingDate) then begin
          CalendarEntry.Date := ProdStartingDate;
          CreateCalendarEntry(CalendarEntry);
        end;
        if CalendarEntry."Capacity (Effective)" = 0 then begin
          CalendarEntry."Starting Time" := ProdStartingTime;
          CalendarEntry.Date := ProdStartingDate;
        end;
        if CalendarEntry."Work Center No." = Workcenter."No." then
          GetCurrentWorkCenterTimeFactorAndRounding(Workcenter."No.")
        else
          GetCurrentWorkCenterTimeFactorAndRounding(CalendarEntry."Work Center No.");
        RemainNeedQtyBase := ROUND(RemainNeedQty * CurrentTimeFactor,CurrentRounding);
        repeat
          OldCalendarEntry := CalendarEntry;
          ConCurrCap := ProdOrderRoutingLine."Concurrent Capacities";
          if (ConCurrCap = 0) or (CalendarEntry.Capacity < ConCurrCap) then
            ConCurrCap := CalendarEntry.Capacity;
          if TimeType <> TimeType::"Run Time" then
            RemainNeedQtyBase := ROUND(RemainNeedQtyBase * ConCurrCap / xConCurrCap,CurrentRounding);
          xConCurrCap := ConCurrCap;
          AvQtyBase :=
            CalcAvailQtyBase(
              CalendarEntry,ProdStartingDate,ProdStartingTime,TimeType,ConCurrCap,true,CurrentTimeFactor,CurrentRounding);

          if AvQtyBase * LoadFactor > RemainNeedQtyBase then
            AvQtyBase := ROUND(RemainNeedQtyBase / LoadFactor,CurrentRounding);

          if TimeType in [TimeType::"Setup Time",TimeType::"Run Time"] then
            RelevantEfficiency := CalendarEntry.Efficiency
          else
            RelevantEfficiency := 100;
          EndingTime :=
            CalendarEntry."Starting Time" + ROUND(AvQtyBase * 100 / RelevantEfficiency / ConCurrCap,1,'>');

          if AvQtyBase * LoadFactor >= 0 then
            RemainNeedQtyBase := RemainNeedQtyBase - AvQtyBase * LoadFactor;
          if Write then begin
            RemainNeedQty := ROUND(RemainNeedQtyBase / CurrentTimeFactor,CurrentRounding);
            CreateCapNeed(
              CalendarEntry.Date,CalendarEntry."Starting Time",EndingTime,
              ROUND(AvQtyBase * LoadFactor / CurrentTimeFactor,CurrentRounding),TimeType,0);
            FirstInBatch := false;
            FirstEntry := false;
          end;
          if UpdateDates and
             ((CalendarEntry."Capacity (Effective)" <> 0) or (TimeType = TimeType::"Wait Time"))
          then begin
            ProdOrderRoutingLine."Starting Time" := CalendarEntry."Starting Time";
            ProdOrderRoutingLine."Starting Date" := CalendarEntry.Date;
            UpdateDates := false;
          end;
          if (EndingTime = 000000T) and (AvQtyBase <> 0) then
            // Ending Time reached 24:00:00 so we need to move date as well
            CalendarEntry.Date := CalendarEntry.Date + 1;
          ProdStartingTime := EndingTime;
          ProdStartingDate := CalendarEntry.Date;
          ProdOrderRoutingLine."Ending Time" := EndingTime;
          ProdOrderRoutingLine."Ending Date" := CalendarEntry.Date;

          if ProdOrderRoutingLine."Schedule Manually" then begin
            if TimeType = TimeType::"Setup Time" then
              RunStartingDateTime := CREATEDATETIME(ProdStartingDate,ProdStartingTime);
            if RemainNeedQtyBase < 0 then
              RemainNeedQtyBase := 0;
          end;

          if (RemainNeedQtyBase = 0) and ((not FirstEntry) or (not Write)) and (AvQtyBase * LoadFactor >= 0) then
            StopLoop := true
          else
            if TimeType = TimeType::"Wait Time" then begin
              StopLoop := false;
              ReturnNextCalendarEntry(CalendarEntry,OldCalendarEntry,1);
            end else begin
              CalendarEntry := OldCalendarEntry;
              StopLoop := CalendarEntry.NEXT = 0;
            end;
        until StopLoop;
        RemainNeedQty := ROUND(RemainNeedQtyBase / CurrentTimeFactor,CurrentRounding);
      end;
    END;

    LOCAL PROCEDURE AvailableCapacity@13(CapType@1001 : '"Work Center","Machine Center"';CapNo@1002 : Code[20];StartingDateTime@1003 : DateTime;EndingDateTime@1004 : DateTime) AvQty@1000 : Decimal;
    VAR
      CalendarEntry2@1005 : Record "Calendar Entry";
      ConCurrCapacity@1006 : Decimal;
      Overlap@1007 : Decimal;
      TotalDuration@1008 : Decimal;
    BEGIN
      CalendarEntry2.SetCapacityFilters(CapType,CapNo);
      CalendarEntry2.SETFILTER("Starting Date-Time",'<=%1',EndingDateTime);
      CalendarEntry2.SETFILTER("Ending Date-Time",'>=%1',StartingDateTime);

      if CalendarEntry2.FIND('-') then
        repeat
          ConCurrCapacity := ProdOrderRoutingLine."Concurrent Capacities";
          if (ConCurrCapacity = 0) or (CalendarEntry2.Capacity < ConCurrCapacity) then
            ConCurrCapacity := CalendarEntry2.Capacity;

          Overlap := 0;
          if StartingDateTime > CalendarEntry2."Starting Date-Time" then
            Overlap := CalcDuration(CalendarEntry2."Starting Date-Time",StartingDateTime);
          if EndingDateTime < CalendarEntry2."Ending Date-Time" then
            Overlap := Overlap + CalcDuration(EndingDateTime,CalendarEntry2."Ending Date-Time");

          TotalDuration := CalcDuration(CalendarEntry2."Starting Date-Time",CalendarEntry2."Ending Date-Time");

          AvQty := AvQty +
            ROUND(
              ((TotalDuration - Overlap) / TotalDuration) *
              CalendarEntry2."Capacity (Effective)" / CalendarEntry2.Capacity * ConCurrCapacity,
              Workcenter."Calendar Rounding Precision");
        until CalendarEntry2.NEXT = 0;
      exit(AvQty);
    END;

    LOCAL PROCEDURE LoadCapBack@11(CapType@1000 : '"Work Center","Machine Center"';CapNo@1001 : Code[20];TimeType@1002 : '"Setup Time","Run Time","Wait Time","Move Time","Queue Time"';Write@1003 : Boolean);
    BEGIN
      ProdOrderRoutingLine."Starting Date" := ProdEndingDate;
      ProdOrderRoutingLine."Starting Time" := ProdEndingTime;

      CalendarEntry.SetCapacityFilters(CapType,CapNo);
      CalendarEntry.SETRANGE("Ending Date-Time",0DT,CREATEDATETIME(ProdEndingDate + 1,ProdEndingTime));
      CalendarEntry.SETRANGE("Starting Date-Time",0DT,CREATEDATETIME(ProdEndingDate,ProdEndingTime));

      CreateLoadBack(TimeType,Write);

      if RemainNeedQty = 0 then
        exit;

      TestForError(Text001,Text002,ProdOrderRoutingLine."Starting Date");
    END;

    LOCAL PROCEDURE LoadCapForward@12(CapType@1000 : '"Work Center","Machine Center"';CapNo@1001 : Code[20];TimeType@1002 : '"Setup Time","Run Time","Wait Time","Move Time","Queue Time"';Write@1003 : Boolean);
    VAR
      TotalAvailCapacity@1004 : Decimal;
      LoadFactor@1005 : Decimal;
    BEGIN
      ProdOrderRoutingLine."Ending Date" := ProdStartingDate;
      ProdOrderRoutingLine."Ending Time" := ProdStartingTime;

      CalendarEntry.SetCapacityFilters(CapType,CapNo);
      CalendarEntry.SETFILTER("Starting Date-Time",'>=%1',CREATEDATETIME(ProdStartingDate - 1,ProdStartingTime));
      if TimeType = TimeType::"Wait Time" then
        CalendarEntry.SETFILTER("Ending Date-Time",'>=%1',CREATEDATETIME(ProdStartingDate,000000T))
      else
        CalendarEntry.SETFILTER("Ending Date-Time",'>=%1',CREATEDATETIME(ProdStartingDate,ProdStartingTime));

      if ProdOrderRoutingLine."Schedule Manually" and (TimeType = TimeType::"Run Time") then begin
        if (RunEndingDateTime < RunStartingDateTime) or
           ((RunEndingDateTime = RunStartingDateTime) and
            (ProdOrderRoutingLine."Run Time" <> 0) and
            (ProdOrderRoutingLine."Input Quantity" <> 0))
        then
          ERROR(Text005);
        TotalAvailCapacity :=
          AvailableCapacity(CapType,CapNo,RunStartingDateTime,RunEndingDateTime);
        if TotalAvailCapacity = 0 then begin
          TestForError(Text006,Text002,DT2DATE(RunEndingDateTime));
          LoadFactor := 0;
        end else
          LoadFactor := ROUND(RemainNeedQty / TotalAvailCapacity,Workcenter."Calendar Rounding Precision",'>');
      end else
        LoadFactor := 1;

      CreateLoadForward(TimeType,Write,LoadFactor);

      if RemainNeedQty = 0 then
        exit;

      TestForError(Text003,Text004,ProdOrderRoutingLine."Ending Date");
    END;

    LOCAL PROCEDURE CalcMoveAndWaitBack@4();
    BEGIN
      UpdateDates := true;

      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Move Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Move Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");

      LoadCapBack(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.",3,false);
      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Wait Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Wait Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      LoadCapBack(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.",2,false);
    END;

    LOCAL PROCEDURE GetSendAheadStartingTime@5(ProdOrderRoutingLine2@1000 : Record "Prod. Order Routing Line";FirstLine@1001 : Boolean;VAR SendAheadLotSize@1002 : Decimal) : Boolean;
    VAR
      ProdOrderCapNeed3@1005 : Record "Prod. Order Capacity Need";
      ExpectedTime@1003 : Decimal;
      ResidualLotSize@1004 : Decimal;
    BEGIN
      ProdStartingDate := ProdOrderRoutingLine2."Starting Date";
      ProdStartingTime := ProdOrderRoutingLine2."Starting Time";
      SendAheadLotSize := MaxLotSize;
      if TotalLotSize = MaxLotSize then
        exit(true);

      with ProdOrderRoutingLine2 do begin
        if (ProdOrderRoutingLine."Send-Ahead Quantity" = 0) or
           (ProdOrderRoutingLine."Send-Ahead Quantity" >= MaxLotSize)
        then begin
          TotalLotSize := SendAheadLotSize;
          exit(false);
        end;
        SendAheadLotSize := ProdOrderRoutingLine."Send-Ahead Quantity";
        if MaxLotSize < (TotalLotSize + SendAheadLotSize) then begin
          SendAheadLotSize := MaxLotSize - TotalLotSize;
          TotalLotSize := MaxLotSize;
        end else begin
          if TotalLotSize = 0 then begin
            ResidualLotSize := MaxLotSize - SendAheadLotSize * ROUND(MaxLotSize / SendAheadLotSize,1,'<');
            if ResidualLotSize > 0 then
              SendAheadLotSize := ResidualLotSize;
          end;
          TotalLotSize := TotalLotSize + SendAheadLotSize;
        end;
        Workcenter2.GET("Work Center No.");
        if "Lot Size" = 0 then
          "Lot Size" := 1;
        ExpectedTime :=
          ROUND(
            "Run Time" * SendAheadLotSize / "Lot Size" *
            CalendarMgt.TimeFactor("Run Time Unit of Meas. Code") /
            CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
            Workcenter2."Calendar Rounding Precision");
        if FirstLine then begin
          ProdOrderCapNeed2.RESET;
          ProdOrderCapNeed2.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
          ProdOrderCapNeed2.SETRANGE(Status,Status);
          ProdOrderCapNeed2.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderCapNeed2.SETRANGE("Requested Only",false);
          ProdOrderCapNeed2.SETRANGE("Routing No.","Routing No.");
          ProdOrderCapNeed2.SETRANGE("Routing Reference No.","Routing Reference No.");
          ProdOrderCapNeed2.SETRANGE("Operation No.","Operation No.");
          if not ProdOrderCapNeed2.FIND('+') then begin
            ProdStartingDate := "Ending Date";
            ProdStartingTime := "Ending Time";
            exit(false);
          end;
        end;
        repeat
          if ExpectedTime <= ProdOrderCapNeed2."Needed Time" then begin
            ProdOrderCapNeed2."Ending Time" :=
              CalendarMgt.CalcTimeSubtract(
                ProdOrderCapNeed2."Ending Time",
                ROUND(
                  ExpectedTime *
                  CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code") /
                  ProdOrderCapNeed2.Efficiency * 100 /
                  ProdOrderCapNeed2."Concurrent Capacities",1));
            ProdOrderCapNeed2."Needed Time" :=
              ProdOrderCapNeed2."Needed Time" - ExpectedTime;
            ProdStartingTime := ProdOrderCapNeed2."Ending Time";
            ProdStartingDate := ProdOrderCapNeed2.Date;
            if MaxLotSize = TotalLotSize then begin
              ProdOrderCapNeed3.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
              ProdOrderCapNeed3.COPYFILTERS(ProdOrderCapNeed2);
              ProdOrderCapNeed3.SETRANGE("Time Type",ProdOrderCapNeed3."Time Type"::Setup);
              if ProdOrderCapNeed3.FINDFIRST then begin
                ProdStartingTime := ProdOrderCapNeed3."Starting Time";
                ProdStartingDate := ProdOrderCapNeed3.Date;
              end;
            end;
            exit(false);
          end else
            ExpectedTime := ExpectedTime - ProdOrderCapNeed2."Needed Time";
        until ProdOrderCapNeed2.NEXT(-1) = 0;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CalcRoutingLineBack@1(CalculateEndDate@1000 : Boolean);
    VAR
      ProdOrderRoutingLine2@1001 : Record "Prod. Order Routing Line";
      ProdOrderRoutingLine3@1002 : Record "Prod. Order Routing Line";
      ConstrainedCapacity@1003 : Record "Capacity Constrained Resource";
      ParentWorkCenter@1004 : Record "Capacity Constrained Resource";
      TmpProdOrderRtngLine@1008 : TEMPORARY Record "Prod. Order Routing Line";
      TmpProdOrderCapNeed@1009 : TEMPORARY Record "Prod. Order Capacity Need";
      SendAheadLotSize@1005 : Decimal;
      ParentIsConstrained@1006 : Boolean;
      ResourceIsConstrained@1007 : Boolean;
    BEGIN
      CalendarEntry.SETRANGE(Date,0D,ProdOrderRoutingLine."Ending Date");

      ProdEndingTime := ProdOrderRoutingLine."Ending Time";
      ProdEndingDate := ProdOrderRoutingLine."Ending Date";
      ProdStartingTime := ProdOrderRoutingLine."Ending Time";
      ProdStartingDate := ProdOrderRoutingLine."Ending Date";

      FirstEntry := true;
      if (ProdOrderRoutingLine."Next Operation No." <> '') and
         CalculateEndDate
      then begin
        CLEAR(ProdOrderRoutingLine3);

        TmpProdOrderRtngLine.RESET;
        TmpProdOrderRtngLine.DELETEALL;
        TmpProdOrderCapNeed.RESET;
        TmpProdOrderCapNeed.DELETEALL;

        SetRoutingLineFilters(ProdOrderRoutingLine,ProdOrderRoutingLine2);
        ProdOrderRoutingLine2.SETFILTER("Operation No.",ProdOrderRoutingLine."Next Operation No.");
        if ProdOrderRoutingLine2.FIND('-') then
          repeat
            TotalLotSize := 0;
            GetSendAheadStartingTime(ProdOrderRoutingLine2,true,SendAheadLotSize);

            TmpProdOrderRtngLine.COPY(ProdOrderRoutingLine2);
            TmpProdOrderRtngLine.INSERT;
            TmpProdOrderCapNeed.COPY(ProdOrderCapNeed2);
            if TmpProdOrderCapNeed."Operation No." = TmpProdOrderRtngLine."Operation No." then
              TmpProdOrderCapNeed.INSERT;

            SetMinDateTime(ProdEndingDate,ProdEndingTime,ProdStartingDate,ProdStartingTime);
            ProdOrderRoutingLine3 := ProdOrderRoutingLine2;
          until ProdOrderRoutingLine2.NEXT = 0;
        if ProdOrderRoutingLine3."Prod. Order No." <> '' then begin
          Workcenter2.GET(ProdOrderRoutingLine3."Work Center No.");
          ProdOrderRoutingLine3."Critical Path" := true;
          ProdOrderRoutingLine3.UpdateDatetime;
          ProdOrderRoutingLine3.MODIFY;
          if ProdOrderRoutingLine3.Type = ProdOrderRoutingLine3.Type::"Machine Center" then begin
            MachineCenter.GET(ProdOrderRoutingLine3."No.");
            Workcenter2."Queue Time" := MachineCenter."Queue Time";
            Workcenter2."Queue Time Unit of Meas. Code" :=
              MachineCenter."Queue Time Unit of Meas. Code";
          end;
          UpdateDates := false;
          RemainNeedQty :=
            ROUND(
              Workcenter2."Queue Time" *
              CalendarMgt.TimeFactor(Workcenter2."Queue Time Unit of Meas. Code") /
              CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
              Workcenter2."Calendar Rounding Precision");

          LoadCapBack(ProdOrderRoutingLine2.Type,ProdOrderRoutingLine2."No.",4,false);
        end else
          ProdOrderRoutingLine3 := ProdOrderRoutingLine2;
      end else begin
        TotalLotSize := MaxLotSize;
        SendAheadLotSize := MaxLotSize;
      end;

      // In case of Parallel Routing and the last operation is finished
      if ProdEndingDate = CalendarMgt.GetMaxDate then begin
        ProdOrderRoutingLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRoutingLine."Ending Time" := ProdOrderLine."Ending Time";

        ProdEndingTime := ProdOrderRoutingLine."Ending Time";
        ProdEndingDate := ProdOrderRoutingLine."Ending Date";
        ProdStartingTime := ProdOrderRoutingLine."Ending Time";
        ProdStartingDate := ProdOrderRoutingLine."Ending Date";

        TotalLotSize := MaxLotSize;
        SendAheadLotSize := MaxLotSize;
      end;

      UpdateDates := true;

      CalcMoveAndWaitBack;

      if ProdOrderRoutingLine."Schedule Manually" then // Move and wait time has been calculated
        exit;

      repeat
        LotSize := SendAheadLotSize;
        RemainNeedQty :=
          LotSize *
          ProdOrderRoutingLine.RunTimePer;
        RemainNeedQty :=
          ROUND(
            RemainNeedQty *
            CalendarMgt.TimeFactor(ProdOrderRoutingLine."Run Time Unit of Meas. Code") /
            CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
            Workcenter."Calendar Rounding Precision");

        with ProdOrderRoutingLine do begin
          ResourceIsConstrained := ConstrainedCapacity.GET(Type,"No.");
          ParentIsConstrained := ParentWorkCenter.GET(Type::"Work Center","Work Center No.");
          if not "Schedule Manually" and
             (ResourceIsConstrained or ParentIsConstrained)
          then
            FinitelyLoadCapBack(1,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained)
          else
            LoadCapBack(Type,"No.",1,true);
        end;

        ProdEndingDate := ProdOrderRoutingLine."Starting Date";
        ProdEndingTime := ProdOrderRoutingLine."Starting Time";
      until FindSendAheadStartingTime(TmpProdOrderRtngLine,TmpProdOrderCapNeed,SendAheadLotSize);

      ProdEndingDate := ProdOrderRoutingLine."Starting Date";
      ProdEndingTime := ProdOrderRoutingLine."Starting Time";
      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Setup Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Setup Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");

      with ProdOrderRoutingLine do begin
        ResourceIsConstrained := ConstrainedCapacity.GET(Type,"No.");
        ParentIsConstrained := ParentWorkCenter.GET(Type::"Work Center","Work Center No.");
        if not "Schedule Manually" and
           (ResourceIsConstrained or ParentIsConstrained)
        then
          FinitelyLoadCapBack(0,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained)
        else
          LoadCapBack(Type,"No.",0,true);

        "Starting Date" := ProdEndingDate;
        "Starting Time" := ProdEndingTime;

        if "Ending Date" = CalendarMgt.GetMaxDate then begin
          "Ending Date" := "Starting Date";
          "Ending Time" := "Starting Time";
        end;

        UpdateDatetime;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE GetSendAheadEndingTime@8(ProdOrderRoutingLine2@1000 : Record "Prod. Order Routing Line";FirstLine@1001 : Boolean;VAR SendAheadLotSize@1002 : Decimal) : Boolean;
    VAR
      ExpectedTime@1003 : Decimal;
      SetupTime@1006 : Decimal;
      xProdStartingDate@1004 : Date;
      xProdStartingTime@1005 : Time;
    BEGIN
      ProdEndingTime := ProdOrderRoutingLine2."Ending Time";
      ProdEndingDate := ProdOrderRoutingLine2."Ending Date";
      SendAheadLotSize := MaxLotSize;
      if TotalLotSize = MaxLotSize then
        exit(true);

      with ProdOrderRoutingLine2 do begin
        if ("Send-Ahead Quantity" = 0) or
           ("Send-Ahead Quantity" >= MaxLotSize)
        then begin
          TotalLotSize := SendAheadLotSize;
          exit(false);
        end;
        SendAheadLotSize := "Send-Ahead Quantity";
        if MaxLotSize < (TotalLotSize + SendAheadLotSize) then begin
          SendAheadLotSize := MaxLotSize - TotalLotSize;
          TotalLotSize := MaxLotSize;
        end else
          TotalLotSize := TotalLotSize + SendAheadLotSize;

        Workcenter2.GET("Work Center No.");
        if "Lot Size" = 0 then
          "Lot Size" := 1;
        if FirstLine then begin
          ExpectedTime :=
            ROUND(
              ("Setup Time" + "Run Time" * SendAheadLotSize / "Lot Size") *
              CalendarMgt.TimeFactor("Run Time Unit of Meas. Code") /
              CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
              Workcenter2."Calendar Rounding Precision");
          SetupTime := ROUND(
              "Setup Time" *
              CalendarMgt.TimeFactor("Setup Time Unit of Meas. Code") /
              CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
              Workcenter2."Calendar Rounding Precision");
        end else
          ExpectedTime :=
            ROUND(
              "Run Time" * "Send-Ahead Quantity" / "Lot Size" *
              CalendarMgt.TimeFactor("Run Time Unit of Meas. Code") /
              CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
              Workcenter2."Calendar Rounding Precision");
        if FirstLine then begin
          ProdOrderCapNeed2.RESET;
          ProdOrderCapNeed2.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
          ProdOrderCapNeed2.SETRANGE(Status,Status);
          ProdOrderCapNeed2.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderCapNeed2.SETRANGE("Requested Only",false);
          ProdOrderCapNeed2.SETRANGE("Routing No.","Routing No.");
          ProdOrderCapNeed2.SETRANGE("Routing Reference No.","Routing Reference No.");
          ProdOrderCapNeed2.SETRANGE("Operation No.","Operation No.");
          if not ProdOrderCapNeed2.FIND('-') then begin
            ProdEndingTime := "Starting Time";
            ProdEndingDate := "Starting Date";
            exit(false);
          end;
        end;
        repeat
          if ExpectedTime <= ProdOrderCapNeed2."Needed Time" then begin
            ProdOrderCapNeed2."Starting Time" :=
              ProdOrderCapNeed2."Starting Time" +
              ROUND(
                ((ExpectedTime - SetupTime) *
                 CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code") /
                 ProdOrderCapNeed2."Concurrent Capacities" +
                 SetupTime * CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code")) /
                ProdOrderCapNeed2.Efficiency * 100,1);
            ProdOrderCapNeed2."Needed Time" :=
              ProdOrderCapNeed2."Needed Time" - ExpectedTime;
            UpdateDates := false;
            xProdStartingTime := ProdStartingTime;
            xProdStartingDate := ProdStartingDate;
            ProdStartingTime := ProdOrderCapNeed2."Starting Time";
            ProdStartingDate := ProdOrderCapNeed2.Date;
            RemainNeedQty :=
              ROUND(
                "Wait Time" *
                CalendarMgt.TimeFactor("Wait Time Unit of Meas. Code") /
                CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
                Workcenter2."Calendar Rounding Precision");
            LoadCapForward(Type,"No.",2,false);

            RemainNeedQty :=
              ROUND(
                "Move Time" *
                CalendarMgt.TimeFactor("Move Time Unit of Meas. Code") /
                CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
                Workcenter2."Calendar Rounding Precision");
            LoadCapForward(Type,"No.",3,false);

            ProdEndingTime := ProdStartingTime;
            ProdEndingDate := ProdStartingDate;
            ProdStartingTime := xProdStartingTime;
            ProdStartingDate := xProdStartingDate;
            exit(false);
          end else
            ExpectedTime := ExpectedTime - ProdOrderCapNeed2."Needed Time";

        until ProdOrderCapNeed2.NEXT = 0;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CalcRoutingLineForward@3(CalculateStartDate@1000 : Boolean);
    VAR
      ProdOrderRoutingLine2@1001 : Record "Prod. Order Routing Line";
      ProdOrderRoutingLine3@1002 : Record "Prod. Order Routing Line";
      ConstrainedCapacity@1003 : Record "Capacity Constrained Resource";
      ParentWorkCenter@1004 : Record "Capacity Constrained Resource";
      TmpProdOrderRtngLine@1009 : TEMPORARY Record "Prod. Order Routing Line";
      TmpProdOrderCapNeed@1010 : TEMPORARY Record "Prod. Order Capacity Need";
      SendAheadLotSize@1005 : Decimal;
      InputQtyDiffTime@1008 : Decimal;
      ParentIsConstrained@1006 : Boolean;
      ResourceIsConstrained@1007 : Boolean;
    BEGIN
      CalendarEntry.SETRANGE(Date,ProdOrderRoutingLine."Starting Date",DMY2DATE(31,12,9999));

      ProdStartingTime := ProdOrderRoutingLine."Starting Time";
      ProdStartingDate := ProdOrderRoutingLine."Starting Date";
      ProdEndingTime := ProdOrderRoutingLine."Starting Time";
      ProdEndingDate := ProdOrderRoutingLine."Starting Date";

      InputQtyDiffTime := 0;

      FirstEntry := true;

      if (ProdOrderRoutingLine."Previous Operation No." <> '') and
         CalculateStartDate
      then begin
        CLEAR(ProdOrderRoutingLine3);

        TmpProdOrderRtngLine.RESET;
        TmpProdOrderRtngLine.DELETEALL;
        TmpProdOrderCapNeed.RESET;
        TmpProdOrderCapNeed.DELETEALL;

        SetRoutingLineFilters(ProdOrderRoutingLine,ProdOrderRoutingLine2);
        ProdOrderRoutingLine2.SETFILTER("Operation No.",ProdOrderRoutingLine."Previous Operation No.");
        if ProdOrderRoutingLine2.FIND('-') then
          repeat
            TotalLotSize := 0;
            GetSendAheadEndingTime(ProdOrderRoutingLine2,true,SendAheadLotSize);

            TmpProdOrderRtngLine.COPY(ProdOrderRoutingLine2);
            TmpProdOrderRtngLine.INSERT;
            TmpProdOrderCapNeed.COPY(ProdOrderCapNeed2);
            if TmpProdOrderRtngLine."Operation No." = TmpProdOrderCapNeed."Operation No." then
              TmpProdOrderCapNeed.INSERT;

            SetMaxDateTime(ProdStartingDate,ProdStartingTime,ProdEndingDate,ProdEndingTime);
            ProdOrderRoutingLine3 := ProdOrderRoutingLine2;

            if (ProdOrderRoutingLine2."Send-Ahead Quantity" > 0) and
               (ProdOrderRoutingLine2."Input Quantity" > ProdOrderRoutingLine."Input Quantity")
            then begin
              Workcenter2.GET(ProdOrderRoutingLine2."Work Center No.");
              InputQtyDiffTime :=
                (ProdOrderRoutingLine2."Input Quantity" - ProdOrderRoutingLine."Input Quantity") *
                ProdOrderRoutingLine2.RunTimePer;
              InputQtyDiffTime :=
                ROUND(
                  InputQtyDiffTime *
                  CalendarMgt.TimeFactor(ProdOrderRoutingLine2."Run Time Unit of Meas. Code") /
                  CalendarMgt.TimeFactor(Workcenter2."Unit of Measure Code"),
                  Workcenter2."Calendar Rounding Precision");
            end;
          until ProdOrderRoutingLine2.NEXT = 0
        else
          // parallel routing with finished first operation
          if ProdStartingDate = 0D then begin
            ProdOrderRoutingLine2.GET(ProdOrderRoutingLine.Status,
              ProdOrderRoutingLine."Prod. Order No.",ProdOrderRoutingLine."Routing Reference No.",
              ProdOrderRoutingLine."Routing No.",ProdOrderRoutingLine."Operation No.");
            ProdStartingDate := ProdOrderRoutingLine2."Starting Date";
            ProdStartingTime := ProdOrderRoutingLine2."Starting Time";
          end;
        if ProdOrderRoutingLine3."Prod. Order No." <> '' then begin
          ProdOrderRoutingLine3."Critical Path" := true;
          ProdOrderRoutingLine3.UpdateDatetime;
          ProdOrderRoutingLine3.MODIFY;
        end;
      end else begin
        TotalLotSize := MaxLotSize;
        SendAheadLotSize := MaxLotSize;
      end;
      RemainNeedQty :=
        ROUND(
          Workcenter."Queue Time" *
          CalendarMgt.TimeFactor(Workcenter."Queue Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      RemainNeedQty += InputQtyDiffTime;
      LoadCapForward(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.",4,false);
      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Setup Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Setup Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      UpdateDates := true;

      with ProdOrderRoutingLine do begin
        ResourceIsConstrained := ConstrainedCapacity.GET(Type,"No.");
        ParentIsConstrained := ParentWorkCenter.GET(Type::"Work Center","Work Center No.");
        if not "Schedule Manually" and
           (RemainNeedQty > 0) and (ResourceIsConstrained or ParentIsConstrained)
        then
          FinitelyLoadCapForward(0,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained)
        else
          LoadCapForward(Type,"No.",0,true);
      end;

      FirstInBatch := true;
      repeat
        if (InputQtyDiffTime > 0) and (TotalLotSize = MaxLotSize) then
          SetMaxDateTime(
            ProdStartingDate,ProdStartingTime,ProdOrderRoutingLine2."Ending Date",ProdOrderRoutingLine2."Ending Time");

        LotSize := SendAheadLotSize;
        RemainNeedQty := LotSize * ProdOrderRoutingLine.RunTimePer;
        RemainNeedQty :=
          ROUND(
            RemainNeedQty *
            CalendarMgt.TimeFactor(ProdOrderRoutingLine."Run Time Unit of Meas. Code") /
            CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
            Workcenter."Calendar Rounding Precision");

        with ProdOrderRoutingLine do begin
          ResourceIsConstrained := ConstrainedCapacity.GET(Type,"No.");
          ParentIsConstrained := ParentWorkCenter.GET(Type::"Work Center","Work Center No.");
          if not "Schedule Manually" and
             (RemainNeedQty > 0) and (ResourceIsConstrained or ParentIsConstrained)
          then
            FinitelyLoadCapForward(1,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained)
          else
            LoadCapForward(Type,"No.",1,true);
        end;

        ProdStartingDate := ProdOrderRoutingLine."Ending Date";
        ProdStartingTime := ProdOrderRoutingLine."Ending Time";
      until FindSendAheadEndingTime(TmpProdOrderRtngLine,TmpProdOrderCapNeed,SendAheadLotSize);

      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Wait Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Wait Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      LoadCapForward(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.",2,false);
      RemainNeedQty :=
        ROUND(
          ProdOrderRoutingLine."Move Time" *
          CalendarMgt.TimeFactor(ProdOrderRoutingLine."Move Time Unit of Meas. Code") /
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      LoadCapForward(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.",3,false);

      with ProdOrderRoutingLine do begin
        if "Starting Date" = 0D then begin
          "Starting Date" := "Ending Date";
          "Starting Time" := "Ending Time";
        end;

        UpdateDatetime;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE CalculateRoutingLineFixed@9();
    VAR
      FixedProdOrderRoutingLine@1000 : Record "Prod. Order Routing Line";
    BEGIN
      FixedProdOrderRoutingLine := ProdOrderRoutingLine;
      if FixedProdOrderRoutingLine."Starting Date-Time" > FixedProdOrderRoutingLine."Ending Date-Time" then
        ERROR(Text007);

      // Calculate wait and move time, find end of runtime
      CalcRoutingLineBack(true);
      RunEndingDateTime :=
        CREATEDATETIME(ProdOrderRoutingLine."Starting Date",ProdOrderRoutingLine."Starting Time");

      // Find start of runtime
      ProdOrderRoutingLine := FixedProdOrderRoutingLine;
      CalcRoutingLineForward(true);

      ProdOrderRoutingLine."Starting Time" := FixedProdOrderRoutingLine."Starting Time";
      ProdOrderRoutingLine."Starting Date" := FixedProdOrderRoutingLine."Starting Date";
      ProdOrderRoutingLine."Ending Time" := FixedProdOrderRoutingLine."Ending Time";
      ProdOrderRoutingLine."Ending Date" := FixedProdOrderRoutingLine."Ending Date";
      ProdOrderRoutingLine.UpdateDatetime;
      ProdOrderRoutingLine.MODIFY;
    END;

    [External]
    PROCEDURE CalculateRoutingLine@2(VAR ProdOrderRoutingLine2@1000 : Record "Prod. Order Routing Line";Direction@1001 : 'Forward,Backward';CalcStartEndDate@1002 : Boolean);
    VAR
      ProdOrderCapNeed@1003 : Record "Prod. Order Capacity Need";
      CostCalcMgt@1007 : Codeunit "Cost Calculation Management";
      ExpectedOperOutput@1005 : Decimal;
      ActualOperOutput@1006 : Decimal;
      TotalQtyPerOperation@1008 : Decimal;
      TotalCapacityPerOperation@1004 : Decimal;
      ConCurrCapacity@1009 : Decimal;
    BEGIN
      MfgSetup.GET;

      ProdOrderRoutingLine := ProdOrderRoutingLine2;

      WaitTimeOnly :=
        (ProdOrderRoutingLine."Setup Time" = 0) and (ProdOrderRoutingLine."Run Time" = 0) and
        (ProdOrderRoutingLine."Move Time" = 0);

      if ProdOrderRoutingLine."Ending Time" = 000000T then
        ProdOrderRoutingLine."Ending Time" := 000000T;

      if ProdOrderRoutingLine."Starting Time" = 000000T then
        ProdOrderRoutingLine."Starting Time" := 000000T;

      ProdOrderRoutingLine."Expected Operation Cost Amt." := 0;
      ProdOrderRoutingLine."Expected Capacity Ovhd. Cost" := 0;
      ProdOrderRoutingLine."Expected Capacity Need" := 0;

      ProdOrderCapNeed.RESET;
      ProdOrderCapNeed.SETRANGE(Status,ProdOrderRoutingLine.Status);
      ProdOrderCapNeed.SETRANGE("Prod. Order No.",ProdOrderRoutingLine."Prod. Order No.");
      ProdOrderCapNeed.SETRANGE("Requested Only",false);
      ProdOrderCapNeed.SETRANGE("Routing No.",ProdOrderRoutingLine."Routing No.");
      ProdOrderCapNeed.SETRANGE("Routing Reference No.",ProdOrderRoutingLine."Routing Reference No.");
      ProdOrderCapNeed.SETRANGE("Operation No.",ProdOrderRoutingLine."Operation No.");
      ProdOrderCapNeed.DELETEALL;

      NextCapNeedLineNo := 1;

      ProdOrderRoutingLine.TESTFIELD("Work Center No.");

      CurrentWorkCenterNo := '';
      Workcenter.GET(ProdOrderRoutingLine."Work Center No.");
      if ProdOrderRoutingLine.Type = ProdOrderRoutingLine.Type::"Machine Center" then begin
        MachineCenter.GET(ProdOrderRoutingLine."No.");
        Workcenter."Queue Time" := MachineCenter."Queue Time";
        Workcenter."Queue Time Unit of Meas. Code" := MachineCenter."Queue Time Unit of Meas. Code";
      end;
      if not CalcStartEndDate then
        CLEAR(Workcenter."Queue Time");
      ProdOrder.GET(ProdOrderRoutingLine.Status,ProdOrderRoutingLine."Prod. Order No.");

      ProdOrderQty := 0;
      TotalScrap := 0;
      TotalLotSize := 0;
      ProdOrderLine.SETRANGE(Status,ProdOrderRoutingLine.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderRoutingLine."Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.",ProdOrderRoutingLine."Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.",ProdOrderRoutingLine."Routing No.");
      if ProdOrderLine.FIND('-') then begin
        ExpectedOperOutput := 0;
        repeat
          ExpectedOperOutput := ExpectedOperOutput + ProdOrderLine."Quantity (Base)";
          TotalScrap := TotalScrap + ProdOrderLine."Scrap %";
        until ProdOrderLine.NEXT = 0;
        ActualOperOutput := CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRoutingLine);
        ProdOrderQty := ExpectedOperOutput - ActualOperOutput;
        if ProdOrderQty < 0 then
          ProdOrderQty := 0;
      end;

      MaxLotSize :=
        ProdOrderQty *
        (1 + ProdOrderRoutingLine."Scrap Factor % (Accumulated)") *
        (1 + TotalScrap / 100) +
        ProdOrderRoutingLine."Fixed Scrap Qty. (Accum.)";

      ProdOrderRoutingLine."Input Quantity" := MaxLotSize;

      if ActualOperOutput > 0 then begin
        TotalQtyPerOperation :=
          ExpectedOperOutput *
          (1 + ProdOrderRoutingLine."Scrap Factor % (Accumulated)") *
          (1 + TotalScrap / 100) +
          ProdOrderRoutingLine."Fixed Scrap Qty. (Accum.)";
      end else
        TotalQtyPerOperation := MaxLotSize;

      TotalCapacityPerOperation :=
        ROUND(
          TotalQtyPerOperation *
          ProdOrderRoutingLine.RunTimePer *
          CalendarMgt.QtyperTimeUnitofMeasure(
            ProdOrderRoutingLine."Work Center No.",ProdOrderRoutingLine."Run Time Unit of Meas. Code"),
          0.00001);
      if MfgSetup."Cost Incl. Setup" then begin
        ConCurrCapacity := ProdOrderRoutingLine."Concurrent Capacities";
        if ConCurrCapacity = 0 then
          ConCurrCapacity := 1;
        TotalCapacityPerOperation :=
          TotalCapacityPerOperation +
          ROUND(
            ConCurrCapacity * ProdOrderRoutingLine."Setup Time" *
            CalendarMgt.QtyperTimeUnitofMeasure(
              ProdOrderRoutingLine."Work Center No.",ProdOrderRoutingLine."Setup Time Unit of Meas. Code"),
            0.00001);
      end;
      CalcExpectedCost(ProdOrderRoutingLine,TotalQtyPerOperation,TotalCapacityPerOperation);

      if ProdOrderRoutingLine."Schedule Manually" then
        CalculateRoutingLineFixed
      else begin
        if Direction = Direction::Backward then
          CalcRoutingLineBack(CalcStartEndDate)
        else
          CalcRoutingLineForward(CalcStartEndDate);
      end;

      ProdOrderRoutingLine2 := ProdOrderRoutingLine;
    END;

    LOCAL PROCEDURE FinitelyLoadCapBack@14(TimeType@1000 : '"Setup Time","Run Time"';ConstrainedCapacity@1001 : Record "Capacity Constrained Resource";ResourceIsConstrained@1002 : Boolean;ParentWorkCenter@1003 : Record "Capacity Constrained Resource";ParentIsConstrained@1004 : Boolean);
    VAR
      LastProdOrderCapNeed@1005 : Record "Prod. Order Capacity Need";
      AvailTime@1006 : Decimal;
      ProdEndingDateTime@1007 : DateTime;
      ProdEndingDateTimeAddOneDay@1016 : DateTime;
      SetupTime@1008 : Decimal;
      TimetoProgram@1009 : Decimal;
      AvailCap@1010 : Decimal;
      DampTime@1011 : Decimal;
      xConCurrCap@1012 : Decimal;
      EndTime@1013 : Time;
      StartTime@1014 : Time;
    BEGIN
      if (RemainNeedQty = 0) and WaitTimeOnly then
        exit;
      EndTime := ProdEndingTime;
      ProdEndingDateTime := CREATEDATETIME(ProdEndingDate,ProdEndingTime);
      ProdEndingDateTimeAddOneDay := CREATEDATETIME(ProdEndingDate + 1,ProdEndingTime);
      ConCurrCap := ProdOrderRoutingLine."Concurrent Capacities";
      xConCurrCap := 1;

      LastProdOrderCapNeed.SetFilters(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.");

      CalendarEntry.SetCapacityFilters(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.");
      CalendarEntry.SETFILTER("Starting Date-Time",'<= %1',ProdEndingDateTime);
      CalendarEntry.SETFILTER("Ending Date-Time",'<= %1',ProdEndingDateTimeAddOneDay);
      if CalendarEntry.FIND('+') then
        repeat
          if (EndTime > CalendarEntry."Ending Time") or (EndTime < CalendarEntry."Starting Time") or
             (ProdEndingDate <> CalendarEntry.Date)
          then
            EndTime := CalendarEntry."Ending Time";
          StartTime := EndTime;

          if (ConCurrCap = 0) or (CalendarEntry.Capacity < ConCurrCap) then
            ConCurrCap := CalendarEntry.Capacity;
          if TimeType <> TimeType::"Run Time" then
            RemainNeedQty := RemainNeedQty * ConCurrCap / xConCurrCap;
          xConCurrCap := ConCurrCap;

          CalculateDailyLoad(AvailCap,DampTime,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained);
          SetupTime := 0;
          if TimeType = TimeType::"Run Time" then begin
            SetupTime :=
              ROUND(
                ProdOrderRoutingLine."Setup Time" *
                CalendarMgt.TimeFactor(ProdOrderRoutingLine."Setup Time Unit of Meas. Code") /
                CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
                Workcenter."Calendar Rounding Precision");
            SetupTime := SetupTime * ConCurrCap;
          end;
          if RemainNeedQty + SetupTime <= AvailCap + DampTime then
            AvailCap := AvailCap + DampTime;
          AvailCap :=
            ROUND(AvailCap *
              CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
              100 / CalendarEntry.Efficiency / ConCurrCap,1,'>');

          if AvailCap > 0 then begin
            ProdEndingDateTime := CREATEDATETIME(CalendarEntry.Date,EndTime);
            LastProdOrderCapNeed.SETFILTER(
              "Ending Date-Time",'>= %1 & < %2',CalendarEntry."Starting Date-Time",ProdEndingDateTimeAddOneDay);
            LastProdOrderCapNeed.SETFILTER(
              "Starting Date-Time",'>= %1 & < %2',CalendarEntry."Starting Date-Time",ProdEndingDateTime);
            if LastProdOrderCapNeed.FIND('+') then
              repeat
                if LastProdOrderCapNeed."Ending Time" < EndTime then begin
                  AvailTime := Min(CalendarMgt.CalcTimeDelta(EndTime,LastProdOrderCapNeed."Ending Time"),AvailCap);
                  if AvailTime > 0 then begin
                    UpdateTimesBack(AvailTime,AvailCap,TimetoProgram,StartTime,EndTime);
                    CreateCapNeed(CalendarEntry.Date,StartTime,EndTime,TimetoProgram,TimeType,1);
                    if FirstInBatch and FirstEntry then begin
                      FirstInBatch := false;
                      FirstEntry := false
                    end;
                    if UpdateDates then begin
                      ProdOrderRoutingLine."Ending Time" := EndTime;
                      ProdOrderRoutingLine."Ending Date" := CalendarEntry.Date;
                      UpdateDates := false
                    end;
                    EndTime := StartTime;
                  end;
                end;
                if LastProdOrderCapNeed."Starting Time" < EndTime then
                  EndTime := LastProdOrderCapNeed."Starting Time";
              until (LastProdOrderCapNeed.NEXT(-1) = 0) or (RemainNeedQty = 0) or (AvailCap = 0);

            if (AvailCap > 0) and (RemainNeedQty > 0) then begin
              AvailTime := Min(CalendarMgt.CalcTimeDelta(EndTime,CalendarEntry."Starting Time"),AvailCap);
              if AvailTime > 0 then begin
                UpdateTimesBack(AvailTime,AvailCap,TimetoProgram,StartTime,EndTime);
                if StartTime < CalendarEntry."Starting Time" then
                  StartTime := CalendarEntry."Starting Time";
                if TimetoProgram <> 0 then
                  CreateCapNeed(CalendarEntry.Date,StartTime,EndTime,TimetoProgram,TimeType,1);
                if FirstInBatch and FirstEntry then begin
                  FirstInBatch := false;
                  FirstEntry := false
                end;
                if UpdateDates then begin
                  ProdOrderRoutingLine."Ending Time" := EndTime;
                  ProdOrderRoutingLine."Ending Date" := CalendarEntry.Date;
                  UpdateDates := false
                end;
                EndTime := StartTime;
              end;
            end;
          end;
          if RemainNeedQty > 0 then begin
            if CalendarEntry.NEXT(-1) = 0 then begin
              TestForError(Text001,Text002,CalendarEntry.Date);
              exit;
            end;
            EndTime := CalendarEntry."Ending Time";
          end else begin
            ProdEndingTime := StartTime;
            ProdEndingDate := CalendarEntry.Date;
            ProdOrderRoutingLine."Starting Time" := StartTime;
            ProdOrderRoutingLine."Starting Date" := CalendarEntry.Date;
            exit;
          end;
        until false;
    END;

    LOCAL PROCEDURE FinitelyLoadCapForward@20(TimeType@1000 : '"Setup Time","Run Time"';ConstrainedCapacity@1001 : Record "Capacity Constrained Resource";ResourceIsConstrained@1002 : Boolean;ParentWorkCenter@1003 : Record "Capacity Constrained Resource";ParentIsConstrained@1004 : Boolean);
    VAR
      NextProdOrderCapNeed@1005 : Record "Prod. Order Capacity Need";
      AvailTime@1006 : Decimal;
      ProdStartingDateTime@1007 : DateTime;
      ProdStartingDateTimeSubOneDay@1016 : DateTime;
      RunTime@1008 : Decimal;
      TimetoProgram@1009 : Decimal;
      AvailCap@1010 : Decimal;
      DampTime@1011 : Decimal;
      xConCurrCap@1012 : Decimal;
      EndTime@1013 : Time;
      StartTime@1014 : Time;
    BEGIN
      if (RemainNeedQty = 0) and WaitTimeOnly then
        exit;
      StartTime := ProdStartingTime;
      ProdStartingDateTime := CREATEDATETIME(ProdStartingDate,ProdStartingTime);
      ProdStartingDateTimeSubOneDay := CREATEDATETIME(ProdStartingDate - 1,ProdStartingTime);
      ConCurrCap := ProdOrderRoutingLine."Concurrent Capacities";
      xConCurrCap := 1;

      NextProdOrderCapNeed.SetFilters(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.");

      CalendarEntry.SetCapacityFilters(ProdOrderRoutingLine.Type,ProdOrderRoutingLine."No.");
      CalendarEntry.SETFILTER("Starting Date-Time",'>= %1',ProdStartingDateTimeSubOneDay);
      CalendarEntry.SETFILTER("Ending Date-Time",'>= %1',ProdStartingDateTime);
      if CalendarEntry.FIND('-') then
        repeat
          if (StartTime < CalendarEntry."Starting Time") or (StartTime > CalendarEntry."Ending Time") or
             (ProdStartingDate <> CalendarEntry.Date)
          then
            StartTime := CalendarEntry."Starting Time";
          EndTime := StartTime;

          if (ConCurrCap = 0) or (CalendarEntry.Capacity < ConCurrCap) then
            ConCurrCap := CalendarEntry.Capacity;
          if TimeType <> TimeType::"Run Time" then
            RemainNeedQty := RemainNeedQty * ConCurrCap / xConCurrCap;
          xConCurrCap := ConCurrCap;

          CalculateDailyLoad(AvailCap,DampTime,ConstrainedCapacity,ResourceIsConstrained,ParentWorkCenter,ParentIsConstrained);
          RunTime := 0;
          if TimeType = TimeType::"Setup Time" then begin
            RunTime := LotSize * ProdOrderRoutingLine.RunTimePer;
            RunTime :=
              ROUND(RunTime *
                CalendarMgt.TimeFactor(ProdOrderRoutingLine."Run Time Unit of Meas. Code") /
                CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
                Workcenter."Calendar Rounding Precision");
          end;
          if RemainNeedQty + RunTime <= AvailCap + DampTime then
            AvailCap := AvailCap + DampTime;
          AvailCap :=
            ROUND(AvailCap *
              CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
              100 / CalendarEntry.Efficiency / ConCurrCap,1,'>');

          if AvailCap > 0 then begin
            ProdStartingDateTime := CREATEDATETIME(CalendarEntry.Date,StartTime);
            NextProdOrderCapNeed.SETFILTER(
              "Ending Date-Time",'> %1 & <= %2',ProdStartingDateTime,CalendarEntry."Ending Date-Time");
            NextProdOrderCapNeed.SETFILTER(
              "Starting Date-Time",'> %1 & <= %2',ProdStartingDateTimeSubOneDay,CalendarEntry."Ending Date-Time");
            if NextProdOrderCapNeed.FIND('-') then
              repeat
                if NextProdOrderCapNeed."Starting Time" > StartTime then begin
                  AvailTime := Min(CalendarMgt.CalcTimeDelta(NextProdOrderCapNeed."Starting Time",StartTime),AvailCap);
                  if AvailTime > 0 then begin
                    UpdateTimesForward(AvailTime,AvailCap,TimetoProgram,StartTime,EndTime);
                    CreateCapNeed(CalendarEntry.Date,StartTime,EndTime,TimetoProgram,TimeType,0);
                    if FirstInBatch and FirstEntry then begin
                      FirstInBatch := false;
                      FirstEntry := false
                    end;
                    if UpdateDates then begin
                      ProdOrderRoutingLine."Starting Time" := StartTime;
                      ProdOrderRoutingLine."Starting Date" := CalendarEntry.Date;
                      UpdateDates := false
                    end;
                    StartTime := EndTime;
                  end;
                end;
                if NextProdOrderCapNeed."Ending Time" > StartTime then
                  StartTime := NextProdOrderCapNeed."Ending Time"
              until (NextProdOrderCapNeed.NEXT = 0) or (RemainNeedQty = 0) or (AvailCap = 0);

            if (AvailCap > 0) and (RemainNeedQty > 0) then begin
              AvailTime := Min(CalendarMgt.CalcTimeDelta(CalendarEntry."Ending Time",StartTime),AvailCap);
              if AvailTime > 0 then begin
                UpdateTimesForward(AvailTime,AvailCap,TimetoProgram,StartTime,EndTime);
                if EndTime > CalendarEntry."Ending Time" then
                  EndTime := CalendarEntry."Ending Time";
                if TimetoProgram <> 0 then
                  CreateCapNeed(CalendarEntry.Date,StartTime,EndTime,TimetoProgram,TimeType,0);
                if FirstInBatch and FirstEntry then begin
                  FirstInBatch := false;
                  FirstEntry := false
                end;
                if UpdateDates then begin
                  ProdOrderRoutingLine."Starting Time" := StartTime;
                  ProdOrderRoutingLine."Starting Date" := CalendarEntry.Date;
                  UpdateDates := false
                end;
                StartTime := EndTime;
              end;
            end;
          end;
          if RemainNeedQty > 0 then begin
            if CalendarEntry.NEXT = 0 then begin
              TestForError(Text003,Text004,CalendarEntry.Date);
              exit;
            end;
            StartTime := CalendarEntry."Starting Time";
          end else begin
            ProdStartingTime := EndTime;
            ProdStartingDate := CalendarEntry.Date;
            ProdOrderRoutingLine."Ending Time" := EndTime;
            ProdOrderRoutingLine."Ending Date" := CalendarEntry.Date;
            exit;
          end;
        until false;
    END;

    LOCAL PROCEDURE CalculateDailyLoad@19(VAR AvailCap@1000 : Decimal;VAR DampTime@1001 : Decimal;ConstrainedCapacity@1002 : Record "Capacity Constrained Resource";IsResourceConstrained@1003 : Boolean;ParentWorkCenter@1004 : Record "Capacity Constrained Resource";IsParentConstrained@1005 : Boolean);
    VAR
      CurrentLoadBase@1006 : Decimal;
      AvailCapWorkCenter@1007 : Decimal;
      DampTimeWorkCenter@1008 : Decimal;
      CapEffectiveBase@1014 : Decimal;
    BEGIN
      GetCurrentWorkCenterTimeFactorAndRounding(Workcenter."No.");
      if (CalendarEntry."Capacity Type" = CalendarEntry."Capacity Type"::"Work Center") or
         ((CalendarEntry."Capacity Type" = CalendarEntry."Capacity Type"::"Machine Center") and
          (IsResourceConstrained xor IsParentConstrained))
      then begin
        with ConstrainedCapacity do begin
          if IsParentConstrained then begin
            ConstrainedCapacity := ParentWorkCenter;
            CalcCapConResWorkCenterLoadBase(ConstrainedCapacity,CalendarEntry.Date,CapEffectiveBase,CurrentLoadBase)
          end else
            CalcCapConResProdOrderNeedBase(ConstrainedCapacity,CalendarEntry.Date,CapEffectiveBase,CurrentLoadBase);
          CalcAvailCapBaseAndDampTime(
            ConstrainedCapacity,AvailCap,DampTime,CapEffectiveBase,CurrentLoadBase,CurrentTimeFactor,CurrentRounding);
        end;
      end else begin
        CalcCapConResProdOrderNeedBase(ConstrainedCapacity,CalendarEntry.Date,CapEffectiveBase,CurrentLoadBase);
        CalcAvailCapBaseAndDampTime(
          ConstrainedCapacity,AvailCap,DampTime,CapEffectiveBase,CurrentLoadBase,CurrentTimeFactor,CurrentRounding);

        CalcCapConResWorkCenterLoadBase(ParentWorkCenter,CalendarEntry.Date,CapEffectiveBase,CurrentLoadBase);
        CalcAvailCapBaseAndDampTime(
          ParentWorkCenter,AvailCapWorkCenter,DampTimeWorkCenter,CapEffectiveBase,CurrentLoadBase,CurrentTimeFactor,CurrentRounding);

        if AvailCap + DampTime > AvailCapWorkCenter + DampTimeWorkCenter then
          DampTime := DampTimeWorkCenter
        else
          if AvailCap + DampTime = AvailCapWorkCenter + DampTimeWorkCenter then
            DampTime := Max(DampTime,DampTimeWorkCenter);
        AvailCap := ROUND(Min(AvailCap,AvailCapWorkCenter),1);
      end;
    END;

    LOCAL PROCEDURE UpdateTimesBack@17(VAR AvailTime@1000 : Decimal;VAR AvailCap@1001 : Decimal;VAR TimetoProgram@1002 : Decimal;VAR StartTime@1003 : Time;EndTime@1004 : Time);
    VAR
      RoundedTimetoProgram@1005 : Decimal;
    BEGIN
      AvailTime :=
        ROUND(AvailTime / CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
          CalendarEntry.Efficiency / 100 * ConCurrCap,Workcenter."Calendar Rounding Precision");
      TimetoProgram := Min(RemainNeedQty,AvailTime);
      RoundedTimetoProgram :=
        ROUND(TimetoProgram *
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
          100 / CalendarEntry.Efficiency / ConCurrCap,1,'>');
      StartTime := CalendarMgt.CalcTimeSubtract(EndTime,RoundedTimetoProgram);
      RemainNeedQty := RemainNeedQty - TimetoProgram;
      if ProdOrderRoutingLine.Status <> ProdOrderRoutingLine.Status::Simulated then
        AvailCap := AvailCap - RoundedTimetoProgram;
    END;

    LOCAL PROCEDURE UpdateTimesForward@21(VAR AvailTime@1000 : Decimal;VAR AvailCap@1001 : Decimal;VAR TimetoProgram@1002 : Decimal;StartTime@1003 : Time;VAR EndTime@1004 : Time);
    VAR
      RoundedTimetoProgram@1005 : Decimal;
    BEGIN
      AvailTime :=
        ROUND(AvailTime / CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
          CalendarEntry.Efficiency / 100 * ConCurrCap,Workcenter."Calendar Rounding Precision");
      TimetoProgram := Min(RemainNeedQty,AvailTime);
      RoundedTimetoProgram :=
        ROUND(TimetoProgram *
          CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code") *
          100 / CalendarEntry.Efficiency / ConCurrCap,1,'>');
      EndTime := StartTime + RoundedTimetoProgram;
      RemainNeedQty := RemainNeedQty - TimetoProgram;
      if ProdOrderRoutingLine.Status <> ProdOrderRoutingLine.Status::Simulated then
        AvailCap := AvailCap - RoundedTimetoProgram;
    END;

    LOCAL PROCEDURE Min@18(Number1@1000 : Decimal;Number2@1001 : Decimal) : Decimal;
    BEGIN
      if Number1 <= Number2 then
        exit(Number1);

      exit(Number2);
    END;

    LOCAL PROCEDURE Max@10(Number1@1000 : Decimal;Number2@1001 : Decimal) : Decimal;
    BEGIN
      if Number1 >= Number2 then
        exit(Number1);

      exit(Number2);
    END;

    LOCAL PROCEDURE CalcExpectedCost@22(VAR ProdOrderRoutingLine@1000 : Record "Prod. Order Routing Line";TotalQtyPerOperation@1002 : Decimal;TotalCapacityPerOperation@1001 : Decimal);
    BEGIN
      if ProdOrderRoutingLine."Unit Cost Calculation" = ProdOrderRoutingLine."Unit Cost Calculation"::Time then begin
        ProdOrderRoutingLine."Expected Operation Cost Amt." :=
          TotalCapacityPerOperation * ProdOrderRoutingLine."Unit Cost per";
        ProdOrderRoutingLine."Expected Capacity Ovhd. Cost" :=
          TotalCapacityPerOperation *
          (ProdOrderRoutingLine."Direct Unit Cost" *
           ProdOrderRoutingLine."Indirect Cost %" / 100 + ProdOrderRoutingLine."Overhead Rate");
      end else begin
        ProdOrderRoutingLine."Expected Operation Cost Amt." :=
          TotalQtyPerOperation * ProdOrderRoutingLine."Unit Cost per";
        ProdOrderRoutingLine."Expected Capacity Ovhd. Cost" :=
          TotalQtyPerOperation *
          (ProdOrderRoutingLine."Direct Unit Cost" *
           ProdOrderRoutingLine."Indirect Cost %" / 100 + ProdOrderRoutingLine."Overhead Rate");
      end;
    END;

    LOCAL PROCEDURE CalcDuration@24(DateTime1@1001 : DateTime;DateTime2@1000 : DateTime) TotalDuration : Decimal;
    BEGIN
      TotalDuration :=
        ROUND(
          (DT2DATE(DateTime2) - DT2DATE(DateTime1)) * (86400000 / CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code")) +
          (DT2TIME(DateTime2) - DT2TIME(DateTime1)) / CalendarMgt.TimeFactor(Workcenter."Unit of Measure Code"),
          Workcenter."Calendar Rounding Precision");
      exit(TotalDuration);
    END;

    LOCAL PROCEDURE FindSendAheadEndingTime@23(VAR TmpProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";VAR TmpProdOrderCapNeed@1001 : Record "Prod. Order Capacity Need";VAR SendAheadLotSize@1002 : Decimal) : Boolean;
    VAR
      Result@1003 : Boolean;
      xTotalLotSize@1004 : Decimal;
      xSendAheadLotSize@1005 : Decimal;
      FirstLine@1006 : Boolean;
    BEGIN
      xTotalLotSize := TotalLotSize;
      xSendAheadLotSize := SendAheadLotSize;
      if TmpProdOrderRtngLine.FINDSET then begin
        repeat
          FirstLine := true;
          TotalLotSize := xTotalLotSize;
          SendAheadLotSize := xSendAheadLotSize;
          TmpProdOrderCapNeed.RESET;
          TmpProdOrderCapNeed.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
          TmpProdOrderCapNeed.SETRANGE(Status,TmpProdOrderRtngLine.Status);
          TmpProdOrderCapNeed.SETRANGE("Prod. Order No.",TmpProdOrderRtngLine."Prod. Order No.");
          TmpProdOrderCapNeed.SETRANGE("Requested Only",false);
          TmpProdOrderCapNeed.SETRANGE("Routing No.",TmpProdOrderRtngLine."Routing No.");
          TmpProdOrderCapNeed.SETRANGE("Routing Reference No.",TmpProdOrderRtngLine."Routing Reference No.");
          TmpProdOrderCapNeed.SETRANGE("Operation No.",TmpProdOrderRtngLine."Operation No.");
          if TmpProdOrderCapNeed.FINDFIRST then begin
            ProdOrderCapNeed2.COPY(TmpProdOrderCapNeed);
            TmpProdOrderCapNeed.DELETE;
            FirstLine := false;
          end;

          Result := Result or GetSendAheadEndingTime(TmpProdOrderRtngLine,FirstLine,SendAheadLotSize);
          TmpProdOrderCapNeed := ProdOrderCapNeed2;
          if TmpProdOrderRtngLine."Operation No." = TmpProdOrderCapNeed."Operation No." then
            TmpProdOrderCapNeed.INSERT;
        until TmpProdOrderRtngLine.NEXT = 0;
      end else
        Result := GetSendAheadEndingTime(TmpProdOrderRtngLine,false,SendAheadLotSize);

      exit(Result);
    END;

    LOCAL PROCEDURE FindSendAheadStartingTime@25(VAR TmpProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";VAR TmpProdOrderCapNeed@1001 : Record "Prod. Order Capacity Need";VAR SendAheadLotSize@1002 : Decimal) : Boolean;
    VAR
      Result@1003 : Boolean;
      xTotalLotSize@1004 : Decimal;
      xSendAheadLotSize@1005 : Decimal;
      FirstLine@1006 : Boolean;
    BEGIN
      xTotalLotSize := TotalLotSize;
      xSendAheadLotSize := SendAheadLotSize;
      if TmpProdOrderRtngLine.FINDSET then begin
        repeat
          FirstLine := true;
          TotalLotSize := xTotalLotSize;
          SendAheadLotSize := xSendAheadLotSize;
          TmpProdOrderCapNeed.RESET;
          TmpProdOrderCapNeed.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
          TmpProdOrderCapNeed.SETRANGE(Status,TmpProdOrderRtngLine.Status);
          TmpProdOrderCapNeed.SETRANGE("Prod. Order No.",TmpProdOrderRtngLine."Prod. Order No.");
          TmpProdOrderCapNeed.SETRANGE("Requested Only",false);
          TmpProdOrderCapNeed.SETRANGE("Routing No.",TmpProdOrderRtngLine."Routing No.");
          TmpProdOrderCapNeed.SETRANGE("Routing Reference No.",TmpProdOrderRtngLine."Routing Reference No.");
          TmpProdOrderCapNeed.SETRANGE("Operation No.",TmpProdOrderRtngLine."Operation No.");
          if TmpProdOrderCapNeed.FINDFIRST then begin
            ProdOrderCapNeed2.COPY(TmpProdOrderCapNeed);
            TmpProdOrderCapNeed.DELETE;
            FirstLine := false;
          end;

          Result := Result or GetSendAheadStartingTime(TmpProdOrderRtngLine,FirstLine,SendAheadLotSize);
          TmpProdOrderCapNeed := ProdOrderCapNeed2;
          if TmpProdOrderRtngLine."Operation No." = TmpProdOrderCapNeed."Operation No." then
            TmpProdOrderCapNeed.INSERT;
        until TmpProdOrderRtngLine.NEXT = 0;
      end else
        Result := GetSendAheadStartingTime(TmpProdOrderRtngLine,false,SendAheadLotSize);

      exit(Result);
    END;

    [External]
    PROCEDURE ReturnNextCalendarEntry@26(VAR CalendarEntry2@1000 : Record "Calendar Entry";OldCalendarEntry@1001 : Record "Calendar Entry";Direction@1002 : 'Backward,Forward');
    BEGIN
      CalendarEntry2 := OldCalendarEntry;
      CalendarEntry2.SETRANGE(Date,CalendarEntry2.Date);

      if Direction = Direction::Backward then begin
        CalendarEntry2.FIND('-');           // rewind within the same day
        CalendarEntry2.SETRANGE(Date);
        if CalendarEntry2.NEXT(-1) = 0 then
          TestForError(Text001,Text002,CalendarEntry2.Date);

        if (CalendarEntry2.Date + 1) < OldCalendarEntry.Date then begin
          CalendarEntry2.Date := OldCalendarEntry.Date - 1;
          CreateCalendarEntry(CalendarEntry2);
        end;
      end else begin
        CalendarEntry2.FIND('+');            // rewind within the same day
        CalendarEntry2.SETRANGE(Date);
        if CalendarEntry2.NEXT = 0 then
          TestForError(Text003,Text004,CalendarEntry2.Date);

        if OldCalendarEntry.Date < (CalendarEntry2.Date - 1) then begin
          CalendarEntry2.Date := OldCalendarEntry.Date + 1;
          CreateCalendarEntry(CalendarEntry2);
        end;
      end;
    END;

    LOCAL PROCEDURE CreateCalendarEntry@27(VAR CalendarEntry2@1000 : Record "Calendar Entry");
    BEGIN
      with CalendarEntry2 do begin
        "Ending Time" := 000000T;
        "Starting Time" := 000000T;
        Efficiency := 100;
        "Absence Capacity" := 0;
        "Capacity (Total)" := 0;
        "Capacity (Effective)" := "Capacity (Total)";
        "Starting Date-Time" := CREATEDATETIME(Date,"Starting Time");
        "Ending Date-Time" := "Starting Date-Time" + 86400000;
        if not GET("Capacity Type","No.",Date,"Starting Time","Ending Time","Work Shift Code") then
          INSERT;
      end;
    END;

    LOCAL PROCEDURE GetCurrentWorkCenterTimeFactorAndRounding@29(WorkCenterNo@1000 : Code[20]);
    VAR
      WorkCenter@1001 : Record "Work Center";
    BEGIN
      if CurrentWorkCenterNo = WorkCenterNo then
        exit;

      WorkCenter.GET(WorkCenterNo);
      CurrentTimeFactor := CalendarMgt.TimeFactor(WorkCenter."Unit of Measure Code");
      CurrentRounding := WorkCenter."Calendar Rounding Precision";
    END;

    LOCAL PROCEDURE CalcCapConResWorkCenterLoadBase@34(CapacityConstrainedResource@1000 : Record "Capacity Constrained Resource";DateFilter@1001 : Date;VAR CapEffectiveBase@1003 : Decimal;VAR LoadBase@1002 : Decimal);
    BEGIN
      CapEffectiveBase := 0;
      LoadBase := 0;

      with CapacityConstrainedResource do begin
        SETRANGE("Date Filter",DateFilter);
        CALCFIELDS("Capacity (Effective)","Work Center Load Qty.");
        if "Capacity (Effective)" <> 0 then begin
          CapEffectiveBase := ROUND("Capacity (Effective)" * CurrentTimeFactor,CurrentRounding);
          LoadBase := ROUND("Work Center Load Qty." * CurrentTimeFactor,CurrentRounding);
        end;
      end;
    END;

    LOCAL PROCEDURE CalcCapConResProdOrderNeedBase@37(CapacityConstrainedResource@1000 : Record "Capacity Constrained Resource";DateFilter@1001 : Date;VAR CapEffectiveBase@1003 : Decimal;VAR LoadBase@1002 : Decimal);
    BEGIN
      CapEffectiveBase := 0;
      LoadBase := 0;

      with CapacityConstrainedResource do begin
        SETRANGE("Date Filter",DateFilter);
        CALCFIELDS("Capacity (Effective)","Prod. Order Need Qty.");
        if "Capacity (Effective)" <> 0 then begin
          CapEffectiveBase := ROUND("Capacity (Effective)" * CurrentTimeFactor,CurrentRounding);
          LoadBase := ROUND("Prod. Order Need Qty." * CurrentTimeFactor,CurrentRounding);
        end;
      end;
    END;

    [External]
    PROCEDURE CalcAvailCapBaseAndDampTime@47(CapacityConstrainedResource@1010 : Record "Capacity Constrained Resource";VAR AvailCap@1000 : Decimal;VAR DampTime@1001 : Decimal;CapEffectiveBase@1002 : Decimal;LoadBase@1004 : Decimal;TimeFactor@1011 : Decimal;Rounding@1009 : Decimal);
    VAR
      AvailCapBase@1008 : Decimal;
      AvailCapBaseMax@1006 : Decimal;
      LoadPct@1007 : Decimal;
      DampenerPct@1003 : Decimal;
      CriticalLoadPct@1005 : Decimal;
    BEGIN
      AvailCap := 0;
      DampTime := 0;

      if CapEffectiveBase = 0 then
        exit;

      CriticalLoadPct := CapacityConstrainedResource."Critical Load %";
      AvailCapBaseMax := ROUND(CapEffectiveBase * CriticalLoadPct / 100,Rounding);
      AvailCapBase := Max(0,AvailCapBaseMax - LoadBase);
      AvailCap := ROUND(AvailCapBase / TimeFactor,Rounding);

      LoadPct := ROUND(LoadBase / CapEffectiveBase * 100,Rounding);
      DampenerPct := CapacityConstrainedResource."Dampener (% of Total Capacity)";
      DampTime :=
        ROUND(CapEffectiveBase / TimeFactor * Min(DampenerPct,CriticalLoadPct + DampenerPct - LoadPct) / 100,Rounding);
      DampTime := ROUND(Max(0,DampTime),1);
    END;

    [External]
    PROCEDURE CalcAvailQtyBase@30(VAR CalendarEntry@1016 : Record "Calendar Entry";ProdStartDate@1003 : Date;ProdStartTime@1002 : Time;TimeType@1005 : '"Setup Time","Run Time","Wait Time","Move Time","Queue Time"';ConCurrCap@1007 : Decimal;IsForward@1004 : Boolean;TimeFactor@1011 : Decimal;Rounding@1008 : Decimal) AvQtyBase : Decimal;
    VAR
      CalendarStartTime@1001 : Time;
      CalendarEndTime@1000 : Time;
      CalcFactor@1015 : Integer;
      ModifyCalendar@1006 : Boolean;
    BEGIN
      if IsForward then begin
        CalendarStartTime := CalendarEntry."Starting Time";
        CalendarEndTime := CalendarEntry."Ending Time";
        CalcFactor := -1
      end else begin
        CalendarStartTime := CalendarEntry."Ending Time";
        CalendarEndTime := CalendarEntry."Starting Time";
        CalcFactor := 1;
      end;
      ModifyCalendar := false;

      if (((CalendarStartTime < ProdStartTime) and IsForward) or
          ((CalendarStartTime > ProdStartTime) and not IsForward)) and
         (CalendarEntry.Date = ProdStartDate)
      then begin
        case TimeType of
          TimeType::"Setup Time",
          TimeType::"Run Time":
            AvQtyBase :=
              ROUND(
                ABS(CalendarEndTime - ProdStartTime) *
                CalendarEntry.Efficiency / 100 * ConCurrCap,Rounding);
          TimeType::"Move Time",
          TimeType::"Queue Time":
            AvQtyBase :=
              ROUND(
                ABS(CalendarEndTime - ProdStartTime) *
                ConCurrCap,Rounding);
          TimeType::"Wait Time":
            begin
              AvQtyBase := CalcAvailQtyBaseForWaitTime(ProdStartTime,ProdStartDate,CalendarEntry.Date,CalcFactor,IsForward);
              AvQtyBase := ROUND(AvQtyBase * ConCurrCap,Rounding);
            end;
        end;
        ModifyCalendar := true;
      end else
        if (CalendarEntry.Capacity = CalendarEntry."Absence Capacity") and
           (TimeType <> TimeType::"Wait Time")
        then
          AvQtyBase := 0
        else
          case TimeType of
            TimeType::"Setup Time",
            TimeType::"Run Time":
              AvQtyBase :=
                ROUND(
                  TimeFactor * CalendarEntry."Capacity (Effective)" /
                  (CalendarEntry.Capacity - CalendarEntry."Absence Capacity") * ConCurrCap,
                  Rounding);
            TimeType::"Move Time",
            TimeType::"Queue Time":
              AvQtyBase :=
                ROUND(
                  TimeFactor * CalendarEntry."Capacity (Total)" /
                  (CalendarEntry.Capacity - CalendarEntry."Absence Capacity") * ConCurrCap,
                  Rounding);
            TimeType::"Wait Time":
              begin
                AvQtyBase := CalcAvailQtyBaseForWaitTime(ProdStartTime,ProdStartDate,CalendarEntry.Date,CalcFactor,IsForward);
                AvQtyBase := ROUND(AvQtyBase * ConCurrCap,Rounding);
                ModifyCalendar := true;
              end;
          end;

      if ModifyCalendar then
        if IsForward then
          CalendarEntry."Starting Time" := ProdStartTime
        else
          CalendarEntry."Ending Time" := ProdStartTime;
    END;

    LOCAL PROCEDURE CalcAvailQtyBaseForWaitTime@28(ProdStartTime@1000 : Time;ProdStartDate@1001 : Date;CalendarEntryDate@1003 : Date;CalcFactor@1004 : Integer;IsForward@1002 : Boolean) : Decimal;
    BEGIN
      if (ProdStartTime = 000000T) and ((CalendarEntryDate <> ProdStartDate) or IsForward) then
        exit(86400000);
      exit((86400000 + (ProdStartTime - 000000T) * CalcFactor) mod 86400000);
    END;

    LOCAL PROCEDURE SetMaxDateTime@40(VAR ResultingDate@1000 : Date;VAR ResultingTime@1001 : Time;DateToCompare@1002 : Date;TimeToCompare@1003 : Time);
    BEGIN
      if ((ResultingDate = DateToCompare) and (ResultingTime >= TimeToCompare)) or
         (ResultingDate > DateToCompare)
      then
        exit;
      ResultingDate := DateToCompare;
      ResultingTime := TimeToCompare;
    END;

    LOCAL PROCEDURE SetMinDateTime@43(VAR ResultingDate@1000 : Date;VAR ResultingTime@1001 : Time;DateToCompare@1002 : Date;TimeToCompare@1003 : Time);
    BEGIN
      if ((ResultingDate = DateToCompare) and (ResultingTime <= TimeToCompare)) or
         (ResultingDate < DateToCompare)
      then
        exit;
      ResultingDate := DateToCompare;
      ResultingTime := TimeToCompare
    END;

    LOCAL PROCEDURE SetRoutingLineFilters@31(ProdOrderRoutingLine@1000 : Record "Prod. Order Routing Line";VAR ProdOrderRoutingLine2@1001 : Record "Prod. Order Routing Line");
    BEGIN
      with ProdOrderRoutingLine2 do begin
        SETRANGE(Status,ProdOrderRoutingLine.Status);
        SETRANGE("Prod. Order No.",ProdOrderRoutingLine."Prod. Order No.");
        SETRANGE("Routing Reference No.",ProdOrderRoutingLine."Routing Reference No.");
        SETRANGE("Routing No.",ProdOrderRoutingLine."Routing No.");
        SETFILTER("Routing Status",'<>%1',"Routing Status"::Finished);
      end;
    END;

    BEGIN
    END.
  }
}

