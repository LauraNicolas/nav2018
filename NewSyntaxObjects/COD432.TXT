OBJECT Codeunit 432 Consolidate
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Business Unit";
    Permissions=TableData "G/L Entry"=rimd;
    OnRun=VAR
            PostDebit@1002 : Boolean;
            PreviousDate@1000 : Date;
            i@1001 : Integer;
          BEGIN
            BusUnit := Rec;
            if NORMALDATE(EndingDate) - NORMALDATE(StartingDate) + 1 > ARRAYLEN(RoundingResiduals) then
              ReportError(STRSUBSTNO(Text008,ARRAYLEN(RoundingResiduals)));

            if ("Starting Date" <> 0D) or ("Ending Date" <> 0D) then begin
              if "Starting Date" = 0D then
                ReportError(STRSUBSTNO(
                    Text033,FIELDCAPTION("Starting Date"),
                    FIELDCAPTION("Ending Date"),"Company Name"));
              if "Ending Date" = 0D then
                ReportError(STRSUBSTNO(
                    Text033,FIELDCAPTION("Ending Date"),
                    FIELDCAPTION("Starting Date"),"Company Name"));
              if "Starting Date" > "Ending Date" then
                ReportError(STRSUBSTNO(
                    Text032,FIELDCAPTION("Starting Date"),
                    FIELDCAPTION("Ending Date"),"Company Name"));
            end;

            ConsolidatingClosingDate :=
              (StartingDate = EndingDate) and
              (StartingDate <> NORMALDATE(StartingDate));
            if (StartingDate <> NORMALDATE(StartingDate)) and
               (StartingDate <> EndingDate)
            then
              ReportError(Text030);

            ReadSourceCodeSetup;
            ClearInternals;
            Window.OPEN(Text001 + Text002 + Text003 + Text004);
            Window.UPDATE(1,BusUnit.Code);

            if not TestMode then begin
              UpdatePhase(Text018);
              ClearPreviousConsolidation;
            end;

            if ("Last Balance Currency Factor" <> 0) and
               ("Balance Currency Factor" <> "Last Balance Currency Factor")
            then begin
              UpdatePhase(Text019);
              UpdatePriorPeriodBalances;
            end;

            // Consolidate Current Entries
            UpdatePhase(Text020);
            CLEAR(GenJnlLine);
            GenJnlLine."Business Unit Code" := BusUnit.Code;
            GenJnlLine."Document No." := GLDocNo;
            GenJnlLine."Source Code" := ConsolidSourceCode;
            TempSubsidGLEntry.RESET;
            TempSubsidGLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
            TempSubsidGLEntry.SETRANGE("Posting Date",StartingDate,EndingDate);
            TempSubsidGLAcc.RESET;
            if TempSubsidGLAcc.FINDSET then
              repeat
                Window.UPDATE(3,TempSubsidGLAcc."No.");
                DimBufMgt.DeleteAllDimensions;
                InitializeGLAccount(PostDebit);
                PreviousDate := 0D;
                if TempSubsidGLEntry.FINDSET then
                  repeat
                    if (TempSubsidGLEntry."Posting Date" <> NORMALDATE(TempSubsidGLEntry."Posting Date")) and
                       not ConsolidatingClosingDate
                    then
                      ReportError(
                        STRSUBSTNO(Text031,
                          TempSubsidGLEntry.TABLECAPTION,
                          TempSubsidGLEntry.FIELDCAPTION("Posting Date"),
                          TempSubsidGLEntry."Posting Date"));
                    if (TempSubsidGLAcc."Consol. Translation Method" = TempSubsidGLAcc."Consol. Translation Method"::"Historical Rate") and
                       (TempSubsidGLEntry."Posting Date" <> PreviousDate)
                    then begin
                      if PreviousDate <> 0D then begin
                        TempDimBufOut.RESET;
                        TempDimBufOut.DELETEALL;
                        if TempGLEntry.FINDSET then
                          repeat
                            if not SkipAllDimensions then begin
                              DimBufMgt.GetDimensions(TempGLEntry."Entry No.",TempDimBufOut);
                              TempDimBufOut.SETRANGE("Entry No.",TempGLEntry."Entry No.");
                            end;
                            CreateAndPostGenJnlLine(GenJnlLine,TempGLEntry,TempDimBufOut,PostDebit);
                          until TempGLEntry.NEXT = 0;
                      end;
                      TempGLEntry.RESET;
                      TempGLEntry.DELETEALL;
                      DimBufMgt.DeleteAllDimensions;
                      PreviousDate := TempSubsidGLEntry."Posting Date";
                    end;
                    TempDimBufIn.RESET;
                    TempDimBufIn.DELETEALL;
                    if not SkipAllDimensions then begin
                      TempSubsidDimBuf.SETRANGE("Entry No.",TempSubsidGLEntry."Entry No.");
                      if TempSubsidDimBuf.FINDSET then
                        repeat
                          if TempSelectedDim.GET('',0,0,'',TempSubsidDimBuf."Dimension Code") then begin
                            TempDimBufIn.INIT;
                            TempDimBufIn."Table ID" := DATABASE::"G/L Entry";
                            TempDimBufIn."Entry No." := TempSubsidGLEntry."Entry No.";
                            TempDimBufIn."Dimension Code" := TempSubsidDimBuf."Dimension Code";
                            TempDimBufIn."Dimension Value Code" := TempSubsidDimBuf."Dimension Value Code";
                            TempDimBufIn.INSERT;
                          end;
                        until TempSubsidDimBuf.NEXT = 0;
                    end;
                    UpdateTempGLEntry(TempSubsidGLEntry);
                  until TempSubsidGLEntry.NEXT = 0;

                TempDimBufOut.RESET;
                TempDimBufOut.DELETEALL;
                if TempGLEntry.FINDSET then
                  repeat
                    if not SkipAllDimensions then begin
                      DimBufMgt.GetDimensions(TempGLEntry."Entry No.",TempDimBufOut);
                      TempDimBufOut.SETRANGE("Entry No.",TempGLEntry."Entry No.");
                    end;
                    CreateAndPostGenJnlLine(GenJnlLine,TempGLEntry,TempDimBufOut,PostDebit);
                  until TempGLEntry.NEXT = 0;
              until TempSubsidGLAcc.NEXT = 0;

            // Post balancing entries and adjustments
            UpdatePhase(Text025);

            for i := 1 to NORMALDATE(EndingDate) - NORMALDATE(StartingDate) + 1 do begin
              if ExchRateAdjAmounts[i] <> 0 then begin
                GenJnlLine.Amount := ExchRateAdjAmounts[i];
                if (BusUnit."Consolidation %" < 100) and
                   (BusUnit."Consolidation %" > 0)
                then begin
                  GenJnlLine.Amount := GenJnlLine.Amount * 100 / BusUnit."Consolidation %";
                  MinorExchRateAdjAmts[i] :=
                    MinorExchRateAdjAmts[i] - GenJnlLine.Amount + ExchRateAdjAmounts[i];
                end;
                if GenJnlLine.Amount < 0 then begin
                  BusUnit.TESTFIELD("Exch. Rate Gains Acc.");
                  GenJnlLine."Account No." := BusUnit."Exch. Rate Gains Acc.";
                end else begin
                  BusUnit.TESTFIELD("Exch. Rate Losses Acc.");
                  GenJnlLine."Account No." := BusUnit."Exch. Rate Losses Acc.";
                end;
                Window.UPDATE(3,GenJnlLine."Account No.");
                if not ConsolidatingClosingDate then
                  GenJnlLine."Posting Date" := StartingDate + i - 1
                else
                  GenJnlLine."Posting Date" := StartingDate;
                GenJnlLine.Description := STRSUBSTNO(Text015,WORKDATE);
                GenJnlPostLineTmp(GenJnlLine);
                RoundingResiduals[i] := RoundingResiduals[i] + GenJnlLine.Amount;
              end;
              if CompExchRateAdjAmts[i] <> 0 then begin
                GenJnlLine.Amount := CompExchRateAdjAmts[i];
                if (BusUnit."Consolidation %" < 100) and
                   (BusUnit."Consolidation %" > 0)
                then begin
                  GenJnlLine.Amount := GenJnlLine.Amount * 100 / BusUnit."Consolidation %";
                  MinorExchRateAdjAmts[i] :=
                    MinorExchRateAdjAmts[i] - GenJnlLine.Amount + CompExchRateAdjAmts[i];
                end;
                if GenJnlLine.Amount < 0 then begin
                  BusUnit.TESTFIELD("Comp. Exch. Rate Gains Acc.");
                  GenJnlLine."Account No." := BusUnit."Comp. Exch. Rate Gains Acc.";
                end else begin
                  BusUnit.TESTFIELD("Comp. Exch. Rate Losses Acc.");
                  GenJnlLine."Account No." := BusUnit."Comp. Exch. Rate Losses Acc.";
                end;
                Window.UPDATE(3,GenJnlLine."Account No.");
                if not ConsolidatingClosingDate then
                  GenJnlLine."Posting Date" := StartingDate + i - 1
                else
                  GenJnlLine."Posting Date" := StartingDate;
                GenJnlLine.Description := STRSUBSTNO(Text027 + Text015,WORKDATE);
                GenJnlPostLineTmp(GenJnlLine);
                RoundingResiduals[i] := RoundingResiduals[i] + GenJnlLine.Amount;
              end;
              if EqExchRateAdjAmts[i] <> 0 then begin
                GenJnlLine.Amount := EqExchRateAdjAmts[i];
                if (BusUnit."Consolidation %" < 100) and
                   (BusUnit."Consolidation %" > 0)
                then begin
                  GenJnlLine.Amount := GenJnlLine.Amount * 100 / BusUnit."Consolidation %";
                  MinorExchRateAdjAmts[i] :=
                    MinorExchRateAdjAmts[i] - GenJnlLine.Amount + EqExchRateAdjAmts[i];
                end;
                if GenJnlLine.Amount < 0 then begin
                  BusUnit.TESTFIELD("Equity Exch. Rate Gains Acc.");
                  GenJnlLine."Account No." := BusUnit."Equity Exch. Rate Gains Acc.";
                end else begin
                  BusUnit.TESTFIELD("Equity Exch. Rate Losses Acc.");
                  GenJnlLine."Account No." := BusUnit."Equity Exch. Rate Losses Acc.";
                end;
                Window.UPDATE(3,GenJnlLine."Account No.");
                if not ConsolidatingClosingDate then
                  GenJnlLine."Posting Date" := StartingDate + i - 1
                else
                  GenJnlLine."Posting Date" := StartingDate;
                GenJnlLine.Description := STRSUBSTNO(Text028 + Text015,WORKDATE);
                GenJnlPostLineTmp(GenJnlLine);
                RoundingResiduals[i] := RoundingResiduals[i] + GenJnlLine.Amount;
              end;
              if MinorExchRateAdjAmts[i] <> 0 then begin
                GenJnlLine.Amount := MinorExchRateAdjAmts[i];
                if GenJnlLine.Amount < 0 then begin
                  BusUnit.TESTFIELD("Minority Exch. Rate Gains Acc.");
                  GenJnlLine."Account No." := BusUnit."Minority Exch. Rate Gains Acc.";
                end else begin
                  BusUnit.TESTFIELD("Minority Exch. Rate Losses Acc");
                  GenJnlLine."Account No." := BusUnit."Minority Exch. Rate Losses Acc";
                end;
                Window.UPDATE(3,GenJnlLine."Account No.");
                GenJnlLine."Posting Date" := StartingDate + i - 1;
                GenJnlLine.Description := STRSUBSTNO(Text029 + Text015,WORKDATE);
                GenJnlPostLineTmp(GenJnlLine);
                RoundingResiduals[i] := RoundingResiduals[i] + GenJnlLine.Amount;
              end;
              if RoundingResiduals[i] <> 0 then begin
                GenJnlLine.Amount := -RoundingResiduals[i];
                BusUnit.TESTFIELD("Residual Account");
                GenJnlLine."Account No." := BusUnit."Residual Account";
                Window.UPDATE(3,GenJnlLine."Account No.");
                if not ConsolidatingClosingDate then
                  GenJnlLine."Posting Date" := StartingDate + i - 1
                else
                  GenJnlLine."Posting Date" := StartingDate;
                GenJnlLine.Description :=
                  COPYSTR(
                    STRSUBSTNO(Text016,WORKDATE,GenJnlLine.Amount),
                    1,MAXSTRLEN(GenJnlLine.Description));
                GenJnlPostLineTmp(GenJnlLine);
              end;
            end;

            if not TestMode then begin
              UpdatePhase(Text026);
              GenJnlPostLineFinally;
            end;
            Window.CLOSE;

            if not TestMode then begin
              BusUnit."Last Balance Currency Factor" := BusUnit."Balance Currency Factor";
              BusUnit."Last Run" := WORKDATE;
              BusUnit.MODIFY;
            end;

            if AnalysisViewEntriesDeleted then
              MESSAGE(Text005);
          END;

  }
  CODE
  {
    VAR
      BusUnit@1026 : Record "Business Unit";
      ConsolidGLAcc@1017 : Record "G/L Account";
      ConsolidGLEntry@1018 : Record "G/L Entry";
      ConsolidDimSetEntry@1019 : Record "Dimension Set Entry";
      ConsolidCurrExchRate@1067 : Record "Currency Exchange Rate";
      TempSubsidGLAcc@1000 : TEMPORARY Record "G/L Account";
      TempSubsidGLEntry@1001 : TEMPORARY Record "G/L Entry";
      TempSubsidDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempSubsidCurrExchRate@1003 : TEMPORARY Record "Currency Exchange Rate";
      TempSelectedDim@1048 : TEMPORARY Record "Selected Dimension";
      GenJnlLine@1050 : Record "Gen. Journal Line";
      TempGenJnlLine@1054 : TEMPORARY Record "Gen. Journal Line";
      TempDimBufIn@1058 : TEMPORARY Record "Dimension Buffer";
      TempDimBufOut@1057 : TEMPORARY Record "Dimension Buffer";
      TempGLEntry@1020 : TEMPORARY Record "G/L Entry";
      DimBufMgt@1059 : Codeunit "Dimension Buffer Management";
      DimMgt@1055 : Codeunit DimensionManagement;
      Window@1046 : Dialog;
      GLDocNo@1028 : Code[20];
      ProductVersion@1005 : Code[10];
      FormatVersion@1006 : Code[10];
      SubCompanyName@1007 : Text[30];
      CurrencyLCY@1008 : Code[10];
      CurrencyACY@1009 : Code[10];
      CurrencyPCY@1010 : Code[10];
      StoredCheckSum@1011 : Decimal;
      StartingDate@1013 : Date;
      EndingDate@1014 : Date;
      ConsolidSourceCode@1051 : Code[10];
      RoundingResiduals@1066 : ARRAY [500] OF Decimal;
      ExchRateAdjAmounts@1068 : ARRAY [500] OF Decimal;
      CompExchRateAdjAmts@1034 : ARRAY [500] OF Decimal;
      EqExchRateAdjAmts@1035 : ARRAY [500] OF Decimal;
      MinorExchRateAdjAmts@1037 : ARRAY [500] OF Decimal;
      DeletedAmounts@1022 : ARRAY [500] OF Decimal;
      DeletedDates@1023 : ARRAY [500] OF Date;
      DeletedIndex@1024 : Integer;
      MaxDeletedIndex@1025 : Integer;
      AnalysisViewEntriesDeleted@1027 : Boolean;
      Text000@1029 : TextConst 'ENU=Enter a document number.';
      Text001@1030 : TextConst 'ENU=Consolidating companies...\\';
      Text002@1031 : TextConst 'ENU=Business Unit Code   #1###################\';
      Text003@1032 : TextConst 'ENU=Phase                #2############################\';
      Text004@1033 : TextConst 'ENU=G/L Account No.      #3##################';
      Text005@1071 : TextConst 'ENU=Analysis View Entries were deleted during the consolidation. An update is necessary.';
      Text006@1016 : TextConst 'ENU=There are more than %1 errors.';
      Text008@1036 : TextConst 'ENU=The consolidation can include a maximum of %1 days.';
      Text010@1038 : TextConst 'ENU="Previously consolidated entries cannot be erased because this would cause the general ledger to be out of balance by an amount of %1. "';
      Text011@1040 : TextConst 'ENU=" Check for manually posted G/L entries on %2 for posting across business units."';
      Text013@1041 : TextConst 'ENU=%1 adjusted from %2 to %3 on %4';
      Text014@1042 : TextConst 'ENU=Adjustment of opening entries on %1';
      Text015@1043 : TextConst 'ENU=Exchange rate adjustment on %1';
      Text016@1044 : TextConst 'ENU=Posted %2 to residual account as of %1';
      Text017@1045 : TextConst 'ENU=%1 at exchange rate %2 on %3';
      Text018@1047 : TextConst 'ENU=Clear Previous Consolidation';
      SkipAllDimensions@1049 : Boolean;
      Text019@1052 : TextConst 'ENU=Update Prior Period Balances';
      ConsolidatingClosingDate@1074 : Boolean;
      ExchRateAdjAmount@1053 : Decimal;
      HistoricalCurrencyFactor@1079 : Decimal;
      NextLineNo@1056 : Integer;
      Text020@1061 : TextConst 'ENU=Consolidate Current Data';
      Text021@1062 : TextConst 'ENU="Within the Subsidiary (%5), there are two G/L Accounts: %1 and %4; which refer to the same %2, but with a different %3."';
      Text022@1063 : TextConst 'ENU=%1 %2, referenced by %5 %3 %4, does not exist in the consolidated %3 table.';
      Text023@1064 : TextConst 'ENU=%7 %1 %2 must have the same %3 as consolidated %1 %4. (%5 and %6, respectively)';
      Text024@1065 : TextConst 'ENU=%1 at %2 %3';
      Text025@1069 : TextConst 'ENU=Calculate Residual Entries';
      Text026@1070 : TextConst 'ENU=Post to General Ledger';
      Text027@1039 : TextConst 'ENU="Composite "';
      Text028@1072 : TextConst 'ENU="Equity "';
      Text029@1073 : TextConst 'ENU="Minority "';
      TestMode@1004 : Boolean;
      CurErrorIdx@1012 : Integer;
      ErrorText@1015 : ARRAY [500] OF Text[250];
      Text030@1076 : TextConst 'ENU=When using closing dates, the starting and ending dates must be the same.';
      Text031@1075 : TextConst 'ENU=A %1 with %2 on a closing date (%3) was found while consolidating non-closing entries.';
      Text032@1077 : TextConst 'ENU=The %1 is later than the %2 in company %3.';
      Text033@1078 : TextConst 'ENU=%1 must not be empty when %2 is not empty, in company %3.';
      Text034@1080 : TextConst 'ENU=It is not possible to consolidate ledger entry dimensions for G/L Entry No. %1, because there are conflicting dimension values %2 and %3 for consolidation dimension %4.';

    [External]
    PROCEDURE SetDocNo@15(NewDocNo@1000 : Code[20]);
    BEGIN
      GLDocNo := NewDocNo;
      if GLDocNo = '' then
        ERROR(Text000);
    END;

    [External]
    PROCEDURE SetSelectedDim@20(VAR SelectedDim@1000 : Record "Selected Dimension");
    BEGIN
      TempSelectedDim.RESET;
      TempSelectedDim.DELETEALL;
      SkipAllDimensions := SelectedDim.ISEMPTY;
      if SkipAllDimensions then
        exit;

      if SelectedDim.FINDSET then
        repeat
          TempSelectedDim := SelectedDim;
          TempSelectedDim."User ID" := '';
          TempSelectedDim."Object Type" := 0;
          TempSelectedDim."Object ID" := 0;
          TempSelectedDim.INSERT;
        until SelectedDim.NEXT = 0;
    END;

    [External]
    PROCEDURE SetGlobals@1(NewProductVersion@1000 : Code[10];NewFormatVersion@1001 : Code[10];NewCompanyName@1002 : Text[30];NewCurrencyLCY@1003 : Code[10];NewCurrencyACY@1004 : Code[10];NewCurrencyPCY@1005 : Code[10];NewCheckSum@1006 : Decimal;NewStartingDate@1007 : Date;NewEndingDate@1008 : Date);
    BEGIN
      ProductVersion := NewProductVersion;
      FormatVersion := NewFormatVersion;
      SubCompanyName := NewCompanyName;
      CurrencyLCY := NewCurrencyLCY;
      CurrencyACY := NewCurrencyACY;
      CurrencyPCY := NewCurrencyPCY;
      StoredCheckSum := NewCheckSum;
      StartingDate := NewStartingDate;
      EndingDate := NewEndingDate;
    END;

    [External]
    PROCEDURE InsertGLAccount@2(NewGLAccount@1000 : Record "G/L Account");
    BEGIN
      TempSubsidGLAcc.INIT;
      TempSubsidGLAcc."No." := NewGLAccount."No.";
      TempSubsidGLAcc."Consol. Translation Method" := NewGLAccount."Consol. Translation Method";
      TempSubsidGLAcc."Consol. Debit Acc." := NewGLAccount."Consol. Debit Acc.";
      TempSubsidGLAcc."Consol. Credit Acc." := NewGLAccount."Consol. Credit Acc.";
      TempSubsidGLAcc.INSERT;
    END;

    [External]
    PROCEDURE InsertGLEntry@3(NewGLEntry@1000 : Record "G/L Entry") : Integer;
    VAR
      NextEntryNo@1001 : Integer;
    BEGIN
      if TempSubsidGLEntry.FINDLAST then
        NextEntryNo := TempSubsidGLEntry."Entry No." + 1
      else
        NextEntryNo := 1;
      TempSubsidGLEntry.INIT;
      TempSubsidGLEntry."Entry No." := NextEntryNo;
      TempSubsidGLEntry."G/L Account No." := NewGLEntry."G/L Account No.";
      TempSubsidGLEntry."Posting Date" := NewGLEntry."Posting Date";
      TempSubsidGLEntry."Debit Amount" := NewGLEntry."Debit Amount";
      TempSubsidGLEntry."Credit Amount" := NewGLEntry."Credit Amount";
      TempSubsidGLEntry."Add.-Currency Debit Amount" := NewGLEntry."Add.-Currency Debit Amount";
      TempSubsidGLEntry."Add.-Currency Credit Amount" := NewGLEntry."Add.-Currency Credit Amount";
      TempSubsidGLEntry.INSERT;
      exit(NextEntryNo);
    END;

    [External]
    PROCEDURE InsertEntryDim@4(NewDimBuf@1000 : Record "Dimension Buffer";GLEntryNo@1001 : Integer);
    BEGIN
      if TempSubsidDimBuf.GET(NewDimBuf."Table ID",GLEntryNo,NewDimBuf."Dimension Code") then begin
        if NewDimBuf."Dimension Value Code" <> TempSubsidDimBuf."Dimension Value Code" then
          ERROR(
            Text034,GLEntryNo,NewDimBuf."Dimension Value Code",TempSubsidDimBuf."Dimension Value Code",
            NewDimBuf."Dimension Code");
      end else begin
        TempSubsidDimBuf.INIT;
        TempSubsidDimBuf := NewDimBuf;
        TempSubsidDimBuf."Entry No." := GLEntryNo;
        TempSubsidDimBuf.INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertExchRate@5(NewCurrExchRate@1000 : Record "Currency Exchange Rate");
    BEGIN
      TempSubsidCurrExchRate.INIT;
      TempSubsidCurrExchRate."Currency Code" := NewCurrExchRate."Currency Code";
      TempSubsidCurrExchRate."Starting Date" := NewCurrExchRate."Starting Date";
      TempSubsidCurrExchRate."Relational Currency Code" := NewCurrExchRate."Relational Currency Code";
      TempSubsidCurrExchRate."Exchange Rate Amount" := NewCurrExchRate."Exchange Rate Amount";
      TempSubsidCurrExchRate."Relational Exch. Rate Amount" := NewCurrExchRate."Relational Exch. Rate Amount";
      TempSubsidCurrExchRate.INSERT;
    END;

    [External]
    PROCEDURE UpdateGLEntryDimSetID@42();
    BEGIN
      if SkipAllDimensions then
        exit;

      TempSubsidGLEntry.RESET;
      TempSubsidDimBuf.RESET;
      TempSubsidDimBuf.SETRANGE("Table ID",DATABASE::"G/L Entry");
      with TempSubsidGLEntry do begin
        RESET;
        if FINDSET(true,false) then
          repeat
            TempSubsidDimBuf.SETRANGE("Entry No.","Entry No.");
            if not TempSubsidDimBuf.ISEMPTY then begin
              "Dimension Set ID" := DimMgt.CreateDimSetIDFromDimBuf(TempSubsidDimBuf);
              MODIFY;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CalcCheckSum@6() CheckSum : Decimal;
    BEGIN
      CheckSum :=
        DateToDecimal(StartingDate) + DateToDecimal(EndingDate) +
        TextToDecimal(FormatVersion) + TextToDecimal(ProductVersion);
      TempSubsidGLAcc.RESET;
      if TempSubsidGLAcc.FINDSET then
        repeat
          CheckSum :=
            CheckSum +
            TextToDecimal(COPYSTR(TempSubsidGLAcc."No.",1,10)) + TextToDecimal(COPYSTR(TempSubsidGLAcc."No.",11,10)) +
            TextToDecimal(COPYSTR(TempSubsidGLAcc."Consol. Debit Acc.",1,10)) +
            TextToDecimal(COPYSTR(TempSubsidGLAcc."Consol. Debit Acc.",11,10)) +
            TextToDecimal(COPYSTR(TempSubsidGLAcc."Consol. Credit Acc.",1,10)) +
            TextToDecimal(COPYSTR(TempSubsidGLAcc."Consol. Credit Acc.",11,10)) ;
        until TempSubsidGLAcc.NEXT = 0;
      TempSubsidGLEntry.RESET;
      if TempSubsidGLEntry.FINDSET then
        repeat
          CheckSum := CheckSum +
            TempSubsidGLEntry."Debit Amount" + TempSubsidGLEntry."Credit Amount" +
            TempSubsidGLEntry."Add.-Currency Debit Amount" + TempSubsidGLEntry."Add.-Currency Credit Amount" +
            DateToDecimal(TempSubsidGLEntry."Posting Date");
        until TempSubsidGLEntry.NEXT = 0;
    END;

    [Internal]
    PROCEDURE ImportFromXML@7(FileName@1000 : Text);
    VAR
      Consolidation@1003 : XMLport "Consolidation Import/Export";
      InputFile@1001 : File;
      InputStream@1002 : InStream;
    BEGIN
      InputFile.TEXTMODE(true);
      InputFile.WRITEMODE(false);
      InputFile.OPEN(FileName);

      InputFile.CREATEINSTREAM(InputStream);

      Consolidation.SETSOURCE(InputStream);
      Consolidation.IMPORT;
      InputFile.CLOSE;

      Consolidation.GetGLAccount(TempSubsidGLAcc);
      Consolidation.GetGLEntry(TempSubsidGLEntry);
      Consolidation.GetEntryDim(TempSubsidDimBuf);
      Consolidation.GetExchRate(TempSubsidCurrExchRate);
      Consolidation.GetGlobals(
        ProductVersion,FormatVersion,SubCompanyName,CurrencyLCY,CurrencyACY,CurrencyPCY,
        StoredCheckSum,StartingDate,EndingDate);

      SelectAllImportedDimensions;
    END;

    [Internal]
    PROCEDURE ExportToXML@8(FileName@1000 : Text);
    VAR
      Consolidation@1003 : XMLport "Consolidation Import/Export";
      OutputFile@1001 : File;
      OutputStream@1002 : OutStream;
    BEGIN
      OutputFile.TEXTMODE(true);
      OutputFile.WRITEMODE(true);
      OutputFile.CREATE(FileName);

      OutputFile.CREATEOUTSTREAM(OutputStream);

      Consolidation.SetGlobals(SubCompanyName,CurrencyLCY,CurrencyACY,CurrencyPCY,StoredCheckSum,StartingDate,EndingDate);
      Consolidation.SetGLAccount(TempSubsidGLAcc);
      Consolidation.SetGLEntry(TempSubsidGLEntry);
      Consolidation.SetEntryDim(TempSubsidDimBuf);
      Consolidation.SetExchRate(TempSubsidCurrExchRate);

      Consolidation.SETDESTINATION(OutputStream);
      Consolidation.EXPORT;
      OutputFile.CLOSE;
    END;

    [External]
    PROCEDURE GetGlobals@9(VAR ImpProductVersion@1008 : Code[10];VAR ImpFormatVersion@1007 : Code[10];VAR ImpCompanyName@1006 : Text[30];VAR ImpCurrencyLCY@1005 : Code[10];VAR ImpCurrencyACY@1004 : Code[10];VAR ImpCurrencyPCY@1003 : Code[10];VAR ImpCheckSum@1002 : Decimal;VAR ImpStartingDate@1001 : Date;VAR ImpEndingDate@1000 : Date);
    BEGIN
      ImpProductVersion := ProductVersion;
      ImpFormatVersion := FormatVersion;
      ImpCompanyName := SubCompanyName;
      ImpCurrencyLCY := CurrencyLCY;
      ImpCurrencyACY := CurrencyACY;
      ImpCurrencyPCY := CurrencyPCY;
      ImpCheckSum := StoredCheckSum;
      ImpStartingDate := StartingDate;
      ImpEndingDate := EndingDate;
    END;

    [External]
    PROCEDURE SetTestMode@27(NewTestMode@1000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
      CurErrorIdx := 0;
    END;

    [External]
    PROCEDURE GetAccumulatedErrors@28(VAR NumErrors@1000 : Integer;VAR Errors@1001 : ARRAY [100] OF Text[250]);
    VAR
      Idx@1002 : Integer;
    BEGIN
      NumErrors := 0;
      CLEAR(Errors);
      for Idx := 1 to CurErrorIdx do begin
        NumErrors := NumErrors + 1;
        Errors[NumErrors] := ErrorText[Idx];
        if (Idx = ARRAYLEN(Errors)) and (CurErrorIdx > Idx) then begin
          COPYARRAY(ErrorText,ErrorText,ARRAYLEN(Errors) + 1);
          CurErrorIdx := CurErrorIdx - ARRAYLEN(Errors);
          exit;
        end;
      end;
      CurErrorIdx := 0;
      CLEAR(ErrorText);
    END;

    [External]
    PROCEDURE SelectAllImportedDimensions@41();
    BEGIN
      // assume all dimensions that were imported were also selected.
      TempSelectedDim.RESET;
      TempSelectedDim.DELETEALL;
      if TempSubsidDimBuf.FINDSET then
        repeat
          TempSelectedDim.INIT;
          TempSelectedDim."User ID" := '';
          TempSelectedDim."Object Type" := 0;
          TempSelectedDim."Object ID" := 0;
          TempSelectedDim."Dimension Code" := TempSubsidDimBuf."Dimension Code";
          if TempSelectedDim.INSERT then ;
        until TempSubsidDimBuf.NEXT = 0;
      SkipAllDimensions := TempSelectedDim.ISEMPTY;
    END;

    LOCAL PROCEDURE ReadSourceCodeSetup@10();
    VAR
      SourceCodeSetup@1001 : Record "Source Code Setup";
    BEGIN
      SourceCodeSetup.GET;
      ConsolidSourceCode := SourceCodeSetup.Consolidation;
    END;

    LOCAL PROCEDURE ClearInternals@23();
    BEGIN
      NextLineNo := 0;
      AnalysisViewEntriesDeleted := false;
      TempGenJnlLine.RESET;
      TempGenJnlLine.DELETEALL;
      TempDimBufOut.RESET;
      TempDimBufOut.DELETEALL;
      TempDimBufIn.RESET;
      TempDimBufIn.DELETEALL;
      CLEAR(RoundingResiduals);
      CLEAR(ExchRateAdjAmounts);
      CLEAR(CompExchRateAdjAmts);
      CLEAR(EqExchRateAdjAmts);
      CLEAR(MinorExchRateAdjAmts);
    END;

    LOCAL PROCEDURE UpdatePhase@16(PhaseText@1000 : Text[50]);
    BEGIN
      Window.UPDATE(2,PhaseText);
      Window.UPDATE(3,'');
    END;

    LOCAL PROCEDURE ClearPreviousConsolidation@14();
    VAR
      TempGLAccount@1000 : TEMPORARY Record "G/L Account";
      AnalysisView@1001 : Record "Analysis View";
      TempAnalysisView@1004 : TEMPORARY Record "Analysis View";
      AnalysisViewEntry@1002 : Record "Analysis View Entry";
      AnalysisViewFound@1003 : Boolean;
    BEGIN
      ClearAmountArray;
      with ConsolidGLEntry do begin
        if not
           SETCURRENTKEY("G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date")
        then
          SETCURRENTKEY("G/L Account No.","Business Unit Code","Posting Date");
        SETRANGE("Business Unit Code",BusUnit.Code);
        SETRANGE("Posting Date",StartingDate,EndingDate);
        if FINDSET(true,false) then
          repeat
            UpdateAmountArray("Posting Date",Amount);
            Description := '';
            Amount := 0;
            "Debit Amount" := 0;
            "Credit Amount" := 0;
            "Additional-Currency Amount" := 0;
            "Add.-Currency Debit Amount" := 0;
            "Add.-Currency Credit Amount" := 0;
            MODIFY;
            if "G/L Account No." <> TempGLAccount."No." then begin
              Window.UPDATE(3,"G/L Account No.");
              TempGLAccount."No." := "G/L Account No.";
              TempGLAccount.INSERT;
            end;
          until NEXT = 0;
      end;
      CheckAmountArray;

      if AnalysisView.FINDSET then
        repeat
          AnalysisViewFound := false;
          if TempGLAccount.FINDSET then
            repeat
              AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
              AnalysisViewEntry.SETRANGE("Account No.",TempGLAccount."No.");
              AnalysisViewEntry.SETRANGE("Account Source",AnalysisViewEntry."Account Source"::"G/L Account");
              if AnalysisViewEntry.FINDFIRST then begin
                TempAnalysisView.Code := AnalysisViewEntry."Analysis View Code";
                TempAnalysisView."Account Source" := AnalysisViewEntry."Account Source";
                TempAnalysisView.INSERT;
                AnalysisViewFound := true;
              end;
            until (TempGLAccount.NEXT = 0) or AnalysisViewFound;
        until AnalysisView.NEXT = 0;

      AnalysisViewEntry.RESET;
      if TempAnalysisView.FINDSET then
        repeat
          AnalysisView.GET(TempAnalysisView.Code);
          if AnalysisView.Blocked then begin
            AnalysisView."Refresh When Unblocked" := true;
            AnalysisView.MODIFY;
          end else begin
            AnalysisViewEntry.SETRANGE("Analysis View Code",TempAnalysisView.Code);
            AnalysisViewEntry.DELETEALL;
            AnalysisView."Last Entry No." := 0;
            AnalysisView."Last Date Updated" := 0D;
            AnalysisView.MODIFY;
            AnalysisViewEntriesDeleted := true;
          end;
        until TempAnalysisView.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearAmountArray@11();
    BEGIN
      CLEAR(DeletedAmounts);
      CLEAR(DeletedDates);
      DeletedIndex := 0;
      MaxDeletedIndex := 0;
    END;

    LOCAL PROCEDURE UpdateAmountArray@12(PostingDate@1000 : Date;Amount@1001 : Decimal);
    VAR
      Top@1002 : Integer;
      Bottom@1003 : Integer;
      Middle@1004 : Integer;
      Found@1005 : Boolean;
      NotFound@1006 : Boolean;
      idx@1007 : Integer;
    BEGIN
      if DeletedIndex = 0 then begin
        DeletedIndex := 1;
        MaxDeletedIndex := 1;
        DeletedDates[DeletedIndex] := PostingDate;
        DeletedAmounts[DeletedIndex] := Amount;
      end else
        if PostingDate = DeletedDates[DeletedIndex] then
          DeletedAmounts[DeletedIndex] := DeletedAmounts[DeletedIndex] + Amount
        else begin
          Top := 0;
          Bottom := MaxDeletedIndex + 1;
          Found := false;
          NotFound := false;
          repeat
            Middle := (Top + Bottom) div 2;
            if Bottom - Top <= 1 then
              NotFound := true
            else
              if DeletedDates[Middle] > PostingDate then
                Bottom := Middle
              else
                if DeletedDates[Middle] < PostingDate then
                  Top := Middle
                else
                  Found := true;
          until Found or NotFound;
          if Found then begin
            DeletedIndex := Middle;
            DeletedAmounts[DeletedIndex] := DeletedAmounts[DeletedIndex] + Amount;
          end else begin
            if MaxDeletedIndex >= ARRAYLEN(DeletedDates) then
              ReportError(STRSUBSTNO(Text008,ARRAYLEN(DeletedDates)))
            else
              MaxDeletedIndex := MaxDeletedIndex + 1;
            for idx := MaxDeletedIndex downto Bottom + 1 do begin
              DeletedAmounts[idx] := DeletedAmounts[idx - 1];
              DeletedDates[idx] := DeletedDates[idx - 1];
            end;
            DeletedIndex := Bottom;
            DeletedDates[DeletedIndex] := PostingDate;
            DeletedAmounts[DeletedIndex] := Amount;
          end;
        end;
    END;

    LOCAL PROCEDURE CheckAmountArray@13();
    VAR
      idx@1000 : Integer;
    BEGIN
      for idx := 1 to MaxDeletedIndex do
        if DeletedAmounts[idx] <> 0 then
          ReportError(STRSUBSTNO(Text010 + Text011,DeletedAmounts[idx],DeletedDates[idx]));
    END;

    LOCAL PROCEDURE TestGLAccounts@18();
    VAR
      AccountToTest@1001 : Record "G/L Account";
    BEGIN
      // First test within the Subsidiary Chart of Accounts
      AccountToTest := TempSubsidGLAcc;
      if AccountToTest.TranslationMethodConflict(TempSubsidGLAcc) then begin
        if TempSubsidGLAcc.GETFILTER("Consol. Debit Acc.") <> '' then
          ReportError(
            STRSUBSTNO(
              Text021,
              TempSubsidGLAcc."No.",
              TempSubsidGLAcc.FIELDCAPTION("Consol. Debit Acc."),
              TempSubsidGLAcc.FIELDCAPTION("Consol. Translation Method"),
              AccountToTest."No.",BusUnit.TABLECAPTION))
        else
          ReportError(
            STRSUBSTNO(Text021,
              TempSubsidGLAcc."No.",
              TempSubsidGLAcc.FIELDCAPTION("Consol. Credit Acc."),
              TempSubsidGLAcc.FIELDCAPTION("Consol. Translation Method"),
              AccountToTest."No.",BusUnit.TABLECAPTION));
      end else begin
        TempSubsidGLAcc.RESET;
        TempSubsidGLAcc := AccountToTest;
        TempSubsidGLAcc.FIND('=');
      end;
      // Then, test for conflicts between subsidiary and parent (consolidated)
      if TempSubsidGLAcc."Consol. Debit Acc." <> '' then begin
        if not ConsolidGLAcc.GET(TempSubsidGLAcc."Consol. Debit Acc.") then
          ReportError(
            STRSUBSTNO(Text022,
              TempSubsidGLAcc.FIELDCAPTION("Consol. Debit Acc."),TempSubsidGLAcc."Consol. Debit Acc.",
              TempSubsidGLAcc.TABLECAPTION,TempSubsidGLAcc."No.",BusUnit.TABLECAPTION));
        if (TempSubsidGLAcc."Consol. Translation Method" <> ConsolidGLAcc."Consol. Translation Method") and
           (BusUnit."File Format" <> BusUnit."File Format"::"Version 3.70 or Earlier (.txt)")
        then
          ReportError(
            STRSUBSTNO(Text023,
              TempSubsidGLAcc.TABLECAPTION,TempSubsidGLAcc."No.",
              TempSubsidGLAcc.FIELDCAPTION("Consol. Translation Method"),ConsolidGLAcc."No.",
              TempSubsidGLAcc."Consol. Translation Method",ConsolidGLAcc."Consol. Translation Method",
              BusUnit.TABLECAPTION));
      end;
      if TempSubsidGLAcc."Consol. Debit Acc." = TempSubsidGLAcc."Consol. Credit Acc." then
        exit;
      if TempSubsidGLAcc."Consol. Credit Acc." <> '' then begin
        if not ConsolidGLAcc.GET(TempSubsidGLAcc."Consol. Credit Acc.") then
          ReportError(
            STRSUBSTNO(Text022,
              TempSubsidGLAcc.FIELDCAPTION("Consol. Credit Acc."),TempSubsidGLAcc."Consol. Credit Acc.",
              TempSubsidGLAcc.TABLECAPTION,TempSubsidGLAcc."No.",BusUnit.TABLECAPTION));
        if (TempSubsidGLAcc."Consol. Translation Method" <> ConsolidGLAcc."Consol. Translation Method") and
           (BusUnit."File Format" <> BusUnit."File Format"::"Version 3.70 or Earlier (.txt)")
        then
          ReportError(
            STRSUBSTNO(Text023,
              TempSubsidGLAcc.TABLECAPTION,TempSubsidGLAcc."No.",
              TempSubsidGLAcc.FIELDCAPTION("Consol. Translation Method"),ConsolidGLAcc."No.",
              TempSubsidGLAcc."Consol. Translation Method",ConsolidGLAcc."Consol. Translation Method",
              BusUnit.TABLECAPTION));
      end;
    END;

    LOCAL PROCEDURE UpdatePriorPeriodBalances@21();
    VAR
      idx@1002 : Integer;
      AdjustmentAmount@1000 : Decimal;
    BEGIN
      CLEAR(GenJnlLine);
      GenJnlLine."Business Unit Code" := BusUnit.Code;
      GenJnlLine."Document No." := GLDocNo;
      GenJnlLine."Source Code" := ConsolidSourceCode;

      BusUnit.TESTFIELD("Balance Currency Factor");
      BusUnit.TESTFIELD("Last Balance Currency Factor");
      ExchRateAdjAmount := 0;
      idx := NORMALDATE(EndingDate) - NORMALDATE(StartingDate) + 1;

      with ConsolidGLAcc do begin
        RESET;
        SETRANGE("Account Type","Account Type"::Posting);
        SETRANGE("Business Unit Filter",BusUnit.Code);
        SETRANGE("Date Filter",0D,EndingDate);
        SETRANGE("Income/Balance","Income/Balance"::"Balance Sheet");
        SETFILTER(
          "No.",'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9',
          BusUnit."Exch. Rate Losses Acc.",BusUnit."Exch. Rate Gains Acc.",
          BusUnit."Comp. Exch. Rate Gains Acc.",BusUnit."Comp. Exch. Rate Losses Acc.",
          BusUnit."Equity Exch. Rate Gains Acc.",BusUnit."Equity Exch. Rate Losses Acc.",
          BusUnit."Minority Exch. Rate Gains Acc.",BusUnit."Minority Exch. Rate Losses Acc",
          BusUnit."Residual Account");
        if FINDSET then
          repeat
            Window.UPDATE(3,"No.");
            case "Consol. Translation Method" of
              "Consol. Translation Method"::"Average Rate (Manual)",
              "Consol. Translation Method"::"Closing Rate":
                // Post adjustment to existing balance to convert that balance to new Closing Rate
                if SkipAllDimensions then begin
                  CALCFIELDS("Debit Amount","Credit Amount");
                  if "Debit Amount" <> 0 then
                    PostBalanceAdjustment("No.","Debit Amount");
                  if "Credit Amount" <> 0 then
                    PostBalanceAdjustment("No.",-"Credit Amount");
                end else begin
                  TempGLEntry.RESET;
                  TempGLEntry.DELETEALL;
                  DimBufMgt.DeleteAllDimensions;
                  ConsolidGLEntry.RESET;
                  ConsolidGLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
                  ConsolidGLEntry.SETRANGE("G/L Account No.","No.");
                  ConsolidGLEntry.SETRANGE("Posting Date",0D,EndingDate);
                  ConsolidGLEntry.SETRANGE("Business Unit Code",BusUnit.Code);
                  if ConsolidGLEntry.FINDSET then
                    repeat
                      TempDimBufIn.RESET;
                      TempDimBufIn.DELETEALL;
                      ConsolidDimSetEntry.SETRANGE("Dimension Set ID",ConsolidGLEntry."Dimension Set ID");
                      if ConsolidDimSetEntry.FINDSET then
                        repeat
                          if TempSelectedDim.GET('',0,0,'',ConsolidDimSetEntry."Dimension Code") then begin
                            TempDimBufIn.INIT;
                            TempDimBufIn."Table ID" := DATABASE::"G/L Entry";
                            TempDimBufIn."Entry No." := ConsolidGLEntry."Entry No.";
                            TempDimBufIn."Dimension Code" := ConsolidDimSetEntry."Dimension Code";
                            TempDimBufIn."Dimension Value Code" := ConsolidDimSetEntry."Dimension Value Code";
                            TempDimBufIn.INSERT;
                          end;
                        until ConsolidDimSetEntry.NEXT = 0;
                      UpdateTempGLEntry(ConsolidGLEntry);
                    until ConsolidGLEntry.NEXT = 0;
                  TempDimBufOut.RESET;
                  TempDimBufOut.DELETEALL;
                  if TempGLEntry.FINDSET then
                    repeat
                      DimBufMgt.GetDimensions(TempGLEntry."Entry No.",TempDimBufOut);
                      TempDimBufOut.SETRANGE("Entry No.",TempGLEntry."Entry No.");
                      if TempGLEntry."Debit Amount" <> 0 then
                        PostBalanceAdjustment("No.",TempGLEntry."Debit Amount");
                      if TempGLEntry."Credit Amount" <> 0 then
                        PostBalanceAdjustment("No.",-TempGLEntry."Credit Amount");
                    until TempGLEntry.NEXT = 0;
                end;
              "Consol. Translation Method"::"Historical Rate":
                // accumulate adjustment for historical accounts
                begin
                  CALCFIELDS("Balance at Date");
                  AdjustmentAmount := 0;
                  ExchRateAdjAmounts[idx] := ExchRateAdjAmounts[idx] + AdjustmentAmount;
                end;
              "Consol. Translation Method"::"Composite Rate":
                // accumulate adjustment for composite accounts
                begin
                  CALCFIELDS("Balance at Date");
                  AdjustmentAmount := 0;
                  CompExchRateAdjAmts[idx] := CompExchRateAdjAmts[idx] + AdjustmentAmount;
                end;
              "Consol. Translation Method"::"Equity Rate":
                // accumulate adjustment for equity accounts
                begin
                  CALCFIELDS("Balance at Date");
                  AdjustmentAmount := 0;
                  EqExchRateAdjAmts[idx] := EqExchRateAdjAmts[idx] + AdjustmentAmount;
                end;
            end;
          until NEXT = 0;
      end;

      TempDimBufOut.RESET;
      TempDimBufOut.DELETEALL;

      if ExchRateAdjAmount <> 0 then begin
        CLEAR(GenJnlLine);
        GenJnlLine."Business Unit Code" := BusUnit.Code;
        GenJnlLine."Document No." := GLDocNo;
        GenJnlLine."Source Code" := ConsolidSourceCode;
        GenJnlLine.Amount := -ExchRateAdjAmount;
        if GenJnlLine.Amount < 0 then begin
          BusUnit.TESTFIELD("Exch. Rate Gains Acc.");
          GenJnlLine."Account No." := BusUnit."Exch. Rate Gains Acc.";
        end else begin
          BusUnit.TESTFIELD("Exch. Rate Losses Acc.");
          GenJnlLine."Account No." := BusUnit."Exch. Rate Losses Acc.";
        end;
        Window.UPDATE(3,GenJnlLine."Account No.");
        GenJnlLine."Posting Date" := EndingDate;
        GenJnlLine.Description := STRSUBSTNO(Text014,WORKDATE);
        GenJnlPostLineTmp(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostBalanceAdjustment@17(GLAccNo@1000 : Code[20];AmountToPost@1001 : Decimal);
    VAR
      TempDimSetEntry2@1002 : TEMPORARY Record "Dimension Set Entry";
      DimValue@1003 : Record "Dimension Value";
    BEGIN
      GenJnlLine.Amount :=
        ROUND(
          (AmountToPost * BusUnit."Last Balance Currency Factor" / BusUnit."Balance Currency Factor") - AmountToPost);
      if GenJnlLine.Amount <> 0 then begin
        GenJnlLine."Account No." := GLAccNo;
        GenJnlLine."Posting Date" := EndingDate;
        GenJnlLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text013,
              AmountToPost,
              ROUND(BusUnit."Last Balance Currency Factor",0.00001),
              ROUND(BusUnit."Balance Currency Factor",0.00001),
              WORKDATE),
            1,MAXSTRLEN(GenJnlLine.Description));
        if TempDimBufOut.FINDSET then begin
          repeat
            TempDimSetEntry2.INIT;
            TempDimSetEntry2."Dimension Code" := TempDimBufOut."Dimension Code";
            TempDimSetEntry2."Dimension Value Code" := TempDimBufOut."Dimension Value Code";
            DimValue.GET(TempDimSetEntry2."Dimension Code",TempDimSetEntry2."Dimension Value Code");
            TempDimSetEntry2."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry2.INSERT;
          until TempDimBufOut.NEXT = 0;
          GenJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
        end else begin
          GenJnlLine."Shortcut Dimension 1 Code" := '';
          GenJnlLine."Shortcut Dimension 2 Code" := '';
          GenJnlLine."Dimension Set ID" := 0;
        end;
        GenJnlPostLineTmp(GenJnlLine);
        ExchRateAdjAmount := ExchRateAdjAmount + GenJnlLine.Amount;
      end;
    END;

    LOCAL PROCEDURE UpdateTempGLEntry@30(VAR GLEntry@1000 : Record "G/L Entry");
    VAR
      DimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
    BEGIN
      DimEntryNo := DimBufMgt.FindDimensions(TempDimBufIn);
      Found := TempDimBufIn.FINDFIRST;
      if Found and (DimEntryNo = 0) then begin
        TempGLEntry := GLEntry;
        TempGLEntry."Entry No." := DimBufMgt.InsertDimensions(TempDimBufIn);
        TempGLEntry.INSERT;
      end else begin
        if TempGLEntry.GET(DimEntryNo) then begin
          TempGLEntry.Amount := TempGLEntry.Amount + GLEntry.Amount;
          TempGLEntry."Debit Amount" := TempGLEntry."Debit Amount" + GLEntry."Debit Amount";
          TempGLEntry."Credit Amount" := TempGLEntry."Credit Amount" + GLEntry."Credit Amount";
          TempGLEntry."Additional-Currency Amount" := TempGLEntry."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
          TempGLEntry."Add.-Currency Debit Amount" := TempGLEntry."Add.-Currency Debit Amount" + GLEntry."Add.-Currency Debit Amount";
          TempGLEntry."Add.-Currency Credit Amount" :=
            TempGLEntry."Add.-Currency Credit Amount" + GLEntry."Add.-Currency Credit Amount";
          TempGLEntry.MODIFY;
        end else begin
          TempGLEntry := GLEntry;
          TempGLEntry."Entry No." := DimEntryNo;
          TempGLEntry.INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlLine@24(GenJnlLine@1000 : Record "Gen. Journal Line";VAR GLEntry@1001 : Record "G/L Entry";VAR DimBuf@1002 : Record "Dimension Buffer";PostDebit@1004 : Boolean);
    VAR
      TempDimSetEntry2@1007 : TEMPORARY Record "Dimension Set Entry";
      DimValue@1012 : Record "Dimension Value";
      ConsolidAmount@1003 : Decimal;
      AmountToPost@1005 : Decimal;
      AdjustAmount@1009 : Decimal;
      ClosingAmount@1010 : Decimal;
      TranslationNeeded@1006 : Boolean;
      idx@1008 : Integer;
      OriginalTranslationMethod@1011 : Integer;
    BEGIN
      with GenJnlLine do begin
        if PostDebit then begin
          if BusUnit."Data Source" = BusUnit."Data Source"::"Local Curr. (LCY)" then
            AmountToPost := GLEntry."Debit Amount" - GLEntry."Credit Amount"
          else
            AmountToPost := GLEntry."Add.-Currency Debit Amount" - GLEntry."Add.-Currency Credit Amount";
          "Account No." := TempSubsidGLAcc."Consol. Debit Acc.";
        end else begin
          if BusUnit."Data Source" = BusUnit."Data Source"::"Local Curr. (LCY)" then
            AmountToPost := -GLEntry."Credit Amount" + GLEntry."Debit Amount"
          else
            AmountToPost := -GLEntry."Add.-Currency Credit Amount" + GLEntry."Add.-Currency Debit Amount";
          "Account No." := TempSubsidGLAcc."Consol. Credit Acc.";
        end;
        if "Account No." = '' then
          "Account No." := TempSubsidGLAcc."No.";
        if AmountToPost = 0 then
          exit;
        ConsolidGLAcc.GET("Account No.");

        OriginalTranslationMethod := TempSubsidGLAcc."Consol. Translation Method";
        if TempSubsidGLAcc."Consol. Translation Method" = TempSubsidGLAcc."Consol. Translation Method"::"Average Rate (Manual)" then
          if ConsolidGLAcc."Income/Balance" = ConsolidGLAcc."Income/Balance"::"Balance Sheet" then
            TempSubsidGLAcc."Consol. Translation Method" := TempSubsidGLAcc."Consol. Translation Method"::"Closing Rate";

        ConsolidAmount := AmountToPost * BusUnit."Consolidation %" / 100;

        TranslationNeeded := (BusUnit."Currency Code" <> '');
        if TranslationNeeded then
          if BusUnit."Data Source" = BusUnit."Data Source"::"Add. Rep. Curr. (ACY)" then
            TranslationNeeded := (BusUnit."Currency Code" <> CurrencyACY);

        if TranslationNeeded then begin
          ClosingAmount :=
            ROUND(
              ConsolidCurrExchRate.ExchangeAmtFCYToLCY(
                EndingDate,BusUnit."Currency Code",
                ConsolidAmount,BusUnit."Balance Currency Factor"));
          case TempSubsidGLAcc."Consol. Translation Method" of
            TempSubsidGLAcc."Consol. Translation Method"::"Closing Rate":
              begin
                Amount := ClosingAmount;
                Description :=
                  COPYSTR(
                    STRSUBSTNO(
                      Text017,
                      ConsolidAmount,ROUND(BusUnit."Balance Currency Factor",0.00001),EndingDate),
                    1,MAXSTRLEN(Description));
              end;
            TempSubsidGLAcc."Consol. Translation Method"::"Composite Rate",
            TempSubsidGLAcc."Consol. Translation Method"::"Equity Rate",
            TempSubsidGLAcc."Consol. Translation Method"::"Average Rate (Manual)":
              begin
                Amount :=
                  ROUND(
                    ConsolidCurrExchRate.ExchangeAmtFCYToLCY(
                      EndingDate,BusUnit."Currency Code",
                      ConsolidAmount,BusUnit."Income Currency Factor"));
                Description :=
                  COPYSTR(
                    STRSUBSTNO(
                      Text017,
                      ConsolidAmount,ROUND(BusUnit."Income Currency Factor",0.00001),EndingDate),
                    1,MAXSTRLEN(Description));
              end;
            TempSubsidGLAcc."Consol. Translation Method"::"Historical Rate":
              begin
                Amount := TranslateUsingHistoricalRate(ConsolidAmount,GLEntry."Posting Date");
                Description :=
                  COPYSTR(
                    STRSUBSTNO(
                      Text017,
                      ConsolidAmount,ROUND(HistoricalCurrencyFactor,0.00001),GLEntry."Posting Date"),
                    1,MAXSTRLEN(Description));
              end;
          end;
        end else begin
          Amount := ROUND(ConsolidAmount);
          ClosingAmount := Amount;
          Description :=
            STRSUBSTNO(Text024,AmountToPost,BusUnit."Consolidation %",BusUnit.FIELDCAPTION("Consolidation %"));
        end;

        if TempSubsidGLAcc."Consol. Translation Method" = TempSubsidGLAcc."Consol. Translation Method"::"Historical Rate" then
          "Posting Date" := GLEntry."Posting Date"
        else
          "Posting Date" := EndingDate;
        idx := NORMALDATE("Posting Date") - NORMALDATE(StartingDate) + 1;

        if DimBuf.FINDSET then begin
          repeat
            TempDimSetEntry2.INIT;
            TempDimSetEntry2."Dimension Code" := DimBuf."Dimension Code";
            TempDimSetEntry2."Dimension Value Code" := DimBuf."Dimension Value Code";
            DimValue.GET(TempDimSetEntry2."Dimension Code",TempDimSetEntry2."Dimension Value Code");
            TempDimSetEntry2."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry2.INSERT;
          until DimBuf.NEXT = 0;
          "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",
            "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        end;

        if Amount <> 0 then
          GenJnlPostLineTmp(GenJnlLine);
        TempDimSetEntry2.RESET;
        TempDimSetEntry2.DELETEALL;

        RoundingResiduals[idx] := RoundingResiduals[idx] + Amount;
        AdjustAmount := ClosingAmount - Amount;
        case TempSubsidGLAcc."Consol. Translation Method" of
          TempSubsidGLAcc."Consol. Translation Method"::"Composite Rate":
            CompExchRateAdjAmts[idx] := CompExchRateAdjAmts[idx] + AdjustAmount;
          TempSubsidGLAcc."Consol. Translation Method"::"Equity Rate":
            EqExchRateAdjAmts[idx] := EqExchRateAdjAmts[idx] + AdjustAmount;
          else
            ExchRateAdjAmounts[idx] := ExchRateAdjAmounts[idx] + AdjustAmount;
        end;
        TempSubsidGLAcc."Consol. Translation Method" := OriginalTranslationMethod;
      end;
    END;

    LOCAL PROCEDURE TranslateUsingHistoricalRate@26(AmountToTranslate@1000 : Decimal;DateToTranslate@1001 : Date) TranslatedAmount : Decimal;
    BEGIN
      if BusUnit."Currency Exchange Rate Table" = BusUnit."Currency Exchange Rate Table"::"Local"
      then begin
        ConsolidCurrExchRate.RESET;
        ConsolidCurrExchRate.SETRANGE("Currency Code",BusUnit."Currency Code");
        ConsolidCurrExchRate.SETRANGE("Starting Date",0D,DateToTranslate);
        ConsolidCurrExchRate.FINDLAST;
        ConsolidCurrExchRate.TESTFIELD("Exchange Rate Amount");
        ConsolidCurrExchRate.TESTFIELD("Relational Exch. Rate Amount");
        ConsolidCurrExchRate.TESTFIELD("Relational Currency Code",'');
        HistoricalCurrencyFactor :=
          ConsolidCurrExchRate."Exchange Rate Amount" / ConsolidCurrExchRate."Relational Exch. Rate Amount";
      end else begin
        TempSubsidCurrExchRate.RESET;
        TempSubsidCurrExchRate.SETRANGE("Starting Date",0D,DateToTranslate);
        TempSubsidCurrExchRate.SETRANGE("Currency Code",CurrencyPCY);
        TempSubsidCurrExchRate.FINDLAST;
        TempSubsidCurrExchRate.TESTFIELD("Exchange Rate Amount");
        TempSubsidCurrExchRate.TESTFIELD("Relational Exch. Rate Amount");
        TempSubsidCurrExchRate.TESTFIELD("Relational Currency Code",'');
        HistoricalCurrencyFactor := TempSubsidCurrExchRate."Relational Exch. Rate Amount" /
          TempSubsidCurrExchRate."Exchange Rate Amount";
        if BusUnit."Data Source" = BusUnit."Data Source"::"Add. Rep. Curr. (ACY)" then begin
          TempSubsidCurrExchRate.SETRANGE("Currency Code",CurrencyACY);
          TempSubsidCurrExchRate.FINDLAST;
          TempSubsidCurrExchRate.TESTFIELD("Exchange Rate Amount");
          TempSubsidCurrExchRate.TESTFIELD("Relational Exch. Rate Amount");
          TempSubsidCurrExchRate.TESTFIELD("Relational Currency Code",'');
          HistoricalCurrencyFactor := HistoricalCurrencyFactor *
            TempSubsidCurrExchRate."Exchange Rate Amount" / TempSubsidCurrExchRate."Relational Exch. Rate Amount";
        end;
      end;
      TranslatedAmount := ROUND(AmountToTranslate / HistoricalCurrencyFactor);
    END;

    LOCAL PROCEDURE GenJnlPostLineTmp@22(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      NextLineNo := NextLineNo + 1;
      TempGenJnlLine := GenJnlLine;
      TempGenJnlLine.Amount := ROUND(TempGenJnlLine.Amount);
      TempGenJnlLine."Line No." := NextLineNo;
      TempGenJnlLine."System-Created Entry" := true;
      DimMgt.UpdateGlobalDimFromDimSetID(TempGenJnlLine."Dimension Set ID",
        TempGenJnlLine."Shortcut Dimension 1 Code",TempGenJnlLine."Shortcut Dimension 2 Code");
      TempGenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE GenJnlPostLineFinally@29();
    VAR
      GenJnlPostLine@1000 : Codeunit "Gen. Jnl.-Post Line";
    BEGIN
      TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date");
      if TempGenJnlLine.FINDSET then
        repeat
          Window.UPDATE(3,TempGenJnlLine."Account No.");
          GenJnlPostLine.RunWithCheck(TempGenJnlLine);
        until TempGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TextToDecimal@19(Txt@1000 : Text[50]) Result : Decimal;
    VAR
      DecOnlyTxt@1001 : Text[50];
      Idx@1003 : Integer;
    BEGIN
      for Idx := 1 to STRLEN(Txt) do
        if Txt[Idx] in ['0','1','2','3','4','5','6','7','8','9'] then
          DecOnlyTxt := DecOnlyTxt + COPYSTR(Txt,Idx,1);
      if DecOnlyTxt = '' then
        Result := 0
      else
        EVALUATE(Result,DecOnlyTxt);
    END;

    LOCAL PROCEDURE DateToDecimal@25(Dt@1000 : Date) Result : Decimal;
    VAR
      Mon@1001 : Decimal;
      Day@1002 : Decimal;
      Yr@1003 : Decimal;
    BEGIN
      Day := DATE2DMY(Dt,1);
      Mon := DATE2DMY(Dt,2);
      Yr := DATE2DMY(Dt,3);
      Result := Yr * 100 + Mon + Day / 100;
    END;

    LOCAL PROCEDURE ReportError@31(ErrorMsg@1000 : Text[250]);
    BEGIN
      if TestMode then begin
        if CurErrorIdx = ARRAYLEN(ErrorText) then
          ErrorText[CurErrorIdx] := STRSUBSTNO(Text006,ARRAYLEN(ErrorText))
        else begin
          CurErrorIdx := CurErrorIdx + 1;
          ErrorText[CurErrorIdx] := ErrorMsg;
        end;
      end else
        ERROR(ErrorMsg);
    END;

    [External]
    PROCEDURE GetNumSubsidGLAcc@32() : Integer;
    BEGIN
      TempSubsidGLAcc.RESET;
      exit(TempSubsidGLAcc.COUNT);
    END;

    [External]
    PROCEDURE Get1stSubsidGLAcc@33(VAR GlAccount@1000 : Record "G/L Account") : Boolean;
    BEGIN
      TempSubsidGLAcc.RESET;
      if TempSubsidGLAcc.FINDFIRST then begin
        GlAccount := TempSubsidGLAcc;
        if TestMode then
          TestGLAccounts;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetNxtSubsidGLAcc@34(VAR GLAccount@1000 : Record "G/L Account") : Boolean;
    BEGIN
      if TempSubsidGLAcc.NEXT <> 0 then begin
        GLAccount := TempSubsidGLAcc;
        if TestMode then
          TestGLAccounts;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetNumSubsidGLEntry@35() : Integer;
    BEGIN
      with TempSubsidGLEntry do begin
        RESET;
        SETCURRENTKEY("G/L Account No.","Posting Date");
        SETRANGE("G/L Account No.",TempSubsidGLAcc."No.");
        exit(COUNT);
      end;
    END;

    [External]
    PROCEDURE Get1stSubsidGLEntry@36(VAR GLEntry@1000 : Record "G/L Entry") : Boolean;
    BEGIN
      ConsolidatingClosingDate :=
        (StartingDate = EndingDate) and
        (StartingDate <> NORMALDATE(StartingDate));
      if (StartingDate <> NORMALDATE(StartingDate)) and
         (StartingDate <> EndingDate)
      then
        ReportError(Text030);
      with TempSubsidGLEntry do begin
        RESET;
        SETCURRENTKEY("G/L Account No.","Posting Date");
        SETRANGE("G/L Account No.",TempSubsidGLAcc."No.");
        if FINDFIRST then begin
          GLEntry := TempSubsidGLEntry;
          if TestMode then begin
            if ("Posting Date" <> NORMALDATE("Posting Date")) and
               not ConsolidatingClosingDate
            then
              ReportError(STRSUBSTNO(
                  Text031,
                  TABLECAPTION,
                  FIELDCAPTION("Posting Date"),
                  "Posting Date"));
          end;
          exit(true);
        end;
        exit(false);
      end;
    END;

    [External]
    PROCEDURE GetNxtSubsidGLEntry@37(VAR GLEntry@1000 : Record "G/L Entry") : Boolean;
    BEGIN
      with TempSubsidGLEntry do begin
        if NEXT <> 0 then begin
          GLEntry := TempSubsidGLEntry;
          if TestMode then begin
            if ("Posting Date" <> NORMALDATE("Posting Date")) and
               not ConsolidatingClosingDate
            then
              ReportError(STRSUBSTNO(
                  Text031,
                  TABLECAPTION,
                  FIELDCAPTION("Posting Date"),
                  "Posting Date"));
          end;
          exit(true);
        end;
        exit(false);
      end;
    END;

    LOCAL PROCEDURE InitializeGLAccount@43(VAR PostDebit@1000 : Boolean);
    BEGIN
      TestGLAccounts;
      TempSubsidGLAcc.CALCFIELDS(
        "Debit Amount","Credit Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount");
      if BusUnit."Data Source" = BusUnit."Data Source"::"Local Curr. (LCY)" then
        PostDebit := TempSubsidGLAcc."Debit Amount" > TempSubsidGLAcc."Credit Amount"
      else
        PostDebit := TempSubsidGLAcc."Add.-Currency Debit Amount" > TempSubsidGLAcc."Add.-Currency Credit Amount";
      TempGLEntry.RESET;
      TempGLEntry.DELETEALL;
      TempSubsidGLEntry.SETRANGE("G/L Account No.",TempSubsidGLAcc."No.");
    END;

    BEGIN
    END.
  }
}

