OBJECT Codeunit 359 PeriodFormManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=<Week>.<Year4>';
      Text001@1001 : TextConst 'ENU=<Month Text,3> <Year4>';
      Text002@1002 : TextConst 'ENU=<Quarter>/<Year4>';
      Text003@1003 : TextConst 'ENU=<Year4>';
      AccountingPeriod@1004 : Record "Accounting Period";

    [External]
    PROCEDURE FindDate@2(SearchString@1000 : Text[3];VAR Calendar@1001 : Record Date;PeriodType@1002 : 'Day,Week,Month,Quarter,Year,"Accounting Period"') : Boolean;
    VAR
      Found@1003 : Boolean;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      if Calendar."Period Start" = 0D then
        Calendar."Period Start" := WORKDATE;
      if SearchString in ['','=><'] then
        SearchString := '=<>';
      if PeriodType = PeriodType::"Accounting Period" then begin
        SetAccountingPeriodFilter(Calendar);
        Found := AccountingPeriod.FIND(SearchString);
        if Found then
          CopyAccountingPeriod(Calendar);
      end else begin
        Found := Calendar.FIND(SearchString);
        if Found then
          Calendar."Period End" := NORMALDATE(Calendar."Period End");
      end;
      exit(Found);
    END;

    [External]
    PROCEDURE NextDate@3(NextStep@1000 : Integer;VAR Calendar@1001 : Record Date;PeriodType@1002 : 'Day,Week,Month,Quarter,Year,"Accounting Period"') : Integer;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      if PeriodType = PeriodType::"Accounting Period" then begin
        SetAccountingPeriodFilter(Calendar);
        NextStep := AccountingPeriod.NEXT(NextStep);
        if NextStep <> 0 then
          CopyAccountingPeriod(Calendar);
      end else begin
        NextStep := Calendar.NEXT(NextStep);
        if NextStep <> 0 then
          Calendar."Period End" := NORMALDATE(Calendar."Period End");
      end;
      exit(NextStep);
    END;

    [External]
    PROCEDURE CreatePeriodFormat@4(PeriodType@1000 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';Date@1001 : Date) : Text[10];
    BEGIN
      case PeriodType of
        PeriodType::Day:
          exit(FORMAT(Date));
        PeriodType::Week:
          begin
            if DATE2DWY(Date,2) = 1 then
              Date := Date + 7 - DATE2DWY(Date,1);
            exit(FORMAT(Date,0,Text000));
          end;
        PeriodType::Month:
          exit(FORMAT(Date,0,Text001));
        PeriodType::Quarter:
          exit(FORMAT(Date,0,Text002));
        PeriodType::Year:
          exit(FORMAT(Date,0,Text003));
        PeriodType::"Accounting Period":
          exit(FORMAT(Date));
      end;
    END;

    [External]
    PROCEDURE MoveDateByPeriod@1(Date@1001 : Date;PeriodType@1002 : Option;MoveByNoOfPeriods@1000 : Integer) : Date;
    VAR
      DateExpression@1003 : DateFormula;
    BEGIN
      EVALUATE(DateExpression,'<' + FORMAT(MoveByNoOfPeriods) + GetPeriodTypeSymbol(PeriodType) + '>');
      exit(CALCDATE(DateExpression,Date));
    END;

    [External]
    PROCEDURE MoveDateByPeriodToEndOfPeriod@8(Date@1001 : Date;PeriodType@1002 : Option;MoveByNoOfPeriods@1000 : Integer) : Date;
    VAR
      DateExpression@1003 : DateFormula;
    BEGIN
      EVALUATE(DateExpression,'<' + FORMAT(MoveByNoOfPeriods + 1) + GetPeriodTypeSymbol(PeriodType) + '-1D>');
      exit(CALCDATE(DateExpression,Date));
    END;

    [External]
    PROCEDURE GetPeriodTypeSymbol@7(PeriodType@1000 : Option) : Text[1];
    VAR
      Date@1001 : Record Date;
    BEGIN
      case PeriodType of
        Date."Period Type"::Date:
          exit('D');
        Date."Period Type"::Week:
          exit('W');
        Date."Period Type"::Month:
          exit('M');
        Date."Period Type"::Quarter:
          exit('Q');
        Date."Period Type"::Year:
          exit('Y');
      end;
    END;

    LOCAL PROCEDURE SetAccountingPeriodFilter@5(VAR Calendar@1000 : Record Date);
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",Calendar.GETFILTER("Period Start"));
      AccountingPeriod.SETFILTER(Name,Calendar.GETFILTER("Period Name"));
      AccountingPeriod."Starting Date" := Calendar."Period Start";
    END;

    LOCAL PROCEDURE CopyAccountingPeriod@6(VAR Calendar@1000 : Record Date);
    BEGIN
      Calendar.INIT;
      Calendar."Period Start" := AccountingPeriod."Starting Date";
      Calendar."Period Name" := AccountingPeriod.Name;
      if AccountingPeriod.NEXT = 0 then
        Calendar."Period End" := DMY2DATE(31,12,9999)
      else
        Calendar."Period End" := AccountingPeriod."Starting Date" - 1;
    END;

    [External]
    PROCEDURE GetFullPeriodDateFilter@12(PeriodType@1003 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';DateFilter@1000 : Text) : Text;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
      Period@1001 : Record Date;
      StartDate@1004 : Date;
      EndDate@1005 : Date;
    BEGIN
      if DateFilter = '' then
        exit(DateFilter);

      Period.SETFILTER("Period Start",DateFilter);
      StartDate := Period.GETRANGEMIN("Period Start");
      EndDate := Period.GETRANGEMAX("Period Start");
      case PeriodType of
        PeriodType::Week,
        PeriodType::Month,
        PeriodType::Quarter,
        PeriodType::Year:
          begin
            Period.SETRANGE("Period Type",PeriodType);
            Period.SETFILTER("Period Start",'<=%1',StartDate);
            Period.FINDLAST;
            StartDate := Period."Period Start";
            Period.SETRANGE("Period Start");
            Period.SETFILTER("Period End",'>%1',EndDate);
            Period.FINDFIRST;
            EndDate := NORMALDATE(Period."Period End");
          end;
        PeriodType::"Accounting Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',StartDate);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETFILTER("Starting Date",'>%1',EndDate);
            AccountingPeriod.FINDFIRST;
            EndDate := AccountingPeriod."Starting Date" - 1;
          end;
      end;
      Period.SETRANGE("Period Start",StartDate,EndDate);
      exit(Period.GETFILTER("Period Start"));
    END;

    [External]
    PROCEDURE FindPeriodOnMatrixPage@9(VAR DateFilter@1004 : Text;VAR InternalDateFilter@1002 : Text;SearchText@1003 : Text[3];PeriodType@1005 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';UpdateDateFilter@1008 : Boolean);
    VAR
      Item@1001 : Record Item;
      Calendar@1000 : Record Date;
    BEGIN
      if DateFilter <> '' then begin
        Calendar.SETFILTER("Period Start",DateFilter);
        if not FindDate('+',Calendar,PeriodType) then
          FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      end;
      FindDate(SearchText,Calendar,PeriodType);
      Item.SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      if Item.GETRANGEMIN("Date Filter") = Item.GETRANGEMAX("Date Filter") then
        Item.SETRANGE("Date Filter",Item.GETRANGEMIN("Date Filter"));
      InternalDateFilter := Item.GETFILTER("Date Filter");
      if UpdateDateFilter then
        DateFilter := InternalDateFilter;
    END;

    BEGIN
    END.
  }
}

