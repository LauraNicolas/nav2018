OBJECT Report 595 Adjust Exchange Rates
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Cust. Ledger Entry"=rimd,
                TableData "Vendor Ledger Entry"=rimd,
                TableData "Exch. Rate Adjmt. Reg."=rimd,
                TableData "VAT Entry"=rimd,
                TableData "Detailed Cust. Ledg. Entry"=rimd,
                TableData "Detailed Vendor Ledg. Entry"=rimd;
    CaptionML=ENU=Adjust Exchange Rates;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if EndDateReq = 0D then
                    EndDate := DMY2DATE(31,12,9999)
                  else
                    EndDate := EndDateReq;
                  if PostingDocNo = '' then
                    ERROR(Text000,GenJnlLine.FIELDCAPTION("Document No."));
                  if not AdjCustVendBank and AdjGLAcc then
                    if not CONFIRM(Text001 + Text004,false) then
                      ERROR(Text005);

                  SourceCodeSetup.GET;

                  if ExchRateAdjReg.FINDLAST then
                    ExchRateAdjReg.INIT;

                  GLSetup.GET;

                  if AdjGLAcc then begin
                    GLSetup.TESTFIELD("Additional Reporting Currency");

                    Currency3.GET(GLSetup."Additional Reporting Currency");
                    "G/L Account".GET(Currency3.GetRealizedGLGainsAccount);
                    "G/L Account".TESTFIELD("Exchange Rate Adjustment","G/L Account"."Exchange Rate Adjustment"::"No Adjustment");

                    "G/L Account".GET(Currency3.GetRealizedGLLossesAccount);
                    "G/L Account".TESTFIELD("Exchange Rate Adjustment","G/L Account"."Exchange Rate Adjustment"::"No Adjustment");

                    with VATPostingSetup2 do
                      if FIND('-') then
                        repeat
                          if "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" then begin
                            CheckExchRateAdjustment(
                              "Purchase VAT Account",TABLECAPTION,FIELDCAPTION("Purchase VAT Account"));
                            CheckExchRateAdjustment(
                              "Reverse Chrg. VAT Acc.",TABLECAPTION,FIELDCAPTION("Reverse Chrg. VAT Acc."));
                            CheckExchRateAdjustment(
                              "Purch. VAT Unreal. Account",TABLECAPTION,FIELDCAPTION("Purch. VAT Unreal. Account"));
                            CheckExchRateAdjustment(
                              "Reverse Chrg. VAT Unreal. Acc.",TABLECAPTION,FIELDCAPTION("Reverse Chrg. VAT Unreal. Acc."));
                            CheckExchRateAdjustment(
                              "Sales VAT Account",TABLECAPTION,FIELDCAPTION("Sales VAT Account"));
                            CheckExchRateAdjustment(
                              "Sales VAT Unreal. Account",TABLECAPTION,FIELDCAPTION("Sales VAT Unreal. Account"));
                          end;
                        until NEXT = 0;

                    with TaxJurisdiction2 do
                      if FIND('-') then
                        repeat
                          CheckExchRateAdjustment(
                            "Tax Account (Purchases)",TABLECAPTION,FIELDCAPTION("Tax Account (Purchases)"));
                          CheckExchRateAdjustment(
                            "Reverse Charge (Purchases)",TABLECAPTION,FIELDCAPTION("Reverse Charge (Purchases)"));
                          CheckExchRateAdjustment(
                            "Unreal. Tax Acc. (Purchases)",TABLECAPTION,FIELDCAPTION("Unreal. Tax Acc. (Purchases)"));
                          CheckExchRateAdjustment(
                            "Unreal. Rev. Charge (Purch.)",TABLECAPTION,FIELDCAPTION("Unreal. Rev. Charge (Purch.)"));
                          CheckExchRateAdjustment(
                            "Tax Account (Sales)",TABLECAPTION,FIELDCAPTION("Tax Account (Sales)"));
                          CheckExchRateAdjustment(
                            "Unreal. Tax Acc. (Sales)",TABLECAPTION,FIELDCAPTION("Unreal. Tax Acc. (Sales)"));
                        until NEXT = 0;

                    AddCurrCurrencyFactor :=
                      CurrExchRate2.ExchangeRateAdjmt(PostingDate,GLSetup."Additional Reporting Currency");
                  end;
                END;

    OnPostReport=BEGIN
                   UpdateAnalysisView.UpdateAll(0,true);

                   if TotalCustomersAdjusted + TotalVendorsAdjusted + TotalBankAccountsAdjusted + TotalGLAccountsAdjusted < 1 then
                     MESSAGE(NothingToAdjustMsg)
                   else
                     MESSAGE(RatesAdjustedMsg);
                 END;

  }
  DATASET
  {
    { 4146;    ;DataItem;Currency            ;
               DataItemTable=Currency;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               CheckPostingDate;
                               if not AdjCustVendBank then
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text006 +
                                 Text007 +
                                 Text008 +
                                 Text009 +
                                 Text010);

                               CustNoTotal := Customer.COUNT;
                               VendNoTotal := Vendor.COUNT;
                               COPYFILTER(Code,"Bank Account"."Currency Code");
                               FILTERGROUP(2);
                               "Bank Account".SETFILTER("Currency Code",'<>%1','');
                               FILTERGROUP(0);
                               BankAccNoTotal := "Bank Account".COUNT;
                               "Bank Account".RESET;
                             END;

               OnAfterGetRecord=BEGIN
                                  "Last Date Adjusted" := PostingDate;
                                  MODIFY;

                                  "Currency Factor" :=
                                    CurrExchRate.ExchangeRateAdjmt(PostingDate,Code);

                                  Currency2 := Currency;
                                  Currency2.INSERT;
                                END;

               OnPostDataItem=BEGIN
                                if (Code = '') and AdjCustVendBank then
                                  ERROR(Text011);
                              END;

               ReqFilterFields=Code }

    { 4558;1   ;DataItem;Bank Account        ;
               DataItemTable="Bank Account";
               DataItemTableView=SORTING("Bank Acc. Posting Group");
               OnPreDataItem=BEGIN
                               SETRANGE("Date Filter",StartDate,EndDate);
                               TempDimBuf2.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempEntryNoAmountBuf.DELETEALL;
                                  BankAccNo := BankAccNo + 1;
                                  Window.UPDATE(1,ROUND(BankAccNo / BankAccNoTotal * 10000,1));

                                  TempDimSetEntry.RESET;
                                  TempDimSetEntry.DELETEALL;
                                  TempDimBuf.RESET;
                                  TempDimBuf.DELETEALL;

                                  CALCFIELDS("Balance at Date","Balance at Date (LCY)");
                                  AdjBase := "Balance at Date";
                                  AdjBaseLCY := "Balance at Date (LCY)";
                                  AdjAmount :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
                                        PostingDate,Currency.Code,"Balance at Date",Currency."Currency Factor")) -
                                    "Balance at Date (LCY)";

                                  if AdjAmount <> 0 then begin
                                    GenJnlLine.VALIDATE("Posting Date",PostingDate);
                                    GenJnlLine."Document No." := PostingDocNo;
                                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Bank Account";
                                    GenJnlLine.VALIDATE("Account No.","No.");
                                    GenJnlLine.Description := PADSTR(STRSUBSTNO(PostingDescription,Currency.Code,AdjBase),MAXSTRLEN(GenJnlLine.Description));
                                    GenJnlLine.VALIDATE(Amount,0);
                                    GenJnlLine."Amount (LCY)" := AdjAmount;
                                    GenJnlLine."Source Currency Code" := Currency.Code;
                                    if Currency.Code = GLSetup."Additional Reporting Currency" then
                                      GenJnlLine."Source Currency Amount" := 0;
                                    GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
                                    GenJnlLine."System-Created Entry" := true;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    CopyDimSetEntryToDimBuf(TempDimSetEntry,TempDimBuf);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                    with TempEntryNoAmountBuf do begin
                                      INIT;
                                      "Business Unit Code" := '';
                                      "Entry No." := "Entry No." + 1;
                                      Amount := AdjAmount;
                                      Amount2 := AdjBase;
                                      INSERT;
                                    end;
                                    TempDimBuf2.INIT;
                                    TempDimBuf2."Table ID" := TempEntryNoAmountBuf."Entry No.";
                                    TempDimBuf2."Entry No." := GetDimCombID(TempDimBuf);
                                    TempDimBuf2.INSERT;
                                    TotalAdjBase := TotalAdjBase + AdjBase;
                                    TotalAdjBaseLCY := TotalAdjBaseLCY + AdjBaseLCY;
                                    TotalAdjAmount := TotalAdjAmount + AdjAmount;
                                    Window.UPDATE(4,TotalAdjAmount);

                                    if TempEntryNoAmountBuf.Amount <> 0 then begin
                                      TempDimSetEntry.RESET;
                                      TempDimSetEntry.DELETEALL;
                                      TempDimBuf.RESET;
                                      TempDimBuf.DELETEALL;
                                      TempDimBuf2.SETRANGE("Table ID",TempEntryNoAmountBuf."Entry No.");
                                      if TempDimBuf2.FINDFIRST then
                                        DimBufMgt.GetDimensions(TempDimBuf2."Entry No.",TempDimBuf);
                                      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
                                      if TempEntryNoAmountBuf.Amount > 0 then
                                        PostAdjmt(
                                          Currency.GetRealizedGainsAccount,-TempEntryNoAmountBuf.Amount,TempEntryNoAmountBuf.Amount2,
                                          "Currency Code",TempDimSetEntry,PostingDate,'')
                                      else
                                        PostAdjmt(
                                          Currency.GetRealizedLossesAccount,-TempEntryNoAmountBuf.Amount,TempEntryNoAmountBuf.Amount2,
                                          "Currency Code",TempDimSetEntry,PostingDate,'');
                                    end;
                                  end;
                                  TempDimBuf2.DELETEALL;
                                END;

               DataItemLink="Currency Code"=FIELD(Code) }

    { 3273;2   ;DataItem;BankAccountGroupTotal;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=VAR
                                  BankAccount@1102601000 : Record "Bank Account";
                                  GroupTotal@1102601001 : Boolean;
                                BEGIN
                                  BankAccount.COPY("Bank Account");
                                  if BankAccount.NEXT = 1 then begin
                                    if BankAccount."Bank Acc. Posting Group" <> "Bank Account"."Bank Acc. Posting Group" then
                                      GroupTotal := true;
                                  end else
                                    GroupTotal := true;

                                  if GroupTotal then
                                    if TotalAdjAmount <> 0 then begin
                                      AdjExchRateBufferUpdate(
                                        "Bank Account"."Currency Code","Bank Account"."Bank Acc. Posting Group",
                                        TotalAdjBase,TotalAdjBaseLCY,TotalAdjAmount,0,0,0,PostingDate,'');
                                      InsertExchRateAdjmtReg(3,"Bank Account"."Bank Acc. Posting Group","Bank Account"."Currency Code");
                                      TotalBankAccountsAdjusted += 1;
                                      AdjExchRateBuffer.RESET;
                                      AdjExchRateBuffer.DELETEALL;
                                      TotalAdjBase := 0;
                                      TotalAdjBaseLCY := 0;
                                      TotalAdjAmount := 0;
                                    end;
                                END;
                                 }

    { 6836;    ;DataItem;Customer            ;
               DataItemTable=Customer;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               if not AdjCustVendBank then
                                 CurrReport.BREAK;

                               DtldCustLedgEntry.LOCKTABLE;
                               CustLedgerEntry.LOCKTABLE;

                               CustNo := 0;

                               if DtldCustLedgEntry.FIND('+') then
                                 NewEntryNo := DtldCustLedgEntry."Entry No." + 1
                               else
                                 NewEntryNo := 1;

                               CLEAR(DimMgt);
                               TempEntryNoAmountBuf.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  CustNo := CustNo + 1;
                                  Window.UPDATE(2,ROUND(CustNo / CustNoTotal * 10000,1));

                                  TempCustLedgerEntry.DELETEALL;

                                  Currency.COPYFILTER(Code,CustLedgerEntry."Currency Code");
                                  CustLedgerEntry.FILTERGROUP(2);
                                  CustLedgerEntry.SETFILTER("Currency Code",'<>%1','');
                                  CustLedgerEntry.FILTERGROUP(0);

                                  DtldCustLedgEntry.RESET;
                                  DtldCustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date","Entry Type");
                                  DtldCustLedgEntry.SETRANGE("Customer No.","No.");
                                  DtldCustLedgEntry.SETRANGE("Posting Date",CALCDATE('<+1D>',EndDate),DMY2DATE(31,12,9999));
                                  if DtldCustLedgEntry.FIND('-') then
                                    repeat
                                      CustLedgerEntry."Entry No." := DtldCustLedgEntry."Cust. Ledger Entry No.";
                                      if CustLedgerEntry.FIND('=') then
                                        if (CustLedgerEntry."Posting Date" >= StartDate) and
                                           (CustLedgerEntry."Posting Date" <= EndDate)
                                        then begin
                                          TempCustLedgerEntry."Entry No." := CustLedgerEntry."Entry No.";
                                          if TempCustLedgerEntry.INSERT then;
                                        end;
                                    until DtldCustLedgEntry.NEXT = 0;

                                  CustLedgerEntry.SETCURRENTKEY("Customer No.",Open);
                                  CustLedgerEntry.SETRANGE("Customer No.","No.");
                                  CustLedgerEntry.SETRANGE(Open,true);
                                  CustLedgerEntry.SETRANGE("Posting Date",0D,EndDate);
                                  if CustLedgerEntry.FIND('-') then
                                    repeat
                                      TempCustLedgerEntry."Entry No." := CustLedgerEntry."Entry No.";
                                      if TempCustLedgerEntry.INSERT then;
                                    until CustLedgerEntry.NEXT = 0;
                                  CustLedgerEntry.RESET;
                                END;

               OnPostDataItem=BEGIN
                                if CustNo <> 0 then
                                  HandlePostAdjmt(1); // Customer
                              END;
                               }

    { 3687;1   ;DataItem;CustomerLedgerEntryLoop;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               if not TempCustLedgerEntry.FIND('-') then
                                 CurrReport.BREAK;
                               FirstEntry := true;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempDtldCustLedgEntrySums.DELETEALL;

                                  if FirstEntry then begin
                                    TempCustLedgerEntry.FIND('-');
                                    FirstEntry := false
                                  end else
                                    if TempCustLedgerEntry.NEXT = 0 then
                                      CurrReport.BREAK;
                                  CustLedgerEntry.GET(TempCustLedgerEntry."Entry No.");
                                  AdjustCustomerLedgerEntry(CustLedgerEntry,PostingDate);
                                END;
                                 }

    { 6942;2   ;DataItem;Detailed Cust. Ledg. Entry;
               DataItemTable="Detailed Cust. Ledg. Entry";
               DataItemTableView=SORTING("Cust. Ledger Entry No.","Posting Date");
               OnPreDataItem=BEGIN
                               SETCURRENTKEY("Cust. Ledger Entry No.");
                               SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
                               SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate));
                             END;

               OnAfterGetRecord=BEGIN
                                  AdjustCustomerLedgerEntry(CustLedgerEntry,"Posting Date");
                                END;
                                 }

    { 3182;    ;DataItem;Vendor              ;
               DataItemTable=Vendor;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               if not AdjCustVendBank then
                                 CurrReport.BREAK;

                               DtldVendLedgEntry.LOCKTABLE;
                               VendorLedgerEntry.LOCKTABLE;

                               VendNo := 0;
                               if DtldVendLedgEntry.FIND('+') then
                                 NewEntryNo := DtldVendLedgEntry."Entry No." + 1
                               else
                                 NewEntryNo := 1;

                               CLEAR(DimMgt);
                               TempEntryNoAmountBuf.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  VendNo := VendNo + 1;
                                  Window.UPDATE(3,ROUND(VendNo / VendNoTotal * 10000,1));

                                  TempVendorLedgerEntry.DELETEALL;

                                  Currency.COPYFILTER(Code,VendorLedgerEntry."Currency Code");
                                  VendorLedgerEntry.FILTERGROUP(2);
                                  VendorLedgerEntry.SETFILTER("Currency Code",'<>%1','');
                                  VendorLedgerEntry.FILTERGROUP(0);

                                  DtldVendLedgEntry.RESET;
                                  DtldVendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date","Entry Type");
                                  DtldVendLedgEntry.SETRANGE("Vendor No.","No.");
                                  DtldVendLedgEntry.SETRANGE("Posting Date",CALCDATE('<+1D>',EndDate),DMY2DATE(31,12,9999));
                                  if DtldVendLedgEntry.FIND('-') then
                                    repeat
                                      VendorLedgerEntry."Entry No." := DtldVendLedgEntry."Vendor Ledger Entry No.";
                                      if VendorLedgerEntry.FIND('=') then
                                        if (VendorLedgerEntry."Posting Date" >= StartDate) and
                                           (VendorLedgerEntry."Posting Date" <= EndDate)
                                        then begin
                                          TempVendorLedgerEntry."Entry No." := VendorLedgerEntry."Entry No.";
                                          if TempVendorLedgerEntry.INSERT then;
                                        end;
                                    until DtldVendLedgEntry.NEXT = 0;

                                  VendorLedgerEntry.SETCURRENTKEY("Vendor No.",Open);
                                  VendorLedgerEntry.SETRANGE("Vendor No.","No.");
                                  VendorLedgerEntry.SETRANGE(Open,true);
                                  VendorLedgerEntry.SETRANGE("Posting Date",0D,EndDate);
                                  if VendorLedgerEntry.FIND('-') then
                                    repeat
                                      TempVendorLedgerEntry."Entry No." := VendorLedgerEntry."Entry No.";
                                      if TempVendorLedgerEntry.INSERT then;
                                    until VendorLedgerEntry.NEXT = 0;
                                  VendorLedgerEntry.RESET;
                                END;

               OnPostDataItem=BEGIN
                                if VendNo <> 0 then
                                  HandlePostAdjmt(2); // Vendor
                              END;
                               }

    { 1221;1   ;DataItem;VendorLedgerEntryLoop;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               if not TempVendorLedgerEntry.FIND('-') then
                                 CurrReport.BREAK;
                               FirstEntry := true;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempDtldVendLedgEntrySums.DELETEALL;

                                  if FirstEntry then begin
                                    TempVendorLedgerEntry.FIND('-');
                                    FirstEntry := false
                                  end else
                                    if TempVendorLedgerEntry.NEXT = 0 then
                                      CurrReport.BREAK;
                                  VendorLedgerEntry.GET(TempVendorLedgerEntry."Entry No.");
                                  AdjustVendorLedgerEntry(VendorLedgerEntry,PostingDate);
                                END;
                                 }

    { 2149;2   ;DataItem;Detailed Vendor Ledg. Entry;
               DataItemTable="Detailed Vendor Ledg. Entry";
               DataItemTableView=SORTING("Vendor Ledger Entry No.","Posting Date");
               OnPreDataItem=BEGIN
                               SETCURRENTKEY("Vendor Ledger Entry No.");
                               SETRANGE("Vendor Ledger Entry No.",VendorLedgerEntry."Entry No.");
                               SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate));
                             END;

               OnAfterGetRecord=BEGIN
                                  AdjustVendorLedgerEntry(VendorLedgerEntry,"Posting Date");
                                END;
                                 }

    { 1756;    ;DataItem;VAT Posting Setup   ;
               DataItemTable="VAT Posting Setup";
               DataItemTableView=SORTING("VAT Bus. Posting Group","VAT Prod. Posting Group");
               OnPreDataItem=BEGIN
                               if not AdjGLAcc or
                                  (GLSetup."VAT Exchange Rate Adjustment" = GLSetup."VAT Exchange Rate Adjustment"::"No Adjustment")
                               then
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text012 +
                                 Text013);

                               VATEntryNoTotal := VATEntry.COUNT;
                               if not
                                  VATEntry.SETCURRENTKEY(
                                    Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
                               then
                                 VATEntry.SETCURRENTKEY(
                                   Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
                               VATEntry.SETRANGE(Closed,false);
                               VATEntry.SETRANGE("Posting Date",StartDate,EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  VATEntryNo := VATEntryNo + 1;
                                  Window.UPDATE(1,ROUND(VATEntryNo / VATEntryNoTotal * 10000,1));

                                  VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
                                  VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");

                                  if "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" then begin
                                    AdjustVATEntries(VATEntry.Type::Purchase,false);
                                    if (VATEntry2.Amount <> 0) or (VATEntry2."Additional-Currency Amount" <> 0) then begin
                                      AdjustVATAccount(
                                        GetPurchAccount(false),
                                        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
                                        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
                                      if "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" then
                                        AdjustVATAccount(
                                          GetRevChargeAccount(false),
                                          -VATEntry2.Amount,-VATEntry2."Additional-Currency Amount",
                                          -VATEntryTotalBase.Amount,-VATEntryTotalBase."Additional-Currency Amount");
                                    end;
                                    if (VATEntry2."Remaining Unrealized Amount" <> 0) or
                                       (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
                                    then begin
                                      TESTFIELD("Unrealized VAT Type");
                                      AdjustVATAccount(
                                        GetPurchAccount(true),
                                        VATEntry2."Remaining Unrealized Amount",
                                        VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                        VATEntryTotalBase."Remaining Unrealized Amount",
                                        VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                      if "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" then
                                        AdjustVATAccount(
                                          GetRevChargeAccount(true),
                                          -VATEntry2."Remaining Unrealized Amount",
                                          -VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                          -VATEntryTotalBase."Remaining Unrealized Amount",
                                          -VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                    end;

                                    AdjustVATEntries(VATEntry.Type::Sale,false);
                                    if (VATEntry2.Amount <> 0) or (VATEntry2."Additional-Currency Amount" <> 0) then
                                      AdjustVATAccount(
                                        GetSalesAccount(false),
                                        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
                                        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
                                    if (VATEntry2."Remaining Unrealized Amount" <> 0) or
                                       (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
                                    then begin
                                      TESTFIELD("Unrealized VAT Type");
                                      AdjustVATAccount(
                                        GetSalesAccount(true),
                                        VATEntry2."Remaining Unrealized Amount",
                                        VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                        VATEntryTotalBase."Remaining Unrealized Amount",
                                        VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                    end;
                                  end else begin
                                    if TaxJurisdiction.FIND('-') then
                                      repeat
                                        VATEntry.SETRANGE("Tax Jurisdiction Code",TaxJurisdiction.Code);
                                        AdjustVATEntries(VATEntry.Type::Purchase,false);
                                        AdjustPurchTax(false);
                                        AdjustVATEntries(VATEntry.Type::Purchase,true);
                                        AdjustPurchTax(true);
                                        AdjustVATEntries(VATEntry.Type::Sale,false);
                                        AdjustSalesTax;
                                      until TaxJurisdiction.NEXT = 0;
                                    VATEntry.SETRANGE("Tax Jurisdiction Code");
                                  end;
                                  CLEAR(VATEntryTotalBase);
                                END;
                                 }

    { 6710;    ;DataItem;G/L Account         ;
               DataItemTable="G/L Account";
               DataItemTableView=SORTING("No.") WHERE("Exchange Rate Adjustment"=FILTER("Adjust Amount".."Adjust Additional-Currency Amount"));
               OnPreDataItem=BEGIN
                               if not AdjGLAcc then
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text014 +
                                 Text015);

                               GLAccNoTotal := COUNT;
                               SETRANGE("Date Filter",StartDate,EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  GLAccNo := GLAccNo + 1;
                                  Window.UPDATE(1,ROUND(GLAccNo / GLAccNoTotal * 10000,1));
                                  if "Exchange Rate Adjustment" = "Exchange Rate Adjustment"::"No Adjustment" then
                                    CurrReport.SKIP;

                                  TempDimSetEntry.RESET;
                                  TempDimSetEntry.DELETEALL;
                                  CALCFIELDS("Net Change","Additional-Currency Net Change");
                                  case "Exchange Rate Adjustment" of
                                    "Exchange Rate Adjustment"::"Adjust Amount":
                                      PostGLAccAdjmt(
                                        "No.","Exchange Rate Adjustment"::"Adjust Amount",
                                        ROUND(
                                          CurrExchRate2.ExchangeAmtFCYToLCYAdjmt(
                                            PostingDate,GLSetup."Additional Reporting Currency",
                                            "Additional-Currency Net Change",AddCurrCurrencyFactor) -
                                          "Net Change"),
                                        "Net Change",
                                        "Additional-Currency Net Change");
                                    "Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
                                      PostGLAccAdjmt(
                                        "No.","Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
                                        ROUND(
                                          CurrExchRate2.ExchangeAmtLCYToFCY(
                                            PostingDate,GLSetup."Additional Reporting Currency",
                                            "Net Change",AddCurrCurrencyFactor) -
                                          "Additional-Currency Net Change",
                                          Currency3."Amount Rounding Precision"),
                                        "Net Change",
                                        "Additional-Currency Net Change");
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if AdjGLAcc then begin
                                  GenJnlLine."Document No." := PostingDocNo;
                                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                                  GenJnlLine."Posting Date" := PostingDate;
                                  GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";

                                  if GLAmtTotal <> 0 then begin
                                    if GLAmtTotal < 0 then
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLLossesAccount
                                    else
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLGainsAccount;
                                    GenJnlLine.Description :=
                                      STRSUBSTNO(
                                        PostingDescription,
                                        GLSetup."Additional Reporting Currency",
                                        GLAddCurrNetChangeTotal);
                                    GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Amount Only";
                                    GenJnlLine."Currency Code" := '';
                                    GenJnlLine.Amount := -GLAmtTotal;
                                    GenJnlLine."Amount (LCY)" := -GLAmtTotal;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                  end;
                                  if GLAddCurrAmtTotal <> 0 then begin
                                    if GLAddCurrAmtTotal < 0 then
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLLossesAccount
                                    else
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLGainsAccount;
                                    GenJnlLine.Description :=
                                      STRSUBSTNO(
                                        PostingDescription,'',
                                        GLNetChangeTotal);
                                    GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
                                    GenJnlLine."Currency Code" := GLSetup."Additional Reporting Currency";
                                    GenJnlLine.Amount := -GLAddCurrAmtTotal;
                                    GenJnlLine."Amount (LCY)" := 0;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                  end;

                                  with ExchRateAdjReg do begin
                                    "No." := "No." + 1;
                                    "Creation Date" := PostingDate;
                                    "Account Type" := "Account Type"::"G/L Account";
                                    "Posting Group" := '';
                                    "Currency Code" := GLSetup."Additional Reporting Currency";
                                    "Currency Factor" := CurrExchRate2."Adjustment Exch. Rate Amount";
                                    "Adjusted Base" := 0;
                                    "Adjusted Base (LCY)" := GLNetChangeBase;
                                    "Adjusted Amt. (LCY)" := GLAmtTotal;
                                    "Adjusted Base (Add.-Curr.)" := GLAddCurrNetChangeBase;
                                    "Adjusted Amt. (Add.-Curr.)" := GLAddCurrAmtTotal;
                                    INSERT;
                                  end;

                                  TotalGLAccountsAdjusted += 1;
                                end;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if PostingDescription = '' then
                     PostingDescription := Text016;
                   if not (AdjCustVendBank or AdjGLAcc) then
                     AdjCustVendBank := true;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 21  ;2   ;Group     ;
                  Name=Adjustment Period;
                  CaptionML=ENU=Adjustment Period }

      { 1   ;3   ;Field     ;
                  Name=StartingDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the beginning of the period for which entries are adjusted. This field is usually left blank, but you can enter a date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartDate }

      { 2   ;3   ;Field     ;
                  Name=EndingDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the last date for which entries are adjusted. This date is usually the same as the posting date in the Posting Date field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDateReq;
                  OnValidate=BEGIN
                               PostingDate := EndDateReq;
                             END;
                              }

      { 3   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies text for the general ledger entries that are created by the batch job. The default text is Exchange Rate Adjmt. of %1 %2, in which %1 is replaced by the currency code and %2 is replaced by the currency amount that is adjusted. For example, Exchange Rate Adjmt. of DEM 38,000.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDescription }

      { 4   ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date on which the general ledger entries are posted. This date is usually the same as the ending date in the Ending Date field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               CheckPostingDate;
                             END;
                              }

      { 5   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the document number that will appear on the general ledger entries that are created by the batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDocNo }

      { 7   ;2   ;Field     ;
                  Name=Adjust Customer, Vendor and Bank Accounts;
                  CaptionML=ENU=Adjust Customer, Vendor and Bank Accounts;
                  ToolTipML=ENU=Specifies if you want to adjust customer, vendor, and bank accounts for currency fluctuations.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AdjCustVendBank;
                  MultiLine=true }

      { 9   ;2   ;Field     ;
                  Name=AdjGLAcc;
                  CaptionML=ENU=Adjust G/L Accounts for Add.-Reporting Currency;
                  ToolTipML=ENU=Specifies if you want to post in an additional reporting currency and adjust general ledger accounts for currency fluctuations between LCY and the additional reporting currency.;
                  ApplicationArea=#Suite;
                  SourceExpr=AdjGLAcc;
                  MultiLine=true }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be entered.';
      Text001@1001 : TextConst 'ENU="Do you want to adjust general ledger entries for currency fluctuations without adjusting customer, vendor and bank ledger entries? This may result in incorrect currency adjustments to payables, receivables and bank accounts.\\ "';
      Text004@1004 : TextConst 'ENU=Do you wish to continue?';
      Text005@1005 : TextConst 'ENU=The adjustment of exchange rates has been canceled.';
      Text006@1006 : TextConst 'ENU=Adjusting exchange rates...\\';
      Text007@1007 : TextConst 'ENU=Bank Account    @1@@@@@@@@@@@@@\\';
      Text008@1008 : TextConst 'ENU=Customer        @2@@@@@@@@@@@@@\';
      Text009@1009 : TextConst 'ENU=Vendor          @3@@@@@@@@@@@@@\';
      Text010@1010 : TextConst 'ENU=Adjustment      #4#############';
      Text011@1011 : TextConst 'ENU=No currencies have been found.';
      Text012@1012 : TextConst 'ENU=Adjusting VAT Entries...\\';
      Text013@1013 : TextConst 'ENU=VAT Entry    @1@@@@@@@@@@@@@';
      Text014@1014 : TextConst 'ENU=Adjusting general ledger...\\';
      Text015@1015 : TextConst 'ENU=G/L Account    @1@@@@@@@@@@@@@';
      Text016@1016 : TextConst '@@@="%1 = Currency Code, %2= Adjust Amount";ENU=Adjmt. of %1 %2, Ex.Rate Adjust.';
      Text017@1017 : TextConst 'ENU="%1 on %2 %3 must be %4. When this %2 is used in %5, the exchange rate adjustment is defined in the %6 field in the %7. %2 %3 is used in the %8 field in the %5. "';
      DtldCustLedgEntry@1019 : Record "Detailed Cust. Ledg. Entry";
      TempDtldCustLedgEntry@1003 : TEMPORARY Record "Detailed Cust. Ledg. Entry";
      TempDtldCustLedgEntrySums@1096 : TEMPORARY Record "Detailed Cust. Ledg. Entry";
      DtldVendLedgEntry@1020 : Record "Detailed Vendor Ledg. Entry";
      TempDtldVendLedgEntry@1018 : TEMPORARY Record "Detailed Vendor Ledg. Entry";
      TempDtldVendLedgEntrySums@1098 : TEMPORARY Record "Detailed Vendor Ledg. Entry";
      ExchRateAdjReg@1021 : Record "Exch. Rate Adjmt. Reg.";
      CustPostingGr@1022 : Record "Customer Posting Group";
      VendPostingGr@1023 : Record "Vendor Posting Group";
      GenJnlLine@1024 : Record "Gen. Journal Line";
      SourceCodeSetup@1025 : Record "Source Code Setup";
      AdjExchRateBuffer@1026 : TEMPORARY Record "Adjust Exchange Rate Buffer";
      AdjExchRateBuffer2@1027 : TEMPORARY Record "Adjust Exchange Rate Buffer";
      Currency2@1028 : TEMPORARY Record Currency;
      Currency3@1029 : Record Currency;
      CurrExchRate@1030 : Record "Currency Exchange Rate";
      CurrExchRate2@1031 : Record "Currency Exchange Rate";
      GLSetup@1032 : Record "General Ledger Setup";
      VATEntry@1033 : Record "VAT Entry";
      VATEntry2@1034 : Record "VAT Entry";
      VATEntryTotalBase@1035 : Record "VAT Entry";
      TaxJurisdiction@1036 : Record "Tax Jurisdiction";
      VATPostingSetup2@1037 : Record "VAT Posting Setup";
      TaxJurisdiction2@1038 : Record "Tax Jurisdiction";
      TempDimBuf@1049 : TEMPORARY Record "Dimension Buffer";
      TempDimBuf2@1090 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1050 : TEMPORARY Record "Dimension Set Entry";
      TempEntryNoAmountBuf@1079 : TEMPORARY Record "Entry No. Amount Buffer";
      CustLedgerEntry@1083 : Record "Cust. Ledger Entry";
      TempCustLedgerEntry@1082 : TEMPORARY Record "Cust. Ledger Entry";
      VendorLedgerEntry@1081 : Record "Vendor Ledger Entry";
      TempVendorLedgerEntry@1085 : TEMPORARY Record "Vendor Ledger Entry";
      GenJnlPostLine@1039 : Codeunit "Gen. Jnl.-Post Line";
      UpdateAnalysisView@1002 : Codeunit "Update Analysis View";
      DimMgt@1077 : Codeunit DimensionManagement;
      DimBufMgt@1078 : Codeunit "Dimension Buffer Management";
      Window@1040 : Dialog;
      TotalAdjBase@1087 : Decimal;
      TotalAdjBaseLCY@1086 : Decimal;
      TotalAdjAmount@1041 : Decimal;
      GainsAmount@1042 : Decimal;
      LossesAmount@1043 : Decimal;
      PostingDate@1044 : Date;
      PostingDescription@1045 : Text[50];
      AdjBase@1046 : Decimal;
      AdjBaseLCY@1047 : Decimal;
      AdjAmount@1048 : Decimal;
      CustNo@1051 : Decimal;
      CustNoTotal@1052 : Decimal;
      VendNo@1053 : Decimal;
      VendNoTotal@1054 : Decimal;
      BankAccNo@1055 : Decimal;
      BankAccNoTotal@1056 : Decimal;
      GLAccNo@1057 : Decimal;
      GLAccNoTotal@1058 : Decimal;
      GLAmtTotal@1059 : Decimal;
      GLAddCurrAmtTotal@1060 : Decimal;
      GLNetChangeTotal@1061 : Decimal;
      GLAddCurrNetChangeTotal@1062 : Decimal;
      GLNetChangeBase@1063 : Decimal;
      GLAddCurrNetChangeBase@1064 : Decimal;
      PostingDocNo@1065 : Code[20];
      StartDate@1066 : Date;
      EndDate@1067 : Date;
      EndDateReq@1068 : Date;
      Correction@1069 : Boolean;
      OK@1070 : Boolean;
      AdjCustVendBank@1071 : Boolean;
      AdjGLAcc@1072 : Boolean;
      AddCurrCurrencyFactor@1073 : Decimal;
      VATEntryNoTotal@1074 : Decimal;
      VATEntryNo@1075 : Decimal;
      NewEntryNo@1076 : Integer;
      Text018@1080 : TextConst 'ENU=This posting date cannot be entered because it does not occur within the adjustment period. Reenter the posting date.';
      FirstEntry@1084 : Boolean;
      MaxAdjExchRateBufIndex@1089 : Integer;
      RatesAdjustedMsg@1088 : TextConst 'ENU=One or more currency exchange rates have been adjusted.';
      NothingToAdjustMsg@1091 : TextConst 'ENU=There is nothing to adjust.';
      TotalBankAccountsAdjusted@1092 : Integer;
      TotalCustomersAdjusted@1093 : Integer;
      TotalVendorsAdjusted@1094 : Integer;
      TotalGLAccountsAdjusted@1095 : Integer;

    LOCAL PROCEDURE PostAdjmt@1(GLAccNo@1000 : Code[20];PostingAmount@1001 : Decimal;AdjBase2@1002 : Decimal;CurrencyCode2@1003 : Code[10];VAR DimSetEntry@1004 : Record "Dimension Set Entry";PostingDate2@1005 : Date;ICCode@1006 : Code[20]) TransactionNo : Integer;
    BEGIN
      with GenJnlLine do
        if PostingAmount <> 0 then begin
          INIT;
          VALIDATE("Posting Date",PostingDate2);
          "Document No." := PostingDocNo;
          "Account Type" := "Account Type"::"G/L Account";
          VALIDATE("Account No.",GLAccNo);
          Description := PADSTR(STRSUBSTNO(PostingDescription,CurrencyCode2,AdjBase2),MAXSTRLEN(Description));
          VALIDATE(Amount,PostingAmount);
          "Source Currency Code" := CurrencyCode2;
          "IC Partner Code" := ICCode;
          if CurrencyCode2 = GLSetup."Additional Reporting Currency" then
            "Source Currency Amount" := 0;
          "Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
          "System-Created Entry" := true;
          TransactionNo := PostGenJnlLine(GenJnlLine,DimSetEntry);
        end;
    END;

    LOCAL PROCEDURE InsertExchRateAdjmtReg@2(AdjustAccType@1000 : Integer;PostingGrCode@1001 : Code[20];CurrencyCode@1002 : Code[10]);
    BEGIN
      if Currency2.Code <> CurrencyCode then
        Currency2.GET(CurrencyCode);

      with ExchRateAdjReg do begin
        "No." := "No." + 1;
        "Creation Date" := PostingDate;
        "Account Type" := AdjustAccType;
        "Posting Group" := PostingGrCode;
        "Currency Code" := Currency2.Code;
        "Currency Factor" := Currency2."Currency Factor";
        "Adjusted Base" := AdjExchRateBuffer.AdjBase;
        "Adjusted Base (LCY)" := AdjExchRateBuffer.AdjBaseLCY;
        "Adjusted Amt. (LCY)" := AdjExchRateBuffer.AdjAmount;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InitializeRequest@3(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewPostingDescription@1002 : Text[50];NewPostingDate@1003 : Date);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      PostingDescription := NewPostingDescription;
      PostingDate := NewPostingDate;
      if EndDate = 0D then
        EndDateReq := DMY2DATE(31,12,9999)
      else
        EndDateReq := EndDate;
    END;

    [External]
    PROCEDURE InitializeRequest2@25(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewPostingDescription@1002 : Text[50];NewPostingDate@1003 : Date;NewPostingDocNo@1004 : Code[20];NewAdjCustVendBank@1005 : Boolean;NewAdjGLAcc@1006 : Boolean);
    BEGIN
      InitializeRequest(NewStartDate,NewEndDate,NewPostingDescription,NewPostingDate);
      PostingDocNo := NewPostingDocNo;
      AdjCustVendBank := NewAdjCustVendBank;
      AdjGLAcc := NewAdjGLAcc;
    END;

    LOCAL PROCEDURE AdjExchRateBufferUpdate@15(CurrencyCode2@1000 : Code[10];PostingGroup2@1001 : Code[20];AdjBase2@1002 : Decimal;AdjBaseLCY2@1003 : Decimal;AdjAmount2@1004 : Decimal;GainsAmount2@1005 : Decimal;LossesAmount2@1006 : Decimal;DimEntryNo@1007 : Integer;Postingdate2@1008 : Date;ICCode@1009 : Code[20]) : Integer;
    BEGIN
      AdjExchRateBuffer.INIT;
      OK := AdjExchRateBuffer.GET(CurrencyCode2,PostingGroup2,DimEntryNo,Postingdate2,ICCode);

      AdjExchRateBuffer.AdjBase := AdjExchRateBuffer.AdjBase + AdjBase2;
      AdjExchRateBuffer.AdjBaseLCY := AdjExchRateBuffer.AdjBaseLCY + AdjBaseLCY2;
      AdjExchRateBuffer.AdjAmount := AdjExchRateBuffer.AdjAmount + AdjAmount2;
      AdjExchRateBuffer.TotalGainsAmount := AdjExchRateBuffer.TotalGainsAmount + GainsAmount2;
      AdjExchRateBuffer.TotalLossesAmount := AdjExchRateBuffer.TotalLossesAmount + LossesAmount2;

      if not OK then begin
        AdjExchRateBuffer."Currency Code" := CurrencyCode2;
        AdjExchRateBuffer."Posting Group" := PostingGroup2;
        AdjExchRateBuffer."Dimension Entry No." := DimEntryNo;
        AdjExchRateBuffer."Posting Date" := Postingdate2;
        AdjExchRateBuffer."IC Partner Code" := ICCode;
        MaxAdjExchRateBufIndex += 1;
        AdjExchRateBuffer.Index := MaxAdjExchRateBufIndex;
        AdjExchRateBuffer.INSERT;
      end else
        AdjExchRateBuffer.MODIFY;

      exit(AdjExchRateBuffer.Index);
    END;

    LOCAL PROCEDURE HandlePostAdjmt@7(AdjustAccType@1000 : Integer);
    VAR
      GLEntry@1001 : Record "G/L Entry";
      TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
    BEGIN
      if AdjExchRateBuffer.FIND('-') then begin
        // Summarize per currency and dimension combination
        repeat
          AdjExchRateBuffer2.INIT;
          OK :=
            AdjExchRateBuffer2.GET(
              AdjExchRateBuffer."Currency Code",
              '',
              AdjExchRateBuffer."Dimension Entry No.",
              AdjExchRateBuffer."Posting Date",
              AdjExchRateBuffer."IC Partner Code");
          AdjExchRateBuffer2.AdjBase := AdjExchRateBuffer2.AdjBase + AdjExchRateBuffer.AdjBase;
          AdjExchRateBuffer2.TotalGainsAmount := AdjExchRateBuffer2.TotalGainsAmount + AdjExchRateBuffer.TotalGainsAmount;
          AdjExchRateBuffer2.TotalLossesAmount := AdjExchRateBuffer2.TotalLossesAmount + AdjExchRateBuffer.TotalLossesAmount;
          if not OK then begin
            AdjExchRateBuffer2."Currency Code" := AdjExchRateBuffer."Currency Code";
            AdjExchRateBuffer2."Dimension Entry No." := AdjExchRateBuffer."Dimension Entry No.";
            AdjExchRateBuffer2."Posting Date" := AdjExchRateBuffer."Posting Date";
            AdjExchRateBuffer2."IC Partner Code" := AdjExchRateBuffer."IC Partner Code";
            AdjExchRateBuffer2.INSERT;
          end else
            AdjExchRateBuffer2.MODIFY;
        until AdjExchRateBuffer.NEXT = 0;

        // Post per posting group and per currency
        if AdjExchRateBuffer2.FIND('-') then
          repeat
            with AdjExchRateBuffer do begin
              SETRANGE("Currency Code",AdjExchRateBuffer2."Currency Code");
              SETRANGE("Dimension Entry No.",AdjExchRateBuffer2."Dimension Entry No.");
              SETRANGE("Posting Date",AdjExchRateBuffer2."Posting Date");
              SETRANGE("IC Partner Code",AdjExchRateBuffer2."IC Partner Code");
              TempDimBuf.RESET;
              TempDimBuf.DELETEALL;
              TempDimSetEntry.RESET;
              TempDimSetEntry.DELETEALL;
              FIND('-');
              DimBufMgt.GetDimensions("Dimension Entry No.",TempDimBuf);
              DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
              repeat
                TempDtldCVLedgEntryBuf.INIT;
                TempDtldCVLedgEntryBuf."Entry No." := Index;
                if AdjAmount <> 0 then
                  case AdjustAccType of
                    1: // Customer
                      begin
                        CustPostingGr.GET("Posting Group");
                        TempDtldCVLedgEntryBuf."Transaction No." :=
                          PostAdjmt(
                            CustPostingGr.GetReceivablesAccount,AdjAmount,AdjBase,"Currency Code",TempDimSetEntry,
                            AdjExchRateBuffer2."Posting Date","IC Partner Code");
                        if TempDtldCVLedgEntryBuf.INSERT then;
                        InsertExchRateAdjmtReg(1,"Posting Group","Currency Code");
                        TotalCustomersAdjusted += 1;
                      end;
                    2: // Vendor
                      begin
                        VendPostingGr.GET("Posting Group");
                        TempDtldCVLedgEntryBuf."Transaction No." :=
                          PostAdjmt(
                            VendPostingGr.GetPayablesAccount,AdjAmount,AdjBase,"Currency Code",TempDimSetEntry,
                            AdjExchRateBuffer2."Posting Date","IC Partner Code");
                        if TempDtldCVLedgEntryBuf.INSERT then;
                        InsertExchRateAdjmtReg(2,"Posting Group","Currency Code");
                        TotalVendorsAdjusted += 1;
                      end;
                  end;
              until NEXT = 0;
            end;

            with AdjExchRateBuffer2 do begin
              Currency2.GET("Currency Code");
              if TotalGainsAmount <> 0 then
                PostAdjmt(
                  Currency2.GetUnrealizedGainsAccount,-TotalGainsAmount,AdjBase,"Currency Code",TempDimSetEntry,
                  "Posting Date","IC Partner Code");
              if TotalLossesAmount <> 0 then
                PostAdjmt(
                  Currency2.GetUnrealizedLossesAccount,-TotalLossesAmount,AdjBase,"Currency Code",TempDimSetEntry,
                  "Posting Date","IC Partner Code");
            end;
          until AdjExchRateBuffer2.NEXT = 0;

        GLEntry.FINDLAST;
        case AdjustAccType of
          1: // Customer
            if TempDtldCustLedgEntry.FIND('-') then
              repeat
                if TempDtldCVLedgEntryBuf.GET(TempDtldCustLedgEntry."Transaction No.") then
                  TempDtldCustLedgEntry."Transaction No." := TempDtldCVLedgEntryBuf."Transaction No."
                else
                  TempDtldCustLedgEntry."Transaction No." := GLEntry."Transaction No.";
                DtldCustLedgEntry := TempDtldCustLedgEntry;
                DtldCustLedgEntry.INSERT(true);
              until TempDtldCustLedgEntry.NEXT = 0;
          2: // Vendor
            if TempDtldVendLedgEntry.FIND('-') then
              repeat
                if TempDtldCVLedgEntryBuf.GET(TempDtldVendLedgEntry."Transaction No.") then
                  TempDtldVendLedgEntry."Transaction No." := TempDtldCVLedgEntryBuf."Transaction No."
                else
                  TempDtldVendLedgEntry."Transaction No." := GLEntry."Transaction No.";
                DtldVendLedgEntry := TempDtldVendLedgEntry;
                DtldVendLedgEntry.INSERT(true);
              until TempDtldVendLedgEntry.NEXT = 0;
        end;

        AdjExchRateBuffer.RESET;
        AdjExchRateBuffer.DELETEALL;
        AdjExchRateBuffer2.RESET;
        AdjExchRateBuffer2.DELETEALL;
        TempDtldCustLedgEntry.RESET;
        TempDtldCustLedgEntry.DELETEALL;
        TempDtldVendLedgEntry.RESET;
        TempDtldVendLedgEntry.DELETEALL;
      end;
    END;

    [Internal]
    LOCAL PROCEDURE AdjustVATEntries@12(VATType@1000 : Integer;UseTax@1001 : Boolean);
    BEGIN
      CLEAR(VATEntry2);
      with VATEntry do begin
        SETRANGE(Type,VATType);
        SETRANGE("Use Tax",UseTax);
        if FIND('-') then
          repeat
            Accumulate(VATEntry2.Base,Base);
            Accumulate(VATEntry2.Amount,Amount);
            Accumulate(VATEntry2."Unrealized Amount","Unrealized Amount");
            Accumulate(VATEntry2."Unrealized Base","Unrealized Base");
            Accumulate(VATEntry2."Remaining Unrealized Amount","Remaining Unrealized Amount");
            Accumulate(VATEntry2."Remaining Unrealized Base","Remaining Unrealized Base");
            Accumulate(VATEntry2."Additional-Currency Amount","Additional-Currency Amount");
            Accumulate(VATEntry2."Additional-Currency Base","Additional-Currency Base");
            Accumulate(VATEntry2."Add.-Currency Unrealized Amt.","Add.-Currency Unrealized Amt.");
            Accumulate(VATEntry2."Add.-Currency Unrealized Base","Add.-Currency Unrealized Base");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Amount","Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Base","Add.-Curr. Rem. Unreal. Base");

            Accumulate(VATEntryTotalBase.Base,Base);
            Accumulate(VATEntryTotalBase.Amount,Amount);
            Accumulate(VATEntryTotalBase."Unrealized Amount","Unrealized Amount");
            Accumulate(VATEntryTotalBase."Unrealized Base","Unrealized Base");
            Accumulate(VATEntryTotalBase."Remaining Unrealized Amount","Remaining Unrealized Amount");
            Accumulate(VATEntryTotalBase."Remaining Unrealized Base","Remaining Unrealized Base");
            Accumulate(VATEntryTotalBase."Additional-Currency Amount","Additional-Currency Amount");
            Accumulate(VATEntryTotalBase."Additional-Currency Base","Additional-Currency Base");
            Accumulate(VATEntryTotalBase."Add.-Currency Unrealized Amt.","Add.-Currency Unrealized Amt.");
            Accumulate(VATEntryTotalBase."Add.-Currency Unrealized Base","Add.-Currency Unrealized Base");
            Accumulate(
              VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount","Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntryTotalBase."Add.-Curr. Rem. Unreal. Base","Add.-Curr. Rem. Unreal. Base");

            AdjustVATAmount(Base,"Additional-Currency Base");
            AdjustVATAmount(Amount,"Additional-Currency Amount");
            AdjustVATAmount("Unrealized Amount","Add.-Currency Unrealized Amt.");
            AdjustVATAmount("Unrealized Base","Add.-Currency Unrealized Base");
            AdjustVATAmount("Remaining Unrealized Amount","Add.-Curr. Rem. Unreal. Amount");
            AdjustVATAmount("Remaining Unrealized Base","Add.-Curr. Rem. Unreal. Base");
            MODIFY;

            Accumulate(VATEntry2.Base,-Base);
            Accumulate(VATEntry2.Amount,-Amount);
            Accumulate(VATEntry2."Unrealized Amount",-"Unrealized Amount");
            Accumulate(VATEntry2."Unrealized Base",-"Unrealized Base");
            Accumulate(VATEntry2."Remaining Unrealized Amount",-"Remaining Unrealized Amount");
            Accumulate(VATEntry2."Remaining Unrealized Base",-"Remaining Unrealized Base");
            Accumulate(VATEntry2."Additional-Currency Amount",-"Additional-Currency Amount");
            Accumulate(VATEntry2."Additional-Currency Base",-"Additional-Currency Base");
            Accumulate(VATEntry2."Add.-Currency Unrealized Amt.",-"Add.-Currency Unrealized Amt.");
            Accumulate(VATEntry2."Add.-Currency Unrealized Base",-"Add.-Currency Unrealized Base");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Amount",-"Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Base",-"Add.-Curr. Rem. Unreal. Base");
          until NEXT = 0;
      end;
    END;

    [Internal]
    LOCAL PROCEDURE AdjustVATAmount@4(VAR AmountLCY@1000 : Decimal;VAR AmountAddCurr@1001 : Decimal);
    BEGIN
      case GLSetup."VAT Exchange Rate Adjustment" of
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount":
          AmountLCY :=
            ROUND(
              CurrExchRate2.ExchangeAmtFCYToLCYAdjmt(
                PostingDate,GLSetup."Additional Reporting Currency",
                AmountAddCurr,AddCurrCurrencyFactor));
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          AmountAddCurr :=
            ROUND(
              CurrExchRate2.ExchangeAmtLCYToFCY(
                PostingDate,GLSetup."Additional Reporting Currency",
                AmountLCY,AddCurrCurrencyFactor));
      end;
    END;

    LOCAL PROCEDURE AdjustVATAccount@13(AccNo@1000 : Code[20];AmountLCY@1001 : Decimal;AmountAddCurr@1002 : Decimal;BaseLCY@1003 : Decimal;BaseAddCurr@1004 : Decimal);
    BEGIN
      "G/L Account".GET(AccNo);
      "G/L Account".SETRANGE("Date Filter",StartDate,EndDate);
      case GLSetup."VAT Exchange Rate Adjustment" of
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount":
          PostGLAccAdjmt(
            AccNo,GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount",
            -AmountLCY,BaseLCY,BaseAddCurr);
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          PostGLAccAdjmt(
            AccNo,GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
            -AmountAddCurr,BaseLCY,BaseAddCurr);
      end;
    END;

    LOCAL PROCEDURE AdjustPurchTax@5(UseTax@1000 : Boolean);
    BEGIN
      if (VATEntry2.Amount <> 0) or (VATEntry2."Additional-Currency Amount" <> 0) then begin
        TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
        AdjustVATAccount(
          TaxJurisdiction."Tax Account (Purchases)",
          VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
          VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
        if UseTax then begin
          TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
          AdjustVATAccount(
            TaxJurisdiction."Reverse Charge (Purchases)",
            -VATEntry2.Amount,-VATEntry2."Additional-Currency Amount",
            -VATEntryTotalBase.Amount,-VATEntryTotalBase."Additional-Currency Amount");
        end;
      end;
      if (VATEntry2."Remaining Unrealized Amount" <> 0) or
         (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
      then begin
        TaxJurisdiction.TESTFIELD("Unrealized VAT Type");
        TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
        AdjustVATAccount(
          TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
          VATEntry2."Remaining Unrealized Amount",VATEntry2."Add.-Curr. Rem. Unreal. Amount",
          VATEntryTotalBase."Remaining Unrealized Amount",VATEntry2."Add.-Curr. Rem. Unreal. Amount");

        if UseTax then begin
          TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
          AdjustVATAccount(
            TaxJurisdiction."Unreal. Rev. Charge (Purch.)",
            -VATEntry2."Remaining Unrealized Amount",
            -VATEntry2."Add.-Curr. Rem. Unreal. Amount",
            -VATEntryTotalBase."Remaining Unrealized Amount",
            -VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
        end;
      end;
    END;

    LOCAL PROCEDURE AdjustSalesTax@10();
    BEGIN
      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
      AdjustVATAccount(
        TaxJurisdiction."Tax Account (Sales)",
        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
      if (VATEntry2."Remaining Unrealized Amount" <> 0) or
         (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
      then begin
        TaxJurisdiction.TESTFIELD("Unrealized VAT Type");
        TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
        AdjustVATAccount(
          TaxJurisdiction."Unreal. Tax Acc. (Sales)",
          VATEntry2."Remaining Unrealized Amount",
          VATEntry2."Add.-Curr. Rem. Unreal. Amount",
          VATEntryTotalBase."Remaining Unrealized Amount",
          VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
      end;
    END;

    LOCAL PROCEDURE Accumulate@9(VAR TotalAmount@1000 : Decimal;AmountToAdd@1001 : Decimal);
    BEGIN
      TotalAmount := TotalAmount + AmountToAdd;
    END;

    LOCAL PROCEDURE PostGLAccAdjmt@23(GLAccNo@1000 : Code[20];ExchRateAdjmt@1001 : Integer;Amount@1002 : Decimal;NetChange@1003 : Decimal;AddCurrNetChange@1004 : Decimal);
    BEGIN
      GenJnlLine.INIT;
      case ExchRateAdjmt of
        "G/L Account"."Exchange Rate Adjustment"::"Adjust Amount":
          begin
            GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Amount Only";
            GenJnlLine."Currency Code" := '';
            GenJnlLine.Amount := Amount;
            GenJnlLine."Amount (LCY)" := GenJnlLine.Amount;
            GLAmtTotal := GLAmtTotal + GenJnlLine.Amount;
            GLAddCurrNetChangeTotal := GLAddCurrNetChangeTotal + AddCurrNetChange;
            GLNetChangeBase := GLNetChangeBase + NetChange;
          end;
        "G/L Account"."Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          begin
            GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
            GenJnlLine."Currency Code" := GLSetup."Additional Reporting Currency";
            GenJnlLine.Amount := Amount;
            GenJnlLine."Amount (LCY)" := 0;
            GLAddCurrAmtTotal := GLAddCurrAmtTotal + GenJnlLine.Amount;
            GLNetChangeTotal := GLNetChangeTotal + NetChange;
            GLAddCurrNetChangeBase := GLAddCurrNetChangeBase + AddCurrNetChange;
          end;
      end;
      if GenJnlLine.Amount <> 0 then begin
        GenJnlLine."Document No." := PostingDocNo;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Account No." := GLAccNo;
        GenJnlLine."Posting Date" := PostingDate;
        case GenJnlLine."Additional-Currency Posting" of
          GenJnlLine."Additional-Currency Posting"::"Amount Only":
            GenJnlLine.Description :=
              STRSUBSTNO(
                PostingDescription,
                GLSetup."Additional Reporting Currency",
                AddCurrNetChange);
          GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only":
            GenJnlLine.Description :=
              STRSUBSTNO(
                PostingDescription,
                '',
                NetChange);
        end;
        GenJnlLine."System-Created Entry" := true;
        GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
        PostGenJnlLine(GenJnlLine,TempDimSetEntry);
      end;
    END;

    LOCAL PROCEDURE CheckExchRateAdjustment@6(AccNo@1000 : Code[20];SetupTableName@1001 : Text[100];SetupFieldName@1002 : Text[100]);
    VAR
      GLAcc@1003 : Record "G/L Account";
      GLSetup@1004 : Record "General Ledger Setup";
    BEGIN
      if AccNo = '' then
        exit;
      GLAcc.GET(AccNo);
      if GLAcc."Exchange Rate Adjustment" <> GLAcc."Exchange Rate Adjustment"::"No Adjustment" then begin
        GLAcc."Exchange Rate Adjustment" := GLAcc."Exchange Rate Adjustment"::"No Adjustment";
        ERROR(
          Text017,
          GLAcc.FIELDCAPTION("Exchange Rate Adjustment"),GLAcc.TABLECAPTION,
          GLAcc."No.",GLAcc."Exchange Rate Adjustment",
          SetupTableName,GLSetup.FIELDCAPTION("VAT Exchange Rate Adjustment"),
          GLSetup.TABLECAPTION,SetupFieldName);
      end;
    END;

    LOCAL PROCEDURE HandleCustDebitCredit@17(Amount@1000 : Decimal;AmountLCY@1001 : Decimal;Correction@1002 : Boolean;AdjAmount@1003 : Decimal);
    BEGIN
      if ((Amount > 0) or (AmountLCY > 0)) and (not Correction) or
         ((Amount < 0) or (AmountLCY < 0)) and Correction
      then begin
        TempDtldCustLedgEntry."Debit Amount (LCY)" := AdjAmount;
        TempDtldCustLedgEntry."Credit Amount (LCY)" := 0;
      end else begin
        TempDtldCustLedgEntry."Debit Amount (LCY)" := 0;
        TempDtldCustLedgEntry."Credit Amount (LCY)" := -AdjAmount;
      end;
    END;

    LOCAL PROCEDURE HandleVendDebitCredit@14(Amount@1000 : Decimal;AmountLCY@1001 : Decimal;Correction@1002 : Boolean;AdjAmount@1003 : Decimal);
    BEGIN
      if ((Amount > 0) or (AmountLCY > 0)) and (not Correction) or
         ((Amount < 0) or (AmountLCY < 0)) and Correction
      then begin
        TempDtldVendLedgEntry."Debit Amount (LCY)" := AdjAmount;
        TempDtldVendLedgEntry."Credit Amount (LCY)" := 0;
      end else begin
        TempDtldVendLedgEntry."Debit Amount (LCY)" := 0;
        TempDtldVendLedgEntry."Credit Amount (LCY)" := -AdjAmount;
      end;
    END;

    LOCAL PROCEDURE GetJnlLineDefDim@11(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR DimSetEntry@1001 : Record "Dimension Set Entry");
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      with GenJnlLine do begin
        case "Account Type" of
          "Account Type"::"G/L Account":
            TableID[1] := DATABASE::"G/L Account";
          "Account Type"::"Bank Account":
            TableID[1] := DATABASE::"Bank Account";
        end;
        No[1] := "Account No.";
        DimMgt.GetDefaultDimID(TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Dimension Set ID",0);
      end;
      DimMgt.GetDimSetEntryDefaultDim(DimSetEntry);
    END;

    LOCAL PROCEDURE CopyDimSetEntryToDimBuf@18(VAR DimSetEntry@1000 : Record "Dimension Set Entry";VAR DimBuf@1001 : Record "Dimension Buffer");
    BEGIN
      if DimSetEntry.FIND('-') then
        repeat
          DimBuf."Table ID" := DATABASE::"Dimension Buffer";
          DimBuf."Entry No." := 0;
          DimBuf."Dimension Code" := DimSetEntry."Dimension Code";
          DimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          DimBuf.INSERT;
        until DimSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDimCombID@21(VAR DimBuf@1000 : Record "Dimension Buffer") : Integer;
    VAR
      DimEntryNo@1001 : Integer;
    BEGIN
      DimEntryNo := DimBufMgt.FindDimensions(DimBuf);
      if DimEntryNo = 0 then
        DimEntryNo := DimBufMgt.InsertDimensions(DimBuf);
      exit(DimEntryNo);
    END;

    LOCAL PROCEDURE PostGenJnlLine@8(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR DimSetEntry@1001 : Record "Dimension Set Entry") : Integer;
    BEGIN
      GenJnlLine."Shortcut Dimension 1 Code" := GetGlobalDimVal(GLSetup."Global Dimension 1 Code",DimSetEntry);
      GenJnlLine."Shortcut Dimension 2 Code" := GetGlobalDimVal(GLSetup."Global Dimension 2 Code",DimSetEntry);
      GenJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      GenJnlPostLine.RUN(GenJnlLine);
      exit(GenJnlPostLine.GetNextTransactionNo);
    END;

    LOCAL PROCEDURE GetGlobalDimVal@16(GlobalDimCode@1000 : Code[20];VAR DimSetEntry@1001 : Record "Dimension Set Entry") : Code[20];
    VAR
      DimVal@1002 : Code[20];
    BEGIN
      if GlobalDimCode = '' then
        DimVal := ''
      else begin
        DimSetEntry.SETRANGE("Dimension Code",GlobalDimCode);
        if DimSetEntry.FIND('-') then
          DimVal := DimSetEntry."Dimension Value Code"
        else
          DimVal := '';
        DimSetEntry.SETRANGE("Dimension Code");
      end;
      exit(DimVal);
    END;

    [External]
    PROCEDURE CheckPostingDate@19();
    BEGIN
      if PostingDate < StartDate then
        ERROR(Text018);
      if PostingDate > EndDateReq then
        ERROR(Text018);
    END;

    [Internal]
    PROCEDURE AdjustCustomerLedgerEntry@20(CusLedgerEntry@1001 : Record "Cust. Ledger Entry";PostingDate2@1000 : Date);
    VAR
      DimSetEntry@1005 : Record "Dimension Set Entry";
      DimEntryNo@1004 : Integer;
      OldAdjAmount@1003 : Decimal;
      Adjust@1002 : Boolean;
      AdjExchRateBufIndex@1006 : Integer;
    BEGIN
      with CusLedgerEntry do begin
        SETRANGE("Date Filter",0D,PostingDate2);
        Currency2.GET("Currency Code");
        GainsAmount := 0;
        LossesAmount := 0;
        OldAdjAmount := 0;
        Adjust := false;

        TempDimSetEntry.RESET;
        TempDimSetEntry.DELETEALL;
        TempDimBuf.RESET;
        TempDimBuf.DELETEALL;
        DimSetEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
        CopyDimSetEntryToDimBuf(DimSetEntry,TempDimBuf);
        DimEntryNo := GetDimCombID(TempDimBuf);

        CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)","Original Amt. (LCY)",
          "Debit Amount","Credit Amount","Debit Amount (LCY)","Credit Amount (LCY)");

        // Calculate Old Unrealized Gains and Losses
        SetUnrealizedGainLossFilterCust(DtldCustLedgEntry,"Entry No.");
        DtldCustLedgEntry.CALCSUMS("Amount (LCY)");

        SetUnrealizedGainLossFilterCust(TempDtldCustLedgEntrySums,"Entry No.");
        TempDtldCustLedgEntrySums.CALCSUMS("Amount (LCY)");
        OldAdjAmount := DtldCustLedgEntry."Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Remaining Amt. (LCY)" := "Remaining Amt. (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Debit Amount (LCY)" := "Debit Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Credit Amount (LCY)" := "Credit Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        TempDtldCustLedgEntrySums.RESET;

        // Modify Currency factor on Customer Ledger Entry
        if "Adjusted Currency Factor" <> Currency2."Currency Factor" then begin
          "Adjusted Currency Factor" := Currency2."Currency Factor";
          MODIFY;
        end;

        // Calculate New Unrealized Gains and Losses
        AdjAmount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
              PostingDate2,Currency2.Code,"Remaining Amount",Currency2."Currency Factor")) -
          "Remaining Amt. (LCY)";

        if AdjAmount <> 0 then begin
          InitDtldCustLedgEntry(CusLedgerEntry,TempDtldCustLedgEntry);
          TempDtldCustLedgEntry."Entry No." := NewEntryNo;
          TempDtldCustLedgEntry."Posting Date" := PostingDate2;
          TempDtldCustLedgEntry."Document No." := PostingDocNo;

          Correction :=
            ("Debit Amount" < 0) or
            ("Credit Amount" < 0) or
            ("Debit Amount (LCY)" < 0) or
            ("Credit Amount (LCY)" < 0);

          if OldAdjAmount > 0 then
            case true of
              (AdjAmount > 0):
                begin
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := true;
                end;
              (AdjAmount < 0):
                if -AdjAmount <= OldAdjAmount then begin
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := true;
                end else begin
                  AdjAmount := AdjAmount + OldAdjAmount;
                  TempDtldCustLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Customer."Customer Posting Group",
                      0,0,-OldAdjAmount,-OldAdjAmount,0,DimEntryNo,PostingDate2,Customer."IC Partner Code");
                  TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldCustomerLedgerEntry;
                  Adjust := false;
                end;
            end;
          if OldAdjAmount < 0 then
            case true of
              (AdjAmount < 0):
                begin
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := true;
                end;
              (AdjAmount > 0):
                if AdjAmount <= -OldAdjAmount then begin
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := true;
                end else begin
                  AdjAmount := OldAdjAmount + AdjAmount;
                  TempDtldCustLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Customer."Customer Posting Group",
                      0,0,-OldAdjAmount,0,-OldAdjAmount,DimEntryNo,PostingDate2,Customer."IC Partner Code");
                  TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldCustomerLedgerEntry;
                  Adjust := false;
                end;
            end;
          if not Adjust then begin
            TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
            HandleCustDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
            TempDtldCustLedgEntry."Entry No." := NewEntryNo;
            if AdjAmount < 0 then begin
              TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
              GainsAmount := 0;
              LossesAmount := AdjAmount;
            end else
              if AdjAmount > 0 then begin
                TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                GainsAmount := AdjAmount;
                LossesAmount := 0;
              end;
            InsertTempDtldCustomerLedgerEntry;
            NewEntryNo := NewEntryNo + 1;
          end;

          TotalAdjAmount := TotalAdjAmount + AdjAmount;
          Window.UPDATE(4,TotalAdjAmount);
          AdjExchRateBufIndex :=
            AdjExchRateBufferUpdate(
              "Currency Code",Customer."Customer Posting Group",
              "Remaining Amount","Remaining Amt. (LCY)",TempDtldCustLedgEntry."Amount (LCY)",
              GainsAmount,LossesAmount,DimEntryNo,PostingDate2,Customer."IC Partner Code");
          TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
          ModifyTempDtldCustomerLedgerEntry;
        end;
      end;
    END;

    [Internal]
    PROCEDURE AdjustVendorLedgerEntry@24(VendLedgerEntry@1001 : Record "Vendor Ledger Entry";PostingDate2@1000 : Date);
    VAR
      DimSetEntry@1006 : Record "Dimension Set Entry";
      DimEntryNo@1005 : Integer;
      OldAdjAmount@1004 : Decimal;
      Adjust@1003 : Boolean;
      AdjExchRateBufIndex@1007 : Integer;
    BEGIN
      with VendLedgerEntry do begin
        SETRANGE("Date Filter",0D,PostingDate2);
        Currency2.GET("Currency Code");
        GainsAmount := 0;
        LossesAmount := 0;
        OldAdjAmount := 0;
        Adjust := false;

        TempDimBuf.RESET;
        TempDimBuf.DELETEALL;
        DimSetEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
        CopyDimSetEntryToDimBuf(DimSetEntry,TempDimBuf);
        DimEntryNo := GetDimCombID(TempDimBuf);

        CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)","Original Amt. (LCY)",
          "Debit Amount","Credit Amount","Debit Amount (LCY)","Credit Amount (LCY)");

        // Calculate Old Unrealized GainLoss
        SetUnrealizedGainLossFilterVend(DtldVendLedgEntry,"Entry No.");
        DtldVendLedgEntry.CALCSUMS("Amount (LCY)");

        SetUnrealizedGainLossFilterVend(TempDtldVendLedgEntrySums,"Entry No.");
        TempDtldVendLedgEntrySums.CALCSUMS("Amount (LCY)");
        OldAdjAmount := DtldVendLedgEntry."Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Remaining Amt. (LCY)" := "Remaining Amt. (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Debit Amount (LCY)" := "Debit Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Credit Amount (LCY)" := "Credit Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        TempDtldVendLedgEntrySums.RESET;

        // Modify Currency factor on Vendor Ledger Entry
        if "Adjusted Currency Factor" <> Currency2."Currency Factor" then begin
          "Adjusted Currency Factor" := Currency2."Currency Factor";
          MODIFY;
        end;

        // Calculate New Unrealized Gains and Losses
        AdjAmount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
              PostingDate2,Currency2.Code,"Remaining Amount",Currency2."Currency Factor")) -
          "Remaining Amt. (LCY)";

        if AdjAmount <> 0 then begin
          InitDtldVendLedgEntry(VendLedgerEntry,TempDtldVendLedgEntry);
          TempDtldVendLedgEntry."Entry No." := NewEntryNo;
          TempDtldVendLedgEntry."Posting Date" := PostingDate2;
          TempDtldVendLedgEntry."Document No." := PostingDocNo;

          Correction :=
            ("Debit Amount" < 0) or
            ("Credit Amount" < 0) or
            ("Debit Amount (LCY)" < 0) or
            ("Credit Amount (LCY)" < 0);

          if OldAdjAmount > 0 then
            case true of
              (AdjAmount > 0):
                begin
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := true;
                end;
              (AdjAmount < 0):
                if -AdjAmount <= OldAdjAmount then begin
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := true;
                end else begin
                  AdjAmount := AdjAmount + OldAdjAmount;
                  TempDtldVendLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Vendor."Vendor Posting Group",
                      0,0,-OldAdjAmount,-OldAdjAmount,0,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
                  TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldVendorLedgerEntry;
                  Adjust := false;
                end;
            end;
          if OldAdjAmount < 0 then
            case true of
              (AdjAmount < 0):
                begin
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := true;
                end;
              (AdjAmount > 0):
                if AdjAmount <= -OldAdjAmount then begin
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := true;
                end else begin
                  AdjAmount := OldAdjAmount + AdjAmount;
                  TempDtldVendLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Vendor."Vendor Posting Group",
                      0,0,-OldAdjAmount,0,-OldAdjAmount,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
                  TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldVendorLedgerEntry;
                  Adjust := false;
                end;
            end;

          if not Adjust then begin
            TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
            HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
            TempDtldVendLedgEntry."Entry No." := NewEntryNo;
            if AdjAmount < 0 then begin
              TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
              GainsAmount := 0;
              LossesAmount := AdjAmount;
            end else
              if AdjAmount > 0 then begin
                TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                GainsAmount := AdjAmount;
                LossesAmount := 0;
              end;
            InsertTempDtldVendorLedgerEntry;
            NewEntryNo := NewEntryNo + 1;
          end;

          TotalAdjAmount := TotalAdjAmount + AdjAmount;
          Window.UPDATE(4,TotalAdjAmount);
          AdjExchRateBufIndex :=
            AdjExchRateBufferUpdate(
              "Currency Code",Vendor."Vendor Posting Group",
              "Remaining Amount","Remaining Amt. (LCY)",
              TempDtldVendLedgEntry."Amount (LCY)",GainsAmount,LossesAmount,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
          TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
          ModifyTempDtldVendorLedgerEntry;
        end;
      end;
    END;

    LOCAL PROCEDURE InitDtldCustLedgEntry@27(CustLedgEntry@1000 : Record "Cust. Ledger Entry";VAR DtldCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry");
    BEGIN
      with CustLedgEntry do begin
        DtldCustLedgEntry.INIT;
        DtldCustLedgEntry."Cust. Ledger Entry No." := "Entry No.";
        DtldCustLedgEntry.Amount := 0;
        DtldCustLedgEntry."Customer No." := "Customer No.";
        DtldCustLedgEntry."Currency Code" := "Currency Code";
        DtldCustLedgEntry."User ID" := USERID;
        DtldCustLedgEntry."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        DtldCustLedgEntry."Journal Batch Name" := "Journal Batch Name";
        DtldCustLedgEntry."Reason Code" := "Reason Code";
        DtldCustLedgEntry."Initial Entry Due Date" := "Due Date";
        DtldCustLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
        DtldCustLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
        DtldCustLedgEntry."Initial Document Type" := "Document Type";
      end;
    END;

    LOCAL PROCEDURE InitDtldVendLedgEntry@28(VendLedgEntry@1001 : Record "Vendor Ledger Entry";VAR DtldVendLedgEntry@1000 : Record "Detailed Vendor Ledg. Entry");
    BEGIN
      with VendLedgEntry do begin
        DtldVendLedgEntry.INIT;
        DtldVendLedgEntry."Vendor Ledger Entry No." := "Entry No.";
        DtldVendLedgEntry.Amount := 0;
        DtldVendLedgEntry."Vendor No." := "Vendor No.";
        DtldVendLedgEntry."Currency Code" := "Currency Code";
        DtldVendLedgEntry."User ID" := USERID;
        DtldVendLedgEntry."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        DtldVendLedgEntry."Journal Batch Name" := "Journal Batch Name";
        DtldVendLedgEntry."Reason Code" := "Reason Code";
        DtldVendLedgEntry."Initial Entry Due Date" := "Due Date";
        DtldVendLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
        DtldVendLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
        DtldVendLedgEntry."Initial Document Type" := "Document Type";
      end;
    END;

    LOCAL PROCEDURE SetUnrealizedGainLossFilterCust@22(VAR DtldCustLedgEntry@1000 : Record "Detailed Cust. Ledg. Entry";EntryNo@1001 : Integer);
    BEGIN
      with DtldCustLedgEntry do begin
        RESET;
        SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
        SETRANGE("Cust. Ledger Entry No.",EntryNo);
        SETRANGE("Entry Type","Entry Type"::"Unrealized Loss","Entry Type"::"Unrealized Gain");
      end;
    END;

    LOCAL PROCEDURE SetUnrealizedGainLossFilterVend@26(VAR DtldVendLedgEntry@1001 : Record "Detailed Vendor Ledg. Entry";EntryNo@1000 : Integer);
    BEGIN
      with DtldVendLedgEntry do begin
        RESET;
        SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
        SETRANGE("Vendor Ledger Entry No.",EntryNo);
        SETRANGE("Entry Type","Entry Type"::"Unrealized Loss","Entry Type"::"Unrealized Gain");
      end;
    END;

    LOCAL PROCEDURE InsertTempDtldCustomerLedgerEntry@30();
    BEGIN
      TempDtldCustLedgEntry.INSERT;
      TempDtldCustLedgEntrySums := TempDtldCustLedgEntry;
      TempDtldCustLedgEntrySums.INSERT;
    END;

    LOCAL PROCEDURE InsertTempDtldVendorLedgerEntry@29();
    BEGIN
      TempDtldVendLedgEntry.INSERT;
      TempDtldVendLedgEntrySums := TempDtldVendLedgEntry;
      TempDtldVendLedgEntrySums.INSERT;
    END;

    LOCAL PROCEDURE ModifyTempDtldCustomerLedgerEntry@33();
    BEGIN
      TempDtldCustLedgEntry.MODIFY;
      TempDtldCustLedgEntrySums := TempDtldCustLedgEntry;
      TempDtldCustLedgEntrySums.MODIFY;
    END;

    LOCAL PROCEDURE ModifyTempDtldVendorLedgerEntry@32();
    BEGIN
      TempDtldVendLedgEntry.MODIFY;
      TempDtldVendLedgEntrySums := TempDtldVendLedgEntry;
      TempDtldVendLedgEntrySums.MODIFY;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

