OBJECT Codeunit 410 Update Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Analysis View";
    Permissions=TableData "G/L Entry"=r,
                TableData "G/L Budget Entry"=r,
                TableData "Analysis View"=rm,
                TableData "Analysis View Filter"=r,
                TableData "Analysis View Entry"=rimd,
                TableData "Analysis View Budget Entry"=rimd;
    OnRun=BEGIN
            if Code <> '' then begin
              InitLastEntryNo;
              LOCKTABLE;
              FIND;
              UpdateOne(Rec,2,"Last Entry No." < LastGLEntryNo - 1000);
            end;
          END;

  }
  CODE
  {
    VAR
      Text005@1001 : TextConst 'ENU=Analysis View     #1############################\\';
      Text006@1002 : TextConst 'ENU=Updating table    #2############################\';
      Text007@1003 : TextConst 'ENU=Speed: (Entries/s)#4########\';
      Text008@1004 : TextConst 'ENU=Average Speed     #5########';
      Text009@1030 : TextConst 'ENU=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\';
      Text010@1031 : TextConst 'ENU=Summarizing';
      Text011@1032 : TextConst 'ENU=Updating Database';
      AnalysisView@1005 : Record "Analysis View";
      GLSetup@1036 : Record "General Ledger Setup";
      GLEntry@1006 : Record "G/L Entry";
      CFForecastEntry@1106 : Record "Cash Flow Forecast Entry";
      GLBudgetEntry@1007 : Record "G/L Budget Entry";
      AnalysisViewEntry@1008 : Record "Analysis View Entry";
      AnalysisViewFilter@1035 : Record "Analysis View Filter";
      AnalysisViewBudgetEntry@1009 : Record "Analysis View Budget Entry";
      TempAnalysisViewEntry@1010 : TEMPORARY Record "Analysis View Entry";
      TempAnalysisViewBudgetEntry@1011 : TEMPORARY Record "Analysis View Budget Entry";
      TempDimBuf@1013 : TEMPORARY Record "Dimension Buffer";
      DimSetEntry@1016 : Record "Dimension Set Entry";
      TempDimSetEntry@1038 : TEMPORARY Record "Dimension Set Entry";
      TempDimEntryBuffer@1037 : TEMPORARY Record "Dimension Entry Buffer";
      Window@1000 : Dialog;
      FilterIsInitialized@1014 : Boolean;
      FiltersExist@1012 : Boolean;
      PrevPostingDate@1017 : Date;
      PrevCalculatedPostingDate@1018 : Date;
      NoOfEntries@1019 : Integer;
      ShowProgressWindow@1021 : Boolean;
      WinLastEntryNo@1022 : Integer;
      WinUpdateCounter@1024 : Integer;
      WinTotalCounter@1025 : Integer;
      WinTime0@1026 : Time;
      WinTime1@1027 : Time;
      WinTime2@1028 : Time;
      LastGLEntryNo@1029 : Integer;
      LastBudgetEntryNo@1033 : Integer;
      LastEntryNoIsInitialized@1015 : Boolean;

    LOCAL PROCEDURE InitLastEntryNo@20();
    BEGIN
      GLEntry.RESET;
      GLBudgetEntry.RESET;
      if LastEntryNoIsInitialized then
        exit;
      with GLEntry do
        if FINDLAST then
          LastGLEntryNo := "Entry No.";
      with GLBudgetEntry do
        if FINDLAST then
          LastBudgetEntryNo := "Entry No.";
      LastEntryNoIsInitialized := true;
    END;

    [External]
    PROCEDURE UpdateAll@15(Which@1000 : '"Ledger Entries","Budget Entries",Both';DirectlyFromPosting@1001 : Boolean);
    VAR
      AnalysisView2@1002 : Record "Analysis View";
    BEGIN
      AnalysisView2.SETRANGE(Blocked,false);
      if DirectlyFromPosting then
        AnalysisView2.SETRANGE("Update on Posting",true);

      if AnalysisView2.ISEMPTY then
        exit;

      InitLastEntryNo;

      if DirectlyFromPosting then
        AnalysisView2.SETFILTER("Last Entry No.",'<%1',LastGLEntryNo);

      AnalysisView2.LOCKTABLE;
      if AnalysisView2.FINDSET then
        repeat
          UpdateOne(AnalysisView2,Which,not DirectlyFromPosting and (AnalysisView2."Last Entry No." < LastGLEntryNo - 1000));
        until AnalysisView2.NEXT = 0;
    END;

    [External]
    PROCEDURE Update@23(VAR NewAnalysisView@1000 : Record "Analysis View";Which@1001 : '"Ledger Entries","Budget Entries",Both';ShowWindow@1002 : Boolean);
    BEGIN
      InitLastEntryNo;
      NewAnalysisView.LOCKTABLE;
      NewAnalysisView.FIND;
      UpdateOne(NewAnalysisView,Which,ShowWindow);
    END;

    LOCAL PROCEDURE UpdateOne@11(VAR NewAnalysisView@1000 : Record "Analysis View";Which@1001 : '"Ledger Entries","Budget Entries",Both';ShowWindow@1002 : Boolean);
    VAR
      Updated@1003 : Boolean;
    BEGIN
      AnalysisView := NewAnalysisView;
      AnalysisView.TESTFIELD(Blocked,false);
      ShowProgressWindow := ShowWindow;
      if ShowProgressWindow then
        InitWindow;

      if AnalysisView."Account Source" = AnalysisView."Account Source"::"G/L Account" then begin
        if Which in [Which::"Ledger Entries",Which::Both] then begin
          if LastGLEntryNo > AnalysisView."Last Entry No." then begin
            if ShowProgressWindow then
              UpdateWindowHeader(DATABASE::"Analysis View Entry",GLEntry."Entry No.");
            UpdateEntries;
            AnalysisView."Last Entry No." := LastGLEntryNo;
            Updated := true;
          end;
        end;
      end else begin
        CFForecastEntry.RESET;
        CFForecastEntry.LOCKTABLE;
        if ShowProgressWindow then
          UpdateWindowHeader(DATABASE::"Analysis View Entry",CFForecastEntry."Entry No.");
        UpdateEntries;
        Updated := true;
      end;

      if (Which in [Which::"Budget Entries",Which::Both]) and
         NewAnalysisView."Include Budgets"
      then begin
        if LastBudgetEntryNo > AnalysisView."Last Budget Entry No." then begin
          if ShowProgressWindow then
            UpdateWindowHeader(DATABASE::"Analysis View Budget Entry",GLBudgetEntry."Entry No.");
          GLBudgetEntry.RESET;
          GLBudgetEntry.SETRANGE("Entry No.",AnalysisView."Last Budget Entry No." + 1,LastBudgetEntryNo);
          UpdateBudgetEntries(AnalysisView."Last Budget Entry No." + 1);
          AnalysisView."Last Budget Entry No." := LastBudgetEntryNo;
          Updated := true;
        end;
      end;

      if Updated then begin
        AnalysisView."Last Date Updated" := TODAY;
        AnalysisView.MODIFY;
      end;

      if ShowProgressWindow then
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntries@9();
    BEGIN
      GLSetup.GET;
      FilterIsInitialized := false;
      if AnalysisView."Account Source" = AnalysisView."Account Source"::"G/L Account" then
        UpdateEntriesForGLAccount
      else
        UpdateEntriesForCFAccount;

      FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateEntriesForGLAccount@8();
    VAR
      AnalysisViewGLQry@1001 : Query "Analysis View Source";
      EntryNo@1000 : Integer;
    BEGIN
      if AnalysisView."Date Compression" = AnalysisView."Date Compression"::None then begin
        UpdateEntriesForGLAccountDetailed;
        exit;
      end;

      AnalysisViewGLQry.SETRANGE(AnalysisViewCode,AnalysisView.Code);
      AnalysisViewGLQry.SETRANGE(EntryNo,AnalysisView."Last Entry No." + 1,LastGLEntryNo);
      if AnalysisView."Account Filter" = '' then
        AnalysisViewGLQry.SETFILTER(GLAccNo,'>%1','')
      else
        AnalysisViewGLQry.SETFILTER(GLAccNo,AnalysisView."Account Filter");
      if AnalysisView."Business Unit Filter" <> '' then
        AnalysisViewGLQry.SETFILTER(BusinessUnitCode,AnalysisView."Business Unit Filter");

      AnalysisViewGLQry.OPEN;
      while AnalysisViewGLQry.READ do begin
        if DimSetIDInFilter(AnalysisViewGLQry.DimensionSetID,AnalysisView) then
          UpdateAnalysisViewEntry(
            AnalysisViewGLQry.GLAccNo,
            AnalysisViewGLQry.BusinessUnitCode,
            '',
            AnalysisViewGLQry.DimVal1,
            AnalysisViewGLQry.DimVal2,
            AnalysisViewGLQry.DimVal3,
            AnalysisViewGLQry.DimVal4,
            AnalysisViewGLQry.PostingDate,
            AnalysisViewGLQry.Amount,
            AnalysisViewGLQry.DebitAmount,
            AnalysisViewGLQry.CreditAmount,
            AnalysisViewGLQry.AmountACY,
            AnalysisViewGLQry.DebitAmountACY,
            AnalysisViewGLQry.CreditAmountACY,
            0);
        EntryNo := EntryNo + 1;
        if ShowProgressWindow then
          UpdateWindowCounter(EntryNo);
      end;
      AnalysisViewGLQry.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntriesForGLAccountDetailed@14();
    VAR
      GLEntry@1001 : Record "G/L Entry";
      EntryNo@1000 : Integer;
    BEGIN
      with GLEntry do begin
        SETRANGE("Entry No.",AnalysisView."Last Entry No." + 1,LastGLEntryNo);
        if AnalysisView."Account Filter" <> '' then
          SETFILTER("G/L Account No.",AnalysisView."Account Filter");
        if AnalysisView."Business Unit Filter" <> '' then
          SETFILTER("Business Unit Code",AnalysisView."Business Unit Filter");

        if FINDSET then
          repeat
            if DimSetIDInFilter("Dimension Set ID",AnalysisView) then
              UpdateAnalysisViewEntry(
                "G/L Account No.","Business Unit Code",'',
                GetDimVal(AnalysisView."Dimension 1 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 2 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 3 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 4 Code","Dimension Set ID"),
                "Posting Date",Amount,"Debit Amount","Credit Amount",
                "Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount","Entry No.");
            EntryNo := EntryNo + 1;
            if ShowProgressWindow then
              UpdateWindowCounter(EntryNo);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateEntriesForCFAccount@12();
    BEGIN
      AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
      AnalysisViewEntry.DELETEALL;
      AnalysisViewEntry.RESET;
      CFForecastEntry.FILTERGROUP(2);
      CFForecastEntry.SETFILTER("Cash Flow Account No.",'<>%1','');
      CFForecastEntry.FILTERGROUP(0);
      if AnalysisView."Account Filter" <> '' then
        CFForecastEntry.SETFILTER("Cash Flow Account No.",AnalysisView."Account Filter");

      if GLSetup."Global Dimension 1 Code" <> '' then
        if AnalysisViewFilter.GET(AnalysisView.Code,GLSetup."Global Dimension 1 Code") then
          if AnalysisViewFilter."Dimension Value Filter" <> '' then
            CFForecastEntry.SETFILTER("Global Dimension 1 Code",AnalysisViewFilter."Dimension Value Filter");
      if GLSetup."Global Dimension 2 Code" <> '' then
        if AnalysisViewFilter.GET(AnalysisView.Code,GLSetup."Global Dimension 2 Code") then
          if AnalysisViewFilter."Dimension Value Filter" <> '' then
            CFForecastEntry.SETFILTER("Global Dimension 2 Code",AnalysisViewFilter."Dimension Value Filter");

      if not CFForecastEntry.FIND('-') then
        exit;

      repeat
        if DimSetIDInFilter(CFForecastEntry."Dimension Set ID",AnalysisView) then
          UpdateAnalysisViewEntry(
            CFForecastEntry."Cash Flow Account No.",
            '',
            CFForecastEntry."Cash Flow Forecast No.",
            GetDimVal(AnalysisView."Dimension 1 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 2 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 3 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 4 Code",CFForecastEntry."Dimension Set ID"),
            CFForecastEntry."Cash Flow Date",
            CFForecastEntry."Amount (LCY)",
            0,0,0,0,0,
            CFForecastEntry."Entry No.");
        if ShowProgressWindow then
          UpdateWindowCounter(CFForecastEntry."Entry No.");
      until CFForecastEntry.NEXT = 0;
      if ShowProgressWindow then
        UpdateWindowCounter(CFForecastEntry."Entry No.");
    END;

    LOCAL PROCEDURE UpdateBudgetEntries@10(DeleteFromEntry@1000 : Integer);
    BEGIN
      AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
      AnalysisViewBudgetEntry.SETFILTER("Entry No.",'>%1',DeleteFromEntry);
      AnalysisViewBudgetEntry.DELETEALL;
      AnalysisViewBudgetEntry.RESET;

      if AnalysisView."Account Filter" <> '' then
        GLBudgetEntry.SETFILTER("G/L Account No.",AnalysisView."Account Filter");
      if AnalysisView."Business Unit Filter" <> '' then
        GLBudgetEntry.SETFILTER("Business Unit Code",AnalysisView."Business Unit Filter");
      if not GLBudgetEntry.FINDSET(true) then
        exit;

      repeat
        if DimSetIDInFilter(GLBudgetEntry."Dimension Set ID",AnalysisView) then
          UpdateAnalysisViewBudgetEntry(
            GetDimVal(AnalysisView."Dimension 1 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 2 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 3 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 4 Code",GLBudgetEntry."Dimension Set ID"));
        if ShowProgressWindow then
          UpdateWindowCounter(GLBudgetEntry."Entry No.");
      until GLBudgetEntry.NEXT = 0;
      if ShowProgressWindow then
        UpdateWindowCounter(GLBudgetEntry."Entry No.");
      FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewEntry@3(AccNo@1013 : Code[20];BusUnitCode@1014 : Code[20];CashFlowForecastNo@1015 : Code[20];DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];DimValue4@1003 : Code[20];PostingDate@1007 : Date;Amount@1004 : Decimal;DebitAmount@1008 : Decimal;CreditAmount@1009 : Decimal;AmountACY@1010 : Decimal;DebitAmountACY@1012 : Decimal;CreditAmountACY@1011 : Decimal;EntryNo@1016 : Integer);
    BEGIN
      if PostingDate < AnalysisView."Starting Date" then begin
        PostingDate := AnalysisView."Starting Date" - 1;
        if AnalysisView."Date Compression" <> AnalysisView."Date Compression"::None then
          EntryNo := 0;
      end else begin
        PostingDate := CalculatePeriodStart(PostingDate,AnalysisView."Date Compression");
        if PostingDate < AnalysisView."Starting Date" then
          PostingDate := AnalysisView."Starting Date";
        if AnalysisView."Date Compression" <> AnalysisView."Date Compression"::None then
          EntryNo := 0;
      end;
      TempAnalysisViewEntry."Analysis View Code" := AnalysisView.Code;
      TempAnalysisViewEntry."Account Source" := AnalysisView."Account Source";
      TempAnalysisViewEntry."Business Unit Code" := BusUnitCode;
      TempAnalysisViewEntry."Account No." := AccNo;
      TempAnalysisViewEntry."Cash Flow Forecast No." := CashFlowForecastNo;
      TempAnalysisViewEntry."Posting Date" := PostingDate;
      TempAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
      TempAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
      TempAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
      TempAnalysisViewEntry."Dimension 4 Value Code" := DimValue4;
      TempAnalysisViewEntry."Entry No." := EntryNo;

      if TempAnalysisViewEntry.FIND then begin
        TempAnalysisViewEntry.Amount += Amount;
        TempAnalysisViewEntry."Debit Amount" += DebitAmount;
        TempAnalysisViewEntry."Credit Amount" += CreditAmount;
        TempAnalysisViewEntry."Add.-Curr. Amount" += AmountACY;
        TempAnalysisViewEntry."Add.-Curr. Debit Amount" += DebitAmountACY;
        TempAnalysisViewEntry."Add.-Curr. Credit Amount" += CreditAmountACY;
        TempAnalysisViewEntry.MODIFY;
      end else begin
        TempAnalysisViewEntry.Amount := Amount;
        TempAnalysisViewEntry."Debit Amount" := DebitAmount;
        TempAnalysisViewEntry."Credit Amount" := CreditAmount;
        TempAnalysisViewEntry."Add.-Curr. Amount" := AmountACY;
        TempAnalysisViewEntry."Add.-Curr. Debit Amount" := DebitAmountACY;
        TempAnalysisViewEntry."Add.-Curr. Credit Amount" := CreditAmountACY;
        TempAnalysisViewEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      end;
      if NoOfEntries >= 10000 then
        FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewBudgetEntry@18(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];DimValue4@1003 : Code[20]);
    BEGIN
      TempAnalysisViewBudgetEntry."Analysis View Code" := AnalysisView.Code;
      TempAnalysisViewBudgetEntry."Budget Name" := GLBudgetEntry."Budget Name";
      TempAnalysisViewBudgetEntry."Business Unit Code" := GLBudgetEntry."Business Unit Code";
      TempAnalysisViewBudgetEntry."G/L Account No." := GLBudgetEntry."G/L Account No.";
      if GLBudgetEntry.Date < AnalysisView."Starting Date" then
        TempAnalysisViewBudgetEntry."Posting Date" := AnalysisView."Starting Date" - 1
      else begin
        TempAnalysisViewBudgetEntry."Posting Date" :=
          CalculatePeriodStart(GLBudgetEntry.Date,AnalysisView."Date Compression");
        if TempAnalysisViewBudgetEntry."Posting Date" < AnalysisView."Starting Date" then
          TempAnalysisViewBudgetEntry."Posting Date" := AnalysisView."Starting Date";
      end;
      TempAnalysisViewBudgetEntry."Dimension 1 Value Code" := DimValue1;
      TempAnalysisViewBudgetEntry."Dimension 2 Value Code" := DimValue2;
      TempAnalysisViewBudgetEntry."Dimension 3 Value Code" := DimValue3;
      TempAnalysisViewBudgetEntry."Dimension 4 Value Code" := DimValue4;
      TempAnalysisViewBudgetEntry."Entry No." := GLBudgetEntry."Entry No.";

      if TempAnalysisViewBudgetEntry.FIND then begin
        TempAnalysisViewBudgetEntry.Amount := TempAnalysisViewBudgetEntry.Amount + GLBudgetEntry.Amount;
        TempAnalysisViewBudgetEntry.MODIFY;
      end else begin
        TempAnalysisViewBudgetEntry.Amount := GLBudgetEntry.Amount;
        TempAnalysisViewBudgetEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      end;
      if NoOfEntries >= 10000 then
        FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
    BEGIN
      if PostingDate = CLOSINGDATE(PostingDate) then
        exit(PostingDate);

      case DateCompression of
        AnalysisView."Date Compression"::Week:
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        AnalysisView."Date Compression"::Month:
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        AnalysisView."Date Compression"::Quarter:
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        AnalysisView."Date Compression"::Year:
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        AnalysisView."Date Compression"::Period:
          begin
            if PostingDate <> PrevPostingDate then begin
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              if AccountingPeriod.FINDLAST then begin
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              end else
                PrevCalculatedPostingDate := PostingDate;
            end;
            PostingDate := PrevCalculatedPostingDate;
          end;
      end;
      exit(PostingDate);
    END;

    LOCAL PROCEDURE FlushAnalysisViewEntry@5();
    BEGIN
      if ShowProgressWindow then
        Window.UPDATE(6,Text011);
      if TempAnalysisViewEntry.FINDSET then
        repeat
          AnalysisViewEntry.INIT;
          AnalysisViewEntry := TempAnalysisViewEntry;
          if not AnalysisViewEntry.INSERT then begin
            AnalysisViewEntry.FIND;
            AnalysisViewEntry.Amount :=
              AnalysisViewEntry.Amount + TempAnalysisViewEntry.Amount;
            AnalysisViewEntry."Debit Amount" :=
              AnalysisViewEntry."Debit Amount" + TempAnalysisViewEntry."Debit Amount";
            AnalysisViewEntry."Credit Amount" :=
              AnalysisViewEntry."Credit Amount" + TempAnalysisViewEntry."Credit Amount";
            AnalysisViewEntry."Add.-Curr. Amount" :=
              AnalysisViewEntry."Add.-Curr. Amount" +
              TempAnalysisViewEntry."Add.-Curr. Amount";
            AnalysisViewEntry."Add.-Curr. Debit Amount" :=
              AnalysisViewEntry."Add.-Curr. Debit Amount" +
              TempAnalysisViewEntry."Add.-Curr. Debit Amount";
            AnalysisViewEntry."Add.-Curr. Credit Amount" :=
              AnalysisViewEntry."Add.-Curr. Credit Amount" +
              TempAnalysisViewEntry."Add.-Curr. Credit Amount";
            AnalysisViewEntry.MODIFY;
          end;
        until TempAnalysisViewEntry.NEXT = 0;
      TempAnalysisViewEntry.DELETEALL;
      NoOfEntries := 0;
      if ShowProgressWindow then
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE FlushAnalysisViewBudgetEntry@25();
    BEGIN
      if ShowProgressWindow then
        Window.UPDATE(6,Text011);
      if TempAnalysisViewBudgetEntry.FINDSET then
        repeat
          AnalysisViewBudgetEntry.INIT;
          AnalysisViewBudgetEntry := TempAnalysisViewBudgetEntry;
          if not AnalysisViewBudgetEntry.INSERT then begin
            AnalysisViewBudgetEntry.FIND;
            AnalysisViewBudgetEntry.Amount :=
              AnalysisViewBudgetEntry.Amount + TempAnalysisViewBudgetEntry.Amount;
            AnalysisViewBudgetEntry.MODIFY;
          end;
        until TempAnalysisViewBudgetEntry.NEXT = 0;
      TempAnalysisViewBudgetEntry.DELETEALL;
      NoOfEntries := 0;
      if ShowProgressWindow then
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE GetDimVal@6(DimCode@1000 : Code[20];DimSetID@1001 : Integer) : Code[20];
    BEGIN
      if TempDimSetEntry.GET(DimSetID,DimCode) then
        exit(TempDimSetEntry."Dimension Value Code");
      if DimSetEntry.GET(DimSetID,DimCode) then
        TempDimSetEntry := DimSetEntry
      else begin
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Code" := DimCode;
        TempDimSetEntry."Dimension Value Code" := '';
      end;
      TempDimSetEntry.INSERT;
      exit(TempDimSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE InitWindow@1();
    BEGIN
      Window.OPEN(
        Text005 +
        Text006 +
        Text009 +
        Text007 +
        Text008);
      Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE UpdateWindowCounter@7(EntryNo@1000 : Integer);
    BEGIN
      WinUpdateCounter := WinUpdateCounter + 1;
      WinTime2 := TIME;
      if (WinTime2 > WinTime1 + 1000) or (EntryNo = WinLastEntryNo) then begin
        if WinLastEntryNo <> 0 then
          Window.UPDATE(3,ROUND(EntryNo / WinLastEntryNo * 10000,1));
        WinTotalCounter := WinTotalCounter + WinUpdateCounter;
        if WinTime2 <> WinTime1 then
          Window.UPDATE(4,ROUND(WinUpdateCounter * (1000 / (WinTime2 - WinTime1)),1));
        if WinTime2 <> WinTime0 then
          Window.UPDATE(5,ROUND(WinTotalCounter * (1000 / (WinTime2 - WinTime0)),1));
        WinTime1 := WinTime2;
        WinUpdateCounter := 0;
      end;
    END;

    LOCAL PROCEDURE UpdateWindowHeader@13(TableID@1000 : Integer;EntryNo@1001 : Integer);
    VAR
      Object@1002 : Record Object;
    BEGIN
      WinLastEntryNo := EntryNo;
      WinTotalCounter := 0;
      Object.GET(Object.Type::Table,'',TableID);
      Window.UPDATE(1,AnalysisView.Code);
      Window.UPDATE(2,Object.Name);
      Window.UPDATE(3,0);
      Window.UPDATE(4,0);
      Window.UPDATE(5,0);
      WinTime0 := TIME;
      WinTime1 := WinTime0;
      WinTime2 := WinTime0;
    END;

    [External]
    PROCEDURE SetLastBudgetEntryNo@16(NewLastBudgetEntryNo@1000 : Integer);
    VAR
      AnalysisView2@1001 : Record "Analysis View";
    BEGIN
      AnalysisView.SETRANGE("Last Budget Entry No.",NewLastBudgetEntryNo + 1,2147483647);
      AnalysisView.SETRANGE("Include Budgets",true);
      if AnalysisView.FINDSET(true,true) then
        repeat
          AnalysisView2 := AnalysisView;
          AnalysisView2."Last Budget Entry No." := NewLastBudgetEntryNo;
          AnalysisView2.MODIFY;
        until AnalysisView.NEXT = 0;
    END;

    LOCAL PROCEDURE IsValueIncludedInFilter@17(DimValue@1002 : Code[20];DimFilter@1000 : Code[250]) : Boolean;
    BEGIN
      with TempDimBuf do begin
        RESET;
        DELETEALL;
        INIT;
        "Dimension Value Code" := DimValue;
        INSERT;
        SETFILTER("Dimension Value Code",DimFilter);
        exit(FINDFIRST);
      end;
    END;

    [External]
    PROCEDURE DimSetIDInFilter@2(DimSetID@1000 : Integer;VAR AnalysisView@1002 : Record "Analysis View") : Boolean;
    VAR
      InFilters@1001 : Boolean;
    BEGIN
      if not FilterIsInitialized then begin
        TempDimEntryBuffer.DELETEALL;
        FilterIsInitialized := true;
        AnalysisViewFilter.SETRANGE("Analysis View Code",AnalysisView.Code);
        FiltersExist := not AnalysisViewFilter.ISEMPTY;
      end;
      if not FiltersExist then
        exit(true);

      if TempDimEntryBuffer.GET(DimSetID) then  // cashed value?
        exit(TempDimEntryBuffer."Dimension Entry No." <> 0);

      InFilters := true;
      if AnalysisViewFilter.FINDSET then
        repeat
          if DimSetEntry.GET(DimSetID,AnalysisViewFilter."Dimension Code") then
            InFilters :=
              InFilters and IsValueIncludedInFilter(DimSetEntry."Dimension Value Code",AnalysisViewFilter."Dimension Value Filter")
          else
            InFilters :=
              InFilters and IsValueIncludedInFilter('',AnalysisViewFilter."Dimension Value Filter");
        until (AnalysisViewFilter.NEXT = 0) or not InFilters;
      TempDimEntryBuffer."No." := DimSetID;
      if InFilters then
        TempDimEntryBuffer."Dimension Entry No." := 1
      else
        TempDimEntryBuffer."Dimension Entry No." := 0;
      TempDimEntryBuffer.INSERT;
      exit(InFilters);
    END;

    BEGIN
    END.
  }
}

