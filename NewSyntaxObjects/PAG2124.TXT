OBJECT Page 2124 O365 Item Basket Part
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Prices;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="O365 Item Basket Entry";
    SourceTableView=SORTING(Description);
    PageType=List;
    SourceTableTemporary=true;
    OnClosePage=BEGIN
                  if AnySelectionMade then
                    if CONFIRM(UpdateQst,true) then
                      GetSalesLines(GlobalSalesLine);
                END;

    OnFindRecord=VAR
                   Found@1001 : Boolean;
                 BEGIN
                   CopyFiltersToItem(Item);
                   Found := Item.FIND(Which);
                   if Found then
                     CopyFromItem(Item);
                   exit(Found);
                 END;

    OnNextRecord=VAR
                   ResultSteps@1000 : Integer;
                 BEGIN
                   CopyFiltersToItem(Item);
                   ResultSteps := Item.NEXT(Steps);
                   if ResultSteps <> 0 then
                     CopyFromItem(Item);
                   exit(ResultSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       "Brick Text 2" := '';
                       Quantity := 0;
                       if TempO365ItemBasketEntry.GET("Item No.") then begin
                         if TempO365ItemBasketEntry."Line Total" <> 0 then
                           "Brick Text 2" := FORMAT(TempO365ItemBasketEntry."Line Total",0,'<Precision,2><Standard Format,0>');
                         Quantity := TempO365ItemBasketEntry.Quantity;
                         "Unit Price" := TempO365ItemBasketEntry."Unit Price";
                         Description := TempO365ItemBasketEntry.Description;
                       end;
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;Action    ;
                      Name=AddToBasket;
                      CaptionML=ENU=+1;
                      ToolTipML=ENU=Add an item to the invoice.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Add;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 AddToBasket;
                               END;

                      Gesture=LeftSwipe }
      { 12      ;1   ;Action    ;
                      Name=ReduceBasket;
                      CaptionML=ENU=-1;
                      ToolTipML=ENU=Remove an item from the invoice.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=RemoveLine;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 RemoveFromBasket;
                               END;

                      Gesture=RightSwipe }
      { 16      ;1   ;Action    ;
                      Name=Card;
                      CaptionML=ENU=Card;
                      ToolTipML=ENU=View or change detailed information about the record on the document or journal line.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Scope=Repeater;
                      OnAction=VAR
                                 Item@1000 : Record Item;
                               BEGIN
                                 if not Item.GET("Item No.") then
                                   exit;
                                 PAGE.RUNMODAL(PAGE::"O365 Item Card",Item);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 14  ;1   ;Group     ;
                Name=Group14;
                GroupType=Group;
                InstructionalTextML=ENU=Swipe right to add line items, swipe left to remove }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                Name=Quantity;
                ToolTipML=ENU=Specifies the quantity for the line.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                DecimalPlaces=0:5;
                BlankZero=true;
                SourceExpr=Quantity;
                Style=StandardAccent;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             ChangeBasket(Quantity - xRec.Quantity);
                           END;

                ImplicitType=Decimal }

    { 3   ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the item number.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Item No.";
                Editable=false;
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the item description.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Description;
                Editable=false;
                ImplicitType=Text50 }

    { 5   ;2   ;Field     ;
                Name=Base Unit of Measure;
                ToolTipML=ENU=Specifies the item unit of measure.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Base Unit of Measure";
                Editable=false;
                ImplicitType=Code10 }

    { 6   ;2   ;Field     ;
                Name=Unit Price;
                ToolTipML=ENU=Specifies the item price without tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Unit Price";
                AutoFormatType=10;
                AutoFormatExpr='2';
                Editable=false;
                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=Picture;
                ToolTipML=ENU=Specifies a picture of the item.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Picture;
                ImplicitType=MediaSet }

    { 9   ;2   ;Field     ;
                Name=Brick Text 2;
                ToolTipML=ENU=Specifies the line total for this item.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Brick Text 2";
                Editable=false;
                Style=StandardAccent;
                StyleExpr=TRUE;
                ImplicitType=Text30 }

  }
  CODE
  {
    VAR
      GlobalSalesLine@1001 : Record "Sales Line";
      Item@1004 : Record Item;
      TempO365ItemBasketEntry@1000 : TEMPORARY Record "O365 Item Basket Entry";
      AnySelectionMade@1002 : Boolean;
      UpdateQst@1005 : TextConst 'ENU=Update invoice?';

    LOCAL PROCEDURE CopyFiltersToItem@7(VAR Item@1000 : Record Item);
    BEGIN
      FILTERGROUP(-1);
      Item.FILTERGROUP(-1);
      COPYFILTER(Description,Item.Description);
      COPYFILTER("Item No.",Item."No.");
      COPYFILTER("Unit Price",Item."Unit Price");
      COPYFILTER("Base Unit of Measure",Item."Base Unit of Measure");
      FILTERGROUP(0);
      Item.FILTERGROUP(0);
      Item.SETCURRENTKEY(Description);
      if Item.GET("Item No.") then;
    END;

    LOCAL PROCEDURE GetBasketEntry@5(VAR O365ItemBasketEntry@1000 : Record "O365 Item Basket Entry");
    BEGIN
      if O365ItemBasketEntry.GET("Item No.") then
        exit;
      O365ItemBasketEntry.INIT;
      O365ItemBasketEntry."Item No." := "Item No.";
      O365ItemBasketEntry.Description := Description;
      O365ItemBasketEntry.INSERT;
    END;

    LOCAL PROCEDURE AddToBasket@3();
    BEGIN
      ChangeBasket(1);
    END;

    LOCAL PROCEDURE RemoveFromBasket@4();
    BEGIN
      ChangeBasket(-1);
    END;

    LOCAL PROCEDURE ChangeBasket@17(QuantityChange@1000 : Decimal);
    BEGIN
      GetBasketEntry(TempO365ItemBasketEntry);
      TempO365ItemBasketEntry.Quantity += QuantityChange;
      if TempO365ItemBasketEntry.Quantity <= 0 then
        TempO365ItemBasketEntry.DELETE
      else begin
        TempO365ItemBasketEntry."Unit Price" := "Unit Price";
        TempO365ItemBasketEntry."Line Total" := ROUND(TempO365ItemBasketEntry.Quantity * TempO365ItemBasketEntry."Unit Price");
        TempO365ItemBasketEntry.MODIFY;
      end;
      AnySelectionMade := true;
    END;

    LOCAL PROCEDURE CopyFromItem@6(VAR Item@1000 : Record Item);
    BEGIN
      if not GET(Item."No.") then begin
        INIT;
        "Item No." := Item."No.";
        "Unit Price" := Item."Unit Price";
        Description := Item.Description;
        "Base Unit of Measure" := Item."Base Unit of Measure";
        Picture := Item.Picture;
        INSERT;
      end else
        MODIFY;
    END;

    [External]
    PROCEDURE SetSalesLines@1(VAR OrgSalesLine@1000 : Record "Sales Line");
    VAR
      SalesHeader@1002 : Record "Sales Header";
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      TempO365ItemBasketEntry.DELETEALL;
      OrgSalesLine.FILTERGROUP(4);
      if OrgSalesLine.GETFILTERS = '' then
        exit;
      if not SalesHeader.GET(OrgSalesLine.GETRANGEMIN("Document Type"),OrgSalesLine.GETRANGEMIN("Document No.")) then
        exit;
      GlobalSalesLine.COPY(OrgSalesLine);
      OrgSalesLine.FILTERGROUP(0);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDSET then
        repeat
          TempO365ItemBasketEntry.INIT;
          TempO365ItemBasketEntry."Item No." := SalesLine."No.";
          if not TempO365ItemBasketEntry.FIND then
            TempO365ItemBasketEntry.INSERT;
          TempO365ItemBasketEntry.Quantity += SalesLine.Quantity;
          TempO365ItemBasketEntry."Unit Price" := SalesLine."Unit Price";
          TempO365ItemBasketEntry."Line Total" := ROUND(TempO365ItemBasketEntry.Quantity * TempO365ItemBasketEntry."Unit Price");
          TempO365ItemBasketEntry.Description := SalesLine.Description;
          TempO365ItemBasketEntry."Base Unit of Measure" := SalesLine."Unit of Measure";
          TempO365ItemBasketEntry.MODIFY;
        until SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetSalesLines@2(VAR OrgSalesLine@1000 : Record "Sales Line");
    VAR
      SalesHeader@1002 : Record "Sales Header";
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      OrgSalesLine.FILTERGROUP(4);
      if OrgSalesLine.GETFILTERS = '' then
        exit;
      if not SalesHeader.GET(OrgSalesLine.GETRANGEMIN("Document Type"),OrgSalesLine.GETRANGEMIN("Document No.")) then
        exit;
      OrgSalesLine.FILTERGROUP(0);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.DELETEALL(true);
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := 0;
      SalesLine.SetHideValidationDialog(true);
      if TempO365ItemBasketEntry.FINDSET then
        repeat
          SalesLine.INIT;
          SalesLine."Line No." += 10000;
          SalesLine.Type := SalesLine.Type::Item;
          SalesLine.VALIDATE("No.",TempO365ItemBasketEntry."Item No.");
          SalesLine.Description := TempO365ItemBasketEntry.Description;
          SalesLine.VALIDATE("Unit of Measure",TempO365ItemBasketEntry."Base Unit of Measure");
          SalesLine.VALIDATE("Unit Price",TempO365ItemBasketEntry."Unit Price");
          SalesLine.VALIDATE(Quantity,TempO365ItemBasketEntry.Quantity);
          SalesLine.INSERT;
        until TempO365ItemBasketEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

