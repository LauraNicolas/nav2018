OBJECT Codeunit 5431 Calc. Item Plan - Plan Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo=Item;
    OnRun=BEGIN
            Item.COPY(Rec);
            Code;
            Rec := Item;
          END;

  }
  CODE
  {
    VAR
      Item@1038 : Record Item;
      MfgSetup@1019 : Record "Manufacturing Setup";
      TempPlanningCompList@1018 : TEMPORARY Record "Planning Component";
      TempItemList@1017 : TEMPORARY Record Item;
      InvtProfileOffsetting@1000 : Codeunit "Inventory Profile Offsetting";
      MPS@1014 : Boolean;
      MRP@1013 : Boolean;
      NetChange@1012 : Boolean;
      PeriodLength@1010 : Integer;
      CurrTemplateName@1009 : Code[10];
      CurrWorksheetName@1008 : Code[10];
      UseForecast@1002 : Code[10];
      FromDate@1007 : Date;
      ToDate@1006 : Date;
      Text000@1045 : TextConst 'ENU=You must decide what to calculate.';
      Text001@1044 : TextConst 'ENU=Enter a starting date.';
      Text002@1043 : TextConst 'ENU=Enter an ending date.';
      Text003@1042 : TextConst 'ENU=The ending date must not be before the order date.';
      Text004@1041 : TextConst 'ENU=You must not use a variant filter when calculating MPS from a forecast.';
      ExcludeForecastBefore@1004 : Date;
      RespectPlanningParm@1003 : Boolean;

    LOCAL PROCEDURE Code@1();
    VAR
      ReqLineExtern@1001 : Record "Requisition Line";
      PlannedProdOrderLine@1000 : Record "Prod. Order Line";
      PlanningAssignment@1002 : Record "Planning Assignment";
      ProdOrder@1003 : Record "Production Order";
      CurrWorksheetType@1004 : 'Requisition,Planning';
    BEGIN
      with Item do begin
        if not PlanThisItem then
          exit;

        ReqLineExtern.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
        COPYFILTER("Variant Filter",ReqLineExtern."Variant Code");
        COPYFILTER("Location Filter",ReqLineExtern."Location Code");
        ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
        ReqLineExtern.SETRANGE("No.","No.");
        if ReqLineExtern.FIND('-') then
          repeat
            ReqLineExtern.DELETE(true);
          until ReqLineExtern.NEXT = 0;

        PlannedProdOrderLine.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code");
        PlannedProdOrderLine.SETRANGE(Status,PlannedProdOrderLine.Status::Planned);
        COPYFILTER("Variant Filter",PlannedProdOrderLine."Variant Code");
        COPYFILTER("Location Filter",PlannedProdOrderLine."Location Code");
        PlannedProdOrderLine.SETRANGE("Item No.","No.");
        if PlannedProdOrderLine.FIND('-') then
          repeat
            if ProdOrder.GET(PlannedProdOrderLine.Status,PlannedProdOrderLine."Prod. Order No.") then begin
              if (ProdOrder."Source Type" = ProdOrder."Source Type"::Item) and
                 (ProdOrder."Source No." = PlannedProdOrderLine."Item No.")
              then
                ProdOrder.DELETE(true);
            end else
              PlannedProdOrderLine.DELETE(true);
          until PlannedProdOrderLine.NEXT = 0;

        COMMIT;

        InvtProfileOffsetting.SetParm(UseForecast,ExcludeForecastBefore,CurrWorksheetType::Planning);
        InvtProfileOffsetting.CalculatePlanFromWorksheet(
          Item,MfgSetup,CurrTemplateName,CurrWorksheetName,FromDate,ToDate,MRP,RespectPlanningParm);

        // Retrieve list of Planning Components handled:
        InvtProfileOffsetting.GetPlanningCompList(TempPlanningCompList);

        COPYFILTER("Variant Filter",PlanningAssignment."Variant Code");
        COPYFILTER("Location Filter",PlanningAssignment."Location Code");
        PlanningAssignment.SETRANGE(Inactive,false);
        PlanningAssignment.SETRANGE("Net Change Planning",true);
        PlanningAssignment.SETRANGE("Item No.","No.");
        if PlanningAssignment.FIND('-') then
          repeat
            if PlanningAssignment."Latest Date" <= ToDate then begin
              PlanningAssignment.Inactive := true;
              PlanningAssignment.MODIFY;
            end;
          until PlanningAssignment.NEXT = 0;

        COMMIT;

        TempItemList := Item;
        TempItemList.INSERT;
      end;
    END;

    [External]
    PROCEDURE Initialize@2(NewFromDate@1001 : Date;NewToDate@1000 : Date;NewMPS@1003 : Boolean;NewMRP@1002 : Boolean;NewRespectPlanningParm@1004 : Boolean);
    BEGIN
      FromDate := NewFromDate;
      ToDate := NewToDate;
      MPS := NewMPS;
      MRP := NewMRP;
      RespectPlanningParm := NewRespectPlanningParm;

      MfgSetup.GET;
      CheckPreconditions;
    END;

    [External]
    PROCEDURE Finalize@3();
    VAR
      ReservMgt@1000 : Codeunit "Reservation Management";
    BEGIN
      // Items already planned for removed from temporary list:
      if TempPlanningCompList.FIND('-') then
        repeat
          if TempItemList.GET(TempPlanningCompList."Item No.") then
            TempPlanningCompList.DELETE;
        until TempPlanningCompList.NEXT = 0;

      // Dynamic tracking is run for the remaining Planning Components:
      if TempPlanningCompList.FIND('-') then
        repeat
          ReservMgt.SetPlanningComponent(TempPlanningCompList);
          ReservMgt.AutoTrack(TempPlanningCompList."Net Quantity (Base)");
        until TempPlanningCompList.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE CheckPreconditions@12();
    VAR
      ForecastEntry@1004 : Record "Production Forecast Entry";
    BEGIN
      if not MPS and not MRP then
        ERROR(Text000);

      if FromDate = 0D then
        ERROR(Text001);
      if ToDate = 0D then
        ERROR(Text002);
      PeriodLength := ToDate - FromDate + 1;
      if PeriodLength <= 0 then
        ERROR(Text003);

      if MPS and
         (Item.GETFILTER("Variant Filter") <> '') and
         (UseForecast <> '')
      then begin
        ForecastEntry.SETCURRENTKEY("Production Forecast Name","Item No.","Location Code","Forecast Date","Component Forecast");
        ForecastEntry.SETRANGE("Production Forecast Name",UseForecast);
        Item.COPYFILTER("No.",ForecastEntry."Item No.");
        if MfgSetup."Use Forecast on Locations" then
          Item.COPYFILTER("Location Filter",ForecastEntry."Location Code");
        if not ForecastEntry.ISEMPTY then
          ERROR(Text004);
      end;
    END;

    [External]
    PROCEDURE SetTemplAndWorksheet@6(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10];NetChange2@1002 : Boolean);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      NetChange := NetChange2;
    END;

    LOCAL PROCEDURE PlanThisItem@5() : Boolean;
    VAR
      SKU@1005 : Record "Stockkeeping Unit";
      ForecastEntry@1004 : Record "Production Forecast Entry";
      SalesLine@1003 : Record "Sales Line";
      ServLine@1002 : Record "Service Line";
      PurchaseLine@1001 : Record "Purchase Line";
      ProdOrderLine@1000 : Record "Prod. Order Line";
      PlanningAssignment@1006 : Record "Planning Assignment";
      JobPlanningLine@1007 : Record "Job Planning Line";
    BEGIN
      SKU.SETCURRENTKEY("Item No.");
      Item.COPYFILTER("Variant Filter",SKU."Variant Code");
      Item.COPYFILTER("Location Filter",SKU."Location Code");
      SKU.SETRANGE("Item No.",Item."No.");
      if SKU.ISEMPTY and (Item."Reordering Policy" = Item."Reordering Policy"::" ") then
        exit(false);

      Item.COPYFILTER("Variant Filter",PlanningAssignment."Variant Code");
      Item.COPYFILTER("Location Filter",PlanningAssignment."Location Code");
      PlanningAssignment.SETRANGE(Inactive,false);
      PlanningAssignment.SETRANGE("Net Change Planning",true);
      PlanningAssignment.SETRANGE("Item No.",Item."No.");
      if NetChange and PlanningAssignment.ISEMPTY then
        exit(false);

      if MRP = MPS then
        exit(true);

      SalesLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SalesLine.SETFILTER("Document Type",'%1|%2',SalesLine."Document Type"::Order,SalesLine."Document Type"::"Blanket Order");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      Item.COPYFILTER("Variant Filter",SalesLine."Variant Code");
      Item.COPYFILTER("Location Filter",SalesLine."Location Code");
      SalesLine.SETRANGE("No.",Item."No.");
      SalesLine.SETFILTER("Outstanding Qty. (Base)",'<>0');
      if not SalesLine.ISEMPTY then
        exit(MPS);

      ForecastEntry.SETCURRENTKEY("Production Forecast Name","Item No.","Location Code","Forecast Date","Component Forecast");
      ForecastEntry.SETRANGE("Production Forecast Name",UseForecast);
      if MfgSetup."Use Forecast on Locations" then
        Item.COPYFILTER("Location Filter",ForecastEntry."Location Code");
      ForecastEntry.SETRANGE("Item No.",Item."No.");
      if ForecastEntry.FINDFIRST then begin
        ForecastEntry.CALCSUMS("Forecast Quantity (Base)");
        if ForecastEntry."Forecast Quantity (Base)" > 0 then
          exit(MPS);
      end;

      if ServLine.LinesWithItemToPlanExist(Item) then
        exit(MPS);

      if JobPlanningLine.LinesWithItemToPlanExist(Item) then
        exit(MPS);

      ProdOrderLine.SETCURRENTKEY("Item No.");
      ProdOrderLine.SETRANGE("MPS Order",true);
      ProdOrderLine.SETRANGE("Item No.",Item."No.");
      if not ProdOrderLine.ISEMPTY then
        exit(MPS);

      PurchaseLine.SETCURRENTKEY("Document Type",Type,"No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("MPS Order",true);
      PurchaseLine.SETRANGE("No.",Item."No.");
      if not PurchaseLine.ISEMPTY then
        exit(MPS);

      exit(MRP);
    END;

    [External]
    PROCEDURE SetParm@59(Forecast@1000 : Code[10];ExclBefore@1001 : Date;VAR Item2@1002 : Record Item);
    BEGIN
      UseForecast := Forecast;
      ExcludeForecastBefore := ExclBefore;
      Item.COPY(Item2);
    END;

    [External]
    PROCEDURE SetResiliencyOn@64();
    BEGIN
      InvtProfileOffsetting.SetResiliencyOn;
    END;

    [External]
    PROCEDURE GetResiliencyError@62(VAR PlanningErrorLogEntry@1000 : Record "Planning Error Log") : Boolean;
    BEGIN
      exit(InvtProfileOffsetting.GetResiliencyError(PlanningErrorLogEntry));
    END;

    BEGIN
    END.
  }
}

