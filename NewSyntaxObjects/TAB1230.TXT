OBJECT Table 1230 SEPA Direct Debit Mandate
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=ID,"Customer Bank Account Code";
    OnInsert=BEGIN
               InsertNoSeries
             END;

    OnModify=BEGIN
               if xRec.Blocked then
                 TESTFIELD(Blocked,false);
             END;

    CaptionML=ENU=SEPA Direct Debit Mandate;
    LookupPageID="SEPA Direct Debit Mandates";
    DrillDownPageID="SEPA Direct Debit Mandates";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Code35        ;OnValidate=VAR
                                                                SalesSetup@1001 : Record "Sales & Receivables Setup";
                                                                NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
                                                              BEGIN
                                                                if ID <> xRec.ID then begin
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Direct Debit Mandate Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=ID }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                if (xRec."Customer No." <> '') and ("Customer No." <> xRec."Customer No.") then begin
                                                                  TESTFIELD("Date of Signature",0D);
                                                                  TESTFIELD("Debit Counter",0);
                                                                  "Customer Bank Account Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Customer No.;
                                                   NotBlank=true }
    { 3   ;   ;Customer Bank Account Code;Code10  ;TableRelation="Customer Bank Account".Code WHERE ("Customer No."=FIELD("Customer No."));
                                                   CaptionML=ENU=Customer Bank Account Code;
                                                   NotBlank=true }
    { 4   ;   ;Valid From          ;Date          ;OnValidate=BEGIN
                                                                ValidateDates;
                                                              END;

                                                   CaptionML=ENU=Valid From }
    { 5   ;   ;Valid To            ;Date          ;OnValidate=BEGIN
                                                                ValidateDates;
                                                              END;

                                                   CaptionML=ENU=Valid To }
    { 6   ;   ;Date of Signature   ;Date          ;CaptionML=ENU=Date of Signature;
                                                   NotBlank=true }
    { 7   ;   ;Type of Payment     ;Option        ;OnValidate=BEGIN
                                                                if ("Type of Payment" = "Type of Payment"::OneOff) and ("Debit Counter" > 1) then
                                                                  ERROR(MandateChangeErr);
                                                                "Expected Number of Debits" := 1;
                                                              END;

                                                   CaptionML=ENU=Type of Payment;
                                                   OptionCaptionML=ENU=OneOff,Recurrent;
                                                   OptionString=OneOff,Recurrent }
    { 8   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 9   ;   ;Expected Number of Debits;Integer  ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                if "Expected Number of Debits" < "Debit Counter" then
                                                                  ERROR(InvalidNumberOfDebitsTxt);
                                                                if ("Type of Payment" = "Type of Payment"::OneOff) and ("Expected Number of Debits" > 1) then
                                                                  ERROR(InvalidOneOffNumOfDebitsErr);

                                                                Closed := "Expected Number of Debits" <= "Debit Counter";
                                                              END;

                                                   CaptionML=ENU=Expected Number of Debits;
                                                   MinValue=1 }
    { 10  ;   ;Debit Counter       ;Integer       ;OnValidate=BEGIN
                                                                if "Expected Number of Debits" < "Debit Counter" then begin
                                                                  MESSAGE(InvalidNumberOfDebitsTxt);
                                                                  FIELDERROR("Debit Counter");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Debit Counter;
                                                   Editable=false }
    { 11  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
    {    ;"Customer No."                           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;ID,"Customer Bank Account Code","Valid From","Valid To","Type of Payment" }
  }
  CODE
  {
    VAR
      DateErr@1006 : TextConst 'ENU=The Valid To date must be after the Valid From date.';
      InvalidNumberOfDebitsTxt@1005 : TextConst 'ENU=The Debit Counter cannot be greater than the Number of Debits.';
      InvalidOneOffNumOfDebitsErr@1004 : TextConst 'ENU=The Number of Debits for OneOff Sequence Type cannot be greater than one.';
      MandateChangeErr@1003 : TextConst 'ENU=SequenceType cannot be set to OneOff, since the Mandate has already been used.';

    LOCAL PROCEDURE InsertNoSeries@1();
    VAR
      SalesSetup@1001 : Record "Sales & Receivables Setup";
      NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
      NewNo@1002 : Code[20];
    BEGIN
      if ID = '' then begin
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Direct Debit Mandate Nos.");
        NoSeriesMgt.InitSeries(SalesSetup."Direct Debit Mandate Nos.",xRec."No. Series",0D,NewNo,"No. Series");
        ID := NewNo;
      end;
    END;

    [External]
    PROCEDURE IsMandateActive@2(TransactionDate@1000 : Date) : Boolean;
    BEGIN
      if ("Valid To" <> 0D) and ("Valid To" < TransactionDate) or ("Valid From" > TransactionDate) or Blocked or Closed then
        exit(false);
      exit(true)
    END;

    [External]
    PROCEDURE GetDefaultMandate@58(CustomerNo@1001 : Code[20];DueDate@1002 : Date) : Code[35];
    VAR
      SEPADirectDebitMandate@1000 : Record "SEPA Direct Debit Mandate";
      Customer@1004 : Record Customer;
    BEGIN
      with SEPADirectDebitMandate do begin
        SETRANGE("Customer No.",CustomerNo);
        SETFILTER("Valid From",'%1|<=%2',0D,DueDate);
        SETFILTER("Valid To",'%1|>=%2',0D,DueDate);
        SETRANGE(Blocked,false);
        SETRANGE(Closed,false);
        if FINDFIRST then;
        if Customer.GET(CustomerNo) and (Customer."Preferred Bank Account Code" <> '') then
          SETRANGE("Customer Bank Account Code",Customer."Preferred Bank Account Code");
        if FINDFIRST then;
        exit(ID);
      end;
    END;

    [External]
    PROCEDURE UpdateCounter@5();
    BEGIN
      TESTFIELD(Blocked,false);
      VALIDATE("Debit Counter","Debit Counter" + 1);
      Closed := "Debit Counter" >= "Expected Number of Debits";
      MODIFY;
    END;

    [External]
    PROCEDURE GetSequenceType@4() : Integer;
    VAR
      DirectDebitCollectionEntry@1000 : Record "Direct Debit Collection Entry";
    BEGIN
      DirectDebitCollectionEntry.INIT;
      if "Type of Payment" = "Type of Payment"::OneOff then
        exit(DirectDebitCollectionEntry."Sequence Type"::"One Off");
      if "Debit Counter" = 0 then
        exit(DirectDebitCollectionEntry."Sequence Type"::First);
      if "Debit Counter" >= "Expected Number of Debits" - 1 then
        exit(DirectDebitCollectionEntry."Sequence Type"::Last);
      exit(DirectDebitCollectionEntry."Sequence Type"::Recurring);
    END;

    [External]
    PROCEDURE RollBackSequenceType@6();
    BEGIN
      if "Debit Counter" <= 0 then
        exit;

      "Debit Counter" -= 1;
      Closed := "Debit Counter" >= "Expected Number of Debits";
      MODIFY;
    END;

    LOCAL PROCEDURE ValidateDates@3();
    BEGIN
      if ("Valid To" <> 0D) and ("Valid From" > "Valid To") then
        ERROR(DateErr);
    END;

    BEGIN
    END.
  }
}

