OBJECT Codeunit 1710 Exp. User Feedback Pos. Pay
{
  OBJECT-PROPERTIES
  {
    Date=20150915D;
    Time=120000T;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    Permissions=TableData "Check Ledger Entry"=rimd,
                TableData "Positive Pay Entry"=rimd,
                TableData "Positive Pay Entry Detail"=rimd;
    OnRun=VAR
            CheckLedgerEntry@1000 : Record "Check Ledger Entry";
            PositivePayEntry@1001 : Record "Positive Pay Entry";
            BankAccNo@1003 : Code[20];
            LastUpdateDateTime@1004 : DateTime;
          BEGIN
            // Update the CheckLedgerEntry for the Data Exch. Entry No. as exported successfully
            CheckLedgerEntry.SETRANGE("Data Exch. Entry No.","Entry No.");
            CheckLedgerEntry.SETRANGE("Positive Pay Exported",false);
            CheckLedgerEntry.SETFILTER(
              "Entry Status",'%1|%2|>%3',
              CheckLedgerEntry."Entry Status"::Printed,
              CheckLedgerEntry."Entry Status"::Posted,
              CheckLedgerEntry."Entry Status"::"Test Print");
            if CheckLedgerEntry.FINDFIRST then
              BankAccNo := CheckLedgerEntry."Bank Account No.";
            CheckLedgerEntry.MODIFYALL("Positive Pay Exported",true,true);

            // Update the CheckLedgerEntry for the Data Exch. Voided Entry No. for Checks as exported successfully
            CheckLedgerEntry.SETRANGE("Data Exch. Entry No.");
            CheckLedgerEntry.SETRANGE("Data Exch. Voided Entry No.","Entry No.");
            CheckLedgerEntry.SETFILTER(
              "Entry Status",'%1|%2|%3',
              CheckLedgerEntry."Entry Status"::Voided,
              CheckLedgerEntry."Entry Status"::"Financially Voided",
              CheckLedgerEntry."Entry Status"::"Test Print");
            // Only populate the BankAcct if there were no open checks found in case there are no voids
            if BankAccNo = '' then
              if CheckLedgerEntry.FINDFIRST then
                BankAccNo := CheckLedgerEntry."Bank Account No.";
            CheckLedgerEntry.MODIFYALL("Positive Pay Exported",true,true);

            if BankAccNo <> '' then
              LastUpdateDateTime := GetLastUploadDateTime(BankAccNo);

            // Initialize Pos. Pay Enties
            PositivePayEntry.INIT;
            PositivePayEntry.VALIDATE("Bank Account No.",BankAccNo);
            PositivePayEntry."Last Upload Date" := DT2DATE(LastUpdateDateTime);
            PositivePayEntry."Last Upload Time" := DT2TIME(LastUpdateDateTime);

            // Retrieve the range of exported data and move Pos. Pay Entry Detail tables
            CreatePosPayEntryDetail(PositivePayEntry,"Entry No.",BankAccNo);

            CALCFIELDS("File Content");
            PositivePayEntry."Exported File" := "File Content";
            PositivePayEntry.INSERT;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE GetLastUploadDateTime@4(BankAccNo@1000 : Code[20]) : DateTime;
    VAR
      PositivePayEntry@1001 : Record "Positive Pay Entry";
    BEGIN
      // Retrieve the Last Updated Date and Time to set in the new record
      PositivePayEntry.SETRANGE("Bank Account No.",BankAccNo);
      if PositivePayEntry.FINDLAST then
        exit(PositivePayEntry."Upload Date-Time");
    END;

    LOCAL PROCEDURE CreatePosPayEntryDetail@1(VAR PositivePayEntry@1009 : Record "Positive Pay Entry";EntryNo@1001 : Integer;BankAccNo@1003 : Code[20]);
    VAR
      PositivePayEntryDetail@1002 : Record "Positive Pay Entry Detail";
      PositivePayDetail@1004 : Record "Positive Pay Detail";
    BEGIN
      PositivePayDetail.SETRANGE("Data Exch. Entry No.",EntryNo);
      if PositivePayDetail.FINDSET then begin
        repeat
          PositivePayEntryDetail.INIT;
          PositivePayEntryDetail."Upload Date-Time" := PositivePayEntry."Upload Date-Time";
          PositivePayEntryDetail.CopyFromPosPayEntryDetail(PositivePayDetail,BankAccNo);
          if PositivePayEntryDetail."Document Type" = PositivePayEntryDetail."Document Type"::CHECK then begin
            PositivePayEntry."Number of Checks" += 1;
            PositivePayEntry."Check Amount" += PositivePayEntryDetail.Amount;
          end else begin
            PositivePayEntry."Number of Voids" += 1;
            PositivePayEntry."Void Amount" += PositivePayEntryDetail.Amount;
          end;
          PositivePayEntry."Number of Uploads" += 1;
          PositivePayEntryDetail.INSERT;

        until PositivePayDetail.NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

