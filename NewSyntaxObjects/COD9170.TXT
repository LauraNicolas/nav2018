OBJECT Codeunit 9170 Conf./Personalization Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            InitializeProfiles;
          END;

  }
  CODE
  {
    VAR
      DeleteConfigurationChangesQst@1000 : TextConst 'ENU=This will delete all configuration changes made for this profile.  Do you want to continue?';
      DeletePersonalizationChangesQst@1001 : TextConst 'ENU=This will delete all personalization changes made by this user.  Do you want to continue?';
      NoDeleteProfileErr@1044 : TextConst 'ENU=You cannot delete a profile with default Role Center.';
      AccountingManagerProfileTxt@1043 : TextConst 'ENU=Accounting Manager';
      AccountingManagerDescriptionTxt@1042 : TextConst 'ENU=Accounting Manager';
      APCoordinatorProfileTxt@1041 : TextConst 'ENU=AP Coordinator';
      APCoordinatorDescriptionTxt@1040 : TextConst 'ENU=Accounts Payable Coordinator';
      ARAdministratorProfileTxt@1039 : TextConst 'ENU=AR Administrator';
      ARAdministratorDescriptionTxt@1038 : TextConst 'ENU=Accounts Receivable Administrator';
      BookkeeperProfileTxt@1037 : TextConst 'ENU=Bookkeeper';
      BookkeeperDescriptionTxt@1036 : TextConst 'ENU=Bookkeeper';
      SalesManagerProfileTxt@1035 : TextConst 'ENU=Sales Manager';
      SalesManagerDescriptionTxt@1034 : TextConst 'ENU=Sales Manager';
      OrderProcessorProfileTxt@1033 : TextConst 'ENU=Order Processor';
      SalesOrderProcessorDescriptionTxt@1032 : TextConst 'ENU="Sales Order Processor "';
      PurchasingAgentProfileTxt@1031 : TextConst 'ENU=Purchasing Agent';
      PurchasingAgentDescriptionTxt@1030 : TextConst 'ENU=Purchasing Agent';
      ShippingandReceivingWMSProfileTxt@1029 : TextConst 'ENU=Shipping and Receiving - WMS';
      ShippingandReceivingWMSDescriptionTxt@1028 : TextConst 'ENU=Shipping and Receiving - Warehouse Management System';
      ShippingandReceivingProfileTxt@1027 : TextConst 'ENU=Shipping and Receiving';
      ShippingandReceivingDescriptionTxt@1026 : TextConst 'ENU=Shipping and Receiving - Order-by-Order';
      WarehouseWorkerWMSProfileTxt@1025 : TextConst 'ENU=Warehouse Worker - WMS';
      WarehouseWorkerWMSDescriptionTxt@1024 : TextConst 'ENU=Warehouse Worker - Warehouse Management System';
      ProductionPlannerProfileTxt@1023 : TextConst 'ENU=Production Planner';
      ProductionPlannerDescriptionTxt@1022 : TextConst 'ENU=Production Planner';
      ShopSupervisorProfileTxt@1021 : TextConst 'ENU=Shop Supervisor';
      ShopSupervisorDescriptionTxt@1020 : TextConst 'ENU=Shop Supervisor - Manufacturing Comprehensive';
      ShopSupervisorFoundationProfileTxt@1019 : TextConst 'ENU=Shop Supervisor - Foundation';
      ShopSupervisorFoundationDescriptionTxt@1018 : TextConst 'ENU=Shop Supervisor - Manufacturing Foundation';
      MachineOperatorProfileTxt@1017 : TextConst 'ENU=Machine Operator';
      MachineOperatorDescriptionTxt@1016 : TextConst 'ENU=Machine Operator - Manufacturing Comprehensive';
      ResourceManagerProfileTxt@1015 : TextConst 'ENU=Resource Manager';
      ResourceManagerDescriptionTxt@1014 : TextConst 'ENU=Resource Manager';
      ProjectManagerProfileTxt@1013 : TextConst 'ENU=Project Manager';
      ProjectManagerDescriptionTxt@1012 : TextConst 'ENU=Project Manager';
      DispatcherProfileTxt@1011 : TextConst 'ENU=Dispatcher';
      DispatcherDescriptionTxt@1010 : TextConst 'ENU=Dispatcher - Customer Service';
      OutboundTechnicianProfileTxt@1009 : TextConst 'ENU=Outbound Technician';
      OutboundTechnicianDescriptionTxt@1008 : TextConst 'ENU=Outbound Technician - Customer Service';
      ITManagerProfileTxt@1007 : TextConst 'ENU=IT Manager';
      ITManagerDescriptionTxt@1006 : TextConst 'ENU=IT Manager';
      PresidentProfileTxt@1005 : TextConst 'ENU=President';
      PresidentDescriptionTxt@1004 : TextConst 'ENU="President "';
      PresidentSBProfileTxt@1003 : TextConst 'ENU=President - Small Business';
      PresidentSBDescriptionTxt@1002 : TextConst 'ENU=President - Small Business';
      RapidStartServicesProfileTxt@1045 : TextConst 'ENU=RapidStart Services';
      RapidStartServicesDescriptionTxt@1046 : TextConst 'ENU=RapidStart Services Implementer';
      AccountingServicesTxt@1105 : TextConst 'ENU=Accounting Services';
      AccountingServicesDescriptionTxt@1104 : TextConst 'ENU=Profile for users that have outsourced their Accounting';
      SecurityAdministratorTxt@1103 : TextConst 'ENU=Security Administrator';
      SecurityAdministratorDescriptionTxt@1102 : TextConst 'ENU=Administration of users, user groups and permissions';
      AccountantTxt@1106 : TextConst 'ENU=Accountant';
      AccountantDescriptionTxt@1107 : TextConst 'ENU=Accountant';
      BusinessManagerIDTxt@1085 : TextConst 'ENU=Business Manager';
      BusinessManagerDescriptionTxt@1086 : TextConst 'ENU=Business Manager';
      CannotDeleteDefaultUserProfileErr@1047 : TextConst 'ENU=You cannot delete this profile because it is set up as a default profile for one or more users or user groups.';
      XMLDOMManagement@1067 : Codeunit "XML DOM Management";
      RegEx@1056 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      CultureInfo@1054 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Convert@1053 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      InstalledLanguages@1098 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      DetectedLanguages@1055 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      InfoForCompletionMessage@1091 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      CurrentProfileID@1050 : Code[30];
      CurrentProfileDescription@1079 : Text[250];
      CurrentPageID@1049 : Integer;
      CurrentPersonalizationID@1048 : Code[40];
      ProfileResxFileNotFoundTxt@1060 : TextConst '@@@=Tells the user that translated UI strings for a profile could not be found in a specific language.;ENU=%1  for Profile %2.';
      ProfileResxFileNotFoundMsg@1077 : TextConst '@@@=Tells the user that translated UI strings for a given profile could not be found for one or more languages.;ENU=Could not find translated resources for the following language(s)\%1\This can happen if Profile ID is translated between languages.';
      AttributesNodeNameTxt@1071 : TextConst '@@@={Locked};ENU=Attributes';
      NodeNodeNameTxt@1070 : TextConst '@@@={Locked};ENU=Node';
      NodesNodeNameTxt@1069 : TextConst '@@@={Locked};ENU=Nodes';
      CaptionMLAttributeNameTxt@1068 : TextConst '@@@={Locked};ENU=CaptionML';
      idLowerAttributeNameTxt@1066 : TextConst '@@@={Locked};ENU=id';
      NameAttributeNameLowerTxt@1065 : TextConst '@@@={Locked};ENU=name';
      ValueAttributeNameTxt@1063 : TextConst '@@@={Locked};ENU=value';
      RegexAppendCaptionMLTxt@1062 : TextConst '@@@={Locked};ENU="%1=%2"';
      ReplaceCaptionMLPatternTxt@1061 : TextConst '@@@={Locked};ENU="%1=.+?(?=;[A-Z]{3}=|$)"';
      RemoveCaptionMLPatternTxt@1076 : TextConst '@@@={Locked};ENU="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)"';
      ExtractCaptionMLPatternTxt@1078 : TextConst '@@@={Locked};ENU="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)"';
      LanguagePatternTxt@1059 : TextConst '@@@={Locked};ENU="%1="';
      SelectImportFolderMsg@1058 : TextConst 'ENU=Select a folder to import translations from.';
      SelectExportFolderMsg@1072 : TextConst 'ENU=Select a folder to export translations to.';
      SelectRemoveLanguageMsg@1074 : TextConst 'ENU=Select the language to remove profile translations for.';
      SelectRemoveLanguageTxt@1075 : TextConst '@@@={Locked};ENU=%1 - %2,';
      ProfileIDTxt@1051 : TextConst '@@@={Locked};ENU=Profile ID';
      ProfileIDCommentTxt@1082 : TextConst '@@@={Locked};ENU=Profile ID field from table 2000000074';
      ProfileDescriptionTxt@1052 : TextConst '@@@={Locked};ENU=Profile Description';
      ProfileDescriptionCommentTxt@1083 : TextConst '@@@={Locked};ENU=Description field from table 2000000074';
      ExportResxFormatTxt@1080 : TextConst '@@@={Locked};ENU="%1;%2;%3"';
      ExportResxCommentFormatTxt@1081 : TextConst '@@@={Locked};ENU=Page: %1 - PersonalizationId: %2 - ControlGuid: %3';
      ZipFileEntryTxt@1057 : TextConst '@@@={Locked};ENU=%1\%2.resx';
      ZipFileFormatNameTxt@1064 : TextConst '@@@={Locked};ENU=%1.zip';
      ZipFileNameTxt@1084 : TextConst 'ENU=ProfileResources';
      Mode@1073 : 'None,Import,Export,Remove';
      SelectTranslatedResxFileTxt@1089 : TextConst 'ENU=Select a zip file with translated resources.';
      ImportCompleteMsg@1090 : TextConst '@@@=User must restart the client to see the imported translations.;ENU=Import completed. Restart the client to apply changes.';
      ExportCompleteMsg@1092 : TextConst 'ENU=Export completed.';
      ExportNoEntriesFoundMsg@1094 : TextConst 'ENU=No entries found to export.';
      RemoveCompleteMsg@1093 : TextConst 'ENU=Remove completed.';
      CompletionMessageMsg@1095 : TextConst '@@@={Locked};ENU=%1\%2';
      NoImportResourcesFoundMsg@1096 : TextConst '@@@="%1 = User selected folder. ";ENU=No resources found to import.';
      NoImportResourcesFoundForProfileMsg@1097 : TextConst '@@@="%1 = Profile ID";ENU=No resources found to import for Profile %1.';
      NoDefaultProfileErr@1087 : TextConst 'ENU=No default profile set.';
      ZipArchiveFileNameTxt@1100 : TextConst 'ENU=Profiles.zip';
      ZipArchiveFilterTxt@1099 : TextConst '@@@={Locked};ENU=Zip File (*.zip)|*.zip';
      ZipArchiveSaveDialogTxt@1088 : TextConst 'ENU=Export Profiles';
      ZipArchiveProgressMsg@1101 : TextConst '@@@=Exporting profile: ORDER PROCESSOR;ENU=Exporting profile: #1######';
      O365SalesTxt@1109 : TextConst 'ENU=O365 Sales';
      O365SalesDescriptionTxt@1108 : TextConst 'ENU=O365 Sales Activities';
      TeamMemberTxt@1110 : TextConst 'ENU=Team Member';
      TeamMemberDescriptionTxt@1111 : TextConst 'ENU=Team Member';
      AccountantPortalTxt@1113 : TextConst 'ENU=Accountant Portal';
      AccountantPortalDescriptionTxt@1112 : TextConst 'ENU=Accountant Hub';
      TenantProfileCantBeExportedErr@1114 : TextConst 'ENU=A Tenant Scope Profile does not support Export operation.';

    [External]
    PROCEDURE InitializeProfiles@20();
    VAR
      Profile@1100 : Record Profile;
    BEGIN
      Profile.LOCKTABLE;
      if not Profile.ISEMPTY then
        exit;
      InsertProfile(AccountingManagerProfileTxt,AccountingManagerDescriptionTxt,9001);
      InsertProfile(APCoordinatorProfileTxt,APCoordinatorDescriptionTxt,9002);
      InsertProfile(ARAdministratorProfileTxt,ARAdministratorDescriptionTxt,9003);
      InsertProfile(BookkeeperProfileTxt,BookkeeperDescriptionTxt,9004);
      InsertProfile(SalesManagerProfileTxt,SalesManagerDescriptionTxt,9005);
      InsertDefaultProfile(OrderProcessorProfileTxt,SalesOrderProcessorDescriptionTxt,9006);
      InsertProfile(PurchasingAgentProfileTxt,PurchasingAgentDescriptionTxt,9007);
      InsertProfile(ShippingandReceivingWMSProfileTxt,ShippingandReceivingWMSDescriptionTxt,9000);
      InsertProfile(ShippingandReceivingProfileTxt,ShippingandReceivingDescriptionTxt,9008);
      InsertProfile(WarehouseWorkerWMSProfileTxt,WarehouseWorkerWMSDescriptionTxt,9009);
      InsertProfile(ProductionPlannerProfileTxt,ProductionPlannerDescriptionTxt,9010);
      InsertProfile(ShopSupervisorProfileTxt,ShopSupervisorDescriptionTxt,9012);
      InsertProfile(ShopSupervisorFoundationProfileTxt,ShopSupervisorFoundationDescriptionTxt,9011);
      InsertProfile(MachineOperatorProfileTxt,MachineOperatorDescriptionTxt,9013);
      InsertProfile(ResourceManagerProfileTxt,ResourceManagerDescriptionTxt,9014);
      InsertProfile(ProjectManagerProfileTxt,ProjectManagerDescriptionTxt,9015);
      InsertProfile(DispatcherProfileTxt,DispatcherDescriptionTxt,9016);
      InsertProfile(OutboundTechnicianProfileTxt,OutboundTechnicianDescriptionTxt,9017);
      InsertProfile(ITManagerProfileTxt,ITManagerDescriptionTxt,9018);
      InsertProfile(PresidentProfileTxt,PresidentDescriptionTxt,9019);
      InsertProfile(PresidentSBProfileTxt,PresidentSBDescriptionTxt,9020);
      InsertProfile(RapidStartServicesProfileTxt,RapidStartServicesDescriptionTxt,9021);
      InsertProfile(BusinessManagerIDTxt,BusinessManagerDescriptionTxt,9022);
      InsertProfile(AccountingServicesTxt,AccountingServicesDescriptionTxt,9023);
      InsertProfile(SecurityAdministratorTxt,SecurityAdministratorDescriptionTxt,9024);
      InsertProfile(AccountantTxt,AccountantDescriptionTxt,9027);
      InsertProfile(O365SalesTxt,O365SalesDescriptionTxt,9029);
      InsertProfile(TeamMemberTxt,TeamMemberDescriptionTxt,9028);
      InsertProfile(AccountantPortalTxt,AccountantPortalDescriptionTxt,1151);
      OnInitializeProfiles;
      COMMIT;
    END;

    [External]
    PROCEDURE InsertProfileExtended@51(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer;Default@1003 : Boolean);
    VAR
      Profile@1101 : Record "All Profile";
      Object@1102 : Record Object;
    BEGIN
      Object.SETRANGE(Type,Object.Type::Page);
      Object.SETRANGE(ID,RoleCenterID);
      if Object.ISEMPTY then
        exit;

      Profile.INIT;
      Profile."Profile ID" := ProfileID;
      Profile.Description := Description;
      Profile."Role Center ID" := RoleCenterID;
      Profile."Default Role Center" := Default;
      Profile.Scope := Profile.Scope::System;
      Profile.INSERT;
    END;

    [External]
    PROCEDURE InsertProfile@21(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer);
    BEGIN
      InsertProfileExtended(ProfileID,Description,RoleCenterID,false);
    END;

    [External]
    PROCEDURE InsertDefaultProfile@50(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer);
    BEGIN
      InsertProfileExtended(ProfileID,Description,RoleCenterID,true);
    END;

    [External]
    PROCEDURE DefaultRoleCenterID@22() : Integer;
    VAR
      RoleCenterID@1000 : Integer;
    BEGIN
      RoleCenterID := 9022; // BUSINESS MANAGER
      OnDefaultRoleCenterID(RoleCenterID);
      exit(RoleCenterID);
    END;

    [External]
    PROCEDURE GetProfileHavingDefaultRoleCenter@41(VAR DefaultProfile@1001 : Record "All Profile");
    BEGIN
      DefaultProfile.SETRANGE("Role Center ID",DefaultRoleCenterID);
      if DefaultProfile.FINDFIRST then;
    END;

    [External]
    PROCEDURE GetDefaultProfile@61(VAR DefaultProfile@1001 : Record "All Profile");
    BEGIN
      DefaultProfile.SETRANGE("Default Role Center",true);
      if DefaultProfile.FINDFIRST then;
    END;

    [External]
    PROCEDURE GetCurrentProfileID@31() : Code[30];
    VAR
      CurrentProfileID@1000 : Code[30];
    BEGIN
      CurrentProfileID := GetCurrentProfileIDNoError;
      if CurrentProfileID = '' then
        ERROR(NoDefaultProfileErr);

      exit(CurrentProfileID);
    END;

    [External]
    PROCEDURE GetCurrentProfileIDNoError@39() : Code[30];
    VAR
      UserPersonalization@1000 : Record "User Personalization";
      Profile@1002 : Record "All Profile";
    BEGIN
      if UserPersonalization.GET(USERSECURITYID) then
        if UserPersonalization."Profile ID" <> '' then
          exit(UserPersonalization."Profile ID");

      Profile.SETRANGE("Default Role Center",true);
      if Profile.FINDFIRST then
        exit(Profile."Profile ID");

      exit('');
    END;

    [External]
    PROCEDURE SetCurrentProfileID@40(ProfileID@1001 : Code[30]);
    VAR
      UserPersonalization@1003 : Record "User Personalization";
    BEGIN
      if UserPersonalization.GET(USERSECURITYID) then begin
        UserPersonalization."Profile ID" := ProfileID;
        UserPersonalization.MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE CopyProfile@45(Profile@1035 : Record "All Profile";NewProfileID@1036 : Code[30];NewProfileScope@1000 : 'System,Tenant');
    VAR
      NewProfile@1037 : Record "All Profile";
      ProfileMetadata@1040 : Record "Profile Metadata";
      NewProfileMetadata@1038 : Record "Profile Metadata";
    BEGIN
      NewProfile.INIT;
      NewProfile.VALIDATE("Profile ID",NewProfileID);
      NewProfile.TESTFIELD("Profile ID");
      NewProfile.VALIDATE(Description,Profile.Description);
      NewProfile.VALIDATE("Role Center ID",Profile."Role Center ID");
      NewProfile.VALIDATE(Scope,NewProfileScope);
      NewProfile.INSERT;

      if (Profile.Scope = Profile.Scope::System) and (NewProfileScope = Profile.Scope::System) then begin
        ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
        if ProfileMetadata.FINDSET then
          repeat
            ProfileMetadata.CALCFIELDS("Page Metadata Delta");

            NewProfileMetadata.INIT;
            NewProfileMetadata.COPY(ProfileMetadata);
            NewProfileMetadata."Profile ID" := NewProfileID;
            NewProfileMetadata.INSERT;
          until ProfileMetadata.NEXT = 0;
      end;

      CopyProfilePageMetadata(Profile,NewProfile);
    END;

    [External]
    PROCEDURE ClearProfileConfiguration@1(Profile@1000 : Record "All Profile");
    VAR
      ProfileMetadata@1001 : Record "Profile Metadata";
    BEGIN
      if not CONFIRM(DeleteConfigurationChangesQst) then
        exit;
      if Profile.Scope = Profile.Scope::System then begin
        ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
        ProfileMetadata.DELETEALL(true);
      end
    END;

    [External]
    PROCEDURE ClearUserPersonalization@2(User@1000 : Record "User Personalization");
    VAR
      UserMetadata@1001 : Record "User Metadata";
      UserPageMetadata@1002 : Record "User Page Metadata";
    BEGIN
      if not CONFIRM(DeletePersonalizationChangesQst) then
        exit;

      UserMetadata.SETRANGE("User SID",User."User SID");
      UserMetadata.DELETEALL(true);

      UserPageMetadata.SETRANGE("User SID",User."User SID");
      UserPageMetadata.DELETEALL(true);
    END;

    [Internal]
    PROCEDURE ExportProfilesInZipFile@37(VAR Profile@1000 : Record "All Profile");
    VAR
      FileMgt@1003 : Codeunit "File Management";
      Window@1004 : Dialog;
      FileName@1002 : Text;
      ZipArchive@1001 : Text;
    BEGIN
      if Profile.FINDSET then begin
        ZipArchive := FileMgt.CreateZipArchiveObject;
        Window.OPEN(ZipArchiveProgressMsg);

        repeat
          Window.UPDATE(1,Profile."Profile ID");
          FileName := FileMgt.ServerTempFileName('xml');

          ExportProfiles(FileName,Profile);

          FileMgt.AddFileToZipArchive(FileName,Profile."Profile ID" + '.xml');
          FileMgt.DeleteServerFile(FileName);
        until Profile.NEXT = 0;

        Window.CLOSE;
        FileMgt.CloseZipArchive;

        FileMgt.DownloadHandler(ZipArchive,ZipArchiveSaveDialogTxt,'',ZipArchiveFilterTxt,ZipArchiveFileNameTxt);
        FileMgt.DeleteServerFile(ZipArchive);
      end;
    END;

    [Internal]
    PROCEDURE ExportProfiles@3(FileName@1000 : Text;Profile@1001 : Record "All Profile");
    VAR
      SystemProfile@1004 : Record Profile;
      FileOutStream@1002 : OutStream;
      ProfileFile@1003 : File;
    BEGIN
      if Profile.Scope = Profile.Scope::Tenant then
        ERROR(TenantProfileCantBeExportedErr);

      ProfileFile.CREATE(FileName);
      ProfileFile.CREATEOUTSTREAM(FileOutStream);
      SystemProfile.GET(Profile."Profile ID");
      SystemProfile.SETRECFILTER;
      XMLPORT.EXPORT(XMLPORT::"Profile Import/Export",FileOutStream,SystemProfile);
      ProfileFile.CLOSE;
    END;

    [Internal]
    PROCEDURE ImportProfiles@4(FileName@1000 : Text);
    VAR
      FileInStream@1001 : InStream;
      ProfileFile@1002 : File;
    BEGIN
      ProfileFile.OPEN(FileName);
      ProfileFile.CREATEINSTREAM(FileInStream);
      XMLPORT.IMPORT(XMLPORT::"Profile Import/Export",FileInStream);
      ProfileFile.CLOSE;
    END;

    [External]
    PROCEDURE ChangeDefaultRoleCenter@24(Profile@1000 : Record "All Profile");
    VAR
      SystemProfile@1002 : Record Profile;
      TenantProfile@1003 : Record "Tenant Profile";
    BEGIN
      if Profile.Scope = Profile.Scope::System then begin
        SystemProfile.SETRANGE("Default Role Center",true);
        if SystemProfile.FINDSET then
          repeat
            if not (SystemProfile."Profile ID" = Profile."Profile ID") then begin
              SystemProfile."Default Role Center" := false;
              SystemProfile.MODIFY;
            end;
          until SystemProfile.NEXT = 0;
      end;

      TenantProfile.SETRANGE("Default Role Center",true);
      if TenantProfile.FINDSET then
        repeat
          if not ((TenantProfile."App ID" = Profile."App ID") and
                  (TenantProfile."Profile ID" = Profile."Profile ID") and
                  (Profile.Scope = Profile.Scope::Tenant))
          then begin
            TenantProfile."Default Role Center" := false;
            TenantProfile.MODIFY;
          end;
        until TenantProfile.NEXT = 0;
    END;

    [External]
    PROCEDURE ValidateDeleteProfile@25(Profile@1112 : Record "All Profile");
    VAR
      UserPersonalization@1000 : Record "User Personalization";
      UserGroup@1001 : Record "User Group";
    BEGIN
      if Profile."Default Role Center" then
        ERROR(NoDeleteProfileErr);

      UserPersonalization.SETRANGE("Profile ID",Profile."Profile ID");
      UserPersonalization.SETRANGE("App ID",Profile."App ID");
      UserPersonalization.SETRANGE(Scope,Profile.Scope);

      if not UserPersonalization.ISEMPTY then
        ERROR(CannotDeleteDefaultUserProfileErr);

      UserGroup.SETRANGE("Default Profile ID",Profile."Profile ID");
      UserGroup.SETRANGE("Default Profile App ID",Profile."App ID");
      UserGroup.SETRANGE("Default Profile Scope",Profile.Scope);

      if not UserGroup.ISEMPTY then
        ERROR(CannotDeleteDefaultUserProfileErr);
    END;

    [Internal]
    PROCEDURE ImportTranslatedResources@7(VAR Profile@1002 : Record "All Profile";ResourcesZipFileOrFolder@1000 : Text;ShowCompletionMessage@1003 : Boolean);
    VAR
      BaseProfile@1005 : Record Profile;
      FileManagement@1004 : Codeunit "File Management";
      ServerFolder@1001 : Text;
    BEGIN
      if Profile.FINDSET then begin
        InitializeDotnetVariables;
        ServerFolder := CopyResourcesToServer(ResourcesZipFileOrFolder);
        repeat
          if ReadResourceFiles(Profile."Profile ID",ServerFolder) then begin
            Mode := Mode::Import;
            if BaseProfile.GET(Profile."Profile ID") then
              ProcessConfigurationMetadata(BaseProfile);
          end;
        until Profile.NEXT = 0;

        FileManagement.ServerRemoveDirectory(ServerFolder,true);

        if ShowCompletionMessage then
          GetCompletionMessage(true);
      end;
    END;

    [Internal]
    PROCEDURE ImportTranslatedResourcesWithFolderSelection@12(VAR Profile@1000 : Record "All Profile");
    VAR
      FileManagement@1002 : Codeunit "File Management";
      ResourceFolder@1001 : Text;
    BEGIN
      if FileManagement.CanRunDotNetOnClient then
        ResourceFolder := SelectResourceImportFolder;
      if (ResourceFolder <> '') or FileManagement.IsWebClient then
        ImportTranslatedResources(Profile,ResourceFolder,true);
    END;

    [Internal]
    PROCEDURE ExportTranslatedResources@13(VAR Profile@1002 : Record "All Profile";ResourceFolder@1003 : Text);
    VAR
      SystemProfile@1004 : Record Profile;
      FileManagement@1000 : Codeunit "File Management";
      FolderExists@1001 : Boolean;
    BEGIN
      if Profile.FINDSET then begin
        InitializeDotnetVariables;
        if FileManagement.CanRunDotNetOnClient then
          FolderExists := FileManagement.ClientDirectoryExists(ResourceFolder);
        if FileManagement.IsWebClient or FolderExists then begin
          Mode := Mode::Export;
          repeat
            SystemProfile.RESET;
            SystemProfile.GET(Profile."Profile ID");
            ClearResourcesForProfile(SystemProfile."Profile ID");
            ProcessConfigurationMetadata(SystemProfile);
            ExportResourceFiles(ResourceFolder,SystemProfile."Profile ID")
          until Profile.NEXT = 0
        end;
      end;
    END;

    [Internal]
    PROCEDURE ExportTranslatedResourcesWithFolderSelection@9(VAR Profile@1000 : Record "All Profile");
    VAR
      FileManagement@1002 : Codeunit "File Management";
      ResourceFolder@1001 : Text;
    BEGIN
      if FileManagement.CanRunDotNetOnClient then
        ResourceFolder := SelectResourceExportFolder;
      if (ResourceFolder <> '') or FileManagement.IsWebClient then begin
        ExportTranslatedResources(Profile,ResourceFolder);
        GetCompletionMessage(true);
      end;
    END;

    [Internal]
    PROCEDURE RemoveTranslatedResources@15(VAR Profile@1002 : Record "All Profile";Language@1001 : Text[3]);
    VAR
      BaseProfile@1000 : Record Profile;
    BEGIN
      if Profile.FINDSET then
        if Language <> '' then begin
          InitializeDotnetVariables;
          AppendDetectedLanguage(Language);
          Mode := Mode::Remove;

          repeat
            if BaseProfile.GET(Profile."Profile ID") then
              ProcessConfigurationMetadata(BaseProfile);
          until Profile.NEXT = 0
        end;
    END;

    [Internal]
    PROCEDURE RemoveTranslatedResourcesWithLanguageSelection@23(VAR Profile@1000 : Record "All Profile");
    VAR
      LanguageToRemove@1001 : Text[3];
    BEGIN
      LanguageToRemove := SelectLanguageToRemove;
      if LanguageToRemove <> '' then begin
        RemoveTranslatedResources(Profile,LanguageToRemove);
        GetCompletionMessage(true);
      end;
    END;

    LOCAL PROCEDURE ProcessConfigurationMetadata@19(Profile@1000 : Record Profile);
    VAR
      ProfileMetadata@1002 : Record "Profile Metadata";
      ProfileConfigurationDOM@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
      if ProfileMetadata.FINDSET(true) then begin
        repeat
          LoadProfileMetadata(ProfileMetadata,ProfileConfigurationDOM);
          CurrentProfileID := ProfileMetadata."Profile ID";
          CurrentProfileDescription := Profile.Description;
          CurrentPageID := ProfileMetadata."Page ID";
          CurrentPersonalizationID := ProfileMetadata."Personalization ID";
          ParseConfiguration(ProfileConfigurationDOM);
          UpdateProfileConfigurationRecord(ProfileMetadata,ProfileConfigurationDOM);
        until ProfileMetadata.NEXT = 0
      end;
    END;

    [External]
    PROCEDURE SelectResourceImportFolder@34() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit "File Management";
    BEGIN
      if FileManagement.CanRunDotNetOnClient then
        FileManagement.SelectFolderDialog(SelectImportFolderMsg,Folder);
    END;

    [External]
    PROCEDURE SelectResourceExportFolder@26() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit "File Management";
    BEGIN
      if FileManagement.CanRunDotNetOnClient then
        FileManagement.SelectFolderDialog(SelectExportFolderMsg,Folder);
    END;

    [Internal]
    PROCEDURE SelectLanguageToRemove@29() : Text[3];
    VAR
      WindowsLanguage@1000 : Record "Windows Language";
      Options@1002 : Text;
      Selected@1001 : Integer;
    BEGIN
      FilterToInstalledLanguages(WindowsLanguage);
      if WindowsLanguage.FINDSET then begin
        repeat
          Options += STRSUBSTNO(SelectRemoveLanguageTxt,WindowsLanguage."Abbreviated Name",WindowsLanguage.Name);
        until WindowsLanguage.NEXT = 0;

        Selected := STRMENU(Options,0,SelectRemoveLanguageMsg);
        if Selected > 0 then
          exit(COPYSTR(SELECTSTR(Selected,Options),1,3));
      end;

      exit('');
    END;

    [Internal]
    PROCEDURE FilterToInstalledLanguages@32(VAR WindowsLanguage@1000 : Record "Windows Language");
    BEGIN
      // Filter is the same used by the Select Language dialog in the Windows client
      WindowsLanguage.SETRANGE("Globally Enabled",true);
      WindowsLanguage.SETRANGE("Localization Exist",true);
      WindowsLanguage.SETFILTER("Language ID",'<> %1',1034);
      WindowsLanguage.FINDSET;
    END;

    LOCAL PROCEDURE IsLanguageInstalled@35(LanguageName@1000 : Text) : Boolean;
    VAR
      WindowsLanguage@1001 : Record "Windows Language";
    BEGIN
      if InstalledLanguages.Count = 0 then begin
        FilterToInstalledLanguages(WindowsLanguage);
        if WindowsLanguage.FINDSET then begin
          repeat
            InstalledLanguages.Add(CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name);
          until WindowsLanguage.NEXT = 0
        end;
      end;

      exit(InstalledLanguages.Contains(LanguageName));
    END;

    LOCAL PROCEDURE ReadResourceFiles@43(ProfileID@1001 : Code[30];ServerFolder@1016 : Text) : Boolean;
    VAR
      ProfileResourceImportExport@1015 : Record "Profile Resource Import/Export";
      WindowsLanguage@1020 : Record "Windows Language";
      FileManagement@1009 : Codeunit "File Management";
      ResxReader@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceReader";
      Enumerator@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IDictionaryEnumerator";
      KeySplits@1012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Directory@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      DirectoryInfo@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      Directories@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Dir@1006 : Text;
      DirName@1002 : Text;
      FileName@1010 : Text;
      Language@1008 : Text[3];
      BaseProfileID@1017 : Code[30];
      i@1007 : Integer;
      ResourceCount@1013 : Integer;
    BEGIN
      ClearResourcesForProfile(ProfileID);

      if (ServerFolder = '') or (not FileManagement.ServerDirectoryExists(ServerFolder)) then
        exit(false);

      Directories := Directory.GetDirectories(ServerFolder);
      for i := 0 to Directories.Length - 1 do begin
        Dir := Directories.GetValue(i);
        DirName := DirectoryInfo.DirectoryInfo(Dir).Name;
        if IsLanguageInstalled(DirName) then begin
          Language := CultureInfo.GetCultureInfo(DirName).ThreeLetterWindowsLanguageName;
          AppendDetectedLanguage(Language);
          FilterToInstalledLanguages(WindowsLanguage);
          BaseProfileID := TranslateProfileID(ProfileID,WindowsLanguage,1033);
          FileName := FileManagement.CombinePath(Dir,BaseProfileID + '.Resx');
          if FileManagement.ServerFileExists(FileName) then begin
            ResxReader := ResxReader.ResXResourceReader(FileName);
            Enumerator := ResxReader.GetEnumerator;
            while Enumerator.MoveNext do begin
              KeySplits := RegEx.Split(Convert.ToString(Enumerator.Key),';');
              if KeySplits.Length = 3 then
                ProfileResourceImportExport.InsertRec(
                  ProfileID,Convert.ToInt32(KeySplits.GetValue(0)),Convert.ToString(KeySplits.GetValue(1)),
                  Convert.ToString(KeySplits.GetValue(2)),Language,Convert.ToString(Enumerator.Value));
            end;
          end else
            InfoForCompletionMessage.Add(STRSUBSTNO(ProfileResxFileNotFoundTxt,Language,ProfileID));
        end;
      end;

      ResourceCount := CountResourcesForProfile(ProfileID);
      if ResourceCount = 0 then
        InfoForCompletionMessage.Add(STRSUBSTNO(NoImportResourcesFoundForProfileMsg,ProfileID));

      exit(ResourceCount > 0);
    END;

    LOCAL PROCEDURE SetTranslationParameters@38(VAR WindowsLanguage@1002 : Record "Windows Language";ProfileIDTxt@1001 : Text;TempLanguage@1003 : Integer;TranslateToLanguageID@1000 : Integer) TranslatedProfileID : Code[30];
    BEGIN
      CheckSetLanguage(TranslateToLanguageID);
      TranslatedProfileID := COPYSTR(ProfileIDTxt,1,MAXSTRLEN(TranslatedProfileID));
      WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
    END;

    [Internal]
    PROCEDURE TranslateProfileID@10(ProfileID@1001 : Code[30];VAR WindowsLanguage@1002 : Record "Windows Language";TranslateToLanguageID@1003 : Integer) TranslatedProfileID : Code[30];
    VAR
      CurrentLanguage@1000 : Integer;
      TempLanguage@1004 : Integer;
      ProfileIDTxt@1005 : Text;
    BEGIN
      CurrentLanguage := GLOBALLANGUAGE;

      repeat
        TempLanguage := WindowsLanguage."Language ID";
        if GLOBALLANGUAGE <> TempLanguage then
          GLOBALLANGUAGE := TempLanguage;
        case ProfileID of
          UPPERCASE(AccountingManagerProfileTxt):
            ProfileIDTxt := AccountingManagerProfileTxt;
          UPPERCASE(APCoordinatorProfileTxt):
            ProfileIDTxt := APCoordinatorProfileTxt;
          UPPERCASE(ARAdministratorProfileTxt):
            ProfileIDTxt := ARAdministratorProfileTxt;
          UPPERCASE(BookkeeperProfileTxt):
            ProfileIDTxt := BookkeeperProfileTxt;
          UPPERCASE(SalesManagerProfileTxt):
            ProfileIDTxt := SalesManagerProfileTxt;
          UPPERCASE(OrderProcessorProfileTxt):
            ProfileIDTxt := OrderProcessorProfileTxt;
          UPPERCASE(PurchasingAgentProfileTxt):
            ProfileIDTxt := PurchasingAgentProfileTxt;
          UPPERCASE(ShippingandReceivingWMSProfileTxt):
            ProfileIDTxt := ShippingandReceivingWMSProfileTxt;
          UPPERCASE(ShippingandReceivingProfileTxt):
            ProfileIDTxt := ShippingandReceivingProfileTxt;
          UPPERCASE(WarehouseWorkerWMSProfileTxt):
            ProfileIDTxt := WarehouseWorkerWMSProfileTxt;
          UPPERCASE(ProductionPlannerProfileTxt):
            ProfileIDTxt := ProductionPlannerProfileTxt;
          UPPERCASE(ShopSupervisorProfileTxt):
            ProfileIDTxt := ShopSupervisorProfileTxt;
          UPPERCASE(ShopSupervisorFoundationProfileTxt):
            ProfileIDTxt := ShopSupervisorFoundationProfileTxt;
          UPPERCASE(MachineOperatorProfileTxt):
            ProfileIDTxt := MachineOperatorProfileTxt;
          UPPERCASE(ResourceManagerProfileTxt):
            ProfileIDTxt := ResourceManagerProfileTxt;
          UPPERCASE(ProjectManagerProfileTxt):
            ProfileIDTxt := ProjectManagerProfileTxt;
          UPPERCASE(DispatcherProfileTxt):
            ProfileIDTxt := DispatcherProfileTxt;
          UPPERCASE(OutboundTechnicianProfileTxt):
            ProfileIDTxt := OutboundTechnicianProfileTxt;
          UPPERCASE(ITManagerProfileTxt):
            ProfileIDTxt := ITManagerProfileTxt;
          UPPERCASE(PresidentProfileTxt):
            ProfileIDTxt := PresidentProfileTxt;
          UPPERCASE(PresidentSBProfileTxt):
            ProfileIDTxt := PresidentSBProfileTxt;
          UPPERCASE(RapidStartServicesProfileTxt):
            ProfileIDTxt := RapidStartServicesProfileTxt;
          UPPERCASE(BusinessManagerIDTxt):
            ProfileIDTxt := BusinessManagerIDTxt;
          UPPERCASE(AccountingServicesTxt):
            ProfileIDTxt := AccountingServicesTxt;
          UPPERCASE(SecurityAdministratorTxt):
            ProfileIDTxt := SecurityAdministratorTxt;
          UPPERCASE(TeamMemberTxt):
            ProfileIDTxt := TeamMemberTxt;
        end;
        TranslatedProfileID := SetTranslationParameters(
            WindowsLanguage,ProfileIDTxt,TempLanguage,TranslateToLanguageID);
      until (WindowsLanguage.NEXT = 0) or (TranslatedProfileID <> '');

      if GLOBALLANGUAGE <> CurrentLanguage then
        GLOBALLANGUAGE := CurrentLanguage;
      if TranslatedProfileID = '' then
        TranslatedProfileID := ProfileID;
    END;

    LOCAL PROCEDURE CheckSetLanguage@47(LanguageID@1000 : Integer);
    BEGIN
      if GLOBALLANGUAGE <> LanguageID then
        GLOBALLANGUAGE := LanguageID;
    END;

    LOCAL PROCEDURE CopyResourcesToServer@36(ResourcesZipFileOrFolder@1001 : Text) ServerFolder : Text;
    VAR
      FileManagement@1000 : Codeunit "File Management";
      ServerFile@1002 : Text;
    BEGIN
      if FileManagement.IsWebClient then
        ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');

      if FileManagement.CanRunDotNetOnClient then begin
        if FileManagement.ClientDirectoryExists(ResourcesZipFileOrFolder) then begin
          ServerFolder := FileManagement.UploadClientDirectorySilent(ResourcesZipFileOrFolder,'*.resx',true);
          if ServerFolder = '' then
            InfoForCompletionMessage.Add(NoImportResourcesFoundMsg);
          exit;
        end;
        if ResourcesZipFileOrFolder = '' then
          ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');
        if FileManagement.GetExtension(ResourcesZipFileOrFolder) = 'zip' then
          ServerFile := FileManagement.UploadFileSilent(ResourcesZipFileOrFolder);
      end;

      if ServerFile <> '' then begin
        ServerFolder := FileManagement.ServerCreateTempSubDirectory;
        FileManagement.ExtractZipFile(ServerFile,ServerFolder);
        FileManagement.DeleteServerFile(ServerFile);
      end;
    END;

    LOCAL PROCEDURE ExportResourceFiles@18(ResourceFolder@1016 : Text;ProfileID@1001 : Code[30]);
    VAR
      ProfileResourceImportExport@1015 : Record "Profile Resource Import/Export";
      WindowsLanguage@1018 : Record "Windows Language";
      FileManagement@1002 : Codeunit "File Management";
      CurrentDir@1006 : Text;
      ZipArchiveName@1010 : Text;
      ZipFileEntry@1005 : Text;
      ServerFileName@1004 : Text;
      i@1007 : Integer;
      CurrentLanguage@1014 : Text;
      CultureName@1003 : Text;
      CanRunDotNetOnClient@1008 : Boolean;
    BEGIN
      CanRunDotNetOnClient := FileManagement.CanRunDotNetOnClient;

      if not CanRunDotNetOnClient then
        ZipArchiveName := FileManagement.CreateZipArchiveObject;

      for i := 0 to DetectedLanguages.Count - 1 do begin
        CurrentLanguage := DetectedLanguages.Item(i);
        ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
        ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",CurrentLanguage);

        if ProfileResourceImportExport.FINDFIRST then begin
          WindowsLanguage.SETRANGE("Abbreviated Name",CurrentLanguage);
          WindowsLanguage.FINDFIRST;
          CultureName := CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name;
          CurrentDir := FileManagement.CombinePath(ResourceFolder,CultureName);

          ServerFileName := FileManagement.ServerTempFileName('.Resx');
          AppendToResxFile(ProfileResourceImportExport,ProfileID,ServerFileName);

          if not CanRunDotNetOnClient then begin
            ZipFileEntry := STRSUBSTNO(ZipFileEntryTxt,CultureName,ProfileID);
            FileManagement.AddFileToZipArchive(ServerFileName,ZipFileEntry);
          end else begin
            FileManagement.CreateClientDirectory(CurrentDir);
            FileManagement.DownloadToFile(ServerFileName,FileManagement.CombinePath(CurrentDir,ProfileID + '.Resx'));
          end;
          FileManagement.DeleteServerFile(ServerFileName);
        end else
          InfoForCompletionMessage.Add(ExportNoEntriesFoundMsg);
      end;

      if not CanRunDotNetOnClient then begin
        FileManagement.CloseZipArchive;
        FileManagement.DownloadHandler(ZipArchiveName,'','','',STRSUBSTNO(ZipFileFormatNameTxt,ZipFileNameTxt));
      end;
    END;

    LOCAL PROCEDURE AppendToResxFile@5(VAR ProfileResourceImportExport@1002 : Record "Profile Resource Import/Export";ProfileID@1004 : Code[30];ServerFileName@1003 : Text);
    VAR
      ResxWriter@1001 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceWriter";
      ResxDataNode@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXDataNode";
      Key@1006 : Text;
      Comment@1005 : Text;
    BEGIN
      ResxWriter := ResxWriter.ResXResourceWriter(ServerFileName);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileIDTxt,ProfileID);
      ResxDataNode.Comment := ProfileIDCommentTxt;
      ResxWriter.AddResource(ResxDataNode);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileDescriptionTxt,CurrentProfileDescription);
      ResxDataNode.Comment := ProfileDescriptionCommentTxt;
      ResxWriter.AddResource(ResxDataNode);

      repeat
        Key := STRSUBSTNO(ExportResxFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        Comment := STRSUBSTNO(ExportResxCommentFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        ResxDataNode := ResxDataNode.ResXDataNode(Key,ProfileResourceImportExport.Value);
        ResxDataNode.Comment := Comment;
        ResxWriter.AddResource(ResxDataNode);
      until ProfileResourceImportExport.NEXT = 0;

      ResxWriter.Close;
    END;

    LOCAL PROCEDURE LoadProfileMetadata@101(ProfileMetadata@1000 : Record "Profile Metadata";VAR ObjectDOM@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      InStr@1004 : InStream;
    BEGIN
      ProfileMetadata.CALCFIELDS("Page Metadata Delta");
      ProfileMetadata."Page Metadata Delta".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,ObjectDOM);
    END;

    LOCAL PROCEDURE ParseConfiguration@113(VAR ProfileConfigurationDOM@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ChangeNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChangeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DeltaNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ChangeType@1001 : Text;
      i@1002 : Integer;
    BEGIN
      DeltaNode := ProfileConfigurationDOM.DocumentElement;
      ChangeNodeList := DeltaNode.FirstChild.ChildNodes;

      for i := 0 to ChangeNodeList.Count - 1 do begin
        ChangeNode := ChangeNodeList.ItemOf(i);
        ChangeType := ChangeNode.Name;
        case LOWERCASE(ChangeType) of
          'add':
            ParseAdd(ProfileConfigurationDOM,ChangeNode);
          'update':
            ParseUpdate(ChangeNode);
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateProfileConfigurationRecord@28(VAR ProfileMetadata@1000 : Record "Profile Metadata";ProfileConfigurationDOM@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OutStr@1004 : OutStream;
    BEGIN
      if not (Mode in [Mode::Import,Mode::Remove]) then
        exit;
      ProfileMetadata."Page Metadata Delta".CREATEOUTSTREAM(OutStr);
      ProfileConfigurationDOM.Save(OutStr);
      ProfileMetadata.MODIFY;
    END;

    LOCAL PROCEDURE ParseAdd@65(XmlDocument@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement.FindNode(XmlNode,NodeNodeNameTxt,NodeNode);
      ParseAddNode(XmlDocument,NodeNode);
    END;

    LOCAL PROCEDURE ParseAddNode@6(XmlDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodesNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ControlGuid@1000 : Text;
      i@1005 : Integer;
    BEGIN
      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);
      ProcessAddNodes(XmlNode,COPYSTR(ControlGuid,1,40));

      NodesNode := XmlNode.SelectSingleNode(NodesNodeNameTxt);
      for i := 0 to NodesNode.ChildNodes.Count - 1 do begin
        NodeNode := NodesNode.ChildNodes.ItemOf(i);
        ParseAddNode(XmlDocument,NodeNode);
      end;
    END;

    LOCAL PROCEDURE ParseUpdate@128(VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      ControlGuid@1004 : Text;
      CaptionMLValue@1003 : Text;
    BEGIN
      if XMLDOMManagement.GetAttributeValue(XmlNode,NameAttributeNameLowerTxt) <> CaptionMLAttributeNameTxt then
        exit;

      if not XMLDOMManagement.FindAttribute(XmlNode,CaptionMLAttribute,ValueAttributeNameTxt) then
        exit;

      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);

      CaptionMLValue := CaptionMLAttribute.Value;
      case Mode of
        Mode::Export:
          begin
            ExtractCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
            exit;
          end;
        Mode::Import:
          CaptionMLValue := AppendCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
        Mode::Remove:
          CaptionMLValue := RemoveCaptions(CaptionMLValue);
      end;

      CaptionMLAttribute.Value(CaptionMLValue);
    END;

    LOCAL PROCEDURE ProcessAddNodes@14(NodeNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ControlGuid@1014 : Code[40]);
    VAR
      AttributesNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttributeNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Attribute@1006 : Text;
      CaptionMLValue@1013 : Text;
      i@1003 : Integer;
    BEGIN
      if XMLDOMManagement.FindNode(NodeNode,AttributesNodeNameTxt,AttributesNode) then
        for i := 0 to AttributesNode.ChildNodes.Count - 1 do begin
          AttributeNode := AttributesNode.ChildNodes.ItemOf(i);
          Attribute := XMLDOMManagement.GetAttributeValue(AttributeNode,NameAttributeNameLowerTxt);
          if Attribute = CaptionMLAttributeNameTxt then begin
            if not XMLDOMManagement.FindAttribute(AttributeNode,CaptionMLAttribute,ValueAttributeNameTxt) then
              exit;
            CaptionMLValue := CaptionMLAttribute.Value;
            if CaptionMLValue <> '' then begin
              case Mode of
                Mode::Export:
                  begin
                    ExtractCaptions(ControlGuid,CaptionMLValue);
                    exit;
                  end;
                Mode::Import:
                  CaptionMLValue := AppendCaptions(ControlGuid,CaptionMLValue);
                Mode::Remove:
                  CaptionMLValue := RemoveCaptions(CaptionMLValue);
              end;
              CaptionMLAttribute.Value(CaptionMLValue);
              exit;
            end;
          end;
        end;
    END;

    LOCAL PROCEDURE AppendCaptions@27(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text) : Text;
    VAR
      ProfileResourceImportExport@1001 : Record "Profile Resource Import/Export";
      Pattern@1006 : Text;
      Translation@1008 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
      i@1005 : Integer;
    BEGIN
      for i := 0 to DetectedLanguages.Count - 1 do begin
        Language := DetectedLanguages.Item(i);
        if FindProfileLanguageResourcesImp(ProfileResourceImportExport,ControlGuid,Language) then begin
          Translation := ProfileResourceImportExport.Value;
          Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));

          if Position > 0 then begin
            Pattern := STRSUBSTNO(ReplaceCaptionMLPatternTxt,Language);
            OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,STRSUBSTNO(RegexAppendCaptionMLTxt,Language,Translation));
          end else
            OriginalCaptionML += STRSUBSTNO(';%1=%2',Language,Translation);
        end;
      end;

      exit(OriginalCaptionML);
    END;

    LOCAL PROCEDURE RemoveCaptions@8(OriginalCaptionML@1004 : Text) : Text;
    VAR
      Pattern@1006 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
    BEGIN
      Language := DetectedLanguages.Item(0);

      Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));
      if Position > 0 then begin
        Pattern := STRSUBSTNO(RemoveCaptionMLPatternTxt,Language);
        OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,'');
      end;

      exit(OriginalCaptionML);
    END;

    LOCAL PROCEDURE ExtractCaptions@11(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text);
    VAR
      ProfileResourceImportExport@1001 : Record "Profile Resource Import/Export";
      Matches@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      AbbreviatedLanguageName@1006 : Text[3];
      Caption@1007 : Text[250];
      i@1005 : Integer;
    BEGIN
      Matches := RegEx.Matches(OriginalCaptionML,ExtractCaptionMLPatternTxt);

      for i := 0 to Matches.Count - 1 do begin
        AbbreviatedLanguageName := Matches.Item(i).Value;
        AppendDetectedLanguage(AbbreviatedLanguageName);
        i += 1;
        Caption := Matches.Item(i).Value;

        ProfileResourceImportExport.InsertRec(
          CurrentProfileID,CurrentPageID,CurrentPersonalizationID,ControlGuid,AbbreviatedLanguageName,Caption);
      end;
    END;

    LOCAL PROCEDURE FindProfileLanguageResourcesImp@16(VAR ProfileResourceImportExport@1001 : Record "Profile Resource Import/Export";ControlGuid@1002 : Code[40];language@1000 : Text) : Boolean;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",language);
      ProfileResourceImportExport.SETRANGE("Profile ID",CurrentProfileID);
      ProfileResourceImportExport.SETRANGE("Page ID",CurrentPageID);
      ProfileResourceImportExport.SETRANGE("Personalization ID",CurrentPersonalizationID);
      ProfileResourceImportExport.SETRANGE("Control GUID",ControlGuid);
      exit(ProfileResourceImportExport.FINDFIRST);
    END;

    LOCAL PROCEDURE ClearResourcesForProfile@17(ProfileID@1000 : Code[30]);
    VAR
      ProfileResourceImportExport@1001 : Record "Profile Resource Import/Export";
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      ProfileResourceImportExport.DELETEALL;
    END;

    LOCAL PROCEDURE CountResourcesForProfile@46(ProfileID@1000 : Code[30]) : Integer;
    VAR
      ProfileResourceImportExport@1001 : Record "Profile Resource Import/Export";
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      exit(ProfileResourceImportExport.COUNT);
    END;

    LOCAL PROCEDURE InitializeDotnetVariables@59();
    BEGIN
      DetectedLanguages := DetectedLanguages.StringCollection;
      InfoForCompletionMessage := InfoForCompletionMessage.StringCollection;
      InstalledLanguages := InstalledLanguages.StringCollection;
    END;

    LOCAL PROCEDURE AppendDetectedLanguage@33(AbbreviatedLanguageName@1000 : Text[3]);
    BEGIN
      if not DetectedLanguages.Contains(AbbreviatedLanguageName) then
        DetectedLanguages.Add(AbbreviatedLanguageName);
    END;

    [Internal]
    PROCEDURE GetCompletionMessage@30(ShowAsMessage@1001 : Boolean) CompleteMessage : Text;
    VAR
      AdditionalInfo@1000 : Text;
    BEGIN
      AdditionalInfo := GetAdditionalInfo;

      case Mode of
        Mode::Export:
          begin
            if AdditionalInfo <> '' then
              CompleteMessage := AdditionalInfo
            else
              CompleteMessage := ExportCompleteMsg;
          end;
        Mode::Import:
          begin
            if AdditionalInfo <> '' then begin
              AdditionalInfo := STRSUBSTNO(ProfileResxFileNotFoundMsg,AdditionalInfo);
              CompleteMessage := STRSUBSTNO(CompletionMessageMsg,ImportCompleteMsg,AdditionalInfo);
            end else
              CompleteMessage := ImportCompleteMsg;
          end;
        Mode::Remove:
          begin
            if AdditionalInfo <> '' then
              CompleteMessage := AdditionalInfo
            else
              CompleteMessage := RemoveCompleteMsg;
          end;
        else
          CompleteMessage := AdditionalInfo;
      end;

      if ShowAsMessage and (CompleteMessage <> '') then
        MESSAGE(CompleteMessage);
    END;

    LOCAL PROCEDURE GetAdditionalInfo@42() ErrorMessage : Text;
    VAR
      i@1000 : Integer;
    BEGIN
      if InfoForCompletionMessage.Count > 0 then begin
        for i := 0 to InfoForCompletionMessage.Count - 1 do
          ErrorMessage += InfoForCompletionMessage.Item(i) + '\';
        ErrorMessage := DELCHR(ErrorMessage,'>','\');
      end;
    END;

    [External]
    PROCEDURE ValidateTimeZone@44(VAR TimeZoneText@1000 : Text);
    VAR
      TimeZone@1001 : Record "Time Zone";
    BEGIN
      TimeZone.GET(FindTimeZoneNo(TimeZoneText));
      TimeZoneText := TimeZone.ID;
    END;

    [External]
    PROCEDURE LookupTimeZone@48(VAR TimeZoneText@1000 : Text) : Boolean;
    VAR
      TimeZone@1001 : Record "Time Zone";
    BEGIN
      TimeZone."No." := FindTimeZoneNo(TimeZoneText);
      if PAGE.RUNMODAL(PAGE::"Time Zones",TimeZone) = ACTION::LookupOK then begin
        TimeZoneText := TimeZone.ID;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE FindTimeZoneNo@49(TimeZoneText@1000 : Text) : Integer;
    VAR
      TimeZone@1001 : Record "Time Zone";
    BEGIN
      TimeZone.SETRANGE(ID,TimeZoneText);
      if not TimeZone.FINDFIRST then begin
        TimeZone.SETFILTER(ID,'''@*' + TimeZoneText + '*''');
        TimeZone.FIND('=<>');
      end;
      exit(TimeZone."No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnDefaultRoleCenterID@52(VAR RoleCenterID@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitializeProfiles@56();
    BEGIN
    END;

    PROCEDURE CopyProfilePageMetadata@63(OldProfile@1000 : Record "All Profile";NewProfile@1001 : Record "All Profile");
    VAR
      ProfilePageMetadata@1002 : Record "Profile Page Metadata";
      NewProfilePageMetadata@1003 : Record "Profile Page Metadata";
      TenantProfilePageMetadata@1004 : Record "Tenant Profile Page Metadata";
      NewTenantProfilePageMetadata@1005 : Record "Tenant Profile Page Metadata";
    BEGIN
      if OldProfile.Scope = OldProfile.Scope::System then begin
        ProfilePageMetadata.SETRANGE("Profile ID",OldProfile."Profile ID");
        if ProfilePageMetadata.FINDSET then
          if NewProfile.Scope = NewProfile.Scope::System then
            repeat
              ProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

              NewProfilePageMetadata.INIT;
              NewProfilePageMetadata.COPY(ProfilePageMetadata);
              NewProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
              NewProfilePageMetadata.INSERT;
            until ProfilePageMetadata.NEXT = 0
          else
            repeat
              TenantProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

              NewTenantProfilePageMetadata.INIT;
              NewTenantProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
              NewTenantProfilePageMetadata."Page ID" := ProfilePageMetadata."Page ID";
              NewTenantProfilePageMetadata."Page AL" := ProfilePageMetadata."Page AL";
              NewTenantProfilePageMetadata."Page Metadata" := ProfilePageMetadata."Page Metadata";
              NewTenantProfilePageMetadata.INSERT;
            until ProfilePageMetadata.NEXT = 0;
      end;

      if (OldProfile.Scope = OldProfile.Scope::Tenant) and
         (NewProfile.Scope = NewProfile.Scope::Tenant)
      then begin
        TenantProfilePageMetadata.SETFILTER("Profile ID",OldProfile."Profile ID");
        TenantProfilePageMetadata.SETFILTER("App ID",OldProfile."App ID");
        if TenantProfilePageMetadata.FINDSET then
          repeat
            TenantProfilePageMetadata.CALCFIELDS("Page Metadata","Page AL");

            NewTenantProfilePageMetadata.INIT;
            NewTenantProfilePageMetadata.COPY(TenantProfilePageMetadata);
            NewTenantProfilePageMetadata."Profile ID" := NewProfile."Profile ID";
            NewTenantProfilePageMetadata.INSERT;
          until TenantProfilePageMetadata.NEXT = 0;
      end;
    END;

    PROCEDURE HideSandboxProfiles@54(VAR AllProfile@1000 : Record "All Profile");
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
    BEGIN
      if PermissionManager.SoftwareAsAService and not PermissionManager.IsSandboxConfiguration then begin
        AllProfile.FILTERGROUP(2);
        AllProfile.SETFILTER("Role Center ID",'9027|9022|9006|9015|9026|9024|9028|1151|10000..');
        AllProfile.FILTERGROUP(0);
      end;
    END;

    BEGIN
    END.
  }
}

