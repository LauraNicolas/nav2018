OBJECT Report 96 Copy G/L Budget
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy G/L Budget;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   if AmountAdjustFactor = 0 then
                     AmountAdjustFactor := 1;

                   if ToDateCompression = ToDateCompression::None then
                     ToDateCompression := ToDateCompression::Day;
                 END;

    OnPreReport=VAR
                  SelectedDim@1000 : Record "Selected Dimension";
                  GLSetup@1001 : Record "General Ledger Setup";
                  GLBudgetName@1002 : Record "G/L Budget Name";
                  Continue@1003 : Boolean;
                BEGIN
                  if not NoMessage then
                    DimSelectionBuf.CompareDimText(3,REPORT::"Copy G/L Budget",'',ColumnDim,Text001);

                  if (FromSource = FromSource::"G/L Budget Entry") and (FromGLBudgetName = '') then
                    ERROR(STRSUBSTNO(Text002));

                  if (FromSource = FromSource::"G/L Entry") and (FromDate = '') then
                    ERROR(STRSUBSTNO(Text003));

                  if ToGLBudgetName = '' then
                    ERROR(STRSUBSTNO(Text004));

                  Continue := true;
                  GLBudgetName.SETRANGE(Name,ToGLBudgetName);
                  if not GLBudgetName.FINDFIRST then begin
                    if not NoMessage then
                      if not CONFIRM(
                           Text005,false,ToGLBudgetName)
                      then
                        Continue := false;
                    if Continue then begin
                      GLBudgetName.INIT;
                      GLBudgetName.Name := ToGLBudgetName;
                      GLBudgetName.INSERT;
                      COMMIT;
                    end;
                  end else begin
                    BudgetDim1Code := GLBudgetName."Budget Dimension 1 Code";
                    BudgetDim2Code := GLBudgetName."Budget Dimension 2 Code";
                    BudgetDim3Code := GLBudgetName."Budget Dimension 3 Code";
                    BudgetDim4Code := GLBudgetName."Budget Dimension 4 Code";
                  end;

                  if (not NoMessage) and Continue then
                    if not CONFIRM(
                         Text006,false)
                    then
                      Continue := false;

                  if Continue then begin
                    SelectedDim.GetSelectedDim(USERID,3,REPORT::"Copy G/L Budget",'',TempSelectedDim);
                    if TempSelectedDim.FIND('-') then
                      repeat
                        TempSelectedDim.Level := 0;
                        if TempSelectedDim."Dimension Value Filter" <> '' then
                          if FilterIncludesBlanks(TempSelectedDim."Dimension Value Filter") then
                            TempSelectedDim.Level := 1;
                        TempSelectedDim.MODIFY;
                      until TempSelectedDim.NEXT = 0;

                    ToGLBudgetEntry.LOCKTABLE;
                    if ToGLBudgetEntry.FINDLAST then
                      GLBudgetEntryNo := ToGLBudgetEntry."Entry No." + 1
                    else
                      GLBudgetEntryNo := 1;

                    GLSetup.GET;
                    GlobalDim1Code := GLSetup."Global Dimension 1 Code";
                    GlobalDim2Code := GLSetup."Global Dimension 2 Code";
                  end else
                    CurrReport.QUIT;
                END;

    OnPostReport=VAR
                   FromGLBudgetEntry@1000 : Record "G/L Budget Entry";
                   FromGLEntry@1002 : Record "G/L Entry";
                 BEGIN
                   WindowUpdateDateTime := CURRENTDATETIME;
                   Window.OPEN(Text007 + Text008 + Text009);

                   case FromSource of
                     FromSource::"G/L Entry":
                       with FromGLEntry do begin
                         SETCURRENTKEY("G/L Account No.","Posting Date");
                         if FromGLAccountNo <> '' then
                           SETFILTER("G/L Account No.",FromGLAccountNo);
                         SETFILTER("Posting Date",FromDate);
                         if FIND('-') then begin
                           repeat
                             ProcessRecord(
                               "G/L Account No.","Business Unit Code","Posting Date",Description,
                               "Dimension Set ID",Amount);
                           until NEXT = 0;
                         end;
                       end;
                     FromSource::"G/L Budget Entry":
                       with FromGLBudgetEntry do begin
                         SETCURRENTKEY("Budget Name","G/L Account No.",Description,Date);
                         SETRANGE("Budget Name",FromGLBudgetName);
                         if FromGLAccountNo <> '' then
                           SETFILTER("G/L Account No.",FromGLAccountNo);
                         if FromDate <> '' then
                           SETFILTER(Date,FromDate);
                         if FIND('-') then begin
                           repeat
                             ProcessRecord(
                               "G/L Account No.","Business Unit Code",Date,Description,
                               "Dimension Set ID",Amount);
                           until NEXT = 0;
                         end;
                       end;
                   end;
                   InsertGLBudgetEntry;
                   Window.CLOSE;

                   if not NoMessage then
                     MESSAGE(Text010);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 12  ;2   ;Group     ;
                  Name=Copy from;
                  CaptionML=ENU=Copy from }

      { 15  ;3   ;Field     ;
                  Name=Source;
                  CaptionML=ENU=Source;
                  ToolTipML=ENU=Specifies which kind of amounts that you want to copy to a new budget. You can select either general ledger entries or general ledger budget entries.;
                  OptionCaptionML=ENU=G/L Entry,G/L Budget Entry;
                  ApplicationArea=#Suite;
                  SourceExpr=FromSource;
                  OnValidate=BEGIN
                               if FromSource = FromSource::"G/L Entry" then
                                 FromGLBudgetName := '';
                             END;
                              }

      { 24  ;3   ;Field     ;
                  Name=Budget Name;
                  CaptionML=ENU=Budget Name;
                  ToolTipML=ENU=Specifies the name of the budget.;
                  ApplicationArea=#Suite;
                  SourceExpr=FromGLBudgetName;
                  TableRelation="G/L Budget Name";
                  OnValidate=BEGIN
                               if (FromGLBudgetName <> '') and (FromSource = FromSource::"G/L Entry") then
                                 FromSource := FromSource::"G/L Budget Entry";
                             END;
                              }

      { 22  ;3   ;Field     ;
                  Name=GLAccountNo;
                  CaptionML=ENU=G/L Account No.;
                  ToolTipML=ENU=Specifies the G/L account or accounts that the batch job will process.;
                  ApplicationArea=#Suite;
                  SourceExpr=FromGLAccountNo;
                  TableRelation="G/L Account" }

      { 9   ;3   ;Field     ;
                  Name=Date;
                  CaptionML=ENU=Date;
                  ToolTipML=ENU=Specifies the date.;
                  ApplicationArea=#Suite;
                  SourceExpr=FromDate;
                  OnValidate=VAR
                               GLAcc@1001 : Record "G/L Account";
                               ApplicationManagement@1002 : Codeunit ApplicationManagement;
                             BEGIN
                               if ApplicationManagement.MakeDateFilter(FromDate) = 0 then;
                               GLAcc.SETFILTER("Date Filter",FromDate);
                               FromDate := GLAcc.GETFILTER("Date Filter");
                             END;
                              }

      { 26  ;3   ;Field     ;
                  Name=Closing Entries;
                  CaptionML=ENU=Closing Entries;
                  ToolTipML=ENU=Specifies whether the balance shown will include closing entries. If you want to see the amounts on income statement accounts in closed years, you must exclude closing entries.;
                  OptionCaptionML=ENU=Include,Exclude;
                  ApplicationArea=#Suite;
                  SourceExpr=FromClosingEntryFilter }

      { 1   ;3   ;Field     ;
                  Name=Dimensions;
                  CaptionML=ENU=Dimensions;
                  ToolTipML=ENU=Specifies dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                  ApplicationArea=#Suite;
                  SourceExpr=ColumnDim;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record "Dimension Selection Buffer";
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionChange(3,REPORT::"Copy G/L Budget",ColumnDim);
                               END;
                                }

      { 11  ;2   ;Group     ;
                  Name=Copy to;
                  CaptionML=ENU=Copy to }

      { 7   ;3   ;Field     ;
                  Name=BudgetName;
                  CaptionML=ENU=Budget Name;
                  ToolTipML=ENU=Specifies the name of the budget.;
                  ApplicationArea=#Suite;
                  SourceExpr=ToGLBudgetName;
                  TableRelation="G/L Budget Name" }

      { 5   ;3   ;Field     ;
                  Name=G/L Account No.;
                  CaptionML=ENU=G/L Account No.;
                  ToolTipML=ENU=Specifies the G/L account or accounts that the batch job will process.;
                  ApplicationArea=#Suite;
                  SourceExpr=ToGLAccountNo;
                  TableRelation="G/L Account";
                  OnValidate=BEGIN
                               ToGLAccountNoOnAfterValidate;
                             END;
                              }

      { 13  ;2   ;Group     ;
                  Name=Apply;
                  CaptionML=ENU=Apply }

      { 18  ;3   ;Field     ;
                  Name=Adjustment Factor;
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the amounts that you want to copy. By entering an adjustment factor, you can increase or decrease the amounts that are copied to the new budget.;
                  ApplicationArea=#Suite;
                  DecimalPlaces=0:5;
                  NotBlank=true;
                  SourceExpr=AmountAdjustFactor;
                  MinValue=0 }

      { 14  ;3   ;Field     ;
                  Name=Rounding Method;
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want to apply to entries when you copy them to a new budget.;
                  ApplicationArea=#Suite;
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 20  ;3   ;Field     ;
                  Name=Date Change Formula;
                  CaptionML=ENU=Date Change Formula;
                  ToolTipML=[ENU="Specifies how the dates on the entries that are copied will be changed. Use a date formula; for example, to copy last week's budget to this week, use the formula 1W (one week)."];
                  OptionCaptionML=ENU=None,Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=DateAdjustExpression }

      { 3   ;3   ;Field     ;
                  Name=Date Compression;
                  CaptionML=ENU=Date Compression;
                  ToolTipML=ENU=Specifies the length of the period whose entries are combined. To see the options, choose the field.;
                  OptionCaptionML=ENU=None,Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=ToDateCompression }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Dimensions';
      Text002@1001 : TextConst 'ENU=You must specify a budget name to copy from.';
      Text003@1002 : TextConst 'ENU=You must specify a date interval to copy from.';
      Text004@1003 : TextConst 'ENU=You must specify a budget name to copy to.';
      Text005@1004 : TextConst 'ENU=Do you want to create G/L Budget Name %1?';
      Text006@1005 : TextConst 'ENU=Do you want to start the copy?';
      Text007@1006 : TextConst 'ENU=Copying budget...\\';
      Text008@1007 : TextConst 'ENU=G/L Account No. #1####################\';
      Text009@1008 : TextConst 'ENU=Posting Date    #2######';
      Text010@1009 : TextConst 'ENU=Budget has been successfully copied.';
      Text011@1075 : TextConst 'ENU=You can define only one G/L Account.';
      ToGLBudgetEntry@1010 : Record "G/L Budget Entry";
      TempGLBudgetEntry@1012 : TEMPORARY Record "G/L Budget Entry";
      TempSelectedDim@1015 : TEMPORARY Record "Selected Dimension";
      TempDimEntryBuffer@1044 : TEMPORARY Record "Dimension Entry Buffer";
      DimSetEntry@1045 : Record "Dimension Set Entry";
      TempDimSetEntry@1051 : TEMPORARY Record "Dimension Set Entry";
      RoundingMethod@1018 : Record "Rounding Method";
      DimSelectionBuf@1019 : Record "Dimension Selection Buffer";
      DimMgt@1020 : Codeunit DimensionManagement;
      Window@1013 : Dialog;
      FromDate@1021 : Text;
      FromSource@1022 : '"G/L Entry","G/L Budget Entry"';
      FromGLBudgetName@1023 : Code[10];
      FromGLAccountNo@1024 : Code[250];
      FromClosingEntryFilter@1025 : 'Include,Exclude';
      ToGLBudgetName@1026 : Code[10];
      ToGLAccountNo@1027 : Code[20];
      ToBUCode@1028 : Code[20];
      ToDateCompression@1029 : 'None,Day,Week,Month,Quarter,Year,Period';
      ColumnDim@1030 : Text[250];
      AmountAdjustFactor@1031 : Decimal;
      DateAdjustExpression@1032 : DateFormula;
      GLBudgetEntryNo@1033 : Integer;
      GlobalDim1Code@1034 : Code[20];
      GlobalDim2Code@1035 : Code[20];
      BudgetDim1Code@1036 : Code[20];
      BudgetDim2Code@1037 : Code[20];
      BudgetDim3Code@1038 : Code[20];
      BudgetDim4Code@1039 : Code[20];
      NoMessage@1040 : Boolean;
      PrevPostingDate@1041 : Date;
      PrevCalculatedPostingDate@1042 : Date;
      OldGLAccountNo@1053 : Code[20];
      OldPostingDate@1052 : Date;
      OldPostingDescription@1011 : Text[50];
      OldBUCode@1050 : Code[20];
      WindowUpdateDateTime@1048 : DateTime;

    LOCAL PROCEDURE ProcessRecord@3(GLAccNo@1000 : Code[20];BUCode@1001 : Code[20];PostingDate@1002 : Date;PostingDescription@1003 : Text[50];DimSetID@1004 : Integer;Amount@1007 : Decimal);
    VAR
      NewDate@1008 : Date;
      NewDimSetID@1006 : Integer;
    BEGIN
      if CURRENTDATETIME - WindowUpdateDateTime >= 750 then begin
        Window.UPDATE(1,GLAccNo);
        Window.UPDATE(2,PostingDate);
        WindowUpdateDateTime := CURRENTDATETIME;
      end;
      NewDate := CalculatePeriodStart(PostingDate);
      if (FromClosingEntryFilter = FromClosingEntryFilter::Exclude) and (NewDate = CLOSINGDATE(NewDate)) then
        exit;

      if (FromSource = FromSource::"G/L Entry") and
         (ToDateCompression <> ToDateCompression::None)
      then
        PostingDescription := '';

      if OldGLAccountNo = '' then begin
        OldGLAccountNo := GLAccNo;
        OldPostingDate := NewDate;
        OldBUCode := BUCode;
        OldPostingDescription := PostingDescription;
      end;

      if (GLAccNo <> OldGLAccountNo) or
         (NewDate <> OldPostingDate) or
         (BUCode <> OldBUCode) or
         (PostingDescription <> OldPostingDescription) or
         (ToDateCompression = ToDateCompression::None)
      then begin
        OldGLAccountNo := GLAccNo;
        OldPostingDate := NewDate;
        OldBUCode := BUCode;
        OldPostingDescription := PostingDescription;
        InsertGLBudgetEntry;
      end;

      NewDimSetID := DimSetID;
      if not IncludeFromEntry(NewDimSetID) then
        exit;

      UpdateTempGLBudgetEntry(GLAccNo,NewDate,Amount,PostingDescription,BUCode,NewDimSetID);
    END;

    LOCAL PROCEDURE UpdateTempGLBudgetEntry@6(GLAccNo@1000 : Code[20];PostingDate@1001 : Date;Amount@1002 : Decimal;Description@1003 : Text[50];BUCode@1004 : Code[20];DimSetID@1007 : Integer);
    BEGIN
      TempGLBudgetEntry.SETRANGE("G/L Account No.",GLAccNo);
      TempGLBudgetEntry.SETRANGE(Date,PostingDate);
      TempGLBudgetEntry.SETRANGE(Description,Description);
      TempGLBudgetEntry.SETRANGE("Business Unit Code",BUCode);
      TempGLBudgetEntry.SETRANGE("Dimension Set ID",DimSetID);

      if TempGLBudgetEntry.FINDFIRST then begin
        TempGLBudgetEntry.Amount := TempGLBudgetEntry.Amount + Amount;
        TempGLBudgetEntry.MODIFY;
        TempGLBudgetEntry.RESET;
      end else begin
        TempGLBudgetEntry.RESET;
        if TempGLBudgetEntry.FINDLAST then
          TempGLBudgetEntry."Entry No." := TempGLBudgetEntry."Entry No." + 1
        else
          TempGLBudgetEntry."Entry No." := 1;
        TempGLBudgetEntry."Dimension Set ID" := DimSetID;
        TempGLBudgetEntry."G/L Account No." := GLAccNo;
        TempGLBudgetEntry.Date := PostingDate;
        TempGLBudgetEntry.Amount := Amount;
        TempGLBudgetEntry.Description := Description;
        TempGLBudgetEntry."Business Unit Code" := BUCode;
        TempGLBudgetEntry.INSERT;
      end;
    END;

    LOCAL PROCEDURE InsertGLBudgetEntry@2();
    VAR
      Sign@1000 : Decimal;
    BEGIN
      if TempGLBudgetEntry.FIND('-') then begin
        repeat
          if TempGLBudgetEntry.Amount <> 0 then begin
            ToGLBudgetEntry := TempGLBudgetEntry;
            ToGLBudgetEntry."Entry No." := GLBudgetEntryNo;
            GLBudgetEntryNo := GLBudgetEntryNo + 1;
            ToGLBudgetEntry."Budget Name" := ToGLBudgetName;
            if ToGLAccountNo <> '' then
              ToGLBudgetEntry."G/L Account No." := ToGLAccountNo;
            if ToBUCode <> '' then
              ToGLBudgetEntry."Business Unit Code" := ToBUCode;
            ToGLBudgetEntry."User ID" := USERID;
            ToGLBudgetEntry."Last Date Modified" := TODAY;
            ToGLBudgetEntry.Date := TempGLBudgetEntry.Date;
            ToGLBudgetEntry.Amount := ROUND(TempGLBudgetEntry.Amount * AmountAdjustFactor);
            if RoundingMethod.Code <> '' then begin
              if ToGLBudgetEntry.Amount >= 0 then
                Sign := 1
              else
                Sign := -1;
              RoundingMethod."Minimum Amount" := ABS(ToGLBudgetEntry.Amount);
              if RoundingMethod.FIND('=<') then begin
                ToGLBudgetEntry.Amount :=
                  ToGLBudgetEntry.Amount + Sign * RoundingMethod."Amount Added Before";
                if RoundingMethod.Precision > 0 then
                  ToGLBudgetEntry.Amount :=
                    Sign *
                    ROUND(
                      ABS(
                        ToGLBudgetEntry.Amount),RoundingMethod.Precision,COPYSTR('=><',
                        RoundingMethod.Type + 1,1));
                ToGLBudgetEntry.Amount :=
                  ToGLBudgetEntry.Amount + Sign * RoundingMethod."Amount Added After";
              end;
            end;
            DimSetEntry.RESET;
            DimSetEntry.SETRANGE("Dimension Set ID",TempGLBudgetEntry."Dimension Set ID");
            if DimSetEntry.FIND('-') then begin
              repeat
                if DimSetEntry."Dimension Code" = GlobalDim1Code then
                  ToGLBudgetEntry."Global Dimension 1 Code" := DimSetEntry."Dimension Value Code";
                if DimSetEntry."Dimension Code" = GlobalDim2Code then
                  ToGLBudgetEntry."Global Dimension 2 Code" := DimSetEntry."Dimension Value Code";
                if DimSetEntry."Dimension Code" = BudgetDim1Code then
                  ToGLBudgetEntry."Budget Dimension 1 Code" := DimSetEntry."Dimension Value Code";
                if DimSetEntry."Dimension Code" = BudgetDim2Code then
                  ToGLBudgetEntry."Budget Dimension 2 Code" := DimSetEntry."Dimension Value Code";
                if DimSetEntry."Dimension Code" = BudgetDim3Code then
                  ToGLBudgetEntry."Budget Dimension 3 Code" := DimSetEntry."Dimension Value Code";
                if DimSetEntry."Dimension Code" = BudgetDim4Code then
                  ToGLBudgetEntry."Budget Dimension 4 Code" := DimSetEntry."Dimension Value Code";
              until DimSetEntry.NEXT = 0;
            end;
            ToGLBudgetEntry.INSERT;
          end;
        until TempGLBudgetEntry.NEXT = 0;
      end;
      TempGLBudgetEntry.RESET;
      TempGLBudgetEntry.DELETEALL;
    END;

    [External]
    PROCEDURE Initialize@1(FromSource2@1000 : Option;FromGLBudgetName2@1001 : Code[10];FromGLAccountNo2@1002 : Code[250];FromDate2@1003 : Text[30];ToGlBudgetName2@1004 : Code[10];ToGLAccountNo2@1005 : Code[20];ToBUCode2@1006 : Code[20];AmountAdjustFactor2@1007 : Decimal;RoundingMethod2@1008 : Code[10];DateAdjustExpression2@1009 : DateFormula;NoMessage2@1010 : Boolean);
    BEGIN
      FromSource := FromSource2;
      FromGLBudgetName := FromGLBudgetName2;
      FromGLAccountNo := FromGLAccountNo2;
      FromDate := FromDate2;
      ToGLBudgetName := ToGlBudgetName2;
      ToGLAccountNo := ToGLAccountNo2;
      ToBUCode := ToBUCode2;
      AmountAdjustFactor := AmountAdjustFactor2;
      RoundingMethod.Code := RoundingMethod2;
      DateAdjustExpression := DateAdjustExpression2;
      NoMessage := NoMessage2;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      if FORMAT(DateAdjustExpression) <> '' then
        if PostingDate = CLOSINGDATE(PostingDate) then
          PostingDate := CLOSINGDATE(CALCDATE(DateAdjustExpression,NORMALDATE(PostingDate)))
        else
          PostingDate := CALCDATE(DateAdjustExpression,PostingDate);
      if PostingDate = CLOSINGDATE(PostingDate) then
        exit(PostingDate);

      case ToDateCompression of
        ToDateCompression::Week:
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        ToDateCompression::Month:
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        ToDateCompression::Quarter:
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        ToDateCompression::Year:
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        ToDateCompression::Period:
          begin
            if PostingDate <> PrevPostingDate then begin
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              if AccountingPeriod.FINDLAST then begin
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              end else
                PrevCalculatedPostingDate := PostingDate;
            end;
            PostingDate := PrevCalculatedPostingDate;
          end;
      end;
      exit(PostingDate);
    END;

    LOCAL PROCEDURE FilterIncludesBlanks@17(TheFilter@1000 : Code[250]) : Boolean;
    VAR
      TempDimBuf2@1001 : TEMPORARY Record "Dimension Buffer";
    BEGIN
      with TempDimBuf2 do begin
        DELETEALL; // Necessary because of C/SIDE error
        INIT;
        INSERT;
        SETFILTER("Dimension Code",TheFilter);
        exit(FINDFIRST);
      end;
    END;

    LOCAL PROCEDURE IncludeFromEntry@5(VAR DimSetID@1000 : Integer) : Boolean;
    VAR
      IncludeEntry@1001 : Boolean;
    BEGIN
      if TempDimEntryBuffer.GET(DimSetID) then begin
        DimSetID := TempDimEntryBuffer."Dimension Entry No.";
        exit(true);
      end;
      TempDimEntryBuffer."No." := DimSetID;

      IncludeEntry := true;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      TempDimSetEntry.RESET;
      TempDimSetEntry.DELETEALL;
      if TempSelectedDim.FIND('-') then
        repeat
          DimSetEntry.INIT;
          DimSetEntry.SETRANGE("Dimension Code",TempSelectedDim."Dimension Code");
          if TempSelectedDim."Dimension Value Filter" <> '' then
            DimSetEntry.SETFILTER("Dimension Value Code",TempSelectedDim."Dimension Value Filter");
          if DimSetEntry.FINDFIRST then begin
            TempDimSetEntry := DimSetEntry;
            TempDimSetEntry."Dimension Set ID" := 0;
            if TempSelectedDim."New Dimension Value Code" <> '' then
              TempDimSetEntry.VALIDATE("Dimension Value Code",TempSelectedDim."New Dimension Value Code");
            TempDimSetEntry.INSERT(true);
          end else begin
            if TempSelectedDim."Dimension Value Filter" <> '' then
              if TempSelectedDim.Level = 1 then begin
                DimSetEntry.SETRANGE("Dimension Value Code");
                IncludeEntry := not DimSetEntry.FINDFIRST;
              end else
                IncludeEntry := false;
            if IncludeEntry and (TempSelectedDim."New Dimension Value Code" <> '') then begin
              TempDimSetEntry."Dimension Set ID" := 0;
              TempDimSetEntry."Dimension Code" := COPYSTR(TempSelectedDim."Dimension Code",1,20);
              TempDimSetEntry.VALIDATE("Dimension Value Code",TempSelectedDim."New Dimension Value Code");
              TempDimSetEntry.INSERT(true);
            end;
          end;
          DimSetEntry.SETRANGE("Dimension Code");
          DimSetEntry.SETRANGE("Dimension Value Code");
        until (TempSelectedDim.NEXT = 0) or not IncludeEntry;
      if IncludeEntry then begin
        DimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
        TempDimEntryBuffer."Dimension Entry No." := DimSetID;
        TempDimEntryBuffer.INSERT;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE InitializeRequest@7(FromSource2@1000 : Option;FromGLBudgetName2@1001 : Code[10];FromGLAccountNo2@1002 : Code[250];FromDate2@1003 : Text[30];FromClosingEntryFilter2@1011 : Option;DimensionText@1006 : Text[250];ToGlBudgetName2@1004 : Code[10];ToGLAccountNo2@1005 : Code[20];AmountAdjustFactor2@1007 : Decimal;RoundingMethod2@1008 : Code[10];DateAdjustExpression2@1009 : DateFormula;ToDateCompression2@1010 : Option);
    BEGIN
      FromSource := FromSource2;
      FromGLBudgetName := FromGLBudgetName2;
      FromGLAccountNo := FromGLAccountNo2;
      FromDate := FromDate2;
      FromClosingEntryFilter := FromClosingEntryFilter2;
      ColumnDim := DimensionText;
      ToGLBudgetName := ToGlBudgetName2;
      ToGLAccountNo := ToGLAccountNo2;
      AmountAdjustFactor := AmountAdjustFactor2;
      RoundingMethod.Code := RoundingMethod2;
      DateAdjustExpression := DateAdjustExpression2;
      ToDateCompression := ToDateCompression2;
    END;

    LOCAL PROCEDURE ToGLAccountNoOnAfterValidate@1130();
    VAR
      GLAccount@1110 : Record "G/L Account";
    BEGIN
      if ToGLAccountNo <> '' then begin
        GLAccount.GET(ToGLAccountNo);
        MESSAGE(Text011)
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

