OBJECT Table 1294 Applied Payment Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "Applies-to Entry No." <> 0 then
                 TESTFIELD("Applied Amount");

               CheckApplnIsSameAcc;
             END;

    OnModify=BEGIN
               TESTFIELD("Applied Amount");
               CheckApplnIsSameAcc;
             END;

    OnDelete=BEGIN
               "Applied Amount" := 0;
               "Applied Pmt. Discount" := 0;
               UpdateParentBankAccReconLine(true);
               ClearCustVendEntryApplicationData;
             END;

    CaptionML=ENU=Applied Payment Entry;
    LookupPageID="Payment Application";
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account No. }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                                   "Statement Type"=FIELD("Statement Type"));
                                                   CaptionML=ENU=Statement No. }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=ENU=Statement Line No. }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=ENU=Statement Type;
                                                   OptionCaptionML=ENU=Bank Reconciliation,Payment Application;
                                                   OptionString="Bank Reconciliation","Payment Application" }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner" }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                               Blocked=CONST(false))
                                                                                                                               ELSE IF ("Account Type"=CONST(Customer)) Customer
                                                                                                                               ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                                                                               ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account"
                                                                                                                               ELSE IF ("Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                               ELSE IF ("Account Type"=CONST("IC Partner")) "IC Partner";
                                                   OnValidate=BEGIN
                                                                if "Account No." = '' then
                                                                  CheckApplnIsSameAcc;

                                                                GetAccInfo;
                                                                VALIDATE("Applies-to Entry No.",0);
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 23  ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Entry"
                                                                 ELSE IF ("Account Type"=CONST(Customer)) "Cust. Ledger Entry" WHERE (Open=CONST(true))
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Vendor Ledger Entry" WHERE (Open=CONST(true))
                                                                 ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account Ledger Entry" WHERE (Open=CONST(true));
                                                   OnValidate=BEGIN
                                                                if "Applies-to Entry No." = 0 then begin
                                                                  VALIDATE("Applied Amount",0);
                                                                  exit;
                                                                end;

                                                                CheckCurrencyCombination;
                                                                GetLedgEntryInfo;
                                                                UpdatePaymentDiscount(SuggestDiscToApply(false));
                                                                VALIDATE("Applied Amount",SuggestAmtToApply);
                                                              END;

                                                   OnLookup=VAR
                                                              CustLedgEntry@1003 : Record "Cust. Ledger Entry";
                                                              VendLedgEntry@1002 : Record "Vendor Ledger Entry";
                                                              BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry";
                                                              GLEntry@1000 : Record "G/L Entry";
                                                            BEGIN
                                                              case "Account Type" of
                                                                "Account Type"::"G/L Account":
                                                                  begin
                                                                    GLEntry.SETRANGE("G/L Account No.","Account No.");
                                                                    if PAGE.RUNMODAL(0,GLEntry) = ACTION::LookupOK then
                                                                      VALIDATE("Applies-to Entry No.",GLEntry."Entry No.");
                                                                  end;
                                                                "Account Type"::Customer:
                                                                  begin
                                                                    CustLedgEntry.SETRANGE(Open,true);
                                                                    CustLedgEntry.SETRANGE("Customer No.","Account No.");
                                                                    if PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK then
                                                                      VALIDATE("Applies-to Entry No.",CustLedgEntry."Entry No.");
                                                                  end;
                                                                "Account Type"::Vendor:
                                                                  begin
                                                                    VendLedgEntry.SETRANGE(Open,true);
                                                                    VendLedgEntry.SETRANGE("Vendor No.","Account No.");
                                                                    if PAGE.RUNMODAL(0,VendLedgEntry) = ACTION::LookupOK then
                                                                      VALIDATE("Applies-to Entry No.",VendLedgEntry."Entry No.");
                                                                  end;
                                                                "Account Type"::"Bank Account":
                                                                  begin
                                                                    BankAccLedgEntry.SETRANGE(Open,true);
                                                                    BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
                                                                    if PAGE.RUNMODAL(0,BankAccLedgEntry) = ACTION::LookupOK then
                                                                      VALIDATE("Applies-to Entry No.",BankAccLedgEntry."Entry No.");
                                                                  end;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Applies-to Entry No. }
    { 24  ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                if "Applies-to Entry No." <> 0 then
                                                                  TESTFIELD("Applied Amount");
                                                                CheckEntryAmt;
                                                                UpdatePaymentDiscount(SuggestDiscToApply(true));
                                                                if "Applied Pmt. Discount" <> 0 then
                                                                  "Applied Amount" := SuggestAmtToApply;

                                                                UpdateParentBankAccReconLine(false);
                                                              END;

                                                   CaptionML=ENU=Applied Amount }
    { 29  ;   ;Applied Pmt. Discount;Decimal      ;CaptionML=ENU=Applied Pmt. Discount;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Quality             ;Integer       ;CaptionML=ENU=Quality }
    { 31  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 32  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 33  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 34  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 35  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 37  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 50  ;   ;Match Confidence    ;Option        ;InitValue=None;
                                                   CaptionML=ENU=Match Confidence;
                                                   OptionCaptionML=ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   OptionString=None,Low,Medium,High,"High - Text-to-Account Mapping",Manual,Accepted;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Statement Type","Bank Account No.","Statement No.","Statement Line No.","Account Type","Account No.","Applies-to Entry No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CurrencyMismatchErr@1001 : TextConst 'ENU=Currency codes on bank account %1 and ledger entry %2 do not match.';
      AmtCannotExceedErr@1002 : TextConst 'ENU=The Amount to Apply cannot exceed %1. This is because the Remaining Amount on the entry is %2 and the amount assigned to other statement lines is %3.';
      CannotApplyStmtLineErr@1003 : TextConst '@@@="%1 = Account Type, %2 = Account No., %3 = Account Type, %4 = Account No.";ENU=You cannot apply to %1 %2 because the statement line already contains an application to %3 %4.';

    LOCAL PROCEDURE CheckApplnIsSameAcc@6();
    VAR
      ExistingAppliedPmtEntry@1001 : Record "Applied Payment Entry";
      BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      if "Account No." = '' then
        exit;
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      ExistingAppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconLine);
      if ExistingAppliedPmtEntry.FINDFIRST then
        CheckCurrentMatchesExistingAppln(ExistingAppliedPmtEntry);
      if ExistingAppliedPmtEntry.FINDLAST then
        CheckCurrentMatchesExistingAppln(ExistingAppliedPmtEntry);
    END;

    LOCAL PROCEDURE CheckCurrentMatchesExistingAppln@16(ExistingAppliedPmtEntry@1000 : Record "Applied Payment Entry");
    BEGIN
      if ("Account Type" = ExistingAppliedPmtEntry."Account Type") and
         ("Account No." = ExistingAppliedPmtEntry."Account No.")
      then
        exit;

      ERROR(
        CannotApplyStmtLineErr,
        "Account Type","Account No.",
        ExistingAppliedPmtEntry."Account Type",
        ExistingAppliedPmtEntry."Account No.");
    END;

    LOCAL PROCEDURE CheckEntryAmt@1();
    VAR
      BankAccReconLine@1002 : Record "Bank Acc. Reconciliation Line";
      AmtAvailableToApply@1000 : Decimal;
    BEGIN
      if "Applied Amount" = 0 then
        exit;

      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      // Amount should not exceed Remaining Amount
      AmtAvailableToApply := GetRemAmt - GetAmtAppliedToOtherStmtLines;
      if "Applies-to Entry No." <> 0 then
        if "Applied Amount" > 0 then begin
          if not ("Applied Amount" in [0..AmtAvailableToApply]) then
            ERROR(AmtCannotExceedErr,AmtAvailableToApply,GetRemAmt,GetAmtAppliedToOtherStmtLines);
        end else
          if not ("Applied Amount" in [AmtAvailableToApply..0]) then
            ERROR(AmtCannotExceedErr,AmtAvailableToApply,GetRemAmt,GetAmtAppliedToOtherStmtLines);
    END;

    LOCAL PROCEDURE UpdateParentBankAccReconLine@2(IsDelete@1001 : Boolean);
    VAR
      BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
      NewAppliedAmt@1002 : Decimal;
    BEGIN
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      NewAppliedAmt := GetTotalAppliedAmountInclPmtDisc(IsDelete);

      BankAccReconLine."Applied Entries" := GetNoOfAppliedEntries(IsDelete);

      if IsDelete then begin
        if NewAppliedAmt = 0 then begin
          BankAccReconLine.VALIDATE("Applied Amount",0);
          BankAccReconLine.VALIDATE("Account No.",'')
        end
      end else
        if BankAccReconLine."Applied Amount" = 0 then begin
          BankAccReconLine.VALIDATE("Account Type","Account Type");
          BankAccReconLine.VALIDATE("Account No.","Account No.");
        end else
          CheckApplnIsSameAcc;

      BankAccReconLine.VALIDATE("Applied Amount",NewAppliedAmt);
      BankAccReconLine.MODIFY;
    END;

    LOCAL PROCEDURE CheckCurrencyCombination@4();
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      VendorLedgEntry@1000 : Record "Vendor Ledger Entry";
      BankAccLedgEntry@1002 : Record "Bank Account Ledger Entry";
    BEGIN
      if IsBankLCY then
        exit;

      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          begin
            CustLedgEntry.GET("Applies-to Entry No.");
            if not CurrencyMatches("Bank Account No.",CustLedgEntry."Currency Code",GetLCYCode) then
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          end;
        "Account Type"::Vendor:
          begin
            VendorLedgEntry.GET("Applies-to Entry No.");
            if not CurrencyMatches("Bank Account No.",VendorLedgEntry."Currency Code",GetLCYCode) then
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          end;
        "Account Type"::"Bank Account":
          begin
            BankAccLedgEntry.GET("Applies-to Entry No.");
            if not CurrencyMatches("Bank Account No.",BankAccLedgEntry."Currency Code",GetLCYCode) then
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          end;
      end;
    END;

    LOCAL PROCEDURE CurrencyMatches@5(BankAccNo@1000 : Code[20];LedgEntryCurrCode@1001 : Code[10];LCYCode@1005 : Code[10]) : Boolean;
    VAR
      BankAcc@1003 : Record "Bank Account";
      BankAccCurrCode@1004 : Code[10];
    BEGIN
      BankAcc.GET(BankAccNo);
      BankAccCurrCode := BankAcc."Currency Code";
      if BankAccCurrCode = '' then
        BankAccCurrCode := LCYCode;
      if LedgEntryCurrCode = '' then
        LedgEntryCurrCode := LCYCode;
      exit(LedgEntryCurrCode = BankAccCurrCode);
    END;

    LOCAL PROCEDURE IsBankLCY@13() : Boolean;
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      BankAcc.GET("Bank Account No.");
      exit(BankAcc.IsInLocalCurrency);
    END;

    LOCAL PROCEDURE GetLCYCode@17() : Code[10];
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      GLSetup.GET;
      exit(GLSetup.GetCurrencyCode(''));
    END;

    [External]
    PROCEDURE SuggestAmtToApply@11() : Decimal;
    VAR
      RemAmtToApply@1000 : Decimal;
      LineRemAmtToApply@1001 : Decimal;
    BEGIN
      RemAmtToApply := GetRemAmt - GetAmtAppliedToOtherStmtLines;
      LineRemAmtToApply := GetStmtLineRemAmtToApply + "Applied Pmt. Discount";

      if "Account Type" = "Account Type"::Customer then
        if (LineRemAmtToApply >= 0) and ("Document Type" = "Document Type"::"Credit Memo") then
          exit(RemAmtToApply);
      if "Account Type" = "Account Type"::Vendor then
        if (LineRemAmtToApply <= 0) and ("Document Type" = "Document Type"::"Credit Memo") then
          exit(RemAmtToApply);

      exit(
        AbsMin(
          RemAmtToApply,
          LineRemAmtToApply));
    END;

    [Internal]
    PROCEDURE SuggestDiscToApply@36(UseAppliedAmt@1000 : Boolean) : Decimal;
    VAR
      PmtDiscDueDate@1002 : Date;
      PmtDiscToleranceDate@1003 : Date;
      RemPmtDiscPossible@1001 : Decimal;
    BEGIN
      if InclPmtDisc(UseAppliedAmt) then begin
        GetDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
        exit(RemPmtDiscPossible + GetAcceptedPmtTolerance);
      end;
      exit(GetAcceptedPmtTolerance);
    END;

    [External]
    PROCEDURE GetDiscInfo@40(VAR PmtDiscDueDate@1000 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    BEGIN
      PmtDiscDueDate := 0D;
      RemPmtDiscPossible := 0;

      if "Account No." = '' then
        exit;
      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          GetCustLedgEntryDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
        "Account Type"::Vendor:
          GetVendLedgEntryDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
      end;
    END;

    LOCAL PROCEDURE GetCustLedgEntryDiscInfo@39(VAR PmtDiscDueDate@1002 : Date;VAR PmtDiscToleranceDate@1003 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      PmtDiscDueDate := CustLedgEntry."Pmt. Discount Date";
      PmtDiscToleranceDate := CustLedgEntry."Pmt. Disc. Tolerance Date";
      if IsBankLCY and (CustLedgEntry."Currency Code" <> '') then
        RemPmtDiscPossible :=
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor")
      else
        RemPmtDiscPossible := CustLedgEntry."Remaining Pmt. Disc. Possible";
    END;

    LOCAL PROCEDURE GetVendLedgEntryDiscInfo@38(VAR PmtDiscDueDate@1002 : Date;VAR PmtDiscToleranceDate@1003 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      PmtDiscDueDate := VendLedgEntry."Pmt. Discount Date";
      PmtDiscToleranceDate := VendLedgEntry."Pmt. Disc. Tolerance Date";
      VendLedgEntry.CALCFIELDS("Amount (LCY)",Amount);
      if IsBankLCY and (VendLedgEntry."Currency Code" <> '') then
        RemPmtDiscPossible :=
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor")
      else
        RemPmtDiscPossible := VendLedgEntry."Remaining Pmt. Disc. Possible";
    END;

    [External]
    PROCEDURE GetRemAmt@3() : Decimal;
    BEGIN
      if "Account No." = '' then
        exit(0);
      if "Applies-to Entry No." = 0 then
        exit(GetStmtLineRemAmtToApply);

      case "Account Type" of
        "Account Type"::Customer:
          exit(GetCustLedgEntryRemAmt);
        "Account Type"::Vendor:
          exit(GetVendLedgEntryRemAmt);
        "Account Type"::"Bank Account":
          exit(GetBankAccLedgEntryRemAmt);
      end;
    END;

    LOCAL PROCEDURE GetAcceptedPmtTolerance@37() : Decimal;
    BEGIN
      if ("Account No." = '') or ("Applies-to Entry No." = 0) then
        exit(0);
      case "Account Type" of
        "Account Type"::Customer:
          exit(GetCustLedgEntryPmtTolAmt);
        "Account Type"::Vendor:
          exit(GetVendLedgEntryPmtTolAmt);
      end;
    END;

    LOCAL PROCEDURE GetCustLedgEntryRemAmt@30() : Decimal;
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      if IsBankLCY and (CustLedgEntry."Currency Code" <> '') then begin
        CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
        exit(CustLedgEntry."Remaining Amt. (LCY)");
      end;
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      exit(CustLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE GetVendLedgEntryRemAmt@31() : Decimal;
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      if IsBankLCY and (VendLedgEntry."Currency Code" <> '') then begin
        VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
        exit(VendLedgEntry."Remaining Amt. (LCY)");
      end;
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      exit(VendLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE GetBankAccLedgEntryRemAmt@32() : Decimal;
    VAR
      BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";
    BEGIN
      BankAccLedgEntry.GET("Applies-to Entry No.");
      if IsBankLCY then
        exit(
          ROUND(
            BankAccLedgEntry."Remaining Amount" *
            BankAccLedgEntry."Amount (LCY)" / BankAccLedgEntry.Amount));
      exit(BankAccLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE GetCustLedgEntryPmtTolAmt@46() : Decimal;
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      exit(CustLedgEntry."Accepted Payment Tolerance");
    END;

    LOCAL PROCEDURE GetVendLedgEntryPmtTolAmt@45() : Decimal;
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      exit(VendLedgEntry."Accepted Payment Tolerance");
    END;

    [External]
    PROCEDURE GetStmtLineRemAmtToApply@12() : Decimal;
    VAR
      BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      if BankAccReconLine.Difference = 0 then
        exit(0);

      exit(BankAccReconLine.Difference + GetOldAppliedAmtInclDisc);
    END;

    LOCAL PROCEDURE GetOldAppliedAmtInclDisc@35() : Decimal;
    VAR
      OldAppliedPmtEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      OldAppliedPmtEntry := Rec;
      if not OldAppliedPmtEntry.FIND then
        exit(0);
      exit(OldAppliedPmtEntry."Applied Amount" - OldAppliedPmtEntry."Applied Pmt. Discount");
    END;

    LOCAL PROCEDURE IsAcceptedPmtDiscTolerance@49() : Boolean;
    BEGIN
      if ("Account No." = '') or ("Applies-to Entry No." = 0) then
        exit(false);
      case "Account Type" of
        "Account Type"::Customer:
          exit(IsCustLedgEntryPmtDiscTol);
        "Account Type"::Vendor:
          exit(IsVendLedgEntryPmtDiscTol);
      end;
    END;

    LOCAL PROCEDURE IsCustLedgEntryPmtDiscTol@50() : Boolean;
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      exit(CustLedgEntry."Accepted Pmt. Disc. Tolerance");
    END;

    LOCAL PROCEDURE IsVendLedgEntryPmtDiscTol@51() : Boolean;
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      exit(VendLedgEntry."Accepted Pmt. Disc. Tolerance");
    END;

    LOCAL PROCEDURE AbsMin@15(Amt1@1000 : Decimal;Amt2@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(Amt1) < ABS(Amt2) then
        exit(Amt1);
      exit(Amt2)
    END;

    LOCAL PROCEDURE GetAccInfo@34();
    BEGIN
      if "Account No." = '' then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          GetCustInfo;
        "Account Type"::Vendor:
          GetVendInfo;
        "Account Type"::"Bank Account":
          GetBankAccInfo;
        "Account Type"::"G/L Account":
          GetGLAccInfo;
      end;
    END;

    LOCAL PROCEDURE GetCustInfo@23();
    VAR
      Cust@1000 : Record Customer;
    BEGIN
      Cust.GET("Account No.");
      Description := Cust.Name;
    END;

    LOCAL PROCEDURE GetVendInfo@22();
    VAR
      Vend@1000 : Record Vendor;
    BEGIN
      Vend.GET("Account No.");
      Description := Vend.Name;
    END;

    LOCAL PROCEDURE GetBankAccInfo@21();
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      BankAcc.GET("Account No.");
      Description := BankAcc.Name;
      "Currency Code" := BankAcc."Currency Code";
    END;

    LOCAL PROCEDURE GetGLAccInfo@27();
    VAR
      GLAcc@1000 : Record "G/L Account";
    BEGIN
      GLAcc.GET("Account No.");
      Description := GLAcc.Name;
    END;

    [External]
    PROCEDURE GetLedgEntryInfo@8();
    BEGIN
      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          GetCustLedgEntryInfo;
        "Account Type"::Vendor:
          GetVendLedgEntryInfo;
        "Account Type"::"Bank Account":
          GetBankAccLedgEntryInfo;
      end;
    END;

    LOCAL PROCEDURE GetCustLedgEntryInfo@24();
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      Description := CustLedgEntry.Description;
      "Posting Date" := CustLedgEntry."Posting Date";
      "Due Date" := CustLedgEntry."Due Date";
      "Document Type" := CustLedgEntry."Document Type";
      "Document No." := CustLedgEntry."Document No.";
      "External Document No." := CustLedgEntry."External Document No.";
      "Currency Code" := CustLedgEntry."Currency Code";
    END;

    LOCAL PROCEDURE GetVendLedgEntryInfo@25();
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      Description := VendLedgEntry.Description;
      "Posting Date" := VendLedgEntry."Posting Date";
      "Due Date" := VendLedgEntry."Due Date";
      "Document Type" := VendLedgEntry."Document Type";
      "Document No." := VendLedgEntry."Document No.";
      "External Document No." := VendLedgEntry."External Document No.";
      "Currency Code" := VendLedgEntry."Currency Code";
    END;

    LOCAL PROCEDURE GetBankAccLedgEntryInfo@26();
    VAR
      BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";
    BEGIN
      BankAccLedgEntry.GET("Applies-to Entry No.");
      Description := BankAccLedgEntry.Description;
      "Posting Date" := BankAccLedgEntry."Posting Date";
      "Due Date" := 0D;
      "Document Type" := BankAccLedgEntry."Document Type";
      "Document No." := BankAccLedgEntry."Document No.";
      "External Document No." := BankAccLedgEntry."External Document No.";
      "Currency Code" := BankAccLedgEntry."Currency Code";
    END;

    [External]
    PROCEDURE GetAmtAppliedToOtherStmtLines@7() : Decimal;
    VAR
      AppliedPmtEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      if "Applies-to Entry No." = 0 then
        exit(0);

      AppliedPmtEntry := Rec;
      AppliedPmtEntry.FilterEntryAppliedToOtherStmtLines;
      AppliedPmtEntry.CALCSUMS("Applied Amount");
      exit(AppliedPmtEntry."Applied Amount");
    END;

    [External]
    PROCEDURE FilterEntryAppliedToOtherStmtLines@28();
    BEGIN
      RESET;
      SETRANGE("Statement Type","Statement Type");
      SETRANGE("Bank Account No.","Bank Account No.");
      SETRANGE("Statement No.","Statement No.");
      SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      SETRANGE("Account Type","Account Type");
      SETRANGE("Account No.","Account No.");
      SETRANGE("Applies-to Entry No.","Applies-to Entry No.");
    END;

    [External]
    PROCEDURE FilterAppliedPmtEntry@9(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccReconLine."Statement Type");
      SETRANGE("Bank Account No.",BankAccReconLine."Bank Account No.");
      SETRANGE("Statement No.",BankAccReconLine."Statement No.");
      SETRANGE("Statement Line No.",BankAccReconLine."Statement Line No.");
    END;

    [External]
    PROCEDURE AppliedPmtEntryLinesExist@19(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line") : Boolean;
    BEGIN
      FilterAppliedPmtEntry(BankAccReconLine);
      exit(FINDSET);
    END;

    [External]
    PROCEDURE TransferFromBankAccReconLine@14(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      "Statement Type" := BankAccReconLine."Statement Type";
      "Bank Account No." := BankAccReconLine."Bank Account No.";
      "Statement No." := BankAccReconLine."Statement No.";
      "Statement Line No." := BankAccReconLine."Statement Line No.";
    END;

    [External]
    PROCEDURE ApplyFromBankStmtMatchingBuf@18(BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";BankStmtMatchingBuffer@1000 : Record "Bank Statement Matching Buffer";TextMapperAmount@1002 : Decimal;EntryNo@1004 : Integer);
    VAR
      BankPmtApplRule@1003 : Record "Bank Pmt. Appl. Rule";
    BEGIN
      INIT;
      TransferFromBankAccReconLine(BankAccReconLine);
      VALIDATE("Account Type",BankStmtMatchingBuffer."Account Type");
      VALIDATE("Account No.",BankStmtMatchingBuffer."Account No.");
      if (EntryNo < 0) and (not BankStmtMatchingBuffer."One to Many Match") then begin // text mapper
        VALIDATE("Applies-to Entry No.",0);
        VALIDATE("Applied Amount",TextMapperAmount);
      end else
        VALIDATE("Applies-to Entry No.",EntryNo);
      VALIDATE(Quality,BankStmtMatchingBuffer.Quality);
      VALIDATE("Match Confidence",BankPmtApplRule.GetMatchConfidence(BankStmtMatchingBuffer.Quality));
      INSERT(true);
    END;

    LOCAL PROCEDURE InclPmtDisc@20(UseAppliedAmt@1001 : Boolean) : Boolean;
    VAR
      BankAccReconLine@1007 : Record "Bank Acc. Reconciliation Line";
      PaymentToleranceManagement@1006 : Codeunit "Payment Tolerance Management";
      UsePmtDisc@1008 : Boolean;
      AmtApplied@1002 : Decimal;
      PmtDiscDueDate@1004 : Date;
      PmtDiscToleranceDate@1005 : Date;
      RemPmtDiscPossible@1003 : Decimal;
    BEGIN
      GetDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
      if not ("Document Type" in ["Document Type"::"Credit Memo","Document Type"::Invoice]) then
        exit(false);
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      if (BankAccReconLine."Account Type" = 0) or (BankAccReconLine."Account No." = '') then begin
        BankAccReconLine."Account Type" := "Account Type";
        BankAccReconLine."Account No." := "Account No.";
      end;
      UsePmtDisc := (BankAccReconLine."Transaction Date" <= PmtDiscDueDate) and (RemPmtDiscPossible <> 0);
      if UseAppliedAmt then
        PaymentToleranceManagement.PmtTolPmtReconJnl(BankAccReconLine);
      if (not UsePmtDisc) and (not IsAcceptedPmtDiscTolerance) then
        exit(false);

      if UseAppliedAmt then
        AmtApplied := "Applied Amount" + GetAmtAppliedToOtherStmtLines
      else
        AmtApplied := BankAccReconLine.Difference + GetOldAppliedAmtInclDisc + GetAmtAppliedToOtherStmtLines;

      exit(ABS(AmtApplied) >= ABS(GetRemAmt - RemPmtDiscPossible - GetAcceptedPmtTolerance));
    END;

    [External]
    PROCEDURE GetTotalAppliedAmountInclPmtDisc@29(IsDelete@1002 : Boolean) : Decimal;
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
      TotalAmountIncludingPmtDisc@1001 : Decimal;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Account No.","Account No.");
      AppliedPaymentEntry.SETFILTER("Applies-to Entry No.",'<>%1',"Applies-to Entry No.");

      if IsDelete then
        TotalAmountIncludingPmtDisc := 0
      else
        TotalAmountIncludingPmtDisc := "Applied Amount" - "Applied Pmt. Discount";

      if AppliedPaymentEntry.FINDSET then
        repeat
          TotalAmountIncludingPmtDisc += AppliedPaymentEntry."Applied Amount";
          TotalAmountIncludingPmtDisc -= AppliedPaymentEntry."Applied Pmt. Discount";
        until AppliedPaymentEntry.NEXT = 0;

      exit(TotalAmountIncludingPmtDisc);
    END;

    LOCAL PROCEDURE GetNoOfAppliedEntries@33(IsDelete@1000 : Boolean) : Decimal;
    VAR
      AppliedPaymentEntry@1002 : Record "Applied Payment Entry";
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Account No.","Account No.");
      AppliedPaymentEntry.SETFILTER("Applies-to Entry No.",'<>%1',"Applies-to Entry No.");

      if IsDelete then
        exit(AppliedPaymentEntry.COUNT);

      exit(AppliedPaymentEntry.COUNT + 1);
    END;

    [External]
    PROCEDURE UpdatePaymentDiscount@10(PaymentDiscountAmount@1000 : Decimal);
    VAR
      AppliedPaymentEntry@1001 : Record "Applied Payment Entry";
    BEGIN
      // Payment discount must go to last entry only because of posting
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Applies-to Entry No.","Applies-to Entry No.");
      AppliedPaymentEntry.SETFILTER("Applied Pmt. Discount",'<>0');

      if AppliedPaymentEntry.FINDFIRST then
        AppliedPaymentEntry.RemovePaymentDiscount;

      if PaymentDiscountAmount = 0 then
        exit;

      AppliedPaymentEntry.SETRANGE("Applied Pmt. Discount");

      if AppliedPaymentEntry.FINDLAST then
        if "Statement Line No." < AppliedPaymentEntry."Statement Line No." then begin
          AppliedPaymentEntry.SetPaymentDiscount(PaymentDiscountAmount,true);
          exit;
        end;

      SetPaymentDiscount(PaymentDiscountAmount,false);
    END;

    [External]
    PROCEDURE SetPaymentDiscount@42(PaymentDiscountAmount@1001 : Decimal;DifferentLineThanCurrent@1002 : Boolean);
    BEGIN
      VALIDATE("Applied Pmt. Discount",PaymentDiscountAmount);

      if DifferentLineThanCurrent then begin
        "Applied Amount" += "Applied Pmt. Discount";
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE RemovePaymentDiscount@41();
    BEGIN
      "Applied Amount" := "Applied Amount" - "Applied Pmt. Discount";
      "Applied Pmt. Discount" := 0;
      MODIFY(true);
    END;

    LOCAL PROCEDURE ClearCustVendEntryApplicationData@44();
    BEGIN
      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::Customer:
          ClearCustApplicationData("Applies-to Entry No.");
        "Account Type"::Vendor:
          ClearVendApplicationData("Applies-to Entry No.");
      end;
    END;

    LOCAL PROCEDURE ClearCustApplicationData@43(EntryNo@1000 : Integer);
    VAR
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.GET(EntryNo);
      CustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      CustLedgEntry."Amount to Apply" := 0;
      CustLedgEntry."Applies-to ID" := '';
      CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
    END;

    LOCAL PROCEDURE ClearVendApplicationData@47(EntryNo@1000 : Integer);
    VAR
      VendLedgEntry@1001 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.GET(EntryNo);
      VendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      VendLedgEntry."Amount to Apply" := 0;
      VendLedgEntry."Applies-to ID" := '';
      CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
    END;

    [Internal]
    PROCEDURE CalcAmountToApply@48(PostingDate@1005 : Date) AmountToApply : Decimal;
    VAR
      BankAccount@1000 : Record "Bank Account";
      CurrExchRate@1004 : Record "Currency Exchange Rate";
      CustLedgerEntry@1002 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1001 : Record "Vendor Ledger Entry";
      RemainingAmount@1003 : Decimal;
    BEGIN
      BankAccount.GET("Bank Account No.");
      if BankAccount.IsInLocalCurrency then begin
        AmountToApply :=
          CurrExchRate.ExchangeAmount("Applied Amount",'',"Currency Code",PostingDate);
        case "Account Type" of
          "Account Type"::Customer:
            begin
              CustLedgerEntry.GET("Applies-to Entry No.");
              CustLedgerEntry.CALCFIELDS("Remaining Amount");
              RemainingAmount := CustLedgerEntry."Remaining Amount";
            end;
          "Account Type"::Vendor:
            begin
              VendorLedgerEntry.GET("Applies-to Entry No.");
              VendorLedgerEntry.CALCFIELDS("Remaining Amount");
              RemainingAmount := VendorLedgerEntry."Remaining Amount";
            end;
        end;
        if ABS(AmountToApply) > ABS(RemainingAmount) then
          AmountToApply := RemainingAmount;
      end else
        exit("Applied Amount");
      exit(AmountToApply);
    END;

    BEGIN
    END.
  }
}

