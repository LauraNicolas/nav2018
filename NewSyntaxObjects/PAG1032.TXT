OBJECT Page 1032 Available - Job Planning Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Job Planning Line"=rm;
    Editable=false;
    CaptionML=ENU=Available - Job Planning Lines;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Job Planning Line";
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING(Status,Type,"No.","Variant Code","Location Code","Planning Date");
    PageType=List;
    OnOpenPage=BEGIN
                 ReservEntry.TESTFIELD("Source Type");

                 SETRANGE(Status,CurrentSubType);
                 SETRANGE(Type,Type::Item);
                 SETRANGE("No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETRANGE("Location Code",ReservEntry."Location Code");

                 SETFILTER("Planning Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));

                 case CurrentSubType of
                   0,1,2,4:
                     if ReservMgt.IsPositive then
                       SETFILTER("Quantity (Base)",'<0')
                     else
                       SETFILTER("Quantity (Base)",'>0');
                   3,5:
                     if not ReservMgt.IsPositive then
                       SETFILTER("Quantity (Base)",'<0')
                     else
                       SETFILTER("Quantity (Base)",'>0');
                 end;
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.JobPlanningLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 21      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 22      ;2   ;Action    ;
                      Name=Reserve;
                      CaptionML=ENU=&Reserve;
                      ToolTipML=ENU=Reserve one or more units of the item on the job planning line, either from inventory or from incoming supply.;
                      ApplicationArea=#Jobs;
                      Image=Reserve;
                      OnAction=BEGIN
                                 ReservEntry.LOCKTABLE;
                                 UpdateReservMgt;
                                 ReservMgt.JobPlanningLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase);
                                 ReservMgt.CalculateRemainingQty(NewQtyReservedThisLine,NewQtyReservedThisLineBase);
                                 ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                 ReservMgt.CopySign(NewQtyReservedThisLineBase,QtyToReserveBase);
                                 if NewQtyReservedThisLineBase <> 0 then
                                   if ABS(NewQtyReservedThisLineBase) > ABS(QtyToReserveBase) then
                                     CreateReservation(QtyToReserve,QtyToReserveBase)
                                   else
                                     CreateReservation(NewQtyReservedThisLine,NewQtyReservedThisLineBase)
                                 else
                                   ERROR(Text000);
                               END;
                                }
      { 23      ;2   ;Action    ;
                      Name=CancelReservation;
                      AccessByPermission=TableData Item=R;
                      CaptionML=ENU=&Cancel Reservation;
                      ToolTipML=ENU=Cancel the reservation that exists for the document line that you opened this window for.;
                      ApplicationArea=#Jobs;
                      Image=Cancel;
                      OnAction=BEGIN
                                 if not CONFIRM(Text001,false) then
                                   exit;

                                 ReservEntry2.COPY(ReservEntry);
                                 JobPlanningLineReserve.FilterReservFor(ReservEntry2,Rec);

                                 if ReservEntry2.FIND('-') then begin
                                   UpdateReservMgt;
                                   repeat
                                     ReservEngineMgt.CancelReservation(ReservEntry2);
                                   until ReservEntry2.NEXT = 0;

                                   UpdateReservFrom;
                                 end;
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Name=ShowDocument;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Show Document;
                      ToolTipML=ENU=Open the document that the information on the line comes from.;
                      ApplicationArea=#Jobs;
                      Image=View;
                      OnAction=BEGIN
                                 Job.GET("Job No.");
                                 PAGE.RUN(PAGE::"Job Card",Job);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Status;
                ToolTipML=ENU=Specifies the status of a job order.;
                ApplicationArea=#Jobs;
                SourceExpr=Status;
                ImplicitType=Option }

    { 4   ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies a document number for the planning line.;
                ApplicationArea=#Jobs;
                SourceExpr="Document No.";
                ImplicitType=Code20 }

    { 6   ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the location code for the item on the job planning line.;
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                ImplicitType=Code10 }

    { 8   ;2   ;Field     ;
                Name=Planning Date;
                ToolTipML=ENU=Specifies the date of the planning line. You can use the planning date for filtering the totals of the job, for example, if you want to see the budgeted usage for a specific month of the year.;
                ApplicationArea=#Jobs;
                SourceExpr="Planning Date";
                ImplicitType=Date }

    { 10  ;2   ;Field     ;
                Name=Remaining Qty. (Base);
                ToolTipML=ENU=Specifies the remaining quantity of the resource, item, or general ledger account that remains to complete a job, expressed in base units of measure. The quantity is calculated as the difference between Quantity and Qty. Posted.;
                ApplicationArea=#Jobs;
                SourceExpr="Remaining Qty. (Base)";
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=Reserved Quantity;
                ToolTipML=ENU=Specifies the quantity of the item that is reserved for the job planning line.;
                ApplicationArea=#Jobs;
                SourceExpr="Reserved Quantity";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 17  ;2   ;Field     ;
                Name=QtyToReserveBase;
                CaptionML=ENU=Available Quantity;
                ToolTipML=ENU=Specifies how many units of the item on the line are available for reservation.;
                ApplicationArea=#Jobs;
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserveBase;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=ReservedThisLine;
                CaptionML=ENU=Current Reserved Quantity;
                ToolTipML=ENU=Specifies the quantity of the item on the document that is currently reserved.;
                ApplicationArea=#Jobs;
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine;
                OnDrillDown=BEGIN
                              ReservEntry2.RESET;
                              JobPlanningLineReserve.FilterReservFor(ReservEntry2,Rec);
                              ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                              ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                              PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);
                              UpdateReservFrom;
                              CurrPage.UPDATE;
                            END;
                             }

    { 25  ;2   ;Field     ;
                Name=Work Type Code;
                ToolTipML=ENU=Specifies which work type the resource applies to. Prices are updated based on this entry.;
                ApplicationArea=#Jobs;
                SourceExpr="Work Type Code";
                Visible=FALSE;
                ImplicitType=Code10 }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.';
      Text001@1001 : TextConst 'ENU=Do you want to cancel the reservation?';
      Text003@1002 : TextConst 'ENU=Available Quantity is %1.';
      ReservEntry@1003 : Record "Reservation Entry";
      ReservEntry2@1004 : Record "Reservation Entry";
      Job@1005 : Record Job;
      SalesLine@1006 : Record "Sales Line";
      PurchLine@1007 : Record "Purchase Line";
      ReqLine@1009 : Record "Requisition Line";
      ProdOrderLine@1010 : Record "Prod. Order Line";
      ProdOrderComp@1011 : Record "Prod. Order Component";
      PlanningComponent@1012 : Record "Planning Component";
      ServLine@1013 : Record "Service Line";
      JobPlanningLine@1031 : Record "Job Planning Line";
      TransLine@1014 : Record "Transfer Line";
      AssemblyLine@1036 : Record "Assembly Line";
      AssemblyHeader@1035 : Record "Assembly Header";
      ReservMgt@1015 : Codeunit "Reservation Management";
      ReservEngineMgt@1016 : Codeunit "Reservation Engine Mgt.";
      SalesLineReserve@1032 : Codeunit "Sales Line-Reserve";
      ReqLineReserve@1025 : Codeunit "Req. Line-Reserve";
      PurchLineReserve@1024 : Codeunit "Purch. Line-Reserve";
      ProdOrderLineReserve@1022 : Codeunit "Prod. Order Line-Reserve";
      ProdOrderCompReserve@1021 : Codeunit "Prod. Order Comp.-Reserve";
      PlngComponentReserve@1020 : Codeunit "Plng. Component-Reserve";
      ServLineReserve@1019 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1018 : Codeunit "Job Planning Line-Reserve";
      TransLineReserve@1017 : Codeunit "Transfer Line-Reserve";
      AssemblyLineReserve@1034 : Codeunit "Assembly Line-Reserve";
      AssemblyHeaderReserve@1033 : Codeunit "Assembly Header-Reserve";
      QtyToReserve@1026 : Decimal;
      QtyToReserveBase@1008 : Decimal;
      QtyReservedThisLine@1027 : Decimal;
      QtyReservedThisLineBase@1023 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      NewQtyReservedThisLineBase@1037 : Decimal;
      CaptionText@1029 : Text[80];
      CurrentSubType@1030 : Option;

    [External]
    PROCEDURE SetSalesLine@1(VAR CurrentSalesLine@1000 : Record "Sales Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      SalesLineReserve.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := SalesLineReserve.Caption(SalesLine);
    END;

    [External]
    PROCEDURE SetReqLine@2(VAR CurrentReqLine@1000 : Record "Requisition Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReqLineReserve.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReqLineReserve.Caption(ReqLine);
    END;

    [External]
    PROCEDURE SetPurchLine@3(VAR CurrentPurchLine@1000 : Record "Purchase Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      PurchLineReserve.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := PurchLineReserve.Caption(PurchLine);
    END;

    [External]
    PROCEDURE SetProdOrderLine@16(VAR CurrentProdOrderLine@1000 : Record "Prod. Order Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ProdOrderLineReserve.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ProdOrderLineReserve.Caption(ProdOrderLine);
    END;

    [External]
    PROCEDURE SetProdOrderComponent@15(VAR CurrentProdOrderComp@1000 : Record "Prod. Order Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ProdOrderCompReserve.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ProdOrderCompReserve.Caption(ProdOrderComp);
    END;

    [External]
    PROCEDURE SetPlanningComponent@13(VAR CurrentPlanningComponent@1000 : Record "Planning Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      PlngComponentReserve.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := PlngComponentReserve.Caption(PlanningComponent);
    END;

    [External]
    PROCEDURE SetTransferLine@14(VAR CurrentTransLine@1000 : Record "Transfer Line";CurrentReservEntry@1001 : Record "Reservation Entry";Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      TransLineReserve.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := TransLineReserve.Caption(TransLine);
    END;

    [External]
    PROCEDURE SetServLine@8(VAR CurrentServLine@1000 : Record "Service Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentServLine.TESTFIELD(Type,CurrentServLine.Type::Item);
      ServLine := CurrentServLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ServLineReserve.FilterReservFor(ReservEntry,ServLine);
      CaptionText := ServLineReserve.Caption(ServLine);
    END;

    [External]
    PROCEDURE SetJobPlanningLine@10(VAR CurrentJobPlanningLine@1000 : Record "Job Planning Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    END;

    LOCAL PROCEDURE CreateReservation@6(ReserveQuantity@1001 : Decimal;ReserveQuantityBase@1000 : Decimal);
    VAR
      TrackingSpecification@1002 : Record "Tracking Specification";
    BEGIN
      CALCFIELDS("Reserved Qty. (Base)");
      if ABS("Remaining Qty. (Base)") + "Reserved Qty. (Base)" < ReserveQuantityBase then
        ERROR(Text003,ABS("Remaining Qty. (Base)") + "Reserved Quantity");

      TESTFIELD("No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");
      TESTFIELD("Location Code",ReservEntry."Location Code");

      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Job Planning Line",Status,"Job No.",'',0,"Job Contract Entry No.",
        "Variant Code","Location Code","Qty. per Unit of Measure");
      ReservMgt.CreateReservation(
        ReservEntry.Description,"Planning Date",ReserveQuantity,ReserveQuantityBase,TrackingSpecification);
      UpdateReservFrom;
    END;

    LOCAL PROCEDURE UpdateReservFrom@17();
    BEGIN
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          begin
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          end;
        DATABASE::"Requisition Line":
          begin
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          end;
        DATABASE::"Purchase Line":
          begin
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Line":
          begin
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          end;
        DATABASE::"Planning Component":
          begin
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          end;
        DATABASE::"Transfer Line":
          begin
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          end;
        DATABASE::"Service Line":
          begin
            ServLine.FIND;
            SetServLine(ServLine,ReservEntry);
          end;
        DATABASE::"Job Planning Line":
          begin
            JobPlanningLine.FIND;
            SetJobPlanningLine(JobPlanningLine,ReservEntry);
          end;
      end;
    END;

    LOCAL PROCEDURE UpdateReservMgt@7();
    BEGIN
      CLEAR(ReservMgt);
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServLine);
        DATABASE::"Job Planning Line":
          ReservMgt.SetJobPlanningLine(JobPlanningLine);
        DATABASE::"Assembly Header":
          ReservMgt.SetAssemblyHeader(AssemblyHeader);
      end;
    END;

    LOCAL PROCEDURE ReservedThisLine@5() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      JobPlanningLineReserve.FilterReservFor(ReservEntry2,Rec);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      exit(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    [External]
    PROCEDURE SetCurrentSubType@9(SubType@1000 : Option);
    BEGIN
      CurrentSubType := SubType;
    END;

    [External]
    PROCEDURE SetAssemblyLine@12(VAR CurrentAsmLine@1002 : Record "Assembly Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentAsmLine.TESTFIELD(Type,CurrentAsmLine.Type::Item);
      AssemblyLine := CurrentAsmLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyLineReserve.FilterReservFor(ReservEntry,AssemblyLine);
      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    END;

    [External]
    PROCEDURE SetAssemblyHeader@11(VAR CurrentAsmHeader@1000 : Record "Assembly Header";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      AssemblyHeader := CurrentAsmHeader;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,AssemblyHeader);
      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    END;

    BEGIN
    END.
  }
}

