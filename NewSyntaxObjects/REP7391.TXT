OBJECT Report 7391 Whse. Get Bin Content
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Whse. Get Bin Content;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 4810;    ;DataItem;Bin Content         ;
               DataItemTable="Bin Content";
               OnPreDataItem=BEGIN
                               if not ReportInitialized then
                                 ERROR(Text001);

                               Location.INIT;
                             END;

               OnAfterGetRecord=BEGIN
                                  if BinType.Code <> "Bin Type Code" then
                                    BinType.GET("Bin Type Code");
                                  if BinType.Receive and not "Cross-Dock Bin" then
                                    CurrReport.SKIP;

                                  QtyToEmptyBase := GetQtyToEmptyBase('','');
                                  if QtyToEmptyBase <= 0 then
                                    CurrReport.SKIP;

                                  case DestinationType2 of
                                    DestinationType2::MovementWorksheet:
                                      InsertWWL;
                                    DestinationType2::WhseInternalPutawayHeader:
                                      InsertWIPL;
                                    DestinationType2::ItemJournalLine:
                                      InsertItemJournalLine;
                                    DestinationType2::TransferHeader:
                                      begin
                                        TransferHeader.TESTFIELD("Transfer-from Code","Location Code");
                                        InsertTransferLine;
                                      end;
                                    DestinationType2::InternalMovementHeader:
                                      InsertIntMovementLine;
                                  end;

                                  GetSerialNoAndLotNo;
                                END;

               ReqFilterFields="Location Code","Zone Code","Bin Code","Item No.","Variant Code","Unit of Measure Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               DocNoEditable := true;
               PostingDateEditable := true;
             END;

      OnOpenPage=BEGIN
                   case DestinationType2 of
                     DestinationType2::ItemJournalLine:
                       begin
                         PostingDateEditable := true;
                         DocNoEditable := true;
                       end;
                     else begin
                       PostingDateEditable := false;
                       DocNoEditable := false;
                     end;
                   end;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the posting date that will appear on the journal lines generated by the report.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PostingDate;
                  Editable=PostingDateEditable }

      { 3   ;2   ;Field     ;
                  Name=DocNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the document number that will appear on the journal lines generated by the report.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=DocNo;
                  Editable=DocNoEditable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      WWLine@1000 : Record "Whse. Worksheet Line";
      WIPLine@1004 : Record "Whse. Internal Put-away Line";
      ItemJournalLine@1007 : Record "Item Journal Line";
      TransferHeader@1011 : Record "Transfer Header";
      TransferLine@1010 : Record "Transfer Line";
      BinType@1006 : Record "Bin Type";
      Location@1012 : Record Location;
      InternalMovementHeader@1013 : Record "Internal Movement Header";
      InternalMovementLine@1014 : Record "Internal Movement Line";
      QtyToEmptyBase@1001 : Decimal;
      ReportInitialized@1002 : Boolean;
      Text001@1003 : TextConst 'ENU=Report must be initialized.';
      DestinationType2@1005 : 'MovementWorksheet,WhseInternalPutawayHeader,ItemJournalLine,TransferHeader,InternalMovementHeader';
      PostingDate@1008 : Date;
      DocNo@1009 : Code[20];
      PostingDateEditable@19050785 : Boolean INDATASET;
      DocNoEditable@19079968 : Boolean INDATASET;

    [External]
    PROCEDURE InitializeReport@1(WWL@1000 : Record "Whse. Worksheet Line";WIPH@1001 : Record "Whse. Internal Put-away Header";DestinationType@1002 : Option);
    BEGIN
      DestinationType2 := DestinationType;
      case DestinationType2 of
        DestinationType2::MovementWorksheet:
          begin
            WWLine := WWL;
            WWLine.SETCURRENTKEY("Worksheet Template Name",Name,"Location Code","Line No.");
            WWLine.SETRANGE("Worksheet Template Name",WWLine."Worksheet Template Name");
            WWLine.SETRANGE(Name,WWLine.Name);
            WWLine.SETRANGE("Location Code",WWLine."Location Code");
            if WWLine.FINDLAST then;
          end;
        DestinationType2::WhseInternalPutawayHeader:
          begin
            WIPLine."No." := WIPH."No.";
            WIPLine.SETRANGE("No.",WIPLine."No.");
            if WIPLine.FINDLAST then;
          end;
      end;
      ReportInitialized := true;
    END;

    [External]
    PROCEDURE InitializeItemJournalLine@3(ItemJournalLine2@1003 : Record "Item Journal Line");
    BEGIN
      ItemJournalLine := ItemJournalLine2;
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine2."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine2."Journal Batch Name");
      if ItemJournalLine.FINDLAST then;

      PostingDate := ItemJournalLine2."Posting Date";
      DocNo := ItemJournalLine2."Document No.";

      DestinationType2 := DestinationType2::ItemJournalLine;
      ReportInitialized := true;
    END;

    [External]
    PROCEDURE InitializeTransferHeader@5(TransferHeader2@1003 : Record "Transfer Header");
    BEGIN
      TransferLine.RESET;
      TransferLine.SETRANGE("Document No.",TransferHeader2."No.");
      if not TransferLine.FINDLAST then begin
        TransferLine.INIT;
        TransferLine."Document No." := TransferHeader2."No.";
      end;

      TransferHeader := TransferHeader2;

      DestinationType2 := DestinationType2::TransferHeader;
      ReportInitialized := true;
    END;

    [External]
    PROCEDURE InitializeInternalMovement@12(InternalMovementHeader2@1000 : Record "Internal Movement Header");
    BEGIN
      InternalMovementLine.RESET;
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader2."No.");
      if not InternalMovementLine.FINDLAST then begin
        InternalMovementLine.INIT;
        InternalMovementLine."No." := InternalMovementHeader2."No.";
      end;
      InternalMovementHeader := InternalMovementHeader2;

      DestinationType2 := DestinationType2::InternalMovementHeader;
      ReportInitialized := true;
    END;

    [External]
    PROCEDURE InsertWWL@2();
    BEGIN
      with WWLine do begin
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        "From Zone Code" := "Bin Content"."Zone Code";
        VALIDATE("From Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per From Unit of Measure"));
        if QtyToEmptyBase <> (Quantity * "Qty. per From Unit of Measure") then begin
          "Qty. (Base)" := QtyToEmptyBase;
          "Qty. Outstanding (Base)" := QtyToEmptyBase;
          "Qty. to Handle (Base)" := QtyToEmptyBase;
        end;
        "Whse. Document Type" := "Whse. Document Type"::"Whse. Mov.-Worksheet";
        "Whse. Document No." := Name;
        "Whse. Document Line No." := "Line No.";
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertWIPL@13();
    BEGIN
      with WIPLine do begin
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        "From Zone Code" := "Bin Content"."Zone Code";
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        if QtyToEmptyBase <> (Quantity * "Qty. per Unit of Measure") then begin
          "Qty. (Base)" := QtyToEmptyBase;
          "Qty. Outstanding (Base)" := QtyToEmptyBase;
        end;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertItemJournalLine@4();
    VAR
      ItemJournalTempl@1000 : Record "Item Journal Template";
    BEGIN
      with ItemJournalLine do begin
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Entry Type","Entry Type"::Transfer);
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Document No.",DocNo);
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("New Location Code","Bin Content"."Location Code");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("Bin Code","Bin Content"."Bin Code");
        VALIDATE("New Bin Code",'');
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        ItemJournalTempl.GET("Journal Template Name");
        "Source Code" := ItemJournalTempl."Source Code";
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertTransferLine@9();
    BEGIN
      with TransferLine do begin
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("Transfer-from Bin Code","Bin Content"."Bin Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertIntMovementLine@11();
    BEGIN
      with InternalMovementLine do begin
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        VALIDATE("To Bin Code",InternalMovementHeader."To Bin Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        INSERT;
      end;
    END;

    [External]
    PROCEDURE GetSerialNoAndLotNo@6();
    VAR
      WarehouseEntry@1000 : Record "Warehouse Entry";
      TempTrackingSpecification@1006 : TEMPORARY Record "Tracking Specification";
      ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
      ReserveItemJnlLine@1001 : Codeunit "Item Jnl. Line-Reserve";
      ReserveTransferLine@1005 : Codeunit "Transfer Line-Reserve";
      Direction@1008 : 'Outbound,Inbound';
      SNRequired@1004 : Boolean;
      LNRequired@1003 : Boolean;
      TrackedQtyToEmptyBase@1007 : Decimal;
      TotalTrackedQtyBase@1009 : Decimal;
    BEGIN
      CLEAR(ItemTrackingMgt);
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Bin Content"."Item No.",SNRequired,LNRequired,false);
      if not (SNRequired or LNRequired) then
        exit;

      with WarehouseEntry do begin
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.","Bin Content"."Item No.");
        SETRANGE("Bin Code","Bin Content"."Bin Code");
        SETRANGE("Location Code","Bin Content"."Location Code");
        SETRANGE("Variant Code","Bin Content"."Variant Code");
        SETRANGE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        if FINDSET then
          repeat
            if TrackingExists then begin
              if "Lot No." <> '' then
                SETRANGE("Lot No.","Lot No.");
              if "Serial No." <> '' then
                SETRANGE("Serial No.","Serial No.");

              TrackedQtyToEmptyBase := GetQtyToEmptyBase("Lot No.","Serial No.");
              TotalTrackedQtyBase += TrackedQtyToEmptyBase;

              if TrackedQtyToEmptyBase > 0 then begin
                GetLocation("Location Code",Location);
                ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.","Expiration Date");

                case DestinationType2 of
                  DestinationType2::MovementWorksheet:
                    WWLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",TrackedQtyToEmptyBase);
                  DestinationType2::WhseInternalPutawayHeader:
                    WIPLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",TrackedQtyToEmptyBase);
                  DestinationType2::ItemJournalLine:
                    TempTrackingSpecification.InitFromItemJnlLine(ItemJournalLine);
                  DestinationType2::TransferHeader:
                    TempTrackingSpecification.InitFromTransLine(
                      TransferLine,TransferLine."Shipment Date",Direction::Outbound);
                  DestinationType2::InternalMovementHeader:
                    InternalMovementLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",TrackedQtyToEmptyBase);
                end;
              end;
              FIND('+');
              SETRANGE("Lot No.");
              SETRANGE("Serial No.");
            end;
            if DestinationType2 in [DestinationType2::ItemJournalLine,DestinationType2::TransferHeader] then
              InsertTempTrackingSpec(WarehouseEntry,TrackedQtyToEmptyBase,TempTrackingSpecification);
          until NEXT = 0;
        if TotalTrackedQtyBase > QtyToEmptyBase then
          exit;
        case DestinationType2 of
          DestinationType2::ItemJournalLine:
            ReserveItemJnlLine.RegisterBinContentItemTracking(ItemJournalLine,TempTrackingSpecification);
          DestinationType2::TransferHeader:
            ReserveTransferLine.RegisterBinContentItemTracking(TransferLine,TempTrackingSpecification);
        end;
      end;
    END;

    LOCAL PROCEDURE GetLocation@8(LocationCode@1001 : Code[10];VAR Location@1000 : Record Location);
    BEGIN
      if LocationCode = Location.Code then
        exit;

      if LocationCode = '' then
        Location.INIT
      else
        Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE InsertTempTrackingSpec@7(WarehouseEntry@1000 : Record "Warehouse Entry";QtyOnBin@1001 : Decimal;VAR TempTrackingSpecification@1002 : TEMPORARY Record "Tracking Specification");
    BEGIN
      with WarehouseEntry do begin
        TempTrackingSpecification.SetSkipSerialNoQtyValidation(true);
        TempTrackingSpecification.VALIDATE("Serial No.","Serial No.");
        TempTrackingSpecification.SetSkipSerialNoQtyValidation(false);
        TempTrackingSpecification."New Serial No." := "Serial No.";
        TempTrackingSpecification.VALIDATE("Lot No.","Lot No.");
        TempTrackingSpecification."New Lot No." := "Lot No.";
        TempTrackingSpecification."Quantity Handled (Base)" := 0;
        TempTrackingSpecification."Expiration Date" := "Expiration Date";
        TempTrackingSpecification."New Expiration Date" := "Expiration Date";
        TempTrackingSpecification.VALIDATE("Quantity (Base)",QtyOnBin);
        TempTrackingSpecification."Entry No." += 1;
        TempTrackingSpecification.INSERT;
      end;
    END;

    LOCAL PROCEDURE CalcQtyUOM@10(QtyBase@1000 : Decimal;QtyPerUOM@1001 : Decimal) : Decimal;
    BEGIN
      if QtyPerUOM = 0 then
        exit(0);

      exit(ROUND(QtyBase / QtyPerUOM,0.00001));
    END;

    LOCAL PROCEDURE GetQtyToEmptyBase@47(LotNo@1001 : Code[20];SerialNo@1002 : Code[20]) : Decimal;
    VAR
      BinContent@1000 : Record "Bin Content";
    BEGIN
      with BinContent do begin
        INIT;
        COPY("Bin Content");
        FILTERGROUP(8);
        if LotNo <> '' then
          SETRANGE("Lot No. Filter",LotNo);
        if SerialNo <> '' then
          SETRANGE("Serial No. Filter",SerialNo);
        if DestinationType2 = DestinationType2::TransferHeader then
          exit(CalcQtyAvailToPick(0));
        exit(CalcQtyAvailToTake(0));
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

