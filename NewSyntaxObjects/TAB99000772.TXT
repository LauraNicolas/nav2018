OBJECT Table 99000772 Production BOM Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatus;
             END;

    OnModify=BEGIN
               if Type <> Type::" " then
                 TestStatus;
             END;

    OnDelete=VAR
               ProdBOMComment@1000 : Record "Production BOM Comment Line";
               PlanningAssignment@1001 : Record "Planning Assignment";
             BEGIN
               if Type <> Type::" " then begin
                 TestStatus;
                 if Type = Type::Item then
                   PlanningAssignment.AssignPlannedOrders("No.",false)
                 else
                   if Type = Type::"Production BOM" then
                     PlanningAssignment.OldBom("No.");
               end;

               ProdBOMComment.SETRANGE("Production BOM No.","Production BOM No.");
               ProdBOMComment.SETRANGE("BOM Line No.","Line No.");
               ProdBOMComment.SETRANGE("Version Code","Version Code");
               ProdBOMComment.DELETEALL;
             END;

    CaptionML=ENU=Production BOM Line;
  }
  FIELDS
  {
    { 1   ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header";
                                                   CaptionML=ENU=Production BOM No.;
                                                   NotBlank=true }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Version Code        ;Code20        ;TableRelation="Production BOM Version"."Version Code" WHERE ("Production BOM No."=FIELD("Production BOM No."));
                                                   CaptionML=ENU=Version Code }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestStatus;

                                                                xRec.Type := Type;

                                                                INIT;
                                                                Type := xRec.Type;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Item,Production BOM";
                                                   OptionString=" ",Item,"Production BOM" }
    { 11  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Type=CONST("Production BOM")) "Production BOM Header";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type);

                                                                TestStatus;

                                                                case Type of
                                                                  Type::Item:
                                                                    begin
                                                                      Item.GET("No.");
                                                                      Description := Item.Description;
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                      "Scrap %" := Item."Scrap %";
                                                                      if "No." <> xRec."No." then
                                                                        "Variant Code" := '';
                                                                    end;
                                                                  Type::"Production BOM":
                                                                    begin
                                                                      ProdBOMHeader.GET("No.");
                                                                      ProdBOMHeader.TESTFIELD("Unit of Measure Code");
                                                                      Description := ProdBOMHeader.Description;
                                                                      "Unit of Measure Code" := ProdBOMHeader."Unit of Measure Code";
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 12  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 13  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST("Production BOM")) "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                if xRec."Unit of Measure Code" <> "Unit of Measure Code" then
                                                                  TESTFIELD(Type,Type::Item);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 14  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 15  ;   ;Position            ;Code10        ;CaptionML=ENU=Position }
    { 16  ;   ;Position 2          ;Code10        ;CaptionML=ENU=Position 2 }
    { 17  ;   ;Position 3          ;Code10        ;CaptionML=ENU=Position 3 }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                              END;

                                                   CaptionML=ENU=Lead-Time Offset }
    { 19  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   OnValidate=BEGIN
                                                                if "Routing Link Code" <> '' then begin
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Routing Link Code }
    { 20  ;   ;Scrap %             ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                              END;

                                                   CaptionML=ENU=Scrap %;
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100;
                                                   BlankNumbers=BlankNeg }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   OnValidate=BEGIN
                                                                if "Variant Code" = '' then
                                                                  exit;
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");
                                                                ItemVariant.GET("No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 22  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Production BOM Comment Line" WHERE ("Production BOM No."=FIELD("Production BOM No."),
                                                                                                          "Version Code"=FIELD("Version Code"),
                                                                                                          "BOM Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 28  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                if "Starting Date" > 0D then
                                                                  VALIDATE("Ending Date");
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 29  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                if ("Ending Date" > 0D) and
                                                                   ("Starting Date" > 0D) and
                                                                   ("Starting Date" > "Ending Date")
                                                                then
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Ending Date"),
                                                                    FIELDCAPTION("Starting Date"));
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 40  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Depth               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=ENU=Depth;
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Calculation Formula ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                case "Calculation Formula" of
                                                                  "Calculation Formula"::" ":
                                                                    Quantity := "Quantity per";
                                                                  "Calculation Formula"::Length:
                                                                    Quantity := ROUND(Length * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width":
                                                                    Quantity := ROUND(Length * Width * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width * Depth":
                                                                    Quantity := ROUND(Length * Width * Depth * "Quantity per",0.00001);
                                                                  "Calculation Formula"::Weight:
                                                                    Quantity := ROUND(Weight * "Quantity per",0.00001);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Calculation Formula;
                                                   OptionCaptionML=ENU=" ,Length,Length * Width,Length * Width * Depth,Weight";
                                                   OptionString=" ",Length,"Length * Width","Length * Width * Depth",Weight }
    { 45  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=ENU=Quantity per;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"Production BOM No.","Version Code","Line No.";
                                                   Clustered=true }
    {    ;Type,"No."                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be later than %2.';
      Item@1001 : Record Item;
      ProdBOMHeader@1002 : Record "Production BOM Header";
      ItemVariant@1003 : Record "Item Variant";
      BOMVersionUOMErr@1004 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.;%4=Version Code";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4."';
      BOMHeaderUOMErr@1005 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3."';
      BOMLineUOMErr@1006 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.;%4=Version Code;%5=Line No.";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4, Line No. = %5."';

    LOCAL PROCEDURE TestStatus@1();
    VAR
      ProdBOMVersion@1000 : Record "Production BOM Version";
    BEGIN
      if "Version Code" = '' then begin
        ProdBOMHeader.GET("Production BOM No.");
        if ProdBOMHeader.Status = ProdBOMHeader.Status::Certified then
          ProdBOMHeader.FIELDERROR(Status);
      end else begin
        ProdBOMVersion.GET("Production BOM No.","Version Code");
        if ProdBOMVersion.Status = ProdBOMVersion.Status::Certified then
          ProdBOMVersion.FIELDERROR(Status);
      end;
    END;

    [External]
    PROCEDURE GetQtyPerUnitOfMeasure@2() : Decimal;
    VAR
      Item@1000 : Record Item;
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      if Type = Type::Item then begin
        Item.GET("No.");
        exit(
          UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
      end;
      exit(1);
    END;

    [External]
    PROCEDURE GetBOMHeaderQtyPerUOM@3(Item@1000 : Record Item) : Decimal;
    VAR
      ProdBOMHeader@1003 : Record "Production BOM Header";
      ProdBOMVersion@1002 : Record "Production BOM Version";
      ItemUnitOfMeasure@1004 : Record "Item Unit of Measure";
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      if "Production BOM No." = '' then
        exit(1);

      if "Version Code" <> '' then begin
        ProdBOMVersion.GET("Production BOM No.","Version Code");
        if not ItemUnitOfMeasure.GET(Item."No.",ProdBOMVersion."Unit of Measure Code") then
          ERROR(BOMVersionUOMErr,ProdBOMVersion."Unit of Measure Code",Item."No.","Production BOM No.","Version Code");
        exit(UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMVersion."Unit of Measure Code"));
      end;

      ProdBOMHeader.GET("Production BOM No.");
      if not ItemUnitOfMeasure.GET(Item."No.",ProdBOMHeader."Unit of Measure Code") then
        ERROR(BOMHeaderUOMErr,ProdBOMHeader."Unit of Measure Code",Item."No.","Production BOM No.");
      exit(UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMHeader."Unit of Measure Code"));
    END;

    [External]
    PROCEDURE GetBOMLineQtyPerUOM@4(Item@1000 : Record Item) : Decimal;
    VAR
      ItemUnitOfMeasure@1001 : Record "Item Unit of Measure";
      UOMMgt@1002 : Codeunit "Unit of Measure Management";
    BEGIN
      if "No." = '' then
        exit(1);

      if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
        ERROR(BOMLineUOMErr,"Unit of Measure Code",Item."No.","Production BOM No.","Version Code","Line No.");
      exit(UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
    END;

    BEGIN
    END.
  }
}

