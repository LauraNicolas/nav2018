OBJECT Codeunit 99000793 Calculate Low-Level Code
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo=Item;
    Permissions=TableData Item=rm,
                TableData "Manufacturing Setup"=r;
    OnRun=VAR
            ProdBOM@1000 : Record "Production BOM Header";
            Item2@1001 : Record Item;
          BEGIN
            Item2.COPY(Rec);
            Item := Item2; // to store the last item- used in RecalcLowerLevels
            Item2."Low-Level Code" := CalcLevels(1,Item2."No.",0,0);
            if ProdBOM.GET(Item."Production BOM No.") then
              SetRecursiveLevelsOnBOM(ProdBOM,Item2."Low-Level Code" + 1,false);
            Item2.MODIFY;
            COPY(Item2);
          END;

  }
  CODE
  {
    VAR
      ProdBomErr@1000 : TextConst 'ENU=The maximum number of BOM levels, %1, was exceeded. The process stopped at item number %2, BOM header number %3, BOM level %4.';
      Item@1001 : Record Item;
      ActualProdBOM@1002 : Record "Production BOM Header";

    [External]
    PROCEDURE CalcLevels@4(Type@1000 : '" ",Item,"Production BOM",Assembly';No@1001 : Code[20];Level@1002 : Integer;LevelDepth@1003 : Integer) : Integer;
    VAR
      Item2@1004 : Record Item;
      ProdBOMHeader@1005 : Record "Production BOM Header";
      ProdBOMLine@1006 : Record "Production BOM Line";
      AsmBOMComp@1009 : Record "BOM Component";
      ProductionBOMVersion@1011 : Record "Production BOM Version";
      ActLevel@1007 : Integer;
      TotalLevels@1008 : Integer;
      CalculateDeeperLevel@1010 : Boolean;
    BEGIN
      if LevelDepth > 50 then
        ERROR(ProdBomErr,50,Item."No.",No,Level);

      TotalLevels := Level;

      case Type of
        Type::"Production BOM":
          begin
            Item2.SETCURRENTKEY("Production BOM No.");
            Item2.SETRANGE("Production BOM No.",No);
            if Item2.FINDSET then
              repeat
                ActLevel := CalcLevels(Type::Item,Item2."No.",Level + 1,LevelDepth + 1);
                if ActLevel > TotalLevels then
                  TotalLevels := ActLevel;
              until Item2.NEXT = 0;
          end;
        Type::Assembly:
          begin
            Item2.GET(No);
            ActLevel := CalcLevels(Type::Item,Item2."No.",Level + 1,LevelDepth + 1);
            if ActLevel > TotalLevels then
              TotalLevels := ActLevel;
          end;
        else
          Item2.GET(No);
      end;

      AsmBOMComp.SETCURRENTKEY(Type,"No.");
      AsmBOMComp.SETRANGE(Type,Type);
      AsmBOMComp.SETRANGE("No.",No);
      if AsmBOMComp.FINDSET then
        repeat
          ActLevel := CalcLevels(Type::Assembly,AsmBOMComp."Parent Item No.",Level,LevelDepth + 1);
          if ActLevel > TotalLevels then
            TotalLevels := ActLevel;
        until AsmBOMComp.NEXT = 0;

      ProdBOMLine.SETCURRENTKEY(Type,"No.");
      ProdBOMLine.SETRANGE(Type,Type);
      ProdBOMLine.SETRANGE("No.",No);
      if ProdBOMLine.FINDSET then
        repeat
          if ProdBOMHeader.GET(ProdBOMLine."Production BOM No.") then begin
            if ProdBOMHeader."No." = ActualProdBOM."No." then
              ERROR(ProdBomErr,50,Item."No.",No,Level);

            if ProdBOMLine."Version Code" <> '' then begin
              ProductionBOMVersion.GET(ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code");
              CalculateDeeperLevel := ProductionBOMVersion.Status = ProductionBOMVersion.Status::Certified;
            end else
              CalculateDeeperLevel := ProdBOMHeader.Status = ProdBOMHeader.Status::Certified;

            if CalculateDeeperLevel then begin
              ActLevel := CalcLevels(Type::"Production BOM",ProdBOMLine."Production BOM No.",Level,LevelDepth + 1);
              if ActLevel > TotalLevels then
                TotalLevels := ActLevel;
            end;
          end;
        until ProdBOMLine.NEXT = 0;

      exit(TotalLevels);
    END;

    [External]
    PROCEDURE RecalcLowerLevels@3(ProdBOMNo@1000 : Code[20];LowLevelCode@1001 : Integer;IgnoreMissingItemsOrBOMs@1002 : Boolean);
    VAR
      CompItem@1003 : Record Item;
      CompBOM@1004 : Record "Production BOM Header";
      ProdBOMLine@1005 : Record "Production BOM Line";
      ProductionBOMVersion@1008 : Record "Production BOM Version";
      EntityPresent@1006 : Boolean;
      CalculateDeeperLevel@1007 : Boolean;
    BEGIN
      if LowLevelCode > 50 then
        ERROR(ProdBomErr,50,Item."No.",ProdBOMNo,LowLevelCode);

      ProdBOMLine.SETRANGE("Production BOM No.",ProdBOMNo);
      ProdBOMLine.SETFILTER("No.",'<>%1','');

      if ProdBOMLine.FINDSET then
        repeat
          if ProdBOMLine."Version Code" <> '' then begin
            ProductionBOMVersion.GET(ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code");
            CalculateDeeperLevel := ProductionBOMVersion.Status <> ProductionBOMVersion.Status::Closed;
          end else begin
            CompBOM.GET(ProdBOMLine."Production BOM No.");
            CalculateDeeperLevel := CompBOM.Status <> CompBOM.Status::Closed;
          end;

          // closed BOMs are skipped
          if CalculateDeeperLevel then
            case ProdBOMLine.Type of
              ProdBOMLine.Type::Item:
                begin
                  EntityPresent := CompItem.GET(ProdBOMLine."No.");
                  if EntityPresent or (not IgnoreMissingItemsOrBOMs) then
                    SetRecursiveLevelsOnItem(CompItem,LowLevelCode,IgnoreMissingItemsOrBOMs);
                end;
              ProdBOMLine.Type::"Production BOM":
                begin
                  EntityPresent := CompBOM.GET(ProdBOMLine."No.");
                  if EntityPresent or (not IgnoreMissingItemsOrBOMs) then
                    SetRecursiveLevelsOnBOM(CompBOM,LowLevelCode,IgnoreMissingItemsOrBOMs);
                end
            end;
        until ProdBOMLine.NEXT = 0;
    END;

    [External]
    PROCEDURE RecalcAsmLowerLevels@7(ParentItemNo@1000 : Code[20];LowLevelCode@1001 : Integer;IgnoreMissingItemsOrBOMs@1002 : Boolean);
    VAR
      CompItem@1003 : Record Item;
      BOMComp@1004 : Record "BOM Component";
      EntityPresent@1006 : Boolean;
    BEGIN
      if LowLevelCode > 50 then
        ERROR(ProdBomErr,50,Item."No.",Item."No.",LowLevelCode);

      BOMComp.SETRANGE("Parent Item No.",ParentItemNo);
      BOMComp.SETRANGE(Type,BOMComp.Type::Item);
      BOMComp.SETFILTER("No.",'<>%1','');
      if BOMComp.FINDSET then
        repeat
          EntityPresent := CompItem.GET(BOMComp."No.");
          if EntityPresent or not IgnoreMissingItemsOrBOMs then
            SetRecursiveLevelsOnItem(CompItem,LowLevelCode,IgnoreMissingItemsOrBOMs);
        until BOMComp.NEXT = 0;
    END;

    [External]
    PROCEDURE SetRecursiveLevelsOnItem@2(VAR CompItem@1000 : Record Item;LowLevelCode@1001 : Integer;IgnoreMissingItemsOrBOMs@1002 : Boolean);
    VAR
      CompBOM@1005 : Record "Production BOM Header";
      xLowLevelCode@1003 : Integer;
      EntityPresent@1004 : Boolean;
    BEGIN
      Item := CompItem; // to store the last item- used in RecalcLowerLevels
      xLowLevelCode := CompItem."Low-Level Code";
      CompItem."Low-Level Code" := GetMax(Item."Low-Level Code",LowLevelCode);
      if xLowLevelCode <> CompItem."Low-Level Code" then begin
        CompItem.CALCFIELDS("Assembly BOM");
        if CompItem."Assembly BOM" then
          RecalcAsmLowerLevels(CompItem."No.",CompItem."Low-Level Code" + 1,IgnoreMissingItemsOrBOMs);
        if CompItem."Production BOM No." <> '' then begin
          // calc low level code for BOM set in the item
          EntityPresent := CompBOM.GET(CompItem."Production BOM No.");
          if EntityPresent or (not IgnoreMissingItemsOrBOMs) then
            SetRecursiveLevelsOnBOM(CompBOM,CompItem."Low-Level Code" + 1,IgnoreMissingItemsOrBOMs);
        end;
        CompItem.MODIFY;
      end;
    END;

    LOCAL PROCEDURE SetRecursiveLevelsOnBOM@1(VAR CompBOM@1000 : Record "Production BOM Header";LowLevelCode@1001 : Integer;IgnoreMissingItemsOrBOMs@1002 : Boolean);
    VAR
      xLowLevelCode@1003 : Integer;
    BEGIN
      xLowLevelCode := CompBOM."Low-Level Code";
      if CompBOM.Status = CompBOM.Status::Certified then begin
        // set low level on this BOM
        CompBOM."Low-Level Code" := GetMax(CompBOM."Low-Level Code",LowLevelCode);
        if xLowLevelCode <> CompBOM."Low-Level Code" then begin
          RecalcLowerLevels(CompBOM."No.",LowLevelCode,IgnoreMissingItemsOrBOMs);
          CompBOM.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE GetMax@8(Level1@1000 : Integer;Level2@1001 : Integer) Result : Integer;
    BEGIN
      if Level1 > Level2 then
        Result := Level1
      else
        Result := Level2;
    END;

    [External]
    PROCEDURE SetActualProdBOM@5(ActualProdBOM2@1000 : Record "Production BOM Header");
    BEGIN
      ActualProdBOM := ActualProdBOM2;
    END;

    BEGIN
    END.
  }
}

