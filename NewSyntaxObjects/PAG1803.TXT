OBJECT Page 1803 Assisted Company Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Company Setup;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Config. Setup";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Step 4,Step 5;
    ShowFilter=false;
    OnInit=BEGIN
             InitializeRecord;
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 ResetWizardControls;
                 ShowIntroStep;
                 TypeSelectionEnabled := LoadConfigTypes and not PackageImported;
               END;

    OnAfterGetRecord=BEGIN
                       LogoPositionOnDocumentsShown := Picture.HASVALUE;
                     END;

    OnQueryClosePage=VAR
                       AssistedSetup@1000 : Record "Assisted Setup";
                     BEGIN
                       if CloseAction = ACTION::OK then
                         if AssistedSetup.GetStatus(PAGE::"Assisted Company Setup Wizard") = AssistedSetup.Status::"Not Completed" then
                           if not CONFIRM(NotSetUpQst,false) then
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      Name=ActionContainer4;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackEnabled;
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(true);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextEnabled;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 if (Step = Step::"Select Type") and not (TypeStandard or TypeEvaluation) then
                                   if not CONFIRM(NoSetupTypeSelectedQst,false) then
                                     ERROR('');
                                 NextStep(false);
                               END;
                                }
      { 1       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishEnabled;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=VAR
                                 AssistedSetup@1001 : Record "Assisted Setup";
                                 AssistedCompanySetup@1000 : Codeunit "Assisted Company Setup";
                               BEGIN
                                 AssistedCompanySetup.WaitForPackageImportToComplete;
                                 BankAccount.TRANSFERFIELDS(TempBankAccount,true);
                                 AssistedCompanySetup.ApplyUserInput(Rec,BankAccount,AccountingPeriodStartDate,TypeEvaluation);
                                 AssistedSetup.SetStatus(PAGE::"Assisted Company Setup Wizard",AssistedSetup.Status::Completed);
                                 if (BankAccount."No." <> '') and (not TempOnlineBankAccLink.ISEMPTY) then
                                   BankAccount.OnMarkAccountLinkedEvent(TempOnlineBankAccLink,BankAccount);
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Name=Group96;
                Visible=TopBannerVisible AND NOT DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 97  ;2   ;Field     ;
                Name=MediaResourcesStandard;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 98  ;1   ;Group     ;
                Name=Group98;
                Visible=TopBannerVisible AND DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 99  ;2   ;Field     ;
                Name=MediaResourcesDone;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 8   ;1   ;Group     ;
                Name=Group8;
                Visible=IntroVisible;
                GroupType=Group }

    { 5   ;2   ;Group     ;
                Name=Welcome to Company Setup.;
                CaptionML=ENU=Welcome to Company Setup.;
                GroupType=Group;
                InstructionalTextML=ENU=To prepare Dynamics 365 for Finance and Operations, Business edition for first use, you must specify some basic information about your company. This information is used on your external documents, such as sales invoices, and includes your company logo and bank information. You must also set up the fiscal year. }

    { 11  ;2   ;Group     ;
                Name=Let's go!;
                CaptionML=ENU=Let's go!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next so you can specify basic company information. }

    { 39  ;1   ;Group     ;
                Name=Group39;
                Visible=SyncVisible;
                GroupType=Group }

    { 40  ;2   ;Group     ;
                Name=Group40;
                GroupType=Group;
                InstructionalTextML=ENU=Synchronize Company Information with Office 365 Business Profile. }

    { 43  ;2   ;Group     ;
                Name=Group43;
                GroupType=Group;
                InstructionalTextML=ENU=If you are using the Office 365 Business center, we can keep your Dynamics 365 for Finance and Operations, Business edition company information, like your company logo and contact information, synchronized with the Business profile displayed in your Business center. }

    { 49  ;2   ;Group     ;
                Name=Group49;
                GroupType=Group;
                InstructionalTextML=ENU=If you've already set up your Office 365 Business profile, we can fill in your company information here with what you've already entered. If you haven't yet set up your O365 Business profile, we can create your Business profile and keep you you in sync with O365 based on what you enter here. }

    { 38  ;3   ;Field     ;
                Name=Sync with O365 Business profile;
                CaptionML=ENU=Synchronize with Office 365 Business profile;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SyncEnabled;
                OnValidate=VAR
                             CompanyInformation@1000 : Record "Company Information";
                           BEGIN
                             CompanyInformation.VALIDATE("Sync with O365 Bus. profile",SyncEnabled);
                             CompanyInformation.MODIFY(true);
                           END;

                ImplicitType=Boolean }

    { 18  ;1   ;Group     ;
                Name=Group18;
                Visible=SelectTypeVisible AND TypeSelectionEnabled;
                GroupType=Group }

    { 22  ;2   ;Group     ;
                Name=Standard Setup;
                CaptionML=ENU=Standard Setup;
                Visible=StandardVisible;
                GroupType=Group;
                InstructionalTextML=ENU=The company will be ready to use when Setup has completed. }

    { 19  ;3   ;Field     ;
                Name=Standard;
                CaptionML=ENU=Set up as Standard;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeStandard;
                OnValidate=BEGIN
                             if TypeStandard then
                               TypeEvaluation := false;
                             CalcCompanyData;
                           END;

                ImplicitType=Boolean }

    { 23  ;2   ;Group     ;
                Name=Evaluation Setup;
                CaptionML=ENU=Evaluation Setup;
                Visible=EvaluationVisible;
                GroupType=Group;
                InstructionalTextML=ENU=The company will be set up in demonstration mode for exploring and testing. }

    { 20  ;3   ;Field     ;
                Name=Evaluation;
                CaptionML=ENU=Set up as Evaluation;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeEvaluation;
                OnValidate=BEGIN
                             if TypeEvaluation then
                               TypeStandard := false;
                             CalcCompanyData;
                           END;

                ImplicitType=Boolean }

    { 17  ;2   ;Group     ;
                Name=Important;
                CaptionML=ENU=Important;
                Visible=TypeStandard OR TypeEvaluation;
                GroupType=Group;
                InstructionalTextML=ENU=You cannot change your choice of setup after you choose Next. }

    { 56  ;1   ;Group     ;
                Name=Group56;
                Visible=CompanyDetailsVisible;
                GroupType=Group }

    { 12  ;2   ;Group     ;
                Name=Specify your company's address information and logo.;
                CaptionML=ENU=Specify your company's address information and logo.;
                GroupType=Group;
                InstructionalTextML=ENU=This is used in invoices and other documents where general information about your company is printed. }

    { 55  ;3   ;Field     ;
                Name=Name;
                CaptionML=ENU=Company Name;
                ApplicationArea=#Basic,#Suite;
                NotBlank=true;
                SourceExpr=Name;
                ImplicitType=Text50;
                ShowMandatory=TRUE }

    { 54  ;3   ;Field     ;
                Name=Address;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Address;
                ImplicitType=Text50 }

    { 53  ;3   ;Field     ;
                Name=Address 2;
                ApplicationArea=#Advanced;
                SourceExpr="Address 2";
                Visible=FALSE;
                ImplicitType=Text50 }

    { 52  ;3   ;Field     ;
                Name=Post Code;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code";
                ImplicitType=Code20 }

    { 51  ;3   ;Field     ;
                Name=City;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=City;
                ImplicitType=Text30 }

    { 50  ;3   ;Field     ;
                Name=Country/Region Code;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                TableRelation="Country/Region".Code;
                ImplicitType=Code10 }

    { 48  ;3   ;Field     ;
                Name=VAT Registration No.;
                ApplicationArea=#Advanced;
                SourceExpr="VAT Registration No.";
                Visible=FALSE;
                ImplicitType=Text20 }

    { 47  ;3   ;Field     ;
                Name=Industrial Classification;
                ApplicationArea=#Advanced;
                NotBlank=true;
                SourceExpr="Industrial Classification";
                Visible=FALSE;
                ImplicitType=Text30;
                ShowMandatory=TRUE }

    { 10  ;3   ;Field     ;
                Name=Picture;
                CaptionML=ENU=Company Logo;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Picture;
                OnValidate=BEGIN
                             LogoPositionOnDocumentsShown := Picture.HASVALUE;
                             if LogoPositionOnDocumentsShown then begin
                               if "Logo Position on Documents" = "Logo Position on Documents"::"No Logo" then
                                 "Logo Position on Documents" := "Logo Position on Documents"::Right;
                             end else
                               "Logo Position on Documents" := "Logo Position on Documents"::"No Logo";
                             CurrPage.UPDATE(true);
                           END;

                ImplicitType=BLOB }

    { 30  ;3   ;Field     ;
                Name=Logo Position on Documents;
                ApplicationArea=#Advanced;
                SourceExpr="Logo Position on Documents";
                Editable=LogoPositionOnDocumentsShown;
                ImplicitType=Option }

    { 45  ;1   ;Group     ;
                Name=Group45;
                Visible=CommunicationDetailsVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                Name=Specify the contact details for your company.;
                CaptionML=ENU=Specify the contact details for your company.;
                GroupType=Group;
                InstructionalTextML=ENU=This is used in invoices and other documents where general information about your company is printed. }

    { 44  ;3   ;Field     ;
                Name=Phone No.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No.";
                OnValidate=VAR
                             TypeHelper@1000 : Codeunit "Type Helper";
                           BEGIN
                             if "Phone No." = '' then
                               exit;

                             if not TypeHelper.IsPhoneNumber("Phone No.") then
                               ERROR(InvalidPhoneNumberErr)
                           END;

                ImplicitType=Text30 }

    { 42  ;3   ;Field     ;
                Name=E-Mail;
                ExtendedDatatype=E-Mail;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="E-Mail";
                OnValidate=VAR
                             MailManagement@1000 : Codeunit "Mail Management";
                           BEGIN
                             if "E-Mail" = '' then
                               exit;

                             MailManagement.CheckValidEmailAddress("E-Mail");
                           END;

                ImplicitType=Text80 }

    { 41  ;3   ;Field     ;
                Name=Home Page;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Home Page";
                OnValidate=VAR
                             WebRequestHelper@1000 : Codeunit "Web Request Helper";
                           BEGIN
                             if "Home Page" = '' then
                               exit;

                             WebRequestHelper.IsValidUriWithoutProtocol("Home Page");
                           END;

                ImplicitType=Text80 }

    { 29  ;1   ;Group     ;
                Name=Group29;
                Visible=BankStatementConfirmationVisible;
                GroupType=Group }

    { 25  ;2   ;Group     ;
                Name=Bank Feed Service;
                CaptionML=ENU=Bank Feed Service;
                GroupType=Group;
                InstructionalTextML=ENU=You can use a bank feeds service to import electronic bank statements from your bank to quickly process payments. }

    { 46  ;3   ;Field     ;
                Name=UseBankStatementFeed;
                CaptionML=ENU=Use a bank feed service;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=UseBankStatementFeed;
                ImplicitType=Boolean }

    { 26  ;2   ;Group     ;
                Name=NOTE:;
                CaptionML=ENU=NOTE:;
                Visible=UseBankStatementFeed;
                GroupType=Group;
                InstructionalTextML=ENU=When you choose Next, you accept the terms of use for the bank feed service. }

    { 28  ;3   ;Field     ;
                Name=TermsOfUseLbl;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TermsOfUseLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(TermsOfUseUrlTxt);
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 32  ;1   ;Group     ;
                Name=Select bank account.;
                CaptionML=ENU=Select bank account.;
                Visible=SelectBankAccountVisible;
                GroupType=Group }

    { 24  ;2   ;Part      ;
                Name=OnlineBanckAccountLinkPagePart;
                ApplicationArea=#Basic,#Suite;
                PagePartID="Online Bank Accounts";
                PartType=Page }

    { 37  ;1   ;Group     ;
                Name=Group37;
                Visible=PaymentDetailsVisible;
                GroupType=Group }

    { 14  ;2   ;Group     ;
                Name=Specify your company's bank information.;
                CaptionML=ENU=Specify your company's bank information.;
                GroupType=Group;
                InstructionalTextML=ENU=This information is included on documents that you send to customer and vendors to inform about payments to your bank account. }

    { 36  ;3   ;Field     ;
                Name=Bank Name;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Name";
                ImplicitType=Text50 }

    { 35  ;3   ;Field     ;
                Name=Bank Branch No.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Branch No.";
                ImplicitType=Text20 }

    { 34  ;3   ;Field     ;
                Name=Bank Account No.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Account No.";
                OnValidate=BEGIN
                             ShowBankAccountCreationWarning := not ValidateBankAccountNotEmpty;
                           END;

                ImplicitType=Text30 }

    { 31  ;3   ;Field     ;
                Name=SWIFT Code;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="SWIFT Code";
                ImplicitType=Code20 }

    { 27  ;3   ;Field     ;
                Name=IBAN;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IBAN;
                ImplicitType=Code50 }

    { 33  ;2   ;Group     ;
                Name=[ ];
                CaptionML=ENU=" ";
                Visible=ShowBankAccountCreationWarning;
                GroupType=Group;
                InstructionalTextML=ENU=To create a bank account that is linked to the related online bank account, you must specify the bank account information above. }

    { 6   ;1   ;Group     ;
                Name=Group6;
                Visible=AccountingPeriodVisible;
                GroupType=Group }

    { 15  ;2   ;Group     ;
                Name=Specify the start date of the company's fiscal year.;
                CaptionML=ENU=Specify the start date of the company's fiscal year.;
                GroupType=Group }

    { 7   ;3   ;Field     ;
                Name=AccountingPeriodStartDate;
                CaptionML=ENU=Fiscal Year Start Date;
                ApplicationArea=#Basic,#Suite;
                NotBlank=true;
                SourceExpr=AccountingPeriodStartDate;
                ImplicitType=Date;
                ShowMandatory=TRUE }

    { 57  ;1   ;Group     ;
                Name=Group57;
                Visible=CostingMethodVisible;
                GroupType=Group }

    { 58  ;2   ;Group     ;
                Name=Specify the costing method for your inventory valuation.;
                CaptionML=ENU=Specify the costing method for your inventory valuation.;
                GroupType=Group }

    { 122 ;3   ;Group     ;
                Name=CostingMethodLbl;
                CaptionML=ENU="Specify whether cost calculations use an actual or a budgeted value. The costing method works together with the posting date and sequence. Learn more ";
                GroupType=Group }

    { 123 ;3   ;Field     ;
                Name=Cost Method;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CostMethodeLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(CostMethodUrlTxt);
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 59  ;3   ;Field     ;
                Name=Costing Method;
                CaptionML=ENU=Costing Method;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InventorySetup."Default Costing Method";
                OnValidate=VAR
                             ExistingInventorySetup@1000 : Record "Inventory Setup";
                           BEGIN
                             if not ExistingInventorySetup.GET then begin
                               InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Always;
                               InventorySetup."Automatic Cost Posting" := true;
                             end;

                             if InventorySetup."Default Costing Method" = InventorySetup."Default Costing Method"::Average then begin
                               InventorySetup."Average Cost Period" := InventorySetup."Average Cost Period"::Day;
                               InventorySetup."Average Cost Calc. Type" := InventorySetup."Average Cost Calc. Type"::Item;
                             end;

                             if not InventorySetup.MODIFY then
                               InventorySetup.INSERT;
                           END;

                ShowMandatory=TRUE }

    { 9   ;1   ;Group     ;
                Name=Group9;
                Visible=DoneVisible;
                GroupType=Group }

    { 16  ;2   ;Group     ;
                Name=That's it!;
                CaptionML=ENU=That's it!;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Finish to prepare the application for first use. This will take a few moments. }

    { 21  ;3   ;Field     ;
                Name=HelpLbl;
                ExtendedDatatype=URL;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=HelpLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(HelpLinkTxt);
                            END;

                ImplicitType=TextConst }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1040 : Record "Media Repository";
      TempSavedBankAccount@1044 : TEMPORARY Record "Bank Account";
      TempBankAccount@1029 : TEMPORARY Record "Bank Account";
      BankAccount@1039 : Record "Bank Account";
      TempOnlineBankAccLink@1033 : TEMPORARY Record "Online Bank Acc. Link";
      MediaRepositoryDone@1041 : Record "Media Repository";
      MediaResourcesStandard@1055 : Record "Media Resources";
      MediaResourcesDone@1057 : Record "Media Resources";
      InventorySetup@1060 : Record "Inventory Setup";
      AssistedCompanySetup@1045 : Codeunit "Assisted Company Setup";
      AccountingPeriodStartDate@1000 : Date;
      CompanyData@1046 : '"Evaluation Data","Standard Data",None,"Extended Data","Full No Data"';
      TypeStandard@1018 : Boolean;
      TypeEvaluation@1019 : Boolean;
      Step@1012 : 'Intro,Sync,"Select Type","Company Details","Communication Details",BankStatementFeed,SelectBankAccont,"Payment Details","Accounting Period","Costing Method",Done';
      BackEnabled@1003 : Boolean;
      NextEnabled@1004 : Boolean;
      FinishEnabled@1005 : Boolean;
      TopBannerVisible@1042 : Boolean;
      IntroVisible@1006 : Boolean;
      SyncVisible@1035 : Boolean;
      SelectTypeVisible@1015 : Boolean;
      CompanyDetailsVisible@1007 : Boolean;
      CommunicationDetailsVisible@1008 : Boolean;
      PaymentDetailsVisible@1010 : Boolean;
      AccountingPeriodVisible@1009 : Boolean;
      CostingMethodVisible@1049 : Boolean;
      DoneVisible@1011 : Boolean;
      TypeSelectionEnabled@1026 : Boolean;
      StandardVisible@1023 : Boolean;
      EvaluationVisible@1024 : Boolean;
      SkipAccountingPeriod@1013 : Boolean;
      NotSetUpQst@1001 : TextConst 'ENU=The application has not been set up. Setup will continue the next time you start the program.\\Are you sure that you want to exit?';
      HideBankStatementProvider@1028 : Boolean;
      NoSetupTypeSelectedQst@1020 : TextConst 'ENU=You have not selected any setup type. If you proceed, the application will not be fully functional, until you set it up manually.\\Do you want to continue?';
      HelpLbl@1027 : TextConst 'ENU=Learn more about setting up your company';
      HelpLinkTxt@1022 : TextConst '@@@={Locked};ENU="http://go.microsoft.com/fwlink/?LinkId=746160"';
      BankStatementConfirmationVisible@1030 : Boolean;
      UseBankStatementFeed@1032 : Boolean;
      UseBankStatementFeedInitialized@1017 : Boolean;
      BankAccountInformationUpdated@1037 : Boolean;
      SelectBankAccountVisible@1038 : Boolean;
      TermsOfUseLbl@1031 : TextConst 'ENU=Envestnet Yodlee Terms of Use';
      TermsOfUseUrlTxt@1025 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?LinkId=746179"';
      LogoPositionOnDocumentsShown@1034 : Boolean;
      ShowBankAccountCreationWarning@1036 : Boolean;
      InvalidPhoneNumberErr@1002 : TextConst 'ENU=The phone number is invalid.';
      SyncEnabled@1043 : Boolean;
      CostMethodeLbl@1143 : TextConst 'ENU=Learn more.';
      CostMethodUrlTxt@1145 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=858295"';

    LOCAL PROCEDURE NextStep@3(Backwards@1000 : Boolean);
    BEGIN
      ResetWizardControls;

      if Backwards then
        Step := Step - 1
      else
        Step := Step + 1;

      case Step of
        Step::Intro:
          ShowIntroStep;
        Step::Sync:
          ShowSyncStep(Backwards);
        Step::"Select Type":
          if not TypeSelectionEnabled then
            NextStep(Backwards)
          else
            ShowSelectTypeStep;
        Step::"Company Details":
          if TypeEvaluation then begin
            Step := Step::Done;
            ShowDoneStep;
          end else
            ShowCompanyDetailsStep;
        Step::"Communication Details":
          ShowCommunicationDetailsStep;
        Step::BankStatementFeed:
          if not ShowBankStatementFeedStep then
            NextStep(Backwards)
          else
            ShowBankStatementFeedConfirmation;
        Step::SelectBankAccont:
          begin
            if not Backwards then
              ShowOnlineBankStatement;
            if not ShowSelectBankAccountStep then
              NextStep(Backwards)
            else
              ShowSelectBankAccount;
          end;
        Step::"Payment Details":
          begin
            if not Backwards then
              PopulateBankAccountInformation;
            ShowPaymentDetailsStep;
            ShowBankAccountCreationWarning := not ValidateBankAccountNotEmpty;
          end;
        Step::"Accounting Period":
          if SkipAccountingPeriod then
            NextStep(Backwards)
          else
            ShowAccountingPeriodStep;
        Step::"Costing Method":
          ShowCostingMethodStep;
        Step::Done:
          ShowDoneStep;
      end;
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE ShowIntroStep@1();
    BEGIN
      IntroVisible := true;
      BackEnabled := false;
    END;

    LOCAL PROCEDURE ShowSyncStep@22(Backwards@1000 : Boolean);
    BEGIN
      NextStep(Backwards);
    END;

    LOCAL PROCEDURE ShowSelectTypeStep@12();
    BEGIN
      SelectTypeVisible := true;
    END;

    LOCAL PROCEDURE ShowCompanyDetailsStep@2();
    BEGIN
      CompanyDetailsVisible := true;
      if TypeSelectionEnabled then begin
        StartConfigPackageImport;
        BackEnabled := false;
      end;
    END;

    LOCAL PROCEDURE ShowCommunicationDetailsStep@4();
    BEGIN
      CommunicationDetailsVisible := true;
    END;

    LOCAL PROCEDURE ShowPaymentDetailsStep@5();
    BEGIN
      PaymentDetailsVisible := true;
    END;

    LOCAL PROCEDURE ShowOnlineBankStatement@19();
    VAR
      CompanyInformationMgt@1001 : Codeunit "Company Information Mgt.";
    BEGIN
      if CompanyInformationMgt.IsDemoCompany then
        exit;

      if HideBankStatementProvider then
        exit;

      TempOnlineBankAccLink.RESET;
      TempOnlineBankAccLink.DELETEALL;

      if not TempBankAccount.StatementProvidersExist then
        exit;

      if UseBankStatementFeed then begin
        TempBankAccount.SimpleLinkStatementProvider(TempOnlineBankAccLink);
        if TempOnlineBankAccLink.FINDFIRST then
          if not TempOnlineBankAccLink.ISEMPTY then begin
            CurrPage.OnlineBanckAccountLinkPagePart.PAGE.SetRecs(TempOnlineBankAccLink);
            HideBankStatementProvider := true;
          end;
      end;
    END;

    LOCAL PROCEDURE ShowAccountingPeriodStep@7();
    BEGIN
      AccountingPeriodVisible := true;
    END;

    LOCAL PROCEDURE ShowCostingMethodStep@23();
    BEGIN
      if InventorySetup.GET then;
      CostingMethodVisible := true;
    END;

    LOCAL PROCEDURE ShowDoneStep@6();
    BEGIN
      DoneVisible := true;
      NextEnabled := false;
      FinishEnabled := true;
      if TypeEvaluation then begin
        StartConfigPackageImport;
        BackEnabled := false;
      end;
    END;

    LOCAL PROCEDURE ResetWizardControls@10();
    BEGIN
      CompanyData := CompanyData::None;

      // Buttons
      BackEnabled := true;
      NextEnabled := true;
      FinishEnabled := false;

      // Tabs
      IntroVisible := false;
      SyncVisible := false;
      SelectTypeVisible := false;
      CompanyDetailsVisible := false;
      CommunicationDetailsVisible := false;
      BankStatementConfirmationVisible := false;
      SelectBankAccountVisible := false;
      PaymentDetailsVisible := false;
      AccountingPeriodVisible := false;
      CostingMethodVisible := false;
      DoneVisible := false;
    END;

    LOCAL PROCEDURE InitializeRecord@8();
    VAR
      CompanyInformation@1001 : Record "Company Information";
      AccountingPeriod@1000 : Record "Accounting Period";
    BEGIN
      INIT;

      if CompanyInformation.GET then begin
        TRANSFERFIELDS(CompanyInformation);
        if Name = '' then
          Name := COMPANYNAME;
      end else
        Name := COMPANYNAME;

      SkipAccountingPeriod := not AccountingPeriod.ISEMPTY;
      if not SkipAccountingPeriod then
        AccountingPeriodStartDate := CALCDATE('<-CY>',TODAY);

      INSERT;
    END;

    LOCAL PROCEDURE CalcCompanyData@21();
    BEGIN
      CompanyData := CompanyData::None;
      if TypeStandard then
        CompanyData := CompanyData::"Standard Data";
      if TypeEvaluation then
        CompanyData := CompanyData::"Evaluation Data";
    END;

    LOCAL PROCEDURE StartConfigPackageImport@9();
    BEGIN
      if not TypeSelectionEnabled then
        exit;
      if CompanyData = CompanyData::None then
        exit;
      if AssistedCompanySetup.IsCompanySetupInProgress(COMPANYNAME) then
        exit;
      AssistedCompanySetup.FillCompanyData(COMPANYNAME,CompanyData);
    END;

    LOCAL PROCEDURE LoadConfigTypes@42() : Boolean;
    BEGIN
      StandardVisible :=
        AssistedCompanySetup.ExistsConfigurationPackageFile(CompanyData::"Standard Data");
      EvaluationVisible :=
        AssistedCompanySetup.ExistsConfigurationPackageFile(CompanyData::"Evaluation Data");
      exit(StandardVisible or EvaluationVisible);
    END;

    LOCAL PROCEDURE PackageImported@11() : Boolean;
    VAR
      AssistedCompanySetupStatus@1000 : Record "Assisted Company Setup Status";
    BEGIN
      AssistedCompanySetupStatus.GET(COMPANYNAME);
      exit(AssistedCompanySetupStatus."Package Imported" or AssistedCompanySetupStatus."Import Failed");
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      then
        if MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") and
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        then
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE PopulateBankAccountInformation@14();
    BEGIN
      if BankAccountInformationUpdated then
        if TempOnlineBankAccLink.COUNT = 0 then begin
          RestoreBankAccountInformation(TempSavedBankAccount);
          exit;
        end;

      if TempOnlineBankAccLink.COUNT = 1 then
        TempOnlineBankAccLink.FINDFIRST
      else
        CurrPage.OnlineBanckAccountLinkPagePart.PAGE.GETRECORD(TempOnlineBankAccLink);

      if (TempBankAccount."Bank Account No." = TempOnlineBankAccLink."Bank Account No.") and
         (TempBankAccount.Name = TempOnlineBankAccLink.Name)
      then
        exit;

      if not IsBankAccountFormatValid(TempOnlineBankAccLink."Bank Account No.") then
        CLEAR(TempOnlineBankAccLink."Bank Account No.");

      if not BankAccountInformationUpdated then
        StoreBankAccountInformation(TempSavedBankAccount);

      TempBankAccount.INIT;
      TempBankAccount.CreateNewAccount(TempOnlineBankAccLink);
      RestoreBankAccountInformation(TempBankAccount);
      BankAccountInformationUpdated := true;
    END;

    LOCAL PROCEDURE StoreBankAccountInformation@25(VAR BufferBankAccount@1000 : Record "Bank Account");
    BEGIN
      if not BufferBankAccount.ISEMPTY then
        exit;
      BufferBankAccount.INIT;
      BufferBankAccount."Bank Account No." := "Bank Account No.";
      BufferBankAccount.Name := "Bank Name";
      BufferBankAccount."Bank Branch No." := "Bank Branch No.";
      BufferBankAccount."SWIFT Code" := "SWIFT Code";
      BufferBankAccount.IBAN := IBAN;
      BufferBankAccount.INSERT;
    END;

    LOCAL PROCEDURE RestoreBankAccountInformation@26(VAR BufferBankAccount@1000 : Record "Bank Account");
    BEGIN
      if BufferBankAccount.ISEMPTY then
        exit;
      "Bank Account No." := BufferBankAccount."Bank Account No.";
      "Bank Name" := BufferBankAccount.Name;
      "Bank Branch No." := BufferBankAccount."Bank Branch No.";
      "SWIFT Code" := BufferBankAccount."SWIFT Code";
      IBAN := BufferBankAccount.IBAN;
    END;

    LOCAL PROCEDURE ShowBankStatementFeedConfirmation@18();
    BEGIN
      BankStatementConfirmationVisible := true;
    END;

    LOCAL PROCEDURE ShowBankStatementFeedStep@37() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record "General Ledger Setup";
      BankStatementProviderExists@1001 : Boolean;
    BEGIN
      if not GeneralLedgerSetup.GET then
        exit(false);

      if GeneralLedgerSetup."LCY Code" = '' then
        exit(false);

      BankStatementProviderExists := BankAccount.StatementProvidersExist;

      if not UseBankStatementFeedInitialized then begin
        UseBankStatementFeed := BankStatementProviderExists;
        UseBankStatementFeedInitialized := true;
      end;

      exit(BankStatementProviderExists);
    END;

    LOCAL PROCEDURE ShowSelectBankAccountStep@13() : Boolean;
    BEGIN
      exit(TempOnlineBankAccLink.COUNT > 1);
    END;

    LOCAL PROCEDURE ShowSelectBankAccount@16();
    BEGIN
      SelectBankAccountVisible := true;
    END;

    LOCAL PROCEDURE IsBankAccountFormatValid@15(BankAccount@1000 : Text) : Boolean;
    VAR
      VarInt@1001 : Integer;
      Which@1002 : Text;
    BEGIN
      Which := ' -';
      exit(EVALUATE(VarInt,DELCHR(BankAccount,'=',Which)));
    END;

    LOCAL PROCEDURE ValidateBankAccountNotEmpty@17() : Boolean;
    BEGIN
      exit(("Bank Account No." <> '') or TempOnlineBankAccLink.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

