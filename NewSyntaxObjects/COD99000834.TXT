OBJECT Codeunit 99000834 Purch. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text001@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text002@1002 : TextConst 'ENU=must not be filled in when a quantity is reserved';
      Text003@1003 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text004@1004 : TextConst 'ENU=Codeunit is not initialized correctly.';
      CreateReservEntry@1006 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1007 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1008 : Codeunit "Reservation Management";
      ItemTrackingMgt@1022 : Codeunit "Item Tracking Management";
      Blocked@1009 : Boolean;
      SetFromType@1010 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1011 : Integer;
      SetFromID@1012 : Code[20];
      SetFromBatchName@1013 : Code[10];
      SetFromProdOrderLine@1014 : Integer;
      SetFromRefNo@1015 : Integer;
      SetFromVariantCode@1016 : Code[10];
      SetFromLocationCode@1017 : Code[10];
      SetFromSerialNo@1019 : Code[20];
      SetFromLotNo@1020 : Code[20];
      SetFromQtyPerUOM@1021 : Decimal;
      ApplySpecificItemTracking@1023 : Boolean;
      OverruleItemTracking@1024 : Boolean;
      DeleteItemTracking@1018 : Boolean;

    [External]
    PROCEDURE CreateReservation@3(VAR PurchLine@1000 : Record "Purchase Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
      SignFactor@1008 : Integer;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text004);

      PurchLine.TESTFIELD(Type,PurchLine.Type::Item);
      PurchLine.TESTFIELD("No.");
      PurchLine.TESTFIELD("Expected Receipt Date");
      PurchLine.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(PurchLine."Outstanding Qty. (Base)") < ABS(PurchLine."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(PurchLine."Outstanding Qty. (Base)") - ABS(PurchLine."Reserved Qty. (Base)"));

      PurchLine.TESTFIELD("Variant Code",SetFromVariantCode);
      PurchLine.TESTFIELD("Location Code",SetFromLocationCode);

      if PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" then
        SignFactor := -1
      else
        SignFactor := 1;

      if QuantityBase * SignFactor < 0 then
        ShipmentDate := PurchLine."Expected Receipt Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := PurchLine."Expected Receipt Date";
      end;

      if PurchLine."Planning Flexibility" <> PurchLine."Planning Flexibility"::Unlimited then
        CreateReservEntry.SetPlanningFlexibility(PurchLine."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Purchase Line",PurchLine."Document Type",
        PurchLine."Document No.",'',0,PurchLine."Line No.",PurchLine."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        PurchLine."No.",PurchLine."Variant Code",PurchLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@8(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE FilterReservFor@10(VAR FilterReservEntry@1000 : Record "Reservation Entry";PurchLine@1001 : Record "Purchase Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",false);
      FilterReservEntry.SetSourceFilter2('',0);
    END;

    [External]
    PROCEDURE ReservQuantity@24(PurchLine@1001 : Record "Purchase Line") QtyToReserve@1000 : Decimal;
    BEGIN
      case PurchLine."Document Type" of
        PurchLine."Document Type"::Quote,
        PurchLine."Document Type"::Order,
        PurchLine."Document Type"::Invoice,
        PurchLine."Document Type"::"Blanket Order":
          QtyToReserve := -PurchLine."Outstanding Qty. (Base)";
        PurchLine."Document Type"::"Return Order",
        PurchLine."Document Type"::"Credit Memo":
          QtyToReserve := PurchLine."Outstanding Qty. (Base)";
      end;
    END;

    [External]
    PROCEDURE Caption@28(PurchLine@1001 : Record "Purchase Line") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',PurchLine."Document Type",PurchLine."Document No.",PurchLine."No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(PurchLine@1000 : Record "Purchase Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,PurchLine);
      exit(ReservEntry.FINDLAST);
    END;

    LOCAL PROCEDURE ReservEntryExist@21(PurchLine@1000 : Record "Purchase Line") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,PurchLine);
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE VerifyChange@61(VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line");
    VAR
      PurchLine@1005 : Record "Purchase Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if (NewPurchLine.Type <> NewPurchLine.Type::Item) and (OldPurchLine.Type <> OldPurchLine.Type::Item) then
        exit;
      if Blocked then
        exit;
      if NewPurchLine."Line No." = 0 then
        if not PurchLine.GET(
             NewPurchLine."Document Type",
             NewPurchLine."Document No.",
             NewPurchLine."Line No.")
        then
          exit;

      NewPurchLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewPurchLine."Reserved Qty. (Base)" <> 0;

      if (NewPurchLine."Expected Receipt Date" = 0D) and (OldPurchLine."Expected Receipt Date" <> 0D) then
        if ShowError then
          NewPurchLine.FIELDERROR("Expected Receipt Date",Text001)
        else
          HasError := true;

      if NewPurchLine."Sales Order No." <> '' then
        if ShowError then
          NewPurchLine.FIELDERROR("Sales Order No.",Text002)
        else
          HasError := NewPurchLine."Sales Order No." <> OldPurchLine."Sales Order No.";

      if NewPurchLine."Sales Order Line No." <> 0 then
        if ShowError then
          NewPurchLine.FIELDERROR(
            "Sales Order Line No.",Text002)
        else
          HasError := NewPurchLine."Sales Order Line No." <> OldPurchLine."Sales Order Line No.";

      if NewPurchLine."Drop Shipment" <> OldPurchLine."Drop Shipment" then
        if ShowError and NewPurchLine."Drop Shipment" then
          NewPurchLine.FIELDERROR("Drop Shipment",Text002)
        else
          HasError := true;

      if NewPurchLine."No." <> OldPurchLine."No." then
        if ShowError then
          NewPurchLine.FIELDERROR("No.",Text003)
        else
          HasError := true;
      if NewPurchLine."Variant Code" <> OldPurchLine."Variant Code" then
        if ShowError then
          NewPurchLine.FIELDERROR("Variant Code",Text003)
        else
          HasError := true;
      if NewPurchLine."Location Code" <> OldPurchLine."Location Code" then
        if ShowError then
          NewPurchLine.FIELDERROR("Location Code",Text003)
        else
          HasError := true;
      VerifyPurchLine(NewPurchLine,OldPurchLine,HasError);

      if HasError then
        if (NewPurchLine."No." <> OldPurchLine."No.") or
           FindReservEntry(NewPurchLine,TempReservEntry)
        then begin
          if (NewPurchLine."No." <> OldPurchLine."No.") or (NewPurchLine.Type <> OldPurchLine.Type) then begin
            ReservMgt.SetPurchLine(OldPurchLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetPurchLine(NewPurchLine);
          end else begin
            ReservMgt.SetPurchLine(NewPurchLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewPurchLine."Outstanding Qty. (Base)");
        end;

      if HasError or (NewPurchLine."Expected Receipt Date" <> OldPurchLine."Expected Receipt Date")
      then begin
        AssignForPlanning(NewPurchLine);
        if (NewPurchLine."No." <> OldPurchLine."No.") or
           (NewPurchLine."Variant Code" <> OldPurchLine."Variant Code") or
           (NewPurchLine."Location Code" <> OldPurchLine."Location Code")
        then
          AssignForPlanning(OldPurchLine);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@1(VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line");
    VAR
      PurchLine@1002 : Record "Purchase Line";
    BEGIN
      if Blocked then
        exit;

      with NewPurchLine do begin
        if ("Document Type" = "Document Type"::Invoice) and ("Receipt No." = '') then
          exit;

        if Type <> Type::Item then
          exit;
        if "Document Type" = OldPurchLine."Document Type" then
          if "Line No." = OldPurchLine."Line No." then
            if "Quantity (Base)" = OldPurchLine."Quantity (Base)" then
              exit;
        if "Line No." = 0 then
          if not PurchLine.GET("Document Type","Document No.","Line No.") then
            exit;
        ReservMgt.SetPurchLine(NewPurchLine);
        if "Qty. per Unit of Measure" <> OldPurchLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Outstanding Qty. (Base)" * OldPurchLine."Outstanding Qty. (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Outstanding Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Outstanding Qty. (Base)");
        AssignForPlanning(NewPurchLine);
      end;
    END;

    [External]
    PROCEDURE UpdatePlanningFlexibility@7(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      if FindReservEntry(PurchLine,ReservEntry) then
        ReservEntry.MODIFYALL("Planning Flexibility",PurchLine."Planning Flexibility");
    END;

    [External]
    PROCEDURE TransferPurchLineToItemJnlLine@32(VAR PurchLine@1000 : Record "Purchase Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1002 : Decimal;VAR CheckApplToItemEntry@1004 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(PurchLine,OldReservEntry) then
        exit(TransferQty);

      OldReservEntry.Lock;
      // Handle Item Tracking on drop shipment:
      CLEAR(CreateReservEntry);
      if ApplySpecificItemTracking and (ItemJnlLine."Applies-to Entry" <> 0) then
        CreateReservEntry.SetItemLedgEntryNo(ItemJnlLine."Applies-to Entry");

      if OverruleItemTracking then
        if ItemJnlLine.TrackingExists then begin
          CreateReservEntry.SetNewSerialLotNo(ItemJnlLine."Serial No.",ItemJnlLine."Lot No.");
          CreateReservEntry.SetOverruleItemTracking(true);
          // Try to match against Item Tracking on the purchase order line:
          OldReservEntry.SetTrackingFilterFromItemJnlLine(ItemJnlLine);
          if OldReservEntry.ISEMPTY then
            exit(TransferQty);
        end;

      ItemJnlLine.TestItemFields(PurchLine."No.",PurchLine."Variant Code",PurchLine."Location Code");

      if TransferQty = 0 then
        exit;

      if ItemJnlLine."Invoiced Quantity" <> 0 then
        CreateReservEntry.SetUseQtyToInvoice(true);

      if ReservEngineMgt.InitRecordSet(OldReservEntry) then begin
        repeat
          OldReservEntry.TestItemFields(PurchLine."No.",PurchLine."Variant Code",PurchLine."Location Code");

          if CheckApplToItemEntry and (OldReservEntry."Item Tracking" <> OldReservEntry."Item Tracking"::None) then begin
            OldReservEntry.TESTFIELD("Appl.-to Item Entry");
            CreateReservEntry.SetApplyToEntryNo(OldReservEntry."Appl.-to Item Entry");
          end;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        until (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) or (TransferQty = 0);
        CheckApplToItemEntry := false;
      end;
      exit(TransferQty);
    END;

    [External]
    PROCEDURE TransferPurchLineToPurchLine@36(VAR OldPurchLine@1000 : Record "Purchase Line";VAR NewPurchLine@1001 : Record "Purchase Line";TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      if not FindReservEntry(OldPurchLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      NewPurchLine.TestItemFields(OldPurchLine."No.",OldPurchLine."Variant Code",OldPurchLine."Location Code");

      for Status := Status::Reservation to Status::Prospect do begin
        if TransferQty = 0 then
          exit;
        OldReservEntry.SETRANGE("Reservation Status",Status);

        if OldReservEntry.FINDSET then
          repeat
            OldReservEntry.TestItemFields(OldPurchLine."No.",OldPurchLine."Variant Code",OldPurchLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Purchase Line",
                NewPurchLine."Document Type",NewPurchLine."Document No.",'',0,NewPurchLine."Line No.",
                NewPurchLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          until (OldReservEntry.NEXT = 0) or (TransferQty = 0);
      end; // DO
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR PurchLine@1000 : Record "Purchase Line") : Boolean;
    BEGIN
      with PurchLine do begin
        if not ReservEntryExist(PurchLine) then
          exit(true);

        ReservMgt.SetPurchLine(PurchLine);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE DeleteLine@2(VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
      if Blocked then
        exit;

      with PurchLine do begin
        ReservMgt.SetPurchLine(PurchLine);
        if DeleteItemTracking then
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        DeleteInvoiceSpecFromLine(PurchLine);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(PurchLine);
      end;
    END;

    LOCAL PROCEDURE AssignForPlanning@5(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with PurchLine do begin
        if "Document Type" <> "Document Type"::Order then
          exit;
        if Type <> Type::Item then
          exit;
        if "No." <> '' then
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code",WORKDATE);
      end;
    END;

    [External]
    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@12(VAR PurchLine@1003 : Record "Purchase Line");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingForm@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromPurchLine(PurchLine);
      if ((PurchLine."Document Type" = PurchLine."Document Type"::Invoice) and
          (PurchLine."Receipt No." <> '')) or
         ((PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") and
          (PurchLine."Return Shipment No." <> ''))
      then
        ItemTrackingForm.SetFormRunMode(2); // Combined shipment/receipt
      if PurchLine."Drop Shipment" then begin
        ItemTrackingForm.SetFormRunMode(3); // Drop Shipment
        if PurchLine."Sales Order No." <> '' then
          ItemTrackingForm.SetSecondSourceRowID(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line",
              1,PurchLine."Sales Order No.",'',0,PurchLine."Sales Order Line No."));
      end;
      ItemTrackingForm.SetSourceSpec(TrackingSpecification,PurchLine."Expected Receipt Date");
      ItemTrackingForm.SetInbound(PurchLine.IsInbound);
      ItemTrackingForm.RUNMODAL;
    END;

    [External]
    PROCEDURE CallItemTracking2@15(VAR PurchLine@1000 : Record "Purchase Line";SecondSourceQuantityArray@1001 : ARRAY [3] OF Decimal);
    VAR
      TrackingSpecification@1002 : Record "Tracking Specification";
      ItemTrackingForm@1003 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromPurchLine(PurchLine);
      ItemTrackingForm.SetSourceSpec(TrackingSpecification,PurchLine."Expected Receipt Date");
      ItemTrackingForm.SetSecondSourceQuantity(SecondSourceQuantityArray);
      ItemTrackingForm.RUNMODAL;
    END;

    [External]
    PROCEDURE RetrieveInvoiceSpecification@9(VAR PurchLine@1004 : Record "Purchase Line";VAR TempInvoicingSpecification@1001 : TEMPORARY Record "Tracking Specification") OK@1003 : Boolean;
    VAR
      SourceSpecification@1000 : Record "Tracking Specification";
    BEGIN
      CLEAR(TempInvoicingSpecification);
      if PurchLine.Type <> PurchLine.Type::Item then
        exit;
      if ((PurchLine."Document Type" = PurchLine."Document Type"::Invoice) and
          (PurchLine."Receipt No." <> '')) or
         ((PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") and
          (PurchLine."Return Shipment No." <> ''))
      then
        OK := RetrieveInvoiceSpecification2(PurchLine,TempInvoicingSpecification)
      else begin
        SourceSpecification.InitFromPurchLine(PurchLine);
        OK := ItemTrackingMgt.RetrieveInvoiceSpecification(SourceSpecification,TempInvoicingSpecification);
      end;
    END;

    LOCAL PROCEDURE RetrieveInvoiceSpecification2@1013(VAR PurchLine@1002 : Record "Purchase Line";VAR TempInvoicingSpecification@1001 : TEMPORARY Record "Tracking Specification") OK@1003 : Boolean;
    VAR
      TrackingSpecification@1000 : Record "Tracking Specification";
      ReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      // Used for combined receipt/return:
      if PurchLine.Type <> PurchLine.Type::Item then
        exit;
      if not FindReservEntry(PurchLine,ReservEntry) then
        exit;
      ReservEntry.FINDSET;
      repeat
        ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        ReservEntry.TESTFIELD("Item Ledger Entry No.");
        TrackingSpecification.GET(ReservEntry."Item Ledger Entry No.");
        TempInvoicingSpecification := TrackingSpecification;
        TempInvoicingSpecification."Qty. to Invoice (Base)" := ReservEntry."Qty. to Invoice (Base)";
        TempInvoicingSpecification."Qty. to Invoice" :=
          ROUND(ReservEntry."Qty. to Invoice (Base)" / ReservEntry."Qty. per Unit of Measure",0.00001);
        TempInvoicingSpecification."Buffer Status" := TempInvoicingSpecification."Buffer Status"::MODIFY;
        TempInvoicingSpecification.INSERT;
        ReservEntry.DELETE;
      until ReservEntry.NEXT = 0;

      OK := TempInvoicingSpecification.FINDFIRST;
    END;

    [External]
    PROCEDURE DeleteInvoiceSpecFromHeader@14(PurchHeader@1002 : Record "Purchase Header");
    BEGIN
      ItemTrackingMgt.DeleteInvoiceSpecFromHeader(
        DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.");
    END;

    LOCAL PROCEDURE DeleteInvoiceSpecFromLine@19(PurchLine@1002 : Record "Purchase Line");
    BEGIN
      ItemTrackingMgt.DeleteInvoiceSpecFromLine(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@13(PurchHeader@1000 : Record "Purchase Header");
    VAR
      ReservEntry@1003 : Record "Reservation Entry";
      CreateReservEntry@1001 : Codeunit "Create Reserv. Entry";
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEntry.SetSourceFilter(DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.",-1,true);
      ReservEntry.SetSourceFilter2('',0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [External]
    PROCEDURE SetApplySpecificItemTracking@16(ApplySpecific@1000 : Boolean);
    BEGIN
      ApplySpecificItemTracking := ApplySpecific;
    END;

    [External]
    PROCEDURE SetOverruleItemTracking@18(Overrule@1000 : Boolean);
    BEGIN
      OverruleItemTracking := Overrule;
    END;

    LOCAL PROCEDURE VerifyPurchLine@22(VAR NewPurchLine@1001 : Record "Purchase Line";VAR OldPurchLine@1000 : Record "Purchase Line";VAR HasError@1002 : Boolean);
    BEGIN
      if (NewPurchLine.Type = NewPurchLine.Type::Item) and (OldPurchLine.Type = OldPurchLine.Type::Item) then
        if (NewPurchLine."Bin Code" <> OldPurchLine."Bin Code") and
           (not ReservMgt.CalcIsAvailTrackedQtyInBin(
              NewPurchLine."No.",NewPurchLine."Bin Code",
              NewPurchLine."Location Code",NewPurchLine."Variant Code",
              DATABASE::"Purchase Line",NewPurchLine."Document Type",
              NewPurchLine."Document No.",'',0,NewPurchLine."Line No."))
        then
          HasError := true;
      if NewPurchLine."Line No." <> OldPurchLine."Line No." then
        HasError := true;

      if NewPurchLine.Type <> OldPurchLine.Type then
        HasError := true;
    END;

    BEGIN
    END.
  }
}

