OBJECT Table 5079 Marketing Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    CaptionML=ENU=Marketing Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Contact Nos.        ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Contact Nos. }
    { 3   ;   ;Campaign Nos.       ;Code20        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData Campaign=R;
                                                   CaptionML=ENU=Campaign Nos. }
    { 4   ;   ;Segment Nos.        ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Segment Nos. }
    { 5   ;   ;To-do Nos.          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Task Nos. }
    { 6   ;   ;Opportunity Nos.    ;Code20        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData "Sales Cycle"=R;
                                                   CaptionML=ENU=Opportunity Nos. }
    { 7   ;   ;Bus. Rel. Code for Customers;Code10;TableRelation="Business Relation";
                                                   CaptionML=ENU=Bus. Rel. Code for Customers }
    { 8   ;   ;Bus. Rel. Code for Vendors;Code10  ;TableRelation="Business Relation";
                                                   CaptionML=ENU=Bus. Rel. Code for Vendors }
    { 9   ;   ;Bus. Rel. Code for Bank Accs.;Code10;
                                                   TableRelation="Business Relation";
                                                   CaptionML=ENU=Bus. Rel. Code for Bank Accs. }
    { 22  ;   ;Inherit Salesperson Code;Boolean   ;InitValue=true;
                                                   CaptionML=ENU=Inherit Salesperson Code }
    { 23  ;   ;Inherit Territory Code;Boolean     ;InitValue=true;
                                                   CaptionML=ENU=Inherit Territory Code }
    { 24  ;   ;Inherit Country/Region Code;Boolean;InitValue=true;
                                                   CaptionML=ENU=Inherit Country/Region Code }
    { 25  ;   ;Inherit Language Code;Boolean      ;InitValue=true;
                                                   CaptionML=ENU=Inherit Language Code }
    { 26  ;   ;Inherit Address Details;Boolean    ;InitValue=true;
                                                   CaptionML=ENU=Inherit Address Details }
    { 27  ;   ;Inherit Communication Details;Boolean;
                                                   InitValue=true;
                                                   CaptionML=ENU=Inherit Communication Details }
    { 28  ;   ;Default Salesperson Code;Code20    ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Default Salesperson Code }
    { 29  ;   ;Default Territory Code;Code10      ;TableRelation=Territory;
                                                   CaptionML=ENU=Default Territory Code }
    { 30  ;   ;Default Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Default Country/Region Code }
    { 31  ;   ;Default Language Code;Code10       ;TableRelation=Language;
                                                   CaptionML=ENU=Default Language Code }
    { 33  ;   ;Default Sales Cycle Code;Code10    ;TableRelation="Sales Cycle";
                                                   CaptionML=ENU=Default Sales Cycle Code }
    { 35  ;   ;Attachment Storage Type;Option     ;CaptionML=ENU=Attachment Storage Type;
                                                   OptionCaptionML=ENU=Embedded,Disk File;
                                                   OptionString=Embedded,"Disk File" }
    { 36  ;   ;Attachment Storage Location;Text250;CaptionML=ENU=Attachment Storage Location }
    { 37  ;   ;Autosearch for Duplicates;Boolean  ;InitValue=true;
                                                   OnValidate=BEGIN
                                                                if "Autosearch for Duplicates" then
                                                                  VALIDATE("Maintain Dupl. Search Strings",true);
                                                              END;

                                                   CaptionML=ENU=Autosearch for Duplicates }
    { 38  ;   ;Search Hit %        ;Integer       ;InitValue=60;
                                                   CaptionML=ENU=Search Hit %;
                                                   MinValue=1;
                                                   MaxValue=100;
                                                   NotBlank=true }
    { 39  ;   ;Maintain Dupl. Search Strings;Boolean;
                                                   InitValue=true;
                                                   OnValidate=BEGIN
                                                                "Autosearch for Duplicates" := "Maintain Dupl. Search Strings";
                                                                if "Maintain Dupl. Search Strings" and not xRec."Maintain Dupl. Search Strings" then
                                                                  if CONFIRM(DuplicateSearchQst) then
                                                                    REPORT.RUN(REPORT::"Generate Dupl. Search String");
                                                              END;

                                                   CaptionML=ENU=Maintain Dupl. Search Strings;
                                                   NotBlank=true }
    { 50  ;   ;Mergefield Language ID;Integer     ;TableRelation="Windows Language";
                                                   CaptionML=ENU=Mergefield Language ID;
                                                   BlankZero=true }
    { 51  ;   ;Def. Company Salutation Code;Code10;TableRelation=Salutation;
                                                   CaptionML=ENU=Def. Company Salutation Code }
    { 52  ;   ;Default Person Salutation Code;Code10;
                                                   TableRelation=Salutation;
                                                   CaptionML=ENU=Default Person Salutation Code }
    { 53  ;   ;Default Correspondence Type;Option ;CaptionML=ENU=Default Correspondence Type;
                                                   OptionCaptionML=ENU=" ,Hard Copy,Email,Fax";
                                                   OptionString=" ","Hard Copy",Email,Fax }
    { 56  ;   ;Queue Folder Path   ;Text250       ;CaptionML=ENU=Queue Folder Path;
                                                   Editable=false }
    { 57  ;   ;Queue Folder UID    ;BLOB          ;CaptionML=ENU=Queue Folder UID }
    { 59  ;   ;Storage Folder Path ;Text250       ;CaptionML=ENU=Storage Folder Path;
                                                   Editable=false }
    { 60  ;   ;Storage Folder UID  ;BLOB          ;CaptionML=ENU=Storage Folder UID }
    { 67  ;   ;Default To-do Date Calculation;DateFormula;
                                                   CaptionML=ENU=Default Task Date Calculation }
    { 69  ;   ;Autodiscovery E-Mail Address;Text250;
                                                   CaptionML=ENU=Autodiscovery Email Address }
    { 70  ;   ;Email Batch Size    ;Integer       ;CaptionML=ENU=Email Batch Size;
                                                   MinValue=0 }
    { 71  ;   ;Exchange Service URL;Text250       ;CaptionML=ENU=Exchange Service URL }
    { 72  ;   ;Exchange Account User Name;Text250 ;CaptionML=ENU=Exchange Account User Name }
    { 73  ;   ;Exchange Account Password Key;GUID ;CaptionML=ENU=Exchange Account Password Key }
    { 74  ;   ;Sync with Microsoft Graph;Boolean  ;OnValidate=VAR
                                                                WebhookManagement@1002 : Codeunit "Webhook Management";
                                                              BEGIN
                                                                if WebhookManagement.IsSyncAllowed and "Sync with Microsoft Graph" then begin
                                                                  CODEUNIT.RUN(CODEUNIT::"Graph Data Setup");
                                                                  "WebHook Run Notification As" := GetWebhookSubscriptionUser;
                                                                  if UserIsNotValidForWebhookSubscription("WebHook Run Notification As") then
                                                                    if CurrentUserHasPermissionsForWebhookSubscription then
                                                                      TrySetWebhookSubscriptionUser(USERSECURITYID);
                                                                end else
                                                                  "Sync with Microsoft Graph" := false;
                                                              END;

                                                   CaptionML=ENU=Sync with Microsoft Graph;
                                                   Editable=false }
    { 75  ;   ;WebHook Run Notification As;GUID   ;CaptionML=ENU=WebHook Run Notification As }
    { 76  ;   ;Cust. Template Company Code;Code10 ;CaptionML=ENU=Cust. Template Company Code }
    { 77  ;   ;Cust. Template Person Code;Code10  ;CaptionML=ENU=Cust. Template Person Code }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text010@1000 : TextConst 'ENU=The queue and storage folders cannot be the same. Choose a different folder.';
      ExchangeAccountNotConfiguredErr@1001 : TextConst 'ENU=You must set up an Exchange account for email logging.';
      DuplicateSearchQst@1002 : TextConst 'ENU=Do you want to generate duplicate search strings?';

    [Internal]
    PROCEDURE SetQueueFolder@2(ExchangeFolder@1000 : Record "Exchange Folder");
    VAR
      InStream@1001 : InStream;
      OutStream@1002 : OutStream;
    BEGIN
      if (ExchangeFolder.FullPath = "Storage Folder Path") and (ExchangeFolder.FullPath <> '') then
        ERROR(Text010);
      if (ExchangeFolder.ReadUniqueID = GetStorageFolderUID) and ExchangeFolder."Unique ID".HASVALUE then
        ERROR(Text010);

      "Queue Folder Path" := ExchangeFolder.FullPath;

      ExchangeFolder."Unique ID".CREATEINSTREAM(InStream);
      "Queue Folder UID".CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,InStream);
      MODIFY;
    END;

    [Internal]
    PROCEDURE SetStorageFolder@3(ExchangeFolder@1000 : Record "Exchange Folder");
    VAR
      InStream@1001 : InStream;
      OutStream@1002 : OutStream;
    BEGIN
      if (ExchangeFolder.FullPath = "Queue Folder Path") and (ExchangeFolder.FullPath <> '') then
        ERROR(Text010);
      if (ExchangeFolder.ReadUniqueID = GetQueueFolderUID) and ExchangeFolder."Unique ID".HASVALUE then
        ERROR(Text010);

      "Storage Folder Path" := ExchangeFolder.FullPath;

      ExchangeFolder."Unique ID".CREATEINSTREAM(InStream);
      "Storage Folder UID".CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,InStream);
      MODIFY;
    END;

    [External]
    PROCEDURE GetQueueFolderUID@7() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Queue Folder UID");
      "Queue Folder UID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE GetStorageFolderUID@8() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Storage Folder UID");
      "Storage Folder UID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE SetExchangeAccountPassword@4(PasswordText@1001 : Text);
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      if ISNULLGUID("Exchange Account Password Key") or not ServicePassword.GET("Exchange Account Password Key") then begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.INSERT(true);
        "Exchange Account Password Key" := ServicePassword.Key;
      end else begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.MODIFY;
      end;
    END;

    [External]
    PROCEDURE CreateExchangeAccountCredentials@5(VAR WebCredentials@1000 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials");
    VAR
      ServicePassword@1001 : Record "Service Password";
    BEGIN
      if "Exchange Account User Name" = '' then
        ERROR(ExchangeAccountNotConfiguredErr);
      if ISNULLGUID("Exchange Account Password Key") or not ServicePassword.GET("Exchange Account Password Key") then
        ERROR(ExchangeAccountNotConfiguredErr);

      WebCredentials := WebCredentials.WebCredentials("Exchange Account User Name",ServicePassword.GetPassword);
    END;

    [External]
    PROCEDURE TrySetWebhookSubscriptionUser@24(UserSecurityID@1000 : GUID) : Boolean;
    VAR
      WebhookManagement@1002 : Codeunit "Webhook Management";
    BEGIN
      if "WebHook Run Notification As" <> UserSecurityID then
        if WebhookManagement.IsValidNotificationRunAsUser(UserSecurityID) then begin
          "WebHook Run Notification As" := UserSecurityID;
          exit(true);
        end;

      exit(false);
    END;

    [External]
    PROCEDURE GetWebhookSubscriptionUser@23() : GUID;
    VAR
      MarketingSetup@1000 : Record "Marketing Setup";
    BEGIN
      if MarketingSetup.GET then
        exit(MarketingSetup."WebHook Run Notification As");
    END;

    LOCAL PROCEDURE UserIsNotValidForWebhookSubscription@36(UserSecurityID@1000 : GUID) : Boolean;
    VAR
      WebhookManagement@1002 : Codeunit "Webhook Management";
    BEGIN
      exit(not WebhookManagement.IsValidNotificationRunAsUser(UserSecurityID));
    END;

    LOCAL PROCEDURE CurrentUserHasPermissionsForWebhookSubscription@6() : Boolean;
    VAR
      Contact@1004 : Record Contact;
      Customer@1003 : Record Customer;
    BEGIN
      exit(Customer.WRITEPERMISSION and Contact.WRITEPERMISSION)
    END;

    [External]
    PROCEDURE TrySetWebhookSubscriptionUserAsCurrentUser@32() : GUID;
    VAR
      MarketingSetup@1005 : Record "Marketing Setup";
    BEGIN
      if not MarketingSetup.GET then
        MarketingSetup.INSERT(true);

      if UserIsNotValidForWebhookSubscription(MarketingSetup."WebHook Run Notification As") then
        if CurrentUserHasPermissionsForWebhookSubscription then
          if MarketingSetup.TrySetWebhookSubscriptionUser(USERSECURITYID) then
            MarketingSetup.MODIFY(true);

      exit(MarketingSetup."WebHook Run Notification As");
    END;

    [External]
    PROCEDURE GetCustomerTemplate@1(ContactType@1000 : 'Company,Person') : Code[10];
    VAR
      MarketingSetup@1001 : Record "Marketing Setup";
    BEGIN
      MarketingSetup.GET;

      case ContactType of
        ContactType::Company:
          exit(MarketingSetup."Cust. Template Company Code");
        ContactType::Person:
          exit(MarketingSetup."Cust. Template Person Code");
      end
    END;

    BEGIN
    END.
  }
}

