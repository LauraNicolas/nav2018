OBJECT Codeunit 7301 Whse. Jnl.-Register Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Warehouse Journal Line";
    Permissions=TableData "Warehouse Entry"=imd,
                TableData "Warehouse Register"=imd;
    OnRun=BEGIN
            RegisterWhseJnlLine(Rec);
          END;

  }
  CODE
  {
    VAR
      Location@1005 : Record Location;
      WhseJnlLine@1000 : Record "Warehouse Journal Line";
      Item@1008 : Record Item;
      Bin@1003 : Record Bin;
      WhseReg@1002 : Record "Warehouse Register";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      WMSMgt@1009 : Codeunit "WMS Management";
      WhseEntryNo@1001 : Integer;
      Text000@1006 : TextConst '@@@="%1 = the value of the Quantity that is in the bin; %2 = the value of the Quantity that is not available.";ENU=is not sufficient to complete this action. The quantity in the bin is %1. %2 units are not available';
      Text001@1007 : TextConst 'ENU=Serial No. %1 is found in inventory .';
      OnMovement@1010 : Boolean;

    LOCAL PROCEDURE Code@2();
    VAR
      GlobalWhseEntry@1000 : Record "Warehouse Entry";
    BEGIN
      with WhseJnlLine do begin
        if ("Qty. (Absolute)" = 0) and ("Qty. (Base)" = 0) and (not "Phys. Inventory") then
          exit;
        TESTFIELD("Item No.");
        GetLocation("Location Code");
        if WhseEntryNo = 0 then begin
          GlobalWhseEntry.LOCKTABLE;
          if GlobalWhseEntry.FINDLAST then
            WhseEntryNo := GlobalWhseEntry."Entry No.";
        end;
        OnMovement := false;
        if "From Bin Code" <> '' then begin
          InitWhseEntry(GlobalWhseEntry,"From Zone Code","From Bin Code",-1);
          if "To Bin Code" <> '' then begin
            InsertWhseEntry(GlobalWhseEntry);
            OnMovement := true;
            InitWhseEntry(GlobalWhseEntry,"To Zone Code","To Bin Code",1);
          end;
        end else
          InitWhseEntry(GlobalWhseEntry,"To Zone Code","To Bin Code",1);

        InsertWhseEntry(GlobalWhseEntry);
      end;
    END;

    LOCAL PROCEDURE InitWhseEntry@4(VAR WhseEntry@1000 : Record "Warehouse Entry";ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];Sign@1001 : Integer);
    VAR
      ToBinContent@1004 : Record "Bin Content";
      WMSMgt@1005 : Codeunit "WMS Management";
    BEGIN
      WhseEntryNo := WhseEntryNo + 1;

      with WhseJnlLine do begin
        WhseEntry.INIT;
        WhseEntry."Entry No." := WhseEntryNo;
        WhseEntryNo := WhseEntry."Entry No.";
        WhseEntry."Journal Template Name" := "Journal Template Name";
        WhseEntry."Journal Batch Name" := "Journal Batch Name";
        if "Entry Type" <> "Entry Type"::Movement then begin
          if Sign >= 0 then
            WhseEntry."Entry Type" := WhseEntry."Entry Type"::"Positive Adjmt."
          else
            WhseEntry."Entry Type" := WhseEntry."Entry Type"::"Negative Adjmt.";
        end else
          WhseEntry."Entry Type" := "Entry Type";
        WhseEntry."Line No." := "Line No.";
        WhseEntry."Whse. Document No." := "Whse. Document No.";
        WhseEntry."Whse. Document Type" := "Whse. Document Type";
        WhseEntry."Whse. Document Line No." := "Whse. Document Line No.";
        WhseEntry."No. Series" := "Registering No. Series";
        WhseEntry."Location Code" := "Location Code";
        WhseEntry."Zone Code" := ZoneCode;
        WhseEntry."Bin Code" := BinCode;
        GetBin("Location Code",BinCode);
        WhseEntry.Dedicated := Bin.Dedicated;
        WhseEntry."Bin Type Code" := Bin."Bin Type Code";
        WhseEntry."Item No." := "Item No.";
        WhseEntry.Description := GetItemDescription("Item No.",Description);
        if Location."Directed Put-away and Pick" then begin
          WhseEntry.Quantity := "Qty. (Absolute)" * Sign;
          WhseEntry."Unit of Measure Code" := "Unit of Measure Code";
          WhseEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        end else begin
          WhseEntry.Quantity := "Qty. (Absolute, Base)" * Sign;
          WhseEntry."Unit of Measure Code" := WMSMgt.GetBaseUOM("Item No.");
          WhseEntry."Qty. per Unit of Measure" := 1;
        end;
        WhseEntry."Qty. (Base)" := "Qty. (Absolute, Base)" * Sign;
        WhseEntry."Registering Date" := "Registering Date";
        WhseEntry."User ID" := "User ID";
        WhseEntry."Variant Code" := "Variant Code";
        WhseEntry."Source Type" := "Source Type";
        WhseEntry."Source Subtype" := "Source Subtype";
        WhseEntry."Source No." := "Source No.";
        WhseEntry."Source Line No." := "Source Line No.";
        WhseEntry."Source Subline No." := "Source Subline No.";
        WhseEntry."Source Document" := "Source Document";
        WhseEntry."Reference Document" := "Reference Document";
        WhseEntry."Reference No." := "Reference No.";
        WhseEntry."Source Code" := "Source Code";
        WhseEntry."Reason Code" := "Reason Code";
        WhseEntry.Cubage := Cubage * Sign;
        WhseEntry.Weight := Weight * Sign;
        WhseEntry."Serial No." := "Serial No.";
        WhseEntry."Lot No." := "Lot No.";
        WhseEntry."Expiration Date" := "Expiration Date";
        if OnMovement and ("Entry Type" = "Entry Type"::Movement) then begin
          if "New Serial No." <> '' then
            WhseEntry."Serial No." := "New Serial No.";
          if "New Lot No." <> '' then
            WhseEntry."Lot No." := "New Lot No.";
          if ("New Expiration Date" <> "Expiration Date") and (WhseEntry."Entry Type" = WhseEntry."Entry Type"::Movement) then
            WhseEntry."Expiration Date" := "New Expiration Date";
        end;
        WhseEntry."Warranty Date" := "Warranty Date";

        WhseEntry."Phys Invt Counting Period Code" :=
          "Phys Invt Counting Period Code";
        WhseEntry."Phys Invt Counting Period Type" :=
          "Phys Invt Counting Period Type";

        if Sign > 0 then begin
          if BinCode <> Location."Adjustment Bin Code" then begin
            if not ToBinContent.GET(
                 "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code")
            then
              InsertToBinContent(WhseEntry)
            else
              if Location."Default Bin Selection" = Location."Default Bin Selection"::"Last-Used Bin" then
                UpdateDefaultBinContent("Item No.","Variant Code","Location Code",BinCode);
          end
        end else begin
          if BinCode <> Location."Adjustment Bin Code" then
            DeleteFromBinContent(WhseEntry);
        end;
      end;
    END;

    LOCAL PROCEDURE DeleteFromBinContent@1(VAR WhseEntry@1000 : Record "Warehouse Entry");
    VAR
      FromBinContent@1001 : Record "Bin Content";
      WhseEntry2@1002 : Record "Warehouse Entry";
      WhseSNRequired@1102601001 : Boolean;
      WhseLNRequired@1102601000 : Boolean;
      Sign@1003 : Integer;
    BEGIN
      with WhseEntry do begin
        FromBinContent.GET(
          "Location Code","Bin Code","Item No.",
          "Variant Code","Unit of Measure Code");
        ItemTrackingMgt.CheckWhseItemTrkgSetup(FromBinContent."Item No.",WhseSNRequired,WhseLNRequired,false);
        if WhseLNRequired then
          FromBinContent.SETRANGE("Lot No. Filter","Lot No.");
        if WhseSNRequired then
          FromBinContent.SETRANGE("Serial No. Filter","Serial No.");

        FromBinContent.CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
        if FromBinContent."Quantity (Base)" + "Qty. (Base)" = 0 then begin
          WhseEntry2.SETCURRENTKEY(
            "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code");
          WhseEntry2.SETRANGE("Item No.","Item No.");
          WhseEntry2.SETRANGE("Bin Code","Bin Code");
          WhseEntry2.SETRANGE("Location Code","Location Code");
          WhseEntry2.SETRANGE("Variant Code","Variant Code");
          WhseEntry2.SETRANGE("Unit of Measure Code","Unit of Measure Code");
          if WhseLNRequired then
            WhseEntry2.SETRANGE("Lot No.","Lot No.");
          if WhseSNRequired then
            WhseEntry2.SETRANGE("Serial No.","Serial No.");
          WhseEntry2.CALCSUMS(Cubage,Weight,"Qty. (Base)");
          Cubage := -WhseEntry2.Cubage;
          Weight := -WhseEntry2.Weight;
          if WhseEntry2."Qty. (Base)" + "Qty. (Base)" <> 0 then
            RegisterRoundResidual(WhseEntry,WhseEntry2);

          FromBinContent.SETRANGE("Lot No. Filter");
          FromBinContent.SETRANGE("Serial No. Filter");
          FromBinContent.CALCFIELDS("Quantity (Base)");
          if FromBinContent."Quantity (Base)" + "Qty. (Base)" = 0 then
            if (FromBinContent."Positive Adjmt. Qty. (Base)" = 0) and
               (FromBinContent."Put-away Quantity (Base)" = 0) and
               (not FromBinContent.Fixed)
            then
              FromBinContent.DELETE;
        end else begin
          FromBinContent.CALCFIELDS(Quantity);
          if FromBinContent.Quantity + Quantity = 0 then begin
            "Qty. (Base)" := -FromBinContent."Quantity (Base)";
            Sign := WhseJnlLine."Qty. (Base)" / WhseJnlLine."Qty. (Absolute, Base)";
            WhseJnlLine."Qty. (Base)" := "Qty. (Base)" * Sign;
            WhseJnlLine."Qty. (Absolute, Base)" := ABS("Qty. (Base)");
          end else
            if FromBinContent."Quantity (Base)" + "Qty. (Base)" < 0 then
              FromBinContent.FIELDERROR(
                "Quantity (Base)",
                STRSUBSTNO(Text000,FromBinContent."Quantity (Base)",-(FromBinContent."Quantity (Base)" + "Qty. (Base)")));
        end;
      end;
    END;

    LOCAL PROCEDURE RegisterRoundResidual@12(VAR WhseEntry@1002 : Record "Warehouse Entry";WhseEntry2@1003 : Record "Warehouse Entry");
    VAR
      WhseJnlLine2@1001 : Record "Warehouse Journal Line";
      WhseJnlRegLine@1000 : Codeunit "Whse. Jnl.-Register Line";
    BEGIN
      with WhseEntry do begin
        WhseJnlLine2 := WhseJnlLine;
        GetBin(WhseJnlLine2."Location Code",Location."Adjustment Bin Code");
        WhseJnlLine2.Quantity := 0;
        WhseJnlLine2."Qty. (Base)" := WhseEntry2."Qty. (Base)" + "Qty. (Base)";
        if WhseEntry2."Qty. (Base)" > ABS("Qty. (Base)") then begin
          WhseJnlLine2."To Zone Code" := Bin."Zone Code";
          WhseJnlLine2."To Bin Code" := Bin.Code;
        end else begin
          WhseJnlLine2."To Zone Code" := WhseJnlLine2."From Zone Code";
          WhseJnlLine2."To Bin Code" := WhseJnlLine2."From Bin Code";
          WhseJnlLine2."From Zone Code" := Bin."Zone Code";
          WhseJnlLine2."From Bin Code" := Bin.Code;
          WhseJnlLine2."Qty. (Base)" := -WhseJnlLine2."Qty. (Base)";
        end;
        WhseJnlLine2."Qty. (Absolute)" := 0;
        WhseJnlLine2."Qty. (Absolute, Base)" := ABS(WhseJnlLine2."Qty. (Base)");
        WhseJnlRegLine.SetWhseRegister(WhseReg);
        WhseJnlRegLine.RUN(WhseJnlLine2);
        WhseJnlRegLine.GetWhseRegister(WhseReg);
        WhseEntryNo := WhseReg."To Entry No." + 1;
        "Entry No." := WhseReg."To Entry No." + 1;
      end;
    END;

    LOCAL PROCEDURE InsertWhseEntry@7(VAR WhseEntry@1000 : Record "Warehouse Entry");
    VAR
      WhseEntry2@1001 : Record "Warehouse Entry";
      ItemTrackingCode@1002 : Record "Item Tracking Code";
      ExistingExpDate@1003 : Date;
    BEGIN
      with WhseEntry do begin
        GetItem("Item No.");
        if ItemTrackingCode.GET(Item."Item Tracking Code") then
          if ("Serial No." <> '') and
             ("Bin Code" <> Location."Adjustment Bin Code") and
             (Quantity > 0) and
             ItemTrackingCode."SN Specific Tracking"
          then
            if WMSMgt.SerialNoOnInventory("Location Code","Item No.","Variant Code","Serial No.") then
              ERROR(Text001,"Serial No.");

        if ItemTrackingCode."Man. Expir. Date Entry Reqd." and ("Entry Type" = "Entry Type"::"Positive Adjmt.")
           and (ItemTrackingCode."Lot Warehouse Tracking" or ItemTrackingCode."SN Warehouse Tracking")
        then begin
          TESTFIELD("Expiration Date");
          ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExistingExpDate);
          if (ExistingExpDate <> 0D) and ("Expiration Date" <> ExistingExpDate) then
            TESTFIELD("Expiration Date",ExistingExpDate)
        end;

        INSERT;
        InsertWhseReg("Entry No.");
        if Quantity > 0 then begin
          if Bin.Empty then begin
            Bin.Empty := false;
            Bin.MODIFY;
          end;
        end else begin
          WhseEntry2.SETCURRENTKEY("Bin Code","Location Code");
          WhseEntry2.SETRANGE("Bin Code","Bin Code");
          WhseEntry2.SETRANGE("Location Code","Location Code");
          WhseEntry2.CALCSUMS("Qty. (Base)");
          if WhseEntry2."Qty. (Base)" = 0 then begin
            if not Bin.Empty then begin
              Bin.Empty := true;
              Bin.MODIFY;
            end;
          end else
            if Bin.Empty then begin
              Bin.Empty := false;
              Bin.MODIFY;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertToBinContent@13(WhseEntry@1000 : Record "Warehouse Entry");
    VAR
      BinContent@1001 : Record "Bin Content";
      WhseIntegrationMgt@1002 : Codeunit "Whse. Integration Management";
    BEGIN
      with WhseEntry do begin
        GetBin("Location Code","Bin Code");
        BinContent.INIT;
        BinContent."Location Code" := "Location Code";
        BinContent."Zone Code" := "Zone Code";
        BinContent."Bin Code" := "Bin Code";
        BinContent.Dedicated := Bin.Dedicated;
        BinContent."Bin Type Code" := Bin."Bin Type Code";
        BinContent."Block Movement" := Bin."Block Movement";
        BinContent."Bin Ranking" := Bin."Bin Ranking";
        BinContent."Cross-Dock Bin" := Bin."Cross-Dock Bin";
        BinContent."Warehouse Class Code" := Bin."Warehouse Class Code";
        BinContent."Item No." := "Item No.";
        BinContent."Variant Code" := "Variant Code";
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
        BinContent."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        BinContent.Fixed := WhseIntegrationMgt.IsOpenShopFloorBin("Location Code","Bin Code");
        if not Location."Directed Put-away and Pick" then begin
          if WMSMgt.CheckDefaultBin("Item No.","Variant Code","Location Code","Bin Code") then begin
            if Location."Default Bin Selection" = Location."Default Bin Selection"::"Last-Used Bin" then begin
              DeleteDefaultBinContent("Item No.","Variant Code","Location Code");
              BinContent.Default := true;
            end
          end else
            BinContent.Default := true;
          BinContent.Fixed := true;
        end;
        BinContent.INSERT;
      end;
    END;

    LOCAL PROCEDURE UpdateDefaultBinContent@8(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];BinCode@1003 : Code[20]);
    VAR
      BinContent@1004 : Record "Bin Content";
      BinContent2@1005 : Record "Bin Content";
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,true);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      if BinContent.FINDFIRST then
        if BinContent."Bin Code" <> BinCode then begin
          BinContent.Default := false;
          BinContent.MODIFY;
        end;

      if BinContent."Bin Code" <> BinCode then begin
        BinContent2.SETRANGE("Location Code",LocationCode);
        BinContent2.SETRANGE("Item No.",ItemNo);
        BinContent2.SETRANGE("Variant Code",VariantCode);
        BinContent2.SETRANGE("Bin Code",BinCode);
        BinContent2.FINDFIRST;
        BinContent2.Default := true;
        BinContent2.MODIFY;
      end;
    END;

    LOCAL PROCEDURE DeleteDefaultBinContent@10(ItemNo@1004 : Code[20];VariantCode@1003 : Code[10];LocationCode@1002 : Code[10]);
    VAR
      BinContent@1005 : Record "Bin Content";
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,true);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      if BinContent.FINDFIRST then begin
        BinContent.Default := false;
        BinContent.MODIFY;
      end;
    END;

    LOCAL PROCEDURE InsertWhseReg@3(WhseEntryNo@1000 : Integer);
    BEGIN
      with WhseJnlLine do
        if WhseReg."No." = 0 then begin
          WhseReg.LOCKTABLE;
          if WhseReg.FIND('+') then
            WhseReg."No." := WhseReg."No." + 1
          else
            WhseReg."No." := 1;
          WhseReg.INIT;
          WhseReg."From Entry No." := WhseEntryNo;
          WhseReg."To Entry No." := WhseEntryNo;
          WhseReg."Creation Date" := TODAY;
          WhseReg."Journal Batch Name" := "Journal Batch Name";
          WhseReg."Source Code" := "Source Code";
          WhseReg."User ID" := USERID;
          WhseReg.INSERT;
        end else begin
          if ((WhseEntryNo < WhseReg."From Entry No.") and (WhseEntryNo <> 0)) or
             ((WhseReg."From Entry No." = 0) and (WhseEntryNo > 0))
          then
            WhseReg."From Entry No." := WhseEntryNo;
          if WhseEntryNo > WhseReg."To Entry No." then
            WhseReg."To Entry No." := WhseEntryNo;
          WhseReg.MODIFY;
        end;
    END;

    LOCAL PROCEDURE GetBin@14(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      if (Bin."Location Code" <> LocationCode) or
         (Bin.Code <> BinCode)
      then
        Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetLocation@5(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetItemDescription@15(ItemNo@1000 : Code[20];Description2@1001 : Text[50]) : Text[50];
    BEGIN
      GetItem(ItemNo);
      if Item.Description = Description2 then
        exit('');
      exit(Description2);
    END;

    LOCAL PROCEDURE GetItem@6(ItemNo@1000 : Code[20]);
    BEGIN
      if Item."No." <> ItemNo then
        Item.GET(ItemNo);
    END;

    [External]
    PROCEDURE SetWhseRegister@25(WhseRegDef@1000 : Record "Warehouse Register");
    BEGIN
      WhseReg := WhseRegDef;
    END;

    [External]
    PROCEDURE GetWhseRegister@26(VAR WhseRegDef@1000 : Record "Warehouse Register");
    BEGIN
      WhseRegDef := WhseReg;
    END;

    [External]
    PROCEDURE RegisterWhseJnlLine@9(VAR WarehouseJournalLine@1000 : Record "Warehouse Journal Line");
    BEGIN
      WhseJnlLine.COPY(WarehouseJournalLine);
      Code;
      WarehouseJournalLine := WhseJnlLine;
    END;

    BEGIN
    END.
  }
}

