OBJECT Codeunit 2310 O365 Sales Invoice Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProcessDraftInvoiceOptionQst@1001 : TextConst 'ENU=Keep,Discard';
      ProcessDraftInvoiceInstructionTxt@1000 : TextConst 'ENU=Do you want to keep the new invoice?';
      ProcessDraftEstimateInstructionTxt@1010 : TextConst 'ENU=Do you want to keep the new estimate?';
      AddDiscountTxt@1003 : TextConst 'ENU=Add discount';
      ChangeDiscountTxt@1002 : TextConst 'ENU=Change discount';
      AddAttachmentTxt@1005 : TextConst 'ENU=Add attachment';
      NoOfAttachmentsTxt@1004 : TextConst '@@@="%1=an integer number, starting at 0";ENU=Attachments (%1)';
      InvoiceDiscountChangedMsg@1007 : TextConst 'ENU=Changing the quantity has cleared the line discount.';
      AmountOutsideRangeMsg@1008 : TextConst 'ENU=We adjusted the discount to not exceed the line amount.';
      CouponsHasBeenCheckedForCustomer@1009 : Boolean;
      HasWarnedAboutExpiredOrClaimedCoupons@1006 : Boolean;
      CustomerCreatedMsg@1020 : TextConst 'ENU=We added this new customer to your list.';
      InvoiceDiscountLbl@1011 : TextConst 'ENU=Invoice Discount';
      UndoTxt@1013 : TextConst 'ENU=Undo';

    [External]
    PROCEDURE GetCustomerEmail@2(CustomerNo@1001 : Code[20]) : Text[80];
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if CustomerNo <> '' then
        if Customer.GET(CustomerNo) then
          exit(Customer."E-Mail");
      exit('');
    END;

    [External]
    PROCEDURE ProcessDraftInvoiceOnCreate@3(VAR SalesHeader@1001 : Record "Sales Header") : Boolean;
    VAR
      Response@1000 : ',Save,Discard';
      InstructionsWithDocumentTypeTxt@1003 : Text;
    BEGIN
      if SalesHeader."Document Type" = SalesHeader."Document Type"::Quote then
        InstructionsWithDocumentTypeTxt := ProcessDraftEstimateInstructionTxt
      else
        InstructionsWithDocumentTypeTxt := ProcessDraftInvoiceInstructionTxt;

      case STRMENU(ProcessDraftInvoiceOptionQst,Response::Save,InstructionsWithDocumentTypeTxt) of
        Response::Save:
          exit(true);
        Response::Discard:
          exit(SalesHeader.DELETE(true)); // Delete all invoice lines and invoice header
      end;
    END;

    [External]
    PROCEDURE IsCustomerCompanyContact@89(CustomerNo@1001 : Code[20]) : Boolean;
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if CustomerNo <> '' then
        if Customer.GET(CustomerNo) then
          exit(Customer."Contact Type" = Customer."Contact Type"::Company);
      exit(false);
    END;

    [External]
    PROCEDURE UpdateCouponCodes@6(SalesHeader@1002 : Record "Sales Header";VAR CouponCodes@1000 : Text);
    VAR
      O365CouponClaim@1001 : Record "O365 Coupon Claim";
    BEGIN
      CouponCodes := O365CouponClaim.GetAppliedClaimsForSalesDocument(SalesHeader);
    END;

    [External]
    PROCEDURE UpdateAddress@4(VAR SalesHeader@1001 : Record "Sales Header";VAR FullAddress@1002 : Text);
    VAR
      TempStandardAddress@1000 : TEMPORARY Record "Standard Address";
    BEGIN
      TempStandardAddress.CopyFromSalesHeaderSellTo(SalesHeader);
      FullAddress := TempStandardAddress.ToString;
      SalesHeader."Bill-to Address" := SalesHeader."Sell-to Address";
      SalesHeader."Bill-to Address 2" := SalesHeader."Sell-to Address 2";
      SalesHeader."Bill-to Post Code" := SalesHeader."Sell-to Post Code";
      SalesHeader."Bill-to City" := SalesHeader."Sell-to City";
      SalesHeader."Bill-to Country/Region Code" := SalesHeader."Sell-to Country/Region Code";
      SalesHeader."Bill-to County" := SalesHeader."Sell-to County";
    END;

    [External]
    PROCEDURE CalcInvoiceDiscountAmount@8(VAR SalesHeader@1001 : Record "Sales Header";VAR SubTotalAmount@1003 : Decimal;VAR DiscountTxt@1002 : Text;VAR InvoiceDiscountAmount@1005 : Decimal;VAR InvDiscAmountVisible@1006 : Boolean);
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.CALCSUMS("Inv. Discount Amount","Line Amount");
      SubTotalAmount := SalesLine."Line Amount";
      InvoiceDiscountAmount := SalesLine."Inv. Discount Amount";
      if SalesHeader."Invoice Discount Value" <> 0 then
        DiscountTxt := ChangeDiscountTxt
      else
        DiscountTxt := AddDiscountTxt;

      InvDiscAmountVisible := SalesHeader."Invoice Discount Value" <> 0;
    END;

    [External]
    PROCEDURE UpdateNoOfAttachmentsLabel@7(NoOfAttachments@1000 : Integer;VAR NoOfAttachmentsValueTxt@1003 : Text);
    BEGIN
      if NoOfAttachments = 0 then
        NoOfAttachmentsValueTxt := AddAttachmentTxt
      else
        NoOfAttachmentsValueTxt := STRSUBSTNO(NoOfAttachmentsTxt,NoOfAttachments);
    END;

    [External]
    PROCEDURE OnAfterGetSalesHeaderRecord@1(VAR SalesHeader@1000 : Record "Sales Header";VAR CurrencyFormat@1005 : Text;VAR TaxAreaDescription@1007 : Text[50]);
    VAR
      Currency@1004 : Record Currency;
      GLSetup@1003 : Record "General Ledger Setup";
      TaxArea@1002 : Record "Tax Area";
      CurrencySymbol@1001 : Text[10];
    BEGIN
      SalesHeader.SetDefaultPaymentServices;
      if SalesHeader."Currency Code" = '' then begin
        GLSetup.GET;
        CurrencySymbol := GLSetup.GetCurrencySymbol;
      end else begin
        if Currency.GET(SalesHeader."Currency Code") then;
        CurrencySymbol := Currency.GetCurrencySymbol;
      end;
      CurrencyFormat := STRSUBSTNO('%1<precision, 2:2><standard format, 0>',CurrencySymbol);

      TaxAreaDescription := '';
      if SalesHeader."Tax Area Code" <> '' then
        if TaxArea.GET(SalesHeader."Tax Area Code") then
          TaxAreaDescription := TaxArea.Description;
    END;

    [External]
    PROCEDURE LookupCustomerName@5(VAR SalesHeader@1003 : Record "Sales Header";Text@1000 : Text;VAR CustomerName@1005 : Text[50];VAR CustomerEmail@1004 : Text[80]) : Boolean;
    VAR
      Customer@1002 : Record Customer;
      BCO365CustomerList@1001 : Page "BC O365 Customer List";
    BEGIN
      if Text <> '' then begin
        Customer.SETRANGE(Name,Text);
        if Customer.FINDFIRST then;
        Customer.SETRANGE(Name);
      end;

      BCO365CustomerList.LOOKUPMODE(true);
      BCO365CustomerList.SETRECORD(Customer);

      if BCO365CustomerList.RUNMODAL = ACTION::LookupOK then begin
        BCO365CustomerList.GETRECORD(Customer);
        SalesHeader.SetHideValidationDialog(true);
        CustomerName := Customer.Name;
        SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
        CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE NotifyOrWarnAboutCoupouns@9(VAR SalesHeader@1003 : Record "Sales Header");
    VAR
      CouponsManagement@1004 : Codeunit "Coupons Management";
    BEGIN
      if not HasWarnedAboutExpiredOrClaimedCoupons then
        HasWarnedAboutExpiredOrClaimedCoupons :=
          CouponsManagement.WarnIfExpiredOrClaimedCoupons(SalesHeader."Document Type",SalesHeader."No.");
      if (SalesHeader."Sell-to Customer No." <> '') and
         (not CouponsHasBeenCheckedForCustomer) and (not HasWarnedAboutExpiredOrClaimedCoupons)
      then begin
        COMMIT;
        if CODEUNIT.RUN(CODEUNIT::"Coupons Sync",SalesHeader) then;
        CouponsHasBeenCheckedForCustomer := true;
      end;
    END;

    [External]
    PROCEDURE GetCouponCodesAndCouponsExists@10(VAR SalesHeader@1001 : Record "Sales Header";VAR CouponCodes@1000 : Text;VAR CouponsExistsForCustomer@1002 : Boolean);
    VAR
      O365CouponClaim@1003 : Record "O365 Coupon Claim";
    BEGIN
      UpdateCouponCodes(SalesHeader,CouponCodes);
      CouponsExistsForCustomer := O365CouponClaim.CouponsExistForCustomer(SalesHeader."Sell-to Customer No.");
    END;

    PROCEDURE CustomerChanged@15();
    BEGIN
      HasWarnedAboutExpiredOrClaimedCoupons := false;
      CouponsHasBeenCheckedForCustomer := false;
    END;

    [External]
    PROCEDURE UpdateCustomerFields@11(VAR SalesHeader@1000 : Record "Sales Header";VAR CustomerName@1002 : Text[50];VAR CustomerEmail@1001 : Text[80]);
    BEGIN
      CustomerName := SalesHeader."Sell-to Customer Name";
      CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");
    END;

    [External]
    PROCEDURE ValidateCustomerName@12(VAR SalesHeader@1001 : Record "Sales Header";VAR CustomerName@1003 : Text[50];VAR CustomerEmail@1002 : Text[80]);
    VAR
      Customer@1000 : Record Customer;
      Contact@1004 : Record Contact;
    BEGIN
      if SalesHeader."Sell-to Customer Name" = '' then
        exit;

      if STRLEN(SalesHeader."Sell-to Customer Name") <= MAXSTRLEN(Contact."No.") then
        if Contact.GET(COPYSTR(SalesHeader."Sell-to Customer Name",1,MAXSTRLEN(Contact."No."))) then begin
          if not FindCustomerByContactNo(Contact."No.",Customer) then begin
            Customer.GET(CreateCustomerFromContact(Contact));
            SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
          end;
          SalesHeader.VALIDATE("Sell-to Customer Name",Contact.Name);
        end;

      if not Customer.GET(Customer.GetCustNoOpenCard(SalesHeader."Sell-to Customer Name",false,false)) then begin
        // When no customer is found, create a new and notify the user
        Customer.GET(Customer.CreateNewCustomer(COPYSTR(SalesHeader."Sell-to Customer Name",1,MAXSTRLEN(Customer.Name)),false));
        SendCustomerCreatedNotification(Customer,SalesHeader);
      end;

      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      CustomerName := Customer.Name;
      CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");
    END;

    [External]
    PROCEDURE ValidateCustomerEmail@13(VAR SalesHeader@1002 : Record "Sales Header";CustomerEmail@1000 : Text[80]);
    VAR
      Customer@1003 : Record Customer;
      MailManagement@1001 : Codeunit "Mail Management";
    BEGIN
      if CustomerEmail <> '' then begin
        MailManagement.CheckValidEmailAddress(CustomerEmail);

        Customer.LOCKTABLE;
        if (SalesHeader."Sell-to Customer No." <> '') and Customer.WRITEPERMISSION then
          if Customer.GET(SalesHeader."Sell-to Customer No.") then
            if CustomerEmail <> Customer."E-Mail" then begin
              Customer."E-Mail" := CustomerEmail;
              Customer.MODIFY(true);
            end;
      end;
    END;

    [External]
    PROCEDURE OnQueryCloseForSalesHeader@14(VAR SalesHeader@1001 : Record "Sales Header";ForceExit@1000 : Boolean;CustomerName@1002 : Text[50]) : Boolean;
    BEGIN
      if ForceExit then
        exit(true);

      if SalesHeader."No." = '' then
        exit(true);

      if CustomerName = '' then begin
        SalesHeader.DELETE(true);
        exit(true);
      end;

      if SalesHeader.SalesLinesExist then
        exit(true);

      if GUIALLOWED then
        exit(ProcessDraftInvoiceOnCreate(SalesHeader));
    END;

    [External]
    PROCEDURE ShowInvoiceDiscountNotification@18(VAR InvoiceDiscountNotification@1000 : Notification);
    BEGIN
      InvoiceDiscountNotification.ID := CREATEGUID;
      InvoiceDiscountNotification.MESSAGE := InvoiceDiscountChangedMsg;
      InvoiceDiscountNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      InvoiceDiscountNotification.SEND;
    END;

    [External]
    PROCEDURE LookupDescription@17(VAR SalesLine@1003 : Record "Sales Line";Text@1000 : Text;VAR DescriptionSelected@1004 : Boolean) : Boolean;
    VAR
      Item@1002 : Record Item;
      BCO365ItemList@1001 : Page "BC O365 Item List";
    BEGIN
      if Text <> '' then begin
        Item.SETRANGE(Description,Text);
        if Item.FINDFIRST then;
        Item.SETRANGE(Description);
      end;

      BCO365ItemList.LOOKUPMODE(true);
      BCO365ItemList.SETRECORD(Item);

      if BCO365ItemList.RUNMODAL = ACTION::LookupOK then begin
        BCO365ItemList.GETRECORD(Item);
        SalesLine.SetHideValidationDialog(true);
        SalesLine.VALIDATE("No.",Item."No.");
        DescriptionSelected := SalesLine.Description <> '';
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE ConstructCurrencyFormatString@16(VAR SalesLine@1004 : Record "Sales Line";VAR CurrencyFormat@1003 : Text);
    VAR
      Currency@1002 : Record Currency;
      GLSetup@1001 : Record "General Ledger Setup";
      CurrencySymbol@1000 : Text[10];
    BEGIN
      if SalesLine."Currency Code" = '' then begin
        GLSetup.GET;
        CurrencySymbol := GLSetup.GetCurrencySymbol;
      end else begin
        if Currency.GET(SalesLine."Currency Code") then;
        CurrencySymbol := Currency.GetCurrencySymbol;
      end;
      CurrencyFormat := STRSUBSTNO('%1<precision, 2:2><standard format, 0>',CurrencySymbol);
    END;

    [External]
    PROCEDURE GetValueWithinBounds@1027(Value@1000 : Decimal;MinValue@1001 : Decimal;MaxValue@1002 : Decimal;VAR AmountOutsideOfBoundsNotificationSend@1003 : Boolean) : Decimal;
    BEGIN
      if Value < MinValue then begin
        SendOutsideRangeNotification(AmountOutsideOfBoundsNotificationSend);
        exit(MinValue);
      end;
      if Value > MaxValue then begin
        SendOutsideRangeNotification(AmountOutsideOfBoundsNotificationSend);
        exit(MaxValue);
      end;
      exit(Value);
    END;

    [External]
    PROCEDURE SendOutsideRangeNotification@1028(VAR AmountOutsideOfBoundsNotificationSend@1001 : Boolean);
    VAR
      AmountOutOfBoundsNotification@1000 : Notification;
    BEGIN
      if AmountOutsideOfBoundsNotificationSend then
        exit;

      AmountOutOfBoundsNotification.ID := CREATEGUID;
      AmountOutOfBoundsNotification.MESSAGE := AmountOutsideRangeMsg;
      AmountOutOfBoundsNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      AmountOutOfBoundsNotification.SEND;
      AmountOutsideOfBoundsNotificationSend := true;
    END;

    PROCEDURE LookupContactFromSalesHeader@143(VAR SalesHeader@1004 : Record "Sales Header") : Boolean;
    VAR
      Customer@1002 : Record Customer;
      Contact@1000 : Record Contact;
      O365ContactLookup@1001 : Page "O365 Contact Lookup";
    BEGIN
      if SalesHeader."Sell-to Contact No." <> '' then begin
        Contact.GET(SalesHeader."Sell-to Contact No.");
        O365ContactLookup.SETRECORD(Contact);
      end;
      O365ContactLookup.LOOKUPMODE(true);
      if O365ContactLookup.RUNMODAL = ACTION::LookupOK then begin
        O365ContactLookup.GETRECORD(Contact);
        if SalesHeader."Sell-to Contact No." <> Contact."No." then begin
          if not FindCustomerByContactNo(Contact."No.",Customer) then
            Customer.GET(CreateCustomerFromContact(Contact));
          SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
        end;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE FindCustomerByContactNo@144(ContactNo@1001 : Code[20];VAR Customer@1002 : Record Customer) : Boolean;
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
    BEGIN
      if not ContBusRel.FindByContact(ContBusRel."Link to Table"::Customer,ContactNo) then
        exit(false);

      Customer.GET(ContBusRel."No.");
      exit(true);
    END;

    LOCAL PROCEDURE CreateCustomerFromContact@146(Contact@1000 : Record Contact) : Code[20];
    VAR
      MarketingSetup@1003 : Record "Marketing Setup";
      Customer@1001 : Record Customer;
    BEGIN
      MarketingSetup.GET;
      Contact.SetHideValidationDialog(true);
      case Contact.Type of
        Contact.Type::Company:
          begin
            MarketingSetup.TESTFIELD("Cust. Template Company Code");
            Contact.CreateCustomer(MarketingSetup."Cust. Template Company Code");
          end;
        Contact.Type::Person:
          begin
            MarketingSetup.TESTFIELD("Cust. Template Person Code");
            Contact.CreateCustomer(MarketingSetup."Cust. Template Person Code");
          end;
      end;

      FindCustomerByContactNo(Contact."No.",Customer);
      exit(Customer."No.");
    END;

    LOCAL PROCEDURE SendCustomerCreatedNotification@29(Customer@1000 : Record Customer;SalesHeader@1001 : Record "Sales Header");
    VAR
      CustomerCreatedNotification@1002 : Notification;
      Type@1003 : Integer;
    BEGIN
      CustomerCreatedNotification.ID := CREATEGUID;
      CustomerCreatedNotification.MESSAGE(CustomerCreatedMsg);
      CustomerCreatedNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
      CustomerCreatedNotification.ADDACTION(UndoTxt,CODEUNIT::"O365 Sales Invoice Mgmt",'UndoCustomerCreation');
      CustomerCreatedNotification.SETDATA('CustomerNo',Customer."No.");
      CustomerCreatedNotification.SETDATA('SalesHeaderNo',SalesHeader."No.");

      Type := SalesHeader."Document Type";
      CustomerCreatedNotification.SETDATA('SalesHeaderType',FORMAT(Type));
      CustomerCreatedNotification.SEND;
    END;

    PROCEDURE UndoCustomerCreation@31(VAR CreateCustomerNotification@1000 : Notification);
    VAR
      Customer@1002 : Record Customer;
      SalesHeader@1003 : Record "Sales Header";
      CustContUpdate@1005 : Codeunit "CustCont-Update";
      DocumentType@1001 : Option;
    BEGIN
      EVALUATE(DocumentType,CreateCustomerNotification.GETDATA('SalesHeaderType'));

      if SalesHeader.GET(DocumentType,CreateCustomerNotification.GETDATA('SalesHeaderNo')) then begin
        SalesHeader.INIT;
        SalesHeader.MODIFY;
      end;

      if Customer.GET(CreateCustomerNotification.GETDATA('CustomerNo')) then begin
        CustContUpdate.DeleteCustomerContacts(Customer);
        Customer.DELETE(true);
      end;
    END;

    PROCEDURE GetInvoiceDiscountCaption@19(InvoiceDiscountValue@1000 : Decimal) : Text;
    BEGIN
      if InvoiceDiscountValue = 0 then
        exit(InvoiceDiscountLbl);
      exit(STRSUBSTNO('%1 (%2%)',InvoiceDiscountLbl,ROUND(InvoiceDiscountValue,0.1)));
    END;

    BEGIN
    END.
  }
}

