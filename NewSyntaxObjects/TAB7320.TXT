OBJECT Table 7320 Warehouse Shipment Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.";
    OnInsert=BEGIN
               WhseSetup.GET;
               if "No." = '' then begin
                 WhseSetup.TESTFIELD("Whse. Ship Nos.");
                 NoSeriesMgt.InitSeries(WhseSetup."Whse. Ship Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               end;

               NoSeriesMgt.SetDefaultSeries("Shipping No. Series",WhseSetup."Posted Whse. Shipment Nos.");

               GetLocation("Location Code");
               VALIDATE("Bin Code",Location."Shipment Bin Code");
               "Posting Date" := WORKDATE;
               "Shipment Date" := WORKDATE;
             END;

    OnDelete=BEGIN
               TESTFIELD(Status,Status::Open);
               DeleteWarehouseShipmentLines;
               DeleteRelatedLines;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Shipment Header;
    LookupPageID="Warehouse Shipment List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                WhseSetup.GET;
                                                                if "No." <> xRec."No." then begin
                                                                  NoSeriesMgt.TestManual(WhseSetup."Whse. Ship Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                WhseShptLine@1002 : Record "Warehouse Shipment Line";
                                                              BEGIN
                                                                if not WmsManagement.LocationIsAllowed("Location Code") then
                                                                  ERROR(Text003,"Location Code");

                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  "Zone Code" := '';
                                                                  "Bin Code" := '';
                                                                  WhseShptLine.SETRANGE("No.","No.");
                                                                  if not WhseShptLine.ISEMPTY then
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Location Code"));
                                                                end;

                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Require Shipment");
                                                                if Location."Directed Put-away and Pick" or Location."Bin Mandatory" then
                                                                  VALIDATE("Bin Code",Location."Shipment Bin Code");

                                                                if USERID <> '' then begin
                                                                  FILTERGROUP := 2;
                                                                  SETRANGE("Location Code","Location Code");
                                                                  FILTERGROUP := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Assigned User ID" <> '' then begin
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                end else begin
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 000000T;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=ENU=Assignment Date;
                                                   Editable=false }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=ENU=Assignment Time;
                                                   Editable=false }
    { 6   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                if "Sorting Method" <> xRec."Sorting Method" then
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=ENU=Sorting Method;
                                                   OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,Destination";
                                                   OptionString=" ",Item,Document,"Shelf or Bin","Due Date",Destination }
    { 7   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE ("Table Name"=CONST("Whse. Shipment"),
                                                                                                     Type=CONST(" "),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record Bin;
                                                                WhseIntegrationMgt@1001 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                if (xRec."Bin Code" <> "Bin Code") or ("Zone Code" = '') then begin
                                                                  TESTFIELD(Status,Status::Open);
                                                                  if "Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Shipment Header",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    end;
                                                                  end;
                                                                  MessageIfShptLinesExist(FIELDCAPTION("Bin Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Zone Code" <> xRec."Zone Code" then begin
                                                                  TESTFIELD(Status,Status::Open);
                                                                  if "Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "Bin Code" := '';
                                                                  MessageIfShptLinesExist(FIELDCAPTION("Zone Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 34  ;   ;Document Status     ;Option        ;OnValidate=VAR
                                                                WhsePickRqst@1000 : Record "Whse. Pick Request";
                                                              BEGIN
                                                                CALCFIELDS("Completely Picked");
                                                                if "Completely Picked" <> xRec."Completely Picked" then begin
                                                                  WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
                                                                  WhsePickRqst.SETRANGE("Document No.","No.");
                                                                  if not WhsePickRqst.ISEMPTY then
                                                                    WhsePickRqst.MODIFYALL("Completely Picked","Completely Picked");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Document Status;
                                                   OptionCaptionML=ENU=" ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped";
                                                   OptionString=" ","Partially Picked","Partially Shipped","Completely Picked","Completely Shipped";
                                                   Editable=false }
    { 39  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                if xRec."Shipping Agent Code" = "Shipping Agent Code" then
                                                                  exit;

                                                                "Shipping Agent Service Code" := '';
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 43  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 45  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                WhseShptLine@1000 : Record "Warehouse Shipment Line";
                                                              BEGIN
                                                                if "Shipment Date" <> xRec."Shipment Date" then begin
                                                                  WhseShptLine.SETRANGE("No.","No.");
                                                                  if not WhseShptLine.ISEMPTY then
                                                                    if CONFIRM(
                                                                         STRSUBSTNO(Text008,FIELDCAPTION("Shipment Date")),false)
                                                                    then
                                                                      WhseShptLine.MODIFYALL("Shipment Date","Shipment Date");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 46  ;   ;Completely Picked   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Warehouse Shipment Line"."Completely Picked" WHERE ("No."=FIELD("No.")));
                                                   CaptionML=ENU=Completely Picked;
                                                   Editable=false }
    { 47  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released;
                                                   OptionString=Open,Released;
                                                   Editable=false }
    { 48  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 50  ;   ;Create Posted Header;Boolean       ;CaptionML=ENU=Create Posted Header }
    { 61  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 62  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Posted Whse. Shipment Header";
                                                   CaptionML=ENU=Last Shipping No.;
                                                   Editable=false }
    { 63  ;   ;Shipping No. Series ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Shipping No. Series" <> '' then begin
                                                                  WhseSetup.GET;
                                                                  WhseSetup.TESTFIELD("Posted Whse. Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(WhseSetup."Posted Whse. Shipment Nos.","Shipping No. Series");
                                                                end;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with WhseShptHeader do begin
                                                                WhseShptHeader := Rec;
                                                                WhseSetup.GET;
                                                                WhseSetup.TESTFIELD("Posted Whse. Shipment Nos.");
                                                                if NoSeriesMgt.LookupSeries(WhseSetup."Posted Whse. Shipment Nos.","Shipping No. Series") then
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := WhseShptHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Shipping No. Series }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Location Code"                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1002 : Record Location;
      WhseSetup@1003 : Record "Warehouse Setup";
      WhseShptHeader@1013 : Record "Warehouse Shipment Header";
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
      Text000@1011 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1010 : TextConst 'ENU=You cannot change the %1, because the document has one or more lines.';
      Text002@1000 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      WmsManagement@1004 : Codeunit "WMS Management";
      Text003@1005 : TextConst 'ENU=You are not allowed to use location code %1.';
      ItemTrackingMgt@1006 : Codeunit "Item Tracking Management";
      HideValidationDialog@1007 : Boolean;
      Text006@1012 : TextConst 'ENU=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Shipment Lines.\';
      Text007@1009 : TextConst 'ENU=You must update the existing Warehouse Shipment Lines manually.';
      Text008@1014 : TextConst 'ENU=You have modified the %1.\\Do you want to update the lines?';
      Text009@1008 : TextConst 'ENU=The items have been picked. If you delete the warehouse shipment, then the items will remain in the shipping area until you put them away.\Related item tracking information that is defined during the pick will be deleted.\Are you sure that you want to delete the warehouse shipment?';

    [External]
    PROCEDURE AssistEdit@8(OldWhseShptHeader@1000 : Record "Warehouse Shipment Header") : Boolean;
    VAR
      WhseShptHeader@1001 : Record "Warehouse Shipment Header";
    BEGIN
      WhseSetup.GET;
      with WhseShptHeader do begin
        WhseShptHeader := Rec;
        WhseSetup.TESTFIELD("Whse. Ship Nos.");
        if NoSeriesMgt.SelectSeries(
             WhseSetup."Whse. Ship Nos.",OldWhseShptHeader."No. Series","No. Series")
        then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseShptHeader;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE SortWhseDoc@3();
    VAR
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
      SequenceNo@1000 : Integer;
    BEGIN
      WhseShptLine.SETRANGE("No.","No.");
      case "Sorting Method" of
        "Sorting Method"::Item:
          WhseShptLine.SETCURRENTKEY("No.","Item No.");
        "Sorting Method"::Document:
          WhseShptLine.SETCURRENTKEY("No.","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              WhseShptLine.SETCURRENTKEY("No.","Bin Code")
            else
              WhseShptLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        "Sorting Method"::"Due Date":
          WhseShptLine.SETCURRENTKEY("No.","Due Date");
        "Sorting Method"::Destination:
          WhseShptLine.SETCURRENTKEY("No.","Destination Type","Destination No.");
      end;

      if WhseShptLine.FIND('-') then begin
        SequenceNo := 10000;
        repeat
          WhseShptLine."Sorting Sequence No." := SequenceNo;
          WhseShptLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        until WhseShptLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetDocumentStatus@15(LineNo@1003 : Integer) : Integer;
    VAR
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
    BEGIN
      WhseShptLine.SETRANGE("No.","No.");
      if LineNo <> 0 then
        WhseShptLine.SETFILTER("Line No.",'<>%1',LineNo);
      if not WhseShptLine.FINDFIRST then
        exit(WhseShptLine.Status::" ");

      WhseShptLine.SETRANGE(Status,WhseShptLine.Status::"Partially Shipped");
      if WhseShptLine.FINDFIRST then
        exit(WhseShptLine.Status);

      WhseShptLine.SETRANGE(Status,WhseShptLine.Status::"Partially Picked");
      if WhseShptLine.FINDFIRST then
        exit(WhseShptLine.Status);

      WhseShptLine.SETRANGE(Status,WhseShptLine.Status::"Completely Picked");
      if WhseShptLine.FINDFIRST then begin
        WhseShptLine.SETFILTER(Status,'<%1',WhseShptLine.Status::"Completely Picked");
        if WhseShptLine.FINDFIRST then
          exit(WhseShptLine.Status::"Partially Picked");

        exit(WhseShptLine.Status);
      end;

      WhseShptLine.SETRANGE(Status,WhseShptLine.Status::"Completely Shipped");
      if WhseShptLine.FINDFIRST then begin
        WhseShptLine.SETFILTER(Status,'<%1',WhseShptLine.Status::"Completely Shipped");
        if WhseShptLine.FINDFIRST then
          exit(WhseShptLine.Status::"Partially Shipped");

        exit(WhseShptLine.Status);
      end;

      exit(WhseShptLine.Status);
    END;

    LOCAL PROCEDURE MessageIfShptLinesExist@7(ChangedFieldName@1000 : Text[80]);
    VAR
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
    BEGIN
      WhseShptLine.SETRANGE("No.","No.");
      if not WhseShptLine.ISEMPTY then
        if not HideValidationDialog then
          MESSAGE(
            STRSUBSTNO(
              Text006,ChangedFieldName,TABLECAPTION) + Text007);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE LookupWhseShptHeader@1(VAR WhseShptHeader@1001 : Record "Warehouse Shipment Header");
    BEGIN
      COMMIT;
      if USERID <> '' then begin
        WhseShptHeader.FILTERGROUP := 2;
        WhseShptHeader.SETRANGE("Location Code");
      end;
      if PAGE.RUNMODAL(0,WhseShptHeader) = ACTION::LookupOK then;
      if USERID <> '' then begin
        WhseShptHeader.FILTERGROUP := 2;
        WhseShptHeader.SETRANGE("Location Code",WhseShptHeader."Location Code");
        WhseShptHeader.FILTERGROUP := 0;
      end;
    END;

    [External]
    PROCEDURE LookupLocation@4(VAR WhseShptHeader@1001 : Record "Warehouse Shipment Header");
    VAR
      Location@1000 : Record Location;
    BEGIN
      COMMIT;
      Location.FILTERGROUP := 2;
      Location.SETRANGE(Code);
      if PAGE.RUNMODAL(PAGE::"Locations with Warehouse List",Location) = ACTION::LookupOK then
        WhseShptHeader.VALIDATE("Location Code",Location.Code);
      Location.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE DeleteRelatedLines@5();
    VAR
      WhsePickRqst@1001 : Record "Whse. Pick Request";
      WhseComment@1000 : Record "Warehouse Comment Line";
    BEGIN
      WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
      WhsePickRqst.SETRANGE("Document No.","No.");
      if not WhsePickRqst.ISEMPTY then
        WhsePickRqst.DELETEALL;

      WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Shipment");
      WhseComment.SETRANGE(Type,WhseComment.Type::" ");
      WhseComment.SETRANGE("No.","No.");
      WhseComment.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteWarehouseShipmentLines@6();
    VAR
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
      Confirmed@1002 : Boolean;
    BEGIN
      WhseShptLine.SETRANGE("No.","No.");
      if WhseShptLine.FIND('-') then
        repeat
          if WhseShptLine."Qty. Shipped" < WhseShptLine."Qty. Picked" then begin
            if not CONFIRM(Text009) then
              ERROR('');
            Confirmed := true;
          end;
        until (WhseShptLine.NEXT = 0) or Confirmed;

      ItemTrackingMgt.SetDeleteReservationEntries(Confirmed);

      if WhseShptLine.FIND('-') then
        repeat
          if WhseShptLine."Assemble to Order" then
            WhseShptLine.VALIDATE("Qty. to Ship",0);
          ItemTrackingMgt.DeleteWhseItemTrkgLines(DATABASE::"Warehouse Shipment Line",0,WhseShptLine."No.",
            '',0,WhseShptLine."Line No.",WhseShptLine."Location Code",true);
          WhseShptLine.DELETE;
        until WhseShptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FindFirstAllowedRec@2(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseShptHeader@1001 : Record "Warehouse Shipment Header";
      WMSManagement@1002 : Codeunit "WMS Management";
    BEGIN
      if FIND(Which) then begin
        WhseShptHeader := Rec;
        while true do begin
          if WMSManagement.LocationIsAllowedToView("Location Code") then
            exit(true);

          if NEXT(1) = 0 then begin
            Rec := WhseShptHeader;
            if FIND(Which) then
              while true do begin
                if WMSManagement.LocationIsAllowedToView("Location Code") then
                  exit(true);

                if NEXT(-1) = 0 then
                  exit(false);
              end;
          end;
        end;
      end;
      exit(false);
    END;

    [External]
    PROCEDURE FindNextAllowedRec@11(Steps@1000 : Integer) : Integer;
    VAR
      WhseShptHeader@1002 : Record "Warehouse Shipment Header";
      WMSManagement@1001 : Codeunit "WMS Management";
      RealSteps@1003 : Integer;
      NextSteps@1004 : Integer;
    BEGIN
      RealSteps := 0;
      if Steps <> 0 then begin
        WhseShptHeader := Rec;
        repeat
          NextSteps := NEXT(Steps / ABS(Steps));
          if WMSManagement.LocationIsAllowedToView("Location Code") then begin
            RealSteps := RealSteps + NextSteps;
            WhseShptHeader := Rec;
          end;
        until (NextSteps = 0) or (RealSteps = Steps);
        Rec := WhseShptHeader;
        if not FIND then;
      end;
      exit(RealSteps);
    END;

    [External]
    PROCEDURE ErrorIfUserIsNotWhseEmployee@13();
    VAR
      WhseEmployee@1000 : Record "Warehouse Employee";
    BEGIN
      if USERID <> '' then begin
        WhseEmployee.SETRANGE("User ID",USERID);
        if WhseEmployee.ISEMPTY then
          ERROR(Text002,USERID);
      end;
    END;

    BEGIN
    END.
  }
}

