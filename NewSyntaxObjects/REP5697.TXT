OBJECT Report 5697 Date Compress Insurance Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Date Compr. Register"=rimd,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "Ins. Coverage Ledger Entry"=rimd,
                TableData "Insurance Register"=rimd;
    CaptionML=ENU=Date Compress Insurance Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Insurance Ledger",'',RetainDimText,Text010);
                  InsCoverageLedgEntryFilter := COPYSTR("Ins. Coverage Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 8513;    ;DataItem;Ins. Coverage Ledger Entry;
               DataItemTable="Ins. Coverage Ledger Entry";
               DataItemTableView=SORTING("FA No.","Insurance No.","Disposed FA");
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not CONFIRM(Text000,false) then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Insurance Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Insurance Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[2] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Insurance Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[3] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Insurance Ledger",'',GLSetup."Global Dimension 2 Code");

                               NewInsCoverageLedgEntry.LOCKTABLE;
                               InsuranceReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if InsCoverageLedgEntry2.FIND('+') then;
                               LastEntryNo := InsCoverageLedgEntry2."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  if ("Insurance No." <> '') and OnlyIndexEntries and not "Index Entry" then
                                    CurrReport.SKIP;
                                  InsCoverageLedgEntry2 := "Ins. Coverage Ledger Entry";
                                  with InsCoverageLedgEntry2 do begin
                                    SETCURRENTKEY("FA No.","Insurance No.");
                                    COPYFILTERS("Ins. Coverage Ledger Entry");

                                    SETRANGE("Insurance No.","Insurance No.");
                                    SETRANGE("FA No.","FA No.");
                                    SETRANGE("Document Type","Document Type");
                                    SETRANGE("Index Entry","Index Entry");
                                    SETRANGE("Disposed FA","Disposed FA");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));

                                    if RetainNo(FIELDNO("Document No.")) then
                                      SETRANGE("Document No.","Document No.");
                                    if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");

                                    InitNewEntry(NewInsCoverageLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,false,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewInsCoverageLedgEntry,InsCoverageLedgEntry2);
                                    while NEXT <> 0 do begin
                                      DimBufMgt.CollectDimEntryNo(
                                        TempSelectedDim,"Dimension Set ID","Entry No.",
                                        ComprDimEntryNo,true,DimEntryNo);
                                      if DimEntryNo = ComprDimEntryNo then
                                        SummarizeEntry(NewInsCoverageLedgEntry,InsCoverageLedgEntry2);
                                    end;

                                    InsertNewEntry(NewInsCoverageLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(InsuranceReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(InsuranceReg,DateComprReg);
                              END;

               ReqFilterFields="Insurance No.","FA No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if EntrdDateComprReg."Ending Date" = 0D then
                     EntrdDateComprReg."Ending Date" := TODAY;
                   if EntrdInsCoverageLedgEntry.Description = '' then
                     EntrdInsCoverageLedgEntry.Description := Text009;

                   with "Ins. Coverage Ledger Entry" do begin
                     InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
                     InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
                     InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
                   end;

                   RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Insurance Ledger",'');
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=PostingDescription;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies the posting date to be used by the batch job as a filter.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=EntrdInsCoverageLedgEntry.Description }

      { 6   ;2   ;Field     ;
                  Name=OnlyIndexEntries;
                  CaptionML=ENU=Only Index Entries;
                  ToolTipML=ENU=Specifies if only index entries are date compressed. With the Index Fixed Assets batch job, you can index fixed assets that are linked to a specific depreciation book. The batch job creates entries in a journal based on the conditions that you specify. You can then post the journal or adjust the entries before posting, if necessary.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=OnlyIndexEntries }

      { 1907651001;2;Group  ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies, if you leave the field empty, the next available number on the resulting journal line. If a number series is not set up, enter the document number that you want assigned to the resulting journal line.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=Retain[1] }

      { 8   ;2   ;Field     ;
                  Name=RetainDimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Insurance Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing insurance ledger entries...\\';
      Text005@1005 : TextConst 'ENU=Insurance No.        #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      InsuranceReg@1014 : Record "Insurance Register";
      EntrdInsCoverageLedgEntry@1015 : Record "Ins. Coverage Ledger Entry";
      NewInsCoverageLedgEntry@1016 : Record "Ins. Coverage Ledger Entry";
      InsCoverageLedgEntry2@1017 : Record "Ins. Coverage Ledger Entry";
      SelectedDim@1018 : Record "Selected Dimension";
      TempSelectedDim@1019 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1020 : Record "Dimension Selection Buffer";
      DateComprMgt@1021 : Codeunit DateComprMgt;
      DimBufMgt@1022 : Codeunit "Dimension Buffer Management";
      DimMgt@1023 : Codeunit DimensionManagement;
      Window@1024 : Dialog;
      InsCoverageLedgEntryFilter@1025 : Text[250];
      NoOfFields@1026 : Integer;
      Retain@1027 : ARRAY [10] OF Boolean;
      FieldNumber@1028 : ARRAY [10] OF Integer;
      FieldNameArray@1029 : ARRAY [10] OF Text[100];
      LastEntryNo@1030 : Integer;
      NoOfDeleted@1031 : Integer;
      InsuranceRegExists@1032 : Boolean;
      OnlyIndexEntries@1033 : Boolean;
      i@1034 : Integer;
      ComprDimEntryNo@1035 : Integer;
      DimEntryNo@1036 : Integer;
      RetainDimText@1037 : Text[250];

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if InsuranceReg.FIND('+') then;
      InsuranceReg.INIT;
      InsuranceReg."No." := InsuranceReg."No." + 1;
      InsuranceReg."Creation Date" := TODAY;
      InsuranceReg."Source Code" := SourceCodeSetup."Compress Insurance Ledger";
      InsuranceReg."User ID" := USERID;
      InsuranceReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Ins. Coverage Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        InsCoverageLedgEntryFilter,InsuranceReg."No.",SourceCodeSetup."Compress Insurance Ledger");

      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      InsuranceRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR InsuranceReg@1000 : Record "Insurance Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      InsuranceReg."To Entry No." := NewInsCoverageLedgEntry."Entry No.";

      if InsuranceRegExists then begin
        InsuranceReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        InsuranceReg.INSERT;
        DateComprReg.INSERT;
        InsuranceRegExists := true;
      end;
      COMMIT;

      NewInsCoverageLedgEntry.LOCKTABLE;
      InsuranceReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      InsCoverageLedgEntry2.RESET;
      if InsCoverageLedgEntry2.FIND('+') then;
      if LastEntryNo <> InsCoverageLedgEntry2."Entry No." then begin
        LastEntryNo := InsCoverageLedgEntry2."Entry No.";
        InitRegisters;
      end;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewInsCoverageLedgEntry@1000 : Record "Ins. Coverage Ledger Entry";InsCoverageLedgEntry@1001 : Record "Ins. Coverage Ledger Entry");
    BEGIN
      with InsCoverageLedgEntry do begin
        NewInsCoverageLedgEntry.Amount := NewInsCoverageLedgEntry.Amount + Amount;
        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      InsCoverageLedgEntry@1000 : Record "Ins. Coverage Ledger Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      InsCoverageLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,InsCoverageLedgEntryNo) then begin
        InitNewEntry(NewInsCoverageLedgEntry);
        repeat
          InsCoverageLedgEntry.GET(InsCoverageLedgEntryNo);
          SummarizeEntry(NewInsCoverageLedgEntry,InsCoverageLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,InsCoverageLedgEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewInsCoverageLedgEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewInsCoverageLedgEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewInsCoverageLedgEntry@1000 : Record "Ins. Coverage Ledger Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;
      with InsCoverageLedgEntry2 do begin
        NewInsCoverageLedgEntry.INIT;
        NewInsCoverageLedgEntry."Entry No." := LastEntryNo;

        NewInsCoverageLedgEntry."Insurance No." := "Insurance No.";
        NewInsCoverageLedgEntry."FA No." := "FA No.";
        NewInsCoverageLedgEntry."Document Type" := "Document Type";
        NewInsCoverageLedgEntry."Index Entry" := "Index Entry";
        NewInsCoverageLedgEntry."Disposed FA" := "Disposed FA";

        NewInsCoverageLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewInsCoverageLedgEntry.Description := EntrdInsCoverageLedgEntry.Description;
        NewInsCoverageLedgEntry."Source Code" := SourceCodeSetup."Compress Insurance Ledger";
        NewInsCoverageLedgEntry."User ID" := USERID;
        if RetainNo(FIELDNO("Document No.")) then
          NewInsCoverageLedgEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewInsCoverageLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewInsCoverageLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewInsCoverageLedgEntry."Insurance No.");
        Window.UPDATE(2,NewInsCoverageLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewInsCoverageLedgEntry@1000 : Record "Ins. Coverage Ledger Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewInsCoverageLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewInsCoverageLedgEntry.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

