OBJECT Table 5093 Opportunity Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Opp@1000 : Record Opportunity;
               SalesCycleStage@1001 : Record "Sales Cycle Stage";
             BEGIN
               Opp.GET("Opportunity No.");
               case "Action Taken" of
                 "Action Taken"::" ",
                 "Action Taken"::Next,
                 "Action Taken"::Previous,
                 "Action Taken"::Updated,
                 "Action Taken"::Jumped:
                   begin
                     if SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") then
                       "Sales Cycle Stage Description" := SalesCycleStage.Description;
                     if Opp.Status <> Opp.Status::"In Progress" then begin
                       Opp.Status := Opp.Status::"In Progress";
                       Opp.MODIFY;
                     end;
                   end;
                 "Action Taken"::Won:
                   begin
                     TestCust;
                     if Opp.Status <> Opp.Status::Won then begin
                       Opp.Status := Opp.Status::Won;
                       Opp.Closed := true;
                       Opp."Date Closed" := "Date of Change";
                       "Date Closed" := "Date of Change";
                       "Estimated Close Date" := "Date of Change";
                       Opp.MODIFY;
                     end;
                   end;
                 "Action Taken"::Lost:
                   if Opp.Status <> Opp.Status::Lost then begin
                     Opp.Status := Opp.Status::Lost;
                     Opp.Closed := true;
                     Opp."Date Closed" := "Date of Change";
                     "Date Closed" := "Date of Change";
                     "Estimated Close Date" := "Date of Change";
                     Opp.MODIFY;
                   end;
               end;
             END;

    CaptionML=ENU=Opportunity Entry;
    LookupPageID="Opportunity Entries";
    DrillDownPageID="Opportunity Entries";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   OnValidate=VAR
                                                                OppEntry@1000 : Record "Opportunity Entry";
                                                              BEGIN
                                                                OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                OppEntry.SETRANGE(Active,true);
                                                                OppEntry.SETRANGE("Opportunity No.","Opportunity No.");
                                                                if OppEntry.FINDFIRST then begin
                                                                  "Estimated Value (LCY)" := OppEntry."Estimated Value (LCY)";
                                                                  "Chances of Success %" := OppEntry."Chances of Success %";
                                                                  "Date of Change" := OppEntry."Date of Change";
                                                                  if OppEntry."Date of Change" > WORKDATE then
                                                                    "Date of Change" := OppEntry."Date of Change"
                                                                  else
                                                                    "Date of Change" := WORKDATE;
                                                                  "Estimated Close Date" := OppEntry."Estimated Close Date";
                                                                  "Previous Sales Cycle Stage" := OppEntry."Sales Cycle Stage";
                                                                  "Action Taken" := OppEntry."Action Taken";
                                                                end else
                                                                  "Date of Change" := WORKDATE;
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 3   ;   ;Sales Cycle Code    ;Code10        ;TableRelation="Sales Cycle";
                                                   CaptionML=ENU=Sales Cycle Code }
    { 4   ;   ;Sales Cycle Stage   ;Integer       ;TableRelation="Sales Cycle Stage".Stage WHERE ("Sales Cycle Code"=FIELD("Sales Cycle Code"));
                                                   OnValidate=BEGIN
                                                                if SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") then
                                                                  "Sales Cycle Stage Description" := SalesCycleStage.Description;
                                                              END;

                                                   CaptionML=ENU=Sales Cycle Stage;
                                                   MinValue=1 }
    { 5   ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Contact No. }
    { 6   ;   ;Contact Company No. ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=ENU=Contact Company No. }
    { 7   ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Salesperson Code }
    { 8   ;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign No. }
    { 9   ;   ;Date of Change      ;Date          ;CaptionML=ENU=Date of Change }
    { 10  ;   ;Active              ;Boolean       ;CaptionML=ENU=Active }
    { 11  ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed }
    { 12  ;   ;Days Open           ;Decimal       ;CaptionML=ENU=Days Open;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 13  ;   ;Action Taken        ;Option        ;OnValidate=BEGIN
                                                                if "Action Taken" <> xRec."Action Taken" then
                                                                  CLEAR("Close Opportunity Code");
                                                              END;

                                                   CaptionML=ENU=Action Taken;
                                                   OptionCaptionML=ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                   OptionString=" ",Next,Previous,Updated,Jumped,Won,Lost }
    { 14  ;   ;Estimated Value (LCY);Decimal      ;CaptionML=ENU=Estimated Value (LCY);
                                                   AutoFormatType=1 }
    { 15  ;   ;Calcd. Current Value (LCY);Decimal ;CaptionML=ENU=Calcd. Current Value (LCY);
                                                   AutoFormatType=1 }
    { 16  ;   ;Completed %         ;Decimal       ;CaptionML=ENU=Completed %;
                                                   DecimalPlaces=0:0 }
    { 17  ;   ;Chances of Success %;Decimal       ;CaptionML=ENU=Chances of Success %;
                                                   DecimalPlaces=0:0;
                                                   MaxValue=100 }
    { 18  ;   ;Probability %       ;Decimal       ;CaptionML=ENU=Probability %;
                                                   DecimalPlaces=0:0 }
    { 19  ;   ;Close Opportunity Code;Code10      ;TableRelation=IF ("Action Taken"=CONST(Won)) "Close Opportunity Code" WHERE (Type=CONST(Won))
                                                                 ELSE IF ("Action Taken"=CONST(Lost)) "Close Opportunity Code" WHERE (Type=CONST(Lost));
                                                   CaptionML=ENU=Close Opportunity Code }
    { 20  ;   ;Previous Sales Cycle Stage;Integer ;TableRelation="Sales Cycle Stage".Stage WHERE ("Sales Cycle Code"=FIELD("Sales Cycle Code"));
                                                   CaptionML=ENU=Previous Sales Cycle Stage }
    { 21  ;   ;Estimated Close Date;Date          ;CaptionML=ENU=Estimated Close Date }
    { 9501;   ;Wizard Step         ;Option        ;CaptionML=ENU=Wizard Step;
                                                   OptionCaptionML=ENU=" ,1,2,3,4,5,6";
                                                   OptionString=" ","1","2","3","4","5","6";
                                                   Editable=false }
    { 9502;   ;Cancel Old To Do    ;Boolean       ;CaptionML=ENU=Cancel Old Task }
    { 9503;   ;Action Type         ;Option        ;CaptionML=ENU=Action Type;
                                                   OptionCaptionML=ENU=" ,First,Next,Previous,Skip,Update,Jump";
                                                   OptionString=" ",First,Next,Previous,Skip,Update,Jump }
    { 9504;   ;Sales Cycle Stage Description;Text50;
                                                   CaptionML=ENU=Sales Cycle Stage Description }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Opportunity No."                        }
    {    ;"Contact Company No.","Contact No.",Active;
                                                   SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)" }
    {    ;"Campaign No.",Active                   ;SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)" }
    {    ;Active,"Sales Cycle Code","Sales Cycle Stage","Estimated Close Date";
                                                   SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)","Days Open" }
    {    ;Active,"Opportunity No."                ;SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)","Days Open" }
    {    ;Active,"Salesperson Code","Date of Change";
                                                   SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)" }
    {    ;Active,"Salesperson Code","Estimated Close Date","Action Taken","Sales Cycle Code","Sales Cycle Stage","Completed %","Probability %","Contact No.","Contact Company No.","Campaign No.","Chances of Success %","Estimated Value (LCY)","Calcd. Current Value (LCY)","Close Opportunity Code";
                                                   SumIndexFields="Estimated Value (LCY)","Calcd. Current Value (LCY)";
                                                   MaintainSIFTIndex=false }
    {    ;"Close Opportunity Code"                 }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"Entry No.","Opportunity No.",Active     }
    { 2   ;Brick               ;"Opportunity No.","Sales Cycle Stage Description" }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You can not create a Customer from contact %1 before you assign a Contact Company No. to the contact.';
      TempSalesCycleStageFirst@1010 : TEMPORARY Record "Sales Cycle Stage";
      TempSalesCycleStageNext@1009 : TEMPORARY Record "Sales Cycle Stage";
      TempSalesCycleStagePrevious@1008 : TEMPORARY Record "Sales Cycle Stage";
      TempSalesCycleStageSkip@1007 : TEMPORARY Record "Sales Cycle Stage";
      TempSalesCycleStageUpdate@1006 : TEMPORARY Record "Sales Cycle Stage";
      TempSalesCycleStageJump@1005 : TEMPORARY Record "Sales Cycle Stage";
      OppEntry@1011 : Record "Opportunity Entry";
      SalesCycleStage@1012 : Record "Sales Cycle Stage";
      PreviousDateOfChange@1013 : Date;
      EntryExists@1014 : Boolean;
      Text005@1015 : TextConst 'ENU=You cannot go to this stage before you have assigned a sales quote.';
      Text006@1020 : TextConst 'ENU=There are no stages in sales cycle %1.';
      Text007@1019 : TextConst 'ENU=The Date of Change has to be after last Date of change.';
      Text008@1018 : TextConst 'ENU=%1 must be greater than 0.';
      Text009@1017 : TextConst 'ENU=The Estimated closing date has to be later than this change.';
      Text011@1023 : TextConst 'ENU=You must select either Won or Lost.';
      Text012@1022 : TextConst 'ENU=Sales (LCY) must be greater than 0.';
      Text013@1021 : TextConst 'ENU=You must fill in the %1 field.';

    [Internal]
    PROCEDURE InsertEntry@1(VAR OppEntry@1000 : Record "Opportunity Entry";CancelOldTask@1001 : Boolean;CreateNewTask@1002 : Boolean);
    VAR
      OppEntry2@1003 : Record "Opportunity Entry";
      EntryNo@1004 : Integer;
    BEGIN
      OppEntry2.RESET;
      if OppEntry2.FINDLAST then
        EntryNo := OppEntry2."Entry No."
      else
        EntryNo := 0;
      OppEntry2.SETCURRENTKEY(Active,"Opportunity No.");
      OppEntry2.SETRANGE(Active,true);
      OppEntry2.SETRANGE("Opportunity No.",OppEntry."Opportunity No.");
      if OppEntry2.FINDFIRST then begin
        OppEntry2.Active := false;
        OppEntry2."Days Open" := OppEntry."Date of Change" - OppEntry2."Date of Change";
        OppEntry2.MODIFY;
      end;

      OppEntry2 := OppEntry;
      OppEntry2."Entry No." := EntryNo + 1;
      OppEntry2.Active := true;
      OppEntry2.CreateTask(CancelOldTask,CreateNewTask);
      OppEntry2.INSERT(true);
      OppEntry := OppEntry2;
    END;

    [Internal]
    PROCEDURE UpdateEstimates@2();
    VAR
      SalesCycle@1000 : Record "Sales Cycle";
      SalesCycleStage@1001 : Record "Sales Cycle Stage";
      Opp@1002 : Record Opportunity;
      SalesHeader@1003 : Record "Sales Header";
    BEGIN
      if SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") then begin
        SalesCycle.GET("Sales Cycle Code");
        if ("Chances of Success %" = 0) and (SalesCycleStage."Chances of Success %" <> 0) then
          "Chances of Success %" := SalesCycleStage."Chances of Success %";
        "Completed %" := SalesCycleStage."Completed %";
        case SalesCycle."Probability Calculation" of
          SalesCycle."Probability Calculation"::Multiply:
            "Probability %" := "Chances of Success %" * "Completed %" / 100;
          SalesCycle."Probability Calculation"::Add:
            "Probability %" := ("Chances of Success %" + "Completed %") / 2;
          SalesCycle."Probability Calculation"::"Chances of Success %":
            "Probability %" := "Chances of Success %";
          SalesCycle."Probability Calculation"::"Completed %":
            "Probability %" := "Completed %";
        end;
        "Calcd. Current Value (LCY)" := "Estimated Value (LCY)" * "Probability %" / 100;
        if ("Estimated Close Date" = "Date of Change") or ("Estimated Close Date" = 0D) then
          "Estimated Close Date" := CALCDATE(SalesCycleStage."Date Formula","Date of Change");
      end;

      case "Action Taken" of
        "Action Taken"::Won:
          begin
            Opp.GET("Opportunity No.");
            if SalesHeader.GET(SalesHeader."Document Type"::Quote,Opp."Sales Document No.") then
              "Calcd. Current Value (LCY)" := GetSalesDocValue(SalesHeader);

            "Completed %" := 100;
            "Chances of Success %" := 100;
            "Probability %" := 100;
          end;
        "Action Taken"::Lost:
          begin
            "Calcd. Current Value (LCY)" := 0;
            "Completed %" := 100;
            "Chances of Success %" := 0;
            "Probability %" := 0;
          end;
      end;
      MODIFY;
    END;

    [Internal]
    PROCEDURE CreateTask@3(CancelOldTask@1000 : Boolean;CreateNewTask@1001 : Boolean);
    VAR
      SalesCycleStage@1002 : Record "Sales Cycle Stage";
      Task@1003 : Record "To-do";
      Opp@1004 : Record Opportunity;
      TempRMCommentLine@1005 : TEMPORARY Record "Rlshp. Mgt. Comment Line";
      TempAttendee@1008 : TEMPORARY Record Attendee;
      TempTaskInteractionLanguage@1007 : TEMPORARY Record "To-do Interaction Language";
      TempAttachment@1006 : TEMPORARY Record Attachment;
    BEGIN
      if CancelOldTask then
        Task.CancelOpenTasks("Opportunity No.");

      if CreateNewTask then
        if SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") then
          if SalesCycleStage."Activity Code" <> '' then begin
            Opp.GET("Opportunity No.");
            Task."No." := '';
            Task."Campaign No." := "Campaign No.";
            Task."Segment No." := Opp."Segment No.";
            Task."Salesperson Code" := "Salesperson Code";
            Task.VALIDATE("Contact No.","Contact No.");
            Task."Opportunity No." := "Opportunity No.";
            Task."Opportunity Entry No." := "Entry No.";
            Task.Date := "Date of Change";
            Task.Duration := 1440 * 1000 * 60;
            Task.InsertTask(
              Task,TempRMCommentLine,TempAttendee,
              TempTaskInteractionLanguage,TempAttachment,
              SalesCycleStage."Activity Code",false);
          end;
    END;

    [External]
    PROCEDURE GetSalesDocValue@4(SalesHeader@1000 : Record "Sales Header") : Decimal;
    VAR
      TotalSalesLine@1001 : Record "Sales Line";
      TotalSalesLineLCY@1002 : Record "Sales Line";
      SalesPost@1003 : Codeunit "Sales-Post";
      VATAmount@1004 : Decimal;
      VATAmountText@1005 : Text[30];
      ProfitLCY@1006 : Decimal;
      ProfitPct@1007 : Decimal;
      TotalAdjCostLCY@1009 : Decimal;
    BEGIN
      SalesPost.SumSalesLines(
        SalesHeader,0,TotalSalesLine,TotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
      exit(TotalSalesLineLCY.Amount);
    END;

    LOCAL PROCEDURE TestCust@5();
    VAR
      Cont@1000 : Record Contact;
      ContBusRel@1001 : Record "Contact Business Relation";
    BEGIN
      Cont.GET("Contact No.");

      if Cont.Type = Cont.Type::Person then
        if not Cont.GET(Cont."Company No.") then
          ERROR(Text000,Cont."No.");

      ContBusRel.SETRANGE("Contact No.",Cont."No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);

      if not ContBusRel.FINDFIRST then
        Cont.CreateCustomer('');
    END;

    [External]
    PROCEDURE InitOpportunityEntry@6(Opp@1000 : Record Opportunity);
    BEGIN
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";
    END;

    [External]
    PROCEDURE CloseOppFromOpp@30(VAR Opp@1000 : Record Opportunity);
    BEGIN
      Opp.TESTFIELD(Closed,false);
      DELETEALL;
      INIT;
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";

      StartWizard;
    END;

    LOCAL PROCEDURE StartWizard@15();
    BEGIN
      INSERT;
      if PAGE.RUNMODAL(PAGE::"Close Opportunity",Rec) = ACTION::OK then;
    END;

    [External]
    PROCEDURE CheckStatus@16();
    BEGIN
      if not ("Action Taken" in ["Action Taken"::Won,"Action Taken"::Lost]) then
        ERROR(Text011);
      if "Close Opportunity Code" = '' then
        ErrorMessage(FIELDCAPTION("Close Opportunity Code"));
      if "Date of Change" = 0D then
        ErrorMessage(FIELDCAPTION("Date of Change"));
      if "Action Taken" = "Action Taken"::Won then
        if "Calcd. Current Value (LCY)" <= 0 then
          ERROR(Text012);
    END;

    [Internal]
    PROCEDURE FinishWizard@18();
    VAR
      OppEntry@1000 : Record "Opportunity Entry";
    BEGIN
      UpdateEstimates;
      OppEntry := Rec;
      InsertEntry(OppEntry,"Cancel Old To Do",false);
      DELETE;
    END;

    LOCAL PROCEDURE ErrorMessage@10(FieldName@1000 : Text[1024]);
    BEGIN
      ERROR(Text013,FieldName);
    END;

    [External]
    PROCEDURE UpdateOppFromOpp@31(VAR Opp@1000 : Record Opportunity);
    BEGIN
      Opp.TESTFIELD(Closed,false);
      DELETEALL;
      INIT;
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";

      StartWizard2;
    END;

    LOCAL PROCEDURE StartWizard2@20();
    BEGIN
      "Wizard Step" := "Wizard Step"::"1";
      CreateStageList;
      INSERT;
      if PAGE.RUNMODAL(PAGE::"Update Opportunity",Rec) = ACTION::OK then;
    END;

    [External]
    PROCEDURE CheckStatus2@11();
    BEGIN
      if "Action Type" = "Action Type"::" " then
        ERROR(Text006,"Sales Cycle Code");

      if EntryExists then
        if "Date of Change" < PreviousDateOfChange then
          ERROR(Text007);
      if "Date of Change" = 0D then
        ErrorMessage(FIELDCAPTION("Date of Change"));

      ValidateStage;

      if "Estimated Value (LCY)" <= 0 then
        ERROR(Text008,FIELDCAPTION("Estimated Value (LCY)"));
      if "Chances of Success %" <= 0 then
        ERROR(Text008,FIELDCAPTION("Chances of Success %"));
      if "Estimated Close Date" = 0D then
        ErrorMessage(FIELDCAPTION("Estimated Close Date"));
      if "Estimated Close Date" < "Date of Change" then
        ERROR(Text009);
    END;

    [Internal]
    PROCEDURE FinishWizard2@8();
    VAR
      CreateNewTask@1000 : Boolean;
      CancelOldTask@1001 : Boolean;
    BEGIN
      CancelOldTask := "Cancel Old To Do";
      CreateNewTask := "Action Taken" <> "Action Taken"::Updated;
      "Wizard Step" := "Wizard Step"::" ";
      "Cancel Old To Do" := false;
      UpdateEstimates;
      "Action Type" := "Action Type"::" ";
      "Sales Cycle Stage Description" := '';
      OppEntry := Rec;
      InsertEntry(OppEntry,CancelOldTask,CreateNewTask);
      DELETE;
    END;

    [External]
    PROCEDURE WizardActionTypeValidate2@32();
    VAR
      Task@1000 : Record "To-do";
    BEGIN
      case "Action Type" of
        "Action Type"::First:
          begin
            TempSalesCycleStageFirst.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageFirst.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageFirst.Description;
            "Action Taken" := "Action Taken"::" ";
            "Cancel Old To Do" := false;
          end;
        "Action Type"::Next:
          begin
            TempSalesCycleStageNext.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageNext.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageNext.Description;
            "Action Taken" := "Action Taken"::Next;
          end;
        "Action Type"::Previous:
          begin
            TempSalesCycleStagePrevious.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStagePrevious.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStagePrevious.Description;
            "Action Taken" := "Action Taken"::Previous;
          end;
        "Action Type"::Skip:
          begin
            TempSalesCycleStageSkip.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageSkip.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageSkip.Description;
            "Action Taken" := "Action Taken"::Jumped;
          end;
        "Action Type"::Update:
          begin
            TempSalesCycleStageUpdate.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageUpdate.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageUpdate.Description;
            "Action Taken" := "Action Taken"::Updated;
            "Cancel Old To Do" := false;
          end;
        "Action Type"::Jump:
          begin
            TempSalesCycleStageJump.FINDLAST;
            "Sales Cycle Stage" := TempSalesCycleStageJump.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageJump.Description;
            "Action Taken" := "Action Taken"::Jumped;
          end;
      end;
      Task.RESET;
      Task.SETCURRENTKEY("Opportunity No.");
      Task.SETRANGE("Opportunity No.","Opportunity No.");
      if Task.FINDFIRST then
        "Cancel Old To Do" := false;
      MODIFY;
    END;

    [External]
    PROCEDURE WizardSalesCycleStageValidate2@12();
    BEGIN
      case "Action Type" of
        "Action Type"::Skip:
          begin
            if TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage")then
              "Action Taken" := "Action Taken"::Next;
            MODIFY;
          end;
        "Action Type"::Jump:
          begin
            if TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage")then
              "Action Taken" := "Action Taken"::Previous;
            MODIFY;
          end;
      end;
      ValidateStage;
    END;

    [External]
    PROCEDURE CreateStageList@13();
    VAR
      Stop@1000 : Boolean;
    BEGIN
      TempSalesCycleStageFirst.DELETEALL;
      TempSalesCycleStageNext.DELETEALL;
      TempSalesCycleStagePrevious.DELETEALL;
      TempSalesCycleStageSkip.DELETEALL;
      TempSalesCycleStageUpdate.DELETEALL;
      TempSalesCycleStageJump.DELETEALL;

      OppEntry.RESET;
      OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
      OppEntry.SETRANGE(Active,true);
      OppEntry.SETRANGE("Opportunity No.","Opportunity No.");
      SalesCycleStage.RESET;
      SalesCycleStage.SETRANGE("Sales Cycle Code","Sales Cycle Code");

      if OppEntry.FIND('-') then begin
        PreviousDateOfChange := OppEntry."Date of Change";
        EntryExists := true;
      end else begin
        PreviousDateOfChange := WORKDATE;
        EntryExists := false;
      end;

      // Option 1 Activate first Stage
      if not OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          TempSalesCycleStageFirst := SalesCycleStage;
          TempSalesCycleStageFirst.INSERT;
        end;

      // Option 2 Goto next Stage
      if OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          if SalesCycleStage.FIND('>') then begin
            TempSalesCycleStageNext := SalesCycleStage;
            TempSalesCycleStageNext.INSERT;
          end;
          "Sales Cycle Stage" := SalesCycleStage.Stage;
          "Action Taken" := "Action Taken"::Next;
        end;

      // Option 3 Goto Previous Stage
      if OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          if SalesCycleStage.FIND('<') then begin
            TempSalesCycleStagePrevious := SalesCycleStage;
            TempSalesCycleStagePrevious.INSERT;
          end;
        end;

      // Option 4 Skip Stages
      if OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          if SalesCycleStage.FIND('>') then
            if SalesCycleStage."Allow Skip" then begin
              Stop := false;
              repeat
                TempSalesCycleStageSkip := SalesCycleStage;
                TempSalesCycleStageSkip.INSERT;
                Stop := not SalesCycleStage."Allow Skip";
              until (SalesCycleStage.NEXT = 0) or Stop;
            end;
        end else
          if SalesCycleStage.FIND('-') then
            if SalesCycleStage."Allow Skip" then begin
              Stop := false;
              repeat
                TempSalesCycleStageSkip := SalesCycleStage;
                TempSalesCycleStageSkip.INSERT;
                Stop := not SalesCycleStage."Allow Skip";
              until (SalesCycleStage.NEXT = 0) or Stop;
            end;

      // Option 5 Update Current
      if OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          TempSalesCycleStageUpdate := SalesCycleStage;
          TempSalesCycleStageUpdate.INSERT;
        end;

      // Option 6 jump to Previous Stage
      if OppEntry.FIND('-') then
        if SalesCycleStage.FIND('-') then begin
          Stop := false;
          repeat
            TempSalesCycleStageJump := SalesCycleStage;
            if TempSalesCycleStageJump.Stage <> OppEntry."Sales Cycle Stage" then
              TempSalesCycleStageJump.INSERT
            else
              Stop := true;
          until (SalesCycleStage.NEXT = 0) or Stop;
        end;

      case true of
        NoOfSalesCyclesFirst > 0:
          "Action Type" := "Action Type"::First;
        NoOfSalesCyclesNext > 0:
          "Action Type" := "Action Type"::Next;
        NoOfSalesCyclesUpdate > 0:
          "Action Type" := "Action Type"::Update;
        NoOfSalesCyclesPrev > 0:
          "Action Type" := "Action Type"::Previous;
        NoOfSalesCyclesSkip > 1:
          "Action Type" := "Action Type"::Skip;
        NoOfSalesCyclesJump > 1:
          "Action Type" := "Action Type"::Jump;
      end;
    END;

    LOCAL PROCEDURE TestQuote@14();
    VAR
      Opp@1000 : Record Opportunity;
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      Opp.GET("Opportunity No.");
      if not SalesHeader.GET(SalesHeader."Document Type"::Quote,Opp."Sales Document No.") then
        ERROR(Text005);
    END;

    [External]
    PROCEDURE ValidateStage@17();
    BEGIN
      case "Action Type" of
        "Action Type"::First:
          TempSalesCycleStageFirst.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Next:
          begin;
            TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage");
            if TempSalesCycleStageNext."Quote Required" then
              TestQuote;
          end;
        "Action Type"::Previous:
          TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Skip:
          begin
            TempSalesCycleStageSkip.GET("Sales Cycle Code","Sales Cycle Stage");
            if TempSalesCycleStageSkip."Quote Required" then
              TestQuote;
          end;
        "Action Type"::Update:
          TempSalesCycleStageUpdate.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Jump:
          TempSalesCycleStageJump.GET("Sales Cycle Code","Sales Cycle Stage");
      end;
    END;

    [External]
    PROCEDURE NoOfSalesCyclesFirst@22() : Integer;
    BEGIN
      exit(TempSalesCycleStageFirst.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesNext@23() : Integer;
    BEGIN
      exit(TempSalesCycleStageNext.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesPrev@24() : Integer;
    BEGIN
      exit(TempSalesCycleStagePrevious.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesSkip@25() : Integer;
    BEGIN
      exit(TempSalesCycleStageSkip.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesUpdate@26() : Integer;
    BEGIN
      exit(TempSalesCycleStageUpdate.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesJump@27() : Integer;
    BEGIN
      exit(TempSalesCycleStageJump.COUNT);
    END;

    [External]
    PROCEDURE ValidateSalesCycleStage@28();
    BEGIN
      case "Action Type" of
        "Action Type"::First:
          TempSalesCycleStageFirst.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Next:
          begin;
            TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage");
            if TempSalesCycleStageNext."Quote Required" then
              TestQuote;
          end;
        "Action Type"::Previous:
          TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Skip:
          begin
            TempSalesCycleStageSkip.GET("Sales Cycle Code","Sales Cycle Stage");
            if TempSalesCycleStageSkip."Quote Required" then
              TestQuote;
          end;
        "Action Type"::Update:
          TempSalesCycleStageUpdate.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Jump:
          TempSalesCycleStageJump.GET("Sales Cycle Code","Sales Cycle Stage");
      end;

      if SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") then
        "Sales Cycle Stage Description" := SalesCycleStage.Description;
    END;

    [External]
    PROCEDURE LookupSalesCycleStage@29();
    BEGIN
      case "Action Type" of
        "Action Type"::First:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageFirst) then
            "Sales Cycle Stage" := TempSalesCycleStageFirst.Stage;
        "Action Type"::Next:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageNext) then
            "Sales Cycle Stage" := TempSalesCycleStageNext.Stage;
        "Action Type"::Previous:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStagePrevious) then
            "Sales Cycle Stage" := TempSalesCycleStagePrevious.Stage;
        "Action Type"::Skip:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageSkip) then
            "Sales Cycle Stage" := TempSalesCycleStageSkip.Stage;
        "Action Type"::Update:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageUpdate) then
            "Sales Cycle Stage" := TempSalesCycleStageUpdate.Stage;
        "Action Type"::Jump:
          if ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageJump) then
            "Sales Cycle Stage" := TempSalesCycleStageJump.Stage;
      end;
      VALIDATE("Sales Cycle Stage");
    END;

    BEGIN
    END.
  }
}

