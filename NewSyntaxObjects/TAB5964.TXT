OBJECT Table 5964 Service Contract Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD(Description);
               GetServContractHeader;
               ServContractHeader.TESTFIELD("Customer No.");
               ServContractHeader.TESTFIELD("Contract No.");
               ServContractHeader.TESTFIELD("Starting Date");
               if "Service Item No." <> '' then begin
                 ServContractHeader.TESTFIELD("Service Period");
                 ServContractHeader.TESTFIELD("First Service Date");
               end;

               ServMgtSetup.GET;

               UpdateContractAnnualAmount(false);

               if ("Service Item No." = '') and ("Response Time (Hours)" = 0) then
                 "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";

               if "Contract Type" = "Contract Type"::Contract then begin
                 if "Service Item No." <> '' then begin
                   if ServMgtSetup."Register Contract Changes" then
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION("Service Item No."),1,'',
                       FORMAT("Service Item No."),"Service Item No.","Line No.");
                   ServLogMgt.ServItemAddToContract(Rec);
                 end else
                   if ServMgtSetup."Register Contract Changes" then
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION(Description),1,'',Description,'',"Line No.");
               end;
             END;

    OnModify=BEGIN
               if UseServContractLineAsxRec then begin
                 xRec := ServContractLine;
                 UseServContractLineAsxRec := false;
               end;

               if ("Service Item No." = '') and
                  ("Item No." = '') and
                  (Description = '')
               then
                 ERROR(Text016,FIELDCAPTION(Description));

               ServMgtSetup.GET;
               if ServMgtSetup."Register Contract Changes" then
                 if "Contract Type" = "Contract Type"::Contract then
                   LogContractLineChanges(xRec);

               if "Line Amount" <> xRec."Line Amount" then
                 UpdateContractAnnualAmount(false);

               if "Service Item No." <> xRec."Service Item No." then begin
                 ServLogMgt.ServItemAddToContract(Rec);
                 ServLogMgt.ServItemRemovedFromContract(xRec);
               end;
             END;

    OnDelete=BEGIN
               TestStatusOpen;
               if "Contract Type" = "Contract Type"::Contract then begin
                 GetServContractHeader;
                 if ServContractHeader.Status = ServContractHeader.Status::Canceled then
                   ERROR(Text015,ServContractHeader.Status);
                 if (ServContractHeader.Status = ServContractHeader.Status::Signed) and
                    (not "New Line") and
                    ServContractHeader."Automatic Credit Memos"
                 then begin
                   TESTFIELD("Contract Expiration Date");
                   CODEUNIT.RUN(CODEUNIT::CreateCreditfromContractLines,Rec);
                 end;

                 if (ServContractHeader.Status = ServContractHeader.Status::Signed) and
                    (not "New Line") and
                    (not ServContractHeader."Automatic Credit Memos")
                 then
                   if CreditMemoBaseExists and
                      (not StatusCheckSuspended)
                   then
                     if not CONFIRM(Text022,false) then
                       ERROR(Text023);
                 ServMgtSetup.GET;
                 if "Service Item No." <> '' then begin
                   if ServMgtSetup."Register Contract Changes" then
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION("Service Item No."),2,
                       FORMAT("Service Item No."),'',"Service Item No.","Line No.");
                   ServLogMgt.ServItemRemovedFromContract(Rec);
                 end else
                   if ServMgtSetup."Register Contract Changes" then
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION(Description),2,Description,'','',"Line No.");

                 GetServContractHeader;
                 if (not ServContractHeader."Allow Unbalanced Amounts") and
                    (ServContractHeader.Status = ServContractHeader.Status::Signed)
                 then
                   ContractGainLossEntry.AddEntry(1,"Contract Type","Contract No.",-"Line Amount",'');
               end;

               ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Contract");
               ServCommentLine.SETRANGE("Table Subtype","Contract Type");
               ServCommentLine.SETRANGE("No.","Contract No.");
               ServCommentLine.SETRANGE(Type,ServCommentLine.Type::General);
               ServCommentLine.SETRANGE("Table Line No.","Line No.");
               ServCommentLine.DELETEALL;

               UpdateContractAnnualAmount(true);
             END;

    CaptionML=ENU=Service Contract Line;
    LookupPageID="Serv. Contr. List (Serv. Item)";
    DrillDownPageID="Serv. Contr. List (Serv. Item)";
  }
  FIELDS
  {
    { 1   ;   ;Contract Type       ;Option        ;CaptionML=ENU=Contract Type;
                                                   OptionCaptionML=ENU=Quote,Contract;
                                                   OptionString=Quote,Contract }
    { 2   ;   ;Contract No.        ;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE ("Contract Type"=FIELD("Contract Type"));
                                                   CaptionML=ENU=Contract No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Contract Status     ;Option        ;CaptionML=ENU=Contract Status;
                                                   OptionCaptionML=ENU=" ,Signed,Cancelled";
                                                   OptionString=" ",Signed,Cancelled }
    { 5   ;   ;Service Item No.    ;Code20        ;TableRelation="Service Item";
                                                   OnValidate=VAR
                                                                ServiceItemLine@1003 : Record "Service Item Line";
                                                                ServContractMgt@1004 : Codeunit ServContractManagement;
                                                                LastInvoiceDate@1000 : Date;
                                                                NewLastInvoiceDate@1001 : Date;
                                                                InvoicePeriod@1002 : DateFormula;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                GetServContractHeader;
                                                                if ServContractHeader."Last Invoice Date" <> 0D then begin
                                                                  LastInvoiceDate := ServContractHeader."Last Invoice Date";
                                                                  EVALUATE(InvoicePeriod,ServContractMgt.GetInvoicePeriodText(ServContractHeader."Invoice Period"));
                                                                  NewLastInvoiceDate := CALCDATE(InvoicePeriod,LastInvoiceDate);
                                                                  if (ServContractHeader."Expiration Date" <> 0D) and
                                                                     (NewLastInvoiceDate > ServContractHeader."Expiration Date")
                                                                  then
                                                                    ERROR(Text025,ServiceItemLine.TABLECAPTION,ServContractHeader.FIELDCAPTION("Expiration Date"));
                                                                end;
                                                                if (ServContractHeader.Status = ServContractHeader.Status::Signed) and
                                                                   (not "New Line")
                                                                then
                                                                  ERROR(Text013,FIELDCAPTION("Service Item No."));

                                                                if "Service Item No." <> '' then begin
                                                                  GetServItem;
                                                                  TESTFIELD("Customer No.");
                                                                  if ServItem."Customer No." <> ServContractHeader."Customer No." then
                                                                    ERROR(Text000,"Customer No.");

                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  ServContractLine.SETFILTER("Line No.",'<>%1',"Line No.");
                                                                  if ServContractLine.FINDFIRST then
                                                                    ERROR(Text003);

                                                                  if not HideDialog then begin
                                                                    ServContractLine.RESET;
                                                                    ServContractLine.SETCURRENTKEY("Service Item No.","Contract Status");
                                                                    ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                    ServContractLine.SETFILTER("Contract Status",'<>%1',ServContractLine."Contract Status"::Cancelled);
                                                                    ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                    ServContractLine.SETFILTER("Contract No.",'<>%1',"Contract No.");
                                                                    if ServContractLine.FINDFIRST then begin
                                                                      if not CONFIRM(Text019,true,"Service Item No.") then begin
                                                                        "Service Item No." := xRec."Service Item No.";
                                                                        exit
                                                                      end;
                                                                    end else begin
                                                                      ServContractLine.RESET;
                                                                      ServContractLine.SETCURRENTKEY("Service Item No.");
                                                                      ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                      ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Quote);
                                                                      ServContractLine.SETFILTER("Contract No.",'<>%1',"Contract No.");
                                                                      if ServContractLine.FINDFIRST then
                                                                        if not CONFIRM(Text019,true,"Service Item No.") then begin
                                                                          "Service Item No." := xRec."Service Item No.";
                                                                          exit
                                                                        end;
                                                                    end;
                                                                  end;

                                                                  if (ServItem."Ship-to Code" <> ServContractHeader."Ship-to Code") and
                                                                     not HideDialog
                                                                  then
                                                                    if not CONFIRM(
                                                                         Text001,false,"Service Item No.")
                                                                    then begin
                                                                      "Service Item No." := xRec."Service Item No.";
                                                                      exit;
                                                                    end;
                                                                  "Ship-to Code" := ServItem."Ship-to Code";
                                                                end;
                                                                ServContractLine := Rec;
                                                                INIT;
                                                                "Starting Date" := ServContractLine."Starting Date";
                                                                "Contract Expiration Date" := ServContractLine."Contract Expiration Date";
                                                                "Credit Memo Date" := ServContractLine."Credit Memo Date";
                                                                "Next Planned Service Date" := ServContractLine."Next Planned Service Date";
                                                                "Service Period" := ServContractLine."Service Period";
                                                                "Customer No." := ServContractLine."Customer No.";
                                                                if ServContractLine."Service Item No." <> '' then
                                                                  "Ship-to Code" := ServContractLine."Ship-to Code"
                                                                else
                                                                  "Ship-to Code" := ServContractHeader."Ship-to Code";
                                                                "Contract Status" := ServContractLine."Contract Status";
                                                                "Service Item No." := ServContractLine."Service Item No.";
                                                                if "Service Item No." = '' then
                                                                  exit;
                                                                Description := ServItem.Description;
                                                                "Serial No." := ServItem."Serial No.";
                                                                "Service Item Group Code" := ServItem."Service Item Group Code";
                                                                "Item No." := ServItem."Item No.";
                                                                "Variant Code" := ServItem."Variant Code";
                                                                "Unit of Measure Code" := ServItem."Unit of Measure Code";
                                                                if (ServContractHeader."Response Time (Hours)" < ServItem."Response Time (Hours)") and
                                                                   (ServContractHeader."Response Time (Hours)" <> 0)
                                                                then
                                                                  "Response Time (Hours)" := ServContractHeader."Response Time (Hours)"
                                                                else
                                                                  if ServItem."Response Time (Hours)" <> 0 then
                                                                    "Response Time (Hours)" := ServItem."Response Time (Hours)"
                                                                  else
                                                                    "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";
                                                                ServMgtSetup.GET;
                                                                VALIDATE("Line Cost",ServItem."Default Contract Cost");
                                                                VALIDATE("Line Value",ServItem."Default Contract Value");
                                                                VALIDATE("Line Discount %",ServItem."Default Contract Discount %");

                                                                if ServContractLine.GET("Contract Type","Contract No.","Line No.") then begin
                                                                  UseServContractLineAsxRec := true;
                                                                  MODIFY(true);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Service Item No. }
    { 6   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 7   ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=ENU=Serial No. }
    { 8   ;   ;Service Item Group Code;Code10     ;TableRelation="Service Item Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Service Item No.");
                                                              END;

                                                   CaptionML=ENU=Service Item Group Code }
    { 9   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Customer No. }
    { 10  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE ("Customer No."=FIELD("Customer No."));
                                                   CaptionML=ENU=Ship-to Code;
                                                   Editable=false }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Item No." <> xRec."Item No." then
                                                                  TESTFIELD("Service Item No.",'');

                                                                if "Item No." <> '' then begin
                                                                  Item.GET("Item No.");
                                                                  Currency.InitRoundingPrecision;
                                                                  Description := Item.Description;
                                                                  "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                  GetServContractHeader;
                                                                  "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";
                                                                  ServMgtSetup.GET;
                                                                  "Line Cost" :=
                                                                    ROUND(Item."Unit Cost" * ServMgtSetup."Contract Value %" / 100,
                                                                      Currency."Amount Rounding Precision");
                                                                  "Line Discount %" := 0;
                                                                  case ServMgtSetup."Contract Value Calc. Method" of
                                                                    ServMgtSetup."Contract Value Calc. Method"::"Based on Unit Price":
                                                                      "Line Value" :=
                                                                        ROUND(Item."Unit Price" * ServMgtSetup."Contract Value %" / 100,
                                                                          Currency."Amount Rounding Precision");
                                                                    ServMgtSetup."Contract Value Calc. Method"::"Based on Unit Cost":
                                                                      "Line Value" :=
                                                                        ROUND(Item."Unit Cost" * ServMgtSetup."Contract Value %" / 100,
                                                                          Currency."Amount Rounding Precision");
                                                                  end;
                                                                  VALIDATE("Line Value","Line Value");
                                                                end else begin
                                                                  "Unit of Measure Code" := '';
                                                                  "Variant Code" := '';
                                                                  "Serial No." := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 12  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF ("Item No."=FILTER(<>'')) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if "Unit of Measure Code" <> xRec."Unit of Measure Code" then begin
                                                                  TESTFIELD("Service Item No.",'');
                                                                  TESTFIELD("Item No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 13  ;   ;Response Time (Hours);Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Response Time (Hours);
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=true }
    { 14  ;   ;Last Planned Service Date;Date     ;CaptionML=ENU=Last Planned Service Date;
                                                   Editable=false }
    { 15  ;   ;Next Planned Service Date;Date     ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                if ("Next Planned Service Date" <> 0D) and
                                                                   ("Next Planned Service Date" < "Starting Date")
                                                                then
                                                                  ERROR(Text009,FIELDCAPTION("Next Planned Service Date"),FIELDCAPTION("Starting Date"));
                                                              END;

                                                   CaptionML=ENU=Next Planned Service Date }
    { 16  ;   ;Last Service Date   ;Date          ;CaptionML=ENU=Last Service Date }
    { 17  ;   ;Last Preventive Maint. Date;Date   ;CaptionML=ENU=Last Preventive Maint. Date;
                                                   Editable=false }
    { 18  ;   ;Invoiced to Date    ;Date          ;CaptionML=ENU=Invoiced to Date;
                                                   Editable=false }
    { 19  ;   ;Credit Memo Date    ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                TESTFIELD(Credited,false);

                                                                if "Credit Memo Date" <> 0D then begin
                                                                  if "Credit Memo Date" > "Contract Expiration Date" then
                                                                    ERROR(
                                                                      Text008,
                                                                      FIELDCAPTION("Credit Memo Date"),FIELDCAPTION("Contract Expiration Date"));
                                                                end;

                                                                if "Credit Memo Date" <> xRec."Credit Memo Date" then
                                                                  if "Credit Memo Date" = 0D then
                                                                    ERROR(Text018,FIELDCAPTION("Credit Memo Date"));
                                                              END;

                                                   CaptionML=ENU=Credit Memo Date }
    { 20  ;   ;Contract Expiration Date;Date      ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                TESTFIELD(Credited,false);

                                                                ServContractHeader.GET("Contract Type","Contract No.");

                                                                if (not ServContractHeader.Prepaid) and
                                                                   (xRec."Contract Expiration Date" <= "Invoiced to Date") and
                                                                   (xRec."Contract Expiration Date" <> 0D)
                                                                then
                                                                  if ("Contract Expiration Date" > "Invoiced to Date") or
                                                                     ("Contract Expiration Date" = 0D)
                                                                  then
                                                                    ERROR(
                                                                      Text024,
                                                                      FIELDCAPTION("Contract Expiration Date"));

                                                                if "Contract Expiration Date" = 0D then begin
                                                                  "Credit Memo Date" := 0D;
                                                                  exit;
                                                                end;

                                                                if "Contract Expiration Date" < "Starting Date" then
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Contract Expiration Date"),
                                                                    FIELDCAPTION("Starting Date"));

                                                                if ServContractHeader."Expiration Date" <> 0D then
                                                                  if "Contract Expiration Date" > ServContractHeader."Expiration Date" then
                                                                    ERROR(
                                                                      Text017,
                                                                      FIELDCAPTION("Contract Expiration Date"),
                                                                      ServContractHeader.FIELDCAPTION("Expiration Date"));

                                                                if "Contract Expiration Date" < "Credit Memo Date" then
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Contract Expiration Date"),
                                                                    FIELDCAPTION("Credit Memo Date"));

                                                                if "Credit Memo Date" = 0D then
                                                                  "Credit Memo Date" := "Contract Expiration Date";

                                                                if not ServContractHeader."Automatic Credit Memos" then begin
                                                                  ServLedgEntry.RESET;
                                                                  ServLedgEntry.SETCURRENTKEY(Type,"No.","Entry Type","Moved from Prepaid Acc.","Posting Date",Open);
                                                                  ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
                                                                  ServLedgEntry.SETRANGE("No.","Contract No.");
                                                                  ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",false);
                                                                  ServLedgEntry.SETRANGE(Open,false);
                                                                  ServLedgEntry.CALCSUMS("Amount (LCY)");
                                                                  if ServLedgEntry."Amount (LCY)" <> 0 then
                                                                    MESSAGE(Text011,"Contract No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Contract Expiration Date }
    { 21  ;   ;Service Period      ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Service Period }
    { 22  ;   ;Line Value          ;Decimal       ;OnValidate=BEGIN
                                                                if "Line Value" < 0 then
                                                                  FIELDERROR("Line Value");

                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=ENU=Line Value;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 23  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                "Line Value" := ROUND("Line Value",Currency."Amount Rounding Precision");
                                                                "Line Amount" :=
                                                                  ROUND("Line Value" - "Line Value" * "Line Discount %" / 100,
                                                                    Currency."Amount Rounding Precision");
                                                                "Line Discount Amount" :=
                                                                  ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=true }
    { 24  ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Line Value");
                                                                Currency.InitRoundingPrecision;
                                                                "Line Discount Amount" := ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                "Line Discount %" := "Line Discount Amount" / "Line Value" * 100;
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 28  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 29  ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date;
                                                   Editable=false }
    { 30  ;   ;New Line            ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=New Line;
                                                   Editable=false }
    { 31  ;   ;Credited            ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Contract Expiration Date");
                                                              END;

                                                   CaptionML=ENU=Credited }
    { 32  ;   ;Line Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Line Cost;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 33  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                if "Line Value" <> 0 then
                                                                  "Line Discount %" := "Line Discount Amount" / "Line Value" * 100
                                                                else
                                                                  "Line Discount %" := 0;
                                                                "Line Amount" :=
                                                                  ROUND("Line Value" - "Line Value" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 34  ;   ;Profit              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                "Line Amount" := ROUND(Profit + "Line Cost",Currency."Amount Rounding Precision");
                                                                "Line Discount Amount" := ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                if "Line Value" <> 0 then
                                                                  "Line Discount %" := "Line Discount Amount" / "Line Value" * 100;
                                                              END;

                                                   CaptionML=ENU=Profit;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;"Contract Type","Contract No.","Line No.";
                                                   SumIndexFields="Line Amount",Profit;
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Contract No.","Line No.","Contract Type" }
    {    ;"Service Item No.","Contract Status"     }
    {    ;"Contract Type","Contract No.",Credited,"New Line";
                                                   SumIndexFields="Line Amount",Profit;
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    {    ;"Customer No.","Ship-to Code"            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Currency@1036 : Record Currency;
      Item@1028 : Record Item;
      ServMgtSetup@1004 : Record "Service Mgt. Setup";
      ServLedgEntry@1023 : Record "Service Ledger Entry";
      ServContractHeader@1003 : Record "Service Contract Header";
      ServContractLine@1019 : Record "Service Contract Line";
      ServItem@1001 : Record "Service Item";
      Text000@1011 : TextConst 'ENU=This service item does not belong to customer no. %1.';
      Text001@1012 : TextConst 'ENU=Service item %1 has a different ship-to code for this customer.\\Do you want to continue?';
      Text003@1018 : TextConst 'ENU=This service item already exists in this service contract.';
      Text008@1005 : TextConst 'ENU=%1 field value cannot be later than the %2 field value on the contract line.';
      Text009@1009 : TextConst 'ENU=The %1 cannot be less than the %2.';
      Text011@1007 : TextConst 'ENU=Service ledger entry exists for service contract line %1.\\You may need to create a credit memo.';
      ContractChangeLog@1015 : Record "Contract Change Log";
      ContractGainLossEntry@1016 : Record "Contract Gain/Loss Entry";
      ServCommentLine@1027 : Record "Service Comment Line";
      ServLogMgt@1030 : Codeunit ServLogManagement;
      HideDialog@1020 : Boolean;
      StatusCheckSuspended@1021 : Boolean;
      Text013@1022 : TextConst 'ENU=You cannot change the %1 field on signed service contracts.';
      Text015@1026 : TextConst 'ENU=You cannot delete service contract lines on %1 service contracts.';
      Text016@1010 : TextConst 'ENU=Service contract lines must have at least a %1 filled in.';
      Text017@1029 : TextConst 'ENU=The %1 cannot be later than the %2.';
      Text018@1032 : TextConst 'ENU=You cannot reset %1 manually.';
      Text019@1006 : TextConst 'ENU=Service item %1 already belongs to one or more service contracts/quotes.\\Do you want to continue?';
      Text020@1014 : TextConst 'ENU=The service period for service item %1 under contract %2 has not yet started.';
      Text021@1008 : TextConst 'ENU=The service period for service item %1 under contract %2 has expired.';
      Text022@1033 : TextConst 'ENU=If you delete this contract line while the Automatic Credit Memos check box is not selected, a credit memo will not be created.\Do you want to continue?';
      Text023@1034 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      UseServContractLineAsxRec@1031 : Boolean;
      Text024@1035 : TextConst 'ENU=You cannot enter a later date in or clear the %1 field on the contract line that has been invoiced for the period containing that date.';
      Text025@1024 : TextConst '@@@=You cannot add a new Service Item Line because the service contract has expired. Renew the Expiration Date on the service contract.;ENU=You cannot add a new %1 because the service contract has expired. Renew the %2 on the service contract.';

    [External]
    PROCEDURE SetupNewLine@1();
    BEGIN
      if not ServContractHeader.GET("Contract Type","Contract No.") then
        exit;
      "Customer No." := ServContractHeader."Customer No.";
      "Ship-to Code" := ServContractHeader."Ship-to Code";
      "Contract Status" := ServContractHeader.Status;
      "Contract Expiration Date" := ServContractHeader."Expiration Date";
      "Credit Memo Date" := "Contract Expiration Date";
      "Service Period" := ServContractHeader."Service Period";
      if ("Contract Type" = "Contract Type"::Contract) and
         ("Contract Status" = "Contract Status"::Signed)
      then
        "Starting Date" := WORKDATE
      else
        "Starting Date" := ServContractHeader."Starting Date";

      if "Starting Date" > ServContractHeader."First Service Date" then
        "Next Planned Service Date" := "Starting Date"
      else
        "Next Planned Service Date" := ServContractHeader."First Service Date";

      OnAfterSetupNewLine(Rec,ServContractHeader);
    END;

    LOCAL PROCEDURE GetServItem@9();
    BEGIN
      TESTFIELD("Service Item No.");
      if "Service Item No." <> ServItem."No." then
        ServItem.GET("Service Item No.");
    END;

    [External]
    PROCEDURE CalculateNextServiceVisit@5();
    BEGIN
      ServMgtSetup.GET;
      if (FORMAT("Service Period") <> '') and
         ("Next Planned Service Date" <> 0D)
      then begin
        GetServContractHeader;
        case ServMgtSetup."Next Service Calc. Method" of
          ServMgtSetup."Next Service Calc. Method"::Planned:
            "Next Planned Service Date" := CALCDATE("Service Period","Last Planned Service Date");
          ServMgtSetup."Next Service Calc. Method"::Actual:
            "Next Planned Service Date" := CALCDATE("Service Period","Last Service Date");
        end;
      end else
        "Next Planned Service Date" := 0D;
    END;

    [External]
    PROCEDURE UpdateContractAnnualAmount@4(Deleting@1000 : Boolean);
    VAR
      OldServContractHeader@1002 : Record "Service Contract Header";
      ServContractLine2@1003 : Record "Service Contract Line";
    BEGIN
      GetServContractHeader;
      if not ServContractHeader."Allow Unbalanced Amounts" then begin
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type","Contract Type");
        ServContractLine.SETRANGE("Contract No.","Contract No.");
        ServContractLine.SETFILTER("Line No.",'<>%1',"Line No.");
        ServContractLine.CALCSUMS("Line Amount");
        OldServContractHeader := ServContractHeader;
        if Deleting then
          ServContractHeader."Annual Amount" := ServContractLine."Line Amount"
        else begin
          ServContractHeader."Annual Amount" := ServContractLine."Line Amount" + "Line Amount";
          if not "New Line" then
            ContractGainLossEntry.AddEntry(4,"Contract Type","Contract No.","Line Amount" - xRec."Line Amount",'')
          else
            if ServContractHeader.Status = ServContractHeader.Status::Signed then begin
              if ServContractLine2.GET("Contract Type","Contract No.","Line No.") then
                ContractGainLossEntry.AddEntry(4,"Contract Type","Contract No.","Line Amount" - ServContractLine2."Line Amount",'')
              else
                ContractGainLossEntry.AddEntry(0,"Contract Type","Contract No.","Line Amount",'')
            end;
        end;
        ServContractHeader.ValidateNextInvoicePeriod;
        ServContractHeader.SuspendStatusCheck(StatusCheckSuspended);
        ServContractHeader.MODIFY(true);
        if ServContractHeader."Contract Type" = ServContractHeader."Contract Type"::Contract then
          if ServMgtSetup."Register Contract Changes" then
            ServContractHeader.UpdContractChangeLog(OldServContractHeader);
      end;
    END;

    [External]
    PROCEDURE HideDialogBox@2(Hide@1000 : Boolean);
    BEGIN
      HideDialog := Hide;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      if StatusCheckSuspended then
        exit;
      GetServContractHeader;
      ServContractHeader.TESTFIELD("Change Status",ServContractHeader."Change Status"::Open);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    LOCAL PROCEDURE GetServContractHeader@3();
    BEGIN
      TESTFIELD("Contract No.");
      if ("Contract Type" <> ServContractHeader."Contract Type") or
         ("Contract No." <> ServContractHeader."Contract No.")
      then
        ServContractHeader.GET("Contract Type","Contract No.");
    END;

    [External]
    PROCEDURE ShowComments@11();
    BEGIN
      ServContractHeader.GET("Contract Type","Contract No.");
      ServContractHeader.TESTFIELD("Customer No.");
      TESTFIELD("Line No.");
      ServCommentLine.RESET;
      ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Contract");
      ServCommentLine.SETRANGE("Table Subtype","Contract Type");
      ServCommentLine.SETRANGE("No.","Contract No.");
      ServCommentLine.SETRANGE(Type,ServCommentLine.Type::General);
      ServCommentLine.SETRANGE("Table Line No.","Line No.");
      PAGE.RUNMODAL(PAGE::"Service Comment Sheet",ServCommentLine);
    END;

    [External]
    PROCEDURE ValidateServicePeriod@6(CurrentDate@1000 : Date);
    BEGIN
      if "Starting Date" > CurrentDate then
        ERROR(Text020,"Service Item No.","Contract No.");
      if "Contract Expiration Date" = 0D then begin
        ServContractHeader.GET(ServContractHeader."Contract Type"::Contract,"Contract No.");
        if (ServContractHeader."Expiration Date" <> 0D) and
           (ServContractHeader."Expiration Date" <= CurrentDate)
        then
          ERROR(Text021,"Service Item No.","Contract No.");
      end else
        if "Contract Expiration Date" < CurrentDate then
          ERROR(Text021,"Service Item No.","Contract No.");
    END;

    [External]
    PROCEDURE CreditMemoBaseExists@7() : Boolean;
    VAR
      ServContractMgt@1008 : Codeunit ServContractManagement;
      CreditAmount@1003 : Decimal;
      FirstPrepaidPostingDate@1002 : Date;
      LastIncomePostingDate@1001 : Date;
    BEGIN
      if "Line Amount" > 0 then begin
        TESTFIELD("Contract Expiration Date");
        if "Invoiced to Date" >= "Contract Expiration Date" then begin
          Currency.InitRoundingPrecision;
          if ServContractHeader.Prepaid then
            FirstPrepaidPostingDate := ServContractMgt.FindFirstPrepaidTransaction("Contract No.")
          else
            FirstPrepaidPostingDate := 0D;
          LastIncomePostingDate := "Invoiced to Date";
          if FirstPrepaidPostingDate <> 0D then
            LastIncomePostingDate := FirstPrepaidPostingDate - 1;
          CreditAmount :=
            ROUND(
              ServContractMgt.CalcContractLineAmount("Line Amount",
                "Contract Expiration Date",LastIncomePostingDate),
              Currency."Amount Rounding Precision");
          if FirstPrepaidPostingDate <> 0D then begin
            if "Contract Expiration Date" < FirstPrepaidPostingDate then begin
              CreditAmount :=
                ROUND(
                  ServContractMgt.CalcContractLineAmount("Line Amount",
                    FirstPrepaidPostingDate,"Invoiced to Date"),
                  Currency."Amount Rounding Precision");
            end else
              CreditAmount :=
                ROUND(
                  ServContractMgt.CalcContractLineAmount("Line Amount",
                    "Contract Expiration Date","Invoiced to Date"),
                  Currency."Amount Rounding Precision");
          end;
        end;
        exit((CreditAmount > 0) and (not Credited));
      end;

      exit(false);
    END;

    [External]
    PROCEDURE LogContractLineChanges@8(ServContractLine2@1000 : Record "Service Contract Line");
    BEGIN
      if "Item No." <> ServContractLine2."Item No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Item No."),0,
          FORMAT(ServContractLine2."Item No."),FORMAT("Item No."),
          ServContractLine2."Service Item No.","Line No.");

      if "Line Value" <> ServContractLine2."Line Value" then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Value"),0,
          FORMAT(ServContractLine2."Line Value"),FORMAT("Line Value"),
          ServContractLine2."Service Item No.","Line No.");

      if "Line Discount %" <> ServContractLine2."Line Discount %" then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Discount %"),0,
          FORMAT(ServContractLine2."Line Discount %"),FORMAT("Line Discount %"),
          ServContractLine2."Service Item No.","Line No.");

      if "Line Amount" <> ServContractLine2."Line Amount" then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Amount"),0,
          FORMAT(ServContractLine2."Line Amount"),FORMAT("Line Amount"),
          ServContractLine2."Service Item No.","Line No.");

      if "Contract Expiration Date" <> ServContractLine2."Contract Expiration Date" then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Contract Expiration Date"),0,
          FORMAT(ServContractLine2."Contract Expiration Date"),FORMAT("Contract Expiration Date"),
          ServContractLine2."Service Item No.","Line No.");

      if "Service Item No." <> ServContractLine2."Service Item No." then
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Service Item No."),0,
          FORMAT(ServContractLine2."Service Item No."),FORMAT("Service Item No."),
          ServContractLine2."Service Item No.","Line No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetupNewLine@10(VAR ServiceContractLine@1000 : Record "Service Contract Line";ServiceContractHeader@1001 : Record "Service Contract Header");
    BEGIN
    END;

    BEGIN
    END.
  }
}

