OBJECT XMLport 1220 Data Exch. Import - CSV
{
  OBJECT-PROPERTIES
  {
    Date=20150915D;
    Time=120000T;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData "Data Exch. Field"=rimd;
    CaptionML=ENU=Data Exch. Import - CSV;
    Direction=Import;
    TextEncoding=WINDOWS;
    OnPreXMLport=BEGIN
                   InitializeGlobals;
                 END;

    OnPostXMLport=BEGIN
                    if (not LastLineIsFooter and SkipLine) or HeaderWarning then
                      ERROR(LastLineIsHeaderErr);
                  END;

    Format=Variable Text;
    UseRequestPage=false;
  }
  ELEMENTS
  {
    { ['{C19D763B-C1F1-473D-8D3E-3640AD129D95}'];;root                ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { ['{125F3B85-5B53-4F67-9434-589A04D6DCA1}'];1;DataExchDocument   ;Element ;Table   ;
                                                  SourceTable="Data Exch.";
                                                  AutoSave=false;
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              FileLineNo += 1;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 ValidateHeaderTag;
                                                                               END;
                                                                                }

    { ['{2BC29851-1DC4-4867-977A-21611634FDFC}'];2;col1               ;Element ;Text    ;
                                                  VariableName=col1;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  ColumnNo := 1;
                                                                                  CheckLineType;
                                                                                  InsertColumn(ColumnNo,col1);
                                                                                END;
                                                                                 }

    { ['{A64C65BE-4E70-436F-9680-A7C77EC03315}'];2;colx               ;Element ;Text    ;
                                                  VariableName=colx;
                                                  MinOccurs=Zero;
                                                  Unbound=true;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  ColumnNo += 1;
                                                                                  InsertColumn(ColumnNo,colx);
                                                                                END;
                                                                                 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      DataExchField@1021 : Record "Data Exch. Field";
      DataExchEntryNo@1020 : Integer;
      ImportedLineNo@1019 : Integer;
      FileLineNo@1018 : Integer;
      HeaderLines@1017 : Integer;
      HeaderLineCount@1016 : Integer;
      ColumnNo@1022 : Integer;
      HeaderTag@1015 : Text;
      FooterTag@1014 : Text;
      SkipLine@1013 : Boolean;
      LastLineIsFooter@1012 : Boolean;
      HeaderWarning@1011 : Boolean;
      LineType@1010 : 'Unknown,Header,Footer,Data';
      CurrentLineType@1009 : Option;
      FullHeaderLine@1008 : Text;
      LastLineIsHeaderErr@1001 : TextConst 'ENU=The imported file contains unexpected formatting. One or more lines may be missing in the file.';
      WrongHeaderErr@1000 : TextConst 'ENU=The imported file contains unexpected formatting. One or more headers are incorrect.';
      DataExchLineDefCode@1002 : Code[20];

    LOCAL PROCEDURE InitializeGlobals@11();
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      DataExchEntryNo := "Data Exch.".GETRANGEMIN("Entry No.");
      "Data Exch.".GET(DataExchEntryNo);
      DataExchLineDefCode := "Data Exch."."Data Exch. Line Def Code";
      DataExchDef.GET("Data Exch."."Data Exch. Def Code");
      HeaderLines := DataExchDef."Header Lines";
      ImportedLineNo := 0;
      FileLineNo := 0;
      HeaderTag := DataExchDef."Header Tag";
      FooterTag := DataExchDef."Footer Tag";
      HeaderLineCount := 0;
      CurrentLineType := LineType::Unknown;
      FullHeaderLine := '';
      currXMLport.FIELDSEPARATOR(DataExchDef.ColumnSeparatorChar);
      case DataExchDef."File Encoding" of
        DataExchDef."File Encoding"::"MS-DOS":
          currXMLport.TEXTENCODING(TEXTENCODING::MSDos);
        DataExchDef."File Encoding"::"UTF-8":
          currXMLport.TEXTENCODING(TEXTENCODING::UTF8);
        DataExchDef."File Encoding"::"UTF-16":
          currXMLport.TEXTENCODING(TEXTENCODING::UTF16);
        DataExchDef."File Encoding"::WINDOWS:
          currXMLport.TEXTENCODING(TEXTENCODING::Windows);
      end;
    END;

    LOCAL PROCEDURE CheckLineType@4();
    BEGIN
      IdentifyLineType;
      ValidateNonDataLine;
      TrackNonDataLines;
      SkipLine := CurrentLineType <> LineType::Data;

      if not SkipLine then begin
        HeaderLineCount := 0;
        ImportedLineNo += 1;
      end;
    END;

    LOCAL PROCEDURE IdentifyLineType@3();
    BEGIN
      case true of
        FileLineNo <= HeaderLines:
          CurrentLineType := LineType::Header;
        (HeaderTag <> '') and (STRLEN(col1) <= HeaderTagLength) and (STRPOS(HeaderTag,col1) = 1):
          CurrentLineType := LineType::Header;
        (FooterTag <> '') and (STRLEN(col1) <= FooterTagLength) and (STRPOS(FooterTag,col1) = 1):
          CurrentLineType := LineType::Footer;
        else
          CurrentLineType := LineType::Data;
      end;
    END;

    LOCAL PROCEDURE ValidateNonDataLine@6();
    BEGIN
      if CurrentLineType = LineType::Header then begin
        if (HeaderTag <> '') and (STRLEN(col1) <= HeaderTagLength) and (STRPOS(HeaderTag,col1) = 0) then
          ERROR(WrongHeaderErr);
      end;
    END;

    LOCAL PROCEDURE TrackNonDataLines@5();
    BEGIN
      case CurrentLineType of
        LineType::Header:
          begin
            HeaderLineCount += 1;
            if not HeaderWarning and (HeaderLines > 0) and (HeaderLineCount > HeaderLines) then
              HeaderWarning := true;
          end;
        LineType::Data:
          if (HeaderLines > 0) and (HeaderLineCount > 0) and (HeaderLineCount < HeaderLines) then
            HeaderWarning := true;
        LineType::Footer:
          LastLineIsFooter := true;
      end;
    END;

    LOCAL PROCEDURE HeaderTagLength@8() : Integer;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      exit(GetFieldLength(DATABASE::"Data Exch. Def",DataExchDef.FIELDNO("Header Tag")));
    END;

    LOCAL PROCEDURE FooterTagLength@9() : Integer;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      exit(GetFieldLength(DATABASE::"Data Exch. Def",DataExchDef.FIELDNO("Footer Tag")));
    END;

    LOCAL PROCEDURE GetFieldLength@7(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      exit(FieldRef.LENGTH);
    END;

    LOCAL PROCEDURE InsertColumn@2(columnNumber@1000 : Integer;VAR columnValue@1001 : Text);
    VAR
      savedColumnValue@1002 : Text;
    BEGIN
      savedColumnValue := columnValue;
      columnValue := '';
      if SkipLine then begin
        if (CurrentLineType = LineType::Header) and (HeaderTag <> '') then
          FullHeaderLine += savedColumnValue + ';';
        exit;
      end;
      if savedColumnValue <> '' then begin
        DataExchField.INIT;
        DataExchField.VALIDATE("Data Exch. No.",DataExchEntryNo);
        DataExchField.VALIDATE("Line No.",ImportedLineNo);
        DataExchField.VALIDATE("Column No.",columnNumber);
        DataExchField.VALIDATE(Value,COPYSTR(savedColumnValue,1,MAXSTRLEN(DataExchField.Value)));
        DataExchField.VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
        DataExchField.INSERT(true);
      end;
    END;

    LOCAL PROCEDURE ValidateHeaderTag@10();
    BEGIN
      if SkipLine and (CurrentLineType = LineType::Header) and (HeaderTag <> '') then
        if STRPOS(FullHeaderLine,HeaderTag) = 0 then
          ERROR(WrongHeaderErr);
    END;

    BEGIN
    END.
  }
}

