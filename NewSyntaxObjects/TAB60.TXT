OBJECT Table 60 Document Sending Profile
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               DocumentSendingProfile@1000 : Record "Document Sending Profile";
             BEGIN
               DocumentSendingProfile.SETRANGE(Default,true);
               if not DocumentSendingProfile.FINDFIRST then
                 Default := true;
             END;

    OnDelete=VAR
               Customer@1000 : Record Customer;
             BEGIN
               if Default then
                 ERROR(CannotDeleteDefaultRuleErr);

               Customer.SETRANGE("Document Sending Profile",Code);
               if Customer.FINDFIRST then begin
                 if CONFIRM(UpdateAssCustomerQst,false,Code) then
                   Customer.MODIFYALL("Document Sending Profile",'')
                 else
                   ERROR(CannotDeleteErr);
               end;
             END;

    CaptionML=ENU=Document Sending Profile;
    LookupPageID="Document Sending Profiles";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Printer             ;Option        ;CaptionML=ENU=Printer;
                                                   OptionCaptionML=ENU=No,Yes (Prompt for Settings),Yes (Use Default Settings);
                                                   OptionString=No,"Yes (Prompt for Settings)","Yes (Use Default Settings)" }
    { 11  ;   ;E-Mail              ;Option        ;CaptionML=ENU=Email;
                                                   OptionCaptionML=ENU=No,Yes (Prompt for Settings),Yes (Use Default Settings);
                                                   OptionString=No,"Yes (Prompt for Settings)","Yes (Use Default Settings)" }
    { 12  ;   ;E-Mail Attachment   ;Option        ;CaptionML=ENU=Email Attachment;
                                                   OptionCaptionML=ENU=PDF,Electronic Document,PDF & Electronic Document;
                                                   OptionString=PDF,"Electronic Document","PDF & Electronic Document" }
    { 13  ;   ;E-Mail Format       ;Code20        ;TableRelation="Electronic Document Format".Code;
                                                   CaptionML=ENU=Email Format }
    { 15  ;   ;Disk                ;Option        ;CaptionML=ENU=Disk;
                                                   OptionCaptionML=ENU=No,PDF,Electronic Document,PDF & Electronic Document;
                                                   OptionString=No,PDF,"Electronic Document","PDF & Electronic Document" }
    { 16  ;   ;Disk Format         ;Code20        ;TableRelation="Electronic Document Format".Code;
                                                   CaptionML=ENU=Disk Format }
    { 20  ;   ;Electronic Document ;Option        ;CaptionML=ENU=Electronic Document;
                                                   OptionCaptionML=ENU=No,Through Document Exchange Service;
                                                   OptionString=No,"Through Document Exchange Service" }
    { 21  ;   ;Electronic Format   ;Code20        ;TableRelation="Electronic Document Format".Code;
                                                   CaptionML=ENU=Electronic Format }
    { 30  ;   ;Default             ;Boolean       ;OnValidate=VAR
                                                                DocumentSendingProfile@1001 : Record "Document Sending Profile";
                                                              BEGIN
                                                                if (xRec.Default = true) and (Default = false) then
                                                                  ERROR(CannotRemoveDefaultRuleErr);

                                                                DocumentSendingProfile.SETRANGE(Default,true);
                                                                DocumentSendingProfile.MODIFYALL(Default,false,false);
                                                              END;

                                                   CaptionML=ENU=Default }
    { 50  ;   ;Send To             ;Option        ;CaptionML=ENU=Send To;
                                                   OptionCaptionML=ENU=Disk,Email,Print,Electronic Document;
                                                   OptionString=Disk,Email,Print,"Electronic Document" }
    { 51  ;   ;Usage               ;Option        ;CaptionML=ENU=Usage;
                                                   OptionCaptionML=ENU=Sales Invoice,Sales Credit Memo,,Service Invoice,Service Credit Memo,Job Quote;
                                                   OptionString="Sales Invoice","Sales Credit Memo",,"Service Invoice","Service Credit Memo","Job Quote" }
    { 52  ;   ;One Related Party Selected;Boolean ;InitValue=true;
                                                   OnValidate=BEGIN
                                                                if not "One Related Party Selected" then begin
                                                                  "Electronic Document" := "Electronic Document"::No;
                                                                  "Electronic Format" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=One Related Party Selected }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DefaultCodeTxt@1000 : TextConst '@@@=Translate as we translate default term in local languages;ENU=DEFAULT';
      DefaultDescriptionTxt@1001 : TextConst 'ENU=Default rule used if no other provided';
      RecordAsTextFormatterTxt@1002 : TextConst 'ENU="%1 ; %2"';
      FieldCaptionContentFormatterTxt@1007 : TextConst '@@@="%1=Field Caption (e.g. Email), %2=Field Content (e.g. PDF) so for example ''Email (PDF)''";ENU=%1 (%2)';
      CannotDeleteDefaultRuleErr@1003 : TextConst 'ENU=You cannot delete the default rule. Assign other rule to be default first.';
      CannotRemoveDefaultRuleErr@1004 : TextConst 'ENU=There must be one default rule in the system. To remove the default property from this rule, assign default to another rule.';
      UpdateAssCustomerQst@1005 : TextConst 'ENU=If you delete document sending profile %1, it will also be deleted on customer cards that use the profile.\\Do you want to continue?';
      CannotDeleteErr@1006 : TextConst 'ENU=Cannot delete the document sending profile.';
      CannotSendMultipleSalesDocsErr@1008 : TextConst 'ENU=You can only send one electronic sales document at a time.';
      InvoicesTxt@1009 : TextConst 'ENU=Invoices';
      ShipmentsTxt@1010 : TextConst 'ENU=Shipments';
      CreditMemosTxt@1011 : TextConst 'ENU=Credit Memos';
      ReceiptsTxt@1012 : TextConst 'ENU=Receipts';
      JobQuotesTxt@1013 : TextConst 'ENU=Job Quotes';
      PurchaseOrdersTxt@1014 : TextConst 'ENU=Purchase Orders';
      ProfileSelectionQst@1018 : TextConst '@@@=Translation should contain comma separators between variants as ENU value does. No other commas should be there.;ENU=Confirm the first profile and use it for all selected documents.,Confirm the profile for each document.,Use the default profile for all selected documents without confimation.';
      CustomerProfileSelectionInstrTxt@1016 : TextConst 'ENU="Customers on the selected documents use different document sending profiles. Choose one of the following options: "';
      VendorProfileSelectionInstrTxt@1017 : TextConst 'ENU="Vendors on the selected documents use different document sending profiles. Choose one of the following options: "';

    [External]
    PROCEDURE GetDefaultForCustomer@4(CustomerNo@1000 : Code[20];VAR DocumentSendingProfile@1002 : Record "Document Sending Profile");
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      if Customer.GET(CustomerNo) then
        if DocumentSendingProfile.GET(Customer."Document Sending Profile") then
          exit;

      GetDefault(DocumentSendingProfile);
    END;

    [External]
    PROCEDURE GetDefaultForVendor@27(VendorNo@1001 : Code[20];VAR DocumentSendingProfile@1000 : Record "Document Sending Profile");
    VAR
      Vendor@1002 : Record Vendor;
    BEGIN
      if Vendor.GET(VendorNo) then
        if DocumentSendingProfile.GET(Vendor."Document Sending Profile") then
          exit;

      GetDefault(DocumentSendingProfile);
    END;

    [External]
    PROCEDURE GetDefault@1(VAR DefaultDocumentSendingProfile@1000 : Record "Document Sending Profile");
    VAR
      DocumentSendingProfile@1001 : Record "Document Sending Profile";
    BEGIN
      DocumentSendingProfile.SETRANGE(Default,true);
      if not DocumentSendingProfile.FINDFIRST then begin
        DocumentSendingProfile.INIT;
        DocumentSendingProfile.VALIDATE(Code,DefaultCodeTxt);
        DocumentSendingProfile.VALIDATE(Description,DefaultDescriptionTxt);
        DocumentSendingProfile.VALIDATE("E-Mail","E-Mail"::"Yes (Prompt for Settings)");
        DocumentSendingProfile.VALIDATE("E-Mail Attachment","E-Mail Attachment"::PDF);
        DocumentSendingProfile.VALIDATE(Default,true);
        DocumentSendingProfile.INSERT(true);
      end;

      DefaultDocumentSendingProfile := DocumentSendingProfile;
    END;

    [External]
    PROCEDURE GetRecordAsText@2() : Text;
    VAR
      RecordAsText@1000 : Text;
    BEGIN
      RecordAsText := '';

      if ("Electronic Document" <> "Electronic Document"::No) and ("Electronic Format" <> '') then
        RecordAsText := STRSUBSTNO(
            RecordAsTextFormatterTxt,
            STRSUBSTNO(FieldCaptionContentFormatterTxt,FIELDCAPTION("Electronic Document"),"Electronic Document"),RecordAsText);

      if "E-Mail" <> "E-Mail"::No then
        RecordAsText := STRSUBSTNO(
            RecordAsTextFormatterTxt,
            STRSUBSTNO(FieldCaptionContentFormatterTxt,FIELDCAPTION("E-Mail"),"E-Mail Attachment"),RecordAsText);
      if Printer <> Printer::No then
        RecordAsText := STRSUBSTNO(RecordAsTextFormatterTxt,FIELDCAPTION(Printer),RecordAsText);

      if Disk <> Disk::No then
        RecordAsText := STRSUBSTNO(
            RecordAsTextFormatterTxt,STRSUBSTNO(FieldCaptionContentFormatterTxt,FIELDCAPTION(Disk),Disk),RecordAsText);

      exit(RecordAsText);
    END;

    [External]
    PROCEDURE WillUserBePrompted@5() : Boolean;
    BEGIN
      exit(
        (Printer = Printer::"Yes (Prompt for Settings)") or
        ("E-Mail" = "E-Mail"::"Yes (Prompt for Settings)"));
    END;

    [External]
    PROCEDURE SetDocumentUsage@3(DocumentVariant@1000 : Variant);
    VAR
      ElectronicDocumentFormat@1001 : Record "Electronic Document Format";
      DocumentUsage@1002 : Option;
    BEGIN
      ElectronicDocumentFormat.GetDocumentUsage(DocumentUsage,DocumentVariant);
      VALIDATE(Usage,DocumentUsage);
    END;

    [External]
    PROCEDURE VerifySelectedOptionsValid@6();
    BEGIN
      if "One Related Party Selected" then
        exit;

      if "E-Mail Attachment" > "E-Mail Attachment"::PDF then
        ERROR(CannotSendMultipleSalesDocsErr);

      if "Electronic Document" > "Electronic Document"::No then
        ERROR(CannotSendMultipleSalesDocsErr);
    END;

    [External]
    PROCEDURE LookupProfile@7(CustNo@1000 : Code[20];Multiselection@1002 : Boolean;ShowDialog@1005 : Boolean) : Boolean;
    VAR
      DocumentSendingProfile@1001 : Record "Document Sending Profile";
      OfficeMgt@1004 : Codeunit "Office Management";
    BEGIN
      if OfficeMgt.IsAvailable then begin
        GetOfficeAddinDefault(Rec,OfficeMgt.AttachAvailable);
        exit(true);
      end;

      GetDefaultForCustomer(CustNo,DocumentSendingProfile);
      if ShowDialog then
        exit(RunSelectSendingOptionsPage(DocumentSendingProfile.Code,Multiselection));

      Rec := DocumentSendingProfile;
      exit(true);
    END;

    [External]
    PROCEDURE LookUpProfileVendor@18(VendorNo@1001 : Code[20];Multiselection@1000 : Boolean;ShowDialog@1005 : Boolean) : Boolean;
    VAR
      DocumentSendingProfile@1004 : Record "Document Sending Profile";
      OfficeMgt@1002 : Codeunit "Office Management";
    BEGIN
      if OfficeMgt.IsAvailable then begin
        GetOfficeAddinDefault(Rec,OfficeMgt.AttachAvailable);
        exit(true);
      end;

      DocumentSendingProfile.GetDefaultForVendor(VendorNo,DocumentSendingProfile);
      if ShowDialog then
        exit(RunSelectSendingOptionsPage(DocumentSendingProfile.Code,Multiselection));

      Rec := DocumentSendingProfile;
      exit(true);
    END;

    LOCAL PROCEDURE RunSelectSendingOptionsPage@32(DocumentSendingProfileCode@1002 : Code[20];OneRelatedPartySelected@1001 : Boolean) : Boolean;
    VAR
      TempDocumentSendingProfile@1000 : TEMPORARY Record "Document Sending Profile";
    BEGIN
      TempDocumentSendingProfile.INIT;
      TempDocumentSendingProfile.Code := DocumentSendingProfileCode;
      TempDocumentSendingProfile.VALIDATE("One Related Party Selected",OneRelatedPartySelected);
      TempDocumentSendingProfile.INSERT;

      COMMIT;
      if PAGE.RUNMODAL(PAGE::"Select Sending Options",TempDocumentSendingProfile) = ACTION::LookupOK then begin
        Rec := TempDocumentSendingProfile;
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE SendCustomerRecords@33(ReportUsage@1012 : Integer;RecordVariant@1011 : Variant;DocName@1008 : Text[150];CustomerNo@1013 : Code[20];DocumentNo@1014 : Code[20];CustomerFieldNo@1007 : Integer;DocumentFieldNo@1006 : Integer);
    VAR
      DocumentSendingProfile@1001 : Record "Document Sending Profile";
      RecRefSource@1000 : RecordRef;
      RecRefToSend@1009 : RecordRef;
      ProfileSelectionMethod@1002 : 'ConfirmDefault,ConfirmPerEach,UseDefault';
      SingleCustomerSelected@1005 : Boolean;
      ShowDialog@1010 : Boolean;
    BEGIN
      SingleCustomerSelected := IsSingleRecordSelected(RecordVariant,CustomerNo,CustomerFieldNo);

      if not SingleCustomerSelected then
        if not DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,true) then
          exit;

      if SingleCustomerSelected or (ProfileSelectionMethod = ProfileSelectionMethod::ConfirmDefault) then begin
        if DocumentSendingProfile.LookupProfile(CustomerNo,true,true) then
          DocumentSendingProfile.Send(ReportUsage,RecordVariant,DocumentNo,CustomerNo,DocName,CustomerFieldNo,DocumentFieldNo);
      end else begin
        ShowDialog := ProfileSelectionMethod = ProfileSelectionMethod::ConfirmPerEach;
        RecRefSource.GETTABLE(RecordVariant);
        if RecRefSource.FINDSET then
          repeat
            RecRefToSend := RecRefSource.DUPLICATE;
            RecRefToSend.SETRECFILTER;
            CustomerNo := RecRefToSend.FIELD(CustomerFieldNo).VALUE;
            DocumentNo := RecRefToSend.FIELD(DocumentFieldNo).VALUE;
            if DocumentSendingProfile.LookupProfile(CustomerNo,true,ShowDialog) then
              DocumentSendingProfile.Send(ReportUsage,RecRefToSend,DocumentNo,CustomerNo,DocName,CustomerFieldNo,DocumentFieldNo);
          until RecRefSource.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SendVendorRecords@35(ReportUsage@1012 : Integer;RecordVariant@1011 : Variant;DocName@1008 : Text[150];VendorNo@1013 : Code[20];DocumentNo@1014 : Code[20];VendorFieldNo@1007 : Integer;DocumentFieldNo@1006 : Integer);
    VAR
      DocumentSendingProfile@1001 : Record "Document Sending Profile";
      RecRef@1000 : RecordRef;
      RecRef2@1009 : RecordRef;
      ProfileSelectionMethod@1002 : 'ConfirmDefault,ConfirmPerEach,UseDefault';
      SingleVendorSelected@1005 : Boolean;
      ShowDialog@1010 : Boolean;
    BEGIN
      SingleVendorSelected := IsSingleRecordSelected(RecordVariant,VendorNo,VendorFieldNo);

      if not SingleVendorSelected then
        if not DocumentSendingProfile.ProfileSelectionMethodDialog(ProfileSelectionMethod,false) then
          exit;

      if SingleVendorSelected or (ProfileSelectionMethod = ProfileSelectionMethod::ConfirmDefault) then begin
        if DocumentSendingProfile.LookUpProfileVendor(VendorNo,true,true) then
          DocumentSendingProfile.SendVendor(ReportUsage,RecordVariant,DocumentNo,VendorNo,DocName,VendorFieldNo,DocumentFieldNo);
      end else begin
        ShowDialog := ProfileSelectionMethod = ProfileSelectionMethod::ConfirmPerEach;
        RecRef.GETTABLE(RecordVariant);
        if RecRef.FINDSET then
          repeat
            RecRef2 := RecRef.DUPLICATE;
            RecRef2.SETRECFILTER;
            VendorNo := RecRef2.FIELD(VendorFieldNo).VALUE;
            DocumentNo := RecRef2.FIELD(DocumentFieldNo).VALUE;
            if DocumentSendingProfile.LookUpProfileVendor(VendorNo,true,ShowDialog) then
              DocumentSendingProfile.SendVendor(ReportUsage,RecRef2,DocumentNo,VendorNo,DocName,VendorFieldNo,DocumentFieldNo);
          until RecRef.NEXT = 0;
      end;
    END;

    [Internal]
    PROCEDURE Send@11(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];ToCust@1002 : Code[20];DocName@1001 : Text[150];CustomerFieldNo@1000 : Integer;DocumentNoFieldNo@1006 : Integer);
    BEGIN
      SendToVAN(RecordVariant);
      SendToPrinter(ReportUsage,RecordVariant,ToCust);
      TrySendToEMailGroupedMultipleSelection(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo);
      SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
    END;

    [Internal]
    PROCEDURE SendVendor@20(ReportUsage@1006 : Integer;RecordVariant@1005 : Variant;DocNo@1004 : Code[20];ToVendor@1003 : Code[20];DocName@1002 : Text[150];VendorFieldNo@1001 : Integer;DocumentNoFieldNo@1000 : Integer);
    BEGIN
      SendToVAN(RecordVariant);
      SendToPrinterVendor(ReportUsage,RecordVariant,ToVendor);
      TrySendToEMailGroupedMultipleSelectionVendor(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,VendorFieldNo);
      SendToDiskVendor(ReportUsage,RecordVariant,DocNo,DocName,ToVendor);
    END;

    [Internal]
    PROCEDURE TrySendToVAN@13(RecordVariant@1004 : Variant);
    BEGIN
      "Electronic Document" := "Electronic Document"::"Through Document Exchange Service";
      SendToVAN(RecordVariant);
    END;

    [External]
    PROCEDURE TrySendToPrinter@14(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;ToCust@1001 : Code[20];ShowDialog@1000 : Boolean);
    BEGIN
      if ShowDialog then
        Printer := Printer::"Yes (Prompt for Settings)"
      else
        Printer := Printer::"Yes (Use Default Settings)";

      SendToPrinter(ReportUsage,RecordVariant,ToCust);
    END;

    [External]
    PROCEDURE TrySendToPrinterVendor@28(ReportUsage@1003 : Integer;RecordVariant@1002 : Variant;ToVendor@1001 : Code[20];ShowDialog@1000 : Boolean);
    BEGIN
      if ShowDialog then
        Printer := Printer::"Yes (Prompt for Settings)"
      else
        Printer := Printer::"Yes (Use Default Settings)";

      SendToPrinterVendor(ReportUsage,RecordVariant,ToVendor);
    END;

    [Internal]
    PROCEDURE TrySendToEMail@15(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocumentNoFieldNo@1003 : Integer;DocName@1001 : Text[150];CustomerFieldNo@1002 : Integer;ShowDialog@1000 : Boolean);
    BEGIN
      if ShowDialog then
        "E-Mail" := "E-Mail"::"Yes (Prompt for Settings)"
      else
        "E-Mail" := "E-Mail"::"Yes (Use Default Settings)";

      "E-Mail Attachment" := "E-Mail Attachment"::PDF;

      TrySendToEMailGroupedMultipleSelection(ReportUsage,RecordVariant,DocumentNoFieldNo,DocName,CustomerFieldNo);
    END;

    LOCAL PROCEDURE TrySendToEMailGroupedMultipleSelection@19(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocumentNoFieldNo@1003 : Integer;DocName@1001 : Text[150];CustomerFieldNo@1006 : Integer);
    VAR
      TempCustomer@1009 : TEMPORARY Record Customer;
      RecRef@1007 : RecordRef;
      CustomerNoFieldRef@1000 : FieldRef;
      RecToSend@1011 : Variant;
    BEGIN
      RecToSend := RecordVariant;
      RecRef.GETTABLE(RecordVariant);
      CustomerNoFieldRef := RecRef.FIELD(CustomerFieldNo);
      GetDisctinctCustomers(RecRef,CustomerFieldNo,TempCustomer);

      if TempCustomer.FINDSET then
        repeat
          CustomerNoFieldRef.SETFILTER(TempCustomer."No.");
          RecRef.FINDFIRST;
          RecRef.SETTABLE(RecToSend);
          SendToEMail(
            ReportUsage,RecToSend,GetMultipleDocumentsTo(RecRef,DocumentNoFieldNo),
            GetMultipleDocumentsName(DocName,ReportUsage,RecRef),TempCustomer."No.");
        until TempCustomer.NEXT = 0;
    END;

    LOCAL PROCEDURE TrySendToEMailGroupedMultipleSelectionVendor@23(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;DocumentNoFieldNo@1002 : Integer;DocName@1001 : Text[150];VendorFieldNo@1000 : Integer);
    VAR
      TempVendor@1008 : TEMPORARY Record Vendor;
      RecRef@1007 : RecordRef;
      VendorNoFieldRef@1006 : FieldRef;
      RecToSend@1005 : Variant;
    BEGIN
      RecToSend := RecordVariant;
      RecRef.GETTABLE(RecordVariant);
      VendorNoFieldRef := RecRef.FIELD(VendorFieldNo);
      GetDistinctVendors(RecRef,VendorFieldNo,TempVendor);

      if TempVendor.FINDSET then
        repeat
          VendorNoFieldRef.SETFILTER(TempVendor."No.");
          RecRef.FINDFIRST;
          RecRef.SETTABLE(RecToSend);
          SendToEmailVendor(
            ReportUsage,RecToSend,GetMultipleDocumentsTo(RecRef,DocumentNoFieldNo),
            GetMultipleDocumentsName(DocName,ReportUsage,RecRef),TempVendor."No.");
        until TempVendor.NEXT = 0;
    END;

    [Internal]
    PROCEDURE TrySendToDisk@16(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1001 : Text[150];ToCust@1000 : Code[20]);
    BEGIN
      Disk := Disk::PDF;
      SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
    END;

    LOCAL PROCEDURE SendToVAN@8(RecordVariant@1004 : Variant);
    VAR
      ReportDistributionManagement@1006 : Codeunit "Report Distribution Management";
    BEGIN
      if "Electronic Document" = "Electronic Document"::No then
        exit;

      ReportDistributionManagement.VANDocumentReport(RecordVariant,Rec);
    END;

    LOCAL PROCEDURE SendToPrinter@9(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;ToCust@1001 : Code[20]);
    VAR
      ReportSelections@1006 : Record "Report Selections";
      ShowRequestForm@1000 : Boolean;
    BEGIN
      if Printer = Printer::No then
        exit;

      ShowRequestForm := Printer = Printer::"Yes (Prompt for Settings)";
      ReportSelections.PrintWithGUIYesNo(ReportUsage,RecordVariant,ShowRequestForm,ToCust);
    END;

    LOCAL PROCEDURE SendToPrinterVendor@22(ReportUsage@1000 : Integer;RecordVariant@1001 : Variant;ToVendor@1002 : Code[20]);
    VAR
      ReportSelections@1004 : Record "Report Selections";
      ShowRequestForm@1003 : Boolean;
    BEGIN
      if Printer = Printer::No then
        exit;

      ShowRequestForm := Printer = Printer::"Yes (Prompt for Settings)";
      ReportSelections.PrintWithGUIYesNoVendor(ReportUsage,RecordVariant,ShowRequestForm,ToVendor);
    END;

    LOCAL PROCEDURE SendToEMail@10(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1003 : Code[20];DocName@1016 : Text[150];ToCust@1002 : Code[20]);
    VAR
      ReportSelections@1000 : Record "Report Selections";
      ElectronicDocumentFormat@1006 : Record "Electronic Document Format";
      ReportDistributionManagement@1012 : Codeunit "Report Distribution Management";
      DocumentMailing@1007 : Codeunit "Document-Mailing";
      FileManagement@1011 : Codeunit "File Management";
      ShowDialog@1001 : Boolean;
      ClientFilePath@1013 : Text[250];
      ServerFilePath@1009 : Text[250];
      ZipPath@1015 : Text[250];
      ClientZipFileName@1014 : Text[250];
      ServerEmailBodyFilePath@1008 : Text[250];
      SendToEmailAddress@1010 : Text[250];
    BEGIN
      if "E-Mail" = "E-Mail"::No then
        exit;

      ShowDialog := "E-Mail" = "E-Mail"::"Yes (Prompt for Settings)";

      case "E-Mail Attachment" of
        "E-Mail Attachment"::PDF:
          ReportSelections.SendEmailToCust(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,ToCust);
        "E-Mail Attachment"::"Electronic Document":
          begin
            ReportSelections.GetEmailBody(ServerEmailBodyFilePath,ReportUsage,RecordVariant,ToCust,SendToEmailAddress);
            ReportDistributionManagement.SendXmlEmailAttachment(
              RecordVariant,"E-Mail Format",ServerEmailBodyFilePath,SendToEmailAddress);
          end;
        "E-Mail Attachment"::"PDF & Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"E-Mail Format");
            ReportDistributionManagement.CreateOrAppendZipFile(FileManagement,ServerFilePath,ClientFilePath,ZipPath,ClientZipFileName);
            ReportSelections.SendToZip(ReportUsage,RecordVariant,DocNo,ToCust,FileManagement);
            FileManagement.CloseZipArchive;

            ReportSelections.GetEmailBody(ServerEmailBodyFilePath,ReportUsage,RecordVariant,ToCust,SendToEmailAddress);
            DocumentMailing.EmailFile(
              ZipPath,ClientZipFileName,ServerEmailBodyFilePath,DocNo,SendToEmailAddress,DocName,
              not ShowDialog,ReportUsage);
          end;
      end;
    END;

    LOCAL PROCEDURE SendToEmailVendor@30(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;DocNo@1002 : Code[20];DocName@1001 : Text[150];ToVendor@1000 : Code[20]);
    VAR
      ReportSelections@1016 : Record "Report Selections";
      ElectronicDocumentFormat@1015 : Record "Electronic Document Format";
      ReportDistributionManagement@1014 : Codeunit "Report Distribution Management";
      DocumentMailing@1013 : Codeunit "Document-Mailing";
      FileManagement@1012 : Codeunit "File Management";
      ShowDialog@1011 : Boolean;
      ClientFilePath@1010 : Text[250];
      ServerFilePath@1009 : Text[250];
      ZipPath@1008 : Text[250];
      ClientZipFileName@1007 : Text[250];
      ServerEmailBodyFilePath@1006 : Text[250];
      SendToEmailAddress@1005 : Text[250];
    BEGIN
      if "E-Mail" = "E-Mail"::No then
        exit;

      ShowDialog := "E-Mail" = "E-Mail"::"Yes (Prompt for Settings)";

      case "E-Mail Attachment" of
        "E-Mail Attachment"::PDF:
          ReportSelections.SendEmailToVendor(ReportUsage,RecordVariant,DocNo,DocName,ShowDialog,ToVendor);
        "E-Mail Attachment"::"Electronic Document":
          begin
            ReportSelections.GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,ToVendor,SendToEmailAddress);
            ReportDistributionManagement.SendXmlEmailAttachmentVendor(
              RecordVariant,"E-Mail Format",ServerEmailBodyFilePath,SendToEmailAddress);
          end;
        "E-Mail Attachment"::"PDF & Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"E-Mail Format");
            ReportDistributionManagement.CreateOrAppendZipFile(FileManagement,ServerFilePath,ClientFilePath,ZipPath,ClientZipFileName);
            ReportSelections.SendToZipVendor(ReportUsage,RecordVariant,DocNo,ToVendor,FileManagement);
            FileManagement.CloseZipArchive;

            ReportSelections.GetEmailBodyVendor(ServerEmailBodyFilePath,ReportUsage,RecordVariant,ToVendor,SendToEmailAddress);
            DocumentMailing.EmailFile(
              ZipPath,ClientZipFileName,ServerEmailBodyFilePath,DocNo,SendToEmailAddress,DocName,
              not ShowDialog,ReportUsage);
          end;
      end;
    END;

    LOCAL PROCEDURE SendToDisk@12(ReportUsage@1005 : Integer;RecordVariant@1004 : Variant;DocNo@1002 : Code[20];DocName@1013 : Text;ToCust@1009 : Code[20]);
    VAR
      ReportSelections@1001 : Record "Report Selections";
      ElectronicDocumentFormat@1003 : Record "Electronic Document Format";
      ReportDistributionManagement@1000 : Codeunit "Report Distribution Management";
      FileManagement@1010 : Codeunit "File Management";
      ServerFilePath@1006 : Text[250];
      ClientFilePath@1007 : Text[250];
      ZipPath@1011 : Text[250];
      ClientZipFileName@1012 : Text[250];
    BEGIN
      if Disk = Disk::No then
        exit;

      case Disk of
        Disk::PDF:
          ReportSelections.SendToDisk(ReportUsage,RecordVariant,DocNo,DocName,ToCust);
        Disk::"Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"Disk Format");
            ReportDistributionManagement.SaveFileOnClient(ServerFilePath,ClientFilePath);
          end;
        Disk::"PDF & Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"Disk Format");
            ReportDistributionManagement.CreateOrAppendZipFile(FileManagement,ServerFilePath,ClientFilePath,ZipPath,ClientZipFileName);
            ReportSelections.SendToZip(ReportUsage,RecordVariant,DocNo,ToCust,FileManagement);
            FileManagement.CloseZipArchive;

            ReportDistributionManagement.SaveFileOnClient(ZipPath,ClientZipFileName);
          end;
      end;
    END;

    LOCAL PROCEDURE SendToDiskVendor@29(ReportUsage@1004 : Integer;RecordVariant@1003 : Variant;DocNo@1002 : Code[20];DocName@1001 : Text;ToVendor@1000 : Code[20]);
    VAR
      ReportSelections@1012 : Record "Report Selections";
      ElectronicDocumentFormat@1011 : Record "Electronic Document Format";
      ReportDistributionManagement@1010 : Codeunit "Report Distribution Management";
      FileManagement@1009 : Codeunit "File Management";
      ServerFilePath@1008 : Text[250];
      ClientFilePath@1007 : Text[250];
      ZipPath@1006 : Text[250];
      ClientZipFileName@1005 : Text[250];
    BEGIN
      if Disk = Disk::No then
        exit;

      case Disk of
        Disk::PDF:
          ReportSelections.SendToDiskVendor(ReportUsage,RecordVariant,DocNo,DocName,ToVendor);
        Disk::"Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"Disk Format");
            ReportDistributionManagement.SaveFileOnClient(ServerFilePath,ClientFilePath);
          end;
        Disk::"PDF & Electronic Document":
          begin
            ElectronicDocumentFormat.SendElectronically(ServerFilePath,ClientFilePath,RecordVariant,"Disk Format");
            ReportDistributionManagement.CreateOrAppendZipFile(FileManagement,ServerFilePath,ClientFilePath,ZipPath,ClientZipFileName);
            ReportSelections.SendToZipVendor(ReportUsage,RecordVariant,DocNo,ToVendor,FileManagement);
            FileManagement.CloseZipArchive;

            ReportDistributionManagement.SaveFileOnClient(ZipPath,ClientZipFileName);
          end;
      end;
    END;

    [External]
    PROCEDURE GetOfficeAddinDefault@17(VAR TempDocumentSendingProfile@1000 : TEMPORARY Record "Document Sending Profile";CanAttach@1001 : Boolean);
    BEGIN
      with TempDocumentSendingProfile do begin
        INIT;
        Code := DefaultCodeTxt;
        Description := DefaultDescriptionTxt;
        if CanAttach then
          "E-Mail" := "E-Mail"::"Yes (Use Default Settings)"
        else
          "E-Mail" := "E-Mail"::"Yes (Prompt for Settings)";
        "E-Mail Attachment" := "E-Mail Attachment"::PDF;
        Default := false;
      end;
    END;

    LOCAL PROCEDURE GetMultipleDocumentsName@21(DocName@1002 : Text[150];ReportUsage@1000 : Integer;RecRef@1001 : RecordRef) : Text[150];
    VAR
      ReportSelections@1011 : Record "Report Selections";
    BEGIN
      if RecRef.COUNT > 1 then
        case ReportUsage of
          ReportSelections.Usage::"S.Invoice":
            exit(InvoicesTxt);
          ReportSelections.Usage::"S.Shipment":
            exit(ShipmentsTxt);
          ReportSelections.Usage::"S.Cr.Memo":
            exit(CreditMemosTxt);
          ReportSelections.Usage::"S.Ret.Rcpt.":
            exit(ReceiptsTxt);
          ReportSelections.Usage::JQ:
            exit(JobQuotesTxt);
          ReportSelections.Usage::"P.Order":
            exit(PurchaseOrdersTxt);
        end;

      exit(DocName);
    END;

    LOCAL PROCEDURE GetMultipleDocumentsTo@25(RecRef@1001 : RecordRef;DocumentNoFieldNo@1000 : Integer) : Code[20];
    VAR
      DocumentNoFieldRef@1002 : FieldRef;
    BEGIN
      if RecRef.COUNT > 1 then
        exit('');

      DocumentNoFieldRef := RecRef.FIELD(DocumentNoFieldNo);
      exit(DocumentNoFieldRef.VALUE);
    END;

    LOCAL PROCEDURE GetDisctinctCustomers@24(RecRef@1002 : RecordRef;CustomerFieldNo@1000 : Integer;VAR TempCustomer@1001 : TEMPORARY Record Customer);
    VAR
      FieldRef@1003 : FieldRef;
      CustomerNo@1004 : Code[20];
    BEGIN
      if RecRef.FINDSET then
        repeat
          FieldRef := RecRef.FIELD(CustomerFieldNo);
          CustomerNo := FieldRef.VALUE;
          if not TempCustomer.GET(CustomerNo) then begin
            TempCustomer."No." := CustomerNo;
            TempCustomer.INSERT;
          end;
        until RecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDistinctVendors@26(RecRef@1002 : RecordRef;VendorFieldNo@1001 : Integer;VAR TempVendor@1000 : TEMPORARY Record Vendor);
    VAR
      FieldRef@1004 : FieldRef;
      VendorNo@1003 : Code[20];
    BEGIN
      if RecRef.FINDSET then
        repeat
          FieldRef := RecRef.FIELD(VendorFieldNo);
          VendorNo := FieldRef.VALUE;
          if not TempVendor.GET(VendorNo) then begin
            TempVendor."No." := VendorNo;
            TempVendor.INSERT;
          end;
        until RecRef.NEXT = 0;
    END;

    [External]
    PROCEDURE ProfileSelectionMethodDialog@31(VAR ProfileSelectionMethod@1000 : 'ConfirmDefault,ConfirmPerEach,UseDefault';IsCustomer@1002 : Boolean) : Boolean;
    VAR
      ProfileSelectionInstruction@1001 : Text;
    BEGIN
      if IsCustomer then
        ProfileSelectionInstruction := CustomerProfileSelectionInstrTxt
      else
        ProfileSelectionInstruction := VendorProfileSelectionInstrTxt;

      case STRMENU(ProfileSelectionQst,3,ProfileSelectionInstruction) of
        0:
          exit(false);
        1:
          ProfileSelectionMethod := ProfileSelectionMethod::ConfirmDefault;
        2:
          ProfileSelectionMethod := ProfileSelectionMethod::ConfirmPerEach;
        3:
          ProfileSelectionMethod := ProfileSelectionMethod::UseDefault;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE IsSingleRecordSelected@91(RecordVariant@1003 : Variant;CVNo@1007 : Code[20];CVFieldNo@1005 : Integer) : Boolean;
    VAR
      RecRef@1004 : RecordRef;
      FieldRef@1006 : FieldRef;
    BEGIN
      RecRef.GETTABLE(RecordVariant);
      if not RecRef.FINDSET then
        exit(false);

      if RecRef.NEXT = 0 then
        exit(true);

      FieldRef := RecRef.FIELD(CVFieldNo);
      FieldRef.SETFILTER('<>%1',CVNo);
      exit(RecRef.ISEMPTY);
    END;

    [External]
    PROCEDURE CheckElectronicSendingEnabled@34();
    VAR
      DocExchServiceMgt@1002 : Codeunit "Doc. Exch. Service Mgt.";
    BEGIN
      if "Electronic Document" <> "Electronic Document"::No then
        DocExchServiceMgt.CheckServiceEnabled;
    END;

    BEGIN
    END.
  }
}

