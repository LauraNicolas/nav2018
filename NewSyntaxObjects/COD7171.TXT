OBJECT Codeunit 7171 Sales Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record Item;
      SalesHeader@1003 : Record "Sales Header";
      SalesPriceCalcMgt@1002 : Codeunit "Sales Price Calc. Mgt.";
      AvailableToPromise@1005 : Codeunit "Available to Promise";

    [External]
    PROCEDURE CalcAvailability@18(VAR SalesLine@1000 : Record "Sales Line") : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.QtyAvailabletoPromise(
              Item,
              GrossRequirement,
              ScheduledReceipt,
              CalcAvailabilityDate(SalesLine),
              PeriodType,
              LookaheadDateformula),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcAvailabilityDate@27(SalesLine@1000 : Record "Sales Line") : Date;
    BEGIN
      if SalesLine."Shipment Date" <> 0D then
        exit(SalesLine."Shipment Date");

      exit(WORKDATE);
    END;

    [External]
    PROCEDURE CalcAvailableInventory@9(SalesLine@1000 : Record "Sales Line") : Decimal;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.CalcAvailableInventory(Item),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcScheduledReceipt@21(SalesLine@1001 : Record "Sales Line") : Decimal;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.CalcScheduledReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcGrossRequirements@23(SalesLine@1001 : Record "Sales Line") : Decimal;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.CalcGrossRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcReservedRequirements@25(SalesLine@1001 : Record "Sales Line") : Decimal;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.CalcReservedReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcReservedDemand@26(SalesLine@1000 : Record "Sales Line") : Decimal;
    BEGIN
      if GetItem(SalesLine) then begin
        SetItemFilter(Item,SalesLine);

        exit(
          ConvertQty(
            AvailableToPromise.CalcReservedRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSubstitutions@20(SalesLine@1000 : Record "Sales Line") : Integer;
    BEGIN
      if GetItem(SalesLine) then begin
        Item.CALCFIELDS("No. of Substitutes");
        exit(Item."No. of Substitutes");
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSalesPrices@19(SalesLine@1000 : Record "Sales Line") : Integer;
    BEGIN
      if GetItem(SalesLine) then begin
        GetSalesHeader(SalesLine);
        exit(SalesPriceCalcMgt.NoOfSalesLinePrice(SalesHeader,SalesLine,true));
      end;
    END;

    [External]
    PROCEDURE CalcNoOfSalesLineDisc@22(SalesLine@1001 : Record "Sales Line") : Integer;
    BEGIN
      if GetItem(SalesLine) then begin
        GetSalesHeader(SalesLine);
        exit(SalesPriceCalcMgt.NoOfSalesLineLineDisc(SalesHeader,SalesLine,true));
      end;
    END;

    LOCAL PROCEDURE ConvertQty@28(Qty@1000 : Decimal;PerUoMQty@1001 : Decimal) : Decimal;
    BEGIN
      if PerUoMQty = 0 then
        PerUoMQty := 1;
      exit(ROUND(Qty / PerUoMQty,0.00001));
    END;

    [External]
    PROCEDURE LookupItem@7(SalesLine@1000 : Record "Sales Line");
    BEGIN
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SalesLine.TESTFIELD("No.");
      GetItem(SalesLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    LOCAL PROCEDURE GetItem@24(VAR SalesLine@1000 : Record "Sales Line") : Boolean;
    BEGIN
      with Item do begin
        if (SalesLine.Type <> SalesLine.Type::Item) or (SalesLine."No." = '') then
          exit(false);

        if SalesLine."No." <> "No." then
          GET(SalesLine."No.");
        exit(true);
      end;
    END;

    LOCAL PROCEDURE GetSalesHeader@13(SalesLine@1000 : Record "Sales Line");
    BEGIN
      if (SalesLine."Document Type" <> SalesHeader."Document Type") or
         (SalesLine."Document No." <> SalesHeader."No.")
      then
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record Item;SalesLine@1001 : Record "Sales Line");
    BEGIN
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
      Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
      Item.SETRANGE("Location Filter",SalesLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",false);
    END;

    BEGIN
    END.
  }
}

