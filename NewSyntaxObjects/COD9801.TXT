OBJECT Codeunit 9801 Identity Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserAccountHelper@1003 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=11.0.*.*, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
      NavTok@1000 : TextConst '@@@={Locked};ENU=NAV';
      InvoiceTok@1001 : TextConst '@@@={Locked};ENU=INV';
      FinancialsTok@1002 : TextConst '@@@={Locked};ENU=FIN';
      C5Tok@1004 : TextConst '@@@={Locked};ENU=C5';

    [Internal]
    PROCEDURE SetAuthenticationKey@1(UserSecurityID@1000 : GUID;Key@1001 : Text[80]);
    BEGIN
      if not UserAccountHelper.TrySetAuthenticationKey(UserSecurityID,Key) then
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetAuthenticationKey@14(UserSecurityID@1000 : GUID) Key : Text[80];
    BEGIN
      if not UserAccountHelper.TryGetAuthenticationKey(UserSecurityID,Key) then
        Key := FORMAT(GETLASTERRORTEXT,80);
    END;

    [Internal]
    PROCEDURE GetNameIdentifier@2(UserSecurityID@1000 : GUID) NameID : Text[250];
    BEGIN
      if not UserAccountHelper.TryGetNameIdentifier(UserSecurityID,NameID) then
        NameID := FORMAT(GETLASTERRORTEXT,250);
    END;

    [Internal]
    PROCEDURE GetObjectId@29(UserSecurityID@1000 : GUID) ObjectID : Text[250];
    BEGIN
      if not UserAccountHelper.TryGetAuthenticationObjectId(UserSecurityID,ObjectID) then
        ObjectID := FORMAT(GETLASTERRORTEXT,250);
    END;

    [Internal]
    PROCEDURE CreateWebServicesKey@8(UserSecurityID@1000 : GUID;ExpiryDate@1001 : DateTime) Key : Text[80];
    BEGIN
      if not UserAccountHelper.TryCreateWebServicesKey(UserSecurityID,ExpiryDate,Key) then
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetPuid@23() : Text;
    BEGIN
      exit(UserAccountHelper.GetPuid);
    END;

    [Internal]
    PROCEDURE CreateWebServicesKeyNoExpiry@13(UserSecurityID@1000 : GUID) Key : Text[80];
    VAR
      ExpiryDate@1001 : DateTime;
    BEGIN
      if not UserAccountHelper.TryCreateWebServicesKey(UserSecurityID,ExpiryDate,Key) then
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE ClearWebServicesKey@22(UserSecurityID@1000 : GUID);
    BEGIN
      if not UserAccountHelper.TryClearWebServicesKey(UserSecurityID) then
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetWebServicesKey@4(UserSecurityID@1000 : GUID) Key : Text[80];
    VAR
      ExpiryDate@1001 : DateTime;
    BEGIN
      if not UserAccountHelper.TryGetWebServicesKey(UserSecurityID,Key,ExpiryDate) then
        Key := FORMAT(GETLASTERRORTEXT,80);
    END;

    [Internal]
    PROCEDURE IsAzure@5() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsAzure;
    END;

    [Internal]
    PROCEDURE GetWebServiceExpiryDate@6(UserSecurityID@1000 : GUID) ExpiryDate : DateTime;
    VAR
      Key@1001 : Text[80];
    BEGIN
      if not UserAccountHelper.TryGetWebServicesKey(UserSecurityID,Key,ExpiryDate) then
        ExpiryDate := CURRENTDATETIME;
    END;

    [Internal]
    PROCEDURE GetACSStatus@7(UserSecurityID@1001 : GUID) ACSStatus : Integer;
    VAR
      ACSStatusOption@1000 : 'Disabled,Pending,Registered,Unknown';
      Key@1002 : Text[80];
      NameID@1003 : Text[250];
    BEGIN
      // Determines the status as follows:
      // If neither Nameidentifier, nor authentication key then Disabled
      // If authentiation key then Pending
      // If NameIdentifier then Registered
      // If no permission: Unknown

      if not UserAccountHelper.TryGetAuthenticationKey(UserSecurityID,Key) then begin
        ACSStatusOption := ACSStatusOption::Unknown;
        ACSStatus := ACSStatusOption;
        exit;
      end;

      if not UserAccountHelper.TryGetNameIdentifier(UserSecurityID,NameID) then begin
        ACSStatusOption := ACSStatusOption::Unknown;
        ACSStatus := ACSStatusOption;
        exit;
      end;

      if NameID = '' then begin
        if Key = '' then
          ACSStatusOption := ACSStatusOption::Disabled
        else
          ACSStatusOption := ACSStatusOption::Pending;
      end else
        ACSStatusOption := ACSStatusOption::Registered;

      ACSStatus := ACSStatusOption;
    END;

    LOCAL PROCEDURE ValidateKeyStrength@9(Key@1001 : Text[250]) : Boolean;
    VAR
      i@1000 : Integer;
      KeyLen@1002 : Integer;
      HasUpper@1003 : Boolean;
      HasLower@1004 : Boolean;
      HasNumeric@1005 : Boolean;
    BEGIN
      KeyLen := STRLEN(Key);

      if KeyLen < 8 then
        exit(false);

      for i := 1 to STRLEN(Key) do begin
        case Key[i] of
          'A'..'Z':
            HasUpper := true;
          'a'..'z':
            HasLower := true;
          '0'..'9':
            HasNumeric := true;
        end;

        if HasUpper and HasLower and HasNumeric then
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE ValidatePasswordStrength@10(Password@1000 : Text[250]) IsValid : Boolean;
    BEGIN
      IsValid := ValidateKeyStrength(Password);
    END;

    [External]
    PROCEDURE ValidateAuthKeyStrength@11(AuthKey@1000 : Text[250]) IsValid : Boolean;
    BEGIN
      IsValid := ValidateKeyStrength(AuthKey);
    END;

    [Internal]
    PROCEDURE GetMaskedNavPassword@15(UserSecurityID@1000 : GUID) MaskedPassword : Text[80];
    BEGIN
      if UserAccountHelper.IsPasswordSet(UserSecurityID) then
        MaskedPassword := '********'
      else
        MaskedPassword := '';
    END;

    [Internal]
    PROCEDURE IsWindowsAuthentication@16() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsWindowsAuthentication;
    END;

    [Internal]
    PROCEDURE IsUserNamePasswordAuthentication@17() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsUserNamePasswordAuthentication;
    END;

    [Internal]
    PROCEDURE IsAccessControlServiceAuthentication@18() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsAccessControlServiceAuthentication;
    END;

    [Internal]
    PROCEDURE UserName@19(Sid@1000 : Text) : Text[208];
    BEGIN
      if Sid = '' then
        exit('');

      exit(UserAccountHelper.UserName(Sid));
    END;

    [Internal]
    PROCEDURE SetAuthenticationEmail@12(UserSecurityId@1000 : GUID;AuthenticationEmail@1001 : Text[250]);
    BEGIN
      CLEARLASTERROR;
      if not UserAccountHelper.TrySetAuthenticationEmail(UserSecurityId,AuthenticationEmail) then
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetAuthenticationStatus@21(UserSecurityId@1001 : GUID) O365AuthStatus : Integer;
    BEGIN
      O365AuthStatus := UserAccountHelper.GetAuthenticationStatus(UserSecurityId);
    END;

    [Internal]
    PROCEDURE GetAadTenantId@3() : Text;
    BEGIN
      exit(UserAccountHelper.AadTenantId);
    END;

    [External]
    PROCEDURE IsInvAppId@20() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      exit(AppId = InvoiceTok);
    END;

    [External]
    PROCEDURE IsFinAppId@24() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      exit(AppId = FinancialsTok);
    END;

    [External]
    PROCEDURE IsNavAppId@25() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      exit(AppId = NavTok);
    END;

    [External]
    PROCEDURE IsC5AppId@26() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      exit(AppId = C5Tok);
    END;

    [Integration]
    [External]
    PROCEDURE OnBeforeGetApplicationIdentifier@27(VAR AppId@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

