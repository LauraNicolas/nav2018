OBJECT Codeunit 1804 Approval Workflow Setup Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OneWeekDueDateFormulaTxt@1000 : TextConst '@@@={Locked};ENU=<1W>';
      CustomerApprWorkflowDescTxt@1001 : TextConst 'ENU=Customer Approval Workflow';
      ItemApprWorkflowDescTxt@1003 : TextConst 'ENU=Item Approval Workflow';
      SalesMktCategoryTxt@1002 : TextConst '@@@={Locked};ENU=SALES';
      ItemChangeApprWorkflowDescTxt@1004 : TextConst 'ENU=Item Change Approval Workflow';
      CustomerChangeApprWorkflowDescTxt@1005 : TextConst 'ENU=Customer Change Approval Workflow';
      GeneralJournalLineApprWorkflowDescTxt@1006 : TextConst 'ENU=General Journal Line Approval Workflow';
      FinCategoryDescTxt@1007 : TextConst 'ENU=Finance';

    [Internal]
    PROCEDURE ApplyInitialWizardUserInput@6(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      PurchaseHeader@1002 : Record "Purchase Header";
    BEGIN
      if TempApprovalWorkflowWizard."Purch Invoice App. Workflow" then
        CreatePurchaseDocumentApprovalWorkflow(PurchaseHeader."Document Type"::Invoice);

      if TempApprovalWorkflowWizard."Sales Invoice App. Workflow" then
        CreateSalesDocumentApprovalWorkflow(SalesHeader."Document Type"::Invoice);

      CreateApprovalSetup(TempApprovalWorkflowWizard);
    END;

    [Internal]
    PROCEDURE ApplyCustomerWizardUserInput@5(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      Workflow@1001 : Record Workflow;
      WorkflowSetup@1002 : Codeunit "Workflow Setup";
      WorkflowEventHandling@1005 : Codeunit "Workflow Event Handling";
      EventConditions@1004 : Text;
    BEGIN
      with TempApprovalWorkflowWizard do
        case "App. Trigger" of
          "App. Trigger"::"The user sends an approval requests manually":
            begin
              EventConditions := WorkflowSetup.BuildCustomerTypeConditions;
              CreateCustomerOrItemApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Customer,
                WorkflowSetup.CustomerWorkflowCode,CustomerApprWorkflowDescTxt,EventConditions,
                WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode,
                WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            end;
          "App. Trigger"::"The user changes a specific field":
            CreateCustomerOrItemChangeApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Customer,
              WorkflowSetup.CustomerCreditLimitChangeApprovalWorkflowCode,CustomerChangeApprWorkflowDescTxt,
              WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
        end;

      Workflow.VALIDATE(Enabled,true);
      Workflow.MODIFY(true);
    END;

    [Internal]
    PROCEDURE ApplyItemWizardUserInput@7(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      Workflow@1007 : Record Workflow;
      WorkflowSetup@1005 : Codeunit "Workflow Setup";
      WorkflowEventHandling@1004 : Codeunit "Workflow Event Handling";
      EventConditions@1002 : Text;
    BEGIN
      with TempApprovalWorkflowWizard do
        case "App. Trigger" of
          "App. Trigger"::"The user sends an approval requests manually":
            begin
              EventConditions := WorkflowSetup.BuildItemTypeConditions;
              CreateCustomerOrItemApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Item,
                WorkflowSetup.ItemWorkflowCode,ItemApprWorkflowDescTxt,EventConditions,
                WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode,
                WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            end;
          "App. Trigger"::"The user changes a specific field":
            CreateCustomerOrItemChangeApprovalWorkflow(Workflow,TempApprovalWorkflowWizard,DATABASE::Item,
              WorkflowSetup.ItemUnitPriceChangeApprovalWorkflowCode,ItemChangeApprWorkflowDescTxt,
              WorkflowEventHandling.RunWorkflowOnItemChangedCode);
        end;

      Workflow.VALIDATE(Enabled,true);
      Workflow.MODIFY(true);
    END;

    LOCAL PROCEDURE CreateCustomerOrItemApprovalWorkflow@11(VAR Workflow@1002 : Record Workflow;VAR TempApprovalWorkflowWizard@1004 : TEMPORARY Record "Approval Workflow Wizard";TableNo@1010 : Integer;InitialWorkflowCode@1007 : Code[20];WorkflowDescription@1011 : Text[100];EventConditions@1009 : Text;StartEvent@1012 : Code[128];CancelEvent@1013 : Code[128]);
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
      WorkflowResponseHandling@1003 : Codeunit "Workflow Response Handling";
      WorkflowSetup@1006 : Codeunit "Workflow Setup";
    BEGIN
      DisableWorkflowWithEntryPointEventConditions(TableNo,
        StartEvent,EventConditions);
      InsertWorkflow(Workflow,GenerateWorkflowCode(InitialWorkflowCode),
        WorkflowDescription,SalesMktCategoryTxt);
      WorkflowSetup.InsertRecApprovalWorkflowSteps(Workflow,EventConditions,
        StartEvent,WorkflowResponseHandling.CreateApprovalRequestsCode,
        WorkflowResponseHandling.SendApprovalRequestForApprovalCode,
        CancelEvent,WorkflowStepArgument,true,true);

      ChangeWorkflowStepArgument(WorkflowStepArgument,Workflow.Code,TempApprovalWorkflowWizard."Approver ID");
    END;

    LOCAL PROCEDURE CreateCustomerOrItemChangeApprovalWorkflow@48(VAR Workflow@1002 : Record Workflow;VAR TempApprovalWorkflowWizard@1004 : TEMPORARY Record "Approval Workflow Wizard";TableNo@1010 : Integer;InitialWorkflowCode@1007 : Code[20];WorkflowDescription@1011 : Text[100];StartEvent@1012 : Code[128]);
    VAR
      WorkflowStepArgument@1000 : Record "Workflow Step Argument";
      WorkflowResponseHandling@1003 : Codeunit "Workflow Response Handling";
      WorkflowSetup@1006 : Codeunit "Workflow Setup";
    BEGIN
      DisableWorkflowWithEntryPointRules(TableNo,StartEvent,TempApprovalWorkflowWizard.Field);
      InsertWorkflow(Workflow,GenerateWorkflowCode(InitialWorkflowCode),
        WorkflowDescription,SalesMktCategoryTxt);
      WorkflowSetup.InsertRecChangedApprovalWorkflowSteps(Workflow,TempApprovalWorkflowWizard."Field Operator",
        StartEvent,WorkflowResponseHandling.CreateApprovalRequestsCode,
        WorkflowResponseHandling.SendApprovalRequestForApprovalCode,
        WorkflowStepArgument,TableNo,TempApprovalWorkflowWizard.Field,TempApprovalWorkflowWizard."Custom Message");

      ChangeWorkflowStepArgument(WorkflowStepArgument,Workflow.Code,TempApprovalWorkflowWizard."Approver ID");
    END;

    [Internal]
    PROCEDURE ApplyPaymantJrnlWizardUserInput@8(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      GenJournalLine@1002 : Record "Gen. Journal Line";
    BEGIN
      if not TempApprovalWorkflowWizard."For All Batches" then
        GenJournalLine.SETRANGE("Journal Batch Name",TempApprovalWorkflowWizard."Journal Batch Name");

      GenJournalLine.SETRANGE("Journal Template Name",TempApprovalWorkflowWizard."Journal Template Name");
      CreateGenJnlLineApprovalWorkflow(GenJournalLine,TempApprovalWorkflowWizard."Approver ID");
    END;

    [External]
    PROCEDURE CreateApprovalSetup@1(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    BEGIN
      if TempApprovalWorkflowWizard."Use Exist. Approval User Setup" then
        exit;

      // User setup for admin
      CreateUnlimitedApprover(TempApprovalWorkflowWizard);

      // User setup for all other users
      CreateLimitedAmountApprovers(TempApprovalWorkflowWizard);
    END;

    [Internal]
    PROCEDURE CreateGenJnlLineApprovalWorkflow@10(VAR GenJournalLine@1000 : Record "Gen. Journal Line";ApproverId@1008 : Code[50]) : Code[20];
    VAR
      Workflow@1001 : Record Workflow;
      WorkflowStepArgument@1003 : Record "Workflow Step Argument";
      WorkflowEventHandling@1004 : Codeunit "Workflow Event Handling";
      WorkflowSetup@1002 : Codeunit "Workflow Setup";
      WizardWorkflowCode@1012 : Code[20];
      EventConditions@1005 : Text;
      OneWeekDateFormula@1006 : DateFormula;
    BEGIN
      // Specific Workflow code is used: WZ-****
      WizardWorkflowCode := WorkflowSetup.GetWorkflowWizardCode(WorkflowSetup.GeneralJournalLineApprovalWorkflowCode);
      EventConditions := WorkflowSetup.BuildGeneralJournalLineTypeConditions(GenJournalLine);
      DisableWorkflowWithEntryPointEventConditions(DATABASE::"Gen. Journal Batch",
        WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode,EventConditions);
      InsertWorkflow(Workflow,GenerateWorkflowCode(WizardWorkflowCode),
        GeneralJournalLineApprWorkflowDescTxt,FinCategoryDescTxt);

      EVALUATE(OneWeekDateFormula,OneWeekDueDateFormulaTxt);
      WorkflowSetup.InsertGenJnlLineApprovalWorkflow(Workflow,EventConditions,WorkflowStepArgument."Approver Type"::Approver,
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver",'',ApproverId,OneWeekDateFormula);

      // Enable workflow
      Workflow.VALIDATE(Enabled,true);
      Workflow.MODIFY;

      exit(WizardWorkflowCode);
    END;

    [Internal]
    PROCEDURE CreateSalesDocumentApprovalWorkflow@2(DocumentType@1000 : Option) : Code[20];
    VAR
      SalesHeader@1007 : Record "Sales Header";
      Workflow@1001 : Record Workflow;
      WorkflowStepArgument@1003 : Record "Workflow Step Argument";
      WorkflowEventHandling@1004 : Codeunit "Workflow Event Handling";
      WorkflowSetup@1002 : Codeunit "Workflow Setup";
      WizardWorkflowCode@1012 : Code[20];
      EventConditions@1005 : Text;
      BlankDateFormula@1006 : DateFormula;
    BEGIN
      // Specific Workflow code is used: WZ-SIAPW
      WizardWorkflowCode := WorkflowSetup.GetWorkflowWizardCode(WorkflowSetup.SalesInvoiceApprovalWorkflowCode);
      if Workflow.GET(WizardWorkflowCode) then
        UpdateWorkflow(Workflow,DATABASE::"Sales Header",BlankDateFormula)
      else begin
        EventConditions := WorkflowSetup.BuildSalesHeaderTypeConditions(DocumentType,SalesHeader.Status::Open);
        DisableWorkflowWithEntryPointEventConditions(DATABASE::"Sales Header",
          WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode,EventConditions);

        WorkflowSetup.InsertSalesDocumentApprovalWorkflow(Workflow,DocumentType,WorkflowStepArgument."Approver Type"::Approver,
          WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver",'',BlankDateFormula);

        if Workflow.RENAME(WizardWorkflowCode) then;
      end;

      // Enable workflow
      Workflow.VALIDATE(Enabled,true);
      Workflow.MODIFY;

      exit(WizardWorkflowCode);
    END;

    [Internal]
    PROCEDURE CreatePurchaseDocumentApprovalWorkflow@3(DocumentType@1000 : Option) : Code[20];
    VAR
      PurchaseHeader@1007 : Record "Purchase Header";
      Workflow@1006 : Record Workflow;
      WorkflowStepArgument@1004 : Record "Workflow Step Argument";
      WorkflowSetup@1002 : Codeunit "Workflow Setup";
      WorkflowEventHandling@1010 : Codeunit "Workflow Event Handling";
      WizardWorkflowCode@1012 : Code[20];
      EventConditions@1013 : Text;
      BlankDateFormula@1001 : DateFormula;
    BEGIN
      // Specific Workflow code is used: WZ-PIAPW
      WizardWorkflowCode := WorkflowSetup.GetWorkflowWizardCode(WorkflowSetup.PurchaseInvoiceApprovalWorkflowCode);
      if Workflow.GET(WizardWorkflowCode) then
        UpdateWorkflow(Workflow,DATABASE::"Purchase Header",BlankDateFormula)
      else begin
        EventConditions := WorkflowSetup.BuildPurchHeaderTypeConditions(DocumentType,PurchaseHeader.Status::Open);
        DisableWorkflowWithEntryPointEventConditions(DATABASE::"Purchase Header",
          WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode,EventConditions);

        WorkflowSetup.InsertPurchaseDocumentApprovalWorkflow(Workflow,DocumentType,WorkflowStepArgument."Approver Type"::Approver,
          WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver",'',BlankDateFormula);

        if Workflow.RENAME(WizardWorkflowCode) then;
      end;

      // Enable workflow
      Workflow.VALIDATE(Enabled,true);
      Workflow.MODIFY;

      exit(WizardWorkflowCode);
    END;

    LOCAL PROCEDURE CreateUnlimitedApprover@40(TempApprovalWorkflowWizard@1000 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      ApprovalUserSetup@1001 : Record "User Setup";
      User@1002 : Record User;
    BEGIN
      // Set admin as approval user
      if not ApprovalUserSetup.GET(TempApprovalWorkflowWizard."Approver ID") then begin
        ApprovalUserSetup.INIT;
        ApprovalUserSetup.VALIDATE("User ID",TempApprovalWorkflowWizard."Approver ID");
        ApprovalUserSetup.INSERT;
      end;

      User.SETRANGE("User Name",TempApprovalWorkflowWizard."Approver ID");
      User.FINDFIRST;
      if TempApprovalWorkflowWizard."Sales Invoice App. Workflow" then
        ApprovalUserSetup.VALIDATE("Unlimited Sales Approval",TempApprovalWorkflowWizard."Sales Invoice App. Workflow");
      if TempApprovalWorkflowWizard."Purch Invoice App. Workflow" then
        ApprovalUserSetup.VALIDATE("Unlimited Purchase Approval",TempApprovalWorkflowWizard."Purch Invoice App. Workflow");
      ApprovalUserSetup.VALIDATE("Approver ID",''); // Reset Approver ID
      if ApprovalUserSetup."E-Mail" = '' then
        ApprovalUserSetup.VALIDATE("E-Mail",User."Contact Email");
      ApprovalUserSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateLimitedAmountApprovers@41(TempApprovalWorkflowWizard@1002 : TEMPORARY Record "Approval Workflow Wizard");
    VAR
      ApprovalUserSetup@1001 : Record "User Setup";
      User@1000 : Record User;
    BEGIN
      User.SETFILTER("User Name",'<>%1',TempApprovalWorkflowWizard."Approver ID");

      if User.FINDSET then
        repeat
          if not ApprovalUserSetup.GET(User."User Name") then begin
            ApprovalUserSetup.INIT;
            ApprovalUserSetup.VALIDATE("User ID",User."User Name");
            ApprovalUserSetup.INSERT;
          end;

          ApprovalUserSetup.VALIDATE("Approver ID",TempApprovalWorkflowWizard."Approver ID");
          if ApprovalUserSetup."E-Mail" = '' then
            ApprovalUserSetup.VALIDATE("E-Mail",User."Contact Email");
          ApprovalUserSetup.VALIDATE("Unlimited Sales Approval",false);
          if TempApprovalWorkflowWizard."Sales Invoice App. Workflow" then
            ApprovalUserSetup.VALIDATE("Sales Amount Approval Limit",TempApprovalWorkflowWizard."Sales Amount Approval Limit");
          ApprovalUserSetup.VALIDATE("Unlimited Purchase Approval",false);
          if TempApprovalWorkflowWizard."Purch Invoice App. Workflow" then
            ApprovalUserSetup.VALIDATE("Purchase Amount Approval Limit",TempApprovalWorkflowWizard."Purch Amount Approval Limit");
          ApprovalUserSetup.MODIFY;
        until User.NEXT = 0;
    END;

    LOCAL PROCEDURE PopulateSendApprovalWorkflowStepArgument@9(WorkflowCode@1000 : Code[20];ApproverType@1006 : Option;ApproverLimitType@1005 : Option;ApprovalEntriesPage@1004 : Integer;WorkflowUserGroupCode@1003 : Code[20];DueDateFormula@1002 : DateFormula;ShowConfirmationMessage@1001 : Boolean);
    VAR
      WorkflowStepArgument@1008 : Record "Workflow Step Argument";
      WorkflowResponseHandling@1009 : Codeunit "Workflow Response Handling";
    BEGIN
      if FindWorkflowStepArgument(WorkflowStepArgument,WorkflowCode,WorkflowResponseHandling.CreateApprovalRequestsCode) then begin
        // User input
        WorkflowStepArgument."Approver Type" := ApproverType;
        WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
        WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
        WorkflowStepArgument."Due Date Formula" := DueDateFormula;
        WorkflowStepArgument."Link Target Page" := ApprovalEntriesPage;
        WorkflowStepArgument."Show Confirmation Message" := ShowConfirmationMessage;
        WorkflowStepArgument.MODIFY;
      end;
    END;

    [External]
    PROCEDURE FindWorkflowStepArgument@4(VAR WorkflowStepArgument@1000 : Record "Workflow Step Argument";WorkflowCode@1002 : Code[50];FunctionName@1001 : Code[128]) : Boolean;
    VAR
      WorkflowStep@1003 : Record "Workflow Step";
    BEGIN
      // Get the step
      WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::Response);
      WorkflowStep.SETRANGE("Function Name",FunctionName);
      if WorkflowStep.FINDFIRST then
        // Get the step arguments
        exit(WorkflowStepArgument.GET(WorkflowStep.Argument));

      exit(false);
    END;

    LOCAL PROCEDURE WorkflowWithEntryPointEventConditionsExists@61(TableID@1005 : Integer;FunctionName@1000 : Code[128];EventFilters@1001 : Text;VAR Workflow@1002 : Record Workflow) : Boolean;
    VAR
      WorkflowStepArgument@1004 : Record "Workflow Step Argument";
      WorkflowDefinition@1006 : Query "Workflow Definition";
    BEGIN
      WorkflowDefinition.SETRANGE(Table_ID,TableID);
      WorkflowDefinition.SETRANGE(Entry_Point,true);
      WorkflowDefinition.SETRANGE(Enabled,true);
      WorkflowDefinition.SETRANGE(Type,WorkflowDefinition.Type::"Event");
      WorkflowDefinition.SETRANGE(Function_Name,FunctionName);
      WorkflowDefinition.OPEN;
      while WorkflowDefinition.READ do begin
        WorkflowStepArgument.GET(WorkflowDefinition.Argument);
        if WorkflowStepArgument.GetEventFilters = EventFilters then begin
          Workflow.GET(WorkflowDefinition.Code);
          exit(true);
        end;
      end;

      exit(false);
    END;

    LOCAL PROCEDURE DisableWorkflowWithEntryPointEventConditions@33(TableID@1003 : Integer;FunctionName@1002 : Code[128];EventConditions@1001 : Text);
    VAR
      Workflow@1000 : Record Workflow;
    BEGIN
      if WorkflowWithEntryPointEventConditionsExists(TableID,FunctionName,EventConditions,Workflow) then begin
        Workflow.VALIDATE(Enabled,false);
        Workflow.MODIFY;
      end;
    END;

    LOCAL PROCEDURE WorkflowWithEntryPointRulesExists@16(TableID@1005 : Integer;FunctionName@1000 : Code[128];FieldNo@1001 : Integer;VAR Workflow@1002 : Record Workflow) : Boolean;
    VAR
      WorkflowRule@1003 : Record "Workflow Rule";
      WorkflowDefinition@1006 : Query "Workflow Definition";
    BEGIN
      WorkflowDefinition.SETRANGE(Table_ID,TableID);
      WorkflowDefinition.SETRANGE(Entry_Point,true);
      WorkflowDefinition.SETRANGE(Enabled,true);
      WorkflowDefinition.SETRANGE(Type,WorkflowDefinition.Type::"Event");
      WorkflowDefinition.SETRANGE(Function_Name,FunctionName);
      WorkflowDefinition.OPEN;
      while WorkflowDefinition.READ do begin
        WorkflowRule.SETRANGE("Workflow Code",WorkflowDefinition.Code);
        if WorkflowRule.FINDFIRST then
          if WorkflowRule."Field No." = FieldNo then begin
            Workflow.GET(WorkflowDefinition.Code);
            exit(true);
          end;
      end;

      exit(false);
    END;

    LOCAL PROCEDURE DisableWorkflowWithEntryPointRules@18(TableID@1003 : Integer;FunctionName@1002 : Code[128];FieldNo@1001 : Integer);
    VAR
      Workflow@1000 : Record Workflow;
    BEGIN
      if WorkflowWithEntryPointRulesExists(TableID,FunctionName,FieldNo,Workflow) then begin
        Workflow.VALIDATE(Enabled,false);
        Workflow.MODIFY;
      end;
    END;

    LOCAL PROCEDURE UpdateWorkflow@55(VAR Workflow@1000 : Record Workflow;TableID@1001 : Integer;DueDateFormula@1002 : DateFormula);
    VAR
      WorkflowStep@1003 : Record "Workflow Step";
      WorkflowStepArgument@1004 : Record "Workflow Step Argument";
      EventConditions@1005 : Text;
    BEGIN
      if Workflow.Enabled then begin
        Workflow.VALIDATE(Enabled,false);
        Workflow.MODIFY;
      end else begin
        WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
        WorkflowStep.SETRANGE("Previous Workflow Step ID",0);
        WorkflowStep.FINDFIRST;
        WorkflowStepArgument.GET(WorkflowStep.Argument);
        EventConditions := WorkflowStepArgument.GetEventFilters;
        DisableWorkflowWithEntryPointEventConditions(TableID,WorkflowStep."Function Name",EventConditions);
      end;

      PopulateSendApprovalWorkflowStepArgument(Workflow.Code,WorkflowStepArgument."Approver Type"::Approver,
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver",0,'',DueDateFormula,true);
    END;

    LOCAL PROCEDURE InsertWorkflow@80(VAR Workflow@1003 : Record Workflow;WorkflowCode@1001 : Code[20];WorkflowDescription@1002 : Text[100];CategoryCode@1000 : Code[20]);
    BEGIN
      Workflow.INIT;
      Workflow.Code := WorkflowCode;
      Workflow.Description := WorkflowDescription;
      Workflow.Category := CategoryCode;
      Workflow.Enabled := false;
      Workflow.INSERT;
    END;

    LOCAL PROCEDURE GenerateWorkflowCode@38(WorkflowCode@1000 : Code[20]) : Code[20];
    VAR
      Workflow@1001 : Record Workflow;
    BEGIN
      if INCSTR(WorkflowCode) = '' then
        WorkflowCode := COPYSTR(WorkflowCode,1,MAXSTRLEN(WorkflowCode) - 3) + '-01';
      while Workflow.GET(WorkflowCode) do
        WorkflowCode := INCSTR(WorkflowCode);
      exit(WorkflowCode);
    END;

    LOCAL PROCEDURE ChangeWorkflowStepArgument@13(VAR WorkflowStepArgument@1002 : Record "Workflow Step Argument";WorkflowCode@1003 : Code[20];ApproverID@1004 : Code[50]);
    VAR
      WorkflowStep@1001 : Record "Workflow Step";
      WorkflowResponseHandling@1000 : Codeunit "Workflow Response Handling";
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
      WorkflowStep.SETRANGE("Function Name",WorkflowResponseHandling.CreateApprovalRequestsCode);
      if WorkflowStep.FINDFIRST then begin
        WorkflowStepArgument.GET(WorkflowStep.Argument);
        WorkflowStepArgument."Approver Type" := WorkflowStepArgument."Approver Type"::Approver;
        WorkflowStepArgument."Approver Limit Type" := WorkflowStepArgument."Approver Limit Type"::"Specific Approver";
        WorkflowStepArgument."Approver User ID" := ApproverID;
        EVALUATE(WorkflowStepArgument."Due Date Formula",OneWeekDueDateFormulaTxt);
        WorkflowStepArgument.MODIFY(true);
      end;
    END;

    BEGIN
    {
      // This codeunit creates and edits purchase invoice and sales invoice approval workflows.
      // In addition, user setup can be created for all users in the system based on the user input from wizard.
    }
    END.
  }
}

