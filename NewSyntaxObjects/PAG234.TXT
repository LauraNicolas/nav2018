OBJECT Page 234 Apply Employee Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Employee Ledger Entry"=m;
    CaptionML=ENU=Apply Employee Entries;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Employee Ledger Entry";
    DataCaptionFields="Employee No.";
    PageType=Worksheet;
    OnInit=BEGIN
             AppliesToIDVisible := true;
           END;

    OnOpenPage=VAR
                 OfficeMgt@1000 : Codeunit "Office Management";
               BEGIN
                 if CalcType = CalcType::Direct then begin
                   Empl.GET("Employee No.");
                   ApplnCurrencyCode := '';
                   FindApplyingEntry;
                 end;

                 AppliesToIDVisible := ApplnType <> ApplnType::"Applies-to Doc. No.";

                 GLSetup.GET;

                 if CalcType = CalcType::GenJnlLine then
                   CalcApplnAmount;
                 PostingDone := false;
                 IsOfficeAddin := OfficeMgt.IsAvailable;
               END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",Rec);
                     if "Applies-to ID" <> xRec."Applies-to ID" then
                       CalcApplnAmount;
                     exit(false);
                   END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::LookupOK then
                         LookupOKOnPush;
                       if ApplnType = ApplnType::"Applies-to Doc. No." then begin
                         if OK and (TempApplyingEmplLedgEntry."Posting Date" < "Posting Date") then begin
                           OK := false;
                           ERROR(
                             EarlierPostingDateErr,TempApplyingEmplLedgEntry."Document Type",TempApplyingEmplLedgEntry."Document No.",
                             "Document Type","Document No.");
                         end;
                         if OK then begin
                           if "Amount to Apply" = 0 then
                             "Amount to Apply" := "Remaining Amount";
                           CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",Rec);
                         end;
                       end;

                       if CheckActionPerformed then begin
                         Rec := TempApplyingEmplLedgEntry;
                         "Applying Entry" := false;
                         if AppliesToID = '' then begin
                           "Applies-to ID" := '';
                           "Amount to Apply" := 0;
                         end;
                         CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",Rec);
                       end;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           if ApplnType = ApplnType::"Applies-to Doc. No." then
                             CalcApplnAmount;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 37      ;1   ;ActionGroup;
                      Name=Ent&ry;
                      CaptionML=ENU=Ent&ry;
                      Image=Entry }
      { 31      ;2   ;Action    ;
                      Name=Applied E&ntries;
                      CaptionML=ENU=Applied E&ntries;
                      ToolTipML=ENU=View the ledger entries that have been applied to this record.;
                      ApplicationArea=#BasicHR;
                      RunObject=Page "Applied Employee Entries";
                      RunPageOnRec=true;
                      Image=Approve }
      { 57      ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edits dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#BasicHR;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Name=Detailed &Ledger Entries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Detailed &Ledger Entries;
                      ToolTipML=ENU=View a summary of all the posted entries and adjustments related to a specific employee ledger entry.;
                      ApplicationArea=#BasicHR;
                      RunObject=Page "Detailed Empl. Ledger Entries";
                      RunPageView=SORTING("Employee Ledger Entry No.","Posting Date");
                      RunPageLink="Employee Ledger Entry No."=FIELD("Entry No.");
                      Image=View }
      { 17      ;2   ;Action    ;
                      Name=Navigate;
                      CaptionML=ENU=&Navigate;
                      ToolTipML=ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                      ApplicationArea=#BasicHR;
                      Visible=NOT IsOfficeAddin;
                      Image=Navigate;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;ActionGroup;
                      Name=&Application;
                      CaptionML=ENU=&Application;
                      Image=Apply }
      { 13      ;2   ;Action    ;
                      Name=ActionSetAppliesToID;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=Set Applies-to ID;
                      ToolTipML=ENU=Set the Applies-to ID field on the posted entry to automatically be filled in with the document number of the entry in the journal.;
                      ApplicationArea=#BasicHR;
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 if (CalcType = CalcType::GenJnlLine) and (ApplnType = ApplnType::"Applies-to Doc. No.") then
                                   ERROR(CannotSetAppliesToIDErr);

                                 SetEmplApplId;
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=ActionPostApplication;
                      ShortCutKey=F9;
                      Ellipsis=true;
                      CaptionML=ENU=Post Application;
                      ToolTipML=ENU=Define the document number of the ledger entry to use to perform the application. In addition, you specify the Posting Date for the application.;
                      ApplicationArea=#BasicHR;
                      Image=PostApplication;
                      OnAction=BEGIN
                                 PostDirectApplication(false);
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=ENU=Preview Posting;
                      ToolTipML=ENU=Review the different types of entries that will be created when you post the document or journal.;
                      ApplicationArea=#BasicHR;
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 PostDirectApplication(true);
                               END;
                                }
      { 7       ;2   ;Separator ;
                      Name=-;
                      CaptionML=ENU=- }
      { 5       ;2   ;Action    ;
                      Name=Show Only Selected Entries to Be Applied;
                      CaptionML=ENU=Show Only Selected Entries to Be Applied;
                      ToolTipML=ENU=View the selected ledger entries that will be applied to the specified record.;
                      ApplicationArea=#BasicHR;
                      Image=ShowSelected;
                      OnAction=BEGIN
                                 ShowAppliedEntries := not ShowAppliedEntries;
                                 if ShowAppliedEntries then
                                   if CalcType = CalcType::GenJnlLine then
                                     SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
                                   else begin
                                     EmplEntryApplID := USERID;
                                     if EmplEntryApplID = '' then
                                       EmplEntryApplID := '***';
                                     SETRANGE("Applies-to ID",EmplEntryApplID);
                                   end
                                 else
                                   SETRANGE("Applies-to ID");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 70  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 73  ;2   ;Field     ;
                Name=Posting Date;
                CaptionML=ENU=Posting Date;
                ToolTipML=ENU=Specifies the posting date of the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Posting Date";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                Name=Document Type;
                CaptionML=ENU=Document Type;
                ToolTipML=ENU=Specifies the document type of the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Document Type";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                Name=Document No.;
                CaptionML=ENU=Document No.;
                ToolTipML=ENU=Specifies the document number of the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Document No.";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name=ApplyingEmployeeNo;
                CaptionML=ENU=Employee No.;
                ToolTipML=ENU=Specifies the employee number of the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Employee No.";
                Visible=FALSE;
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                Name=ApplyingDescription;
                CaptionML=ENU=Description;
                ToolTipML=ENU=Specifies the description of the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry.Description;
                Visible=FALSE;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                Name=Currency Code;
                CaptionML=ENU=Currency Code;
                ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Currency Code";
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                Name=Amount;
                CaptionML=ENU=Amount;
                ToolTipML=ENU=Specifies the amount on the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry.Amount;
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                Name=Remaining Amount;
                CaptionML=ENU=Remaining Amount;
                ToolTipML=ENU=Specifies the amount on the entry to be applied.;
                ApplicationArea=#BasicHR;
                SourceExpr=TempApplyingEmplLedgEntry."Remaining Amount";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                Name=Applies-to ID;
                ToolTipML=ENU=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.;
                ApplicationArea=#All;
                SourceExpr="Applies-to ID";
                Visible=AppliesToIDVisible;
                ImplicitType=Code50 }

    { 2   ;2   ;Field     ;
                Name="Posting Date";
                ToolTipML=ENU=Specifies the employee entry's posting date.;
                ApplicationArea=#BasicHR;
                SourceExpr="Posting Date";
                Editable=FALSE;
                ImplicitType=Date }

    { 16  ;2   ;Field     ;
                Name="Document Type";
                ToolTipML=ENU=Specifies the employee entry's document type.;
                ApplicationArea=#BasicHR;
                SourceExpr="Document Type";
                Editable=FALSE;
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name="Document No.";
                ToolTipML=ENU=Specifies the employee entry's document number.;
                ApplicationArea=#BasicHR;
                SourceExpr="Document No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Employee No.;
                ToolTipML=ENU=Specifies the number of the employee account that the entry is linked to.;
                ApplicationArea=#BasicHR;
                SourceExpr="Employee No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the employee entry.;
                ApplicationArea=#BasicHR;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 39  ;2   ;Field     ;
                Name="Currency Code";
                ToolTipML=ENU=Specifies the currency code for the amount on the line.;
                ApplicationArea=#BasicHR;
                SourceExpr="Currency Code";
                ImplicitType=Code10 }

    { 61  ;2   ;Field     ;
                Name=Original Amount;
                ToolTipML=ENU=Specifies the amount of the original entry.;
                ApplicationArea=#BasicHR;
                SourceExpr="Original Amount";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=Field12;
                ToolTipML=ENU=Specifies the amount of the entry.;
                ApplicationArea=#BasicHR;
                SourceExpr=Amount;
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=Debit Amount;
                ToolTipML=ENU=Specifies the total of the ledger entries that represent debits.;
                ApplicationArea=#BasicHR;
                SourceExpr="Debit Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 21  ;2   ;Field     ;
                Name=Credit Amount;
                ToolTipML=ENU=Specifies the total of the ledger entries that represent credits.;
                ApplicationArea=#BasicHR;
                SourceExpr="Credit Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 14  ;2   ;Field     ;
                Name="Remaining Amount";
                ToolTipML=ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                ApplicationArea=#BasicHR;
                SourceExpr="Remaining Amount";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 33  ;2   ;Field     ;
                Name=Appln. Remaining Amount;
                CaptionML=ENU=Appln. Remaining Amount;
                ToolTipML=ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                ApplicationArea=#BasicHR;
                SourceExpr=CalcApplnRemainingAmount("Remaining Amount");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 90  ;2   ;Field     ;
                Name=Amount to Apply;
                ToolTipML=ENU=Specifies the amount to apply.;
                ApplicationArea=#BasicHR;
                SourceExpr="Amount to Apply";
                OnValidate=BEGIN
                             CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",Rec);

                             if (xRec."Amount to Apply" = 0) or ("Amount to Apply" = 0) and
                                ((ApplnType = ApplnType::"Applies-to ID") or (CalcType = CalcType::Direct))
                             then
                               SetEmplApplId;
                             GET("Entry No.");
                             AmounttoApplyOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 92  ;2   ;Field     ;
                Name=Appln. Amount to Apply;
                CaptionML=ENU=Appln. Amount to Apply;
                ToolTipML=ENU=Specifies the amount to apply.;
                ApplicationArea=#BasicHR;
                SourceExpr=CalcApplnAmounttoApply("Amount to Apply");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 3   ;2   ;Field     ;
                Name=Payment Reference;
                ToolTipML=ENU=Specifies the payment to the employee.;
                ApplicationArea=#BasicHR;
                SourceExpr="Payment Reference";
                ImplicitType=Code50 }

    { 24  ;2   ;Field     ;
                Name=Open;
                ToolTipML=ENU=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.;
                ApplicationArea=#BasicHR;
                SourceExpr=Open;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 26  ;2   ;Field     ;
                Name=Positive;
                ToolTipML=ENU=Specifies if the entry to be applied is positive.;
                ApplicationArea=#BasicHR;
                SourceExpr=Positive;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 56  ;2   ;Field     ;
                Name=Global Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#BasicHR;
                SourceExpr="Global Dimension 1 Code";
                ImplicitType=Code20 }

    { 59  ;2   ;Field     ;
                Name=Global Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#BasicHR;
                SourceExpr="Global Dimension 2 Code";
                ImplicitType=Code20 }

    { 41  ;1   ;Group     ;
                Name=Group41 }

    { 1903222401;2;Group  ;
                Name=Group1903222401;
                GroupType=FixedLayout }

    { 1903866701;3;Group  ;
                Name=Appln. Currency;
                CaptionML=ENU=Appln. Currency }

    { 49  ;4   ;Field     ;
                Name=ApplnCurrencyCode;
                ToolTipML=ENU=Specifies the currency code that the amount will be applied in, in case of different currencies.;
                ApplicationArea=#BasicHR;
                SourceExpr=ApplnCurrencyCode;
                TableRelation=Currency;
                Editable=FALSE;
                ImplicitType=Code10;
                ShowCaption=false }

    { 1900545201;3;Group  ;
                Name=Group1900545201;
                CaptionML=ENU=Amount to Apply }

    { 45  ;4   ;Field     ;
                Name=AmountToApply;
                CaptionML=ENU=Amount to Apply;
                ToolTipML=ENU=Specifies the sum of the amounts on all the selected employee ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#BasicHR;
                SourceExpr=AppliedAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1901652301;3;Group  ;
                Name=Rounding;
                CaptionML=ENU=Rounding }

    { 53  ;4   ;Field     ;
                Name=ApplnRounding;
                CaptionML=ENU=Rounding;
                ToolTipML=ENU=Specifies the rounding difference when you apply entries in different currencies to one another. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#BasicHR;
                SourceExpr=ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1901992701;3;Group  ;
                Name=Applied Amount;
                CaptionML=ENU=Applied Amount }

    { 98  ;4   ;Field     ;
                Name=AppliedAmount;
                CaptionML=ENU=Applied Amount;
                ToolTipML=ENU=Specifies the sum of the amounts in the Amount to Apply field, Pmt. Disc. Amount field, and the Rounding. The amount is in the currency represented by the code in the Currency Code field.;
                ApplicationArea=#BasicHR;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900295601;3;Group  ;
                Name=Available Amount;
                CaptionML=ENU=Available Amount }

    { 47  ;4   ;Field     ;
                Name=ApplyingAmount;
                CaptionML=ENU=Available Amount;
                ToolTipML=ENU=Specifies the amount of the journal entry, purchase credit memo, or current employee ledger entry that you have selected as the applying entry.;
                ApplicationArea=#BasicHR;
                SourceExpr=ApplyingAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1901652401;3;Group  ;
                Name=Balance;
                CaptionML=ENU=Balance }

    { 43  ;4   ;Field     ;
                Name=ControlBalance;
                CaptionML=ENU=Balance;
                ToolTipML=ENU=Specifies any extra amount that will remain after the application.;
                ApplicationArea=#BasicHR;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplyingAmount + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      TempApplyingEmplLedgEntry@1033 : TEMPORARY Record "Employee Ledger Entry";
      AppliedEmplLedgEntry@1001 : Record "Employee Ledger Entry";
      Currency@1002 : Record Currency;
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      GenJnlLine@1004 : Record "Gen. Journal Line";
      GenJnlLine2@1005 : Record "Gen. Journal Line";
      Empl@1007 : Record Employee;
      EmplLedgEntry@1008 : Record "Employee Ledger Entry";
      GLSetup@1009 : Record "General Ledger Setup";
      EmplEntrySetApplID@1013 : Codeunit "Empl. Entry-SetAppl.ID";
      GenJnlApply@1014 : Codeunit "Gen. Jnl.-Apply";
      Navigate@1012 : Page Navigate;
      GenJnlLineApply@1016 : Boolean;
      AppliedAmount@1017 : Decimal;
      ApplyingAmount@1018 : Decimal;
      PmtDiscAmount@1040 : Decimal;
      ApplnDate@1019 : Date;
      ApplnCurrencyCode@1020 : Code[10];
      ApplnRoundingPrecision@1021 : Decimal;
      ApplnRounding@1022 : Decimal;
      ApplnType@1023 : '" ","Applies-to Doc. No.","Applies-to ID"';
      AmountRoundingPrecision@1024 : Decimal;
      CalcType@1027 : 'Direct,GenJnlLine,PurchHeader';
      EmplEntryApplID@1029 : Code[50];
      AppliesToID@1042 : Code[50];
      ValidExchRate@1030 : Boolean;
      DifferentCurrenciesInAppln@1032 : Boolean;
      MustSelectEntryErr@1036 : TextConst 'ENU=You must select an applying entry before you can post the application.';
      PostingInWrongContextErr@1035 : TextConst 'ENU=You must post the application from the window where you entered the applying entry.';
      CannotSetAppliesToIDErr@1038 : TextConst 'ENU=You cannot set Applies-to ID field while selecting Applies-to Doc. No field.';
      ShowAppliedEntries@1039 : Boolean;
      OK@1028 : Boolean;
      EarlierPostingDateErr@1034 : TextConst '@@@=%1 - document type, %2 - document number,%3 - document type,%4 - document number;ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      PostingDone@1000 : Boolean;
      AppliesToIDVisible@19043506 : Boolean INDATASET;
      ActionPerformed@1104 : Boolean;
      ApplicationPostedMsg@1043 : TextConst 'ENU=The application was successfully posted.';
      ApplicationDateErr@1044 : TextConst 'ENU=The posting date entered must not be before the posting date on the employee ledger entry.';
      ApplicationProcessCanceledErr@1045 : TextConst 'ENU=Post application process has been canceled.';
      IsOfficeAddin@1041 : Boolean;

    [Internal]
    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record "Gen. Journal Line";ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;
      GenJnlLineApply := true;

      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Employee then
        ApplyingAmount := GenJnlLine.Amount;
      if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Employee then
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      case ApplnTypeSelect of
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      end;

      SetApplyingEmplLedgEntry;
    END;

    [External]
    PROCEDURE SetEmplLedgEntry@13(NewEmplLedgEntry@1000 : Record "Employee Ledger Entry");
    BEGIN
      Rec := NewEmplLedgEntry;
    END;

    [Internal]
    PROCEDURE SetApplyingEmplLedgEntry@9();
    VAR
      Employee@1001 : Record Employee;
    BEGIN
      case CalcType of
        CalcType::Direct:
          begin
            if "Applying Entry" then begin
              if TempApplyingEmplLedgEntry."Entry No." <> 0 then
                EmplLedgEntry := TempApplyingEmplLedgEntry;
              CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",Rec);
              if "Applies-to ID" = '' then
                SetEmplApplId;
              CALCFIELDS(Amount);
              TempApplyingEmplLedgEntry := Rec;
              if EmplLedgEntry."Entry No." <> 0 then begin
                Rec := EmplLedgEntry;
                "Applying Entry" := false;
                SetEmplApplId;
              end;
              SETFILTER("Entry No.",'<> %1',TempApplyingEmplLedgEntry."Entry No.");
              ApplyingAmount := TempApplyingEmplLedgEntry."Remaining Amount";
              ApplnDate := TempApplyingEmplLedgEntry."Posting Date";
              ApplnCurrencyCode := TempApplyingEmplLedgEntry."Currency Code";
            end;
            CalcApplnAmount;
          end;
        CalcType::GenJnlLine:
          begin
            TempApplyingEmplLedgEntry."Posting Date" := GenJnlLine."Posting Date";
            TempApplyingEmplLedgEntry."Document Type" := GenJnlLine."Document Type";
            TempApplyingEmplLedgEntry."Document No." := GenJnlLine."Document No.";
            if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Employee then begin
              TempApplyingEmplLedgEntry."Employee No." := GenJnlLine."Bal. Account No.";
              Employee.GET(TempApplyingEmplLedgEntry."Employee No.");
              TempApplyingEmplLedgEntry.Description := COPYSTR(Employee.FullName,1,MAXSTRLEN(TempApplyingEmplLedgEntry.Description));
            end else begin
              TempApplyingEmplLedgEntry."Employee No." := GenJnlLine."Account No.";
              TempApplyingEmplLedgEntry.Description := GenJnlLine.Description;
            end;
            TempApplyingEmplLedgEntry."Currency Code" := GenJnlLine."Currency Code";
            TempApplyingEmplLedgEntry.Amount := GenJnlLine.Amount;
            TempApplyingEmplLedgEntry."Remaining Amount" := GenJnlLine.Amount;
            CalcApplnAmount;
          end;
      end;
    END;

    [Internal]
    PROCEDURE SetEmplApplId@10();
    BEGIN
      if (CalcType = CalcType::GenJnlLine) and (TempApplyingEmplLedgEntry."Posting Date" < "Posting Date") then
        ERROR(
          EarlierPostingDateErr,TempApplyingEmplLedgEntry."Document Type",TempApplyingEmplLedgEntry."Document No.",
          "Document Type","Document No.");

      if TempApplyingEmplLedgEntry."Entry No." <> 0 then
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,"Currency Code",GenJnlLine."Account Type"::Employee,true);

      EmplLedgEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EmplLedgEntry);

      if GenJnlLineApply then
        EmplEntrySetApplID.SetApplId(EmplLedgEntry,TempApplyingEmplLedgEntry,GenJnlLine."Applies-to ID")
      else
        EmplEntrySetApplID.SetApplId(EmplLedgEntry,TempApplyingEmplLedgEntry,'');

      ActionPerformed := EmplLedgEntry."Applies-to ID" <> '';
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE CalcApplnAmount@7();
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := false;

      case CalcType of
        CalcType::Direct:
          begin
            FindAmountRounding;
            EmplEntryApplID := USERID;
            if EmplEntryApplID = '' then
              EmplEntryApplID := '***';

            EmplLedgEntry := TempApplyingEmplLedgEntry;

            AppliedEmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
            AppliedEmplLedgEntry.SETRANGE("Employee No.","Employee No.");
            AppliedEmplLedgEntry.SETRANGE(Open,true);
            if AppliesToID = '' then
              AppliedEmplLedgEntry.SETRANGE("Applies-to ID",EmplEntryApplID)
            else
              AppliedEmplLedgEntry.SETRANGE("Applies-to ID",AppliesToID);

            if TempApplyingEmplLedgEntry."Entry No." <> 0 then begin
              EmplLedgEntry.CALCFIELDS("Remaining Amount");
              AppliedEmplLedgEntry.SETFILTER("Entry No.",'<>%1',EmplLedgEntry."Entry No.");
            end;

            HandlChosenEntries(0,EmplLedgEntry."Remaining Amount");
          end;
        CalcType::GenJnlLine:
          begin
            FindAmountRounding;
            if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Employee then
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

            case ApplnType of
              ApplnType::"Applies-to Doc. No.":
                begin
                  AppliedEmplLedgEntry := Rec;
                  with AppliedEmplLedgEntry do begin
                    CALCFIELDS("Remaining Amount");
                    if "Currency Code" <> ApplnCurrencyCode then begin
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                      "Amount to Apply" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                    end;

                    if "Amount to Apply" <> 0 then
                      AppliedAmount := ROUND("Amount to Apply",AmountRoundingPrecision)
                    else
                      AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    if not DifferentCurrenciesInAppln then
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  end;
                  CheckRounding;
                end;
              ApplnType::"Applies-to ID":
                begin
                  GenJnlLine2 := GenJnlLine;
                  AppliedEmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
                  AppliedEmplLedgEntry.SETRANGE("Employee No.",GenJnlLine."Account No.");
                  AppliedEmplLedgEntry.SETRANGE(Open,true);
                  AppliedEmplLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

                  HandlChosenEntries(1,GenJnlLine2.Amount);
                end;
            end;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcApplnRemainingAmount@4(Amt@1000 : Decimal) : Decimal;
    VAR
      ApplnRemainingAmount@1001 : Decimal;
    BEGIN
      ValidExchRate := true;
      if ApplnCurrencyCode = "Currency Code" then
        exit(Amt);

      if ApplnDate = 0D then
        ApplnDate := "Posting Date";
      ApplnRemainingAmount :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,Amt,ValidExchRate);
      exit(ApplnRemainingAmount);
    END;

    LOCAL PROCEDURE CalcApplnAmounttoApply@11(AmounttoApply@1000 : Decimal) : Decimal;
    VAR
      ApplnAmountToApply@1001 : Decimal;
    BEGIN
      ValidExchRate := true;

      if ApplnCurrencyCode = "Currency Code" then
        exit(AmounttoApply);

      if ApplnDate = 0D then
        ApplnDate := "Posting Date";
      ApplnAmountToApply :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,AmounttoApply,ValidExchRate);
      exit(ApplnAmountToApply);
    END;

    LOCAL PROCEDURE FindAmountRounding@6();
    BEGIN
      if ApplnCurrencyCode = '' then begin
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      end else
        if ApplnCurrencyCode <> Currency.Code then
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE CheckRounding@3();
    BEGIN
      ApplnRounding := 0;

      case CalcType of
        CalcType::PurchHeader:
          exit;
        CalcType::GenJnlLine:
          if (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) and
             (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
          then
            exit;
      end;

      if ApplnCurrencyCode = '' then
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      else begin
        if ApplnCurrencyCode <> "Currency Code" then
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      end;

      if (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) and DifferentCurrenciesInAppln then
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    [External]
    PROCEDURE GetEmplLedgEntry@5(VAR EmplLedgEntry@1000 : Record "Employee Ledger Entry");
    BEGIN
      EmplLedgEntry := Rec;
    END;

    LOCAL PROCEDURE FindApplyingEntry@12();
    BEGIN
      if CalcType = CalcType::Direct then begin
        EmplEntryApplID := USERID;
        if EmplEntryApplID = '' then
          EmplEntryApplID := '***';

        EmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open);
        EmplLedgEntry.SETRANGE("Employee No.","Employee No.");
        if AppliesToID = '' then
          EmplLedgEntry.SETRANGE("Applies-to ID",EmplEntryApplID)
        else
          EmplLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
        EmplLedgEntry.SETRANGE(Open,true);
        EmplLedgEntry.SETRANGE("Applying Entry",true);
        if EmplLedgEntry.FINDFIRST then begin
          EmplLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
          TempApplyingEmplLedgEntry := EmplLedgEntry;
          SETFILTER("Entry No.",'<>%1',EmplLedgEntry."Entry No.");
          ApplyingAmount := EmplLedgEntry."Remaining Amount";
          ApplnDate := EmplLedgEntry."Posting Date";
          ApplnCurrencyCode := EmplLedgEntry."Currency Code";
        end;
        CalcApplnAmount;
      end;
    END;

    LOCAL PROCEDURE AmounttoApplyOnAfterValidate@19038179();
    BEGIN
      if ApplnType <> ApplnType::"Applies-to Doc. No." then begin
        CalcApplnAmount;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      OK := true;
    END;

    LOCAL PROCEDURE PostDirectApplication@15(PreviewMode@1005 : Boolean);
    VAR
      EmplEntryApplyPostedEntries@1000 : Codeunit "EmplEntry-Apply Posted Entries";
      PostApplication@1002 : Page "Post Application";
      ApplicationDate@1001 : Date;
      NewApplicationDate@1003 : Date;
      NewDocumentNo@1004 : Code[20];
    BEGIN
      if CalcType = CalcType::Direct then begin
        if TempApplyingEmplLedgEntry."Entry No." <> 0 then begin
          Rec := TempApplyingEmplLedgEntry;
          ApplicationDate := EmplEntryApplyPostedEntries.GetApplicationDate(Rec);

          PostApplication.SetValues("Document No.",ApplicationDate);
          if ACTION::OK = PostApplication.RUNMODAL then begin
            PostApplication.GetValues(NewDocumentNo,NewApplicationDate);
            if NewApplicationDate < ApplicationDate then
              ERROR(ApplicationDateErr);
          end else
            ERROR(ApplicationProcessCanceledErr);

          if PreviewMode then
            EmplEntryApplyPostedEntries.PreviewApply(Rec,NewDocumentNo,NewApplicationDate)
          else
            EmplEntryApplyPostedEntries.Apply(Rec,NewDocumentNo,NewApplicationDate);

          if not PreviewMode then begin
            MESSAGE(ApplicationPostedMsg);
            PostingDone := true;
            CurrPage.CLOSE;
          end;
        end else
          ERROR(MustSelectEntryErr);
      end else
        ERROR(PostingInWrongContextErr);
    END;

    LOCAL PROCEDURE CheckActionPerformed@1011() : Boolean;
    BEGIN
      if ActionPerformed then
        exit(false);
      if (not (CalcType = CalcType::Direct) and not OK and not PostingDone) or
         (ApplnType = ApplnType::"Applies-to Doc. No.")
      then
        exit(false);
      exit(CalcType = CalcType::Direct);
    END;

    [External]
    PROCEDURE SetAppliesToID@1031(AppliesToID2@1043 : Code[50]);
    BEGIN
      AppliesToID := AppliesToID2;
    END;

    LOCAL PROCEDURE HandlChosenEntries@8(Type@1000 : 'Direct,GenJnlLine';CurrentAmount@1001 : Decimal);
    VAR
      TempAppliedEmplLedgEntry@1004 : TEMPORARY Record "Employee Ledger Entry";
      CorrectionAmount@1009 : Decimal;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      CorrectionAmount := 0;
      if AppliedEmplLedgEntry.FINDSET(false,false) then begin
        repeat
          TempAppliedEmplLedgEntry := AppliedEmplLedgEntry;
          TempAppliedEmplLedgEntry.INSERT;
        until AppliedEmplLedgEntry.NEXT = 0;
      end else
        exit;

      FromZeroGenJnl := (CurrentAmount = 0) and (Type = Type::GenJnlLine);

      repeat
        if not FromZeroGenJnl then
          TempAppliedEmplLedgEntry.SETRANGE(Positive,CurrentAmount < 0);
        if TempAppliedEmplLedgEntry.FINDFIRST then begin
          if ((CurrentAmount + TempAppliedEmplLedgEntry."Amount to Apply") * CurrentAmount) >= 0 then
            AppliedAmount := AppliedAmount + CorrectionAmount;
          CurrentAmount := CurrentAmount + TempAppliedEmplLedgEntry."Amount to Apply";
        end else begin
          TempAppliedEmplLedgEntry.SETRANGE(Positive);
          TempAppliedEmplLedgEntry.FINDFIRST;
        end;

        AppliedAmount := AppliedAmount + TempAppliedEmplLedgEntry."Amount to Apply";

        TempAppliedEmplLedgEntry.DELETE;
        TempAppliedEmplLedgEntry.SETRANGE(Positive);

      until not TempAppliedEmplLedgEntry.FINDFIRST;
      CheckRounding;
    END;

    BEGIN
    END.
  }
}

