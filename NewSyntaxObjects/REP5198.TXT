OBJECT Report 5198 Add Contacts
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Add Contacts;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  ItemFilters := "Value Entry".HASFILTER;

                  SegCriteriaManagement.InsertCriteriaAction(
                    "Segment Header".GETFILTER("No."),REPORT::"Add Contacts",
                    AllowExistingContact,ExpandCompanies,AllowCoRepdByContPerson,IgnoreExclusion,false);
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::Contact,
                    Contact.GETFILTERS,Contact.GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Profile Answer",
                    "Contact Profile Answer".GETFILTERS,"Contact Profile Answer".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Mailing Group",
                    "Contact Mailing Group".GETFILTERS,"Contact Mailing Group".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Interaction Log Entry",
                    "Interaction Log Entry".GETFILTERS,"Interaction Log Entry".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Job Responsibility","Contact Job Responsibility".GETFILTERS,
                    "Contact Job Responsibility".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Industry Group",
                    "Contact Industry Group".GETFILTERS,"Contact Industry Group".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Business Relation",
                    "Contact Business Relation".GETFILTERS,"Contact Business Relation".GETVIEW(false));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Value Entry",
                    "Value Entry".GETFILTERS,"Value Entry".GETVIEW(false));
                END;

    OnPostReport=BEGIN
                   if ExpandCompanies then
                     AddPeople;
                   if not AllowCoRepdByContPerson then
                     DeleteCompanies;

                   UpdateSegLines;
                 END;

  }
  DATASET
  {
    { 7133;    ;DataItem;Segment Header      ;
               DataItemTable="Segment Header";
               DataItemTableView=SORTING("No.") }

    { 6698;    ;DataItem;Contact             ;
               DataItemTable=Contact;
               DataItemTableView=SORTING("No.");
               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  if RecordNo = 1 then begin
                                    Window.OPEN(Text000);
                                    NoOfRecords := COUNT;
                                    OldTime := TIME;
                                  end;
                                  NewTime := TIME;
                                  if (NewTime - OldTime > 100) or (NewTime < OldTime) then begin
                                    NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                    if NewProgress <> OldProgress then begin
                                      Window.UPDATE(1,NewProgress * 100);
                                      OldProgress := NewProgress;
                                    end;
                                    OldTime := TIME;
                                  end;

                                  ContactOK := true;
                                END;

               ReqFilterFields="No.","Search Name",Type,"Salesperson Code","Post Code","Country/Region Code","Territory Code" }

    { 3762;1   ;DataItem;Contact Profile Answer;
               DataItemTable="Contact Profile Answer";
               DataItemTableView=SORTING("Contact No.","Profile Questionnaire Code","Line No.");
               OnPreDataItem=BEGIN
                               if ContactOK and (GETFILTERS <> '') then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := true;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields="Profile Questionnaire Code","Line No.";
               DataItemLink="Contact No."=FIELD("No.") }

    { 6043;1   ;DataItem;Contact Mailing Group;
               DataItemTable="Contact Mailing Group";
               DataItemTableView=SORTING("Contact No.","Mailing Group Code");
               OnPreDataItem=BEGIN
                               if ContactOK and (GETFILTERS <> '') then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := true;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields="Mailing Group Code";
               DataItemLink="Contact No."=FIELD("No.") }

    { 3056;1   ;DataItem;Interaction Log Entry;
               DataItemTable="Interaction Log Entry";
               DataItemTableView=SORTING("Contact Company No.","Contact No.",Date);
               OnPreDataItem=BEGIN
                               if ContactOK and (GETFILTERS <> '') then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := true;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Date,"Segment No.","Campaign No.",Evaluation,"Interaction Template Code","Salesperson Code";
               DataItemLink="Contact Company No."=FIELD("Company No."),"Contact No."=FIELD("No.") }

    { 6030;1   ;DataItem;Contact Job Responsibility;
               DataItemTable="Contact Job Responsibility";
               DataItemTableView=SORTING("Contact No.","Job Responsibility Code");
               OnPreDataItem=BEGIN
                               if ContactOK and (GETFILTERS <> '') then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := true;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields="Job Responsibility Code";
               DataItemLink="Contact No."=FIELD("No.") }

    { 4008;1   ;DataItem;Contact Industry Group;
               DataItemTable="Contact Industry Group";
               DataItemTableView=SORTING("Contact No.","Industry Group Code");
               OnPreDataItem=BEGIN
                               if ContactOK and (GETFILTERS <> '') then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := true;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields="Industry Group Code";
               DataItemLink="Contact No."=FIELD("Company No.") }

    { 8768;1   ;DataItem;Contact Business Relation;
               DataItemTable="Contact Business Relation";
               DataItemTableView=SORTING("Contact No.","Business Relation Code");
               OnPreDataItem=BEGIN
                               if ContactOK and ((GETFILTERS <> '') or ItemFilters) then
                                 ContactOK := false
                               else
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  SkipItemLedgerEntry := false;
                                  if not ItemFilters then begin
                                    ContactOK := true;
                                    SkipItemLedgerEntry := true;
                                    CurrReport.BREAK;
                                  end;
                                END;

               ReqFilterFields="Business Relation Code";
               DataItemLink="Contact No."=FIELD("Company No.") }

    { 8894;2   ;DataItem;Value Entry         ;
               DataItemTable="Value Entry";
               DataItemTableView=SORTING("Source Type","Source No.","Item No.","Posting Date");
               OnPreDataItem=BEGIN
                               if SkipItemLedgerEntry then
                                 CurrReport.BREAK;

                               case "Contact Business Relation"."Link to Table" of
                                 "Contact Business Relation"."Link to Table"::Customer:
                                   begin
                                     SETRANGE("Source Type","Source Type"::Customer);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   end;
                                 "Contact Business Relation"."Link to Table"::Vendor:
                                   begin
                                     SETRANGE("Source Type","Source Type"::Vendor);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   end
                                 else
                                   CurrReport.BREAK;
                               end;
                             END;

               OnAfterGetRecord=BEGIN
                                  if Contact.Type = Contact.Type::Person then
                                    ContactOK := FindContInPostDocuments(Contact."No.","Value Entry")
                                  else
                                    ContactOK := true;

                                  if ContactOK then
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields="Item No.","Variant Code","Posting Date","Inventory Posting Group" }

    { 5444;1   ;DataItem;Integer             ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number) WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  if ContactOK then
                                    InsertContact(Contact);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=Allow Existing Contacts;
                  CaptionML=ENU=Allow Existing Contacts;
                  ToolTipML=ENU=Specifies if existing contacts are included in the segment.;
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=AllowExistingContact }

      { 1   ;2   ;Field     ;
                  Name=Expand Companies;
                  CaptionML=ENU=Expand Companies;
                  ToolTipML=ENU=Specifies if you want the segment to include all person contacts who are working for the company that you want to add to the segment.;
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=ExpandCompanies }

      { 5   ;2   ;Field     ;
                  Name=Allow Related Companies;
                  CaptionML=ENU=Allow Related Companies;
                  ToolTipML=ENU=Specifies if companies represented by person contacts are included in the segment.;
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=AllowCoRepdByContPerson;
                  Importance=Additional;
                  MultiLine=true }

      { 7   ;2   ;Field     ;
                  Name=Ignore Exclusion;
                  CaptionML=ENU=Ignore Exclusion;
                  ToolTipML=ENU=Specifies if contacts are excluded for which the Exclude from Segment field has been selected on the contact card.;
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=IgnoreExclusion;
                  Importance=Additional }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Inserting contacts @1@@@@@@@@@@@@@';
      TempCont@1001 : TEMPORARY Record Contact;
      TempCont2@1002 : TEMPORARY Record Contact;
      Cont@1003 : Record Contact;
      SegLine@1004 : Record "Segment Line";
      SegmentHistoryMgt@1005 : Codeunit SegHistoryManagement;
      SegCriteriaManagement@1006 : Codeunit SegCriteriaManagement;
      Window@1015 : Dialog;
      NextLineNo@1007 : Integer;
      ItemFilters@1008 : Boolean;
      ContactOK@1009 : Boolean;
      AllowExistingContact@1010 : Boolean;
      ExpandCompanies@1011 : Boolean;
      AllowCoRepdByContPerson@1012 : Boolean;
      IgnoreExclusion@1013 : Boolean;
      SkipItemLedgerEntry@1014 : Boolean;
      NoOfRecords@1016 : Integer;
      RecordNo@1017 : Integer;
      OldTime@1018 : Time;
      NewTime@1019 : Time;
      OldProgress@1020 : Integer;
      NewProgress@1021 : Integer;

    PROCEDURE SetOptions@4(OptionAllowExistingContact@1000 : Boolean;OptionExpandCompanies@1001 : Boolean;OptionAllowCoRepdByContPerson@1002 : Boolean;OptionIgnoreExclusion@1003 : Boolean);
    BEGIN
      AllowExistingContact := OptionAllowExistingContact;
      ExpandCompanies := OptionExpandCompanies;
      AllowCoRepdByContPerson := OptionAllowCoRepdByContPerson;
      IgnoreExclusion := OptionIgnoreExclusion;
    END;

    LOCAL PROCEDURE InsertContact@9(VAR CheckedCont@1000 : Record Contact);
    BEGIN
      TempCont := CheckedCont;
      if TempCont.INSERT then;
    END;

    LOCAL PROCEDURE AddPeople@2();
    BEGIN
      TempCont.RESET;
      if TempCont.FIND('-') then
        repeat
          if TempCont."Company No." <> '' then begin
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.",TempCont."Company No.");
            if Cont.FIND('-') then
              repeat
                TempCont2 := Cont;
                if TempCont2.INSERT then;
              until Cont.NEXT = 0
          end else begin
            TempCont2 := TempCont;
            TempCont2.INSERT;
          end;
        until TempCont.NEXT = 0;

      TempCont.DELETEALL;
      if TempCont2.FIND('-') then
        repeat
          TempCont := TempCont2;
          TempCont.INSERT;
        until TempCont2.NEXT = 0;
      TempCont2.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteCompanies@3();
    BEGIN
      TempCont.RESET;
      TempCont.SETCURRENTKEY("Company No.");
      TempCont.SETRANGE(Type,TempCont.Type::Company);
      if TempCont.FIND('-') then
        repeat
          TempCont.SETRANGE("Company No.",TempCont."Company No.");
          TempCont.SETRANGE(Type,TempCont.Type::Person);
          if TempCont.COUNT > 0 then
            TempCont.DELETE;
          TempCont.SETRANGE("Company No.");
          TempCont.SETRANGE(Type,TempCont.Type::Company);
        until TempCont.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSegLines@1();
    BEGIN
      SegLine.SETRANGE("Segment No.","Segment Header"."No.");
      if SegLine.FINDLAST then
        NextLineNo := SegLine."Line No." + 10000
      else
        NextLineNo := 10000;

      TempCont.RESET;
      TempCont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      if not IgnoreExclusion then
        TempCont.SETRANGE("Exclude from Segment",false);
      if TempCont.FIND('-') then
        repeat
          ContactOK := true;
          if not AllowExistingContact then begin
            SegLine.SETCURRENTKEY("Contact No.","Segment No.");
            SegLine.SETRANGE("Contact No.",TempCont."No.");
            SegLine.SETRANGE("Segment No.","Segment Header"."No.");
            if SegLine.FINDFIRST then
              ContactOK := false;
          end;

          if ContactOK then begin
            SegLine.INIT;
            SegLine."Line No." := NextLineNo;
            SegLine.VALIDATE("Segment No.","Segment Header"."No.");
            SegLine.VALIDATE("Contact No.",TempCont."No.");
            SegLine.INSERT(true);
            SegmentHistoryMgt.InsertLine(
              SegLine."Segment No.",SegLine."Contact No.",SegLine."Line No.");
            NextLineNo := SegLine."Line No." + 10000;
          end;
        until TempCont.NEXT = 0;
    END;

    LOCAL PROCEDURE FindContInPostDocuments@5(ContactNo@1000 : Code[20];ValueEntry@1002 : Record "Value Entry") : Boolean;
    VAR
      SalesShptHeader@1005 : Record "Sales Shipment Header";
      SalesInvHeader@1004 : Record "Sales Invoice Header";
      ReturnRcptHeader@1003 : Record "Return Receipt Header";
      SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";
      PurchRcptHeader@1009 : Record "Purch. Rcpt. Header";
      PurchInvHeader@1008 : Record "Purch. Inv. Header";
      ReturnShptHeader@1007 : Record "Return Shipment Header";
      PurchCrMemoHeader@1006 : Record "Purch. Cr. Memo Hdr.";
    BEGIN
      with ValueEntry do
        case "Source Type" of
          "Source Type"::Customer:
            begin
              if SalesInvHeader.READPERMISSION then
                if SalesInvHeader.GET("Document No.") then
                  if (SalesInvHeader."Sell-to Contact No." = ContactNo) or
                     (SalesInvHeader."Bill-to Contact No." = ContactNo)
                  then
                    exit(true);
              if SalesShptHeader.READPERMISSION then
                if SalesShptHeader.GET("Document No.") then
                  if (SalesShptHeader."Sell-to Contact No." = ContactNo) or
                     (SalesShptHeader."Bill-to Contact No." = ContactNo)
                  then
                    exit(true);
              if SalesCrMemoHeader.READPERMISSION then
                if SalesCrMemoHeader.GET("Document No.") then
                  if (SalesCrMemoHeader."Sell-to Contact No." = ContactNo) or
                     (SalesCrMemoHeader."Bill-to Contact No." = ContactNo)
                  then
                    exit(true);
              if ReturnRcptHeader.READPERMISSION then
                if ReturnRcptHeader.GET("Document No.") then
                  if (ReturnRcptHeader."Sell-to Contact No." = ContactNo) or
                     (ReturnRcptHeader."Bill-to Contact No." = ContactNo)
                  then
                    exit(true);
            end;
          "Source Type"::Vendor:
            begin
              if PurchInvHeader.READPERMISSION then
                if PurchInvHeader.GET("Document No.") then
                  if (PurchInvHeader."Buy-from Contact No." = ContactNo) or
                     (PurchInvHeader."Pay-to Contact No." = ContactNo)
                  then
                    exit(true);
              if ReturnShptHeader.READPERMISSION then
                if ReturnShptHeader.GET("Document No.") then
                  if (ReturnShptHeader."Buy-from Contact No." = ContactNo) or
                     (ReturnShptHeader."Pay-to Contact No." = ContactNo)
                  then
                    exit(true);
              if PurchCrMemoHeader.READPERMISSION then
                if PurchCrMemoHeader.GET("Document No.") then
                  if (PurchCrMemoHeader."Buy-from Contact No." = ContactNo) or
                     (PurchCrMemoHeader."Pay-to Contact No." = ContactNo)
                  then
                    exit(true);
              if PurchRcptHeader.READPERMISSION then
                if PurchRcptHeader.GET("Document No.") then
                  if (PurchRcptHeader."Buy-from Contact No." = ContactNo) or
                     (PurchRcptHeader."Pay-to Contact no." = ContactNo)
                  then
                    exit(true);
            end;
        end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

