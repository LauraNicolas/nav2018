OBJECT Codeunit 99000778 OrderTrackingManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Line"=r,
                TableData "Purchase Line"=r,
                TableData "Order Tracking Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Counting records...';
      Text003@1001 : TextConst 'ENU=CURRENT LINE';
      Text004@1002 : TextConst 'ENU=CANCELLATION';
      Text005@1003 : TextConst 'ENU="NON-PEGGED "';
      Text006@1004 : TextConst 'ENU=SHIPMENT';
      Text007@1005 : TextConst 'ENU=RECEIPT';
      Text008@1006 : TextConst 'ENU=There are no order tracking entries for this line.';
      Text009@1007 : TextConst 'ENU=The order tracking entries for this line have a date conflict.';
      ItemLedgEntry@1008 : Record "Item Ledger Entry";
      ItemLedgEntry2@1009 : Record "Item Ledger Entry";
      ItemLedgEntry3@1010 : Record "Item Ledger Entry";
      SalesLine@1011 : Record "Sales Line";
      PurchLine@1012 : Record "Purchase Line";
      ItemJnlLine@1013 : Record "Item Journal Line";
      ReqLine@1014 : Record "Requisition Line";
      ProdOrderLine@1015 : Record "Prod. Order Line";
      ProdOrderComp@1016 : Record "Prod. Order Component";
      AsmHeader@1051 : Record "Assembly Header";
      AsmLine@1052 : Record "Assembly Line";
      PlanningComponent@1017 : Record "Planning Component";
      ServLine@1018 : Record "Service Line";
      JobPlanningLine@1049 : Record "Job Planning Line";
      ReservEntry@1019 : Record "Reservation Entry";
      TempReservEntryList@1020 : TEMPORARY Record "Reservation Entry";
      TrackingEntry@1022 : TEMPORARY Record "Order Tracking Entry";
      CreateReservEntry@1023 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1024 : Codeunit "Reservation Engine Mgt.";
      ReserveSalesLine@1025 : Codeunit "Sales Line-Reserve";
      ReserveReqLine@1026 : Codeunit "Req. Line-Reserve";
      ReservePurchLine@1027 : Codeunit "Purch. Line-Reserve";
      ReserveProdOrderLine@1029 : Codeunit "Prod. Order Line-Reserve";
      ReserveProdOrderComp@1030 : Codeunit "Prod. Order Comp.-Reserve";
      AsmHeaderReserve@1053 : Codeunit "Assembly Header-Reserve";
      AsmLineReserve@1054 : Codeunit "Assembly Line-Reserve";
      ReservePlanningComponent@1031 : Codeunit "Plng. Component-Reserve";
      ReserveItemLedgEntry@1032 : Codeunit "Item Ledger Entry-Reserve";
      ServLineReserve@1033 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1050 : Codeunit "Job Planning Line-Reserve";
      Window@1021 : Dialog;
      CaptionText@1034 : Text[80];
      Type@1036 : '" ",Sales,"Req. Line",Purchase,"Item Jnl","BOM Jnl","Item Ledg. Entry","Prod. Order Line","Prod. Order Comp.","Planning Line","Planning Comp.",Transfer,"Service Order"';
      ID@1037 : Code[20];
      BatchName@1038 : Code[20];
      Subtype@1039 : Integer;
      ProdOrderLineNo@1040 : Integer;
      RefNo@1041 : Integer;
      EntryNo@1042 : Integer;
      MultipleSummedUpQty@1048 : Decimal;
      SearchUp@1043 : Boolean;
      IsPlanning@1045 : Boolean;
      DateWarning@1046 : Boolean;
      SearchUpIsSet@1047 : Boolean;
      MultipleItemLedgEntries@1028 : Boolean;

    [External]
    PROCEDURE IsSearchUp@11() : Boolean;
    BEGIN
      exit(SearchUp);
    END;

    [External]
    PROCEDURE GetCaption@7() : Text[80];
    BEGIN
      exit(CaptionText);
    END;

    [External]
    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record "Sales Line");
    VAR
      SaleShptLine@1001 : Record "Sales Shipment Line";
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry."Source Type" := DATABASE::"Sales Line";

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);

      CaptionText := ReserveSalesLine.Caption(SalesLine);

      if CurrentSalesLine."Qty. Shipped (Base)" <> 0 then begin
        SaleShptLine.SETCURRENTKEY("Order No.","Order Line No.");
        SaleShptLine.SETRANGE("Order No.",CurrentSalesLine."Document No.");
        SaleShptLine.SETRANGE("Order Line No.",CurrentSalesLine."Line No.");
        if SaleShptLine.FIND('-') then
          repeat
            if ItemLedgEntry2.GET(SaleShptLine."Item Shpt. Entry No.") then
              ItemLedgEntry2.MARK(true);
          until SaleShptLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record "Requisition Line");
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);

      IsPlanning := ReqLine."Planning Line Origin" <> ReqLine."Planning Line Origin"::" ";
    END;

    [External]
    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record "Purchase Line");
    VAR
      PurchRcptLine@1001 : Record "Purch. Rcpt. Line";
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);

      if CurrentPurchLine."Qty. Received (Base)" <> 0 then begin
        PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
        PurchRcptLine.SETRANGE("Order No.",CurrentPurchLine."Document No.");
        PurchRcptLine.SETRANGE("Order Line No.",CurrentPurchLine."Line No.");
        if PurchRcptLine.FIND('-') then
          repeat
            if ItemLedgEntry2.GET(PurchRcptLine."Item Rcpt. Entry No.") then
              ItemLedgEntry2.MARK(true);
          until PurchRcptLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record "Prod. Order Line");
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);

      if CurrentProdOrderLine."Finished Quantity" <> 0 then begin
        ItemLedgEntry2.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        ItemLedgEntry2.SETRANGE("Order Type",ItemLedgEntry2."Order Type"::Production);
        ItemLedgEntry2.SETRANGE("Order No.",CurrentProdOrderLine."Prod. Order No.");
        ItemLedgEntry2.SETRANGE("Order Line No.",CurrentProdOrderLine."Line No.");
        ItemLedgEntry2.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
        ItemLedgEntry2.SETRANGE("Item No.",CurrentProdOrderLine."Item No.");

        if ItemLedgEntry2.FIND('-') then
          repeat
            ItemLedgEntry2.MARK(true);
          until ItemLedgEntry2.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetProdOrderComp@18(VAR CurrentProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);

      if (CurrentProdOrderComp."Remaining Quantity" <> CurrentProdOrderComp."Expected Quantity") and
         (CurrentProdOrderComp.Status in
          [CurrentProdOrderComp.Status::Released,CurrentProdOrderComp.Status::Finished])
      then begin
        ProdOrderLine.GET(
          CurrentProdOrderComp.Status,
          CurrentProdOrderComp."Prod. Order No.",
          CurrentProdOrderComp."Prod. Order Line No.");

        ItemLedgEntry2.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.");
        ItemLedgEntry2.SETRANGE("Order Type",ItemLedgEntry2."Order Type"::Production);
        ItemLedgEntry2.SETRANGE("Order No.",CurrentProdOrderComp."Prod. Order No.");
        ItemLedgEntry2.SETRANGE("Order Line No.",CurrentProdOrderComp."Prod. Order Line No.");
        ItemLedgEntry2.SETRANGE("Prod. Order Comp. Line No.",CurrentProdOrderComp."Line No.");
        ItemLedgEntry2.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
        ItemLedgEntry2.SETRANGE("Item No.",CurrentProdOrderComp."Item No.");
        if ItemLedgEntry2.FIND('-') then
          repeat
            ItemLedgEntry2.MARK(true);
          until ItemLedgEntry2.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetAsmHeader@21(VAR CurrentAsmHeader@1000 : Record "Assembly Header");
    BEGIN
      AsmHeader := CurrentAsmHeader;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      AsmHeaderReserve.FilterReservFor(ReservEntry,AsmHeader);
      CaptionText := AsmHeaderReserve.Caption(AsmHeader);

      if CurrentAsmHeader."Assembled Quantity (Base)" <> 0 then begin
        ItemLedgEntry2.SETCURRENTKEY("Order Type","Order No.");
        ItemLedgEntry2.SETRANGE("Order Type",ItemLedgEntry2."Order Type"::Assembly);
        ItemLedgEntry2.SETRANGE("Order No.",CurrentAsmHeader."No.");
        ItemLedgEntry2.SETRANGE("Order Line No.",0);
        if ItemLedgEntry2.FIND('-') then
          repeat
            ItemLedgEntry2.MARK(true);
          until ItemLedgEntry2.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetAsmLine@25(VAR CurrentAsmLine@1000 : Record "Assembly Line");
    BEGIN
      AsmLine := CurrentAsmLine;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      AsmLineReserve.FilterReservFor(ReservEntry,AsmLine);
      CaptionText := AsmLineReserve.Caption(AsmLine);

      if CurrentAsmLine."Consumed Quantity (Base)" <> 0 then begin
        ItemLedgEntry2.SETCURRENTKEY("Order Type","Order No.");
        ItemLedgEntry2.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Assembly);
        ItemLedgEntry2.SETRANGE("Order No.",CurrentAsmLine."No.");
        ItemLedgEntry2.SETRANGE("Order Line No.",CurrentAsmLine."Line No.");
        if ItemLedgEntry2.FIND('-') then
          repeat
            ItemLedgEntry2.MARK(true);
          until ItemLedgEntry2.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetPlanningComponent@6(VAR CurrentPlanningComponent@1000 : Record "Planning Component");
    BEGIN
      PlanningComponent := CurrentPlanningComponent;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
      IsPlanning := true;
    END;

    [External]
    PROCEDURE SetItemLedgEntry@10(VAR CurrentItemLedgEntry@1000 : Record "Item Ledger Entry");
    BEGIN
      ItemLedgEntry := CurrentItemLedgEntry;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveItemLedgEntry.FilterReservFor(ReservEntry,ItemLedgEntry);
      CaptionText := ReserveItemLedgEntry.Caption(ItemLedgEntry);
      ItemLedgEntry2 := ItemLedgEntry;
      ItemLedgEntry2.MARK(true);
    END;

    [External]
    PROCEDURE SetMultipleItemLedgEntries@16(VAR TempItemLedgEntry@1007 : TEMPORARY Record "Item Ledger Entry";SourceType@1006 : Integer;SourceSubtype@1005 : Integer;SourceID@1004 : Code[20];SourceBatchName@1003 : Code[10];SourceProdOrderLine@1002 : Integer;SourceRefNo@1000 : Integer);
    VAR
      ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
    BEGIN
      // Used from posted shipment and receipt with item tracking.

      ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,SourceType,SourceSubtype,SourceID,
        SourceBatchName,SourceProdOrderLine,SourceRefNo,0);

      TempItemLedgEntry.SETFILTER("Remaining Quantity",'<>%1',0);
      if not TempItemLedgEntry.FIND('-') then
        exit;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReserveItemLedgEntry.FilterReservFor(ReservEntry,TempItemLedgEntry);
      CaptionText := ReserveItemLedgEntry.Caption(TempItemLedgEntry);

      repeat
        ItemLedgEntry2 := TempItemLedgEntry;
        ItemLedgEntry2.MARK(true);
        MultipleSummedUpQty += TempItemLedgEntry."Remaining Quantity";
      until TempItemLedgEntry.NEXT = 0;

      MultipleItemLedgEntries := (TempItemLedgEntry.COUNT > 1);
    END;

    [External]
    PROCEDURE SetServLine@15(VAR CurrentServLine@1000 : Record "Service Line");
    VAR
      ServShptLine@1001 : Record "Service Shipment Line";
    BEGIN
      CurrentServLine.TESTFIELD(Type,CurrentServLine.Type::Item);
      ServLine := CurrentServLine;
      ReservEntry."Source Type" := DATABASE::"Service Line";

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ServLineReserve.FilterReservFor(ReservEntry,ServLine);

      CaptionText := ServLineReserve.Caption(ServLine);

      if CurrentServLine."Qty. Shipped (Base)" <> 0 then begin
        ServShptLine.SETCURRENTKEY("Order No.","Order Line No.");
        ServShptLine.SETRANGE("Order No.",CurrentServLine."Document No.");
        ServShptLine.SETRANGE("Order Line No.",CurrentServLine."Line No.");
        if ServShptLine.FIND('-') then
          repeat
            if ItemLedgEntry2.GET(ServShptLine."Item Shpt. Entry No.") then
              ItemLedgEntry2.MARK(true);
          until ServShptLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetJobPlanningLine@20(VAR CurrentJobPlanningLine@1000 : Record "Job Planning Line");
    VAR
      JobUsageLink@1002 : Record "Job Usage Link";
      JobLedgEntry@1001 : Record "Job Ledger Entry";
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry."Source Type" := DATABASE::"Job Planning Line";

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);

      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);

      if CurrentJobPlanningLine."Qty. Posted" <> 0 then begin
        JobUsageLink.SETRANGE("Job No.",CurrentJobPlanningLine."Job No.");
        JobUsageLink.SETRANGE("Job Task No.",CurrentJobPlanningLine."Job Task No.");
        JobUsageLink.SETRANGE("Line No.",CurrentJobPlanningLine."Line No.");
        if JobUsageLink.FIND('-') then
          repeat
            JobLedgEntry.GET(JobUsageLink."Entry No.");
            if ItemLedgEntry2.GET(JobLedgEntry."Ledger Entry No.") then
              ItemLedgEntry2.MARK(true);
          until JobUsageLink.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE TrackedQuantity@4() : Decimal;
    VAR
      FilterReservEntry@1000 : Record "Reservation Entry";
      QtyTracked1@1001 : Decimal;
      QtyTracked2@1002 : Decimal;
    BEGIN
      if MultipleItemLedgEntries then
        exit(MultipleSummedUpQty);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation,
        ReservEntry."Reservation Status"::Tracking);
      if ReservEntry.FIND('-') then
        repeat
          QtyTracked1 += ReservEntry."Quantity (Base)";
        until ReservEntry.NEXT = 0;
      if IsPlanning then
        if DerivePlanningFilter(ReservEntry,FilterReservEntry) then begin
          FilterReservEntry.SETRANGE("Reservation Status",FilterReservEntry."Reservation Status"::Reservation,
            FilterReservEntry."Reservation Status"::Tracking);
          if FilterReservEntry.FIND('-') then
            repeat
              QtyTracked2 += FilterReservEntry."Quantity (Base)";
            until FilterReservEntry.NEXT = 0;
          exit((QtyTracked1 + QtyTracked2) * CreateReservEntry.SignFactor(FilterReservEntry));
        end;
      exit(QtyTracked1 * CreateReservEntry.SignFactor(ReservEntry));
    END;

    [External]
    PROCEDURE FindRecord@9(Which@1000 : Text[250];VAR TrackingEntry2@1001 : Record "Order Tracking Entry") : Boolean;
    BEGIN
      TrackingEntry := TrackingEntry2;
      if not TrackingEntry.FIND(Which) then
        exit(false);
      TrackingEntry2 := TrackingEntry;
      exit(true);
    END;

    [External]
    PROCEDURE GetNextRecord@8(Steps@1001 : Integer;VAR TrackingEntry2@1002 : Record "Order Tracking Entry") CurrentSteps@1000 : Integer;
    BEGIN
      TrackingEntry := TrackingEntry2;
      CurrentSteps := TrackingEntry.NEXT(Steps);
      if CurrentSteps <> 0 then
        TrackingEntry2 := TrackingEntry;
      exit(CurrentSteps);
    END;

    [External]
    PROCEDURE FindRecords@2() TrackingExists@1000 : Boolean;
    BEGIN
      TempReservEntryList.DELETEALL;
      TrackingEntry.DELETEALL;
      EntryNo := 1;

      with TrackingEntry do begin
        Window.OPEN(Text000);
        INIT;
        "Entry No." := 0;
        DrillOrdersUp(ReservEntry,1);
        ItemLedgEntry2.SETCURRENTKEY("Entry No.");
        ItemLedgEntry2.MARKEDONLY(true);
        if ItemLedgEntry2.FIND('-') then
          repeat
            InsertItemLedgTrackEntry(1,ItemLedgEntry2,ItemLedgEntry2."Remaining Quantity",ItemLedgEntry2);
          until ItemLedgEntry2.NEXT = 0;
        TrackingExists := FIND('-');
        if not TrackingExists then
          MESSAGE(Text008);
        if DateWarning then
          MESSAGE(Text009);
        Window.CLOSE;
      end;
      exit(TrackingExists);
    END;

    LOCAL PROCEDURE DrillOrdersUp@5(VAR ReservEntry@1000 : Record "Reservation Entry";Level@1001 : Integer);
    VAR
      ReservEntry2@1002 : Record "Reservation Entry";
      ReservEntry3@1003 : Record "Reservation Entry";
      FilterReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if Level > 20 then
        exit;

      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation,
        ReservEntry."Reservation Status"::Tracking);

      if ReservEntry.FIND('-') then begin
        if Level = 1 then
          if not SearchUpIsSet then begin
            SearchUp := not ReservEntry.Positive;
            SearchUpIsSet := true;
          end;

        repeat
          ReservEntry3.GET(ReservEntry."Entry No.",not ReservEntry.Positive);
          InsertTrackingEntry(ReservEntry,ReservEntry3,Level);
          with ReservEntry3 do
            case "Source Type" of
              DATABASE::"Item Ledger Entry":
                begin
                  ItemLedgEntry3.GET("Source Ref. No.");
                  DrillItemLedgEntries(Level + 1,ItemLedgEntry3);
                end;
              DATABASE::"Prod. Order Component",
              DATABASE::"Planning Component":
                begin
                  FiltersForTrackingFromComponents(ReservEntry3,ReservEntry2);
                  DrillOrdersUp(ReservEntry2,Level + 1);
                  if DerivePlanningFilter(ReservEntry3,FilterReservEntry) then
                    DrillOrdersUp(FilterReservEntry,Level + 1);
                end;
              DATABASE::"Prod. Order Line",
              DATABASE::"Requisition Line":
                begin
                  FiltersForTrackingFromReqLine(ReservEntry3,ReservEntry2,SearchUp);
                  DrillOrdersUp(ReservEntry2,Level + 1);
                  if DerivePlanningFilter(ReservEntry3,FilterReservEntry) then
                    DrillOrdersUp(FilterReservEntry,Level + 1);
                end;
              DATABASE::"Transfer Line":
                begin
                  FiltersForTrackingFromTransfer(ReservEntry3,ReservEntry2,SearchUp);
                  DrillOrdersUp(ReservEntry2,Level + 1);
                  if DerivePlanningFilter(ReservEntry3,FilterReservEntry) then
                    DrillOrdersUp(FilterReservEntry,Level + 1);
                end;
            end;

        until ReservEntry.NEXT = 0;
      end;

      if Level = 1 then
        if DerivePlanningFilter(ReservEntry,FilterReservEntry) then begin
          if not SearchUpIsSet then begin
            SearchUp := not FilterReservEntry.Positive;
            SearchUpIsSet := true;
          end;
          DrillOrdersUp(FilterReservEntry,Level);
        end;
    END;

    LOCAL PROCEDURE FiltersForTrackingFromComponents@26(FromReservationEntry@1000 : Record "Reservation Entry";VAR ToReservationEntry@1001 : Record "Reservation Entry");
    BEGIN
      with FromReservationEntry do begin
        ToReservationEntry.RESET;
        if "Source Type" = DATABASE::"Prod. Order Component" then begin
          ToReservationEntry.SetSourceFilter(DATABASE::"Prod. Order Line","Source Subtype","Source ID",-1,true);
          ToReservationEntry.SetSourceFilter2("Source Batch Name","Source Prod. Order Line");
        end else begin
          ToReservationEntry.SetSourceFilter(DATABASE::"Requisition Line",0,"Source ID","Source Prod. Order Line",true);
          ToReservationEntry.SetSourceFilter2("Source Batch Name",0);
        end;
      end;
    END;

    LOCAL PROCEDURE FiltersForTrackingFromReqLine@27(FromReservationEntry@1000 : Record "Reservation Entry";VAR ToReservationEntry@1001 : Record "Reservation Entry";IsSearchUp@1002 : Boolean);
    VAR
      RequisitionLine@1003 : Record "Requisition Line";
    BEGIN
      with FromReservationEntry do begin
        ToReservationEntry.RESET;
        if "Source Type" = DATABASE::"Prod. Order Line" then begin
          ToReservationEntry.SetSourceFilter(DATABASE::"Prod. Order Component","Source Subtype","Source ID",-1,true);
          ToReservationEntry.SetSourceFilter2("Source Batch Name","Source Ref. No.");
        end else begin
          RequisitionLine.GET("Source ID","Source Batch Name","Source Ref. No.");
          if RequisitionLine."Replenishment System" = RequisitionLine."Replenishment System"::Transfer then begin
            if IsSearchUp then
              ToReservationEntry.SetSourceFilter(DATABASE::"Requisition Line",1,"Source ID","Source Ref. No.",true)
            else
              ToReservationEntry.SetSourceFilter(DATABASE::"Requisition Line",0,"Source ID","Source Ref. No.",true);
            ToReservationEntry.SetSourceFilter2("Source Batch Name",0);
          end else begin
            ToReservationEntry.SetSourceFilter(DATABASE::"Planning Component",0,"Source ID",-1,true);
            ToReservationEntry.SetSourceFilter2("Source Batch Name","Source Ref. No.");
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE FiltersForTrackingFromTransfer@28(FromReservationEntry@1000 : Record "Reservation Entry";VAR ToReservationEntry@1001 : Record "Reservation Entry";IsSearchUp@1002 : Boolean);
    BEGIN
      with FromReservationEntry do begin
        ToReservationEntry.RESET;
        if IsSearchUp then
          ToReservationEntry.SetSourceFilter("Source Type",0,"Source ID","Source Ref. No.",true)
        else
          ToReservationEntry.SetSourceFilter("Source Type",1,"Source ID","Source Ref. No.",true);
        ToReservationEntry.SETRANGE("Source Batch Name","Source Batch Name");
      end;
    END;

    LOCAL PROCEDURE DrillItemLedgEntries@12(Level@1000 : Integer;ItemLedgEntry4@1001 : Record "Item Ledger Entry");
    VAR
      ItemLedgEntry5@1002 : Record "Item Ledger Entry";
      ItemLedgEntry6@1003 : Record "Item Ledger Entry";
      ItemApplnEntry@1004 : Record "Item Application Entry";
      SignFactor@1005 : Integer;
    BEGIN
      if Level > 20 then
        exit;

      if ItemLedgEntry4.Positive then begin
        ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>0');
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.");
      end else begin
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.");
      end;
      if ItemApplnEntry.FIND('-') then
        repeat
          if ItemLedgEntry4.Positive then begin
            SignFactor := -1;
            ItemLedgEntry5.GET(ItemApplnEntry."Outbound Item Entry No.")
          end else begin
            SignFactor := 1;
            ItemLedgEntry5.GET(ItemApplnEntry."Inbound Item Entry No.");
          end;
          if SearchUp = ItemLedgEntry5.Positive then begin
            InsertItemLedgTrackEntry(Level,ItemLedgEntry5,ItemApplnEntry.Quantity * SignFactor,ItemLedgEntry4);
            if (ItemLedgEntry5."Order Type" = ItemLedgEntry5."Order Type"::Production) and
               (ItemLedgEntry5."Order No." <> '')
            then begin
              ItemLedgEntry6.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
              ItemLedgEntry6.SETRANGE("Source Type",ItemLedgEntry4."Source Type"::Item);
              if ItemLedgEntry5."Entry Type" = ItemLedgEntry5."Entry Type"::Consumption then
                ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Output)
              else
                ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Consumption);
              if not SearchUp then
                ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Source No.")
              else
                ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Item No.");
              ItemLedgEntry6.SETRANGE("Order Type",ItemLedgEntry6."Order Type"::Production);
              ItemLedgEntry6.SETRANGE("Order No.",ItemLedgEntry5."Order No.");
              if ItemLedgEntry6.FIND('-') then
                repeat
                  InsertItemLedgTrackEntry(Level + 1,ItemLedgEntry6,ItemLedgEntry6.Quantity,ItemLedgEntry4);
                  DrillItemLedgEntries(Level + 1,ItemLedgEntry6);
                until ItemLedgEntry6.NEXT = 0;
            end;
          end;
        until ItemApplnEntry.NEXT = 0;

      if (ItemLedgEntry4."Order Type" = ItemLedgEntry4."Order Type"::Production) and (ItemLedgEntry4."Order No." <> '') then begin
        ItemLedgEntry6.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        ItemLedgEntry6.SETRANGE("Source Type",ItemLedgEntry4."Source Type"::Item);
        if ItemLedgEntry5."Entry Type" = ItemLedgEntry5."Entry Type"::Consumption then
          ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Output)
        else
          ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Consumption);
        ItemLedgEntry6.SETRANGE("Order Type",ItemLedgEntry6."Order Type"::Production);
        ItemLedgEntry6.SETRANGE("Order No.",ItemLedgEntry5."Order No.");
        if not SearchUp then
          ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Source No.")
        else
          ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Item No.");
        if ItemLedgEntry6.FIND('-') then
          repeat
            if ItemLedgEntry4."Entry No." <> ItemLedgEntry6."Entry No." then begin
              InsertItemLedgTrackEntry(Level + 1,ItemLedgEntry6,ItemLedgEntry6.Quantity,ItemLedgEntry4);
              DrillItemLedgEntries(Level + 1,ItemLedgEntry6);
            end;
          until ItemLedgEntry6.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertTrackingEntry@3(VAR ReservEntry@1000 : Record "Reservation Entry";VAR ReservEntry2@1001 : Record "Reservation Entry";Level@1002 : Integer);
    BEGIN
      TempReservEntryList := ReservEntry;
      TempReservEntryList.Positive := false;
      if not TempReservEntryList.INSERT then
        exit;

      TrackingEntry.RESET;
      TrackingEntry.INIT;

      TrackingEntry.Level := Level;
      TrackingEntry."For Type" := ReservEntry."Source Type";
      TrackingEntry."For Subtype" := ReservEntry."Source Subtype";
      TrackingEntry."For ID" := ReservEntry."Source ID";
      TrackingEntry."For Batch Name" := ReservEntry."Source Batch Name";
      TrackingEntry."For Prod. Order Line" := ReservEntry."Source Prod. Order Line";
      TrackingEntry."For Ref. No." := ReservEntry."Source Ref. No.";

      TrackingEntry."From Type" := ReservEntry2."Source Type";
      TrackingEntry."From Subtype" := ReservEntry2."Source Subtype";
      TrackingEntry."From ID" := ReservEntry2."Source ID";
      TrackingEntry."From Batch Name" := ReservEntry2."Source Batch Name";
      TrackingEntry."From Prod. Order Line" := ReservEntry2."Source Prod. Order Line";
      TrackingEntry."From Ref. No." := ReservEntry2."Source Ref. No.";

      if ReservEntry."Expected Receipt Date" > ReservEntry."Shipment Date" then begin
        TrackingEntry.Warning := true;
        DateWarning := true;
      end;

      if TrackingEntryExists then begin
        TrackingEntry.Quantity += ReservEntry."Quantity (Base)";
        TrackingEntry.MODIFY;
        exit;
      end;

      TrackingEntry."Entry No." := EntryNo;
      TrackingEntry."Demanded by" :=
        ReservEngineMgt.CreateForText(ReservEntry);
      TrackingEntry."Supplied by" :=
        ReservEngineMgt.CreateFromText(ReservEntry);
      TrackingEntry."Item No." := ReservEntry."Item No.";
      TrackingEntry."Shipment Date" := ReservEntry."Shipment Date";
      TrackingEntry."Expected Receipt Date" := ReservEntry."Expected Receipt Date";
      if MultipleItemLedgEntries then
        TrackingEntry.Quantity := MultipleSummedUpQty
      else
        TrackingEntry.Quantity := ReservEntry."Quantity (Base)";

      if SearchUp then
        TrackingEntry.Name := TrackingEntry."Supplied by"
      else
        TrackingEntry.Name := TrackingEntry."Demanded by";

      if Level = 1 then
        if SearchUp then
          TrackingEntry."Demanded by" := Text003
        else
          TrackingEntry."Supplied by" := Text003;

      Type := TrackingEntry."For Type";
      Subtype := TrackingEntry."For Subtype";
      ID := TrackingEntry."For ID";
      BatchName := TrackingEntry."For Batch Name";
      ProdOrderLineNo := TrackingEntry."For Prod. Order Line";
      RefNo := TrackingEntry."For Ref. No.";

      case Type of
        DATABASE::"Sales Line":
          if SalesLine.GET(Subtype,ID,RefNo) then begin
            TrackingEntry."Starting Date" := SalesLine."Shipment Date";
            TrackingEntry."Ending Date" := SalesLine."Shipment Date";
          end;
        DATABASE::"Purchase Line":
          if PurchLine.GET(Subtype,ID,RefNo) then begin
            TrackingEntry."Starting Date" := PurchLine."Expected Receipt Date";
            TrackingEntry."Ending Date" := PurchLine."Expected Receipt Date";
          end;
        DATABASE::"Requisition Line":
          if ReqLine.GET(ID,BatchName,RefNo) then begin
            TrackingEntry."Starting Date" := ReqLine."Due Date";
            TrackingEntry."Ending Date" := ReqLine."Due Date";
          end;
        DATABASE::"Item Journal Line":
          if ItemJnlLine.GET(ID,BatchName,RefNo) then begin
            TrackingEntry."Starting Date" := ItemJnlLine."Posting Date";
            TrackingEntry."Ending Date" := ItemJnlLine."Posting Date";
          end;
        DATABASE::"Item Ledger Entry":
          if ItemLedgEntry.GET(RefNo) then begin
            TrackingEntry."Starting Date" := WORKDATE;
            TrackingEntry."Ending Date" := WORKDATE;
          end;
        DATABASE::"Prod. Order Line":
          if ProdOrderLine.GET(Subtype,ID,ProdOrderLineNo) then begin
            TrackingEntry."Starting Date" := ProdOrderLine."Starting Date";
            TrackingEntry."Ending Date" := ProdOrderLine."Ending Date";
          end;
        DATABASE::"Prod. Order Component":
          if ProdOrderComp.GET(Subtype,ID,ProdOrderLineNo,RefNo) then begin
            TrackingEntry."Starting Date" := ProdOrderComp."Due Date";
            if ProdOrderLine.GET(Subtype,ID,ProdOrderLineNo) then
              TrackingEntry."Ending Date" := ProdOrderLine."Ending Date";
          end;
        DATABASE::"Assembly Header":
          if AsmHeader.GET(Subtype,ID) then begin
            TrackingEntry."Starting Date" := AsmHeader."Due Date";
            TrackingEntry."Ending Date" := AsmHeader."Due Date";
          end;
        DATABASE::"Assembly Line":
          if AsmLine.GET(Subtype,ID,RefNo) then begin
            TrackingEntry."Starting Date" := AsmLine."Due Date";
            TrackingEntry."Ending Date" := AsmLine."Due Date";
          end;
        DATABASE::"Planning Component":
          if PlanningComponent.GET(ID,BatchName,ProdOrderLineNo,RefNo) then begin
            TrackingEntry."Starting Date" := PlanningComponent."Due Date";
            if ReqLine.GET(ID,BatchName,ProdOrderLineNo) then
              TrackingEntry."Ending Date" := ReqLine."Ending Date";
          end;
        DATABASE::"Service Line":
          if ServLine.GET(Subtype,ID,RefNo) then begin
            TrackingEntry."Starting Date" := ServLine."Needed by Date";
            TrackingEntry."Ending Date" := ServLine."Needed by Date";
          end;
        DATABASE::"Job Planning Line":
          begin
            JobPlanningLine.SETRANGE("Job No.",ID);
            JobPlanningLine.SETRANGE(Status,Subtype);
            JobPlanningLine.SETRANGE("Job Contract Entry No.",RefNo);
            if JobPlanningLine.FINDFIRST then begin
              TrackingEntry."Starting Date" := JobPlanningLine."Planning Date";
              TrackingEntry."Ending Date" := JobPlanningLine."Planning Date";
            end;
          end;
      end;

      if TrackingEntry."From Type" = DATABASE::"Requisition Line" then
        if ReqLine.GET(TrackingEntry."From ID",TrackingEntry."From Batch Name",
             TrackingEntry."From Ref. No.")
        then
          if ReqLine."Action Message" = ReqLine."Action Message"::Cancel then
            TrackingEntry.Name := Text004;

      TrackingEntry.INSERT;
      EntryNo := EntryNo + 1;
    END;

    LOCAL PROCEDURE InsertItemLedgTrackEntry@14(Level@1000 : Integer;ToItemLedgEntry@1001 : Record "Item Ledger Entry";TrackQuantity@1002 : Decimal;FromItemLedgEntry@1003 : Record "Item Ledger Entry");
    VAR
      PeggingText@1004 : Text[30];
    BEGIN
      if TrackQuantity = 0 then
        exit;
      TrackingEntry.RESET;
      TrackingEntry.INIT;
      TrackingEntry."Entry No." := EntryNo;
      if SearchUp then begin
        TrackingEntry."Demanded by" :=
          STRSUBSTNO(
            '%1 %2',FromItemLedgEntry.TABLECAPTION,FromItemLedgEntry."Entry No.");
        TrackingEntry."Supplied by" :=
          STRSUBSTNO(
            '%1 %2',ToItemLedgEntry.TABLECAPTION,ToItemLedgEntry."Entry No.");
      end else begin
        TrackingEntry."Supplied by" :=
          STRSUBSTNO(
            '%1 %2',FromItemLedgEntry.TABLECAPTION,FromItemLedgEntry."Entry No.");
        TrackingEntry."Demanded by" :=
          STRSUBSTNO(
            '%1 %2',ToItemLedgEntry.TABLECAPTION,ToItemLedgEntry."Entry No.");
      end;

      if Level = 1 then begin
        if ToItemLedgEntry."Entry No." = FromItemLedgEntry."Entry No." then
          PeggingText := Text005
        else
          PeggingText := '';

        if SearchUp then
          TrackingEntry."Demanded by" := PeggingText + Text006
        else
          TrackingEntry."Supplied by" := PeggingText + Text007;
      end;

      TrackingEntry."Item No." := ToItemLedgEntry."Item No.";
      TrackingEntry.Quantity := TrackQuantity;
      TrackingEntry.Level := Level;

      TrackingEntry."For Type" := DATABASE::"Item Ledger Entry";
      TrackingEntry."For Ref. No." := FromItemLedgEntry."Entry No.";
      TrackingEntry."From Type" := DATABASE::"Item Ledger Entry";
      TrackingEntry."From Ref. No." := ToItemLedgEntry."Entry No.";

      if SearchUp then
        TrackingEntry.Name := TrackingEntry."Supplied by"
      else
        TrackingEntry.Name := TrackingEntry."Demanded by";

      Type := TrackingEntry."For Type";
      RefNo := ToItemLedgEntry."Entry No.";

      TrackingEntry."Starting Date" := 0D;
      TrackingEntry."Ending Date" := 0D;

      TrackingEntry.INSERT;
      EntryNo := EntryNo + 1;
    END;

    LOCAL PROCEDURE TrackingEntryExists@1() : Boolean;
    VAR
      TrackingEntry2@1000 : Record "Order Tracking Entry";
    BEGIN
      TrackingEntry2 := TrackingEntry;

      TrackingEntry.SETRANGE(Level,TrackingEntry.Level);
      TrackingEntry.SETRANGE("For Type",TrackingEntry."For Type");
      TrackingEntry.SETRANGE("For Subtype",TrackingEntry."For Subtype");
      TrackingEntry.SETRANGE("For ID",TrackingEntry."For ID");
      TrackingEntry.SETRANGE("For Batch Name",TrackingEntry."For Batch Name");
      TrackingEntry.SETRANGE("For Prod. Order Line",TrackingEntry."For Prod. Order Line");
      TrackingEntry.SETRANGE("For Ref. No.",TrackingEntry."For Ref. No.");

      TrackingEntry.SETRANGE("From Type",TrackingEntry."From Type");
      TrackingEntry.SETRANGE("From Subtype",TrackingEntry."From Subtype");
      TrackingEntry.SETRANGE("From ID",TrackingEntry."From ID");
      TrackingEntry.SETRANGE("From Batch Name",TrackingEntry."From Batch Name");
      TrackingEntry.SETRANGE("From Prod. Order Line",TrackingEntry."From Prod. Order Line");
      TrackingEntry.SETRANGE("From Ref. No.",TrackingEntry."From Ref. No.");

      if TrackingEntry.FIND('-') then begin
        TrackingEntry.RESET;
        exit(true);
      end;
      TrackingEntry.RESET;
      TrackingEntry := TrackingEntry2;
      exit(false);
    END;

    [External]
    PROCEDURE DerivePlanningFilter@13(VAR FromReservEntry@1001 : Record "Reservation Entry";VAR ToReservEntry@1002 : Record "Reservation Entry") OK@1000 : Boolean;
    VAR
      FilterReqLine@1003 : Record "Requisition Line";
      FilterPlanningComponent@1004 : Record "Planning Component";
    BEGIN
      with ToReservEntry do begin
        OK := false;
        SETRANGE("Source Type",DATABASE::"Planning Component");
        if FromReservEntry.GETFILTER("Source Type") = GETFILTER("Source Type") then begin
          EVALUATE(FilterPlanningComponent."Line No.",FromReservEntry.GETFILTER("Source Ref. No."));
          EVALUATE(FilterPlanningComponent."Worksheet Line No.",FromReservEntry.GETFILTER("Source Prod. Order Line"));

          if not FilterPlanningComponent.GET(
               FromReservEntry.GETRANGEMIN("Source ID"),FromReservEntry.GETRANGEMIN("Source Batch Name"),
               FilterPlanningComponent."Worksheet Line No.",FilterPlanningComponent."Line No.")
          then
            exit(false);

          case FilterPlanningComponent."Ref. Order Type" of
            FilterPlanningComponent."Ref. Order Type"::"Prod. Order":
              SetSourceFilter(
                DATABASE::"Prod. Order Component",FilterPlanningComponent."Ref. Order Status",
                FilterPlanningComponent."Ref. Order No.",FilterPlanningComponent."Line No.",true);
            FilterPlanningComponent."Ref. Order Type"::Assembly:
              SetSourceFilter(
                DATABASE::"Assembly Line",FilterPlanningComponent."Ref. Order Status",
                FilterPlanningComponent."Ref. Order No.",FilterPlanningComponent."Line No.",true);
          end;
          SETRANGE("Source Prod. Order Line",FilterPlanningComponent."Ref. Order Line No.");
          OK := FIND('-');
        end else begin
          SETRANGE("Source Type",DATABASE::"Requisition Line");
          if FromReservEntry.GETFILTER("Source Type") = GETFILTER("Source Type") then begin
            EVALUATE(FilterReqLine."Line No.",FromReservEntry.GETFILTER("Source Ref. No."));
            if not FilterReqLine.GET(FromReservEntry.GETRANGEMIN("Source ID"),
                 FromReservEntry.GETRANGEMIN("Source Batch Name"),FilterReqLine."Line No.")
            then
              exit(false);
            if FilterReqLine."Action Message" > FilterReqLine."Action Message"::New then
              case FilterReqLine."Ref. Order Type" of
                FilterReqLine."Ref. Order Type"::Purchase:
                  begin
                    SetSourceFilter(DATABASE::"Purchase Line",1,FilterReqLine."Ref. Order No.",FilterReqLine."Ref. Line No.",true);
                    OK := FIND('-');
                  end;
                FilterReqLine."Ref. Order Type"::"Prod. Order":
                  begin
                    SetSourceFilter(
                      DATABASE::"Prod. Order Line",FilterReqLine."Ref. Order Status",FilterReqLine."Ref. Order No.",-1,true);
                    SETRANGE("Source Prod. Order Line",FilterReqLine."Ref. Line No.");
                    OK := FIND('-');
                  end;
                FilterReqLine."Ref. Order Type"::Transfer:
                  begin
                    SetSourceFilter(DATABASE::"Transfer Line",1,FilterReqLine."Ref. Order No.",FilterReqLine."Ref. Line No.",true);
                    SETRANGE("Source Prod. Order Line",0);
                    OK := FIND('-');
                  end;
              end;
          end;
        end;
      end;
    END;

    BEGIN
    END.
  }
}

