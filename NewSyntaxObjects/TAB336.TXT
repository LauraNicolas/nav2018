OBJECT Table 336 Tracking Specification
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Quantity Handled (Base)",0);
               TESTFIELD("Quantity Invoiced (Base)",0);
             END;

    CaptionML=ENU=Tracking Specification;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                if ("Quantity (Base)" * "Quantity Handled (Base)" < 0) or
                                                                   (ABS("Quantity (Base)") < ABS("Quantity Handled (Base)"))
                                                                then
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Quantity Handled (Base)")));

                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                InitQtyToShip;
                                                                CheckSerialNoQty;

                                                                if not QuantityToInvoiceIsSufficient then
                                                                  VALIDATE("Appl.-to Item Entry",0);
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 8   ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 10  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 11  ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10" }
    { 12  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID }
    { 13  ;   ;Source Batch Name   ;Code10        ;CaptionML=ENU=Source Batch Name }
    { 14  ;   ;Source Prod. Order Line;Integer    ;CaptionML=ENU=Source Prod. Order Line }
    { 15  ;   ;Source Ref. No.     ;Integer       ;CaptionML=ENU=Source Ref. No. }
    { 16  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Item Ledger Entry No. }
    { 17  ;   ;Transfer Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Transfer Item Entry No. }
    { 24  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                if "Serial No." <> xRec."Serial No." then begin
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  TESTFIELD("Appl.-from Item Entry",0);
                                                                  if IsReclass then
                                                                    "New Serial No." := "Serial No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  if not SkipSerialNoQtyValidation then
                                                                    CheckSerialNoQty;
                                                                  InitExpirationDate;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Serial No. }
    { 28  ;   ;Positive            ;Boolean       ;CaptionML=ENU=Positive }
    { 29  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                                ItemJnlLine@1001 : Record "Item Journal Line";
                                                              BEGIN
                                                                if "Appl.-to Item Entry" = 0 then
                                                                  exit;

                                                                if not TrackingExists then begin
                                                                  TESTFIELD("Serial No.");
                                                                  TESTFIELD("Lot No.");
                                                                end;

                                                                ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                ItemLedgEntry.TESTFIELD("Item No.","Item No.");
                                                                ItemLedgEntry.TESTFIELD(Positive,true);
                                                                ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
                                                                ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
                                                                ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
                                                                if "Source Type" = DATABASE::"Item Journal Line" then begin
                                                                  ItemJnlLine.SETRANGE("Journal Template Name","Source ID");
                                                                  ItemJnlLine.SETRANGE("Journal Batch Name","Source Batch Name");
                                                                  ItemJnlLine.SETRANGE("Line No.","Source Ref. No.");
                                                                  ItemJnlLine.SETRANGE("Entry Type","Source Subtype");

                                                                  if ItemJnlLine.FINDFIRST then
                                                                    if ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Output then begin
                                                                      ItemLedgEntry.TESTFIELD("Order Type",ItemJnlLine."Order Type"::Production);
                                                                      ItemLedgEntry.TESTFIELD("Order No.",ItemJnlLine."Order No.");
                                                                      ItemLedgEntry.TESTFIELD("Order Line No.",ItemJnlLine."Order Line No.");
                                                                      ItemLedgEntry.TESTFIELD("Entry Type",ItemJnlLine."Entry Type");
                                                                    end;
                                                                end;
                                                                if ABS("Quantity (Base)") > ABS(ItemLedgEntry."Remaining Quantity") then
                                                                  ERROR(RemainingQtyErr,ItemLedgEntry.FIELDCAPTION("Remaining Quantity"),ItemLedgEntry."Entry No.",FIELDCAPTION("Quantity (Base)"));
                                                              END;

                                                   OnLookup=VAR
                                                              ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                            BEGIN
                                                              ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code");
                                                              ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                              ItemLedgEntry.SETRANGE(Positive,true);
                                                              ItemLedgEntry.SETRANGE("Location Code","Location Code");
                                                              ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                              ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                              ItemLedgEntry.SETRANGE(Open,true);
                                                              if PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK then
                                                                VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
                                                            END;

                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 40  ;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date }
    { 41  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                if "Buffer Status2" = "Buffer Status2"::"ExpDate blocked" then begin
                                                                  "Expiration Date" := xRec."Expiration Date";
                                                                  MESSAGE(Text004);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Expiration Date }
    { 50  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                if ("Qty. to Handle (Base)" * "Quantity (Base)" < 0) or
                                                                   (ABS("Qty. to Handle (Base)") > ABS("Quantity (Base)")
                                                                    - "Quantity Handled (Base)")
                                                                then
                                                                  ERROR(
                                                                    Text001,
                                                                    "Quantity (Base)" - "Quantity Handled (Base)");

                                                                InitQtyToInvoice;
                                                                "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
                                                                CheckSerialNoQty;
                                                              END;

                                                   CaptionML=ENU=Qty. to Handle (Base);
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                if ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) or
                                                                   (ABS("Qty. to Invoice (Base)") > ABS("Qty. to Handle (Base)"
                                                                      + "Quantity Handled (Base)" - "Quantity Invoiced (Base)"))
                                                                then
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. to Handle (Base)" + "Quantity Handled (Base)" - "Quantity Invoiced (Base)");

                                                                "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
                                                                CheckSerialNoQty;
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice (Base);
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Quantity Handled (Base);Decimal    ;CaptionML=ENU=Quantity Handled (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Quantity Invoiced (Base);Decimal   ;CaptionML=ENU=Quantity Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 60  ;   ;Qty. to Handle      ;Decimal       ;CaptionML=ENU=Qty. to Handle;
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Qty. to Invoice     ;Decimal       ;CaptionML=ENU=Qty. to Invoice;
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Buffer Status       ;Option        ;CaptionML=ENU=Buffer Status;
                                                   OptionCaptionML=ENU=" ,MODIFY,INSERT";
                                                   OptionString=" ",MODIFY,INSERT;
                                                   Editable=false }
    { 71  ;   ;Buffer Status2      ;Option        ;CaptionML=ENU=Buffer Status2;
                                                   OptionCaptionML=ENU=,ExpDate blocked;
                                                   OptionString=,"ExpDate blocked";
                                                   Editable=false }
    { 72  ;   ;Buffer Value1       ;Decimal       ;CaptionML=ENU=Buffer Value1;
                                                   Editable=false }
    { 73  ;   ;Buffer Value2       ;Decimal       ;CaptionML=ENU=Buffer Value2;
                                                   Editable=false }
    { 74  ;   ;Buffer Value3       ;Decimal       ;CaptionML=ENU=Buffer Value3;
                                                   Editable=false }
    { 75  ;   ;Buffer Value4       ;Decimal       ;CaptionML=ENU=Buffer Value4;
                                                   Editable=false }
    { 76  ;   ;Buffer Value5       ;Decimal       ;CaptionML=ENU=Buffer Value5;
                                                   Editable=false }
    { 80  ;   ;New Serial No.      ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=New Serial No. }
    { 81  ;   ;New Lot No.         ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=New Lot No. }
    { 900 ;   ;Prohibit Cancellation;Boolean      ;CaptionML=ENU=Prohibit Cancellation }
    { 5400;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                if "Lot No." <> xRec."Lot No." then begin
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  TESTFIELD("Appl.-from Item Entry",0);
                                                                  if IsReclass then
                                                                    "New Lot No." := "Lot No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  InitExpirationDate;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Lot No. }
    { 5401;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
    { 5402;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   CaptionML=ENU=Bin Code }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                if "Appl.-from Item Entry" = 0 then
                                                                  exit;

                                                                case "Source Type" of
                                                                  DATABASE::"Sales Line":
                                                                    if (("Source Subtype" in [3,5]) and ("Quantity (Base)" < 0)) or
                                                                       (("Source Subtype" in [1,2]) and ("Quantity (Base)" > 0)) // sale
                                                                    then
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Item Journal Line":
                                                                    if (("Source Subtype" in [0,2,6]) and ("Quantity (Base)" < 0)) or
                                                                       (("Source Subtype" in [1,3,4,5]) and ("Quantity (Base)" > 0))
                                                                    then
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Service Line":
                                                                    if (("Source Subtype" in [3]) and ("Quantity (Base)" < 0)) or
                                                                       (("Source Subtype" in [1,2]) and ("Quantity (Base)" > 0))
                                                                    then
                                                                      FIELDERROR("Quantity (Base)");
                                                                  else
                                                                    FIELDERROR("Source Subtype");
                                                                end;

                                                                if not TrackingExists then begin
                                                                  TESTFIELD("Serial No.");
                                                                  TESTFIELD("Lot No.");
                                                                end;
                                                                ItemLedgEntry.GET("Appl.-from Item Entry");
                                                                ItemLedgEntry.TESTFIELD("Item No.","Item No.");
                                                                ItemLedgEntry.TESTFIELD(Positive,false);
                                                                if ItemLedgEntry."Shipped Qty. Not Returned" + ABS("Qty. to Handle (Base)") > 0 then
                                                                  ItemLedgEntry.FIELDERROR("Shipped Qty. Not Returned");
                                                                ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
                                                                ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
                                                                ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
                                                              END;

                                                   OnLookup=VAR
                                                              ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                            BEGIN
                                                              ItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                              ItemLedgEntry.SETRANGE(Positive,false);
                                                              if "Location Code" <> '' then
                                                                ItemLedgEntry.SETRANGE("Location Code","Location Code");
                                                              ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                              ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                              ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
                                                              if PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK then
                                                                VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
                                                            END;

                                                   CaptionML=ENU=Appl.-from Item Entry;
                                                   MinValue=0 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 6505;   ;New Expiration Date ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=New Expiration Date }
    { 7300;   ;Quantity actual Handled (Base);Decimal;
                                                   CaptionML=ENU=Quantity actual Handled (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Source ID","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.";
                                                   SumIndexFields="Qty. to Handle (Base)","Qty. to Invoice (Base)","Quantity Handled (Base)","Quantity Invoiced (Base)";
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    {    ;"Lot No.","Serial No."                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1003 : TextConst 'ENU=You cannot invoice more than %1 units.';
      Text001@1001 : TextConst 'ENU=You cannot handle more than %1 units.';
      Text002@1000 : TextConst 'ENU=must not be less than %1';
      Text003@1002 : TextConst 'ENU=%1 must be -1, 0 or 1 when %2 is stated.';
      Text004@1004 : TextConst 'ENU=Expiration date has been established by existing entries and cannot be changed.';
      WMSManagement@1005 : Codeunit "WMS Management";
      Text005@1006 : TextConst 'ENU=%1 in %2 for %3 %4, %5: %6, %7: %8 is currently %9. It must be %10.';
      SkipSerialNoQtyValidation@1202 : Boolean;
      RemainingQtyErr@1007 : TextConst 'ENU=The %1 in item ledger entry %2 is too low to cover %3.';

    [External]
    PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
      "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");

      InitQtyToInvoice;
    END;

    [External]
    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice (Base)" := "Quantity Handled (Base)" + "Qty. to Handle (Base)" - "Quantity Invoiced (Base)";
      "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
    END;

    [External]
    PROCEDURE InitFromAsmHeader@28(VAR AsmHeader@1000 : Record "Assembly Header");
    BEGIN
      INIT;
      SetItemData(
        AsmHeader."Item No.",AsmHeader.Description,AsmHeader."Location Code",AsmHeader."Variant Code",AsmHeader."Bin Code",
        AsmHeader."Qty. per Unit of Measure");
      SetSource(DATABASE::"Assembly Header",AsmHeader."Document Type",AsmHeader."No.",0,'',0);
      SetQuantities(
        AsmHeader."Quantity (Base)",AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
        AsmHeader."Quantity to Assemble",AsmHeader."Quantity to Assemble (Base)",
        AsmHeader."Assembled Quantity (Base)",AsmHeader."Assembled Quantity (Base)");
    END;

    [External]
    PROCEDURE InitFromAsmLine@30(VAR AsmLine@1000 : Record "Assembly Line");
    BEGIN
      INIT;
      SetItemData(
        AsmLine."No.",AsmLine.Description,AsmLine."Location Code",AsmLine."Variant Code",AsmLine."Bin Code",
        AsmLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Assembly Line",AsmLine."Document Type",AsmLine."Document No.",AsmLine."Line No.",'',0);
      SetQuantities(
        AsmLine."Quantity (Base)",AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
        AsmLine."Quantity to Consume",AsmLine."Quantity to Consume (Base)",
        AsmLine."Consumed Quantity (Base)",AsmLine."Consumed Quantity (Base)");
    END;

    [External]
    PROCEDURE InitFromItemJnlLine@3(ItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      INIT;
      SetItemData(
        ItemJnlLine."Item No.",ItemJnlLine.Description,ItemJnlLine."Location Code",ItemJnlLine."Variant Code",
        ItemJnlLine."Bin Code",ItemJnlLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",
        ItemJnlLine."Journal Batch Name",0);
      SetQuantities(
        ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,ItemJnlLine."Quantity (Base)",ItemJnlLine.Quantity,
        ItemJnlLine."Quantity (Base)",0,0);
    END;

    [External]
    PROCEDURE InitFromJobJnlLine@27(VAR JobJnlLine@1000 : Record "Job Journal Line");
    BEGIN
      INIT;
      SetItemData(
        JobJnlLine."No.",JobJnlLine.Description,JobJnlLine."Location Code",JobJnlLine."Variant Code",JobJnlLine."Bin Code",
        JobJnlLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Job Journal Line",JobJnlLine."Entry Type",JobJnlLine."Journal Template Name",JobJnlLine."Line No.",
        JobJnlLine."Journal Batch Name",0);
      SetQuantities(
        JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,JobJnlLine."Quantity (Base)",JobJnlLine.Quantity,
        JobJnlLine."Quantity (Base)",0,0);
    END;

    [External]
    PROCEDURE InitFromPurchLine@19(PurchLine@1001 : Record "Purchase Line");
    BEGIN
      INIT;
      SetItemData(
        PurchLine."No.",PurchLine.Description,PurchLine."Location Code",PurchLine."Variant Code",PurchLine."Bin Code",
        PurchLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",'',0);
      if PurchLine.IsCreditDocType then
        SetQuantities(
          PurchLine."Quantity (Base)",PurchLine."Return Qty. to Ship",PurchLine."Return Qty. to Ship (Base)",
          PurchLine."Qty. to Invoice",PurchLine."Qty. to Invoice (Base)",PurchLine."Return Qty. Shipped (Base)",
          PurchLine."Qty. Invoiced (Base)")
      else
        SetQuantities(
          PurchLine."Quantity (Base)",PurchLine."Qty. to Receive",PurchLine."Qty. to Receive (Base)",
          PurchLine."Qty. to Invoice",PurchLine."Qty. to Invoice (Base)",PurchLine."Qty. Received (Base)",
          PurchLine."Qty. Invoiced (Base)");
    END;

    [External]
    PROCEDURE InitFromProdOrderLine@23(VAR ProdOrderLine@1001 : Record "Prod. Order Line");
    BEGIN
      INIT;
      SetItemData(
        ProdOrderLine."Item No.",ProdOrderLine.Description,ProdOrderLine."Location Code",ProdOrderLine."Variant Code",'',
        ProdOrderLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",0,'',ProdOrderLine."Line No.");
      SetQuantities(
        ProdOrderLine."Quantity (Base)",ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",
        ProdOrderLine."Remaining Quantity",ProdOrderLine."Remaining Qty. (Base)",ProdOrderLine."Finished Qty. (Base)",
        ProdOrderLine."Finished Qty. (Base)");
    END;

    [External]
    PROCEDURE InitFromProdOrderComp@24(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
      INIT;
      SetItemData(
        ProdOrderComp."Item No.",ProdOrderComp.Description,ProdOrderComp."Location Code",ProdOrderComp."Variant Code",
        ProdOrderComp."Bin Code",ProdOrderComp."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Line No.",'',
        ProdOrderComp."Prod. Order Line No.");
      SetQuantities(
        ProdOrderComp."Remaining Qty. (Base)",ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
        ProdOrderComp."Remaining Quantity",ProdOrderComp."Remaining Qty. (Base)",
        ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)",
        ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Remaining Qty. (Base)");
    END;

    [External]
    PROCEDURE InitFromProdPlanningComp@25(VAR PlanningComponent@1001 : Record "Planning Component");
    VAR
      NetQuantity@1000 : Decimal;
    BEGIN
      INIT;
      SetItemData(
        PlanningComponent."Item No.",PlanningComponent.Description,PlanningComponent."Location Code",
        PlanningComponent."Variant Code",'',PlanningComponent."Qty. per Unit of Measure");
      SetSource(DATABASE::"Planning Component",0,PlanningComponent."Worksheet Template Name",PlanningComponent."Line No.",
        PlanningComponent."Worksheet Batch Name",PlanningComponent."Worksheet Line No.");
      NetQuantity := ROUND(PlanningComponent."Net Quantity (Base)" / PlanningComponent."Qty. per Unit of Measure",0.00001);
      SetQuantities(
        PlanningComponent."Net Quantity (Base)",NetQuantity,PlanningComponent."Net Quantity (Base)",NetQuantity,
        PlanningComponent."Net Quantity (Base)",0,0);
    END;

    [External]
    PROCEDURE InitFromReqLine@20(ReqLine@1001 : Record "Requisition Line");
    BEGIN
      INIT;
      SetItemData(
        ReqLine."No.",ReqLine.Description,ReqLine."Location Code",ReqLine."Variant Code",'',ReqLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Requisition Line",0,ReqLine."Worksheet Template Name",ReqLine."Line No.",ReqLine."Journal Batch Name",0);
      SetQuantities(
        ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",ReqLine.Quantity,ReqLine."Quantity (Base)",0,0);
    END;

    [External]
    PROCEDURE InitFromSalesLine@17(SalesLine@1000 : Record "Sales Line");
    BEGIN
      INIT;
      SetItemData(
        SalesLine."No.",SalesLine.Description,SalesLine."Location Code",SalesLine."Variant Code",SalesLine."Bin Code",
        SalesLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",'',0);
      if SalesLine.IsCreditDocType then
        SetQuantities(
          SalesLine."Quantity (Base)",SalesLine."Return Qty. to Receive",SalesLine."Return Qty. to Receive (Base)",
          SalesLine."Qty. to Invoice",SalesLine."Qty. to Invoice (Base)",SalesLine."Return Qty. Received (Base)",
          SalesLine."Qty. Invoiced (Base)")
      else
        SetQuantities(
          SalesLine."Quantity (Base)",SalesLine."Qty. to Ship",SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice",
          SalesLine."Qty. to Invoice (Base)",SalesLine."Qty. Shipped (Base)",SalesLine."Qty. Invoiced (Base)");
    END;

    [External]
    PROCEDURE InitFromServLine@26(VAR ServiceLine@1001 : Record "Service Line";Consume@1000 : Boolean);
    BEGIN
      INIT;
      SetItemData(
        ServiceLine."No.",ServiceLine.Description,ServiceLine."Location Code",ServiceLine."Variant Code",ServiceLine."Bin Code",
        ServiceLine."Qty. per Unit of Measure");
      SetSource(
        DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",'',0);

      "Quantity (Base)" := ServiceLine."Quantity (Base)";
      if Consume then begin
        "Qty. to Invoice (Base)" := ServiceLine."Qty. to Consume (Base)";
        "Qty. to Invoice" := ServiceLine."Qty. to Consume";
        "Quantity Invoiced (Base)" := ServiceLine."Qty. Consumed (Base)";
      end else begin
        "Qty. to Invoice (Base)" := ServiceLine."Qty. to Invoice (Base)";
        "Qty. to Invoice" := ServiceLine."Qty. to Invoice";
        "Quantity Invoiced (Base)" := ServiceLine."Qty. Invoiced (Base)";
      end;

      if ServiceLine."Document Type" = ServiceLine."Document Type"::"Credit Memo" then begin
        "Qty. to Handle" := ServiceLine."Qty. to Invoice";
        "Qty. to Handle (Base)" := ServiceLine."Qty. to Invoice (Base)";
        "Quantity Handled (Base)" := ServiceLine."Qty. Invoiced (Base)";
      end else begin
        "Qty. to Handle" := ServiceLine."Qty. to Ship";
        "Qty. to Handle (Base)" := ServiceLine."Qty. to Ship (Base)";
        "Quantity Handled (Base)" := ServiceLine."Qty. Shipped (Base)";
      end;
    END;

    [External]
    PROCEDURE InitFromTransLine@22(VAR TransLine@1000 : Record "Transfer Line";VAR AvalabilityDate@1002 : Date;Direction@1003 : 'Outbound,Inbound');
    BEGIN
      case Direction of
        Direction::Outbound:
          begin
            INIT;
            SetItemData(
              TransLine."Item No.",TransLine.Description,TransLine."Transfer-from Code",TransLine."Variant Code",
              TransLine."Transfer-from Bin Code",TransLine."Qty. per Unit of Measure");
            SetSource(
              DATABASE::"Transfer Line",Direction,TransLine."Document No.",TransLine."Line No.",'',
              TransLine."Derived From Line No.");
            SetQuantities(
              TransLine."Quantity (Base)",TransLine."Qty. to Ship",TransLine."Qty. to Ship (Base)",TransLine.Quantity,
              TransLine."Quantity (Base)",TransLine."Qty. Shipped (Base)",0);
            AvalabilityDate := TransLine."Shipment Date";
          end;
        Direction::Inbound:
          begin
            INIT;
            SetItemData(
              TransLine."Item No.",TransLine.Description,TransLine."Transfer-to Code",TransLine."Variant Code",
              TransLine."Transfer-To Bin Code",TransLine."Qty. per Unit of Measure");
            SetSource(
              DATABASE::"Transfer Line",Direction,TransLine."Document No.",TransLine."Line No.",'',
              TransLine."Derived From Line No.");
            SetQuantities(
              TransLine."Quantity (Base)",TransLine."Qty. to Receive",TransLine."Qty. to Receive (Base)",TransLine.Quantity,
              TransLine."Quantity (Base)",TransLine."Qty. Received (Base)",0);
            AvalabilityDate := TransLine."Receipt Date";
          end;
      end;
    END;

    LOCAL PROCEDURE CheckSerialNoQty@1();
    BEGIN
      if "Serial No." = '' then
        exit;
      if not ("Quantity (Base)" in [-1,0,1]) then
        ERROR(Text003,FIELDCAPTION("Quantity (Base)"),FIELDCAPTION("Serial No."));
      if not ("Qty. to Handle (Base)" in [-1,0,1]) then
        ERROR(Text003,FIELDCAPTION("Qty. to Handle (Base)"),FIELDCAPTION("Serial No."));
      if not ("Qty. to Invoice (Base)" in [-1,0,1]) then
        ERROR(Text003,FIELDCAPTION("Qty. to Invoice (Base)"),FIELDCAPTION("Serial No."));
    END;

    [External]
    PROCEDURE CalcQty@14(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      if "Qty. per Unit of Measure" = 0 then
        "Qty. per Unit of Measure" := 1;
      exit(ROUND(BaseQty / "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE CopySpecification@131(VAR TempTrackingSpecification@1000 : TEMPORARY Record "Tracking Specification");
    BEGIN
      RESET;
      if TempTrackingSpecification.FINDSET then begin
        repeat
          Rec := TempTrackingSpecification;
          if INSERT then;
        until TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      end;
    END;

    [External]
    PROCEDURE InsertSpecification@135();
    VAR
      TrackingSpecification@1000 : Record "Tracking Specification";
    BEGIN
      RESET;
      if FINDSET then begin
        repeat
          TrackingSpecification := Rec;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification.Correction := false;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          if "Buffer Status" = "Buffer Status"::MODIFY then
            TrackingSpecification.MODIFY
          else
            TrackingSpecification.INSERT;
        until NEXT = 0;
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE InitTrackingSpecification@117(FromType@1010 : Integer;FromSubtype@1009 : Integer;FromID@1008 : Code[20];FromBatchName@1007 : Code[10];FromProdOrderLine@1006 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1004 : Code[10];FromLocationCode@1003 : Code[10];FromSerialNo@1002 : Code[20];FromLotNo@1001 : Code[20];FromQtyPerUOM@1000 : Decimal);
    BEGIN
      SetSource(FromType,FromSubtype,FromID,FromRefNo,FromBatchName,FromProdOrderLine);
      "Variant Code" := FromVariantCode;
      "Location Code" := FromLocationCode;
      "Serial No." := FromSerialNo;
      "Lot No." := FromLotNo;
      "Qty. per Unit of Measure" := FromQtyPerUOM;
    END;

    [External]
    PROCEDURE InitTrackingSpecification2@43(FromType@1010 : Integer;FromSubtype@1009 : Integer;FromID@1008 : Code[20];FromBatchName@1007 : Code[10];FromProdOrderLine@1006 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1004 : Code[10];FromLocationCode@1003 : Code[10];FromQtyPerUOM@1000 : Decimal);
    BEGIN
      InitTrackingSpecification(
        FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
        FromVariantCode,FromLocationCode,'','',FromQtyPerUOM);
    END;

    [External]
    PROCEDURE InitExpirationDate@2();
    VAR
      ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
      ExpDate@1000 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      if ("Serial No." = xRec."Serial No.") and ("Lot No." = xRec."Lot No.") then
        exit;

      "Expiration Date" := 0D;

      ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",false,EntriesExist);
      if EntriesExist then begin
        "Expiration Date" := ExpDate;
        "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
      end else
        "Buffer Status2" := 0;

      if IsReclass then begin
        "New Expiration Date" := "Expiration Date";
        "Warranty Date" := ItemTrackingMgt.ExistingWarrantyDate("Item No.","Variant Code","Lot No.","Serial No.",EntriesExist);
      end;
    END;

    [External]
    PROCEDURE IsReclass@4() : Boolean;
    BEGIN
      exit(("Source Type" = DATABASE::"Item Journal Line") and ("Source Subtype" = 4));
    END;

    [External]
    PROCEDURE TestFieldError@5(FieldCaptionText@1000 : Text[80];CurrFieldValue@1001 : Decimal;CompareValue@1002 : Decimal);
    BEGIN
      if CurrFieldValue = CompareValue then
        exit;

      ERROR(Text005,
        FieldCaptionText,TABLECAPTION,FIELDCAPTION("Item No."),"Item No.",
        FIELDCAPTION("Serial No."),"Serial No.",FIELDCAPTION("Lot No."),"Lot No.",
        ABS(CurrFieldValue),ABS(CompareValue));
    END;

    [External]
    PROCEDURE SetItemData@29(ItemNo@1000 : Code[20];ItemDescription@1001 : Text[50];LocationCode@1002 : Code[10];VariantCode@1003 : Code[10];BinCode@1005 : Code[20];QtyPerUoM@1004 : Decimal);
    BEGIN
      "Item No." := ItemNo;
      Description := ItemDescription;
      "Location Code" := LocationCode;
      "Variant Code" := VariantCode;
      "Bin Code" := BinCode;
      "Qty. per Unit of Measure" := QtyPerUoM;
    END;

    LOCAL PROCEDURE SetQuantities@32(QtyBase@1000 : Decimal;QtyToHandle@1001 : Decimal;QtyToHandleBase@1002 : Decimal;QtyToInvoice@1003 : Decimal;QtyToInvoiceBase@1004 : Decimal;QtyHandledBase@1005 : Decimal;QtyInvoicedBase@1006 : Decimal);
    BEGIN
      "Quantity (Base)" := QtyBase;
      "Qty. to Handle" := QtyToHandle;
      "Qty. to Handle (Base)" := QtyToHandleBase;
      "Qty. to Invoice" := QtyToInvoice;
      "Qty. to Invoice (Base)" := QtyToInvoiceBase;
      "Quantity Handled (Base)" := QtyHandledBase;
      "Quantity Invoiced (Base)" := QtyInvoicedBase;
    END;

    [External]
    PROCEDURE ClearSourceFilter@36();
    BEGIN
      SETRANGE("Source Type");
      SETRANGE("Source Subtype");
      SETRANGE("Source ID");
      SETRANGE("Source Ref. No.");
      SETRANGE("Source Batch Name");
      SETRANGE("Source Prod. Order Line");
    END;

    [External]
    PROCEDURE SetSource@21(SourceType@1000 : Integer;SourceSubtype@1001 : Integer;SourceID@1002 : Code[20];SourceRefNo@1003 : Integer;SourceBatchName@1004 : Code[10];SourceProdOrderLine@1005 : Integer);
    BEGIN
      "Source Type" := SourceType;
      "Source Subtype" := SourceSubtype;
      "Source ID" := SourceID;
      "Source Ref. No." := SourceRefNo;
      "Source Batch Name" := SourceBatchName;
      "Source Prod. Order Line" := SourceProdOrderLine;
    END;

    [External]
    PROCEDURE SetSourceFromPurchLine@8(PurchLine@1000 : Record "Purchase Line");
    BEGIN
      "Source Type" := DATABASE::"Purchase Line";
      "Source Subtype" := PurchLine."Document Type";
      "Source ID" := PurchLine."Document No.";
      "Source Batch Name" := '';
      "Source Prod. Order Line" := 0;
      "Source Ref. No." := PurchLine."Line No.";
    END;

    [External]
    PROCEDURE SetSourceFromSalesLine@18(SalesLine@1000 : Record "Sales Line");
    BEGIN
      "Source Type" := DATABASE::"Sales Line";
      "Source Subtype" := SalesLine."Document Type";
      "Source ID" := SalesLine."Document No.";
      "Source Batch Name" := '';
      "Source Prod. Order Line" := 0;
      "Source Ref. No." := SalesLine."Line No.";
    END;

    [External]
    PROCEDURE SetSourceFilter@31(SourceType@1011 : Integer;SourceSubtype@1010 : Integer;SourceID@1009 : Code[20];SourceRefNo@1008 : Integer;SourceKey@1000 : Boolean);
    BEGIN
      if SourceKey then
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubtype >= 0 then
        SETRANGE("Source Subtype",SourceSubtype);
      SETRANGE("Source ID",SourceID);
      if SourceRefNo >= 0 then
        SETRANGE("Source Ref. No.",SourceRefNo);
    END;

    [External]
    PROCEDURE SetSourceFilter2@33(SourceBatchName@1007 : Code[10];SourceProdOrderLine@1006 : Integer);
    BEGIN
      SETRANGE("Source Batch Name",SourceBatchName);
      SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
    END;

    [External]
    PROCEDURE ClearTracking@40();
    BEGIN
      "Serial No." := '';
      "Lot No." := '';
      "Warranty Date" := 0D;
      "Expiration Date" := 0D;
    END;

    [External]
    PROCEDURE ClearTrackingFilter@35();
    BEGIN
      SETRANGE("Serial No.");
      SETRANGE("Lot No.");
    END;

    [External]
    PROCEDURE SetTracking@37(SerialNo@1001 : Code[20];LotNo@1000 : Code[20];WarrantyDate@1002 : Date;ExpirationDate@1003 : Date);
    BEGIN
      "Serial No." := SerialNo;
      "Lot No." := LotNo;
      "Warranty Date" := WarrantyDate;
      "Expiration Date" := ExpirationDate;
    END;

    [External]
    PROCEDURE CopyTrackingFromItemLedgEntry@41(ItemLedgerEntry@1000 : Record "Item Ledger Entry");
    BEGIN
      "Serial No." := ItemLedgerEntry."Serial No.";
      "Lot No." := ItemLedgerEntry."Lot No.";
    END;

    [External]
    PROCEDURE SetTrackingFilter@34(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      SETRANGE("Serial No.",SerialNo);
      SETRANGE("Lot No.",LotNo);
    END;

    [External]
    PROCEDURE SetTrackingFilterBlank@42();
    BEGIN
      SETRANGE("Serial No.",'');
      SETRANGE("Lot No.",'');
    END;

    [External]
    PROCEDURE SetTrackingFilterFromEntrySummary@44(EntrySummary@1000 : Record "Entry Summary");
    BEGIN
      SETRANGE("Serial No.",EntrySummary."Serial No.");
      SETRANGE("Lot No.",EntrySummary."Lot No.");
    END;

    [External]
    PROCEDURE SetTrackingFilterFromReservEntry@38(ReservEntry@1000 : Record "Reservation Entry");
    BEGIN
      SETRANGE("Serial No.",ReservEntry."Serial No.");
      SETRANGE("Lot No.",ReservEntry."Lot No.");
    END;

    [External]
    PROCEDURE SetTrackingFilterFromSpec@39(TrackingSpecification@1000 : Record "Tracking Specification");
    BEGIN
      SETRANGE("Serial No.",TrackingSpecification."Serial No.");
      SETRANGE("Lot No.",TrackingSpecification."Lot No.");
    END;

    [External]
    PROCEDURE SetSkipSerialNoQtyValidation@7(NewVal@1000 : Boolean);
    BEGIN
      SkipSerialNoQtyValidation := NewVal;
    END;

    [External]
    PROCEDURE CheckItemTrackingQuantity@6(TableNo@1000 : Integer;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];LineNo@1003 : Integer;QtyToHandleBase@1009 : Decimal;QtyToInvoiceBase@1010 : Decimal;Handle@1004 : Boolean;Invoice@1006 : Boolean);
    VAR
      ReservationEntry@1005 : Record "Reservation Entry";
    BEGIN
      if QtyToHandleBase = 0 then
        Handle := false;
      if QtyToInvoiceBase = 0 then
        Invoice := false;
      if not (Handle or Invoice) then
        exit;
      ReservationEntry.SetSourceFilter(TableNo,DocumentType,DocumentNo,LineNo,true);
      ReservationEntry.SETFILTER("Item Tracking",'%1|%2',
        ReservationEntry."Item Tracking"::"Lot and Serial No.",
        ReservationEntry."Item Tracking"::"Serial No.");
      CheckItemTrackingByType(ReservationEntry,QtyToHandleBase,QtyToInvoiceBase,false,Handle,Invoice);
      ReservationEntry.SETRANGE("Item Tracking",ReservationEntry."Item Tracking"::"Lot No.");
      CheckItemTrackingByType(ReservationEntry,QtyToHandleBase,QtyToInvoiceBase,true,Handle,Invoice);
    END;

    LOCAL PROCEDURE CheckItemTrackingByType@12(VAR ReservationEntry@1000 : Record "Reservation Entry";QtyToHandleBase@1004 : Decimal;QtyToInvoiceBase@1006 : Decimal;OnlyLot@1005 : Boolean;Handle@1001 : Boolean;Invoice@1002 : Boolean);
    VAR
      TrackingSpecification@1009 : Record "Tracking Specification";
      HandleQtyBase@1007 : Decimal;
      InvoiceQtyBase@1008 : Decimal;
      LotsToHandleUndefined@1003 : Boolean;
      LotsToInvoiceUndefined@1010 : Boolean;
    BEGIN
      if OnlyLot then begin
        GetUndefinedLots(ReservationEntry,Handle,Invoice,LotsToHandleUndefined,LotsToInvoiceUndefined);
        if not (LotsToHandleUndefined or LotsToInvoiceUndefined) then
          exit;
      end;
      if not ReservationEntry.FINDLAST then
        exit;
      if Handle then begin
        ReservationEntry.CALCSUMS("Qty. to Handle (Base)");
        HandleQtyBase += ReservationEntry."Qty. to Handle (Base)";
      end;
      if Invoice then begin
        ReservationEntry.CALCSUMS("Qty. to Invoice (Base)");
        InvoiceQtyBase += ReservationEntry."Qty. to Invoice (Base)";
      end;
      TrackingSpecification.TRANSFERFIELDS(ReservationEntry);
      if Handle then
        if ABS(HandleQtyBase) > ABS(QtyToHandleBase) then
          TrackingSpecification.TestFieldError(FIELDCAPTION("Qty. to Handle (Base)"),HandleQtyBase,QtyToHandleBase);
      if Invoice then
        if ABS(InvoiceQtyBase) > ABS(QtyToInvoiceBase) then
          TrackingSpecification.TestFieldError(FIELDCAPTION("Qty. to Invoice (Base)"),InvoiceQtyBase,QtyToInvoiceBase);
    END;

    LOCAL PROCEDURE GetUndefinedLots@10(VAR ReservationEntry@1000 : Record "Reservation Entry";Handle@1004 : Boolean;Invoice@1005 : Boolean;VAR LotsToHandleUndefined@1006 : Boolean;VAR LotsToInvoiceUndefined@1007 : Boolean);
    VAR
      HandleLot@1003 : Code[20];
      InvoiceLot@1002 : Code[20];
      StopLoop@1008 : Boolean;
    BEGIN
      LotsToHandleUndefined := false;
      LotsToInvoiceUndefined := false;
      if not ReservationEntry.FINDSET then
        exit;
      repeat
        if Handle then begin
          CheckLot(ReservationEntry."Qty. to Handle (Base)",ReservationEntry."Lot No.",HandleLot,LotsToHandleUndefined);
          if LotsToHandleUndefined and not Invoice then
            StopLoop := true;
        end;
        if Invoice then begin
          CheckLot(ReservationEntry."Qty. to Invoice (Base)",ReservationEntry."Lot No.",InvoiceLot,LotsToInvoiceUndefined);
          if LotsToInvoiceUndefined and not Handle then
            StopLoop := true;
        end;
        if LotsToHandleUndefined and LotsToInvoiceUndefined then
          StopLoop := true;
      until StopLoop or (ReservationEntry.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckLot@16(ReservQty@1000 : Decimal;ReservLot@1003 : Code[20];VAR Lot@1001 : Code[20];VAR Undefined@1002 : Boolean);
    BEGIN
      Undefined := false;
      if ReservQty = 0 then
        exit;
      if Lot = '' then
        Lot := ReservLot
      else
        if ReservLot <> Lot then
          Undefined := true;
    END;

    LOCAL PROCEDURE QuantityToInvoiceIsSufficient@9() : Boolean;
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      if "Source Type" = DATABASE::"Sales Line" then begin
        SalesLine.SETRANGE("Document Type","Source Subtype");
        SalesLine.SETRANGE("Document No.","Source ID");
        SalesLine.SETRANGE("Line No.","Source Ref. No.");
        if SalesLine.FINDFIRST then
          exit("Quantity (Base)" < SalesLine."Qty. to Invoice (Base)");
      end;
    END;

    [External]
    PROCEDURE TrackingExists@11() : Boolean;
    BEGIN
      exit(("Serial No." <> '') or ("Lot No." <> ''));
    END;

    BEGIN
    END.
  }
}

