OBJECT Page 6710 OData Column Choose SubForm
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=OData Column Choose SubForm;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="Tenant Web Service Columns";
    PageType=ListPart;
    SourceTableTemporary=true;
    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      Name=ActionContainer5;
                      ActionContainerType=ActionItems }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                Name=Include;
                ToolTipML=ENU=Specifies the field name that is selected in the data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Include;
                OnValidate=BEGIN
                             if CalledForExcelExport then
                               CheckFieldFilter;
                             IsDirty := true;
                           END;

                ImplicitType=Boolean }

    { 7   ;2   ;Field     ;
                Name=Field Name;
                ToolTipML=ENU=Specifies the field names in a data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Name";
                Editable=false;
                ImplicitType=Text250 }

    { 3   ;2   ;Field     ;
                Name=Field Caption;
                CaptionML=ENU=Field Caption;
                ToolTipML=ENU=Specifies the Field Captions in a data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Caption";
                Editable=false;
                ImplicitType=Text250 }

    { 4   ;2   ;Field     ;
                Name=Data Item Caption;
                CaptionML=ENU=Source Table;
                ToolTipML=ENU=Specifies the Source Table for the Field Name.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Item Caption";
                Editable=FALSE;
                ImplicitType=Text250 }

  }
  CODE
  {
    VAR
      LoadingXMLErr@1000 : TextConst 'ENU=There was an error loading the object.';
      RecRef@1004 : RecordRef;
      ColumnList@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      SourceObjectType@1007 : ',,,,,,,,Page,Query';
      ActionType@1001 : '"Create a new data set","Create a copy of an existing data set","Edit an existing data set"';
      SourceServiceName@1003 : Text;
      SourceObjectID@1002 : Integer;
      IsDirty@1006 : Boolean;
      CheckFieldErr@1008 : TextConst 'ENU=You cannot exclude field from selection because of applied filter for it.';
      CalledForExcelExport@1009 : Boolean;

    PROCEDURE InitColumns@1(ObjectType@1000 : ',,,,,,,,Page,Query';ObjectID@1005 : Integer;InActionType@1003 : '"Create a new data set","Create a copy of an existing data set","Edit an existing data set"';InSourceServiceName@1004 : Text;DestinationServiceName@1006 : Text);
    VAR
      ObjectMetadata@1001 : Record "Object Metadata";
      inStream@1002 : InStream;
    BEGIN
      if FINDFIRST then
        exit;

      ActionType := InActionType;
      SourceObjectType := ObjectType;
      SourceServiceName := InSourceServiceName;
      SourceObjectID := ObjectID;
      DestinationServiceName := DestinationServiceName;

      if not ObjectMetadata.GET(SourceObjectType,SourceObjectID) then
        exit;
      if not ObjectMetadata.Metadata.HASVALUE then
        exit;

      ObjectMetadata.CALCFIELDS(Metadata);
      ObjectMetadata.Metadata.CREATEINSTREAM(inStream,TEXTENCODING::Windows);
      if SourceObjectType = SourceObjectType::Query then
        InitColumnsForQuery(inStream)
      else
        if SourceObjectType = SourceObjectType::Page then
          InitColumnsForPage(inStream);

      CLEAR(Rec);
      CurrPage.UPDATE;
    END;

    PROCEDURE GetColumns@2(VAR TempTenantWebServiceColumns@1000 : TEMPORARY Record "Tenant Web Service Columns");
    BEGIN
      SETRANGE(Include,true);
      if FINDFIRST then
        repeat
          TempTenantWebServiceColumns.TRANSFERFIELDS(Rec);
          TempTenantWebServiceColumns.INSERT;

        until NEXT = 0;
      RESET;
    END;

    LOCAL PROCEDURE InitColumnsForQuery@3(queryStream@1000 : InStream);
    VAR
      queryField@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryFields";
      metaData@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
      i@1001 : Integer;
      OldTableNo@1004 : Integer;
    BEGIN
      // Load into Query Metadata Reader and retrieve values
      metaData := metaData.FromStream(queryStream);
      if metaData.Fields.Count = 0 then
        exit;
      for i := 0 to metaData.Fields.Count - 1 do begin
        queryField := metaData.Fields.Item(i);
        if OldTableNo <> queryField.TableNo then
          ColumnList := ColumnList.List;
        OldTableNo := queryField.TableNo;
        CLEAR(Rec);
        if not queryField.IsFilterOnly then
          InsertRecord(queryField.TableNo,queryField.FieldNo,queryField.FieldName,false);
      end;
    END;

    LOCAL PROCEDURE InitColumnsForPage@4(pageStream@1000 : InStream);
    VAR
      FieldsTable@1017 : Record Field;
      XMLDOMManagement@1001 : Codeunit "XML DOM Management";
      ODataUtility@1018 : Codeunit ODataUtility;
      XmlDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlAttribute@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      AttributesCollection@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      NodeListEnum@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      CollectionAttributeEnum@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      PageStreamText@1011 : Text;
      XmlText@1012 : Text;
      SourceTableText@1010 : Text;
      FieldIDText@1013 : Text;
      FieldNameText@1015 : Text;
      ValidTag@1016 : Boolean;
      ColumnVisible@1019 : Boolean;
    BEGIN
      while not pageStream.EOS do begin
        CLEAR(PageStreamText);
        pageStream.READTEXT(PageStreamText);
        XmlText := XmlText + PageStreamText;
      end;

      XmlDocument := XmlDocument.XmlDocument;
      if not XMLDOMManagement.LoadXMLDocumentFromText(XmlText,XmlDocument)then
        ERROR(LoadingXMLErr);

      XmlNodeList := XmlDocument.GetElementsByTagName('SourceObject');
      if XmlNodeList.Count <> 1 then
        ERROR(LoadingXMLErr);

      NodeListEnum := XmlNodeList.GetEnumerator;
      NodeListEnum.MoveNext;
      XmlNode := NodeListEnum.Current;
      AttributesCollection := XmlNode.Attributes;
      CollectionAttributeEnum := AttributesCollection.GetEnumerator;
      while CollectionAttributeEnum.MoveNext do begin
        XmlAttribute := CollectionAttributeEnum.Current;
        if XmlAttribute.Name = 'SourceTable' then
          SourceTableText := XmlAttribute.Value;
      end;

      XmlNodeList := XmlDocument.GetElementsByTagName('Controls');
      NodeListEnum := XmlNodeList.GetEnumerator;
      ColumnList := ColumnList.List;
      while NodeListEnum.MoveNext do begin
        ValidTag := false;
        FieldIDText := '';
        FieldNameText := '';
        ColumnVisible := true;

        XmlNode := NodeListEnum.Current;
        AttributesCollection := XmlNode.Attributes;
        CollectionAttributeEnum := AttributesCollection.GetEnumerator;
        while CollectionAttributeEnum.MoveNext do begin
          XmlAttribute := CollectionAttributeEnum.Current;

          if (XmlAttribute.Name = 'xsi:type') and (XmlAttribute.Value = 'ControlDefinition') then
            ValidTag := true;

          if XmlAttribute.Name = 'Name' then
            FieldNameText := XmlAttribute.Value;

          if XmlAttribute.Name = 'DataColumnName' then
            FieldIDText := XmlAttribute.Value;

          if ActionType = ActionType::"Create a new data set" then
            if (XmlAttribute.Name = 'Visible') and (XmlAttribute.Value = 'FALSE') then
              ColumnVisible := false;

          if STRPOS(FieldIDText,'Control') > 0 then
            ValidTag := false;
        end;

        if ValidTag then begin
          EVALUATE(FieldsTable.TableNo,SourceTableText);
          EVALUATE(FieldsTable."No.",FieldIDText);
          if FieldsTable.GET(FieldsTable.TableNo,FieldsTable."No.") then begin
            if FieldNameText = '' then
              FieldNameText := FieldsTable.FieldName;

            // Convert to OData compatible name.
            FieldNameText := ODataUtility.ConvertNavFieldNameToOdataName(FieldNameText);
            InsertRecord(FieldsTable.TableNo,FieldsTable."No.",FieldNameText,ColumnVisible);
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertRecord@7(TableNo@1000 : Integer;FieldNo@1001 : Integer;FieldName@1002 : Text;IncludeParam@1003 : Boolean);
    BEGIN
      if ColumnList.Contains(FieldNo) then
        exit;

      INIT;
      VALIDATE("Data Item",TableNo);
      VALIDATE("Field Number",FieldNo);
      VALIDATE("Field Name",COPYSTR(FieldName,1));
      if (ActionType = ActionType::"Create a copy of an existing data set") or
         (ActionType = ActionType::"Edit an existing data set")
      then begin
        if SourceColumnExists(TableNo,FieldNo) then
          Include := true;
      end else
        Include := IncludeParam;
      repeat
        "Entry ID" := "Entry ID" + 1;
      until INSERT(true);

      ColumnList.Add(FieldNo);
    END;

    PROCEDURE DeleteColumns@5();
    BEGIN
      CLEAR(Rec);
      DELETEALL;
    END;

    LOCAL PROCEDURE SourceColumnExists@9(TableNo@1000 : Integer;FieldNumber@1001 : Integer) : Boolean;
    VAR
      TenantWebService@1002 : Record "Tenant Web Service";
      TenantWebServiceColumns@1003 : Record "Tenant Web Service Columns";
    BEGIN
      TenantWebService.INIT;
      if TenantWebService.GET(SourceObjectType,SourceServiceName) then begin
        TenantWebServiceColumns.INIT;
        TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
        TenantWebServiceColumns.SETRANGE("Field Number",FieldNumber);
        TenantWebServiceColumns.SETRANGE("Data Item",TableNo);
        if TenantWebServiceColumns.FINDFIRST then
          exit(true);
      end;
    END;

    PROCEDURE IncludeIsChanged@8() : Boolean;
    VAR
      LocalDirty@1000 : Boolean;
    BEGIN
      LocalDirty := IsDirty;
      CLEAR(IsDirty);
      exit(LocalDirty);
    END;

    PROCEDURE SetCalledForExcelExport@6(VAR SourceRecRef@1000 : RecordRef);
    BEGIN
      CalledForExcelExport := true;
      RecRef := SourceRecRef;
    END;

    LOCAL PROCEDURE CheckFieldFilter@12();
    VAR
      FieldRef@1000 : FieldRef;
    BEGIN
      if not Include then begin
        FieldRef := RecRef.FIELD("Field Number");
        if FieldRef.GETFILTER <> '' then
          ERROR(CheckFieldErr);
      end;
    END;

    BEGIN
    END.
  }
}

