OBJECT Report 5199 Update Contact Classification
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Update Contact Classification;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   Date := WORKDATE;
                 END;

    OnPreReport=BEGIN
                  Window.OPEN(
                    Text000 +
                    Text001 +
                    Text002);
                END;

  }
  DATASET
  {
    { 1883;    ;DataItem;Profile Questionnaire Header;
               DataItemTable="Profile Questionnaire Header";
               DataItemTableView=SORTING(Code);
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Code);
                                  if NoOfProfiles = 0 then
                                    NoOfProfiles := COUNT;
                                  ProfileCount := ProfileCount + 1;
                                  Window.UPDATE(2,ROUND(10000 * ProfileCount / NoOfProfiles,1));
                                  NoOfQuestions := 0;
                                END;

               ReqFilterFields=Code,Description,"Business Relation Code" }

    { 4858;1   ;DataItem;Profile Questionnaire Line;
               DataItemTable="Profile Questionnaire Line";
               DataItemTableView=SORTING("Profile Questionnaire Code","Line No.") WHERE(Type=CONST(Question),"Auto Contact Classification"=CONST(true),"Contact Class. Field"=FILTER(<>Rating));
               OnPreDataItem=BEGIN
                               NoOfQuestions := 0;
                               QuestionCount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(3,"Line No.");
                                  if NoOfQuestions = 0 then
                                    NoOfQuestions := COUNT;
                                  QuestionCount := QuestionCount + 1;
                                  Window.UPDATE(4,ROUND(10000 * QuestionCount / NoOfQuestions,1));
                                  RecCount := 0;

                                  ContactValue.DELETEALL;

                                  if (FORMAT("Starting Date Formula") = '') or (FORMAT("Ending Date Formula") = '') then
                                    ERROR(
                                      Text005,
                                      FIELDCAPTION("Starting Date Formula"),
                                      FIELDCAPTION("Ending Date Formula"),
                                      "Profile Questionnaire Header".Code,
                                      Description);

                                  if "Classification Method" = "Classification Method"::" " then
                                    ERROR(
                                      Text008,
                                      FIELDCAPTION("Classification Method"),
                                      "Profile Questionnaire Header".Code,
                                      Description);

                                  AnswersExists("Profile Questionnaire Line",'',true);
                                  TotalValue := 0;

                                  case true of
                                    "Customer Class. Field" <> "Customer Class. Field"::" ":
                                      FindCustomerValues("Profile Questionnaire Line");
                                    "Vendor Class. Field" <> "Vendor Class. Field"::" ":
                                      FindVendorValues("Profile Questionnaire Line");
                                    "Contact Class. Field" <> "Contact Class. Field"::" ":
                                      FindContactValues("Profile Questionnaire Line");
                                  end;

                                  MarkContactByMethod("Profile Questionnaire Line",'');
                                END;

               DataItemLink="Profile Questionnaire Code"=FIELD(Code) }

    { 5444;    ;DataItem;Integer             ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number) WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  UpdateRating('');
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Date;
                  CaptionML=ENU=Date;
                  ToolTipML=ENU=Specifies the date on which you update the contact classification.;
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=Date }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Profile Questionnaire #1######## @2@@@@@@@@@@@@@\\';
      Text001@1001 : TextConst 'ENU=Question Line No.     #3######## @4@@@@@@@@@@@@@\';
      Text002@1002 : TextConst 'ENU=Finding Values        #5######## @6@@@@@@@@@@@@@\';
      Text003@1003 : TextConst 'ENU=%1 results in a date before the result of the %2.';
      ContactValue@1004 : TEMPORARY Record "Contact Value";
      Window@1005 : Dialog;
      Date@1006 : Date;
      NoOfProfiles@1008 : Integer;
      ProfileCount@1009 : Integer;
      NoOfQuestions@1010 : Integer;
      QuestionCount@1011 : Integer;
      NoOfRecs@1012 : Integer;
      RecCount@1013 : Integer;
      TotalValue@1014 : Decimal;
      Text004@1015 : TextConst 'ENU=Two or more questions are causing the rating calculation to loop.';
      Text005@1016 : TextConst '@@@="%1 = Starting Date Formula;%2 = Ending Date Formula;%3 = Profile Questionaire Code;%4 = Question Description";ENU=You must specify %1 and %2 in Profile Questionnaire %3, question %4. To find additional errors, run the Test report.';
      Text008@1019 : TextConst '@@@="%1 = Sorting Method;%2 = Profile Questionaire Code;%3 = Question Description";ENU=You must specify %1 in Profile Questionnaire %2, question %3. To find additional errors, run the Test report.';

    LOCAL PROCEDURE AnswersExists@1(VAR ProfileQuestionnaireLine@1001 : Record "Profile Questionnaire Line";UpdateContNo@1003 : Code[20];Delete@1004 : Boolean) : Boolean;
    VAR
      ContProfileAnswer@1000 : Record "Contact Profile Answer";
      ProfileQuestnLine2@1002 : Record "Profile Questionnaire Line";
    BEGIN
      ContProfileAnswer.SETCURRENTKEY("Profile Questionnaire Code","Line No.");
      ContProfileAnswer.SETRANGE("Profile Questionnaire Code",ProfileQuestionnaireLine."Profile Questionnaire Code");

      ProfileQuestnLine2.RESET;
      ProfileQuestnLine2 := ProfileQuestionnaireLine;
      ProfileQuestnLine2.SETRANGE(Type,ProfileQuestnLine2.Type::Question);
      ProfileQuestnLine2.SETRANGE("Profile Questionnaire Code",ProfileQuestionnaireLine."Profile Questionnaire Code");
      if ProfileQuestnLine2.NEXT <> 0 then
        ContProfileAnswer.SETRANGE("Line No.",ProfileQuestionnaireLine."Line No.",ProfileQuestnLine2."Line No.")
      else
        ContProfileAnswer.SETFILTER("Line No.",'%1..',ProfileQuestionnaireLine."Line No.");
      if UpdateContNo <> '' then begin
        ContProfileAnswer.SETRANGE("Contact No.",UpdateContNo);
        ContProfileAnswer.SETCURRENTKEY("Contact No.","Profile Questionnaire Code","Line No.");
      end;

      if Delete then
        ContProfileAnswer.DELETEALL
      else
        exit(not ContProfileAnswer.ISEMPTY);
    END;

    LOCAL PROCEDURE FindCustomerValues@2(ProfileQuestionnaireLine@1009 : Record "Profile Questionnaire Line");
    VAR
      Cust@1000 : Record Customer;
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      CustLedgEntry2@1010 : Record "Cust. Ledger Entry";
      ValueEntry@1002 : Record "Value Entry";
      CustContactNo@1003 : Code[20];
      NoOfInvoices@1004 : Integer;
      DaysOverdue@1005 : Integer;
      NoOfYears@1006 : Decimal;
      FromDate@1007 : Date;
      ToDate@1008 : Date;
    BEGIN
      NoOfRecs := Cust.COUNT;
      if Cust.FIND('-') then
        repeat
          RecCount := RecCount + 1;
          Window.UPDATE(5,Cust."No.");
          Window.UPDATE(6,ROUND(10000 * RecCount / NoOfRecs,1));
          CustContactNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Customer,Cust."No.");
          if CustContactNo <> '' then begin
            Cust.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            if ToDate < FromDate then
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
                STRSUBSTNO(Text003,
                  ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
                  ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Cust.SETRANGE("Date Filter",FromDate,ToDate);
            case ProfileQuestionnaireLine."Customer Class. Field" of
              ProfileQuestionnaireLine."Customer Class. Field"::"Sales (LCY)":
                begin
                  Cust.CALCFIELDS("Sales (LCY)");
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,Cust."Sales (LCY)",0D,0);
                end;
              ProfileQuestionnaireLine."Customer Class. Field"::"Profit (LCY)":
                begin
                  Cust.CALCFIELDS("Profit (LCY)");
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,Cust."Profit (LCY)",0D,0);
                end;
              ProfileQuestionnaireLine."Customer Class. Field"::"Sales Frequency (Invoices/Year)":
                begin
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  NoOfInvoices := CustLedgEntry.COUNT;
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,NoOfInvoices / NoOfYears,0D,0);
                end;
              ProfileQuestionnaireLine."Customer Class. Field"::"Avg. Invoice Amount (LCY)":
                begin
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  NoOfInvoices := CustLedgEntry.COUNT;
                  if NoOfInvoices <> 0 then begin
                    CustLedgEntry.CALCSUMS("Sales (LCY)");
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,CustLedgEntry."Sales (LCY)" / NoOfInvoices,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                end;
              ProfileQuestionnaireLine."Customer Class. Field"::"Discount (%)":
                begin
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  if CustLedgEntry.FIND('-') then begin
                    CustLedgEntry.CALCSUMS("Sales (LCY)");
                    ValueEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Posting Date");
                    ValueEntry.SETRANGE("Source Type",ValueEntry."Source Type"::Customer);
                    ValueEntry.SETRANGE("Source No.",Cust."No.");
                    ValueEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                    ValueEntry.CALCSUMS("Discount Amount");
                    ValueEntry."Discount Amount" := -ValueEntry."Discount Amount";
                    if (CustLedgEntry."Sales (LCY)" + ValueEntry."Discount Amount") <> 0 then
                      InsertContactValue(
                        ProfileQuestionnaireLine,CustContactNo,
                        100 * ValueEntry."Discount Amount" /
                        (CustLedgEntry."Sales (LCY)" + ValueEntry."Discount Amount"),0D,0)
                    else
                      InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                end;
              ProfileQuestionnaireLine."Customer Class. Field"::"Avg. Overdue (Day)":
                begin
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  CustLedgEntry.SETRANGE(Open,false);
                  NoOfInvoices := CustLedgEntry.COUNT;
                  if NoOfInvoices <> 0 then begin
                    DaysOverdue := 0;
                    CustLedgEntry.FIND('-');
                    repeat
                      if CustLedgEntry."Closed at Date" > CustLedgEntry."Due Date" then
                        DaysOverdue := DaysOverdue + (CustLedgEntry."Closed at Date" - CustLedgEntry."Due Date")
                      else
                        if CustLedgEntry."Closed at Date" = 0D then begin
                          CustLedgEntry2.RESET;
                          CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                          CustLedgEntry2.SETRANGE("Document Type",CustLedgEntry2."Document Type"::Payment);
                          CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
                          if CustLedgEntry2.FINDFIRST and
                             (CustLedgEntry2."Closed at Date" > CustLedgEntry."Due Date")
                          then
                            DaysOverdue := DaysOverdue + (CustLedgEntry2."Closed at Date" - CustLedgEntry."Due Date");
                        end;
                    until CustLedgEntry.NEXT = 0;
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,DaysOverdue / NoOfInvoices,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                end;
            end;
          end;
        until Cust.NEXT = 0
    END;

    LOCAL PROCEDURE FindVendorValues@13(ProfileQuestionnaireLine@1009 : Record "Profile Questionnaire Line");
    VAR
      Vend@1000 : Record Vendor;
      VendLedgEntry@1001 : Record "Vendor Ledger Entry";
      VendLedgEntry2@1010 : Record "Vendor Ledger Entry";
      ValueEntry@1002 : Record "Value Entry";
      VendContactNo@1003 : Code[20];
      NoOfInvoices@1004 : Integer;
      DaysOverdue@1005 : Integer;
      NoOfYears@1006 : Decimal;
      FromDate@1007 : Date;
      ToDate@1008 : Date;
    BEGIN
      NoOfRecs := Vend.COUNT;
      if Vend.FIND('-') then
        repeat
          RecCount := RecCount + 1;
          Window.UPDATE(5,Vend."No.");
          Window.UPDATE(6,ROUND(10000 * RecCount / NoOfRecs,1));
          VendContactNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Vendor,Vend."No.");
          if VendContactNo <> '' then begin
            Vend.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            if ToDate < FromDate then
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
                STRSUBSTNO(Text003,
                  ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
                  ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Vend.SETRANGE("Date Filter",FromDate,ToDate);
            case ProfileQuestionnaireLine."Vendor Class. Field" of
              ProfileQuestionnaireLine."Vendor Class. Field"::"Purchase (LCY)":
                begin
                  Vend.CALCFIELDS("Purchases (LCY)");
                  Vend."Purchases (LCY)" := Vend."Purchases (LCY)";
                  InsertContactValue(ProfileQuestionnaireLine,VendContactNo,Vend."Purchases (LCY)",0D,0);
                end;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Purchase Frequency (Invoices/Year)":
                begin
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  NoOfInvoices := VendLedgEntry.COUNT;
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,VendContactNo,NoOfInvoices / NoOfYears,0D,0);
                end;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Avg. Ticket Size (LCY)":
                begin
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  NoOfInvoices := VendLedgEntry.COUNT;
                  if NoOfInvoices <> 0 then begin
                    VendLedgEntry.CALCSUMS("Purchase (LCY)");
                    VendLedgEntry."Purchase (LCY)" := -VendLedgEntry."Purchase (LCY)";
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,VendLedgEntry."Purchase (LCY)" / NoOfInvoices,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                end;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Discount (%)":
                begin
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  if VendLedgEntry.FIND('-') then begin
                    VendLedgEntry.CALCSUMS("Purchase (LCY)");
                    VendLedgEntry."Purchase (LCY)" := -VendLedgEntry."Purchase (LCY)";
                    ValueEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Posting Date");
                    ValueEntry.SETRANGE("Source Type",ValueEntry."Source Type"::Vendor);
                    ValueEntry.SETRANGE("Source No.",Vend."No.");
                    ValueEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                    ValueEntry.CALCSUMS("Discount Amount");
                    if (VendLedgEntry."Purchase (LCY)" + ValueEntry."Discount Amount") <> 0 then
                      InsertContactValue(
                        ProfileQuestionnaireLine,VendContactNo,
                        100 * ValueEntry."Discount Amount" /
                        (VendLedgEntry."Purchase (LCY)" + ValueEntry."Discount Amount"),0D,0)
                    else
                      InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                end;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Avg. Overdue (Day)":
                begin
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  VendLedgEntry.SETRANGE(Open,false);
                  NoOfInvoices := VendLedgEntry.COUNT;
                  if NoOfInvoices <> 0 then begin
                    DaysOverdue := 0;
                    VendLedgEntry.FIND('-');
                    repeat
                      if VendLedgEntry."Closed at Date" > VendLedgEntry."Due Date" then
                        DaysOverdue := DaysOverdue + (VendLedgEntry."Closed at Date" - VendLedgEntry."Due Date")
                      else
                        if VendLedgEntry."Closed at Date" = 0D then begin
                          VendLedgEntry2.RESET;
                          VendLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                          VendLedgEntry2.SETRANGE("Document Type",VendLedgEntry2."Document Type"::Payment);
                          VendLedgEntry2.SETRANGE("Closed by Entry No.",VendLedgEntry."Entry No.");
                          if VendLedgEntry2.FINDFIRST and
                             (VendLedgEntry2."Closed at Date" > VendLedgEntry."Due Date")
                          then
                            DaysOverdue := DaysOverdue + (VendLedgEntry2."Closed at Date" - VendLedgEntry."Due Date");
                        end;
                    until VendLedgEntry.NEXT = 0;
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,DaysOverdue / NoOfInvoices,0D,0);
                  end else
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                end;
            end;
          end;
        until Vend.NEXT = 0
    END;

    LOCAL PROCEDURE FindContactValues@9(ProfileQuestionnaireLine@1007 : Record "Profile Questionnaire Line");
    VAR
      Cont@1000 : Record Contact;
      ContNo@1001 : Code[20];
      NoOfYears@1002 : Decimal;
      WonCount@1003 : Integer;
      LostCount@1004 : Integer;
      FromDate@1005 : Date;
      ToDate@1006 : Date;
    BEGIN
      NoOfRecs := Cont.COUNT;
      if Cont.FIND('-') then
        repeat
          RecCount := RecCount + 1;
          Window.UPDATE(5,Cont."No.");
          Window.UPDATE(6,ROUND(10000 * RecCount / NoOfRecs,1));
          ContNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Contact,Cont."No.");
          if ContNo <> '' then begin
            Cont.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            if ToDate < FromDate then
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
                STRSUBSTNO(Text003,
                  ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
                  ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Cont.SETRANGE("Date Filter",FromDate,ToDate);
            case ProfileQuestionnaireLine."Contact Class. Field" of
              ProfileQuestionnaireLine."Contact Class. Field"::"Interaction Quantity":
                begin
                  Cont.CALCFIELDS("No. of Interactions");
                  InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."No. of Interactions",0D,0);
                end;
              ProfileQuestionnaireLine."Contact Class. Field"::"Interaction Frequency (No./Year)":
                begin
                  Cont.CALCFIELDS("No. of Interactions");
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."No. of Interactions" / NoOfYears,0D,0);
                end;
              ProfileQuestionnaireLine."Contact Class. Field"::"Avg. Interaction Cost (LCY)":
                begin
                  Cont.CALCFIELDS("No. of Interactions","Cost (LCY)");
                  if Cont."No. of Interactions" <> 0 then
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."Cost (LCY)" / Cont."No. of Interactions",0D,0)
                  else
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                end;
              ProfileQuestionnaireLine."Contact Class. Field"::"Avg. Interaction Duration (Min.)":
                begin
                  Cont.CALCFIELDS("No. of Interactions","Duration (Min.)");
                  if Cont."No. of Interactions" <> 0 then
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."Duration (Min.)" / Cont."No. of Interactions",0D,0)
                  else
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                end;
              ProfileQuestionnaireLine."Contact Class. Field"::"Opportunity Won (%)":
                begin
                  Cont.SETRANGE("Action Taken Filter",Cont."Action Taken Filter"::Won);
                  Cont.CALCFIELDS("No. of Opportunities");
                  WonCount := Cont."No. of Opportunities";
                  Cont.SETRANGE("Action Taken Filter",Cont."Action Taken Filter"::Lost);
                  Cont.CALCFIELDS("No. of Opportunities");
                  LostCount := Cont."No. of Opportunities";
                  if (LostCount + WonCount) <> 0 then
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",100 * WonCount / (LostCount + WonCount),0D,0)
                  else
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                end;
            end;
          end;
        until Cont.NEXT = 0
    END;

    LOCAL PROCEDURE ContactNo@11(ProfileQuestionnaireLine@1005 : Record "Profile Questionnaire Line";TableID@1001 : Integer;No@1002 : Code[20]) ContactNo@1000 : Code[20];
    VAR
      ContBusRel@1003 : Record "Contact Business Relation";
      Cont@1004 : Record Contact;
      ProfileQuestnHeader@1006 : Record "Profile Questionnaire Header";
    BEGIN
      ProfileQuestnHeader.GET(ProfileQuestionnaireLine."Profile Questionnaire Code");
      if TableID = DATABASE::Contact then
        ContactNo := No
      else
        with ContBusRel do begin
          RESET;
          SETCURRENTKEY("Link to Table","No.");
          case TableID of
            DATABASE::Customer:
              SETRANGE("Link to Table","Link to Table"::Customer);
            DATABASE::Vendor:
              SETRANGE("Link to Table","Link to Table"::Vendor);
          end;
          SETRANGE("No.",No);
          if FINDFIRST then
            ContactNo := "Contact No."
          else
            exit('');
        end;

      Cont.GET(ContactNo);
      if (ProfileQuestnHeader."Contact Type" = ProfileQuestnHeader."Contact Type"::Companies) and
         (Cont.Type <> Cont.Type::Company)
      then
        exit('');

      if ProfileQuestnHeader."Business Relation Code" = '' then
        exit(ContactNo);

      ContBusRel.RESET;
      if TableID = DATABASE::Contact then
        ContBusRel.SETRANGE("Contact No.",Cont."Company No.")
      else
        ContBusRel.SETRANGE("Contact No.",ContactNo);
      ContBusRel.SETRANGE("Business Relation Code",ProfileQuestnHeader."Business Relation Code");
      if not ContBusRel.ISEMPTY then
        exit(ContactNo);
      ContactNo := '';
    END;

    LOCAL PROCEDURE InsertContactValue@12(ProfileQuestionnaireLine@1002 : Record "Profile Questionnaire Line";ContactNo@1000 : Code[20];Value@1001 : Decimal;UpdateDate@1003 : Date;QuestionsAnsweredPrc@1004 : Decimal);
    BEGIN
      ContactValue.INIT;
      ContactValue."Contact No." := ContactNo;
      if ProfileQuestionnaireLine."Classification Method" = ProfileQuestionnaireLine."Classification Method"::"Defined Value" then
        ContactValue.Value := ROUND(Value,1 / POWER(10,ProfileQuestionnaireLine."No. of Decimals"))
      else
        ContactValue.Value := Value;
      ContactValue."Last Date Updated" := UpdateDate;
      ContactValue."Questions Answered (%)" := QuestionsAnsweredPrc;
      ContactValue.INSERT;
      TotalValue := TotalValue + ContactValue.Value;
    END;

    LOCAL PROCEDURE MarkByDefinedValue@5(ProfileQuestnLineQuestion@1001 : Record "Profile Questionnaire Line";ProfileQuestnLineAnswer@1000 : Record "Profile Questionnaire Line");
    BEGIN
      ContactValue.RESET;
      if ContactValue.FIND('-') then
        repeat
          if InRange(ContactValue.Value,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") then
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)")
        until ContactValue.NEXT = 0;
    END;

    LOCAL PROCEDURE MarkByPercentageOfValue@6(ProfileQuestnLineQuestion@1002 : Record "Profile Questionnaire Line";ProfileQuestnLineAnswer@1003 : Record "Profile Questionnaire Line");
    VAR
      Prc@1001 : Decimal;
    BEGIN
      ContactValue.RESET;
      ContactValue.SETCURRENTKEY(Value);

      if ProfileQuestnLineQuestion."Sorting Method" = ProfileQuestnLineQuestion."Sorting Method"::" " then
        ERROR(
          Text008,
          ProfileQuestnLineQuestion.FIELDCAPTION("Sorting Method"),
          ProfileQuestnLineQuestion."Profile Questionnaire Code",
          ProfileQuestnLineQuestion.Description);

      case ProfileQuestnLineQuestion."Sorting Method" of
        ProfileQuestnLineQuestion."Sorting Method"::Descending:
          ContactValue.ASCENDING(false);
        ProfileQuestnLineQuestion."Sorting Method"::Ascending:
          ContactValue.ASCENDING(true);
      end;

      if ContactValue.FINDSET then
        repeat
          if TotalValue <> 0 then
            Prc := ROUND(100 * ContactValue.Value / TotalValue,1 / POWER(10,ProfileQuestnLineQuestion."No. of Decimals"))
          else
            Prc := 0;
          if InRange(Prc,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") then
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)");
        until ContactValue.NEXT = 0
    END;

    LOCAL PROCEDURE MarkByPercentageOfContacts@7(ProfileQuestnLineQuestion@1004 : Record "Profile Questionnaire Line";ProfileQuestnLineAnswer@1003 : Record "Profile Questionnaire Line");
    VAR
      ContactValueCount@1000 : Integer;
      RecNo@1001 : Integer;
      Prc@1002 : Decimal;
    BEGIN
      ContactValue.RESET;
      ContactValue.SETCURRENTKEY(Value);

      if ProfileQuestnLineQuestion."Sorting Method" = ProfileQuestnLineQuestion."Sorting Method"::" " then
        ERROR(
          Text008,
          ProfileQuestnLineQuestion.FIELDCAPTION("Sorting Method"),
          ProfileQuestnLineQuestion."Profile Questionnaire Code",
          ProfileQuestnLineQuestion.Description);

      case ProfileQuestnLineQuestion."Sorting Method" of
        ProfileQuestnLineQuestion."Sorting Method"::Descending:
          ContactValue.ASCENDING(false);
        ProfileQuestnLineQuestion."Sorting Method"::Ascending:
          ContactValue.ASCENDING(true);
      end;

      if ContactValue.FIND('-') then begin
        ContactValueCount := ContactValue.COUNT;
        RecNo := 0;
        repeat
          RecNo := RecNo + 1;
          Prc := ROUND(100 * RecNo / ContactValueCount,1 / POWER(10,ProfileQuestnLineQuestion."No. of Decimals"));
          if InRange(Prc,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") then
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)")
        until ContactValue.NEXT = 0
      end;
    END;

    LOCAL PROCEDURE InRange@3(Value@1000 : Decimal;FromValue@1001 : Decimal;ToValue@1002 : Decimal) : Boolean;
    BEGIN
      if (FromValue <> 0) and (ToValue <> 0) and (Value >= FromValue) and (Value <= ToValue) then
        exit(true);
      if (FromValue <> 0) and (ToValue = 0) and (Value >= FromValue) then
        exit(true);
      if (FromValue = 0) and (ToValue <> 0) and (Value <= ToValue) then
        exit(true);
    END;

    LOCAL PROCEDURE MarkContact@10(ProfileQuestnLineQuestion@1006 : Record "Profile Questionnaire Line";ProfileQuestnLineAnswer@1004 : Record "Profile Questionnaire Line";ContNo@1000 : Code[20];UpdateDate@1007 : Date;QuestionsAnsweredPrc@1008 : Decimal);
    VAR
      Cont@1001 : Record Contact;
      ContPers@1002 : Record Contact;
      ContProfileAnswer@1003 : Record "Contact Profile Answer";
      ProfileQuestnHeader2@1005 : Record "Profile Questionnaire Header";
    BEGIN
      ProfileQuestnHeader2.GET(ProfileQuestnLineQuestion."Profile Questionnaire Code");

      Cont.GET(ContNo);
      if (Cont.Type = Cont.Type::Company) and
         (ProfileQuestnLineQuestion."Contact Class. Field" = ProfileQuestnLineQuestion."Contact Class. Field"::" ") and
         (ProfileQuestnHeader2."Contact Type" <> ProfileQuestnHeader2."Contact Type"::Companies)
      then begin
        ContPers.RESET;
        ContPers.SETCURRENTKEY("Company No.");
        ContPers.SETRANGE("Company No.",Cont."No.");
        ContPers.SETRANGE(Type,Cont.Type::Person);
        if ContPers.FIND('-') then
          repeat
            MarkContact(ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContPers."No.",UpdateDate,QuestionsAnsweredPrc);
          until ContPers.NEXT = 0
      end;

      if (ProfileQuestnHeader2."Contact Type" = ProfileQuestnHeader2."Contact Type"::People) and
         (Cont.Type <> Cont.Type::Person)
      then
        exit;
      if (ProfileQuestnHeader2."Contact Type" = ProfileQuestnHeader2."Contact Type"::Companies) and
         (Cont.Type <> Cont.Type::Company)
      then
        exit;

      ContProfileAnswer.INIT;
      ContProfileAnswer."Contact No." := Cont."No.";
      ContProfileAnswer."Profile Questionnaire Code" := ProfileQuestnLineAnswer."Profile Questionnaire Code";
      ContProfileAnswer."Line No." := ProfileQuestnLineAnswer."Line No.";
      ContProfileAnswer."Contact Company No." := Cont."Company No.";
      ContProfileAnswer."Profile Questionnaire Priority" := ProfileQuestnHeader2.Priority;
      ContProfileAnswer."Answer Priority" := ProfileQuestnLineAnswer.Priority;
      ContProfileAnswer."Questions Answered (%)" := QuestionsAnsweredPrc;
      if UpdateDate = 0D then
        ContProfileAnswer."Last Date Updated" := TODAY
      else
        ContProfileAnswer."Last Date Updated" := UpdateDate;
      ContProfileAnswer.INSERT;
    END;

    PROCEDURE UpdateRating@4(UpdateContNo@1012 : Code[20]);
    VAR
      ProfileQuestnLine@1000 : Record "Profile Questionnaire Line";
      ProfileQuestnLine2@1001 : Record "Profile Questionnaire Line";
      Rating@1005 : Record Rating;
      RatingQuestion@1004 : Record Rating;
      Cont@1007 : Record Contact;
      Leaf@1006 : Boolean;
      Changed@1003 : Boolean;
      ContNo@1008 : Code[20];
      NoOfRatingLines@1002 : Integer;
      RatingLineNo@1011 : Integer;
      Points@1015 : Integer;
      UpdateDate@1013 : Date;
      QuestionsAnsweredPrc@1014 : Decimal;
    BEGIN
      // Mark all non-calculated rating questions
      ProfileQuestnLine.RESET;
      ProfileQuestnLine.SETRANGE("Contact Class. Field",ProfileQuestnLine."Contact Class. Field"::Rating);
      if "Profile Questionnaire Header".Code <> '' then
        ProfileQuestnLine.SETRANGE("Profile Questionnaire Code","Profile Questionnaire Header".Code);
      if not ProfileQuestnLine.FIND('-') then
        exit;
      repeat
        ProfileQuestnLine.MARK(true);
        NoOfRatingLines := NoOfRatingLines + 1;
      until ProfileQuestnLine.NEXT = 0;
      ProfileQuestnLine.MARKEDONLY(true);

      // Calculate Ratings
      repeat
        Changed := false;
        if ProfileQuestnLine.FIND('-') then
          repeat
            Leaf := true;
            Rating.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
            Rating.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine."Line No.");
            if Rating.FIND('-') then
              repeat
                ProfileQuestnLine2.GET(Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.");
                RatingQuestion.SETRANGE("Profile Questionnaire Code",Rating."Rating Profile Quest. Code");
                RatingQuestion.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine2.FindQuestionLine);
                if RatingQuestion.FINDFIRST then begin
                  ProfileQuestnLine2 := ProfileQuestnLine;
                  ProfileQuestnLine.GET(
                    RatingQuestion."Profile Questionnaire Code",RatingQuestion."Profile Questionnaire Line No.");
                  if ProfileQuestnLine.MARK then
                    Leaf := false;
                  ProfileQuestnLine := ProfileQuestnLine2;
                end;
              until (Rating.NEXT = 0) or (not Leaf);

            // Calculate Rating
            if Leaf then begin
              if UpdateContNo = '' then begin
                RatingLineNo := RatingLineNo + 1;
                Window.UPDATE(1,ProfileQuestnLine."Profile Questionnaire Code");
                Window.UPDATE(3,ProfileQuestnLine."Line No.");
                Window.UPDATE(4,ROUND(10000 * RatingLineNo / NoOfRatingLines,1));
                NoOfRecs := Cont.COUNT;
                RecCount := 0;
                TotalValue := 0;
              end;
              ContactValue.DELETEALL;
              AnswersExists(ProfileQuestnLine,UpdateContNo,true);
              if UpdateContNo <> '' then
                Cont.SETRANGE("No.",UpdateContNo);
              if Cont.FIND('-') then
                repeat
                  if UpdateContNo = '' then begin
                    RecCount := RecCount + 1;
                    Window.UPDATE(5,Cont."No.");
                    Window.UPDATE(6,ROUND(10000 * RecCount / NoOfRecs,1));
                  end;
                  ContNo := ContactNo(ProfileQuestnLine,DATABASE::Contact,Cont."No.");
                  if ContNo <> '' then begin
                    Points := FindContactRatingValue(ProfileQuestnLine,Cont,UpdateDate,QuestionsAnsweredPrc);
                    if QuestionsAnsweredPrc >= ProfileQuestnLine."Min. % Questions Answered" then
                      InsertContactValue(ProfileQuestnLine,Cont."No.",Points,UpdateDate,QuestionsAnsweredPrc);
                  end;
                until Cont.NEXT = 0;
              MarkContactByMethod(ProfileQuestnLine,UpdateContNo);
              ProfileQuestnLine.MARK(false);
              Changed := true;
            end;
          until ProfileQuestnLine.NEXT = 0;
      until Changed = false;

      if ProfileQuestnLine.FIND('-') then
        ERROR(Text004);
    END;

    LOCAL PROCEDURE FindContactRatingValue@14(ProfileQuestnLine@1000 : Record "Profile Questionnaire Line";Cont@1001 : Record Contact;VAR UpdateDate@1005 : Date;VAR QuestionsAnsweredPrc@1008 : Decimal) Value@1004 : Decimal;
    VAR
      Rating@1002 : Record Rating;
      ContProfileAnswer@1003 : Record "Contact Profile Answer";
      ProfileQuestionnaireLine@1009 : Record "Profile Questionnaire Line";
      TempProfileQuestnLine@1006 : TEMPORARY Record "Profile Questionnaire Line";
      NoOfAnsweredQuestions@1007 : Integer;
    BEGIN
      UpdateDate := TODAY;
      Rating.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
      Rating.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine."Line No.");
      if Rating.FIND('-') then
        repeat
          ProfileQuestionnaireLine.GET(Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.");
          ProfileQuestionnaireLine.GET(
            ProfileQuestionnaireLine."Profile Questionnaire Code",ProfileQuestionnaireLine.FindQuestionLine);
          if not TempProfileQuestnLine.GET(
               ProfileQuestionnaireLine."Profile Questionnaire Code",ProfileQuestionnaireLine."Line No.")
          then begin
            TempProfileQuestnLine.INIT;
            TempProfileQuestnLine."Profile Questionnaire Code" := ProfileQuestionnaireLine."Profile Questionnaire Code";
            TempProfileQuestnLine."Line No." := ProfileQuestionnaireLine."Line No.";
            TempProfileQuestnLine.INSERT;
            if AnswersExists(ProfileQuestionnaireLine,Cont."No.",false) then
              NoOfAnsweredQuestions := NoOfAnsweredQuestions + 1;
          end;

          if ContProfileAnswer.GET(
               Cont."No.",Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.")
          then begin
            Value := Value + Rating.Points;
            if ContProfileAnswer."Last Date Updated" < UpdateDate then
              UpdateDate := ContProfileAnswer."Last Date Updated";
          end;
        until Rating.NEXT = 0;

      if TempProfileQuestnLine.COUNT <> 0 then
        QuestionsAnsweredPrc := NoOfAnsweredQuestions / TempProfileQuestnLine.COUNT * 100
      else
        QuestionsAnsweredPrc := 0;
    END;

    LOCAL PROCEDURE MarkContactByMethod@16(ProfileQuestnLine@1000 : Record "Profile Questionnaire Line";UpdateContNo@1002 : Code[20]);
    VAR
      ProfileQuestnLine2@1001 : Record "Profile Questionnaire Line";
    BEGIN
      ProfileQuestnLine2.RESET;
      ProfileQuestnLine2 := ProfileQuestnLine;
      ProfileQuestnLine2.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
      if ProfileQuestnLine2.FIND('>') and
         (ProfileQuestnLine2.Type = ProfileQuestnLine2.Type::Answer)
      then
        repeat
          if UpdateContNo = '' then
            Window.UPDATE(3,ProfileQuestnLine2."Line No.");
          case ProfileQuestnLine."Classification Method" of
            ProfileQuestnLine."Classification Method"::"Defined Value":
              MarkByDefinedValue(ProfileQuestnLine,ProfileQuestnLine2);
            ProfileQuestnLine."Classification Method"::"Percentage of Value":
              MarkByPercentageOfValue(ProfileQuestnLine,ProfileQuestnLine2);
            ProfileQuestnLine."Classification Method"::"Percentage of Contacts":
              MarkByPercentageOfContacts(ProfileQuestnLine,ProfileQuestnLine2);
          end;
        until (ProfileQuestnLine2.NEXT = 0) or
              (ProfileQuestnLine2.Type = ProfileQuestnLine2.Type::Question);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

