OBJECT Codeunit 5459 JSON Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JsonArray@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";

    [External]
    PROCEDURE InitializeCollection@25(JSONString@1000 : Text);
    BEGIN
      InitializeCollectionFromString(JSONString);
    END;

    [External]
    PROCEDURE InitializeEmptyCollection@7();
    BEGIN
      JsonArray := JsonArray.JArray;
    END;

    [External]
    PROCEDURE InitializeObject@36(JSONString@1000 : Text);
    BEGIN
      InitializeObjectFromString(JSONString);
    END;

    [External]
    PROCEDURE InitializeObjectFromJObject@12(NewJsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    BEGIN
      JsonObject := NewJsonObject;
    END;

    [External]
    PROCEDURE InitializeCollectionFromJArray@15(NewJsonArray@1000 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray");
    BEGIN
      JsonArray := NewJsonArray;
    END;

    [External]
    PROCEDURE InitializeEmptyObject@62();
    BEGIN
      JsonObject := JsonObject.JObject;
    END;

    LOCAL PROCEDURE InitializeCollectionFromString@11(JSONString@1000 : Text);
    BEGIN
      CLEAR(JsonArray);
      if JSONString <> '' then
        JsonArray := JsonArray.Parse(JSONString)
      else
        InitializeEmptyCollection;
    END;

    LOCAL PROCEDURE InitializeObjectFromString@37(JSONString@1000 : Text);
    BEGIN
      CLEAR(JsonObject);
      if JSONString <> '' then
        JsonObject := JsonObject.Parse(JSONString)
      else
        InitializeEmptyObject;
    END;

    [External]
    PROCEDURE GetJSONObject@1(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    BEGIN
      JObject := JsonObject;
    END;

    [External]
    PROCEDURE GetJsonArray@20(VAR JArray@1000 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray");
    BEGIN
      JArray := JsonArray;
    END;

    [External]
    PROCEDURE GetJObjectFromCollectionByIndex@13(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";Index@1002 : Integer) : Boolean;
    BEGIN
      if (GetCollectionCount = 0) or (GetCollectionCount <= Index) then
        exit(false);

      JObject := JsonArray.Item(Index);
      exit(not ISNULL(JObject))
    END;

    [External]
    PROCEDURE GetJObjectFromCollectionByPropertyValue@2(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1002 : Text;value@1003 : Text) : Boolean;
    VAR
      IEnumerable@1000 : DotNet "'mscorlib'.System.Collections.Generic.IEnumerable`1";
      IEnumerator@1004 : DotNet "'mscorlib'.System.Collections.Generic.IEnumerator`1";
    BEGIN
      CLEAR(JObject);
      IEnumerable := JsonArray.SelectTokens(STRSUBSTNO('$[?(@.%1 == ''%2'')]',propertyName,value),false);
      IEnumerator := IEnumerable.GetEnumerator;

      if IEnumerator.MoveNext then begin
        JObject := IEnumerator.Current;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE GetPropertyValueFromJObjectByName@14(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1000 : Text;VAR value@1003 : Variant) : Boolean;
    VAR
      JProperty@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      JToken@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CLEAR(value);
      if JObject.TryGetValue(propertyName,JToken) then begin
        JProperty := JObject.Property(propertyName);
        value := JProperty.Value;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE GetPropertyValueFromJObjectByPathSetToFieldRef@28(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyPath@1001 : Text;VAR FieldRef@1000 : FieldRef) : Boolean;
    VAR
      JProperty@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      Value@1005 : Variant;
      DecimalVal@1004 : Decimal;
      BoolVal@1007 : Boolean;
      GuidVal@1008 : GUID;
      DateVal@1009 : Date;
      Success@1006 : Boolean;
    BEGIN
      Success := false;
      JProperty := JObject.SelectToken(propertyPath);

      if ISNULL(JProperty) then
        exit(false);

      Value := FORMAT(JProperty.Value);

      case FORMAT(FieldRef.TYPE) of
        'Integer',
        'Decimal':
          begin
            Success := EVALUATE(DecimalVal,Value,9);
            FieldRef.VALUE(DecimalVal);
          end;
        'Date':
          begin
            Success := EVALUATE(DateVal,Value,9);
            FieldRef.VALUE(DateVal);
          end;
        'Boolean':
          begin
            Success := EVALUATE(BoolVal,Value,9);
            FieldRef.VALUE(BoolVal);
          end;
        'GUID':
          begin
            Success := EVALUATE(GuidVal,Value);
            FieldRef.VALUE(GuidVal);
          end;
        'Text',
        'Code':
          begin
            FieldRef.VALUE(COPYSTR(Value,1,FieldRef.LENGTH));
            Success := true;
          end;
      end;

      exit(Success);
    END;

    [External]
    PROCEDURE GetPropertyValueFromJObjectByPath@6(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1000 : Text;VAR value@1003 : Variant) : Boolean;
    VAR
      containerJObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      propertyName@1001 : Text;
    BEGIN
      CLEAR(value);
      DecomposeQualifiedPathToContainerObjectAndPropertyName(JObject,fullyQualifiedPropertyName,containerJObject,propertyName);
      if ISNULL(containerJObject) then
        exit(false);

      exit(GetPropertyValueFromJObjectByName(containerJObject,propertyName,value));
    END;

    [External]
    PROCEDURE GetStringPropertyValueFromJObjectByName@16(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1000 : Text;VAR value@1003 : Text) : Boolean;
    VAR
      VariantValue@1001 : Variant;
    BEGIN
      CLEAR(value);
      if GetPropertyValueFromJObjectByName(JObject,propertyName,VariantValue) then begin
        value := FORMAT(VariantValue);
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetStringPropertyValueFromJObjectByPath@10(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1000 : Text;VAR value@1003 : Text) : Boolean;
    VAR
      VariantValue@1001 : Variant;
    BEGIN
      CLEAR(value);
      if GetPropertyValueFromJObjectByPath(JObject,fullyQualifiedPropertyName,VariantValue) then begin
        value := FORMAT(VariantValue);
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetEnumPropertyValueFromJObjectByName@32(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR value@1000 : Option);
    VAR
      StringValue@1004 : Text;
    BEGIN
      GetStringPropertyValueFromJObjectByName(JObject,propertyName,StringValue);
      EVALUATE(value,StringValue,0);
    END;

    [External]
    PROCEDURE GetBoolPropertyValueFromJObjectByName@93(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR value@1000 : Boolean) : Boolean;
    VAR
      StringValue@1004 : Text;
    BEGIN
      if GetStringPropertyValueFromJObjectByName(JObject,propertyName,StringValue) then begin
        EVALUATE(value,StringValue,2);
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetArrayPropertyValueFromJObjectByName@18(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR JArray@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray") : Boolean;
    VAR
      JProperty@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      JToken@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CLEAR(JArray);
      if JObject.TryGetValue(propertyName,JToken) then begin
        JProperty := JObject.Property(propertyName);
        JArray := JProperty.Value;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetObjectPropertyValueFromJObjectByName@30(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR JSubObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject") : Boolean;
    VAR
      JProperty@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      JToken@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      CLEAR(JSubObject);
      if JObject.TryGetValue(propertyName,JToken) then begin
        JProperty := JObject.Property(propertyName);
        JSubObject := JProperty.Value;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetDecimalPropertyValueFromJObjectByName@23(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR value@1000 : Decimal) : Boolean;
    VAR
      StringValue@1003 : Text;
    BEGIN
      if GetStringPropertyValueFromJObjectByName(JObject,propertyName,StringValue) then begin
        EVALUATE(value,StringValue);
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetGuidPropertyValueFromJObjectByName@27(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;VAR value@1000 : GUID) : Boolean;
    VAR
      StringValue@1003 : Text;
    BEGIN
      if GetStringPropertyValueFromJObjectByName(JObject,propertyName,StringValue) then begin
        EVALUATE(value,StringValue);
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE GetValueFromJObject@19(JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR value@1000 : Variant);
    VAR
      JValue@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JValue";
    BEGIN
      CLEAR(value);
      JValue := JObject;
      value := JValue.Value;
    END;

    [External]
    PROCEDURE GetStringValueFromJObject@21(JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR value@1000 : Text);
    VAR
      VariantValue@1002 : Variant;
    BEGIN
      CLEAR(value);
      GetValueFromJObject(JObject,VariantValue);
      value := FORMAT(VariantValue);
    END;

    [External]
    PROCEDURE AddJArrayToJObject@51(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;value@1000 : Variant);
    VAR
      JArray2@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JProperty@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
    BEGIN
      JArray2 := value;
      JObject.Add(JProperty.JProperty(propertyName,JArray2));
    END;

    [External]
    PROCEDURE AddJObjectToJObject@35(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1000 : Text;value@1003 : Variant);
    VAR
      JObject2@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JToken@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      ValueText@1006 : Text;
    BEGIN
      JObject2 := value;
      ValueText := FORMAT(value);
      JObject.Add(propertyName,JToken.Parse(ValueText));
    END;

    [External]
    PROCEDURE AddJObjectToJArray@26(VAR JArray@1000 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";value@1001 : Variant);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JObject := value;
      JArray.Add(JObject.DeepClone);
    END;

    [External]
    PROCEDURE AddJPropertyToJObject@3(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1000 : Text;value@1003 : Variant);
    VAR
      JProperty@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      ValueText@1004 : Text;
    BEGIN
      if value.ISINTEGER then
        JProperty := JProperty.JProperty(propertyName,value)
      else begin
        ValueText := FORMAT(value,0,9);
        JProperty := JProperty.JProperty(propertyName,ValueText);
      end;

      JObject.Add(JProperty);
    END;

    [External]
    PROCEDURE AddJValueToJObject@22(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";value@1003 : Variant);
    VAR
      JValue@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JValue";
    BEGIN
      JObject := JValue.JValue(value);
    END;

    [External]
    PROCEDURE AddJObjectToCollection@4(JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    BEGIN
      JsonArray.Add(JObject.DeepClone);
    END;

    [External]
    PROCEDURE AddJArrayContentToCollection@17(JArray@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    BEGIN
      JsonArray.Merge(JArray.DeepClone);
    END;

    [External]
    PROCEDURE ReplaceOrAddJPropertyInJObject@44(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;value@1002 : Variant) : Boolean;
    VAR
      JProperty@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      OldProperty@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      oldValue@1004 : Variant;
    BEGIN
      JProperty := JObject.Property(propertyName);
      if not ISNULL(JProperty) then begin
        OldProperty := JObject.Property(propertyName);
        oldValue := OldProperty.Value;
        JProperty.Replace(JProperty.JProperty(propertyName,value));
        exit(FORMAT(oldValue) <> FORMAT(value));
      end;

      AddJPropertyToJObject(JObject,propertyName,value);
      exit(true);
    END;

    [External]
    PROCEDURE ReplaceOrAddDescendantJPropertyInJObject@5(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1003 : Text;value@1000 : Variant) : Boolean;
    VAR
      containerJObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      propertyName@1006 : Text;
    BEGIN
      DecomposeQualifiedPathToContainerObjectAndPropertyName(JObject,fullyQualifiedPropertyName,containerJObject,propertyName);
      exit(ReplaceOrAddJPropertyInJObject(containerJObject,propertyName,value));
    END;

    [External]
    PROCEDURE GetCollectionCount@24() : Integer;
    BEGIN
      exit(JsonArray.Count);
    END;

    [External]
    PROCEDURE WriteCollectionToString@9() : Text;
    BEGIN
      exit(JsonArray.ToString);
    END;

    [External]
    PROCEDURE WriteObjectToString@63() : Text;
    BEGIN
      exit(JsonObject.ToString);
    END;

    LOCAL PROCEDURE GetLastIndexOfPeriod@31(String@1000 : Text) LastIndex : Integer;
    VAR
      Index@1001 : Integer;
    BEGIN
      Index := STRPOS(String,'.');
      LastIndex := Index;
      while Index > 0 do begin
        String := COPYSTR(String,Index + 1);
        Index := STRPOS(String,'.');
        LastIndex += Index;
      end;
    END;

    LOCAL PROCEDURE GetSubstringToLastPeriod@33(String@1000 : Text) : Text;
    VAR
      Index@1001 : Integer;
    BEGIN
      Index := GetLastIndexOfPeriod(String);
      if Index > 0 then
        exit(COPYSTR(String,1,Index - 1));
    END;

    LOCAL PROCEDURE DecomposeQualifiedPathToContainerObjectAndPropertyName@8(VAR JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1000 : Text;VAR containerJObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR propertyName@1001 : Text);
    VAR
      containerJToken@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      containingPath@1005 : Text;
    BEGIN
      CLEAR(containerJObject);
      propertyName := '';

      containingPath := GetSubstringToLastPeriod(fullyQualifiedPropertyName);
      containerJToken := JObject.SelectToken(containingPath);
      if ISNULL(containerJToken) then
        exit;

      containerJObject := containerJToken;
      if containingPath <> '' then
        propertyName := COPYSTR(fullyQualifiedPropertyName,STRLEN(containingPath) + 2)
      else
        propertyName := fullyQualifiedPropertyName;
    END;

    BEGIN
    END.
  }
}

