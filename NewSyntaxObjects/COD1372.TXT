OBJECT Codeunit 1372 Purchase Batch Post Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Purchase Header";
    EventSubscriberInstance=Manual;
    Permissions=TableData "Batch Processing Parameter"=rimd,
                TableData "Batch Processing Parameter Map"=rimd;
    OnRun=VAR
            PurchaseHeader@1000 : Record "Purchase Header";
            PurchaseBatchPostMgt@1001 : Codeunit "Purchase Batch Post Mgt.";
          BEGIN
            PurchaseHeader.COPY(Rec);

            BINDSUBSCRIPTION(PurchaseBatchPostMgt);
            PurchaseBatchPostMgt.SetPostingCodeunitId(PostingCodeunitId);
            PurchaseBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
            PurchaseBatchPostMgt.Code(PurchaseHeader);

            Rec := PurchaseHeader;
          END;

  }
  CODE
  {
    VAR
      BatchProcessingMgt@1001 : Codeunit "Batch Processing Mgt.";
      PostingCodeunitId@1000 : Integer;
      PostingDateIsNotSetErr@1002 : TextConst 'ENU=Enter the posting date.';

    PROCEDURE RunBatch@10(VAR PurchaseHeader@1009 : Record "Purchase Header";ReplacePostingDate@1000 : Boolean;PostingDate@1001 : Date;ReplaceDocumentDate@1002 : Boolean;CalcInvoiceDiscount@1003 : Boolean;Receive@1004 : Boolean;Invoice@1005 : Boolean);
    VAR
      BatchPostParameterTypes@1006 : Codeunit "Batch Post Parameter Types";
      PurchaseBatchPostMgt@1008 : Codeunit "Purchase Batch Post Mgt.";
    BEGIN
      if ReplacePostingDate and (PostingDate = 0D) then
        ERROR(PostingDateIsNotSetErr);

      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.Invoice,Invoice);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.Receive,Receive);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.CalcInvoiceDiscount,CalcInvoiceDiscount);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.PostingDate,PostingDate);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate);

      PurchaseBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
      PurchaseBatchPostMgt.RUN(PurchaseHeader);
    END;

    PROCEDURE RunWithUI@14(VAR PurchaseHeader@1000 : Record "Purchase Header";TotalCount@1001 : Integer;Question@1002 : Text);
    VAR
      TempErrorMessage@1005 : TEMPORARY Record "Error Message";
      PurchaseBatchPostMgt@1003 : Codeunit "Purchase Batch Post Mgt.";
      ErrorMessages@1004 : Page "Error Messages";
    BEGIN
      if not CONFIRM(STRSUBSTNO(Question,PurchaseHeader.COUNT,TotalCount),true) then
        exit;

      PurchaseBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
      PurchaseBatchPostMgt.RUN(PurchaseHeader);
      BatchProcessingMgt.GetErrorMessages(TempErrorMessage);

      if TempErrorMessage.FINDFIRST then begin
        ErrorMessages.SetRecords(TempErrorMessage);
        ErrorMessages.RUN;
      end;
    END;

    PROCEDURE GetBatchProcessor@13(VAR ResultBatchProcessingMgt@1000 : Codeunit "Batch Processing Mgt.");
    BEGIN
      ResultBatchProcessingMgt := BatchProcessingMgt;
    END;

    PROCEDURE SetBatchProcessor@12(NewBatchProcessingMgt@1000 : Codeunit "Batch Processing Mgt.");
    BEGIN
      BatchProcessingMgt := NewBatchProcessingMgt;
    END;

    PROCEDURE Code@4(VAR PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      if PostingCodeunitId = 0 then
        PostingCodeunitId := CODEUNIT::"Purch.-Post";

      RecRef.GETTABLE(PurchaseHeader);

      BatchProcessingMgt.SetProcessingCodeunit(PostingCodeunitId);
      BatchProcessingMgt.BatchProcess(RecRef);

      RecRef.SETTABLE(PurchaseHeader);
    END;

    LOCAL PROCEDURE PrepareSalesHeader@6(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR BatchConfirm@1001 : Option);
    VAR
      BatchPostParameterTypes@1002 : Codeunit "Batch Post Parameter Types";
      CalcInvoiceDiscont@1004 : Boolean;
      ReplacePostingDate@1005 : Boolean;
      PostingDate@1006 : Date;
    BEGIN
      BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.CalcInvoiceDiscount,CalcInvoiceDiscont);
      BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate);
      BatchProcessingMgt.GetParameterDate(PurchaseHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);

      if CalcInvoiceDiscont then
        CalculateInvoiceDiscount(PurchaseHeader);

      PurchaseHeader.BatchConfirmUpdateDeferralDate(BatchConfirm,ReplacePostingDate,PostingDate);

      BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.Receive,PurchaseHeader.Receive);
      BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.Invoice,PurchaseHeader.Invoice);
      BatchProcessingMgt.GetParameterBoolean(PurchaseHeader.RECORDID,BatchPostParameterTypes.Ship,PurchaseHeader.Ship);

      PurchaseHeader."Print Posted Documents" := false;
    END;

    PROCEDURE SetPostingCodeunitId@9(NewPostingCodeunitId@1000 : Integer);
    BEGIN
      PostingCodeunitId := NewPostingCodeunitId;
    END;

    LOCAL PROCEDURE CalculateInvoiceDiscount@7(VAR PurchaseHeader@1001 : Record "Purchase Header");
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
      PurchCalcDiscount@1002 : Codeunit "Purch.-Calc.Discount";
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      if PurchaseLine.FINDFIRST then
        if PurchCalcDiscount.RUN(PurchaseLine) then begin
          PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
          COMMIT;
        end;
    END;

    LOCAL PROCEDURE CanPostDocument@8(VAR PurchaseHeader@1000 : Record "Purchase Header") : Boolean;
    VAR
      ApprovalsMgmt@1001 : Codeunit "Approvals Mgmt.";
    BEGIN
      if ApprovalsMgmt.IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) then
        exit(false);

      if PurchaseHeader.Status = PurchaseHeader.Status::"Pending Approval" then
        exit(false);

      if not PurchaseHeader.IsApprovedForPostingBatch then
        exit(false);

      exit(true);
    END;

    [EventSubscriber(Codeunit,1380,OnBeforeBatchProcessing)]
    LOCAL PROCEDURE PrepareSalesHeaderOnBeforeBatchProcessing@3(VAR RecRef@1000 : RecordRef;VAR BatchConfirm@1001 : Option);
    VAR
      PurchaseHeader@1002 : Record "Purchase Header";
    BEGIN
      RecRef.SETTABLE(PurchaseHeader);
      PrepareSalesHeader(PurchaseHeader,BatchConfirm);
      RecRef.GETTABLE(PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1380,OnVerifyRecord)]
    LOCAL PROCEDURE CheckPurchaseHeaderOnVerifyRecord@1(VAR RecRef@1000 : RecordRef;VAR Result@1001 : Boolean);
    VAR
      PurchaseHeader@1002 : Record "Purchase Header";
    BEGIN
      RecRef.SETTABLE(PurchaseHeader);
      Result := CanPostDocument(PurchaseHeader);
      RecRef.GETTABLE(PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1380,OnCustomProcessing)]
    LOCAL PROCEDURE HandleOnCustomProcessing@2(VAR RecRef@1000 : RecordRef;VAR Handled@1001 : Boolean);
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      PurchasesPayablesSetup@1004 : Record "Purchases & Payables Setup";
      PurchasePostViaJobQueue@1005 : Codeunit "Purchase Post via Job Queue";
    BEGIN
      RecRef.SETTABLE(PurchaseHeader);

      PurchasesPayablesSetup.GET;
      if PurchasesPayablesSetup."Post with Job Queue" then begin
        PurchasePostViaJobQueue.EnqueuePurchDoc(PurchaseHeader);
        RecRef.GETTABLE(PurchaseHeader);
        Handled := true;
      end;
    END;

    BEGIN
    END.
  }
}

