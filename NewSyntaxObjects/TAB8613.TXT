OBJECT Table 8613 Config. Package Table
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               InitPackageFields;
             END;

    OnDelete=VAR
               ConfigLine@1003 : Record "Config. Line";
               ConfigPackageField@1001 : Record "Config. Package Field";
               ConfigPackageFilter@1000 : Record "Config. Package Filter";
               ConfigTableProcessingRule@1002 : Record "Config. Table Processing Rule";
             BEGIN
               DeletePackageData;

               ConfigPackageField.SETRANGE("Package Code","Package Code");
               ConfigPackageField.SETRANGE("Table ID","Table ID");
               ConfigPackageField.DELETEALL(true);

               ConfigPackageFilter.SETRANGE("Package Code","Package Code");
               ConfigPackageFilter.SETRANGE("Table ID","Table ID");
               ConfigPackageFilter.DELETEALL;

               ConfigTableProcessingRule.SETRANGE("Package Code","Package Code");
               ConfigTableProcessingRule.SETRANGE("Table ID","Table ID");
               ConfigTableProcessingRule.DELETEALL(true);

               ConfigLine.SETRANGE("Package Code","Package Code");
               ConfigLine.SETRANGE("Table ID","Table ID");
               if ConfigLine.FINDSET(true) then
                 repeat
                   ConfigLine."Package Code" := '';
                   ConfigLine."Dimensions as Columns" := false;
                   ConfigLine.MODIFY;
                 until ConfigLine.NEXT = 0;
             END;

    OnRename=BEGIN
               ERROR(Text004);
             END;

    CaptionML=ENU=Config. Package Table;
  }
  FIELDS
  {
    { 1   ;   ;Package Code        ;Code20        ;TableRelation="Config. Package";
                                                   CaptionML=ENU=Package Code }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Table));
                                                   OnValidate=BEGIN
                                                                if ConfigMgt.IsSystemTable("Table ID") then
                                                                  ERROR(Text001,"Table ID");

                                                                if "Table ID" <> xRec."Table ID" then
                                                                  "Page ID" := ConfigMgt.FindPage("Table ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ConfigValidateMgt.LookupTable("Table ID");
                                                              if "Table ID" <> 0 then
                                                                VALIDATE("Table ID");
                                                            END;

                                                   CaptionML=ENU=Table ID;
                                                   NotBlank=true }
    { 3   ;   ;Table Name          ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE ("Object Type"=CONST(Table),
                                                                                                             "Object ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=Table Name;
                                                   Editable=false }
    { 4   ;   ;No. of Package Records;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Record" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                     "Table ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Package Records;
                                                   Editable=false }
    { 5   ;   ;No. of Package Errors;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Error" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                    "Table ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Package Errors;
                                                   Editable=false }
    { 7   ;   ;Imported Date and Time;DateTime    ;CaptionML=ENU=Imported Date and Time;
                                                   Editable=false }
    { 8   ;   ;Exported Date and Time;DateTime    ;CaptionML=ENU=Exported Date and Time;
                                                   Editable=false }
    { 9   ;   ;Comments            ;Text250       ;CaptionML=ENU=Comments }
    { 10  ;   ;Created Date and Time;DateTime     ;CaptionML=ENU=Created Date and Time }
    { 11  ;   ;Company Filter (Source Table);Text30;
                                                   FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Company Filter (Source Table) }
    { 12  ;   ;Table Caption       ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE ("Object Type"=CONST(Table),
                                                                                                                "Object ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=Table Caption;
                                                   Editable=false }
    { 13  ;   ;Data Template       ;Code10        ;TableRelation="Config. Template Header";
                                                   CaptionML=ENU=Data Template }
    { 14  ;   ;Package Processing Order;Integer   ;CaptionML=ENU=Package Processing Order;
                                                   Editable=false }
    { 15  ;   ;Page ID             ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Page));
                                                   OnLookup=BEGIN
                                                              ConfigValidateMgt.LookupPage("Page ID");
                                                              VALIDATE("Page ID");
                                                            END;

                                                   CaptionML=ENU=Page ID }
    { 16  ;   ;Processing Order    ;Integer       ;CaptionML=ENU=Processing Order }
    { 17  ;   ;No. of Fields Included;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                    "Table ID"=FIELD("Table ID"),
                                                                                                    "Include Field"=CONST(true)));
                                                   CaptionML=ENU=No. of Fields Included;
                                                   Editable=false }
    { 18  ;   ;No. of Fields Available;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                    "Table ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Fields Available;
                                                   Editable=false }
    { 19  ;   ;No. of Fields to Validate;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                    "Table ID"=FIELD("Table ID"),
                                                                                                    "Validate Field"=CONST(true)));
                                                   CaptionML=ENU=No. of Fields to Validate;
                                                   Editable=false }
    { 20  ;   ;Package Caption     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Config. Package"."Package Name" WHERE (Code=FIELD("Package Code")));
                                                   CaptionML=ENU=Package Caption;
                                                   Editable=false }
    { 21  ;   ;Imported by User ID ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserManagement@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserManagement.LookupUserID("Imported by User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Imported by User ID;
                                                   Editable=false }
    { 22  ;   ;Created by User ID  ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserManagement@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserManagement.LookupUserID("Created by User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Created by User ID;
                                                   Editable=false }
    { 24  ;   ;Dimensions as Columns;Boolean      ;OnValidate=BEGIN
                                                                if "Dimensions as Columns" then begin
                                                                  InitDimensionFields;
                                                                  UpdateDimensionsPackageData;
                                                                end else
                                                                  DeleteDimensionFields;
                                                              END;

                                                   CaptionML=ENU=Dimensions as Columns }
    { 25  ;   ;Filtered            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Config. Package Filter" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                     "Table ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=Filtered;
                                                   Editable=false }
    { 26  ;   ;Skip Table Triggers ;Boolean       ;CaptionML=ENU=Skip Table Triggers }
    { 27  ;   ;Delete Recs Before Processing;Boolean;
                                                   CaptionML=ENU=Delete Recs Before Processing }
    { 28  ;   ;Processing Report ID;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Report));
                                                   CaptionML=ENU=Processing Report ID }
    { 29  ;   ;Parent Table ID     ;Integer       ;TableRelation="Config. Package Table"."Table ID" WHERE ("Package Code"=FIELD("Package Code"),
                                                                                                           "Parent Table ID"=CONST(0));
                                                   OnValidate=VAR
                                                                ConfigPackageTableChild@1000 : Record "Config. Package Table";
                                                              BEGIN
                                                                if "Table ID" = "Parent Table ID" then
                                                                  FIELDERROR("Parent Table ID",STRSUBSTNO(CannotBeEqualToErr,FIELDCAPTION("Table ID")));

                                                                ConfigPackageTableChild.SETRANGE("Package Code","Package Code");
                                                                ConfigPackageTableChild.SETRANGE("Parent Table ID","Table ID");
                                                                if not ConfigPackageTableChild.ISEMPTY then
                                                                  FIELDERROR("Parent Table ID",STRSUBSTNO(CannotBeSetDueToRelatedTablesErr,"Table ID"));
                                                              END;

                                                   CaptionML=ENU=Parent Table ID }
    { 30  ;   ;Validated           ;Boolean       ;CaptionML=ENU=Validated }
  }
  KEYS
  {
    {    ;"Package Code","Table ID"               ;Clustered=true }
    {    ;"Package Processing Order","Processing Order" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot use system table %1 in the package.';
      Text002@1005 : TextConst 'ENU=You cannot use the Dimensions as Columns function for table %1.';
      Text003@1006 : TextConst 'ENU=The Default Dimension and Dimension Value tables must be included in the package %1 to enable this option. The missing tables will be added to the package. Do you want to continue?';
      Text004@1008 : TextConst 'ENU=You cannot rename the configuration package table.';
      Text005@1009 : TextConst 'ENU=The setup of Dimensions as Columns was canceled.';
      Text010@1003 : TextConst 'ENU=Define the drill-down page in the %1 field.';
      ConfigValidateMgt@1000 : Codeunit "Config. Validate Management";
      ConfigMgt@1002 : Codeunit "Config. Management";
      ConfigPackageMgt@1004 : Codeunit "Config. Package Management";
      HideValidationDialog@1010 : Boolean;
      i@1007 : Integer;
      CannotBeEqualToErr@1011 : TextConst '@@@=%1 - name of the field "Table ID";ENU=cannot be equal to %1.';
      CannotBeSetDueToRelatedTablesErr@1012 : TextConst '@@@=%1 - an integer value;ENU=must be 0 because there are related tables, where Parent Table ID is %1.';

    LOCAL PROCEDURE InitPackageFields@1() : Boolean;
    VAR
      ConfigPackageField@1001 : Record "Config. Package Field";
      ConfigLine@1004 : Record "Config. Line";
      Field@1000 : Record Field;
      ProcessingOrder@1002 : Integer;
      FieldsAdded@1003 : Boolean;
    BEGIN
      FieldsAdded := false;
      ConfigPackageMgt.SetFieldFilter(Field,"Table ID",0);
      if Field.FINDSET then
        repeat
          if not ConfigPackageField.GET("Package Code","Table ID",Field."No.") and
             not ConfigPackageMgt.IsDimSetIDField("Table ID",Field."No.")
          then begin
            ConfigPackageMgt.InsertPackageField(
              ConfigPackageField,"Package Code","Table ID",Field."No.",Field.FieldName,Field."Field Caption",
              true,true,false,false);
            ConfigPackageField.SETRANGE("Package Code","Package Code");
            ConfigPackageField.SETRANGE("Table ID","Table ID");
            ConfigPackageField.SETRANGE("Field ID",Field."No.");
            ConfigPackageMgt.SelectAllPackageFields(ConfigPackageField,true);
            FieldsAdded := true;
          end;
        until Field.NEXT = 0;

      if FieldsAdded then begin
        ProcessingOrder := 0;
        SetProcessingOrderPrimaryKey("Package Code","Table ID",ProcessingOrder);
        ConfigPackageField.RESET;
        ConfigPackageField.SETRANGE("Package Code","Package Code");
        ConfigPackageField.SETRANGE("Table ID","Table ID");
        ConfigPackageField.SETRANGE("Primary Key",false);
        if "Table ID" <> DATABASE::"Config. Line" then
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder)
        else begin
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO("Line Type"),ConfigLine.FIELDNO("Table ID"));
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          // package code must be processed just after table ID!
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO("Package Code"));
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO(Name),ConfigLine.FIELDNO("Package Code") - 1);
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          ConfigPackageField.SETFILTER("Field ID",'%1..',ConfigLine.FIELDNO("Package Code") + 1);
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
        end;
      end;

      exit(FieldsAdded);
    END;

    LOCAL PROCEDURE SetProcessingOrderPrimaryKey@17(PackageCode@1006 : Code[20];TableID@1007 : Integer;VAR ProcessingOrder@1000 : Integer);
    VAR
      ConfigPackageField@1001 : Record "Config. Package Field";
      RecRef@1004 : RecordRef;
      KeyRef@1003 : KeyRef;
      FieldRef@1002 : FieldRef;
      KeyFieldCount@1005 : Integer;
    BEGIN
      RecRef.OPEN(TableID);
      KeyRef := RecRef.KEYINDEX(1);
      for KeyFieldCount := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        ConfigPackageField.GET(PackageCode,TableID,FieldRef.NUMBER);
        ProcessingOrder += 1;
        ConfigPackageField."Processing Order" := ProcessingOrder;
        ConfigPackageField.MODIFY;
      end;
    END;

    LOCAL PROCEDURE SetProcessingOrderFields@9(VAR ConfigPackageField@1000 : Record "Config. Package Field";VAR ProcessingOrder@1002 : Integer);
    BEGIN
      if ConfigPackageField.FINDSET then
        repeat
          ProcessingOrder += 1;
          ConfigPackageField."Processing Order" := ProcessingOrder;
          ConfigPackageField.MODIFY;
        until ConfigPackageField.NEXT = 0;
    END;

    [Internal]
    PROCEDURE InitDimensionFields@3();
    VAR
      Dimension@1002 : Record Dimension;
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigPackageTable@1001 : Record "Config. Package Table";
      Confirmed@1004 : Boolean;
    BEGIN
      if not (ConfigMgt.IsDimSetIDTable("Table ID") or ConfigMgt.IsDefaultDimTable("Table ID")) then
        ERROR(Text002,"Table ID");

      if ConfigMgt.IsDefaultDimTable("Table ID") then begin
        Confirmed :=
          (ConfigPackageTable.GET("Package Code",DATABASE::"Dimension Value") and
           ConfigPackageTable.GET("Package Code",DATABASE::"Default Dimension")) or
          (HideValidationDialog or not GUIALLOWED);
        if not Confirmed then
          Confirmed := CONFIRM(Text003,true,"Package Code");
        if Confirmed then begin
          ConfigPackageMgt.InsertPackageTable(ConfigPackageTable,"Package Code",DATABASE::"Dimension Value");
          ConfigPackageMgt.InsertPackageTable(ConfigPackageTable,"Package Code",DATABASE::"Default Dimension");
        end else
          ERROR(Text005);
      end;

      i := 0;
      if Dimension.FINDSET then
        repeat
          i := i + 1;
          ConfigPackageMgt.InsertPackageField(
            ConfigPackageField,"Package Code","Table ID",ConfigMgt.DimensionFieldID + i,
            Dimension.Code,Dimension."Code Caption",true,false,false,true);
        until Dimension.NEXT = 0;
    END;

    [External]
    PROCEDURE DeletePackageData@8();
    VAR
      ConfigPackageRecord@1001 : Record "Config. Package Record";
    BEGIN
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      ConfigPackageRecord.DELETEALL(true);
    END;

    LOCAL PROCEDURE DeleteDimensionFields@7();
    VAR
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigPackageData@1002 : Record "Config. Package Data";
    BEGIN
      ConfigPackageData.SETRANGE("Package Code","Package Code");
      ConfigPackageData.SETRANGE("Table ID","Table ID");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      ConfigPackageData.DELETEALL;

      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE(Dimension,true);
      ConfigPackageField.DELETEALL;
    END;

    [External]
    PROCEDURE DimensionFieldsCount@2() : Integer;
    VAR
      ConfigPackageField@1000 : Record "Config. Package Field";
    BEGIN
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE(Dimension,true);
      exit(ConfigPackageField.COUNT);
    END;

    [External]
    PROCEDURE DimensionPackageDataExist@6() : Boolean;
    VAR
      ConfigPackageData@1000 : Record "Config. Package Data";
    BEGIN
      ConfigPackageData.SETRANGE("Package Code","Package Code");
      ConfigPackageData.SETRANGE("Table ID","Table ID");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      exit(not ConfigPackageData.ISEMPTY);
    END;

    [External]
    PROCEDURE ShowPackageRecords@5(Show@1004 : 'Records,Errors,All';ShowDim@1003 : Boolean);
    VAR
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigPackageRecord@1001 : Record "Config. Package Record";
      ConfigPackageRecords@1002 : Page "Config. Package Records";
      MatrixColumnCaptions@1005 : ARRAY [1000] OF Text[100];
    BEGIN
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE("Include Field",true);
      if not ShowDim then
        ConfigPackageField.SETRANGE(Dimension,false);
      i := 1;
      CLEAR(MatrixColumnCaptions);
      if ConfigPackageField.FINDSET then
        repeat
          MatrixColumnCaptions[i] := ConfigPackageField."Field Name";
          i := i + 1;
        until ConfigPackageField.NEXT = 0;

      CALCFIELDS("Table Caption");
      CLEAR(ConfigPackageRecords);
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      case Show of
        Show::Records:
          ConfigPackageRecord.SETRANGE(Invalid,false);
        Show::Errors:
          ConfigPackageRecord.SETRANGE(Invalid,true);
      end;
      ConfigPackageRecords.SETTABLEVIEW(ConfigPackageRecord);
      ConfigPackageRecords.LOOKUPMODE(true);
      ConfigPackageRecords.Load(MatrixColumnCaptions,"Table Caption","Package Code","Table ID",ShowDim);
      ConfigPackageRecords.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowDatabaseRecords@4();
    VAR
      ConfigLine@1000 : Record "Config. Line";
    BEGIN
      if "Page ID" <> 0 then
        PAGE.RUN("Page ID")
      else begin
        ConfigLine.SETRANGE("Package Code","Package Code");
        ConfigLine.SETRANGE("Table ID","Table ID");
        if ConfigLine.FINDFIRST and (ConfigLine."Page ID" > 0) then
          PAGE.RUN(ConfigLine."Page ID")
        else
          ERROR(Text010,FIELDCAPTION("Page ID"));
      end;
    END;

    [Internal]
    PROCEDURE ShowPackageFields@11();
    BEGIN
      ShowFilteredPackageFields('');
    END;

    PROCEDURE ShowFilteredPackageFields@19(FilterValue@1002 : Text);
    VAR
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigPackageFields@1001 : Page "Config. Package Fields";
    BEGIN
      if InitPackageFields then
        COMMIT;

      if "Dimensions as Columns" then
        if not DimensionPackageDataExist then begin
          if DimensionFieldsCount > 0 then
            DeleteDimensionFields;
          InitDimensionFields;
          COMMIT;
        end;

      ConfigPackageField.FILTERGROUP(2);
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      if FilterValue <> '' then
        ConfigPackageField.SETFILTER("Field ID",FilterValue);
      ConfigPackageField.FILTERGROUP(0);
      ConfigPackageFields.SETTABLEVIEW(ConfigPackageField);
      ConfigPackageFields.RUNMODAL;
      CLEAR(ConfigPackageFields);
    END;

    [External]
    PROCEDURE ShowPackageCard@14(PackageCode@1002 : Code[20]);
    VAR
      ConfigPackage@1000 : Record "Config. Package";
      ConfigPackageCard@1001 : Page "Config. Package Card";
    BEGIN
      ConfigPackage.FILTERGROUP(2);
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.FILTERGROUP(0);
      ConfigPackageCard.SETTABLEVIEW(ConfigPackage);
      ConfigPackageCard.RUNMODAL;
      CLEAR(ConfigPackageCard);
    END;

    [External]
    PROCEDURE SetFieldStyle@12(FieldNumber@1000 : Integer) : Text;
    BEGIN
      case FieldNumber of
        FIELDNO("No. of Package Records"):
          begin
            CALCFIELDS("No. of Package Records");
            if "No. of Package Records" > 0 then
              exit('Strong');
          end;
        FIELDNO("No. of Package Errors"):
          begin
            CALCFIELDS("No. of Package Errors");
            if "No. of Package Errors" > 0 then
              exit('Unfavorable');
          end;
      end;

      exit('');
    END;

    [External]
    PROCEDURE ShowFilters@10();
    VAR
      ConfigPackageFilter@1001 : Record "Config. Package Filter";
      ConfigPackageFilters@1000 : Page "Config. Package Filters";
    BEGIN
      ConfigPackageFilter.FILTERGROUP(2);
      ConfigPackageFilter.SETRANGE("Package Code","Package Code");
      ConfigPackageFilter.SETRANGE("Table ID","Table ID");
      ConfigPackageFilter.SETRANGE("Processing Rule No.",0);
      ConfigPackageFilter.FILTERGROUP(0);
      ConfigPackageFilters.SETTABLEVIEW(ConfigPackageFilter);
      ConfigPackageFilters.RUNMODAL;
      CLEAR(ConfigPackageFilters);
    END;

    [External]
    PROCEDURE ShowProcessingRules@18();
    VAR
      ConfigTableProcessingRule@1001 : Record "Config. Table Processing Rule";
      ConfigTableProcessingRules@1000 : Page "Config. Table Processing Rules";
    BEGIN
      ConfigTableProcessingRule.FILTERGROUP(2);
      ConfigTableProcessingRule.SETRANGE("Package Code","Package Code");
      ConfigTableProcessingRule.SETRANGE("Table ID","Table ID");
      ConfigTableProcessingRule.FILTERGROUP(0);
      ConfigTableProcessingRules.SETTABLEVIEW(ConfigTableProcessingRule);
      ConfigTableProcessingRules.RUNMODAL;
      CLEAR(ConfigTableProcessingRules);
    END;

    LOCAL PROCEDURE UpdateDimensionsPackageData@13();
    VAR
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigPackageRecord@1001 : Record "Config. Package Record";
      ConfigPackageData@1002 : Record "Config. Package Data";
    BEGIN
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      if ConfigPackageRecord.FINDSET then
        repeat
          ConfigPackageField.SETRANGE("Package Code","Package Code");
          ConfigPackageField.SETRANGE("Table ID","Table ID");
          ConfigPackageField.SETRANGE(Dimension,true);
          if ConfigPackageField.FINDSET then
            repeat
              ConfigPackageMgt.InsertPackageData(
                ConfigPackageData,"Package Code","Table ID",ConfigPackageRecord."No.",
                ConfigPackageField."Field ID",'',ConfigPackageRecord.Invalid);
            until ConfigPackageField.NEXT = 0;
        until ConfigPackageRecord.NEXT = 0;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@16(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [Internal]
    PROCEDURE GetNoOfDatabaseRecords@15() : Integer;
    VAR
      ConfigXMLExchange@1002 : Codeunit "Config. XML Exchange";
      RecRef@1000 : RecordRef;
    BEGIN
      if "Table ID" = 0 then
        exit(0);

      if not ConfigXMLExchange.TableObjectExists("Table ID") then
        exit(0);

      RecRef.OPEN("Table ID",false,"Company Filter (Source Table)");
      exit(RecRef.COUNT);
    END;

    BEGIN
    END.
  }
}

