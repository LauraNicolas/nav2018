OBJECT Report 1498 Date Compress Bank Acc. Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rimd,
                TableData "G/L Register"=rimd,
                TableData "Date Compr. Register"=rimd,
                TableData "Bank Account Ledger Entry"=rimd,
                TableData "Dimension Set ID Filter Line"=imd;
    CaptionML=ENU=Date Compress Bank Acc. Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Bank Acc. Ledger",'',RetainDimText,Text010);
                  BankAccLedgEntryFilter := COPYSTR("Bank Account Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 4920;    ;DataItem;Bank Account Ledger Entry;
               DataItemTable="Bank Account Ledger Entry";
               DataItemTableView=SORTING("Bank Account No.","Posting Date") WHERE(Open=CONST(false));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not CONFIRM(Text000,false) then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(Text004);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Bank Acc. Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Bank Acc. Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[3] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Bank Acc. Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Bank Acc. Ledger",'',GLSetup."Global Dimension 2 Code");

                               GLEntry.LOCKTABLE;
                               NewBankAccLedgEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if GLEntry.FINDLAST then;
                               LastEntryNo := GLEntry."Entry No.";
                               NextTransactionNo := GLEntry."Transaction No." + 1;
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  BankAccLedgEntry2 := "Bank Account Ledger Entry";
                                  with BankAccLedgEntry2 do begin
                                    SETCURRENTKEY("Bank Account No.","Posting Date");
                                    COPYFILTERS("Bank Account Ledger Entry");
                                    SETRANGE("Bank Account No.","Bank Account No.");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));
                                    SETRANGE("Bank Acc. Posting Group","Bank Acc. Posting Group");
                                    SETRANGE("Currency Code","Currency Code");
                                    SETRANGE("Document Type","Document Type");

                                    if RetainNo(FIELDNO("Document No.")) then
                                      SETRANGE("Document No.","Document No.");
                                    if RetainNo(FIELDNO("Our Contact Code")) then
                                      SETRANGE("Our Contact Code","Our Contact Code");
                                    if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                    if Amount >= 0 then
                                      SETFILTER(Amount,'>=0')
                                    else
                                      SETFILTER(Amount,'<0');

                                    InitNewEntry(NewBankAccLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,false,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewBankAccLedgEntry,BankAccLedgEntry2);
                                    while NEXT <> 0 do begin
                                      DimBufMgt.CollectDimEntryNo(
                                        TempSelectedDim,"Dimension Set ID","Entry No.",
                                        ComprDimEntryNo,true,DimEntryNo);
                                      if DimEntryNo = ComprDimEntryNo then
                                        SummarizeEntry(NewBankAccLedgEntry,BankAccLedgEntry2);
                                    end;

                                    InsertNewEntry(NewBankAccLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields="Bank Account No.","Bank Acc. Posting Group","Currency Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies a text that accompanies the entries that result from the compression. The default description is Date Compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdBankAccLedgEntry.Description }

      { 25  ;2   ;Group     ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[1] }

      { 7   ;3   ;Field     ;
                  Name=Our Contact Code;
                  CaptionML=ENU=Our Contact Code;
                  ToolTipML=ENU=Specifies the employee who is responsible for this bank account.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[2] }

      { 6   ;2   ;Field     ;
                  Name=Retain Dimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Bank Acc. Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing bank account ledger entries...\\Bank Account No.       #1##########\Date                   #2######\\No. of new entries     #3######\No. of entries deleted #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      GLReg@1014 : Record "G/L Register";
      EntrdBankAccLedgEntry@1015 : Record "Bank Account Ledger Entry";
      NewBankAccLedgEntry@1016 : Record "Bank Account Ledger Entry";
      BankAccLedgEntry2@1017 : Record "Bank Account Ledger Entry";
      GLEntry@1018 : Record "G/L Entry";
      SelectedDim@1019 : Record "Selected Dimension";
      TempSelectedDim@1020 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1021 : Record "Dimension Selection Buffer";
      DateComprMgt@1022 : Codeunit DateComprMgt;
      DimBufMgt@1023 : Codeunit "Dimension Buffer Management";
      DimMgt@1024 : Codeunit DimensionManagement;
      Window@1025 : Dialog;
      BankAccLedgEntryFilter@1026 : Text[250];
      NoOfFields@1027 : Integer;
      Retain@1028 : ARRAY [10] OF Boolean;
      FieldNumber@1029 : ARRAY [10] OF Integer;
      FieldNameArray@1030 : ARRAY [10] OF Text[100];
      LastEntryNo@1031 : Integer;
      NextTransactionNo@1032 : Integer;
      NoOfDeleted@1033 : Integer;
      GLRegExists@1034 : Boolean;
      i@1035 : Integer;
      ComprDimEntryNo@1036 : Integer;
      DimEntryNo@1037 : Integer;
      RetainDimText@1038 : Text[250];

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if GLReg.FIND('+') then;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress Bank Acc. Ledger";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Bank Account Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        BankAccLedgEntryFilter,GLReg."No.",SourceCodeSetup."Compress Bank Acc. Ledger");

      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      GLRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record "G/L Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      GLEntry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLEntry."Entry No." := LastEntryNo;
      GLEntry."Posting Date" := TODAY;
      GLEntry.Description := EntrdBankAccLedgEntry.Description;
      GLEntry."Source Code" := SourceCodeSetup."Compress Bank Acc. Ledger";
      GLEntry."System-Created Entry" := true;
      GLEntry."User ID" := USERID;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry.INSERT;
      GLEntry.CONSISTENT(GLEntry.Amount = 0);
      GLReg."To Entry No." := GLEntry."Entry No.";

      if GLRegExists then begin
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := true;
      end;
      COMMIT;

      GLEntry.LOCKTABLE;
      NewBankAccLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      if GLEntry.FINDLAST then;
      if NewBankAccLedgEntry.FIND('+') then;
      if (LastEntryNo <> GLEntry."Entry No.") or
         (LastEntryNo <> NewBankAccLedgEntry."Entry No." + 1)
      then begin
        LastEntryNo := GLEntry."Entry No.";
        NextTransactionNo := GLEntry."Transaction No." + 1;
        InitRegisters;
      end;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewBankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry");
    BEGIN
      with BankAccLedgEntry do begin
        NewBankAccLedgEntry.Amount := NewBankAccLedgEntry.Amount + Amount;
        NewBankAccLedgEntry."Remaining Amount" := NewBankAccLedgEntry."Remaining Amount" + "Remaining Amount";
        NewBankAccLedgEntry."Amount (LCY)" := NewBankAccLedgEntry."Amount (LCY)" + "Amount (LCY)";
        NewBankAccLedgEntry."Debit Amount" := NewBankAccLedgEntry."Debit Amount" + "Debit Amount";
        NewBankAccLedgEntry."Credit Amount" := NewBankAccLedgEntry."Credit Amount" + "Credit Amount";
        NewBankAccLedgEntry."Debit Amount (LCY)" :=
          NewBankAccLedgEntry."Debit Amount (LCY)" + "Debit Amount (LCY)";
        NewBankAccLedgEntry."Credit Amount (LCY)" :=
          NewBankAccLedgEntry."Credit Amount (LCY)" + "Credit Amount (LCY)";
        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      BankAccLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,BankAccLedgEntryNo) then begin
        InitNewEntry(NewBankAccLedgEntry);
        repeat
          BankAccLedgEntry.GET(BankAccLedgEntryNo);
          SummarizeEntry(NewBankAccLedgEntry,BankAccLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,BankAccLedgEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewBankAccLedgEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewBankAccLedgEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewBankAccLedgEntry@1000 : Record "Bank Account Ledger Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      with BankAccLedgEntry2 do begin
        NewBankAccLedgEntry.INIT;
        NewBankAccLedgEntry."Entry No." := LastEntryNo;
        NewBankAccLedgEntry."Bank Account No." := "Bank Account No.";
        NewBankAccLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewBankAccLedgEntry.Description := EntrdBankAccLedgEntry.Description;
        NewBankAccLedgEntry."Bank Acc. Posting Group" := "Bank Acc. Posting Group";
        NewBankAccLedgEntry."Currency Code" := "Currency Code";
        NewBankAccLedgEntry."Document Type" := "Document Type";
        NewBankAccLedgEntry."Source Code" := SourceCodeSetup."Compress Bank Acc. Ledger";
        NewBankAccLedgEntry."User ID" := USERID;
        NewBankAccLedgEntry."Transaction No." := NextTransactionNo;

        if RetainNo(FIELDNO("Document No.")) then
          NewBankAccLedgEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Our Contact Code")) then
          NewBankAccLedgEntry."Our Contact Code" := "Our Contact Code";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewBankAccLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewBankAccLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewBankAccLedgEntry."Bank Account No.");
        Window.UPDATE(2,NewBankAccLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewBankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewBankAccLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewBankAccLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      if EntrdDateComprReg."Ending Date" = 0D then
        EntrdDateComprReg."Ending Date" := TODAY;
      if EntrdBankAccLedgEntry.Description = '' then
        EntrdBankAccLedgEntry.Description := Text009;

      with "Bank Account Ledger Entry" do begin
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Our Contact Code"),FIELDCAPTION("Our Contact Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
      end;
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;Description@1004 : Text[50];RetainDocumentNo@1003 : Boolean;RetainOutContactCode@1002 : Boolean;RetainDimensionText@1000 : Text[50]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdBankAccLedgEntry.Description := Description;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainOutContactCode;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

