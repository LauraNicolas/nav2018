OBJECT Page 5505 Sales Quote Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesQuotes];
    SourceTable="Sales Quote Entity Buffer";
    DelayedInsert=true;
    PageType=API;
    OnOpenPage=BEGIN
                 CheckPermissions;
               END;

    OnAfterGetRecord=VAR
                       GraphMgtSalesQuoteBuffer@1000 : Codeunit "Graph Mgt - Sales Quote Buffer";
                     BEGIN
                       SetCalculatedFields;
                       GraphMgtSalesQuoteBuffer.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     GraphMgtSalesQuoteBuffer@1001 : Codeunit "Graph Mgt - Sales Quote Buffer";
                   BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalesQuoteBuffer.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnModifyRecord=VAR
                     GraphMgtSalesQuoteBuffer@1000 : Codeunit "Graph Mgt - Sales Quote Buffer";
                   BEGIN
                     if xRec.Id <> Id then
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalesQuoteBuffer.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnDeleteRecord=VAR
                     GraphMgtSalesQuoteBuffer@1000 : Codeunit "Graph Mgt - Sales Quote Buffer";
                   BEGIN
                     GraphMgtSalesQuoteBuffer.PropagateOnDelete(Rec);

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 18  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;

                ImplicitType=GUID }

    { 19  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;

                ImplicitType=Code20 }

    { 29  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;

                ImplicitType=Code35 }

    { 10  ;2   ;Field     ;
                Name=documentDate;
                CaptionML=[@@@={Locked};
                           ENU=documentDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := true;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;

                ImplicitType=Date }

    { 9   ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             DueDateVar := "Due Date";
                             DueDateSet := true;

                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;

                ImplicitType=Date }

    { 7   ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             if not Customer.FINDFIRST then
                               ERROR(CouldNotFindCustomerErr);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=GUID }

    { 6   ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record Contact;
                             Customer@1001 : Record Customer;
                             GraphIntContact@1003 : Codeunit "Graph Int. - Contact";
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             if "Contact Graph Id" = '' then
                               ERROR(ContactIdHasToHaveValueErr);

                             if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) then
                               exit;

                             UpdateCustomerFromGraphContactId(Customer);

                             if Contact."Company No." = Customer."No." then begin
                               VALIDATE("Sell-to Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-to Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             end;
                           END;

                ImplicitType=Text250 }

    { 5   ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=BEGIN
                             if Customer."No." <> '' then begin
                               if Customer."No." <> "Sell-to Customer No." then
                                 ERROR(CustomerValuesDontMatchErr);
                               exit;
                             end;

                             if not Customer.GET("Sell-to Customer No.") then
                               ERROR(CouldNotFindCustomerErr);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE;
                ImplicitType=Text50 }

    { 3   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress];
                ToolTipML=ENU=Specifies the billing address of the Sales Invoice.;
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := true;
                           END;

                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 26  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             if "Currency Id" = BlankGUID then
                               "Currency Code" := ''
                             else begin
                               Currency.SETRANGE(Id,"Currency Id");
                               if not Currency.FINDFIRST then
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=GUID }

    { 20  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             if Currency.Code <> '' then begin
                               if Currency.Code <> "Currency Code" then
                                 ERROR(CurrencyValuesDontMatchErr);
                               exit;
                             end;

                             if "Currency Code" = '' then
                               "Currency Id" := BlankGUID
                             else begin
                               if not Currency.GET("Currency Code") then
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=Text }

    { 25  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             if "Payment Terms Id" = BlankGUID then
                               "Payment Terms Code" := ''
                             else begin
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               if not PaymentTerms.FINDFIRST then
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=GUID }

    { 13  ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=paymentTerms];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Code";
                OnValidate=BEGIN
                             if PaymentTerms.Code <> '' then begin
                               if PaymentTerms.Code <> "Payment Terms Code" then
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Terms Code" = '' then
                               "Payment Terms Id" := BlankGUID
                             else begin
                               if not PaymentTerms.GET("Payment Terms Code") then
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=Code10 }

    { 27  ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             if "Shipment Method Id" = BlankGUID then
                               "Shipment Method Code" := ''
                             else begin
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               if not ShipmentMethod.FINDFIRST then
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;

                ImplicitType=GUID }

    { 12  ;2   ;Field     ;
                Name=shipmentMethod;
                CaptionML=[@@@={Locked};
                           ENU=shipmentMethod];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Code";
                OnValidate=BEGIN
                             if ShipmentMethod.Code <> '' then begin
                               if ShipmentMethod.Code <> "Shipment Method Code" then
                                 ERROR(ShipmentMethodValuesDontMatchErr);
                               exit;
                             end;

                             if "Shipment Method Code" = '' then
                               "Shipment Method Id" := BlankGUID
                             else begin
                               if not ShipmentMethod.GET("Shipment Method Code") then
                                 ERROR(ShipmentMethodCodeDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Id" := ShipmentMethod.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;

                ImplicitType=Code10 }

    { 11  ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;

                ImplicitType=Code20 }

    { 8   ;2   ;Part      ;
                Name=salesQuoteLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines];
                ApplicationArea=#All;
                SubPageLink="Document Id"=FIELD(Id);
                PagePartID="Sales Quote Line Entity";
                PartType=Page }

    { 14  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                             DiscountAmountSet := true;
                           END;

                ImplicitType=Decimal }

    { 22  ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 21  ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount];
                ToolTipML=ENU=Specifies the total tax amount for the sales invoice.;
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;

                ImplicitType=Decimal }

    { 17  ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;

                ImplicitType=Decimal }

    { 16  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status];
                ToolTipML=ENU=Specifies the status of the Sales Quote (Draft,Sent,Accepted).;
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Status));
                           END;

                ImplicitType=Option }

    { 28  ;2   ;Field     ;
                Name=sentDate;
                CaptionML=[@@@={Locked};
                           ENU=sentDate];
                ApplicationArea=#All;
                SourceExpr="Quote Sent to Customer";
                ImplicitType=DateTime }

    { 23  ;2   ;Field     ;
                Name=validUntilDate;
                CaptionML=[@@@={Locked};
                           ENU=validUntilDate];
                ApplicationArea=#All;
                SourceExpr="Quote Valid Until Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quote Valid Until Date"));
                           END;

                ImplicitType=Date }

    { 24  ;2   ;Field     ;
                Name=acceptedDate;
                CaptionML=[@@@={Locked};
                           ENU=acceptedDate];
                ApplicationArea=#All;
                SourceExpr="Quote Accepted Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Quote Accepted Date"));
                           END;

                ImplicitType=Date }

    { 15  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      TempFieldBuffer@1004 : TEMPORARY Record "Field Buffer";
      Customer@1006 : Record Customer;
      Currency@1013 : Record Currency;
      PaymentTerms@1014 : Record "Payment Terms";
      ShipmentMethod@1021 : Record "Shipment Method";
      GraphMgtGeneralTools@1002 : Codeunit "Graph Mgt - General Tools";
      LCYCurrencyCode@1003 : Code[10];
      BillingPostalAddressJSONText@1000 : Text;
      CurrencyCodeTxt@1001 : Text;
      BillingPostalAddressSet@1005 : Boolean;
      CouldNotFindCustomerErr@1008 : TextConst '@@@={Locked};ENU=The customer cannot be found.';
      ContactIdHasToHaveValueErr@1007 : TextConst '@@@={Locked};ENU=Contact Id must have a value set.';
      CannotChangeIDErr@1009 : TextConst '@@@={Locked};ENU=The id cannot be changed.';
      CustomerNotProvidedErr@1024 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1025 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.';
      SalesQuotePermissionsErr@1023 : TextConst 'ENU=You do not have permissions to read Sales Quotes.';
      CurrencyValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1011 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1010 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.';
      PaymentTermsValuesDontMatchErr@1017 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1016 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1015 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.';
      ShipmentMethodValuesDontMatchErr@1020 : TextConst '@@@={Locked};ENU=The shipment method values do not match to a specific Shipment Method.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1019 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.';
      ShipmentMethodCodeDoesNotMatchAShipmentMethodErr@1018 : TextConst '@@@={Locked};ENU=The "shipmentMethodCode" does not match to a Shipment Method.';
      DiscountAmountSet@1027 : Boolean;
      InvoiceDiscountAmount@1026 : Decimal;
      BlankGUID@1022 : GUID;
      DocumentDateSet@1031 : Boolean;
      DocumentDateVar@1030 : Date;
      DueDateSet@1029 : Boolean;
      DueDateVar@1028 : Date;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesQuote@1000 : Codeunit "Graph Mgt - Sales Quote";
    BEGIN
      BillingPostalAddressJSONText := GraphMgtSalesQuote.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(DiscountAmountSet);
      CLEAR(InvoiceDiscountAmount);

      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      if TempFieldBuffer.FINDLAST then
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Quote Entity Buffer";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      if ("Sell-to Customer No." = '') and
         ("Customer Id" = BlankGUID)
      then
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtSalesQuote@1000 : Codeunit "Graph Mgt - Sales Quote";
    BEGIN
      if not BillingPostalAddressSet then
        exit;

      GraphMgtSalesQuote.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      if xRec."Sell-to Address" <> "Sell-to Address" then
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      if xRec."Sell-to Address 2" <> "Sell-to Address 2" then
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      if xRec."Sell-to City" <> "Sell-to City" then
        RegisterFieldSet(FIELDNO("Sell-to City"));

      if xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" then
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      if xRec."Sell-to Post Code" <> "Sell-to Post Code" then
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      if xRec."Sell-to County" <> "Sell-to County" then
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record Customer);
    VAR
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      if not UpdateCustomer then begin
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := not TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      end;

      if UpdateCustomer then begin
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      end;
    END;

    LOCAL PROCEDURE CheckPermissions@4();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
      if not SalesHeader.READPERMISSION then
        ERROR(SalesQuotePermissionsErr);
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record "Sales Header";
      GraphMgtSalesQuoteBuffer@1003 : Codeunit "Graph Mgt - Sales Quote Buffer";
      SalesCalcDiscountByType@1000 : Codeunit "Sales - Calc Discount By Type";
    BEGIN
      if not DiscountAmountSet then begin
        GraphMgtSalesQuoteBuffer.RedistributeInvoiceDiscounts(Rec);
        exit;
      end;

      SalesHeader.GET(SalesHeader."Document Type"::Quote,"No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@8();
    VAR
      GraphMgtSalesQuoteBuffer@1000 : Codeunit "Graph Mgt - Sales Quote Buffer";
    BEGIN
      if not (DueDateSet or DocumentDateSet) then
        exit;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      if DocumentDateSet then begin
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      end;

      if DueDateSet then begin
        "Due Date" := DueDateVar;
        RegisterFieldSet(FIELDNO("Due Date"));
      end;

      GraphMgtSalesQuoteBuffer.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    BEGIN
    END.
  }
}

