OBJECT Codeunit 781 Sales Pipeline Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE DrillDown@8(VAR BusinessChartBuffer@1000 : Record "Business Chart Buffer";VAR SalesCycleStage@1001 : Record "Sales Cycle Stage");
    VAR
      OppEntry@1002 : Record "Opportunity Entry";
    BEGIN
      if SalesCycleStage.FINDSET then begin
        SalesCycleStage.NEXT(BusinessChartBuffer."Drill-Down X Index");
        OppEntry.SETRANGE("Sales Cycle Code",SalesCycleStage."Sales Cycle Code");
        OppEntry.SETRANGE("Sales Cycle Stage",SalesCycleStage.Stage);
        PAGE.RUN(PAGE::"Opportunity Entries",OppEntry);
      end;
    END;

    LOCAL PROCEDURE GetOppEntryCount@17(SalesCycleCode@1000 : Code[10];SalesCycleStage@1001 : Integer) : Integer;
    VAR
      OppEntry@1002 : Record "Opportunity Entry";
    BEGIN
      OppEntry.SETRANGE("Sales Cycle Code",SalesCycleCode);
      OppEntry.SETRANGE("Sales Cycle Stage",SalesCycleStage);
      exit(OppEntry.COUNT);
    END;

    LOCAL PROCEDURE InsertTempSalesCycleStage@2(VAR TempSalesCycleStage@1000 : TEMPORARY Record "Sales Cycle Stage";SalesCycle@1001 : Record "Sales Cycle");
    VAR
      SourceSalesCycleStage@1002 : Record "Sales Cycle Stage";
    BEGIN
      TempSalesCycleStage.RESET;
      TempSalesCycleStage.DELETEALL;

      SourceSalesCycleStage.SETRANGE("Sales Cycle Code",SalesCycle.Code);
      if SourceSalesCycleStage.FINDSET then
        repeat
          TempSalesCycleStage := SourceSalesCycleStage;
          TempSalesCycleStage.INSERT;
        until SourceSalesCycleStage.NEXT = 0;
    END;

    [External]
    PROCEDURE SetDefaultSalesCycle@1(VAR SalesCycle@1000 : Record "Sales Cycle";VAR NextSalesCycleAvailable@1001 : Boolean;VAR PrevSalesCycleAvailable@1002 : Boolean) : Boolean;
    BEGIN
      if not SalesCycle.FINDFIRST then
        exit(false);

      NextSalesCycleAvailable := TryNextSalesCycle(SalesCycle);
      PrevSalesCycleAvailable := TryPrevSalesCycle(SalesCycle);
      exit(true);
    END;

    [External]
    PROCEDURE SetPrevNextSalesCycle@14(VAR SalesCycle@1000 : Record "Sales Cycle";VAR NextSalesCycleAvailable@1002 : Boolean;VAR PrevSalesCycleAvailable@1001 : Boolean;Step@1003 : Integer);
    BEGIN
      SalesCycle.NEXT(Step);
      NextSalesCycleAvailable := TryNextSalesCycle(SalesCycle);
      PrevSalesCycleAvailable := TryPrevSalesCycle(SalesCycle);
    END;

    LOCAL PROCEDURE TryNextSalesCycle@12(CurrentSalesCycle@1000 : Record "Sales Cycle") : Boolean;
    VAR
      NextSalesCycle@1001 : Record "Sales Cycle";
    BEGIN
      NextSalesCycle := CurrentSalesCycle;
      NextSalesCycle.FIND('=><');
      exit(NextSalesCycle.NEXT <> 0);
    END;

    LOCAL PROCEDURE TryPrevSalesCycle@13(CurrentSalesCycle@1000 : Record "Sales Cycle") : Boolean;
    VAR
      PrevSalesCycle@1001 : Record "Sales Cycle";
    BEGIN
      PrevSalesCycle := CurrentSalesCycle;
      PrevSalesCycle.FIND('=><');
      exit(PrevSalesCycle.NEXT(-1) <> 0);
    END;

    [Internal]
    PROCEDURE UpdateData@3(VAR BusinessChartBuffer@1000 : Record "Business Chart Buffer";VAR TempSalesCycleStage@1005 : TEMPORARY Record "Sales Cycle Stage";SalesCycle@1006 : Record "Sales Cycle");
    VAR
      I@1004 : Integer;
    BEGIN
      with BusinessChartBuffer do begin
        Initialize;
        AddMeasure(TempSalesCycleStage.FIELDCAPTION("No. of Opportunities"),1,"Data Type"::Integer,"Chart Type"::Funnel);
        SetXAxis(TempSalesCycleStage.TABLECAPTION,"Data Type"::String);
        InsertTempSalesCycleStage(TempSalesCycleStage,SalesCycle);
        if TempSalesCycleStage.FINDSET then begin
          repeat
            I += 1;
            AddColumn(TempSalesCycleStage.Description);
            SetValueByIndex(0,I - 1,GetOppEntryCount(TempSalesCycleStage."Sales Cycle Code",TempSalesCycleStage.Stage));
          until TempSalesCycleStage.NEXT = 0;
        end;
      end;
    END;

    BEGIN
    END.
  }
}

