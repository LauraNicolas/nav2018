OBJECT Codeunit 408 DimensionManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Gen. Journal Template"=imd,
                TableData "Gen. Journal Batch"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Dimensions %1 and %2 can''t be used concurrently.';
      Text001@1001 : TextConst 'ENU=Dimension combinations %1 - %2 and %3 - %4 can''t be used concurrently.';
      Text002@1002 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.';
      Text003@1003 : TextConst 'ENU=%1 is not an available %2 for that dimension.';
      Text004@1004 : TextConst 'ENU=Select a %1 for the %2 %3.';
      Text005@1005 : TextConst 'ENU=Select a %1 for the %2 %3 for %4 %5.';
      Text006@1006 : TextConst 'ENU=Select %1 %2 for the %3 %4.';
      Text007@1007 : TextConst 'ENU=Select %1 %2 for the %3 %4 for %5 %6.';
      Text008@1008 : TextConst 'ENU=%1 %2 must be blank.';
      Text009@1009 : TextConst 'ENU=%1 %2 must be blank for %3 %4.';
      Text010@1010 : TextConst 'ENU=%1 %2 must not be mentioned.';
      Text011@1011 : TextConst 'ENU=%1 %2 must not be mentioned for %3 %4.';
      Text012@1012 : TextConst 'ENU=A %1 used in %2 has not been used in %3.';
      Text013@1013 : TextConst 'ENU=%1 for %2 %3 is not the same in %4 and %5.';
      Text014@1014 : TextConst 'ENU=%1 %2 is blocked.';
      Text015@1015 : TextConst 'ENU=%1 %2 can''t be found.';
      Text016@1016 : TextConst 'ENU=%1 %2 - %3 is blocked.';
      Text017@1017 : TextConst 'ENU=%1 for %2 %3 - %4 must not be %5.';
      Text018@1018 : TextConst 'ENU=%1 for %2 is missing.';
      Text019@1028 : TextConst 'ENU=You have changed a dimension.\\Do you want to update the lines?';
      TempDimBuf1@1019 : TEMPORARY Record "Dimension Buffer";
      TempDimBuf2@1020 : TEMPORARY Record "Dimension Buffer";
      ObjTransl@1027 : Record "Object Translation";
      DimValComb@1032 : Record "Dimension Value Combination";
      JobTaskDimTemp@1033 : TEMPORARY Record "Job Task Dimension";
      DefaultDim@1035 : Record "Default Dimension";
      DimSetEntry@1034 : Record "Dimension Set Entry";
      TempDimSetEntry2@1029 : TEMPORARY Record "Dimension Set Entry";
      TempDimCombInitialized@1031 : Boolean;
      TempDimCombEmpty@1030 : Boolean;
      DimCombErr@1021 : Text[250];
      DimValuePostingErr@1022 : Text[250];
      DimErr@1023 : Text[250];
      DocDimConsistencyErr@1024 : Text[250];
      HasGotGLSetup@1025 : Boolean;
      GLSetupShortcutDimCode@1026 : ARRAY [8] OF Code[20];
      DimSetFilterCtr@1036 : Integer;
      OverflowDimFilterErr@1037 : TextConst 'ENU=Conversion of dimension filter results in a filter that becomes too long.';

    [External]
    PROCEDURE GetDimensionSetID@123(VAR DimSetEntry2@1000 : Record "Dimension Set Entry") : Integer;
    BEGIN
      exit(DimSetEntry.GetDimensionSetID(DimSetEntry2));
    END;

    [External]
    PROCEDURE GetDimensionSet@124(VAR TempDimSetEntry@1000 : TEMPORARY Record "Dimension Set Entry";DimSetID@1001 : Integer);
    VAR
      DimSetEntry2@1002 : Record "Dimension Set Entry";
    BEGIN
      TempDimSetEntry.DELETEALL;
      with DimSetEntry2 do begin
        SETRANGE("Dimension Set ID",DimSetID);
        if FINDSET then
          repeat
            TempDimSetEntry := DimSetEntry2;
            TempDimSetEntry.INSERT;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE ShowDimensionSet@125(DimSetID@1000 : Integer;NewCaption@1003 : Text[250]);
    VAR
      DimSetEntries@1002 : Page "Dimension Set Entries";
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      DimSetEntries.SETTABLEVIEW(DimSetEntry);
      DimSetEntries.SetFormCaption(NewCaption);
      DimSetEntry.RESET;
      DimSetEntries.RUNMODAL;
    END;

    [External]
    PROCEDURE EditDimensionSet@128(DimSetID@1000 : Integer;NewCaption@1003 : Text[250]) : Integer;
    VAR
      EditDimSetEntries@1002 : Page "Edit Dimension Set Entries";
      NewDimSetID@1004 : Integer;
    BEGIN
      NewDimSetID := DimSetID;
      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      EditDimSetEntries.SETTABLEVIEW(DimSetEntry);
      EditDimSetEntries.SetFormCaption(NewCaption);
      EditDimSetEntries.RUNMODAL;
      NewDimSetID := EditDimSetEntries.GetDimensionID;
      DimSetEntry.RESET;
      exit(NewDimSetID);
    END;

    [External]
    PROCEDURE EditDimensionSet2@131(DimSetID@1000 : Integer;NewCaption@1003 : Text[250];VAR GlobalDimVal1@1006 : Code[20];VAR GlobalDimVal2@1005 : Code[20]) : Integer;
    VAR
      EditDimSetEntries@1002 : Page "Edit Dimension Set Entries";
      NewDimSetID@1004 : Integer;
    BEGIN
      NewDimSetID := DimSetID;
      DimSetEntry.RESET;
      DimSetEntry.FILTERGROUP(2);
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DimSetEntry.FILTERGROUP(0);
      EditDimSetEntries.SETTABLEVIEW(DimSetEntry);
      EditDimSetEntries.SetFormCaption(NewCaption);
      EditDimSetEntries.RUNMODAL;
      NewDimSetID := EditDimSetEntries.GetDimensionID;
      UpdateGlobalDimFromDimSetID(NewDimSetID,GlobalDimVal1,GlobalDimVal2);
      DimSetEntry.RESET;
      exit(NewDimSetID);
    END;

    [External]
    PROCEDURE EditReclasDimensionSet2@133(VAR DimSetID@1001 : Integer;VAR NewDimSetID@1002 : Integer;NewCaption@1000 : Text[250];VAR GlobalDimVal1@1005 : Code[20];VAR GlobalDimVal2@1003 : Code[20];VAR NewGlobalDimVal1@1007 : Code[20];VAR NewGlobalDimVal2@1006 : Code[20]);
    VAR
      EditReclasDimensions@1004 : Page "Edit Reclas. Dimensions";
    BEGIN
      EditReclasDimensions.SetDimensionIDs(DimSetID,NewDimSetID);
      EditReclasDimensions.SetFormCaption(NewCaption);
      EditReclasDimensions.RUNMODAL;
      EditReclasDimensions.GetDimensionIDs(DimSetID,NewDimSetID);
      UpdateGlobalDimFromDimSetID(DimSetID,GlobalDimVal1,GlobalDimVal2);
      UpdateGlobalDimFromDimSetID(NewDimSetID,NewGlobalDimVal1,NewGlobalDimVal2);
    END;

    [External]
    PROCEDURE UpdateGlobalDimFromDimSetID@130(DimSetID@1000 : Integer;VAR GlobalDimVal1@1001 : Code[20];VAR GlobalDimVal2@1002 : Code[20]);
    BEGIN
      GetGLSetup;
      GlobalDimVal1 := '';
      GlobalDimVal2 := '';
      if GLSetupShortcutDimCode[1] <> '' then
        if DimSetEntry.GET(DimSetID,GLSetupShortcutDimCode[1]) then
          GlobalDimVal1 := DimSetEntry."Dimension Value Code";
      if GLSetupShortcutDimCode[2] <> '' then
        if DimSetEntry.GET(DimSetID,GLSetupShortcutDimCode[2]) then
          GlobalDimVal2 := DimSetEntry."Dimension Value Code";
    END;

    [External]
    PROCEDURE GetCombinedDimensionSetID@132(DimensionSetIDArr@1000 : ARRAY [10] OF Integer;VAR GlobalDimVal1@1004 : Code[20];VAR GlobalDimVal2@1005 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1003 : TEMPORARY Record "Dimension Set Entry";
      i@1001 : Integer;
    BEGIN
      GetGLSetup;
      GlobalDimVal1 := '';
      GlobalDimVal2 := '';
      DimSetEntry.RESET;
      for i := 1 to 10 do
        if DimensionSetIDArr[i] <> 0 then begin
          DimSetEntry.SETRANGE("Dimension Set ID",DimensionSetIDArr[i]);
          if DimSetEntry.FINDSET then
            repeat
              if TempDimSetEntry.GET(0,DimSetEntry."Dimension Code") then
                TempDimSetEntry.DELETE;
              TempDimSetEntry := DimSetEntry;
              TempDimSetEntry."Dimension Set ID" := 0;
              TempDimSetEntry.INSERT;
              if GLSetupShortcutDimCode[1] = TempDimSetEntry."Dimension Code" then
                GlobalDimVal1 := TempDimSetEntry."Dimension Value Code";
              if GLSetupShortcutDimCode[2] = TempDimSetEntry."Dimension Code" then
                GlobalDimVal2 := TempDimSetEntry."Dimension Value Code";
            until DimSetEntry.NEXT = 0;
        end;
      exit(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE GetDeltaDimSetID@137(DimSetID@1005 : Integer;NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer) : Integer;
    VAR
      TempDimSetEntry@1004 : TEMPORARY Record "Dimension Set Entry";
      TempDimSetEntryNew@1003 : TEMPORARY Record "Dimension Set Entry";
      TempDimSetEntryDeleted@1002 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      // Returns an updated DimSetID based on parent's old and new DimSetID
      if NewParentDimSetID = OldParentDimSetID then
        exit(DimSetID);
      GetDimensionSet(TempDimSetEntry,DimSetID);
      GetDimensionSet(TempDimSetEntryNew,NewParentDimSetID);
      GetDimensionSet(TempDimSetEntryDeleted,OldParentDimSetID);
      if TempDimSetEntryDeleted.FINDSET then
        repeat
          if TempDimSetEntryNew.GET(NewParentDimSetID,TempDimSetEntryDeleted."Dimension Code") then begin
            if TempDimSetEntryNew."Dimension Value Code" = TempDimSetEntryDeleted."Dimension Value Code" then
              TempDimSetEntryNew.DELETE;
            TempDimSetEntryDeleted.DELETE;
          end;
        until TempDimSetEntryDeleted.NEXT = 0;

      if TempDimSetEntryDeleted.FINDSET then
        repeat
          if TempDimSetEntry.GET(DimSetID,TempDimSetEntryDeleted."Dimension Code") then
            TempDimSetEntry.DELETE;
        until TempDimSetEntryDeleted.NEXT = 0;

      if TempDimSetEntryNew.FINDSET then
        repeat
          if TempDimSetEntry.GET(DimSetID,TempDimSetEntryNew."Dimension Code") then begin
            if TempDimSetEntry."Dimension Value Code" <> TempDimSetEntryNew."Dimension Value Code" then begin
              TempDimSetEntry."Dimension Value Code" := TempDimSetEntryNew."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := TempDimSetEntryNew."Dimension Value ID";
              TempDimSetEntry.MODIFY;
            end;
          end else begin
            TempDimSetEntry := TempDimSetEntryNew;
            TempDimSetEntry."Dimension Set ID" := DimSetID;
            TempDimSetEntry.INSERT;
          end;
        until TempDimSetEntryNew.NEXT = 0;

      exit(GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE GetGLSetup@52();
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      if not HasGotGLSetup then begin
        GLSetup.GET;
        GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
        GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
        GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
        GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
        GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
        GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
        GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
        GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
        HasGotGLSetup := true;
      end;
    END;

    [External]
    PROCEDURE CheckDimIDComb@138(DimSetID@1002 : Integer) : Boolean;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      if DimSetEntry.FINDSET then
        repeat
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Dimension Buffer";
          TempDimBuf1."Entry No." := 0;
          TempDimBuf1."Dimension Code" := DimSetEntry."Dimension Code";
          TempDimBuf1."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          TempDimBuf1.INSERT;
        until DimSetEntry.NEXT = 0;

      DimSetEntry.RESET;
      exit(CheckDimComb);
    END;

    [External]
    PROCEDURE CheckDimValuePosting@14(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];DimSetID@1003 : Integer) : Boolean;
    VAR
      i@1004 : Integer;
      j@1005 : Integer;
      NoFilter@1006 : ARRAY [2] OF Text[250];
    BEGIN
      if not CheckBlockedDimAndValues(DimSetID) then
        exit(false);
      DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      NoFilter[2] := '';
      for i := 1 to ARRAYLEN(TableID) do begin
        if (TableID[i] <> 0) and (No[i] <> '') then begin
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          for j := 1 to 2 do begin
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            if DefaultDim.FINDSET then
              repeat
                DimSetEntry.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                case DefaultDim."Value Posting" of
                  DefaultDim."Value Posting"::"Code Mandatory":
                    begin
                      if not DimSetEntry.FINDFIRST or (DimSetEntry."Dimension Value Code" = '') then begin
                        if DefaultDim."No." = '' then
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text004,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                        else
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text005,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),
                              DefaultDim."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        exit(false);
                      end;
                    end;
                  DefaultDim."Value Posting"::"Same Code":
                    begin
                      if DefaultDim."Dimension Value Code" <> '' then begin
                        if not DimSetEntry.FINDFIRST or
                           (DefaultDim."Dimension Value Code" <> DimSetEntry."Dimension Value Code")
                        then begin
                          if DefaultDim."No." = '' then
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text006,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                          else
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text007,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),
                                DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),
                                DefaultDim."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          exit(false);
                        end;
                      end else begin
                        if DimSetEntry.FINDFIRST then begin
                          if DefaultDim."No." = '' then
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text008,
                                DimSetEntry.FIELDCAPTION("Dimension Code"),DimSetEntry."Dimension Code")
                          else
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text009,
                                DimSetEntry.FIELDCAPTION("Dimension Code"),
                                DimSetEntry."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          exit(false);
                        end;
                      end;
                    end;
                  DefaultDim."Value Posting"::"No Code":
                    begin
                      if DimSetEntry.FINDFIRST then begin
                        if DefaultDim."No." = '' then
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text010,
                              DimSetEntry.FIELDCAPTION("Dimension Code"),DimSetEntry."Dimension Code")
                        else
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text011,
                              DimSetEntry.FIELDCAPTION("Dimension Code"),
                              DimSetEntry."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        exit(false);
                      end;
                    end;
                end;
              until DefaultDim.NEXT = 0;
          end;
        end;
      end;
      DimSetEntry.RESET;
      exit(true);
    END;

    [External]
    PROCEDURE CheckDimBuffer@64(VAR DimBuffer@1000 : Record "Dimension Buffer") : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      if DimBuffer.FINDSET then begin
        i := 1;
        repeat
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Dimension Buffer";
          TempDimBuf1."Entry No." := i;
          TempDimBuf1."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf1."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf1.INSERT;
          i := i + 1;
        until DimBuffer.NEXT = 0;
      end;
      exit(CheckDimComb);
    END;

    LOCAL PROCEDURE CheckDimComb@3() : Boolean;
    VAR
      DimComb@1000 : Record "Dimension Combination";
      CurrentDimCode@1002 : Code[20];
      CurrentDimValCode@1003 : Code[20];
      DimFilter@1004 : Text[1024];
      FilterTooLong@1005 : Boolean;
    BEGIN
      if not TempDimCombInitialized then begin
        TempDimCombInitialized := true;
        if DimComb.ISEMPTY then
          TempDimCombEmpty := true;
      end;

      if TempDimCombEmpty then
        exit(true);

      if not TempDimBuf1.FINDSET then
        exit(true);

      repeat
        if STRLEN(DimFilter) + 1 + STRLEN(TempDimBuf1."Dimension Code") > MAXSTRLEN(DimFilter) then
          FilterTooLong := true
        else
          if DimFilter = '' then
            DimFilter := TempDimBuf1."Dimension Code"
          else
            DimFilter := DimFilter + '|' + TempDimBuf1."Dimension Code";
      until FilterTooLong or (TempDimBuf1.NEXT = 0);

      if not FilterTooLong then begin
        DimComb.SETFILTER("Dimension 1 Code",DimFilter);
        DimComb.SETFILTER("Dimension 2 Code",DimFilter);
        if DimComb.FINDSET then
          repeat
            if DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked then begin
              DimCombErr := STRSUBSTNO(Text000,DimComb."Dimension 1 Code",DimComb."Dimension 2 Code");
              exit(false);
            end else begin
              TempDimBuf1.SETRANGE("Dimension Code",DimComb."Dimension 1 Code");
              TempDimBuf1.FINDFIRST;
              CurrentDimCode := TempDimBuf1."Dimension Code";
              CurrentDimValCode := TempDimBuf1."Dimension Value Code";
              TempDimBuf1.SETRANGE("Dimension Code",DimComb."Dimension 2 Code");
              TempDimBuf1.FINDFIRST;
              if not
                 CheckDimValueComb(
                   TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code",
                   CurrentDimCode,CurrentDimValCode)
              then
                exit(false);
              if not
                 CheckDimValueComb(
                   CurrentDimCode,CurrentDimValCode,
                   TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code")
              then
                exit(false);
            end;
          until DimComb.NEXT = 0;
        exit(true);
      end;

      while TempDimBuf1.FINDFIRST do begin
        CurrentDimCode := TempDimBuf1."Dimension Code";
        CurrentDimValCode := TempDimBuf1."Dimension Value Code";
        TempDimBuf1.DELETE;
        if TempDimBuf1.FINDSET then
          repeat
            if CurrentDimCode > TempDimBuf1."Dimension Code" then begin
              if DimComb.GET(TempDimBuf1."Dimension Code",CurrentDimCode) then begin
                if DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked then begin
                  DimCombErr :=
                    STRSUBSTNO(
                      Text000,
                      TempDimBuf1."Dimension Code",CurrentDimCode);
                  exit(false);
                end;
                if not
                   CheckDimValueComb(
                     TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code",
                     CurrentDimCode,CurrentDimValCode)
                then
                  exit(false);
              end;
            end else begin
              if DimComb.GET(CurrentDimCode,TempDimBuf1."Dimension Code") then begin
                if DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked then begin
                  DimCombErr :=
                    STRSUBSTNO(
                      Text000,
                      CurrentDimCode,TempDimBuf1."Dimension Code");
                  exit(false);
                end;
                if not
                   CheckDimValueComb(
                     CurrentDimCode,CurrentDimValCode,TempDimBuf1."Dimension Code",
                     TempDimBuf1."Dimension Value Code")
                then
                  exit(false);
              end;
            end;
          until TempDimBuf1.NEXT = 0;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CheckDimValueComb@9(Dim1@1000 : Code[20];Dim1Value@1001 : Code[20];Dim2@1002 : Code[20];Dim2Value@1003 : Code[20]) : Boolean;
    BEGIN
      if DimValComb.GET(Dim1,Dim1Value,Dim2,Dim2Value) then begin
        DimCombErr :=
          STRSUBSTNO(Text001,
            Dim1,Dim1Value,Dim2,Dim2Value);
        exit(false);
      end;
      exit(true);
    END;

    [External]
    PROCEDURE GetDimCombErr@41() : Text[250];
    BEGIN
      exit(DimCombErr);
    END;

    [External]
    PROCEDURE UpdateDefaultDim@59(TableID@1000 : Integer;No@1001 : Code[20];VAR GlobalDim1Code@1002 : Code[20];VAR GlobalDim2Code@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record "Default Dimension";
    BEGIN
      GetGLSetup;
      if DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[1]) then
        GlobalDim1Code := DefaultDim."Dimension Value Code"
      else
        GlobalDim1Code := '';
      if DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[2]) then
        GlobalDim2Code := DefaultDim."Dimension Value Code"
      else
        GlobalDim2Code := '';
    END;

    [External]
    PROCEDURE GetDefaultDimID@8(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];SourceCode@1002 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1004 : Code[20];InheritFromDimSetID@1014 : Integer;InheritFromTableNo@1015 : Integer) : Integer;
    VAR
      DimVal@1012 : Record "Dimension Value";
      DefaultDimPriority1@1005 : Record "Default Dimension Priority";
      DefaultDimPriority2@1006 : Record "Default Dimension Priority";
      DefaultDim@1007 : Record "Default Dimension";
      TempDimSetEntry@1011 : TEMPORARY Record "Dimension Set Entry";
      TempDimSetEntry0@1016 : TEMPORARY Record "Dimension Set Entry";
      i@1010 : Integer;
      j@1009 : Integer;
      NoFilter@1008 : ARRAY [2] OF Code[20];
      NewDimSetID@1013 : Integer;
    BEGIN
      GetGLSetup;
      if InheritFromDimSetID > 0 then
        GetDimensionSet(TempDimSetEntry0,InheritFromDimSetID);
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      if TempDimSetEntry0.FINDSET then
        repeat
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := InheritFromTableNo;
          TempDimBuf2."Entry No." := 0;
          TempDimBuf2."Dimension Code" := TempDimSetEntry0."Dimension Code";
          TempDimBuf2."Dimension Value Code" := TempDimSetEntry0."Dimension Value Code";
          TempDimBuf2.INSERT;
        until TempDimSetEntry0.NEXT = 0;

      NoFilter[2] := '';
      for i := 1 to ARRAYLEN(TableID) do begin
        if (TableID[i] <> 0) and (No[i] <> '') then begin
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          for j := 1 to 2 do begin
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            if DefaultDim.FINDSET then
              repeat
                if DefaultDim."Dimension Value Code" <> '' then begin
                  TempDimBuf2.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                  if not TempDimBuf2.FINDFIRST then begin
                    TempDimBuf2.INIT;
                    TempDimBuf2."Table ID" := DefaultDim."Table ID";
                    TempDimBuf2."Entry No." := 0;
                    TempDimBuf2."Dimension Code" := DefaultDim."Dimension Code";
                    TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                    TempDimBuf2.INSERT;
                  end else begin
                    if DefaultDimPriority1.GET(SourceCode,DefaultDim."Table ID") then begin
                      if DefaultDimPriority2.GET(SourceCode,TempDimBuf2."Table ID") then begin
                        if DefaultDimPriority1.Priority < DefaultDimPriority2.Priority then begin
                          TempDimBuf2.DELETE;
                          TempDimBuf2."Table ID" := DefaultDim."Table ID";
                          TempDimBuf2."Entry No." := 0;
                          TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                          TempDimBuf2.INSERT;
                        end;
                      end else begin
                        TempDimBuf2.DELETE;
                        TempDimBuf2."Table ID" := DefaultDim."Table ID";
                        TempDimBuf2."Entry No." := 0;
                        TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                        TempDimBuf2.INSERT;
                      end;
                    end;
                  end;
                  if GLSetupShortcutDimCode[1] = TempDimBuf2."Dimension Code" then
                    GlobalDim1Code := TempDimBuf2."Dimension Value Code";
                  if GLSetupShortcutDimCode[2] = TempDimBuf2."Dimension Code" then
                    GlobalDim2Code := TempDimBuf2."Dimension Value Code";
                end;
              until DefaultDim.NEXT = 0;
          end;
        end;
      end;
      TempDimBuf2.RESET;
      if TempDimBuf2.FINDSET then begin
        repeat
          DimVal.GET(TempDimBuf2."Dimension Code",TempDimBuf2."Dimension Value Code");
          TempDimSetEntry."Dimension Code" := TempDimBuf2."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        until TempDimBuf2.NEXT = 0;
        NewDimSetID := GetDimensionSetID(TempDimSetEntry);
      end;
      exit(NewDimSetID);
    END;

    [External]
    PROCEDURE GetRecDefaultDimID@150(RecVariant@1011 : Variant;CurrFieldNo@1012 : Integer;TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];SourceCode@1002 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1004 : Code[20];InheritFromDimSetID@1014 : Integer;InheritFromTableNo@1015 : Integer) : Integer;
    BEGIN
      OnGetRecDefaultDimID(RecVariant,CurrFieldNo,TableID,No,SourceCode,InheritFromDimSetID,InheritFromTableNo);
      exit(GetDefaultDimID(TableID,No,SourceCode,GlobalDim1Code,GlobalDim2Code,InheritFromDimSetID,InheritFromTableNo));
    END;

    PROCEDURE AddFirstToTableIdArray@256(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];NewTableId@1002 : Integer;NewNo@1003 : Code[20]);
    VAR
      Index@1004 : Integer;
    BEGIN
      if NewNo = '' then
        exit;
      for Index := ARRAYLEN(TableID) downto 2 do begin
        TableID[Index] := TableID[Index - 1];
        No[Index] := No[Index - 1];
      end;
      TableID[1] := NewTableId;
      No[1] := NewNo;
    END;

    PROCEDURE AddLastToTableIdArray@257(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];NewTableId@1002 : Integer;NewNo@1003 : Code[20]);
    VAR
      Index@1004 : Integer;
    BEGIN
      if NewNo = '' then
        exit;
      for Index := 1 to ARRAYLEN(TableID) do
        if (No[Index] = '') or (Index = ARRAYLEN(TableID)) then begin
          TableID[Index] := NewTableId;
          No[Index] := NewNo;
          exit;
        end;
    END;

    [External]
    PROCEDURE TypeToTableID1@11(Type@1000 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee') : Integer;
    BEGIN
      case Type of
        Type::"G/L Account":
          exit(DATABASE::"G/L Account");
        Type::Customer:
          exit(DATABASE::Customer);
        Type::Vendor:
          exit(DATABASE::Vendor);
        Type::Employee:
          exit(DATABASE::Employee);
        Type::"Bank Account":
          exit(DATABASE::"Bank Account");
        Type::"Fixed Asset":
          exit(DATABASE::"Fixed Asset");
        Type::"IC Partner":
          exit(DATABASE::"IC Partner");
      end;
    END;

    [External]
    PROCEDURE TypeToTableID2@13(Type@1000 : 'Resource,Item,"G/L Account"') : Integer;
    VAR
      TableID@1001 : Integer;
    BEGIN
      case Type of
        Type::Resource:
          exit(DATABASE::Resource);
        Type::Item:
          exit(DATABASE::Item);
        Type::"G/L Account":
          exit(DATABASE::"G/L Account");
        else begin
          OnTypeToTableID2(TableID,Type);
          exit(TableID);
        end;
      end;
    END;

    [External]
    PROCEDURE TypeToTableID3@16(Type@1000 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"') : Integer;
    BEGIN
      case Type of
        Type::" ":
          exit(0);
        Type::"G/L Account":
          exit(DATABASE::"G/L Account");
        Type::Item:
          exit(DATABASE::Item);
        Type::Resource:
          exit(DATABASE::Resource);
        Type::"Fixed Asset":
          exit(DATABASE::"Fixed Asset");
        Type::"Charge (Item)":
          exit(DATABASE::"Item Charge");
      end;
    END;

    [External]
    PROCEDURE TypeToTableID4@1(Type@1000 : '" ",Item,Resource') : Integer;
    BEGIN
      case Type of
        Type::" ":
          exit(0);
        Type::Item:
          exit(DATABASE::Item);
        Type::Resource:
          exit(DATABASE::Resource);
      end;
    END;

    [External]
    PROCEDURE TypeToTableID5@119(Type@1000 : '" ",Item,Resource,Cost,"G/L Account"') : Integer;
    BEGIN
      case Type of
        Type::" ":
          exit(0);
        Type::Item:
          exit(DATABASE::Item);
        Type::Resource:
          exit(DATABASE::Resource);
        Type::Cost:
          exit(DATABASE::"Service Cost");
        Type::"G/L Account":
          exit(DATABASE::"G/L Account");
      end;
    END;

    [External]
    PROCEDURE DeleteDefaultDim@58(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDim@1002 : Record "Default Dimension";
    BEGIN
      DefaultDim.SETRANGE("Table ID",TableID);
      DefaultDim.SETRANGE("No.",No);
      if not DefaultDim.ISEMPTY then
        DefaultDim.DELETEALL;
    END;

    [External]
    PROCEDURE LookupDimValueCode@21(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record "Dimension Value";
      GLSetup@1003 : Record "General Ledger Setup";
    BEGIN
      GetGLSetup;
      if GLSetupShortcutDimCode[FieldNumber] = '' then
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      DimVal.Code := ShortcutDimCode;
      if PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK then begin
        CheckDim(DimVal."Dimension Code");
        CheckDimValue(DimVal."Dimension Code",DimVal.Code);
        ShortcutDimCode := DimVal.Code;
      end;
    END;

    [External]
    PROCEDURE ValidateDimValueCode@22(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record "Dimension Value";
      GLSetup@1003 : Record "General Ledger Setup";
    BEGIN
      GetGLSetup;
      if (GLSetupShortcutDimCode[FieldNumber] = '') and (ShortcutDimCode <> '') then
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      if ShortcutDimCode <> '' then begin
        DimVal.SETRANGE(Code,ShortcutDimCode);
        if not DimVal.FINDFIRST then begin
          DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
          if DimVal.FINDFIRST then
            ShortcutDimCode := DimVal.Code
          else
            ERROR(
              STRSUBSTNO(Text003,
                ShortcutDimCode,DimVal.FIELDCAPTION(Code)));
        end;
      end;
    END;

    [External]
    PROCEDURE ValidateShortcutDimValues@127(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR DimSetID@1004 : Integer);
    VAR
      DimVal@1002 : Record "Dimension Value";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      if ShortcutDimCode <> '' then begin
        DimVal.GET(DimVal."Dimension Code",ShortcutDimCode);
        if not CheckDim(DimVal."Dimension Code") then
          ERROR(GetDimErr);
        if not CheckDimValue(DimVal."Dimension Code",ShortcutDimCode) then
          ERROR(GetDimErr);
      end;
      GetDimensionSet(TempDimSetEntry,DimSetID);
      if TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",DimVal."Dimension Code") then
        if TempDimSetEntry."Dimension Value Code" <> ShortcutDimCode then
          TempDimSetEntry.DELETE;
      if ShortcutDimCode <> '' then begin
        TempDimSetEntry."Dimension Code" := DimVal."Dimension Code";
        TempDimSetEntry."Dimension Value Code" := DimVal.Code;
        TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
        if TempDimSetEntry.INSERT then;
      end;
      DimSetID := GetDimensionSetID(TempDimSetEntry);
    END;

    [External]
    PROCEDURE SaveDefaultDim@53(TableID@1000 : Integer;No@1001 : Code[20];FieldNumber@1002 : Integer;ShortcutDimCode@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record "Default Dimension";
    BEGIN
      GetGLSetup;
      if ShortcutDimCode <> '' then begin
        if DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber])
        then begin
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.MODIFY;
        end else begin
          DefaultDim.INIT;
          DefaultDim.VALIDATE("Table ID",TableID);
          DefaultDim.VALIDATE("No.",No);
          DefaultDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.INSERT;
        end;
      end else
        if DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber]) then
          DefaultDim.DELETE;
    END;

    [External]
    PROCEDURE GetShortcutDimensions@129(DimSetID@1000 : Integer;VAR ShortcutDimCode@1004 : ARRAY [8] OF Code[20]);
    VAR
      i@1006 : Integer;
    BEGIN
      GetGLSetup;
      for i := 3 to 8 do begin
        ShortcutDimCode[i] := '';
        if GLSetupShortcutDimCode[i] <> '' then
          if DimSetEntry.GET(DimSetID,GLSetupShortcutDimCode[i]) then
            ShortcutDimCode[i] := DimSetEntry."Dimension Value Code";
      end;
    END;

    [External]
    PROCEDURE CheckDimBufferValuePosting@68(VAR DimBuffer@1000 : Record "Dimension Buffer";TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1005 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      if DimBuffer.FINDSET then begin
        i := 1;
        repeat
          if (not CheckDimValue(
                DimBuffer."Dimension Code",DimBuffer."Dimension Value Code")) or
             (not CheckDim(DimBuffer."Dimension Code"))
          then begin
            DimValuePostingErr := DimErr;
            exit(false);
          end;
          TempDimBuf2.INIT;
          TempDimBuf2."Entry No." := i;
          TempDimBuf2."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf2."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf2.INSERT;
          i := i + 1;
        until DimBuffer.NEXT = 0;
      end;
      exit(CheckValuePosting(TableID,No));
    END;

    LOCAL PROCEDURE CheckValuePosting@36(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      DefaultDim@1002 : Record "Default Dimension";
      i@1004 : Integer;
      j@1005 : Integer;
      NoFilter@1006 : ARRAY [2] OF Text[250];
    BEGIN
      DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
      NoFilter[2] := '';
      for i := 1 to ARRAYLEN(TableID) do begin
        if (TableID[i] <> 0) and (No[i] <> '') then begin
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          for j := 1 to 2 do begin
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            if DefaultDim.FINDSET then begin
              repeat
                TempDimBuf2.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                case DefaultDim."Value Posting" of
                  DefaultDim."Value Posting"::"Code Mandatory":
                    begin
                      if (not TempDimBuf2.FINDFIRST) or
                         (TempDimBuf2."Dimension Value Code" = '')
                      then begin
                        if DefaultDim."No." = '' then
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text004,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                        else
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text005,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),
                              DefaultDim."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        exit(false);
                      end;
                    end;
                  DefaultDim."Value Posting"::"Same Code":
                    begin
                      if DefaultDim."Dimension Value Code" <> '' then begin
                        if (not TempDimBuf2.FINDFIRST) or
                           (DefaultDim."Dimension Value Code" <> TempDimBuf2."Dimension Value Code")
                        then begin
                          if DefaultDim."No." = '' then
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text006,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                          else
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text007,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),
                                DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),
                                DefaultDim."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          exit(false);
                        end;
                      end else begin
                        if TempDimBuf2.FINDFIRST then begin
                          if DefaultDim."No." = '' then
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text008,
                                TempDimBuf2.FIELDCAPTION("Dimension Code"),TempDimBuf2."Dimension Code")
                          else
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text009,
                                TempDimBuf2.FIELDCAPTION("Dimension Code"),
                                TempDimBuf2."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          exit(false);
                        end;
                      end;
                    end;
                  DefaultDim."Value Posting"::"No Code":
                    begin
                      if TempDimBuf2.FINDFIRST then begin
                        if DefaultDim."No." = '' then
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text010,
                              TempDimBuf2.FIELDCAPTION("Dimension Code"),TempDimBuf2."Dimension Code")
                        else
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text011,
                              TempDimBuf2.FIELDCAPTION("Dimension Code"),
                              TempDimBuf2."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        exit(false);
                      end;
                    end;
                end;
              until DefaultDim.NEXT = 0;
              TempDimBuf2.RESET;
            end;
          end;
        end;
      end;
      exit(true);
    END;

    [External]
    PROCEDURE GetDimValuePostingErr@98() : Text[250];
    BEGIN
      exit(DimValuePostingErr);
    END;

    [Internal]
    PROCEDURE SetupObjectNoList@40(VAR TempAllObjWithCaption@1000 : TEMPORARY Record AllObjWithCaption);
    BEGIN
      InsertObject(TempAllObjWithCaption,DATABASE::"Salesperson/Purchaser");
      InsertObject(TempAllObjWithCaption,DATABASE::"G/L Account");
      InsertObject(TempAllObjWithCaption,DATABASE::Customer);
      InsertObject(TempAllObjWithCaption,DATABASE::Vendor);
      InsertObject(TempAllObjWithCaption,DATABASE::Item);
      InsertObject(TempAllObjWithCaption,DATABASE::"Resource Group");
      InsertObject(TempAllObjWithCaption,DATABASE::Resource);
      InsertObject(TempAllObjWithCaption,DATABASE::Job);
      InsertObject(TempAllObjWithCaption,DATABASE::"Bank Account");
      InsertObject(TempAllObjWithCaption,DATABASE::Campaign);
      InsertObject(TempAllObjWithCaption,DATABASE::Employee);
      InsertObject(TempAllObjWithCaption,DATABASE::"Fixed Asset");
      InsertObject(TempAllObjWithCaption,DATABASE::Insurance);
      InsertObject(TempAllObjWithCaption,DATABASE::"Responsibility Center");
      InsertObject(TempAllObjWithCaption,DATABASE::"Item Charge");
      InsertObject(TempAllObjWithCaption,DATABASE::"Work Center");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Contract Header");
      InsertObject(TempAllObjWithCaption,DATABASE::"Customer Template");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Contract Template");
      InsertObject(TempAllObjWithCaption,DATABASE::"IC Partner");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Order Type");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Item Group");
      InsertObject(TempAllObjWithCaption,DATABASE::"Service Item");
      InsertObject(TempAllObjWithCaption,DATABASE::"Cash Flow Manual Expense");
      InsertObject(TempAllObjWithCaption,DATABASE::"Cash Flow Manual Revenue");
      OnAfterSetupObjectNoList(TempAllObjWithCaption);
    END;

    [External]
    PROCEDURE GetDocDimConsistencyErr@56() : Text[250];
    BEGIN
      exit(DocDimConsistencyErr);
    END;

    [External]
    PROCEDURE CheckDim@60(DimCode@1000 : Code[20]) : Boolean;
    VAR
      Dim@1001 : Record Dimension;
    BEGIN
      if Dim.GET(DimCode) then begin
        if Dim.Blocked then begin
          DimErr :=
            STRSUBSTNO(Text014,Dim.TABLECAPTION,DimCode);
          exit(false);
        end;
      end else begin
        DimErr :=
          STRSUBSTNO(Text015,Dim.TABLECAPTION,DimCode);
        exit(false);
      end;
      exit(true);
    END;

    [External]
    PROCEDURE CheckDimValue@61(DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
    BEGIN
      if (DimCode <> '') and (DimValCode <> '') then begin
        if DimVal.GET(DimCode,DimValCode) then begin
          if DimVal.Blocked then begin
            DimErr :=
              STRSUBSTNO(
                Text016,DimVal.TABLECAPTION,DimCode,DimValCode);
            exit(false);
          end;
          if not (DimVal."Dimension Value Type" in
                  [DimVal."Dimension Value Type"::Standard,
                   DimVal."Dimension Value Type"::"Begin-Total"])
          then begin
            DimErr :=
              STRSUBSTNO(Text017,DimVal.FIELDCAPTION("Dimension Value Type"),
                DimVal.TABLECAPTION,DimCode,DimValCode,FORMAT(DimVal."Dimension Value Type"));
            exit(false);
          end;
        end else begin
          DimErr :=
            STRSUBSTNO(
              Text018,DimVal.TABLECAPTION,DimCode);
          exit(false);
        end;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CheckBlockedDimAndValues@6(DimSetID@1000 : Integer) : Boolean;
    VAR
      DimSetEntry@1001 : Record "Dimension Set Entry";
    BEGIN
      if DimSetID = 0 then
        exit(true);
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      if DimSetEntry.FINDSET then
        repeat
          if not CheckDim(DimSetEntry."Dimension Code") or
             not CheckDimValue(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code")
          then begin
            DimValuePostingErr := DimErr;
            exit(false);
          end;
        until DimSetEntry.NEXT = 0;
      exit(true);
    END;

    [External]
    PROCEDURE GetDimErr@71() : Text[250];
    BEGIN
      exit(DimErr);
    END;

    [External]
    PROCEDURE LookupDimValueCodeNoUpdate@20(FieldNumber@1000 : Integer);
    VAR
      DimVal@1001 : Record "Dimension Value";
      GLSetup@1002 : Record "General Ledger Setup";
    BEGIN
      GetGLSetup;
      if GLSetupShortcutDimCode[FieldNumber] = '' then
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      if PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK then;
    END;

    [External]
    PROCEDURE CopyJnlLineDimToICJnlDim@93(TableID@1000 : Integer;TransactionNo@1001 : Integer;PartnerCode@1002 : Code[20];TransactionSource@1008 : Option;LineNo@1003 : Integer;DimSetID@1004 : Integer);
    VAR
      InOutBoxJnlLineDim@1005 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      DimSetEntry@1009 : Record "Dimension Set Entry";
      ICDim@1006 : Code[20];
      ICDimValue@1007 : Code[20];
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      if DimSetEntry.FINDSET then
        repeat
          ICDim := ConvertDimtoICDim(DimSetEntry."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          if (ICDim <> '') and (ICDimValue <> '') then begin
            InOutBoxJnlLineDim.INIT;
            InOutBoxJnlLineDim."Table ID" := TableID;
            InOutBoxJnlLineDim."IC Partner Code" := PartnerCode;
            InOutBoxJnlLineDim."Transaction No." := TransactionNo;
            InOutBoxJnlLineDim."Transaction Source" := TransactionSource;
            InOutBoxJnlLineDim."Line No." := LineNo;
            InOutBoxJnlLineDim."Dimension Code" := ICDim;
            InOutBoxJnlLineDim."Dimension Value Code" := ICDimValue;
            InOutBoxJnlLineDim.INSERT;
          end;
        until DimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DefaultDimOnInsert@17(DefaultDimension@1000 : Record "Default Dimension");
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      if DefaultDimension."Table ID" = DATABASE::Job then
        UpdateJobTaskDim(DefaultDimension,false);

      UpdateCostType(DefaultDimension,CallingTrigger::OnInsert);
    END;

    [External]
    PROCEDURE DefaultDimOnModify@18(DefaultDimension@1000 : Record "Default Dimension");
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      if DefaultDimension."Table ID" = DATABASE::Job then
        UpdateJobTaskDim(DefaultDimension,false);

      UpdateCostType(DefaultDimension,CallingTrigger::OnModify);
    END;

    [External]
    PROCEDURE DefaultDimOnDelete@19(DefaultDimension@1000 : Record "Default Dimension");
    VAR
      CallingTrigger@1001 : 'OnInsert,OnModify,OnDelete';
    BEGIN
      if DefaultDimension."Table ID" = DATABASE::Job then
        UpdateJobTaskDim(DefaultDimension,true);

      UpdateCostType(DefaultDimension,CallingTrigger::OnDelete);
    END;

    [External]
    PROCEDURE CopyICJnlDimToICJnlDim@97(VAR FromInOutBoxLineDim@1001 : Record "IC Inbox/Outbox Jnl. Line Dim.";VAR ToInOutBoxlineDim@1000 : Record "IC Inbox/Outbox Jnl. Line Dim.");
    BEGIN
      if FromInOutBoxLineDim.FINDSET then
        repeat
          ToInOutBoxlineDim := FromInOutBoxLineDim;
          ToInOutBoxlineDim.INSERT;
        until FromInOutBoxLineDim.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyDocDimtoICDocDim@107(TableID@1005 : Integer;TransactionNo@1004 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1002 : Option;LineNo@1001 : Integer;DimSetEntryID@1000 : Integer);
    VAR
      InOutBoxDocDim@1008 : Record "IC Document Dimension";
      DimSetEntry@1009 : Record "Dimension Set Entry";
      ICDim@1007 : Code[20];
      ICDimValue@1006 : Code[20];
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetEntryID);
      if DimSetEntry.FINDSET then
        repeat
          ICDim := ConvertDimtoICDim(DimSetEntry."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          if (ICDim <> '') and (ICDimValue <> '') then begin
            InOutBoxDocDim.INIT;
            InOutBoxDocDim."Table ID" := TableID;
            InOutBoxDocDim."IC Partner Code" := PartnerCode;
            InOutBoxDocDim."Transaction No." := TransactionNo;
            InOutBoxDocDim."Transaction Source" := TransactionSource;
            InOutBoxDocDim."Line No." := LineNo;
            InOutBoxDocDim."Dimension Code" := ICDim;
            InOutBoxDocDim."Dimension Value Code" := ICDimValue;
            InOutBoxDocDim.INSERT;
          end;
        until DimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyICDocDimtoICDocDim@108(FromSourceICDocDim@1003 : Record "IC Document Dimension";VAR ToSourceICDocDim@1002 : Record "IC Document Dimension";ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      with FromSourceICDocDim do begin
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        if FINDSET then
          repeat
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE MoveICDocDimtoICDocDim@112(FromSourceICDocDim@1003 : Record "IC Document Dimension";VAR ToSourceICDocDim@1002 : Record "IC Document Dimension";ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      with FromSourceICDocDim do begin
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        if FINDSET then
          repeat
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
            DELETE;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetICDocDimFilters@110(VAR ICDocDim@1000 : Record "IC Document Dimension";TableID@1001 : Integer;TransactionNo@1002 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1004 : Integer;LineNo@1005 : Integer);
    BEGIN
      ICDocDim.RESET;
      ICDocDim.SETRANGE("Table ID",TableID);
      ICDocDim.SETRANGE("Transaction No.",TransactionNo);
      ICDocDim.SETRANGE("IC Partner Code",PartnerCode);
      ICDocDim.SETRANGE("Transaction Source",TransactionSource);
      ICDocDim.SETRANGE("Line No.",LineNo);
    END;

    [External]
    PROCEDURE DeleteICDocDim@109(TableID@1000 : Integer;ICTransactionNo@1001 : Integer;ICPartnerCode@1002 : Code[20];TransactionSource@1003 : Option;LineNo@1005 : Integer);
    VAR
      ICDocDim@1004 : Record "IC Document Dimension";
    BEGIN
      SetICDocDimFilters(ICDocDim,TableID,ICTransactionNo,ICPartnerCode,TransactionSource,LineNo);
      if not ICDocDim.ISEMPTY then
        ICDocDim.DELETEALL;
    END;

    [External]
    PROCEDURE DeleteICJnlDim@116(TableID@1000 : Integer;ICTransactionNo@1001 : Integer;ICPartnerCode@1002 : Code[20];TransactionSource@1003 : Option;LineNo@1005 : Integer);
    VAR
      ICJnlDim@1004 : Record "IC Inbox/Outbox Jnl. Line Dim.";
    BEGIN
      ICJnlDim.SETRANGE("Table ID",TableID);
      ICJnlDim.SETRANGE("Transaction No.",ICTransactionNo);
      ICJnlDim.SETRANGE("IC Partner Code",ICPartnerCode);
      ICJnlDim.SETRANGE("Transaction Source",TransactionSource);
      ICJnlDim.SETRANGE("Line No.",LineNo);
      if not ICJnlDim.ISEMPTY then
        ICJnlDim.DELETEALL;
    END;

    LOCAL PROCEDURE ConvertICDimtoDim@99(FromICDim@1000 : Code[20]) DimCode : Code[20];
    VAR
      ICDim@1002 : Record "IC Dimension";
    BEGIN
      if ICDim.GET(FromICDim) then
        DimCode := ICDim."Map-to Dimension Code";
    END;

    LOCAL PROCEDURE ConvertICDimValuetoDimValue@100(FromICDim@1000 : Code[20];FromICDimValue@1001 : Code[20]) DimValueCode : Code[20];
    VAR
      ICDimValue@1002 : Record "IC Dimension Value";
    BEGIN
      if ICDimValue.GET(FromICDim,FromICDimValue) then
        DimValueCode := ICDimValue."Map-to Dimension Value Code";
    END;

    [External]
    PROCEDURE ConvertDimtoICDim@102(FromDim@1001 : Code[20]) ICDimCode : Code[20];
    VAR
      Dim@1000 : Record Dimension;
    BEGIN
      if Dim.GET(FromDim) then
        ICDimCode := Dim."Map-to IC Dimension Code";
    END;

    [External]
    PROCEDURE ConvertDimValuetoICDimVal@103(FromDim@1000 : Code[20];FromDimValue@1001 : Code[20]) ICDimValueCode : Code[20];
    VAR
      DimValue@1002 : Record "Dimension Value";
    BEGIN
      if DimValue.GET(FromDim,FromDimValue) then
        ICDimValueCode := DimValue."Map-to IC Dimension Value Code";
    END;

    [External]
    PROCEDURE CheckICDimValue@113(ICDimCode@1001 : Code[20];ICDimValCode@1000 : Code[20]) : Boolean;
    VAR
      ICDimVal@1002 : Record "IC Dimension Value";
    BEGIN
      if (ICDimCode <> '') and (ICDimValCode <> '') then begin
        if ICDimVal.GET(ICDimCode,ICDimValCode) then begin
          if ICDimVal.Blocked then begin
            DimErr :=
              STRSUBSTNO(
                Text016,ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode);
            exit(false);
          end;
          if not (ICDimVal."Dimension Value Type" in
                  [ICDimVal."Dimension Value Type"::Standard,
                   ICDimVal."Dimension Value Type"::"Begin-Total"])
          then begin
            DimErr :=
              STRSUBSTNO(Text017,ICDimVal.FIELDCAPTION("Dimension Value Type"),
                ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode,FORMAT(ICDimVal."Dimension Value Type"));
            exit(false);
          end;
        end else begin
          DimErr :=
            STRSUBSTNO(
              Text018,ICDimVal.TABLECAPTION,ICDimCode);
          exit(false);
        end;
      end;
      exit(true);
    END;

    [External]
    PROCEDURE CheckICDim@114(ICDimCode@1000 : Code[20]) : Boolean;
    VAR
      ICDim@1001 : Record "IC Dimension";
    BEGIN
      if ICDim.GET(ICDimCode) then begin
        if ICDim.Blocked then begin
          DimErr :=
            STRSUBSTNO(Text014,ICDim.TABLECAPTION,ICDimCode);
          exit(false);
        end;
      end else begin
        DimErr :=
          STRSUBSTNO(Text015,ICDim.TABLECAPTION,ICDimCode);
        exit(false);
      end;
      exit(true);
    END;

    [External]
    PROCEDURE SaveJobTaskDim@39(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];FieldNumber@1003 : Integer;ShortcutDimCode@1002 : Code[20]);
    VAR
      JobTaskDim@1004 : Record "Job Task Dimension";
    BEGIN
      GetGLSetup;
      if ShortcutDimCode <> '' then begin
        if JobTaskDim.GET(JobNo,JobTaskNo,GLSetupShortcutDimCode[FieldNumber])
        then begin
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.MODIFY;
        end else begin
          JobTaskDim.INIT;
          JobTaskDim.VALIDATE("Job No.",JobNo);
          JobTaskDim.VALIDATE("Job Task No.",JobTaskNo);
          JobTaskDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.INSERT;
        end;
      end else
        if JobTaskDim.GET(JobNo,JobTaskNo,GLSetupShortcutDimCode[FieldNumber]) then
          JobTaskDim.DELETE;
    END;

    [External]
    PROCEDURE SaveJobTaskTempDim@46(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    BEGIN
      GetGLSetup;
      if ShortcutDimCode <> '' then begin
        if JobTaskDimTemp.GET('','',GLSetupShortcutDimCode[FieldNumber])
        then begin
          JobTaskDimTemp."Dimension Value Code" := ShortcutDimCode;
          JobTaskDimTemp.MODIFY;
        end else begin
          JobTaskDimTemp.INIT;
          JobTaskDimTemp."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
          JobTaskDimTemp."Dimension Value Code" := ShortcutDimCode;
          JobTaskDimTemp.INSERT;
        end;
      end else
        if JobTaskDimTemp.GET('','',GLSetupShortcutDimCode[FieldNumber]) then
          JobTaskDimTemp.DELETE;
    END;

    [External]
    PROCEDURE InsertJobTaskDim@54(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1004 : Code[20]);
    VAR
      DefaultDim@1002 : Record "Default Dimension";
      JobTaskDim@1003 : Record "Job Task Dimension";
    BEGIN
      GetGLSetup;
      DefaultDim.SETRANGE("Table ID",DATABASE::Job);
      DefaultDim.SETRANGE("No.",JobNo);
      if DefaultDim.FINDSET(false,false) then
        repeat
          if DefaultDim."Dimension Value Code" <> '' then begin
            JobTaskDim.INIT;
            JobTaskDim."Job No." := JobNo;
            JobTaskDim."Job Task No." := JobTaskNo;
            JobTaskDim."Dimension Code" := DefaultDim."Dimension Code";
            JobTaskDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
            JobTaskDim.INSERT;
            if JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] then
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            if JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] then
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          end;
        until DefaultDim.NEXT = 0;

      JobTaskDimTemp.RESET;
      if JobTaskDimTemp.FINDSET then
        repeat
          if not JobTaskDim.GET(JobNo,JobTaskNo,JobTaskDimTemp."Dimension Code") then begin
            JobTaskDim.INIT;
            JobTaskDim."Job No." := JobNo;
            JobTaskDim."Job Task No." := JobTaskNo;
            JobTaskDim."Dimension Code" := JobTaskDimTemp."Dimension Code";
            JobTaskDim."Dimension Value Code" := JobTaskDimTemp."Dimension Value Code";
            JobTaskDim.INSERT;
            if JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] then
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            if JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] then
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          end;
        until JobTaskDimTemp.NEXT = 0;
      JobTaskDimTemp.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateJobTaskDim@15(DefaultDimension@1000 : Record "Default Dimension";FromOnDelete@1003 : Boolean);
    VAR
      JobTaskDimension@1001 : Record "Job Task Dimension";
      JobTask@1002 : Record "Job Task";
    BEGIN
      if DefaultDimension."Table ID" <> DATABASE::Job then
        exit;

      JobTask.SETRANGE("Job No.",DefaultDimension."No.");
      if JobTask.ISEMPTY then
        exit;

      if not CONFIRM(Text019,true) then
        exit;

      JobTaskDimension.SETRANGE("Job No.",DefaultDimension."No.");
      JobTaskDimension.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
      JobTaskDimension.DELETEALL(true);

      if FromOnDelete or
         (DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"No Code") or
         (DefaultDimension."Dimension Value Code" = '')
      then
        exit;

      if JobTask.FINDSET then
        repeat
          CLEAR(JobTaskDimension);
          JobTaskDimension."Job No." := JobTask."Job No.";
          JobTaskDimension."Job Task No." := JobTask."Job Task No.";
          JobTaskDimension."Dimension Code" := DefaultDimension."Dimension Code";
          JobTaskDimension."Dimension Value Code" := DefaultDimension."Dimension Value Code";
          JobTaskDimension.INSERT(true);
        until JobTask.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteJobTaskTempDim@76();
    BEGIN
      JobTaskDimTemp.RESET;
      JobTaskDimTemp.DELETEALL;
    END;

    [External]
    PROCEDURE CopyJobTaskDimToJobTaskDim@77(JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];NewJobNo@1002 : Code[20];NewJobTaskNo@1003 : Code[20]);
    VAR
      JobTaskDimension@1004 : Record "Job Task Dimension";
      JobTaskDimension2@1005 : Record "Job Task Dimension";
    BEGIN
      JobTaskDimension.RESET;
      JobTaskDimension.SETRANGE("Job No.",JobNo);
      JobTaskDimension.SETRANGE("Job Task No.",JobTaskNo);
      if JobTaskDimension.FINDSET then
        repeat
          if not JobTaskDimension2.GET(NewJobNo,NewJobTaskNo,JobTaskDimension."Dimension Code") then begin
            JobTaskDimension2.INIT;
            JobTaskDimension2."Job No." := NewJobNo;
            JobTaskDimension2."Job Task No." := NewJobTaskNo;
            JobTaskDimension2."Dimension Code" := JobTaskDimension."Dimension Code";
            JobTaskDimension2."Dimension Value Code" := JobTaskDimension."Dimension Value Code";
            JobTaskDimension2.INSERT(true);
          end;
        until JobTaskDimension.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckDimIDConsistency@10(VAR DimSetEntry@1000 : Record "Dimension Set Entry";VAR PostedDimSetEntry@1001 : Record "Dimension Set Entry";DocTableID@1002 : Integer;PostedDocTableID@1003 : Integer) : Boolean;
    BEGIN
      if DimSetEntry.FINDSET then;
      if PostedDimSetEntry.FINDSET then;
      repeat
        case true of
          DimSetEntry."Dimension Code" > PostedDimSetEntry."Dimension Code":
            begin
              DocDimConsistencyErr :=
                STRSUBSTNO(
                  Text012,
                  DimSetEntry.FIELDCAPTION("Dimension Code"),
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID),
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID));
              exit(false);
            end;
          DimSetEntry."Dimension Code" < PostedDimSetEntry."Dimension Code":
            begin
              DocDimConsistencyErr :=
                STRSUBSTNO(
                  Text012,
                  PostedDimSetEntry.FIELDCAPTION("Dimension Code"),
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID),
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID));
              exit(false);
            end;
          DimSetEntry."Dimension Code" = PostedDimSetEntry."Dimension Code":
            begin
              if DimSetEntry."Dimension Value Code" <> PostedDimSetEntry."Dimension Value Code" then begin
                DocDimConsistencyErr :=
                  STRSUBSTNO(
                    Text013,
                    DimSetEntry.FIELDCAPTION("Dimension Value Code"),
                    DimSetEntry.FIELDCAPTION("Dimension Code"),
                    DimSetEntry."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID),
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID));
                exit(false);
              end;
            end;
        end;
      until (DimSetEntry.NEXT = 0) and (PostedDimSetEntry.NEXT = 0);
      exit(true);
    END;

    LOCAL PROCEDURE CreateDimSetEntryFromDimValue@4(DimValue@1000 : Record "Dimension Value";VAR TempDimSetEntry@1001 : TEMPORARY Record "Dimension Set Entry");
    BEGIN
      TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
      TempDimSetEntry."Dimension Value Code" := DimValue.Code;
      TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
      TempDimSetEntry.INSERT;
    END;

    [External]
    PROCEDURE CreateDimSetIDFromICDocDim@5(VAR ICDocDim@1000 : Record "IC Document Dimension") : Integer;
    VAR
      DimValue@1004 : Record "Dimension Value";
      TempDimSetEntry@1003 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      if ICDocDim.FIND('-') then
        repeat
          DimValue.GET(
            ConvertICDimtoDim(ICDocDim."Dimension Code"),
            ConvertICDimValuetoDimValue(ICDocDim."Dimension Code",ICDocDim."Dimension Value Code"));
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        until ICDocDim.NEXT = 0;
      exit(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE CreateDimSetIDFromICJnlLineDim@7(VAR ICInboxOutboxJnlLineDim@1000 : Record "IC Inbox/Outbox Jnl. Line Dim.") : Integer;
    VAR
      DimValue@1001 : Record "Dimension Value";
      TempDimSetEntry@1002 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      if ICInboxOutboxJnlLineDim.FIND('-') then
        repeat
          DimValue.GET(
            ConvertICDimtoDim(ICInboxOutboxJnlLineDim."Dimension Code"),
            ConvertICDimValuetoDimValue(
              ICInboxOutboxJnlLineDim."Dimension Code",ICInboxOutboxJnlLineDim."Dimension Value Code"));
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        until ICInboxOutboxJnlLineDim.NEXT = 0;
      exit(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE CopyDimBufToDimSetEntry@65(VAR FromDimBuf@1000 : Record "Dimension Buffer";VAR DimSetEntry@1001 : Record "Dimension Set Entry");
    VAR
      DimValue@1005 : Record "Dimension Value";
    BEGIN
      with FromDimBuf do
        if FINDSET then
          repeat
            DimValue.GET("Dimension Code","Dimension Value Code");
            DimSetEntry."Dimension Code" := "Dimension Code";
            DimSetEntry."Dimension Value Code" := "Dimension Value Code";
            DimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            DimSetEntry.INSERT;
          until NEXT = 0;
    END;

    [External]
    PROCEDURE CreateDimSetIDFromDimBuf@12(VAR DimBuf@1000 : Record "Dimension Buffer") : Integer;
    VAR
      DimValue@1001 : Record "Dimension Value";
      TempDimSetEntry@1002 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      if DimBuf.FINDSET then
        repeat
          DimValue.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
          CreateDimSetEntryFromDimValue(DimValue,TempDimSetEntry);
        until DimBuf.NEXT = 0;
      exit(GetDimensionSetID(TempDimSetEntry));
    END;

    [External]
    PROCEDURE GetDimSetIDsForFilter@23(DimCode@1000 : Code[20];DimValueFilter@1001 : Text);
    VAR
      DimSetEntry2@1002 : Record "Dimension Set Entry";
    BEGIN
      DimSetEntry2.SETFILTER("Dimension Code",'%1',DimCode);
      DimSetEntry2.SETFILTER("Dimension Value Code",DimValueFilter);
      if DimSetEntry2.FINDSET then
        repeat
          AddDimSetIDtoTempEntry(TempDimSetEntry2,DimSetEntry2."Dimension Set ID");
        until DimSetEntry2.NEXT = 0;
      if FilterIncludesBlank(DimCode,DimValueFilter) then
        GetDimSetIDsForBlank(DimCode);
      DimSetFilterCtr += 1;
    END;

    LOCAL PROCEDURE GetDimSetIDsForBlank@27(DimCode@1000 : Code[20]);
    VAR
      TempDimSetEntry@1001 : TEMPORARY Record "Dimension Set Entry";
      DimSetEntry2@1002 : Record "Dimension Set Entry";
      PrevDimSetID@1004 : Integer;
      i@1003 : Integer;
    BEGIN
      AddDimSetIDtoTempEntry(TempDimSetEntry,0);
      for i := 1 to 2 do begin
        if i = 2 then
          DimSetEntry2.SETFILTER("Dimension Code",'%1',DimCode);
        if DimSetEntry2.FINDSET then begin
          PrevDimSetID := 0;
          repeat
            if DimSetEntry2."Dimension Set ID" <> PrevDimSetID then begin
              AddDimSetIDtoTempEntry(TempDimSetEntry,DimSetEntry2."Dimension Set ID");
              PrevDimSetID := DimSetEntry2."Dimension Set ID";
            end;
          until DimSetEntry2.NEXT = 0;
        end;
      end;
      TempDimSetEntry.SETFILTER("Dimension Value ID",'%1',1);
      if TempDimSetEntry.FINDSET then
        repeat
          AddDimSetIDtoTempEntry(TempDimSetEntry2,TempDimSetEntry."Dimension Set ID");
        until TempDimSetEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetDimSetFilter@43() DimSetFilter : Text;
    BEGIN
      TempDimSetEntry2.SETFILTER("Dimension Value ID",'%1',DimSetFilterCtr);
      if TempDimSetEntry2.FINDSET then begin
        DimSetFilter := FORMAT(TempDimSetEntry2."Dimension Set ID");
        if TempDimSetEntry2.NEXT <> 0 then
          repeat
            DimSetFilter += '|' + FORMAT(TempDimSetEntry2."Dimension Set ID");
          until TempDimSetEntry2.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE FilterIncludesBlank@25(DimCode@1001 : Code[20];DimValueFilter@1000 : Text) : Boolean;
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimSetEntry."Dimension Code" := DimCode;
      TempDimSetEntry.INSERT;
      TempDimSetEntry.SETFILTER("Dimension Value Code",DimValueFilter);
      exit(not TempDimSetEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE AddDimSetIDtoTempEntry@30(VAR TempDimSetEntry@1001 : TEMPORARY Record "Dimension Set Entry";DimSetID@1000 : Integer);
    BEGIN
      if TempDimSetEntry.GET(DimSetID,'') then begin
        TempDimSetEntry."Dimension Value ID" += 1;
        TempDimSetEntry.MODIFY;
      end else begin
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Value ID" := 1;
        TempDimSetEntry.INSERT
      end;
    END;

    [External]
    PROCEDURE ClearDimSetFilter@26();
    BEGIN
      TempDimSetEntry2.RESET;
      TempDimSetEntry2.DELETEALL;
      DimSetFilterCtr := 0;
    END;

    [External]
    PROCEDURE GetTempDimSetEntry@31(VAR TempDimSetEntry@1000 : TEMPORARY Record "Dimension Set Entry");
    BEGIN
      TempDimSetEntry.COPY(TempDimSetEntry2,true);
    END;

    LOCAL PROCEDURE UpdateCostType@28(DefaultDimension@1000 : Record "Default Dimension";CallingTrigger@1004 : 'OnInsert,OnModify,OnDelete');
    VAR
      GLAcc@1003 : Record "G/L Account";
      CostAccSetup@1002 : Record "Cost Accounting Setup";
      CostAccMgt@1001 : Codeunit "Cost Account Mgt";
    BEGIN
      if CostAccSetup.GET and (DefaultDimension."Table ID" = DATABASE::"G/L Account") then
        if GLAcc.GET(DefaultDimension."No.") then
          CostAccMgt.UpdateCostTypeFromDefaultDimension(DefaultDimension,GLAcc,CallingTrigger);
    END;

    [External]
    PROCEDURE CreateDimSetFromJobTaskDim@32(JobNo@1006 : Code[20];JobTaskNo@1001 : Code[20];VAR GlobalDimVal1@1005 : Code[20];VAR GlobalDimVal2@1004 : Code[20]) NewDimSetID : Integer;
    VAR
      JobTaskDimension@1000 : Record "Job Task Dimension";
      DimValue@1002 : Record "Dimension Value";
      TempDimSetEntry@1003 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      with JobTaskDimension do begin
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task No.",JobTaskNo);
        if FINDSET then begin
          repeat
            DimValue.GET("Dimension Code","Dimension Value Code");
            TempDimSetEntry."Dimension Code" := "Dimension Code";
            TempDimSetEntry."Dimension Value Code" := "Dimension Value Code";
            TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
            TempDimSetEntry.INSERT(true);
          until NEXT = 0;
          NewDimSetID := GetDimensionSetID(TempDimSetEntry);
          UpdateGlobalDimFromDimSetID(NewDimSetID,GlobalDimVal1,GlobalDimVal2);
        end;
      end;
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDim@34(VAR GenJnlLine@1000 : Record "Gen. Journal Line";DimSetID@1001 : Integer);
    BEGIN
      GenJnlLine."Dimension Set ID" := DimSetID;
      UpdateGlobalDimFromDimSetID(
        GenJnlLine."Dimension Set ID",
        GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDimFromCustLedgEntry@33(VAR GenJnlLine@1000 : Record "Gen. Journal Line";DtldCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry");
    VAR
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
    BEGIN
      if DtldCustLedgEntry."Cust. Ledger Entry No." <> 0 then begin
        CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
        UpdateGenJnlLineDim(GenJnlLine,CustLedgEntry."Dimension Set ID");
      end;
    END;

    [External]
    PROCEDURE UpdateGenJnlLineDimFromVendLedgEntry@29(VAR GenJnlLine@1001 : Record "Gen. Journal Line";DtldVendLedgEntry@1000 : Record "Detailed Vendor Ledg. Entry");
    VAR
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      if DtldVendLedgEntry."Vendor Ledger Entry No." <> 0 then begin
        VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
        UpdateGenJnlLineDim(GenJnlLine,VendLedgEntry."Dimension Set ID");
      end;
    END;

    [External]
    PROCEDURE GetDimSetEntryDefaultDim@45(VAR DimSetEntry2@1001 : Record "Dimension Set Entry");
    VAR
      DimValue@1000 : Record "Dimension Value";
    BEGIN
      if not DimSetEntry2.ISEMPTY then
        DimSetEntry2.DELETEALL;
      if TempDimBuf2.FINDSET then
        repeat
          DimValue.GET(TempDimBuf2."Dimension Code",TempDimBuf2."Dimension Value Code");
          DimSetEntry2."Dimension Code" := TempDimBuf2."Dimension Code";
          DimSetEntry2."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          DimSetEntry2."Dimension Value ID" := DimValue."Dimension Value ID";
          DimSetEntry2.INSERT;
        until TempDimBuf2.NEXT = 0;
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
    END;

    [External]
    PROCEDURE InsertObject@35(VAR TempAllObjWithCaption@1000 : TEMPORARY Record AllObjWithCaption;TableID@1001 : Integer);
    VAR
      AllObjWithCaption@1002 : Record AllObjWithCaption;
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
      AllObjWithCaption.SETRANGE("Object ID",TableID);
      if AllObjWithCaption.FINDFIRST then begin
        TempAllObjWithCaption := AllObjWithCaption;
        TempAllObjWithCaption.INSERT;
      end;
    END;

    [External]
    PROCEDURE GetConsolidatedDimFilterByDimFilter@37(VAR Dimension@1000 : Record Dimension;DimFilter@1001 : Text) ConsolidatedDimFilter : Text;
    BEGIN
      Dimension.SETFILTER("Consolidation Code",DimFilter);
      ConsolidatedDimFilter += DimFilter;
      if Dimension.FINDSET then
        repeat
          ConsolidatedDimFilter += '|' + Dimension.Code;
        until Dimension.NEXT = 0;
    END;

    [External]
    PROCEDURE ResolveDimValueFilter@47(VAR DimValueFilter@1001 : Text;DimensionCode@1000 : Code[20]);
    VAR
      TempDimensionValue@1002 : TEMPORARY Record "Dimension Value";
    BEGIN
      GetDimValuesWithTotalings(TempDimensionValue,DimValueFilter,DimensionCode);
      GetFilterFromDimValuesTable(TempDimensionValue,DimValueFilter);
    END;

    LOCAL PROCEDURE GetDimValuesWithTotalings@44(VAR TempDimensionValue@1004 : TEMPORARY Record "Dimension Value";DimValueFilter@1002 : Text;DimensionCode@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record "Dimension Value";
    BEGIN
      if not TempDimensionValue.ISTEMPORARY or (DimensionCode = '') then
        exit;
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETFILTER(Code,DimValueFilter);
      if DimensionValue.FINDSET then
        repeat
          TempDimensionValue.INIT;
          TempDimensionValue.Code := DimensionValue.Code;
          TempDimensionValue."Dimension Code" := DimensionValue."Dimension Code";
          TempDimensionValue."Dimension Value Type" := DimensionValue."Dimension Value Type";
          if TempDimensionValue.INSERT then
            if DimensionValue.Totaling <> '' then
              GetDimValuesWithTotalings(TempDimensionValue,DimensionValue.Totaling,DimensionCode);
        until DimensionValue.NEXT = 0;
    END;

    LOCAL PROCEDURE GetFilterFromDimValuesTable@42(VAR TempDimensionValue@1001 : TEMPORARY Record "Dimension Value";VAR DimValueFilter@1000 : Text);
    VAR
      DimensionValue@1005 : Record "Dimension Value";
      RangeStartCode@1006 : Code[20];
      PreviousCode@1002 : Code[20];
      RangeStarted@1003 : Boolean;
      Finished@1007 : Boolean;
    BEGIN
      with TempDimensionValue do begin
        if not ISTEMPORARY then
          exit;
        SETFILTER("Dimension Value Type",'%1|%2',"Dimension Value Type"::Standard,"Dimension Value Type"::Heading);
        if FINDSET then begin
          Finished := false;
          DimensionValue.SETRANGE("Dimension Code","Dimension Code");
          DimensionValue.FINDSET;
          DimValueFilter := '';
          repeat
            if Code = DimensionValue.Code then begin
              if not RangeStarted then begin
                RangeStarted := true;
                RangeStartCode := Code;
              end;
              PreviousCode := Code;
              DimensionValue.NEXT;
              if NEXT = 0 then
                Finished := true;
            end else begin
              if RangeStarted then begin
                AddRangeToFilter(DimValueFilter,RangeStartCode,PreviousCode);
                RangeStarted := false;
              end;
              repeat
                DimensionValue.NEXT;
              until DimensionValue.Code = Code;
            end;
          until Finished;
          if RangeStarted then
            AddRangeToFilter(DimValueFilter,RangeStartCode,PreviousCode);
        end
      end
    END;

    LOCAL PROCEDURE AddRangeToFilter@24(VAR DimValueFilter@1000 : Text;RangeStartCode@1002 : Code[20];RangeEndCode@1001 : Code[20]);
    BEGIN
      if DimValueFilter <> '' then begin
        if STRLEN(DimValueFilter) + 1 > MAXSTRLEN(DimValueFilter) then
          ERROR(OverflowDimFilterErr);
        DimValueFilter := DimValueFilter + '|';
      end;
      if RangeStartCode = RangeEndCode then begin
        if STRLEN(DimValueFilter) + STRLEN(RangeStartCode) > MAXSTRLEN(DimValueFilter) then
          ERROR(OverflowDimFilterErr);
        DimValueFilter := DimValueFilter + RangeStartCode;
      end else begin
        if STRLEN(DimValueFilter) + STRLEN(RangeStartCode) + 2 + STRLEN(RangeEndCode) > MAXSTRLEN(DimValueFilter) then
          ERROR(OverflowDimFilterErr);
        DimValueFilter := DimValueFilter + RangeStartCode + '..' + RangeEndCode;
      end;
    END;

    [Integration]
    [Internal]
    PROCEDURE OnAfterSetupObjectNoList@2(VAR TempAllObjWithCaption@1000 : TEMPORARY Record AllObjWithCaption);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetRecDefaultDimID@155(RecVariant@1011 : Variant;CurrFieldNo@1012 : Integer;VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];VAR SourceCode@1002 : Code[20];VAR InheritFromDimSetID@1004 : Integer;VAR InheritFromTableNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTypeToTableID2@38(VAR TableID@1002 : Integer;Type@1000 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

