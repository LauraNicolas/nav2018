OBJECT Table 780 Certificate of Supply
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Certificate of Supply;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Sales Shipment,Service Shipment,Return Shipment;
                                                   OptionString="Sales Shipment","Service Shipment","Return Shipment" }
    { 2   ;   ;Document No.        ;Code20        ;TableRelation=IF ("Document Type"=FILTER("Sales Shipment")) "Sales Shipment Header"."No."
                                                                 ELSE IF ("Document Type"=FILTER("Service Shipment")) "Service Shipment Header"."No."
                                                                 ELSE IF ("Document Type"=FILTER("Return Shipment")) "Return Shipment Header"."No.";
                                                   CaptionML=ENU=Document No. }
    { 3   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                if xRec.Status = Status then
                                                                  exit;

                                                                if  "No." = '' then
                                                                  "No." := "Document No.";

                                                                if Status = Status::Received then
                                                                  "Receipt Date" := WORKDATE
                                                                else
                                                                  "Receipt Date" := 0D;

                                                                if Status = Status::"Not Applicable" then
                                                                  "No." := ''
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Not Applicable,Required,Received,Not Received;
                                                   OptionString="Not Applicable",Required,Received,"Not Received" }
    { 4   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if Status = Status::"Not Applicable" then begin
                                                                  if "No." <> '' then
                                                                    ERROR(NoCannotBeEnteredErr);
                                                                end else
                                                                  if "No." = '' then
                                                                    ERROR(NoCannotBeEmptyErr)
                                                              END;

                                                   CaptionML=ENU=No. }
    { 5   ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                CheckRcptDate
                                                              END;

                                                   CaptionML=ENU=Receipt Date }
    { 6   ;   ;Printed             ;Boolean       ;CaptionML=ENU=Printed }
    { 7   ;   ;Customer/Vendor Name;Text50        ;CaptionML=ENU=Customer/Vendor Name;
                                                   Editable=false }
    { 8   ;   ;Shipment Method Code;Code10        ;CaptionML=ENU=Shipment Method Code;
                                                   Editable=false }
    { 9   ;   ;Shipment/Posting Date;Date         ;CaptionML=ENU=Shipment/Posting Date;
                                                   Editable=false }
    { 10  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=ENU=Ship-to Country/Region Code;
                                                   Editable=false }
    { 11  ;   ;Customer/Vendor No. ;Code20        ;CaptionML=ENU=Customer/Vendor No. }
    { 12  ;   ;Vehicle Registration No.;Text20    ;OnValidate=BEGIN
                                                                if (Status = Status::Received) and ("Vehicle Registration No." <> xRec."Vehicle Registration No.") then
                                                                  ERROR(STRSUBSTNO(VehicleRegNoCannotBeChangedErr,FIELDCAPTION("Vehicle Registration No."),Status::Received))
                                                              END;

                                                   CaptionML=ENU=Vehicle Registration No. }
  }
  KEYS
  {
    {    ;"Document Type","Document No."          ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecDateCannotBeEmptyErr@1000 : TextConst 'ENU=The Receipt Date cannot be empty when Status is Received.';
      RecDateCannotBeEnteredErr@1001 : TextConst 'ENU=You can enter the Receipt Date only if the status of the Certificate of Supply is Received.';
      CertRecDateBeforeShipmPostDateErr@1003 : TextConst 'ENU=The Receipt Date of the certificate cannot be earlier than the Shipment/Posting Date.';
      NoCannotBeEnteredErr@1002 : TextConst 'ENU=The No. field cannot be filled in when the status of the Certificate of Supply is set to Not Applicable.';
      NoCannotBeEmptyErr@1004 : TextConst 'ENU=The No. field cannot be empty when the status of the Certificate of Supply is set to Required, Received, or Not Received.';
      VehicleRegNoCannotBeChangedErr@1005 : TextConst 'ENU=The %1 field cannot be changed when the status of the Certificate of Supply is set to %2.';

    [External]
    PROCEDURE Print@1();
    BEGIN
      REPORT.RUNMODAL(REPORT::"Certificate of Supply",true,false,Rec);
    END;

    [External]
    PROCEDURE SetPrintedTrue@2();
    BEGIN
      if Status = Status::"Not Applicable" then
        SetRequired("Document No.");
      Printed := true;

      MODIFY;
    END;

    [External]
    PROCEDURE SetRequired@3(CertificateNo@1000 : Code[20]);
    BEGIN
      Status := Status::Required;
      "No." := CertificateNo;
      "Receipt Date" := 0D;
      MODIFY
    END;

    LOCAL PROCEDURE CheckRcptDate@37();
    BEGIN
      if Status = Status::Received then begin
        if "Receipt Date" = 0D then
          ERROR(RecDateCannotBeEmptyErr);
        if "Shipment/Posting Date" > "Receipt Date" then
          ERROR(CertRecDateBeforeShipmPostDateErr);
      end else
        if "Receipt Date" <> 0D then
          ERROR(RecDateCannotBeEnteredErr);
    END;

    [External]
    PROCEDURE InitFromSales@11(VAR SalesShipmentHeader@1000 : Record "Sales Shipment Header");
    BEGIN
      if not GET("Document Type"::"Sales Shipment",SalesShipmentHeader."No.") then begin
        INIT;
        "Document Type" := "Document Type"::"Sales Shipment";
        "Document No." := SalesShipmentHeader."No.";
        "Customer/Vendor Name" := SalesShipmentHeader."Ship-to Name";
        "Shipment Method Code" := SalesShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := SalesShipmentHeader."Shipment Date";
        "Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := SalesShipmentHeader."Bill-to Customer No.";
        INSERT(true);
      end
    END;

    [External]
    PROCEDURE InitFromPurchase@10(VAR ReturnShipmentHeader@1000 : Record "Return Shipment Header");
    BEGIN
      if not GET("Document Type"::"Return Shipment",ReturnShipmentHeader."No.") then begin
        INIT;
        "Document Type" := "Document Type"::"Return Shipment";
        "Document No." := ReturnShipmentHeader."No.";
        "Customer/Vendor Name" := ReturnShipmentHeader."Ship-to Name";
        "Shipment Method Code" := ReturnShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := ReturnShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ReturnShipmentHeader."Pay-to Vendor No.";
        INSERT(true);
      end
    END;

    [External]
    PROCEDURE InitFromService@5(VAR ServiceShipmentHeader@1000 : Record "Service Shipment Header");
    BEGIN
      if not GET("Document Type"::"Service Shipment",ServiceShipmentHeader."No.") then begin
        INIT;
        "Document Type" := "Document Type"::"Service Shipment";
        "Document No." := ServiceShipmentHeader."No.";
        "Customer/Vendor Name" := ServiceShipmentHeader."Ship-to Name";
        "Shipment Method Code" := '';
        "Shipment/Posting Date" := ServiceShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ServiceShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ServiceShipmentHeader."Bill-to Customer No.";
        INSERT(true);
      end
    END;

    [External]
    PROCEDURE InitRecord@4(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      SalesShipmentHeader@1004 : Record "Sales Shipment Header";
      ServiceShipmentHeader@1003 : Record "Service Shipment Header";
      ReturnShipmentHeader@1002 : Record "Return Shipment Header";
    BEGIN
      case DocumentType of
        "Document Type"::"Sales Shipment":
          begin
            SalesShipmentHeader.GET(DocumentNo);
            InitFromSales(SalesShipmentHeader);
          end;
        "Document Type"::"Service Shipment":
          begin
            ServiceShipmentHeader.GET(DocumentNo);
            InitFromService(ServiceShipmentHeader);
          end;
        "Document Type"::"Return Shipment":
          begin
            ReturnShipmentHeader.GET(DocumentNo);
            InitFromPurchase(ReturnShipmentHeader);
          end;
      end
    END;

    BEGIN
    END.
  }
}

