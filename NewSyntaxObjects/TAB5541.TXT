OBJECT Table 5541 Timeline Event Change
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Timeline Event Change;
  }
  FIELDS
  {
    { 1   ;   ;Reference No.       ;Text200       ;CaptionML=ENU=Reference No.;
                                                   Editable=false }
    { 2   ;   ;Changes             ;Integer       ;CaptionML=ENU=Changes;
                                                   Editable=false }
    { 4   ;   ;Original Due Date   ;Date          ;CaptionML=ENU=Original Due Date;
                                                   Editable=false }
    { 5   ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 6   ;   ;ChangeRefNo         ;Text250       ;CaptionML=ENU=ChangeRefNo;
                                                   Editable=false }
    { 20  ;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 21  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 1000;   ;ID                  ;Integer       ;CaptionML=ENU=ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
    {    ;"Reference No."                          }
    {    ;"Due Date"                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE TransferFromTransactionChangeTable@18(VAR TimelineEventChange@1004 : Record "Timeline Event Change";VAR changeTable@1003 : DotNet "'Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.Timeline, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.TimelineVisualization.DataModel+TransactionChangesDataTable");
    VAR
      changeRow@1002 : DotNet "'Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.Timeline, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.TimelineVisualization.DataModel+TransactionChangesRow";
      rowEnum@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerator`1";
      Id@1001 : Integer;
    BEGIN
      TimelineEventChange.RESET;
      TimelineEventChange.DELETEALL;

      rowEnum := changeTable.GetEnumerator;
      Id := 1;

      while rowEnum.MoveNext do begin
        changeRow := rowEnum.Current;
        InsertTransactionRow(TimelineEventChange,changeRow,Id);
        Id += 1;
      end;

      TimelineEventChange.SETCURRENTKEY("Due Date"); // Restore key to Due Date
    END;

    LOCAL PROCEDURE InsertTransactionRow@1(VAR TimelineEventChange@1001 : Record "Timeline Event Change";changeRow@1002 : DotNet "'Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.Timeline, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.TimelineVisualization.DataModel+TransactionChangesRow";Id@1000 : Integer);
    BEGIN
      TimelineEventChange.INIT;
      TimelineEventChange.ID := Id;
      TimelineEventChange."Reference No." := changeRow.RefNo;

      if not changeRow.IsNewDateNull then
        TimelineEventChange."Due Date" := DT2DATE(changeRow.NewDate);

      if not changeRow.IsOriginalDateNull then
        TimelineEventChange."Original Due Date" := DT2DATE(changeRow.OriginalDate);

      if not changeRow.IsNewQuantityNull then
        TimelineEventChange.Quantity := changeRow.NewQuantity;

      if not changeRow.IsOriginalQuantityNull then
        TimelineEventChange."Original Quantity" := changeRow.OriginalQuantity;

      TimelineEventChange.Changes := changeRow.Changes;
      TimelineEventChange.ChangeRefNo := changeRow.ChangeRefNo;
      TimelineEventChange.INSERT;
    END;

    [External]
    PROCEDURE ActionMessage@7() : Integer;
    VAR
      ActionMsg@1000 : '" ",New,"Change Qty.",Reschedule,"Resched. & Chg. Qty.",Cancel';
    BEGIN
      if ("Original Due Date" = 0D) and ("Original Quantity" = 0) then
        exit(ActionMsg::New);

      if Quantity = 0 then
        exit(ActionMsg::Cancel);

      if ("Due Date" <> "Original Due Date") and (Quantity <> "Original Quantity") then
        exit(ActionMsg::"Resched. & Chg. Qty.");

      if "Due Date" <> "Original Due Date" then
        exit(ActionMsg::Reschedule);

      if Quantity <> "Original Quantity" then
        exit(ActionMsg::"Change Qty.");

      exit(0);
    END;

    [External]
    PROCEDURE NewSupply@1203() : Boolean;
    BEGIN
      exit((Changes = 1) and (ChangeRefNo = ''));
    END;

    BEGIN
    END.
  }
}

