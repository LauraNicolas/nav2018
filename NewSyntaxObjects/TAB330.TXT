OBJECT Table 330 Currency Exchange Rate
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Currency Code";
    CaptionML=ENU=Currency Exchange Rate;
    LookupPageID="Currency Exchange Rates";
    DrillDownPageID="Currency Exchange Rates";
  }
  FIELDS
  {
    { 1   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if "Currency Code" = "Relational Currency Code" then
                                                                  ERROR(
                                                                    Text000,FIELDCAPTION("Currency Code"),FIELDCAPTION("Relational Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   NotBlank=true;
                                                   Editable=false }
    { 2   ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date;
                                                   NotBlank=true }
    { 3   ;   ;Exchange Rate Amount;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Exchange Rate Amount");
                                                              END;

                                                   CaptionML=ENU=Exchange Rate Amount;
                                                   DecimalPlaces=1:6;
                                                   MinValue=0 }
    { 4   ;   ;Adjustment Exch. Rate Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Adjustment Exch. Rate Amount");
                                                              END;

                                                   AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Adjustment Exch. Rate Amount;
                                                   DecimalPlaces=1:6;
                                                   MinValue=0 }
    { 5   ;   ;Relational Currency Code;Code10    ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if "Currency Code" = "Relational Currency Code" then
                                                                  ERROR(
                                                                    Text000,FIELDCAPTION("Currency Code"),FIELDCAPTION("Relational Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Relational Currency Code }
    { 6   ;   ;Relational Exch. Rate Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Relational Exch. Rate Amount");
                                                              END;

                                                   AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Relational Exch. Rate Amount;
                                                   DecimalPlaces=1:6;
                                                   MinValue=0 }
    { 7   ;   ;Fix Exchange Rate Amount;Option    ;CaptionML=ENU=Fix Exchange Rate Amount;
                                                   OptionCaptionML=ENU=Currency,Relational Currency,Both;
                                                   OptionString=Currency,"Relational Currency",Both }
    { 8   ;   ;Relational Adjmt Exch Rate Amt;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Relational Adjmt Exch Rate Amt");
                                                              END;

                                                   AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Relational Adjmt Exch Rate Amt;
                                                   DecimalPlaces=1:6;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;"Currency Code","Starting Date"         ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The currency code in the %1 field and the %2 field cannot be the same.';
      CurrencyExchRate2@1001 : ARRAY [2] OF Record "Currency Exchange Rate";
      CurrencyExchRate3@1002 : ARRAY [3] OF Record "Currency Exchange Rate";
      RelExchangeRateAmt@1003 : Decimal;
      ExchangeRateAmt@1004 : Decimal;
      RelCurrencyCode@1005 : Code[10];
      FixExchangeRateAmt@1006 : Option;
      CurrencyFactor@1007 : Decimal;
      UseAdjmtAmounts@1008 : Boolean;
      CurrencyCode2@1009 : ARRAY [2] OF Code[10];
      Date2@1010 : ARRAY [2] OF Date;

    [External]
    PROCEDURE ExchangeAmtLCYToFCY@1(Date@1000 : Date;CurrencyCode@1001 : Code[10];Amount@1002 : Decimal;Factor@1003 : Decimal) : Decimal;
    BEGIN
      if CurrencyCode = '' then
        exit(Amount);
      FindCurrency(Date,CurrencyCode,1);
      TESTFIELD("Exchange Rate Amount");
      TESTFIELD("Relational Exch. Rate Amount");
      if "Relational Currency Code" = '' then
        if "Fix Exchange Rate Amount" = "Fix Exchange Rate Amount"::Both then
          Amount := (Amount / "Relational Exch. Rate Amount") * "Exchange Rate Amount"
        else
          Amount := Amount * Factor
      else begin
        RelExchangeRateAmt := "Relational Exch. Rate Amount";
        ExchangeRateAmt := "Exchange Rate Amount";
        RelCurrencyCode := "Relational Currency Code";
        FixExchangeRateAmt := "Fix Exchange Rate Amount";
        FindCurrency(Date,RelCurrencyCode,2);
        TESTFIELD("Exchange Rate Amount");
        TESTFIELD("Relational Exch. Rate Amount");
        case FixExchangeRateAmt of
          "Fix Exchange Rate Amount"::"Relational Currency":
            ExchangeRateAmt :=
              (Factor * RelExchangeRateAmt * "Relational Exch. Rate Amount") /
              "Exchange Rate Amount";
          "Fix Exchange Rate Amount"::Currency:
            RelExchangeRateAmt :=
              (ExchangeRateAmt * "Exchange Rate Amount") /
              (Factor * "Relational Exch. Rate Amount");
          "Fix Exchange Rate Amount"::Both:
            case "Fix Exchange Rate Amount" of
              "Fix Exchange Rate Amount"::"Relational Currency":
                "Exchange Rate Amount" :=
                  (Factor * RelExchangeRateAmt * "Relational Exch. Rate Amount") /
                  ExchangeRateAmt;
              "Fix Exchange Rate Amount"::Currency:
                "Relational Exch. Rate Amount" :=
                  (ExchangeRateAmt * "Exchange Rate Amount") /
                  (Factor * RelExchangeRateAmt);
            end;
        end;
        Amount := (Amount / RelExchangeRateAmt) * ExchangeRateAmt;
        Amount := (Amount / "Relational Exch. Rate Amount") * "Exchange Rate Amount";
      end;
      exit(Amount);
    END;

    [External]
    PROCEDURE ExchangeAmtFCYToLCY@6(Date@1000 : Date;CurrencyCode@1001 : Code[10];Amount@1002 : Decimal;Factor@1003 : Decimal) : Decimal;
    BEGIN
      if CurrencyCode = '' then
        exit(Amount);
      FindCurrency(Date,CurrencyCode,1);
      if not UseAdjmtAmounts then begin
        TESTFIELD("Exchange Rate Amount");
        TESTFIELD("Relational Exch. Rate Amount");
      end else begin
        TESTFIELD("Adjustment Exch. Rate Amount");
        TESTFIELD("Relational Adjmt Exch Rate Amt");
        "Exchange Rate Amount" := "Adjustment Exch. Rate Amount";
        "Relational Exch. Rate Amount" := "Relational Adjmt Exch Rate Amt";
      end;
      if "Relational Currency Code" = '' then
        if "Fix Exchange Rate Amount" = "Fix Exchange Rate Amount"::Both then
          Amount := (Amount / "Exchange Rate Amount") * "Relational Exch. Rate Amount"
        else
          Amount := Amount / Factor
      else begin
        RelExchangeRateAmt := "Relational Exch. Rate Amount";
        ExchangeRateAmt := "Exchange Rate Amount";
        RelCurrencyCode := "Relational Currency Code";
        FixExchangeRateAmt := "Fix Exchange Rate Amount";
        FindCurrency(Date,RelCurrencyCode,2);
        if not UseAdjmtAmounts then begin
          TESTFIELD("Exchange Rate Amount");
          TESTFIELD("Relational Exch. Rate Amount");
        end else begin
          TESTFIELD("Adjustment Exch. Rate Amount");
          TESTFIELD("Relational Adjmt Exch Rate Amt");
          "Exchange Rate Amount" := "Adjustment Exch. Rate Amount";
          "Relational Exch. Rate Amount" := "Relational Adjmt Exch Rate Amt";
        end;
        case FixExchangeRateAmt of
          "Fix Exchange Rate Amount"::"Relational Currency":
            ExchangeRateAmt :=
              (RelExchangeRateAmt * "Relational Exch. Rate Amount") /
              ("Exchange Rate Amount" * Factor);
          "Fix Exchange Rate Amount"::Currency:
            RelExchangeRateAmt :=
              ((Factor * ExchangeRateAmt * "Exchange Rate Amount") /
               "Relational Exch. Rate Amount");
          "Fix Exchange Rate Amount"::Both:
            case "Fix Exchange Rate Amount" of
              "Fix Exchange Rate Amount"::"Relational Currency":
                "Exchange Rate Amount" :=
                  (RelExchangeRateAmt * "Relational Exch. Rate Amount") /
                  (ExchangeRateAmt * Factor);
              "Fix Exchange Rate Amount"::Currency:
                "Relational Exch. Rate Amount" :=
                  ((Factor * ExchangeRateAmt * "Exchange Rate Amount") /
                   RelExchangeRateAmt);
              "Fix Exchange Rate Amount"::Both:
                begin
                  Amount := (Amount / ExchangeRateAmt) * RelExchangeRateAmt;
                  Amount := (Amount / "Exchange Rate Amount") * "Relational Exch. Rate Amount";
                  exit(Amount);
                end;
            end;
        end;
        Amount := (Amount / RelExchangeRateAmt) * ExchangeRateAmt;
        Amount := (Amount / "Relational Exch. Rate Amount") * "Exchange Rate Amount";
      end;
      exit(Amount);
    END;

    [External]
    PROCEDURE ExchangeRate@2(Date@1000 : Date;CurrencyCode@1001 : Code[10]) : Decimal;
    BEGIN
      if CurrencyCode = '' then
        exit(1);
      FindCurrency(Date,CurrencyCode,1);
      if not UseAdjmtAmounts then begin
        TESTFIELD("Exchange Rate Amount");
        TESTFIELD("Relational Exch. Rate Amount");
      end else begin
        TESTFIELD("Adjustment Exch. Rate Amount");
        TESTFIELD("Relational Adjmt Exch Rate Amt");
        "Exchange Rate Amount" := "Adjustment Exch. Rate Amount";
        "Relational Exch. Rate Amount" := "Relational Adjmt Exch Rate Amt";
      end;
      RelExchangeRateAmt := "Relational Exch. Rate Amount";
      ExchangeRateAmt := "Exchange Rate Amount";
      RelCurrencyCode := "Relational Currency Code";
      if "Relational Currency Code" = '' then
        CurrencyFactor := "Exchange Rate Amount" / "Relational Exch. Rate Amount"
      else begin
        FindCurrency(Date,RelCurrencyCode,2);
        if not UseAdjmtAmounts then begin
          TESTFIELD("Exchange Rate Amount");
          TESTFIELD("Relational Exch. Rate Amount");
        end else begin
          TESTFIELD("Adjustment Exch. Rate Amount");
          TESTFIELD("Relational Adjmt Exch Rate Amt");
          "Exchange Rate Amount" := "Adjustment Exch. Rate Amount";
          "Relational Exch. Rate Amount" := "Relational Adjmt Exch Rate Amt";
        end;
        CurrencyFactor := (ExchangeRateAmt * "Exchange Rate Amount") / (RelExchangeRateAmt * "Relational Exch. Rate Amount");
      end;
      exit(CurrencyFactor);
    END;

    [External]
    PROCEDURE ExchangeAmtLCYToFCYOnlyFactor@3(Amount@1000 : Decimal;Factor@1001 : Decimal) : Decimal;
    BEGIN
      Amount := Factor * Amount;
      exit(Amount);
    END;

    [External]
    PROCEDURE ExchangeAmtFCYToLCYAdjmt@5(Date@1000 : Date;CurrencyCode@1001 : Code[10];Amount@1002 : Decimal;Factor@1003 : Decimal) : Decimal;
    BEGIN
      UseAdjmtAmounts := true;
      exit(ExchangeAmtFCYToLCY(Date,CurrencyCode,Amount,Factor));
    END;

    [External]
    PROCEDURE ExchangeRateAdjmt@4(Date@1000 : Date;CurrencyCode@1001 : Code[10]) : Decimal;
    BEGIN
      UseAdjmtAmounts := true;
      exit(ExchangeRate(Date,CurrencyCode));
    END;

    [External]
    PROCEDURE ExchangeAmount@43(Amount@1000 : Decimal;FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];UsePostingDate@1003 : Date) : Decimal;
    VAR
      ToCurrency@1004 : Record Currency;
    BEGIN
      if (FromCurrencyCode = ToCurrencyCode) or (Amount = 0) then
        exit(Amount);

      Amount :=
        ExchangeAmtFCYToFCY(
          UsePostingDate,FromCurrencyCode,ToCurrencyCode,Amount);

      if ToCurrencyCode <> '' then begin
        ToCurrency.GET(ToCurrencyCode);
        Amount := ROUND(Amount,ToCurrency."Amount Rounding Precision");
      end else
        Amount := ROUND(Amount);

      exit(Amount);
    END;

    [External]
    PROCEDURE FindCurrency@7(Date@1000 : Date;CurrencyCode@1001 : Code[10];CacheNo@1002 : Integer);
    BEGIN
      if (CurrencyCode2[CacheNo] = CurrencyCode) and (Date2[CacheNo] = Date) then
        Rec := CurrencyExchRate2[CacheNo]
      else begin
        if Date = 0D then
          Date := WORKDATE;
        CurrencyExchRate2[CacheNo].SETRANGE("Currency Code",CurrencyCode);
        CurrencyExchRate2[CacheNo].SETRANGE("Starting Date",0D,Date);
        CurrencyExchRate2[CacheNo].FINDLAST;
        Rec := CurrencyExchRate2[CacheNo];
        CurrencyCode2[CacheNo] := CurrencyCode;
        Date2[CacheNo] := Date;
      end;
    END;

    [External]
    PROCEDURE ExchangeAmtFCYToFCY@8(Date@1000 : Date;FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];Amount@1003 : Decimal) : Decimal;
    BEGIN
      if FromCurrencyCode = ToCurrencyCode then
        exit(Amount);
      if ToCurrencyCode = '' then begin
        FindCurrency2(Date,FromCurrencyCode,1);
        if CurrencyExchRate3[1]."Relational Currency Code" = '' then
          exit(
            (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
            CurrencyExchRate3[1]."Relational Exch. Rate Amount");

        FindCurrency2(Date,CurrencyExchRate3[1]."Relational Currency Code",3);
        Amount :=
          ((Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
           CurrencyExchRate3[1]."Relational Exch. Rate Amount");
        exit(
          (Amount / CurrencyExchRate3[3]."Exchange Rate Amount") *
          CurrencyExchRate3[3]."Relational Exch. Rate Amount");
      end;
      if FromCurrencyCode = '' then begin
        FindCurrency2(Date,ToCurrencyCode,2);
        if CurrencyExchRate3[2]."Relational Currency Code" = '' then
          exit(
            (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
            CurrencyExchRate3[2]."Exchange Rate Amount");

        FindCurrency2(Date,CurrencyExchRate3[2]."Relational Currency Code",3);
        Amount :=
          ((Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
           CurrencyExchRate3[2]."Exchange Rate Amount");
        exit(
          (Amount / CurrencyExchRate3[3]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[3]."Exchange Rate Amount");
      end;
      FindCurrency2(Date,FromCurrencyCode,1);
      FindCurrency2(Date,ToCurrencyCode,2);
      if CurrencyExchRate3[1]."Currency Code" = CurrencyExchRate3[2]."Relational Currency Code" then
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      if CurrencyExchRate3[1]."Relational Currency Code" = CurrencyExchRate3[2]."Currency Code" then
        exit(
          (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
          CurrencyExchRate3[1]."Relational Exch. Rate Amount");

      if CurrencyExchRate3[1]."Relational Currency Code" = CurrencyExchRate3[2]."Relational Currency Code" then begin
        Amount :=
          ((Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
           CurrencyExchRate3[1]."Relational Exch. Rate Amount");
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
      if (CurrencyExchRate3[1]."Relational Currency Code" = '') and
         (CurrencyExchRate3[2]."Relational Currency Code" <> '')
      then begin
        FindCurrency2(Date,CurrencyExchRate3[2]."Relational Currency Code",3);
        Amount :=
          (Amount * CurrencyExchRate3[1]."Relational Exch. Rate Amount") /
          CurrencyExchRate3[1]."Exchange Rate Amount";
        Amount :=
          (Amount / CurrencyExchRate3[3]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[3]."Exchange Rate Amount";
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
      if (CurrencyExchRate3[1]."Relational Currency Code" <> '') and
         (CurrencyExchRate3[2]."Relational Currency Code" = '')
      then begin
        FindCurrency2(Date,CurrencyExchRate3[1]."Relational Currency Code",3);
        Amount :=
          (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
          CurrencyExchRate3[1]."Relational Exch. Rate Amount";
        Amount :=
          (Amount / CurrencyExchRate3[3]."Exchange Rate Amount") *
          CurrencyExchRate3[3]."Relational Exch. Rate Amount";
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
    END;

    LOCAL PROCEDURE FindCurrency2@9(Date@1000 : Date;CurrencyCode@1001 : Code[10];Number@1002 : Integer);
    BEGIN
      if Date = 0D then
        Date := WORKDATE;
      CurrencyExchRate3[Number].SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchRate3[Number].SETRANGE("Starting Date",0D,Date);
      CurrencyExchRate3[Number].FINDLAST;
      CurrencyExchRate3[Number].TESTFIELD("Exchange Rate Amount");
      CurrencyExchRate3[Number].TESTFIELD("Relational Exch. Rate Amount");
    END;

    [External]
    PROCEDURE ApplnExchangeAmtFCYToFCY@13(Date@1000 : Date;FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];Amount@1003 : Decimal;VAR ExchRateFound@1004 : Boolean) : Decimal;
    BEGIN
      if FromCurrencyCode = ToCurrencyCode then
        exit(Amount);
      if ToCurrencyCode = '' then begin
        ExchRateFound := FindApplnCurrency(Date,FromCurrencyCode,1);
        if not ExchRateFound then
          exit(0);

        if CurrencyExchRate3[1]."Relational Currency Code" = '' then
          exit(
            (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
            CurrencyExchRate3[1]."Relational Exch. Rate Amount");

        ExchRateFound := FindApplnCurrency(Date,CurrencyExchRate3[1]."Relational Currency Code",3);
        if not ExchRateFound then
          exit(0);

        Amount :=
          (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
          CurrencyExchRate3[1]."Relational Exch. Rate Amount";
        exit(
          (Amount / CurrencyExchRate3[3]."Exchange Rate Amount") *
          CurrencyExchRate3[3]."Relational Exch. Rate Amount");
      end;
      if FromCurrencyCode = '' then begin
        ExchRateFound := FindApplnCurrency(Date,ToCurrencyCode,2);
        if not ExchRateFound then
          exit(0);

        if CurrencyExchRate3[2]."Relational Currency Code" = '' then
          exit(
            (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
            CurrencyExchRate3[2]."Exchange Rate Amount");

        ExchRateFound := FindApplnCurrency(Date,CurrencyExchRate3[2]."Relational Currency Code",3);
        if not ExchRateFound then
          exit(0);

        Amount :=
          ((Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
           CurrencyExchRate3[2]."Exchange Rate Amount");
        exit(
          (Amount / CurrencyExchRate3[3]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[3]."Exchange Rate Amount");
      end;
      ExchRateFound := FindApplnCurrency(Date,FromCurrencyCode,1);
      if not ExchRateFound then
        exit(0);

      ExchRateFound := FindApplnCurrency(Date,ToCurrencyCode,2);
      if not ExchRateFound then
        exit(0);

      if CurrencyExchRate3[1]."Currency Code" = CurrencyExchRate3[2]."Relational Currency Code" then
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      if CurrencyExchRate3[1]."Relational Currency Code" = CurrencyExchRate3[2]."Currency Code" then
        exit(
          (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
          CurrencyExchRate3[1]."Relational Exch. Rate Amount");

      if CurrencyExchRate3[1]."Relational Currency Code" = CurrencyExchRate3[2]."Relational Currency Code" then begin
        Amount :=
          ((Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
           CurrencyExchRate3[1]."Relational Exch. Rate Amount");
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
      if (CurrencyExchRate3[1]."Relational Currency Code" = '') and
         (CurrencyExchRate3[2]."Relational Currency Code" <> '')
      then begin
        ExchRateFound := FindApplnCurrency(Date,CurrencyExchRate3[2]."Relational Currency Code",3);
        if not ExchRateFound then
          exit(0);

        Amount :=
          (Amount * CurrencyExchRate3[1]."Relational Exch. Rate Amount") /
          CurrencyExchRate3[1]."Exchange Rate Amount";
        Amount :=
          (Amount / CurrencyExchRate3[3]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[3]."Exchange Rate Amount";
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
      if (CurrencyExchRate3[1]."Relational Currency Code" <> '') and
         (CurrencyExchRate3[2]."Relational Currency Code" = '')
      then begin
        ExchRateFound := FindApplnCurrency(Date,CurrencyExchRate3[1]."Relational Currency Code",3);
        if not ExchRateFound then
          exit(0);

        Amount :=
          (Amount / CurrencyExchRate3[1]."Exchange Rate Amount") *
          CurrencyExchRate3[1]."Relational Exch. Rate Amount";
        Amount :=
          (Amount / CurrencyExchRate3[3]."Exchange Rate Amount") *
          CurrencyExchRate3[3]."Relational Exch. Rate Amount";
        exit(
          (Amount / CurrencyExchRate3[2]."Relational Exch. Rate Amount") *
          CurrencyExchRate3[2]."Exchange Rate Amount");
      end;
    END;

    LOCAL PROCEDURE FindApplnCurrency@12(Date@1000 : Date;CurrencyCode@1001 : Code[10];Number@1002 : Integer) : Boolean;
    BEGIN
      CurrencyExchRate3[Number].SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchRate3[Number].SETRANGE("Starting Date",0D,Date);
      if not CurrencyExchRate3[Number].FINDLAST then
        exit(false);

      CurrencyExchRate3[Number].TESTFIELD("Exchange Rate Amount");
      CurrencyExchRate3[Number].TESTFIELD("Relational Exch. Rate Amount");
      exit(true);
    END;

    [External]
    PROCEDURE GetCurrentCurrencyFactor@14(CurrencyCode@1000 : Code[10]) : Decimal;
    BEGIN
      SETRANGE("Currency Code",CurrencyCode);
      if FINDLAST then
        if "Relational Exch. Rate Amount" <> 0 then
          exit("Exchange Rate Amount" / "Relational Exch. Rate Amount");
    END;

    [External]
    PROCEDURE GetLastestExchangeRate@20(CurrencyCode@1000 : Code[10];VAR Date@1001 : Date;VAR Amt@1002 : Decimal);
    BEGIN
      Date := 0D;
      Amt := 0;
      SETRANGE("Currency Code",CurrencyCode);
      if FINDLAST then begin
        Date := "Starting Date";
        if "Exchange Rate Amount" <> 0 then
          Amt := "Relational Exch. Rate Amount" / "Exchange Rate Amount";
      end;
    END;

    [External]
    PROCEDURE CurrencyExchangeRateExist@10(CurrencyCode@1000 : Code[10];Date@1001 : Date) : Boolean;
    VAR
      CurrencyExchangeRate@1002 : Record "Currency Exchange Rate";
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.SETRANGE("Starting Date",0D,Date);
      exit(not CurrencyExchangeRate.ISEMPTY);
    END;

    [External]
    PROCEDURE SetCurrentCurrencyFactor@15(CurrencyCode@1000 : Code[10];CurrencyFactor@1001 : Decimal);
    VAR
      RateForTodayExists@1002 : Boolean;
    BEGIN
      "Currency Code" := CurrencyCode;
      TESTFIELD("Currency Code");
      RateForTodayExists := GET(CurrencyCode,TODAY);
      "Exchange Rate Amount" := 1;
      "Relational Exch. Rate Amount" := 1 / CurrencyFactor;
      "Adjustment Exch. Rate Amount" := "Exchange Rate Amount";
      "Relational Adjmt Exch Rate Amt" := "Relational Exch. Rate Amount";
      if RateForTodayExists then begin
        "Relational Currency Code" := '';
        MODIFY;
      end else begin
        "Starting Date" := TODAY;
        INSERT;
      end;
    END;

    BEGIN
    END.
  }
}

