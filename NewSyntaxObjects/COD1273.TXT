OBJECT Codeunit 1273 Exp. Pre-Mapping Gen. Jnl.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    Permissions=TableData "Payment Export Data"=rimd;
    OnRun=VAR
            GenJnlLine@1000 : Record "Gen. Journal Line";
            Window@1004 : Dialog;
            LineNo@1003 : Integer;
          BEGIN
            GenJnlLine.SETRANGE("Data Exch. Entry No.","Entry No.");
            GenJnlLine.FINDSET;

            Window.OPEN(ProgressMsg);

            repeat
              LineNo += 1;
              Window.UPDATE(1,LineNo);

              PreparePaymentExportDataJnl(GenJnlLine,GenJnlLine."Data Exch. Entry No.",LineNo);
            until GenJnlLine.NEXT = 0;

            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      ProgressMsg@1000 : TextConst 'ENU=Pre-processing line no. #1######.';
      EmployeeMustHaveBankAccountNoErr@1001 : TextConst '@@@=Employee name;ENU=You must specify either Bank Account No. or IBAN for employee %1.';

    LOCAL PROCEDURE PreparePaymentExportDataJnl@12(GenJnlLine@1001 : Record "Gen. Journal Line";DataExchEntryNo@1003 : Integer;LineNo@1007 : Integer);
    VAR
      GeneralLedgerSetup@1009 : Record "General Ledger Setup";
      PaymentExportData@1000 : Record "Payment Export Data";
      Employee@1005 : Record Employee;
      Vendor@1006 : Record Vendor;
      VendorBankAccount@1008 : Record "Vendor Bank Account";
      PaymentMethod@1010 : Record "Payment Method";
      BankAccount@1002 : Record "Bank Account";
      BankExportImportSetup@1004 : Record "Bank Export/Import Setup";
      IsEmployee@1011 : Boolean;
    BEGIN
      GeneralLedgerSetup.GET;
      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Employee then begin
        Employee.GET(GenJnlLine."Account No.");
        IsEmployee := true;
      end else begin
        GenJnlLine.TESTFIELD("Account Type",GenJnlLine."Account Type"::Vendor);
        Vendor.GET(GenJnlLine."Account No.");
      end;

      with PaymentExportData do begin
        BankAccount.GET(GenJnlLine."Bal. Account No.");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");

        INIT;
        "Data Exch Entry No." := DataExchEntryNo;
        "Sender Bank Account Code" := GenJnlLine."Bal. Account No.";
        BankAccount.GET("Sender Bank Account Code");
        "Sender Bank Account No." := COPYSTR(BankAccount.GetBankAccountNo,1,MAXSTRLEN("Sender Bank Account No."));

        if IsEmployee then begin
          "Recipient Name" := COPYSTR(Employee.FullName,1,MAXSTRLEN("Recipient Name"));
          "Recipient Address" := Employee.Address;
          "Recipient City" := COPYSTR(Employee.City,1,35);
          "Recipient County" := Employee.County;
          "Recipient Post Code" := Employee."Post Code";
          "Recipient Country/Region Code" := Employee."Country/Region Code";
          "Recipient Email Address" := Employee."E-Mail";
          if Employee.GetBankAccountNo = '' then
            ERROR(EmployeeMustHaveBankAccountNoErr,Employee.FullName);
          "Recipient Bank Acc. No." := COPYSTR(Employee.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
          Amount := GenJnlLine.Amount;
          "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(GenJnlLine."Currency Code");
        end else begin
          if VendorBankAccount.GET(GenJnlLine."Account No.",GenJnlLine."Recipient Bank Account") then begin
            if BankAccount."Country/Region Code" = VendorBankAccount."Country/Region Code" then begin
              Amount := GenJnlLine."Amount (LCY)";
              "Currency Code" := GeneralLedgerSetup."LCY Code";
            end else begin
              Amount := GenJnlLine.Amount;
              "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(GenJnlLine."Currency Code");
            end;

            "Recipient Bank Acc. No." :=
              COPYSTR(VendorBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
            "Recipient Reg. No." := VendorBankAccount."Bank Branch No.";
            "Recipient Acc. No." := VendorBankAccount."Bank Account No.";
            "Recipient Bank Country/Region" := VendorBankAccount."Country/Region Code";
            "Recipient Bank Name" := COPYSTR(VendorBankAccount.Name,1,35);
            "Recipient Bank Address" := COPYSTR(VendorBankAccount.Address,1,35);
            "Recipient Bank City" := COPYSTR(VendorBankAccount."Post Code" + VendorBankAccount.City,1,35);
            "Recipient Bank BIC" := VendorBankAccount."SWIFT Code";
          end else
            if GenJnlLine."Creditor No." <> '' then begin
              Amount := GenJnlLine."Amount (LCY)";
              "Currency Code" := GeneralLedgerSetup."LCY Code";
            end;

          "Recipient Name" := COPYSTR(Vendor.Name,1,35);
          "Recipient Address" := COPYSTR(Vendor.Address,1,35);
          "Recipient City" := COPYSTR(Vendor."Post Code" + ' ' + Vendor.City,1,35);
        end;

        "Transfer Date" := GenJnlLine."Posting Date";
        "Message to Recipient 1" := COPYSTR(GenJnlLine."Message to Recipient",1,35);
        "Message to Recipient 2" := COPYSTR(GenJnlLine."Message to Recipient",36,70);
        "Document No." := GenJnlLine."Document No.";
        "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
        "Short Advice" := GenJnlLine."Applies-to Ext. Doc. No.";
        "Line No." := LineNo;
        "Payment Reference" := GenJnlLine."Payment Reference";
        if PaymentMethod.GET(GenJnlLine."Payment Method Code") then
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
        "Recipient Creditor No." := GenJnlLine."Creditor No.";

        OnBeforeInsertPaymentExoprtData(PaymentExportData,GenJnlLine,GeneralLedgerSetup);

        INSERT(true);
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPaymentExoprtData@1213(VAR PaymentExportData@1213 : Record "Payment Export Data";GenJournalLine@1214 : Record "Gen. Journal Line";GeneralLedgerSetup@1215 : Record "General Ledger Setup");
    BEGIN
    END;

    BEGIN
    END.
  }
}

