OBJECT Table 1220 Data Exch.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Data Exch."=i,
                TableData "Data Exch. Field"=rimd;
    OnDelete=VAR
               DataExchField@1000 : Record "Data Exch. Field";
             BEGIN
               DataExchField.SETRANGE("Data Exch. No.","Entry No.");
               DataExchField.DELETEALL;
             END;

    CaptionML=ENU=Data Exch.;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;File Name           ;Text250       ;CaptionML=ENU=File Name }
    { 3   ;   ;File Content        ;BLOB          ;CaptionML=ENU=File Content }
    { 4   ;   ;Data Exch. Def Code ;Code20        ;TableRelation="Data Exch. Def";
                                                   CaptionML=ENU=Data Exch. Def Code }
    { 5   ;   ;Data Exch. Line Def Code;Code20    ;TableRelation="Data Exch. Line Def".Code WHERE ("Data Exch. Def Code"=FIELD("Data Exch. Def Code"));
                                                   CaptionML=ENU=Data Exch. Line Def Code }
    { 6   ;   ;Table Filters       ;BLOB          ;CaptionML=ENU=Table Filters }
    { 10  ;   ;Incoming Entry No.  ;Integer       ;TableRelation="Incoming Document";
                                                   CaptionML=ENU=Incoming Entry No. }
    { 11  ;   ;Related Record      ;RecordID      ;CaptionML=ENU=Related Record }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProgressWindowMsg@1000 : TextConst 'ENU=Please wait while the operation is being completed.';
      TxtExtTok@1002 : TextConst '@@@={Locked};ENU=.txt';
      XmlExtTok@1001 : TextConst '@@@={Locked};ENU=.xml';
      JsonExtTok@1003 : TextConst '@@@={Locked};ENU=.json';

    [External]
    PROCEDURE InsertRec@1(FileName@1001 : Text[250];VAR FileContent@1002 : InStream;DataExchDefCode@1003 : Code[20]);
    VAR
      DataExchLineDef@1000 : Record "Data Exch. Line Def";
      OutStream@1005 : OutStream;
    BEGIN
      INIT;
      VALIDATE("File Name",FileName);
      "File Content".CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,FileContent);
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      if DataExchLineDef.FINDFIRST then
        VALIDATE("Data Exch. Line Def Code",DataExchLineDef.Code);
      INSERT;
    END;

    [External]
    PROCEDURE ImportFileContent@5(DataExchDef@1000 : Record "Data Exch. Def") : Boolean;
    VAR
      DataExchLineDef@1001 : Record "Data Exch. Line Def";
      RelatedRecord@1003 : RecordID;
    BEGIN
      RelatedRecord := "Related Record";
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDef.Code);
      if DataExchLineDef.FINDFIRST then;

      INIT;
      "Data Exch. Def Code" := DataExchDef.Code;
      "Data Exch. Line Def Code" := DataExchLineDef.Code;
      "Related Record" := RelatedRecord;

      DataExchDef.TESTFIELD("Ext. Data Handling Codeunit");
      CODEUNIT.RUN(DataExchDef."Ext. Data Handling Codeunit",Rec);

      if not "File Content".HASVALUE then
        exit(false);

      INSERT;
      exit(true);
    END;

    [Internal]
    PROCEDURE ImportToDataExch@2(DataExchDef@1000 : Record "Data Exch. Def") : Boolean;
    VAR
      Source@1001 : InStream;
      ProgressWindow@1002 : Dialog;
    BEGIN
      if not "File Content".HASVALUE then
        if not ImportFileContent(DataExchDef) then
          exit(false);

      ProgressWindow.OPEN(ProgressWindowMsg);

      "File Content".CREATEINSTREAM(Source);
      SETRANGE("Entry No.","Entry No.");
      if DataExchDef."Reading/Writing Codeunit" > 0 then
        CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",Rec)
      else begin
        DataExchDef.TESTFIELD("Reading/Writing XMLport");
        XMLPORT.IMPORT(DataExchDef."Reading/Writing XMLport",Source,Rec);
      end;

      ProgressWindow.CLOSE;

      exit(true);
    END;

    [External]
    PROCEDURE ExportFromDataExch@3(DataExchMapping@1000 : Record "Data Exch. Mapping");
    VAR
      DataExchDef@1001 : Record "Data Exch. Def";
    BEGIN
      DataExchMapping.TESTFIELD("Mapping Codeunit");

      DataExchDef.GET("Data Exch. Def Code");
      DataExchDef.TESTFIELD("Reading/Writing Codeunit");
      DataExchDef.TESTFIELD("Ext. Data Handling Codeunit");

      if DataExchMapping."Pre-Mapping Codeunit" > 0 then
        CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",Rec);

      CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",Rec);

      if DataExchMapping."Post-Mapping Codeunit" > 0 then
        CODEUNIT.RUN(DataExchMapping."Post-Mapping Codeunit",Rec);

      CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",Rec);

      CODEUNIT.RUN(DataExchDef."Ext. Data Handling Codeunit",Rec);

      if DataExchDef."User Feedback Codeunit" > 0 then
        CODEUNIT.RUN(DataExchDef."User Feedback Codeunit",Rec);
    END;

    [External]
    PROCEDURE GetFileExtension@8() : Text;
    VAR
      DataExchDef@1000 : Record "Data Exch. Def";
    BEGIN
      DataExchDef.GET("Data Exch. Def Code");
      case DataExchDef."File Type" of
        DataExchDef."File Type"::Xml:
          exit(XmlExtTok);
        DataExchDef."File Type"::Json:
          exit(JsonExtTok);
        else
          exit(TxtExtTok);
      end;
    END;

    BEGIN
    END.
  }
}

