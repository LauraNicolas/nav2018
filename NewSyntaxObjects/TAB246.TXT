OBJECT Table 246 Requisition Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Prod. Order Capacity Need"=imd;
    DataCaptionFields="Journal Batch Name","Line No.";
    OnInsert=VAR
               Rec2@1000 : Record "Requisition Line";
             BEGIN
               if CURRENTKEY <> Rec2.CURRENTKEY then begin
                 Rec2 := Rec;
                 Rec2.SETRECFILTER;
                 Rec2.SETRANGE("Line No.");
                 if Rec2.FINDLAST then
                   "Line No." := Rec2."Line No." + 10000;
               end;

               ReserveReqLine.VerifyQuantity(Rec,xRec);

               ReqWkshTmpl.GET("Worksheet Template Name");
               ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               ReserveReqLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=BEGIN
               ReqLine.RESET;
               ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
               while (ReqLine.NEXT <> 0) and (ReqLine.Level > Level) do
                 ReqLine.DELETE(true);

               ReserveReqLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               DeleteRelations;
             END;

    OnRename=BEGIN
               ERROR(Text004,TABLECAPTION);
             END;

    CaptionML=ENU=Requisition Line;
    LookupPageID="Requisition Lines";
    DrillDownPageID="Requisition Lines";
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Req. Wksh. Template";
                                                   CaptionML=ENU=Worksheet Template Name }
    { 2   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Requisition Wksh. Name".Name WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"));
                                                   CaptionML=ENU=Journal Batch Name }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                NewType@1000 : Option;
                                                              BEGIN
                                                                if Type <> xRec.Type then begin
                                                                  NewType := Type;

                                                                  DeleteRelations;
                                                                  "Dimension Set ID" := 0;
                                                                  "No." := '';
                                                                  "Variant Code" := '';
                                                                  "Location Code" := '';
                                                                  "Prod. Order No." := '';
                                                                  ReserveReqLine.VerifyChange(Rec,xRec);
                                                                  AddOnIntegrMgt.ResetReqLineFields(Rec);
                                                                  INIT;
                                                                  Type := NewType;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item";
                                                   OptionString=" ","G/L Account",Item }
    { 5   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=VAR
                                                                TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";
                                                              BEGIN
                                                                CheckActionMessageNew;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                                DeleteRelations;

                                                                if "No." = '' then begin
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),
                                                                    "No.",DATABASE::Vendor,"Vendor No.");
                                                                  INIT;
                                                                  Type := xRec.Type;
                                                                  exit;
                                                                end;

                                                                if "No." <> xRec."No." then begin
                                                                  "Variant Code" := '';
                                                                  "Prod. Order No." := '';
                                                                  AddOnIntegrMgt.ResetReqLineFields(Rec);
                                                                end;

                                                                TESTFIELD(Type);
                                                                case Type of
                                                                  Type::"G/L Account":
                                                                    begin
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      GLAcc.TESTFIELD("Direct Posting",true);
                                                                      Description := GLAcc.Name;
                                                                    end;
                                                                  Type::Item:
                                                                    begin
                                                                      GetItem;
                                                                      if PlanningResiliency and Item.Blocked then
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text031,Item.TABLECAPTION,Item."No."),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD(Blocked,false);
                                                                      UpdateDescription;
                                                                      "Low-Level Code" := Item."Low-Level Code";
                                                                      "Scrap %" := Item."Scrap %";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "Gen. Business Posting Group" := '';
                                                                      if PlanningResiliency and (Item."Base Unit of Measure" = '') then
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      GetPlanningParameters.AtSKU(TempSKU,"No.","Variant Code","Location Code");
                                                                      if Subcontracting then
                                                                        TempSKU."Replenishment System" := TempSKU."Replenishment System"::"Prod. Order";
                                                                      VALIDATE("Replenishment System",TempSKU."Replenishment System");
                                                                      "Accept Action Message" := true;
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      GetDirectCost(FIELDNO("No."));
                                                                      SetFromBinCode;
                                                                    end;
                                                                end;

                                                                if "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" then
                                                                  if ("Replenishment System" = "Replenishment System"::Purchase) and
                                                                     (Item."Purch. Unit of Measure" <> '')
                                                                  then
                                                                    VALIDATE("Unit of Measure Code",Item."Purch. Unit of Measure")
                                                                  else
                                                                    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),
                                                                  "No.",DATABASE::Vendor,"Vendor No.");
                                                              END;

                                                   CaptionML=ENU=No. }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 8   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                if Type = Type::Item then begin
                                                                  GetDirectCost(FIELDNO(Quantity));
                                                                  "Remaining Quantity" := Quantity - "Finished Quantity";
                                                                  "Remaining Qty. (Base)" := "Remaining Quantity" * "Qty. per Unit of Measure";

                                                                  if (CurrFieldNo = FIELDNO(Quantity)) or (CurrentFieldNo = FIELDNO(Quantity)) then
                                                                    SetActionMessage;

                                                                  "Net Quantity (Base)" := (Quantity - "Original Quantity") * "Qty. per Unit of Measure";

                                                                  VALIDATE("Unit Cost");
                                                                  if ValidateFields then
                                                                    if "Ending Date" <> 0D then
                                                                      VALIDATE("Ending Time")
                                                                    else begin
                                                                      if "Starting Date" = 0D then
                                                                        "Starting Date" := WORKDATE;
                                                                      VALIDATE("Starting Time");
                                                                    end;
                                                                  ReserveReqLine.VerifyQuantity(Rec,xRec);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 9   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";
                                                              BEGIN
                                                                CheckActionMessageNew;
                                                                if "Vendor No." <> '' then
                                                                  if Vend.GET("Vendor No.") then begin
                                                                    if Vend.Blocked = Vend.Blocked::All then begin
                                                                      if PlanningResiliency then
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text031,Vend.TABLECAPTION,Vend."No."),
                                                                          DATABASE::Vendor,Vend.GETPOSITION);
                                                                      Vend.VendBlockedErrorMessage(Vend,false);
                                                                    end;
                                                                    if "Order Date" = 0D then
                                                                      VALIDATE("Order Date",WORKDATE);

                                                                    VALIDATE("Currency Code",Vend."Currency Code");
                                                                    if Type = Type::Item then
                                                                      UpdateDescription;
                                                                    VALIDATE(Quantity);
                                                                  end else begin
                                                                    if ValidateFields then
                                                                      ERROR(Text005,FIELDCAPTION("Vendor No."),"Vendor No.");
                                                                    "Vendor No." := '';
                                                                  end
                                                                else
                                                                  UpdateDescription;

                                                                "Order Address Code" := '';

                                                                if (Type = Type::Item) and ("No." <> '') and ("Prod. Order No." = '') then begin
                                                                  if ItemVend.GET("Vendor No.","No.","Variant Code") then begin
                                                                    "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                    UpdateOrderReceiptDate(ItemVend."Lead Time Calculation");
                                                                  end else begin
                                                                    GetPlanningParameters.AtSKU(TempSKU,"No.","Variant Code","Location Code");
                                                                    if "Vendor No." = TempSKU."Vendor No." then
                                                                      "Vendor Item No." := TempSKU."Vendor Item No."
                                                                    else
                                                                      "Vendor Item No." := '';
                                                                  end;
                                                                  GetDirectCost(FIELDNO("Vendor No."))
                                                                end;
                                                                "Supply From" := "Vendor No.";

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Vendor No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              if LookupVendor(Vend,true) then
                                                                VALIDATE("Vendor No.",Vend."No.");
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Vendor No. }
    { 10  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 12  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                if (CurrFieldNo = FIELDNO("Due Date")) or (CurrentFieldNo = FIELDNO("Due Date")) then
                                                                  SetActionMessage;

                                                                if "Due Date" = 0D then
                                                                  exit;

                                                                if (CurrFieldNo = FIELDNO("Due Date")) or (CurrentFieldNo = FIELDNO("Due Date")) then
                                                                  if (Type = Type::Item) and
                                                                     ("Planning Level" = 0)
                                                                  then
                                                                    VALIDATE(
                                                                      "Ending Date",
                                                                      LeadTimeMgt.PlannedEndingDate("No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type"))
                                                                  else
                                                                    VALIDATE("Ending Date","Due Date");

                                                                CheckDueDateToDemandDate;
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 13  ;   ;Requester ID        ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit "User Management";
                                                              BEGIN
                                                                UserMgt.ValidateUserID("Requester ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("Requester ID");
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Requester ID }
    { 14  ;   ;Confirmed           ;Boolean       ;CaptionML=ENU=Confirmed }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";
                                                              BEGIN
                                                                ValidateLocationChange;
                                                                CheckActionMessageNew;
                                                                "Bin Code" := '';
                                                                ReserveReqLine.VerifyChange(Rec,xRec);

                                                                if Type = Type::Item then begin
                                                                  GetPlanningParameters.AtSKU(TempSKU,"No.","Variant Code","Location Code");
                                                                  if Subcontracting then
                                                                    TempSKU."Replenishment System" := TempSKU."Replenishment System"::"Prod. Order";
                                                                  VALIDATE("Replenishment System",TempSKU."Replenishment System");
                                                                  if "Location Code" <> xRec."Location Code" then begin
                                                                    if ("Location Code" <> '') and ("No." <> '') and not IsDropShipment then begin
                                                                      GetLocation("Location Code");
                                                                      if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                                                                        WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
                                                                    end;
                                                                    if "Location Code" = '' then
                                                                      UpdateDescription;
                                                                  end;
                                                                  if ItemVend.GET("Vendor No.","No.","Variant Code") then
                                                                    "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                end;
                                                                GetDirectCost(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 18  ;   ;Recurring Method    ;Option        ;CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=,Fixed,Variable;
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=true }
    { 19  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 20  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 21  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                "Starting Date" := "Order Date";

                                                                GetDirectCost(FIELDNO("Order Date"));

                                                                if CurrFieldNo = FIELDNO("Order Date") then
                                                                  VALIDATE("Starting Date");
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 22  ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No. }
    { 23  ;   ;Sales Order No.     ;Code20        ;TableRelation="Sales Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   OnValidate=BEGIN
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sales Order No.;
                                                   Editable=false }
    { 24  ;   ;Sales Order Line No.;Integer       ;OnValidate=BEGIN
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sales Order Line No.;
                                                   Editable=false }
    { 25  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                if "Sell-to Customer No." = '' then
                                                                  "Ship-to Code" := ''
                                                                else
                                                                  VALIDATE("Ship-to Code",'');

                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   Editable=false }
    { 26  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE ("Customer No."=FIELD("Sell-to Customer No."));
                                                   OnValidate=BEGIN
                                                                if "Ship-to Code" <> '' then begin
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Location Code" := ShipToAddr."Location Code";
                                                                end else begin
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Location Code" := Cust."Location Code";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code;
                                                   Editable=false }
    { 28  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE ("Vendor No."=FIELD("Vendor No."));
                                                   CaptionML=ENU=Order Address Code }
    { 29  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                GetCurrency;
                                                                if "Currency Code" <> '' then begin
                                                                  TESTFIELD("Order Date");
                                                                  if PlanningResiliency then
                                                                    CheckExchRate;
                                                                  VALIDATE(
                                                                    "Currency Factor",CurrExchRate.ExchangeRate(
                                                                      "Order Date","Currency Code"));
                                                                end else
                                                                  VALIDATE("Currency Factor",0);
                                                                GetDirectCost(FIELDNO("Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 30  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                if "Currency Code" <> '' then
                                                                  TESTFIELD("Currency Factor");
                                                                if "Currency Factor" <> xRec."Currency Factor" then begin
                                                                  if xRec."Currency Factor" <> 0 then
                                                                    "Direct Unit Cost" :=
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Order Date",xRec."Currency Code","Direct Unit Cost",xRec."Currency Factor");
                                                                  if "Currency Factor" <> 0 then
                                                                    "Direct Unit Cost" :=
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        "Order Date","Currency Code","Direct Unit Cost","Currency Factor");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 31  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE ("Source ID"=FIELD("Worksheet Template Name"),
                                                                                                       "Source Ref. No."=FIELD("Line No."),
                                                                                                       "Source Type"=CONST(246),
                                                                                                       "Source Subtype"=CONST("0"),
                                                                                                       "Source Batch Name"=FIELD("Journal Batch Name"),
                                                                                                       "Source Prod. Order Line"=CONST(0),
                                                                                                       "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order"."No." WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                AddOnIntegrMgt.ValidateProdOrderOnReqLine(Rec);
                                                                VALIDATE("Unit of Measure Code");
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Prod. Order No.;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   OnValidate=VAR
                                                                TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";
                                                              BEGIN
                                                                if "Variant Code" <> '' then
                                                                  TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);

                                                                GetDirectCost(FIELDNO("Variant Code"));
                                                                if "Variant Code" <> '' then begin
                                                                  UpdateDescription;
                                                                  GetPlanningParameters.AtSKU(TempSKU,"No.","Variant Code","Location Code");
                                                                  if Subcontracting then
                                                                    TempSKU."Replenishment System" := TempSKU."Replenishment System"::"Prod. Order";
                                                                  VALIDATE("Replenishment System",TempSKU."Replenishment System");
                                                                  if "Variant Code" <> xRec."Variant Code" then begin
                                                                    "Bin Code" := '';
                                                                    if ("Location Code" <> '') and ("No." <> '') then begin
                                                                      GetLocation("Location Code");
                                                                      if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                                                                        WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code")
                                                                    end;
                                                                  end;
                                                                  if ItemVend.GET("Vendor No.","No.","Variant Code") then
                                                                    "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                end else
                                                                  VALIDATE("No.");
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                 "Item Filter"=FIELD("No."),
                                                                                 "Variant Filter"=FIELD("Variant Code"));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                if (CurrFieldNo = FIELDNO("Bin Code")) and
                                                                   ("Action Message" <> "Action Message"::" ")
                                                                then
                                                                  TESTFIELD("Action Message","Action Message"::New);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");
                                                                if ("Bin Code" <> xRec."Bin Code") and ("Bin Code" <> '') then begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",false);
                                                                  GetBin("Location Code","Bin Code");
                                                                  TESTFIELD("Location Code",Bin."Location Code");
                                                                end;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                if (Type = Type::Item) and
                                                                   ("No." <> '') and
                                                                   ("Prod. Order No." = '')
                                                                then begin
                                                                  GetItem;
                                                                  "Unit Cost" := Item."Unit Cost";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                  if "Unit of Measure Code" <> '' then begin
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    "Unit Cost" := ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",0.00001);
                                                                    "Overhead Rate" := ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",0.00001);
                                                                  end else
                                                                    "Qty. per Unit of Measure" := 1;
                                                                end else
                                                                  if "Prod. Order No." = '' then
                                                                    "Qty. per Unit of Measure" := 1
                                                                  else
                                                                    "Qty. per Unit of Measure" := 0;
                                                                GetDirectCost(FIELDNO("Unit of Measure Code"));

                                                                if "Planning Line Origin" = "Planning Line Origin"::"Order Planning" then
                                                                  SetSupplyQty("Demand Quantity (Base)","Needed Quantity (Base)")
                                                                else
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5408;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Prod. Order No.",'');
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5431;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=FIELD("Worksheet Template Name"),
                                                                                                                "Source Ref. No."=FIELD("Line No."),
                                                                                                                "Source Type"=CONST(246),
                                                                                                                "Source Subtype"=CONST("0"),
                                                                                                                "Source Batch Name"=FIELD("Journal Batch Name"),
                                                                                                                "Source Prod. Order Line"=CONST(0),
                                                                                                                "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5520;   ;Demand Type         ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Table));
                                                   CaptionML=ENU=Demand Type;
                                                   Editable=false }
    { 5521;   ;Demand Subtype      ;Option        ;CaptionML=ENU=Demand Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9";
                                                   Editable=false }
    { 5522;   ;Demand Order No.    ;Code20        ;CaptionML=ENU=Demand Order No.;
                                                   Editable=false }
    { 5525;   ;Demand Line No.     ;Integer       ;CaptionML=ENU=Demand Line No.;
                                                   Editable=false }
    { 5526;   ;Demand Ref. No.     ;Integer       ;CaptionML=ENU=Demand Ref. No.;
                                                   Editable=false }
    { 5527;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 5530;   ;Demand Date         ;Date          ;CaptionML=ENU=Demand Date;
                                                   Editable=false }
    { 5532;   ;Demand Quantity     ;Decimal       ;CaptionML=ENU=Demand Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5533;   ;Demand Quantity (Base);Decimal     ;CaptionML=ENU=Demand Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5538;   ;Needed Quantity     ;Decimal       ;CaptionML=ENU=Needed Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 5539;   ;Needed Quantity (Base);Decimal     ;CaptionML=ENU=Needed Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 5540;   ;Reserve             ;Boolean       ;OnValidate=BEGIN
                                                                GetItem;
                                                                if Item.Reserve <> Item.Reserve::Optional then
                                                                  TESTFIELD(Reserve,Item.Reserve = Item.Reserve::Always);
                                                                if Reserve and
                                                                   ("Demand Type" = DATABASE::"Prod. Order Component") and
                                                                   ("Demand Subtype" = ProdOrderCapNeed.Status::Planned)
                                                                then
                                                                  ERROR(Text030);
                                                                TESTFIELD("Planning Level",0);
                                                                TESTFIELD("Planning Line Origin","Planning Line Origin"::"Order Planning");
                                                              END;

                                                   CaptionML=ENU=Reserve }
    { 5541;   ;Qty. per UOM (Demand);Decimal      ;CaptionML=ENU=Qty. per UOM (Demand);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5542;   ;Unit Of Measure Code (Demand);Code10;
                                                   TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."));
                                                   CaptionML=ENU=Unit Of Measure Code (Demand);
                                                   Editable=false }
    { 5552;   ;Supply From         ;Code20        ;TableRelation=IF ("Replenishment System"=CONST(Purchase)) Vendor
                                                                 ELSE IF ("Replenishment System"=CONST(Transfer)) Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                case "Replenishment System" of
                                                                  "Replenishment System"::Purchase:
                                                                    VALIDATE("Vendor No.","Supply From");
                                                                  "Replenishment System"::Transfer:
                                                                    VALIDATE("Transfer-from Code","Supply From");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              case "Replenishment System" of
                                                                "Replenishment System"::Purchase:
                                                                  if LookupVendor(Vend,true) then
                                                                    VALIDATE("Supply From",Vend."No.");
                                                                "Replenishment System"::Transfer:
                                                                  if LookupFromLocation(Location) then
                                                                    VALIDATE("Supply From",Location.Code);
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Supply From }
    { 5553;   ;Original Item No.   ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Original Item No.;
                                                   Editable=false }
    { 5554;   ;Original Variant Code;Code10       ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Original Item No."));
                                                   CaptionML=ENU=Original Variant Code;
                                                   Editable=false }
    { 5560;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=false }
    { 5563;   ;Demand Qty. Available;Decimal      ;CaptionML=ENU=Demand Qty. Available;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5590;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID;
                                                   Editable=false }
    { 5701;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5702;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5703;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5705;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE ("Item Category Code"=FIELD("Item Category Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Product Group Code }
    { 5706;   ;Transfer-from Code  ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                "Supply From" := "Transfer-from Code";
                                                              END;

                                                   CaptionML=ENU=Transfer-from Code;
                                                   Editable=false }
    { 5707;   ;Transfer Shipment Date;Date        ;AccessByPermission=TableData "Transfer Header"=R;
                                                   CaptionML=ENU=Transfer Shipment Date;
                                                   Editable=false }
    { 7002;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 7100;   ;Blanket Purch. Order Exists;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE ("Document Type"=CONST("Blanket Order"),
                                                                                            Type=CONST(Item),
                                                                                            "No."=FIELD("No."),
                                                                                            "Outstanding Quantity"=FILTER(<>0)));
                                                   CaptionML=ENU=Blanket Purch. Order Exists;
                                                   Editable=false }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   OnValidate=VAR
                                                                RtngDate@1000 : Date;
                                                              BEGIN
                                                                CheckActionMessageNew;
                                                                "Routing Version Code" := '';

                                                                if "Routing No." = '' then
                                                                  exit;

                                                                if CurrFieldNo = FIELDNO("Starting Date") then
                                                                  RtngDate := "Starting Date"
                                                                else
                                                                  RtngDate := "Ending Date";

                                                                VALIDATE("Routing Version Code",VersionMgt.GetRtngVersion("Routing No.",RtngDate,true));
                                                                if "Routing Version Code" = '' then begin
                                                                  RtngHeader.GET("Routing No.");
                                                                  if PlanningResiliency and (RtngHeader.Status <> RtngHeader.Status::Certified) then
                                                                    TempPlanningErrorLog.SetError(
                                                                      STRSUBSTNO(Text033,RtngHeader.TABLECAPTION,RtngHeader.FIELDCAPTION("No."),RtngHeader."No."),
                                                                      DATABASE::"Routing Header",RtngHeader.GETPOSITION);
                                                                  RtngHeader.TESTFIELD(Status,RtngHeader.Status::Certified);
                                                                  "Routing Type" := RtngHeader.Type;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Routing No. }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   "Prod. Order No."=FIELD("Prod. Order No."),
                                                                                                                   "Routing No."=FIELD("Routing No."));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";
                                                              BEGIN
                                                                if "Operation No." = '' then
                                                                  exit;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.","Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Due Date" := ProdOrderRtngLine."Ending Date";
                                                                CheckDueDateToDemandDate;

                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");

                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Operation No. }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                GetWorkCenter;
                                                                VALIDATE("Vendor No.",WorkCenter."Subcontractor No.");
                                                              END;

                                                   CaptionML=ENU=Work Center No. }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=CONST(Finished),
                                                                                                      "Prod. Order No."=FIELD("Prod. Order No."));
                                                   CaptionML=ENU=Prod. Order Line No.;
                                                   Editable=false }
    { 99000755;;MPS Order          ;Boolean       ;CaptionML=ENU=MPS Order }
    { 99000756;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                if "Planning Flexibility" <> xRec."Planning Flexibility" then
                                                                  ReserveReqLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None;
                                                   OptionString=Unlimited,None }
    { 99000757;;Routing Reference No.;Integer     ;CaptionML=ENU=Routing Reference No. }
    { 99000882;;Gen. Prod. Posting Group;Code20   ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 99000883;;Gen. Business Posting Group;Code20;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Business Posting Group }
    { 99000884;;Low-Level Code     ;Integer       ;AccessByPermission=TableData "Production Order"=R;
                                                   CaptionML=ENU=Low-Level Code;
                                                   Editable=false }
    { 99000885;;Production BOM Version Code;Code20;TableRelation="Production BOM Version"."Version Code" WHERE ("Production BOM No."=FIELD("Production BOM No."));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                if "Production BOM Version Code" = '' then
                                                                  exit;

                                                                ProdBOMVersion.GET("Production BOM No.","Production BOM Version Code");
                                                                if PlanningResiliency and (ProdBOMVersion.Status <> ProdBOMVersion.Status::Certified) then
                                                                  TempPlanningErrorLog.SetError(
                                                                    STRSUBSTNO(
                                                                      Text034,ProdBOMVersion.TABLECAPTION,
                                                                      ProdBOMVersion.FIELDCAPTION("Production BOM No."),ProdBOMVersion."Production BOM No.",
                                                                      ProdBOMVersion.FIELDCAPTION("Version Code"),ProdBOMVersion."Version Code"),
                                                                    DATABASE::"Production BOM Version",ProdBOMVersion.GETPOSITION);
                                                                ProdBOMVersion.TESTFIELD(Status,ProdBOMVersion.Status::Certified);
                                                              END;

                                                   CaptionML=ENU=Production BOM Version Code }
    { 99000886;;Routing Version Code;Code20       ;TableRelation="Routing Version"."Version Code" WHERE ("Routing No."=FIELD("Routing No."));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                if "Routing Version Code" = '' then
                                                                  exit;

                                                                RtngVersion.GET("Routing No.","Routing Version Code");
                                                                if PlanningResiliency and (RtngVersion.Status <> RtngVersion.Status::Certified) then
                                                                  TempPlanningErrorLog.SetError(
                                                                    STRSUBSTNO(
                                                                      Text034,RtngVersion.TABLECAPTION,
                                                                      RtngVersion.FIELDCAPTION("Routing No."),RtngVersion."Routing No.",
                                                                      RtngVersion.FIELDCAPTION("Version Code"),RtngVersion."Version Code"),
                                                                    DATABASE::"Routing Version",RtngVersion.GETPOSITION);
                                                                RtngVersion.TESTFIELD(Status,RtngVersion.Status::Certified);
                                                                "Routing Type" := RtngVersion.Type;
                                                              END;

                                                   CaptionML=ENU=Routing Version Code }
    { 99000887;;Routing Type       ;Option        ;CaptionML=ENU=Routing Type;
                                                   OptionCaptionML=ENU=Serial,Parallel;
                                                   OptionString=Serial,Parallel }
    { 99000888;;Original Quantity  ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true;
                                                   Editable=false }
    { 99000889;;Finished Quantity  ;Decimal       ;CaptionML=ENU=Finished Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 99000890;;Remaining Quantity ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 99000891;;Original Due Date  ;Date          ;CaptionML=ENU=Original Due Date;
                                                   Editable=false }
    { 99000892;;Scrap %            ;Decimal       ;AccessByPermission=TableData "Production Order"=R;
                                                   CaptionML=ENU=Scrap %;
                                                   DecimalPlaces=0:5 }
    { 99000894;;Starting Date      ;Date          ;OnValidate=BEGIN
                                                                if Type = Type::Item then begin
                                                                  GetWorkCenter;
                                                                  if not Subcontracting then begin
                                                                    VALIDATE("Production BOM No.");
                                                                    VALIDATE("Routing No.");
                                                                  end;
                                                                  VALIDATE("Starting Time");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 99000895;;Starting Time      ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                if ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") then
                                                                  PlngLnMgt.Recalculate(Rec,0)
                                                                else
                                                                  CalcEndingDate('');

                                                                CheckEndingDate(ValidateFields);
                                                                SetDueDate;
                                                                SetActionMessage;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 99000896;;Ending Date        ;Date          ;OnValidate=BEGIN
                                                                CheckEndingDate(ValidateFields);

                                                                if Type = Type::Item then begin
                                                                  VALIDATE("Ending Time");
                                                                  GetWorkCenter;
                                                                  if not Subcontracting then begin
                                                                    VALIDATE("Production BOM No.");
                                                                    VALIDATE("Routing No.");
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 99000897;;Ending Time        ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                if ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") then
                                                                  PlngLnMgt.Recalculate(Rec,1)
                                                                else
                                                                  CalcStartingDate('');

                                                                if (CurrFieldNo in [FIELDNO("Ending Date"),FIELDNO("Ending Date-Time")]) and (CurrentFieldNo <> FIELDNO("Due Date")) then
                                                                  SetDueDate;
                                                                SetActionMessage;
                                                                if "Ending Time" = 000000T then begin
                                                                  MfgSetup.GET;
                                                                  "Ending Time" := MfgSetup."Normal Ending Time";
                                                                end;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 99000898;;Production BOM No. ;Code20        ;TableRelation="Production BOM Header"."No.";
                                                   OnValidate=VAR
                                                                BOMDate@1000 : Date;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                "Production BOM Version Code" := '';
                                                                if "Production BOM No." = '' then
                                                                  exit;

                                                                if CurrFieldNo = FIELDNO("Starting Date") then
                                                                  BOMDate := "Starting Date"
                                                                else begin
                                                                  BOMDate := "Ending Date";
                                                                  if BOMDate = 0D then
                                                                    BOMDate := "Order Date";
                                                                end;

                                                                VALIDATE("Production BOM Version Code",VersionMgt.GetBOMVersion("Production BOM No.",BOMDate,true));
                                                                if "Production BOM Version Code" = '' then begin
                                                                  ProdBOMHeader.GET("Production BOM No.");
                                                                  if PlanningResiliency and (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified) then
                                                                    TempPlanningErrorLog.SetError(
                                                                      STRSUBSTNO(
                                                                        Text033,
                                                                        ProdBOMHeader.TABLECAPTION,
                                                                        ProdBOMHeader.FIELDCAPTION("No."),ProdBOMHeader."No."),
                                                                      DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);

                                                                  ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Production BOM No. }
    { 99000899;;Indirect Cost %    ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 99000900;;Overhead Rate      ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000901;;Unit Cost          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");

                                                                Item.GET("No.");
                                                                if Item."Costing Method" = Item."Costing Method"::Standard then begin
                                                                  if CurrFieldNo = FIELDNO("Unit Cost") then
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  "Unit Cost" := Item."Unit Cost" * "Qty. per Unit of Measure";
                                                                end;
                                                                "Cost Amount" := ROUND("Unit Cost" * Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 99000902;;Cost Amount        ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   MinValue=0;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 99000903;;Replenishment System;Option       ;OnValidate=VAR
                                                                TempSKU@1002 : TEMPORARY Record "Stockkeeping Unit";
                                                                AsmHeader@1000 : Record "Assembly Header";
                                                                NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                if ValidateFields and
                                                                   ("Replenishment System" = xRec."Replenishment System") and
                                                                   ("No." = xRec."No.") and
                                                                   ("Location Code" = xRec."Location Code") and
                                                                   ("Variant Code" = xRec."Variant Code")
                                                                then
                                                                  exit;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");
                                                                GetItem;
                                                                GetPlanningParameters.AtSKU(TempSKU,"No.","Variant Code","Location Code");
                                                                if Subcontracting then
                                                                  TempSKU."Replenishment System" := TempSKU."Replenishment System"::"Prod. Order";

                                                                "Supply From" := '';

                                                                case "Replenishment System" of
                                                                  "Replenishment System"::Purchase:
                                                                    begin
                                                                      "Ref. Order Type" := "Ref. Order Type"::Purchase;
                                                                      CLEAR("Ref. Order Status");
                                                                      "Ref. Order No." := '';
                                                                      DeleteRelations;
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      if Item."Purch. Unit of Measure" <> '' then
                                                                        VALIDATE("Unit of Measure Code",Item."Purch. Unit of Measure");
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      if CurrFieldNo = FIELDNO("Location Code") then
                                                                        VALIDATE("Vendor No.")
                                                                      else
                                                                        VALIDATE("Vendor No.",TempSKU."Vendor No.");
                                                                    end;
                                                                  "Replenishment System"::"Prod. Order":
                                                                    begin
                                                                      if ReqWkshTmpl.GET("Worksheet Template Name") and (ReqWkshTmpl.Type = ReqWkshTmpl.Type::"Req.") and
                                                                         (ReqWkshTmpl.Name <> '') and not SourceDropShipment
                                                                      then
                                                                        ERROR(ReplenishmentErr);
                                                                      if PlanningResiliency and (Item."Base Unit of Measure" = '') then
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(
                                                                            Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      if "Ref. Order No." = '' then begin
                                                                        "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
                                                                        "Ref. Order Status" := "Ref. Order Status"::Planned;

                                                                        MfgSetup.GET;
                                                                        if PlanningResiliency and (MfgSetup."Planned Order Nos." = '') then
                                                                          TempPlanningErrorLog.SetError(
                                                                            STRSUBSTNO(Text032,MfgSetup.TABLECAPTION,'',
                                                                              MfgSetup.FIELDCAPTION("Planned Order Nos.")),
                                                                            DATABASE::"Manufacturing Setup",MfgSetup.GETPOSITION);
                                                                        MfgSetup.TESTFIELD("Planned Order Nos.");

                                                                        if PlanningResiliency then
                                                                          CheckNoSeries(MfgSetup."Planned Order Nos.","Due Date");
                                                                        if not Subcontracting then
                                                                          NoSeriesMgt.InitSeries(
                                                                            MfgSetup."Planned Order Nos.",xRec."No. Series","Due Date","Ref. Order No.","No. Series");
                                                                      end;
                                                                      VALIDATE("Vendor No.",'');

                                                                      if not Subcontracting then begin
                                                                        VALIDATE("Production BOM No.",Item."Production BOM No.");
                                                                        VALIDATE("Routing No.",Item."Routing No.");
                                                                      end else begin
                                                                        "Production BOM No." := Item."Production BOM No.";
                                                                        "Routing No." := Item."Routing No.";
                                                                      end;
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                      if ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") and
                                                                         ValidateFields
                                                                      then
                                                                        PlngLnMgt.Calculate(Rec,1,true,true,0);
                                                                    end;
                                                                  "Replenishment System"::Assembly:
                                                                    begin
                                                                      if PlanningResiliency and (Item."Base Unit of Measure" = '') then
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(
                                                                            Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      if "Ref. Order No." = '' then begin
                                                                        "Ref. Order Type" := "Ref. Order Type"::Assembly;
                                                                        "Ref. Order Status" := AsmHeader."Document Type"::Order;
                                                                      end;
                                                                      VALIDATE("Vendor No.",'');
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                      if ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") and
                                                                         ValidateFields
                                                                      then
                                                                        PlngLnMgt.Calculate(Rec,1,true,true,0);
                                                                    end;
                                                                  "Replenishment System"::Transfer:
                                                                    begin
                                                                      "Ref. Order Type" := "Ref. Order Type"::Transfer;
                                                                      CLEAR("Ref. Order Status");
                                                                      "Ref. Order No." := '';
                                                                      DeleteRelations;
                                                                      VALIDATE("Vendor No.",'');
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      VALIDATE("Transfer-from Code",TempSKU."Transfer-from Code");
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Replenishment System;
                                                   OptionCaptionML=ENU="Purchase,Prod. Order,Transfer,Assembly, ";
                                                   OptionString=Purchase,"Prod. Order",Transfer,Assembly," " }
    { 99000904;;Ref. Order No.     ;Code20        ;TableRelation=IF ("Ref. Order Type"=CONST("Prod. Order")) "Production Order"."No." WHERE (Status=FIELD("Ref. Order Status"))
                                                                 ELSE IF ("Ref. Order Type"=CONST(Purchase)) "Purchase Header"."No." WHERE ("Document Type"=CONST(Order))
                                                                 ELSE IF ("Ref. Order Type"=CONST(Transfer)) "Transfer Header"."No." WHERE ("No."=FIELD("Ref. Order No."))
                                                                 ELSE IF ("Ref. Order Type"=CONST(Assembly)) "Assembly Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   OnLookup=VAR
                                                              PurchHeader@1000 : Record "Purchase Header";
                                                              ProdOrder@1001 : Record "Production Order";
                                                              TransHeader@1002 : Record "Transfer Header";
                                                              AsmHeader@1003 : Record "Assembly Header";
                                                            BEGIN
                                                              case "Ref. Order Type" of
                                                                "Ref. Order Type"::Purchase:
                                                                  if PurchHeader.GET(PurchHeader."Document Type"::Order,"Ref. Order No.") then
                                                                    PAGE.RUN(PAGE::"Purchase Order",PurchHeader)
                                                                  else
                                                                    MESSAGE(Text007,PurchHeader.TABLECAPTION);
                                                                "Ref. Order Type"::"Prod. Order":
                                                                  if ProdOrder.GET("Ref. Order Status","Ref. Order No.") then
                                                                    case ProdOrder.Status of
                                                                      ProdOrder.Status::Planned:
                                                                        PAGE.RUN(PAGE::"Planned Production Order",ProdOrder);
                                                                      ProdOrder.Status::"Firm Planned":
                                                                        PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
                                                                      ProdOrder.Status::Released:
                                                                        PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
                                                                    end
                                                                  else
                                                                    MESSAGE(Text007,ProdOrder.TABLECAPTION);
                                                                "Ref. Order Type"::Transfer:
                                                                  if TransHeader.GET("Ref. Order No.") then
                                                                    PAGE.RUN(PAGE::"Transfer Order",TransHeader)
                                                                  else
                                                                    MESSAGE(Text007,TransHeader.TABLECAPTION);
                                                                "Ref. Order Type"::Assembly:
                                                                  if AsmHeader.GET("Ref. Order Status","Ref. Order No.") then
                                                                    PAGE.RUN(PAGE::"Assembly Order",AsmHeader)
                                                                  else
                                                                    MESSAGE(Text007,AsmHeader.TABLECAPTION);
                                                                else
                                                                  MESSAGE(Text008);
                                                              end;
                                                            END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Ref. Order No.;
                                                   Editable=false }
    { 99000905;;Ref. Order Type    ;Option        ;CaptionML=ENU=Ref. Order Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Prod. Order,Transfer,Assembly";
                                                   OptionString=" ",Purchase,"Prod. Order",Transfer,Assembly;
                                                   Editable=false }
    { 99000906;;Ref. Order Status  ;Option        ;CaptionML=ENU=Ref. Order Status;
                                                   OptionCaptionML=ENU=,Planned,Firm Planned,Released;
                                                   OptionString=,Planned,"Firm Planned",Released;
                                                   BlankZero=true;
                                                   Editable=false }
    { 99000907;;Ref. Line No.      ;Integer       ;CaptionML=ENU=Ref. Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 99000908;;No. Series         ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 99000909;;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Planning Routing Line"."Expected Operation Cost Amt." WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"),
                                                                                                                                 "Worksheet Batch Name"=FIELD("Journal Batch Name"),
                                                                                                                                 "Worksheet Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Expected Operation Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 99000910;;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Planning Component"."Cost Amount" WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"),
                                                                                                             "Worksheet Batch Name"=FIELD("Journal Batch Name"),
                                                                                                             "Worksheet Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Expected Component Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 99000911;;Finished Qty. (Base);Decimal      ;CaptionML=ENU=Finished Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 99000912;;Remaining Qty. (Base);Decimal     ;CaptionML=ENU=Remaining Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 99000913;;Related to Planning Line;Integer  ;CaptionML=ENU=Related to Planning Line;
                                                   Editable=false }
    { 99000914;;Planning Level     ;Integer       ;CaptionML=ENU=Planning Level;
                                                   Editable=false }
    { 99000915;;Planning Line Origin;Option       ;CaptionML=ENU=Planning Line Origin;
                                                   OptionCaptionML=ENU=" ,Action Message,Planning,Order Planning";
                                                   OptionString=" ","Action Message",Planning,"Order Planning";
                                                   Editable=false }
    { 99000916;;Action Message     ;Option        ;OnValidate=BEGIN
                                                                if ("Action Message" = xRec."Action Message") or
                                                                   (("Action Message" in ["Action Message"::" ","Action Message"::New]) and
                                                                    (xRec."Action Message" in ["Action Message"::" ","Action Message"::New]))
                                                                then
                                                                  exit;
                                                                TESTFIELD("Action Message",xRec."Action Message");
                                                              END;

                                                   CaptionML=ENU=Action Message;
                                                   OptionCaptionML=ENU=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel";
                                                   OptionString=" ",New,"Change Qty.",Reschedule,"Resched. & Chg. Qty.",Cancel }
    { 99000917;;Accept Action Message;Boolean     ;OnValidate=BEGIN
                                                                if "Action Message" = "Action Message"::" " then
                                                                  VALIDATE("Action Message","Action Message"::New);
                                                              END;

                                                   CaptionML=ENU=Accept Action Message }
    { 99000918;;Net Quantity (Base);Decimal       ;CaptionML=ENU=Net Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 99000919;;Starting Date-Time ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");

                                                                VALIDATE("Starting Date");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 99000920;;Ending Date-Time   ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");

                                                                VALIDATE("Ending Date");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
    { 99000921;;Order Promising ID ;Code20        ;CaptionML=ENU=Order Promising ID }
    { 99000922;;Order Promising Line No.;Integer  ;CaptionML=ENU=Order Promising Line No. }
    { 99000923;;Order Promising Line ID;Integer   ;CaptionML=ENU=Order Promising Line ID }
  }
  KEYS
  {
    {    ;"Worksheet Template Name","Journal Batch Name","Line No.";
                                                   Clustered=true }
    {    ;"Worksheet Template Name","Journal Batch Name","Vendor No.","Sell-to Customer No.","Ship-to Code","Order Address Code","Currency Code","Ref. Order Type","Ref. Order Status","Ref. Order No.","Location Code","Transfer-from Code";
                                                   MaintainSQLIndex=false }
    {    ;Type,"No.","Variant Code","Location Code","Sales Order No.","Planning Line Origin","Due Date";
                                                   SumIndexFields="Quantity (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;Type,"No.","Variant Code","Location Code","Sales Order No.","Order Date";
                                                   SumIndexFields="Quantity (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;Type,"No.","Variant Code","Location Code","Starting Date";
                                                   SumIndexFields="Quantity (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Worksheet Template Name","Journal Batch Name",Type,"No.","Due Date";
                                                   MaintainSQLIndex=false }
    {    ;"Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No." }
    {    ;"Replenishment System",Type,"No.","Variant Code","Transfer-from Code","Transfer Shipment Date";
                                                   SumIndexFields="Quantity (Base)";
                                                   MaintainSQLIndex=false }
    {    ;"Order Promising ID","Order Promising Line ID","Order Promising Line No." }
    {    ;"User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No." }
    {    ;"User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No." }
    {    ;"User ID","Worksheet Template Name","Journal Batch Name","Line No.";
                                                   MaintainSQLIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text004@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text005@1002 : TextConst 'ENU=%1 %2 does not exist.';
      Text006@1003 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text007@1004 : TextConst 'ENU=There is no %1 for this line.';
      Text008@1005 : TextConst 'ENU=There is no replenishment order for this line.';
      ReqWkshTmpl@1006 : Record "Req. Wksh. Template";
      ReqWkshName@1007 : Record "Requisition Wksh. Name";
      ReqLine@1008 : Record "Requisition Line";
      Item@1010 : Record Item;
      GLAcc@1012 : Record "G/L Account";
      Vend@1013 : Record Vendor;
      ItemVend@1015 : Record "Item Vendor";
      ItemTranslation@1016 : Record "Item Translation";
      Cust@1017 : Record Customer;
      ShipToAddr@1018 : Record "Ship-to Address";
      Currency@1019 : Record Currency;
      CurrExchRate@1020 : Record "Currency Exchange Rate";
      ReservEntry@1021 : Record "Reservation Entry";
      ItemVariant@1022 : Record "Item Variant";
      WorkCenter@1023 : Record "Work Center";
      TransHeader@1024 : Record "Transfer Header";
      PlanningComponent@1047 : Record "Planning Component";
      PlanningRtngLine@1046 : Record "Planning Routing Line";
      ProdOrderCapNeed@1045 : Record "Prod. Order Capacity Need";
      ProdBOMHeader@1044 : Record "Production BOM Header";
      ProdBOMVersion@1043 : Record "Production BOM Version";
      RtngHeader@1042 : Record "Routing Header";
      RtngVersion@1041 : Record "Routing Version";
      MfgSetup@1040 : Record "Manufacturing Setup";
      Location@1056 : Record Location;
      Bin@1058 : Record Bin;
      PlanningElement@1070 : Record "Untracked Planning Element";
      TempPlanningErrorLog@1030 : TEMPORARY Record "Planning Error Log";
      PurchPriceCalcMgt@1014 : Codeunit "Purch. Price Calc. Mgt.";
      ReservEngineMgt@1031 : Codeunit "Reservation Engine Mgt.";
      ReserveReqLine@1032 : Codeunit "Req. Line-Reserve";
      UOMMgt@1033 : Codeunit "Unit of Measure Management";
      AddOnIntegrMgt@1034 : Codeunit AddOnIntegrManagement;
      DimMgt@1035 : Codeunit DimensionManagement;
      LeadTimeMgt@1038 : Codeunit "Lead-Time Management";
      GetPlanningParameters@1039 : Codeunit "Planning-Get Parameters";
      VersionMgt@1048 : Codeunit VersionManagement;
      PlngLnMgt@1049 : Codeunit "Planning Line Management";
      WMSManagement@1057 : Codeunit "WMS Management";
      Reservation@1009 : Page Reservation;
      CurrentFieldNo@1000 : Integer;
      BlockReservation@1052 : Boolean;
      Text028@1055 : TextConst 'ENU=The %1 on this %2 must match the %1 on the sales order line it is associated with.';
      Subcontracting@1029 : Boolean;
      Text029@1036 : TextConst 'ENU=Line %1 has a %2 that exceeds the %3.';
      Text030@1037 : TextConst 'ENU=You cannot reserve components with status Planned.';
      PlanningResiliency@1063 : Boolean;
      Text031@1059 : TextConst 'ENU=%1 %2 is blocked.';
      Text032@1060 : TextConst 'ENU=%1 %2 has no %3 defined.';
      Text033@1068 : TextConst 'ENU=%1 %2 %3 is not certified.';
      Text034@1053 : TextConst 'ENU=%1 %2 %3 %4 %5 is not certified.';
      Text035@1071 : TextConst 'ENU=%1 %2 %3 specified on %4 %5 does not exist.';
      Text036@1072 : TextConst 'ENU=%1 %2 %3 does not allow default numbering.';
      Text037@1065 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not have an %5 specified.';
      Text038@1067 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not exist.';
      Text039@1066 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.';
      Text040@1064 : TextConst 'ENU=You cannot assign new numbers from the number series %1.';
      Text041@1062 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.';
      Text042@1054 : TextConst 'ENU=You cannot assign new numbers from the number series %1 line %2 because the %3 is not defined.';
      Text043@1061 : TextConst 'ENU=The number %1 on number series %2 cannot be extended to more than 20 characters.';
      Text044@1069 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.';
      ReplenishmentErr@1073 : TextConst 'ENU=Requisition Worksheet cannot be used to create Prod. Order replenishment.';
      SourceDropShipment@1026 : Boolean;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      if "Prod. Order No." = '' then
        TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      if "Currency Code" = '' then begin
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
      end else
        if "Currency Code" <> Currency.Code then
          Currency.GET("Currency Code");
    END;

    LOCAL PROCEDURE GetItem@1();
    BEGIN
      TESTFIELD("No.");
      if "No." <> Item."No." then
        Item.GET("No.");
    END;

    [External]
    PROCEDURE ShowReservation@4();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetReqLine(Rec);
      Reservation.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowReservationEntries@6(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      ReserveReqLine.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    LOCAL PROCEDURE UpdateOrderReceiptDate@5(LeadTimeCalc@1000 : DateFormula);
    BEGIN
      CALCFIELDS("Reserved Qty. (Base)");
      if "Reserved Qty. (Base)" = 0 then begin
        if "Order Date" <> 0D then
          "Starting Date" := "Order Date"
        else begin
          "Starting Date" := WORKDATE;
          "Order Date" := "Starting Date";
        end;
        CalcEndingDate(FORMAT(LeadTimeCalc));
        CheckEndingDate(ValidateFields);
        SetDueDate;
      end else
        if (FORMAT(LeadTimeCalc) = '') or ("Due Date" = 0D) then
          "Order Date" := 0D
        else
          if "Due Date" <> 0D then begin
            "Ending Date" :=
              LeadTimeMgt.PlannedEndingDate(
                "No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type");
            CalcStartingDate(FORMAT(LeadTimeCalc));
          end;

      SetActionMessage;
      UpdateDatetime;
    END;

    [External]
    PROCEDURE LookupVendor@43(VAR Vend@1000 : Record Vendor;PreferItemVendorCatalog@1002 : Boolean) : Boolean;
    VAR
      LookupThroughItemVendorCatalog@1001 : Boolean;
    BEGIN
      if (Type = Type::Item) and ItemVend.READPERMISSION then begin
        ItemVend.INIT;
        ItemVend.SETRANGE("Item No.","No.");
        ItemVend.SETRANGE("Vendor No.","Vendor No.");
        if "Variant Code" <> '' then
          ItemVend.SETRANGE("Variant Code","Variant Code");
        if not ItemVend.FINDLAST then begin
          ItemVend."Item No." := "No.";
          ItemVend."Variant Code" := "Variant Code";
          ItemVend."Vendor No." := "Vendor No.";
        end;
        ItemVend.SETRANGE("Vendor No.");
        LookupThroughItemVendorCatalog := not ItemVend.ISEMPTY or PreferItemVendorCatalog;
      end;

      if LookupThroughItemVendorCatalog then begin
        if PAGE.RUNMODAL(0,ItemVend) = ACTION::LookupOK then
          exit(Vend.GET(ItemVend."Vendor No."));
      end else begin
        Vend."No." := "Vendor No.";
        exit(PAGE.RUNMODAL(0,Vend) = ACTION::LookupOK);
      end;
    END;

    LOCAL PROCEDURE LookupFromLocation@44(VAR Location@1001 : Record Location) : Boolean;
    BEGIN
      Location.Code := "Transfer-from Code";
      Location.SETRANGE("Use As In-Transit",false);
      exit(PAGE.RUNMODAL(0,Location) = ACTION::LookupOK);
    END;

    PROCEDURE UpdateDescription@8();
    VAR
      ItemCrossRef@1001 : Record "Item Cross Reference";
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      if (Type <> Type::Item) or ("No." = '') then
        exit;
      if "Variant Code" = '' then begin
        GetItem;
        Description := Item.Description;
        "Description 2" := Item."Description 2";
      end else begin
        ItemVariant.GET("No.","Variant Code");
        Description := ItemVariant.Description;
        "Description 2" := ItemVariant."Description 2";
      end;

      if SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") then begin
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
      end;

      if "Vendor No." <> '' then
        if ItemCrossRef.GetItemDescription(
             Description,"No.","Variant Code","Unit of Measure Code",ItemCrossRef."Cross-Reference Type"::Vendor,"Vendor No.")
        then
          "Description 2" := ''
        else begin
          Vend.GET("Vendor No.");
          if Vend."Language Code" <> '' then
            if ItemTranslation.GET("No.","Variant Code",Vend."Language Code") then begin
              Description := ItemTranslation.Description;
              "Description 2" := ItemTranslation."Description 2";
            end;
        end;

      if (CurrFieldNo <> 0) and (CurrFieldNo <> FIELDNO("Location Code")) and
         ("Planning Line Origin" = "Planning Line Origin"::" ")
      then
        if ("Vendor No." <> '') and not IsDropShipment then
          "Location Code" := Vend."Location Code"
        else
          "Location Code" := '';
    END;

    [External]
    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      ReserveReqLine.Block(SetBlock);
    END;

    [External]
    PROCEDURE BlockDynamicTrackingOnComp@29(SetBlock@1000 : Boolean);
    BEGIN
      BlockReservation := SetBlock;
    END;

    LOCAL PROCEDURE CreateDim@2(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20]);
    VAR
      SourceCodeSetup@1004 : Record "Source Code Setup";
      TableID@1005 : ARRAY [10] OF Integer;
      No@1006 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      if "Ref. Order No." <> '' then
        GetDimFromRefOrderLine(true);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@10(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@11(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      ReserveReqLine.CallItemTracking(Rec);
    END;

    [External]
    PROCEDURE DeleteRelations@35();
    BEGIN
      if Type <> Type::Item then
        exit;
      PlanningComponent.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.","Line No.");
      if PlanningComponent.FIND('-') then
        repeat
          PlanningComponent.BlockDynamicTracking(BlockReservation);
          PlanningComponent.DELETE(true);
        until PlanningComponent.NEXT = 0;

      PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.","Line No.");
      if PlanningRtngLine.FINDFIRST then
        PlanningRtngLine.DELETEALL;

      ProdOrderCapNeed.RESET;
      ProdOrderCapNeed.SETCURRENTKEY("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
      ProdOrderCapNeed.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Line No.","Line No.");
      if ProdOrderCapNeed.FINDFIRST then
        ProdOrderCapNeed.DELETEALL;
      ProdOrderCapNeed.RESET;
      ProdOrderCapNeed.SETCURRENTKEY(Status,"Prod. Order No.",Active);
      ProdOrderCapNeed.SETRANGE(Status,"Ref. Order Status");
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Ref. Order No.");
      ProdOrderCapNeed.SETRANGE(Active,false);
      if ProdOrderCapNeed.FINDFIRST then
        ProdOrderCapNeed.MODIFYALL(Active,true);

      PlanningElement.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningElement.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningElement.SETRANGE("Worksheet Line No.","Line No.");
      if not PlanningElement.ISEMPTY then
        PlanningElement.DELETEALL;
    END;

    [External]
    PROCEDURE DeleteMultiLevel@34();
    VAR
      ReqLine2@1000 : Record "Requisition Line";
    BEGIN
      ReqLine2.SETCURRENTKEY("Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No.");
      ReqLine2.SETRANGE("Ref. Order Type","Ref. Order Type");
      ReqLine2.SETRANGE("Ref. Order Status","Ref. Order Status");
      ReqLine2.SETRANGE("Ref. Order No.","Ref. Order No.");
      ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
      ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      ReqLine2.SETFILTER("Planning Level",'>0');
      if ReqLine2.FIND('-') then
        repeat
          ReserveReqLine.DeleteLine(ReqLine2);
          ReqLine2.CALCFIELDS("Reserved Qty. (Base)");
          ReqLine2.TESTFIELD("Reserved Qty. (Base)",0);
          ReqLine2.DeleteRelations;
          ReqLine2.DELETE;
        until ReqLine2.NEXT = 0;
    END;

    [External]
    PROCEDURE SetUpNewLine@32(LastReqLine@1000 : Record "Requisition Line");
    BEGIN
      ReqWkshTmpl.GET("Worksheet Template Name");
      ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
      ReqLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ReqLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      if ReqLine.FIND('-') then begin
        "Order Date" := LastReqLine."Order Date";
      end else
        "Order Date" := WORKDATE;

      "Recurring Method" := LastReqLine."Recurring Method";
    END;

    LOCAL PROCEDURE CheckEndingDate@26(ShowWarning@1000 : Boolean);
    VAR
      CheckDateConflict@1001 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      CheckDateConflict.ReqLineCheck(Rec,ShowWarning);
      ReserveReqLine.VerifyChange(Rec,xRec);
    END;

    [External]
    PROCEDURE SetDueDate@25();
    BEGIN
      if "Ending Date" = 0D then
        exit;
      if (Type = Type::Item) and
         ("Planning Level" = 0)
      then
        "Due Date" :=
          LeadTimeMgt.PlannedDueDate("No.","Location Code","Variant Code","Ending Date",'',"Ref. Order Type")
      else
        "Due Date" := "Ending Date";

      CheckDueDateToDemandDate;
    END;

    [External]
    PROCEDURE SetCurrFieldNo@63(NewCurrFieldNo@1000 : Integer);
    BEGIN
      CurrentFieldNo := NewCurrFieldNo;
    END;

    LOCAL PROCEDURE CheckDueDateToDemandDate@41();
    BEGIN
      if ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") and
         ("Due Date" > "Demand Date") and
         ("Demand Date" <> 0D) and
         ValidateFields
      then
        MESSAGE(Text029,"Line No.",FIELDCAPTION("Due Date"),FIELDCAPTION("Demand Date"));
    END;

    LOCAL PROCEDURE CheckActionMessageNew@24();
    BEGIN
      if "Action Message" <> "Action Message"::" " then
        if CurrFieldNo in [FIELDNO(Type),
                           FIELDNO("No."),
                           FIELDNO("Variant Code"),
                           FIELDNO("Location Code"),
                           FIELDNO("Bin Code"),
                           FIELDNO("Production BOM Version Code"),
                           FIELDNO("Routing Version Code"),
                           FIELDNO("Production BOM No."),
                           FIELDNO("Routing No."),
                           FIELDNO("Replenishment System"),
                           FIELDNO("Unit of Measure Code"),
                           FIELDNO("Vendor No."),
                           FIELDNO("Transfer-from Code")]
        then
          TESTFIELD("Action Message","Action Message"::New);
    END;

    [External]
    PROCEDURE SetActionMessage@23();
    BEGIN
      if ValidateFields and
         ("Action Message" <> "Action Message"::" ") and
         ("Action Message" <> "Action Message"::New)
      then begin
        if (Quantity <> xRec.Quantity) and ("Original Quantity" = 0) then
          "Original Quantity" := xRec.Quantity;
        if ("Due Date" <> xRec."Due Date") and ("Original Due Date" = 0D) then
          "Original Due Date" := xRec."Due Date";
        if Quantity = 0 then
          "Action Message" := "Action Message"::Cancel
        else
          if "Original Quantity" <> 0 then
            if "Original Due Date" <> 0D then
              "Action Message" := "Action Message"::"Resched. & Chg. Qty."
            else
              "Action Message" := "Action Message"::"Change Qty."
          else
            if "Original Due Date" <> 0D then
              "Action Message" := "Action Message"::Reschedule;

        if "Action Message" <> xRec."Action Message" then
          CLEAR("Planning Line Origin");
      end;
    END;

    LOCAL PROCEDURE ValidateFields@65() : Boolean;
    BEGIN
      exit((CurrFieldNo <> 0) or (CurrentFieldNo <> 0));
    END;

    [External]
    PROCEDURE GetProdOrderLine@22(ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      ProdOrder@1001 : Record "Production Order";
    BEGIN
      ProdOrderLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      Item.GET(ProdOrderLine."Item No.");

      TransferFromProdOrderLine(ProdOrderLine);
    END;

    [External]
    PROCEDURE GetPurchOrderLine@21(PurchOrderLine@1000 : Record "Purchase Line");
    VAR
      PurchHeader2@1001 : Record "Purchase Header";
    BEGIN
      if PurchOrderLine.Type <> PurchOrderLine.Type::Item then
        exit;
      PurchOrderLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      PurchHeader2.GET(PurchOrderLine."Document Type",PurchOrderLine."Document No.");
      Item.GET(PurchOrderLine."No.");

      TransferFromPurchaseLine(PurchOrderLine);
    END;

    [External]
    PROCEDURE GetTransLine@27(TransLine@1000 : Record "Transfer Line");
    BEGIN
      TransLine.CALCFIELDS(
        "Reserved Quantity Inbnd.",
        "Reserved Quantity Outbnd.",
        "Reserved Qty. Inbnd. (Base)",
        "Reserved Qty. Outbnd. (Base)");
      TransHeader.GET(TransLine."Document No.");
      Item.GET(TransLine."Item No.");

      TransferFromTransLine(TransLine);
    END;

    [External]
    PROCEDURE GetAsmHeader@54(AsmHeader@1000 : Record "Assembly Header");
    VAR
      AsmHeader2@1001 : Record "Assembly Header";
    BEGIN
      AsmHeader.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      AsmHeader2.GET(AsmHeader."Document Type",AsmHeader."No.");
      Item.GET(AsmHeader."Item No.");

      TransferFromAsmHeader(AsmHeader);
    END;

    [External]
    PROCEDURE GetActionMessages@19();
    VAR
      GetActionMsgReport@1000 : Report "Get Action Messages";
    BEGIN
      GetActionMsgReport.SetTemplAndWorksheet("Worksheet Template Name","Journal Batch Name");
      GetActionMsgReport.RUNMODAL;
    END;

    [External]
    PROCEDURE SetRefFilter@61(RefOrderType@1000 : Option;RefOrderStatus@1001 : Option;RefOrderNo@1002 : Code[20];RefLineNo@1003 : Integer);
    BEGIN
      SETCURRENTKEY("Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No.");
      SETRANGE("Ref. Order Type",RefOrderType);
      SETRANGE("Ref. Order Status",RefOrderStatus);
      SETRANGE("Ref. Order No.",RefOrderNo);
      SETRANGE("Ref. Line No.",RefLineNo);
    END;

    [External]
    PROCEDURE TransferFromProdOrderLine@18(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      ProdOrder@1001 : Record "Production Order";
    BEGIN
      ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");

      Type := Type::Item;
      "No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      Description := ProdOrderLine.Description;
      "Description 2" := ProdOrderLine."Description 2";
      "Location Code" := ProdOrderLine."Location Code";
      "Dimension Set ID" := ProdOrderLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := ProdOrderLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := ProdOrderLine."Shortcut Dimension 2 Code";
      "Bin Code" := ProdOrderLine."Bin Code";
      "Gen. Prod. Posting Group" := ProdOrder."Gen. Prod. Posting Group";
      "Gen. Business Posting Group" := ProdOrder."Gen. Bus. Posting Group";
      "Scrap %" := ProdOrderLine."Scrap %";
      "Order Date" := ProdOrder."Creation Date";
      "Starting Time" := ProdOrderLine."Starting Time";
      "Starting Date" := ProdOrderLine."Starting Date";
      "Ending Time" := ProdOrderLine."Ending Time";
      "Ending Date" := ProdOrderLine."Ending Date";
      "Due Date" := ProdOrderLine."Due Date";
      "Production BOM No." := ProdOrderLine."Production BOM No.";
      "Routing No." := ProdOrderLine."Routing No.";
      "Production BOM Version Code" := ProdOrderLine."Production BOM Version Code";
      "Routing Version Code" := ProdOrderLine."Routing Version Code";
      "Routing Type" := ProdOrderLine."Routing Type";
      "Replenishment System" := "Replenishment System"::"Prod. Order";
      Quantity := ProdOrderLine.Quantity;
      "Finished Quantity" := ProdOrderLine."Finished Quantity";
      "Remaining Quantity" := ProdOrderLine."Remaining Quantity";
      "Unit Cost" := ProdOrderLine."Unit Cost";
      "Cost Amount" := ProdOrderLine."Cost Amount";
      "Low-Level Code" := ProdOrder."Low-Level Code";
      "Planning Level" := ProdOrderLine."Planning Level Code";
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
      "Quantity (Base)" := ProdOrderLine."Quantity (Base)";
      "Finished Qty. (Base)" := ProdOrderLine."Finished Qty. (Base)";
      "Remaining Qty. (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      "Indirect Cost %" := ProdOrderLine."Indirect Cost %";
      "Overhead Rate" := ProdOrderLine."Overhead Rate";
      "Expected Operation Cost Amt." := ProdOrderLine."Expected Operation Cost Amt.";
      "Expected Component Cost Amt." := ProdOrderLine."Expected Component Cost Amt.";
      "MPS Order" := ProdOrderLine."MPS Order";
      "Planning Flexibility" := ProdOrderLine."Planning Flexibility";
      "Ref. Order No." := ProdOrderLine."Prod. Order No.";
      "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
      "Ref. Order Status" := ProdOrderLine.Status;
      "Ref. Line No." := ProdOrderLine."Line No.";

      GetDimFromRefOrderLine(false);
    END;

    [External]
    PROCEDURE TransferFromPurchaseLine@15(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      PurchHeader@1001 : Record "Purchase Header";
    BEGIN
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      Item.GET(PurchLine."No.");

      Type := Type::Item;
      "No." := PurchLine."No.";
      "Variant Code" := PurchLine."Variant Code";
      Description := PurchLine.Description;
      "Description 2" := PurchLine."Description 2";
      "Location Code" := PurchLine."Location Code";
      "Dimension Set ID" := PurchLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      "Bin Code" := PurchLine."Bin Code";
      "Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
      "Gen. Business Posting Group" := PurchLine."Gen. Bus. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Order Date" := PurchHeader."Order Date";
      "Starting Date" := "Order Date";
      "Ending Date" := PurchLine."Planned Receipt Date";
      "Due Date" := PurchLine."Expected Receipt Date";
      Quantity := PurchLine.Quantity;
      "Finished Quantity" := PurchLine."Quantity Received";
      "Remaining Quantity" := PurchLine."Outstanding Quantity";
      BlockDynamicTracking(true);
      VALIDATE("Unit Cost",PurchLine."Unit Cost (LCY)");
      BlockDynamicTracking(false);
      "Indirect Cost %" := PurchLine."Indirect Cost %";
      "Overhead Rate" := PurchLine."Overhead Rate";
      "Unit of Measure Code" := PurchLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
      "Quantity (Base)" := PurchLine."Quantity (Base)";
      "Finished Qty. (Base)" := PurchLine."Qty. Received (Base)";
      "Remaining Qty. (Base)" := PurchLine."Outstanding Qty. (Base)";
      "Routing No." := PurchLine."Routing No.";
      "Replenishment System" := "Replenishment System"::Purchase;
      "MPS Order" := PurchLine."MPS Order";
      "Planning Flexibility" := PurchLine."Planning Flexibility";
      "Ref. Order No." := PurchLine."Document No.";
      "Ref. Order Type" := "Ref. Order Type"::Purchase;
      "Ref. Line No." := PurchLine."Line No.";
      "Vendor No." := PurchLine."Buy-from Vendor No.";

      GetDimFromRefOrderLine(false);
    END;

    [External]
    PROCEDURE TransferFromAsmHeader@52(VAR AsmHeader@1000 : Record "Assembly Header");
    BEGIN
      Item.GET(AsmHeader."Item No.");

      Type := Type::Item;
      "No." := AsmHeader."Item No.";
      "Variant Code" := AsmHeader."Variant Code";
      Description := AsmHeader.Description;
      "Description 2" := AsmHeader."Description 2";
      "Location Code" := AsmHeader."Location Code";
      "Dimension Set ID" := AsmHeader."Dimension Set ID";
      "Shortcut Dimension 1 Code" := AsmHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := AsmHeader."Shortcut Dimension 2 Code";
      "Bin Code" := AsmHeader."Bin Code";
      "Gen. Prod. Posting Group" := AsmHeader."Gen. Prod. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Order Date" := AsmHeader."Due Date";
      "Starting Date" := "Order Date";
      "Ending Date" := AsmHeader."Due Date";
      "Due Date" := AsmHeader."Due Date";
      Quantity := AsmHeader.Quantity;
      "Finished Quantity" := AsmHeader."Assembled Quantity";
      "Remaining Quantity" := AsmHeader."Remaining Quantity";
      BlockDynamicTracking(true);
      VALIDATE("Unit Cost",AsmHeader."Unit Cost");
      BlockDynamicTracking(false);
      "Indirect Cost %" := AsmHeader."Indirect Cost %";
      "Overhead Rate" := AsmHeader."Overhead Rate";
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Qty. per Unit of Measure" := AsmHeader."Qty. per Unit of Measure";
      "Quantity (Base)" := AsmHeader."Quantity (Base)";
      "Finished Qty. (Base)" := AsmHeader."Assembled Quantity (Base)";
      "Remaining Qty. (Base)" := AsmHeader."Remaining Quantity (Base)";
      "Replenishment System" := "Replenishment System"::Assembly;
      "MPS Order" := AsmHeader."MPS Order";
      "Planning Flexibility" := AsmHeader."Planning Flexibility";
      "Ref. Order Type" := "Ref. Order Type"::Assembly;
      "Ref. Order Status" := AsmHeader."Document Type";
      "Ref. Order No." := AsmHeader."No.";
      "Ref. Line No." := 0;

      GetDimFromRefOrderLine(false);
    END;

    [External]
    PROCEDURE TransferFromTransLine@28(VAR TransLine@1000 : Record "Transfer Line");
    BEGIN
      TransHeader.GET(TransLine."Document No.");
      Item.GET(TransLine."Item No.");
      Type := Type::Item;
      "No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      Description := TransLine.Description;
      "Description 2" := TransLine."Description 2";
      "Location Code" := TransLine."Transfer-to Code";
      "Dimension Set ID" := TransLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := TransLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TransLine."Shortcut Dimension 2 Code";
      "Gen. Prod. Posting Group" := TransLine."Gen. Prod. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Starting Date" := CALCDATE(TransLine."Outbound Whse. Handling Time",TransLine."Shipment Date");
      "Ending Date" := CALCDATE(TransLine."Shipping Time","Starting Date");
      "Due Date" := TransLine."Receipt Date";
      Quantity := TransLine.Quantity;
      "Finished Quantity" := TransLine."Quantity Received";
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      BlockDynamicTracking(false);
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Finished Qty. (Base)" := TransLine."Qty. Received (Base)";
      "Remaining Qty. (Base)" := TransLine."Outstanding Qty. (Base)";
      "Replenishment System" := "Replenishment System"::Transfer;
      "Ref. Order No." := TransLine."Document No.";
      "Ref. Order Type" := "Ref. Order Type"::Transfer;
      "Ref. Line No." := TransLine."Line No.";
      "Transfer-from Code" := TransLine."Transfer-from Code";
      "Transfer Shipment Date" := TransLine."Shipment Date";
      GetDimFromRefOrderLine(false);
    END;

    [External]
    PROCEDURE GetDimFromRefOrderLine@30(AddToExisting@1000 : Boolean);
    VAR
      PurchLine@1001 : Record "Purchase Line";
      ProdOrderLine@1002 : Record "Prod. Order Line";
      TransferLine@1003 : Record "Transfer Line";
      AsmHeader@1006 : Record "Assembly Header";
      DimSetIDArr@1004 : ARRAY [10] OF Integer;
      i@1005 : Integer;
    BEGIN
      if AddToExisting then begin
        i := 1;
        DimSetIDArr[i] := "Dimension Set ID";
      end;
      i := i + 1;

      case "Ref. Order Type" of
        "Ref. Order Type"::Purchase:
          begin
            if PurchLine.GET(PurchLine."Document Type"::Order,"Ref. Order No.","Ref. Line No.") then
              DimSetIDArr[i] := PurchLine."Dimension Set ID"
          end;
        "Ref. Order Type"::"Prod. Order":
          begin
            if ProdOrderLine.GET("Ref. Order Status","Ref. Order No.","Ref. Line No.") then
              DimSetIDArr[i] := ProdOrderLine."Dimension Set ID"
          end;
        "Ref. Order Type"::Transfer:
          begin
            if TransferLine.GET("Ref. Order No.","Ref. Line No.") then
              DimSetIDArr[i] := TransferLine."Dimension Set ID"
          end;
        "Ref. Order Type"::Assembly:
          begin
            if AsmHeader.GET(AsmHeader."Document Type"::Order,"Ref. Order No.") then
              DimSetIDArr[i] := AsmHeader."Dimension Set ID"
          end;
      end;
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE TransferFromActionMessage@13(VAR ActionMessageEntry@1000 : Record "Action Message Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      EndDate@1002 : Date;
    BEGIN
      if not ReservEntry.GET(ActionMessageEntry."Reservation Entry",true) then
        ReservEntry.GET(ActionMessageEntry."Reservation Entry",false);
      BlockDynamicTracking(true);
      Type := Type::Item;
      VALIDATE("No.",ReservEntry."Item No.");
      BlockDynamicTracking(false);
      VALIDATE("Variant Code",ReservEntry."Variant Code");
      VALIDATE("Location Code",ReservEntry."Location Code");
      Description := ReservEntry.Description;

      if ReservEntry.Positive then
        EndDate := ReservEntry."Expected Receipt Date"
      else
        EndDate := ReservEntry."Shipment Date";

      if EndDate <> 0D then
        "Due Date" := EndDate
      else
        "Due Date" := WORKDATE;

      case ReservEntry."Source Type" of
        DATABASE::"Transfer Line",
        DATABASE::"Prod. Order Line",
        DATABASE::"Purchase Line",
        DATABASE::"Requisition Line",
        DATABASE::"Assembly Header":
          "Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              ReservEntry."Item No.",
              ReservEntry."Location Code",
              ReservEntry."Variant Code",
              "Due Date",
              "Vendor No.",
              "Ref. Order Type");
      end;
    END;

    [External]
    PROCEDURE TransferToTrackingEntry@16(VAR TrkgReservEntry@1000 : Record "Reservation Entry";PointerOnly@1001 : Boolean);
    BEGIN
      TrkgReservEntry."Source Type" := DATABASE::"Requisition Line";
      TrkgReservEntry."Source Subtype" := 0;
      TrkgReservEntry."Source ID" := "Worksheet Template Name";
      TrkgReservEntry."Source Batch Name" := "Journal Batch Name";
      TrkgReservEntry."Source Prod. Order Line" := 0;
      TrkgReservEntry."Source Ref. No." := "Line No.";

      if PointerOnly then
        exit;
      TrkgReservEntry."Item No." := "No.";
      TrkgReservEntry."Location Code" := "Location Code";
      TrkgReservEntry.Description := '';
      TrkgReservEntry."Creation Date" := TODAY;
      TrkgReservEntry."Created By" := USERID;
      TrkgReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      TrkgReservEntry."Variant Code" := "Variant Code";
      CALCFIELDS("Reserved Quantity");
      TrkgReservEntry.Quantity := "Remaining Quantity" - "Reserved Quantity";
      TrkgReservEntry."Quantity (Base)" := TrkgReservEntry.Quantity * TrkgReservEntry."Qty. per Unit of Measure";

      TrkgReservEntry.Positive := TrkgReservEntry."Quantity (Base)" > 0;

      if "Planning Level" > 0 then
        TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Reservation
      else
        TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Tracking;

      if TrkgReservEntry.Positive then
        TrkgReservEntry."Expected Receipt Date" := "Due Date"
      else
        TrkgReservEntry."Shipment Date" := "Due Date";
    END;

    [External]
    PROCEDURE UpdateDatetime@20();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    LOCAL PROCEDURE GetDirectCost@12(CalledByFieldNo@1000 : Integer);
    BEGIN
      GetWorkCenter;
      if ("Replenishment System" = "Replenishment System"::Purchase) and not Subcontracting then begin
        PurchPriceCalcMgt.FindReqLineDisc(Rec);
        PurchPriceCalcMgt.FindReqLinePrice(Rec,CalledByFieldNo);
      end;
    END;

    LOCAL PROCEDURE ValidateLocationChange@33();
    VAR
      Purchasing@1000 : Record Purchasing;
      SalesOrderLine@1001 : Record "Sales Line";
    BEGIN
      case true of
        "Location Code" = xRec."Location Code":
          exit;
        "Purchasing Code" = '':
          exit;
        not Purchasing.GET("Purchasing Code"):
          exit;
        not Purchasing."Special Order":
          exit;
        not SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No."):
          exit;
        "Location Code" = SalesOrderLine."Location Code":
          exit;
      end;

      ERROR(Text028,FIELDCAPTION("Location Code"),TABLECAPTION);
    END;

    [External]
    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      exit(ItemTrackingMgt.ComposeRowID(DATABASE::"Requisition Line",0,"Worksheet Template Name",
          "Journal Batch Name",0,"Line No."));
    END;

    [External]
    PROCEDURE CalcEndingDate@37(LeadTime@1000 : Code[20]);
    BEGIN
      case "Ref. Order Type" of
        "Ref. Order Type"::Purchase:
          if LeadTime = '' then
            LeadTime := LeadTimeMgt.PurchaseLeadTime("No.","Location Code","Variant Code","Vendor No.");
        "Ref. Order Type"::"Prod. Order",
        "Ref. Order Type"::Assembly:
          begin
            if RoutingLineExists then
              exit;

            if LeadTime = '' then
              LeadTime := LeadTimeMgt.ManufacturingLeadTime("No.","Location Code","Variant Code");
          end;
        "Ref. Order Type"::Transfer:
          CalcTransferShipmentDate;
        else
          exit;
      end;

      "Ending Date" :=
        LeadTimeMgt.PlannedEndingDate2(
          "No.","Location Code","Variant Code","Vendor No.",LeadTime,"Ref. Order Type","Starting Date");
    END;

    [External]
    PROCEDURE CalcStartingDate@51(LeadTime@1000 : Code[20]);
    BEGIN
      case "Ref. Order Type" of
        "Ref. Order Type"::Purchase:
          if LeadTime = '' then
            LeadTime :=
              LeadTimeMgt.PurchaseLeadTime(
                "No.","Location Code","Variant Code","Vendor No.");
        "Ref. Order Type"::"Prod. Order",
        "Ref. Order Type"::Assembly:
          begin
            if RoutingLineExists then
              exit;

            if LeadTime = '' then
              LeadTime := LeadTimeMgt.ManufacturingLeadTime("No.","Location Code","Variant Code");
          end;
        "Ref. Order Type"::" ":
          exit;
      end;

      "Starting Date" :=
        LeadTimeMgt.PlannedStartingDate(
          "No.","Location Code","Variant Code","Vendor No.",LeadTime,"Ref. Order Type","Ending Date");

      VALIDATE("Order Date","Starting Date");

      if "Ref. Order Type" = "Ref. Order Type"::Transfer then
        CalcTransferShipmentDate;
    END;

    LOCAL PROCEDURE CalcTransferShipmentDate@31();
    VAR
      TransferRoute@1001 : Record "Transfer Route";
      DateFormula@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormula,LeadTimeMgt.WhseOutBoundHandlingTime("Transfer-from Code"));
      TransferRoute.CalcShipmentDateBackward("Transfer Shipment Date","Starting Date",DateFormula,"Transfer-from Code");
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@7301(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      if BinCode = '' then
        CLEAR(Bin)
      else
        if Bin.Code <> BinCode then
          Bin.GET(LocationCode,BinCode);
    END;

    [External]
    PROCEDURE SetSubcontracting@38(IsSubcontracting@1000 : Boolean);
    BEGIN
      Subcontracting := IsSubcontracting;
    END;

    [External]
    PROCEDURE TransferFromUnplannedDemand@46(VAR UnplannedDemand@1000 : Record "Unplanned Demand");
    BEGIN
      INIT;
      "Line No." := "Line No." + 10000;
      "Planning Line Origin" := "Planning Line Origin"::"Order Planning";

      Type := Type::Item;
      "No." := UnplannedDemand."Item No.";
      "Location Code" := UnplannedDemand."Location Code";
      "Bin Code" := UnplannedDemand."Bin Code";
      VALIDATE("No.");
      VALIDATE("Variant Code",UnplannedDemand."Variant Code");
      UpdateDescription;
      "Unit Of Measure Code (Demand)" := UnplannedDemand."Unit of Measure Code";
      "Qty. per UOM (Demand)" := UnplannedDemand."Qty. per Unit of Measure";
      Reserve := UnplannedDemand.Reserve;

      case UnplannedDemand."Demand Type" of
        UnplannedDemand."Demand Type"::Sales:
          "Demand Type" := DATABASE::"Sales Line";
        UnplannedDemand."Demand Type"::Production:
          "Demand Type" := DATABASE::"Prod. Order Component";
        UnplannedDemand."Demand Type"::Service:
          "Demand Type" := DATABASE::"Service Line";
        UnplannedDemand."Demand Type"::Job:
          "Demand Type" := DATABASE::"Job Planning Line";
        UnplannedDemand."Demand Type"::Assembly:
          "Demand Type" := DATABASE::"Assembly Line";
      end;
      "Demand Subtype" := UnplannedDemand."Demand SubType";
      "Demand Order No." := UnplannedDemand."Demand Order No.";
      "Demand Line No." := UnplannedDemand."Demand Line No.";
      "Demand Ref. No." := UnplannedDemand."Demand Ref. No.";

      Status := UnplannedDemand.Status;

      Level := 1;
      "Action Message" := ReqLine."Action Message"::New;
      "User ID" := USERID;
    END;

    [External]
    PROCEDURE SetSupplyDates@45(DemandDate@1000 : Date);
    VAR
      LeadTimeMgt@1001 : Codeunit "Lead-Time Management";
    BEGIN
      "Demand Date" := DemandDate;
      "Starting Date" := "Demand Date";
      "Order Date" := "Demand Date";
      VALIDATE("Due Date","Demand Date");

      if "Planning Level" = 0 then begin
        VALIDATE(
          "Ending Date",
          LeadTimeMgt.PlannedEndingDate(
            "No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type"));
        if ("Replenishment System" = "Replenishment System"::"Prod. Order") and ("Starting Time" = 000000T) then begin
          MfgSetup.GET;
          "Starting Time" := MfgSetup."Normal Starting Time";
        end;
      end else begin
        VALIDATE("Ending Date","Due Date");
        VALIDATE("Ending Time",000000T);
      end;
    END;

    [External]
    PROCEDURE SetSupplyQty@42(DemandQtyBase@1002 : Decimal;NeededQtyBase@1001 : Decimal);
    BEGIN
      if "Qty. per Unit of Measure" = 0 then
        "Qty. per Unit of Measure" := 1;

      "Demand Quantity" := ROUND(DemandQtyBase / "Qty. per Unit of Measure",0.00001);
      "Demand Quantity (Base)" := DemandQtyBase;
      "Needed Quantity" := ROUND(NeededQtyBase / "Qty. per Unit of Measure",0.00001);
      if "Needed Quantity" < NeededQtyBase / "Qty. per Unit of Measure" then
        "Needed Quantity" := ROUND(NeededQtyBase / "Qty. per Unit of Measure",0.00001,'>');
      "Needed Quantity (Base)" := NeededQtyBase;
      "Demand Qty. Available" :=
        ROUND((DemandQtyBase - NeededQtyBase) / "Qty. per Unit of Measure",0.00001);
      VALIDATE(Quantity,"Needed Quantity");
    END;

    [External]
    PROCEDURE SetResiliencyOn@48(WkshTemplName@1001 : Code[10];JnlBatchName@1000 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      PlanningResiliency := true;
      TempPlanningErrorLog.SetJnlBatch(WkshTemplName,JnlBatchName,ItemNo);
    END;

    [External]
    PROCEDURE GetResiliencyError@47(VAR PlanningErrorLog@1000 : Record "Planning Error Log") : Boolean;
    BEGIN
      exit(TempPlanningErrorLog.GetError(PlanningErrorLog));
    END;

    [External]
    PROCEDURE SetResiliencyError@39(TheError@1002 : Text[250];TheTableID@1001 : Integer;TheTablePosition@1000 : Text[250]);
    BEGIN
      TempPlanningErrorLog.SetError(TheError,TheTableID,TheTablePosition);
    END;

    LOCAL PROCEDURE CheckExchRate@50();
    VAR
      CurrExchRate@1001 : Record "Currency Exchange Rate";
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Order Date");
      case true of
        not CurrExchRate.FINDLAST:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text038,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.","Order Date"),
            DATABASE::Currency,Currency.GETPOSITION);
        CurrExchRate."Exchange Rate Amount" = 0:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text037,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.",
              "Order Date",CurrExchRate.FIELDCAPTION("Exchange Rate Amount")),
            DATABASE::Currency,Currency.GETPOSITION);
        CurrExchRate."Relational Exch. Rate Amount" = 0:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text037,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.",
              "Order Date",CurrExchRate.FIELDCAPTION("Relational Exch. Rate Amount")),
            DATABASE::Currency,Currency.GETPOSITION);
      end;
    END;

    LOCAL PROCEDURE CheckNoSeries@53(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date);
    VAR
      NoSeries@1003 : Record "No. Series";
      NoSeriesLine@1004 : Record "No. Series Line";
      NoSeriesMgt@1002 : Codeunit NoSeriesManagement;
    BEGIN
      case true of
        not NoSeries.GET(NoSeriesCode):
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text035,
              NoSeries.TABLECAPTION,NoSeries.FIELDCAPTION(Code),NoSeriesCode,
              MfgSetup.TABLECAPTION,MfgSetup.FIELDCAPTION("Planned Order Nos.")),
            DATABASE::"No. Series",NoSeries.GETPOSITION);
        not NoSeries."Default Nos.":
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(Text036,NoSeries.TABLECAPTION,NoSeries.FIELDCAPTION(Code),NoSeries.Code),
            DATABASE::"No. Series",NoSeries.GETPOSITION);
        else
          if SeriesDate = 0D then
            SeriesDate := WORKDATE;

          NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
          if not NoSeriesLine.FINDFIRST then begin
            NoSeriesLine.SETRANGE("Starting Date");
            if NoSeriesLine.FINDFIRST then begin
              TempPlanningErrorLog.SetError(
                STRSUBSTNO(Text039,NoSeriesCode,SeriesDate),DATABASE::"No. Series",NoSeries.GETPOSITION);
              exit;
            end;
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text040,NoSeriesCode),DATABASE::"No. Series",NoSeries.GETPOSITION);
            exit;
          end;

          if NoSeries."Date Order" and (SeriesDate < NoSeriesLine."Last Date Used") then begin
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text041,NoSeries.Code,NoSeriesLine."Last Date Used"),
              DATABASE::"No. Series",NoSeries.GETPOSITION);
            exit;
          end;
          NoSeriesLine."Last Date Used" := SeriesDate;
          if NoSeriesLine."Last No. Used" = '' then begin
            if NoSeriesLine."Starting No." = '' then begin
              TempPlanningErrorLog.SetError(
                STRSUBSTNO(
                  Text042,
                  NoSeries.Code,NoSeriesLine."Line No.",NoSeriesLine.FIELDCAPTION("Starting No.")),
                DATABASE::"No. Series",NoSeries.GETPOSITION);
              exit;
            end;
            NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
          end else
            if NoSeriesLine."Increment-by No." <= 1 then begin
              if STRLEN(INCSTR(NoSeriesLine."Last No. Used")) > 20 then begin
                TempPlanningErrorLog.SetError(
                  STRSUBSTNO(
                    Text043,NoSeriesLine."Last No. Used",NoSeriesCode),
                  DATABASE::"No. Series",NoSeries.GETPOSITION);
                exit;
              end;
              NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
            end else
              if not IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.") then begin
                TempPlanningErrorLog.SetError(
                  STRSUBSTNO(
                    Text043,NoSeriesLine."Last No. Used",NoSeriesCode),
                  DATABASE::"No. Series",NoSeries.GETPOSITION);
                exit;
              end;
          if (NoSeriesLine."Ending No." <> '') and
             (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
          then
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text044,NoSeriesLine."Ending No.",NoSeriesCode),
              DATABASE::"No. Series",NoSeries.GETPOSITION);
      end;
    END;

    LOCAL PROCEDURE IncrementNoText@56(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal) : Boolean;
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      if not ReplaceNoText(No,NewNo,0,StartPos,EndPos) then
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE ReplaceNoText@55(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer) : Boolean;
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      if StartPos > 1 then
        StartNo := COPYSTR(No,1,StartPos - 1);
      if EndPos < STRLEN(No) then
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      if FixedLength > OldLength then
        OldLength := FixedLength;
      if OldLength > NewLength then
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      if STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo) > 20 then
        exit(false);
      No := StartNo + ZeroNo + NewNo + EndNo;
      exit(true);
    END;

    LOCAL PROCEDURE GetIntegerPos@57(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      if No <> '' then begin
        i := STRLEN(No);
        repeat
          IsDigit := No[i] in ['0'..'9'];
          if IsDigit then begin
            if EndPos = 0 then
              EndPos := i;
            StartPos := i;
          end;
          i := i - 1;
        until (i = 0) or (StartPos <> 0) and not IsDigit;
      end;
    END;

    LOCAL PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record Item);
    BEGIN
      RESET;
      SETCURRENTKEY(Type,"No.");
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETRANGE("Sales Order No.",'');
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      Item.COPYFILTER("Global Dimension 1 Filter","Shortcut Dimension 1 Code");
      Item.COPYFILTER("Global Dimension 2 Filter","Shortcut Dimension 2 Code");
      SETRANGE("Planning Line Origin","Planning Line Origin"::" ");
      SETFILTER("Quantity (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record Item) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE FindCurrForecastName@40(VAR ForecastName@1001 : Code[10]) : Boolean;
    VAR
      UntrackedPlngElement@1000 : Record "Untracked Planning Element";
    BEGIN
      if (Type <> Type::Item) or
         ("Planning Line Origin" <> "Planning Line Origin"::Planning)
      then
        exit(false);
      UntrackedPlngElement.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      UntrackedPlngElement.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      UntrackedPlngElement.SETRANGE("Item No.","No.");
      UntrackedPlngElement.SETRANGE("Source Type",DATABASE::"Production Forecast Entry");
      if UntrackedPlngElement.FINDFIRST then begin
        ForecastName := COPYSTR(UntrackedPlngElement."Source ID",1,10);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE ShowDimensions@88();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Worksheet Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE ShowTimeline@7(ReqLine@1000 : Record "Requisition Line");
    VAR
      ItemAvailByTimeline@1001 : Page "Item Availability by Timeline";
    BEGIN
      ReqLine.TESTFIELD(Type,Type::Item);
      ReqLine.TESTFIELD("No.");

      Item.GET("No.");
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Variant Filter",ReqLine."Variant Code");
      Item.SETRANGE("Location Filter",ReqLine."Location Code");

      ItemAvailByTimeline.SetItem(Item);
      ItemAvailByTimeline.SetWorksheet(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
      ItemAvailByTimeline.RUN;
    END;

    [External]
    PROCEDURE GetOriginalQtyBase@36() : Decimal;
    BEGIN
      exit(CalcBaseQty("Original Quantity"));
    END;

    LOCAL PROCEDURE SetFromBinCode@62();
    BEGIN
      if ("Location Code" <> '') and ("No." <> '') then begin
        GetLocation("Location Code");
        case "Ref. Order Type" of
          "Ref. Order Type"::"Prod. Order":
            begin
              if "Bin Code" = '' then
                "Bin Code" := WMSManagement.GetLastOperationFromBinCode("Routing No.","Routing Version Code","Location Code",false,0);
              if "Bin Code" = '' then
                "Bin Code" := Location."From-Production Bin Code";
            end;
          "Ref. Order Type"::Assembly:
            if "Bin Code" = '' then
              "Bin Code" := Location."From-Assembly Bin Code";
        end;
        if ("Bin Code" = '') and Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code")
      end;
    END;

    [External]
    PROCEDURE SetDropShipment@58(NewDropShipment@1000 : Boolean);
    BEGIN
      SourceDropShipment := NewDropShipment;
    END;

    LOCAL PROCEDURE IsDropShipment@59() : Boolean;
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      if SourceDropShipment then
        exit(true);

      if "Replenishment System" = "Replenishment System"::Purchase then
        if SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") then
          exit(SalesLine."Drop Shipment");
      exit(false);
    END;

    LOCAL PROCEDURE GetWorkCenter@71();
    BEGIN
      if WorkCenter."No." = "Work Center No." then
        exit;

      CLEAR(WorkCenter);
      if WorkCenter.GET("Work Center No.") then
        SetSubcontracting(WorkCenter."Subcontractor No." <> '')
      else
        SetSubcontracting(false);
    END;

    LOCAL PROCEDURE RoutingLineExists@60() : Boolean;
    VAR
      RoutingLine@1000 : Record "Routing Line";
    BEGIN
      if "Routing No." <> '' then begin
        RoutingLine.SETRANGE("Routing No.","Routing No.");
        exit(not RoutingLine.ISEMPTY);
      end;

      exit(false);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR RequisitionLine@1000 : Record "Requisition Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

