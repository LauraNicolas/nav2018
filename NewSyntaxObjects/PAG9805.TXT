OBJECT Page 9805 Table Filter
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Table Filter;
    SourceTable="Table Filter";
    DelayedInsert=true;
    PageType=List;
    SourceTableTemporary=true;
    AutoSplitKey=true;
    OnOpenPage=BEGIN
                 SetCaption;
               END;

    OnNewRecord=BEGIN
                  InitSourceTable;
                END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group2;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                Name=Field Number;
                ToolTipML=ENU=Specifies the ID of the field on which a security filter is set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Number";
                OnLookup=VAR
                           Field@1000 : Record Field;
                           FieldsLookup@1001 : Page "Fields Lookup";
                         BEGIN
                           Field.SETRANGE(TableNo,"Table Number");
                           FieldsLookup.SETTABLEVIEW(Field);
                           FieldsLookup.LOOKUPMODE(true);
                           if FieldsLookup.RUNMODAL = ACTION::LookupOK then begin
                             FieldsLookup.GETRECORD(Field);
                             if Field."No." = "Field Number" then
                               exit;
                             CheckDuplicateField(Field);
                             FillSourceRecord(Field);
                             CurrPage.UPDATE(true);
                           end;
                         END;

                ImplicitType=Integer }

    { 5   ;2   ;Field     ;
                Name=Field Caption;
                ToolTipML=ENU=Specifies the caption of the field on which a security filter is set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Caption";
                Editable=FALSE;
                ImplicitType=Text80 }

    { 3   ;2   ;Field     ;
                Name=Field Filter;
                ToolTipML=ENU=Specifies the value of the field for a security filter.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Filter";
                OnValidate=VAR
                             Permission@1000 : Record Permission;
                           BEGIN
                             CheckFieldFilter;
                             EVALUATE(Permission."Security Filter",CreateTextTableFilter(true));
                             CurrPage.UPDATE(true);
                           END;

                ImplicitType=Text250 }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The filters are too large to be copied to the type "TableFilter".';
      SourceTableNumber@1001 : Integer;
      SourceTableName@1002 : Text;
      SourceTableCaption@1003 : Text;

    LOCAL PROCEDURE FillSourceRecord@1(Field@1000 : Record Field);
    BEGIN
      SETRANGE("Field Number");
      INIT;

      "Table Number" := Field.TableNo;
      "Table Name" := Field.TableName;
      "Field Number" := Field."No.";
      "Field Name" := Field.FieldName;
      "Field Caption" := Field."Field Caption";
    END;

    [External]
    PROCEDURE SetSourceTable@2(TableFilterText@1000 : Text;NewTableNumber@1001 : Integer;NewTableCaption@1003 : Text);
    VAR
      AllObj@1002 : Record AllObj;
    BEGIN
      SourceTableNumber := NewTableNumber;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      AllObj.SETRANGE("Object ID",NewTableNumber);
      if AllObj.FINDFIRST then
        SourceTableName := AllObj."Object Name";
      SourceTableCaption := NewTableCaption;
      InitSourceTable;
      if STRLEN(TableFilterText) > 0 then
        ParseTableFilter(TableFilterText);
    END;

    LOCAL PROCEDURE InitSourceTable@3();
    BEGIN
      INIT;
      "Table Number" := SourceTableNumber;
      "Table Name" := SourceTableName;
      "Line No." := 0;
    END;

    LOCAL PROCEDURE ParseTableFilter@4(TableFilterText@1000 : Text);
    BEGIN
      // Parsing a TableFilter text representation into the TableName and Field filters.
      // TableFilter text format:
      // <table name>: <field name>=<field filter>,<field name 2>=<field filter 2>...
      // Table name can be wrapped into double quotes if it contains a colon;
      // field names can be wrapped into double quotes if they contain the equal sign;
      // field filters can be wrapped into double quotes if they contain a comma.
      // If a value is wrapped into the double quotes,the double quote characters possibly contained in the value are escaped by another double quote.

      if not TableNameMatches(TableFilterText) then
        exit;

      // Read field names and field filters:
      while STRLEN(TableFilterText) > 0 do begin
        ExtractFieldName(TableFilterText);
        ExtractFieldFilter(TableFilterText);
      end;
    END;

    LOCAL PROCEDURE GetValue@5(VAR TextString@1000 : Text;Delimiter@1001 : Text) PartOfText : Text;
    VAR
      DelimiterPosition@1002 : Integer;
    BEGIN
      DelimiterPosition := STRPOS(TextString,Delimiter);
      if DelimiterPosition = 0 then begin
        // If delimiter wasn't found read everything until the end of the string:
        PartOfText := COPYSTR(TextString,1,STRLEN(TextString));
        TextString := '';
      end else begin
        PartOfText := COPYSTR(TextString,1,DelimiterPosition - 1);
        TextString := COPYSTR(TextString,DelimiterPosition + 1,STRLEN(TextString) - DelimiterPosition);
      end;

      exit(PartOfText);
    END;

    LOCAL PROCEDURE GetQuotedValue@6(VAR TextString@1000 : Text;Delimiter@1001 : Text) PartOfText : Text;
    VAR
      Position@1002 : Integer;
      Length@1003 : Integer;
      OneCharString@1004 : Text;
      IsQuote@1005 : Boolean;
      IsDelimiter@1006 : Boolean;
      EvenQuote@1007 : Boolean;
    BEGIN
      // Remove the first quote:
      TextString := COPYSTR(TextString,2,STRLEN(TextString) - 1);
      Length := STRLEN(TextString);

      EvenQuote := false;
      Position := 1;
      while Position <= Length do begin
        OneCharString := COPYSTR(TextString,Position,1);

        IsDelimiter := OneCharString = Delimiter;
        if IsDelimiter and EvenQuote then begin
          PartOfText := COPYSTR(TextString,1,Position - 2);
          PartOfText := UnescapeQuotedValue(PartOfText);
          TextString := COPYSTR(TextString,Position + 1,STRLEN(TextString) - Position);
          exit(PartOfText);
        end;

        IsQuote := STRPOS(OneCharString,'"') = 1;
        if IsQuote then
          EvenQuote := not EvenQuote;

        Position += 1;
      end;

      // If delimiter wasn't found read everything until the end of the string,excluding the closing quote:
      PartOfText := COPYSTR(TextString,1,Position - 2);
      PartOfText := UnescapeQuotedValue(PartOfText);
      TextString := '';
      exit(PartOfText);
    END;

    LOCAL PROCEDURE UnescapeQuotedValue@7(TextValue@1000 : Text) : Text;
    VAR
      InnerQuotePosition@1001 : Integer;
      TextValue2@1002 : Text;
    BEGIN
      InnerQuotePosition := STRPOS(TextValue,'""');
      if InnerQuotePosition = 0 then
        exit(TextValue);

      while InnerQuotePosition > 0 do begin
        TextValue2 += COPYSTR(TextValue,1,InnerQuotePosition);
        TextValue := COPYSTR(TextValue,InnerQuotePosition + 2,STRLEN(TextValue) - InnerQuotePosition - 1);
        InnerQuotePosition := STRPOS(TextValue,'""')
      end;

      TextValue2 += TextValue;
      exit(TextValue2);
    END;

    [External]
    PROCEDURE CreateTextTableFilter@8(CurrentLineOnly@1000 : Boolean) : Text;
    VAR
      TextTableFilter@1001 : Text;
      TextFieldFilter@1002 : Text;
    BEGIN
      TextFieldFilter := CreateTextTableFilterWithoutTableName(CurrentLineOnly);
      if STRLEN(TextFieldFilter) > 0 then
        TextTableFilter := QuoteValue("Table Name",':') + ': ' + TextFieldFilter;
      exit(TextTableFilter);
    END;

    [External]
    PROCEDURE CreateTextTableFilterWithoutTableName@17(CurrentLineOnly@1003 : Boolean) : Text;
    VAR
      TextTableFilter@1002 : Text;
      TextFieldFilter@1001 : Text;
      FirstField@1000 : Boolean;
    BEGIN
      FirstField := true;
      if CurrentLineOnly then
        AppendFieldFilter(TextTableFilter,CreateTextFieldFilter)
      else
        if FIND('-') then
          repeat
            TextFieldFilter := CreateTextFieldFilter;
            if STRLEN(TextFieldFilter) > 0 then begin
              if not FirstField then
                TextTableFilter += ',';
              FirstField := false;
              AppendFieldFilter(TextTableFilter,TextFieldFilter);
            end;
          until NEXT = 0;

      exit(TextTableFilter);
    END;

    LOCAL PROCEDURE CreateTextFieldFilter@9() : Text;
    BEGIN
      if ("Field Number" > 0) and (STRLEN("Field Filter") > 0) then
        exit(QuoteValue("Field Caption",'=') + '=' + QuoteValue("Field Filter",','));

      exit('');
    END;

    LOCAL PROCEDURE AppendFieldFilter@10(VAR TextTableFilter@1000 : Text;TextFieldFilter@1001 : Text);
    BEGIN
      if (STRLEN(TextTableFilter) + STRLEN(TextFieldFilter)) > 200 then
        ERROR(Text000);

      TextTableFilter += TextFieldFilter;
    END;

    LOCAL PROCEDURE QuoteValue@11(TextValue@1000 : Text[250];TextCausingQuotes@1001 : Text) : Text;
    VAR
      InnerQuotePosition@1002 : Integer;
      TextValue2@1003 : Text;
    BEGIN
      // If quotes are not needed return initial value:
      if STRPOS(TextValue,TextCausingQuotes) <= 0 then
        exit(TextValue);

      // Escape possible double quote characters:
      InnerQuotePosition := STRPOS(TextValue,'"');
      while InnerQuotePosition > 0 do begin
        TextValue2 += COPYSTR(TextValue,1,InnerQuotePosition) + '"';
        TextValue := COPYSTR(TextValue,InnerQuotePosition + 1,STRLEN(TextValue));
        InnerQuotePosition := STRPOS(TextValue,'"');
      end;

      // Surround by double quotes:
      TextValue2 += TextValue;
      TextValue2 := '"' + TextValue2 + '"';

      exit(TextValue2);
    END;

    LOCAL PROCEDURE TableNameMatches@12(VAR TableFilterText@1000 : Text) : Boolean;
    VAR
      TableName2@1001 : Text;
      TableNamesEqual@1002 : Boolean;
    BEGIN
      // Extract TableName from TableFilterText.
      // If the first character in TableFilterText is a double quote,get the table name from the quotes,
      // otherwise read it from TableFilterText until the colon:
      if STRPOS(COPYSTR(TableFilterText,1,1),'"') = 1 then
        TableName2 := GetQuotedValue(TableFilterText,':')
      else
        TableName2 := GetValue(TableFilterText,':');

      TableNamesEqual := TableName2 = "Table Name";

      if TableNamesEqual then
        // Remove the first blank space:
        TableFilterText := COPYSTR(TableFilterText,2,STRLEN(TableFilterText) - 1);

      exit(TableNamesEqual);
    END;

    LOCAL PROCEDURE ExtractFieldName@13(VAR TableFilterText@1000 : Text);
    VAR
      FieldTable@1001 : Record Field;
      FieldName2@1002 : Text;
    BEGIN
      // If the first character s a double quote, extract the field name from the quotes,
      // otherwise read it from the string until the equal sign:
      if STRPOS(COPYSTR(TableFilterText,1,1),'"') = 1 then
        FieldName2 := GetQuotedValue(TableFilterText,'=')
      else
        FieldName2 := GetValue(TableFilterText,'=');

      FieldTable.RESET;
      FieldTable.SETRANGE(TableNo,"Table Number");
      FieldTable.SETRANGE("Field Caption",FieldName2);
      FieldTable.FINDFIRST;
      FillSourceRecord(FieldTable);
      "Line No." := 0;
    END;

    LOCAL PROCEDURE ExtractFieldFilter@14(VAR TableFilterText@1000 : Text);
    VAR
      FieldFilter2@1001 : Text;
    BEGIN
      // If the first character is a double quote, extract the field filter from the quotes,
      // otherwise read it from the string until the comma:
      if STRPOS(COPYSTR(TableFilterText,1,1),'"') = 1 then
        FieldFilter2 := GetQuotedValue(TableFilterText,',')
      else
        FieldFilter2 := GetValue(TableFilterText,',');

      "Field Filter" := FieldFilter2;
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE CheckFieldFilter@15();
    VAR
      RecordRef@1000 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      RecordRef.OPEN("Table Number");
      FieldRef := RecordRef.FIELD("Field Number");
      FieldRef.SETFILTER("Field Filter");
      "Field Filter" := FieldRef.GETFILTER;
      RecordRef.CLOSE;
    END;

    LOCAL PROCEDURE SetCaption@16();
    BEGIN
      CurrPage.CAPTION := CurrPage.CAPTION + ' - ' + SourceTableCaption;
    END;

    BEGIN
    END.
  }
}

