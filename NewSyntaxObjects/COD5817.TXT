OBJECT Codeunit 5817 Undo Posting Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot undo line %1 because there is not sufficient content in the receiving bins.';
      Text002@1015 : TextConst 'ENU=You cannot undo line %1 because warehouse put-away lines have already been created.';
      Text003@1018 : TextConst 'ENU=You cannot undo line %1 because warehouse activity lines have already been posted.';
      Text004@1019 : TextConst 'ENU=You must delete the related %1 before you undo line %2.';
      Text005@1020 : TextConst 'ENU=You cannot undo line %1 because warehouse receipt lines have already been created.';
      Text006@1021 : TextConst 'ENU=You cannot undo line %1 because warehouse shipment lines have already been created.';
      Text007@1022 : TextConst 'ENU=The items have been picked. If you undo line %1, the items will remain in the shipping area until you put them away.\Do you still want to undo the shipment?';
      Text008@1023 : TextConst 'ENU=You cannot undo line %1 because warehouse receipt lines have already been posted.';
      Text009@1024 : TextConst 'ENU=You cannot undo line %1 because warehouse put-away lines have already been posted.';
      Text010@1025 : TextConst 'ENU=You cannot undo line %1 because inventory pick lines have already been posted.';
      Text011@1026 : TextConst 'ENU=You cannot undo line %1 because there is an item charge assigned to it on %2 Doc No. %3 Line %4.';
      Text012@1002 : TextConst 'ENU=You cannot undo line %1 because an item charge has already been invoiced.';
      Text013@1003 : TextConst 'ENU=Item ledger entries are missing for line %1.';
      Text014@1004 : TextConst 'ENU=You cannot undo line %1, because a revaluation has already been posted.';
      Text015@1005 : TextConst 'ENU=You cannot undo posting of item %1 with variant ''%2'' and unit of measure %3 because it is not available at location %4, bin code %5. The required quantity is %6. The available quantity is %7.';
      ItemJnlPostLine@1000 : Codeunit "Item Jnl.-Post Line";

    [External]
    PROCEDURE TestSalesShptLine@14(SalesShptLine@1003 : Record "Sales Shipment Line");
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      with SalesShptLine do
        TestAllTransactions(DATABASE::"Sales Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Sales Line",
          SalesLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
    END;

    [External]
    PROCEDURE TestServShptLine@27(ServShptLine@1003 : Record "Service Shipment Line");
    VAR
      ServLine@1000 : Record "Service Line";
    BEGIN
      with ServShptLine do
        TestAllTransactions(DATABASE::"Service Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Service Line",
          ServLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
    END;

    [External]
    PROCEDURE TestPurchRcptLine@17(PurchRcptLine@1002 : Record "Purch. Rcpt. Line");
    VAR
      PurchLine@1000 : Record "Purchase Line";
    BEGIN
      with PurchRcptLine do
        TestAllTransactions(DATABASE::"Purch. Rcpt. Line",
          "Document No.","Line No.",
          DATABASE::"Purchase Line",
          PurchLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
    END;

    [External]
    PROCEDURE TestReturnShptLine@18(ReturnShptLine@1001 : Record "Return Shipment Line");
    VAR
      PurchLine@1000 : Record "Purchase Line";
    BEGIN
      with ReturnShptLine do
        TestAllTransactions(DATABASE::"Return Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Purchase Line",
          PurchLine."Document Type"::"Return Order",
          "Return Order No.",
          "Return Order Line No.");
    END;

    [External]
    PROCEDURE TestReturnRcptLine@19(ReturnRcptLine@1000 : Record "Return Receipt Line");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with ReturnRcptLine do
        TestAllTransactions(DATABASE::"Return Receipt Line",
          "Document No.","Line No.",
          DATABASE::"Sales Line",
          SalesLine."Document Type"::"Return Order",
          "Return Order No.",
          "Return Order Line No.");
    END;

    [External]
    PROCEDURE TestAsmHeader@30(PostedAsmHeader@1003 : Record "Posted Assembly Header");
    VAR
      AsmHeader@1000 : Record "Assembly Header";
    BEGIN
      with PostedAsmHeader do
        TestAllTransactions(DATABASE::"Posted Assembly Header",
          "No.",0,
          DATABASE::"Assembly Header",
          AsmHeader."Document Type"::Order,
          "Order No.",
          0);
    END;

    [External]
    PROCEDURE TestAsmLine@31(PostedAsmLine@1003 : Record "Posted Assembly Line");
    VAR
      AsmLine@1000 : Record "Assembly Line";
    BEGIN
      with PostedAsmLine do
        TestAllTransactions(DATABASE::"Posted Assembly Line",
          "Document No.","Line No.",
          DATABASE::"Assembly Line",
          AsmLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
    END;

    LOCAL PROCEDURE TestAllTransactions@13(UndoType@1004 : Integer;UndoID@1006 : Code[20];UndoLineNo@1005 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    BEGIN
      if not TestPostedWhseReceiptLine(
           UndoType,UndoID,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo)
      then begin
        TestWarehouseActivityLine(UndoType,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
        TestRgstrdWhseActivityLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
        TestWhseWorksheetLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      end;

      if not (UndoType in [DATABASE::"Purch. Rcpt. Line",DATABASE::"Return Receipt Line"]) then
        TestWarehouseReceiptLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      if not (UndoType in [DATABASE::"Sales Shipment Line",DATABASE::"Return Shipment Line",DATABASE::"Service Shipment Line"]) then
        TestWarehouseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedWhseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedInvtPutAwayLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedInvtPickLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);

      TestItemChargeAssignmentPurch(UndoType,UndoLineNo,SourceID,SourceRefNo);
      TestItemChargeAssignmentSales(UndoType,UndoLineNo,SourceID,SourceRefNo);
    END;

    LOCAL PROCEDURE TestPostedWhseReceiptLine@7(UndoType@1006 : Integer;UndoID@1007 : Code[20];UndoLineNo@1004 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer) : Boolean;
    VAR
      PostedWhseReceiptLine@1005 : Record "Posted Whse. Receipt Line";
      PostedAsmHeader@1009 : Record "Posted Assembly Header";
      WhseUndoQty@1008 : Codeunit "Whse. Undo Quantity";
    BEGIN
      case UndoType of
        DATABASE::"Posted Assembly Line":
          begin
            TestWarehouseActivityLine(UndoType,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
            exit(true);
          end;
        DATABASE::"Posted Assembly Header":
          begin
            PostedAsmHeader.GET(UndoID);
            if not PostedAsmHeader.IsAsmToOrder then
              TestWarehouseBinContent(SourceType,SourceSubtype,SourceID,SourceRefNo,PostedAsmHeader."Quantity (Base)");
            exit(true);
          end;
      end;

      if not WhseUndoQty.FindPostedWhseRcptLine(
           PostedWhseReceiptLine,UndoType,UndoID,SourceType,SourceSubtype,SourceID,SourceRefNo)
      then
        exit(false);

      TestWarehouseEntry(UndoLineNo,PostedWhseReceiptLine);
      TestWarehouseActivityLine2(UndoLineNo,PostedWhseReceiptLine);
      TestRgstrdWhseActivityLine2(UndoLineNo,PostedWhseReceiptLine);
      TestWhseWorksheetLine2(UndoLineNo,PostedWhseReceiptLine);
      exit(true);
    END;

    LOCAL PROCEDURE TestWarehouseEntry@5(UndoLineNo@1002 : Integer;VAR PostedWhseReceiptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      WarehouseEntry@1007 : Record "Warehouse Entry";
      Location@1001 : Record Location;
    BEGIN
      with WarehouseEntry do begin
        if PostedWhseReceiptLine."Location Code" = '' then
          exit;
        Location.GET(PostedWhseReceiptLine."Location Code");
        if Location."Bin Mandatory" then begin
          SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code");
          SETRANGE("Item No.",PostedWhseReceiptLine."Item No.");
          SETRANGE("Location Code",PostedWhseReceiptLine."Location Code");
          SETRANGE("Variant Code",PostedWhseReceiptLine."Variant Code");
          if Location."Directed Put-away and Pick" then
            SETFILTER("Bin Type Code",GetBinTypeFilter(0)); // Receiving area
          CALCSUMS("Qty. (Base)");
          if "Qty. (Base)" < PostedWhseReceiptLine."Qty. (Base)" then
            ERROR(Text001,UndoLineNo);
        end;
      end;
    END;

    LOCAL PROCEDURE TestWarehouseBinContent@33(SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer;UndoQtyBase@1006 : Decimal);
    VAR
      WhseEntry@1011 : Record "Warehouse Entry";
      BinContent@1005 : Record "Bin Content";
      QtyAvailToTake@1004 : Decimal;
    BEGIN
      with WhseEntry do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not FINDFIRST then
          exit;

        BinContent.GET("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");
        QtyAvailToTake := BinContent.CalcQtyAvailToTake(0);
        if QtyAvailToTake < UndoQtyBase then
          ERROR(Text015,
            "Item No.",
            "Variant Code",
            "Unit of Measure Code",
            "Location Code",
            "Bin Code",
            UndoQtyBase,
            QtyAvailToTake);
      end;
    END;

    LOCAL PROCEDURE TestWarehouseActivityLine2@21(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      WarehouseActivityLine@1011 : Record "Warehouse Activity Line";
    BEGIN
      with WarehouseActivityLine do begin
        SETCURRENTKEY("Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.");
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Activity Type","Activity Type"::"Put-away");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        if not ISEMPTY then
          ERROR(Text002,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestRgstrdWhseActivityLine2@23(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      RegisteredWhseActivityLine@1010 : Record "Registered Whse. Activity Line";
    BEGIN
      with RegisteredWhseActivityLine do begin
        SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        if not ISEMPTY then
          ERROR(Text003,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestWhseWorksheetLine2@24(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      WhseWorksheetLine@1002 : Record "Whse. Worksheet Line";
    BEGIN
      with WhseWorksheetLine do begin
        SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        if not ISEMPTY then
          ERROR(Text004,TABLECAPTION,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestWarehouseActivityLine@1(UndoType@1002 : Integer;UndoLineNo@1001 : Integer;SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseActivityLine@1011 : Record "Warehouse Activity Line";
    BEGIN
      with WarehouseActivityLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then begin
          if UndoType = DATABASE::"Assembly Line" then
            ERROR(Text002,UndoLineNo);
          ERROR(Text003,UndoLineNo);
        end;
      end;
    END;

    LOCAL PROCEDURE TestRgstrdWhseActivityLine@2(UndoLineNo@1001 : Integer;SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      RegisteredWhseActivityLine@1010 : Record "Registered Whse. Activity Line";
    BEGIN
      with RegisteredWhseActivityLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        SETRANGE("Activity Type","Activity Type"::"Put-away");
        if not ISEMPTY then
          ERROR(Text002,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestWarehouseReceiptLine@6(UndoLineNo@1004 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseReceiptLine@1006 : Record "Warehouse Receipt Line";
    BEGIN
      with WarehouseReceiptLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          ERROR(Text005,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestWarehouseShipmentLine@8(UndoLineNo@1005 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseShipmentLine@1004 : Record "Warehouse Shipment Line";
    BEGIN
      with WarehouseShipmentLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          ERROR(Text006,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestPostedWhseShipmentLine@9(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      PostedWhseShipmentLine@1003 : Record "Posted Whse. Shipment Line";
    BEGIN
      with PostedWhseShipmentLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          if not CONFIRM(Text007,true,UndoLineNo) then
            ERROR('');
      end;
    END;

    LOCAL PROCEDURE TestWhseWorksheetLine@10(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WhseWorksheetLine@1002 : Record "Whse. Worksheet Line";
    BEGIN
      with WhseWorksheetLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          ERROR(Text008,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestPostedInvtPutAwayLine@11(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      PostedInvtPutAwayLine@1001 : Record "Posted Invt. Put-away Line";
    BEGIN
      with PostedInvtPutAwayLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          ERROR(Text009,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestPostedInvtPickLine@12(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer);
    VAR
      PostedInvtPickLine@1000 : Record "Posted Invt. Pick Line";
    BEGIN
      with PostedInvtPickLine do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        if not ISEMPTY then
          ERROR(Text010,UndoLineNo);
      end;
    END;

    LOCAL PROCEDURE TestItemChargeAssignmentPurch@3(UndoType@1004 : Integer;UndoLineNo@1002 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      ItemChargeAssignmentPurch@1009 : Record "Item Charge Assignment (Purch)";
    BEGIN
      with ItemChargeAssignmentPurch do begin
        SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        case UndoType of
          DATABASE::"Purch. Rcpt. Line":
            SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::Receipt);
          DATABASE::"Return Shipment Line":
            SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::"Return Shipment");
          else
            exit;
        end;
        SETRANGE("Applies-to Doc. No.",SourceID);
        SETRANGE("Applies-to Doc. Line No.",SourceRefNo);
        if not ISEMPTY then
          if FINDFIRST then
            ERROR(Text011,UndoLineNo,"Document Type","Document No.","Line No.");
      end;
    END;

    LOCAL PROCEDURE TestItemChargeAssignmentSales@4(UndoType@1004 : Integer;UndoLineNo@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer);
    VAR
      ItemChargeAssignmentSales@1008 : Record "Item Charge Assignment (Sales)";
    BEGIN
      with ItemChargeAssignmentSales do begin
        SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        case UndoType of
          DATABASE::"Sales Shipment Line":
            SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::Shipment);
          DATABASE::"Return Receipt Line":
            SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::"Return Receipt");
          else
            exit;
        end;
        SETRANGE("Applies-to Doc. No.",SourceID);
        SETRANGE("Applies-to Doc. Line No.",SourceRefNo);
        if not ISEMPTY then
          if FINDFIRST then
            ERROR(Text011,UndoLineNo,"Document Type","Document No.","Line No.");
      end;
    END;

    LOCAL PROCEDURE GetBinTypeFilter@41(Type@1000 : 'Receive,Ship,"Put Away",Pick') : Text[1024];
    VAR
      BinType@1001 : Record "Bin Type";
      Filter@1002 : Text[1024];
    BEGIN
      with BinType do begin
        case Type of
          Type::Receive:
            SETRANGE(Receive,true);
          Type::Ship:
            SETRANGE(Ship,true);
          Type::"Put Away":
            SETRANGE("Put Away",true);
          Type::Pick:
            SETRANGE(Pick,true);
        end;
        if FIND('-') then
          repeat
            Filter := STRSUBSTNO('%1|%2',Filter,Code);
          until NEXT = 0;
        if Filter <> '' then
          Filter := COPYSTR(Filter,2);
      end;
      exit(Filter);
    END;

    [External]
    PROCEDURE CheckItemLedgEntries@26(VAR TempItemLedgEntry@1000 : TEMPORARY Record "Item Ledger Entry";LineRef@1003 : Integer);
    VAR
      ValueEntry@1001 : Record "Value Entry";
      ItemRec@1002 : Record Item;
      PostedATOLink@1004 : Record "Posted Assemble-to-Order Link";
    BEGIN
      with TempItemLedgEntry do begin
        FIND('-'); // Assertion: will fail if not found.
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
        ItemRec.GET("Item No.");
        if ItemRec.Type = ItemRec.Type::Service then
          exit;

        repeat
          if Positive then begin
            if ("Job No." = '') and
               not (("Order Type" = "Order Type"::Assembly) and
                    PostedATOLink.GET(PostedATOLink."Assembly Document Type"::Assembly,"Document No."))
            then
              TESTFIELD("Remaining Quantity",Quantity);
          end else
            TESTFIELD("Shipped Qty. Not Returned",Quantity);
          CALCFIELDS("Reserved Quantity");
          TESTFIELD("Reserved Quantity",0);

          ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
          if ValueEntry.FIND('-') then
            repeat
              if ValueEntry."Item Charge No." <> '' then
                ERROR(Text012,LineRef);
              if ValueEntry."Entry Type" = ValueEntry."Entry Type"::Revaluation then
                ERROR(Text014,LineRef);
            until ValueEntry.NEXT = 0;

          if ItemRec."Costing Method" = ItemRec."Costing Method"::Specific then
            TESTFIELD("Serial No.");
        until NEXT = 0;
      end; // WITH
    END;

    [External]
    PROCEDURE PostItemJnlLineAppliedToList@22(ItemJnlLine@1002 : Record "Item Journal Line";VAR TempApplyToEntryList@1000 : TEMPORARY Record "Item Ledger Entry";UndoQty@1009 : Decimal;UndoQtyBase@1010 : Decimal;VAR TempItemLedgEntry@1011 : TEMPORARY Record "Item Ledger Entry";VAR TempItemEntryRelation@1008 : TEMPORARY Record "Item Entry Relation");
    VAR
      ItemApplicationEntry@1001 : Record "Item Application Entry";
      ItemTrackingMgt@1006 : Codeunit "Item Tracking Management";
      NonDistrQuantity@1004 : Decimal;
      NonDistrQuantityBase@1005 : Decimal;
    BEGIN
      TempApplyToEntryList.FIND('-'); // Assertion: will fail if not found.
      if ItemJnlLine."Job No." = '' then
        ItemJnlLine.TESTFIELD(Correction,true);
      NonDistrQuantity := -UndoQty;
      NonDistrQuantityBase := -UndoQtyBase;
      repeat
        if ItemJnlLine."Job No." = '' then
          ItemJnlLine."Applies-to Entry" := TempApplyToEntryList."Entry No."
        else
          ItemJnlLine."Applies-to Entry" := 0;

        ItemJnlLine."Item Shpt. Entry No." := 0;
        ItemJnlLine."Quantity (Base)" := -TempApplyToEntryList.Quantity;
        ItemJnlLine."Serial No." := TempApplyToEntryList."Serial No.";
        ItemJnlLine."Lot No." := TempApplyToEntryList."Lot No.";

        // Quantity is filled in according to UOM:
        ItemTrackingMgt.AdjustQuantityRounding(
          NonDistrQuantity,ItemJnlLine.Quantity,
          NonDistrQuantityBase,ItemJnlLine."Quantity (Base)");

        NonDistrQuantity := NonDistrQuantity - ItemJnlLine.Quantity;
        NonDistrQuantityBase := NonDistrQuantityBase - ItemJnlLine."Quantity (Base)";

        PostItemJnlLine(ItemJnlLine);

        if ItemJnlLine."Job No." <> '' then begin
          CLEAR(ItemJnlPostLine);
          FindItemReceiptApplication(ItemApplicationEntry,TempApplyToEntryList."Entry No.");
          ItemJnlPostLine.UndoValuePostingWithJob(TempApplyToEntryList."Entry No.",ItemApplicationEntry."Outbound Item Entry No.");

          FindItemShipmentApplication(ItemApplicationEntry,ItemJnlLine."Item Shpt. Entry No.");
          ItemJnlPostLine.UndoValuePostingWithJob(ItemApplicationEntry."Inbound Item Entry No.",ItemJnlLine."Item Shpt. Entry No.");
        end;

        TempItemEntryRelation."Item Entry No." := ItemJnlLine."Item Shpt. Entry No.";
        TempItemEntryRelation."Serial No." := ItemJnlLine."Serial No.";
        TempItemEntryRelation."Lot No." := ItemJnlLine."Lot No.";
        TempItemEntryRelation.INSERT;
        TempItemLedgEntry := TempApplyToEntryList;
        TempItemLedgEntry.INSERT;
      until TempApplyToEntryList.NEXT = 0;
    END;

    [External]
    PROCEDURE CollectItemLedgEntries@20(VAR TempItemLedgEntry@1005 : TEMPORARY Record "Item Ledger Entry";SourceType@1000 : Integer;DocumentNo@1001 : Code[20];LineNo@1002 : Integer;BaseQty@1003 : Decimal;EntryRef@1004 : Integer);
    VAR
      ItemLedgEntry@1006 : Record "Item Ledger Entry";
      ItemTrackingMgt@1007 : Codeunit "Item Tracking Management";
    BEGIN
      TempItemLedgEntry.RESET;
      if not TempItemLedgEntry.ISEMPTY then
        TempItemLedgEntry.DELETEALL;
      if EntryRef <> 0 then begin
        ItemLedgEntry.GET(EntryRef); // Assertion: will fail if no entry exists.
        TempItemLedgEntry := ItemLedgEntry;
        TempItemLedgEntry.INSERT;
      end else begin
        if SourceType in [DATABASE::"Sales Shipment Line",
                          DATABASE::"Return Shipment Line",
                          DATABASE::"Service Shipment Line",
                          DATABASE::"Posted Assembly Line"]
        then
          BaseQty := BaseQty * -1;
        if not
           ItemTrackingMgt.CollectItemEntryRelation(
             TempItemLedgEntry,SourceType,0,DocumentNo,'',0,LineNo,BaseQty)
        then
          ERROR(Text013,LineNo);
      end;
    END;

    [External]
    PROCEDURE UpdatePurchLine@16(PurchLine@1000 : Record "Purchase Line";UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record "Item Ledger Entry");
    VAR
      xPurchLine@1004 : Record "Purchase Line";
      PurchSetup@1020 : Record "Purchases & Payables Setup";
      ReservePurchLine@1003 : Codeunit "Purch. Line-Reserve";
    BEGIN
      PurchSetup.GET;
      with PurchLine do begin
        xPurchLine := PurchLine;
        case "Document Type" of
          "Document Type"::"Return Order":
            begin
              "Return Qty. Shipped" := "Return Qty. Shipped" - UndoQty;
              "Return Qty. Shipped (Base)" := "Return Qty. Shipped (Base)" - UndoQtyBase;
              InitOutstanding;
              if PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank then
                "Qty. to Receive" := 0
              else
                InitQtyToShip;
            end;
          "Document Type"::Order:
            begin
              "Quantity Received" := "Quantity Received" - UndoQty;
              "Qty. Received (Base)" := "Qty. Received (Base)" - UndoQtyBase;
              InitOutstanding;
              if PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank then
                "Qty. to Receive" := 0
              else
                InitQtyToReceive;
            end;
          else
            FIELDERROR("Document Type");
        end;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Expected Receipt Date");
        xPurchLine."Quantity (Base)" := 0;
        ReservePurchLine.VerifyQuantity(PurchLine,xPurchLine);
      end;
    END;

    [External]
    PROCEDURE UpdateSalesLine@15(SalesLine@1000 : Record "Sales Line";UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record "Item Ledger Entry");
    VAR
      xSalesLine@1004 : Record "Sales Line";
      SalesSetup@1020 : Record "Sales & Receivables Setup";
      ReserveSalesLine@1003 : Codeunit "Sales Line-Reserve";
    BEGIN
      SalesSetup.GET;
      with SalesLine do begin
        xSalesLine := SalesLine;
        case "Document Type" of
          "Document Type"::"Return Order":
            begin
              "Return Qty. Received" := "Return Qty. Received" - UndoQty;
              "Return Qty. Received (Base)" := "Return Qty. Received (Base)" - UndoQtyBase;
              InitOutstanding;
              if SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank then
                "Qty. to Ship" := 0
              else
                InitQtyToReceive;
            end;
          "Document Type"::Order:
            begin
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              InitOutstanding;
              if SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank then
                "Qty. to Ship" := 0
              else
                InitQtyToShip;
            end;
          else
            FIELDERROR("Document Type");
        end;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Shipment Date");
        xSalesLine."Quantity (Base)" := 0;
        ReserveSalesLine.VerifyQuantity(SalesLine,xSalesLine);
      end;
    END;

    [External]
    PROCEDURE UpdateServLine@28(ServLine@1000 : Record "Service Line";UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record "Item Ledger Entry");
    VAR
      xServLine@1004 : Record "Service Line";
      ReserveServLine@1003 : Codeunit "Service Line-Reserve";
    BEGIN
      with ServLine do begin
        xServLine := ServLine;
        case "Document Type" of
          "Document Type"::Order:
            begin
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              "Qty. to Consume" := 0;
              "Qty. to Consume (Base)" := 0;
              InitOutstanding;
              InitQtyToShip;
            end;
          else
            FIELDERROR("Document Type");
        end;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
        xServLine."Quantity (Base)" := 0;
        ReserveServLine.VerifyQuantity(ServLine,xServLine);
      end;
    END;

    [Internal]
    PROCEDURE UpdateServLineCnsm@29(VAR ServLine@1000 : Record "Service Line";UndoQty@1005 : Decimal;UndoQtyBase@1008 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record "Item Ledger Entry");
    VAR
      ServHeader@1002 : Record "Service Header";
      xServLine@1004 : Record "Service Line";
      SalesSetup@1006 : Record "Sales & Receivables Setup";
      ReserveServLine@1003 : Codeunit "Service Line-Reserve";
      ServCalcDiscount@1007 : Codeunit "Service-Calc. Discount";
    BEGIN
      with ServLine do begin
        xServLine := ServLine;
        case "Document Type" of
          "Document Type"::Order:
            begin
              "Quantity Consumed" := "Quantity Consumed" - UndoQty;
              "Qty. Consumed (Base)" := "Qty. Consumed (Base)" - UndoQtyBase;
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              "Qty. to Invoice" := 0;
              "Qty. to Invoice (Base)" := 0;
              InitOutstanding;
              InitQtyToShip;
              VALIDATE("Line Discount %");
              ConfirmAdjPriceLineChange;
              MODIFY;

              SalesSetup.GET;
              if SalesSetup."Calc. Inv. Discount" then begin
                ServHeader.GET("Document Type","Document No.");
                ServCalcDiscount.CalculateWithServHeader(ServHeader,ServLine,ServLine);
              end;
            end;
          else
            FIELDERROR("Document Type");
        end;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
        xServLine."Quantity (Base)" := 0;
        ReserveServLine.VerifyQuantity(ServLine,xServLine);
      end;
    END;

    LOCAL PROCEDURE RevertPostedItemTracking@25(VAR TempItemLedgEntry@1000 : TEMPORARY Record "Item Ledger Entry";AvailabilityDate@1004 : Date);
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ReservEntry@1002 : Record "Reservation Entry";
      TempReservEntry@1006 : TEMPORARY Record "Reservation Entry";
      ReservEngineMgt@1005 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      with TempItemLedgEntry do begin
        if FIND('-') then begin
          repeat
            TrackingSpecification.GET("Entry No.");
            if not TrackingIsATO(TrackingSpecification) then begin
              ReservEntry.INIT;
              ReservEntry.TRANSFERFIELDS(TrackingSpecification);
              ReservEntry.VALIDATE("Quantity (Base)");
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus;
              if ReservEntry.Positive then
                ReservEntry."Expected Receipt Date" := AvailabilityDate
              else
                ReservEntry."Shipment Date" := AvailabilityDate;
              ReservEntry."Entry No." := 0;
              ReservEntry.UpdateItemTracking;
              ReservEntry.INSERT;

              TempReservEntry := ReservEntry;
              TempReservEntry.INSERT;
            end;
            TrackingSpecification.DELETE;
          until NEXT = 0;
          ReservEngineMgt.UpdateOrderTracking(TempReservEntry);
        end;
      end; // WITH
    END;

    [External]
    PROCEDURE PostItemJnlLine@40(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      Job@1002 : Record Job;
      ItemJnlLine2@1003 : Record "Item Journal Line";
    BEGIN
      CLEAR(ItemJnlLine2);
      ItemJnlLine2 := ItemJnlLine;
      if ItemJnlLine2."Job No." <> '' then begin
        ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Negative Adjmt.";
        Job.GET(ItemJnlLine2."Job No.");
        ItemJnlLine2."Source No." := Job."Bill-to Customer No.";
        ItemJnlLine2."Source Type" := ItemJnlLine2."Source Type"::Customer;
        ItemJnlLine2."Discount Amount" := 0;
        ItemJnlPostLine.RUN(ItemJnlLine2);

        ItemJnlLine."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";
      end;
      ItemJnlPostLine.RUN(ItemJnlLine);
    END;

    LOCAL PROCEDURE TrackingIsATO@32(TrackingSpecification@1003 : Record "Tracking Specification") : Boolean;
    VAR
      ATOLink@1001 : Record "Assemble-to-Order Link";
    BEGIN
      with TrackingSpecification do begin
        if "Source Type" <> DATABASE::"Sales Line" then
          exit(false);
        if not "Prohibit Cancellation" then
          exit(false);

        ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.","Document Line No.");
        ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
        ATOLink.SETRANGE("Document Type","Source Subtype");
        ATOLink.SETRANGE("Document No.","Source ID");
        ATOLink.SETRANGE("Document Line No.","Source Ref. No.");
        exit(not ATOLink.ISEMPTY);
      end;
    END;

    [External]
    PROCEDURE TransferSourceValues@43(VAR ItemJnlLine@1000 : Record "Item Journal Line";EntryNo@1001 : Integer);
    VAR
      ItemLedgEntry@1003 : Record "Item Ledger Entry";
      ValueEntry@1002 : Record "Value Entry";
    BEGIN
      with ItemLedgEntry do begin
        GET(EntryNo);
        ItemJnlLine."Source Type" := "Source Type";
        ItemJnlLine."Source No." := "Source No.";
        ItemJnlLine."Country/Region Code" := "Country/Region Code";
      end;

      with ValueEntry do begin
        SETRANGE("Item Ledger Entry No.",EntryNo);
        FINDFIRST;
        ItemJnlLine."Source Posting Group" := "Source Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := "Salespers./Purch. Code";
      end;
    END;

    [Internal]
    PROCEDURE ReapplyJobConsumption@34(ItemRcptEntryNo@1002 : Integer);
    VAR
      ItemApplnEntry@1001 : Record "Item Application Entry";
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
    BEGIN
      // Purchase receipt and job consumption are reapplied with with fixed cost application
      FindItemReceiptApplication(ItemApplnEntry,ItemRcptEntryNo);
      ItemJnlPostLine.UnApply(ItemApplnEntry);
      ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
      ItemJnlPostLine.ReApply(ItemLedgEntry,ItemApplnEntry."Outbound Item Entry No.");
    END;

    PROCEDURE FindItemReceiptApplication@37(VAR ItemApplnEntry@1000 : Record "Item Application Entry";ItemRcptEntryNo@1001 : Integer);
    BEGIN
      ItemApplnEntry.RESET;
      ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemRcptEntryNo);
      ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',ItemRcptEntryNo);
      ItemApplnEntry.FINDFIRST;
    END;

    PROCEDURE FindItemShipmentApplication@42(VAR ItemApplnEntry@1001 : Record "Item Application Entry";ItemShipmentEntryNo@1000 : Integer);
    BEGIN
      ItemApplnEntry.RESET;
      ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemShipmentEntryNo);
      ItemApplnEntry.FINDFIRST;
    END;

    BEGIN
    END.
  }
}

