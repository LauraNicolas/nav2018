OBJECT Table 7354 Bin
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Location Code","Zone Code",Code;
    OnInsert=BEGIN
               TESTFIELD("Location Code");
               GetLocation("Location Code");
               if Location."Directed Put-away and Pick" then begin
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               end else begin
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               end;
             END;

    OnModify=BEGIN
               GetLocation("Location Code");
               if Location."Directed Put-away and Pick" then begin
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               end else begin
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               end;
             END;

    OnDelete=VAR
               Location@1003 : Record Location;
               ItemJnlLine@1004 : Record "Item Journal Line";
             BEGIN
               CheckEmptyBin(Text008);

               Location.GET("Location Code");
               if Location."Adjustment Bin Code" = Code then begin
                 ItemJnlLine.SETCURRENTKEY("Entry Type","Item No.","Variant Code","Location Code");
                 ItemJnlLine.SETFILTER("Entry Type",'%1|%2|%3|%4',
                   ItemJnlLine."Entry Type"::"Negative Adjmt.",ItemJnlLine."Entry Type"::Sale,
                   ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemJnlLine."Entry Type"::Purchase);
                 ItemJnlLine.SETRANGE("Location Code","Location Code");
                 if ItemJnlLine.FINDFIRST then
                   if not CONFIRM(
                        Text002,false,STRSUBSTNO(ItemJnlLine.TABLECAPTION,TABLECAPTION))
                   then
                     ERROR(Text003);
               end;

               BinContent.RESET;
               BinContent.SETRANGE("Location Code","Location Code");
               BinContent.SETRANGE("Bin Code",Code);
               BinContent.DELETEALL;
             END;

    CaptionML=ENU=Bin;
    LookupPageID="Bin List";
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=true;
                                                   Editable=false }
    { 2   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 4   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Zone Code" <> xRec."Zone Code" then begin
                                                                  CheckEmptyBin(Text007);
                                                                  if Code = '' then
                                                                    SetUpNewLine;
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Zone Code","Zone Code");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code;
                                                   Editable=false }
    { 5   ;   ;Adjustment Bin      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Location WHERE (Code=FIELD("Location Code"),
                                                                                     "Adjustment Bin Code"=FIELD(Code)));
                                                   CaptionML=ENU=Adjustment Bin;
                                                   Editable=false }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   OnValidate=BEGIN
                                                                if "Bin Type Code" <> xRec."Bin Type Code" then begin
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Type Code","Bin Type Code");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Type Code }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   OnValidate=BEGIN
                                                                if "Warehouse Class Code" <> xRec."Warehouse Class Code" then begin
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Warehouse Class Code","Warehouse Class Code");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Warehouse Class Code }
    { 12  ;   ;Block Movement      ;Option        ;OnValidate=BEGIN
                                                                if "Block Movement" <> xRec."Block Movement" then begin
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Block Movement","Block Movement");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Block Movement;
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound,All";
                                                   OptionString=" ",Inbound,Outbound,All }
    { 20  ;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=ENU=Special Equipment Code }
    { 21  ;   ;Bin Ranking         ;Integer       ;OnValidate=VAR
                                                                WhseActivLine@1000 : Record "Warehouse Activity Line";
                                                              BEGIN
                                                                if "Bin Ranking" <> xRec."Bin Ranking" then begin
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Ranking","Bin Ranking");

                                                                  WhseActivLine.SETCURRENTKEY("Bin Code","Location Code");
                                                                  WhseActivLine.SETRANGE("Bin Code",Code);
                                                                  WhseActivLine.SETRANGE("Location Code","Location Code");
                                                                  WhseActivLine.MODIFYALL("Bin Ranking","Bin Ranking");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Ranking }
    { 22  ;   ;Maximum Cubage      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(false);
                                                              END;

                                                   CaptionML=ENU=Maximum Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=true }
    { 23  ;   ;Maximum Weight      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(true);
                                                              END;

                                                   CaptionML=ENU=Maximum Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=true }
    { 30  ;   ;Empty               ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Empty;
                                                   Editable=false }
    { 32  ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=ENU=Item Filter }
    { 33  ;   ;Variant Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Stockkeeping Unit"."Variant Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                           "Item No."=FIELD("Item Filter"));
                                                   CaptionML=ENU=Variant Filter }
    { 34  ;   ;Default             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Bin Content" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                          "Bin Code"=FIELD(Code),
                                                                                          "Item No."=FIELD("Item Filter"),
                                                                                          "Variant Code"=FIELD("Variant Filter"),
                                                                                          Default=CONST(true)));
                                                   CaptionML=ENU=Default;
                                                   Editable=false }
    { 40  ;   ;Cross-Dock Bin      ;Boolean       ;OnValidate=BEGIN
                                                                if "Cross-Dock Bin" <> xRec."Cross-Dock Bin" then begin
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Cross-Dock Bin","Cross-Dock Bin");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Cross-Dock Bin }
    { 41  ;   ;Dedicated           ;Boolean       ;OnValidate=BEGIN
                                                                if Dedicated <> xRec.Dedicated then begin
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL(Dedicated,Dedicated);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Dedicated }
  }
  KEYS
  {
    {    ;"Location Code",Code                    ;Clustered=true }
    {    ;"Bin Type Code"                          }
    {    ;"Location Code","Warehouse Class Code","Bin Ranking" }
    {    ;"Location Code","Zone Code",Code         }
    {    ;Code                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record Location;
      Zone@1000 : Record Zone;
      Text000@1001 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because the %2 contains items."';
      Text001@1002 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because one or more %7 exists for this %2."';
      Text002@1003 : TextConst 'ENU=One or more %1 exists for this bin. Do you still want to delete this %2?';
      Text003@1004 : TextConst 'ENU=Cancelled.';
      BinContent@1010 : Record "Bin Content";
      Item@1012 : Record Item;
      WMSMgt@1005 : Codeunit "WMS Management";
      Text005@1006 : TextConst 'ENU=The total cubage %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?';
      Text006@1007 : TextConst 'ENU=The total weight %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?';
      Text007@1008 : TextConst 'ENU=modify';
      Text008@1011 : TextConst 'ENU=delete';

    [External]
    PROCEDURE SetUpNewLine@8();
    BEGIN
      GetLocation("Location Code");
      if Location."Directed Put-away and Pick" then
        if GetZone("Location Code","Zone Code") then begin
          "Bin Type Code" := Zone."Bin Type Code";
          "Warehouse Class Code" := Zone."Warehouse Class Code";
          "Special Equipment Code" := Zone."Special Equipment Code";
          "Bin Ranking" := Zone."Zone Ranking";
          "Cross-Dock Bin" := Zone."Cross-Dock Bin Zone";
        end;
    END;

    LOCAL PROCEDURE GetZone@1(LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10]) : Boolean;
    BEGIN
      if (LocationCode = '') or (ZoneCode = '') then
        exit(false);
      if (Zone."Location Code" <> LocationCode) or
         (Zone.Code <> ZoneCode)
      then
        if not Zone.GET("Location Code","Zone Code") then
          exit(false);

      exit(true);
    END;

    [External]
    PROCEDURE CalcCubageAndWeight@3(VAR Cubage@1000 : Decimal;VAR Weight@1007 : Decimal;CalledbyPosting@1012 : Boolean);
    VAR
      PostedCubage@1001 : Decimal;
      PostedWeight@1002 : Decimal;
      WhseActivityWeight@1006 : Decimal;
      WhseActivityCubage@1005 : Decimal;
      JournalWeight@1004 : Decimal;
      JournalCubage@1003 : Decimal;
      WhseRcptWeight@1009 : Decimal;
      WhseRcptCubage@1008 : Decimal;
      WhseShptWeight@1011 : Decimal;
      WhseShptCubage@1010 : Decimal;
      WhseIntPickWeight@1014 : Decimal;
      WhseIntPickCubage@1013 : Decimal;
    BEGIN
      if ("Maximum Cubage" <> 0) or ("Maximum Weight" <> 0) then begin
        CalcPostedCubageAndWeight(PostedCubage,PostedWeight);
        if not CalledbyPosting then begin
          CalcPutAwayOnWhseActivity(WhseActivityWeight,WhseActivityCubage);
          CalcPutAwayOnWhseJnl(JournalWeight,JournalCubage);
          CalcPutAwayOnWhseRcpt(WhseRcptWeight,WhseRcptCubage);
          CalcPutAwayOnWhseShpt(WhseShptWeight,WhseShptCubage);
          CalcPutAwayOnWhseIntPick(WhseIntPickWeight,WhseIntPickCubage);
        end;
        if "Maximum Cubage" <> 0 then
          Cubage :=
            "Maximum Cubage" -
            (PostedCubage + WhseActivityCubage + JournalCubage +
             WhseRcptCubage + WhseShptCubage + WhseIntPickCubage);

        if "Maximum Weight" <> 0 then
          Weight :=
            "Maximum Weight" -
            (PostedWeight + WhseActivityWeight + JournalWeight +
             WhseRcptWeight + WhseShptWeight + WhseIntPickWeight);
      end;
    END;

    LOCAL PROCEDURE CalcPostedCubageAndWeight@5(VAR PostedCubage@1000 : Decimal;VAR PostedWeight@1002 : Decimal);
    VAR
      WhseEntry@1001 : Record "Warehouse Entry";
    BEGIN
      WhseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WhseEntry.SETRANGE("Bin Code",Code);
      WhseEntry.SETRANGE("Location Code","Location Code");
      WhseEntry.CALCSUMS(Cubage,Weight);
      PostedCubage := WhseEntry.Cubage;
      PostedWeight := WhseEntry.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseActivity@21(VAR WhseActivWeight@1002 : Decimal;VAR WhseActivCubage@1000 : Decimal);
    VAR
      WhseActivLine@1001 : Record "Warehouse Activity Line";
    BEGIN
      WhseActivLine.SETCURRENTKEY("Bin Code","Location Code","Action Type");
      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivLine.Cubage;
      WhseActivWeight := WhseActivLine.Weight;

      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
      WhseActivLine.SETFILTER("Breakbulk No.",'<>0');
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivCubage - WhseActivLine.Cubage;
      WhseActivWeight := WhseActivWeight - WhseActivLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseJnl@22(VAR JournalWeight@1002 : Decimal;VAR JournalCubage@1001 : Decimal);
    VAR
      WhseJnlLine@1000 : Record "Warehouse Journal Line";
    BEGIN
      WhseJnlLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseJnlLine.SETRANGE("To Bin Code",Code);
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      WhseJnlLine.CALCSUMS(Cubage,Weight);
      JournalCubage := WhseJnlLine.Cubage;
      JournalWeight := WhseJnlLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseRcpt@11(VAR WhseRcptWeight@1002 : Decimal;VAR WhseRcptCubage@1000 : Decimal);
    VAR
      WhseRcptLine@1001 : Record "Warehouse Receipt Line";
    BEGIN
      WhseRcptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      WhseRcptLine.CALCSUMS(Cubage,Weight);
      WhseRcptCubage := WhseRcptLine.Cubage;
      WhseRcptWeight := WhseRcptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseShpt@13(VAR WhseShptWeight@1002 : Decimal;VAR WhseShptCubage@1000 : Decimal);
    VAR
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
    BEGIN
      WhseShptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      WhseShptLine.CALCSUMS(Cubage,Weight);
      WhseShptCubage := WhseShptLine.Cubage;
      WhseShptWeight := WhseShptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseIntPick@12(VAR WhseIntPickWeight@1002 : Decimal;VAR WhseIntPickCubage@1000 : Decimal);
    VAR
      WhseIntPickLine@1001 : Record "Whse. Internal Pick Line";
    BEGIN
      WhseIntPickLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseIntPickLine.SETRANGE("To Bin Code",Code);
      WhseIntPickLine.SETRANGE("Location Code","Location Code");
      WhseIntPickLine.CALCSUMS(Cubage,Weight);
      WhseIntPickCubage := WhseIntPickLine.Cubage;
      WhseIntPickWeight := WhseIntPickLine.Weight;
    END;

    LOCAL PROCEDURE GetItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      if ItemNo <> Item."No." then
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE CheckMaxQtyBinContent@4(CheckWeight@1000 : Boolean);
    VAR
      TotalCubage@1002 : Decimal;
      TotalWeight@1003 : Decimal;
      Cubage@1004 : Decimal;
      Weight@1005 : Decimal;
    BEGIN
      if ("Maximum Cubage" <> 0) or ("Maximum Weight" <> 0) then begin
        BinContent.RESET;
        BinContent.SETRANGE("Location Code","Location Code");
        BinContent.SETRANGE("Bin Code",Code);
        if BinContent.FIND('-') then
          repeat
            WMSMgt.CalcCubageAndWeight(
              BinContent."Item No.",BinContent."Unit of Measure Code",
              BinContent."Max. Qty.",Cubage,Weight);
            TotalCubage := TotalCubage + Cubage;
            TotalWeight := TotalWeight + Weight;
          until BinContent.NEXT = 0;

        if (not CheckWeight) and ("Maximum Cubage" > 0) and ("Maximum Cubage" - TotalCubage < 0) then
          if not CONFIRM(Text005,false,
               TotalCubage,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Cubage"),"Maximum Cubage")
          then
            ERROR(Text003);
        if CheckWeight and ("Maximum Weight" > 0) and ("Maximum Weight" - TotalWeight < 0) then
          if not CONFIRM(Text006,false,
               TotalWeight,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Weight"),"Maximum Weight")
          then
            ERROR(Text003);
      end;
    END;

    [External]
    PROCEDURE CheckWhseClass@6(ItemNo@1000 : Code[20];IgnoreError@1001 : Boolean) : Boolean;
    BEGIN
      GetItem(ItemNo);
      if IgnoreError then
        exit("Warehouse Class Code" = Item."Warehouse Class Code");
      TESTFIELD("Warehouse Class Code",Item."Warehouse Class Code");
      exit(true);
    END;

    LOCAL PROCEDURE CheckEmptyBin@9(ErrorText@1003 : Text[250]);
    VAR
      WarehouseEntry@1002 : Record "Warehouse Entry";
      WarehouseJnl@1001 : Record "Warehouse Journal Line";
      WhseActivLine@1000 : Record "Warehouse Activity Line";
      WhseRcptLine@1004 : Record "Warehouse Receipt Line";
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WarehouseEntry.SETRANGE("Bin Code",Code);
      WarehouseEntry.SETRANGE("Location Code","Location Code");
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      if WarehouseEntry."Qty. (Base)" <> 0 then
        ERROR(
          Text000,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),
          "Location Code",FIELDCAPTION(Code),Code);

      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      if not WhseActivLine.ISEMPTY then
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseActivLine.TABLECAPTION);

      WarehouseJnl.SETRANGE("Location Code","Location Code");
      WarehouseJnl.SETRANGE("From Bin Code",Code);
      if not WarehouseJnl.ISEMPTY then
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WarehouseJnl.RESET;
      WarehouseJnl.SETRANGE("To Bin Code",Code);
      WarehouseJnl.SETRANGE("Location Code","Location Code");
      if not WarehouseJnl.ISEMPTY then
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      if not WhseRcptLine.ISEMPTY then
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseRcptLine.TABLECAPTION);

      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      if not WhseShptLine.ISEMPTY then
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseShptLine.TABLECAPTION);
    END;

    [External]
    PROCEDURE CheckIncreaseBin@7(BinCode@1009 : Code[20];ItemNo@1006 : Code[20];Qty@1005 : Decimal;DeductCubage@1013 : Decimal;DeductWeight@1012 : Decimal;PutawayCubage@1008 : Decimal;PutawayWeight@1007 : Decimal;CalledbyPosting@1010 : Boolean;IgnoreError@1000 : Boolean) : Boolean;
    VAR
      WhseActivLine@1001 : Record "Warehouse Activity Line";
      WMSMgt@1002 : Codeunit "WMS Management";
      AvailableWeight@1003 : Decimal;
      AvailableCubage@1004 : Decimal;
    BEGIN
      if "Block Movement" in ["Block Movement"::Inbound,"Block Movement"::All] then
        FIELDERROR("Block Movement");

      GetLocation("Location Code");
      if Code = Location."Adjustment Bin Code" then
        exit;

      if ItemNo <> '' then
        if not CheckWhseClass(ItemNo,IgnoreError) then
          exit(false);

      if (Qty <> 0) and (("Maximum Cubage" <> 0) or ("Maximum Weight" <> 0)) then
        if Location."Bin Capacity Policy" in
           [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
            Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
        then begin
          CalcCubageAndWeight(AvailableCubage,AvailableWeight,CalledbyPosting);
          if not CalledbyPosting then begin
            AvailableCubage := AvailableCubage + DeductCubage;
            AvailableWeight := AvailableWeight + DeductWeight;
          end;

          if ("Maximum Cubage" <> 0) and (PutawayCubage > AvailableCubage) then
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Cubage),TABLECAPTION,PutawayCubage,AvailableCubage,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") and CalledbyPosting);

          if ("Maximum Weight" <> 0) and (PutawayWeight > AvailableWeight) then
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Weight),TABLECAPTION,PutawayWeight,AvailableWeight,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") and CalledbyPosting);
        end;
      exit(true);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        Location.GET(LocationCode);
    END;

    BEGIN
    END.
  }
}

