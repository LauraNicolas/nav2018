OBJECT Codeunit 5616 Depreciation Calculation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "FA Ledger Entry"=r,
                TableData "FA Posting Type Setup"=r,
                TableData "Maintenance Ledger Entry"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="%1 %2 = %3 in %4 %5 = %6"';
      DeprBookCodeErr@1001 : TextConst '@@@="%1=value for code, e.g. COMAPNY";ENU=" in depreciation book code %1"';

    [External]
    PROCEDURE DeprDays@1(StartingDate@1000 : Date;EndingDate@1001 : Date;Year365Days@1008 : Boolean) : Integer;
    VAR
      StartingDay@1002 : Integer;
      EndingDay@1003 : Integer;
      StartingMonth@1004 : Integer;
      EndingMonth@1005 : Integer;
      StartingYear@1006 : Integer;
      EndingYear@1007 : Integer;
    BEGIN
      // Both days are inclusive
      if EndingDate < StartingDate then
        exit(0);
      if (StartingDate = 0D) or (EndingDate = 0D) then
        exit(0);
      if Year365Days then
        exit(DeprDays365(StartingDate,EndingDate));
      StartingDay := DATE2DMY(StartingDate,1);
      EndingDay := DATE2DMY(EndingDate,1);
      StartingMonth := DATE2DMY(StartingDate,2);
      EndingMonth := DATE2DMY(EndingDate,2);
      StartingYear := DATE2DMY(StartingDate,3);
      EndingYear := DATE2DMY(EndingDate,3);
      if DATE2DMY(StartingDate,1) = 31 then
        StartingDay := 30;
      if DATE2DMY(EndingDate + 1,1) = 1 then
        EndingDay := 30;

      exit(1 + EndingDay - StartingDay + 30 * (EndingMonth - StartingMonth) +
        360 * (EndingYear - StartingYear));
    END;

    [External]
    PROCEDURE ToMorrow@3(ThisDate@1000 : Date;Year365Days@1001 : Boolean) : Date;
    BEGIN
      if Year365Days then
        exit(ToMorrow365(ThisDate));
      ThisDate := ThisDate + 1;
      if DATE2DMY(ThisDate,1) = 31 then
        ThisDate := ThisDate + 1;
      exit(ThisDate);
    END;

    [External]
    PROCEDURE Yesterday@4(ThisDate@1000 : Date;Year365Days@1001 : Boolean) : Date;
    BEGIN
      if Year365Days then
        exit(Yesterday365(ThisDate));
      if ThisDate = 0D then
        exit(0D);
      if DATE2DMY(ThisDate,1) = 31 then
        ThisDate := ThisDate - 1;
      ThisDate := ThisDate - 1;
      exit(ThisDate);
    END;

    [External]
    PROCEDURE SetFAFilter@21(VAR FALedgEntry@1000 : Record "FA Ledger Entry";FANo@1001 : Code[20];DeprBookCode@1002 : Code[10];FAPostingTypeOrder@1003 : Boolean);
    BEGIN
      with FALedgEntry do begin
        RESET;
        if FAPostingTypeOrder then begin
          SETCURRENTKEY(
            "FA No.","Depreciation Book Code",
            "FA Posting Category","FA Posting Type","FA Posting Date");
          SETRANGE("FA Posting Category","FA Posting Category"::" ");
        end else
          SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Date");
        SETRANGE("FA No.",FANo);
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE(Reversed,false);
      end;
    END;

    [External]
    PROCEDURE CalcEntryAmounts@18(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];StartingDate@1002 : Date;EndingDate@1003 : Date;VAR EntryAmounts@1004 : ARRAY [4] OF Decimal);
    VAR
      FALedgEntry@1005 : Record "FA Ledger Entry";
      I@1006 : Integer;
    BEGIN
      if EndingDate = 0D then
        EndingDate := DMY2DATE(31,12,9999);
      with FALedgEntry do begin
        SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
        SETRANGE("FA Posting Date",StartingDate,EndingDate);
        SETRANGE("Part of Book Value",true);
        for I := 1 to 4 do begin
          case I of
            1:
              SETRANGE("FA Posting Type","FA Posting Type"::"Write-Down");
            2:
              SETRANGE("FA Posting Type","FA Posting Type"::Appreciation);
            3:
              SETRANGE("FA Posting Type","FA Posting Type"::"Custom 1");
            4:
              SETRANGE("FA Posting Type","FA Posting Type"::"Custom 2");
          end;
          CALCSUMS(Amount);
          EntryAmounts[I] := Amount;
        end;
      end;
    END;

    LOCAL PROCEDURE GetLastEntryDates@20(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];VAR EntryDates@1002 : ARRAY [4] OF Date);
    VAR
      FALedgEntry@1003 : Record "FA Ledger Entry";
      i@1004 : Integer;
    BEGIN
      CLEAR(EntryDates);
      with FALedgEntry do begin
        SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
        for i := 1 to 4 do begin
          case i of
            1:
              SETRANGE("FA Posting Type","FA Posting Type"::"Write-Down");
            2:
              SETRANGE("FA Posting Type","FA Posting Type"::Appreciation);
            3:
              SETRANGE("FA Posting Type","FA Posting Type"::"Custom 1");
            4:
              SETRANGE("FA Posting Type","FA Posting Type"::"Custom 2");
          end;
          if GetPartOfCalculation(0,i - 1,DeprBookCode) then begin
            if FIND('-') then
              repeat
                if "Part of Book Value" or "Part of Depreciable Basis" then
                  if "FA Posting Date" > EntryDates[i] then
                    EntryDates[i] := CheckEntryDate(FALedgEntry,i - 1);
              until NEXT = 0;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE UseDeprStartingDate@6(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10]) : Boolean;
    VAR
      FALedgEntry@1002 : Record "FA Ledger Entry";
      EntryDates@1003 : ARRAY [4] OF Date;
      i@1004 : Integer;
    BEGIN
      SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::Depreciation);
      if FALedgEntry.FIND('-') then
        exit(false);

      GetLastEntryDates(FANo,DeprBookCode,EntryDates);
      for i := 1 to 4 do
        if EntryDates[i] > 0D then
          exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE GetFirstDeprDate@5(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];Year365Days@1006 : Boolean) : Date;
    VAR
      FALedgEntry@1002 : Record "FA Ledger Entry";
      EntryDates@1003 : ARRAY [4] OF Date;
      LocalDate@1004 : Date;
      i@1005 : Integer;
    BEGIN
      with FALedgEntry do begin
        SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
        SETRANGE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
        if FINDLAST then
          if "FA Posting Date" > LocalDate then
            LocalDate := "FA Posting Date";
        SETRANGE("FA Posting Type","FA Posting Type"::"Salvage Value");
        if FINDLAST then
          if "FA Posting Date" > LocalDate then
            LocalDate := "FA Posting Date";
        SETRANGE("FA Posting Type","FA Posting Type"::Depreciation);
        if FINDLAST then
          if ToMorrow("FA Posting Date",Year365Days) > LocalDate then
            LocalDate := ToMorrow("FA Posting Date",Year365Days);
        GetLastEntryDates(FANo,DeprBookCode,EntryDates);
        for i := 1 to 4 do
          if EntryDates[i] > LocalDate then
            LocalDate := EntryDates[i];
      end;
      exit(LocalDate);
    END;

    [External]
    PROCEDURE GetMinusBookValue@17(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];StartingDate@1002 : Date;EndingDate@1003 : Date) : Decimal;
    VAR
      EntryAmounts@1004 : ARRAY [4] OF Decimal;
      Amount@1005 : Decimal;
      i@1006 : Integer;
    BEGIN
      CalcEntryAmounts(FANo,DeprBookCode,StartingDate,EndingDate,EntryAmounts);
      for i := 1 to 4 do
        if not GetPartOfCalculation(0,i - 1,DeprBookCode) then
          Amount := Amount + EntryAmounts[i];
      exit(Amount);
    END;

    LOCAL PROCEDURE CalcMaxDepr@16(BookValue@1001 : Decimal;SalvageValue@1002 : Decimal;EndingBookValue@1003 : Decimal) : Decimal;
    VAR
      MaxDepr@1005 : Decimal;
    BEGIN
      if SalvageValue <> 0 then
        EndingBookValue := 0;
      MaxDepr := -(BookValue + SalvageValue - EndingBookValue);
      if MaxDepr > 0 then
        MaxDepr := 0;
      exit(MaxDepr);
    END;

    [External]
    PROCEDURE AdjustDepr@11(DeprBookCode@1000 : Code[10];VAR Depreciation@1001 : Decimal;BookValue@1002 : Decimal;SalvageValue@1003 : Decimal;EndingBookValue@1004 : Decimal;FinalRoundingAmount@1005 : Decimal);
    VAR
      DeprBook@1006 : Record "Depreciation Book";
      MaxDepr@1007 : Decimal;
    BEGIN
      if FinalRoundingAmount = 0 then begin
        DeprBook.GET(DeprBookCode);
        FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
      end;
      Depreciation := CalcRounding(DeprBookCode,Depreciation);
      if Depreciation >= 0 then
        Depreciation := 0
      else begin
        if SalvageValue <> 0 then
          EndingBookValue := 0;
        MaxDepr := BookValue + SalvageValue - EndingBookValue;
        if MaxDepr + Depreciation < FinalRoundingAmount then
          Depreciation := -MaxDepr;
        if Depreciation > 0 then
          Depreciation := 0;
      end;
    END;

    [External]
    PROCEDURE AdjustCustom1@19(DeprBookCode@1000 : Code[10];VAR DeprAmount@1001 : Decimal;VAR Custom1Amount@1002 : Decimal;BookValue@1003 : Decimal;SalvageValue@1004 : Decimal;EndingBookValue@1005 : Decimal;FinalRoundingAmount@1006 : Decimal);
    VAR
      DeprBook@1007 : Record "Depreciation Book";
      MaxDepr@1008 : Decimal;
    BEGIN
      if DeprAmount > 0 then
        DeprAmount := 0;
      if Custom1Amount > 0 then
        Custom1Amount := 0;

      DeprAmount := CalcRounding(DeprBookCode,DeprAmount);
      Custom1Amount := CalcRounding(DeprBookCode,Custom1Amount);

      if FinalRoundingAmount = 0 then begin
        DeprBook.GET(DeprBookCode);
        FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
      end;

      if Custom1Amount < 0 then begin
        MaxDepr := CalcMaxDepr(BookValue,SalvageValue,EndingBookValue);
        if Custom1Amount <= MaxDepr then begin
          Custom1Amount := MaxDepr;
          DeprAmount := 0;
        end;
        if DeprAmount >= 0 then
          AdjustDepr(
            DeprBookCode,Custom1Amount,BookValue,SalvageValue,EndingBookValue,FinalRoundingAmount);
        BookValue := BookValue + Custom1Amount;
      end;
      if DeprAmount < 0 then begin
        MaxDepr := CalcMaxDepr(BookValue,SalvageValue,EndingBookValue);
        if DeprAmount <= MaxDepr then
          DeprAmount := MaxDepr;
        if DeprAmount < 0 then
          AdjustDepr(
            DeprBookCode,DeprAmount,BookValue,SalvageValue,EndingBookValue,FinalRoundingAmount);
      end;

      if DeprAmount > 0 then
        DeprAmount := 0;
      if Custom1Amount > 0 then
        Custom1Amount := 0;
    END;

    [External]
    PROCEDURE GetSign@9(BookValue@1000 : Decimal;DeprBasis@1001 : Decimal;SalvageValue@1002 : Decimal;MinusBookValue@1003 : Decimal) : Integer;
    BEGIN
      if (SalvageValue <= 0) and (DeprBasis >= 0) and
         (BookValue >= 0) and (MinusBookValue <= 0)
      then
        exit(1);
      if (SalvageValue >= 0) and (DeprBasis <= 0) and
         (BookValue <= 0) and (MinusBookValue >= 0)
      then
        exit(-1);
      exit(0);
    END;

    [External]
    PROCEDURE GetCustom1Sign@8(BookValue@1000 : Decimal;AcquisitionCost@1001 : Decimal;Custom1@1002 : Decimal;SalvageValue@1003 : Decimal;MinusBookValue@1004 : Decimal) : Integer;
    BEGIN
      if (SalvageValue <= 0) and (AcquisitionCost >= 0) and
         (BookValue >= 0) and (Custom1 <= 0) and (MinusBookValue <= 0)
      then
        exit(1);
      if (SalvageValue >= 0) and (AcquisitionCost <= 0) and
         (BookValue <= 0) and (Custom1 >= 0) and (MinusBookValue >= 0)
      then
        exit(-1);
      exit(0);
    END;

    [External]
    PROCEDURE GetNewSigns@14(VAR BookValue@1000 : Decimal;VAR DeprBasis@1001 : Decimal;VAR SalvageValue@1002 : Decimal;VAR MinusBookValue@1003 : Decimal);
    BEGIN
      BookValue := -BookValue;
      DeprBasis := -DeprBasis;
      SalvageValue := -SalvageValue;
      MinusBookValue := -MinusBookValue;
    END;

    [External]
    PROCEDURE GetNewCustom1Signs@15(VAR BookValue@1000 : Decimal;VAR AcquisitionCost@1001 : Decimal;VAR Custom1@1002 : Decimal;VAR SalvageValue@1003 : Decimal;VAR MinusBookValue@1004 : Decimal);
    BEGIN
      BookValue := -BookValue;
      AcquisitionCost := -AcquisitionCost;
      Custom1 := -Custom1;
      SalvageValue := -SalvageValue;
      MinusBookValue := -MinusBookValue;
    END;

    [External]
    PROCEDURE CalcRounding@10(DeprBookCode@1000 : Code[10];DeprAmount@1001 : Decimal) : Decimal;
    VAR
      DeprBook@1002 : Record "Depreciation Book";
    BEGIN
      with DeprBook do begin
        GET(DeprBookCode);
        if "Use Rounding in Periodic Depr." then
          exit(ROUND(DeprAmount,1));

        exit(ROUND(DeprAmount));
      end;
    END;

    [External]
    PROCEDURE CalculateDeprInPeriod@12(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];EndingDate@1002 : Date;CalculatedDepr@1003 : Decimal;Sign@1004 : Integer;VAR NewBookValue@1005 : Decimal;VAR DeprBasis@1006 : Decimal;VAR SalvageValue@1007 : Decimal;VAR MinusBookValue@1008 : Decimal);
    VAR
      FALedgEntry@1009 : Record "FA Ledger Entry";
    BEGIN
      with FALedgEntry do begin
        SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","FA Posting Date");
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE("FA No.",FANo);
        SETRANGE("FA Posting Date",0D,EndingDate);
        SETRANGE("Part of Book Value",true);
        CALCSUMS(Amount);
        NewBookValue := Sign * Amount + CalculatedDepr;
        SETRANGE("Part of Book Value");
        SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Depreciable Basis","FA Posting Date");
        SETRANGE("Part of Depreciable Basis",true);
        CALCSUMS(Amount);
        DeprBasis := Sign * Amount;
        SETRANGE("Part of Depreciable Basis");
        SETCURRENTKEY(
          "FA No.","Depreciation Book Code",
          "FA Posting Category","FA Posting Type","FA Posting Date");
        SETRANGE("FA Posting Category","FA Posting Category"::" ");
        SETRANGE("FA Posting Type","FA Posting Type"::"Salvage Value");
        CALCSUMS(Amount);
        SalvageValue := Sign * Amount;
        MinusBookValue := Sign * GetMinusBookValue(FANo,DeprBookCode,0D,EndingDate);
      end;
    END;

    [External]
    PROCEDURE GetDeprPeriod@13(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];UntilDate@1002 : Date;VAR StartingDate@1003 : Date;VAR EndingDate@1004 : Date;VAR NumberOfDays@1005 : Integer;Year365Days@1009 : Boolean);
    VAR
      FALedgEntry@1006 : Record "FA Ledger Entry";
      FADeprBook@1007 : Record "FA Depreciation Book";
      UsedDeprStartingDate@1008 : Boolean;
    BEGIN
      FADeprBook.GET(FANo,DeprBookCode);
      with FALedgEntry do begin
        // Calculate Starting Date
        if StartingDate = 0D then begin
          SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
          SETRANGE("FA Posting Type","FA Posting Type"::Depreciation);
          if FIND('+') then
            StartingDate := ToMorrow("FA Posting Date",Year365Days)
          else begin
            StartingDate := FADeprBook."Depreciation Starting Date";
            UsedDeprStartingDate := true;
          end;
        end else
          StartingDate := ToMorrow(EndingDate,Year365Days);

        // Calculate Ending Date
        EndingDate := 0D;
        SetFAFilter(FALedgEntry,FANo,DeprBookCode,false);
        if not UsedDeprStartingDate then
          SETFILTER("FA Posting Date",'%1..',StartingDate + 1);
        if FIND('-') then
          repeat
            if "Part of Book Value" or "Part of Depreciable Basis" then begin
              if ("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") or
                 ("FA Posting Type" = "FA Posting Type"::"Salvage Value")
              then begin
                if not UsedDeprStartingDate then
                  EndingDate := "FA Posting Date";
              end else
                if GetPartOfDeprCalculation(FALedgEntry) then
                  EndingDate := "FA Posting Date";
              EndingDate := Yesterday(EndingDate,Year365Days);
              if EndingDate < StartingDate then
                EndingDate := 0D;
            end;
          until (NEXT = 0) or (EndingDate > 0D);
      end;
      if EndingDate = 0D then
        EndingDate := UntilDate;
      NumberOfDays := DeprDays(StartingDate,EndingDate,Year365Days);
    END;

    [External]
    PROCEDURE DeprInFiscalYear@7(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10];StartingDate@1002 : Date) : Decimal;
    VAR
      FALedgEntry@1003 : Record "FA Ledger Entry";
      FADateCalc@1004 : Codeunit "FA Date Calculation";
      LocalAmount@1005 : Decimal;
      EntryAmounts@1006 : ARRAY [4] OF Decimal;
      FiscalYearBegin@1007 : Date;
      i@1008 : Integer;
    BEGIN
      FiscalYearBegin := FADateCalc.GetFiscalYear(DeprBookCode,StartingDate);
      with FALedgEntry do begin
        SetFAFilter(FALedgEntry,FANo,DeprBookCode,true);
        SETFILTER("FA Posting Date",'%1..',FiscalYearBegin);
        SETRANGE("FA Posting Type","FA Posting Type"::Depreciation);
        SETRANGE("Part of Book Value",true);
        SETRANGE("Reclassification Entry",false);
        CALCSUMS(Amount);
        LocalAmount := Amount;
        CalcEntryAmounts(FANo,DeprBookCode,FiscalYearBegin,0D,EntryAmounts);
        for i := 1 to 4 do
          if GetPartOfCalculation(2,i - 1,DeprBookCode) then
            LocalAmount := LocalAmount + EntryAmounts[i];
      end;
      exit(LocalAmount);
    END;

    [External]
    PROCEDURE GetPartOfCalculation@2(Type@1000 : 'IncludeInDeprCalc,IncludeInGainLoss,DepreciationType,ReverseType';PostingType@1001 : '"Write-Down",Appreciation,"Custom 1","Custom 2"';DeprBookCode@1002 : Code[10]) : Boolean;
    VAR
      FAPostingTypeSetup@1003 : Record "FA Posting Type Setup";
    BEGIN
      with FAPostingTypeSetup do begin
        case PostingType of
          PostingType::"Write-Down":
            GET(DeprBookCode,"FA Posting Type"::"Write-Down");
          PostingType::Appreciation:
            GET(DeprBookCode,"FA Posting Type"::Appreciation);
          PostingType::"Custom 1":
            GET(DeprBookCode,"FA Posting Type"::"Custom 1");
          PostingType::"Custom 2":
            GET(DeprBookCode,"FA Posting Type"::"Custom 2");
        end;

        if Type = Type::IncludeInDeprCalc then
          exit("Include in Depr. Calculation");
        if Type = Type::IncludeInGainLoss then
          exit("Include in Gain/Loss Calc.");
        if Type = Type::DepreciationType then
          exit("Depreciation Type");
        if Type = Type::ReverseType then
          exit("Reverse before Disposal");
      end;
    END;

    LOCAL PROCEDURE GetPartOfDeprCalculation@26(VAR FALedgEntry@1000 : Record "FA Ledger Entry") : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      with FALedgEntry do begin
        case "FA Posting Type" of
          "FA Posting Type"::"Write-Down":
            i := 1;
          "FA Posting Type"::Appreciation:
            i := 2;
          "FA Posting Type"::"Custom 1":
            i := 3;
          "FA Posting Type"::"Custom 2":
            i := 4;
        end;
        if i = 0 then
          exit(false);

        exit(GetPartOfCalculation(0,i - 1,"Depreciation Book Code"));
      end;
    END;

    [External]
    PROCEDURE FAName@22(VAR FA@1000 : Record "Fixed Asset";DeprBookCode@1001 : Code[10]) : Text[200];
    VAR
      DeprBook@1002 : Record "Depreciation Book";
    BEGIN
      if DeprBookCode = '' then
        exit(STRSUBSTNO('%1 %2 = %3',FA.TABLECAPTION,FA.FIELDCAPTION("No."),FA."No."));

      exit(
        STRSUBSTNO(
          Text000,
          FA.TABLECAPTION,FA.FIELDCAPTION("No."),FA."No.",
          DeprBook.TABLECAPTION,DeprBook.FIELDCAPTION(Code),DeprBookCode));
    END;

    [External]
    PROCEDURE FADeprBookName@30(DeprBookCode@1000 : Code[10]) : Text[200];
    BEGIN
      if DeprBookCode = '' then
        exit('');

      exit(STRSUBSTNO(DeprBookCodeErr,DeprBookCode));
    END;

    LOCAL PROCEDURE DeprDays365@27(StartingDate@1000 : Date;EndingDate@1001 : Date) : Integer;
    VAR
      StartingYear@1002 : Integer;
      EndingYear@1003 : Integer;
      ActualYear@1004 : Integer;
      LeapDate@1005 : Date;
      LeapDays@1006 : Integer;
    BEGIN
      StartingYear := DATE2DMY(StartingDate,3);
      EndingYear := DATE2DMY(EndingDate,3);
      LeapDays := 0;
      if (DATE2DMY(StartingDate,1) = 29) and (DATE2DMY(StartingDate,2) = 2) and
         (DATE2DMY(EndingDate,1) = 29) and (DATE2DMY(EndingDate,2) = 2)
      then
        LeapDays := -1;

      ActualYear := StartingYear;
      while ActualYear <= EndingYear do begin
        LeapDate := (DMY2DATE(28,2,ActualYear) + 1);
        if DATE2DMY(LeapDate,1) = 29 then begin
          if (LeapDate >= StartingDate) and (LeapDate <= EndingDate) then
            LeapDays := LeapDays + 1;
        end;
        ActualYear := ActualYear + 1;
      end;
      exit((EndingDate - StartingDate) + 1 - LeapDays);
    END;

    LOCAL PROCEDURE ToMorrow365@25(ThisDate@1000 : Date) : Date;
    BEGIN
      ThisDate := ThisDate + 1;
      if (DATE2DMY(ThisDate,1) = 29) and (DATE2DMY(ThisDate,2) = 2) then
        ThisDate := ThisDate + 1;
      exit(ThisDate);
    END;

    LOCAL PROCEDURE Yesterday365@24(ThisDate@1000 : Date) : Date;
    BEGIN
      if ThisDate = 0D then
        exit(0D);
      if (DATE2DMY(ThisDate,1) = 29) and (DATE2DMY(ThisDate,2) = 2) then
        ThisDate := ThisDate - 1;
      ThisDate := ThisDate - 1;
      exit(ThisDate);
    END;

    LOCAL PROCEDURE CheckEntryDate@23(FALedgerEntry@1000 : Record "FA Ledger Entry";FAPostingType@1001 : Option) : Date;
    BEGIN
      with FALedgerEntry do begin
        if IsDepreciationTypeEntry("Depreciation Book Code",FAPostingType) then
          exit("FA Posting Date" + 1);
        exit("FA Posting Date");
      end;
    END;

    LOCAL PROCEDURE IsDepreciationTypeEntry@28(DeprBookCode@1000 : Code[10];FAPostingType@1002 : Option) : Boolean;
    VAR
      FAPostingTypeSetup@1001 : Record "FA Posting Type Setup";
    BEGIN
      FAPostingTypeSetup.GET(DeprBookCode,FAPostingType);
      exit(FAPostingTypeSetup."Depreciation Type");
    END;

    BEGIN
    END.
  }
}

