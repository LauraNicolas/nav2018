OBJECT Page 1526 Workflow Event Conditions
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Event Conditions;
    SourceTable="Workflow Rule";
    DataCaptionExpr=EventDescription;
    PageType=StandardDialog;
    SourceTableTemporary=true;
    OnInit=BEGIN
             CurrPage.LOOKUPMODE := true;
           END;

    OnOpenPage=VAR
                 WorkflowStep@1000 : Record "Workflow Step";
                 WorkflowEvent@1001 : Record "Workflow Event";
               BEGIN
                 WorkflowStep.GET("Workflow Code","Workflow Step ID");
                 WorkflowEvent.GET(WorkflowStep."Function Name");
                 EventDescription := WorkflowEvent.Description;
                 FilterConditionText := WorkflowStep.GetConditionAsDisplayText;
               END;

    OnAfterGetRecord=BEGIN
                       SetField("Field No.");

                       ShowFilter := true;

                       ShowAdvancedCondition := "Field No." <> 0;
                       UpdateLabels;
                     END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 13  ;1   ;Group     ;
                Name=Group13;
                GroupType=Group }

    { 12  ;2   ;Group     ;
                Name=Group12;
                Visible=ShowFilter;
                GroupType=Group;
                InstructionalTextML=ENU=Set conditions for the event: }

    { 15  ;3   ;Group     ;
                Name=Group15;
                GroupType=GridLayout;
                Layout=Rows }

    { 14  ;4   ;Group     ;
                Name=Group14;
                GroupType=Group }

    { 16  ;5   ;Field     ;
                Name=Condition;
                CaptionML=ENU=Condition;
                ToolTipML=ENU=Specifies the workflow event condition.;
                ApplicationArea=#Suite;
                ShowCaption=false }

    { 2   ;5   ;Field     ;
                Name=FilterConditionText;
                ApplicationArea=#Suite;
                SourceExpr=FilterConditionText;
                Editable=FALSE;
                OnAssistEdit=VAR
                               WorkflowStep@1000 : Record "Workflow Step";
                             BEGIN
                               WorkflowStep.GET("Workflow Code","Workflow Step ID");

                               WorkflowStep.OpenEventConditions;

                               FilterConditionText := WorkflowStep.GetConditionAsDisplayText;
                             END;

                ImplicitType=Text;
                ShowCaption=false }

    { 11  ;2   ;Group     ;
                Name=Group11;
                GroupType=Group;
                InstructionalTextML=ENU="" }

    { 10  ;3   ;Group     ;
                Name=Group10;
                Visible=ShowAdvancedCondition;
                GroupType=Group;
                InstructionalTextML=ENU=Set a condition for when a field value changes: }

    { 9   ;4   ;Group     ;
                Name=Group9;
                GroupType=GridLayout;
                Layout=Rows }

    { 7   ;5   ;Group     ;
                Name=Group7;
                GroupType=Group }

    { 8   ;6   ;Field     ;
                Name=Field;
                CaptionML=ENU=Field;
                ToolTipML=ENU=Specifies the field in which a change can occur that the workflow monitors.;
                ApplicationArea=#Suite;
                ShowCaption=false }

    { 6   ;6   ;Field     ;
                Name=FieldCaption2;
                DrillDown=false;
                ApplicationArea=#Suite;
                SourceExpr=FieldCaption2;
                OnValidate=VAR
                             Field@1000 : Record Field;
                           BEGIN
                             if FieldCaption2 = '' then begin
                               SetField(0);
                               exit;
                             end;

                             if not FindAndFilterToField(Field,FieldCaption2) then
                               ERROR(FeildNotExistErr,FieldCaption2);

                             if Field.COUNT = 1 then begin
                               SetField(Field."No.");
                               exit;
                             end;

                             if PAGE.RUNMODAL(PAGE::"Field List",Field) = ACTION::LookupOK then
                               SetField(Field."No.")
                             else
                               ERROR(FeildNotExistErr,FieldCaption2);
                           END;

                OnLookup=VAR
                           Field@1002 : Record Field;
                         BEGIN
                           FindAndFilterToField(Field,Text);
                           Field.SETRANGE("Field Caption");
                           Field.SETRANGE("No.");

                           if PAGE.RUNMODAL(PAGE::"Field List",Field) = ACTION::LookupOK then
                             SetField(Field."No.");
                         END;

                ImplicitType=Text250;
                ShowCaption=false }

    { 5   ;6   ;Field     ;
                Name=is;
                CaptionML=ENU=is;
                ApplicationArea=#Suite;
                ShowCaption=false }

    { 4   ;6   ;Field     ;
                Name=Operator;
                ToolTipML=ENU=Specifies the type of change that can occur to the field on the record. In the Change Customer Credit Limit Approval Workflow workflow template, the event condition operators are Increased, Decreased, Changed.;
                ApplicationArea=#Suite;
                SourceExpr=Operator;
                ImplicitType=Option;
                ShowCaption=false }

    { 3   ;3   ;Field     ;
                Name=AddChangeValueConditionLbl;
                ApplicationArea=#Suite;
                SourceExpr=AddChangeValueConditionLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowAdvancedCondition := not ShowAdvancedCondition;

                              if not ShowAdvancedCondition then
                                ClearRule;

                              UpdateLabels;
                            END;

                ImplicitType=Text;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      FilterConditionText@1000 : Text;
      AddChangeValueConditionLabelTxt@1001 : TextConst 'ENU=Add a condition for when a field value changes.';
      ShowAdvancedCondition@1002 : Boolean;
      AddChangeValueConditionLbl@1003 : Text;
      FieldCaption2@1004 : Text[250];
      RemoveChangeValueConditionLabelTxt@1005 : TextConst 'ENU=Remove the condition.';
      FeildNotExistErr@1007 : TextConst '@@@="%1 = Field Caption";ENU=Field %1 does not exist.';
      EventDescription@1008 : Text;
      ShowFilter@1009 : Boolean;

    [External]
    PROCEDURE SetRule@10(TempWorkflowRule@1000 : TEMPORARY Record "Workflow Rule");
    BEGIN
      Rec := TempWorkflowRule;
      INSERT(true);
    END;

    LOCAL PROCEDURE ClearRule@5();
    BEGIN
      SetField(0);
      Operator := Operator::Changed;
    END;

    LOCAL PROCEDURE SetField@54(FieldNo@1000 : Integer);
    BEGIN
      "Field No." := FieldNo;
      CALCFIELDS("Field Caption");
      FieldCaption2 := "Field Caption";
    END;

    LOCAL PROCEDURE FindAndFilterToField@57(VAR Field@1000 : Record Field;CaptionToFind@1001 : Text) : Boolean;
    BEGIN
      Field.FILTERGROUP(2);
      Field.SETRANGE(TableNo,"Table ID");
      Field.SETFILTER(Type,STRSUBSTNO('%1|%2|%3|%4|%5|%6|%7|%8|%9|%10|%11|%12|%13',
          Field.Type::Boolean,
          Field.Type::Text,
          Field.Type::Code,
          Field.Type::Decimal,
          Field.Type::Integer,
          Field.Type::BigInteger,
          Field.Type::Date,
          Field.Type::Time,
          Field.Type::DateTime,
          Field.Type::DateFormula,
          Field.Type::Option,
          Field.Type::Duration,
          Field.Type::RecordID));
      Field.SETRANGE(Class,Field.Class::Normal);

      if CaptionToFind = "Field Caption" then
        Field.SETRANGE("No.","Field No.")
      else
        Field.SETFILTER("Field Caption",'%1','@' + CaptionToFind + '*');

      exit(Field.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateLabels@6();
    BEGIN
      if ShowAdvancedCondition then
        AddChangeValueConditionLbl := RemoveChangeValueConditionLabelTxt
      else
        AddChangeValueConditionLbl := AddChangeValueConditionLabelTxt;
    END;

    BEGIN
    END.
  }
}

