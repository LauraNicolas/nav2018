OBJECT Codeunit 132 Release Incoming Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Incoming Document";
    OnRun=BEGIN
            if Status = Status::Released then
              exit;
            if Status in [Status::Created,Status::Posted] then
              ERROR(STRSUBSTNO(CanReleasedIfStatusErr,Status::"Pending Approval",Status::New,Status::Failed));

            OnCheckIncomingDocReleaseRestrictions;

            TESTFIELD(Posted,false);

            if not IsADocumentAttached then
              ERROR(NothingToReleaseErr,"Entry No.");

            Status := Status::Released;
            Released := true;
            "Released Date-Time" := CURRENTDATETIME;
            "Released By User ID" := USERSECURITYID;

            MODIFY(true);

            OnAfterReleaseIncomingDoc(Rec);
          END;

  }
  CODE
  {
    VAR
      NothingToReleaseErr@1001 : TextConst '@@@="%1 = Incoming Document Entry No";ENU=There is nothing to release for the incoming document number %1.';
      DocReleasedWhenApprovedErr@1005 : TextConst 'ENU=This document can only be released when the approval process is complete.';
      CancelOrCompleteToReopenDocErr@1003 : TextConst 'ENU=The approval process must be cancelled or completed to reopen this document.';
      CanReleasedIfStatusErr@1000 : TextConst '@@@="%1 = status released, %2 = status pending approval";ENU=It is only possible to release the document when the status is %1, %2 or %3.';

    [External]
    PROCEDURE Reopen@1(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      with IncomingDocument do begin
        if Status = Status::New then
          exit;
        ClearReleaseFields(IncomingDocument);
        Status := Status::New;

        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE Reject@8(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      with IncomingDocument do begin
        TESTFIELD(Posted,false);

        ClearReleaseFields(IncomingDocument);
        Status := Status::Rejected;

        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE Fail@6(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      with IncomingDocument do begin
        if Status = Status::Failed then
          exit;

        Status := Status::Failed;

        MODIFY(true);
        COMMIT;

        OnAfterCreateDocFromIncomingDocFail(IncomingDocument);
      end;
    END;

    [External]
    PROCEDURE Create@7(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      with IncomingDocument do begin
        if Status = Status::Created then
          exit;

        Status := Status::Created;

        MODIFY(true);
        COMMIT;
        OnAfterCreateDocFromIncomingDocSuccess(IncomingDocument);
      end;
    END;

    [Internal]
    PROCEDURE PerformManualRelease@2(VAR IncomingDocument@1002 : Record "Incoming Document");
    VAR
      ApprovalsMgmt@1000 : Codeunit "Approvals Mgmt.";
    BEGIN
      if ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) and
         (IncomingDocument.Status = IncomingDocument.Status::New)
      then
        ERROR(DocReleasedWhenApprovedErr);

      CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",IncomingDocument);
    END;

    [External]
    PROCEDURE PerformManualReopen@3(VAR IncomingDocument@1002 : Record "Incoming Document");
    BEGIN
      if IncomingDocument.Status = IncomingDocument.Status::"Pending Approval" then
        ERROR(CancelOrCompleteToReopenDocErr);

      Reopen(IncomingDocument);
    END;

    [External]
    PROCEDURE PerformManualReject@5(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      if IncomingDocument.Status = IncomingDocument.Status::"Pending Approval" then
        ERROR(CancelOrCompleteToReopenDocErr);

      Reject(IncomingDocument);
    END;

    LOCAL PROCEDURE ClearReleaseFields@22(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      IncomingDocument.Released := false;
      IncomingDocument."Released Date-Time" := 0DT;
      CLEAR(IncomingDocument."Released By User ID");
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterReleaseIncomingDoc@4(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateDocFromIncomingDocSuccess@9(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateDocFromIncomingDocFail@10(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    BEGIN
    END.
  }
}

