OBJECT Table 85 Acc. Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if xRec."Line No." = 0 then
                 if not AccSchedName.GET("Schedule Name") then begin
                   AccSchedName.INIT;
                   AccSchedName.Name := "Schedule Name";
                   if AccSchedName.Name = '' then
                     AccSchedName.Description := Text000;
                   AccSchedName.INSERT;
                 end;
             END;

    CaptionML=ENU=Acc. Schedule Line;
  }
  FIELDS
  {
    { 1   ;   ;Schedule Name       ;Code10        ;TableRelation="Acc. Schedule Name";
                                                   CaptionML=ENU=Schedule Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Row No.             ;Code10        ;CaptionML=ENU=Row No. }
    { 4   ;   ;Description         ;Text80        ;CaptionML=ENU=Description }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF ("Totaling Type"=CONST("Posting Accounts")) "G/L Account"
                                                                 ELSE IF ("Totaling Type"=CONST("Total Accounts")) "G/L Account"
                                                                 ELSE IF ("Totaling Type"=CONST("Cash Flow Entry Accounts")) "Cash Flow Account"
                                                                 ELSE IF ("Totaling Type"=CONST("Cash Flow Total Accounts")) "Cash Flow Account"
                                                                 ELSE IF ("Totaling Type"=CONST("Cost Type")) "Cost Type"
                                                                 ELSE IF ("Totaling Type"=CONST("Cost Type Total")) "Cost Type";
                                                   OnValidate=BEGIN
                                                                case "Totaling Type" of
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    begin
                                                                      GLAcc.SETFILTER("No.",Totaling);
                                                                      GLAcc.CALCFIELDS(Balance);
                                                                    end;
                                                                  "Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent":
                                                                    begin
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    end;
                                                                  "Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total":
                                                                    begin
                                                                      CostType.SETFILTER("No.",Totaling);
                                                                      CostType.CALCFIELDS(Balance);
                                                                    end;
                                                                  "Totaling Type"::"Cash Flow Entry Accounts","Totaling Type"::"Cash Flow Total Accounts":
                                                                    begin
                                                                      CFAccount.SETFILTER("No.",Totaling);
                                                                      CFAccount.CALCFIELDS(Amount);
                                                                    end;
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupTotaling;
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Totaling }
    { 6   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Totaling);
                                                              END;

                                                   CaptionML=ENU=Totaling Type;
                                                   OptionCaptionML=ENU=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,Cost Type,Cost Type Total,Cash Flow Entry Accounts,Cash Flow Total Accounts;
                                                   OptionString="Posting Accounts","Total Accounts",Formula,,,"Set Base For Percent","Cost Type","Cost Type Total","Cash Flow Entry Accounts","Cash Flow Total Accounts" }
    { 7   ;   ;New Page            ;Boolean       ;CaptionML=ENU=New Page }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 12  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 1 Filter;
                                                   CaptionClass=GetCaptionClass(1) }
    { 13  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 2 Filter;
                                                   CaptionClass=GetCaptionClass(2) }
    { 14  ;   ;G/L Budget Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=ENU=G/L Budget Filter }
    { 15  ;   ;Business Unit Filter;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Filter }
    { 16  ;   ;Show                ;Option        ;CaptionML=ENU=Show;
                                                   OptionCaptionML=ENU=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance;
                                                   OptionString=Yes,No,"If Any Column Not Zero","When Positive Balance","When Negative Balance" }
    { 17  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 3 Filter;
                                                   CaptionClass=GetCaptionClass(3) }
    { 18  ;   ;Dimension 4 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Dimension 4 Filter;
                                                   CaptionClass=GetCaptionClass(4) }
    { 19  ;   ;Dimension 1 Totaling;Text250       ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 1 Totaling;
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text250       ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 2 Totaling;
                                                   CaptionClass=GetCaptionClass(6) }
    { 21  ;   ;Dimension 3 Totaling;Text250       ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Dimension Combination"=R;
                                                   CaptionML=ENU=Dimension 3 Totaling;
                                                   CaptionClass=GetCaptionClass(7) }
    { 22  ;   ;Dimension 4 Totaling;Text250       ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Dimension Combination"=R;
                                                   CaptionML=ENU=Dimension 4 Totaling;
                                                   CaptionClass=GetCaptionClass(8) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=ENU=Bold }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=ENU=Italic }
    { 25  ;   ;Underline           ;Boolean       ;OnValidate=BEGIN
                                                                if "Double Underline" and Underline then begin
                                                                  "Double Underline" := false;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION("Double Underline"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Underline }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=ENU=Show Opposite Sign }
    { 27  ;   ;Row Type            ;Option        ;CaptionML=ENU=Row Type;
                                                   OptionCaptionML=ENU=Net Change,Balance at Date,Beginning Balance;
                                                   OptionString="Net Change","Balance at Date","Beginning Balance" }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=ENU=Amount Type;
                                                   OptionCaptionML=ENU=Net Amount,Debit Amount,Credit Amount;
                                                   OptionString="Net Amount","Debit Amount","Credit Amount" }
    { 30  ;   ;Double Underline    ;Boolean       ;OnValidate=BEGIN
                                                                if "Double Underline" and Underline then begin
                                                                  Underline := false;
                                                                  MESSAGE(ForceUnderLineMsg,FIELDCAPTION(Underline));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Double Underline }
    { 840 ;   ;Cash Flow Forecast Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Cash Flow Forecast";
                                                   CaptionML=ENU=Cash Flow Forecast Filter }
    { 1100;   ;Cost Center Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Center";
                                                   CaptionML=ENU=Cost Center Filter }
    { 1101;   ;Cost Object Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Object";
                                                   CaptionML=ENU=Cost Object Filter }
    { 1102;   ;Cost Center Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Cost Center Totaling }
    { 1103;   ;Cost Object Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Cost Object Totaling }
    { 1104;   ;Cost Budget Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Budget Name";
                                                   CaptionML=ENU=Cost Budget Filter }
  }
  KEYS
  {
    {    ;"Schedule Name","Line No."              ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ForceUnderLineMsg@1022 : TextConst '@@@="%1= Field underline ";ENU=%1 will be set to false.';
      Text000@1000 : TextConst 'ENU=Default Schedule';
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension 4 Filter';
      Text010@1010 : TextConst 'ENU=,, Totaling';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension 1 Totaling';
      Text012@1012 : TextConst 'ENU=1,5,,Dimension 2 Totaling';
      Text013@1013 : TextConst 'ENU=1,5,,Dimension 3 Totaling';
      Text014@1014 : TextConst 'ENU=1,5,,Dimension 4 Totaling';
      AccSchedName@1015 : Record "Acc. Schedule Name";
      GLAcc@1016 : Record "G/L Account";
      CFAccount@1841 : Record "Cash Flow Account";
      AnalysisView@1017 : Record "Analysis View";
      GLSetup@1018 : Record "General Ledger Setup";
      CostType@1021 : Record "Cost Type";
      HasGLSetup@1019 : Boolean;
      Text015@1020 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.';

    [External]
    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      GetAccSchedSetup;
      case DimNo of
        1:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
      end;

      DimValList.LOOKUPMODE(true);
      DimValList.SETTABLEVIEW(DimVal);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    [External]
    PROCEDURE CheckFormula@1(Formula@1000 : Code[250]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      for i := 1 to STRLEN(Formula) do begin
        if Formula[i] = '(' then
          ParenthesesLevel := ParenthesesLevel + 1
        else
          if Formula[i] = ')' then
            ParenthesesLevel := ParenthesesLevel - 1;
        if ParenthesesLevel < 0 then
          ERROR(Text001,i);
        if Formula[i] in ['+','-','*','/','^'] then begin
          if HasOperator then
            ERROR(Text002,i);

          HasOperator := true;

          if i = STRLEN(Formula) then
            ERROR(Text003,i);

          if Formula[i + 1] = ')' then
            ERROR(Text003,i);
        end else
          HasOperator := false;
      end;
      if ParenthesesLevel > 0 then
        ERROR(Text004);

      if ParenthesesLevel < 0 then
        ERROR(Text005);
    END;

    LOCAL PROCEDURE GetCaptionClass@7(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetAccSchedSetup;
      case AnalysisViewDimType of
        1:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 1 Code");

            exit(Text006);
          end;
        2:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 2 Code");

            exit(Text007);
          end;
        3:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 3 Code");

            exit(Text008);
          end;
        4:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 4 Code");

            exit(Text009);
          end;
        5:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 1 Code" + Text010);

            exit(Text011);
          end;
        6:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 2 Code" + Text010);

            exit(Text012);
          end;
        7:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 3 Code" + Text010);

            exit(Text013);
          end;
        8:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 4 Code" + Text010);

            exit(Text014);
          end;
      end;
    END;

    LOCAL PROCEDURE GetAccSchedSetup@2();
    BEGIN
      if "Schedule Name" <> AccSchedName.Name then
        AccSchedName.GET("Schedule Name");
      if AccSchedName."Analysis View Name" <> '' then
        if AccSchedName."Analysis View Name" <> AnalysisView.Code then
          if not AnalysisView.GET(AccSchedName."Analysis View Name") then begin
            MESSAGE(
              Text015,
              AccSchedName.TABLECAPTION,AnalysisView.TABLECAPTION,AccSchedName."Analysis View Name",
              AccSchedName.FIELDCAPTION("Analysis View Name"),AccSchedName.TABLECAPTION);
            AccSchedName."Analysis View Name" := '';
            AccSchedName.MODIFY;
          end;

      if AccSchedName."Analysis View Name" = '' then begin
        if not HasGLSetup then begin
          GLSetup.GET;
          HasGLSetup := true;
        end;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      end;
    END;

    LOCAL PROCEDURE LookupTotaling@3();
    VAR
      GLAccList@1000 : Page "G/L Account List";
      CostTypeList@1001 : Page "Cost Type List";
      CFAccList@1002 : Page "Cash Flow Account List";
    BEGIN
      case "Totaling Type" of
        "Totaling Type"::"Posting Accounts",
        "Totaling Type"::"Total Accounts":
          begin
            GLAccList.LOOKUPMODE(true);
            if GLAccList.RUNMODAL = ACTION::LookupOK then
              VALIDATE(Totaling,GLAccList.GetSelectionFilter);
          end;
        "Totaling Type"::"Cost Type",
        "Totaling Type"::"Cost Type Total":
          begin
            CostTypeList.LOOKUPMODE(true);
            if CostTypeList.RUNMODAL = ACTION::LookupOK then
              VALIDATE(Totaling,CostTypeList.GetSelectionFilter);
          end;
        "Totaling Type"::"Cash Flow Entry Accounts",
        "Totaling Type"::"Cash Flow Total Accounts":
          begin
            CFAccList.LOOKUPMODE(true);
            if CFAccList.RUNMODAL = ACTION::LookupOK then
              VALIDATE(Totaling,CFAccList.GetSelectionFilter);
          end;
      end;
    END;

    [External]
    PROCEDURE LookupGLBudgetFilter@4(VAR Text@1000 : Text) : Boolean;
    VAR
      GLBudgetNames@1001 : Page "G/L Budget Names";
    BEGIN
      GLBudgetNames.LOOKUPMODE(true);
      if GLBudgetNames.RUNMODAL = ACTION::LookupOK then begin
        Text := GLBudgetNames.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    [External]
    PROCEDURE LookupCostBudgetFilter@5(VAR Text@1000 : Text) : Boolean;
    VAR
      CostBudgetNames@1001 : Page "Cost Budget Names";
    BEGIN
      CostBudgetNames.LOOKUPMODE(true);
      if CostBudgetNames.RUNMODAL = ACTION::LookupOK then begin
        Text := CostBudgetNames.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    [External]
    PROCEDURE Indent@6();
    BEGIN
      if Indentation < 10 then
        Indentation += 1;
    END;

    [External]
    PROCEDURE Outdent@10();
    BEGIN
      if Indentation > 0 then
        Indentation -= 1;
    END;

    BEGIN
    END.
  }
}

