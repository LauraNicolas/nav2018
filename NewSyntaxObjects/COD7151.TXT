OBJECT Codeunit 7151 ItemAViewEntryToValueEntries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemAnalysisView@1000 : Record "Item Analysis View";
      GLSetup@1001 : Record "General Ledger Setup";
      DimSetEntry@1002 : Record "Dimension Set Entry";

    [External]
    PROCEDURE GetValueEntries@1(VAR ItemAnalysisViewEntry@1000 : Record "Item Analysis View Entry";VAR TempValueEntry@1001 : Record "Value Entry");
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ItemAnalysisViewFilter@1004 : Record "Item Analysis View Filter";
      UpdateItemAnalysisView@1013 : Codeunit "Update Item Analysis View";
      StartDate@1007 : Date;
      EndDate@1008 : Date;
      GlobalDimValue@1009 : Code[20];
    BEGIN
      ItemAnalysisView.GET(
        ItemAnalysisViewEntry."Analysis Area",
        ItemAnalysisViewEntry."Analysis View Code");

      if ItemAnalysisView."Date Compression" = ItemAnalysisView."Date Compression"::None then begin
        if ValueEntry.GET(ItemAnalysisViewEntry."Entry No.") then begin
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        end;
        exit;
      end;

      GLSetup.GET;

      StartDate := ItemAnalysisViewEntry."Posting Date";
      EndDate := StartDate;

      with ItemAnalysisView do
        if StartDate < "Starting Date" then
          StartDate := 0D
        else
          if (ItemAnalysisViewEntry."Posting Date" = NORMALDATE(ItemAnalysisViewEntry."Posting Date")) and
             not ("Date Compression" in ["Date Compression"::None,"Date Compression"::Day])
          then
            case "Date Compression" of
              "Date Compression"::Week:
                EndDate := ItemAnalysisViewEntry."Posting Date" + 6;
              "Date Compression"::Month:
                EndDate := CALCDATE('<+1M-1D>',ItemAnalysisViewEntry."Posting Date");
              "Date Compression"::Quarter:
                EndDate := CALCDATE('<+3M-1D>',ItemAnalysisViewEntry."Posting Date");
              "Date Compression"::Year:
                EndDate := CALCDATE('<+1Y-1D>',ItemAnalysisViewEntry."Posting Date");
            end;

      with ValueEntry do begin
        SETCURRENTKEY("Item No.","Posting Date");
        SETRANGE("Item No.",ItemAnalysisViewEntry."Item No.");
        SETRANGE("Posting Date",StartDate,EndDate);
        SETRANGE("Entry No.",0,ItemAnalysisView."Last Entry No.");

        if GetGlobalDimValue(GLSetup."Global Dimension 1 Code",ItemAnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 1 Code",GlobalDimValue)
        else
          if ItemAnalysisViewFilter.GET(
               ItemAnalysisView."Analysis Area",
               ItemAnalysisViewEntry."Analysis View Code",
               GLSetup."Global Dimension 1 Code")
          then
            SETFILTER("Global Dimension 1 Code",ItemAnalysisViewFilter."Dimension Value Filter");

        if GetGlobalDimValue(GLSetup."Global Dimension 2 Code",ItemAnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 2 Code",GlobalDimValue)
        else
          if ItemAnalysisViewFilter.GET(
               ItemAnalysisView."Analysis Area",
               ItemAnalysisViewEntry."Analysis View Code",
               GLSetup."Global Dimension 2 Code")
          then
            SETFILTER("Global Dimension 2 Code",ItemAnalysisViewFilter."Dimension Value Filter");

        if FIND('-') then
          repeat
            if DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 1 Code",ItemAnalysisViewEntry."Dimension 1 Value Code") and
               DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 2 Code",ItemAnalysisViewEntry."Dimension 2 Value Code") and
               DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 3 Code",ItemAnalysisViewEntry."Dimension 3 Value Code") and
               UpdateItemAnalysisView.DimSetIDInFilter("Dimension Set ID",ItemAnalysisView)
            then
              if ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) and
                  ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Sale) and
                  ("Entry Type" <> "Entry Type"::Revaluation)) or
                 ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Purchase) and
                  ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Purchase)) or
                 ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Inventory) and
                  ("Item Ledger Entry Type" <> "Item Ledger Entry Type"::" "))
              then
                if not TempValueEntry.GET("Entry No.") then begin
                  TempValueEntry := ValueEntry;
                  TempValueEntry.INSERT;
                end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE DimEntryOK@10(DimSetID@1000 : Integer;Dim@1001 : Code[20];DimValue@1002 : Code[20]) : Boolean;
    BEGIN
      if Dim = '' then
        exit(true);

      if DimSetEntry.GET(DimSetID,Dim) then
        exit(DimSetEntry."Dimension Value Code" = DimValue);

      exit(DimValue = '');
    END;

    LOCAL PROCEDURE GetGlobalDimValue@2(GlobalDim@1000 : Code[20];VAR ItemAnalysisViewEntry@1001 : Record "Item Analysis View Entry";VAR GlobalDimValue@1002 : Code[20]) : Boolean;
    VAR
      IsGlobalDim@1003 : Boolean;
    BEGIN
      case GlobalDim of
        ItemAnalysisView."Dimension 1 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 1 Value Code";
          end;
        ItemAnalysisView."Dimension 2 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 2 Value Code";
          end;
        ItemAnalysisView."Dimension 3 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 3 Value Code";
          end;
      end;
      exit(IsGlobalDim);
    END;

    BEGIN
    END.
  }
}

