OBJECT Codeunit 882 OCR - Sync Master Data
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    OnRun=BEGIN
            SyncMasterData;
          END;

  }
  CODE
  {
    VAR
      JobDelayMinutesTxt@1001 : TextConst '@@@={Locked};ENU=5';

    LOCAL PROCEDURE SyncMasterData@18();
    VAR
      ReadSoftOCRMasterDataSync@1000 : Codeunit "ReadSoft OCR Master Data Sync";
    BEGIN
      ReadSoftOCRMasterDataSync.SyncMasterData(false,true);
    END;

    LOCAL PROCEDURE ResetLastSyncTime@1();
    VAR
      ReadSoftOCRMasterDataSync@1000 : Codeunit "ReadSoft OCR Master Data Sync";
    BEGIN
      ReadSoftOCRMasterDataSync.ResetLastSyncTime;
    END;

    [External]
    PROCEDURE ScheduleJob@7();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      ReadSoftOCRMasterDataSync@1001 : Codeunit "ReadSoft OCR Master Data Sync";
    BEGIN
      if not ReadSoftOCRMasterDataSync.IsSyncEnabled then
        exit;

      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"OCR - Sync Master Data");
      JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::Ready);
      if JobQueueEntry.FINDFIRST then
        exit;

      JobQueueEntry.SETFILTER(Status,'%1|%2',JobQueueEntry.Status::"On Hold",JobQueueEntry.Status::Finished);
      if JobQueueEntry.FINDFIRST then begin
        JobQueueEntry.Restart;
        exit;
      end;

      JobQueueEntry.LOCKTABLE;
      JobQueueEntry.INIT;
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"OCR - Sync Master Data";
      JobQueueEntry."Earliest Start Date/Time" := CURRENTDATETIME + JobDelayMinutes * MillisecondsInMinute;
      JobQueueEntry."Maximum No. of Attempts to Run" := 3;
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
    END;

    [External]
    PROCEDURE CancelJob@16();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"OCR - Sync Master Data");
      while JobQueueEntry.FindJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,CODEUNIT::"OCR - Sync Master Data") do
        JobQueueEntry.Cancel;
    END;

    LOCAL PROCEDURE JobDelayMinutes@23() : Integer;
    VAR
      Result@1000 : Integer;
    BEGIN
      EVALUATE(Result,JobDelayMinutesTxt);
      exit(Result);
    END;

    LOCAL PROCEDURE MillisecondsInMinute@3() : Integer;
    BEGIN
      exit(60000);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendor@2(VAR Rec@1000 : Record Vendor;RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then begin
        ResetLastSyncTime;
        ScheduleJob;
      end;
    END;

    [EventSubscriber(Table,23,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertVendor@5(VAR Rec@1000 : Record Vendor;RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyVendor@6(VAR Rec@1000 : Record Vendor;VAR xRec@1001 : Record Vendor;RunTrigger@1002 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    [EventSubscriber(Table,23,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameVendor@8(VAR Rec@1000 : Record Vendor;VAR xRec@1001 : Record Vendor;RunTrigger@1002 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then begin
        ResetLastSyncTime;
        ScheduleJob;
      end;
    END;

    [EventSubscriber(Table,288,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendorBankAccount@11(VAR Rec@1000 : Record "Vendor Bank Account";RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    [EventSubscriber(Table,288,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertVendorBankAccount@12(VAR Rec@1000 : Record "Vendor Bank Account";RunTrigger@1001 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    [EventSubscriber(Table,288,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyVendorBankAccount@13(VAR Rec@1000 : Record "Vendor Bank Account";VAR xRec@1001 : Record "Vendor Bank Account";RunTrigger@1002 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    [EventSubscriber(Table,288,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameVendorBankAccount@14(VAR Rec@1000 : Record "Vendor Bank Account";VAR xRec@1001 : Record "Vendor Bank Account";RunTrigger@1002 : Boolean);
    BEGIN
      if not Rec.ISTEMPORARY then
        ScheduleJob;
    END;

    BEGIN
    END.
  }
}

