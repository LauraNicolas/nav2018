OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               if PictureUpdated then
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               if PictureUpdated then
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    CaptionML=ENU=Company Information;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 4   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 6   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 7   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 8   ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=ENU=Giro No. }
    { 12  ;   ;Bank Name           ;Text50        ;CaptionML=ENU=Bank Name }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=ENU=Bank Branch No. }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=ENU=Bank Account No. }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=ENU=Payment Routing No. }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=ENU=Customs Permit No. }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=ENU=Customs Permit Date }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1005 : Record "VAT Registration No. Format";
                                                                VATRegistrationLog@1004 : Record "VAT Registration Log";
                                                                VATRegNoSrvConfig@1002 : Record "VAT Reg. No. Srv Config";
                                                                VATRegistrationLogMgt@1003 : Codeunit "VAT Registration Log Mgt.";
                                                                ResultRecordRef@1001 : RecordRef;
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                if "VAT Registration No." = xRec."VAT Registration No." then
                                                                  exit;
                                                                if not VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information") then
                                                                  exit;
                                                                if "Country/Region Code" = '' then
                                                                  exit;
                                                                if VATRegNoSrvConfig.VATRegNoSrvIsEnabled then begin
                                                                  VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"Primary Key",
                                                                    VATRegistrationLog."Account Type"::"Company Information","Country/Region Code");
                                                                  ResultRecordRef.SETTABLE(Rec);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=ENU=Registration No. }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 26  ;   ;Ship-to City        ;Text30        ;TableRelation=IF ("Ship-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Ship-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Ship-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Ship-to City }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Picture             ;BLOB          ;OnValidate=BEGIN
                                                                PictureUpdated := true;
                                                              END;

                                                   CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".Code
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".Code WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 31  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF ("Ship-to Country/Region Code"=CONST('')) "Post Code".Code
                                                                 ELSE IF ("Ship-to Country/Region Code"=FILTER(<>'')) "Post Code".Code WHERE ("Country/Region Code"=FIELD("Ship-to Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 34  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 35  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=ENU=SWIFT Code }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=ENU=Industrial Classification }
    { 41  ;   ;IC Partner Code     ;Code20        ;AccessByPermission=TableData "IC G/L Account"=R;
                                                   CaptionML=ENU=IC Partner Code }
    { 42  ;   ;IC Inbox Type       ;Option        ;InitValue=Database;
                                                   OnValidate=BEGIN
                                                                if "IC Inbox Type" = "IC Inbox Type"::Database then
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   AccessByPermission=TableData "IC G/L Account"=R;
                                                   CaptionML=ENU=IC Inbox Type;
                                                   OptionCaptionML=ENU=File Location,Database;
                                                   OptionString="File Location",Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              FileMgt@1000 : Codeunit "File Management";
                                                              FileName@1002 : Text;
                                                              FileName2@1003 : Text;
                                                              Path@1004 : Text;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              case "IC Inbox Type" of
                                                                "IC Inbox Type"::"File Location":
                                                                  begin
                                                                    if "IC Inbox Details" = '' then
                                                                      FileName := STRSUBSTNO('%1.xml',"IC Partner Code")
                                                                    else
                                                                      FileName := "IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code");

                                                                    FileName2 := FileMgt.SaveFileDialog(Text001,FileName,'');
                                                                    if FileName <> FileName2 then begin
                                                                      Path := FileMgt.GetDirectoryName(FileName2);
                                                                      if Path <> '' then
                                                                        "IC Inbox Details" := COPYSTR(Path,1,250);
                                                                    end;
                                                                  end;
                                                              end;
                                                            END;

                                                   AccessByPermission=TableData "IC G/L Account"=R;
                                                   CaptionML=ENU=IC Inbox Details }
    { 44  ;   ;Auto. Send Transactions;Boolean    ;CaptionML=ENU=Auto. Send Transactions }
    { 46  ;   ;System Indicator    ;Option        ;CaptionML=ENU=System Indicator;
                                                   OptionCaptionML=ENU=None,Custom Text,Company Information,Company,Database,Company+Database;
                                                   OptionString=None,"Custom Text","Company Information",Company,Database,"Company+Database" }
    { 47  ;   ;Custom System Indicator Text;Text250;
                                                   CaptionML=ENU=Custom System Indicator Text }
    { 48  ;   ;System Indicator Style;Option      ;CaptionML=ENU=System Indicator Style;
                                                   OptionCaptionML=ENU=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9;
                                                   OptionString=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9 }
    { 50  ;   ;Allow Blank Payment Info.;Boolean  ;CaptionML=ENU=Allow Blank Payment Info. }
    { 51  ;   ;Contact Person      ;Text50        ;CaptionML=ENU=Contact Person }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit "GLN Calculator";
                                                              BEGIN
                                                                if GLN <> '' then
                                                                  if not GLNCalculator.IsValidCheckDigit13(GLN) then
                                                                    ERROR(GLNCheckDigitErr,FIELDCAPTION(GLN));
                                                              END;

                                                   CaptionML=ENU=GLN;
                                                   Numeric=true }
    { 96  ;   ;Picture - Last Mod. Date Time;DateTime;
                                                   CaptionML=ENU=Picture - Last Mod. Date Time;
                                                   Editable=false }
    { 98  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=false }
    { 99  ;   ;Created DateTime    ;DateTime      ;CaptionML=ENU=Created DateTime;
                                                   Editable=false }
    { 100 ;   ;Demo Company        ;Boolean       ;CaptionML=ENU=Demo Company;
                                                   Editable=false }
    { 200 ;   ;Alternative Language Code;Code10   ;TableRelation=Language;
                                                   CaptionML=ENU=Alternative Language Code }
    { 300 ;   ;Brand Color Value   ;Code10        ;OnValidate=VAR
                                                                O365BrandColor@1000 : Record "O365 Brand Color";
                                                              BEGIN
                                                                O365BrandColor.FindColor(O365BrandColor,"Brand Color Value");
                                                                VALIDATE("Brand Color Code",O365BrandColor.Code);
                                                              END;

                                                   CaptionML=ENU=Brand Color Value }
    { 301 ;   ;Brand Color Code    ;Code20        ;TableRelation="O365 Brand Color";
                                                   OnValidate=BEGIN
                                                                SetBrandColorValue;
                                                              END;

                                                   CaptionML=ENU=Brand Color Code }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=true;
                                                   CaptionML=ENU=Responsibility Center }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Check-Avail. Period Calc. }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Check-Avail. Time Bucket;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   AccessByPermission=TableData "Base Calendar"=R;
                                                   CaptionML=ENU=Cal. Convergence Time Frame }
    { 7602;   ;Show Chart On RoleCenter;Boolean   ;CaptionML=ENU=Show Chart On RoleCenter }
    { 7603;   ;Sync with O365 Bus. profile;Boolean;OnValidate=VAR
                                                                GraphIntBusinessProfile@1001 : Codeunit "Graph Int - Business Profile";
                                                              BEGIN
                                                                if "Sync with O365 Bus. profile" then
                                                                  if IsSyncEnabledForOtherCompany then
                                                                    ERROR(SyncAlreadyEnabledErr);

                                                                if "Sync with O365 Bus. profile" then
                                                                  CODEUNIT.RUN(CODEUNIT::"Graph Data Setup")
                                                                else
                                                                  GraphIntBusinessProfile.UpdateCompanyBusinessProfileId('');
                                                              END;

                                                   CaptionML=ENU=Sync with O365 Bus. profile }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record "Post Code";
      Text000@1001 : TextConst 'ENU=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?';
      Text001@1002 : TextConst 'ENU=File Location for IC files';
      Text002@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      NoPaymentInfoQst@1005 : TextConst '@@@="%1 = Company Information";ENU=No payment information is provided in %1. Do you want to update it now?';
      NoPaymentInfoMsg@1004 : TextConst 'ENU=No payment information is provided in %1. Review the report.';
      GLNCheckDigitErr@1006 : TextConst 'ENU=The %1 is not valid.';
      DevBetaModeTxt@1007 : TextConst '@@@={Locked};ENU=DEV_BETA';
      SyncAlreadyEnabledErr@1008 : TextConst 'ENU=Office 365 Business profile synchronization is already enabled for another company in the system.';
      ContactUsFullTxt@1010 : TextConst '@@@="%1 = phone number, %2 = email";ENU=Questions? Contact us at %1 or %2.';
      ContactUsShortTxt@1009 : TextConst '@@@="%1 = phone number or email";ENU=Questions? Contact us at %1.';
      PictureUpdated@1011 : Boolean;

    [External]
    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      if IBANCode = '' then
        exit;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      if (STRLEN(IBANCode) <= 5) or (STRLEN(IBANCode) > 34) then
        IBANError;
      ConvertIBAN(IBANCode);
      while STRLEN(IBANCode) > 6 do
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      if (I mod Modulus97) <> 1 then
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      while I < STRLEN(IBANCode) do begin
        I := I + 1;
        if ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) then
          I := 0;
      end;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I mod Modulus97;
      if I = 0 then
        exit('');
      exit(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
    BEGIN
      if (Letter >= 'A') and (Letter <= 'Z') then begin
        case Letter of
          'A':
            Letter2 := '10';
          'B':
            Letter2 := '11';
          'C':
            Letter2 := '12';
          'D':
            Letter2 := '13';
          'E':
            Letter2 := '14';
          'F':
            Letter2 := '15';
          'G':
            Letter2 := '16';
          'H':
            Letter2 := '17';
          'I':
            Letter2 := '18';
          'J':
            Letter2 := '19';
          'K':
            Letter2 := '20';
          'L':
            Letter2 := '21';
          'M':
            Letter2 := '22';
          'N':
            Letter2 := '23';
          'O':
            Letter2 := '24';
          'P':
            Letter2 := '25';
          'Q':
            Letter2 := '26';
          'R':
            Letter2 := '27';
          'S':
            Letter2 := '28';
          'T':
            Letter2 := '29';
          'U':
            Letter2 := '30';
          'V':
            Letter2 := '31';
          'W':
            Letter2 := '32';
          'X':
            Letter2 := '33';
          'Y':
            Letter2 := '34';
          'Z':
            Letter2 := '35';
        end;
        if LetterPlace = 1 then
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        else begin
          if LetterPlace = STRLEN(IBANCode) then
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          else
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        end;
        exit(true);
      end;
      if (Letter >= '0') and (Letter <= '9') then
        exit(false);

      IBANError;
    END;

    LOCAL PROCEDURE IBANError@12();
    BEGIN
      if not CONFIRM(Text000) then
        ERROR('');
    END;

    [Internal]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION)
      else
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE IsPaymentInfoAvailble@10() : Boolean;
    BEGIN
      exit(
        (("Giro No." + IBAN + "Bank Name" + "Bank Branch No." + "Bank Account No." + "SWIFT Code") <> '') or
        "Allow Blank Payment Info.");
    END;

    [External]
    PROCEDURE GetRegistrationNumber@14() : Text;
    BEGIN
      exit("Registration No.");
    END;

    [External]
    PROCEDURE GetRegistrationNumberLbl@15() : Text;
    BEGIN
      exit(FIELDCAPTION("Registration No."));
    END;

    [External]
    PROCEDURE GetVATRegistrationNumber@13() : Text;
    BEGIN
      exit("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetVATRegistrationNumberLbl@11() : Text;
    BEGIN
      exit(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetLegalOffice@16() : Text;
    BEGIN
      exit('');
    END;

    [External]
    PROCEDURE GetLegalOfficeLbl@17() : Text;
    BEGIN
      exit('');
    END;

    [External]
    PROCEDURE GetCustomGiro@20() : Text;
    BEGIN
      exit('');
    END;

    [External]
    PROCEDURE GetCustomGiroLbl@19() : Text;
    BEGIN
      exit('');
    END;

    [External]
    PROCEDURE VerifyAndSetPaymentInfo@6();
    VAR
      CompanyInformationPage@1000 : Page "Company Information";
    BEGIN
      GET;
      if IsPaymentInfoAvailble then
        exit;
      if CONFIRM(NoPaymentInfoQst,true,TABLECAPTION) then begin
        CompanyInformationPage.SETRECORD(Rec);
        CompanyInformationPage.EDITABLE(true);
        if CompanyInformationPage.RUNMODAL = ACTION::OK then
          CompanyInformationPage.GETRECORD(Rec);
      end;
      if not IsPaymentInfoAvailble then
        MESSAGE(NoPaymentInfoMsg,TABLECAPTION);
    END;

    [External]
    PROCEDURE GetSystemIndicator@8(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
      Style := "System Indicator Style";
      case "System Indicator" of
        "System Indicator"::None:
          Text := '';
        "System Indicator"::"Custom Text":
          Text := "Custom System Indicator Text";
        "System Indicator"::"Company Information":
          Text := Name;
        "System Indicator"::Company:
          Text := COMPANYNAME;
        "System Indicator"::Database:
          Text := GetDatabaseIndicatorText(false);
        "System Indicator"::"Company+Database":
          Text := GetDatabaseIndicatorText(true);
      end
    END;

    LOCAL PROCEDURE GetDatabaseIndicatorText@9(IncludeCompany@1003 : Boolean) : Text[250];
    VAR
      ActiveSession@1000 : Record "Active Session";
      Text@1002 : Text[1024];
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      Text := ActiveSession."Database Name" + ' - ' + ActiveSession."Server Computer Name";
      if IncludeCompany then
        Text := COMPANYNAME + ' - ' + Text;
      if STRLEN(Text) > 250 then
        exit(COPYSTR(Text,1,247) + '...');
      exit(Text)
    END;

    [External]
    PROCEDURE GetCountryRegionCode@2(CountryRegionCode@1000 : Code[10]) : Code[10];
    BEGIN
      case CountryRegionCode of
        '',"Country/Region Code":
          exit("Country/Region Code");
        else
          exit(CountryRegionCode);
      end;
    END;

    PROCEDURE GetDevBetaModeTxt@18() : Text[250];
    BEGIN
      exit(DevBetaModeTxt);
    END;

    PROCEDURE GetContactUsText@23() : Text;
    BEGIN
      if ("Phone No." <> '') and ("E-Mail" <> '') then
        exit(STRSUBSTNO(ContactUsFullTxt,"Phone No.","E-Mail"));

      if "Phone No." <> '' then
        exit(STRSUBSTNO(ContactUsShortTxt,"Phone No."));

      if "E-Mail" <> '' then
        exit(STRSUBSTNO(ContactUsShortTxt,"E-Mail"));

      exit('');
    END;

    PROCEDURE IsSyncEnabledForOtherCompany@21() SyncEnabled : Boolean;
    VAR
      CompanyInformation@1000 : Record "Company Information";
      Company@1001 : Record Company;
    BEGIN
      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      if Company.FINDSET then begin
        repeat
          CompanyInformation.CHANGECOMPANY(Company.Name);
          if CompanyInformation.GET then
            SyncEnabled := CompanyInformation."Sync with O365 Bus. profile";
        until (Company.NEXT = 0) or SyncEnabled;
      end;
    END;

    LOCAL PROCEDURE SetBrandColorValue@22();
    VAR
      O365BrandColor@1000 : Record "O365 Brand Color";
    BEGIN
      if "Brand Color Code" <> '' then begin
        O365BrandColor.GET("Brand Color Code");
        "Brand Color Value" := O365BrandColor."Color Value";
      end else
        "Brand Color Value" := '';
    END;

    BEGIN
    END.
  }
}

