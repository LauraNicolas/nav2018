OBJECT Table 348 Dimension
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnInsert=BEGIN
               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;
             END;

    OnDelete=VAR
               GLSetup@1000 : Record "General Ledger Setup";
             BEGIN
               DimVal.SETRANGE("Dimension Code",xRec.Code);
               if CheckIfDimUsed(xRec.Code,0,'','',0) then begin
                 if DimVal.FINDSET then
                   repeat
                     if DimVal.CheckIfDimValueUsed then
                       ERROR(Text000,
                         GetCheckDimErr);
                   until DimVal.NEXT = 0;
                 ERROR(Text001,GetCheckDimErr);
               end;
               if DimVal.FINDSET then
                 repeat
                   if DimVal.CheckIfDimValueUsed then
                     ERROR(Text002);
                 until DimVal.NEXT = 0;

               DefaultDim.SETRANGE("Dimension Code",Code);
               DefaultDim.DELETEALL(true);

               DimVal.SETRANGE("Dimension Code",Code);
               DimVal.DELETEALL(true);

               DimComb.SETRANGE("Dimension 1 Code",Code);
               DimComb.DELETEALL;

               DimComb.RESET;
               DimComb.SETRANGE("Dimension 2 Code",Code);
               DimComb.DELETEALL;

               SelectedDim.SETRANGE("Dimension Code",Code);
               SelectedDim.DELETEALL;

               AnalysisSelectedDim.SETRANGE("Dimension Code",Code);
               AnalysisSelectedDim.DELETEALL;

               DimTrans.SETRANGE(Code,Code);
               DimTrans.DELETEALL;

               GLSetup.GET;
               case Code of
                 GLSetup."Shortcut Dimension 3 Code":
                   begin
                     GLSetup."Shortcut Dimension 3 Code" := '';
                     GLSetup.MODIFY;
                   end;
                 GLSetup."Shortcut Dimension 4 Code":
                   begin
                     GLSetup."Shortcut Dimension 4 Code" := '';
                     GLSetup.MODIFY;
                   end;
                 GLSetup."Shortcut Dimension 5 Code":
                   begin
                     GLSetup."Shortcut Dimension 5 Code" := '';
                     GLSetup.MODIFY;
                   end;
                 GLSetup."Shortcut Dimension 6 Code":
                   begin
                     GLSetup."Shortcut Dimension 6 Code" := '';
                     GLSetup.MODIFY;
                   end;
                 GLSetup."Shortcut Dimension 7 Code":
                   begin
                     GLSetup."Shortcut Dimension 7 Code" := '';
                     GLSetup.MODIFY;
                   end;
                 GLSetup."Shortcut Dimension 8 Code":
                   begin
                     GLSetup."Shortcut Dimension 8 Code" := '';
                     GLSetup.MODIFY;
                   end;
               end;
             END;

    OnRename=BEGIN
               SetLastModifiedDateTime;
             END;

    CaptionML=ENU=Dimension;
    LookupPageID="Dimension List";
    DrillDownPageID="Dimension List";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                GLAcc@1000 : Record "G/L Account";
                                                                BusUnit@1001 : Record "Business Unit";
                                                                Item@1002 : Record Item;
                                                                Location@1003 : Record Location;
                                                              BEGIN
                                                                if (UPPERCASE(Code) = UPPERCASE(GLAcc.TABLECAPTION)) or
                                                                   (UPPERCASE(Code) = UPPERCASE(BusUnit.TABLECAPTION)) or
                                                                   (UPPERCASE(Code) = UPPERCASE(Item.TABLECAPTION)) or
                                                                   (UPPERCASE(Code) = UPPERCASE(Location.TABLECAPTION)) or
                                                                   (UPPERCASE(Code) = UPPERCASE(Text006))
                                                                then
                                                                  ERROR(Text007,FIELDCAPTION(Code),GLAcc.TABLECAPTION,BusUnit.TABLECAPTION,Item.TABLECAPTION,Location.TABLECAPTION);

                                                                UpdateText(Code,'',Name);
                                                                UpdateText(Code,Text008,"Code Caption");
                                                                UpdateText(Code,Text009,"Filter Caption");
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 3   ;   ;Code Caption        ;Text80        ;CaptionML=ENU=Code Caption }
    { 4   ;   ;Filter Caption      ;Text80        ;CaptionML=ENU=Filter Caption }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData "Business Unit"=R;
                                                   CaptionML=ENU=Consolidation Code }
    { 8   ;   ;Map-to IC Dimension Code;Code20    ;TableRelation="IC Dimension";
                                                   OnValidate=VAR
                                                                DimensionValue@1000 : Record "Dimension Value";
                                                              BEGIN
                                                                if "Map-to IC Dimension Code" <> xRec."Map-to IC Dimension Code" then begin
                                                                  DimensionValue.SETRANGE("Dimension Code",Code);
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Code","Map-to IC Dimension Code");
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Value Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Map-to IC Dimension Code }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 8001;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Blocked                        }
    { 2   ;Brick               ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\This dimension is also used in posted or budget entries.\You cannot delete it.';
      Text001@1001 : TextConst 'ENU=%1\You cannot delete it.';
      Text002@1002 : TextConst 'ENU=You cannot delete this dimension value, because it has been used in one or more documents or budget entries.';
      Text006@1006 : TextConst 'ENU=Period';
      Text007@1007 : TextConst 'ENU=%1 can not be %2, %3, %4, %5 or Period. These names are used internally by the system.';
      Text008@1008 : TextConst 'ENU=Code';
      Text009@1009 : TextConst 'ENU=Filter';
      Text010@1010 : TextConst 'ENU="This dimension is used in the following setup: "';
      Text011@1011 : TextConst 'ENU="General Ledger Setup, "';
      Text012@1012 : TextConst 'ENU="G/L Budget Names, "';
      Text013@1013 : TextConst 'ENU="Analysis View Card, "';
      DefaultDim@1003 : Record "Default Dimension";
      DimVal@1014 : Record "Dimension Value";
      DimComb@1015 : Record "Dimension Combination";
      SelectedDim@1016 : Record "Selected Dimension";
      AnalysisSelectedDim@1024 : Record "Analysis Selected Dimension";
      DimTrans@1022 : Record "Dimension Translation";
      UsedAsGlobalDim@1017 : Boolean;
      UsedAsShortcutDim@1018 : Boolean;
      UsedAsBudgetDim@1019 : Boolean;
      UsedAsAnalysisViewDim@1020 : Boolean;
      UsedAsItemBudgetDim@1028 : Boolean;
      UsedAsItemAnalysisViewDim@1027 : Boolean;
      CheckDimErr@1021 : Text[250];
      Text014@1026 : TextConst 'ENU="Item Budget Names, "';
      Text015@1025 : TextConst 'ENU="Item Analysis View Card, "';

    LOCAL PROCEDURE UpdateText@1(Code@1000 : Code[20];AddText@1001 : Text[30];VAR Text@1002 : Text[80]);
    BEGIN
      if Text = '' then begin
        Text := LOWERCASE(Code);
        Text[1] := Code[1];
        if AddText <> '' then
          Text := STRSUBSTNO('%1 %2',Text,AddText);
      end;
    END;

    [External]
    PROCEDURE CheckIfDimUsed@73(DimChecked@1000 : Code[20];DimTypeChecked@1001 : '" ",Global1,Global2,Shortcut3,Shortcut4,Shortcut5,Shortcut6,Shortcut7,Shortcut8,Budget1,Budget2,Budget3,Budget4,Analysis1,Analysis2,Analysis3,Analysis4,ItemBudget1,ItemBudget2,ItemBudget3,ItemAnalysis1,ItemAnalysis2,ItemAnalysis3';BudgetNameChecked@1002 : Code[10];AnalysisViewChecked@1003 : Code[10];AnalysisAreaChecked@1016 : Integer) : Boolean;
    VAR
      GLSetup@1004 : Record "General Ledger Setup";
      GLBudgetName@1005 : Record "G/L Budget Name";
      AnalysisView@1006 : Record "Analysis View";
      ItemBudgetName@1015 : Record "Item Budget Name";
      ItemAnalysisView@1014 : Record "Item Analysis View";
      CheckAllDim@1007 : Boolean;
      CheckGlobalDim@1008 : Boolean;
      CheckShortcutDim@1009 : Boolean;
      CheckBudgetDim@1010 : Boolean;
      CheckAnalysisViewDim@1011 : Boolean;
      CheckItemBudgetDim@1013 : Boolean;
      CheckItemAnalysisViewDim@1012 : Boolean;
    BEGIN
      if DimChecked = '' then
        exit;

      CheckAllDim := DimTypeChecked in [DimTypeChecked::" "];
      CheckGlobalDim := DimTypeChecked in [DimTypeChecked::Global1,DimTypeChecked::Global2];
      CheckShortcutDim := DimTypeChecked in [DimTypeChecked::Shortcut3,DimTypeChecked::Shortcut4,DimTypeChecked::Shortcut5,
                                             DimTypeChecked::Shortcut6,DimTypeChecked::Shortcut7,DimTypeChecked::Shortcut8];
      CheckBudgetDim := DimTypeChecked in [DimTypeChecked::Budget1,DimTypeChecked::Budget2,DimTypeChecked::Budget3,
                                           DimTypeChecked::Budget4];
      CheckAnalysisViewDim := DimTypeChecked in [DimTypeChecked::Analysis1,DimTypeChecked::Analysis2,DimTypeChecked::Analysis3,
                                                 DimTypeChecked::Analysis4];
      CheckItemBudgetDim :=
        DimTypeChecked in [DimTypeChecked::ItemBudget1,DimTypeChecked::ItemBudget2,DimTypeChecked::ItemBudget3];
      CheckItemAnalysisViewDim :=
        DimTypeChecked in [DimTypeChecked::ItemAnalysis1,DimTypeChecked::ItemAnalysis2,DimTypeChecked::ItemAnalysis3];

      UsedAsGlobalDim := false;
      UsedAsShortcutDim := false;
      UsedAsBudgetDim := false;
      UsedAsAnalysisViewDim := false;
      UsedAsItemBudgetDim := false;
      UsedAsItemAnalysisViewDim := false;

      if CheckAllDim or CheckGlobalDim or CheckShortcutDim or CheckBudgetDim or CheckItemBudgetDim then begin
        GLSetup.GET;
        if (DimTypeChecked <> DimTypeChecked::Global1) and
           (DimChecked = GLSetup."Global Dimension 1 Code")
        then
          UsedAsGlobalDim := true;
        if (DimTypeChecked <> DimTypeChecked::Global2) and
           (DimChecked = GLSetup."Global Dimension 2 Code")
        then
          UsedAsGlobalDim := true;
      end;

      if CheckGlobalDim or CheckShortcutDim then begin
        if (DimTypeChecked <> DimTypeChecked::Shortcut3) and
           (DimChecked = GLSetup."Shortcut Dimension 3 Code")
        then
          UsedAsShortcutDim := true;
        if (DimTypeChecked <> DimTypeChecked::Shortcut4) and
           (DimChecked = GLSetup."Shortcut Dimension 4 Code")
        then
          UsedAsShortcutDim := true;
        if (DimTypeChecked <> DimTypeChecked::Shortcut5) and
           (DimChecked = GLSetup."Shortcut Dimension 5 Code")
        then
          UsedAsShortcutDim := true;
        if (DimTypeChecked <> DimTypeChecked::Shortcut6) and
           (DimChecked = GLSetup."Shortcut Dimension 6 Code")
        then
          UsedAsShortcutDim := true;
        if (DimTypeChecked <> DimTypeChecked::Shortcut7) and
           (DimChecked = GLSetup."Shortcut Dimension 7 Code")
        then
          UsedAsShortcutDim := true;
        if (DimTypeChecked <> DimTypeChecked::Shortcut8) and
           (DimChecked = GLSetup."Shortcut Dimension 8 Code")
        then
          UsedAsShortcutDim := true;
      end;

      if CheckAllDim or CheckGlobalDim or CheckBudgetDim then begin
        if BudgetNameChecked <> '' then
          GLBudgetName.SETRANGE(Name,BudgetNameChecked);
        if GLBudgetName.FINDSET then
          repeat
            if (DimTypeChecked <> DimTypeChecked::Budget1) and
               (DimChecked = GLBudgetName."Budget Dimension 1 Code")
            then
              UsedAsBudgetDim := true;
            if (DimTypeChecked <> DimTypeChecked::Budget2) and
               (DimChecked = GLBudgetName."Budget Dimension 2 Code")
            then
              UsedAsBudgetDim := true;
            if (DimTypeChecked <> DimTypeChecked::Budget3) and
               (DimChecked = GLBudgetName."Budget Dimension 3 Code")
            then
              UsedAsBudgetDim := true;
            if (DimTypeChecked <> DimTypeChecked::Budget4) and
               (DimChecked = GLBudgetName."Budget Dimension 4 Code")
            then
              UsedAsBudgetDim := true;
          until GLBudgetName.NEXT = 0;
      end;

      if CheckAllDim or CheckGlobalDim or CheckItemBudgetDim then begin
        if BudgetNameChecked <> '' then begin
          ItemBudgetName.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemBudgetName.SETRANGE(Name,BudgetNameChecked);
        end;
        if ItemBudgetName.FINDSET then
          repeat
            if (DimTypeChecked <> DimTypeChecked::ItemBudget1) and
               (DimChecked = ItemBudgetName."Budget Dimension 1 Code")
            then
              UsedAsItemBudgetDim := true;
            if (DimTypeChecked <> DimTypeChecked::ItemBudget2) and
               (DimChecked = ItemBudgetName."Budget Dimension 2 Code")
            then
              UsedAsItemBudgetDim := true;
            if (DimTypeChecked <> DimTypeChecked::ItemBudget3) and
               (DimChecked = ItemBudgetName."Budget Dimension 3 Code")
            then
              UsedAsItemBudgetDim := true;
          until ItemBudgetName.NEXT = 0;
      end;

      if CheckAllDim or CheckAnalysisViewDim then begin
        if AnalysisViewChecked <> '' then
          AnalysisView.SETRANGE(Code,AnalysisViewChecked);
        if AnalysisView.FINDSET then
          repeat
            if (DimTypeChecked <> DimTypeChecked::Analysis1) and
               (DimChecked = AnalysisView."Dimension 1 Code")
            then
              UsedAsAnalysisViewDim := true;
            if (DimTypeChecked <> DimTypeChecked::Analysis2) and
               (DimChecked = AnalysisView."Dimension 2 Code")
            then
              UsedAsAnalysisViewDim := true;
            if (DimTypeChecked <> DimTypeChecked::Analysis3) and
               (DimChecked = AnalysisView."Dimension 3 Code")
            then
              UsedAsAnalysisViewDim := true;
            if (DimTypeChecked <> DimTypeChecked::Analysis4) and
               (DimChecked = AnalysisView."Dimension 4 Code")
            then
              UsedAsAnalysisViewDim := true;
          until AnalysisView.NEXT = 0;
      end;

      if CheckAllDim or CheckItemAnalysisViewDim then begin
        if AnalysisViewChecked <> '' then begin
          ItemAnalysisView.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemAnalysisView.SETRANGE(Code,AnalysisViewChecked);
        end;
        if ItemAnalysisView.FINDSET then
          repeat
            if (DimTypeChecked <> DimTypeChecked::ItemAnalysis1) and
               (DimChecked = ItemAnalysisView."Dimension 1 Code")
            then
              UsedAsItemAnalysisViewDim := true;
            if (DimTypeChecked <> DimTypeChecked::ItemAnalysis2) and
               (DimChecked = ItemAnalysisView."Dimension 2 Code")
            then
              UsedAsItemAnalysisViewDim := true;
            if (DimTypeChecked <> DimTypeChecked::ItemAnalysis3) and
               (DimChecked = ItemAnalysisView."Dimension 3 Code")
            then
              UsedAsItemAnalysisViewDim := true;
          until ItemAnalysisView.NEXT = 0;
      end;

      if UsedAsGlobalDim or
         UsedAsShortcutDim or
         UsedAsBudgetDim or
         UsedAsAnalysisViewDim or
         UsedAsItemBudgetDim or
         UsedAsItemAnalysisViewDim
      then begin
        MakeCheckDimErr;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE MakeCheckDimErr@6();
    BEGIN
      CheckDimErr := Text010;
      if UsedAsGlobalDim or UsedAsShortcutDim then
        CheckDimErr := CheckDimErr + Text011;
      if UsedAsBudgetDim then
        CheckDimErr := CheckDimErr + Text012;
      if UsedAsAnalysisViewDim then
        CheckDimErr := CheckDimErr + Text013;
      if UsedAsItemBudgetDim then
        CheckDimErr := CheckDimErr + Text014;
      if UsedAsItemAnalysisViewDim then
        CheckDimErr := CheckDimErr + Text015;
      CheckDimErr := COPYSTR(CheckDimErr,1,STRLEN(CheckDimErr) - 2) + '.';
    END;

    [External]
    PROCEDURE GetCheckDimErr@13() : Text[250];
    BEGIN
      exit(CheckDimErr);
    END;

    [External]
    PROCEDURE GetMLName@3(LanguageID@1001 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      exit(DimTrans.Name);
    END;

    [External]
    PROCEDURE GetMLCodeCaption@4(LanguageID@1000 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      exit(DimTrans."Code Caption");
    END;

    [External]
    PROCEDURE GetMLFilterCaption@5(LanguageID@1000 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      exit(DimTrans."Filter Caption");
    END;

    [External]
    PROCEDURE SetMLName@11(NewMLName@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      if IsApplicationLanguage(LanguageID) then begin
        if Name <> NewMLName then begin
          Name := NewMLName;
          MODIFY;
        end;
      end else begin
        InsertDimTrans(LanguageID);
        if DimTrans.Name <> NewMLName then begin
          DimTrans.Name := NewMLName;
          DimTrans.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE SetMLCodeCaption@10(NewMLCodeCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      if IsApplicationLanguage(LanguageID) then begin
        if "Code Caption" <> NewMLCodeCaption then begin
          "Code Caption" := NewMLCodeCaption;
          MODIFY;
        end;
      end else begin
        InsertDimTrans(LanguageID);
        if DimTrans."Code Caption" <> NewMLCodeCaption then begin
          DimTrans."Code Caption" := NewMLCodeCaption;
          DimTrans.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE SetMLFilterCaption@9(NewMLFilterCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      if IsApplicationLanguage(LanguageID) then begin
        if "Filter Caption" <> NewMLFilterCaption then begin
          "Filter Caption" := NewMLFilterCaption;
          MODIFY;
        end;
      end else begin
        InsertDimTrans(LanguageID);
        if DimTrans."Filter Caption" <> NewMLFilterCaption then begin
          DimTrans."Filter Caption" := NewMLFilterCaption;
          DimTrans.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE SetMLDescription@8(NewMLDescription@1000 : Text[50];LanguageID@1001 : Integer);
    BEGIN
      if IsApplicationLanguage(LanguageID) then begin
        if Description <> NewMLDescription then begin
          Description := NewMLDescription;
          MODIFY;
        end;
      end else
        InsertDimTrans(LanguageID);
    END;

    LOCAL PROCEDURE GetDimTrans@19(LanguageID@1001 : Integer);
    BEGIN
      if (DimTrans.Code <> Code) or (DimTrans."Language ID" <> LanguageID) then
        if not DimTrans.GET(Code,LanguageID) then begin
          DimTrans.INIT;
          DimTrans.Code := Code;
          DimTrans."Language ID" := LanguageID;
          DimTrans.Name := Name;
          DimTrans."Code Caption" := "Code Caption";
          DimTrans."Filter Caption" := "Filter Caption";
        end;
    END;

    LOCAL PROCEDURE InsertDimTrans@2(LanguageID@1000 : Integer);
    BEGIN
      if not DimTrans.GET(Code,LanguageID) then begin
        DimTrans.INIT;
        DimTrans.Code := Code;
        DimTrans."Language ID" := LanguageID;
        DimTrans.INSERT;
      end;
    END;

    LOCAL PROCEDURE IsApplicationLanguage@14(LanguageID@1000 : Integer) : Boolean;
    VAR
      ApplicationManagement@1003 : Codeunit ApplicationManagement;
    BEGIN
      exit(LanguageID = ApplicationManagement.ApplicationLanguage);
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
    END;

    BEGIN
    END.
  }
}

