OBJECT Table 9062 User Security Status
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataPerCompany=false;
    CaptionML=ENU=User Security Status;
    LookupPageID="User Security Status List";
  }
  FIELDS
  {
    { 1   ;   ;User Security ID    ;GUID          ;TableRelation=User."User Security ID";
                                                   CaptionML=ENU=User Security ID }
    { 2   ;   ;User Name           ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."User Name" WHERE ("User Security ID"=FIELD("User Security ID")));
                                                   CaptionML=ENU=User Name }
    { 3   ;   ;Full Name           ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."Full Name" WHERE ("User Security ID"=FIELD("User Security ID")));
                                                   CaptionML=ENU=Full Name }
    { 13  ;   ;Reviewed            ;Boolean       ;CaptionML=ENU=Reviewed }
    { 14  ;   ;Belongs To Subscription Plan;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("User Plan" WHERE ("User Security ID"=FIELD("User Security ID")));
                                                   CaptionML=ENU=Belongs To Subscription Plan }
    { 15  ;   ;Belongs to User Group;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("User Group Member" WHERE ("User Security ID"=FIELD("User Security ID")));
                                                   CaptionML=ENU=Belongs to User Group }
    { 20  ;   ;Users - To review   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE (Reviewed=CONST(false),
                                                                                                    "User Security ID"=FILTER(<>'{00000000-0000-0000-0000-000000000000}')))];
                                                   CaptionML=ENU=Users - To review }
    { 21  ;   ;Users - Without Subscriptions;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE ("Belongs To Subscription Plan"=CONST(false),
                                                                                                    "User Security ID"=FILTER(<>'{00000000-0000-0000-0000-000000000000}')))];
                                                   CaptionML=ENU=Users - Without Subscriptions }
    { 22  ;   ;Users - Not Group Members;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=[Count("User Security Status" WHERE ("Belongs to User Group"=CONST(false),
                                                                                                    "User Security ID"=FILTER(<>'{00000000-0000-0000-0000-000000000000}')))];
                                                   CaptionML=ENU=Users - Not Group Members }
  }
  KEYS
  {
    {    ;"User Security ID"                      ;Clustered=true }
    {    ;Reviewed                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserNotReviewedTxt@1001 : TextConst '@@@="%1 = user name";ENU=User %1: not reviewed.';
      UserReviewedTxt@1000 : TextConst '@@@=%1: User name;ENU=User %1: reviewed.';
      SecurityActivityTok@1003 : TextConst 'ENU=User review';
      SecurityContextTok@1002 : TextConst 'ENU=Security administration';

    [External]
    PROCEDURE KeepOnlyEnabledUsers@1();
    VAR
      User@1000 : Record User;
      UserSecurityStatus@1001 : Record "User Security Status";
    BEGIN
      User.SETRANGE(State,User.State::Disabled);
      if not User.FINDSET then
        exit;
      repeat
        if UserSecurityStatus.GET(User."User Security ID") then
          UserSecurityStatus.DELETE;
      until User.NEXT = 0;
    END;

    [Internal]
    PROCEDURE LoadUsers@2();
    VAR
      User@1000 : Record User;
      UserSecurityStatus@1001 : Record "User Security Status";
      UserPlan@1002 : Record "User Plan";
      PermissionManager@1003 : Codeunit "Permission Manager";
      IsSaaS@1004 : Boolean;
    BEGIN
      User.SETRANGE(State,User.State::Enabled);
      HideExternalUsers(User);
      if not User.FINDSET then
        exit;

      IsSaaS := PermissionManager.SoftwareAsAService;
      repeat
        if UserSecurityStatus.GET(User."User Security ID") then begin
          UserPlan.SETRANGE("User Security ID","User Security ID");
          if UserPlan.ISEMPTY and IsSaaS then begin
            UserSecurityStatus.Reviewed := false;
            UserSecurityStatus.MODIFY(true);
          end;
        end else begin
          UserSecurityStatus.INIT;
          UserSecurityStatus."User Security ID" := User."User Security ID";
          UserSecurityStatus.Reviewed := false;
          UserSecurityStatus.INSERT;
        end;
      until User.NEXT = 0;
    END;

    [External]
    PROCEDURE LogUserReviewActivity@3();
    VAR
      ActivityLog@1001 : Record "Activity Log";
      ActivityMessage@1000 : Text[250];
    BEGIN
      CALCFIELDS("User Name");
      if Reviewed then
        ActivityMessage := STRSUBSTNO(UserReviewedTxt,"User Name")
      else
        ActivityMessage := STRSUBSTNO(UserNotReviewedTxt,"User Name");
      ActivityLog.LogActivity(RECORDID,ActivityLog.Status::Success,SecurityContextTok,SecurityActivityTok,ActivityMessage);
    END;

    LOCAL PROCEDURE HideExternalUsers@6(VAR User@1000 : Record User);
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
    BEGIN
      if PermissionManager.SoftwareAsAService then
        User.SETFILTER("License Type",'<>%1',User."License Type"::"External User");
    END;

    BEGIN
    END.
  }
}

