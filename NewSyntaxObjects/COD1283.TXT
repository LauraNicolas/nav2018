OBJECT Codeunit 1283 Exp. Bank Conv.-Pre-Mapping
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    Permissions=TableData "Payment Export Data"=rimd;
    OnRun=BEGIN
            FillExportBuffer("Entry No.");
          END;

  }
  CODE
  {
    VAR
      ProgressMsg@1000 : TextConst 'ENU=Pre-processing line no. #1######.';
      Window@1001 : Dialog;

    LOCAL PROCEDURE FillExportBuffer@3(DataExchEntryNo@1003 : Integer);
    VAR
      GenJnlLine@1000 : Record "Gen. Journal Line";
      CustLedgerEntry@1014 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1015 : Record "Vendor Ledger Entry";
      PaymentMethod@1013 : Record "Payment Method";
      PaymentExportData@1001 : Record "Payment Export Data";
      GeneralLedgerSetup@1012 : Record "General Ledger Setup";
      CompanyInformation@1011 : Record "Company Information";
      BankAccount@1010 : Record "Bank Account";
      Customer@1009 : Record Customer;
      Vendor@1008 : Record Vendor;
      VendorBankAccount@1007 : Record "Vendor Bank Account";
      CustomerBankAccount@1006 : Record "Customer Bank Account";
      BankExportImportSetup@1004 : Record "Bank Export/Import Setup";
      Employee@1016 : Record Employee;
      MessageID@1005 : Text[20];
      LineNo@1002 : Integer;
    BEGIN
      GeneralLedgerSetup.GET;
      CompanyInformation.GET;

      GenJnlLine.SETRANGE("Data Exch. Entry No.",DataExchEntryNo);
      with PaymentExportData do begin
        GenJnlLine.FINDSET;
        GenJnlLine.TESTFIELD("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
        BankAccount.GET(GenJnlLine."Bal. Account No.");
        BankAccount.TESTFIELD("Bank Name - Data Conversion");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        MessageID := BankAccount.GetCreditTransferMessageNo;
        Window.OPEN(ProgressMsg);

        repeat
          CLEAR(PaymentExportData);
          INIT;
          SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");
          LineNo += 1;
          "Line No." := LineNo;
          "Data Exch Entry No." := DataExchEntryNo;
          "Creditor No." := BankAccount."Creditor No.";
          "Transit No." := BankAccount."Transit No.";
          "General Journal Template" := GenJnlLine."Journal Template Name";
          "General Journal Batch Name" := GenJnlLine."Journal Batch Name";
          "General Journal Line No." := GenJnlLine."Line No.";
          "Recipient ID" := GenJnlLine."Account No.";
          "Message ID" := MessageID;
          "Document No." := GenJnlLine."Document No.";
          "End-to-End ID" := "Message ID" + '/' + FORMAT("Line No.");
          "Payment Information ID" := FORMAT(CREATEGUID);
          "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
          "Short Advice" := GenJnlLine."Document No.";
          "Recipient Creditor No." := GenJnlLine."Creditor No.";

          case GenJnlLine."Account Type" of
            GenJnlLine."Account Type"::Customer:
              begin
                Customer.GET(GenJnlLine."Account No.");
                if CustomerBankAccount.GET(Customer."No.",GenJnlLine."Recipient Bank Account") then
                  SetCustomerAsRecipient(Customer,CustomerBankAccount);
                if CustLedgerEntry.GET(GenJnlLine.GetAppliesToDocEntryNo) then begin
                  CustLedgerEntry.CALCFIELDS("Original Amount");
                  "Invoice Amount" := ABS(CustLedgerEntry."Original Amount");
                  "Invoice Date" := CustLedgerEntry."Document Date";
                end;
              end;
            GenJnlLine."Account Type"::Vendor:
              begin
                Vendor.GET(GenJnlLine."Account No.");
                if VendorBankAccount.GET(Vendor."No.",GenJnlLine."Recipient Bank Account") then
                  SetVendorAsRecipient(Vendor,VendorBankAccount);
                if VendorLedgerEntry.GET(GenJnlLine.GetAppliesToDocEntryNo) then begin
                  VendorLedgerEntry.CALCFIELDS("Original Amount");
                  "Invoice Amount" := ABS(VendorLedgerEntry."Original Amount");
                  "Invoice Date" := VendorLedgerEntry."Document Date";
                end;
              end;
            GenJnlLine."Account Type"::Employee:
              begin
                Employee.GET(GenJnlLine."Account No.");
                SetEmployeeAsRecipient(Employee);
              end;
          end;

          GenJnlLine.TESTFIELD("Payment Method Code");
          PaymentMethod.GET(GenJnlLine."Payment Method Code");
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
          "Payment Type" := PaymentMethod."Bank Data Conversion Pmt. Type";
          "Payment Reference" := GenJnlLine."Payment Reference";
          "Message to Recipient 1" := COPYSTR(GenJnlLine."Message to Recipient",1,35);
          "Message to Recipient 2" := COPYSTR(GenJnlLine."Message to Recipient",36,70);
          Amount := GenJnlLine.Amount;
          "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(GenJnlLine."Currency Code");
          "Transfer Date" := GenJnlLine."Posting Date";
          "Costs Distribution" := 'Shared';
          "Message Structure" := 'manual';
          "Own Address Info." := 'frombank';
          SetBankAsSenderBank(BankAccount);
          "Sender Bank Country/Region" := CompanyInformation.GetCountryRegionCode(BankAccount."Country/Region Code");
          "Sender Bank Account Currency" := GeneralLedgerSetup.GetCurrencyCode(BankAccount."Currency Code");

          INSERT(true);
          Window.UPDATE(1,LineNo);
        until GenJnlLine.NEXT = 0;
      end;

      Window.CLOSE;
    END;

    BEGIN
    END.
  }
}

