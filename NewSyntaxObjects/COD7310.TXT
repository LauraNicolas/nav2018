OBJECT Codeunit 7310 Whse.-Shipment Release
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1005 : TextConst 'ENU=There is nothing to release for %1 %2.';
      Text001@1000 : TextConst 'ENU=You cannot reopen the shipment because warehouse worksheet lines exist that must first be handled or deleted.';
      Text002@1002 : TextConst 'ENU=You cannot reopen the shipment because warehouse activity lines exist that must first be handled or deleted.';

    [External]
    PROCEDURE Release@1(VAR WhseShptHeader@1000 : Record "Warehouse Shipment Header");
    VAR
      Location@1004 : Record Location;
      WhsePickRqst@1003 : Record "Whse. Pick Request";
      WhseShptLine@1001 : Record "Warehouse Shipment Line";
      ATOLink@1002 : Record "Assemble-to-Order Link";
      AsmLine@1005 : Record "Assembly Line";
    BEGIN
      with WhseShptHeader do begin
        if Status = Status::Released then
          exit;

        WhseShptLine.SETRANGE("No.","No.");
        WhseShptLine.SETFILTER(Quantity,'<>0');
        if not WhseShptLine.FIND('-') then
          ERROR(Text000,TABLECAPTION,"No.");

        if "Location Code" <> '' then
          Location.GET("Location Code");

        repeat
          WhseShptLine.TESTFIELD("Item No.");
          WhseShptLine.TESTFIELD("Unit of Measure Code");
          if Location."Directed Put-away and Pick" then
            WhseShptLine.TESTFIELD("Zone Code");
          if Location."Bin Mandatory" then begin
            WhseShptLine.TESTFIELD("Bin Code");
            if WhseShptLine."Assemble to Order" then begin
              ATOLink.AsmExistsForWhseShptLine(WhseShptLine);
              AsmLine.SETCURRENTKEY("Document Type","Document No.",Type);
              AsmLine.SETRANGE("Document Type",ATOLink."Assembly Document Type");
              AsmLine.SETRANGE("Document No.",ATOLink."Assembly Document No.");
              AsmLine.SETRANGE(Type,AsmLine.Type::Item);
              if AsmLine.FINDSET then
                repeat
                  if AsmLine.CalcQtyToPickBase > 0 then
                    AsmLine.TESTFIELD("Bin Code");
                until AsmLine.NEXT = 0;
            end;
          end;
        until WhseShptLine.NEXT = 0;

        Status := Status::Released;
        MODIFY;

        CreateWhsePickRqst(WhseShptHeader);

        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
        WhsePickRqst.SETRANGE("Document No.","No.");
        WhsePickRqst.SETRANGE(Status,Status::Open);
        if not WhsePickRqst.ISEMPTY then
          WhsePickRqst.DELETEALL(true);

        COMMIT;
      end;
    END;

    [External]
    PROCEDURE Reopen@2(WhseShptHeader@1000 : Record "Warehouse Shipment Header");
    VAR
      WhsePickRqst@1001 : Record "Whse. Pick Request";
      PickWkshLine@1002 : Record "Whse. Worksheet Line";
      WhseActivLine@1003 : Record "Warehouse Activity Line";
    BEGIN
      with WhseShptHeader do begin
        if Status = Status::Open then
          exit;

        PickWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.");
        PickWkshLine.SETRANGE("Whse. Document Type",PickWkshLine."Whse. Document Type"::Shipment);
        PickWkshLine.SETRANGE("Whse. Document No.","No.");
        if not PickWkshLine.ISEMPTY then
          ERROR(Text001);

        WhseActivLine.SETCURRENTKEY("Whse. Document No.","Whse. Document Type","Activity Type");
        WhseActivLine.SETRANGE("Whse. Document No.","No.");
        WhseActivLine.SETRANGE("Whse. Document Type",WhseActivLine."Whse. Document Type"::Shipment);
        WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Pick);
        if not WhseActivLine.ISEMPTY then
          ERROR(Text002);

        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
        WhsePickRqst.SETRANGE("Document No.","No.");
        WhsePickRqst.SETRANGE(Status,Status::Released);
        if not WhsePickRqst.ISEMPTY then
          WhsePickRqst.MODIFYALL(Status,WhsePickRqst.Status::Open);

        Status := Status::Open;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE CreateWhsePickRqst@3(VAR WhseShptHeader@1000 : Record "Warehouse Shipment Header");
    VAR
      WhsePickRqst@1001 : Record "Whse. Pick Request";
      Location@1002 : Record Location;
    BEGIN
      with WhseShptHeader do
        if Location.RequirePicking("Location Code") then begin
          WhsePickRqst."Document Type" := WhsePickRqst."Document Type"::Shipment;
          WhsePickRqst."Document No." := "No.";
          WhsePickRqst.Status := Status;
          WhsePickRqst."Location Code" := "Location Code";
          WhsePickRqst."Zone Code" := "Zone Code";
          WhsePickRqst."Bin Code" := "Bin Code";
          CALCFIELDS("Completely Picked");
          WhsePickRqst."Completely Picked" := "Completely Picked";
          if not WhsePickRqst.INSERT then
            WhsePickRqst.MODIFY;
        end;
    END;

    BEGIN
    END.
  }
}

