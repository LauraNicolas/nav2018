OBJECT Table 137 Inc. Doc. Attachment Overview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
             BEGIN
               if IncomingDocumentAttachment.GET("Incoming Document Entry No.","Line No.") then
                 IncomingDocumentAttachment.DELETE(true);
             END;

    CaptionML=ENU=Inc. Doc. Attachment Overview;
  }
  FIELDS
  {
    { 1   ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 2   ;   ;Line No.            ;Integer       ;InitValue=0;
                                                   CaptionML=ENU=Line No. }
    { 3   ;   ;Created Date-Time   ;DateTime      ;CaptionML=ENU=Created Date-Time }
    { 4   ;   ;Created By User Name;Code50        ;CaptionML=ENU=Created By User Name }
    { 5   ;   ;Name                ;Text250       ;CaptionML=ENU=Name;
                                                   Editable=false }
    { 6   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Image,PDF,Word,Excel,PowerPoint,Email,XML,Other";
                                                   OptionString=" ",Image,PDF,Word,Excel,PowerPoint,Email,XML,Other;
                                                   Editable=false }
    { 7   ;   ;File Extension      ;Text30        ;CaptionML=ENU=File Extension;
                                                   Editable=false }
    { 100 ;   ;Attachment Type     ;Option        ;CaptionML=ENU=Attachment Type;
                                                   OptionCaptionML=ENU=,Group,Main Attachment,OCR Result,Supporting Attachment,Link;
                                                   OptionString=,Group,"Main Attachment","OCR Result","Supporting Attachment",Link;
                                                   Editable=false }
    { 101 ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 102 ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
  }
  KEYS
  {
    {    ;"Sorting Order","Incoming Document Entry No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"Created Date-Time",Name,"File Extension" }
  }
  CODE
  {
    VAR
      SupportingAttachmentsTxt@1000 : TextConst 'ENU=Supporting Attachments';
      NotAvailableAttachmentMsg@1001 : TextConst 'ENU=The attachment is no longer available.';

    [Internal]
    PROCEDURE NameDrillDown@13();
    VAR
      IncomingDocument@1001 : Record "Incoming Document";
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      case "Attachment Type" of
        "Attachment Type"::Group:
          exit;
        "Attachment Type"::Link:
          begin
            IncomingDocument.GET("Incoming Document Entry No.");
            HYPERLINK(IncomingDocument.GetURL);
          end
        else begin
          if not IncomingDocumentAttachment.GET("Incoming Document Entry No.","Line No.") then
            MESSAGE(NotAvailableAttachmentMsg)
          else
            if (Type = Type::Image) and (CURRENTCLIENTTYPE = CLIENTTYPE::Phone) then
              PAGE.RUN(PAGE::"O365 Incoming Doc. Att. Pict.",IncomingDocumentAttachment)
            else
              IncomingDocumentAttachment.Export(Name + '.' + "File Extension",true);
        end
      end;
    END;

    [External]
    PROCEDURE GetStyleTxt@4() : Text;
    BEGIN
      case "Attachment Type" of
        "Attachment Type"::Group,
        "Attachment Type"::"Main Attachment",
        "Attachment Type"::Link:
          exit('Strong');
        else
          exit('Standard');
      end;
    END;

    [Internal]
    PROCEDURE InsertFromIncomingDocument@2(IncomingDocument@1000 : Record "Incoming Document";VAR TempIncDocAttachmentOverview@1003 : TEMPORARY Record "Inc. Doc. Attachment Overview");
    VAR
      SortingOrder@1004 : Integer;
    BEGIN
      InsertMainAttachment(IncomingDocument,TempIncDocAttachmentOverview,SortingOrder);
      InsertLinkAddress(IncomingDocument,TempIncDocAttachmentOverview,SortingOrder);
      InsertSupportingAttachments(
        IncomingDocument,TempIncDocAttachmentOverview,SortingOrder,
        IncomingDocument."Document Type" <> IncomingDocument."Document Type"::"Sales Invoice");
    END;

    [External]
    PROCEDURE InsertSupportingAttachmentsFromIncomingDocument@1(IncomingDocument@1001 : Record "Incoming Document";VAR TempIncDocAttachmentOverview@1000 : TEMPORARY Record "Inc. Doc. Attachment Overview");
    VAR
      SortingOrder@1002 : Integer;
    BEGIN
      InsertSupportingAttachments(IncomingDocument,TempIncDocAttachmentOverview,SortingOrder,false);
    END;

    LOCAL PROCEDURE InsertMainAttachment@3(IncomingDocument@1000 : Record "Incoming Document";VAR TempIncDocAttachmentOverview@1001 : TEMPORARY Record "Inc. Doc. Attachment Overview";VAR SortingOrder@1002 : Integer);
    VAR
      IncomingDocumentAttachment@1003 : Record "Incoming Document Attachment";
    BEGIN
      if not IncomingDocument.GetMainAttachment(IncomingDocumentAttachment) then
        exit;

      if IncomingDocument."Document Type" = IncomingDocument."Document Type"::"Sales Invoice" then
        InsertFromIncomingDocumentAttachment(
          TempIncDocAttachmentOverview,IncomingDocumentAttachment,SortingOrder,
          TempIncDocAttachmentOverview."Attachment Type"::"Supporting Attachment",0)
      else
        InsertFromIncomingDocumentAttachment(
          TempIncDocAttachmentOverview,IncomingDocumentAttachment,SortingOrder,
          TempIncDocAttachmentOverview."Attachment Type"::"Main Attachment",0);
    END;

    LOCAL PROCEDURE InsertSupportingAttachments@6(IncomingDocument@1000 : Record "Incoming Document";VAR TempIncDocAttachmentOverview@1001 : TEMPORARY Record "Inc. Doc. Attachment Overview";VAR SortingOrder@1002 : Integer;IncludeGroupCaption@1004 : Boolean);
    VAR
      IncomingDocumentAttachment@1003 : Record "Incoming Document Attachment";
      Indentation2@1005 : Integer;
    BEGIN
      if not IncomingDocument.GetAdditionalAttachments(IncomingDocumentAttachment) then
        exit;

      if IncludeGroupCaption then
        InsertGroup(TempIncDocAttachmentOverview,IncomingDocument,SortingOrder,SupportingAttachmentsTxt);
      if IncomingDocument."Document Type" = IncomingDocument."Document Type"::"Sales Invoice" then
        Indentation2 := 0
      else
        Indentation2 := 1;
      repeat
        InsertFromIncomingDocumentAttachment(
          TempIncDocAttachmentOverview,IncomingDocumentAttachment,SortingOrder,
          TempIncDocAttachmentOverview."Attachment Type"::"Supporting Attachment",Indentation2);
      until IncomingDocumentAttachment.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertLinkAddress@8(IncomingDocument@1003 : Record "Incoming Document";VAR TempIncDocAttachmentOverview@1000 : TEMPORARY Record "Inc. Doc. Attachment Overview";VAR SortingOrder@1002 : Integer);
    VAR
      URL@1001 : Text;
    BEGIN
      URL := IncomingDocument.GetURL;
      if URL = '' then
        exit;

      CLEAR(TempIncDocAttachmentOverview);
      TempIncDocAttachmentOverview.INIT;
      TempIncDocAttachmentOverview."Incoming Document Entry No." := IncomingDocument."Entry No.";
      AssignSortingNo(TempIncDocAttachmentOverview,SortingOrder);
      TempIncDocAttachmentOverview.Name := COPYSTR(URL,1,MAXSTRLEN(TempIncDocAttachmentOverview.Name));
      TempIncDocAttachmentOverview."Attachment Type" := TempIncDocAttachmentOverview."Attachment Type"::Link;
      TempIncDocAttachmentOverview.INSERT(true);
    END;

    LOCAL PROCEDURE InsertFromIncomingDocumentAttachment@7(VAR TempIncDocAttachmentOverview@1001 : TEMPORARY Record "Inc. Doc. Attachment Overview";IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";VAR SortingOrder@1002 : Integer;AttachmentType@1003 : Option;Indentation2@1004 : Integer);
    BEGIN
      CLEAR(TempIncDocAttachmentOverview);
      TempIncDocAttachmentOverview.INIT;
      TempIncDocAttachmentOverview.TRANSFERFIELDS(IncomingDocumentAttachment);
      AssignSortingNo(TempIncDocAttachmentOverview,SortingOrder);
      TempIncDocAttachmentOverview."Attachment Type" := AttachmentType;
      TempIncDocAttachmentOverview.Indentation := Indentation2;
      TempIncDocAttachmentOverview.INSERT(true);
    END;

    LOCAL PROCEDURE InsertGroup@10(VAR TempIncDocAttachmentOverview@1001 : TEMPORARY Record "Inc. Doc. Attachment Overview";IncomingDocument@1000 : Record "Incoming Document";VAR SortingOrder@1002 : Integer;Description@1003 : Text[50]);
    BEGIN
      CLEAR(TempIncDocAttachmentOverview);
      TempIncDocAttachmentOverview.INIT;
      TempIncDocAttachmentOverview."Incoming Document Entry No." := IncomingDocument."Entry No.";
      AssignSortingNo(TempIncDocAttachmentOverview,SortingOrder);
      TempIncDocAttachmentOverview."Attachment Type" := TempIncDocAttachmentOverview."Attachment Type"::Group;
      TempIncDocAttachmentOverview.Type := Type::" ";
      TempIncDocAttachmentOverview.Name := Description;
      TempIncDocAttachmentOverview.INSERT(true);
    END;

    LOCAL PROCEDURE AssignSortingNo@5(VAR TempIncDocAttachmentOverview@1000 : TEMPORARY Record "Inc. Doc. Attachment Overview";VAR SortingOrder@1001 : Integer);
    BEGIN
      SortingOrder += 1;
      TempIncDocAttachmentOverview."Sorting Order" := SortingOrder;
    END;

    BEGIN
    END.
  }
}

