OBJECT Table 1050 Additional Fee Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Additional Fee Setup;
    LookupPageID="Additional Fee Setup";
    DrillDownPageID="Additional Fee Setup";
  }
  FIELDS
  {
    { 1   ;   ;Charge Per Line     ;Boolean       ;CaptionML=ENU=Charge Per Line }
    { 2   ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms".Code;
                                                   CaptionML=ENU=Reminder Terms Code;
                                                   NotBlank=true }
    { 3   ;   ;Reminder Level No.  ;Integer       ;TableRelation="Reminder Level"."No.";
                                                   CaptionML=ENU=Reminder Level No.;
                                                   NotBlank=true }
    { 4   ;   ;Currency Code       ;Code10        ;TableRelation=Currency.Code;
                                                   CaptionML=ENU=Currency Code }
    { 5   ;   ;Threshold Remaining Amount;Decimal ;CaptionML=ENU=Threshold Remaining Amount;
                                                   MinValue=0 }
    { 6   ;   ;Additional Fee Amount;Decimal      ;CaptionML=ENU=Additional Fee Amount;
                                                   MinValue=0 }
    { 7   ;   ;Additional Fee %    ;Decimal       ;CaptionML=ENU=Additional Fee %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 8   ;   ;Min. Additional Fee Amount;Decimal ;OnValidate=BEGIN
                                                                if ("Max. Additional Fee Amount" > 0) and ("Min. Additional Fee Amount" > "Max. Additional Fee Amount") then
                                                                  ERROR(STRSUBSTNO(InvalidMaxAddFeeErr,FIELDCAPTION("Min. Additional Fee Amount"),FIELDCAPTION("Max. Additional Fee Amount")));
                                                              END;

                                                   CaptionML=ENU=Min. Additional Fee Amount;
                                                   MinValue=0 }
    { 9   ;   ;Max. Additional Fee Amount;Decimal ;OnValidate=BEGIN
                                                                if ("Max. Additional Fee Amount" > 0) and ("Min. Additional Fee Amount" > "Max. Additional Fee Amount") then
                                                                  ERROR(STRSUBSTNO(InvalidMaxAddFeeErr,FIELDCAPTION("Min. Additional Fee Amount"),FIELDCAPTION("Max. Additional Fee Amount")));
                                                              END;

                                                   CaptionML=ENU=Max. Additional Fee Amount;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;"Reminder Terms Code","Reminder Level No.","Charge Per Line","Currency Code","Threshold Remaining Amount";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InvalidMaxAddFeeErr@1001 : TextConst '@@@=%1 : Min. Additional Fee Amount,%2 : Max Additional Fee Amount;ENU=The value of the %1 field is greater than the value of the %2 field. You must change one of the values.';

    LOCAL PROCEDURE CalculateAddFeeSingleDynamic@1(VAR AdditionalFeeSetup@1000 : Record "Additional Fee Setup";RemainingAmount@1002 : Decimal) : Decimal;
    VAR
      AdditionalFee@1001 : Decimal;
    BEGIN
      with AdditionalFeeSetup do begin
        if not FINDSET then
          exit(0);
        repeat
          if RemainingAmount >= "Threshold Remaining Amount" then begin
            if "Additional Fee Amount" > 0 then
              AdditionalFee := "Additional Fee Amount";

            if "Additional Fee %" > 0 then
              AdditionalFee += RemainingAmount * "Additional Fee %" / 100;

            if ("Max. Additional Fee Amount" > 0) and (AdditionalFee > "Max. Additional Fee Amount") then
              AdditionalFee := "Max. Additional Fee Amount";

            if AdditionalFee < "Min. Additional Fee Amount" then
              AdditionalFee := "Min. Additional Fee Amount";

            exit(AdditionalFee);
          end;
        until NEXT = 0;
        exit(0);
      end;
    END;

    LOCAL PROCEDURE CalculateAddFeeAccumulatedDynamic@1000(VAR AdditionalFeeSetup@1000 : Record "Additional Fee Setup";RemainingAmount@1002 : Decimal) : Decimal;
    VAR
      AdditionalFee@1001 : Decimal;
      RangeAddFeeAmount@1004 : Decimal;
    BEGIN
      with AdditionalFeeSetup do begin
        if not FINDSET then
          exit(0);
        repeat
          if RemainingAmount >= "Threshold Remaining Amount" then begin
            RangeAddFeeAmount := 0;

            if "Additional Fee Amount" > 0 then
              RangeAddFeeAmount := "Additional Fee Amount";

            if "Additional Fee %" > 0 then
              RangeAddFeeAmount += ((RemainingAmount - "Threshold Remaining Amount") * "Additional Fee %") / 100;

            if "Max. Additional Fee Amount" > 0 then
              if RangeAddFeeAmount > "Max. Additional Fee Amount" then
                RangeAddFeeAmount := "Max. Additional Fee Amount";

            if RangeAddFeeAmount < "Min. Additional Fee Amount" then
              RangeAddFeeAmount := "Min. Additional Fee Amount";

            RemainingAmount := "Threshold Remaining Amount";
            AdditionalFee += RangeAddFeeAmount;
          end;
        until NEXT = 0;
      end;
      exit(AdditionalFee);
    END;

    [Internal]
    PROCEDURE GetAdditionalFeeFromSetup@5(ReminderLevel@1001 : Record "Reminder Level";RemAmount@1002 : Decimal;CurrencyCode@1003 : Code[10];ChargePerLine@1004 : Boolean;AddFeeCalcType@1000 : Option;PostingDate@1008 : Date) : Decimal;
    VAR
      AdditionalFeeSetup@1010 : Record "Additional Fee Setup";
      CurrExchRate@1007 : Record "Currency Exchange Rate";
      FeeAmountInLCY@1006 : Decimal;
      RemAmountLCY@1009 : Decimal;
    BEGIN
      with AdditionalFeeSetup do begin
        ASCENDING(false);
        SETRANGE("Charge Per Line",ChargePerLine);
        SETRANGE("Reminder Terms Code",ReminderLevel."Reminder Terms Code");
        SETRANGE("Reminder Level No.",ReminderLevel."No.");
        SETRANGE("Currency Code",CurrencyCode);
        if FINDFIRST then begin
          if AddFeeCalcType = ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic" then
            exit(CalculateAddFeeSingleDynamic(AdditionalFeeSetup,RemAmount));

          if AddFeeCalcType = ReminderLevel."Add. Fee Calculation Type"::"Accumulated Dynamic" then
            exit(CalculateAddFeeAccumulatedDynamic(AdditionalFeeSetup,RemAmount));
        end else
          if CurrencyCode <> '' then begin
            SETRANGE("Currency Code",'');
            if FINDFIRST then begin
              RemAmountLCY :=
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PostingDate,CurrencyCode,RemAmount,CurrExchRate.ExchangeRate(PostingDate,CurrencyCode));
              if AddFeeCalcType = ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic" then
                FeeAmountInLCY := CalculateAddFeeSingleDynamic(AdditionalFeeSetup,RemAmountLCY)
              else
                if AddFeeCalcType = ReminderLevel."Add. Fee Calculation Type"::"Accumulated Dynamic" then
                  FeeAmountInLCY := CalculateAddFeeAccumulatedDynamic(AdditionalFeeSetup,RemAmountLCY);
              exit(CurrExchRate.ExchangeAmtLCYToFCY(
                  PostingDate,CurrencyCode,
                  FeeAmountInLCY,
                  CurrExchRate.ExchangeRate(PostingDate,CurrencyCode)));
            end;
            exit(0);
          end;
        exit(0);
      end;
    END;

    BEGIN
    END.
  }
}

