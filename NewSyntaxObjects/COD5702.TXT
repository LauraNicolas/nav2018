OBJECT Codeunit 5702 Dist. Integration
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There are no items with cross reference: %1';
      ItemCrossReference@1001 : Record "Item Cross Reference";
      SalesLine@1002 : Record "Sales Line";
      PurchLine@1003 : Record "Purchase Line";
      ItemVariant@1007 : Record "Item Variant";
      Item@1008 : Record Item;
      Found@1005 : Boolean;
      TempCrossRefItem@1006 : Code[20];
      Text001@1004 : TextConst 'ENU=The Quantity per Unit of Measure for Unit of Measure Code %1 has changed from %2 to %3 since the sales order was created. Adjust the quantity on the sales order or the %1.';

    [External]
    PROCEDURE EnterSalesItemCrossRef@20(VAR SalesLine2@1000 : Record "Sales Line");
    BEGIN
      with SalesLine2 do
        if Type = Type::Item then begin
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.","No.");
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Customer);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          if ItemCrossReference.FIND('-') then
            Found := true
          else begin
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FIND('-');
          end;

          if Found then begin
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            if ItemCrossReference.Description <> '' then begin
              Description := ItemCrossReference.Description;
              "Description 2" := '';
            end;
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          end else begin
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            if "Variant Code" <> '' then begin
              ItemVariant.GET("No.","Variant Code");
              Description := ItemVariant.Description;
              "Description 2" := ItemVariant."Description 2";
            end else begin
              Item.GET("No.");
              Description := Item.Description;
              "Description 2" := Item."Description 2";
            end;
            GetItemTranslation;
          end;
        end;
    END;

    [External]
    PROCEDURE ICRLookupSalesItem@2(VAR SalesLine2@1000 : Record "Sales Line";VAR ReturnedCrossRef@1001 : Record "Item Cross Reference");
    BEGIN
      with ItemCrossReference do begin
        SalesLine.COPY(SalesLine2);
        if SalesLine.Type = SalesLine.Type::Item then begin
          TempCrossRefItem := SalesLine2."Cross-Reference No.";

          RESET;
          SETCURRENTKEY(
            "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
          SETRANGE("Cross-Reference No.",SalesLine."Cross-Reference No.");
          SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
          SETRANGE("Discontinue Bar Code",false);
          SETFILTER("Cross-Reference Type No.",'%1|%2',SalesLine."Sell-to Customer No.",'');
          SETRANGE("Item No.",SalesLine."No.");
          if not FIND('-') then begin
            SETRANGE("Item No.");
            if not FIND('-') then
              ERROR(Text000,TempCrossRefItem);
            if NEXT <> 0 then begin
              SETRANGE("Cross-Reference Type No.",SalesLine."Sell-to Customer No.");
              if FIND('-') then
                if NEXT <> 0 then begin
                  SETRANGE("Cross-Reference Type No.");
                  if PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) <> ACTION::LookupOK
                  then
                    ERROR(Text000,TempCrossRefItem);
                end;
            end;
          end;
          ReturnedCrossRef.COPY(ItemCrossReference);
        end;
      end;
    END;

    [External]
    PROCEDURE EnterPurchaseItemCrossRef@3(VAR PurchLine2@1000 : Record "Purchase Line");
    BEGIN
      with PurchLine2 do
        if Type = Type::Item then begin
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.","No.");
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Vendor);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          if ItemCrossReference.FIND('-') then
            Found := true
          else begin
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FIND('-');
          end;

          if Found then begin
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
            if ItemCrossReference.Description <> '' then begin
              Description := ItemCrossReference.Description;
              "Description 2" := '';
            end;
          end else begin
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            if "Variant Code" <> '' then begin
              ItemVariant.GET("No.","Variant Code");
              Description := ItemVariant.Description;
              "Description 2" := ItemVariant."Description 2";
            end else begin
              Item.GET("No.");
              Description := Item.Description;
              "Description 2" := Item."Description 2";
            end;
            GetItemTranslation;
          end;
        end;
    END;

    [External]
    PROCEDURE ICRLookupPurchaseItem@4(VAR PurchLine2@1000 : Record "Purchase Line";VAR ReturnedCrossRef@1001 : Record "Item Cross Reference");
    BEGIN
      with ItemCrossReference do begin
        PurchLine.COPY(PurchLine2);
        if PurchLine.Type = PurchLine.Type::Item then begin
          TempCrossRefItem := PurchLine2."Cross-Reference No.";
          RESET;
          SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
          SETRANGE("Cross-Reference No.",PurchLine."Cross-Reference No.");
          SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Customer);
          SETRANGE("Discontinue Bar Code",false);
          SETFILTER("Cross-Reference Type No.",'%1|%2',PurchLine."Buy-from Vendor No.",'');
          SETRANGE("Item No.",PurchLine."No.");
          if not FIND('-') then begin
            SETRANGE("Item No.");
            if not FIND('-') then
              ERROR(Text000,TempCrossRefItem);
            if NEXT <> 0 then begin
              SETRANGE("Cross-Reference Type No.",PurchLine."Buy-from Vendor No.");
              if FIND('-') then
                if NEXT <> 0 then begin
                  SETRANGE("Cross-Reference Type No.");
                  if PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) <> ACTION::LookupOK
                  then
                    ERROR(Text000,TempCrossRefItem);
                end;
            end;
          end;
          ReturnedCrossRef.COPY(ItemCrossReference);
        end;
      end;
    END;

    LOCAL PROCEDURE CreateItemCrossReference@1(ItemVend@1000 : Record "Item Vendor");
    VAR
      Item@1002 : Record Item;
      ItemCrossReference2@1001 : Record "Item Cross Reference";
      Vend@1003 : Record Vendor;
      ItemTranslation@1004 : Record "Item Translation";
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",ItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",ItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",ItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",ItemVend."Vendor Item No.");
      if not ItemCrossReference2.FINDFIRST then begin
        ItemCrossReference2.INIT;
        ItemCrossReference2.VALIDATE("Item No.",ItemVend."Item No.");
        ItemCrossReference2.VALIDATE("Variant Code",ItemVend."Variant Code");
        ItemCrossReference2.VALIDATE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
        ItemCrossReference2.VALIDATE("Cross-Reference Type No.",ItemVend."Vendor No.");
        ItemCrossReference2."Cross-Reference No." := ItemVend."Vendor Item No.";
        Item.GET(ItemVend."Item No.");
        ItemCrossReference2.Description := Item.Description;
        if Vend.GET(ItemVend."Vendor No.") then
          if Vend."Language Code" <> '' then
            if ItemTranslation.GET(Item."No.",ItemVend."Variant Code",Vend."Language Code") then
              ItemCrossReference2.Description := ItemTranslation.Description;
        if ItemCrossReference2."Unit of Measure" = '' then
          ItemCrossReference2.VALIDATE("Unit of Measure",Item."Base Unit of Measure");
        ItemCrossReference2.INSERT;
      end;
    END;

    [External]
    PROCEDURE DeleteItemCrossReference@9(ItemVend@1000 : Record "Item Vendor");
    VAR
      ItemCrossReference2@1001 : Record "Item Cross Reference";
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",ItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",ItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",ItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",ItemVend."Vendor Item No.");
      if ItemCrossReference2.FINDFIRST then
        ItemCrossReference2.DELETEALL;
    END;

    [External]
    PROCEDURE UpdateItemCrossReference@6(ItemVend@1000 : Record "Item Vendor";xItemVend@1001 : Record "Item Vendor");
    VAR
      ItemCrossReference2@1003 : Record "Item Cross Reference";
      ItemCrossReference3@1004 : Record "Item Cross Reference";
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",xItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",xItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",xItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",xItemVend."Vendor Item No.");
      if ItemCrossReference2.FINDSET then begin
        repeat
          ItemCrossReference3.INIT;
          ItemCrossReference3 := ItemCrossReference2;
          ItemCrossReference3."Cross-Reference No." := xItemVend."Vendor Item No.";
          ItemCrossReference3.DELETE;
          CreateItemCrossReference(ItemVend);
        until ItemCrossReference2.NEXT = 0;
      end else
        CreateItemCrossReference(ItemVend);
    END;

    [Internal]
    PROCEDURE GetSpecialOrders@5(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      PurchLine2@1005 : Record "Purchase Line";
      ItemUnitOfMeasure@1006 : Record "Item Unit of Measure";
      Vendor@1007 : Record Vendor;
      TransferExtendedText@1002 : Codeunit "Transfer Extended Text";
      CopyDocMgt@1004 : Codeunit "Copy Document Mgt.";
      NextLineNo@1003 : Integer;
    BEGIN
      with PurchHeader do begin
        TESTFIELD("Document Type","Document Type"::Order);

        SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
        if (PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) <> ACTION::LookupOK) or
           (SalesHeader."No." = '')
        then
          exit;
        LOCKTABLE;
        SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Order);
        TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        if "Ship-to Code" <> '' then
          TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
        if SpecialOrderExists(SalesHeader) then begin
          VALIDATE("Location Code",SalesHeader."Location Code");
          AddSpecialOrderToAddress(SalesHeader,true);
        end;

        if Vendor.GET("Buy-from Vendor No.") then
          VALIDATE("Shipment Method Code",Vendor."Shipment Method Code");

        PurchLine.LOCKTABLE;
        SalesLine.LOCKTABLE;

        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.","No.");
        if PurchLine.FINDLAST then
          NextLineNo := PurchLine."Line No." + 10000
        else
          NextLineNo := 10000;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Special Order",true);
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("No.",'<>%1','');
        SalesLine.SETRANGE("Special Order Purch. Line No.",0);

        if SalesLine.FINDSET then
          repeat
            if (SalesLine.Type = SalesLine.Type::Item) and ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code") then
              if SalesLine."Qty. per Unit of Measure" <> ItemUnitOfMeasure."Qty. per Unit of Measure" then
                ERROR(Text001,
                  SalesLine."Unit of Measure Code",
                  SalesLine."Qty. per Unit of Measure",
                  ItemUnitOfMeasure."Qty. per Unit of Measure");
            PurchLine.INIT;
            PurchLine."Document Type" := PurchLine."Document Type"::Order;
            PurchLine."Document No." := "No.";
            PurchLine."Line No." := NextLineNo;
            CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
            PurchLine.GetItemTranslation;
            PurchLine."Special Order" := true;
            PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
            PurchLine."Special Order Sales No." := SalesLine."Document No.";
            PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
            PurchLine.INSERT;
            NextLineNo := NextLineNo + 10000;

            SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine."Special Order Purchase No." := PurchLine."Document No.";
            SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
            SalesLine.MODIFY;
            if TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,true) then begin
              TransferExtendedText.InsertPurchExtText(PurchLine);
              PurchLine2.SETRANGE("Document Type","Document Type");
              PurchLine2.SETRANGE("Document No.","No.");
              if PurchLine2.FINDLAST then
                NextLineNo := PurchLine2."Line No.";
              NextLineNo := NextLineNo + 10000;
            end;
          until SalesLine.NEXT = 0
        else
          ERROR(
            Text000,
            SalesHeader."No.");

        MODIFY; // Only version check
        SalesHeader.MODIFY; // Only version check
      end;
    END;

    BEGIN
    END.
  }
}

