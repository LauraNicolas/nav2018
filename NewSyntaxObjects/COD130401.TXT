OBJECT Codeunit 130401 CAL Test Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Window@1006 : Dialog;
      Mode@1003 : 'Test,Publish';
      AddingTestCodeunitsMsg@1004 : TextConst '@@@={Locked};ENU=Adding Test Codeunits @1@@@@@@@';
      SelectTestsToRunQst@1000 : TextConst '@@@={Locked};ENU=Active &Line,Active &Codeunit,&All';
      SelectTestsToImportQst@1014 : TextConst '@@@={Locked};ENU=&Select Test Codeunits,&All Test Codeunits';
      SelectTestsToImportFromTCMQst@1001 : TextConst '@@@={Locked};ENU=&Select Test Codeunits,&All Test Codeunits,&Get Tests Codeunits based on Modified Objects,Get Tests Codeunits based on Selected &Objects';
      SelectCodeunitsToRunQst@1013 : TextConst '@@@={Locked};ENU=,Active &Codeunit,&All';
      DefaultTxt@1005 : TextConst '@@@={Locked};ENU=DEFAULT';
      DefaultSuiteTxt@1002 : TextConst '@@@={Locked};ENU=Default Suite - Autogenerated';
      ObjectNotCompiledErr@1007 : TextConst '@@@={Locked};ENU=Object not compiled.';
      WindowUpdateDateTime@1010 : DateTime;
      NoOfRecords@1009 : Integer;
      i@1008 : Integer;
      AddingTestsBasedOnChurnMsg@1011 : TextConst '@@@={Locked};ENU=Adding %1 test codeunits based on churn @1@@@@@@@';
      NoModifiedObjectsFoundMsg@1012 : TextConst '@@@={Locked};ENU=No modified objects found.';

    [External]
    PROCEDURE SETPUBLISHMODE@1();
    BEGIN
      Mode := Mode::Publish;
    END;

    [External]
    PROCEDURE SETTESTMODE@2();
    BEGIN
      Mode := Mode::Test;
    END;

    [External]
    PROCEDURE ISPUBLISHMODE@3() : Boolean;
    BEGIN
      exit(Mode = Mode::Publish);
    END;

    [External]
    PROCEDURE ISTESTMODE@4() : Boolean;
    BEGIN
      exit(Mode = Mode::Test);
    END;

    [External]
    PROCEDURE DoesTestCodeunitExist@25(ID@1000 : Integer) : Boolean;
    VAR
      AllObjWithCaption@1001 : Record AllObjWithCaption;
    BEGIN
      AllObjWithCaption.RESET;
      AllObjWithCaption.SETRANGE("Object ID",ID);
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Codeunit);
      AllObjWithCaption.SETRANGE("Object Subtype",'Test');
      exit(not AllObjWithCaption.ISEMPTY);
    END;

    [Internal]
    PROCEDURE GetTestCodeunitsSelection@11(CALTestSuite@1001 : Record "CAL Test Suite");
    VAR
      CALTestLine@1003 : Record "CAL Test Line";
      AllObjWithCaption@1006 : Record AllObjWithCaption;
      TempAllObjWithCaption@1004 : TEMPORARY Record AllObjWithCaption;
      CALTestCoverageMap@1005 : Record "CAL Test Coverage Map";
      CALTestGetCodeunits@1002 : Page "CAL Test Get Codeunits";
      Selection@1000 : Integer;
    BEGIN
      if CALTestCoverageMap.ISEMPTY then
        Selection := STRMENU(SelectTestsToImportQst,1)
      else
        Selection := STRMENU(SelectTestsToImportFromTCMQst,1);

      if Selection = 0 then
        exit;

      case Selection of
        1:
          begin
            CALTestGetCodeunits.LOOKUPMODE := true;
            if CALTestGetCodeunits.RUNMODAL = ACTION::LookupOK then begin
              CALTestGetCodeunits.SETSELECTIONFILTER(AllObjWithCaption);
              AddTestCodeunits(CALTestSuite,AllObjWithCaption);
            end;
          end;
        2:
          begin
            CALTestLine.SETRANGE("Test Suite",CALTestSuite.Name);
            CALTestLine.DELETEALL(true);
            if GetTestCodeunits(TempAllObjWithCaption) then
              RefreshSuite(CALTestSuite,TempAllObjWithCaption);
          end;
        3:
          GetTestCodeunitsForModifiedObjects(CALTestSuite.Name);
        4:
          GetTestCodeunitsForSelectedObjects(CALTestSuite.Name);
      end;
    END;

    LOCAL PROCEDURE GetTestCodeunits@6(VAR ToAllObjWithCaption@1000 : Record AllObjWithCaption) : Boolean;
    VAR
      FromAllObjWithCaption@1001 : Record AllObjWithCaption;
    BEGIN
      with ToAllObjWithCaption do begin
        FromAllObjWithCaption.SETRANGE("Object Type","Object Type"::Codeunit);
        FromAllObjWithCaption.SETRANGE("Object Subtype",'Test');
        if FromAllObjWithCaption.FIND('-') then
          repeat
            ToAllObjWithCaption := FromAllObjWithCaption;
            INSERT;
          until FromAllObjWithCaption.NEXT = 0;
      end;

      exit(ToAllObjWithCaption.FIND('-'));
    END;

    LOCAL PROCEDURE GetTestCodeunitsForObjects@22(VAR Object@1005 : Record Object;CALTestSuiteName@1007 : Code[10]);
    VAR
      TempMissingCUId@1004 : TEMPORARY Record Integer;
      TempTestCodeunitID@1008 : TEMPORARY Record Integer;
      CALTestMissingCodeunits@1002 : Page "CAL Test Missing Codeunits";
      TestLineNo@1001 : Integer;
      TestCodeunitsNumber@1000 : Integer;
    BEGIN
      Object.SETFILTER(Type,'<>%1',Object.Type::TableData);
      if Object.FINDSET then begin
        TestCodeunitsNumber := GetTotalTestCodeunitIDs(Object,TempTestCodeunitID);
        OpenWindow(STRSUBSTNO(AddingTestsBasedOnChurnMsg,TestCodeunitsNumber),TestCodeunitsNumber);
        TestLineNo := GetLastTestLineNo(CALTestSuiteName);
        if TempTestCodeunitID.FINDSET then
          repeat
            if DoesTestCodeunitExist(TempTestCodeunitID.Number) then begin
              if not TestLineExists(CALTestSuiteName,TempTestCodeunitID.Number) then begin
                TestLineNo := TestLineNo + 10000;
                AddTestLine(CALTestSuiteName,TempTestCodeunitID.Number,TestLineNo);
                UpdateWindow;
              end
            end else begin
              TempMissingCUId.Number := TempTestCodeunitID.Number;
              TempMissingCUId.INSERT;
            end;
          until TempTestCodeunitID.NEXT = 0;
        Window.CLOSE;
      end else
        MESSAGE(NoModifiedObjectsFoundMsg);

      if not TempMissingCUId.ISEMPTY then begin
        COMMIT;
        CALTestMissingCodeunits.Initialize(TempMissingCUId,CALTestSuiteName);
        CALTestMissingCodeunits.RUNMODAL;
      end;
    END;

    LOCAL PROCEDURE GetTestCodeunitsForModifiedObjects@14(CALTestSuiteName@1003 : Code[10]);
    VAR
      Object@1000 : Record Object;
    BEGIN
      Object.SETRANGE(Modified,true);
      GetTestCodeunitsForObjects(Object,CALTestSuiteName);
    END;

    LOCAL PROCEDURE GetTestCodeunitsForSelectedObjects@21(CALTestSuiteName@1000 : Code[10]);
    VAR
      Object@1006 : Record Object;
      CALTestObjectsToSelect@1008 : Page "CAL Test Objects To Select";
    BEGIN
      CALTestObjectsToSelect.LOOKUPMODE := true;
      CALTestObjectsToSelect.SETTABLEVIEW(Object);
      if CALTestObjectsToSelect.RUNMODAL = ACTION::LookupOK then begin
        CALTestObjectsToSelect.SETSELECTIONFILTER(Object);
        GetTestCodeunitsForObjects(Object,CALTestSuiteName);
      end;
    END;

    LOCAL PROCEDURE GetTotalTestCodeunitIDs@23(VAR Object@1000 : Record Object;VAR TestCodeunitID@1002 : Record Integer) : Integer;
    VAR
      CALTestCoverageMap@1001 : Record "CAL Test Coverage Map";
    BEGIN
      repeat
        CALTestCoverageMap.RESET;
        CALTestCoverageMap.SETRANGE("Object ID",Object.ID);
        CALTestCoverageMap.SETRANGE("Object Type",Object.Type);
        if CALTestCoverageMap.FINDSET then
          repeat
            if not TestCodeunitID.GET(CALTestCoverageMap."Test Codeunit ID") then begin
              TestCodeunitID.Number := CALTestCoverageMap."Test Codeunit ID";
              TestCodeunitID.INSERT;
            end;
          until CALTestCoverageMap.NEXT = 0;
      until Object.NEXT = 0;
      exit(TestCodeunitID.COUNT);
    END;

    LOCAL PROCEDURE GetLastTestLineNo@15(TestSuiteName@1001 : Code[10]) LineNo : Integer;
    VAR
      CALTestLine@1000 : Record "CAL Test Line";
    BEGIN
      CALTestLine.SETRANGE("Test Suite",TestSuiteName);
      if CALTestLine.FINDLAST then
        LineNo := CALTestLine."Line No.";
    END;

    [Internal]
    PROCEDURE CreateNewSuite@5(VAR NewSuiteName@1006 : Code[10]);
    VAR
      CALTestSuite@1001 : Record "CAL Test Suite";
    BEGIN
      with CALTestSuite do begin
        NewSuiteName := DefaultTxt;
        INIT;
        VALIDATE(Name,NewSuiteName);
        VALIDATE(Description,DefaultSuiteTxt);
        VALIDATE(Export,false);
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE RefreshSuite@7(CALTestSuite@1000 : Record "CAL Test Suite";VAR AllObjWithCaption@1005 : Record AllObjWithCaption);
    VAR
      CALTestLine@1004 : Record "CAL Test Line";
      LineNo@1001 : Integer;
    BEGIN
      with CALTestLine do begin
        LineNo := LineNo + 10000;

        INIT;
        VALIDATE("Test Suite",CALTestSuite.Name);
        VALIDATE("Line No.",LineNo);
        VALIDATE("Line Type","Line Type"::Group);
        VALIDATE(Name,DefaultSuiteTxt);
        VALIDATE(Run,true);
        INSERT(true);

        AddTestCodeunits(CALTestSuite,AllObjWithCaption);
      end;
    END;

    [Internal]
    PROCEDURE AddTestCodeunits@10(CALTestSuite@1001 : Record "CAL Test Suite";VAR AllObjWithCaption@1000 : Record AllObjWithCaption);
    VAR
      TestLineNo@1002 : Integer;
    BEGIN
      if AllObjWithCaption.FIND('-') then begin
        TestLineNo := GetLastTestLineNo(CALTestSuite.Name);
        OpenWindow(AddingTestCodeunitsMsg,AllObjWithCaption.COUNT);
        repeat
          TestLineNo := TestLineNo + 10000;
          AddTestLine(CALTestSuite.Name,AllObjWithCaption."Object ID",TestLineNo);
          UpdateWindow;
        until AllObjWithCaption.NEXT = 0;
        Window.CLOSE;
      end;
    END;

    [Internal]
    PROCEDURE AddMissingTestCodeunits@16(VAR TestCodeunitIds@1001 : Record Integer;TestSuiteName@1000 : Code[10]);
    VAR
      Object@1003 : Record Object;
      TestLineNo@1002 : Integer;
    BEGIN
      TestLineNo := GetLastTestLineNo(TestSuiteName);
      OpenWindow(STRSUBSTNO(AddingTestsBasedOnChurnMsg,TestCodeunitIds.COUNT),TestCodeunitIds.COUNT);

      repeat
        Object.SETRANGE(Type,Object.Type::Codeunit);
        Object.SETRANGE(ID,TestCodeunitIds.Number);
        if Object.FINDFIRST then begin
          TestLineNo := TestLineNo + 10000;
          AddTestLine(TestSuiteName,Object.ID,TestLineNo);
          UpdateWindow;
          TestCodeunitIds.DELETE;
        end;
      until TestCodeunitIds.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE AddTestLine@20(TestSuiteName@1001 : Code[10];TestCodeunitId@1002 : Integer;LineNo@1000 : Integer);
    VAR
      CALTestLine@1003 : Record "CAL Test Line";
      AllObj@1004 : Record AllObj;
      Object@1005 : Record Object;
      CodeunitIsValid@1006 : Boolean;
    BEGIN
      with CALTestLine do begin
        if TestLineExists(TestSuiteName,TestCodeunitId) then
          exit;

        INIT;
        VALIDATE("Test Suite",TestSuiteName);
        VALIDATE("Line No.",LineNo);
        VALIDATE("Line Type","Line Type"::Codeunit);
        VALIDATE("Test Codeunit",TestCodeunitId);
        VALIDATE(Run,true);

        INSERT(true);

        AllObj.SETRANGE("Object Type",AllObj."Object Type"::Codeunit);
        AllObj.SETRANGE("Object ID",TestCodeunitId);
        if FORMAT(AllObj."App Package ID") <> '' then
          CodeunitIsValid := true;

        if not CodeunitIsValid then begin
          Object.SETRANGE(Type,Object.Type::Codeunit);
          Object.SETRANGE(ID,TestCodeunitId);
          CodeunitIsValid := Object.FINDFIRST;
        end;

        if CodeunitIsValid then begin
          SETPUBLISHMODE;
          SETRECFILTER;
          CODEUNIT.RUN(CODEUNIT::"CAL Test Runner",CALTestLine);
        end else begin
          VALIDATE(Result,Result::Failure);
          VALIDATE("First Error",ObjectNotCompiledErr);
          MODIFY(true);
        end;
      end;
    END;

    LOCAL PROCEDURE TestLineExists@17(TestSuiteName@1000 : Code[10];TestCodeunitId@1001 : Integer) : Boolean;
    VAR
      CALTestLine@1002 : Record "CAL Test Line";
    BEGIN
      CALTestLine.SETRANGE("Test Suite",TestSuiteName);
      CALTestLine.SETRANGE("Test Codeunit",TestCodeunitId);
      exit(not CALTestLine.ISEMPTY);
    END;

    [External]
    PROCEDURE ExtendTestCoverage@18(TestCodeunitId@1000 : Integer);
    VAR
      CodeCoverage@1001 : Record "Code Coverage";
      CALTestCoverageMap@1002 : Record "CAL Test Coverage Map";
    BEGIN
      CodeCoverage.SETRANGE("Line Type",CodeCoverage."Line Type"::Object);
      if CodeCoverage.FINDSET then
        repeat
          if not CALTestCoverageMap.GET(TestCodeunitId,CodeCoverage."Object Type",CodeCoverage."Object ID") then begin
            CALTestCoverageMap.INIT;
            CALTestCoverageMap."Test Codeunit ID" := TestCodeunitId;
            CALTestCoverageMap."Object Type" := CodeCoverage."Object Type";
            CALTestCoverageMap."Object ID" := CodeCoverage."Object ID";
            CALTestCoverageMap.INSERT;
          end;
        until CodeCoverage.NEXT = 0;
    END;

    LOCAL PROCEDURE GetLineNoFilter@31(CALTestLine@1000 : Record "CAL Test Line";Selection@1003 : ',Function,Codeunit') LineNoFilter : Text;
    VAR
      NoOfFunctions@1002 : Integer;
    BEGIN
      LineNoFilter := '';
      case Selection of
        Selection::"Function":
          begin
            CALTestLine.TESTFIELD("Line Type",CALTestLine."Line Type"::"Function");
            LineNoFilter := FORMAT(CALTestLine."Line No.");
            CALTestLine.RESET;
            CALTestLine.SETRANGE("Test Suite",CALTestLine."Test Suite");
            CALTestLine.SETRANGE("Test Codeunit",CALTestLine."Test Codeunit");
            CALTestLine.SETFILTER("Function",'OnRun|%1','');
            CALTestLine.FINDSET;
            repeat
              LineNoFilter := LineNoFilter + '|' + FORMAT(CALTestLine."Line No.");
            until CALTestLine.NEXT = 0;
          end;
        Selection::Codeunit:
          LineNoFilter :=
            STRSUBSTNO('%1..%2',CALTestLine.GetMinCodeunitLineNo,CALTestLine.GetMaxCodeunitLineNo(NoOfFunctions));
      end;
    END;

    [External]
    PROCEDURE RunSelected@19(VAR CurrCALTestLine@1000 : Record "CAL Test Line");
    VAR
      CALTestLine@1004 : Record "CAL Test Line";
      CodeunitIsMarked@1002 : Boolean;
      LastCodeunitID@1003 : Integer;
      LineNoFilter@1006 : Text;
      Selection@1001 : ',Function,Codeunit';
      Separator@1005 : Text[1];
    BEGIN
      if CurrCALTestLine.ISEMPTY then
        exit;
      CALTestLine.COPY(CurrCALTestLine);
      Separator := '';
      LineNoFilter := '';
      CALTestLine.FINDSET;
      repeat
        if CALTestLine."Line Type" = CALTestLine."Line Type"::Codeunit then begin
          LineNoFilter := LineNoFilter + Separator + GetLineNoFilter(CALTestLine,Selection::Codeunit);
          LastCodeunitID := CALTestLine."Test Codeunit";
          CodeunitIsMarked := true;
        end else begin
          if LastCodeunitID <> CALTestLine."Test Codeunit" then begin
            LastCodeunitID := CALTestLine."Test Codeunit";
            LineNoFilter := LineNoFilter + Separator + GetLineNoFilter(CALTestLine,Selection::"Function");
            CodeunitIsMarked := false;
          end else
            if not CodeunitIsMarked then
              LineNoFilter := LineNoFilter + Separator + FORMAT(CALTestLine."Line No.")
        end;
        Separator := '|';
      until CALTestLine.NEXT = 0;

      CALTestLine.RESET;
      CALTestLine.SETRANGE("Test Suite",CurrCALTestLine."Test Suite");
      CALTestLine.SETFILTER("Line No.",LineNoFilter);
      RunSuite(CALTestLine,true);
    END;

    [External]
    PROCEDURE RunSuiteYesNo@9(VAR CurrCALTestLine@1003 : Record "CAL Test Line");
    VAR
      CALTestLine@1001 : Record "CAL Test Line";
      Selection@1005 : ',Function,Codeunit';
      LineNoFilter@1000 : Text;
    BEGIN
      if CurrCALTestLine.ISEMPTY then
        exit;
      CALTestLine.COPY(CurrCALTestLine);
      if CALTestLine."Line Type" = CALTestLine."Line Type"::Codeunit then
        Selection := STRMENU(SelectCodeunitsToRunQst,2)
      else
        Selection := STRMENU(SelectTestsToRunQst,1);

      if Selection = 0 then
        exit;

      LineNoFilter := GetLineNoFilter(CALTestLine,Selection);
      if LineNoFilter <> '' then
        CALTestLine.SETFILTER("Line No.",LineNoFilter);
      RunSuite(CALTestLine,true);
    END;

    [External]
    PROCEDURE RunSuite@8(VAR CALTestLine@1003 : Record "CAL Test Line";IsTestMode@1004 : Boolean);
    VAR
      CALTestLine2@1002 : Record "CAL Test Line";
      CALTestRunner@1000 : Codeunit "CAL Test Runner";
    BEGIN
      if IsTestMode then begin
        SETTESTMODE;
        CALTestRunner.RUN(CALTestLine);
      end else begin
        SETPUBLISHMODE;
        CALTestLine2.COPY(CALTestLine);
        CALTestLine2.SETRANGE("Line No.",CALTestLine."Line No.");
        CALTestLine2.TESTFIELD("Test Codeunit");
        CALTestLine2.TESTFIELD("Function",'');

        CALTestLine.DeleteChildren;
        CALTestLine2.DeleteChildren;

        CALTestRunner.RUN(CALTestLine2);
      end;
      CLEAR(CALTestRunner);
    END;

    LOCAL PROCEDURE OpenWindow@13(DisplayText@1001 : Text;NoOfRecords2@1000 : Integer);
    BEGIN
      i := 0;
      NoOfRecords := NoOfRecords2;
      WindowUpdateDateTime := CURRENTDATETIME;
      Window.OPEN(DisplayText);
    END;

    LOCAL PROCEDURE UpdateWindow@12();
    BEGIN
      i := i + 1;
      if CURRENTDATETIME - WindowUpdateDateTime >= 1000 then begin
        WindowUpdateDateTime := CURRENTDATETIME;
        Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
      end;
    END;

    [External]
    PROCEDURE EnableTestToRun@26();
    VAR
      CALTestEnabledCodeunit@1001 : Record "CAL Test Enabled Codeunit";
      AllObjWithCaption@1000 : Record AllObjWithCaption;
    BEGIN
      CALTestEnabledCodeunit.DELETEALL;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Codeunit);
      AllObjWithCaption.SETRANGE("Object Subtype",'Test');
      if AllObjWithCaption.FINDSET then
        repeat
          CALTestEnabledCodeunit.INIT;
          CALTestEnabledCodeunit."Test Codeunit ID" := AllObjWithCaption."Object ID";
          CALTestEnabledCodeunit.INSERT;
        until AllObjWithCaption.NEXT = 0;
    END;

    [Internal]
    PROCEDURE ExportTCM@24(FileName@1000 : Text);
    VAR
      CALTestCoverageMap@1003 : XMLport "CAL Test Coverage Map";
      OutStream@1002 : OutStream;
      File@1001 : File;
    BEGIN
      if FileName = '' then
        exit;

      if EXISTS(FileName) then
        ERASE(FileName);

      if File.CREATE(FileName) then begin
        File.CREATEOUTSTREAM(OutStream);
        CALTestCoverageMap.SETDESTINATION(OutStream);
        CALTestCoverageMap.IMPORTFILE(false);
        CALTestCoverageMap.EXPORT;
        File.CLOSE;
      end;
    END;

    [Internal]
    PROCEDURE ExportTestResults@27(FileName@1000 : Text;SkipPassed@1006 : Boolean;LastTestRun@1005 : Boolean);
    VAR
      CALExportTestResult@1003 : XMLport "CAL Export Test Result";
      OutStream@1002 : OutStream;
      File@1001 : File;
    BEGIN
      if FileName = '' then
        exit;

      if EXISTS(FileName) then
        ERASE(FileName);

      if File.CREATE(FileName) then begin
        File.CREATEOUTSTREAM(OutStream);
        CALExportTestResult.SetParam(SkipPassed,LastTestRun);
        CALExportTestResult.SETDESTINATION(OutStream);
        CALExportTestResult.IMPORTFILE(false);
        CALExportTestResult.EXPORT;
        File.CLOSE;
      end;
    END;

    [Internal]
    PROCEDURE ImportTestToRun@28(FileName@1001 : Text;Clean@1004 : Boolean);
    VAR
      CALTestEnabledCodeunit@1005 : Record "CAL Test Enabled Codeunit";
      CALImportEnabledCodeunit@1003 : XMLport "CAL Import Enabled Codeunit";
      InStream@1002 : InStream;
      File@1000 : File;
    BEGIN
      if FileName = '' then
        exit;

      if not EXISTS(FileName) then
        exit;

      if Clean then
        CALTestEnabledCodeunit.DELETEALL;

      File.WRITEMODE(false);
      File.OPEN(FileName);
      File.CREATEINSTREAM(InStream);
      CALImportEnabledCodeunit.SETSOURCE(InStream);
      CALImportEnabledCodeunit.IMPORTFILE(true);
      CALImportEnabledCodeunit.IMPORT;
      File.CLOSE;
    END;

    BEGIN
    END.
  }
}

