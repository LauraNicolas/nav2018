OBJECT Report 99001023 Get Action Messages
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Action Messages;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  Window.OPEN(
                    '#1##########################\\' +
                    Text000);
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;Item                ;
               DataItemTable=Item;
               DataItemTableView=SORTING("Low-Level Code") WHERE("Order Tracking Policy"=CONST("Tracking & Action Msg."));
               OnPreDataItem=BEGIN
                               COPYFILTER("Variant Filter",ActionMessageEntry."Variant Code");
                               COPYFILTER("Location Filter",ActionMessageEntry."Location Code");
                               COPYFILTER("Bin Filter",ActionMessageEntry."Bin Code");

                               ReqLineExtern.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
                               ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                               COPYFILTER("Variant Filter",ReqLineExtern."Variant Code");
                               COPYFILTER("Location Filter",ReqLineExtern."Location Code");

                               ActionMessageEntry.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Source Batch Name",
                                 "Source Prod. Order Line","Source Ref. No.");
                               ActionMessageEntry2.SETCURRENTKEY("Reservation Entry");

                               TempItemInOtherWksh.DELETEALL;
                               TempActionMsgEntry.DELETEALL;
                               TempReqLineList.DELETEALL;
                               TempPlanningCompList.DELETEALL;

                               ManufacturingSetup.GET;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Text001);
                                  Window.UPDATE(2,"No.");

                                  if "Order Tracking Policy" <> "Order Tracking Policy"::"Tracking & Action Msg." then
                                    CurrReport.SKIP;
                                  ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                                  ReqLineExtern.SETRANGE("No.","No.");
                                  if ReqLineExtern.FINDFIRST then begin
                                    TempItemInOtherWksh := Item;
                                    TempItemInOtherWksh.INSERT;
                                    CurrReport.SKIP;
                                  end;

                                  ActionMessageEntry.SETRANGE("Item No.","No.");
                                  if ActionMessageEntry.FIND('-') then
                                    repeat
                                      ActionMessageEntry.SetSourceFilterFromActionEntry(ActionMessageEntry);
                                      ActionMessageEntry.SETRANGE("Location Code",ActionMessageEntry."Location Code");
                                      ActionMessageEntry.SETRANGE("Bin Code",ActionMessageEntry."Bin Code");
                                      ActionMessageEntry.SETRANGE("Variant Code",ActionMessageEntry."Variant Code");
                                      if ActionMessageEntry."Source ID" = '' then begin
                                        TempNewActionMsgEntry.DELETEALL;
                                        repeat
                                          TrkgReservEntry.GET(ActionMessageEntry."Reservation Entry",false);
                                          if TempNewActionMsgEntry.GET(
                                               TrkgReservEntry."Shipment Date" - 19000101D)
                                          then begin // Generate Entry No. in date order.
                                            TempNewActionMsgEntry.Quantity += ActionMessageEntry.Quantity;
                                            TempNewActionMsgEntry.MODIFY;
                                          end else begin
                                            TempNewActionMsgEntry := ActionMessageEntry;
                                            TempNewActionMsgEntry."Entry No." := TrkgReservEntry."Shipment Date" - 19000101D;
                                            TempNewActionMsgEntry."New Date" := TrkgReservEntry."Shipment Date";
                                            TempNewActionMsgEntry.INSERT;
                                          end;
                                        until ActionMessageEntry.NEXT = 0;

                                        TempNewActionMsgEntry.FIND('-');
                                        repeat
                                          TempActionMsgEntry := TempNewActionMsgEntry;
                                          NextEntryNo := NextEntryNo + 1;
                                          TempActionMsgEntry."Entry No." := NextEntryNo;
                                          TempActionMsgEntry.INSERT;
                                        until TempNewActionMsgEntry.NEXT = 0;
                                      end else begin
                                        if ActionMessageEntry.FIND('+') then
                                          UpdateActionMsgList(ActionMessageEntry."Source Type",ActionMessageEntry."Source Subtype",
                                            ActionMessageEntry."Source ID",ActionMessageEntry."Source Batch Name",
                                            ActionMessageEntry."Source Prod. Order Line",ActionMessageEntry."Source Ref. No.",
                                            ActionMessageEntry."Location Code",ActionMessageEntry."Bin Code",
                                            ActionMessageEntry."Variant Code",ActionMessageEntry."Item No.",0D);
                                      end;
                                      ActionMessageEntry.ClearSourceFilter;
                                      ActionMessageEntry.SETRANGE("Location Code");
                                      ActionMessageEntry.SETRANGE("Bin Code");
                                      ActionMessageEntry.SETRANGE("Variant Code");
                                    until ActionMessageEntry.NEXT = 0;
                                END;

               OnPostDataItem=BEGIN
                                if TempItemInOtherWksh.FINDFIRST then begin
                                  Window.CLOSE;
                                  if CONFIRM(Text002)then
                                    PAGE.RUNMODAL(0,TempItemInOtherWksh);
                                  if not CONFIRM(Text005) then
                                    ERROR(Text006);
                                  Window.OPEN(
                                    '#1##########################\\' +
                                    Text000);
                                end;

                                Window.UPDATE(1,Text007);

                                TempActionMsgEntry.RESET;
                                PlanningLinesInserted := false;
                                if not TempActionMsgEntry.FIND('-') then
                                  ERROR(Text008);

                                repeat
                                  GetActionMessages(TempActionMsgEntry);
                                until TempActionMsgEntry.NEXT = 0;

                                if not PlanningLinesInserted then
                                  ERROR(Text008);

                                // Dynamic tracking is run for the handled Planning Lines:
                                if TempReqLineList.FIND('-') then
                                  repeat
                                    ReservMgt.SetReqLine(TempReqLineList);
                                    ReservMgt.AutoTrack(TempReqLineList."Net Quantity (Base)");
                                  until TempReqLineList.NEXT = 0;

                                // Dynamic tracking is run for the handled Planning Components:
                                if TempPlanningCompList.FIND('-') then
                                  repeat
                                    ReservMgt.SetPlanningComponent(TempPlanningCompList);
                                    ReservMgt.AutoTrack(TempPlanningCompList."Net Quantity (Base)");
                                  until TempPlanningCompList.NEXT = 0;
                              END;

               ReqFilterFields="No.","Search Description" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Item No.  #2##################';
      Text001@1001 : TextConst 'ENU=Building action message list...';
      Text002@1002 : TextConst 'ENU=Some items within the filter already exist on the planning lines.\Action messages that are related to these items will not be processed.\\Do you want to see a list of the unprocessed items?';
      Text005@1005 : TextConst 'ENU=Do you want to continue?';
      Text006@1006 : TextConst 'ENU=The process has been canceled.';
      Text007@1007 : TextConst 'ENU=Processing action messages...';
      Text008@1008 : TextConst 'ENU=No action messages exist.';
      Text009@1009 : TextConst 'ENU=GetActionMessages: Illegal Action Message relation.';
      ReqLineExtern@1010 : Record "Requisition Line";
      TrkgReservEntry@1011 : Record "Reservation Entry";
      TempItemInOtherWksh@1012 : TEMPORARY Record Item;
      TempActionMsgEntry@1013 : TEMPORARY Record "Action Message Entry";
      TempNewActionMsgEntry@1014 : TEMPORARY Record "Action Message Entry";
      ActionMessageEntry@1015 : Record "Action Message Entry";
      ActionMessageEntry2@1016 : Record "Action Message Entry";
      ManufacturingSetup@1017 : Record "Manufacturing Setup";
      TempPlanningCompList@1018 : TEMPORARY Record "Planning Component";
      TempReqLineList@1019 : TEMPORARY Record "Requisition Line";
      SKU@1020 : Record "Stockkeeping Unit";
      InvtProfileOffsetting@1021 : Codeunit "Inventory Profile Offsetting";
      ReservMgt@1022 : Codeunit "Reservation Management";
      GetPlanningParameters@1023 : Codeunit "Planning-Get Parameters";
      Window@1024 : Dialog;
      NextEntryNo@1025 : Integer;
      CurrTemplateName@1026 : Code[10];
      CurrWorksheetName@1027 : Code[10];
      PlanningLinesInserted@1028 : Boolean;

    [External]
    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
    END;

    [External]
    PROCEDURE UpdateActionMsgList@1(ForType@1000 : Integer;ForSubtype@1001 : Integer;ForID@1002 : Code[20];ForBatchName@1003 : Code[10];ForProdOrderLine@1004 : Integer;ForRefNo@1005 : Integer;ForLocation@1006 : Code[10];ForBin@1007 : Code[10];ForVariant@1008 : Code[10];ForItem@1009 : Code[20];OrderDate@1010 : Date);
    BEGIN
      with TempActionMsgEntry do begin
        SetSourceFilter(ForType,ForSubtype,ForID,ForRefNo,false);
        SetSourceFilter2(ForBatchName,ForProdOrderLine);
        SETRANGE("Location Code",ForLocation);
        SETRANGE("Bin Code",ForBin);
        SETRANGE("Variant Code",ForVariant);
        SETRANGE("Item No.",ForItem);
        SETRANGE("New Date",OrderDate);
        if FIND('-') then
          exit;

        SetSource(ForType,ForSubtype,ForID,ForRefNo,ForBatchName,ForProdOrderLine);
        "Location Code" := ForLocation;
        "Bin Code" := ForBin;
        "Variant Code" := ForVariant;
        "Item No." := ForItem;
        "New Date" := OrderDate;
        NextEntryNo := NextEntryNo + 1;
        "Entry No." := NextEntryNo;
        INSERT;
      end;
    END;

    [Internal]
    PROCEDURE GetActionMessages@10(ActionMsgEntry@1000 : Record "Action Message Entry");
    VAR
      ReqLine@1003 : Record "Requisition Line";
      InsertNew@1005 : Boolean;
    BEGIN
      if ActionMsgEntry."Source ID" = '' then begin // Not related to existing order.
        ActionMessageEntry := ActionMsgEntry;
      end else begin
        ActionMessageEntry.SetSourceFilterFromActionEntry(ActionMsgEntry);
        ActionMessageEntry.SETRANGE("Location Code",ActionMsgEntry."Location Code");
        ActionMessageEntry.SETRANGE("Bin Code",ActionMsgEntry."Bin Code");
        ActionMessageEntry.SETRANGE("Variant Code",ActionMsgEntry."Variant Code");
        ActionMessageEntry.SETRANGE("Item No.",ActionMsgEntry."Item No.");
        if not ActionMessageEntry.FIND('-') then
          exit;
      end;

      with ActionMessageEntry do begin
        GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
        InsertNew := false;
        ReqLine."Worksheet Template Name" := CurrTemplateName;
        ReqLine."Journal Batch Name" := CurrWorksheetName;
        ReqLine."Line No." += 10000;
        while not ReqLine.INSERT do
          ReqLine."Line No." += 10000;

        InsertNew := InitReqFromSource(ActionMsgEntry,ReqLine);

        Window.UPDATE(2,ReqLine."No.");

        if ActionMsgEntry."Source ID" = '' then begin
          Quantity := ActionMsgEntry.Quantity;
          Type := Type::New;
          ReqLine."Due Date" := ActionMsgEntry."New Date";
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        end else
          SumUp(ActionMessageEntry);

        if Quantity < 0 then
          if SKU."Lot Size" > 0 then
            if ManufacturingSetup."Default Dampener %" > 0 then
              if ManufacturingSetup."Default Dampener %" * SKU."Lot Size" / 100 >= ABS(Quantity) then
                Quantity := 0;
        if (Quantity = 0) and ("New Date" = 0D) then
          exit;

        ReqLine."Original Quantity" := ReqLine.Quantity;
        ReqLine."Quantity (Base)" += Quantity;
        ReqLine.Quantity := ROUND(ReqLine."Quantity (Base)" / ReqLine."Qty. per Unit of Measure",0.00001);
        ReqLine."Remaining Quantity" := ReqLine.Quantity - ReqLine."Finished Quantity";
        ReqLine."Remaining Qty. (Base)" :=
          ROUND(ReqLine."Remaining Quantity" / ReqLine."Qty. per Unit of Measure",0.00001);
        if InsertNew then
          Type := Type::New;
        if "New Date" <> 0D then begin
          if Type <> Type::New then
            ReqLine."Original Due Date" := ReqLine."Due Date";
          ReqLine."Due Date" := "New Date";
          ReqLine."Starting Date" := 0D;
          if BoundToComponent then begin
            ReqLine."Ending Date" := ComponentDueDate;
            ReqLine."Ending Time" := ComponentDueTime;
          end else
            ReqLine."Ending Date" := 0D;
        end;
        if ReqLine.Quantity = 0 then begin
          ReqLine."Action Message" := ReqLine."Action Message"::Cancel;
        end else
          ReqLine."Action Message" := Type;
        ReqLine."Planning Line Origin" := ReqLine."Planning Line Origin"::"Action Message";
        ReqLine."Accept Action Message" := true;
        ReqLine.MODIFY;
        if ReqLine."Starting Date" = 0D then
          ReqLine."Starting Date" := ReqLine."Due Date";
        if ReqLine."Ending Date" = 0D then
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        ReqLine.BlockDynamicTracking(true);
        GetRoutingAndComponents(ReqLine);
        if ReqLine."Original Due Date" <> 0D then
          if not (ReqLine."Action Message" in [ReqLine."Action Message"::Reschedule,
                                               ReqLine."Action Message"::"Resched. & Chg. Qty."])
          then
            ReqLine."Original Due Date" := 0D;
        if ReqLine."Original Quantity" = ReqLine.Quantity then begin
          if ReqLine."Action Message" = ReqLine."Action Message"::"Resched. & Chg. Qty." then
            ReqLine."Action Message" := ReqLine."Action Message"::Reschedule;
        end;
        ReqLine.VALIDATE(Quantity);
        if ReqLine."Action Message" = ReqLine."Action Message"::Reschedule then
          ReqLine."Original Quantity" := 0;
        ReqLine.MODIFY;
        CLEAR(ReqLineExtern);

        // Retrieve temporary list of Planning Components handled:
        InvtProfileOffsetting.GetPlanningCompList(TempPlanningCompList);

        // Save inserted Planning Line in temporary list:
        TempReqLineList := ReqLine;
        TempReqLineList.INSERT;

        PlanningLinesInserted := true;
      end;
    END;

    LOCAL PROCEDURE InitReqFromSource@3(ActionMsgEntry@1000 : Record "Action Message Entry";VAR ReqLine@1001 : Record "Requisition Line") : Boolean;
    VAR
      ProdOrderLine@1006 : Record "Prod. Order Line";
      PurchOrderLine@1005 : Record "Purchase Line";
      TransLine@1003 : Record "Transfer Line";
      AsmHeader@1002 : Record "Assembly Header";
    BEGIN
      with ActionMsgEntry do
        case "Source Type" of
          DATABASE::"Prod. Order Line":
            if ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line") then begin
              ReqLine.GetProdOrderLine(ProdOrderLine);
              exit(false);
            end;
          DATABASE::"Purchase Line":
            if PurchOrderLine.GET("Source Subtype","Source ID","Source Ref. No.") then begin
              ReqLine.GetPurchOrderLine(PurchOrderLine);
              exit(false);
            end;
          DATABASE::"Transfer Line":
            if TransLine.GET("Source ID","Source Ref. No.") then begin
              ReqLine.GetTransLine(TransLine);
              exit(false);
            end;
          DATABASE::"Assembly Header":
            if AsmHeader.GET("Source Subtype","Source ID") then begin
              ReqLine.GetAsmHeader(AsmHeader);
              exit(false);
            end;
          else
            ERROR(Text009)
        end;
      ReqLine.TransferFromActionMessage(ActionMsgEntry);
      exit(true);
    END;

    LOCAL PROCEDURE GetRoutingAndComponents@4(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      Direction@1001 : 'Forward,Backward';
    BEGIN
      InvtProfileOffsetting.GetRouting(ReqLine);
      InvtProfileOffsetting.GetComponents(ReqLine);
      InvtProfileOffsetting.Recalculate(ReqLine,Direction::Backward);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

