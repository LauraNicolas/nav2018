OBJECT Table 1003 Job Planning Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               GetJob;
               if Job.Blocked = Job.Blocked::All then
                 Job.TestBlocked;
               JobTask.GET("Job No.","Job Task No.");
               JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
               InitJobPlanningLine;
               if Quantity <> 0 then
                 UpdateReservation(0);

               if "Schedule Line" then
                 Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "User ID" := USERID;

               if ((Quantity <> 0) or (xRec.Quantity <> 0)) and ItemExists(xRec."No.") then
                 UpdateReservation(0);

               if "Schedule Line" then
                 Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
             END;

    OnDelete=VAR
               JobUsageLink@1000 : Record "Job Usage Link";
             BEGIN
               ValidateModification(true);
               CheckRelatedJobPlanningLineInvoice;

               if "Usage Link" then begin
                 JobUsageLink.SETRANGE("Job No.","Job No.");
                 JobUsageLink.SETRANGE("Job Task No.","Job Task No.");
                 JobUsageLink.SETRANGE("Line No.","Line No.");
                 if not JobUsageLink.ISEMPTY then
                   ERROR(JobUsageLinkErr,TABLECAPTION);
               end;

               if (Quantity <> 0) and ItemExists("No.") then begin
                 JobPlanningLineReserve.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
               end;

               if "Schedule Line" then
                 Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
             END;

    OnRename=BEGIN
               ERROR(RecordRenameErr,FIELDCAPTION("Job No."),FIELDCAPTION("Job Task No."),TABLECAPTION);
             END;

    CaptionML=ENU=Job Planning Line;
    LookupPageID="Job Planning Lines";
    DrillDownPageID="Job Planning Lines";
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 2   ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No.;
                                                   NotBlank=true }
    { 3   ;   ;Planning Date       ;Date          ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Planning Date" <> "Planning Date");

                                                                VALIDATE("Document Date","Planning Date");
                                                                if ("Currency Date" = 0D) or ("Currency Date" = xRec."Planning Date") then
                                                                  VALIDATE("Currency Date","Planning Date");
                                                                if (Type <> Type::Text) and ("No." <> '') then
                                                                  UpdateAllAmounts;
                                                                if "Planning Date" <> 0D then
                                                                  CheckItemAvailable(FIELDNO("Planning Date"));
                                                                if CurrFieldNo = FIELDNO("Planned Delivery Date") then
                                                                  UpdateReservation(CurrFieldNo)
                                                                else
                                                                  UpdateReservation(FIELDNO("Planning Date"));
                                                                "Planned Delivery Date" := "Planning Date";
                                                              END;

                                                   CaptionML=ENU=Planning Date }
    { 4   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Document No." <> "Document No.");
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                ValidateModification(xRec.Type <> Type);

                                                                UpdateReservation(FIELDNO(Type));

                                                                VALIDATE("No.",'');
                                                                if Type = Type::Item then begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",false);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Resource,Item,G/L Account,Text;
                                                   OptionString=Resource,Item,"G/L Account",Text }
    { 7   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Text)) "Standard Text";
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."No." <> "No.");

                                                                CheckUsageLinkRelations;

                                                                UpdateReservation(FIELDNO("No."));

                                                                UpdateDescription;

                                                                if ("No." = '') or ("No." <> xRec."No.") then begin
                                                                  "Unit of Measure Code" := '';
                                                                  "Qty. per Unit of Measure" := 1;
                                                                  "Variant Code" := '';
                                                                  "Work Type Code" := '';
                                                                  "Gen. Bus. Posting Group" := '';
                                                                  "Gen. Prod. Posting Group" := '';
                                                                  DeleteAmounts;
                                                                  "Cost Factor" := 0;
                                                                  if "No." = '' then
                                                                    exit;
                                                                end;

                                                                GetJob;
                                                                "Customer Price Group" := Job."Customer Price Group";

                                                                case Type of
                                                                  Type::Resource:
                                                                    begin
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,false);
                                                                      if Description = '' then
                                                                        Description := Res.Name;
                                                                      if "Description 2" = '' then
                                                                        "Description 2" := Res."Name 2";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "Resource Group No." := Res."Resource Group No.";
                                                                      VALIDATE("Unit of Measure Code",Res."Base Unit of Measure");
                                                                    end;
                                                                  Type::Item:
                                                                    begin
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,false);
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      if Job."Language Code" <> '' then
                                                                        GetItemTranslation;
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                      if "Usage Link" then
                                                                        if Item.Reserve = Item.Reserve::Optional then
                                                                          Reserve := Job.Reserve
                                                                        else
                                                                          Reserve := Item.Reserve;
                                                                    end;
                                                                  Type::"G/L Account":
                                                                    begin
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      GLAcc.TESTFIELD("Direct Posting",true);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "Unit of Measure Code" := '';
                                                                      "Direct Unit Cost (LCY)" := 0;
                                                                      "Unit Cost (LCY)" := 0;
                                                                      "Unit Price" := 0;
                                                                    end;
                                                                  Type::Text:
                                                                    begin
                                                                      StandardText.GET("No.");
                                                                      Description := StandardText.Description;
                                                                    end;
                                                                end;

                                                                if Type <> Type::Text then
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=No. }
    { 8   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                ValidateModification(xRec.Description <> Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 9   ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                Delta@1000 : Decimal;
                                                              BEGIN
                                                                if "Usage Link" then
                                                                  if not BypassQtyValidation then begin
                                                                    if ("Qty. Posted" > 0) and (Quantity < "Qty. Posted") then
                                                                      ERROR(QtyLessErr,FIELDCAPTION(Quantity),FIELDCAPTION("Qty. Posted"));
                                                                    if ("Qty. Posted" < 0) and (Quantity > "Qty. Posted") then
                                                                      ERROR(QtyGreaterErr,FIELDCAPTION(Quantity),FIELDCAPTION("Qty. Posted"));
                                                                  end;

                                                                CALCFIELDS("Qty. Transferred to Invoice");
                                                                if ("Qty. Transferred to Invoice" > 0) and (Quantity < "Qty. Transferred to Invoice") then
                                                                  ERROR(QtyLessErr,FIELDCAPTION(Quantity),FIELDCAPTION("Qty. Transferred to Invoice"));
                                                                if ("Qty. Transferred to Invoice" < 0) and (Quantity > "Qty. Transferred to Invoice") then
                                                                  ERROR(QtyGreaterErr,FIELDCAPTION(Quantity),FIELDCAPTION("Qty. Transferred to Invoice"));

                                                                case Type of
                                                                  Type::Item:
                                                                    if not Item.GET("No.") then
                                                                      ERROR(MissingItemResourceGLErr,Type,Item.FIELDCAPTION("No."));
                                                                  Type::Resource:
                                                                    if not Res.GET("No.") then
                                                                      ERROR(MissingItemResourceGLErr,Type,Res.FIELDCAPTION("No."));
                                                                  Type::"G/L Account":
                                                                    if not GLAcc.GET("No.") then
                                                                      ERROR(MissingItemResourceGLErr,Type,GLAcc.FIELDCAPTION("No."));
                                                                end;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                if "Usage Link" and (xRec."No." = "No.") then begin
                                                                  Delta := Quantity - xRec.Quantity;
                                                                  VALIDATE("Remaining Qty.","Remaining Qty." + Delta);
                                                                  VALIDATE("Qty. to Transfer to Journal","Qty. to Transfer to Journal" + Delta);
                                                                end;

                                                                UpdateQtyToTransfer;
                                                                UpdateQtyToInvoice;

                                                                CheckItemAvailable(FIELDNO(Quantity));
                                                                UpdateReservation(FIELDNO(Quantity));

                                                                UpdateAllAmounts;
                                                                BypassQtyValidation := false;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 11  ;   ;Direct Unit Cost (LCY);Decimal     ;CaptionML=ENU=Direct Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 12  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Unit Cost (LCY)" <> "Unit Cost (LCY)");

                                                                if (Type = Type::Item) and
                                                                   Item.GET("No.") and
                                                                   (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                then
                                                                  UpdateAllAmounts
                                                                else begin
                                                                  InitRoundingPrecisions;
                                                                  "Unit Cost" := ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        "Currency Date","Currency Code",
                                                                        "Unit Cost (LCY)","Currency Factor"),
                                                                      UnitAmountRoundingPrecisionFCY);
                                                                  UpdateAllAmounts;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 13  ;   ;Total Cost (LCY)    ;Decimal       ;CaptionML=ENU=Total Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 14  ;   ;Unit Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Unit Price (LCY)" <> "Unit Price (LCY)");

                                                                InitRoundingPrecisions;
                                                                "Unit Price" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      "Currency Date","Currency Code",
                                                                      "Unit Price (LCY)","Currency Factor"),
                                                                    UnitAmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Price (LCY);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 15  ;   ;Total Price (LCY)   ;Decimal       ;CaptionML=ENU=Total Price (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 16  ;   ;Resource Group No.  ;Code20        ;TableRelation="Resource Group";
                                                   CaptionML=ENU=Resource Group No.;
                                                   Editable=false }
    { 17  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                Resource@1000 : Record Resource;
                                                              BEGIN
                                                                ValidateModification(xRec."Unit of Measure Code" <> "Unit of Measure Code");

                                                                GetGLSetup;
                                                                case Type of
                                                                  Type::Item:
                                                                    begin
                                                                      Item.GET("No.");
                                                                      "Qty. per Unit of Measure" :=
                                                                        UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    end;
                                                                  Type::Resource:
                                                                    begin
                                                                      if CurrFieldNo <> FIELDNO("Work Type Code") then
                                                                        if "Work Type Code" <> '' then begin
                                                                          WorkType.GET("Work Type Code");
                                                                          if WorkType."Unit of Measure Code" <> '' then
                                                                            TESTFIELD("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                        end else
                                                                          TESTFIELD("Work Type Code",'');
                                                                      if "Unit of Measure Code" = '' then begin
                                                                        Resource.GET("No.");
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      end;
                                                                      ResourceUnitOfMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResourceUnitOfMeasure."Qty. per Unit of Measure";
                                                                      "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                    end;
                                                                  Type::"G/L Account":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                end;
                                                                CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                UpdateReservation(FIELDNO("Unit of Measure Code"));
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."Location Code" <> "Location Code");

                                                                "Bin Code" := '';
                                                                if Type = Type::Item then begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",false);
                                                                  CheckItemAvailable(FIELDNO("Location Code"));
                                                                  UpdateReservation(FIELDNO("Location Code"));
                                                                  VALIDATE(Quantity);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 30  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID;
                                                   Editable=false }
    { 32  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."Work Type Code" <> "Work Type Code");
                                                                TESTFIELD(Type,Type::Resource);

                                                                VALIDATE("Line Discount %",0);
                                                                if ("Work Type Code" = '') and (xRec."Work Type Code" <> '') then begin
                                                                  Res.GET("No.");
                                                                  "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                  VALIDATE("Unit of Measure Code");
                                                                end;
                                                                if WorkType.GET("Work Type Code") then
                                                                  if WorkType."Unit of Measure Code" <> '' then begin
                                                                    "Unit of Measure Code" := WorkType."Unit of Measure Code";
                                                                    if ResourceUnitOfMeasure.GET("No.","Unit of Measure Code") then
                                                                      "Qty. per Unit of Measure" := ResourceUnitOfMeasure."Qty. per Unit of Measure";
                                                                  end else begin
                                                                    Res.GET("No.");
                                                                    "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                    VALIDATE("Unit of Measure Code");
                                                                  end;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Work Type Code }
    { 33  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                if (Type = Type::Item) and ("No." <> '') then
                                                                  UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 79  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code;
                                                   Editable=false }
    { 80  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group;
                                                   Editable=false }
    { 81  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group;
                                                   Editable=false }
    { 83  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 1000;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   CaptionML=ENU=Job Task No.;
                                                   NotBlank=true }
    { 1001;   ;Line Amount (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Line Amount (LCY)" <> "Line Amount (LCY)");

                                                                InitRoundingPrecisions;
                                                                "Line Amount" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      "Currency Date","Currency Code",
                                                                      "Line Amount (LCY)","Currency Factor"),
                                                                    AmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1002;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Unit Cost" <> "Unit Cost");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 1003;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1004;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Unit Price" <> "Unit Price");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 1005;   ;Total Price         ;Decimal       ;CaptionML=ENU=Total Price;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1006;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Line Amount" <> "Line Amount");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1007;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Line Discount Amount" <> "Line Discount Amount");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1008;   ;Line Discount Amount (LCY);Decimal ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Line Discount Amount (LCY)" <> "Line Discount Amount (LCY)");

                                                                InitRoundingPrecisions;
                                                                "Line Discount Amount" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      "Currency Date","Currency Code",
                                                                      "Line Discount Amount (LCY)","Currency Factor"),
                                                                    AmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1015;   ;Cost Factor         ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Cost Factor" <> "Cost Factor");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Cost Factor;
                                                   Editable=false }
    { 1019;   ;Serial No.          ;Code20        ;CaptionML=ENU=Serial No.;
                                                   Editable=false }
    { 1020;   ;Lot No.             ;Code20        ;CaptionML=ENU=Lot No.;
                                                   Editable=false }
    { 1021;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Line Discount %" <> "Line Discount %");

                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=true }
    { 1022;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                "Schedule Line" := true;
                                                                "Contract Line" := true;
                                                                if "Line Type" = "Line Type"::Budget then
                                                                  "Contract Line" := false;
                                                                if "Line Type" = "Line Type"::Billable then
                                                                  "Schedule Line" := false;

                                                                if not "Contract Line" and (("Qty. Transferred to Invoice" <> 0) or ("Qty. Invoiced" <> 0)) then
                                                                  ERROR(LineTypeErr,TABLECAPTION,FIELDCAPTION("Line Type"),"Line Type");

                                                                ControlUsageLink;
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Budget,Billable,Both Budget and Billable;
                                                   OptionString=Budget,Billable,"Both Budget and Billable" }
    { 1023;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."Currency Code" <> "Currency Code");

                                                                UpdateCurrencyFactor;
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Editable=false }
    { 1024;   ;Currency Date       ;Date          ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Currency Date" <> "Currency Date");

                                                                UpdateCurrencyFactor;
                                                                if (CurrFieldNo <> FIELDNO("Planning Date")) and ("No." <> '') then
                                                                  UpdateFromCurrency;
                                                              END;

                                                   AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Currency Date }
    { 1025;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                ValidateModification(xRec."Currency Factor" <> "Currency Factor");

                                                                if ("Currency Code" = '') and ("Currency Factor" <> 0) then
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(CurrencyFactorErr,FIELDCAPTION("Currency Code")));
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=false }
    { 1026;   ;Schedule Line       ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Schedule Line;
                                                   Editable=false }
    { 1027;   ;Contract Line       ;Boolean       ;CaptionML=ENU=<Billable Line>;
                                                   Editable=false }
    { 1030;   ;Job Contract Entry No.;Integer     ;CaptionML=ENU=Job Contract Entry No.;
                                                   Editable=false }
    { 1035;   ;Invoiced Amount (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line Invoice"."Invoiced Amount (LCY)" WHERE ("Job No."=FIELD("Job No."),
                                                                                                                              "Job Task No."=FIELD("Job Task No."),
                                                                                                                              "Job Planning Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Invoiced Amount (LCY);
                                                   Editable=false }
    { 1036;   ;Invoiced Cost Amount (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line Invoice"."Invoiced Cost Amount (LCY)" WHERE ("Job No."=FIELD("Job No."),
                                                                                                                                   "Job Task No."=FIELD("Job Task No."),
                                                                                                                                   "Job Planning Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Invoiced Cost Amount (LCY);
                                                   Editable=false }
    { 1037;   ;VAT Unit Price      ;Decimal       ;CaptionML=ENU=VAT Unit Price }
    { 1038;   ;VAT Line Discount Amount;Decimal   ;CaptionML=ENU=VAT Line Discount Amount }
    { 1039;   ;VAT Line Amount     ;Decimal       ;CaptionML=ENU=VAT Line Amount }
    { 1041;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT % }
    { 1042;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 1043;   ;Job Ledger Entry No.;Integer       ;TableRelation="Job Ledger Entry";
                                                   CaptionML=ENU=Job Ledger Entry No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 1048;   ;Status              ;Option        ;InitValue=Order;
                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Planning,Quote,Order,Completed;
                                                   OptionString=Planning,Quote,Order,Completed;
                                                   Editable=false }
    { 1050;   ;Ledger Entry Type   ;Option        ;CaptionML=ENU=Ledger Entry Type;
                                                   OptionCaptionML=ENU=" ,Resource,Item,G/L Account";
                                                   OptionString=" ",Resource,Item,"G/L Account" }
    { 1051;   ;Ledger Entry No.    ;Integer       ;TableRelation=IF ("Ledger Entry Type"=CONST(Resource)) "Res. Ledger Entry"
                                                                 ELSE IF ("Ledger Entry Type"=CONST(Item)) "Item Ledger Entry"
                                                                 ELSE IF ("Ledger Entry Type"=CONST("G/L Account")) "G/L Entry";
                                                   CaptionML=ENU=Ledger Entry No.;
                                                   BlankZero=true }
    { 1052;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry }
    { 1053;   ;Usage Link          ;Boolean       ;OnValidate=BEGIN
                                                                if "Usage Link" and ("Line Type" = "Line Type"::Billable) then
                                                                  ERROR(UsageLinkErr,FIELDCAPTION("Usage Link"),TABLECAPTION,FIELDCAPTION("Line Type"),"Line Type");

                                                                ControlUsageLink;

                                                                CheckItemAvailable(FIELDNO("Usage Link"));
                                                                UpdateReservation(FIELDNO("Usage Link"));
                                                              END;

                                                   CaptionML=ENU=Usage Link }
    { 1060;   ;Remaining Qty.      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Remaining Qty. (Base)",CalcBaseQty("Remaining Qty."));
                                                              END;

                                                   CaptionML=ENU=Remaining Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1061;   ;Remaining Qty. (Base);Decimal      ;CaptionML=ENU=Remaining Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1062;   ;Remaining Total Cost;Decimal       ;CaptionML=ENU=Remaining Total Cost;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1063;   ;Remaining Total Cost (LCY);Decimal ;CaptionML=ENU=Remaining Total Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1064;   ;Remaining Line Amount;Decimal      ;CaptionML=ENU=Remaining Line Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1065;   ;Remaining Line Amount (LCY);Decimal;CaptionML=ENU=Remaining Line Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1070;   ;Qty. Posted         ;Decimal       ;CaptionML=ENU=Qty. Posted;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1071;   ;Qty. to Transfer to Journal;Decimal;CaptionML=ENU=Qty. to Transfer to Journal;
                                                   DecimalPlaces=0:5 }
    { 1072;   ;Posted Total Cost   ;Decimal       ;CaptionML=ENU=Posted Total Cost;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1073;   ;Posted Total Cost (LCY);Decimal    ;CaptionML=ENU=Posted Total Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1074;   ;Posted Line Amount  ;Decimal       ;CaptionML=ENU=Posted Line Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1075;   ;Posted Line Amount (LCY);Decimal   ;CaptionML=ENU=Posted Line Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1080;   ;Qty. Transferred to Invoice;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line Invoice"."Quantity Transferred" WHERE ("Job No."=FIELD("Job No."),
                                                                                                                             "Job Task No."=FIELD("Job Task No."),
                                                                                                                             "Job Planning Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Qty. Transferred to Invoice;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1081;   ;Qty. to Transfer to Invoice;Decimal;OnValidate=BEGIN
                                                                if "Qty. to Transfer to Invoice" = 0 then
                                                                  exit;

                                                                if "Contract Line" then begin
                                                                  if Quantity = "Qty. Transferred to Invoice" then
                                                                    ERROR(QtyAlreadyTransferredErr,TABLECAPTION);

                                                                  if Quantity > 0 then begin
                                                                    if ("Qty. to Transfer to Invoice" > 0) and ("Qty. to Transfer to Invoice" > (Quantity - "Qty. Transferred to Invoice")) or
                                                                       ("Qty. to Transfer to Invoice" < 0)
                                                                    then
                                                                      ERROR(QtyToTransferToInvoiceErr,FIELDCAPTION("Qty. to Transfer to Invoice"),0,Quantity - "Qty. Transferred to Invoice");
                                                                  end else begin
                                                                    if ("Qty. to Transfer to Invoice" > 0) or
                                                                       ("Qty. to Transfer to Invoice" < 0) and ("Qty. to Transfer to Invoice" < (Quantity - "Qty. Transferred to Invoice"))
                                                                    then
                                                                      ERROR(QtyToTransferToInvoiceErr,FIELDCAPTION("Qty. to Transfer to Invoice"),Quantity - "Qty. Transferred to Invoice",0);
                                                                  end;
                                                                end else
                                                                  ERROR(NoContractLineErr,FIELDCAPTION("Qty. to Transfer to Invoice"),TABLECAPTION,"Line Type");
                                                              END;

                                                   CaptionML=ENU=Qty. to Transfer to Invoice;
                                                   DecimalPlaces=0:5 }
    { 1090;   ;Qty. Invoiced       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line Invoice"."Quantity Transferred" WHERE ("Job No."=FIELD("Job No."),
                                                                                                                             "Job Task No."=FIELD("Job Task No."),
                                                                                                                             "Job Planning Line No."=FIELD("Line No."),
                                                                                                                             "Document Type"=FILTER("Posted Invoice"|"Posted Credit Memo")));
                                                   CaptionML=ENU=Qty. Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1091;   ;Qty. to Invoice     ;Decimal       ;CaptionML=ENU=Qty. to Invoice;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1100;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE ("Source Type"=CONST(1003),
                                                                                                        "Source Subtype"=FIELD(Status),
                                                                                                        "Source ID"=FIELD("Job No."),
                                                                                                        "Source Ref. No."=FIELD("Job Contract Entry No."),
                                                                                                        "Reservation Status"=CONST(Reservation)));
                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1101;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source Type"=CONST(1003),
                                                                                                                 "Source Subtype"=FIELD(Status),
                                                                                                                 "Source ID"=FIELD("Job No."),
                                                                                                                 "Source Ref. No."=FIELD("Job Contract Entry No."),
                                                                                                                 "Reservation Status"=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                UpdatePlanned;
                                                              END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 1102;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                if Reserve <> Reserve::Never then begin
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                  TESTFIELD("Usage Link");
                                                                end;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                if (Reserve = Reserve::Never) and ("Reserved Qty. (Base)" > 0) then
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                if xRec.Reserve = Reserve::Always then begin
                                                                  GetItem;
                                                                  if Item.Reserve = Item.Reserve::Always then
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 1103;   ;Planned             ;Boolean       ;CaptionML=ENU=Planned;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."Variant Code" <> "Variant Code");

                                                                if "Variant Code" = '' then begin
                                                                  if Type = Type::Item then begin
                                                                    Item.GET("No.");
                                                                    Description := Item.Description;
                                                                    "Description 2" := Item."Description 2";
                                                                    GetItemTranslation;
                                                                  end
                                                                end else begin
                                                                  TESTFIELD(Type,Type::Item);

                                                                  ItemVariant.GET("No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                  "Description 2" := ItemVariant."Description 2";
                                                                end;
                                                                VALIDATE(Quantity);
                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                                UpdateReservation(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                ValidateModification(xRec."Bin Code" <> "Bin Code");

                                                                TESTFIELD("Location Code");
                                                                CheckItemAvailable(FIELDNO("Bin Code"));
                                                                UpdateReservation(FIELDNO("Bin Code"));
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5410;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                if ("Requested Delivery Date" <> xRec."Requested Delivery Date") and
                                                                   ("Promised Delivery Date" <> 0D)
                                                                then
                                                                  ERROR(
                                                                    RequestedDeliveryDateErr,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                if "Requested Delivery Date" <> 0D then
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                              END;

                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                if "Promised Delivery Date" <> 0D then
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                else
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   CaptionML=ENU=Promised Delivery Date }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                VALIDATE("Planning Date","Planned Delivery Date");
                                                              END;

                                                   CaptionML=ENU=Planned Delivery Date }
    { 5900;   ;Service Order No.   ;Code20        ;CaptionML=ENU=Service Order No. }
  }
  KEYS
  {
    {    ;"Job No.","Job Task No.","Line No."     ;Clustered=true }
    {    ;"Job No.","Job Task No.","Schedule Line","Planning Date";
                                                   SumIndexFields="Total Price (LCY)","Total Cost (LCY)","Line Amount (LCY)","Remaining Total Cost (LCY)","Remaining Line Amount (LCY)" }
    {    ;"Job No.","Job Task No.","Contract Line","Planning Date";
                                                   SumIndexFields="Line Amount (LCY)","Total Price (LCY)","Total Cost (LCY)" }
    {    ;"Job No.","Job Task No.","Schedule Line","Currency Date" }
    {    ;"Job No.","Job Task No.","Contract Line","Currency Date" }
    {    ;"Job No.","Schedule Line",Type,"No.","Planning Date";
                                                   SumIndexFields="Quantity (Base)" }
    {    ;"Job No.","Schedule Line",Type,"Resource Group No.","Planning Date";
                                                   SumIndexFields="Quantity (Base)" }
    {    ;Status,"Schedule Line",Type,"No.","Planning Date";
                                                   SumIndexFields="Quantity (Base)" }
    {    ;Status,"Schedule Line",Type,"Resource Group No.","Planning Date";
                                                   SumIndexFields="Quantity (Base)" }
    {    ;"Job No.","Contract Line"                }
    {    ;"Job Contract Entry No."                 }
    {    ;Type,"No.","Job No.","Job Task No.","Usage Link","System-Created Entry" }
    {    ;Status,Type,"No.","Variant Code","Location Code","Planning Date";
                                                   SumIndexFields="Remaining Qty. (Base)" }
    {    ;"Job No.","Planning Date","Document No." }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLAcc@1018 : Record "G/L Account";
      Location@1013 : Record Location;
      Item@1014 : Record Item;
      JobTask@1001 : Record "Job Task";
      ItemVariant@1004 : Record "Item Variant";
      Res@1006 : Record Resource;
      ResCost@1007 : Record "Resource Cost";
      WorkType@1009 : Record "Work Type";
      Job@1002 : Record Job;
      ResourceUnitOfMeasure@1010 : Record "Resource Unit of Measure";
      CurrExchRate@1025 : Record "Currency Exchange Rate";
      SKU@1022 : Record "Stockkeeping Unit";
      StandardText@1030 : Record "Standard Text";
      ItemTranslation@1032 : Record "Item Translation";
      GLSetup@1015 : Record "General Ledger Setup";
      JobPlanningLineReserve@1011 : Codeunit "Job Planning Line-Reserve";
      UOMMgt@1017 : Codeunit "Unit of Measure Management";
      ItemCheckAvail@1012 : Codeunit "Item-Check Avail.";
      CurrencyFactorErr@1020 : TextConst '@@@="%1 = Currency Code field name";ENU=cannot be specified without %1';
      RecordRenameErr@1024 : TextConst '@@@="%1 = Job Number field name; %2 = Job Task Number field name; %3 = Job Planning Line table name";ENU=You cannot change the %1 or %2 of this %3.';
      CurrencyDate@1023 : Date;
      MissingItemResourceGLErr@1031 : TextConst '@@@="%1 = Document Type (Item, Resoure, or G/L); %2 = Field name";ENU=You must specify %1 %2 in planning line.';
      HasGotGLSetup@1016 : Boolean;
      UnitAmountRoundingPrecision@1019 : Decimal;
      AmountRoundingPrecision@1028 : Decimal;
      QtyLessErr@1027 : TextConst '@@@="%1 = Name of first field to compare; %2 = Name of second field to compare";ENU=%1 cannot be less than %2.';
      ControlUsageLinkErr@1029 : TextConst '@@@="%1 = Job Planning Line table name; %2 = Caption for field Schedule Line; %3 = Captiion for field Usage Link";ENU=The %1 must be a %2 and %3 must be enabled, because linked Job Ledger Entries exist.';
      JobUsageLinkErr@1034 : TextConst '@@@="%1 = Job Planning Line table name";ENU=This %1 cannot be deleted because linked job ledger entries exist.';
      BypassQtyValidation@1035 : Boolean;
      LinkedJobLedgerErr@1033 : TextConst 'ENU=You cannot change this value because linked job ledger entries exist.';
      LineTypeErr@1003 : TextConst '@@@=The Job Planning Line cannot be of Line Type Schedule, because it is transferred to an invoice.;ENU=The %1 cannot be of %2 %3 because it is transferred to an invoice.';
      QtyToTransferToInvoiceErr@1005 : TextConst '@@@="%1 = Qty. to Transfer to Invoice field name; %2 = First value in comparison; %3 = Second value in comparison";ENU=%1 may not be lower than %2 and may not exceed %3.';
      AutoReserveQst@1040 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?';
      NoContractLineErr@1021 : TextConst '@@@="%1 = Qty. to Transfer to Invoice field name; %2 = Job Planning Line table name; %3 = The job''s line type";ENU=%1 cannot be set on a %2 of type %3.';
      QtyAlreadyTransferredErr@1038 : TextConst '@@@="%1 = Job Planning Line table name";ENU=The %1 has already been completely transferred.';
      UsageLinkErr@1039 : TextConst '@@@=Usage Link cannot be enabled on a Job Planning Line with Line Type Schedule;ENU=%1 cannot be enabled on a %2 with %3 %4.';
      QtyGreaterErr@1041 : TextConst '@@@="%1 = Caption for field Quantity; %2 = Captiion for field Qty. Transferred to Invoice";ENU=%1 cannot be higher than %2.';
      RequestedDeliveryDateErr@1026 : TextConst '@@@="%1 = Caption for field Requested Delivery Date; %2 = Captiion for field Promised Delivery Date";ENU=You cannot change the %1 when the %2 has been filled in.';
      UnitAmountRoundingPrecisionFCY@1036 : Decimal;
      AmountRoundingPrecisionFCY@1037 : Decimal;
      NotPossibleJobPlanningLineErr@1000 : TextConst 'ENU=It is not possible to deleted job planning line transferred to an invoice.';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CheckItemAvailable@5(CalledByFieldNo@1000 : Integer);
    BEGIN
      if CurrFieldNo <> CalledByFieldNo then
        exit;
      if Reserve = Reserve::Always then
        exit;
      if (Type <> Type::Item) or ("No." = '') then
        exit;
      if Quantity <= 0 then
        exit;
      if not (Status in [Status::Order]) then
        exit;

      if ItemCheckAvail.JobPlanningLineCheck(Rec) then
        ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetJob@2();
    BEGIN
      if ("Job No." <> Job."No.") and ("Job No." <> '') then
        Job.GET("Job No.");
    END;

    [Internal]
    PROCEDURE UpdateCurrencyFactor@17();
    BEGIN
      if "Currency Code" <> '' then begin
        if "Currency Date" = 0D then
          CurrencyDate := WORKDATE
        else
          CurrencyDate := "Currency Date";
        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      end else
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record Item;
    BEGIN
      if Type = Type::Item then
        if not Item2.GET(ItemNo) then
          exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE GetItem@19();
    BEGIN
      if "No." <> Item."No." then
        if not Item.GET("No.") then
          CLEAR(Item);
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      if (SKU."Location Code" = "Location Code") and
         (SKU."Item No." = "No.") and
         (SKU."Variant Code" = "Variant Code")
      then
        exit(true);

      if SKU.GET("Location Code","No.","Variant Code") then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE InitRoundingPrecisions@23();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      if (AmountRoundingPrecision = 0) or
         (UnitAmountRoundingPrecision = 0) or
         (AmountRoundingPrecisionFCY = 0) or
         (UnitAmountRoundingPrecisionFCY = 0)
      then begin
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
        AmountRoundingPrecision := Currency."Amount Rounding Precision";
        UnitAmountRoundingPrecision := Currency."Unit-Amount Rounding Precision";

        if "Currency Code" <> '' then begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          Currency.TESTFIELD("Unit-Amount Rounding Precision");
        end;

        AmountRoundingPrecisionFCY := Currency."Amount Rounding Precision";
        UnitAmountRoundingPrecisionFCY := Currency."Unit-Amount Rounding Precision";
      end;
    END;

    [External]
    PROCEDURE Caption@8() : Text[250];
    VAR
      Job@1000 : Record Job;
      JobTask@1001 : Record "Job Task";
    BEGIN
      if not Job.GET("Job No.") then
        exit('');
      if not JobTask.GET("Job No.","Job Task No.") then
        exit('');
      exit(STRSUBSTNO('%1 %2 %3 %4',
          Job."No.",
          Job.Description,
          JobTask."Job Task No.",
          JobTask.Description));
    END;

    [Internal]
    PROCEDURE SetUpNewLine@9(LastJobPlanningLine@1000 : Record "Job Planning Line");
    BEGIN
      "Document Date" := LastJobPlanningLine."Planning Date";
      "Document No." := LastJobPlanningLine."Document No.";
      Type := LastJobPlanningLine.Type;
      VALIDATE("Line Type",LastJobPlanningLine."Line Type");
      GetJob;
      "Currency Code" := Job."Currency Code";
      UpdateCurrencyFactor;
      if LastJobPlanningLine."Planning Date" <> 0D then
        VALIDATE("Planning Date",LastJobPlanningLine."Planning Date");
    END;

    [Internal]
    PROCEDURE InitJobPlanningLine@4();
    VAR
      JobJnlManagement@1000 : Codeunit JobJnlManagement;
    BEGIN
      GetJob;
      if "Planning Date" = 0D then
        VALIDATE("Planning Date",WORKDATE);
      "Currency Code" := Job."Currency Code";
      UpdateCurrencyFactor;
      "VAT Unit Price" := 0;
      "VAT Line Discount Amount" := 0;
      "VAT Line Amount" := 0;
      "VAT %" := 0;
      "Job Contract Entry No." := JobJnlManagement.GetNextEntryNo;
      "User ID" := USERID;
      "Last Date Modified" := 0D;
      Status := Job.Status;
      ControlUsageLink;
    END;

    LOCAL PROCEDURE DeleteAmounts@10();
    BEGIN
      Quantity := 0;
      "Quantity (Base)" := 0;

      "Direct Unit Cost (LCY)" := 0;
      "Unit Cost (LCY)" := 0;
      "Unit Cost" := 0;

      "Total Cost (LCY)" := 0;
      "Total Cost" := 0;

      "Unit Price (LCY)" := 0;
      "Unit Price" := 0;

      "Total Price (LCY)" := 0;
      "Total Price" := 0;

      "Line Amount (LCY)" := 0;
      "Line Amount" := 0;

      "Line Discount %" := 0;

      "Line Discount Amount (LCY)" := 0;
      "Line Discount Amount" := 0;

      "Remaining Qty." := 0;
      "Remaining Qty. (Base)" := 0;
      "Remaining Total Cost" := 0;
      "Remaining Total Cost (LCY)" := 0;
      "Remaining Line Amount" := 0;
      "Remaining Line Amount (LCY)" := 0;

      "Qty. Posted" := 0;
      "Qty. to Transfer to Journal" := 0;
      "Posted Total Cost" := 0;
      "Posted Total Cost (LCY)" := 0;
      "Posted Line Amount" := 0;
      "Posted Line Amount (LCY)" := 0;

      "Qty. to Transfer to Invoice" := 0;
      "Qty. to Invoice" := 0;
    END;

    LOCAL PROCEDURE UpdateFromCurrency@1();
    BEGIN
      UpdateAllAmounts;
    END;

    LOCAL PROCEDURE GetItemTranslation@42();
    BEGIN
      GetJob;
      if ItemTranslation.GET("No.","Variant Code",Job."Language Code") then begin
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      end;
    END;

    LOCAL PROCEDURE GetGLSetup@6();
    BEGIN
      if HasGotGLSetup then
        exit;
      GLSetup.GET;
      HasGotGLSetup := true;
    END;

    LOCAL PROCEDURE UpdateAllAmounts@11();
    BEGIN
      InitRoundingPrecisions;

      UpdateUnitCost;
      UpdateTotalCost;
      FindPriceAndDiscount(Rec,CurrFieldNo);
      HandleCostFactor;
      UpdateUnitPrice;
      UpdateTotalPrice;
      UpdateAmountsAndDiscounts;
      UpdateRemainingCostsAndAmounts;
      if Type = Type::Text then
        FIELDERROR(Type);
    END;

    LOCAL PROCEDURE UpdateUnitCost@20();
    VAR
      RetrievedCost@1000 : Decimal;
    BEGIN
      GetJob;
      if (Type = Type::Item) and Item.GET("No.") then
        if Item."Costing Method" = Item."Costing Method"::Standard then begin
          if RetrieveCostPrice then begin
            if GetSKU then
              "Unit Cost (LCY)" := ROUND(SKU."Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision)
            else
              "Unit Cost (LCY)" := ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  "Currency Date","Currency Code",
                  "Unit Cost (LCY)","Currency Factor"),
                UnitAmountRoundingPrecisionFCY);
          end else
            RecalculateAmounts(Job."Exch. Calculation (Cost)",xRec."Unit Cost","Unit Cost","Unit Cost (LCY)");
        end else begin
          if RetrieveCostPrice then begin
            if GetSKU then
              RetrievedCost := SKU."Unit Cost" * "Qty. per Unit of Measure"
            else
              RetrievedCost := Item."Unit Cost" * "Qty. per Unit of Measure";
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  "Currency Date","Currency Code",
                  RetrievedCost,"Currency Factor"),
                UnitAmountRoundingPrecisionFCY);
            "Unit Cost (LCY)" := ROUND(RetrievedCost,UnitAmountRoundingPrecision);
          end else
            RecalculateAmounts(Job."Exch. Calculation (Cost)",xRec."Unit Cost","Unit Cost","Unit Cost (LCY)");
        end
      else
        if (Type = Type::Resource) and Res.GET("No.") then begin
          if RetrieveCostPrice then begin
            ResCost.INIT;
            ResCost.Code := "No.";
            ResCost."Work Type Code" := "Work Type Code";
            // ResourceFindCost.RUN(ResCost);
            CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
            "Direct Unit Cost (LCY)" := ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
            RetrievedCost := ResCost."Unit Cost" * "Qty. per Unit of Measure";
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  "Currency Date","Currency Code",
                  RetrievedCost,"Currency Factor"),
                UnitAmountRoundingPrecisionFCY);
            "Unit Cost (LCY)" := ROUND(RetrievedCost,UnitAmountRoundingPrecision);
          end else
            RecalculateAmounts(Job."Exch. Calculation (Cost)",xRec."Unit Cost","Unit Cost","Unit Cost (LCY)");
        end else
          RecalculateAmounts(Job."Exch. Calculation (Cost)",xRec."Unit Cost","Unit Cost","Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE RetrieveCostPrice@13() : Boolean;
    BEGIN
      case Type of
        Type::Item:
          if ("No." <> xRec."No.") or
             ("Location Code" <> xRec."Location Code") or
             ("Variant Code" <> xRec."Variant Code") or
             (not BypassQtyValidation and (Quantity <> xRec.Quantity)) or
             ("Unit of Measure Code" <> xRec."Unit of Measure Code")
          then
            exit(true);
        Type::Resource:
          if ("No." <> xRec."No.") or
             ("Work Type Code" <> xRec."Work Type Code") or
             ("Unit of Measure Code" <> xRec."Unit of Measure Code")
          then
            exit(true);
        Type::"G/L Account":
          if "No." <> xRec."No." then
            exit(true);
        else
          exit(false);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE UpdateTotalCost@24();
    BEGIN
      "Total Cost" := ROUND("Unit Cost" * Quantity,AmountRoundingPrecisionFCY);
      "Total Cost (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Currency Date","Currency Code",
            "Total Cost","Currency Factor"),
          AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE FindPriceAndDiscount@60(VAR JobPlanningLine@1000 : Record "Job Planning Line";CalledByFieldNo@1001 : Integer);
    VAR
      SalesPriceCalcMgt@1002 : Codeunit "Sales Price Calc. Mgt.";
      PurchPriceCalcMgt@1003 : Codeunit "Purch. Price Calc. Mgt.";
    BEGIN
      if RetrieveCostPrice and ("No." <> '') then begin
        SalesPriceCalcMgt.FindJobPlanningLinePrice(JobPlanningLine,CalledByFieldNo);

        if Type <> Type::"G/L Account" then
          PurchPriceCalcMgt.FindJobPlanningLinePrice(JobPlanningLine,CalledByFieldNo)
        else begin
          // Because the SalesPriceCalcMgt.FindJobJnlLinePrice function also retrieves costs for G/L Account,
          // cost and total cost need to get updated again.
          UpdateUnitCost;
          UpdateTotalCost;
        end;
      end;
    END;

    LOCAL PROCEDURE HandleCostFactor@22();
    BEGIN
      if ("Cost Factor" <> 0) and (("Unit Cost" <> xRec."Unit Cost") or ("Cost Factor" <> xRec."Cost Factor")) then
        "Unit Price" := ROUND("Unit Cost" * "Cost Factor",UnitAmountRoundingPrecisionFCY)
      else
        if (Item."Price/Profit Calculation" = Item."Price/Profit Calculation"::"Price=Cost+Profit") and
           (Item."Profit %" < 100) and
           ("Unit Cost" <> xRec."Unit Cost")
        then
          "Unit Price" := ROUND("Unit Cost" / (1 - Item."Profit %" / 100),UnitAmountRoundingPrecisionFCY);
    END;

    LOCAL PROCEDURE UpdateUnitPrice@25();
    BEGIN
      GetJob;
      RecalculateAmounts(Job."Exch. Calculation (Price)",xRec."Unit Price","Unit Price","Unit Price (LCY)");
    END;

    LOCAL PROCEDURE RecalculateAmounts@35(JobExchCalculation@1003 : '"Fixed FCY","Fixed LCY"';xAmount@1000 : Decimal;VAR Amount@1001 : Decimal;VAR AmountLCY@1002 : Decimal);
    BEGIN
      if (xRec."Currency Factor" <> "Currency Factor") and
         (Amount = xAmount) and (JobExchCalculation = JobExchCalculation::"Fixed LCY")
      then
        Amount := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              "Currency Date","Currency Code",
              AmountLCY,"Currency Factor"),
            UnitAmountRoundingPrecisionFCY)
      else
        AmountLCY := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Currency Date","Currency Code",
              Amount,"Currency Factor"),
            UnitAmountRoundingPrecision);
    END;

    LOCAL PROCEDURE UpdateTotalPrice@26();
    BEGIN
      "Total Price" := ROUND(Quantity * "Unit Price",AmountRoundingPrecisionFCY);
      "Total Price (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Currency Date","Currency Code",
            "Total Price","Currency Factor"),
          AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE UpdateAmountsAndDiscounts@31();
    BEGIN
      if "Total Price" = 0 then begin
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
      end else
        if ("Line Amount" <> xRec."Line Amount") and ("Line Discount Amount" = xRec."Line Discount Amount") then begin
          "Line Amount" := ROUND("Line Amount",AmountRoundingPrecisionFCY);
          "Line Discount Amount" := "Total Price" - "Line Amount";
          "Line Discount %" :=
            ROUND("Line Discount Amount" / "Total Price" * 100,0.00001);
        end else
          if ("Line Discount Amount" <> xRec."Line Discount Amount") and ("Line Amount" = xRec."Line Amount") then begin
            "Line Discount Amount" := ROUND("Line Discount Amount",AmountRoundingPrecisionFCY);
            "Line Amount" := "Total Price" - "Line Discount Amount";
            "Line Discount %" :=
              ROUND("Line Discount Amount" / "Total Price" * 100,0.00001);
          end else
            if ("Line Discount Amount" = xRec."Line Discount Amount") and
               (("Line Amount" <> xRec."Line Amount") or ("Line Discount %" <> xRec."Line Discount %") or
                ("Total Price" <> xRec."Total Price"))
            then begin
              "Line Discount Amount" :=
                ROUND("Total Price" * "Line Discount %" / 100,AmountRoundingPrecisionFCY);
              "Line Amount" := "Total Price" - "Line Discount Amount";
            end;

      "Line Amount (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Currency Date","Currency Code",
            "Line Amount","Currency Factor"),
          AmountRoundingPrecision);

      "Line Discount Amount (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Currency Date","Currency Code",
            "Line Discount Amount","Currency Factor"),
          AmountRoundingPrecision);
    END;

    [Internal]
    PROCEDURE Use@30(PostedQty@1001 : Decimal;PostedTotalCost@1000 : Decimal;PostedLineAmount@1002 : Decimal);
    BEGIN
      if "Usage Link" then begin
        InitRoundingPrecisions;
        // Update Quantity Posted
        VALIDATE("Qty. Posted","Qty. Posted" + PostedQty);

        // Update Posted Costs and Amounts.
        "Posted Total Cost" += ROUND(PostedTotalCost,AmountRoundingPrecisionFCY);
        "Posted Total Cost (LCY)" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Currency Date","Currency Code",
              "Posted Total Cost","Currency Factor"),
            AmountRoundingPrecision);

        "Posted Line Amount" += ROUND(PostedLineAmount,AmountRoundingPrecisionFCY);
        "Posted Line Amount (LCY)" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Currency Date","Currency Code",
              "Posted Line Amount","Currency Factor"),
            AmountRoundingPrecision);

        // Update Remaining Quantity
        if (PostedQty >= 0) = ("Remaining Qty." >= 0) then
          if ABS(PostedQty) <= ABS("Remaining Qty.") then
            VALIDATE("Remaining Qty.","Remaining Qty." - PostedQty)
          else begin
            VALIDATE(Quantity,Quantity + PostedQty - "Remaining Qty.");
            VALIDATE("Remaining Qty.",0);
          end
        else
          VALIDATE("Remaining Qty.","Remaining Qty." - PostedQty);

        // Update Remaining Costs and Amounts
        UpdateRemainingCostsAndAmounts;

        // Update Quantity to Post
        VALIDATE("Qty. to Transfer to Journal","Remaining Qty.");
      end else
        ClearValues;

      MODIFY(true);
    END;

    LOCAL PROCEDURE UpdateRemainingCostsAndAmounts@3();
    BEGIN
      if "Usage Link" then begin
        InitRoundingPrecisions;
        "Remaining Total Cost" := ROUND("Unit Cost" * "Remaining Qty.",AmountRoundingPrecisionFCY);
        "Remaining Total Cost (LCY)" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Currency Date","Currency Code",
              "Remaining Total Cost","Currency Factor"),
            AmountRoundingPrecision);
        "Remaining Line Amount" := CalcLineAmount("Remaining Qty.");
        "Remaining Line Amount (LCY)" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Currency Date","Currency Code",
              "Remaining Line Amount","Currency Factor"),
            AmountRoundingPrecision);
      end else
        ClearValues;
    END;

    [External]
    PROCEDURE UpdateQtyToTransfer@29();
    BEGIN
      if "Contract Line" then begin
        CALCFIELDS("Qty. Transferred to Invoice");
        VALIDATE("Qty. to Transfer to Invoice",Quantity - "Qty. Transferred to Invoice");
      end else
        VALIDATE("Qty. to Transfer to Invoice",0);
    END;

    [External]
    PROCEDURE UpdateQtyToInvoice@28();
    BEGIN
      if "Contract Line" then begin
        CALCFIELDS("Qty. Invoiced");
        VALIDATE("Qty. to Invoice",Quantity - "Qty. Invoiced")
      end else
        VALIDATE("Qty. to Invoice",0);
    END;

    [External]
    PROCEDURE UpdatePostedTotalCost@33(AdjustJobCost@1000 : Decimal;AdjustJobCostLCY@1001 : Decimal);
    BEGIN
      if "Usage Link" then begin
        InitRoundingPrecisions;
        "Posted Total Cost" += ROUND(AdjustJobCost,AmountRoundingPrecisionFCY);
        "Posted Total Cost (LCY)" += ROUND(AdjustJobCostLCY,AmountRoundingPrecision);
      end;
    END;

    LOCAL PROCEDURE ValidateModification@21(FieldChanged@1000 : Boolean);
    BEGIN
      if FieldChanged then begin
        CALCFIELDS("Qty. Transferred to Invoice");
        TESTFIELD("Qty. Transferred to Invoice",0);
      end;
    END;

    LOCAL PROCEDURE CheckUsageLinkRelations@7();
    VAR
      JobUsageLink@1000 : Record "Job Usage Link";
    BEGIN
      JobUsageLink.SETRANGE("Job No.","Job No.");
      JobUsageLink.SETRANGE("Job Task No.","Job Task No.");
      JobUsageLink.SETRANGE("Line No.","Line No.");
      if not JobUsageLink.ISEMPTY then
        ERROR(LinkedJobLedgerErr);
    END;

    LOCAL PROCEDURE ControlUsageLink@18();
    VAR
      JobUsageLink@1000 : Record "Job Usage Link";
    BEGIN
      GetJob;

      if Job."Apply Usage Link" then begin
        if "Schedule Line" then
          "Usage Link" := true
        else
          "Usage Link" := false;
      end else begin
        if not "Schedule Line" then
          "Usage Link" := false;
      end;

      JobUsageLink.SETRANGE("Job No.","Job No.");
      JobUsageLink.SETRANGE("Job Task No.","Job Task No.");
      JobUsageLink.SETRANGE("Line No.","Line No.");
      if not JobUsageLink.ISEMPTY and not "Usage Link" then
        ERROR(ControlUsageLinkErr,TABLECAPTION,FIELDCAPTION("Schedule Line"),FIELDCAPTION("Usage Link"));

      VALIDATE("Remaining Qty.",Quantity - "Qty. Posted");
      VALIDATE("Qty. to Transfer to Journal",Quantity - "Qty. Posted");
      UpdateRemainingCostsAndAmounts;

      UpdateQtyToTransfer;
      UpdateQtyToInvoice;
    END;

    LOCAL PROCEDURE CalcLineAmount@12(Qty@1000 : Decimal) : Decimal;
    VAR
      TotalPrice@1001 : Decimal;
    BEGIN
      InitRoundingPrecisions;
      TotalPrice := ROUND(Qty * "Unit Price",AmountRoundingPrecisionFCY);
      exit(TotalPrice - ROUND(TotalPrice * "Line Discount %" / 100,AmountRoundingPrecisionFCY));
    END;

    [External]
    PROCEDURE Overdue@27() : Boolean;
    BEGIN
      if ("Planning Date" < WORKDATE) and ("Remaining Qty." > 0) then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE SetBypassQtyValidation@32(Bypass@1000 : Boolean);
    BEGIN
      BypassQtyValidation := Bypass;
    END;

    LOCAL PROCEDURE UpdateReservation@15(CalledByFieldNo@1000 : Integer);
    VAR
      ReservationCheckDateConfl@1001 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      if (CurrFieldNo <> CalledByFieldNo) and (CurrFieldNo <> 0) then
        exit;
      case CalledByFieldNo of
        FIELDNO("Planning Date"),FIELDNO("Planned Delivery Date"):
          if (xRec."Planning Date" <> "Planning Date") and
             (Quantity <> 0) and
             (Reserve <> Reserve::Never)
          then
            ReservationCheckDateConfl.JobPlanningLineCheck(Rec,true);
        FIELDNO(Quantity):
          JobPlanningLineReserve.VerifyQuantity(Rec,xRec);
        FIELDNO("Usage Link"):
          if (Type = Type::Item) and "Usage Link" then begin
            GetItem;
            if Item.Reserve = Item.Reserve::Optional then begin
              GetJob;
              Reserve := Job.Reserve
            end else
              Reserve := Item.Reserve;
          end else
            Reserve := Reserve::Never;
      end;
      JobPlanningLineReserve.VerifyChange(Rec,xRec);
      UpdatePlanned;
    END;

    LOCAL PROCEDURE UpdateDescription@38();
    BEGIN
      if (xRec.Type = xRec.Type::Resource) and (xRec."No." <> '') then begin
        Res.GET(xRec."No.");
        if Description = Res.Name then
          Description := '';
        if "Description 2" = Res."Name 2" then
          "Description 2" := '';
      end;
    END;

    [External]
    PROCEDURE ShowReservation@74();
    VAR
      Reservation@1000 : Page Reservation;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      TESTFIELD("Usage Link");
      Reservation.SetJobPlanningLine(Rec);
      Reservation.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowReservationEntries@72(Modal@1000 : Boolean);
    VAR
      ReservEntry@1003 : Record "Reservation Entry";
      ReservEngineMgt@1001 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE AutoReserve@73();
    VAR
      ReservMgt@1000 : Codeunit "Reservation Management";
      FullAutoReservation@1001 : Boolean;
      QtyToReserve@1002 : Decimal;
      QtyToReserveBase@1003 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      if Reserve = Reserve::Never then
        FIELDERROR(Reserve);
      JobPlanningLineReserve.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      if QtyToReserveBase <> 0 then begin
        ReservMgt.SetJobPlanningLine(Rec);
        TESTFIELD("Planning Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Planning Date",QtyToReserve,QtyToReserveBase);
        FIND;
        if not FullAutoReservation then begin
          COMMIT;
          if CONFIRM(AutoReserveQst,true) then begin
            ShowReservation;
            FIND;
          end;
        end;
        UpdatePlanned;
      end;
    END;

    [External]
    PROCEDURE ShowTracking@16();
    VAR
      OrderTrackingForm@1000 : Page "Order Tracking";
    BEGIN
      OrderTrackingForm.SetJobPlanningLine(Rec);
      OrderTrackingForm.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowOrderPromisingLine@64();
    VAR
      OrderPromisingLine@1000 : Record "Order Promising Line";
      OrderPromisingLines@1001 : Page "Order Promising Lines";
    BEGIN
      OrderPromisingLine.SETRANGE("Source Type",OrderPromisingLine."Source Type"::Job);
      OrderPromisingLine.SETRANGE("Source Type",OrderPromisingLine."Source Type"::Job);
      OrderPromisingLine.SETRANGE("Source ID","Job No.");
      OrderPromisingLine.SETRANGE("Source Line No.","Job Contract Entry No.");

      OrderPromisingLines.SetSourceType(OrderPromisingLine."Source Type"::Job);
      OrderPromisingLines.SETTABLEVIEW(OrderPromisingLine);
      OrderPromisingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record Item);
    BEGIN
      RESET;
      SETCURRENTKEY(Status,Type,"No.","Variant Code","Location Code","Planning Date");
      SETRANGE(Status,Status::Order);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Planning Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Remaining Qty. (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record Item) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record Item) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE DrillDownJobInvoices@34();
    VAR
      JobInvoices@1000 : Page "Job Invoices";
    BEGIN
      JobInvoices.SetShowDetails(false);
      JobInvoices.SetPrJobPlanningLine(Rec);
      JobInvoices.RUN;
    END;

    LOCAL PROCEDURE CheckRelatedJobPlanningLineInvoice@36();
    VAR
      JobPlanningLineInvoice@1000 : Record "Job Planning Line Invoice";
    BEGIN
      JobPlanningLineInvoice.SETRANGE("Job No.","Job No.");
      JobPlanningLineInvoice.SETRANGE("Job Task No.","Job Task No.");
      JobPlanningLineInvoice.SETRANGE("Job Planning Line No.","Line No.");
      if not JobPlanningLineInvoice.ISEMPTY then
        ERROR(NotPossibleJobPlanningLineErr);
    END;

    [External]
    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      exit(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Job Planning Line",Status,
          "Job No.",'',0,"Job Contract Entry No."));
    END;

    [External]
    PROCEDURE UpdatePlanned@37() : Boolean;
    BEGIN
      CALCFIELDS("Reserved Quantity");
      if Planned = ("Reserved Quantity" = "Remaining Qty.") then
        exit(false);
      Planned := not Planned;
      exit(true);
    END;

    PROCEDURE ClearValues@46();
    BEGIN
      VALIDATE("Remaining Qty.",0);
      "Remaining Total Cost" := 0;
      "Remaining Total Cost (LCY)" := 0;
      "Remaining Line Amount" := 0;
      "Remaining Line Amount (LCY)" := 0;
      VALIDATE("Qty. Posted",0);
      VALIDATE("Qty. to Transfer to Journal",0);
      "Posted Total Cost" := 0;
      "Posted Total Cost (LCY)" := 0;
      "Posted Line Amount" := 0;
      "Posted Line Amount (LCY)" := 0;
    END;

    PROCEDURE InitFromJobPlanningLine@39(FromJobPlanningLine@1000 : Record "Job Planning Line";NewQuantity@1001 : Decimal);
    VAR
      ToJobPlanningLine@1003 : Record "Job Planning Line";
      JobJnlManagement@1002 : Codeunit JobJnlManagement;
    BEGIN
      ToJobPlanningLine := Rec;

      ToJobPlanningLine.INIT;
      ToJobPlanningLine.TRANSFERFIELDS(FromJobPlanningLine);
      ToJobPlanningLine."Line No." := GetNextJobLineNo(FromJobPlanningLine);
      ToJobPlanningLine.VALIDATE("Line Type","Line Type"::Billable);
      ToJobPlanningLine.ClearValues;
      ToJobPlanningLine."Job Contract Entry No." := JobJnlManagement.GetNextEntryNo;
      if ToJobPlanningLine.Type <> ToJobPlanningLine.Type::Text then begin
        ToJobPlanningLine.VALIDATE(Quantity,NewQuantity);
        ToJobPlanningLine.VALIDATE("Currency Code",FromJobPlanningLine."Currency Code");
        ToJobPlanningLine.VALIDATE("Currency Date",FromJobPlanningLine."Currency Date");
        ToJobPlanningLine.VALIDATE("Currency Factor",FromJobPlanningLine."Currency Factor");
        ToJobPlanningLine.VALIDATE("Unit Cost",FromJobPlanningLine."Unit Cost");
        ToJobPlanningLine.VALIDATE("Unit Price",FromJobPlanningLine."Unit Price");
      end;

      Rec := ToJobPlanningLine;
    END;

    LOCAL PROCEDURE GetNextJobLineNo@41(FromJobPlanningLine@1000 : Record "Job Planning Line") : Integer;
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",FromJobPlanningLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",FromJobPlanningLine."Job Task No.");
      if JobPlanningLine.FINDLAST then;
      exit(JobPlanningLine."Line No." + 10000);
    END;

    BEGIN
    END.
  }
}

