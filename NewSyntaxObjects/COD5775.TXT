OBJECT Codeunit 5775 Whse. Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Source Document is not defined.';

    [External]
    PROCEDURE GetSourceDocument@2(SourceType@1001 : Integer;SourceSubtype@1002 : Integer) : Integer;
    VAR
      SourceDocument@1000 : ',"S. Order","S. Invoice","S. Credit Memo","S. Return Order","P. Order","P. Invoice","P. Credit Memo","P. Return Order","Inb. Transfer","Outb. Transfer","Prod. Consumption","Item Jnl.","Phys. Invt. Jnl.","Reclass. Jnl.","Consumption Jnl.","Output Jnl.","BOM Jnl.","Serv. Order","Job Jnl.","Assembly Consumption","Assembly Order"';
    BEGIN
      case SourceType of
        DATABASE::"Sales Line":
          case SourceSubtype of
            1:
              exit(SourceDocument::"S. Order");
            2:
              exit(SourceDocument::"S. Invoice");
            3:
              exit(SourceDocument::"S. Credit Memo");
            5:
              exit(SourceDocument::"S. Return Order");
          end;
        DATABASE::"Purchase Line":
          case SourceSubtype of
            1:
              exit(SourceDocument::"P. Order");
            2:
              exit(SourceDocument::"P. Invoice");
            3:
              exit(SourceDocument::"P. Credit Memo");
            5:
              exit(SourceDocument::"P. Return Order");
          end;
        DATABASE::"Service Line":
          exit(SourceDocument::"Serv. Order");
        DATABASE::"Prod. Order Component":
          exit(SourceDocument::"Prod. Consumption");
        DATABASE::"Assembly Line":
          exit(SourceDocument::"Assembly Consumption");
        DATABASE::"Assembly Header":
          exit(SourceDocument::"Assembly Order");
        DATABASE::"Transfer Line":
          case SourceSubtype of
            0:
              exit(SourceDocument::"Outb. Transfer");
            1:
              exit(SourceDocument::"Inb. Transfer");
          end;
        DATABASE::"Item Journal Line":
          case SourceSubtype of
            0:
              exit(SourceDocument::"Item Jnl.");
            1:
              exit(SourceDocument::"Reclass. Jnl.");
            2:
              exit(SourceDocument::"Phys. Invt. Jnl.");
            4:
              exit(SourceDocument::"Consumption Jnl.");
            5:
              exit(SourceDocument::"Output Jnl.");
          end;
        DATABASE::"Job Journal Line":
          exit(SourceDocument::"Job Jnl.");
      end;
      ERROR(Text000);
    END;

    [External]
    PROCEDURE GetSourceType@1(WhseWkshLine@1000 : Record "Whse. Worksheet Line") SourceType : Integer;
    BEGIN
      with WhseWkshLine do
        case "Whse. Document Type" of
          "Whse. Document Type"::Receipt:
            SourceType := DATABASE::"Posted Whse. Receipt Line";
          "Whse. Document Type"::Shipment:
            SourceType := DATABASE::"Warehouse Shipment Line";
          "Whse. Document Type"::Production:
            SourceType := DATABASE::"Prod. Order Component";
          "Whse. Document Type"::Assembly:
            SourceType := DATABASE::"Assembly Line";
          "Whse. Document Type"::"Internal Put-away":
            SourceType := DATABASE::"Whse. Internal Put-away Line";
          "Whse. Document Type"::"Internal Pick":
            SourceType := DATABASE::"Whse. Internal Pick Line";
        end;
    END;

    [External]
    PROCEDURE GetOutboundDocLineQtyOtsdg@3(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1000 : Decimal;VAR QtyBaseOutstanding@1001 : Decimal);
    VAR
      WhseShptLine@1009 : Record "Warehouse Shipment Line";
    BEGIN
      with WhseShptLine do begin
        SETCURRENTKEY("Source Type");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Line No.",SourceLineNo);
        if FINDFIRST then begin
          CALCSUMS("Qty. Outstanding (Base)","Qty. Outstanding");
          CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
          QtyOutstanding := "Qty. Outstanding" - "Pick Qty." - "Qty. to Ship";
          QtyBaseOutstanding := "Qty. Outstanding (Base)" - "Pick Qty. (Base)" - "Qty. to Ship (Base)";
        end else
          GetSrcDocLineQtyOutstanding(SourceType,SourceSubType,SourceNo,
            SourceLineNo,SourceSubLineNo,QtyOutstanding,QtyBaseOutstanding);
      end;
    END;

    LOCAL PROCEDURE GetSrcDocLineQtyOutstanding@7(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1001 : Decimal;VAR QtyBaseOutstanding@1000 : Decimal);
    VAR
      SalesLine@1008 : Record "Sales Line";
      PurchaseLine@1009 : Record "Purchase Line";
      TransferLine@1010 : Record "Transfer Line";
      ServiceLine@1013 : Record "Service Line";
      ProdOrderComp@1011 : Record "Prod. Order Component";
      AssemblyLine@1007 : Record "Assembly Line";
      ProdOrderLine@1012 : Record "Prod. Order Line";
    BEGIN
      case SourceType of
        DATABASE::"Sales Line":
          if SalesLine.GET(SourceSubType,SourceNo,SourceLineNo) then begin
            QtyOutstanding := SalesLine."Outstanding Quantity";
            QtyBaseOutstanding := SalesLine."Outstanding Qty. (Base)";
          end;
        DATABASE::"Purchase Line":
          if PurchaseLine.GET(SourceSubType,SourceNo,SourceLineNo) then begin
            QtyOutstanding := PurchaseLine."Outstanding Quantity";
            QtyBaseOutstanding := PurchaseLine."Outstanding Qty. (Base)";
          end;
        DATABASE::"Transfer Line":
          if TransferLine.GET(SourceNo,SourceLineNo) then
            case SourceSubType of
              0: // Direction = Outbound
                begin
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse Outbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse Outbnd. Otsdg. Qty (Base)";
                end;
              1: // Direction = Inbound
                begin
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse. Inbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse. Inbnd. Otsdg. Qty (Base)";
                end;
            end;
        DATABASE::"Service Line":
          if ServiceLine.GET(SourceSubType,SourceNo,SourceLineNo) then begin
            QtyOutstanding := ServiceLine."Outstanding Quantity";
            QtyBaseOutstanding := ServiceLine."Outstanding Qty. (Base)";
          end;
        DATABASE::"Prod. Order Component":
          if ProdOrderComp.GET(SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo) then begin
            QtyOutstanding := ProdOrderComp."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderComp."Remaining Qty. (Base)";
          end;
        DATABASE::"Assembly Line":
          if AssemblyLine.GET(SourceSubType,SourceNo,SourceLineNo) then begin
            QtyOutstanding := AssemblyLine."Remaining Quantity";
            QtyBaseOutstanding := AssemblyLine."Remaining Quantity (Base)";
          end;
        DATABASE::"Prod. Order Line":
          if ProdOrderLine.GET(SourceSubType,SourceNo,SourceLineNo) then begin
            QtyOutstanding := ProdOrderLine."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderLine."Remaining Qty. (Base)";
          end;
        else begin
          QtyOutstanding := 0;
          QtyBaseOutstanding := 0;
        end;
      end;
    END;

    BEGIN
    END.
  }
}

