OBJECT Codeunit 7500 Item Attribute Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DeleteAttributesInheritedFromOldCategoryQst@1000 : TextConst '@@@=%1 - item category code;ENU=Do you want to delete the attributes that are inherited from item category ''%1''?';
      DeleteItemInheritedParentCategoryAttributesQst@1001 : TextConst '@@@=%1 - item category code,%2 - item category code;ENU=One or more items belong to item category ''''%1'''', which is a child of item category ''''%2''''.\\Do you want to delete the inherited item attributes for the items in question?';

    [Internal]
    PROCEDURE FindItemsByAttribute@1(VAR FilterItemAttributesBuffer@1001 : Record "Filter Item Attributes Buffer") ItemFilter : Text;
    VAR
      ItemAttributeValueMapping@1003 : Record "Item Attribute Value Mapping";
      ItemAttribute@1000 : Record "Item Attribute";
      AttributeValueIDFilter@1005 : Text;
      CurrentItemFilter@1002 : Text;
    BEGIN
      if not FilterItemAttributesBuffer.FINDSET then
        exit;

      ItemFilter := '<>*';

      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      CurrentItemFilter := '*';

      repeat
        ItemAttribute.SETRANGE(Name,FilterItemAttributesBuffer.Attribute);
        if ItemAttribute.FINDFIRST then begin
          ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ItemAttribute.ID);
          AttributeValueIDFilter := GetItemAttributeValueFilter(FilterItemAttributesBuffer,ItemAttribute);
          if AttributeValueIDFilter = '' then
            exit;

          CurrentItemFilter := GetItemNoFilter(ItemAttributeValueMapping,CurrentItemFilter,AttributeValueIDFilter);
          if CurrentItemFilter = '' then
            exit;
        end;
      until FilterItemAttributesBuffer.NEXT = 0;

      ItemFilter := CurrentItemFilter;
    END;

    [External]
    PROCEDURE FindItemsByAttributes@50(VAR FilterItemAttributesBuffer@1001 : Record "Filter Item Attributes Buffer";VAR TempFilteredItem@1004 : TEMPORARY Record Item);
    VAR
      ItemAttributeValueMapping@1003 : Record "Item Attribute Value Mapping";
      ItemAttribute@1000 : Record "Item Attribute";
      AttributeValueIDFilter@1005 : Text;
    BEGIN
      if not FilterItemAttributesBuffer.FINDSET then
        exit;

      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);

      repeat
        ItemAttribute.SETRANGE(Name,FilterItemAttributesBuffer.Attribute);
        if ItemAttribute.FINDFIRST then begin
          ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ItemAttribute.ID);
          AttributeValueIDFilter := GetItemAttributeValueFilter(FilterItemAttributesBuffer,ItemAttribute);
          if AttributeValueIDFilter = '' then begin
            TempFilteredItem.DELETEALL;
            exit;
          end;

          GetFilteredItems(ItemAttributeValueMapping,TempFilteredItem,AttributeValueIDFilter);
          if TempFilteredItem.ISEMPTY then
            exit;
        end;
      until FilterItemAttributesBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE GetItemAttributeValueFilter@9(VAR FilterItemAttributesBuffer@1000 : Record "Filter Item Attributes Buffer";VAR ItemAttribute@1003 : Record "Item Attribute") AttributeFilter : Text;
    VAR
      ItemAttributeValue@1001 : Record "Item Attribute Value";
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID",ItemAttribute.ID);
      ItemAttributeValue.SetValueFilter(ItemAttribute,FilterItemAttributesBuffer.Value);

      if not ItemAttributeValue.FINDSET then
        exit;

      repeat
        AttributeFilter += STRSUBSTNO('%1|',ItemAttributeValue.ID);
      until ItemAttributeValue.NEXT = 0;

      exit(COPYSTR(AttributeFilter,1,STRLEN(AttributeFilter) - 1));
    END;

    LOCAL PROCEDURE GetItemNoFilter@24(VAR ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";PreviousItemNoFilter@1000 : Text;AttributeValueIDFilter@1002 : Text) ItemNoFilter : Text;
    BEGIN
      ItemAttributeValueMapping.SETFILTER("No.",PreviousItemNoFilter);
      ItemAttributeValueMapping.SETFILTER("Item Attribute Value ID",AttributeValueIDFilter);

      if not ItemAttributeValueMapping.FINDSET then
        exit;

      repeat
        ItemNoFilter += STRSUBSTNO('%1|',ItemAttributeValueMapping."No.");
      until ItemAttributeValueMapping.NEXT = 0;

      exit(COPYSTR(ItemNoFilter,1,STRLEN(ItemNoFilter) - 1));
    END;

    LOCAL PROCEDURE GetFilteredItems@51(VAR ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";VAR TempFilteredItem@1000 : TEMPORARY Record Item;AttributeValueIDFilter@1002 : Text);
    BEGIN
      ItemAttributeValueMapping.SETFILTER("Item Attribute Value ID",AttributeValueIDFilter);

      if ItemAttributeValueMapping.ISEMPTY then begin
        TempFilteredItem.RESET;
        TempFilteredItem.DELETEALL;
        exit;
      end;

      if not TempFilteredItem.FINDSET then begin
        if ItemAttributeValueMapping.FINDSET then
          repeat
            TempFilteredItem."No." := ItemAttributeValueMapping."No.";
            TempFilteredItem.INSERT;
          until ItemAttributeValueMapping.NEXT = 0;
        exit;
      end;

      repeat
        ItemAttributeValueMapping.SETRANGE("No.",TempFilteredItem."No.");
        if ItemAttributeValueMapping.ISEMPTY then
          TempFilteredItem.DELETE;
      until TempFilteredItem.NEXT = 0;
      ItemAttributeValueMapping.SETRANGE("No.");
    END;

    [External]
    PROCEDURE GetItemNoFilterText@12(VAR TempFilteredItem@1000 : TEMPORARY Record Item;VAR ParameterCount@1004 : Integer) FilterText : Text;
    VAR
      NextItem@1002 : Record Item;
      PreviousNo@1001 : Code[20];
      FilterRangeStarted@1003 : Boolean;
    BEGIN
      if not TempFilteredItem.FINDSET then begin
        FilterText := '<>*';
        exit;
      end;

      repeat
        if FilterText = '' then begin
          FilterText := TempFilteredItem."No.";
          NextItem."No." := TempFilteredItem."No.";
          ParameterCount += 1;
        end else begin
          if NextItem.NEXT = 0 then
            NextItem."No." := '';
          if TempFilteredItem."No." = NextItem."No." then begin
            if not FilterRangeStarted then
              FilterText += '..';
            FilterRangeStarted := true;
          end else
            if not FilterRangeStarted then begin
              FilterText += STRSUBSTNO('|%1',TempFilteredItem."No.");
              ParameterCount += 1;
            end else begin
              FilterText += STRSUBSTNO('%1|%2',PreviousNo,TempFilteredItem."No.");
              FilterRangeStarted := false;
              ParameterCount += 2;
            end;
        end;
        PreviousNo := TempFilteredItem."No.";
      until TempFilteredItem.NEXT = 0;

      // close range if needed
      if FilterRangeStarted then begin
        FilterText += STRSUBSTNO('%1',PreviousNo);
        ParameterCount += 1;
      end;
    END;

    [External]
    PROCEDURE InheritAttributesFromItemCategory@13(Item@1007 : Record Item;NewItemCategoryCode@1002 : Code[20];OldItemCategoryCode@1003 : Code[20]);
    VAR
      TempItemAttributeValueToInsert@1005 : TEMPORARY Record "Item Attribute Value";
      TempItemAttributeValueToDelete@1004 : TEMPORARY Record "Item Attribute Value";
    BEGIN
      GenerateAttributesToInsertAndToDelete(
        TempItemAttributeValueToInsert,TempItemAttributeValueToDelete,NewItemCategoryCode,OldItemCategoryCode);

      if not TempItemAttributeValueToDelete.ISEMPTY then
        if not GUIALLOWED then
          DeleteItemAttributeValueMapping(Item,TempItemAttributeValueToDelete)
        else
          if CONFIRM(STRSUBSTNO(DeleteAttributesInheritedFromOldCategoryQst,OldItemCategoryCode)) then
            DeleteItemAttributeValueMapping(Item,TempItemAttributeValueToDelete);

      if not TempItemAttributeValueToInsert.ISEMPTY then
        InsertItemAttributeValueMapping(Item,TempItemAttributeValueToInsert);
    END;

    [External]
    PROCEDURE UpdateCategoryAttributesAfterChangingParentCategory@2(ItemCategoryCode@1000 : Code[20];NewParentItemCategory@1001 : Code[20];OldParentItemCategory@1002 : Code[20]);
    VAR
      TempNewParentItemAttributeValue@1007 : TEMPORARY Record "Item Attribute Value";
      TempOldParentItemAttributeValue@1006 : TEMPORARY Record "Item Attribute Value";
    BEGIN
      TempNewParentItemAttributeValue.LoadCategoryAttributesFactBoxData(NewParentItemCategory);
      TempOldParentItemAttributeValue.LoadCategoryAttributesFactBoxData(OldParentItemCategory);
      UpdateCategoryItemsAttributeValueMapping(
        TempNewParentItemAttributeValue,TempOldParentItemAttributeValue,ItemCategoryCode,OldParentItemCategory);
    END;

    LOCAL PROCEDURE GenerateAttributesToInsertAndToDelete@6(VAR TempItemAttributeValueToInsert@1003 : TEMPORARY Record "Item Attribute Value";VAR TempItemAttributeValueToDelete@1002 : TEMPORARY Record "Item Attribute Value";NewItemCategoryCode@1001 : Code[20];OldItemCategoryCode@1000 : Code[20]);
    VAR
      TempNewCategItemAttributeValue@1005 : TEMPORARY Record "Item Attribute Value";
      TempOldCategItemAttributeValue@1004 : TEMPORARY Record "Item Attribute Value";
    BEGIN
      TempNewCategItemAttributeValue.LoadCategoryAttributesFactBoxData(NewItemCategoryCode);
      TempOldCategItemAttributeValue.LoadCategoryAttributesFactBoxData(OldItemCategoryCode);
      GenerateAttributeDifference(TempNewCategItemAttributeValue,TempOldCategItemAttributeValue,TempItemAttributeValueToInsert);
      GenerateAttributeDifference(TempOldCategItemAttributeValue,TempNewCategItemAttributeValue,TempItemAttributeValueToDelete);
    END;

    LOCAL PROCEDURE GenerateAttributeDifference@16(VAR TempFirstItemAttributeValue@1002 : TEMPORARY Record "Item Attribute Value";VAR TempSecondItemAttributeValue@1001 : TEMPORARY Record "Item Attribute Value";VAR TempResultingItemAttributeValue@1000 : TEMPORARY Record "Item Attribute Value");
    BEGIN
      if TempFirstItemAttributeValue.FINDFIRST then
        repeat
          TempSecondItemAttributeValue.SETRANGE("Attribute ID",TempFirstItemAttributeValue."Attribute ID");
          if TempSecondItemAttributeValue.ISEMPTY then begin
            TempResultingItemAttributeValue.TRANSFERFIELDS(TempFirstItemAttributeValue);
            TempResultingItemAttributeValue.INSERT;
          end;
          TempSecondItemAttributeValue.RESET;
        until TempFirstItemAttributeValue.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteItemAttributeValueMapping@29(Item@1002 : Record Item;VAR TempItemAttributeValueToRemove@1000 : TEMPORARY Record "Item Attribute Value");
    VAR
      ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
      ItemAttributeValuesToRemoveTxt@1003 : Text;
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",Item."No.");
      if TempItemAttributeValueToRemove.FINDFIRST then begin
        repeat
          if ItemAttributeValuesToRemoveTxt <> '' then
            ItemAttributeValuesToRemoveTxt += STRSUBSTNO('|%1',TempItemAttributeValueToRemove."Attribute ID")
          else
            ItemAttributeValuesToRemoveTxt := FORMAT(TempItemAttributeValueToRemove."Attribute ID");
        until TempItemAttributeValueToRemove.NEXT = 0;
        ItemAttributeValueMapping.SETFILTER("Item Attribute ID",ItemAttributeValuesToRemoveTxt);
        ItemAttributeValueMapping.DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE InsertItemAttributeValueMapping@43(Item@1002 : Record Item;VAR TempItemAttributeValueToInsert@1000 : TEMPORARY Record "Item Attribute Value");
    VAR
      DummyItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
    BEGIN
      if TempItemAttributeValueToInsert.FINDFIRST then
        repeat
          DummyItemAttributeValueMapping."Table ID" := DATABASE::Item;
          DummyItemAttributeValueMapping."No." := Item."No.";
          DummyItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueToInsert."Attribute ID";
          DummyItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueToInsert.ID;
          if DummyItemAttributeValueMapping.INSERT(true) then;
        until TempItemAttributeValueToInsert.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateCategoryItemsAttributeValueMapping@4(VAR TempNewItemAttributeValue@1003 : TEMPORARY Record "Item Attribute Value";VAR TempOldItemAttributeValue@1002 : TEMPORARY Record "Item Attribute Value";ItemCategoryCode@1004 : Code[20];OldItemCategoryCode@1005 : Code[20]);
    VAR
      TempItemAttributeValueToInsert@1001 : TEMPORARY Record "Item Attribute Value";
      TempItemAttributeValueToDelete@1000 : TEMPORARY Record "Item Attribute Value";
    BEGIN
      GenerateAttributeDifference(TempNewItemAttributeValue,TempOldItemAttributeValue,TempItemAttributeValueToInsert);
      GenerateAttributeDifference(TempOldItemAttributeValue,TempNewItemAttributeValue,TempItemAttributeValueToDelete);

      if not TempItemAttributeValueToDelete.ISEMPTY then
        if not GUIALLOWED then
          DeleteCategoryItemsAttributeValueMapping(TempItemAttributeValueToDelete,ItemCategoryCode)
        else
          if CONFIRM(STRSUBSTNO(DeleteItemInheritedParentCategoryAttributesQst,ItemCategoryCode,OldItemCategoryCode)) then
            DeleteCategoryItemsAttributeValueMapping(TempItemAttributeValueToDelete,ItemCategoryCode);

      if not TempItemAttributeValueToInsert.ISEMPTY then
        InsertCategoryItemsAttributeValueMapping(TempItemAttributeValueToInsert,ItemCategoryCode);
    END;

    [External]
    PROCEDURE DeleteCategoryItemsAttributeValueMapping@8(VAR TempItemAttributeValueToRemove@1000 : TEMPORARY Record "Item Attribute Value";CategoryCode@1002 : Code[20]);
    VAR
      Item@1003 : Record Item;
      ItemCategory@1004 : Record "Item Category";
    BEGIN
      Item.SETRANGE("Item Category Code",CategoryCode);
      if Item.FINDSET then
        repeat
          DeleteItemAttributeValueMapping(Item,TempItemAttributeValueToRemove);
        until Item.NEXT = 0;

      ItemCategory.SETRANGE("Parent Category",CategoryCode);
      if ItemCategory.FINDSET then
        repeat
          DeleteCategoryItemsAttributeValueMapping(TempItemAttributeValueToRemove,ItemCategory.Code);
        until ItemCategory.NEXT = 0;
    END;

    [External]
    PROCEDURE InsertCategoryItemsAttributeValueMapping@7(VAR TempItemAttributeValueToInsert@1000 : TEMPORARY Record "Item Attribute Value";CategoryCode@1002 : Code[20]);
    VAR
      Item@1003 : Record Item;
      ItemCategory@1001 : Record "Item Category";
    BEGIN
      Item.SETRANGE("Item Category Code",CategoryCode);
      if Item.FINDSET then
        repeat
          InsertItemAttributeValueMapping(Item,TempItemAttributeValueToInsert);
        until Item.NEXT = 0;

      ItemCategory.SETRANGE("Parent Category",CategoryCode);
      if ItemCategory.FINDSET then
        repeat
          InsertCategoryItemsAttributeValueMapping(TempItemAttributeValueToInsert,ItemCategory.Code);
        until ItemCategory.NEXT = 0;
    END;

    [External]
    PROCEDURE InsertCategoryItemsBufferedAttributeValueMapping@10(VAR TempItemAttributeValueToInsert@1000 : TEMPORARY Record "Item Attribute Value";VAR TempInsertedItemAttributeValueMapping@1004 : TEMPORARY Record "Item Attribute Value Mapping";CategoryCode@1002 : Code[20]);
    VAR
      Item@1003 : Record Item;
      ItemCategory@1001 : Record "Item Category";
    BEGIN
      Item.SETRANGE("Item Category Code",CategoryCode);
      if Item.FINDSET then
        repeat
          InsertBufferedItemAttributeValueMapping(Item,TempItemAttributeValueToInsert,TempInsertedItemAttributeValueMapping);
        until Item.NEXT = 0;

      ItemCategory.SETRANGE("Parent Category",CategoryCode);
      if ItemCategory.FINDSET then
        repeat
          InsertCategoryItemsBufferedAttributeValueMapping(
            TempItemAttributeValueToInsert,TempInsertedItemAttributeValueMapping,ItemCategory.Code);
        until ItemCategory.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertBufferedItemAttributeValueMapping@11(Item@1002 : Record Item;VAR TempItemAttributeValueToInsert@1000 : TEMPORARY Record "Item Attribute Value";VAR TempInsertedItemAttributeValueMapping@1003 : TEMPORARY Record "Item Attribute Value Mapping");
    VAR
      DummyItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
    BEGIN
      if TempItemAttributeValueToInsert.FINDFIRST then
        repeat
          DummyItemAttributeValueMapping."Table ID" := DATABASE::Item;
          DummyItemAttributeValueMapping."No." := Item."No.";
          DummyItemAttributeValueMapping."Item Attribute ID" := TempItemAttributeValueToInsert."Attribute ID";
          DummyItemAttributeValueMapping."Item Attribute Value ID" := TempItemAttributeValueToInsert.ID;
          if DummyItemAttributeValueMapping.INSERT(true) then begin
            TempInsertedItemAttributeValueMapping.TRANSFERFIELDS(DummyItemAttributeValueMapping);
            TempInsertedItemAttributeValueMapping.INSERT;
          end;
        until TempItemAttributeValueToInsert.NEXT = 0;
    END;

    [External]
    PROCEDURE SearchCategoryItemsForAttribute@3(CategoryCode@1002 : Code[20];AttributeID@1003 : Integer) : Boolean;
    VAR
      Item@1001 : Record Item;
      ItemCategory@1000 : Record "Item Category";
      ItemAttributeValueMapping@1004 : Record "Item Attribute Value Mapping";
    BEGIN
      Item.SETRANGE("Item Category Code",CategoryCode);
      if Item.FINDSET then
        repeat
          ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
          ItemAttributeValueMapping.SETRANGE("No.",Item."No.");
          ItemAttributeValueMapping.SETRANGE("Item Attribute ID",AttributeID);
          if ItemAttributeValueMapping.FINDFIRST then
            exit(true);
        until Item.NEXT = 0;

      ItemCategory.SETRANGE("Parent Category",CategoryCode);
      if ItemCategory.FINDSET then
        repeat
          if SearchCategoryItemsForAttribute(ItemCategory.Code,AttributeID) then
            exit(true);
        until ItemCategory.NEXT = 0;
    END;

    [External]
    PROCEDURE DoesValueExistInItemAttributeValues@14(Text@1001 : Text[250];VAR ItemAttributeValue@1000 : Record "Item Attribute Value") : Boolean;
    BEGIN
      ItemAttributeValue.RESET;
      ItemAttributeValue.SETFILTER(Value,'@' + Text);
      exit(ItemAttributeValue.FINDSET);
    END;

    BEGIN
    END.
  }
}

