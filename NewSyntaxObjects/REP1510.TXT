OBJECT Report 1510 Copy Workflow
{
  OBJECT-PROPERTIES
  {
    Date=20150915D;
    Time=120000T;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Workflow;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  CopyWorkflow;
                END;

    UseRequestPage=false;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FromWorkflow@1003 : Record Workflow;
      ToWorkflow@1004 : Record Workflow;
      FromWorkflowCode@1000 : Code[20];
      StepsExistQst@1001 : TextConst 'ENU=The existing workflow steps will be deleted.\\Do you want to continue?';
      SelfCopyErr@1002 : TextConst 'ENU=You cannot copy a workflow into itself.';

    LOCAL PROCEDURE CopyWorkflow@5();
    BEGIN
      FromWorkflow.GET(FromWorkflowCode);

      if FromWorkflow.Code = ToWorkflow.Code then
        ERROR(SelfCopyErr);

      if ToWorkflow.Description = '' then
        ToWorkflow.Description := FromWorkflow.Description;
      if ToWorkflow.Category = '' then
        ToWorkflow.Category := FromWorkflow.Category;
      ToWorkflow.MODIFY;

      CopyWorkflowSteps;
    END;

    LOCAL PROCEDURE CopyWorkflowSteps@7();
    VAR
      FromWorkflowStep@1002 : Record "Workflow Step";
      FromWorkflowStepArgument@1000 : Record "Workflow Step Argument";
      ToWorkflowStep@1004 : Record "Workflow Step";
    BEGIN
      ToWorkflowStep.SETRANGE("Workflow Code",ToWorkflow.Code);
      if not ToWorkflowStep.ISEMPTY then
        if not CONFIRM(StepsExistQst) then
          CurrReport.QUIT;

      ToWorkflowStep.DELETEALL(true);

      FromWorkflowStep.SETRANGE("Workflow Code",FromWorkflow.Code);
      if FromWorkflowStep.FINDSET then
        repeat
          ToWorkflowStep.COPY(FromWorkflowStep);
          ToWorkflowStep."Workflow Code" := ToWorkflow.Code;
          if FromWorkflowStepArgument.GET(FromWorkflowStep.Argument) then
            ToWorkflowStep.Argument := FromWorkflowStepArgument.Clone;
          ToWorkflowStep.INSERT(true);

          CopyWorkflowRules(FromWorkflowStep,ToWorkflowStep);
        until FromWorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyWorkflowRules@2(FromWorkflowStep@1000 : Record "Workflow Step";ToWorkflowStep@1001 : Record "Workflow Step");
    VAR
      FromWorkflowRule@1002 : Record "Workflow Rule";
      ToWorkflowRule@1003 : Record "Workflow Rule";
    BEGIN
      FromWorkflowStep.FindWorkflowRules(FromWorkflowRule);
      if FromWorkflowRule.FINDSET then
        repeat
          ToWorkflowRule.COPY(FromWorkflowRule);
          ToWorkflowRule.ID := 0;
          ToWorkflowRule."Workflow Code" := ToWorkflowStep."Workflow Code";
          ToWorkflowRule."Workflow Step ID" := ToWorkflowStep.ID;
          ToWorkflowRule.INSERT(true);
        until FromWorkflowRule.NEXT = 0;
    END;

    PROCEDURE InitCopyWorkflow@3(NewFromWorkflow@1000 : Record Workflow;NewToWorkflow@1001 : Record Workflow);
    BEGIN
      FromWorkflowCode := NewFromWorkflow.Code;
      ToWorkflow := NewToWorkflow;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

