OBJECT Report 98 Date Compress General Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rimd,
                TableData "G/L Register"=rimd,
                TableData "Date Compr. Register"=rimd,
                TableData "G/L Entry - VAT Entry Link"=rimd,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "G/L - Item Ledger Relation"=rimd;
    CaptionML=ENU=Date Compress General Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(3,REPORT::"Date Compress General Ledger",'',RetainDimText,Text010);
                END;

  }
  DATASET
  {
    { 7069;    ;DataItem;G/L Entry           ;
               DataItemTable="G/L Entry";
               DataItemTableView=SORTING("G/L Account No.","Posting Date");
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not
                                  CONFIRM(
                                    Text000 +
                                    Text002,false)
                               then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               if AnalysisView.FINDFIRST then begin
                                 AnalysisView.CheckDimensionsAreRetained(3,REPORT::"Date Compress General Ledger",false);
                                 AnalysisView.CheckViewsAreUpdated;
                                 COMMIT;
                               end;

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress G/L");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress General Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress General Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[6] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress General Ledger",'',GLSetup."Global Dimension 2 Code");

                               NewGLEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;
                               if GLEntry2.FIND('+') then;
                               LastEntryNo := GLEntry2."Entry No.";
                               NextTransactionNo := GLEntry2."Transaction No." + 1;
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  GLEntry2 := "G/L Entry";
                                  with GLEntry2 do begin
                                    SETCURRENTKEY("G/L Account No.","Posting Date");
                                    COPYFILTERS("G/L Entry");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));
                                    repeat
                                      SETRANGE("G/L Account No.","G/L Account No.");
                                      SETRANGE("Gen. Posting Type","Gen. Posting Type");
                                      SETRANGE("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                                      SETRANGE("Gen. Prod. Posting Group","Gen. Prod. Posting Group");

                                      if RetainNo(FIELDNO("Document Type")) then
                                        SETRANGE("Document Type","Document Type");
                                      if RetainNo(FIELDNO("Document No.")) then
                                        SETRANGE("Document No.","Document No.");
                                      if RetainNo(FIELDNO("Job No.")) then
                                        SETRANGE("Job No.","Job No.");
                                      if RetainNo(FIELDNO("Business Unit Code")) then
                                        SETRANGE("Business Unit Code","Business Unit Code");
                                      if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                        SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                      if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                        SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                      if Amount <> 0 then begin
                                        if Amount > 0 then
                                          SETFILTER(Amount,'>0')
                                        else
                                          SETFILTER(Amount,'<0');
                                      end else begin
                                        SETRANGE(Amount,0);
                                        if "Additional-Currency Amount" >= 0 then
                                          SETFILTER("Additional-Currency Amount",'>=0')
                                        else
                                          SETFILTER("Additional-Currency Amount",'<0');
                                      end;

                                      InitNewEntry(NewGLEntry);

                                      DimBufMgt.CollectDimEntryNo(
                                        TempSelectedDim,"Dimension Set ID","Entry No.",
                                        0,false,DimEntryNo);
                                      ComprDimEntryNo := DimEntryNo;
                                      SummarizeEntry(NewGLEntry,GLEntry2);
                                      while NEXT <> 0 do begin
                                        DimBufMgt.CollectDimEntryNo(
                                          TempSelectedDim,"Dimension Set ID","Entry No.",
                                          ComprDimEntryNo,true,DimEntryNo);
                                        if DimEntryNo = ComprDimEntryNo then
                                          SummarizeEntry(NewGLEntry,GLEntry2);
                                      end;

                                      InsertNewEntry(NewGLEntry,ComprDimEntryNo);

                                      ComprCollectedEntries;

                                      COPYFILTERS("G/L Entry");
                                      SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));
                                    until not FIND('-');
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(GLReg,DateComprReg);

                                if AnalysisView.FINDFIRST then
                                  AnalysisView.UpdateLastEntryNo;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  ClosingDates=true;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  ClosingDates=true;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies a text that accompanies the entries that result from the compression. The default description is Date Compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdGLEntry.Description }

      { 1907651001;2;Group  ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Document Type;
                  CaptionML=ENU=Document Type;
                  ToolTipML=ENU=Specifies the type of document that is processed by the report or batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  Name=Job No.;
                  CaptionML=ENU=Job No.;
                  ToolTipML=ENU=Specifies the job number.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[3] }

      { 8   ;3   ;Field     ;
                  Name=Business Unit Code;
                  CaptionML=ENU=Business Unit Code;
                  ToolTipML=ENU=Specifies the code for the business unit.;
                  ApplicationArea=#Advanced;
                  SourceExpr=Retain[4] }

      { 12  ;2   ;Field     ;
                  Name=Retain Dimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress General Ledger",RetainDimText);
                               END;
                                }

      { 1907155901;2;Group  ;
                  Name=Retain Totals;
                  CaptionML=ENU=Retain Totals }

      { 11  ;3   ;Field     ;
                  Name=Quantity;
                  CaptionML=ENU=Quantity;
                  ToolTipML=ENU=Specifies the item quantity on the ledger entries that will be date compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[7] }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing G/L entries...\\';
      Text005@1005 : TextConst 'ENU=G/L Account No.      #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      GLReg@1014 : Record "G/L Register";
      EntrdGLEntry@1015 : Record "G/L Entry";
      NewGLEntry@1016 : Record "G/L Entry";
      GLEntry2@1017 : Record "G/L Entry";
      SelectedDim@1018 : Record "Selected Dimension";
      TempSelectedDim@1019 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1020 : Record "Dimension Selection Buffer";
      AnalysisView@1021 : Record "Analysis View";
      DateComprMgt@1022 : Codeunit DateComprMgt;
      DimBufMgt@1023 : Codeunit "Dimension Buffer Management";
      DimMgt@1024 : Codeunit DimensionManagement;
      Window@1025 : Dialog;
      NoOfFields@1026 : Integer;
      NoOfFieldsContents@1027 : Integer;
      Retain@1028 : ARRAY [10] OF Boolean;
      FieldNumber@1029 : ARRAY [10] OF Integer;
      FieldNameArray@1030 : ARRAY [10] OF Text[100];
      LastEntryNo@1031 : Integer;
      NextTransactionNo@1032 : Integer;
      NoOfDeleted@1033 : Integer;
      GLRegExists@1034 : Boolean;
      i@1035 : Integer;
      ComprDimEntryNo@1036 : Integer;
      DimEntryNo@1037 : Integer;
      RetainDimText@1038 : Text[250];

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      if GLReg.FIND('+') then;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress G/L";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"G/L Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      for i := 1 to NoOfFieldsContents do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      for i := NoOfFieldsContents + 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Totals" :=
            COPYSTR(
              DateComprReg."Retain Totals" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Totals"));
      DateComprReg."Retain Totals" := COPYSTR(DateComprReg."Retain Totals",2);
      DateComprReg."Register No." := GLReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress G/L";
      DateComprReg."User ID" := USERID;

      GLRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record "G/L Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      GLReg."To Entry No." := NewGLEntry."Entry No.";

      if GLRegExists then begin
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := true;
      end;
      COMMIT;

      NewGLEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      GLEntry2.RESET;
      if GLEntry2.FIND('+') then;
      if LastEntryNo <> GLEntry2."Entry No." then begin
        LastEntryNo := GLEntry2."Entry No.";
        NextTransactionNo := GLEntry2."Transaction No." + 1;
        InitRegisters;
      end;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewGLEntry@1000 : Record "G/L Entry";GLEntry@1001 : Record "G/L Entry");
    VAR
      GLItemLedgRelation@1003 : Record "G/L - Item Ledger Relation";
      GLEntryVatEntrylink@1004 : Record "G/L Entry - VAT Entry Link";
      GLEntryVatEntrylink2@1005 : Record "G/L Entry - VAT Entry Link";
    BEGIN
      with GLEntry do begin
        NewGLEntry.Amount := NewGLEntry.Amount + Amount;
        NewGLEntry."VAT Amount" := NewGLEntry."VAT Amount" + "VAT Amount";
        NewGLEntry."Debit Amount" := NewGLEntry."Debit Amount" + "Debit Amount";
        NewGLEntry."Credit Amount" := NewGLEntry."Credit Amount" + "Credit Amount";
        NewGLEntry."Additional-Currency Amount" :=
          NewGLEntry."Additional-Currency Amount" + "Additional-Currency Amount";
        NewGLEntry."Add.-Currency Debit Amount" :=
          NewGLEntry."Add.-Currency Debit Amount" + "Add.-Currency Debit Amount";
        NewGLEntry."Add.-Currency Credit Amount" :=
          NewGLEntry."Add.-Currency Credit Amount" + "Add.-Currency Credit Amount";
        if RetainNo(FIELDNO(Quantity)) then
          NewGLEntry.Quantity := NewGLEntry.Quantity + Quantity;
        DELETE;

        GLItemLedgRelation.SETRANGE("G/L Entry No.","Entry No.");
        GLItemLedgRelation.DELETEALL;

        GLEntryVatEntrylink.SETRANGE("G/L Entry No.","Entry No.");
        if GLEntryVatEntrylink.FINDSET then
          repeat
            GLEntryVatEntrylink2 := GLEntryVatEntrylink;
            GLEntryVatEntrylink2.DELETE;
            GLEntryVatEntrylink2."G/L Entry No." := NewGLEntry."Entry No.";
            if GLEntryVatEntrylink2.INSERT then;
          until GLEntryVatEntrylink.NEXT = 0;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    [External]
    PROCEDURE ComprCollectedEntries@12();
    VAR
      GLEntry@1000 : Record "G/L Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      GLEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,GLEntryNo) then begin
        InitNewEntry(NewGLEntry);
        repeat
          GLEntry.GET(GLEntryNo);
          SummarizeEntry(NewGLEntry,GLEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,GLEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewGLEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewGLEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    [External]
    PROCEDURE InitNewEntry@7(VAR NewGLEntry@1000 : Record "G/L Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      with GLEntry2 do begin
        NewGLEntry.INIT;
        NewGLEntry."Entry No." := LastEntryNo;
        NewGLEntry."G/L Account No." := "G/L Account No.";
        NewGLEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewGLEntry.Description := EntrdGLEntry.Description;
        NewGLEntry."Gen. Posting Type" := "Gen. Posting Type";
        NewGLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        NewGLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        NewGLEntry."System-Created Entry" := true;
        NewGLEntry."Prior-Year Entry" := true;
        NewGLEntry."Source Code" := SourceCodeSetup."Compress G/L";
        NewGLEntry."User ID" := USERID;
        NewGLEntry."Transaction No." := NextTransactionNo;

        if RetainNo(FIELDNO("Document Type")) then
          NewGLEntry."Document Type" := "Document Type";
        if RetainNo(FIELDNO("Document No.")) then
          NewGLEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Job No.")) then
          NewGLEntry."Job No." := "Job No.";
        if RetainNo(FIELDNO("Business Unit Code")) then
          NewGLEntry."Business Unit Code" := "Business Unit Code";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewGLEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewGLEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewGLEntry."G/L Account No.");
        Window.UPDATE(2,NewGLEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewGLEntry@1000 : Record "G/L Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewGLEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewGLEntry.INSERT;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      if EntrdDateComprReg."Ending Date" = 0D then
        EntrdDateComprReg."Ending Date" := TODAY;
      if EntrdGLEntry.Description = '' then
        EntrdGLEntry.Description := Text009;

      with "G/L Entry" do begin
        InsertField(FIELDNO("Document Type"),FIELDCAPTION("Document Type"));
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Job No."),FIELDCAPTION("Job No."));
        InsertField(FIELDNO("Business Unit Code"),FIELDCAPTION("Business Unit Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
        NoOfFieldsContents := NoOfFields;
        InsertField(FIELDNO(Quantity),FIELDCAPTION(Quantity));
      end;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress General Ledger",'');
    END;

    [External]
    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;Description@1004 : Text[50];RetainDocumentType@1008 : Boolean;RetainDocumentNo@1003 : Boolean;RetainJobNo@1002 : Boolean;RetainBuisnessUnitCode@1001 : Boolean;RetainQuantity@1009 : Boolean;RetainDimensionText@1000 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdGLEntry.Description := Description;
      Retain[1] := RetainDocumentType;
      Retain[2] := RetainDocumentNo;
      Retain[3] := RetainJobNo;
      Retain[4] := RetainBuisnessUnitCode;
      Retain[7] := RetainQuantity;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

