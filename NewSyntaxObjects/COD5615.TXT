OBJECT Codeunit 5615 Budget Depreciation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=In a budget report, %1 must be %2 in %3.';
      Text001@1001 : TextConst 'ENU=Budget calculation has not been done on fixed assets with %1 %2, %3 or %4.';
      NoOfErrors@1002 : Integer;
      CallNo@1003 : Integer;

    [External]
    PROCEDURE Calculate@1(FANo@1000 : Code[20];EndingDate1@1001 : Date;EndingDate2@1002 : Date;DeprBookCode@1003 : Code[10];VAR DeprAmount1@1004 : Decimal;VAR DeprAmount2@1005 : Decimal);
    VAR
      DeprBook@1006 : Record "Depreciation Book";
      FADeprBook@1007 : Record "FA Depreciation Book";
      CalculateNormalDepr@1008 : Codeunit "Calculate Normal Depreciation";
      NumberOfDays@1009 : Integer;
      DummyEntryAmounts@1010 : ARRAY [4] OF Decimal;
    BEGIN
      DeprAmount1 := 0;
      DeprAmount2 := 0;
      if CallNo = 0 then begin
        CallNo := 1;
        DeprBook.GET(DeprBookCode);
        if DeprBook."Use Custom 1 Depreciation" then
          ERROR(
            Text000,
            DeprBook.FIELDCAPTION("Use Custom 1 Depreciation"),false,DeprBook.TABLECAPTION);
      end;
      with FADeprBook do begin
        if not GET(FANo,DeprBookCode) then
          exit;
        case "Depreciation Method" of
          "Depreciation Method"::"Declining-Balance 1",
          "Depreciation Method"::"DB1/SL",
          "Depreciation Method"::"DB2/SL":
            if NoOfErrors = 0 then begin
              CreateMessage;
              NoOfErrors := 1;
            end;
          else
            begin
            if EndingDate1 > 0D then
              CalculateNormalDepr.Calculate(
                DeprAmount1,NumberOfDays,FANo,DeprBookCode,EndingDate1,DummyEntryAmounts,0D,0);
            if EndingDate2 > 0D then
              CalculateNormalDepr.Calculate(
                DeprAmount2,NumberOfDays,FANo,DeprBookCode,EndingDate2,DummyEntryAmounts,0D,0);
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE CreateMessage@2();
    VAR
      FADeprBook2@1000 : Record "FA Depreciation Book";
      FADeprBook3@1001 : Record "FA Depreciation Book";
      FADeprBook4@1002 : Record "FA Depreciation Book";
    BEGIN
      FADeprBook2."Depreciation Method" := FADeprBook2."Depreciation Method"::"Declining-Balance 1";
      FADeprBook3."Depreciation Method" := FADeprBook3."Depreciation Method"::"DB1/SL";
      FADeprBook4."Depreciation Method" := FADeprBook4."Depreciation Method"::"DB2/SL";
      MESSAGE(
        Text001,
        FADeprBook2.FIELDCAPTION("Depreciation Method"),
        FADeprBook2."Depreciation Method",
        FADeprBook3."Depreciation Method",
        FADeprBook4."Depreciation Method");
    END;

    [External]
    PROCEDURE CopyProjectedValueToBudget@7(FADeprBook@1000 : Record "FA Depreciation Book";BudgetNameCode@1001 : Code[10];PostingDate@1007 : Date;DeprAmount@1002 : Decimal;Custom1Amount@1003 : Decimal;BalAccount@1004 : Boolean);
    VAR
      FA@1005 : Record "Fixed Asset";
      FALedgEntry@1006 : Record "FA Ledger Entry";
      BudgetText@1009 : Text[150];
    BEGIN
      FADeprBook.TESTFIELD("FA Posting Group");
      FALedgEntry."FA No." := FADeprBook."FA No.";
      FALedgEntry."Depreciation Book Code" := FADeprBook."Depreciation Book Code";
      FALedgEntry."FA Posting Group" := FADeprBook."FA Posting Group";
      FALedgEntry."Posting Date" := PostingDate;
      FALedgEntry."FA Posting Date" := PostingDate;
      FALedgEntry."FA Posting Type" := FALedgEntry."FA Posting Type"::Depreciation;
      FALedgEntry.Amount := DeprAmount;
      BudgetText :=
        STRSUBSTNO('%1 %2: %3',FA.TABLECAPTION,FADeprBook."FA No.",FALedgEntry."FA Posting Type");
      if FALedgEntry.Amount <> 0 then
        CopyFAToBudget(FALedgEntry,BudgetNameCode,BalAccount,BudgetText);

      FALedgEntry."FA Posting Type" := FALedgEntry."FA Posting Type"::"Custom 1";
      FALedgEntry.Amount := Custom1Amount;
      BudgetText :=
        STRSUBSTNO('%1 %2: %3',FA.TABLECAPTION,FADeprBook."FA No.",FALedgEntry."FA Posting Type");

      if FALedgEntry.Amount <> 0 then
        CopyFAToBudget(FALedgEntry,BudgetNameCode,BalAccount,BudgetText);
    END;

    [External]
    PROCEDURE CopyFAToBudget@3(FALedgEntry@1000 : Record "FA Ledger Entry";BudgetNameCode@1001 : Code[10];BalAccount@1002 : Boolean;BudgetText@1008 : Text[150]);
    VAR
      BudgetName@1007 : Record "G/L Budget Name";
      GLBudgetEntry@1003 : Record "G/L Budget Entry";
      FAGLPostBuf@1005 : Record "FA G/L Posting Buffer";
      FAInsertGLAcc@1004 : Codeunit "FA Insert G/L Account";
      NextEntryNo@1006 : Integer;
    BEGIN
      GLBudgetEntry.LOCKTABLE;
      BudgetName.LOCKTABLE;

      BudgetName.GET(BudgetNameCode);
      BudgetName.TESTFIELD(Blocked,false);
      if GLBudgetEntry.FINDLAST then
        NextEntryNo := GLBudgetEntry."Entry No." + 1
      else
        NextEntryNo := 1;
      GLBudgetEntry.INIT;
      GLBudgetEntry."Budget Name" := BudgetNameCode;
      FALedgEntry."G/L Entry No." := NextEntryNo;
      FAInsertGLAcc.DeleteAllGLAcc;
      FAInsertGLAcc.RUN(FALedgEntry);
      if BalAccount then
        FAInsertGLAcc.InsertBalAcc(FALedgEntry);
      if FAInsertGLAcc.FindFirstGLAcc(FAGLPostBuf) then
        repeat
          GLBudgetEntry."Entry No." := FAGLPostBuf."Entry No.";
          GLBudgetEntry."G/L Account No." := FAGLPostBuf."Account No.";
          GLBudgetEntry.Amount := FAGLPostBuf.Amount;
          GLBudgetEntry.Date := FALedgEntry."Posting Date";
          GLBudgetEntry.Description := FALedgEntry.Description;
          if BudgetText <> '' then
            GLBudgetEntry.Description := COPYSTR(BudgetText,1,MAXSTRLEN(GLBudgetEntry.Description));
          GLBudgetEntry."User ID" := USERID;

          if FAGLPostBuf."FA Posting Group" <> '' then
            GLBudgetEntry."Dimension Set ID" := FAGLPostBuf."Dimension Set ID"
          else
            GLBudgetEntry."Dimension Set ID" := GetFADefaultDimSetID(FALedgEntry);
          UpdateDimCodesFromDimSetID(GLBudgetEntry,BudgetName);
          GLBudgetEntry.INSERT;
        until FAInsertGLAcc.GetNextGLAcc(FAGLPostBuf) = 0;
    END;

    LOCAL PROCEDURE GetFADefaultDimSetID@4(VAR FALedgerEntry@1000 : Record "FA Ledger Entry") : Integer;
    VAR
      DefaultDim@1002 : Record "Default Dimension";
      TempDimSetEntry@1001 : TEMPORARY Record "Dimension Set Entry";
      DimVal@1003 : Record "Dimension Value";
      DimMgt@1004 : Codeunit DimensionManagement;
    BEGIN
      DefaultDim.SETRANGE("Table ID",DATABASE::"Fixed Asset");
      DefaultDim.SETRANGE("No.",FALedgerEntry."FA No.");
      if DefaultDim.FINDSET then
        repeat
          DimVal.GET(DefaultDim."Dimension Code",DefaultDim."Dimension Value Code");
          TempDimSetEntry."Dimension Code" := DimVal."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := DimVal.Code;
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        until DefaultDim.NEXT = 0;

      exit(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE UpdateDimCodesFromDimSetID@5(VAR GLBudgetEntry@1000 : Record "G/L Budget Entry";GLBudgetName@1001 : Record "G/L Budget Name");
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
    BEGIN
      with GLBudgetEntry do begin
        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Global Dimension 1 Code","Global Dimension 2 Code");
        UpdateBudgetDimFromDimSetID("Budget Dimension 1 Code","Dimension Set ID",GLBudgetName."Budget Dimension 1 Code");
        UpdateBudgetDimFromDimSetID("Budget Dimension 2 Code","Dimension Set ID",GLBudgetName."Budget Dimension 2 Code");
        UpdateBudgetDimFromDimSetID("Budget Dimension 3 Code","Dimension Set ID",GLBudgetName."Budget Dimension 3 Code");
        UpdateBudgetDimFromDimSetID("Budget Dimension 4 Code","Dimension Set ID",GLBudgetName."Budget Dimension 4 Code");
      end;
    END;

    LOCAL PROCEDURE UpdateBudgetDimFromDimSetID@6(VAR BudgetDimensionValue@1000 : Code[20];DimSetID@1001 : Integer;BudgetDimensionCode@1002 : Code[20]);
    VAR
      DimensionSetEntry@1003 : Record "Dimension Set Entry";
    BEGIN
      if DimensionSetEntry.GET(DimSetID,BudgetDimensionCode) then
        BudgetDimensionValue := DimensionSetEntry."Dimension Value Code";
    END;

    BEGIN
    END.
  }
}

