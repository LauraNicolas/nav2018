OBJECT Report 840 Suggest Worksheet Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Dimension Set ID Filter Line"=rimd,
                TableData "Cash Flow Forecast Entry"=rimd;
    CaptionML=ENU=Suggest Worksheet Lines;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if CashFlowNo = '' then
                    ERROR(Text000);

                  if not SelectionCashFlowForecast.GET(CashFlowNo) then
                    ERROR(Text001);

                  if NoOptionsChosen then
                    ERROR(Text002,CashFlowNo);

                  CFSetup.GET;
                  GLSetup.GET;

                  Window.OPEN(
                    Text003 +
                    Text033 +
                    Text034);

                  Window.UPDATE(1,"Cash Flow Forecast"."No.");
                END;

  }
  DATASET
  {
    { 8965;    ;DataItem;Cash Flow Forecast  ;
               DataItemTable="Cash Flow Forecast";
               DataItemTableView=SORTING("No.") ORDER(Ascending);
               OnPreDataItem=BEGIN
                               SETRANGE("No.",CashFlowNo);
                               LineNo := 0;
                               NeedsManualPmtUpdate := false;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");
                                END;

               OnPostDataItem=VAR
                                TempCashFlowForecast@1001 : TEMPORARY Record "Cash Flow Forecast";
                              BEGIN
                                InsertWorksheetLines(TempCashFlowForecast);
                                DeleteEntries(TempCashFlowForecast);
                                if NeedsManualPmtUpdate then
                                  MESSAGE(ManualPmtRevExpNeedsUpdateMsg,TempCashFlowForecast."No.");
                              END;
                               }

    { 6780;1   ;DataItem;Cash Flow Account   ;
               DataItemTable="Cash Flow Account";
               DataItemTableView=SORTING("No.") ORDER(Ascending) WHERE("G/L Integration"=FILTER(Balance|Both),"G/L Account Filter"=FILTER(<>''));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Liquid Funds"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  GLAcc@1000 : Record "G/L Account";
                                  TempGLAccount@1001 : TEMPORARY Record "G/L Account";
                                BEGIN
                                  GLAcc.SETFILTER("No.","G/L Account Filter");

                                  GetSubPostingGLAccounts(GLAcc,TempGLAccount);

                                  if TempGLAccount.FINDSET then
                                    repeat
                                      TempGLAccount.CALCFIELDS(Balance);

                                      Window.UPDATE(2,Text004);
                                      Window.UPDATE(3,TempGLAccount."No.");
                                      InsertCFLineForGLAccount(TempGLAccount);
                                    until TempGLAccount.NEXT = 0;
                                END;
                                 }

    { 8503;1   ;DataItem;Cust. Ledger Entry  ;
               DataItemTable="Cust. Ledger Entry";
               DataItemTableView=SORTING(Open,"Due Date") ORDER(Ascending) WHERE(Open=CONST(true),"Remaining Amount"=FILTER(<>0));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Receivables] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text005);
                                  Window.UPDATE(3,"Entry No.");

                                  if "Customer No." <> '' then
                                    Customer.GET("Customer No.")
                                  else
                                    Customer.INIT;

                                  CALCFIELDS("Remaining Amt. (LCY)","Remaining Amount");

                                  InsertCFLineForCustLedgerEntry;
                                END;
                                 }

    { 4114;1   ;DataItem;Vendor Ledger Entry ;
               DataItemTable="Vendor Ledger Entry";
               DataItemTableView=SORTING(Open,"Due Date") ORDER(Ascending) WHERE(Open=CONST(true),"Remaining Amount"=FILTER(<>0));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Payables] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text006);
                                  Window.UPDATE(3,"Entry No.");

                                  if "Vendor No." <> '' then
                                    Vendor.GET("Vendor No.")
                                  else
                                    Vendor.INIT;

                                  CALCFIELDS("Remaining Amt. (LCY)","Remaining Amount");

                                  InsertCFLineForVendorLedgEntry;
                                END;
                                 }

    { 6547;1   ;DataItem;Purchase Line       ;
               DataItemTable="Purchase Line";
               DataItemTableView=SORTING("Document Type","Document No.","Line No.") ORDER(Ascending) WHERE("Document Type"=CONST(Order));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Purchase Order"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               if not ApplicationAreaSetup.IsSuiteEnabled and not ApplicationAreaSetup.IsAllDisabled then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text007);
                                  Window.UPDATE(3,"Document No.");

                                  PurchHeader.GET("Document Type","Document No.");
                                  if PurchHeader."Buy-from Vendor No." <> '' then
                                    Vendor.GET(PurchHeader."Pay-to Vendor No.")
                                  else
                                    Vendor.INIT;

                                  InsertCFLineForPurchaseLine;
                                END;
                                 }

    { 2844;1   ;DataItem;Sales Line          ;
               DataItemTable="Sales Line";
               DataItemTableView=SORTING("Document Type","Document No.","Line No.") ORDER(Ascending) WHERE("Document Type"=CONST(Order));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Sales Order"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text008);
                                  Window.UPDATE(3,"Document No.");

                                  SalesHeader.GET("Document Type","Document No.");
                                  if SalesHeader."Sell-to Customer No." <> '' then
                                    Customer.GET(SalesHeader."Bill-to Customer No.")
                                  else
                                    Customer.INIT;

                                  InsertCFLineForSalesLine;
                                END;
                                 }

    { 8549;1   ;DataItem;InvestmentFixedAsset;
               DataItemTable="Fixed Asset";
               DataItemTableView=SORTING("No.") WHERE("Budgeted Asset"=CONST(true));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Budgeted Fixed Asset"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               FASetup.GET;
                             END;

               OnAfterGetRecord=BEGIN
                                  if FADeprBook.GET("No.",FASetup."Default Depr. Book") then begin
                                    FADeprBook.CALCFIELDS("Acquisition Cost");

                                    Window.UPDATE(2,Text009);
                                    Window.UPDATE(3,"No.");

                                    InsertCFLineForInvestmentFixAs;
                                  end;
                                END;
                                 }

    { 1713;1   ;DataItem;SaleFixedAsset      ;
               DataItemTable="Fixed Asset";
               DataItemTableView=SORTING("No.") WHERE("Budgeted Asset"=CONST(false));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Sale of Fixed Asset"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               FASetup.GET;
                             END;

               OnAfterGetRecord=BEGIN
                                  if FADeprBook.GET("No.",FASetup."Default Depr. Book") then
                                    if (FADeprBook."Disposal Date" = 0D) and
                                       (FADeprBook."Projected Disposal Date" <> 0D) and
                                       (FADeprBook."Projected Proceeds on Disposal" <> 0)
                                    then begin
                                      Window.UPDATE(2,Text010);
                                      Window.UPDATE(3,"No.");

                                      InsertCFLineForSaleFixedAsset;
                                    end;
                                END;
                                 }

    { 5017;1   ;DataItem;Cash Flow Manual Expense;
               DataItemTable="Cash Flow Manual Expense";
               DataItemTableView=SORTING(Code) ORDER(Ascending);
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Cash Flow Manual Expense"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text011);
                                  Window.UPDATE(3,Code);

                                  InsertCFLineForManualExpens;
                                END;
                                 }

    { 4269;1   ;DataItem;Cash Flow Manual Revenue;
               DataItemTable="Cash Flow Manual Revenue";
               DataItemTableView=SORTING(Code) ORDER(Ascending);
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Cash Flow Manual Revenue"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text012);
                                  Window.UPDATE(3,Code);

                                  InsertCFLineForManualRevenue;
                                END;
                                 }

    { 5339;1   ;DataItem;CFAccountForBudget  ;
               DataItemTable="Cash Flow Account";
               DataItemTableView=SORTING("No.") ORDER(Ascending) WHERE("G/L Integration"=FILTER(Budget|Both),"G/L Account Filter"=FILTER(<>''));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"G/L Budget"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  GLAcc@1000 : Record "G/L Account";
                                BEGIN
                                  GLAcc.SETFILTER("No.","G/L Account Filter");
                                  if GLAcc.FINDSET then
                                    repeat
                                      Window.UPDATE(2,Text031);
                                      Window.UPDATE(3,GLAcc."No.");

                                      GLBudgEntry.SETRANGE("Budget Name",GLBudgName);
                                      GLBudgEntry.SETRANGE("G/L Account No.",GLAcc."No.");
                                      GLBudgEntry.SETRANGE(Date,"Cash Flow Forecast"."G/L Budget From","Cash Flow Forecast"."G/L Budget To");
                                      if GLBudgEntry.FINDSET then
                                        repeat
                                          InsertCFLineForGLBudget(GLAcc);
                                        until GLBudgEntry.NEXT = 0;
                                    until GLAcc.NEXT = 0;
                                END;
                                 }

    { 6560;1   ;DataItem;Service Line        ;
               DataItemTable="Service Line";
               DataItemTableView=SORTING("Document Type","Document No.","Line No.") WHERE("Document Type"=CONST(Order));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::"Service Orders"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,Text032);
                                  Window.UPDATE(3,"Document No.");

                                  ServiceHeader.GET("Document Type","Document No.");
                                  if ServiceHeader."Bill-to Customer No." <> '' then
                                    Customer.GET(ServiceHeader."Bill-to Customer No.")
                                  else
                                    Customer.INIT;

                                  InsertCFLineForServiceLine;
                                END;
                                 }

    { 1   ;1   ;DataItem;Job Planning Line   ;
               DataItemTable="Job Planning Line";
               DataItemTableView=SORTING("Job No.","Planning Date","Document No.");
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Job] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               if not ApplicationAreaSetup.IsJobsEnabled and not ApplicationAreaSetup.IsAllDisabled then
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,JobsMsg);
                                  Window.UPDATE(3,"Job No.");

                                  if not ("Line Type" in ["Line Type"::Billable,"Line Type"::"Both Budget and Billable"]) then
                                    exit;

                                  InsertCFLineForJobPlanningLine;
                                END;
                                 }

    { 3   ;1   ;DataItem;Purchase Header     ;
               DataItemTable="Purchase Header";
               DataItemTableView=SORTING("Document Type","No.") WHERE("Document Type"=CONST(Order));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Tax] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               if not ApplicationAreaSetup.IsSuiteEnabled and not ApplicationAreaSetup.IsAllDisabled then
                                 CurrReport.BREAK;

                               CashFlowManagement.SetViewOnPurchaseHeaderForTaxCalc("Purchase Header",DummyDate);
                             END;

               OnAfterGetRecord=VAR
                                  PurchaseOrder@1000 : Page "Purchase Order";
                                BEGIN
                                  Window.UPDATE(2,PurchaseOrder.CAPTION);
                                  Window.UPDATE(3,"No.");

                                  InsertCFLineForTax(DATABASE::"Purchase Header");
                                END;
                                 }

    { 4   ;1   ;DataItem;Sales Header        ;
               DataItemTable="Sales Header";
               DataItemTableView=SORTING("Document Type","No.") WHERE("Document Type"=CONST(Order));
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Tax] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               CashFlowManagement.SetViewOnSalesHeaderForTaxCalc("Sales Header",DummyDate);
                             END;

               OnAfterGetRecord=VAR
                                  SalesOrder@1000 : Page "Sales Order";
                                BEGIN
                                  Window.UPDATE(2,SalesOrder.CAPTION);
                                  Window.UPDATE(3,"No.");

                                  InsertCFLineForTax(DATABASE::"Sales Header");
                                END;
                                 }

    { 2   ;1   ;DataItem;VAT Entry           ;
               DataItemTable="VAT Entry";
               OnPreDataItem=BEGIN
                               if not ConsiderSource[SourceType::Tax] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               CashFlowManagement.SetViewOnVATEntryForTaxCalc("VAT Entry",DummyDate);
                             END;

               OnAfterGetRecord=VAR
                                  VATEntries@1000 : Page "VAT Entries";
                                BEGIN
                                  Window.UPDATE(2,VATEntries.CAPTION);
                                  Window.UPDATE(3,"Entry No.");

                                  InsertCFLineForTax(DATABASE::"VAT Entry");
                                END;
                                 }

    { 5   ;1   ;DataItem;Cortana Intelligence;
               DataItemTable="Cortana Intelligence";
               OnPreDataItem=VAR
                               CashFlowForecastHandler@1000 : Codeunit "Cash Flow Forecast Handler";
                             BEGIN
                               if not ConsiderSource[SourceType::"Cortana Intelligence"] then
                                 CurrReport.BREAK;

                               if not READPERMISSION then
                                 CurrReport.BREAK;

                               if not CashFlowForecastHandler.CalculateForecast then
                                 CurrReport.BREAK;

                               SETRANGE(Type,Type::Forecast,Type::Correction);
                               if FINDSET then;
                             END;

               OnAfterGetRecord=BEGIN
                                  InsertCFLineForCortanaIntelligenceForecast(DATABASE::"Cortana Intelligence");
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=VAR
               CFManualExpense@1000 : Record "Cash Flow Manual Expense";
               CFManualRevenue@1003 : Record "Cash Flow Manual Revenue";
               GLBudgetEntry@1001 : Record "G/L Budget Entry";
               GLAcc@1002 : Record "G/L Account";
             BEGIN
               if ConsiderSource[SourceType::"Liquid Funds"] then
                 ConsiderSource[SourceType::"Liquid Funds"] := GLAcc.READPERMISSION;
               if ConsiderSource[SourceType::Receivables] then
                 ConsiderSource[SourceType::Receivables] := "Cust. Ledger Entry".READPERMISSION;
               if ConsiderSource[SourceType::Payables] then
                 ConsiderSource[SourceType::Payables] := "Vendor Ledger Entry".READPERMISSION;
               if ConsiderSource[SourceType::"Purchase Order"] then
                 ConsiderSource[SourceType::"Purchase Order"] := "Purchase Line".READPERMISSION;
               if ConsiderSource[SourceType::"Sales Order"] then
                 ConsiderSource[SourceType::"Sales Order"] := "Sales Line".READPERMISSION;
               if ConsiderSource[SourceType::"Cash Flow Manual Expense"] then
                 ConsiderSource[SourceType::"Cash Flow Manual Expense"] := CFManualExpense.READPERMISSION;
               if ConsiderSource[SourceType::"Cash Flow Manual Revenue"] then
                 ConsiderSource[SourceType::"Cash Flow Manual Revenue"] := CFManualRevenue.READPERMISSION;
               if ConsiderSource[SourceType::"Budgeted Fixed Asset"] then
                 ConsiderSource[SourceType::"Budgeted Fixed Asset"] := InvestmentFixedAsset.READPERMISSION;
               if ConsiderSource[SourceType::"Sale of Fixed Asset"] then
                 ConsiderSource[SourceType::"Sale of Fixed Asset"] := SaleFixedAsset.READPERMISSION;
               if ConsiderSource[SourceType::"G/L Budget"] then
                 ConsiderSource[SourceType::"G/L Budget"] := GLBudgetEntry.READPERMISSION;
               if ConsiderSource[SourceType::"Service Orders"] then
                 ConsiderSource[SourceType::"Service Orders"] := "Service Line".READPERMISSION;
               if ConsiderSource[SourceType::Job] then
                 ConsiderSource[SourceType::Job] := "Job Planning Line".READPERMISSION;
               if ConsiderSource[SourceType::Tax] then
                 ConsiderSource[SourceType::Tax] := "Sales Header".READPERMISSION and
                   "Purchase Header".READPERMISSION and "VAT Entry".READPERMISSION;
               if ConsiderSource[SourceType::"Cortana Intelligence"] then
                 ConsiderSource[SourceType::"Cortana Intelligence"] := "Cortana Intelligence".READPERMISSION;
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Cash Flow Forecast;
                  CaptionML=ENU=Cash Flow Forecast;
                  ToolTipML=ENU=Specifies the cash flow forecast for which you want to make the calculation.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CashFlowNo;
                  TableRelation="Cash Flow Forecast" }

      { 3   ;2   ;Group     ;
                  Name=Source Types to Include:;
                  CaptionML=ENU=Source Types to Include:;
                  GroupType=Group }

      { 4   ;3   ;Field     ;
                  Name=Liquid Funds;
                  CaptionML=ENU=Liquid Funds;
                  ToolTipML=ENU=Specifies if you want to transfer the balances of the general ledger accounts that are defined as liquid funds.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"Liquid Funds"] }

      { 5   ;3   ;Field     ;
                  Name=Receivables;
                  CaptionML=ENU=Receivables;
                  ToolTipML=ENU=Specifies if you want to include open customer ledger entries in the cash flow forecast.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::Receivables] }

      { 9   ;3   ;Field     ;
                  Name=Sales Orders;
                  CaptionML=ENU=Sales Orders;
                  ToolTipML=ENU=Specifies if you want to include sales orders in the cash flow forecast.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"Sales Order"] }

      { 2   ;3   ;Field     ;
                  Name=Service Orders;
                  CaptionML=ENU=Service Orders;
                  ToolTipML=ENU=Specifies if you want to include service orders in the cash flow forecast.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ConsiderSource[SourceType::"Service Orders"] }

      { 13  ;3   ;Field     ;
                  Name=Fixed Assets Disposal;
                  CaptionML=ENU=Fixed Assets Disposal;
                  ToolTipML=ENU=Specifies if planned sales of fixed assets as revenues are included in the cash flow forecast.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=ConsiderSource[SourceType::"Sale of Fixed Asset"] }

      { 8   ;3   ;Field     ;
                  Name=Cash Flow Manual Revenues;
                  CaptionML=ENU=Cash Flow Manual Revenues;
                  ToolTipML=ENU=Specifies if manual revenues in the cash flow forecast are included.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"Cash Flow Manual Revenue"] }

      { 6   ;3   ;Field     ;
                  Name=Payables;
                  CaptionML=ENU=Payables;
                  ToolTipML=ENU=Specifies if you want to include open vendor ledger entries in the cash flow forecast.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::Payables] }

      { 7   ;3   ;Field     ;
                  Name=Purchase Orders;
                  CaptionML=ENU=Purchase Orders;
                  ToolTipML=ENU=Specifies if you want to include purchase orders in the cash flow forecast.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ConsiderSource[SourceType::"Purchase Order"] }

      { 10  ;3   ;Field     ;
                  Name=Fixed Assets Budget;
                  CaptionML=ENU=Fixed Assets Budget;
                  ToolTipML=ENU=Specifies if planned investments of fixed assets are included in the cash flow forecast.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=ConsiderSource[SourceType::"Budgeted Fixed Asset"] }

      { 12  ;3   ;Field     ;
                  Name=Cash Flow Manual Expenses;
                  CaptionML=ENU=Cash Flow Manual Expenses;
                  ToolTipML=ENU=Specifies if manual expenses in the cash flow forecast are included.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"Cash Flow Manual Expense"] }

      { 16  ;3   ;Field     ;
                  Name=G/L Budget;
                  CaptionML=ENU=G/L Budget;
                  ToolTipML=ENU=Specifies if the budget entries of the marked general ledger accounts in the cash flow forecast are included.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"G/L Budget"] }

      { 17  ;3   ;Field     ;
                  Name=G/L Budget Name;
                  CaptionML=ENU=G/L Budget Name;
                  ToolTipML=ENU=Specifies the name of the general ledger budget if you have selected G/L budget.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GLBudgName;
                  TableRelation="G/L Budget Name" }

      { 11  ;3   ;Field     ;
                  Name=Jobs;
                  CaptionML=ENU=Jobs;
                  ToolTipML=ENU=Specifies if you want to include jobs in the cash flow forecast.;
                  ApplicationArea=#Jobs;
                  SourceExpr=ConsiderSource[SourceType::Job] }

      { 14  ;3   ;Field     ;
                  Name=Taxes;
                  CaptionML=ENU=Taxes;
                  ToolTipML=ENU=Specifies if you want to include tax information in the cash flow forecast.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::Tax] }

      { 15  ;3   ;Field     ;
                  Name=Cortana Intelligence Forecast;
                  CaptionML=ENU=Cortana Intelligence Forecast;
                  ToolTipML=ENU=Specifies whether to include Cortana Intelligence in the cash flow forecast.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ConsiderSource[SourceType::"Cortana Intelligence"] }

      { 18  ;2   ;Field     ;
                  Name=Group by Document Type;
                  CaptionML=ENU=Group by Document Type;
                  ToolTipML=ENU=Specifies if the information is grouped by sales orders, purchase orders, and service orders.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Summarized }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must choose a cash flow forecast.';
      Text001@1001 : TextConst 'ENU=Choose a valid cash flow forecast.';
      Text002@1002 : TextConst 'ENU=Choose one option for filling the cash flow forecast no. %1.';
      Text003@1003 : TextConst 'ENU=Cash Flow Forecast No.      #1##########\\';
      Text004@1004 : TextConst 'ENU=Liquid Funds';
      Text005@1005 : TextConst 'ENU=Receivables';
      Text006@1006 : TextConst 'ENU=Payables';
      Text007@1007 : TextConst 'ENU=Purchase Orders';
      Text008@1008 : TextConst 'ENU=Sales Orders';
      Text009@1009 : TextConst 'ENU=Fixed Assets Budget';
      Text010@1010 : TextConst 'ENU=Fixed Assets Disposal';
      Text011@1011 : TextConst 'ENU=Cash Flow Manual Expenses';
      Text012@1012 : TextConst 'ENU=Cash Flow Manual Revenues';
      Text013@1013 : TextConst 'ENU="%1 Balance=%2"';
      Text025@1025 : TextConst 'ENU=%1 %2 %3';
      Text027@1027 : TextConst 'ENU="%1 AC= %2"';
      Text028@1028 : TextConst 'ENU=Cash Flow Manual Expenses %1';
      Text029@1029 : TextConst 'ENU=Cash Flow Manual Revenues %1';
      Text030@1030 : TextConst 'ENU="%1 Budget %2 "';
      Text031@1031 : TextConst 'ENU=G/L Budget';
      Text032@1032 : TextConst 'ENU=Service Orders';
      Text033@1033 : TextConst 'ENU=Search for          #2####################\';
      Text034@1034 : TextConst 'ENU=Record found        #3####################';
      ApplicationAreaSetup@1099 : Record "Application Area Setup";
      CFSetup@1041 : Record "Cash Flow Setup";
      SelectionCashFlowForecast@1042 : Record "Cash Flow Forecast";
      TempCFWorksheetLine@1016 : TEMPORARY Record "Cash Flow Worksheet Line";
      CFWorksheetLine2@1044 : Record "Cash Flow Worksheet Line";
      Customer@1045 : Record Customer;
      Vendor@1046 : Record Vendor;
      PurchHeader@1048 : Record "Purchase Header";
      SalesHeader@1049 : Record "Sales Header";
      ServiceHeader@1050 : Record "Service Header";
      FASetup@1052 : Record "FA Setup";
      FADeprBook@1053 : Record "FA Depreciation Book";
      GLBudgEntry@1061 : Record "G/L Budget Entry";
      GLSetup@1063 : Record "General Ledger Setup";
      Currency@1100 : Record Currency;
      CurrExchRate@1102 : Record "Currency Exchange Rate";
      CashFlowManagement@1035 : Codeunit "Cash Flow Management";
      Window@1066 : Dialog;
      ConsiderSource@1014 : ARRAY [16] OF Boolean;
      SourceType@1015 : ',Receivables,Payables,"Liquid Funds","Cash Flow Manual Expense","Cash Flow Manual Revenue","Sales Order","Purchase Order","Budgeted Fixed Asset","Sale of Fixed Asset","Service Orders","G/L Budget",,,Job,Tax,"Cortana Intelligence"';
      CashFlowNo@1082 : Code[20];
      LineNo@1086 : Integer;
      DateLastExecution@1087 : Date;
      ExecutionDate@1088 : Date;
      GLBudgName@1089 : Code[10];
      TotalAmt@1056 : Decimal;
      MultiSalesLines@1037 : Boolean;
      Summarized@1036 : Boolean;
      NeedsManualPmtUpdate@1017 : Boolean;
      ManualPmtRevExpNeedsUpdateMsg@1018 : TextConst 'ENU=There are one or more Cash Flow Manual Revenues/Expenses with a Recurring Frequency.\But the Recurring Frequency cannot be applied because the Manual Payments To date in Cash Flow Forecast %1 is empty.\Fill in this date in order to get multiple lines.';
      JobsMsg@1019 : TextConst 'ENU=Jobs';
      PostedSalesDocumentDescriptionTxt@1020 : TextConst '@@@="%1 = Source Document Type (e.g. Invoice), %2 = Due Date, %3 = Source Name (e.g. Customer Name). Example: Posted Sales Invoice - 04-05-18 The Cannon Group PLC";ENU=Posted Sales %1 - %2 %3';
      PostedPurchaseDocumentDescriptionTxt@1026 : TextConst '@@@="%1 = Source Document Type (e.g. Invoice), %2 = Due Date, %3 = Source Name (e.g. Vendor Name). Example: Posted Purchase Invoice - 04-05-18 The Cannon Group PLC";ENU=Posted Purchase %1 - %2 %3';
      SalesDocumentDescriptionTxt@1021 : TextConst '@@@="%1 = Source Document Type (e.g. Invoice), %2 = Due Date, %3 = Source Name (e.g. Customer Name). Example: Sales Invoice - 04-05-18 The Cannon Group PLC";ENU=Sales %1 - %2 %3';
      PurchaseDocumentDescriptionTxt@1022 : TextConst '@@@="%1 = Source Document Type (e.g. Invoice), %2 = Due Date, %3 = Source Name (e.g. Vendor Name). Example: Purchase Invoice - 04-05-18 The Cannon Group PLC";ENU=Purchase %1 - %2 %3';
      ServiceDocumentDescriptionTxt@1023 : TextConst '@@@="%1 = Source Document Type (e.g. Invoice), %2 = Due Date, %3 = Source Name (e.g. Customer Name). Example: Service Invoice - 04-05-18 The Cannon Group PLC";ENU=Service %1 - %2 %3';
      TaxForMsg@1040 : TextConst '@@@="%1 = The description of the source tyoe based on which taxes are calculated.";ENU=Taxes from %1';
      DummyDate@1043 : Date;
      TaxLastSourceTableNumProcessed@1047 : Integer;
      TaxLastPayableDateProcessed@1051 : Date;
      CortanaForecastDescriptionTxt@1024 : TextConst '@@@="%1 =RECEIVABLES or PAYABLES, %2 = Date; %3 Percentage";ENU=Predicted %1 for the period starting from %2 with precision of +/-  %3.';
      CortanaCorrectionDescriptionTxt@1064 : TextConst '@@@="%1 = SALES ORDERS or PURCHASE ORDERS";ENU=Correction due to posted %1';
      CortanaOrdersCorrectionDescriptionTxt@1038 : TextConst '@@@="%1 = SALES or PURCHASE";ENU=Correction due to %1';
      XRECEIVABLESTxt@1039 : TextConst '@@@={locked};ENU=RECEIVABLES';
      XPAYABLESTxt@1054 : TextConst '@@@={locked};ENU=PAYABLES';
      XPAYABLESCORRECTIONTxt@1055 : TextConst 'ENU=Payables Correction';
      XRECEIVABLESCORRECTIONTxt@1057 : TextConst 'ENU=Receivables Correction';
      XSALESORDERSTxt@1060 : TextConst 'ENU=Sales Orders';
      XPURCHORDERSTxt@1062 : TextConst 'ENU=Purchase Orders';

    LOCAL PROCEDURE InsertConditionMet@31() : Boolean;
    BEGIN
      exit(TempCFWorksheetLine."Amount (LCY)" <> 0);
    END;

    LOCAL PROCEDURE InsertTempCFWorksheetLine@16(MaxPmtTolerance@1001 : Decimal);
    BEGIN
      with TempCFWorksheetLine do begin
        LineNo := LineNo + 100;
        TRANSFERFIELDS(CFWorksheetLine2);
        "Cash Flow Forecast No." := "Cash Flow Forecast"."No.";
        "Line No." := LineNo;

        CalculateCFAmountAndCFDate;
        SetCashFlowDate(TempCFWorksheetLine,"Cash Flow Date");

        if ABS("Amount (LCY)") < ABS(MaxPmtTolerance) then
          "Amount (LCY)" := 0
        else
          "Amount (LCY)" := "Amount (LCY)" - MaxPmtTolerance;

        if InsertConditionMet then
          INSERT
      end;
    END;

    LOCAL PROCEDURE InsertWorksheetLines@21(VAR TempCashFlowForecast@1001 : TEMPORARY Record "Cash Flow Forecast");
    VAR
      CFWorksheetLine@1000 : Record "Cash Flow Worksheet Line";
      LastCFForecastNo@1002 : Code[20];
    BEGIN
      CFWorksheetLine.LOCKTABLE;

      CFWorksheetLine.RESET;
      CFWorksheetLine.DELETEALL;

      TempCFWorksheetLine.RESET;
      TempCFWorksheetLine.SETCURRENTKEY("Cash Flow Forecast No.");
      if TempCFWorksheetLine.FINDSET then
        repeat
          CFWorksheetLine := TempCFWorksheetLine;
          CFWorksheetLine.INSERT(true);

          if LastCFForecastNo <> CFWorksheetLine."Cash Flow Forecast No." then begin
            TempCashFlowForecast."No." := CFWorksheetLine."Cash Flow Forecast No.";
            TempCashFlowForecast.INSERT;
            LastCFForecastNo := CFWorksheetLine."Cash Flow Forecast No.";
          end;
        until TempCFWorksheetLine.NEXT = 0;

      TempCFWorksheetLine.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteEntries@22(VAR TempCashFlowForecast@1000 : TEMPORARY Record "Cash Flow Forecast");
    VAR
      CFForecastEntry@1001 : Record "Cash Flow Forecast Entry";
    BEGIN
      TempCashFlowForecast.RESET;
      if TempCashFlowForecast.FINDSET then begin
        CFForecastEntry.LOCKTABLE;
        CFForecastEntry.RESET;
        repeat
          CFForecastEntry.SETRANGE("Cash Flow Forecast No.",TempCashFlowForecast."No.");
          CFForecastEntry.DELETEALL;
        until TempCashFlowForecast.NEXT = 0;
      end;
      TempCashFlowForecast.DELETEALL;
    END;

    LOCAL PROCEDURE InsertCFLineForGLAccount@1(GLAcc@1000 : Record "G/L Account");
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::"Liquid Funds";
        "Source No." := GLAcc."No.";
        "Document No." := GLAcc."No.";
        "Cash Flow Account No." := "Cash Flow Account"."No.";
        Description :=
          COPYSTR(
            STRSUBSTNO(Text013,GLAcc.Name,FORMAT(GLAcc.Balance)),
            1,MAXSTRLEN(Description));
        SetCashFlowDate(CFWorksheetLine2,WORKDATE);
        "Amount (LCY)" := GLAcc.Balance;
        "Shortcut Dimension 2 Code" := GLAcc."Global Dimension 2 Code";
        "Shortcut Dimension 1 Code" := GLAcc."Global Dimension 1 Code";
        MoveDefualtDimToJnlLineDim(DATABASE::"G/L Account",GLAcc."No.","Dimension Set ID");
        InsertTempCFWorksheetLine(0);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForCustLedgerEntry@3();
    VAR
      MaxPmtTolerance@1000 : Decimal;
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::Receivables;
        "Source No." := "Cust. Ledger Entry"."Document No.";
        "Document Type" := "Cust. Ledger Entry"."Document Type";
        "Document Date" := "Cust. Ledger Entry"."Document Date";
        "Shortcut Dimension 2 Code" := "Cust. Ledger Entry"."Global Dimension 2 Code";
        "Shortcut Dimension 1 Code" := "Cust. Ledger Entry"."Global Dimension 1 Code";
        "Dimension Set ID" := "Cust. Ledger Entry"."Dimension Set ID";
        "Cash Flow Account No." := CFSetup."Receivables CF Account No.";
        Description := COPYSTR(
            STRSUBSTNO(PostedSalesDocumentDescriptionTxt,
              FORMAT("Document Type"),
              FORMAT("Cust. Ledger Entry"."Due Date"),
              Customer.Name),
            1,MAXSTRLEN(Description));
        "Document No." := "Cust. Ledger Entry"."Document No.";
        SetCashFlowDate(CFWorksheetLine2,"Cust. Ledger Entry"."Due Date");
        "Amount (LCY)" := "Cust. Ledger Entry"."Remaining Amt. (LCY)";
        "Pmt. Discount Date" := "Cust. Ledger Entry"."Pmt. Discount Date";
        "Pmt. Disc. Tolerance Date" := "Cust. Ledger Entry"."Pmt. Disc. Tolerance Date";

        if "Cust. Ledger Entry"."Currency Code" <> '' then
          Currency.GET("Cust. Ledger Entry"."Currency Code")
        else
          Currency.InitRoundingPrecision;

        "Payment Discount" := ROUND("Cust. Ledger Entry"."Remaining Pmt. Disc. Possible" /
            "Cust. Ledger Entry"."Adjusted Currency Factor",Currency."Amount Rounding Precision");

        if "Cash Flow Forecast"."Consider Pmt. Tol. Amount" then
          MaxPmtTolerance := ROUND("Cust. Ledger Entry"."Max. Payment Tolerance" /
              "Cust. Ledger Entry"."Adjusted Currency Factor",Currency."Amount Rounding Precision")
        else
          MaxPmtTolerance := 0;

        if "Cash Flow Forecast"."Consider CF Payment Terms" and (Customer."Cash Flow Payment Terms Code" <> '') then
          "Payment Terms Code" := Customer."Cash Flow Payment Terms Code"
        else
          "Payment Terms Code" := '';

        InsertTempCFWorksheetLine(MaxPmtTolerance);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForVendorLedgEntry@4();
    VAR
      MaxPmtTolerance@1000 : Decimal;
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::Payables;
        "Source No." := "Vendor Ledger Entry"."Document No.";
        "Document Type" := "Vendor Ledger Entry"."Document Type";
        "Document Date" := "Vendor Ledger Entry"."Document Date";
        "Shortcut Dimension 2 Code" := "Vendor Ledger Entry"."Global Dimension 2 Code";
        "Shortcut Dimension 1 Code" := "Vendor Ledger Entry"."Global Dimension 1 Code";
        "Dimension Set ID" := "Vendor Ledger Entry"."Dimension Set ID";
        "Cash Flow Account No." := CFSetup."Payables CF Account No.";
        Description := COPYSTR(
            STRSUBSTNO(PostedPurchaseDocumentDescriptionTxt,
              FORMAT("Document Type"),
              FORMAT("Vendor Ledger Entry"."Due Date"),
              Vendor.Name),
            1,MAXSTRLEN(Description));
        SetCashFlowDate(CFWorksheetLine2,"Vendor Ledger Entry"."Due Date");
        "Document No." := "Vendor Ledger Entry"."Document No.";
        "Amount (LCY)" := "Vendor Ledger Entry"."Remaining Amt. (LCY)";
        "Pmt. Discount Date" := "Vendor Ledger Entry"."Pmt. Discount Date";
        "Pmt. Disc. Tolerance Date" := "Vendor Ledger Entry"."Pmt. Disc. Tolerance Date";

        if "Vendor Ledger Entry"."Currency Code" <> '' then
          Currency.GET("Vendor Ledger Entry"."Currency Code")
        else
          Currency.InitRoundingPrecision;

        "Payment Discount" := ROUND("Vendor Ledger Entry"."Remaining Pmt. Disc. Possible" /
            "Vendor Ledger Entry"."Adjusted Currency Factor",Currency."Amount Rounding Precision");

        if "Cash Flow Forecast"."Consider Pmt. Tol. Amount" then
          MaxPmtTolerance := ROUND("Vendor Ledger Entry"."Max. Payment Tolerance" /
              "Vendor Ledger Entry"."Adjusted Currency Factor",Currency."Amount Rounding Precision")
        else
          MaxPmtTolerance := 0;

        if "Cash Flow Forecast"."Consider CF Payment Terms" and (Vendor."Cash Flow Payment Terms Code" <> '') then
          "Payment Terms Code" := Vendor."Cash Flow Payment Terms Code"
        else
          "Payment Terms Code" := '';

        InsertTempCFWorksheetLine(MaxPmtTolerance);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForPurchaseLine@5();
    VAR
      PurchLine2@1000 : Record "Purchase Line";
    BEGIN
      PurchLine2 := "Purchase Line";
      if Summarized and (PurchLine2.NEXT <> 0) and (PurchLine2."Buy-from Vendor No." <> '') and
         (PurchLine2."Document No." = "Purchase Line"."Document No.")
      then begin
        TotalAmt += CalculateLineAmountForPurchaseLine(PurchHeader,"Purchase Line");
        MultiSalesLines := true;
      end else
        with CFWorksheetLine2 do begin
          INIT;
          "Source Type" := "Source Type"::"Purchase Orders";
          "Source No." := "Purchase Line"."Document No.";
          "Document Type" := "Document Type"::Invoice;
          "Document Date" := PurchHeader."Document Date";
          "Shortcut Dimension 1 Code" := PurchHeader."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := PurchHeader."Shortcut Dimension 2 Code";
          "Dimension Set ID" := PurchHeader."Dimension Set ID";
          "Cash Flow Account No." := CFSetup."Purch. Order CF Account No.";
          Description :=
            COPYSTR(
              STRSUBSTNO(
                PurchaseDocumentDescriptionTxt,
                PurchHeader."Document Type",
                FORMAT(PurchHeader."Order Date"),
                PurchHeader."Buy-from Vendor Name"),
              1,MAXSTRLEN(Description));
          SetCashFlowDate(CFWorksheetLine2,PurchHeader."Due Date");
          "Document No." := "Purchase Line"."Document No.";
          "Amount (LCY)" := CalculateLineAmountForPurchaseLine(PurchHeader,"Purchase Line");

          if Summarized and MultiSalesLines then begin
            "Amount (LCY)" := "Amount (LCY)" + TotalAmt;
            MultiSalesLines := false;
            TotalAmt := 0;
          end;

          if "Cash Flow Forecast"."Consider CF Payment Terms" and (Vendor."Cash Flow Payment Terms Code" <> '') then
            "Payment Terms Code" := Vendor."Cash Flow Payment Terms Code"
          else
            "Payment Terms Code" := PurchHeader."Payment Terms Code";

          InsertTempCFWorksheetLine(0);
        end;
    END;

    LOCAL PROCEDURE InsertCFLineForSalesLine@6();
    VAR
      SalesLine2@1000 : Record "Sales Line";
    BEGIN
      SalesLine2 := "Sales Line";
      if Summarized and (SalesLine2.NEXT <> 0) and (SalesLine2."Sell-to Customer No." <> '') and
         (SalesLine2."Document No." = "Sales Line"."Document No.")
      then begin
        TotalAmt += CalculateLineAmountForSalesLine(SalesHeader,"Sales Line");
        MultiSalesLines := true;
      end else
        with CFWorksheetLine2 do begin
          INIT;
          "Document Type" := "Document Type"::Invoice;
          "Document Date" := SalesHeader."Document Date";
          "Source Type" := "Source Type"::"Sales Orders";
          "Source No." := "Sales Line"."Document No.";
          "Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
          "Dimension Set ID" := SalesHeader."Dimension Set ID";
          "Cash Flow Account No." := CFSetup."Sales Order CF Account No.";
          Description :=
            COPYSTR(
              STRSUBSTNO(
                SalesDocumentDescriptionTxt,
                SalesHeader."Document Type",
                FORMAT(SalesHeader."Order Date"),
                SalesHeader."Sell-to Customer Name"),
              1,MAXSTRLEN(Description));
          SetCashFlowDate(CFWorksheetLine2,SalesHeader."Due Date");
          "Document No." := "Sales Line"."Document No.";
          "Amount (LCY)" := CalculateLineAmountForSalesLine(SalesHeader,"Sales Line");

          if Summarized and MultiSalesLines then begin
            "Amount (LCY)" := "Amount (LCY)" + TotalAmt;
            MultiSalesLines := false;
            TotalAmt := 0;
          end;

          if "Cash Flow Forecast"."Consider CF Payment Terms" and (Customer."Cash Flow Payment Terms Code" <> '') then
            "Payment Terms Code" := Customer."Cash Flow Payment Terms Code"
          else
            "Payment Terms Code" := SalesHeader."Payment Terms Code";

          InsertTempCFWorksheetLine(0);
        end;
    END;

    LOCAL PROCEDURE InsertCFLineForInvestmentFixAs@7();
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::"Fixed Assets Budget";
        "Source No." := InvestmentFixedAsset."No.";
        "Document No." := InvestmentFixedAsset."No.";
        "Cash Flow Account No." := CFSetup."FA Budget CF Account No.";
        Description :=
          COPYSTR(
            STRSUBSTNO(
              Text027,InvestmentFixedAsset."No.",FORMAT(-FADeprBook."Acquisition Cost")),
            1,MAXSTRLEN(Description));
        SetCashFlowDate(CFWorksheetLine2,FADeprBook."Acquisition Date");
        "Amount (LCY)" := -FADeprBook."Acquisition Cost";
        "Shortcut Dimension 2 Code" := InvestmentFixedAsset."Global Dimension 2 Code";
        "Shortcut Dimension 1 Code" := InvestmentFixedAsset."Global Dimension 1 Code";
        MoveDefualtDimToJnlLineDim(DATABASE::"Fixed Asset",InvestmentFixedAsset."No.","Dimension Set ID");
        InsertTempCFWorksheetLine(0);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForSaleFixedAsset@8();
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::"Fixed Assets Disposal";
        "Source No." := SaleFixedAsset."No.";
        "Document No." := SaleFixedAsset."No.";
        "Cash Flow Account No." := CFSetup."FA Disposal CF Account No.";
        Description :=
          COPYSTR(
            STRSUBSTNO(
              Text027,SaleFixedAsset."No.",FORMAT(FADeprBook."Projected Proceeds on Disposal")),
            1,MAXSTRLEN(Description));
        SetCashFlowDate(CFWorksheetLine2,FADeprBook."Projected Disposal Date");
        "Amount (LCY)" := FADeprBook."Projected Proceeds on Disposal" ;
        "Shortcut Dimension 2 Code" := SaleFixedAsset."Global Dimension 2 Code";
        "Shortcut Dimension 1 Code" := SaleFixedAsset."Global Dimension 1 Code";
        MoveDefualtDimToJnlLineDim(DATABASE::"Fixed Asset",SaleFixedAsset."No.","Dimension Set ID");
        InsertTempCFWorksheetLine(0);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForManualExpens@9();
    BEGIN
      with CFWorksheetLine2 do begin
        "Cash Flow Manual Expense".TESTFIELD("Starting Date");
        INIT;
        "Source Type" := "Source Type"::"Cash Flow Manual Expense";
        "Source No." := "Cash Flow Manual Expense".Code;
        "Document No." := "Cash Flow Manual Expense".Code;
        "Cash Flow Account No." := "Cash Flow Manual Expense"."Cash Flow Account No.";
        "Shortcut Dimension 1 Code" := "Cash Flow Manual Expense"."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := "Cash Flow Manual Expense"."Global Dimension 2 Code";
        MoveDefualtDimToJnlLineDim(DATABASE::"Cash Flow Manual Expense","Cash Flow Manual Expense".Code,"Dimension Set ID");
        Description := COPYSTR(STRSUBSTNO(Text028,"Cash Flow Manual Expense".Description),1,MAXSTRLEN(Description));
        DateLastExecution := "Cash Flow Forecast"."Manual Payments To";
        if ("Cash Flow Manual Expense"."Ending Date" <> 0D) and
           ("Cash Flow Manual Expense"."Ending Date" < "Cash Flow Forecast"."Manual Payments To")
        then
          DateLastExecution := "Cash Flow Manual Expense"."Ending Date";
        ExecutionDate := "Cash Flow Manual Expense"."Starting Date";
        if FORMAT("Cash Flow Manual Expense"."Recurring Frequency") <> '' then begin
          if DateLastExecution = 0D then begin
            NeedsManualPmtUpdate := true;
            InsertManualData(
              ExecutionDate,"Cash Flow Forecast",-"Cash Flow Manual Expense".Amount);
          end else
            while ExecutionDate <= DateLastExecution do begin
              InsertManualData(
                ExecutionDate,"Cash Flow Forecast",-"Cash Flow Manual Expense".Amount);
              ExecutionDate := CALCDATE("Cash Flow Manual Expense"."Recurring Frequency",ExecutionDate);
            end;
        end else
          InsertManualData(ExecutionDate,"Cash Flow Forecast",-"Cash Flow Manual Expense".Amount);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForManualRevenue@11();
    BEGIN
      with CFWorksheetLine2 do begin
        "Cash Flow Manual Revenue".TESTFIELD("Starting Date");
        INIT;
        "Source Type" := "Source Type"::"Cash Flow Manual Revenue";
        "Source No." := "Cash Flow Manual Revenue".Code;
        "Document No." := "Cash Flow Manual Revenue".Code;
        "Cash Flow Account No." := "Cash Flow Manual Revenue"."Cash Flow Account No.";
        "Shortcut Dimension 1 Code" := "Cash Flow Manual Revenue"."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := "Cash Flow Manual Revenue"."Global Dimension 2 Code";
        MoveDefualtDimToJnlLineDim(DATABASE::"Cash Flow Manual Revenue","Cash Flow Manual Revenue".Code,"Dimension Set ID");
        Description := COPYSTR(STRSUBSTNO(Text029,"Cash Flow Manual Revenue".Description),1,MAXSTRLEN(Description));
        DateLastExecution := "Cash Flow Forecast"."Manual Payments To";
        if ("Cash Flow Manual Revenue"."Ending Date" <> 0D) and
           ("Cash Flow Manual Revenue"."Ending Date" < "Cash Flow Forecast"."Manual Payments To")
        then
          DateLastExecution := "Cash Flow Manual Revenue"."Ending Date";
        ExecutionDate := "Cash Flow Manual Revenue"."Starting Date";
        if FORMAT("Cash Flow Manual Revenue"."Recurring Frequency") <> '' then begin
          if DateLastExecution = 0D then begin
            NeedsManualPmtUpdate := true;
            InsertManualData(
              ExecutionDate,"Cash Flow Forecast","Cash Flow Manual Revenue".Amount);
          end else
            while ExecutionDate <= DateLastExecution do begin
              InsertManualData(
                ExecutionDate,"Cash Flow Forecast","Cash Flow Manual Revenue".Amount);
              ExecutionDate := CALCDATE("Cash Flow Manual Revenue"."Recurring Frequency",ExecutionDate);
            end;
        end else
          InsertManualData(ExecutionDate,"Cash Flow Forecast","Cash Flow Manual Revenue".Amount);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForGLBudget@10(GLAcc@1000 : Record "G/L Account");
    BEGIN
      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::"G/L Budget";
        "Source No." := GLAcc."No.";
        "G/L Budget Name" := GLBudgEntry."Budget Name";
        "Document No." := FORMAT(GLBudgEntry."Entry No.");
        "Cash Flow Account No." := CFAccountForBudget."No.";
        Description :=
          COPYSTR(
            STRSUBSTNO(
              Text030,GLAcc.Name,FORMAT(GLBudgEntry.Description)),
            1,MAXSTRLEN(Description));
        SetCashFlowDate(CFWorksheetLine2,GLBudgEntry.Date);
        "Amount (LCY)" := -GLBudgEntry.Amount;
        "Shortcut Dimension 1 Code" := GLBudgEntry."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GLBudgEntry."Global Dimension 2 Code";
        "Dimension Set ID" := GLBudgEntry."Dimension Set ID";
        InsertTempCFWorksheetLine(0);
      end;
    END;

    LOCAL PROCEDURE InsertCFLineForServiceLine@12();
    VAR
      ServiceLine2@1000 : Record "Service Line";
    BEGIN
      ServiceLine2 := "Service Line";
      if Summarized and (ServiceLine2.NEXT <> 0) and (ServiceLine2."Customer No." <> '') and
         (ServiceLine2."Document No." = "Service Line"."Document No.")
      then begin
        TotalAmt += CalculateLineAmountForServiceLine("Service Line");

        MultiSalesLines := true;
      end else
        with CFWorksheetLine2 do begin
          INIT;
          "Source Type" := "Source Type"::"Service Orders";
          "Source No." := "Service Line"."Document No.";
          "Document Type" := "Document Type"::Invoice;
          "Document Date" := ServiceHeader."Document Date";
          "Shortcut Dimension 1 Code" := ServiceHeader."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := ServiceHeader."Shortcut Dimension 2 Code";
          "Dimension Set ID" := ServiceHeader."Dimension Set ID";
          "Cash Flow Account No." := CFSetup."Service CF Account No.";
          Description :=
            COPYSTR(
              STRSUBSTNO(
                ServiceDocumentDescriptionTxt,
                ServiceHeader."Document Type",
                ServiceHeader.Name,
                FORMAT(ServiceHeader."Order Date")),
              1,MAXSTRLEN(Description));
          SetCashFlowDate(CFWorksheetLine2,ServiceHeader."Due Date");
          "Document No." := "Service Line"."Document No.";
          "Amount (LCY)" := CalculateLineAmountForServiceLine("Service Line");

          if Summarized and MultiSalesLines then begin
            "Amount (LCY)" := "Amount (LCY)" + TotalAmt;
            MultiSalesLines := false;
            TotalAmt := 0;
          end;

          if "Cash Flow Forecast"."Consider CF Payment Terms" and (Customer."Cash Flow Payment Terms Code" <> '') then
            "Payment Terms Code" := Customer."Cash Flow Payment Terms Code"
          else
            "Payment Terms Code" := ServiceHeader."Payment Terms Code";

          InsertTempCFWorksheetLine(0);
        end;
    END;

    LOCAL PROCEDURE InsertCFLineForJobPlanningLine@18();
    VAR
      Job@1000 : Record Job;
      InsertConditionHasBeenMetAlready@1002 : Boolean;
    BEGIN
      if (TempCFWorksheetLine."Source Type" = TempCFWorksheetLine."Source Type"::Job) and
         ("Job Planning Line"."Job No." = TempCFWorksheetLine."Source No.") and
         ("Job Planning Line"."Planning Date" = TempCFWorksheetLine."Document Date") and
         ("Job Planning Line"."Document No." = TempCFWorksheetLine."Document No.")
      then begin
        InsertConditionHasBeenMetAlready := InsertConditionMet;
        TempCFWorksheetLine."Amount (LCY)" += GetJobPlanningAmountForCFLine("Job Planning Line");
        InsertOrModifyCFLine(InsertConditionHasBeenMetAlready);
      end else
        with CFWorksheetLine2 do begin
          INIT;
          "Source Type" := "Source Type"::Job;
          "Source No." := "Job Planning Line"."Job No.";
          "Document Type" := "Document Type"::Invoice;
          "Document Date" := "Job Planning Line"."Planning Date";

          Job.GET("Job Planning Line"."Job No.");
          "Shortcut Dimension 1 Code" := Job."Global Dimension 1 Code";
          "Shortcut Dimension 2 Code" := Job."Global Dimension 2 Code";
          "Cash Flow Account No." := CFSetup."Job CF Account No.";
          Description :=
            COPYSTR(
              STRSUBSTNO(
                Text025,
                Job.TABLECAPTION,
                Job.Description,
                FORMAT("Job Planning Line"."Document Date")),
              1,MAXSTRLEN(Description));
          SetCashFlowDate(CFWorksheetLine2,"Job Planning Line"."Planning Date");
          "Document No." := "Job Planning Line"."Document No.";
          "Amount (LCY)" := GetJobPlanningAmountForCFLine("Job Planning Line");

          InsertTempCFWorksheetLine(0);
        end;
    END;

    LOCAL PROCEDURE InsertCFLineForTax@27(SourceTableNum@1000 : Integer);
    VAR
      TaxPayableDate@1001 : Date;
      SourceNo@1003 : Code[20];
      InsertConditionHasBeenMetAlready@1002 : Boolean;
    BEGIN
      TaxPayableDate := GetTaxPayableDateFromSource(SourceTableNum);
      if IsDateBeforeStartOfCurrentPeriod(TaxPayableDate) or HasTaxBeenPaidOn(TaxPayableDate) then
        exit;
      SourceNo := FORMAT(SourceTableNum);
      if Summarized and (TaxLastSourceTableNumProcessed <> SourceTableNum) and
         (TaxLastPayableDateProcessed <> TaxPayableDate)
      then begin
        TotalAmt += GetTaxAmountFromSource(SourceTableNum);
        MultiSalesLines := true;
      end else
        if (TempCFWorksheetLine."Source Type" = TempCFWorksheetLine."Source Type"::Tax) and
           (TempCFWorksheetLine."Source No." = SourceNo) and
           (TempCFWorksheetLine."Document Date" = TaxPayableDate)
        then begin
          InsertConditionHasBeenMetAlready := InsertConditionMet;
          TempCFWorksheetLine."Amount (LCY)" += GetTaxAmountFromSource(SourceTableNum);
          InsertOrModifyCFLine(InsertConditionHasBeenMetAlready);
        end else
          with CFWorksheetLine2 do begin
            INIT;
            "Source Type" := "Source Type"::Tax;
            "Source No." := SourceNo;
            "Document Type" := "Document Type"::" ";
            "Document Date" := TaxPayableDate;

            "Shortcut Dimension 1 Code" := '';
            "Shortcut Dimension 2 Code" := '';
            "Cash Flow Account No." := CFSetup."Tax CF Account No.";
            Description := GetDescriptionForTaxCashFlowLine(SourceTableNum);
            SetCashFlowDate(CFWorksheetLine2,"Document Date");
            "Document No." := '';
            "Amount (LCY)" := GetTaxAmountFromSource(SourceTableNum);

            if Summarized and MultiSalesLines and (TaxLastSourceTableNumProcessed = SourceTableNum) then begin
              "Amount (LCY)" := "Amount (LCY)" + TotalAmt;
              MultiSalesLines := false;
              TotalAmt := 0;
            end;

            InsertTempCFWorksheetLine(0);
          end;

      TaxLastSourceTableNumProcessed := SourceTableNum;
      TaxLastPayableDateProcessed := TaxPayableDate;
    END;

    LOCAL PROCEDURE InsertCFLineForCortanaIntelligenceForecast@40(SourceTableNum@1000 : Integer);
    BEGIN
      if "Cortana Intelligence"."Delta %" > CFSetup."Variance %" then
        exit;

      with CFWorksheetLine2 do begin
        INIT;
        "Source Type" := "Source Type"::"Cortana Intelligence";
        "Source No." := FORMAT(SourceTableNum);
        "Document Type" := "Document Type"::" ";
        "Document Date" := "Cortana Intelligence"."Period Start";
        SetCashFlowDate(CFWorksheetLine2,"Document Date");
        "Amount (LCY)" := "Cortana Intelligence".Amount;

        case "Cortana Intelligence"."Group Id" of
          XRECEIVABLESTxt:
            begin
              "Cash Flow Account No." := CFSetup."Receivables CF Account No.";
              Description :=
                STRSUBSTNO(
                  CortanaForecastDescriptionTxt,XRECEIVABLESTxt,"Cortana Intelligence"."Period Start",
                  ROUND("Cortana Intelligence".Delta));
            end;
          XPAYABLESTxt:
            begin
              "Cash Flow Account No." := CFSetup."Payables CF Account No.";
              Description :=
                STRSUBSTNO(
                  CortanaForecastDescriptionTxt,XPAYABLESTxt,"Cortana Intelligence"."Period Start",
                  ROUND("Cortana Intelligence".Delta));
            end;
          XPAYABLESCORRECTIONTxt:
            if ConsiderSource["Source Type"::Payables] then begin
              "Cash Flow Account No." := CFSetup."Payables CF Account No.";
              Description := STRSUBSTNO(CortanaCorrectionDescriptionTxt,XPAYABLESTxt);
            end else
              exit;
          XRECEIVABLESCORRECTIONTxt:
            if ConsiderSource["Source Type"::Receivables] then begin
              "Cash Flow Account No." := CFSetup."Receivables CF Account No.";
              Description := STRSUBSTNO(CortanaCorrectionDescriptionTxt,XRECEIVABLESTxt)
            end else
              exit;
          XPURCHORDERSTxt:
            if ConsiderSource["Source Type"::"Purchase Orders"] then begin
              "Cash Flow Account No." := CFSetup."Purch. Order CF Account No.";
              Description := STRSUBSTNO(CortanaOrdersCorrectionDescriptionTxt,XPURCHORDERSTxt)
            end else
              exit;
          XSALESORDERSTxt:
            if ConsiderSource["Source Type"::"Sales Orders"] then begin
              "Cash Flow Account No." := CFSetup."Sales Order CF Account No.";
              Description := STRSUBSTNO(CortanaOrdersCorrectionDescriptionTxt,XSALESORDERSTxt)
            end else
              exit;
        end;
      end;

      InsertTempCFWorksheetLine(0);
    END;

    LOCAL PROCEDURE InsertOrModifyCFLine@25(InsertConditionHasBeenMetAlready@1000 : Boolean);
    BEGIN
      CFWorksheetLine2."Amount (LCY)" += TempCFWorksheetLine."Amount (LCY)";
      if InsertConditionHasBeenMetAlready then
        TempCFWorksheetLine.MODIFY
      else
        InsertTempCFWorksheetLine(0);
    END;

    LOCAL PROCEDURE GetSubPostingGLAccounts@32(VAR GLAccount@1000 : Record "G/L Account";VAR TempGLAccount@1001 : TEMPORARY Record "G/L Account");
    VAR
      SubGLAccount@1002 : Record "G/L Account";
    BEGIN
      if not GLAccount.FINDSET then
        exit;

      repeat
        case GLAccount."Account Type" of
          GLAccount."Account Type"::Posting:
            begin
              TempGLAccount.INIT;
              TempGLAccount.TRANSFERFIELDS(GLAccount);
              if TempGLAccount.INSERT then;
            end;
          GLAccount."Account Type"::"End-Total",
          GLAccount."Account Type"::Total:
            begin
              SubGLAccount.SETFILTER("No.",GLAccount.Totaling);
              SubGLAccount.FILTERGROUP := 2;
              SubGLAccount.SETFILTER("No.",'<>%1',GLAccount."No.");
              GetSubPostingGLAccounts(SubGLAccount,TempGLAccount);
            end;
        end;
      until GLAccount.NEXT = 0;
    END;

    LOCAL PROCEDURE SetCashFlowDate@29(VAR CashFlowWorksheetLine@1001 : Record "Cash Flow Worksheet Line";CashFlowDate@1000 : Date);
    BEGIN
      CashFlowWorksheetLine."Cash Flow Date" := CashFlowDate;
      if CashFlowDate < WORKDATE then begin
        if SelectionCashFlowForecast."Overdue CF Dates to Work Date" then
          CashFlowWorksheetLine."Cash Flow Date" := WORKDATE;
        CashFlowWorksheetLine.Overdue := true;
      end
    END;

    LOCAL PROCEDURE CalculateLineAmountForPurchaseLine@19(PurchHeader2@1001 : Record "Purchase Header";PurchaseLine@1002 : Record "Purchase Line") : Decimal;
    VAR
      PrepmtAmtInvLCY@1000 : Decimal;
    BEGIN
      if PurchHeader2."Currency Code" <> '' then begin
        Currency.GET(PurchHeader2."Currency Code");
        PrepmtAmtInvLCY :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              PurchHeader2."Posting Date",PurchHeader2."Currency Code",
              PurchaseLine."Prepmt. Amt. Inv.",PurchHeader2."Currency Factor"),
            Currency."Amount Rounding Precision");
      end else
        PrepmtAmtInvLCY := PurchaseLine."Prepmt. Amt. Inv.";

      Currency.InitRoundingPrecision;
      if PurchHeader2."Prices Including VAT" then
        exit(-(GetPurchaseAmountForCFLine(PurchaseLine) - PrepmtAmtInvLCY));
      exit(
        -(GetPurchaseAmountForCFLine(PurchaseLine) -
          (PrepmtAmtInvLCY +
           ROUND(PrepmtAmtInvLCY * PurchaseLine."VAT %" / 100,Currency."Amount Rounding Precision",Currency.VATRoundingDirection))));
    END;

    LOCAL PROCEDURE CalculateLineAmountForSalesLine@14(SalesHeader2@1001 : Record "Sales Header";SalesLine@1002 : Record "Sales Line") : Decimal;
    VAR
      PrepmtAmtInvLCY@1000 : Decimal;
    BEGIN
      if SalesHeader2."Currency Code" <> '' then begin
        Currency.GET(SalesHeader2."Currency Code");
        PrepmtAmtInvLCY :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              SalesHeader2."Posting Date",SalesHeader2."Currency Code",
              SalesLine."Prepmt. Amt. Inv.",SalesHeader2."Currency Factor"),
            Currency."Amount Rounding Precision");
      end else
        PrepmtAmtInvLCY := SalesLine."Prepmt. Amt. Inv.";

      Currency.InitRoundingPrecision;
      if SalesHeader2."Prices Including VAT" then
        exit(GetSalesAmountForCFLine(SalesLine) - PrepmtAmtInvLCY);
      exit(
        GetSalesAmountForCFLine(SalesLine) -
        (PrepmtAmtInvLCY +
         ROUND(PrepmtAmtInvLCY * SalesLine."VAT %" / 100,Currency."Amount Rounding Precision",Currency.VATRoundingDirection)));
    END;

    LOCAL PROCEDURE CalculateLineAmountForServiceLine@20(ServiceLine@1002 : Record "Service Line") : Decimal;
    BEGIN
      exit(GetServiceAmountForCFLine(ServiceLine));
    END;

    LOCAL PROCEDURE NoOptionsChosen@15() : Boolean;
    VAR
      SourceType@1000 : Integer;
    BEGIN
      for SourceType := 1 to ARRAYLEN(ConsiderSource) do
        if ConsiderSource[SourceType] then
          exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE InitializeRequest@13(NewConsiderSource@1000 : ARRAY [16] OF Boolean;CFNo@1011 : Code[20];NewGLBudgetName@1012 : Code[10];GroupByDocumentType@1001 : Boolean);
    BEGIN
      COPYARRAY(ConsiderSource,NewConsiderSource,1);
      CashFlowNo := CFNo;
      GLBudgName := NewGLBudgetName;
      Summarized := GroupByDocumentType;
    END;

    LOCAL PROCEDURE InsertManualData@2(ExecutionDate@1001 : Date;CashFlowForecast@1002 : Record "Cash Flow Forecast";ManualAmount@1000 : Decimal);
    BEGIN
      if ((CashFlowForecast."Manual Payments From" <> 0D) and
          (ExecutionDate < CashFlowForecast."Manual Payments From")) or
         ((CashFlowForecast."Manual Payments To" <> 0D) and
          (ExecutionDate > CashFlowForecast."Manual Payments To"))
      then
        exit;

      with CFWorksheetLine2 do begin
        SetCashFlowDate(CFWorksheetLine2,ExecutionDate);
        "Amount (LCY)" := ManualAmount;
        InsertTempCFWorksheetLine(0);
      end;
    END;

    LOCAL PROCEDURE GetPurchaseAmountForCFLine@23(PurchaseLine@1000 : Record "Purchase Line") : Decimal;
    BEGIN
      exit(PurchaseLine."Outstanding Amount (LCY)" + PurchaseLine."Amt. Rcd. Not Invoiced (LCY)");
    END;

    LOCAL PROCEDURE GetSalesAmountForCFLine@24(SalesLine@1000 : Record "Sales Line") : Decimal;
    BEGIN
      exit(SalesLine."Outstanding Amount (LCY)" + SalesLine."Shipped Not Invoiced (LCY)");
    END;

    LOCAL PROCEDURE GetServiceAmountForCFLine@17(ServiceLine@1000 : Record "Service Line") : Decimal;
    BEGIN
      exit(ServiceLine."Outstanding Amount (LCY)" + ServiceLine."Shipped Not Invoiced (LCY)");
    END;

    LOCAL PROCEDURE GetJobPlanningAmountForCFLine@26(JobPlanningLine@1000 : Record "Job Planning Line") : Decimal;
    BEGIN
      JobPlanningLine.CALCFIELDS("Invoiced Amount (LCY)");
      exit(JobPlanningLine."Line Amount (LCY)" - JobPlanningLine."Invoiced Amount (LCY)");
    END;

    LOCAL PROCEDURE GetTaxPayableDateFromSource@28(SourceTableNum@1012 : Integer) : Date;
    VAR
      CashFlowSetup@1000 : Record "Cash Flow Setup";
      DocumentDate@1001 : Date;
    BEGIN
      case SourceTableNum of
        DATABASE::"Sales Header":
          DocumentDate := "Sales Header"."Document Date";
        DATABASE::"Purchase Header":
          DocumentDate := "Purchase Header"."Document Date";
        DATABASE::"VAT Entry":
          DocumentDate := "VAT Entry"."Document Date";
      end;

      exit(CashFlowSetup.GetTaxPaymentDueDate(DocumentDate));
    END;

    LOCAL PROCEDURE HasTaxBeenPaidOn@34(PaymentDate@1000 : Date) : Boolean;
    VAR
      CashFlowSetup@1001 : Record "Cash Flow Setup";
      BankAccountLedgerEntry@1002 : Record "Bank Account Ledger Entry";
      TaxPaymentStartDate@1003 : Date;
      BalanceAccountType@1004 : Option;
    BEGIN
      TaxPaymentStartDate := CashFlowSetup.GetTaxPaymentStartDate(PaymentDate);
      case CashFlowSetup."Tax Bal. Account Type" of
        CashFlowSetup."Tax Bal. Account Type"::" ":
          exit(false);
        CashFlowSetup."Tax Bal. Account Type"::Vendor:
          BalanceAccountType := BankAccountLedgerEntry."Bal. Account Type"::Vendor;
        CashFlowSetup."Tax Bal. Account Type"::"G/L Account":
          BalanceAccountType := BankAccountLedgerEntry."Bal. Account Type"::"G/L Account";
      end;
      BankAccountLedgerEntry.SETRANGE("Bal. Account Type",BalanceAccountType);
      BankAccountLedgerEntry.SETFILTER("Posting Date",'%1..%2',TaxPaymentStartDate,PaymentDate);
      BankAccountLedgerEntry.SETRANGE("Bal. Account No.",CashFlowSetup."Tax Bal. Account No.");
      exit(not BankAccountLedgerEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetDescriptionForTaxCashFlowLine@30(SourceTableNum@1000 : Integer) : Text[250];
    VAR
      PurchaseOrders@1001 : Page "Purchase Orders";
      SalesOrders@1002 : Page "Sales Orders";
      VATEntries@1003 : Page "VAT Entries";
    BEGIN
      case SourceTableNum of
        DATABASE::"Purchase Header":
          exit(STRSUBSTNO(TaxForMsg,PurchaseOrders.CAPTION));
        DATABASE::"Sales Header":
          exit(STRSUBSTNO(TaxForMsg,SalesOrders.CAPTION));
        DATABASE::"VAT Entry":
          exit(STRSUBSTNO(TaxForMsg,VATEntries.CAPTION));
      end;
    END;

    LOCAL PROCEDURE GetTaxAmountFromSource@36(SourceTableNum@1012 : Integer) : Decimal;
    VAR
      CashFlowManagement@1000 : Codeunit "Cash Flow Management";
    BEGIN
      case SourceTableNum of
        DATABASE::"Sales Header":
          exit(CashFlowManagement.GetTaxAmountFromSalesOrder("Sales Header"));
        DATABASE::"Purchase Header":
          exit(CashFlowManagement.GetTaxAmountFromPurchaseOrder("Purchase Header"));
        DATABASE::"VAT Entry":
          exit("VAT Entry".Amount);
      end;
    END;

    LOCAL PROCEDURE IsDateBeforeStartOfCurrentPeriod@33(Date@1000 : Date) : Boolean;
    VAR
      CashFlowSetup@1001 : Record "Cash Flow Setup";
    BEGIN
      exit(Date < CashFlowSetup.GetCurrentPeriodStartDate);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

