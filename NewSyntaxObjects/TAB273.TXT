OBJECT Table 273 Bank Acc. Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Data Exch."=rimd;
    DataCaptionFields="Bank Account No.","Statement No.";
    OnInsert=BEGIN
               TESTFIELD("Statement No.");
               TESTFIELD("Bank Account No.");
               BankAcc.GET("Bank Account No.");
               case "Statement Type" of
                 "Statement Type"::"Bank Reconciliation":
                   begin
                     if PostedBankAccStmt.GET("Bank Account No.","Statement No.") then
                       ERROR(DuplicateStatementErr,"Statement No.");
                     BankAcc."Last Statement No." := "Statement No.";
                   end;
                 "Statement Type"::"Payment Application":
                   begin
                     if PostedPaymentReconHdr.GET("Bank Account No.","Statement No.") then
                       ERROR(DuplicateStatementErr,"Statement No.");
                     BankAcc."Last Payment Statement No." := "Statement No.";
                   end;
               end;

               BankAcc.MODIFY;
             END;

    OnDelete=BEGIN
               if BankAccReconLine.LinesExist(Rec) then
                 BankAccReconLine.DELETEALL(true);
             END;

    OnRename=BEGIN
               ERROR(RenameErr,TABLECAPTION);
             END;

    CaptionML=ENU=Bank Acc. Reconciliation;
    LookupPageID="Bank Acc. Reconciliation List";
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   OnValidate=BEGIN
                                                                if "Statement No." = '' then begin
                                                                  BankAcc.GET("Bank Account No.");

                                                                  if "Statement Type" = "Statement Type"::"Payment Application" then begin
                                                                    SetLastPaymentStatementNo(BankAcc);
                                                                    "Statement No." := INCSTR(BankAcc."Last Payment Statement No.");
                                                                  end else begin
                                                                    SetLastStatementNo(BankAcc);
                                                                    "Statement No." := INCSTR(BankAcc."Last Statement No.");
                                                                  end;

                                                                  "Balance Last Statement" := BankAcc."Balance Last Statement";
                                                                end;

                                                                CreateDim(DATABASE::"Bank Account",BankAcc."No.");
                                                              END;

                                                   CaptionML=ENU=Bank Account No.;
                                                   NotBlank=true }
    { 2   ;   ;Statement No.       ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("Bank Account No.");
                                                              END;

                                                   CaptionML=ENU=Statement No.;
                                                   NotBlank=true;
                                                   Editable=false }
    { 3   ;   ;Statement Ending Balance;Decimal   ;CaptionML=ENU=Statement Ending Balance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 4   ;   ;Statement Date      ;Date          ;CaptionML=ENU=Statement Date }
    { 5   ;   ;Balance Last Statement;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Statement Type","Statement Type"::"Bank Reconciliation");
                                                                BankAcc.GET("Bank Account No.");
                                                                if "Balance Last Statement" <> BankAcc."Balance Last Statement" then
                                                                  if not
                                                                     CONFIRM(
                                                                       BalanceQst,false,
                                                                       FIELDCAPTION("Balance Last Statement"),BankAcc.FIELDCAPTION("Balance Last Statement"),
                                                                       BankAcc.TABLECAPTION)
                                                                  then
                                                                    "Balance Last Statement" := xRec."Balance Last Statement";
                                                              END;

                                                   CaptionML=ENU=Balance Last Statement;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 6   ;   ;Bank Statement      ;BLOB          ;CaptionML=ENU=Bank Statement }
    { 7   ;   ;Total Balance on Bank Account;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("Bank Account No.")));
                                                   CaptionML=ENU=Total Balance on Bank Account;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Total Applied Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No.")));
                                                   CaptionML=ENU=Total Applied Amount;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Total Transaction Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Statement Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                             "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                             "Statement No."=FIELD("Statement No.")));
                                                   CaptionML=ENU=Total Transaction Amount;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Total Unposted Applied Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           "Account Type"=FILTER(<>"Bank Account")));
                                                   CaptionML=ENU=Total Unposted Applied Amount;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 11  ;   ;Total Difference    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line".Difference WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                     "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                     "Statement No."=FIELD("Statement No.")));
                                                   CaptionML=ENU=Total Difference;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=ENU=Statement Type;
                                                   OptionCaptionML=ENU=Bank Reconciliation,Payment Application;
                                                   OptionString="Bank Reconciliation","Payment Application" }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Post Payments Only  ;Boolean       ;CaptionML=ENU=Post Payments Only }
    { 24  ;   ;Import Posted Transactions;Option  ;CaptionML=ENU=Import Posted Transactions;
                                                   OptionCaptionML=ENU=" ,Yes,No";
                                                   OptionString=" ",Yes,No }
    { 25  ;   ;Total Outstd Bank Transactions;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                             Open=CONST(true),
                                                                                                             "Check Ledger Entries"=CONST(0)));
                                                   CaptionML=ENU=Total Outstd Bank Transactions;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 26  ;   ;Total Outstd Payments;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                             Open=CONST(true),
                                                                                                             "Check Ledger Entries"=FILTER(>0)));
                                                   CaptionML=ENU=Total Outstd Payments;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 27  ;   ;Total Applied Amount Payments;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           Type=CONST("Check Ledger Entry")));
                                                   CaptionML=ENU=Total Applied Amount Payments;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 28  ;   ;Bank Account Balance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE ("Bank Account No."=FIELD("Bank Account No.")));
                                                   CaptionML=ENU=Bank Account Balance (LCY);
                                                   Editable=false }
    { 29  ;   ;Total Positive Adjustments;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           "Account Type"=FILTER(<>"Bank Account"),
                                                                                                                           "Statement Amount"=FILTER(>0)));
                                                   CaptionML=ENU=Total Positive Adjustments;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 30  ;   ;Total Negative Adjustments;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           "Account Type"=FILTER(<>"Bank Account"),
                                                                                                                           "Statement Amount"=FILTER(<0)));
                                                   CaptionML=ENU=Total Negative Adjustments;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 31  ;   ;Total Positive Difference;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Account Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           Type=CONST(Difference),
                                                                                                                           "Applied Amount"=FILTER(>0)));
                                                   CaptionML=ENU=Total Positive Difference;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 32  ;   ;Total Negative Difference;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE ("Account Type"=FIELD("Statement Type"),
                                                                                                                           "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                           "Statement No."=FIELD("Statement No."),
                                                                                                                           Type=CONST(Difference),
                                                                                                                           "Applied Amount"=FILTER(<0)));
                                                   CaptionML=ENU=Total Negative Difference;
                                                   Editable=false;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 33  ;   ;Copy VAT Setup to Jnl. Line;Boolean;InitValue=true;
                                                   CaptionML=ENU=Copy VAT Setup to Jnl. Line }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Statement Type","Bank Account No.","Statement No.";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DuplicateStatementErr@1000 : TextConst '@@@="%1=Statement No. value";ENU=Statement %1 already exists.';
      RenameErr@1001 : TextConst '@@@="%1=Table name caption";ENU=You cannot rename a %1.';
      BalanceQst@1002 : TextConst '@@@="%1=Balance Last Statement field caption;%2=field caption;%3=table caption";ENU=%1 is different from %2 on the %3. Do you want to change the value?';
      BankAcc@1003 : Record "Bank Account";
      BankAccReconLine@1005 : Record "Bank Acc. Reconciliation Line";
      PostedBankAccStmt@1006 : Record "Bank Account Statement";
      PostedPaymentReconHdr@1007 : Record "Posted Payment Recon. Hdr";
      DimMgt@1008 : Codeunit DimensionManagement;
      YouChangedDimQst@1009 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      NoBankAccountsMsg@1010 : TextConst 'ENU=You have not set up a bank account.\To use the payments import process, set up a bank account.';
      NoBankAccWithFileFormatMsg@1011 : TextConst 'ENU=No bank account exists that is ready for import of bank statement files.\Fill the Bank Statement Import Format field on the card of the bank account that you want to use.';
      PostHighConfidentLinesQst@1012 : TextConst 'ENU=All imported bank statement lines were applied with high confidence level.\Do you want to post the payment applications?';
      MustHaveValueQst@1015 : TextConst 'ENU=The bank account must have a value in %1. Do you want to open the bank account card?';
      NoTransactionsImportedMsg@1013 : TextConst 'ENU=No bank transactions were imported.';

    LOCAL PROCEDURE CreateDim@22(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record "Source Code Setup";
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Payment Reconciliation Journal",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      if (OldDimSetID <> "Dimension Set ID") and LinesExist then begin
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    VAR
      BankAcc2@1000 : Record "Bank Account";
    BEGIN
      if "Bank Account No." = BankAcc2."No." then
        exit(BankAcc2."Currency Code");

      if BankAcc2.GET("Bank Account No.") then
        exit(BankAcc2."Currency Code");

      exit('');
    END;

    [External]
    PROCEDURE MatchSingle@5(DateRange@1008 : Integer);
    VAR
      MatchBankRecLines@1000 : Codeunit "Match Bank Rec. Lines";
    BEGIN
      MatchBankRecLines.MatchSingle(Rec,DateRange);
    END;

    [Internal]
    PROCEDURE ImportBankStatement@6();
    VAR
      DataExch@1001 : Record "Data Exch.";
      ProcessBankAccRecLines@1000 : Codeunit "Process Bank Acc. Rec Lines";
    BEGIN
      if BankAccountCouldBeUsedForImport then begin
        DataExch.INIT;
        ProcessBankAccRecLines.ImportBankStatement(Rec,DataExch);
      end;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
      OldDimSetID@1003 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    [External]
    PROCEDURE ShowDocDim@3();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Statement No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      BankAccReconciliationLine@1003 : Record "Bank Acc. Reconciliation Line";
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.
      if NewParentDimSetID = OldParentDimSetID then
        exit;

      BankAccReconciliationLine.LOCKTABLE;
      if BankAccReconciliationLine.LinesExist(Rec) then begin
        if not CONFIRM(YouChangedDimQst) then
          exit;

        repeat
          NewDimSetID :=
            DimMgt.GetDeltaDimSetID(BankAccReconciliationLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          if BankAccReconciliationLine."Dimension Set ID" <> NewDimSetID then begin
            BankAccReconciliationLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              BankAccReconciliationLine."Dimension Set ID",
              BankAccReconciliationLine."Shortcut Dimension 1 Code",
              BankAccReconciliationLine."Shortcut Dimension 2 Code");
            BankAccReconciliationLine.MODIFY;
          end;
        until BankAccReconciliationLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE OpenNewWorksheet@19();
    VAR
      BankAccount@1000 : Record "Bank Account";
      BankAccReconciliation@1002 : Record "Bank Acc. Reconciliation";
    BEGIN
      if not SelectBankAccountToUse(BankAccount,false) then
        exit;

      CreateNewBankPaymentAppBatch(BankAccount."No.",BankAccReconciliation);
      OpenWorksheet(BankAccReconciliation);
    END;

    [Internal]
    PROCEDURE ImportAndProcessToNewStatement@8();
    VAR
      BankAccount@1000 : Record "Bank Account";
      BankAccReconciliation@1001 : Record "Bank Acc. Reconciliation";
      DataExch@1002 : Record "Data Exch.";
      DataExchDef@1003 : Record "Data Exch. Def";
      DummyBankAccReconciliationLine@1005 : Record "Bank Acc. Reconciliation Line";
      LastStatementNo@1004 : Code[20];
    BEGIN
      if not SelectBankAccountToUse(BankAccount,true) then
        exit;
      BankAccount.GetDataExchDef(DataExchDef);

      DataExch."Related Record" := BankAccount.RECORDID;
      if not DataExch.ImportFileContent(DataExchDef) then
        exit;

      BankAccount.LOCKTABLE;
      LastStatementNo := BankAccount."Last Statement No.";
      CreateNewBankPaymentAppBatch(BankAccount."No.",BankAccReconciliation);

      if not ImportStatement(BankAccReconciliation,DataExch) then begin
        DeleteBankAccReconciliation(BankAccReconciliation,BankAccount,LastStatementNo);
        MESSAGE(NoTransactionsImportedMsg);
        exit;
      end;

      if not DummyBankAccReconciliationLine.LinesExist(BankAccReconciliation) then begin
        DeleteBankAccReconciliation(BankAccReconciliation,BankAccount,LastStatementNo);
        MESSAGE(NoTransactionsImportedMsg);
        exit;
      end;

      COMMIT;
      ProcessStatement(BankAccReconciliation);
    END;

    LOCAL PROCEDURE DeleteBankAccReconciliation@23(VAR BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation";VAR BankAccount@1002 : Record "Bank Account";LastStatementNo@1001 : Code[20]);
    BEGIN
      BankAccReconciliation.DELETE;
      BankAccount.GET(BankAccount."No.");
      BankAccount."Last Statement No." := LastStatementNo;
      BankAccount.MODIFY;
      COMMIT;
    END;

    [Internal]
    PROCEDURE ImportStatement@13(VAR BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation";DataExch@1002 : Record "Data Exch.") : Boolean;
    VAR
      ProcessBankAccRecLines@1001 : Codeunit "Process Bank Acc. Rec Lines";
    BEGIN
      exit(ProcessBankAccRecLines.ImportBankStatement(BankAccReconciliation,DataExch))
    END;

    [External]
    PROCEDURE ProcessStatement@20(VAR BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation");
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);

      if ConfidenceLevelPermitToPost(BankAccReconciliation) then
        CODEUNIT.RUN(CODEUNIT::"Bank Acc. Reconciliation Post",BankAccReconciliation)
      else
        if GUIALLOWED then
          OpenWorksheet(BankAccReconciliation);
    END;

    [External]
    PROCEDURE CreateNewBankPaymentAppBatch@16(BankAccountNo@1001 : Code[20];VAR BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation");
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Payment Application";
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccountNo);
      BankAccReconciliation.INSERT(true);
    END;

    PROCEDURE SelectBankAccountToUse@4(VAR BankAccount@1000 : Record "Bank Account";OnlyWithImportFormatSet@1002 : Boolean) : Boolean;
    VAR
      TempBankAccount@1003 : TEMPORARY Record "Bank Account";
      TempLinkedBankAccount@1001 : TEMPORARY Record "Bank Account";
      NoOfAccounts@1004 : Integer;
    BEGIN
      if OnlyWithImportFormatSet then begin
        // copy to temp as we need OR filter
        BankAccount.SETFILTER("Bank Statement Import Format",'<>%1','');
        CopyBankAccountsToTemp(TempBankAccount,BankAccount);

        // clear filters
        BankAccount.SETRANGE("Bank Statement Import Format");
        TempLinkedBankAccount.SETRANGE("Bank Statement Import Format");

        BankAccount.GetLinkedBankAccounts(TempLinkedBankAccount);
        CopyBankAccountsToTemp(TempBankAccount,TempLinkedBankAccount);

        NoOfAccounts := TempBankAccount.COUNT;
      end else
        NoOfAccounts := BankAccount.COUNT;

      case NoOfAccounts of
        0:
          begin
            if not BankAccount.GET(CantFindBancAccToUseInPaymentFileImport) then
              exit(false);

            exit(true);
          end;
        1:
          begin
            if TempBankAccount.COUNT > 0 then begin
              TempBankAccount.FINDFIRST;
              BankAccount.GET(TempBankAccount."No.");
            end else
              BankAccount.FINDFIRST;
          end;
        else begin
          if TempBankAccount.COUNT > 0 then begin
            if PAGE.RUNMODAL(PAGE::"Payment Bank Account List",TempBankAccount) = ACTION::LookupOK then begin
              BankAccount.GET(TempBankAccount."No.");
              exit(true)
            end;
            exit(false);
          end;
          exit(PAGE.RUNMODAL(PAGE::"Payment Bank Account List",BankAccount) = ACTION::LookupOK);
        end;
      end;

      exit(true);
    END;

    [External]
    PROCEDURE OpenWorksheet@14(BankAccReconciliation@1001 : Record "Bank Acc. Reconciliation");
    VAR
      BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      SetFiltersOnBankAccReconLineTable(BankAccReconciliation,BankAccReconciliationLine);
      PAGE.RUN(PAGE::"Payment Reconciliation Journal",BankAccReconciliationLine);
    END;

    [External]
    PROCEDURE OpenList@12(BankAccReconciliation@1001 : Record "Bank Acc. Reconciliation");
    VAR
      BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      SetFiltersOnBankAccReconLineTable(BankAccReconciliation,BankAccReconciliationLine);
      PAGE.RUN(PAGE::"Pmt. Recon. Journal Overview",BankAccReconciliationLine);
    END;

    LOCAL PROCEDURE CantFindBancAccToUseInPaymentFileImport@18() : Code[20];
    VAR
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      if BankAccount.COUNT = 0 then
        MESSAGE(NoBankAccountsMsg)
      else
        MESSAGE(NoBankAccWithFileFormatMsg);

      if PAGE.RUNMODAL(PAGE::"Payment Bank Account List",BankAccount) = ACTION::LookupOK then
        if (BankAccount."Bank Statement Import Format" <> '') or
           BankAccount.IsLinkedToBankStatementServiceProvider
        then
          exit(BankAccount."No.");

      exit('');
    END;

    LOCAL PROCEDURE SetLastPaymentStatementNo@9(VAR BankAccount@1000 : Record "Bank Account");
    BEGIN
      if BankAccount."Last Payment Statement No." = '' then begin
        BankAccount."Last Payment Statement No." := '0';
        BankAccount.MODIFY;
      end;
    END;

    LOCAL PROCEDURE SetLastStatementNo@17(VAR BankAccount@1000 : Record "Bank Account");
    BEGIN
      if BankAccount."Last Statement No." = '' then begin
        BankAccount."Last Statement No." := '0';
        BankAccount.MODIFY;
      end;
    END;

    [External]
    PROCEDURE SetFiltersOnBankAccReconLineTable@10(BankAccReconciliation@1001 : Record "Bank Acc. Reconciliation";VAR BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      BankAccReconciliationLine.FILTERGROUP := 2;
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE ConfidenceLevelPermitToPost@25(BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation") : Boolean;
    VAR
      BankAccReconciliationLine@1001 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      SetFiltersOnBankAccReconLineTable(BankAccReconciliation,BankAccReconciliationLine);
      if BankAccReconciliationLine.COUNT = 0 then
        exit(false);

      BankAccReconciliationLine.SETFILTER("Match Confidence",'<>%1',BankAccReconciliationLine."Match Confidence"::High);
      if BankAccReconciliationLine.COUNT <> 0 then
        exit(false);

      if CONFIRM(PostHighConfidentLinesQst) then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE LinesExist@11() : Boolean;
    VAR
      BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      exit(BankAccReconciliationLine.LinesExist(Rec));
    END;

    LOCAL PROCEDURE BankAccountCouldBeUsedForImport@2() : Boolean;
    VAR
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      BankAccount.GET("Bank Account No.");
      if BankAccount."Bank Statement Import Format" <> '' then
        exit(true);

      if BankAccount.IsLinkedToBankStatementServiceProvider then
        exit(true);

      if not CONFIRM(MustHaveValueQst,true,BankAccount.FIELDCAPTION("Bank Statement Import Format")) then
        exit(false);

      if PAGE.RUNMODAL(PAGE::"Payment Bank Account Card",BankAccount) = ACTION::LookupOK then
        if BankAccount."Bank Statement Import Format" <> '' then
          exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE DrillDownOnBalanceOnBankAccount@38();
    VAR
      BankAccountLedgerEntry@1000 : Record "Bank Account Ledger Entry";
    BEGIN
      BankAccountLedgerEntry.SETRANGE(Open,true);
      BankAccountLedgerEntry.SETRANGE("Bank Account No.","Bank Account No.");
      PAGE.RUN(PAGE::"Bank Account Ledger Entries",BankAccountLedgerEntry);
    END;

    LOCAL PROCEDURE CopyBankAccountsToTemp@21(VAR TempBankAccount@1000 : TEMPORARY Record "Bank Account";VAR FromBankAccount@1001 : Record "Bank Account");
    BEGIN
      if FromBankAccount.FINDSET then
        repeat
          TempBankAccount := FromBankAccount;
          if TempBankAccount.INSERT then;
        until FromBankAccount.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

