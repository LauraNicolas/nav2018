OBJECT Page 46 Sales Order Subform
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    MultipleNewLines=true;
    LinksAllowed=false;
    SourceTable="Sales Line";
    DelayedInsert=true;
    SourceTableView=WHERE("Document Type"=FILTER(Order));
    PageType=ListPart;
    AutoSplitKey=true;
    OnInit=VAR
             ApplicationAreaSetup@1001 : Record "Application Area Setup";
           BEGIN
             SalesSetup.GET;
             Currency.InitRoundingPrecision;
             TempOptionLookupBuffer.FillBuffer(TempOptionLookupBuffer."Lookup Type"::Sales);
             IsFoundation := ApplicationAreaSetup.IsFoundationEnabled;
           END;

    OnOpenPage=VAR
                 Location@1000 : Record Location;
               BEGIN
                 if Location.READPERMISSION then
                   LocationCodeVisible := not Location.ISEMPTY;
               END;

    OnAfterGetRecord=BEGIN
                       ShowShortcutDimCode(ShortcutDimCode);
                       UpdateTypeText;
                       SetItemChargeFieldsStyle;
                     END;

    OnNewRecord=BEGIN
                  InitType;

                  // Default to Item for the first line and to previous line type for the others
                  if ApplicationAreaSetup.IsFoundationEnabled then
                    if xRec."Document No." = '' then
                      Type := Type::Item;
                  CLEAR(ShortcutDimCode);
                  UpdateTypeText;
                END;

    OnDeleteRecord=VAR
                     ReserveSalesLine@1000 : Codeunit "Sales Line-Reserve";
                   BEGIN
                     if (Quantity <> 0) and ItemExists("No.") then begin
                       COMMIT;
                       if not ReserveSalesLine.DeleteLineConfirm(Rec) then
                         exit(false);
                       ReserveSalesLine.DeleteLine(Rec);
                     end;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           CalculateTotals;
                           SetLocationCodeMandatory;
                           UpdateEditableOnRow;
                           UpdateTypeText;
                           SetItemChargeFieldsStyle;
                         END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 1907935204;1 ;ActionGroup;
                      Name=&Line;
                      CaptionML=ENU=&Line;
                      Image=Line }
      { 1906587504;2 ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 1905623604;3 ;Action    ;
                      Name=GetPrice;
                      AccessByPermission=TableData "Sales Price"=R;
                      Ellipsis=true;
                      CaptionML=ENU=Get Price;
                      ToolTipML=ENU=Insert the lowest possible price in the Unit Price field according to any special price that you have set up.;
                      ApplicationArea=#Advanced;
                      Image=Price;
                      OnAction=BEGIN
                                 ShowPrices;
                               END;
                                }
      { 1901770504;3 ;Action    ;
                      Name=Get Li&ne Discount;
                      AccessByPermission=TableData "Sales Line Discount"=R;
                      Ellipsis=true;
                      CaptionML=ENU=Get Li&ne Discount;
                      ToolTipML=ENU=Insert the best possible discount in the Line Discount field according to any special discounts that you have set up.;
                      ApplicationArea=#Advanced;
                      Image=LineDiscount;
                      OnAction=BEGIN
                                 ShowLineDisc
                               END;
                                }
      { 1901741804;3 ;Action    ;
                      Name=ExplodeBOM_Functions;
                      AccessByPermission=TableData "BOM Component"=R;
                      CaptionML=ENU=E&xplode BOM;
                      ToolTipML=ENU=Insert new lines for the components on the bill of materials, for example to sell the parent item as a kit. CAUTION: The line for the parent item will be deleted and represented by a description only. To undo, you must delete the component lines and add a line the parent item again.;
                      ApplicationArea=#Advanced;
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                 ExplodeBOM;
                               END;
                                }
      { 1903099004;3 ;Action    ;
                      Name=Insert Ext. Texts;
                      AccessByPermission=TableData "Extended Text Header"=R;
                      CaptionML=ENU=Insert &Ext. Texts;
                      ToolTipML=ENU=Insert the extended item description that is set up for the item that is being processed on the line.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Text;
                      OnAction=BEGIN
                                 InsertExtendedText(true);
                               END;
                                }
      { 1905427504;3 ;Action    ;
                      Name=Reserve;
                      Ellipsis=true;
                      CaptionML=ENU=&Reserve;
                      ToolTipML=ENU=Reserve the quantity that is required on the document line that you opened this window for.;
                      ApplicationArea=#Advanced;
                      Image=Reserve;
                      OnAction=BEGIN
                                 FIND;
                                 ShowReservation;
                               END;
                                }
      { 1903502504;3 ;Action    ;
                      Name=OrderTracking;
                      CaptionML=ENU=Order &Tracking;
                      ToolTipML=ENU=Tracks the connection of a supply to its corresponding demand. This can help you find the original demand that created a specific production order or purchase order.;
                      ApplicationArea=#Advanced;
                      Image=OrderTracking;
                      OnAction=BEGIN
                                 ShowTracking;
                               END;
                                }
      { 1905968604;3 ;Action    ;
                      Name=Select Nonstoc&k Items;
                      AccessByPermission=TableData "Nonstock Item"=R;
                      CaptionML=ENU=Select Nonstoc&k Items;
                      ToolTipML=ENU="View the list of nonstock items that exist in the system. ";
                      ApplicationArea=#Basic,#Suite;
                      Image=NonStockItem;
                      OnAction=BEGIN
                                 ShowNonstockItems;
                               END;
                                }
      { 1900580804;2 ;ActionGroup;
                      Name=Item Availability by;
                      CaptionML=ENU=Item Availability by;
                      Image=ItemAvailability }
      { 5       ;3   ;Action    ;
                      Name=<Action3>;
                      CaptionML=ENU=Event;
                      ToolTipML=ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Event;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromSalesLine(Rec,ItemAvailFormsMgt.ByEvent)
                               END;
                                }
      { 1904522204;3 ;Action    ;
                      Name=Period;
                      CaptionML=ENU=Period;
                      ToolTipML=ENU=Show the projected quantity of the item over time according to time periods, such as day, week, or month.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Period;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromSalesLine(Rec,ItemAvailFormsMgt.ByPeriod)
                               END;
                                }
      { 1902056104;3 ;Action    ;
                      Name=Variant;
                      CaptionML=ENU=Variant;
                      ToolTipML=ENU=View or edit the item's variants. Instead of setting up each color of an item as a separate item, you can set up the various colors as variants of the item.;
                      ApplicationArea=#Advanced;
                      Image=ItemVariant;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromSalesLine(Rec,ItemAvailFormsMgt.ByVariant)
                               END;
                                }
      { 1900639404;3 ;Action    ;
                      Name=Location;
                      AccessByPermission=TableData Location=R;
                      CaptionML=ENU=Location;
                      ToolTipML=ENU=View the actual and projected quantity of the item per location.;
                      ApplicationArea=#Location;
                      Image=Warehouse;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromSalesLine(Rec,ItemAvailFormsMgt.ByLocation)
                               END;
                                }
      { 15      ;3   ;Action    ;
                      Name=BOM Level;
                      AccessByPermission=TableData "BOM Buffer"=R;
                      CaptionML=ENU=BOM Level;
                      ToolTipML=ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                      ApplicationArea=#Assembly;
                      Image=BOMLevel;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromSalesLine(Rec,ItemAvailFormsMgt.ByBOM)
                               END;
                                }
      { 33      ;2   ;ActionGroup;
                      Name=Related Information;
                      CaptionML=ENU=Related Information }
      { 1900186704;3 ;Action    ;
                      Name=Reservation Entries;
                      AccessByPermission=TableData Item=R;
                      CaptionML=ENU=Reservation Entries;
                      ToolTipML=ENU=View the entries for every reservation that is made, either manually or automatically.;
                      ApplicationArea=#Advanced;
                      Image=ReservationLedger;
                      OnAction=BEGIN
                                 ShowReservationEntries(true);
                               END;
                                }
      { 1905987604;3 ;Action    ;
                      Name=ItemTrackingLines;
                      ShortCutKey=Shift+Ctrl+I;
                      CaptionML=ENU=Item &Tracking Lines;
                      ToolTipML=ENU=View or edit serial numbers and lot numbers that are assigned to the item on the document or journal line.;
                      ApplicationArea=#ItemTracking;
                      Image=ItemTrackingLines;
                      OnAction=BEGIN
                                 OpenItemTrackingLines;
                               END;
                                }
      { 1901633104;3 ;Action    ;
                      Name=SelectItemSubstitution;
                      AccessByPermission=TableData "Item Substitution"=R;
                      CaptionML=ENU=Select Item Substitution;
                      ToolTipML=ENU=Select another item that has been set up to be sold instead of the original item if it is unavailable.;
                      ApplicationArea=#Suite;
                      Image=SelectItemSubstitution;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 ShowItemSub;
                                 CurrPage.UPDATE(true);
                                 AutoReserve;
                               END;
                                }
      { 1902085804;3 ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 1903418704;3 ;Action    ;
                      Name=Co&mments;
                      CaptionML=ENU=Co&mments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#Advanced;
                      Image=ViewComments;
                      OnAction=BEGIN
                                 ShowLineComments;
                               END;
                                }
      { 1907184504;3 ;Action    ;
                      Name=Item Charge &Assignment;
                      AccessByPermission=TableData "Item Charge"=R;
                      CaptionML=ENU=Item Charge &Assignment;
                      ToolTipML=ENU=Assign additional direct costs, for example for freight, to the item on the line.;
                      ApplicationArea=#ItemCharges;
                      Image=ItemCosts;
                      OnAction=BEGIN
                                 ItemChargeAssgnt;
                                 SetItemChargeFieldsStyle;
                               END;
                                }
      { 1905403704;3 ;Action    ;
                      Name=OrderPromising;
                      AccessByPermission=TableData "Order Promising Line"=R;
                      CaptionML=ENU=Order &Promising;
                      ToolTipML=ENU=Calculate the shipment and delivery dates based on the item's known and expected availability dates, and then promise the dates to the customer.;
                      ApplicationArea=#Planning;
                      Image=OrderPromising;
                      OnAction=BEGIN
                                 OrderPromisingLine;
                               END;
                                }
      { 7       ;3   ;ActionGroup;
                      Name=Assemble to Order;
                      CaptionML=ENU=Assemble to Order;
                      ActionContainerType=NewDocumentItems;
                      Image=AssemblyBOM }
      { 9       ;4   ;Action    ;
                      Name=AssembleToOrderLines;
                      AccessByPermission=TableData "BOM Component"=R;
                      CaptionML=ENU=Assemble-to-Order Lines;
                      ToolTipML=ENU=View any linked assembly order lines if the documents represents an assemble-to-order sale.;
                      ApplicationArea=#Advanced;
                      OnAction=BEGIN
                                 ShowAsmToOrderLines;
                               END;
                                }
      { 11      ;4   ;Action    ;
                      Name=Roll Up &Price;
                      AccessByPermission=TableData "BOM Component"=R;
                      Ellipsis=true;
                      CaptionML=ENU=Roll Up &Price;
                      ToolTipML=ENU=Update the unit price of the assembly item according to any changes that you have made to the assembly components.;
                      ApplicationArea=#Manufacturing;
                      OnAction=BEGIN
                                 RollupAsmPrice;
                               END;
                                }
      { 13      ;4   ;Action    ;
                      Name=Roll Up &Cost;
                      AccessByPermission=TableData "BOM Component"=R;
                      Ellipsis=true;
                      CaptionML=ENU=Roll Up &Cost;
                      ToolTipML=ENU=Update the unit cost of the assembly item according to any changes that you have made to the assembly components.;
                      ApplicationArea=#Manufacturing;
                      OnAction=BEGIN
                                 RollUpAsmCost;
                               END;
                                }
      { 31      ;3   ;Action    ;
                      Name=DeferralSchedule;
                      CaptionML=ENU=Deferral Schedule;
                      ToolTipML=ENU=View or edit the deferral schedule that governs how revenue made with this sales document is deferred to different accounting periods when the document is posted.;
                      ApplicationArea=#Suite;
                      Enabled="Deferral Code" <> '';
                      Image=PaymentPeriod;
                      OnAction=BEGIN
                                 SalesHeader.GET("Document Type","Document No.");
                                 ShowDeferrals(SalesHeader."Posting Date",SalesHeader."Currency Code");
                               END;
                                }
      { 1905926804;1 ;ActionGroup;
                      Name=O&rder;
                      CaptionML=ENU=O&rder;
                      Image=Order }
      { 1903645604;2 ;ActionGroup;
                      Name=Dr&op Shipment;
                      CaptionML=ENU=Dr&op Shipment;
                      Image=Delivery }
      { 1907981104;3 ;Action    ;
                      Name=Purchase &Order;
                      AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                      CaptionML=ENU=Purchase &Order;
                      ToolTipML=ENU=View the purchase order that is linked to the sales order, for drop shipment or special order.;
                      ApplicationArea=#Suite;
                      Image=Document;
                      OnAction=BEGIN
                                 OpenPurchOrderForm;
                               END;
                                }
      { 1903587004;2 ;ActionGroup;
                      Name=Speci&al Order;
                      CaptionML=ENU=Speci&al Order;
                      Image=SpecialOrder }
      { 1903192904;3 ;Action    ;
                      Name=OpenSpecialPurchaseOrder;
                      AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                      CaptionML=ENU=Purchase &Order;
                      ToolTipML=ENU=View the purchase order that is linked to the sales order, for drop shipment or special order.;
                      ApplicationArea=#Advanced;
                      Image=Document;
                      OnAction=BEGIN
                                 OpenSpecialPurchOrderForm;
                               END;
                                }
      { 666     ;2   ;Action    ;
                      Name=BlanketOrder;
                      CaptionML=ENU=Blanket Order;
                      ToolTipML=ENU=View the blanket sales order.;
                      ApplicationArea=#Advanced;
                      Image=BlanketOrder;
                      OnAction=VAR
                                 SalesHeader@1000 : Record "Sales Header";
                                 BlanketSalesOrder@1001 : Page "Blanket Sales Order";
                               BEGIN
                                 TESTFIELD("Blanket Order No.");
                                 SalesHeader.SETRANGE("No.","Blanket Order No.");
                                 if not SalesHeader.ISEMPTY then begin
                                   BlanketSalesOrder.SETTABLEVIEW(SalesHeader);
                                   BlanketSalesOrder.EDITABLE := false;
                                   BlanketSalesOrder.RUN;
                                 end;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Type;
                ToolTipML=ENU=Specifies the type of entity that will be posted for this sales line, such as Item, Resource, or G/L Account.;
                ApplicationArea=#Advanced;
                SourceExpr=Type;
                OnValidate=BEGIN
                             NoOnAfterValidate;
                             SetLocationCodeMandatory;

                             if xRec."No." <> '' then
                               RedistributeTotalsOnAfterValidate;
                             UpdateEditableOnRow;
                             UpdateTypeText;
                           END;

                ImplicitType=Option }

    { 37  ;2   ;Field     ;
                Name=FilteredTypeField;
                CaptionML=ENU=Type;
                ToolTipML=ENU=Specifies the type of entity that will be posted for this sales line, such as Item,, or G/L Account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeAsText;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE ("Lookup Type"=CONST(Sales));
                Visible=IsFoundation;
                LookupPageID="Option Lookup List";
                OnValidate=BEGIN
                             if TempOptionLookupBuffer.AutoCompleteOption(TypeAsText,TempOptionLookupBuffer."Lookup Type"::Sales) then
                               VALIDATE(Type,TempOptionLookupBuffer.ID);
                             TempOptionLookupBuffer.ValidateOption(TypeAsText);
                             UpdateEditableOnRow;
                             UpdateTypeText;
                           END;

                ImplicitType=Text30 }

    { 4   ;2   ;Field     ;
                Name=No.;
                ToolTipML=ENU=Specifies the number of a general ledger account, item, resource, additional cost, or fixed asset, depending on the contents of the Type field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No.";
                OnValidate=BEGIN
                             NoOnAfterValidate;
                             UpdateEditableOnRow;
                             ShowShortcutDimCode(ShortcutDimCode);

                             QuantityOnAfterValidate;
                             if xRec."No." <> '' then
                               RedistributeTotalsOnAfterValidate;
                             UpdateTypeText;
                           END;

                ImplicitType=Code20;
                ShowMandatory=NOT IsCommentLine }

    { 68  ;2   ;Field     ;
                Name=Cross-Reference No.;
                ToolTipML=ENU=Specifies the cross-referenced item number. If you enter a cross reference between yours and your vendor's or customer's item number, then this number will override the standard item number when you enter the cross-reference number on a sales or purchase document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Cross-Reference No.";
                Visible=FALSE;
                OnValidate=BEGIN
                             NoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           CrossReferenceNoLookUp;
                           NoOnAfterValidate;
                         END;

                ImplicitType=Code20 }

    { 1136;2   ;Field     ;
                Name=IC Partner Code;
                ToolTipML=ENU=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.;
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 130 ;2   ;Field     ;
                Name=IC Partner Ref. Type;
                ToolTipML=ENU=Specifies the item or account in your IC partner's company that corresponds to the item or account on the line.;
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Ref. Type";
                Visible=FALSE;
                ImplicitType=Option }

    { 132 ;2   ;Field     ;
                Name=IC Partner Reference;
                ToolTipML=ENU=Specifies the IC partner. If the line is being sent to one of your intercompany partners, this field is used together with the IC Partner Ref. Type field to indicate the item or account in your partner's company that corresponds to the line.;
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Reference";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 30  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                OnValidate=BEGIN
                             VariantCodeOnAfterValidate;
                           END;

                ImplicitType=Code10 }

    { 104 ;2   ;Field     ;
                Name=Substitution Available;
                ToolTipML=ENU=Specifies that a substitute is available for the item on the sales line.;
                ApplicationArea=#Suite;
                SourceExpr="Substitution Available";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 74  ;2   ;Field     ;
                Name=Purchasing Code;
                ToolTipML=ENU=Specifies which purchaser is assigned to the vendor.;
                ApplicationArea=#Advanced;
                SourceExpr="Purchasing Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 70  ;2   ;Field     ;
                Name=Nonstock;
                ToolTipML=ENU=Specifies that this item is a nonstock item.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Nonstock;
                Visible=FALSE;
                ImplicitType=Boolean }

    { 78  ;2   ;Field     ;
                Name=VAT Prod. Posting Group;
                ToolTipML=ENU=Specifies the VAT product posting group. Links business transactions made for the item, resource, or G/L account with the general ledger, to account for VAT amounts resulting from trade with that record.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Prod. Posting Group";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Code20 }

    { 6   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the entry of the product to be sold. To add a non-transactional text line, fill in the Description field only.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                OnValidate=BEGIN
                             UpdateEditableOnRow;

                             if "No." = xRec."No." then
                               exit;

                             NoOnAfterValidate;
                             ShowShortcutDimCode(ShortcutDimCode);
                             if xRec."No." <> '' then
                               RedistributeTotalsOnAfterValidate;
                             UpdateTypeText;
                           END;

                ImplicitType=Text50;
                ShowMandatory=NOT IsCommentLine;
                QuickEntry=FALSE }

    { 26  ;2   ;Field     ;
                Name=Drop Shipment;
                ToolTipML=ENU=Specifies if your vendor ships the items directly to your customer.;
                ApplicationArea=#Suite;
                SourceExpr="Drop Shipment";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 106 ;2   ;Field     ;
                Name=Special Order;
                ToolTipML=ENU=Specifies that the item on the sales line is a special-order item.;
                ApplicationArea=#Advanced;
                SourceExpr="Special Order";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 110 ;2   ;Field     ;
                Name=Return Reason Code;
                ToolTipML=ENU=Specifies the code explaining why the item was returned.;
                ApplicationArea=#Advanced;
                SourceExpr="Return Reason Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 42  ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the inventory location from which the items sold should be picked and where the inventory decrease is registered.;
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Visible=LocationCodeVisible;
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             LocationCodeOnAfterValidate;
                           END;

                ImplicitType=Code10;
                ShowMandatory=LocationCodeMandatory;
                QuickEntry=FALSE }

    { 114 ;2   ;Field     ;
                Name=Bin Code;
                ToolTipML=ENU=Specifies the bin where the items are picked or put away.;
                ApplicationArea=#Warehouse;
                SourceExpr="Bin Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 50  ;2   ;Field     ;
                Name=Reserve;
                ToolTipML=ENU=Specifies whether a reservation can be made for items on this line.;
                ApplicationArea=#Advanced;
                SourceExpr=Reserve;
                Visible=FALSE;
                OnValidate=BEGIN
                             ReserveOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 8   ;2   ;Field     ;
                Name=Quantity;
                ToolTipML=ENU=Specifies how many units are being sold.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=Quantity;
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal;
                ShowMandatory=(NOT IsCommentLine) AND ("No." <> '') }

    { 3   ;2   ;Field     ;
                Name=Qty. to Assemble to Order;
                ToolTipML=ENU=Specifies how many units of the sales line quantity that you want to supply by assembly.;
                ApplicationArea=#Advanced;
                BlankZero=true;
                SourceExpr="Qty. to Assemble to Order";
                Visible=FALSE;
                OnValidate=BEGIN
                             QtyToAsmToOrderOnAfterValidate;
                           END;

                OnDrillDown=BEGIN
                              ShowAsmToOrderLines;
                            END;

                ImplicitType=Decimal }

    { 48  ;2   ;Field     ;
                Name=Reserved Quantity;
                ToolTipML=ENU=Specifies how many units of the item on the line have been reserved.;
                ApplicationArea=#Advanced;
                BlankZero=true;
                SourceExpr="Reserved Quantity";
                ImplicitType=Decimal;
                QuickEntry=FALSE }

    { 44  ;2   ;Field     ;
                Name=Unit of Measure Code;
                ToolTipML=ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit of Measure Code";
                Enabled=UnitofMeasureCodeIsChangeable;
                Editable=UnitofMeasureCodeIsChangeable;
                OnValidate=BEGIN
                             UnitofMeasureCodeOnAfterValida;
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Code10;
                QuickEntry=FALSE }

    { 10  ;2   ;Field     ;
                Name=Unit of Measure;
                ToolTipML=ENU=Specifies the unit of measure for the item or resource on the sales line.;
                ApplicationArea=#Advanced;
                SourceExpr="Unit of Measure";
                Visible=FALSE;
                ImplicitType=Text10 }

    { 38  ;2   ;Field     ;
                Name=Unit Cost (LCY);
                ToolTipML=ENU=Specifies the unit cost of the item on the line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit Cost (LCY)";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 112 ;2   ;Field     ;
                Name=SalesPriceExist;
                CaptionML=ENU=Sales Price Exists;
                ToolTipML=ENU=Specifies that there is a specific price for this customer.;
                ApplicationArea=#Advanced;
                SourceExpr=PriceExists;
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 12  ;2   ;Field     ;
                Name=Unit Price;
                ToolTipML=ENU=Specifies the price for one unit on the sales line.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Unit Price";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal;
                ShowMandatory=(NOT IsCommentLine) AND ("No." <> '') }

    { 16  ;2   ;Field     ;
                Name=Line Discount %;
                ToolTipML=ENU=Specifies the discount percentage that is granted for the item on the line.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Line Discount %";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 76  ;2   ;Field     ;
                Name=Line Amount;
                ToolTipML=ENU=Specifies the net amount, excluding any invoice discount amount, that must be paid for products on the line.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Line Amount";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal;
                ShowMandatory=(NOT IsCommentLine) AND ("No." <> '') }

    { 116 ;2   ;Field     ;
                Name=SalesLineDiscExists;
                CaptionML=ENU=Sales Line Disc. Exists;
                ToolTipML=ENU=Specifies that there is a specific discount for this customer.;
                ApplicationArea=#Advanced;
                SourceExpr=LineDiscExists;
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 52  ;2   ;Field     ;
                Name=Line Discount Amount;
                ToolTipML=ENU=Specifies the discount amount that is granted for the item on the line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Line Discount Amount";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 136 ;2   ;Field     ;
                Name=Prepayment %;
                ToolTipML=ENU=Specifies the prepayment percentage to use to calculate the prepayment for sales.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepayment %";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 138 ;2   ;Field     ;
                Name=Prepmt. Line Amount;
                ToolTipML=ENU=Specifies the prepayment amount of the line in the currency of the sales document if a prepayment percentage is specified for the sales line.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt. Line Amount";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 140 ;2   ;Field     ;
                Name=Prepmt. Amt. Inv.;
                ToolTipML=ENU=Specifies the prepayment amount that has already been invoiced to the customer for this sales line.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt. Amt. Inv.";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;

                ImplicitType=Decimal }

    { 54  ;2   ;Field     ;
                Name=Allow Invoice Disc.;
                ToolTipML=ENU=Specifies if the invoice line is included when the invoice discount is calculated.;
                ApplicationArea=#Advanced;
                SourceExpr="Allow Invoice Disc.";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 90  ;2   ;Field     ;
                Name=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the total calculated invoice discount amount for the line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Inv. Discount Amount";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 39  ;2   ;Field     ;
                Name=Inv. Disc. Amount to Invoice;
                ToolTipML=ENU=Specifies the actual invoice discount amount that will be posted for the line in next invoice.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Inv. Disc. Amount to Invoice";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 18  ;2   ;Field     ;
                Name=Qty. to Ship;
                ToolTipML=ENU=Specifies the quantity of items that remain to be shipped.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Qty. to Ship";
                OnValidate=BEGIN
                             if "Qty. to Asm. to Order (Base)" <> 0 then begin
                               CurrPage.SAVERECORD;
                               CurrPage.UPDATE(false);
                             end;
                           END;

                ImplicitType=Decimal }

    { 20  ;2   ;Field     ;
                Name=Quantity Shipped;
                ToolTipML=ENU=Specifies how many units of the item on the line have been posted as shipped.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Quantity Shipped";
                ImplicitType=Decimal;
                QuickEntry=FALSE }

    { 22  ;2   ;Field     ;
                Name=Qty. to Invoice;
                ToolTipML=ENU=Specifies the quantity that remains to be invoiced. It is calculated as Quantity - Qty. Invoiced.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Qty. to Invoice";
                ImplicitType=Decimal }

    { 24  ;2   ;Field     ;
                Name=Quantity Invoiced;
                ToolTipML=ENU=Specifies how many units of the item on the line have been posted as invoiced.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr="Quantity Invoiced";
                ImplicitType=Decimal }

    { 142 ;2   ;Field     ;
                Name=Prepmt Amt to Deduct;
                ToolTipML=ENU=Specifies the prepayment amount that has already been deducted from ordinary invoices posted for this sales order line.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt Amt to Deduct";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 144 ;2   ;Field     ;
                Name=Prepmt Amt Deducted;
                ToolTipML=ENU=Specifies the prepayment amount that has already been deducted from ordinary invoices posted for this sales order line.;
                ApplicationArea=#Prepayments;
                SourceExpr="Prepmt Amt Deducted";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 46  ;2   ;Field     ;
                Name=Allow Item Charge Assignment;
                ToolTipML=ENU=Specifies that you can assign item charges to this line.;
                ApplicationArea=#Advanced;
                SourceExpr="Allow Item Charge Assignment";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 5800;2   ;Field     ;
                Name=Qty. to Assign;
                ToolTipML=ENU=Specifies how many units of the item charge will be assigned to the line.;
                ApplicationArea=#ItemCharges;
                SourceExpr="Qty. to Assign";
                StyleExpr=ItemChargeStyleExpression;
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              ShowItemChargeAssgnt;
                              UpdateForm(false);
                            END;

                ImplicitType=Decimal;
                QuickEntry=FALSE }

    { 102 ;2   ;Field     ;
                Name=Qty. Assigned;
                ToolTipML=ENU=Specifies the quantity of the item charge that was assigned to a specified item when you posted this sales line.;
                ApplicationArea=#ItemCharges;
                BlankZero=true;
                SourceExpr="Qty. Assigned";
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              ShowItemChargeAssgnt;
                              CurrPage.UPDATE(false);
                            END;

                ImplicitType=Decimal;
                QuickEntry=FALSE }

    { 82  ;2   ;Field     ;
                Name=Requested Delivery Date;
                ToolTipML=ENU=Specifies the date that the customer has asked for the order to be delivered.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Requested Delivery Date";
                Visible=FALSE;
                OnValidate=BEGIN
                             UpdateForm(true);
                           END;

                ImplicitType=Date }

    { 84  ;2   ;Field     ;
                Name=Promised Delivery Date;
                ToolTipML=ENU=Specifies the date that you have promised to deliver the order, as a result of the Order Promising function.;
                ApplicationArea=#Advanced;
                SourceExpr="Promised Delivery Date";
                Visible=FALSE;
                OnValidate=BEGIN
                             UpdateForm(true);
                           END;

                ImplicitType=Date }

    { 86  ;2   ;Field     ;
                Name=Planned Delivery Date;
                ToolTipML=ENU=Specifies the planned date that the shipment will be delivered at the customer's address.  If the customer requests a delivery date, the program calculates whether the items will be available for delivery on this date. If the items are available, the planned delivery date will be the same as the requested delivery date. If not, the program calculates the date that the items are available for delivery and enters this date in the Planned Delivery Date field.;
                ApplicationArea=#Planning;
                SourceExpr="Planned Delivery Date";
                OnValidate=BEGIN
                             UpdateForm(true);
                           END;

                ImplicitType=Date;
                QuickEntry=FALSE }

    { 88  ;2   ;Field     ;
                Name=Planned Shipment Date;
                ToolTipML=ENU=Specifies the date that the shipment should ship from the warehouse. If the customer requests a delivery date, the program calculates the planned shipment date by subtracting the shipping time from the requested delivery date. If the customer does not request a delivery date or the requested delivery date cannot be met, the program calculates the content of this field by adding the shipment time to the shipping date.;
                ApplicationArea=#Planning;
                SourceExpr="Planned Shipment Date";
                OnValidate=BEGIN
                             UpdateForm(true);
                           END;

                ImplicitType=Date }

    { 100 ;2   ;Field     ;
                Name=Shipment Date;
                ToolTipML=ENU=Specifies when items on the document are shipped or were shipped. A shipment date is usually calculated from a requested delivery date plus lead time.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipment Date";
                OnValidate=BEGIN
                             ShipmentDateOnAfterValidate;
                           END;

                ImplicitType=Date;
                QuickEntry=FALSE }

    { 92  ;2   ;Field     ;
                Name=Shipping Agent Code;
                ToolTipML=ENU=Specifies the code for the shipping agent who is transporting the items.;
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 94  ;2   ;Field     ;
                Name=Shipping Agent Service Code;
                ToolTipML=ENU=Specifies the code for the service, such as a one-day delivery, that is offered by the shipping agent.;
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Service Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 96  ;2   ;Field     ;
                Name=Shipping Time;
                ToolTipML=ENU=Specifies how long it takes from when the items are shipped from the warehouse to when they are delivered.;
                ApplicationArea=#Advanced;
                SourceExpr="Shipping Time";
                Visible=FALSE;
                ImplicitType=DateFormula }

    { 134 ;2   ;Field     ;
                Name=Work Type Code;
                ToolTipML=ENU=Specifies which work type the resource applies to when the sale is related to a job.;
                ApplicationArea=#Manufacturing;
                SourceExpr="Work Type Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 17  ;2   ;Field     ;
                Name=Whse. Outstanding Qty.;
                ToolTipML=ENU=Specifies how many units on the sales order line remain to be handled in warehouse documents.;
                ApplicationArea=#Warehouse;
                SourceExpr="Whse. Outstanding Qty.";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 58  ;2   ;Field     ;
                Name=Whse. Outstanding Qty. (Base);
                ToolTipML=ENU=Specifies how many units on the sales order line remain to be handled in warehouse documents.;
                ApplicationArea=#Warehouse;
                SourceExpr="Whse. Outstanding Qty. (Base)";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=ATO Whse. Outstanding Qty.;
                ToolTipML=ENU=Specifies how many assemble-to-order units on the sales order line need to be assembled and handled in warehouse documents.;
                ApplicationArea=#Warehouse;
                SourceExpr="ATO Whse. Outstanding Qty.";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 21  ;2   ;Field     ;
                Name=ATO Whse. Outstd. Qty. (Base);
                ToolTipML=ENU=Specifies how many assemble-to-order units on the sales order line remain to be assembled and handled in warehouse documents.;
                ApplicationArea=#Warehouse;
                SourceExpr="ATO Whse. Outstd. Qty. (Base)";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 98  ;2   ;Field     ;
                Name=Outbound Whse. Handling Time;
                ToolTipML=ENU="Specifies a date formula for the time it takes to get items ready to ship from this location. The time element is used in the calculation of the delivery date as follows: Shipment Date + Outbound Warehouse Handling Time = Planned Shipment Date + Shipping Time = Planned Delivery Date.";
                ApplicationArea=#Warehouse;
                SourceExpr="Outbound Whse. Handling Time";
                Visible=FALSE;
                ImplicitType=DateFormula }

    { 62  ;2   ;Field     ;
                Name=Blanket Order No.;
                ToolTipML=ENU=Specifies the number of the blanket order that the record originates from.;
                ApplicationArea=#Advanced;
                SourceExpr="Blanket Order No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 66  ;2   ;Field     ;
                Name=Blanket Order Line No.;
                ToolTipML=ENU=Specifies the number of the blanket order line that the record originates from.;
                ApplicationArea=#Advanced;
                SourceExpr="Blanket Order Line No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 14  ;2   ;Field     ;
                Name=FA Posting Date;
                ToolTipML=ENU=Specifies the date that will be used on related fixed asset ledger entries.;
                ApplicationArea=#Advanced;
                SourceExpr="FA Posting Date";
                Visible=FALSE;
                ImplicitType=Date }

    { 40  ;2   ;Field     ;
                Name=Depr. until FA Posting Date;
                ToolTipML=ENU=Specifies if depreciation was calculated until the FA posting date of the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Depr. until FA Posting Date";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 36  ;2   ;Field     ;
                Name=Depreciation Book Code;
                ToolTipML=ENU=Specifies the code for the depreciation book to which the line will be posted if you have selected Fixed Asset in the Type field for this line.;
                ApplicationArea=#Advanced;
                SourceExpr="Depreciation Book Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 80  ;2   ;Field     ;
                Name=Use Duplication List;
                ToolTipML=ENU="Specifies, if the type is Fixed Asset, that information on the line is to be posted to all the assets defined depreciation books. ";
                ApplicationArea=#Advanced;
                SourceExpr="Use Duplication List";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 56  ;2   ;Field     ;
                Name=Duplicate in Depreciation Book;
                ToolTipML=ENU=Specifies a depreciation book code if you want the journal line to be posted to that depreciation book, as well as to the depreciation book in the Depreciation Book Code field.;
                ApplicationArea=#Advanced;
                SourceExpr="Duplicate in Depreciation Book";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 108 ;2   ;Field     ;
                Name=Appl.-from Item Entry;
                ToolTipML=ENU=Specifies the number of the item ledger entry that the document or journal line is applied from.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Appl.-from Item Entry";
                Visible=FALSE;
                ImplicitType=Integer }

    { 60  ;2   ;Field     ;
                Name=Appl.-to Item Entry;
                ToolTipML=ENU=Specifies the number of the item ledger entry that the document or journal line is applied -to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Appl.-to Item Entry";
                Visible=FALSE;
                ImplicitType=Integer }

    { 29  ;2   ;Field     ;
                Name=Deferral Code;
                ToolTipML=ENU=Specifies the deferral template that governs how revenue earned with this sales document is deferred to the different accounting periods when the good or service was delivered.;
                ApplicationArea=#Suite;
                SourceExpr="Deferral Code";
                TableRelation="Deferral Template"."Deferral Code";
                Visible=FALSE;
                Enabled=(Type <> Type::"Fixed Asset") AND (Type <> Type::" ");
                ImplicitType=Code10 }

    { 32  ;2   ;Field     ;
                Name=Shortcut Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 34  ;2   ;Field     ;
                Name=Shortcut Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 300 ;2   ;Field     ;
                Name=ShortcutDimCode[3];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(3),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                           END;
                            }

    { 302 ;2   ;Field     ;
                Name=ShortcutDimCode[4];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(4),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                           END;
                            }

    { 304 ;2   ;Field     ;
                Name=ShortcutDimCode[5];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(5),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateSaveShortcutDimCode(5,ShortcutDimCode[5]);
                           END;
                            }

    { 306 ;2   ;Field     ;
                Name=ShortcutDimCode[6];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(6),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateSaveShortcutDimCode(6,ShortcutDimCode[6]);
                           END;
                            }

    { 308 ;2   ;Field     ;
                Name=ShortcutDimCode[7];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(7),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateSaveShortcutDimCode(7,ShortcutDimCode[7]);
                           END;
                            }

    { 310 ;2   ;Field     ;
                Name=ShortcutDimCode[8];
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(8),
                                                            "Dimension Value Type"=CONST(Standard),
                                                            Blocked=CONST(false));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateSaveShortcutDimCode(8,ShortcutDimCode[8]);
                           END;
                            }

    { 146 ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies the document number.;
                ApplicationArea=#Advanced;
                SourceExpr="Document No.";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 148 ;2   ;Field     ;
                Name=Line No.;
                ToolTipML=ENU=Specifies the line number.;
                ApplicationArea=#Advanced;
                SourceExpr="Line No.";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Integer }

    { 51  ;1   ;Group     ;
                Name=Group51;
                GroupType=Group }

    { 45  ;2   ;Group     ;
                Name=Group45;
                GroupType=Group }

    { 35  ;3   ;Field     ;
                Name=Subtotal Excl. VAT;
                CaptionML=ENU=Subtotal Excl. VAT;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Excl. VAT field on all lines in the document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr=Currency.Code;
                CaptionClass=DocumentTotals.GetTotalLineAmountWithVATAndCurrencyCaption(Currency.Code,TotalSalesHeader."Prices Including VAT");
                Editable=FALSE }

    { 43  ;3   ;Field     ;
                Name=Invoice Discount Amount;
                CaptionML=ENU=Invoice Discount Amount;
                ToolTipML=ENU=Specifies a discount amount that is deducted from the value in the Total Incl. VAT field. You can enter or change the amount manually.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InvoiceDiscountAmount;
                AutoFormatType=1;
                AutoFormatExpr=Currency.Code;
                CaptionClass=DocumentTotals.GetInvoiceDiscAmountWithVATAndCurrencyCaption(FIELDCAPTION("Inv. Discount Amount"),Currency.Code);
                Editable=InvDiscAmountEditable;
                OnValidate=BEGIN
                             ValidateInvoiceDiscountAmount;
                           END;

                ImplicitType=Decimal }

    { 41  ;3   ;Field     ;
                Name=Invoice Disc. Pct.;
                CaptionML=ENU=Invoice Discount %;
                ToolTipML=ENU=Specifies a discount percentage that is granted if criteria that you have set up for the customer are met.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:2;
                SourceExpr=InvoiceDiscountPct;
                Editable=InvDiscAmountEditable;
                OnValidate=BEGIN
                             InvoiceDiscountAmount := ROUND(TotalSalesLine."Line Amount" * InvoiceDiscountPct / 100,Currency."Amount Rounding Precision");
                             ValidateInvoiceDiscountAmount;
                           END;

                ImplicitType=Decimal }

    { 28  ;2   ;Group     ;
                Name=Group28;
                GroupType=Group }

    { 27  ;3   ;Field     ;
                Name=Total Amount Excl. VAT;
                DrillDown=false;
                CaptionML=ENU=Total Amount Excl. VAT;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Excl. VAT field on all lines in the document minus any discount amount in the Invoice Discount Amount field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine.Amount;
                AutoFormatType=1;
                AutoFormatExpr=Currency.Code;
                CaptionClass=DocumentTotals.GetTotalExclVATCaption(Currency.Code);
                Editable=FALSE }

    { 25  ;3   ;Field     ;
                Name=Total VAT Amount;
                CaptionML=ENU=Total VAT;
                ToolTipML=ENU=Specifies the sum of VAT amounts on all lines in the document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=VATAmount;
                AutoFormatType=1;
                AutoFormatExpr=Currency.Code;
                CaptionClass=DocumentTotals.GetTotalVATCaption(Currency.Code);
                Editable=FALSE;
                ImplicitType=Decimal }

    { 23  ;3   ;Field     ;
                Name=Total Amount Incl. VAT;
                CaptionML=ENU=Total Amount Incl. VAT;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Incl. VAT field on all lines in the document minus any discount amount in the Invoice Discount Amount field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Amount Including VAT";
                AutoFormatType=1;
                AutoFormatExpr=Currency.Code;
                CaptionClass=DocumentTotals.GetTotalInclVATCaption(Currency.Code);
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Currency@1021 : Record Currency;
      TotalSalesHeader@1016 : Record "Sales Header";
      TotalSalesLine@1009 : Record "Sales Line";
      SalesHeader@1000 : Record "Sales Header";
      ApplicationAreaSetup@1010 : Record "Application Area Setup";
      SalesSetup@1015 : Record "Sales & Receivables Setup";
      TempOptionLookupBuffer@1013 : TEMPORARY Record "Option Lookup Buffer";
      SalesPriceCalcMgt@1006 : Codeunit "Sales Price Calc. Mgt.";
      TransferExtendedText@1002 : Codeunit "Transfer Extended Text";
      ItemAvailFormsMgt@1001 : Codeunit "Item Availability Forms Mgt";
      SalesCalcDiscountByType@1008 : Codeunit "Sales - Calc Discount By Type";
      DocumentTotals@1007 : Codeunit "Document Totals";
      VATAmount@1005 : Decimal;
      ShortcutDimCode@1003 : ARRAY [8] OF Code[20];
      Text001@1004 : TextConst 'ENU=You cannot use the Explode BOM function because a prepayment of the sales order has been invoiced.';
      LocationCodeMandatory@1017 : Boolean;
      InvDiscAmountEditable@1014 : Boolean;
      UnitofMeasureCodeIsChangeable@1011 : Boolean;
      LocationCodeVisible@1020 : Boolean;
      IsFoundation@1019 : Boolean;
      IsCommentLine@1024 : Boolean;
      InvoiceDiscountAmount@1022 : Decimal;
      InvoiceDiscountPct@1023 : Decimal;
      UpdateInvDiscountQst@1012 : TextConst 'ENU=One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?';
      ItemChargeStyleExpression@1029 : Text;
      TypeAsText@1018 : Text[30];

    [External]
    PROCEDURE ApproveCalcInvDisc@1();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Sales-Disc. (Yes/No)",Rec);
    END;

    LOCAL PROCEDURE ValidateInvoiceDiscountAmount@30();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.GET("Document Type","Document No.");
      if SalesHeader.InvoicedLineExists then
        if not CONFIRM(UpdateInvDiscountQst,false) then
          exit;

      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
      CurrPage.UPDATE(false);
    END;

    [External]
    PROCEDURE CalcInvDisc@6();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",Rec);
    END;

    [External]
    PROCEDURE ExplodeBOM@3();
    BEGIN
      if "Prepmt. Amt. Inv." <> 0 then
        ERROR(Text001);
      CODEUNIT.RUN(CODEUNIT::"Sales-Explode BOM",Rec);
    END;

    [External]
    PROCEDURE OpenPurchOrderForm@4();
    VAR
      PurchHeader@1000 : Record "Purchase Header";
      PurchOrder@1001 : Page "Purchase Order";
    BEGIN
      TESTFIELD("Purchase Order No.");
      PurchHeader.SETRANGE("No.","Purchase Order No.");
      PurchOrder.SETTABLEVIEW(PurchHeader);
      PurchOrder.EDITABLE := false;
      PurchOrder.RUN;
    END;

    [External]
    PROCEDURE OpenSpecialPurchOrderForm@14();
    VAR
      PurchHeader@1001 : Record "Purchase Header";
      PurchRcptHeader@1002 : Record "Purch. Rcpt. Header";
      PurchOrder@1000 : Page "Purchase Order";
    BEGIN
      TESTFIELD("Special Order Purchase No.");
      PurchHeader.SETRANGE("No.","Special Order Purchase No.");
      if not PurchHeader.ISEMPTY then begin
        PurchOrder.SETTABLEVIEW(PurchHeader);
        PurchOrder.EDITABLE := false;
        PurchOrder.RUN;
      end else begin
        PurchRcptHeader.SETRANGE("Order No.","Special Order Purchase No.");
        if PurchRcptHeader.COUNT = 1 then
          PAGE.RUN(PAGE::"Posted Purchase Receipt",PurchRcptHeader)
        else
          PAGE.RUN(PAGE::"Posted Purchase Receipts",PurchRcptHeader);
      end;
    END;

    [External]
    PROCEDURE InsertExtendedText@5(Unconditionally@1000 : Boolean);
    BEGIN
      if TransferExtendedText.SalesCheckIfAnyExtText(Rec,Unconditionally) then begin
        CurrPage.SAVERECORD;
        COMMIT;
        TransferExtendedText.InsertSalesExtText(Rec);
      end;
      if TransferExtendedText.MakeUpdate then
        UpdateForm(true);
    END;

    [External]
    PROCEDURE ShowNonstockItems@11();
    BEGIN
      ShowNonstock;
    END;

    [External]
    PROCEDURE ShowTracking@13();
    VAR
      TrackingForm@1000 : Page "Order Tracking";
    BEGIN
      TrackingForm.SetSalesLine(Rec);
      TrackingForm.RUNMODAL;
    END;

    [External]
    PROCEDURE ItemChargeAssgnt@5800();
    BEGIN
      ShowItemChargeAssgnt;
    END;

    [External]
    PROCEDURE UpdateForm@12(SetSaveRecord@1000 : Boolean);
    BEGIN
      CurrPage.UPDATE(SetSaveRecord);
    END;

    [Internal]
    PROCEDURE ShowPrices@15();
    BEGIN
      SalesHeader.GET("Document Type","Document No.");
      CLEAR(SalesPriceCalcMgt);
      SalesPriceCalcMgt.GetSalesLinePrice(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE ShowLineDisc@16();
    BEGIN
      SalesHeader.GET("Document Type","Document No.");
      CLEAR(SalesPriceCalcMgt);
      SalesPriceCalcMgt.GetSalesLineLineDisc(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE OrderPromisingLine@17();
    VAR
      OrderPromisingLine@1000 : TEMPORARY Record "Order Promising Line";
      OrderPromisingLines@1001 : Page "Order Promising Lines";
    BEGIN
      OrderPromisingLine.SETRANGE("Source Type","Document Type");
      OrderPromisingLine.SETRANGE("Source ID","Document No.");
      OrderPromisingLine.SETRANGE("Source Line No.","Line No.");

      OrderPromisingLines.SetSourceType(OrderPromisingLine."Source Type"::Sales);
      OrderPromisingLines.SETTABLEVIEW(OrderPromisingLine);
      OrderPromisingLines.RUNMODAL;
    END;

    LOCAL PROCEDURE NoOnAfterValidate@409();
    BEGIN
      InsertExtendedText(false);
      if (Type = Type::"Charge (Item)") and ("No." <> xRec."No.") and
         (xRec."No." <> '')
      then
        CurrPage.SAVERECORD;

      SaveAndAutoAsmToOrder;

      if Reserve = Reserve::Always then begin
        CurrPage.SAVERECORD;
        if ("Outstanding Qty. (Base)" <> 0) and ("No." <> xRec."No.") then begin
          AutoReserve;
          CurrPage.UPDATE(false);
        end;
      end;
    END;

    LOCAL PROCEDURE VariantCodeOnAfterValidate@21();
    BEGIN
      SaveAndAutoAsmToOrder;
    END;

    LOCAL PROCEDURE LocationCodeOnAfterValidate@8594();
    BEGIN
      SaveAndAutoAsmToOrder;

      if (Reserve = Reserve::Always) and
         ("Outstanding Qty. (Base)" <> 0) and
         ("Location Code" <> xRec."Location Code")
      then begin
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE ReserveOnAfterValidate@8303();
    BEGIN
      if (Reserve = Reserve::Always) and ("Outstanding Qty. (Base)" <> 0) then begin
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@6272();
    VAR
      UpdateIsDone@1001 : Boolean;
    BEGIN
      if Type = Type::Item then
        case Reserve of
          Reserve::Always:
            begin
              CurrPage.SAVERECORD;
              AutoReserve;
              CurrPage.UPDATE(false);
              UpdateIsDone := true;
            end;
          Reserve::Optional:
            if (Quantity < xRec.Quantity) and (xRec.Quantity > 0) then begin
              CurrPage.SAVERECORD;
              CurrPage.UPDATE(false);
              UpdateIsDone := true;
            end;
        end;

      if (Type = Type::Item) and
         (Quantity <> xRec.Quantity) and
         not UpdateIsDone
      then
        CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE QtyToAsmToOrderOnAfterValidate@19();
    BEGIN
      CurrPage.SAVERECORD;
      if Reserve = Reserve::Always then
        AutoReserve;
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE UnitofMeasureCodeOnAfterValida@1752();
    BEGIN
      if Reserve = Reserve::Always then begin
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE ShipmentDateOnAfterValidate@2525();
    BEGIN
      if (Reserve = Reserve::Always) and
         ("Outstanding Qty. (Base)" <> 0) and
         ("Shipment Date" <> xRec."Shipment Date")
      then begin
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(false);
      end else
        CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE SaveAndAutoAsmToOrder@20();
    BEGIN
      if (Type = Type::Item) and IsAsmToOrderRequired then begin
        CurrPage.SAVERECORD;
        AutoAsmToOrder;
        CurrPage.UPDATE(false);
      end;
    END;

    LOCAL PROCEDURE SetLocationCodeMandatory@22();
    VAR
      InventorySetup@1000 : Record "Inventory Setup";
    BEGIN
      InventorySetup.GET;
      LocationCodeMandatory := InventorySetup."Location Mandatory" and (Type = Type::Item);
    END;

    LOCAL PROCEDURE GetTotalSalesHeader@9();
    BEGIN
      if not TotalSalesHeader.GET("Document Type","Document No.") then
        CLEAR(TotalSalesHeader);
      if Currency.Code <> TotalSalesHeader."Currency Code" then
        if not Currency.GET(TotalSalesHeader."Currency Code") then begin
          CLEAR(Currency);
          Currency.InitRoundingPrecision;
        end
    END;

    LOCAL PROCEDURE CalculateTotals@8();
    BEGIN
      GetTotalSalesHeader;
      TotalSalesHeader.CALCFIELDS("Recalculate Invoice Disc.");

      if SalesSetup."Calc. Inv. Discount" and ("Document No." <> '') and (TotalSalesHeader."Customer Posting Group" <> '') and
         TotalSalesHeader."Recalculate Invoice Disc."
      then
        if FIND then
          CalcInvDisc;

      DocumentTotals.CalculateSalesTotals(TotalSalesLine,VATAmount,Rec);
      InvoiceDiscountAmount := TotalSalesLine."Inv. Discount Amount";
      InvoiceDiscountPct := SalesCalcDiscountByType.GetCustInvoiceDiscountPct(Rec);
    END;

    LOCAL PROCEDURE RedistributeTotalsOnAfterValidate@2();
    BEGIN
      CurrPage.SAVERECORD;

      SalesHeader.GET("Document Type","Document No.");
      DocumentTotals.SalesRedistributeInvoiceDiscountAmounts(Rec,VATAmount,TotalSalesLine);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ValidateSaveShortcutDimCode@7(FieldNumber@1001 : Integer;VAR ShortcutDimCode@1000 : Code[20]);
    BEGIN
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
      CurrPage.SAVERECORD;
    END;

    LOCAL PROCEDURE UpdateEditableOnRow@18();
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      if Type <> Type::" " then
        UnitofMeasureCodeIsChangeable := CanEditUnitOfMeasureCode
      else
        UnitofMeasureCodeIsChangeable := false;

      if TotalSalesHeader."No." <> '' then begin
        SalesLine.SETRANGE("Document No.",TotalSalesHeader."No.");
        SalesLine.SETRANGE("Document Type",TotalSalesHeader."Document Type");
        if not SalesLine.ISEMPTY then
          InvDiscAmountEditable :=
            SalesCalcDiscountByType.InvoiceDiscIsAllowed(TotalSalesHeader."Invoice Disc. Code") and CurrPage.EDITABLE;
      end;

      IsCommentLine := not HasTypeToFillMandatotyFields;
    END;

    LOCAL PROCEDURE UpdateTypeText@10();
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      TypeAsText := TempOptionLookupBuffer.FormatOption(RecRef.FIELD(FIELDNO(Type)));
    END;

    LOCAL PROCEDURE SetItemChargeFieldsStyle@24();
    BEGIN
      ItemChargeStyleExpression := '';
      if AssignedItemCharge and ("Qty. Assigned" <> Quantity) then
        ItemChargeStyleExpression := 'Unfavorable';
    END;

    BEGIN
    END.
  }
}

