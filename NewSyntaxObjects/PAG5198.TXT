OBJECT Page 5198 Attendee Wizard Subform
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    LinksAllowed=false;
    SourceTable=Attendee;
    DelayedInsert=true;
    PageType=ListPart;
    SourceTableTemporary=true;
    AutoSplitKey=true;
    OnAfterGetRecord=BEGIN
                       StyleIsStrong := false;
                       AttendanceTypeIndent := 0;
                       SendInvitationEditable := true;

                       if "Attendance Type" = "Attendance Type"::"To-do Organizer" then begin
                         StyleIsStrong := true;
                         SendInvitationEditable := false;
                         "Send Invitation" := true;
                       end else
                         AttendanceTypeIndent := 1;
                     END;

    OnInsertRecord=VAR
                     xAttendee@1001 : Record Attendee;
                     SplitResult@1003 : Integer;
                   BEGIN
                     xAttendee.COPY(Rec);
                     ValidateAttendee(Rec,Rec);
                     RESET;
                     Rec := xAttendee;
                     if GET("To-do No.","Line No.") then begin
                       repeat
                       until (NEXT = 0) or ("Line No." = xRec."Line No.");
                       NEXT(-1);
                       SplitResult := ROUND((xRec."Line No." - "Line No.") / 2,1,'=');
                     end;
                     COPY(xAttendee);
                     "Line No." := "Line No." + SplitResult;
                     INSERT;
                     exit(false);
                   END;

    OnModifyRecord=VAR
                     xAttendee@1000 : Record Attendee;
                   BEGIN
                     xAttendee.COPY(Rec);
                     GET("To-do No.","Line No.");
                     if ("Attendee No." in [SalespersonFilter,ContactFilter]) and
                        (("Attendee Type" <> "Attendee Type") or
                         ("Attendee No." <> "Attendee No.") or
                         (("Attendance Type" = "Attendance Type"::"To-do Organizer") and
                          ("Attendance Type" <> "Attendance Type"::"To-do Organizer")))
                     then
                       ERROR(Text001,TABLECAPTION);
                     ValidateAttendee(xAttendee,Rec);
                     COPY(xAttendee);
                     MODIFY;
                     exit(false);
                   END;

    OnDeleteRecord=BEGIN
                     GET("To-do No.","Line No.");
                     if "Attendee No." in [SalespersonFilter,ContactFilter] then
                       ERROR(Text001,TABLECAPTION);
                     DELETE;
                     exit(false);
                   END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                IndentationColumnName=AttendanceTypeIndent;
                IndentationControls=Attendance Type;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Attendance Type;
                ToolTipML=ENU=Specifies the type of attendance for the meeting. You can select from: Required, Optional and Task Organizer.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attendance Type";
                Style=Strong;
                StyleExpr=StyleIsStrong;
                ImplicitType=Option }

    { 4   ;2   ;Field     ;
                Name=Attendee Type;
                ToolTipML=ENU=Specifies the type of the attendee. You can choose from Contact or Salesperson.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attendee Type";
                Style=Strong;
                StyleExpr=StyleIsStrong;
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name=Attendee No.;
                ToolTipML=ENU=Specifies the number of the attendee participating in the task.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attendee No.";
                Style=Strong;
                StyleExpr=StyleIsStrong;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Attendee Name;
                ToolTipML=ENU=Specifies the name of the attendee participating in the task.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attendee Name";
                Style=Strong;
                StyleExpr=StyleIsStrong;
                ImplicitType=Text50 }

    { 10  ;2   ;Field     ;
                Name=Send Invitation;
                ToolTipML=ENU=Specifies that you want to send an invitation to the attendee by e-mail. The Send Invitation option is only available for contacts and salespeople with an e-mail address. The Send Invitation option is not available for the meeting organizer.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Send Invitation";
                Editable=SendInvitationEditable;
                ImplicitType=Boolean }

  }
  CODE
  {
    VAR
      SalespersonFilter@1001 : Code[10];
      Text001@1002 : TextConst 'ENU=You cannot delete or change this %1.';
      ContactFilter@1003 : Code[20];
      StyleIsStrong@1000 : Boolean INDATASET;
      SendInvitationEditable@1004 : Boolean INDATASET;
      AttendanceTypeIndent@1005 : Integer INDATASET;

    [External]
    PROCEDURE SetAttendee@2(VAR Attendee@1000 : Record Attendee);
    BEGIN
      DELETEALL;

      if Attendee.FINDSET then
        repeat
          Rec := Attendee;
          INSERT;
        until Attendee.NEXT = 0;
    END;

    [External]
    PROCEDURE GetAttendee@3(VAR Attendee@1000 : Record Attendee);
    BEGIN
      Attendee.DELETEALL;

      if FINDSET then
        repeat
          Attendee := Rec;
          Attendee.INSERT;
        until NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateForm@1();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    [External]
    PROCEDURE SetTaskFilter@4(NewSalespersonFilter@1000 : Code[10];NewContactFilter@1001 : Code[20]);
    BEGIN
      SalespersonFilter := NewSalespersonFilter;
      ContactFilter := NewContactFilter;
    END;

    BEGIN
    END.
  }
}

