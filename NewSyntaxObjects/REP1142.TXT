OBJECT Report 1142 Export Cost Budget to Excel
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Cost Budget to Excel;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 3233;    ;DataItem;Cost Budget Entry   ;
               DataItemTable="Cost Budget Entry";
               OnPreDataItem=BEGIN
                               if GETRANGEMIN("Budget Name") <> GETRANGEMAX("Budget Name") then
                                 ERROR(Text001);

                               if (StartDate = 0D) or
                                  (NoOfPeriods = 0) or
                                  (FORMAT(PeriodLength) = '')
                               then
                                 ERROR(Text002);

                               for i := 1 to NoOfPeriods do begin
                                 if i = 1 then
                                   TempPeriod."Period Start" := StartDate
                                 else
                                   TempPeriod."Period Start" := CALCDATE(PeriodLength,TempPeriod."Period Start");
                                 TempPeriod."Period End" := CALCDATE(PeriodLength,TempPeriod."Period Start");
                                 TempPeriod."Period End" := CALCDATE('<-1D>',TempPeriod."Period End");
                                 TempPeriod."Period No." := i;
                                 TempPeriod.INSERT;
                               end;
                               SETRANGE(Date,StartDate,TempPeriod."Period End");
                               TempCostBudgetBuf2.DELETEALL;
                               TempExcelBuffer.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(TempCostBudgetBuf1);
                                  TempCostBudgetBuf1."Cost Type No." := "Cost Type No.";
                                  TempCostBudgetBuf1."Budget Name" := "Budget Name";
                                  TempCostBudgetBuf1.Date := CalcPeriodStart(Date);
                                  TempCostBudgetBuf1."Cost Center Code" := "Cost Center Code";
                                  TempCostBudgetBuf1."Cost Object Code" := "Cost Object Code";
                                  TempCostBudgetBuf1.Amount := Amount;

                                  TempCostBudgetBuf2 := TempCostBudgetBuf1;
                                  if TempCostBudgetBuf2.FIND then begin
                                    TempCostBudgetBuf2.Amount := TempCostBudgetBuf2.Amount + TempCostBudgetBuf1.Amount;
                                    TempCostBudgetBuf2.MODIFY;
                                  end else
                                    TempCostBudgetBuf2.INSERT;
                                END;

               OnPostDataItem=VAR
                                CostType@1002 : Record "Cost Type";
                                Window@1005 : Dialog;
                                RecNo@1004 : Integer;
                                TotalRecNo@1003 : Integer;
                                LastBudgetRowNo@1001 : Integer;
                              BEGIN
                                Window.OPEN(
                                  Text005 +
                                  '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
                                Window.UPDATE(1,0);
                                TotalRecNo := CostType.COUNT;
                                RecNo := 0;
                                CostBudgetName.INIT;

                                RowNo := 1;
                                EnterCell(RowNo,1,Text006,false,true,'',TempExcelBuffer."Cell Type"::Text);
                                EnterCell(RowNo,2,'',false,true,'',TempExcelBuffer."Cell Type"::Text);
                                EnterFilterInCell(GETFILTER("Budget Name"),FIELDCAPTION("Budget Name"));
                                EnterFilterInCell(GETFILTER("Cost Center Code"),FIELDCAPTION("Cost Center Code"));
                                EnterFilterInCell(GETFILTER("Cost Object Code"),FIELDCAPTION("Cost Object Code"));

                                CostAccSetup.GET;

                                RowNo := RowNo + 2;
                                HeaderRowNo := RowNo;
                                EnterCell(HeaderRowNo,1,FIELDCAPTION("Cost Type No."),false,true,'',TempExcelBuffer."Cell Type"::Text);
                                EnterCell(HeaderRowNo,2,CostType.FIELDCAPTION(Name),false,true,'',TempExcelBuffer."Cell Type"::Text);
                                EnterCell(HeaderRowNo,3,CostType.FIELDCAPTION("Cost Center Code"),false,true,'',TempExcelBuffer."Cell Type"::Text);
                                EnterCell(HeaderRowNo,4,CostType.FIELDCAPTION("Cost Object Code"),false,true,'',TempExcelBuffer."Cell Type"::Text);
                                i := 0;
                                ColNo := 4;
                                if TempPeriod.FIND('-') then
                                  repeat
                                    ColNo := ColNo + 1;
                                    EnterCell(HeaderRowNo,ColNo,FORMAT(TempPeriod."Period Start"),false,true,'',TempExcelBuffer."Cell Type"::Date);
                                  until TempPeriod.NEXT = 0;

                                COPYFILTER("Cost Type No.",CostType."No.");
                                if CostType.FIND('-') then
                                  repeat
                                    RecNo := RecNo + 1;
                                    Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                    RowNo := RowNo + 1;
                                    EnterCostType(RowNo,CostType);
                                    if (CostType.Totaling = '') or (not IncludeTotalingFormulas) then begin
                                      TempCostBudgetBuf2.SETRANGE("Cost Type No.",CostType."No.");
                                      if TempCostBudgetBuf2.FIND('-') then begin
                                        TempCostBudgetBuf1 := TempCostBudgetBuf2;
                                        EnterCCCO(RowNo,CostType);
                                        if TempPeriod.FIND('-') then
                                          repeat
                                            if (TempCostBudgetBuf2."Cost Object Code" <> TempCostBudgetBuf1."Cost Object Code") or
                                               (TempCostBudgetBuf2."Cost Center Code" <> TempCostBudgetBuf1."Cost Center Code")
                                            then begin
                                              RowNo := RowNo + 1;
                                              EnterCostType(RowNo,CostType);
                                              EnterCCCO(RowNo,CostType);
                                              TempCostBudgetBuf1 := TempCostBudgetBuf2;
                                            end;
                                            TempPeriod.GET(0,TempCostBudgetBuf2.Date);
                                            EnterCell(
                                              RowNo,4 + TempPeriod."Period No.",
                                              MatrixMgt.FormatValue(TempCostBudgetBuf2.Amount,RoundingFactor,false),
                                              CostType.Type <> CostType.Type::"Cost Type",
                                              false,'',TempExcelBuffer."Cell Type"::Number);
                                            TempPeriod.NEXT;
                                          until TempCostBudgetBuf2.NEXT = 0;
                                      end else
                                        CLEAR(TempCostBudgetBuf2);
                                    end else
                                      if TempPeriod.FIND('-') then begin
                                        repeat
                                          EnterFormula(
                                            RowNo,4 + TempPeriod."Period No.",
                                            CostType.Totaling,
                                            CostType.Type <> CostType.Type::"Cost Type",false);
                                        until TempPeriod.NEXT = 0;
                                      end;
                                  until CostType.NEXT = 0;
                                if IncludeTotalingFormulas then
                                  HasFormulaError := TempExcelBuffer.ExportBudgetFilterToFormula(TempExcelBuffer);
                                Window.CLOSE;
                                LastBudgetRowNo := RowNo;

                                RowNo := RowNo + 200; // Move way below the budget

                                if HasFormulaError then
                                  if not CONFIRM(STRSUBSTNO(Text007,TempExcelBuffer.GetExcelReference(7))) then
                                    CurrReport.BREAK;

                                TempExcelBuffer.CreateBook(ServerFileName,TempExcelBuffer.GetExcelReference(10));
                                TempExcelBuffer.SetCurrent(HeaderRowNo + 1,1);
                                TempExcelBuffer.StartRange;
                                TempExcelBuffer.SetCurrent(LastBudgetRowNo,1);
                                TempExcelBuffer.EndRange;
                                TempExcelBuffer.CreateRange(TempExcelBuffer.GetExcelReference(11));
                                if TempPeriod.FIND('-') then begin
                                  repeat
                                    TempExcelBuffer.SetCurrent(HeaderRowNo + 1,4 + TempPeriod."Period No.");
                                    TempExcelBuffer.StartRange;
                                    TempExcelBuffer.SetCurrent(LastBudgetRowNo,4 + TempPeriod."Period No.");
                                    TempExcelBuffer.EndRange;
                                    TempExcelBuffer.CreateRange(TempExcelBuffer.GetExcelReference(9) + '_' + FORMAT(TempPeriod."Period No."));
                                  until TempPeriod.NEXT = 0;
                                end;

                                TempExcelBuffer.WriteSheet(PADSTR(CostBudgetName.Name,30),COMPANYNAME,USERID);
                                TempExcelBuffer.CloseBook;
                                TempExcelBuffer.OpenExcel;
                                TempExcelBuffer.GiveUserControl;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 7   ;0   ;Container ;
                  Name=Container7;
                  ContainerType=ContentArea }

      { 6   ;1   ;Group     ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 5   ;2   ;Field     ;
                  Name=Start Date;
                  CaptionML=ENU=Start Date;
                  ToolTipML=ENU=Specifies the first date to be included in the budget to be exported to Excel.;
                  ApplicationArea=#Advanced;
                  SourceExpr=StartDate }

      { 3   ;2   ;Field     ;
                  Name=No. of Periods;
                  CaptionML=ENU=No. of Periods;
                  ToolTipML=ENU=Specifies the number of accounting periods to be exported to Excel.;
                  ApplicationArea=#Advanced;
                  SourceExpr=NoOfPeriods }

      { 4   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the length of the accounting periods for the budget to be exported to Excel.;
                  ApplicationArea=#Advanced;
                  SourceExpr=PeriodLength }

      { 2   ;2   ;Field     ;
                  Name=Include Totalling Formulas;
                  CaptionML=ENU=Include Totalling Formulas;
                  ToolTipML=ENU=Specifies if you want sum formulas to be created in Excel based on the totaling fields used in the Chart of Cost Types window.;
                  ApplicationArea=#Advanced;
                  SourceExpr=IncludeTotalingFormulas }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempPeriod@1024 : TEMPORARY Record Date;
      TempCostBudgetBuf1@1022 : TEMPORARY Record "Cost Budget Buffer";
      TempCostBudgetBuf2@1021 : TEMPORARY Record "Cost Budget Buffer";
      CostAccSetup@1019 : Record "Cost Accounting Setup";
      CostBudgetName@1017 : Record "Cost Budget Name";
      TempExcelBuffer@1016 : TEMPORARY Record "Excel Buffer";
      MatrixMgt@1004 : Codeunit "Matrix Management";
      ServerFileName@1005 : Text;
      StartDate@1013 : Date;
      PeriodLength@1012 : DateFormula;
      RoundingFactor@1000 : 'None,"1","1000","1000000"';
      NoOfPeriods@1011 : Integer;
      i@1009 : Integer;
      RowNo@1008 : Integer;
      ColNo@1007 : Integer;
      HeaderRowNo@1002 : Integer;
      Text001@1027 : TextConst 'ENU=You can only export one budget at a time.';
      Text002@1026 : TextConst 'ENU=You must specify the starting date, number of periods, and period length.';
      Text005@1020 : TextConst 'ENU=Analyzing Data...\\';
      Text006@1018 : TextConst 'ENU=Export Filters';
      Text007@1014 : TextConst 'ENU=Some filters cannot be converted into Excel formulas. You must verify %1 errors in the Excel worksheet. Do you want to create the Excel worksheet?';
      IncludeTotalingFormulas@1001 : Boolean;
      HasFormulaError@1003 : Boolean;

    LOCAL PROCEDURE CalcPeriodStart@1(EntryDate@1000 : Date) : Date;
    BEGIN
      TempPeriod."Period Start" := EntryDate;
      TempPeriod.FIND('=<');
      exit(TempPeriod."Period Start");
    END;

    LOCAL PROCEDURE EnterCell@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;UnderLine@1004 : Boolean;NumberFormat@1005 : Text[30];CellType@1006 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE EnterFilterInCell@5(Filter@1000 : Text[250];FieldName@1001 : Text[100]);
    BEGIN
      if Filter <> '' then begin
        RowNo := RowNo + 1;
        EnterCell(RowNo,1,FieldName,false,false,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,Filter,false,false,'',TempExcelBuffer."Cell Type"::Text);
      end;
    END;

    LOCAL PROCEDURE EnterFormula@8(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1005 : Boolean;UnderLine@1006 : Boolean);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := '';
      TempExcelBuffer.Formula := CellValue; // is converted to formula later.
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE EnterCCCO@2(RowNo@1000 : Integer;VAR CostType@1002 : Record "Cost Type");
    BEGIN
      EnterCell(
        RowNo,3,
        TempCostBudgetBuf2."Cost Center Code",CostType.Type <> CostType.Type::"Cost Type",false,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(
        RowNo,4,
        TempCostBudgetBuf2."Cost Object Code",CostType.Type <> CostType.Type::"Cost Type",false,'',TempExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE EnterCostType@6(RowNo@1000 : Integer;VAR CostType@1001 : Record "Cost Type");
    BEGIN
      EnterCell(RowNo,1,CostType."No.",CostType.Type <> CostType.Type::"Cost Type",false,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(
        RowNo,2,COPYSTR(COPYSTR(PADSTR(' ',100),1,2 * CostType.Indentation + 1) + CostType.Name,2),
        CostType.Type <> CostType.Type::"Cost Type",false,'',TempExcelBuffer."Cell Type"::Text);
    END;

    PROCEDURE SetParameters@4(NewRoundingFactor@1000 : 'None,"1","1000","1000000"');
    BEGIN
      RoundingFactor := NewRoundingFactor;
    END;

    PROCEDURE SetFileNameSilent@7(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

