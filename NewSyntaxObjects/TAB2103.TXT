OBJECT Table 2103 O365 Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               SalesDocumentIcon@1000 : Record "Sales Document Icon";
             BEGIN
               SalesDocumentIcon.INIT;
               "Document Icon" := SalesDocumentIcon.Picture; // ensure mediaset is empty
             END;

    CaptionML=ENU=O365 Sales Document;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order" }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer;
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Sell-to Customer Name }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                           "Document No."=FIELD("No."),
                                                                                                                           Posted=FIELD(Posted)));
                                                   CaptionML=ENU=Last Email Sent Time }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                            "Document No."=FIELD("No."),
                                                                                                                            Posted=FIELD(Posted),
                                                                                                                            "Created Date-Time"=FIELD("Last Email Sent Time")));
                                                   CaptionML=ENU=Last Email Sent Status;
                                                   OptionCaptionML=ENU=,In Process,Finished,Error;
                                                   OptionString=,"In Process",Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                         "Document No."=FIELD("No."),
                                                                                                         Posted=FIELD(Posted),
                                                                                                         "Job Last Status"=CONST(Finished)));
                                                   CaptionML=ENU=Sent as Email }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                              "Document No."=FIELD("No."),
                                                                                                                              Posted=FIELD(Posted),
                                                                                                                              "Created Date-Time"=FIELD("Last Email Sent Time")));
                                                   CaptionML=ENU=Last Email Notif Cleared }
    { 2100;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 2101;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE ("Source ID"=CONST(112),
                                                                                                 "Cancelled Doc. No."=FIELD("No.")));
                                                   CaptionML=ENU=Canceled }
    { 2102;   ;Currency Symbol     ;Text10        ;CaptionML=ENU=Currency Symbol }
    { 2103;   ;Document Status     ;Option        ;CaptionML=ENU=Document Status;
                                                   OptionCaptionML=ENU=Quote,Draft Invoice,Unpaid Invoice,Canceled Invoice,Paid Invoice,Overdue Invoice;
                                                   OptionString=Quote,"Draft Invoice","Unpaid Invoice","Canceled Invoice","Paid Invoice","Overdue Invoice" }
    { 2104;   ;Sales Amount        ;Decimal       ;CaptionML=ENU=Sales Amount }
    { 2105;   ;Outstanding Amount  ;Decimal       ;CaptionML=ENU=Outstanding Amount }
    { 2106;   ;Total Invoiced Amount;Text250      ;CaptionML=ENU=Total Invoiced Amount }
    { 2107;   ;Outstanding Status  ;Text250       ;CaptionML=ENU=Outstanding Status }
    { 2108;   ;Document Icon       ;MediaSet      ;CaptionML=ENU=Document Icon }
    { 2109;   ;Payment Method      ;Code10        ;TableRelation="Payment Method" WHERE ("Use for Invoicing"=CONST(true));
                                                   CaptionML=ENU=Payment Method }
    { 2110;   ;Display No.         ;Text20        ;CaptionML=ENU=Display No. }
    { 2111;   ;Quote Valid Until Date;Date        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Valid Until Date" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Quote Valid Until Date }
    { 2112;   ;Quote Accepted      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Accepted" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                             "No."=FIELD("No.")));
                                                   CaptionML=ENU=Quote Accepted }
    { 2113;   ;Quote Sent to Customer;DateTime    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Sent to Customer" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Quote Sent to Customer }
    { 2114;   ;Quote Accepted Date ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Quote Accepted Date" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                  "No."=FIELD("No.")));
                                                   CaptionML=ENU=Quote Accepted Date }
  }
  KEYS
  {
    {    ;"Document Type","No.",Posted            ;Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"Document Date","Sell-to Customer Name","Total Invoiced Amount","Display No.","Outstanding Status","Document Icon" }
  }
  CODE
  {
    VAR
      NotSentTxt@1000 : TextConst 'ENU=Not sent';
      OverdueAmountTxt@1001 : TextConst '@@@=%1 currency formatter (e.g.$), %2 amount;ENU=Overdue: %1%2';
      OverdueTxt@1006 : TextConst 'ENU=Overdue';
      DueTxt@1002 : TextConst '@@@="%1 = a number of days greater than one";ENU=Due in %1 days';
      DueAmountTxt@1010 : TextConst '@@@="%1 = a number of days greater than one,%2 currency formatter (e.g.$), %3 amount";ENU=%2%3 due in %1 days';
      DueTodayTxt@1003 : TextConst 'ENU=Due today';
      DueTodayAmountTxt@1009 : TextConst '@@@=%1 currency formatter (e.g.$), %2 amount;ENU=%1%2 due today';
      AmountTxt@1004 : TextConst '@@@="%1=Currency symbol %2= amount";ENU=%1%2';
      FormatTxt@1013 : TextConst '@@@={LOCKED} Do not translate;ENU=<Precision,2:2><Standard Format,0>';
      PaidTxt@1005 : TextConst 'ENU=Paid';
      CanceledTxt@1007 : TextConst 'ENU=Canceled';
      SortByDueDate@1008 : Boolean;
      DueTomorrowTxt@1011 : TextConst 'ENU=Due tomorrow';
      DueTomorrowAmountTxt@1012 : TextConst '@@@=%1 currency formatter (e.g.$), %2 amount;ENU=%1%2 due tomorrow';
      DraftTxt@1014 : TextConst 'ENU=Draft';
      DisplayNoLbl@1015 : TextConst '@@@="%1 = The posted invoice number";ENU=No. %1';
      CreateTxt@1019 : TextConst 'ENU=Create';
      SelectTypeQst@1020 : TextConst 'ENU=Invoice,Estimate';
      SentTxt@1016 : TextConst '@@@="%1 = date";ENU=Sent %1';
      AcceptedTxt@1017 : TextConst '@@@="%1 = date";ENU=Accepted %1';
      ExpiredTxt@1018 : TextConst 'ENU=Expired';
      LastEmailFailedTxt@1021 : TextConst 'ENU=Failed to send';

    [External]
    PROCEDURE UpdateFields@1();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      "Currency Symbol" := Currency.ResolveGLCurrencySymbol("Currency Code");

      if Posted then
        GetAmountsPosted
      else
        GetAmountsUnposted;

      if "Document Type" = "Document Type"::Quote then
        CALCFIELDS("Quote Accepted","Quote Valid Until Date","Quote Sent to Customer","Quote Accepted Date");

      AssignIcon;
      SetIcon;
      SetBrickStatus;
      SetDisplayNo;
    END;

    LOCAL PROCEDURE AssignIcon@4();
    BEGIN
      case "Document Type" of
        "Document Type"::Quote:
          begin
            case true of
              "Quote Accepted":
                "Document Status" := "Document Status"::"Paid Invoice";
              QuoteIsExpired:
                "Document Status" := "Document Status"::"Canceled Invoice";
              "Quote Sent to Customer" <> 0DT:
                "Document Status" := "Document Status"::"Unpaid Invoice";
              else
                "Document Status" := "Document Status"::"Draft Invoice";
            end;
            exit;
          end;
        "Document Type"::Invoice:
          CALCFIELDS(Canceled);
        else
          exit;
      end;

      if not Posted then begin
        "Document Status" := "Document Status"::"Draft Invoice";
        exit;
      end;

      if Canceled then begin
        "Document Status" := "Document Status"::"Canceled Invoice";
        exit;
      end;

      if "Outstanding Amount" <= 0 then begin
        "Document Status" := "Document Status"::"Paid Invoice";
        exit;
      end;

      if IsOverduePostedInvoice then begin
        "Document Status" := "Document Status"::"Overdue Invoice";
        exit;
      end;

      "Document Status" := "Document Status"::"Unpaid Invoice";
    END;

    LOCAL PROCEDURE SetIcon@2();
    VAR
      SalesDocumentIcon@1000 : Record "Sales Document Icon";
      MediaResources@1001 : Record "Media Resources";
    BEGIN
      if SalesDocumentIcon.GET("Document Status") then
        if MediaResources.GET(SalesDocumentIcon."Media Resources Ref") then;
      "Document Icon" := MediaResources."MediaSet Reference";
    END;

    PROCEDURE IsOverduePostedInvoice@7() : Boolean;
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETRANGE(Open,true);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      exit(not CustLedgerEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetRemainingDaysBeforeOverdue@12() : Integer;
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
      RemainingDuration@1001 : Integer;
    BEGIN
      if IsOverduePostedInvoice then
        exit(0);

      CustLedgerEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETRANGE(Open,true);
      CustLedgerEntry.SETCURRENTKEY("Due Date");
      CustLedgerEntry.SETASCENDING("Due Date",true);

      if not CustLedgerEntry.FINDFIRST then
        exit(0);

      RemainingDuration := (CustLedgerEntry."Due Date" - WORKDATE);

      exit(RemainingDuration);
    END;

    LOCAL PROCEDURE GetAmountsUnposted@6();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.GET("Document Type","No.");
      SalesHeader.CALCFIELDS("Amount Including VAT");
      "Sales Amount" := SalesHeader."Amount Including VAT";
      "Payment Method" := SalesHeader."Payment Method Code";
    END;

    LOCAL PROCEDURE GetAmountsPosted@8();
    VAR
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
    BEGIN
      SalesInvoiceHeader.GET("No.");
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT","Remaining Amount");
      "Sales Amount" := SalesInvoiceHeader."Amount Including VAT";
      "Outstanding Amount" := SalesInvoiceHeader."Remaining Amount";
      "Payment Method" := SalesInvoiceHeader."Payment Method Code";
    END;

    LOCAL PROCEDURE SetBrickStatus@10();
    BEGIN
      CALCFIELDS("Last Email Sent Time","Last Email Sent Status");

      if "Document Type" = "Document Type"::Quote then begin
        SetQuoteBrickStatus;
        exit;
      end;

      if not Posted then begin
        SetDraftInvoiceBrickStatus;
        exit;
      end;

      SetPostedDocumentBrickStatus;
    END;

    LOCAL PROCEDURE SetQuoteBrickStatus@30();
    BEGIN
      case true of
        "Last Email Sent Status" = "Last Email Sent Status"::Error:
          begin
            "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
            "Total Invoiced Amount" := LastEmailFailedTxt;// STRSUBSTNO(AcceptedTxt,"Quote Accepted Date");
          end;
        "Quote Accepted":
          begin
            "Outstanding Status" := STRSUBSTNO(AcceptedTxt,"Quote Accepted Date");
            "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          end;
        QuoteIsExpired:
          begin
            "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
            "Total Invoiced Amount" := ExpiredTxt;
          end;
        "Quote Sent to Customer" <> 0DT:
          begin
            "Outstanding Status" := STRSUBSTNO(SentTxt,DT2DATE("Quote Sent to Customer"));
            "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          end;
        else begin
          "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          "Total Invoiced Amount" := NotSentTxt;
        end;
      end;
    END;

    LOCAL PROCEDURE SetPostedDocumentBrickStatus@31();
    VAR
      HasPartialPayment@1001 : Boolean;
      DaysToDueDate@1000 : Integer;
    BEGIN
      if "Outstanding Amount" <= 0 then begin
        CALCFIELDS(Canceled);
        if Canceled then begin
          "Total Invoiced Amount" := CanceledTxt;
          "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
        end else begin
          "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
          "Outstanding Status" := PaidTxt;
        end;
        exit;
      end;

      if "Last Email Sent Status" = "Last Email Sent Status"::Error then begin
        "Total Invoiced Amount" := LastEmailFailedTxt;
        "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
        exit;
      end;

      "Total Invoiced Amount" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
      HasPartialPayment := "Outstanding Amount" <> "Sales Amount";

      if IsOverduePostedInvoice then
        if HasPartialPayment then
          "Outstanding Status" := STRSUBSTNO(OverdueAmountTxt,"Currency Symbol",FORMAT("Outstanding Amount",0,FormatTxt))
        else
          "Outstanding Status" := OverdueTxt
      else begin
        DaysToDueDate := GetRemainingDaysBeforeOverdue;
        if  DaysToDueDate = 0 then
          if HasPartialPayment then
            "Outstanding Status" := STRSUBSTNO(DueTodayAmountTxt,"Currency Symbol",FORMAT("Outstanding Amount",0,FormatTxt))
          else
            "Outstanding Status" := DueTodayTxt
        else
          if  DaysToDueDate = 1 then
            if HasPartialPayment then
              "Outstanding Status" := STRSUBSTNO(DueTomorrowAmountTxt,"Currency Symbol",FORMAT("Outstanding Amount",0,FormatTxt))
            else
              "Outstanding Status" := DueTomorrowTxt
          else
            if HasPartialPayment then
              "Outstanding Status" := STRSUBSTNO(DueAmountTxt,DaysToDueDate,"Currency Symbol",FORMAT("Outstanding Amount",0,FormatTxt))
            else
              "Outstanding Status" := STRSUBSTNO(DueTxt,DaysToDueDate)
      end;
    END;

    LOCAL PROCEDURE SetDraftInvoiceBrickStatus@32();
    BEGIN
      "Total Invoiced Amount" := NotSentTxt;
      "Outstanding Status" := STRSUBSTNO(AmountTxt,"Currency Symbol",FORMAT("Sales Amount",0,FormatTxt));
    END;

    LOCAL PROCEDURE SetDisplayNo@25();
    BEGIN
      if Posted then
        "Display No." := STRSUBSTNO(DisplayNoLbl,"No.")
      else
        case "Document Type" of
          "Document Type"::Invoice:
            "Display No." := DraftTxt;
          "Document Type"::Quote:
            "Display No." := "No.";
          else
            "Display No." := '';
        end;
    END;

    [External]
    PROCEDURE OnFind@5(Which@1000 : Text) : Boolean;
    VAR
      FilterPosted@1001 : Boolean;
    BEGIN
      case Which of
        '+':
          Posted := true; // Get last posted invoice
        '-':
          Posted := false; // Get first sales header
        else
          if HasPostedFilter(FilterPosted) then
            Posted := Posted or FilterPosted;
      end;

      if Posted then
        exit(FindPostedDocument(Which));

      exit(FindUnpostedDocument(Which));
    END;

    [External]
    PROCEDURE OnNext@9(Steps@1000 : Integer) : Integer;
    VAR
      SalesInvoiceHeader@1005 : Record "Sales Invoice Header";
      SalesHeaderResults@1004 : Integer;
      SalesInvoiceHeaderResults@1003 : Integer;
      StepOffset@1002 : Integer;
      FilterPosted@1001 : Boolean;
    BEGIN
      SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);

      if not Posted then begin // Look for more Sales Headers
        SalesHeaderResults := GetNextUnpostedDocument(Steps);
        if SalesHeaderResults <> 0 then
          exit(SalesHeaderResults);

        if Steps < 0 then // No more sales headers and we are moving "back"
          exit(SalesHeaderResults); // therefore, no more recs, so this means we are done

        // No more sales headers, but we are moving forward so move on to sales invoice headers below
        if not SalesInvoiceHeader.FINDSET then
          exit(0);

        StepOffset += 1; // need to adjust for one step that we did with FINDSET
      end else
        SalesInvoiceHeader.TRANSFERFIELDS(Rec); // Continue from current posted doc

      if HasPostedFilter(FilterPosted) and (not FilterPosted) then
        exit(GetPreviousUnpostedDocument(Steps));

      SalesInvoiceHeaderResults := SalesInvoiceHeader.NEXT(Steps - StepOffset);
      if (SalesInvoiceHeaderResults + StepOffset) <> 0 then begin
        SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
        exit(SalesInvoiceHeaderResults + StepOffset);
      end;

      exit(GetPreviousUnpostedDocument(Steps));
    END;

    LOCAL PROCEDURE SetSalesHeaderFilters@22(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      SetSalesHeaderKey(SalesHeader);

      CopySalesHeaderFilters(SalesHeader);
      if SalesHeader.GETFILTER("Document Type") = '' then
        SalesHeader.SETRANGE("Document Type","Document Type"::Invoice);

      FILTERGROUP(-1);
      if GETFILTER("Sell-to Customer Name") <> '' then begin
        SalesHeader.FILTERGROUP(-1);
        CopySalesHeaderFilters(SalesHeader);
        SalesHeader.FILTERGROUP(0);
      end;
      FILTERGROUP(0);

      SalesHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderFilters@19(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      SetSalesInvoiceHeaderKey(SalesInvoiceHeader);

      CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);

      FILTERGROUP(-1);
      if GETFILTER("Sell-to Customer Name") <> '' then begin
        SalesInvoiceHeader.FILTERGROUP(-1);
        CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);
        SalesInvoiceHeader.FILTERGROUP(0);
      end;
      FILTERGROUP(0);

      SalesInvoiceHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE CopySalesHeaderFilters@27(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      COPYFILTER("Document Type",SalesHeader."Document Type");
      COPYFILTER("No.",SalesHeader."No.");
      COPYFILTER("Sell-to Customer Name",SalesHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesHeader."Sell-to Contact");
      COPYFILTER("Document Date",SalesHeader."Document Date");
      COPYFILTER("Last Email Sent Status",SalesHeader."Last Email Sent Status");
      COPYFILTER("Last Email Notif Cleared",SalesHeader."Last Email Notif Cleared");
    END;

    LOCAL PROCEDURE CopySalesInvoiceHeaderFilters@28(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      COPYFILTER("No.",SalesInvoiceHeader."No.");
      COPYFILTER("Outstanding Amount",SalesInvoiceHeader."Remaining Amount");
      COPYFILTER("Sell-to Customer Name",SalesInvoiceHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesInvoiceHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesInvoiceHeader."Sell-to Contact");
      COPYFILTER("Document Date",SalesInvoiceHeader."Document Date");
      COPYFILTER("Last Email Sent Status",SalesInvoiceHeader."Last Email Sent Status");
      COPYFILTER("Last Email Notif Cleared",SalesInvoiceHeader."Last Email Notif Cleared");
    END;

    LOCAL PROCEDURE SetSalesHeaderAsRec@17(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      TRANSFERFIELDS(SalesHeader);
      Posted := false;
      UpdateFields;
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderAsRec@18(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      TRANSFERFIELDS(SalesInvoiceHeader);
      Posted := true;
      "Document Type" := "Document Type"::Invoice;
      UpdateFields;
    END;

    LOCAL PROCEDURE FindUnpostedDocument@16(Which@1001 : Text) : Boolean;
    VAR
      SalesHeader@1000 : Record "Sales Header";
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
      IsPosted@1003 : Boolean;
    BEGIN
      if HasPostedFilter(IsPosted) and IsPosted then
        exit(false);

      SetSalesHeaderFilters(SalesHeader);
      if SalesHeader.FIND(Which) then begin
        SetSalesHeaderAsRec(SalesHeader);
        exit(true);
      end;

      if (STRPOS(Which,'<') > 0) and (STRPOS(Which,'>') = 0) then // We are only interested in unposted docs previous to this one
        exit(false); // since there are none, we should exit

      if HasPostedFilter(IsPosted) and (not IsPosted) then
        exit(false);  // do not attempt search for posted doc

      // Get the first posted doc since we no longer have any unposted docs
      SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
      if SalesInvoiceHeader.FINDFIRST then begin
        SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE FindPostedDocument@15(Which@1000 : Text) : Boolean;
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      SalesHeader@1002 : Record "Sales Header";
      IsPosted@1003 : Boolean;
    BEGIN
      if (not HasPostedFilter(IsPosted)) or IsPosted then begin
        SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
        if SalesInvoiceHeader.FIND(Which) then begin
          SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
          exit(true);
        end;
      end;

      if HasPostedFilter(IsPosted) and IsPosted then
        exit(false); // do not attempt search for unposted doc

      // If Which contains '<' or is '+' then we should look for the last Sales Header because there are no posted invoices
      // that match the specified criteria.
      if (STRPOS(Which,'<') > 0) or (Which = '+') then begin
        SetSalesHeaderFilters(SalesHeader);
        if SalesHeader.FINDLAST then begin
          SetSalesHeaderAsRec(SalesHeader);
          exit(true);
        end;
      end;

      // No match
      exit(false);
    END;

    LOCAL PROCEDURE GetNextUnpostedDocument@14(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record "Sales Header";
      IsPosted@1003 : Boolean;
      SalesHeaderResults@1002 : Integer;
    BEGIN
      if HasPostedFilter(IsPosted) and IsPosted then
        exit(0);

      SetSalesHeaderFilters(SalesHeader);
      SalesHeaderResults := SalesHeader.NEXT(Steps);

      if SalesHeaderResults <> 0 then
        SetSalesHeaderAsRec(SalesHeader);

      exit(SalesHeaderResults);
    END;

    LOCAL PROCEDURE GetPreviousUnpostedDocument@13(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record "Sales Header";
      SalesHeaderResults@1002 : Integer;
      IsPosted@1003 : Boolean;
    BEGIN
      if Steps >= 0 then
        exit(0); // there must be negative steps

      if HasPostedFilter(IsPosted) and IsPosted then
        exit(0);

      SetSalesHeaderFilters(SalesHeader);

      if not SalesHeader.FIND('+') then // step 1 entry back (i.e. get the last sales header)
        exit(0); // no previous sales header

      if Steps < -1 then // there are more steps to do
        SalesHeaderResults := SalesHeader.NEXT(Steps + 1) - 1
      else
        SalesHeaderResults := Steps;

      if SalesHeaderResults <> 0 then
        SetSalesHeaderAsRec(SalesHeader);

      exit(SalesHeaderResults);
    END;

    LOCAL PROCEDURE HasPostedFilter@11(VAR FilterValue@1001 : Boolean) : Boolean;
    VAR
      PostedFilter@1000 : Boolean;
    BEGIN
      if GETFILTER(Posted) = '' then
        exit(false);

      if not EVALUATE(PostedFilter,GETFILTER(Posted)) then
        exit(false);

      FilterValue := PostedFilter;
      exit(true);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderKey@20(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      if SortByDueDate then begin
        SalesInvoiceHeader.SETCURRENTKEY("Due Date","Document Date","No.");
        SalesInvoiceHeader.SETASCENDING("Due Date",true);
      end else begin
        SalesInvoiceHeader.SETCURRENTKEY("Document Date","Due Date","No.");
        SalesInvoiceHeader.SETASCENDING("Due Date",false);
      end;
      SalesInvoiceHeader.SETASCENDING("Document Date",false);
      SalesInvoiceHeader.SETASCENDING("No.",false);
    END;

    LOCAL PROCEDURE SetSalesHeaderKey@21(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      SalesHeader.SETCURRENTKEY("Document Date","No.");
      SalesHeader.SETASCENDING("No.",false);
      SalesHeader.SETASCENDING("Document Date",false);
    END;

    [External]
    PROCEDURE SetSortByDocDate@24();
    BEGIN
      SortByDueDate := false;
    END;

    [External]
    PROCEDURE SetSortByDueDate@23();
    BEGIN
      SortByDueDate := true;
    END;

    LOCAL PROCEDURE QuoteIsExpired@34() : Boolean;
    BEGIN
      exit(("Quote Valid Until Date" <> 0D) and ("Quote Valid Until Date" < WORKDATE));
    END;

    PROCEDURE OpenInvoice@26();
    VAR
      SalesHeader@1001 : Record "Sales Header";
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
      O365SalesInvoice@1002 : Page "O365 Sales Invoice";
      O365SalesQuote@1003 : Page "O365 Sales Quote";
    BEGIN
      if Posted then begin
        if not SalesInvoiceHeader.GET("No.") then
          exit;
        SalesInvoiceHeader.SETRECFILTER;
        PAGE.RUN(PAGE::"O365 Posted Sales Invoice",SalesInvoiceHeader);
      end else begin
        if not SalesHeader.GET("Document Type","No.") then
          exit;
        SalesHeader.SETRECFILTER;
        case "Document Type" of
          "Document Type"::Invoice:
            begin
              O365SalesInvoice.SETRECORD(SalesHeader);
              O365SalesInvoice.SuppressExitPrompt;
              O365SalesInvoice.RUN;
            end;
          "Document Type"::Quote:
            begin
              O365SalesQuote.SETRECORD(SalesHeader);
              O365SalesQuote.SuppressExitPrompt;
              O365SalesQuote.RUN;
            end;
        end;
      end;
    END;

    PROCEDURE CreateNew@29();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      case STRMENU(SelectTypeQst,1,CreateTxt) of
        1:
          CreateDocument(PAGE::"O365 Sales Invoice",SalesHeader."Document Type"::Invoice);
        2:
          CreateDocument(PAGE::"O365 Sales Quote",SalesHeader."Document Type"::Quote);
      end;
    END;

    PROCEDURE CreateDocument@35(PageID@1000 : Integer;DocType@1001 : Option);
    VAR
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      SalesHeader.INIT;
      SalesHeader."Document Type" := DocType;
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.INSERT(true);
      PAGE.RUN(PageID,SalesHeader);
    END;

    BEGIN
    END.
  }
}

