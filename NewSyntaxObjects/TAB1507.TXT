OBJECT Table 1507 Workflow Step Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               WorkflowStep@1001 : Record "Workflow Step";
               IsEventInsert@1004 : Boolean;
             BEGIN
               IsEventInsert := "Parent Event Step ID" = 0;

               if "Previous Workflow Step ID" = 0 then
                 CreateWorkflowStep(WorkflowStep,"Workflow Code","Parent Event Step ID")
               else
                 CreateWorkflowStep(WorkflowStep,"Workflow Code","Previous Workflow Step ID");

               if IsEventInsert then begin
                 WorkflowStep.VALIDATE(Type,WorkflowStep.Type::"Event");
                 WorkflowStep.VALIDATE("Entry Point","Entry Point");
                 WorkflowStep.VALIDATE("Sequence No.","Sequence No.");
                 WorkflowStep.MODIFY(true);
                 UpdateCondition(WorkflowStep);
                 UpdateSequenceNo;
                 "Event Step ID" := WorkflowStep.ID;
               end else begin
                 if "Previous Workflow Step ID" = 0 then
                   "Previous Workflow Step ID" := "Parent Event Step ID";
                 ChangeChildsPreviousToMe("Workflow Code","Previous Workflow Step ID",WorkflowStep.ID);
                 WorkflowStep.VALIDATE(Type,WorkflowStep.Type::Response);
                 WorkflowStep.MODIFY(true);
                 "Response Step ID" := WorkflowStep.ID;
               end;
             END;

    OnModify=VAR
               WorkflowStep@1000 : Record "Workflow Step";
             BEGIN
               if not WorkflowStep.GET("Workflow Code","Event Step ID") then
                 exit;

               WorkflowStep.VALIDATE("Previous Workflow Step ID","Previous Workflow Step ID");
               WorkflowStep.VALIDATE("Sequence No.","Sequence No.");
               WorkflowStep.MODIFY(true);
             END;

    OnDelete=VAR
               WorkflowStep@1000 : Record "Workflow Step";
               TempWorkflowStepBuffer@1001 : TEMPORARY Record "Workflow Step Buffer";
             BEGIN
               if "Response Step ID" > 0 then begin
                 WorkflowStep.GET("Workflow Code","Response Step ID");
                 WorkflowStep.DELETE(true);
               end;

               if "Response Step ID" = MultipleResponseID then begin
                 TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
                 TempWorkflowStepBuffer.DELETEALL(true);
               end;

               if "Event Step ID" > 0 then begin
                 WorkflowStep.GET("Workflow Code","Event Step ID");
                 WorkflowStep.DELETE(true);
               end;
             END;

    CaptionML=ENU=Workflow Step Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Order               ;Integer       ;CaptionML=ENU=Order }
    { 2   ;   ;Indent              ;Integer       ;CaptionML=ENU=Indent }
    { 3   ;   ;Event Description   ;Text250       ;TableRelation="Workflow Event".Description;
                                                   OnValidate=VAR
                                                                WorkflowEvent@1000 : Record "Workflow Event";
                                                                WorkflowStep@1001 : Record "Workflow Step";
                                                              BEGIN
                                                                WorkflowEvent.SETRANGE(Description,"Event Description");
                                                                if not WorkflowEvent.FINDFIRST then begin
                                                                  WorkflowEvent.SETFILTER(Description,'%1','@*' + "Event Description" + '*');
                                                                  if not LookupEvents(WorkflowEvent.GETVIEW,WorkflowEvent) then
                                                                    ERROR(EventNotExistErr,"Event Description");
                                                                end;

                                                                WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
                                                                WorkflowStep.SETRANGE(ID,"Event Step ID");
                                                                if not WorkflowStep.FINDFIRST then begin
                                                                  INSERT(true);
                                                                  WorkflowStep.SETRANGE(ID,"Event Step ID");
                                                                  WorkflowStep.FINDFIRST;
                                                                end;

                                                                WorkflowStep.VALIDATE("Function Name",WorkflowEvent."Function Name");
                                                                WorkflowStep.MODIFY(true);

                                                                UpdateCondition(WorkflowStep);
                                                                UpdateThen;
                                                              END;

                                                   OnLookup=VAR
                                                              WorkflowEvent@1000 : Record "Workflow Event";
                                                            BEGIN
                                                              LookupEvents('',WorkflowEvent);
                                                            END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Event Description }
    { 4   ;   ;Condition           ;Text100       ;CaptionML=ENU=Condition }
    { 5   ;   ;Response Description;Text250       ;TableRelation="Workflow Response".Description;
                                                   OnValidate=VAR
                                                                WorkflowResponse@1001 : Record "Workflow Response";
                                                                WorkflowStep@1000 : Record "Workflow Step";
                                                              BEGIN
                                                                if "Response Description" = '' then begin
                                                                  DELETE(true);
                                                                  exit;
                                                                end;

                                                                WorkflowResponse.SETRANGE(Description,"Response Description");
                                                                if not WorkflowResponse.FINDFIRST then begin
                                                                  WorkflowResponse.SETFILTER(Description,'%1','@*' + "Response Description" + '*');
                                                                  if not ResponseDescriptionLookup(WorkflowResponse.GETVIEW,WorkflowResponse) then
                                                                    ERROR(ResponseNotExistErr,"Response Description");
                                                                end;

                                                                WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
                                                                WorkflowStep.SETRANGE(ID,"Response Step ID");
                                                                if not WorkflowStep.FINDFIRST then begin
                                                                  INSERT(true);
                                                                  WorkflowStep.SETRANGE(ID,"Response Step ID");
                                                                  WorkflowStep.FINDFIRST;
                                                                end;

                                                                WorkflowStep.VALIDATE("Function Name",WorkflowResponse."Function Name");
                                                                WorkflowStep.MODIFY(true);
                                                                UpdateRecFromWorkflowStep;
                                                                MODIFY(true);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Response Description }
    { 7   ;   ;Event Step ID       ;Integer       ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"),
                                                                                           Type=CONST(Event));
                                                   CaptionML=ENU=Event Step ID }
    { 8   ;   ;Response Step ID    ;Integer       ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"),
                                                                                           Type=CONST(Response));
                                                   CaptionML=ENU=Response Step ID }
    { 9   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow.Code;
                                                   CaptionML=ENU=Workflow Code }
    { 10  ;   ;Parent Event Step ID;Integer       ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"),
                                                                                           Type=CONST(Event));
                                                   CaptionML=ENU=Parent Event Step ID }
    { 11  ;   ;Previous Workflow Step ID;Integer  ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"));
                                                   CaptionML=ENU=Previous Workflow Step ID }
    { 12  ;   ;Response Description Style;Text30  ;CaptionML=ENU=Response Description Style }
    { 14  ;   ;Entry Point         ;Boolean       ;OnValidate=VAR
                                                                WorkflowStep@1000 : Record "Workflow Step";
                                                              BEGIN
                                                                if not WorkflowStep.GET("Workflow Code","Event Step ID") then
                                                                  ERROR(WhenMissingErr);

                                                                WorkflowStep.VALIDATE("Entry Point","Entry Point");
                                                                WorkflowStep.MODIFY(true);
                                                              END;

                                                   CaptionML=ENU=Entry Point }
    { 15  ;   ;Sequence No.        ;Integer       ;CaptionML=ENU=Sequence No. }
    { 16  ;   ;Next Step Description;Text250      ;CaptionML=ENU=Next Step Description }
    { 17  ;   ;Argument            ;GUID          ;CaptionML=ENU=Argument }
    { 18  ;   ;Template            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Workflow.Template WHERE (Code=FIELD("Workflow Code")));
                                                   CaptionML=ENU=Template }
  }
  KEYS
  {
    {    ;Order                                   ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ThenTextForMultipleResponsesTxt@1002 : TextConst 'ENU=(+) %1';
      SelectResponseTxt@1000 : TextConst 'ENU=<Select Response>';
      EventNotExistErr@1001 : TextConst '@@@="%1 = event description (e.g. The workflow event A general journal batch is does not exist.)";ENU=The workflow event %1 does not exist.';
      WhenMissingErr@1003 : TextConst 'ENU=You must select a When statement first.';
      ResponseNotExistErr@1005 : TextConst '@@@="%1 = response description (e.g. The workflow response Remove record does not exist.)";ENU=The workflow response %1 does not exist.';
      WhenNextStepDescTxt@1006 : TextConst 'ENU=Next when "%1"';
      ThenNextStepDescTxt@1007 : TextConst 'ENU=Next then "%1"';

    [Internal]
    PROCEDURE OpenEventConditions@7();
    VAR
      Workflow@1000 : Record Workflow;
      WorkflowStep@1002 : Record "Workflow Step";
      WorkflowEvent@1003 : Record "Workflow Event";
    BEGIN
      Workflow.GET("Workflow Code");
      WorkflowStep.GET(Workflow.Code,"Event Step ID");
      WorkflowEvent.GET(WorkflowStep."Function Name");

      if WorkflowEvent."Used for Record Change" then
        WorkflowStep.OpenAdvancedEventConditions
      else
        WorkflowStep.OpenEventConditions;

      UpdateCondition(WorkflowStep);
    END;

    [Internal]
    PROCEDURE DeleteEventConditions@24();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      WorkflowStep.GET("Workflow Code","Event Step ID");
      WorkflowStep.DeleteEventConditions;
      UpdateCondition(WorkflowStep);
    END;

    [External]
    PROCEDURE OpenEventResponses@12();
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer";
    BEGIN
      TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
      if PAGE.RUNMODAL(PAGE::"Workflow Step Responses",TempWorkflowStepBuffer) = ACTION::LookupOK then;
      UpdateThen;
    END;

    [Internal]
    PROCEDURE PopulateTable@1(WorkflowCode@1000 : Code[20]);
    VAR
      OrderVar@1001 : Integer;
    BEGIN
      OrderVar := 10000;
      CreateTree(WorkflowCode,OrderVar,0,0,false);
      if FINDSET then;
    END;

    LOCAL PROCEDURE CreateTree@2(WorkflowCode@1003 : Code[20];VAR OrderVar@1004 : Integer;NodeId@1000 : Integer;CurrIndent@1002 : Integer;ForLookup@1005 : Boolean);
    VAR
      WorkflowStep@1001 : Record "Workflow Step";
    BEGIN
      if NodeId <> 0 then
        CreateNode(WorkflowCode,OrderVar,NodeId,CurrIndent,ForLookup);

      WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",NodeId);
      WorkflowStep.SETCURRENTKEY("Sequence No.");

      if not WorkflowStep.FINDSET then
        exit;

      repeat
        CreateTree(WorkflowCode,OrderVar,WorkflowStep.ID,CurrIndent,ForLookup);
      until WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNode@3(WorkflowCode@1009 : Code[20];VAR OrderVar@1010 : Integer;VAR NodeID@1000 : Integer;VAR CurrIndent@1003 : Integer;ForLookup@1001 : Boolean);
    VAR
      WorkflowStep@1007 : Record "Workflow Step";
    BEGIN
      WorkflowStep.GET(WorkflowCode,NodeID);
      CreateWhen(WorkflowCode,OrderVar,CurrIndent,WorkflowStep);
      if ForLookup then
        NodeID := CreateResponseTree(WorkflowCode,OrderVar,NodeID)
      else
        NodeID := UpdateThen;
    END;

    LOCAL PROCEDURE UpdateThen@8() : Integer;
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer";
      LastThen@1001 : Text[250];
    BEGIN
      TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
      if TempWorkflowStepBuffer.FINDFIRST then;
      case TempWorkflowStepBuffer.COUNT of
        0:
          begin
            "Response Description" := SelectResponseTxt;
            "Response Step ID" := 0;
          end;
        1:
          begin
            "Response Description" := TempWorkflowStepBuffer."Response Description";
            "Response Step ID" := TempWorkflowStepBuffer."Response Step ID";
          end;
        else begin
          LastThen := COPYSTR(TempWorkflowStepBuffer."Response Description",1,
              MAXSTRLEN(TempWorkflowStepBuffer."Response Description") - STRLEN(ThenTextForMultipleResponsesTxt));
          "Response Description" := STRSUBSTNO(ThenTextForMultipleResponsesTxt,LastThen);
          "Response Step ID" := MultipleResponseID;
        end;
      end;

      UpdateResponseDescriptionStyle;

      MODIFY;

      if TempWorkflowStepBuffer.FINDLAST then
        exit(TempWorkflowStepBuffer."Response Step ID");

      exit("Event Step ID")
    END;

    [External]
    PROCEDURE PopulateTableFromEvent@6(WorkflowCode@1000 : Code[20];WorkflowEventID@1001 : Integer);
    VAR
      OrderVar@1002 : Integer;
    BEGIN
      SETRANGE("Workflow Code",WorkflowCode);
      SETRANGE("Parent Event Step ID",WorkflowEventID);
      OrderVar := 10000;
      CreateResponseTree(WorkflowCode,OrderVar,WorkflowEventID);
      if FINDSET then;
    END;

    LOCAL PROCEDURE CreateResponseTree@5(WorkflowCode@1003 : Code[20];VAR OrderVar@1004 : Integer;NodeId@1000 : Integer) : Integer;
    VAR
      WorkflowStep@1001 : Record "Workflow Step";
      ParentEventStepID@1002 : Integer;
    BEGIN
      ParentEventStepID := NodeId;

      repeat
        WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
        WorkflowStep.SETRANGE("Previous Workflow Step ID",NodeId);

        if not WorkflowStep.FINDFIRST then
          exit(NodeId);

        if WorkflowStep.Type <> WorkflowStep.Type::Response then
          exit(NodeId);

        CreateResponseNode(WorkflowCode,OrderVar,WorkflowStep,ParentEventStepID);

        NodeId := WorkflowStep.ID;
      until false;
    END;

    LOCAL PROCEDURE CreateResponseNode@4(WorkflowCode@1002 : Code[20];VAR OrderVar@1003 : Integer;WorkflowStep@1000 : Record "Workflow Step";ParentEventStepID@1001 : Integer);
    BEGIN
      INIT;
      "Workflow Code" := WorkflowCode;
      Order := OrderVar;
      OrderVar += 10000;
      "Parent Event Step ID" := ParentEventStepID;
      "Response Step ID" := WorkflowStep.ID;
      UpdateRecFromWorkflowStep;
      UpdateNextStepDescription;
      INSERT;
    END;

    [External]
    PROCEDURE ClearBuffer@9();
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer";
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,true);
      TempWorkflowStepBuffer.RESET;
      TempWorkflowStepBuffer.DELETEALL;
    END;

    [Internal]
    PROCEDURE PopulateLookupTable@29(WorkflowCode@1000 : Code[20]);
    VAR
      OrderVar@1001 : Integer;
    BEGIN
      OrderVar := 10000;
      CreateTree(WorkflowCode,OrderVar,0,0,true);
      if FINDSET then;
    END;

    LOCAL PROCEDURE CreateWorkflowStep@13(VAR WorkflowStep@1000 : Record "Workflow Step";WorkflowCode@1001 : Code[20];PreviousStepID@1002 : Integer);
    BEGIN
      WorkflowStep.INIT;
      WorkflowStep.VALIDATE("Workflow Code",WorkflowCode);
      WorkflowStep.INSERT(true);

      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(true);
    END;

    LOCAL PROCEDURE ChangeChildsPreviousToMe@17(WorkflowCode@1000 : Code[20];CurrentPreviousID@1001 : Integer;NewPreviousID@1002 : Integer);
    VAR
      ChildWorkflowStep@1003 : Record "Workflow Step";
    BEGIN
      if CurrentPreviousID <> 0 then begin
        ChildWorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
        ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",CurrentPreviousID);
        ChildWorkflowStep.SETFILTER(ID,STRSUBSTNO('<>%1',NewPreviousID));
        if ChildWorkflowStep.FINDSET(true) then
          repeat
            ChildWorkflowStep.VALIDATE("Previous Workflow Step ID",NewPreviousID);
            ChildWorkflowStep.MODIFY(true);
          until ChildWorkflowStep.NEXT <> 1;
      end;
    END;

    LOCAL PROCEDURE MultipleResponseID@10() : Integer;
    BEGIN
      exit(-1);
    END;

    [External]
    PROCEDURE UpdateResponseDescriptionStyle@15();
    BEGIN
      if "Response Step ID" = MultipleResponseID then
        "Response Description Style" := 'StandardAccent'
      else
        "Response Description Style" := 'Standard';
    END;

    LOCAL PROCEDURE CreateWhen@20(WorkflowCode@1003 : Code[20];VAR OrderVar@1002 : Integer;VAR CurrIndent@1000 : Integer;WorkflowStep@1004 : Record "Workflow Step");
    VAR
      WorkflowEvent@1005 : Record "Workflow Event";
    BEGIN
      INIT;
      "Workflow Code" := WorkflowCode;
      Order := OrderVar;
      OrderVar += 10000;
      "Event Step ID" := WorkflowStep.ID;
      if WorkflowEvent.GET(WorkflowStep."Function Name") then
        "Event Description" := WorkflowEvent.Description;
      "Previous Workflow Step ID" := WorkflowStep."Previous Workflow Step ID";
      UpdateCondition(WorkflowStep);
      "Entry Point" := WorkflowStep."Entry Point";
      "Sequence No." := WorkflowStep."Sequence No.";
      Indent := CurrIndent;
      CurrIndent += 1;
      INSERT;
    END;

    [External]
    PROCEDURE CalculateNewKey@11(BelowxRec@1000 : Boolean);
    VAR
      TempWorkflowStepBuffer@1001 : TEMPORARY Record "Workflow Step Buffer";
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,true);
      if BelowxRec then begin
        if TempWorkflowStepBuffer.FINDLAST then;
        Order := TempWorkflowStepBuffer.Order + 10000;
      end else begin
        TempWorkflowStepBuffer.SETFILTER(Order,'<%1',xRec.Order);
        if TempWorkflowStepBuffer.FINDLAST then;
        Order := ROUND((xRec.Order - TempWorkflowStepBuffer.Order) / 2,1) + TempWorkflowStepBuffer.Order;
      end;
    END;

    [External]
    PROCEDURE CreateNewWhenThenLine@14(WorkflowCode@1001 : Code[20];BelowxRec@1000 : Boolean);
    BEGIN
      if xRec.FIND then begin
        "Previous Workflow Step ID" := xRec."Previous Workflow Step ID";
        Indent := xRec.Indent;
        "Sequence No." := xRec."Sequence No.";
      end;

      "Workflow Code" := WorkflowCode;

      CalculateNewKey(BelowxRec);
    END;

    LOCAL PROCEDURE UpdateCondition@18(WorkflowStep@1000 : Record "Workflow Step");
    VAR
      WorkflowMgt@1002 : Codeunit "Workflow Management";
    BEGIN
      WorkflowStep.FIND;
      Condition := WorkflowMgt.BuildConditionDisplay(WorkflowStep);
    END;

    [External]
    PROCEDURE SetxRec@16(TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer");
    BEGIN
      xRec := TempWorkflowStepBuffer;
    END;

    LOCAL PROCEDURE UpdateSequenceNo@19();
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record "Workflow Step Buffer";
      WorkflowStep@1001 : Record "Workflow Step";
      i@1000 : Integer;
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,true);
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID","Previous Workflow Step ID");
      TempWorkflowStepBuffer.SETFILTER("Sequence No.",'>=%1',"Sequence No.");

      if not TempWorkflowStepBuffer.FINDSET then
        exit;

      i := "Sequence No.";
      repeat
        i += 1;
        WorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID");
        WorkflowStep.VALIDATE("Sequence No.",i);
        WorkflowStep.MODIFY(true);
      until TempWorkflowStepBuffer.NEXT = 0;
    END;

    [External]
    PROCEDURE MoveLeft@22();
    VAR
      TempSiblingWorkflowStepBuffer@1001 : TEMPORARY Record "Workflow Step Buffer";
      ParentEventWorkflowStep@1005 : Record "Workflow Step";
      CurrentWorkflowStep@1006 : Record "Workflow Step";
      NewParentWorkflowStep@1008 : Record "Workflow Step";
      ChildEventWorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      CurrentWorkflowStep.GET("Workflow Code","Event Step ID");
      if CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep) then
        exit;

      if not FindParentEvent(CurrentWorkflowStep,ParentEventWorkflowStep) then
        exit;

      FindSiblingEvents(TempSiblingWorkflowStepBuffer);
      TempSiblingWorkflowStepBuffer.SETFILTER(Order,'>%1',Order);
      if FindLastResponseDescendant(CurrentWorkflowStep,NewParentWorkflowStep) then
        TempSiblingWorkflowStepBuffer.MODIFYALL("Previous Workflow Step ID",NewParentWorkflowStep.ID,true)
      else
        TempSiblingWorkflowStepBuffer.MODIFYALL("Previous Workflow Step ID",CurrentWorkflowStep.ID,true);

      CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",ParentEventWorkflowStep."Previous Workflow Step ID");
      CurrentWorkflowStep.MODIFY(true);

      "Previous Workflow Step ID" := CurrentWorkflowStep."Previous Workflow Step ID";
      Indent -= 1;
      MODIFY;

      UpdateSequenceNo;
    END;

    [External]
    PROCEDURE MoveRight@23();
    VAR
      TempSiblingWorkflowStepBuffer@1001 : TEMPORARY Record "Workflow Step Buffer";
      ParentEventWorkflowStep@1007 : Record "Workflow Step";
      NewParentWorkflowStep@1006 : Record "Workflow Step";
      CurrentWorkflowStep@1005 : Record "Workflow Step";
    BEGIN
      CurrentWorkflowStep.GET("Workflow Code","Event Step ID");

      if UpdateSubtree(CurrentWorkflowStep) then
        exit;

      FindSiblingEvents(TempSiblingWorkflowStepBuffer);
      TempSiblingWorkflowStepBuffer.SETFILTER(Order,'<%1',Order);
      if not TempSiblingWorkflowStepBuffer.FINDLAST then
        exit;

      ParentEventWorkflowStep.GET(TempSiblingWorkflowStepBuffer."Workflow Code",TempSiblingWorkflowStepBuffer."Event Step ID");
      if FindLastResponseDescendant(ParentEventWorkflowStep,NewParentWorkflowStep) then
        CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentWorkflowStep.ID)
      else
        CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",ParentEventWorkflowStep.ID);
      CurrentWorkflowStep.MODIFY(true);

      "Previous Workflow Step ID" := CurrentWorkflowStep."Previous Workflow Step ID";
      Indent := TempSiblingWorkflowStepBuffer.Indent + 1;
      MODIFY;

      UpdateSequenceNo;
    END;

    LOCAL PROCEDURE UpdateSubtree@36(VAR CurrentWorkflowStep@1000 : Record "Workflow Step") : Boolean;
    VAR
      ChildEventWorkflowStep@1001 : Record "Workflow Step";
      ParentEventWorkflowStep@1004 : Record "Workflow Step";
      NewParentWorkflowStep@1003 : Record "Workflow Step";
      NewParentStepID@1002 : Integer;
    BEGIN
      if not CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep) then
        exit(false);

      if FindParentEvent(CurrentWorkflowStep,ParentEventWorkflowStep) then
        exit(false);

      if not FindPreviousRootEvent(Rec,ParentEventWorkflowStep) then
        exit(false);

      if FindLastResponseDescendant(ParentEventWorkflowStep,NewParentWorkflowStep) then
        NewParentStepID := NewParentWorkflowStep.ID
      else
        NewParentStepID := ParentEventWorkflowStep.ID;

      repeat
        ChildEventWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentStepID);
        ChildEventWorkflowStep.MODIFY(true);
      until not CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep);

      Indent += 1;
      MODIFY;

      CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentStepID);
      CurrentWorkflowStep.MODIFY(true);

      exit(true);
    END;

    LOCAL PROCEDURE FindLastResponseDescendant@25(ParentWorkflowStep@1000 : Record "Workflow Step";VAR WorkflowStep@1001 : Record "Workflow Step") : Boolean;
    VAR
      ChildWorkflowStep@1003 : Record "Workflow Step";
    BEGIN
      WorkflowStep.SETCURRENTKEY("Sequence No.");
      WorkflowStep.SETRANGE("Workflow Code",ParentWorkflowStep."Workflow Code");
      WorkflowStep.SETRANGE("Previous Workflow Step ID",ParentWorkflowStep.ID);
      WorkflowStep.SETRANGE(Type,ParentWorkflowStep.Type::Response);
      if WorkflowStep.FINDLAST then begin
        ChildWorkflowStep.INIT;
        if FindLastResponseDescendant(WorkflowStep,ChildWorkflowStep) then
          WorkflowStep := ChildWorkflowStep;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE FindParentEvent@30(WorkflowStep@1000 : Record "Workflow Step";VAR ParentEventWorkflowStep@1001 : Record "Workflow Step") : Boolean;
    VAR
      PreviousWorkflowStep@1002 : Record "Workflow Step";
    BEGIN
      if not PreviousWorkflowStep.GET(WorkflowStep."Workflow Code",WorkflowStep."Previous Workflow Step ID") then
        exit(false);

      case PreviousWorkflowStep.Type of
        PreviousWorkflowStep.Type::"Event":
          begin
            ParentEventWorkflowStep := PreviousWorkflowStep;
            exit(true);
          end;
        PreviousWorkflowStep.Type::Response:
          exit(FindParentEvent(PreviousWorkflowStep,ParentEventWorkflowStep));
      end;
    END;

    LOCAL PROCEDURE FindSiblingEvents@31(VAR TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer");
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,true);
      CLEAR(TempWorkflowStepBuffer);
      TempWorkflowStepBuffer.SETCURRENTKEY("Sequence No.");
      TempWorkflowStepBuffer.SETRANGE("Workflow Code","Workflow Code");
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID","Previous Workflow Step ID");
      TempWorkflowStepBuffer.SETRANGE(Indent,Indent);
    END;

    LOCAL PROCEDURE FindPreviousRootEvent@32(WorkflowStepBuffer@1000 : Record "Workflow Step Buffer";VAR RootWorkflowStep@1001 : Record "Workflow Step") : Boolean;
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record "Workflow Step Buffer";
    BEGIN
      FindSiblingEvents(TempWorkflowStepBuffer);
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID",0);
      TempWorkflowStepBuffer.SETFILTER(Order,'<%1',WorkflowStepBuffer.Order);
      if TempWorkflowStepBuffer.FINDLAST then
        exit(RootWorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID"));
    END;

    [External]
    PROCEDURE UpdateNextStepDescription@27();
    VAR
      NextStepWorkflowStep@1000 : Record "Workflow Step";
      WorkflowStep@1001 : Record "Workflow Step";
    BEGIN
      GetWorkflowStep(WorkflowStep);

      if NextStepWorkflowStep.GET(WorkflowStep."Workflow Code",WorkflowStep."Next Workflow Step ID") then
        case NextStepWorkflowStep.Type of
          NextStepWorkflowStep.Type::"Event":
            "Next Step Description" := STRSUBSTNO(WhenNextStepDescTxt,NextStepWorkflowStep.GetDescription);
          NextStepWorkflowStep.Type::Response:
            "Next Step Description" := STRSUBSTNO(ThenNextStepDescTxt,NextStepWorkflowStep.GetDescription);
        end
      else
        "Next Step Description" := '';
    END;

    [External]
    PROCEDURE GetWorkflowStep@28(VAR WorkflowStep@1000 : Record "Workflow Step") : Boolean;
    BEGIN
      exit(WorkflowStep.GET("Workflow Code","Event Step ID" + "Response Step ID"));
    END;

    [Internal]
    PROCEDURE NextStepLookup@26() : Boolean;
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      if GetWorkflowStep(WorkflowStep) then
        if WorkflowStep.LookupOtherWorkflowStepID(WorkflowStep."Next Workflow Step ID") then begin
          WorkflowStep.VALIDATE("Next Workflow Step ID");
          WorkflowStep.MODIFY(true);
          UpdateNextStepDescription;
          exit(true);
        end;

      exit(false);
    END;

    [External]
    PROCEDURE ResponseDescriptionLookup@21(ResponseFilter@1002 : Text;VAR WorkflowResponse@1003 : Record "Workflow Response") : Boolean;
    VAR
      WorkflowStep@1001 : Record "Workflow Step";
      TempWorkflowResponse@1000 : TEMPORARY Record "Workflow Response";
    BEGIN
      WorkflowStep.GET("Workflow Code","Parent Event Step ID");
      FindSupportedResponses(WorkflowStep."Function Name",TempWorkflowResponse);
      FindIndependentResponses(TempWorkflowResponse);

      TempWorkflowResponse.SETVIEW(ResponseFilter);
      if PAGE.RUNMODAL(PAGE::"Workflow Responses",TempWorkflowResponse) = ACTION::LookupOK then begin
        if not WorkflowStep.GET("Workflow Code","Response Step ID") then begin
          INSERT(true);
          WorkflowStep.GET("Workflow Code","Response Step ID");
        end;

        WorkflowStep.VALIDATE("Function Name",TempWorkflowResponse."Function Name");
        WorkflowStep.MODIFY(true);

        "Response Description" := TempWorkflowResponse.Description;
        WorkflowResponse.GET(TempWorkflowResponse."Function Name");

        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE UpdateRecFromWorkflowStep@33();
    VAR
      WorkflowStep@1000 : Record "Workflow Step";
    BEGIN
      if not GetWorkflowStep(WorkflowStep) then
        exit;

      "Response Description" := WorkflowStep.GetDescription;
      "Previous Workflow Step ID" := WorkflowStep."Previous Workflow Step ID";
      Argument := WorkflowStep.Argument;
    END;

    LOCAL PROCEDURE LookupEvents@39(EventFilter@1001 : Text;VAR WorkflowEvent@1004 : Record "Workflow Event") : Boolean;
    VAR
      WorkflowStep@1002 : Record "Workflow Step";
      ParentEventWorkflowStep@1005 : Record "Workflow Step";
      TempWorkflowStepBuffer@1000 : TEMPORARY Record "Workflow Step Buffer";
      TempWorkflowEvent@1003 : TEMPORARY Record "Workflow Event";
    BEGIN
      if WorkflowStep.GET("Workflow Code","Event Step ID") then
        FindParentEvent(WorkflowStep,ParentEventWorkflowStep)
      else begin
        TempWorkflowStepBuffer.COPY(Rec,true);
        TempWorkflowStepBuffer.SETRANGE("Workflow Code","Workflow Code");
        TempWorkflowStepBuffer.SETFILTER(Order,'<%1',Order);
        if Indent > 0 then
          TempWorkflowStepBuffer.SETFILTER(Indent,'<%1',Indent);
        if TempWorkflowStepBuffer.FINDLAST then
          ParentEventWorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID");
      end;

      FindSupportedEvents(ParentEventWorkflowStep."Function Name",TempWorkflowEvent);

      FindIndependentEvents(TempWorkflowEvent);

      TempWorkflowEvent.SETVIEW(EventFilter);
      if PAGE.RUNMODAL(0,TempWorkflowEvent) = ACTION::LookupOK then begin
        VALIDATE("Event Description",TempWorkflowEvent.Description);
        WorkflowEvent.GET(TempWorkflowEvent."Function Name");
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE FindSupportedEvents@35(PredecessorFunctionName@1000 : Code[128];VAR TempWorkflowEvent@1002 : TEMPORARY Record "Workflow Event");
    VAR
      WFEventResponseCombination@1001 : Record "WF Event/Response Combination";
      WorkflowEvent@1003 : Record "Workflow Event";
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Type",WFEventResponseCombination."Predecessor Type"::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Function Name",PredecessorFunctionName);
      if WFEventResponseCombination.FINDSET then
        repeat
          if WorkflowEvent.GET(WFEventResponseCombination."Function Name") then begin
            TempWorkflowEvent := WorkflowEvent;
            TempWorkflowEvent.Independent := false;
            if TempWorkflowEvent.INSERT then;
          end;
        until WFEventResponseCombination.NEXT = 0;
    END;

    LOCAL PROCEDURE FindSupportedResponses@34(PredecessorFunctionName@1000 : Code[128];VAR TempWorkflowResponse@1002 : TEMPORARY Record "Workflow Response");
    VAR
      WFEventResponseCombination@1001 : Record "WF Event/Response Combination";
      WorkflowResponse@1003 : Record "Workflow Response";
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::Response);
      WFEventResponseCombination.SETRANGE("Predecessor Type",WFEventResponseCombination."Predecessor Type"::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Function Name",PredecessorFunctionName);
      if WFEventResponseCombination.FINDSET then
        repeat
          if WorkflowResponse.GET(WFEventResponseCombination."Function Name") then begin
            TempWorkflowResponse := WorkflowResponse;
            TempWorkflowResponse.Independent := false;
            if TempWorkflowResponse.INSERT then;
          end;
        until WFEventResponseCombination.NEXT = 0;
    END;

    LOCAL PROCEDURE FindIndependentEvents@41(VAR TempWorkflowEvent@1000 : TEMPORARY Record "Workflow Event");
    VAR
      WorkflowEvent@1001 : Record "Workflow Event";
    BEGIN
      if WorkflowEvent.FINDSET then
        repeat
          if not WorkflowEvent.HasPredecessors then begin
            TempWorkflowEvent := WorkflowEvent;
            TempWorkflowEvent.Independent := true;
            if TempWorkflowEvent.INSERT then;
          end;
        until WorkflowEvent.NEXT = 0;
    END;

    LOCAL PROCEDURE FindIndependentResponses@38(VAR TempWorkflowResponse@1000 : TEMPORARY Record "Workflow Response");
    VAR
      WorkflowResponse@1001 : Record "Workflow Response";
    BEGIN
      if WorkflowResponse.FINDSET then
        repeat
          if not WorkflowResponse.HasPredecessors then begin
            TempWorkflowResponse := WorkflowResponse;
            TempWorkflowResponse.Independent := true;
            if TempWorkflowResponse.INSERT then;
          end;
        until WorkflowResponse.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

