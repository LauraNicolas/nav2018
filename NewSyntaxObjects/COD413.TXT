OBJECT Codeunit 413 AnalysisViewEntryToGLEntries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AnalysisView@1000 : Record "Analysis View";
      GLSetup@1001 : Record "General Ledger Setup";
      DimSetEntry@1002 : Record "Dimension Set Entry";

    [External]
    PROCEDURE GetGLEntries@1(VAR AnalysisViewEntry@1000 : Record "Analysis View Entry";VAR TempGLEntry@1001 : Record "G/L Entry");
    VAR
      GLEntry@1002 : Record "G/L Entry";
      AnalysisViewFilter@1004 : Record "Analysis View Filter";
      UpdateAnalysisView@1014 : Codeunit "Update Analysis View";
      StartDate@1007 : Date;
      EndDate@1008 : Date;
      GlobalDimValue@1009 : Code[20];
    BEGIN
      AnalysisView.GET(AnalysisViewEntry."Analysis View Code");

      if AnalysisView."Date Compression" = AnalysisView."Date Compression"::None then begin
        if GLEntry.GET(AnalysisViewEntry."Entry No.") then begin
          TempGLEntry := GLEntry;
          TempGLEntry.INSERT;
        end;
        exit;
      end;

      GLSetup.GET;

      StartDate := AnalysisViewEntry."Posting Date";
      EndDate := StartDate;

      with AnalysisView do
        if StartDate < "Starting Date" then
          StartDate := 0D
        else
          if (AnalysisViewEntry."Posting Date" = NORMALDATE(AnalysisViewEntry."Posting Date")) and
             not ("Date Compression" in ["Date Compression"::None,"Date Compression"::Day])
          then
            EndDate := CalculateEndDate("Date Compression",AnalysisViewEntry);

      with GLEntry do begin
        SETCURRENTKEY("G/L Account No.","Posting Date");
        SETRANGE("G/L Account No.",AnalysisViewEntry."Account No.");
        SETRANGE("Posting Date",StartDate,EndDate);
        SETRANGE("Entry No.",0,AnalysisView."Last Entry No.");

        if GetGlobalDimValue(GLSetup."Global Dimension 1 Code",AnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 1 Code",GlobalDimValue)
        else
          if AnalysisViewFilter.GET(AnalysisViewEntry."Analysis View Code",GLSetup."Global Dimension 1 Code")
          then
            SETFILTER("Global Dimension 1 Code",AnalysisViewFilter."Dimension Value Filter");

        if GetGlobalDimValue(GLSetup."Global Dimension 2 Code",AnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 2 Code",GlobalDimValue)
        else
          if AnalysisViewFilter.GET(AnalysisViewEntry."Analysis View Code",GLSetup."Global Dimension 2 Code")
          then
            SETFILTER("Global Dimension 2 Code",AnalysisViewFilter."Dimension Value Filter");

        if FIND('-') then
          repeat
            if DimEntryOK("Dimension Set ID",AnalysisView."Dimension 1 Code",AnalysisViewEntry."Dimension 1 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 2 Code",AnalysisViewEntry."Dimension 2 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 3 Code",AnalysisViewEntry."Dimension 3 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 4 Code",AnalysisViewEntry."Dimension 4 Value Code") and
               UpdateAnalysisView.DimSetIDInFilter("Dimension Set ID",AnalysisView)
            then begin
              TempGLEntry := GLEntry;
              if TempGLEntry.INSERT then;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetCFLedgEntries@3(VAR AnalysisViewEntry@1000 : Record "Analysis View Entry";VAR CFForecastEntry@1001 : Record "Cash Flow Forecast Entry");
    VAR
      CFForecastEntry2@1002 : Record "Cash Flow Forecast Entry";
      AnalysisViewFilter@1004 : Record "Analysis View Filter";
      UpdateAnalysisView@1014 : Codeunit "Update Analysis View";
      StartDate@1007 : Date;
      EndDate@1008 : Date;
      GlobalDimValue@1009 : Code[20];
    BEGIN
      AnalysisView.GET(AnalysisViewEntry."Analysis View Code");

      if AnalysisView."Date Compression" = AnalysisView."Date Compression"::None then begin
        if CFForecastEntry2.GET(AnalysisViewEntry."Entry No.") then begin
          CFForecastEntry := CFForecastEntry2;
          CFForecastEntry.INSERT;
        end;
        exit;
      end;

      GLSetup.GET;

      StartDate := AnalysisViewEntry."Posting Date";
      EndDate := StartDate;

      with AnalysisView do
        if StartDate < "Starting Date" then
          StartDate := 0D
        else
          if (AnalysisViewEntry."Posting Date" = NORMALDATE(AnalysisViewEntry."Posting Date")) and
             not ("Date Compression" in ["Date Compression"::None,"Date Compression"::Day])
          then
            EndDate := CalculateEndDate("Date Compression",AnalysisViewEntry);

      with CFForecastEntry2 do begin
        SETCURRENTKEY("Cash Flow Forecast No.","Cash Flow Account No.","Source Type","Cash Flow Date");
        SETRANGE("Cash Flow Forecast No.",AnalysisViewEntry."Cash Flow Forecast No.");
        SETRANGE("Cash Flow Account No.",AnalysisViewEntry."Account No.");
        SETRANGE("Cash Flow Date",StartDate,EndDate);

        if GetGlobalDimValue(GLSetup."Global Dimension 1 Code",AnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 1 Code",GlobalDimValue)
        else
          if AnalysisViewFilter.GET(AnalysisViewEntry."Analysis View Code",GLSetup."Global Dimension 1 Code")
          then
            SETFILTER("Global Dimension 1 Code",AnalysisViewFilter."Dimension Value Filter");

        if GetGlobalDimValue(GLSetup."Global Dimension 2 Code",AnalysisViewEntry,GlobalDimValue) then
          SETRANGE("Global Dimension 2 Code",GlobalDimValue)
        else
          if AnalysisViewFilter.GET(AnalysisViewEntry."Analysis View Code",GLSetup."Global Dimension 2 Code")
          then
            SETFILTER("Global Dimension 2 Code",AnalysisViewFilter."Dimension Value Filter");

        if FIND('-') then
          repeat
            if DimEntryOK("Dimension Set ID",AnalysisView."Dimension 1 Code",AnalysisViewEntry."Dimension 1 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 2 Code",AnalysisViewEntry."Dimension 2 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 3 Code",AnalysisViewEntry."Dimension 3 Value Code") and
               DimEntryOK("Dimension Set ID",AnalysisView."Dimension 4 Code",AnalysisViewEntry."Dimension 4 Value Code") and
               UpdateAnalysisView.DimSetIDInFilter("Dimension Set ID",AnalysisView)
            then begin
              CFForecastEntry := CFForecastEntry2;
              CFForecastEntry.INSERT;
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE DimEntryOK@10(DimSetID@1000 : Integer;Dim@1001 : Code[20];DimValue@1002 : Code[20]) : Boolean;
    BEGIN
      if Dim = '' then
        exit(true);

      if DimSetEntry.GET(DimSetID,Dim) then
        exit(DimSetEntry."Dimension Value Code" = DimValue);

      exit(DimValue = '');
    END;

    LOCAL PROCEDURE CalculateEndDate@4(DateCompression@1000 : Integer;AnalysisViewEntry@1002 : Record "Analysis View Entry") : Date;
    VAR
      AnalysisView2@1001 : Record "Analysis View";
      AccountingPeriod@1003 : Record "Accounting Period";
    BEGIN
      case DateCompression of
        AnalysisView2."Date Compression"::Week:
          exit(CALCDATE('<+6D>',AnalysisViewEntry."Posting Date"));
        AnalysisView2."Date Compression"::Month:
          exit(CALCDATE('<+1M-1D>',AnalysisViewEntry."Posting Date"));
        AnalysisView2."Date Compression"::Quarter:
          exit(CALCDATE('<+3M-1D>',AnalysisViewEntry."Posting Date"));
        AnalysisView2."Date Compression"::Year:
          exit(CALCDATE('<+1Y-1D>',AnalysisViewEntry."Posting Date"));
        AnalysisView2."Date Compression"::Period:
          begin
            AccountingPeriod."Starting Date" := AnalysisViewEntry."Posting Date";
            if AccountingPeriod.NEXT <> 0 then
              exit(CALCDATE('<-1D>',AccountingPeriod."Starting Date"));

            exit(DMY2DATE(31,12,9999));
          end;
      end;
    END;

    LOCAL PROCEDURE GetGlobalDimValue@2(GlobalDim@1000 : Code[20];VAR AnalysisViewEntry@1001 : Record "Analysis View Entry";VAR GlobalDimValue@1002 : Code[20]) : Boolean;
    VAR
      IsGlobalDim@1003 : Boolean;
    BEGIN
      case GlobalDim of
        AnalysisView."Dimension 1 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := AnalysisViewEntry."Dimension 1 Value Code";
          end;
        AnalysisView."Dimension 2 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := AnalysisViewEntry."Dimension 2 Value Code";
          end;
        AnalysisView."Dimension 3 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := AnalysisViewEntry."Dimension 3 Value Code";
          end;
        AnalysisView."Dimension 4 Code":
          begin
            IsGlobalDim := true;
            GlobalDimValue := AnalysisViewEntry."Dimension 4 Value Code";
          end;
      end;
      exit(IsGlobalDim);
    END;

    BEGIN
    END.
  }
}

