OBJECT Table 1293 Payment Application Proposal
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               UpdateSortingOrder;
             END;

    OnModify=BEGIN
               UpdateSortingOrder;
             END;

    OnDelete=BEGIN
               TESTFIELD("Applies-to Entry No.",0);
               if Applied then
                 Unapply;
             END;

    OnRename=BEGIN
               VerifyLineIsNotApplied;
             END;

    CaptionML=ENU=Payment Application Proposal;
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account No. }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                                   "Statement Type"=FIELD("Statement Type"));
                                                   CaptionML=ENU=Statement No. }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=ENU=Statement Line No. }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=ENU=Statement Type;
                                                   OptionCaptionML=ENU=Bank Reconciliation,Payment Application;
                                                   OptionString="Bank Reconciliation","Payment Application" }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                VerifyLineIsNotApplied;
                                                              END;

                                                   CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner" }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                               Blocked=CONST(false))
                                                                                                                               ELSE IF ("Account Type"=CONST(Customer)) Customer
                                                                                                                               ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                                                                               ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account"
                                                                                                                               ELSE IF ("Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                               ELSE IF ("Account Type"=CONST("IC Partner")) "IC Partner";
                                                   OnValidate=BEGIN
                                                                VerifyLineIsNotApplied;
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 23  ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Entry"
                                                                 ELSE IF ("Account Type"=CONST(Customer)) "Cust. Ledger Entry" WHERE (Open=CONST(true))
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Vendor Ledger Entry" WHERE (Open=CONST(true))
                                                                 ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account Ledger Entry" WHERE (Open=CONST(true));
                                                   CaptionML=ENU=Applies-to Entry No. }
    { 24  ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                if ("Applied Amount" = 0) and (xRec."Applied Amount" <> 0) then
                                                                  Unapply
                                                                else
                                                                  UpdateAppliedAmt;
                                                              END;

                                                   CaptionML=ENU=Applied Amount }
    { 25  ;   ;Applied             ;Boolean       ;OnValidate=VAR
                                                                BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
                                                              BEGIN
                                                                if xRec.Applied = Applied then
                                                                  exit;

                                                                if not Applied then
                                                                  Unapply;

                                                                if Applied then begin
                                                                  if "Document Type" = "Document Type"::"Credit Memo" then
                                                                    CrMemoSelectedToApply
                                                                  else begin
                                                                    BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
                                                                    if BankAccReconLine.Difference = 0 then
                                                                      ERROR(PaymentAppliedErr);
                                                                  end;

                                                                  Apply(GetRemainingAmountAfterPosting,"Applies-to Entry No." <> 0);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Applied }
    { 29  ;   ;Applied Pmt. Discount;Decimal      ;CaptionML=ENU=Applied Pmt. Discount;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Quality             ;Integer       ;CaptionML=ENU=Quality }
    { 31  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 32  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 33  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 34  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 35  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date;
                                                   Editable=false }
    { 37  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 50  ;   ;Match Confidence    ;Option        ;InitValue=None;
                                                   CaptionML=ENU=Match Confidence;
                                                   OptionCaptionML=ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   OptionString=None,Low,Medium,High,"High - Text-to-Account Mapping",Manual,Accepted;
                                                   Editable=false }
    { 51  ;   ;Pmt. Disc. Due Date ;Date          ;OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=ENU=Pmt. Disc. Due Date }
    { 52  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=ENU=Remaining Pmt. Disc. Possible }
    { 53  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=ENU=Pmt. Disc. Tolerance Date }
    { 60  ;   ;Applied Amt. Incl. Discount;Decimal;OnValidate=BEGIN
                                                                if ("Applied Amt. Incl. Discount" = 0) and Applied then
                                                                  Unapply
                                                                else
                                                                  VALIDATE("Applied Amount","Applied Amt. Incl. Discount");
                                                              END;

                                                   CaptionML=ENU=Applied Amt. Incl. Discount }
    { 61  ;   ;Remaining Amount    ;Decimal       ;CaptionML=ENU=Remaining Amount;
                                                   Editable=false }
    { 62  ;   ;Remaining Amt. Incl. Discount;Decimal;
                                                   CaptionML=ENU=Remaining Amt. Incl. Discount;
                                                   Editable=false }
    { 63  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Bank Account Ledger Entry,Check Ledger Entry;
                                                   OptionString="Bank Account Ledger Entry","Check Ledger Entry" }
    { 100 ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order;
                                                   Editable=false }
    { 101 ;   ;Stmt To Rem. Amount Difference;Decimal;
                                                   CaptionML=ENU=Stmt To Rem. Amount Difference;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Statement Type","Bank Account No.","Statement No.","Statement Line No.","Account Type","Account No.","Applies-to Entry No.";
                                                   Clustered=true }
    {    ;Applied,Quality                          }
    {    ;"Sorting Order"                          }
    {    ;Applied,"Account Type","Account No.",Type }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StmtAmtIsFullyAppliedErr@1001 : TextConst 'ENU=The statement amount is already fully applied.';
      EntryDoesntExistErr@1002 : TextConst 'ENU=The entry does not exist.';
      CannotChangeAppliedLineErr@1000 : TextConst 'ENU=You cannot change the line because the entry is applied. Remove the applied entry first.';
      TransactionDateIsBeforePostingDateMsg@1004 : TextConst '@@@="%1 Transaction Date; %2: Posting Date";ENU=The transaction date %1 is before the posting date %2.';
      PaymentAppliedErr@1003 : TextConst 'ENU=The payment is fully applied. To apply the payment to this entry, you must first unapply the payment from another entry.';
      WantToApplyCreditMemoAndInvoicesMsg@1005 : TextConst 'ENU=If you want to apply credit memos and invoices, we recommend that you start by applying credit memos and then apply all others entries.';

    LOCAL PROCEDURE Unapply@7();
    VAR
      AppliedPmtEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      if not GetAppliedPaymentEntry(AppliedPmtEntry) then
        ERROR(EntryDoesntExistErr);

      AppliedPmtEntry.DELETE(true);

      TRANSFERFIELDS(AppliedPmtEntry,false);
      Applied := false;

      "Applied Amt. Incl. Discount" := 0;

      MODIFY(true);
    END;

    LOCAL PROCEDURE UpdateAppliedAmt@1();
    VAR
      AmountToApply@1001 : Decimal;
    BEGIN
      AmountToApply := "Applied Amount";
      if Applied then
        Unapply;

      if AmountToApply = 0 then
        exit;

      Apply(AmountToApply,false);
    END;

    [External]
    PROCEDURE GetAppliedPaymentEntry@3(VAR AppliedPaymentEntry@1000 : Record "Applied Payment Entry") : Boolean;
    BEGIN
      exit(
        AppliedPaymentEntry.GET(
          "Statement Type","Bank Account No.",
          "Statement No.","Statement Line No.",
          "Account Type","Account No.","Applies-to Entry No."));
    END;

    LOCAL PROCEDURE GetLedgEntryInfo@8();
    VAR
      TempAppliedPmtEntry@1000 : TEMPORARY Record "Applied Payment Entry";
    BEGIN
      TempAppliedPmtEntry.TRANSFERFIELDS(Rec);
      TempAppliedPmtEntry.GetLedgEntryInfo;
      TRANSFERFIELDS(TempAppliedPmtEntry);
    END;

    [External]
    PROCEDURE TransferFromBankAccReconLine@14(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      "Statement Type" := BankAccReconLine."Statement Type";
      "Bank Account No." := BankAccReconLine."Bank Account No.";
      "Statement No." := BankAccReconLine."Statement No.";
      "Statement Line No." := BankAccReconLine."Statement Line No.";
    END;

    [External]
    PROCEDURE CreateFromAppliedPaymentEntry@2(AppliedPaymentEntry@1000 : Record "Applied Payment Entry");
    VAR
      BankAccount@1001 : Record "Bank Account";
    BEGIN
      INIT;
      TRANSFERFIELDS(AppliedPaymentEntry);
      UpdatePaymentDiscInfo;

      if AppliedPaymentEntry."Applied Amount" <> 0 then
        Applied := true;

      BankAccount.GET(AppliedPaymentEntry."Bank Account No.");

      UpdatePaymentDiscInfo;
      UpdateRemainingAmount(BankAccount);
      UpdateRemainingAmountExclDiscount;
      UpdateTypeOption(AppliedPaymentEntry."Applies-to Entry No.");
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
      INSERT(true);
    END;

    [External]
    PROCEDURE CreateFromBankStmtMacthingBuffer@10(TempBankStmtMatchingBuffer@1001 : TEMPORARY Record "Bank Statement Matching Buffer";BankAccReconciliationLine@1003 : Record "Bank Acc. Reconciliation Line";BankAccount@1002 : Record "Bank Account");
    VAR
      BankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule";
    BEGIN
      INIT;
      "Account Type" := TempBankStmtMatchingBuffer."Account Type";
      "Account No." := TempBankStmtMatchingBuffer."Account No.";

      if TempBankStmtMatchingBuffer."Entry No." < 0 then
        "Applies-to Entry No." := 0
      else
        "Applies-to Entry No." := TempBankStmtMatchingBuffer."Entry No.";

      GetLedgEntryInfo;
      Quality := TempBankStmtMatchingBuffer.Quality;
      "Match Confidence" := BankPmtApplRule.GetMatchConfidence(TempBankStmtMatchingBuffer.Quality);

      UpdatePaymentDiscInfo;
      UpdateRemainingAmount(BankAccount);
      UpdateRemainingAmountExclDiscount;

      if "Applies-to Entry No." > 0 then
        UpdateTypeOption("Applies-to Entry No.");

      "Stmt To Rem. Amount Difference" := ABS(BankAccReconciliationLine."Statement Amount" - "Remaining Amount");
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
    END;

    LOCAL PROCEDURE UpdateSortingOrder@6();
    VAR
      BankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule";
    BEGIN
      "Sorting Order" := -Quality;
      if Applied then
        "Sorting Order" -= BankPmtApplRule.GetHighestPossibleScore;
    END;

    LOCAL PROCEDURE Apply@5(AmtToApply@1000 : Decimal;SuggestDiscAmt@1001 : Boolean);
    VAR
      AppliedPaymentEntry@1002 : Record "Applied Payment Entry";
      BankAccReconciliationLine@1003 : Record "Bank Acc. Reconciliation Line";
      MatchBankPayments@1004 : Codeunit "Match Bank Payments";
    BEGIN
      AppliedPaymentEntry.TRANSFERFIELDS(Rec);
      BankAccReconciliationLine.GET(
        AppliedPaymentEntry."Statement Type",AppliedPaymentEntry."Bank Account No.",
        AppliedPaymentEntry."Statement No.",AppliedPaymentEntry."Statement Line No.");
      MatchBankPayments.SetApplicationDataInCVLedgEntry(
        "Account Type","Applies-to Entry No.",BankAccReconciliationLine.GetAppliesToID);

      if AmtToApply = 0 then
        ERROR(StmtAmtIsFullyAppliedErr);

      if SuggestDiscAmt then
        AppliedPaymentEntry.VALIDATE("Applies-to Entry No.")
      else
        AppliedPaymentEntry.VALIDATE("Applied Amount",AmtToApply);

      AppliedPaymentEntry.INSERT(true);

      TRANSFERFIELDS(AppliedPaymentEntry);
      Applied := true;
      UpdateRemainingAmountExclDiscount;
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
      MODIFY(true);

      if BankAccReconciliationLine."Transaction Date" < "Posting Date" then
        MESSAGE(STRSUBSTNO(TransactionDateIsBeforePostingDateMsg,BankAccReconciliationLine."Transaction Date","Posting Date"));
    END;

    [External]
    PROCEDURE GetRemainingAmountAfterPostingValue@23() : Decimal;
    BEGIN
      if "Applies-to Entry No." = 0 then
        exit(0);

      exit(GetRemainingAmountAfterPosting);
    END;

    LOCAL PROCEDURE GetRemainingAmountAfterPosting@4() : Decimal;
    VAR
      TempAppliedPaymentEntry@1000 : TEMPORARY Record "Applied Payment Entry";
    BEGIN
      TempAppliedPaymentEntry.TRANSFERFIELDS(Rec);
      exit(
        TempAppliedPaymentEntry.GetRemAmt -
        TempAppliedPaymentEntry."Applied Amount" -
        TempAppliedPaymentEntry.GetAmtAppliedToOtherStmtLines);
    END;

    [External]
    PROCEDURE RemoveApplications@9();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
      CurrentTempPaymentApplicationProposal@1001 : TEMPORARY Record "Payment Application Proposal";
    BEGIN
      CurrentTempPaymentApplicationProposal := Rec;

      AddFilterOnAppliedPmtEntry(AppliedPaymentEntry);

      if AppliedPaymentEntry.FINDSET then
        repeat
          GET(
            AppliedPaymentEntry."Statement Type",AppliedPaymentEntry."Bank Account No.",
            AppliedPaymentEntry."Statement No.",AppliedPaymentEntry."Statement Line No.",
            AppliedPaymentEntry."Account Type",AppliedPaymentEntry."Account No.",
            AppliedPaymentEntry."Applies-to Entry No.");
          Unapply;
        until AppliedPaymentEntry.NEXT = 0;

      Rec := CurrentTempPaymentApplicationProposal;
    END;

    [External]
    PROCEDURE AccountNameDrillDown@35();
    VAR
      Customer@1002 : Record Customer;
      Vendor@1001 : Record Vendor;
      GLAccount@1000 : Record "G/L Account";
      BankAccount@1005 : Record "Bank Account";
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      case AccountType of
        "Account Type"::Customer:
          begin
            Customer.GET(AccountNo);
            PAGE.RUN(PAGE::"Customer Card",Customer);
          end;
        "Account Type"::Vendor:
          begin
            Vendor.GET(AccountNo);
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          end;
        "Account Type"::"G/L Account":
          begin
            GLAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          end;
        "Account Type"::"Bank Account":
          begin
            BankAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"Bank Account Card",BankAccount);
          end;
      end;
    END;

    [External]
    PROCEDURE GetAccountName@11() : Text;
    VAR
      Customer@1002 : Record Customer;
      Vendor@1001 : Record Vendor;
      GLAccount@1000 : Record "G/L Account";
      BankAccount@1006 : Record "Bank Account";
      AccountType@1005 : Option;
      AccountNo@1004 : Code[20];
      Name@1003 : Text;
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      Name := '';

      case AccountType of
        "Account Type"::Customer:
          if Customer.GET(AccountNo) then
            Name := Customer.Name;
        "Account Type"::Vendor:
          if Vendor.GET(AccountNo) then
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          if GLAccount.GET(AccountNo) then
            Name := GLAccount.Name;
        "Account Type"::"Bank Account":
          if BankAccount.GET(AccountNo) then
            Name := BankAccount.Name;
      end;

      exit(Name);
    END;

    LOCAL PROCEDURE GetAppliedToAccountType@36() : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record "Bank Account Ledger Entry";
    BEGIN
      if "Account Type" = "Account Type"::"Bank Account" then
        if BankAccountLedgerEntry.GET("Applies-to Entry No.") then
          exit(BankAccountLedgerEntry."Bal. Account Type");
      exit("Account Type");
    END;

    LOCAL PROCEDURE GetAppliedToAccountNo@37() : Code[20];
    VAR
      BankAccountLedgerEntry@1004 : Record "Bank Account Ledger Entry";
    BEGIN
      if "Account Type" = "Account Type"::"Bank Account" then
        if BankAccountLedgerEntry.GET("Applies-to Entry No.") then
          exit(BankAccountLedgerEntry."Bal. Account No.");
      exit("Account No.");
    END;

    LOCAL PROCEDURE ChangeDiscountAmounts@20();
    BEGIN
      UpdateLedgEntryDisc;
      UpdateRemainingAmountExclDiscount;

      if "Applied Pmt. Discount" <> 0 then begin
        "Applied Amount" -= "Applied Pmt. Discount";
        "Applied Pmt. Discount" := 0;
      end;

      UpdateAppliedAmt;
    END;

    LOCAL PROCEDURE UpdateLedgEntryDisc@42();
    VAR
      BankAccReconLine@1002 : Record "Bank Acc. Reconciliation Line";
      AppliedPmtEntry@1001 : Record "Applied Payment Entry";
      BankAccReconPost@1000 : Codeunit "Bank Acc. Reconciliation Post";
    BEGIN
      TESTFIELD("Applies-to Entry No.");
      AppliedPmtEntry.TRANSFERFIELDS(Rec);
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      case "Account Type" of
        "Account Type"::Customer:
          BankAccReconPost.ApplyCustLedgEntry(
            AppliedPmtEntry,'',BankAccReconLine."Transaction Date",
            "Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
        "Account Type"::Vendor:
          BankAccReconPost.ApplyVendLedgEntry(
            AppliedPmtEntry,'',BankAccReconLine."Transaction Date",
            "Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
      end;
    END;

    LOCAL PROCEDURE UpdateRemainingAmountExclDiscount@12();
    VAR
      BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      "Remaining Amt. Incl. Discount" := "Remaining Amount";

      if not ("Document Type" in ["Document Type"::"Credit Memo","Document Type"::Invoice]) then
        exit;

      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      if BankAccReconLine."Transaction Date" > "Pmt. Disc. Due Date" then
        exit;

      "Remaining Amt. Incl. Discount" -= "Remaining Pmt. Disc. Possible";
    END;

    LOCAL PROCEDURE UpdateRemainingAmount@15(BankAccount@1000 : Record "Bank Account");
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
      BankAccLedgEntry@1003 : Record "Bank Account Ledger Entry";
      RemainingAmount@1005 : Decimal;
      RemainingAmountLCY@1006 : Decimal;
    BEGIN
      "Remaining Amount" := 0;

      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::"Bank Account":
          begin
            BankAccLedgEntry.SETRANGE(Open,true);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
            BankAccLedgEntry.GET("Applies-to Entry No.");
            "Remaining Amount" := BankAccLedgEntry."Remaining Amount";
            exit;
          end;
        "Account Type"::Customer:
          begin
            CustLedgEntry.SETRANGE(Open,true);
            CustLedgEntry.SETRANGE("Customer No.","Account No.");
            CustLedgEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            CustLedgEntry.GET("Applies-to Entry No.");

            RemainingAmount := CustLedgEntry."Remaining Amount";
            RemainingAmountLCY := CustLedgEntry."Remaining Amt. (LCY)";
          end;
        "Account Type"::Vendor:
          begin
            VendLedgEntry.SETRANGE(Open,true);
            VendLedgEntry.SETRANGE("Vendor No.","Account No.");
            VendLedgEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            VendLedgEntry.GET("Applies-to Entry No.");

            RemainingAmount := VendLedgEntry."Remaining Amount";
            RemainingAmountLCY := VendLedgEntry."Remaining Amt. (LCY)";
          end;
      end;

      if BankAccount.IsInLocalCurrency then
        "Remaining Amount" := RemainingAmountLCY
      else
        "Remaining Amount" := RemainingAmount;
    END;

    LOCAL PROCEDURE UpdatePaymentDiscInfo@13();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      AppliedPaymentEntry.TRANSFERFIELDS(Rec);
      AppliedPaymentEntry.GetDiscInfo("Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
      if "Remaining Pmt. Disc. Possible" = 0 then begin
        "Pmt. Disc. Due Date" := 0D;
        "Pmt. Disc. Tolerance Date" := 0D;
      end;
    END;

    LOCAL PROCEDURE VerifyLineIsNotApplied@16();
    BEGIN
      if Applied then
        ERROR(CannotChangeAppliedLineErr);
    END;

    [External]
    PROCEDURE AppliesToEntryNoDrillDown@17();
    VAR
      CustLedgEntry@1005 : Record "Cust. Ledger Entry";
      VendLedgEntry@1004 : Record "Vendor Ledger Entry";
      BankAccLedgEntry@1003 : Record "Bank Account Ledger Entry";
      GLEntry@1002 : Record "G/L Entry";
    BEGIN
      if "Applies-to Entry No." = 0 then
        exit;

      case "Account Type" of
        "Account Type"::"G/L Account":
          begin
            GLEntry.SETRANGE("G/L Account No.","Account No.");
            PAGE.RUNMODAL(0,GLEntry);
          end;
        "Account Type"::Customer:
          begin
            CustLedgEntry.SETRANGE(Open,true);
            CustLedgEntry.SETRANGE("Customer No.","Account No.");
            CustLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,CustLedgEntry);
          end;
        "Account Type"::Vendor:
          begin
            VendLedgEntry.SETRANGE(Open,true);
            VendLedgEntry.SETRANGE("Vendor No.","Account No.");
            VendLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,VendLedgEntry);
          end;
        "Account Type"::"Bank Account":
          begin
            BankAccLedgEntry.SETRANGE(Open,true);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
            BankAccLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,BankAccLedgEntry);
          end;
      end;
    END;

    LOCAL PROCEDURE CrMemoSelectedToApply@18();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      AddFilterOnAppliedPmtEntry(AppliedPaymentEntry);
      if AppliedPaymentEntry.COUNT > 0 then begin
        AppliedPaymentEntry.SETRANGE("Document Type","Document Type"::"Credit Memo");
        if AppliedPaymentEntry.COUNT = 0 then
          MESSAGE(WantToApplyCreditMemoAndInvoicesMsg);
      end;
    END;

    LOCAL PROCEDURE AddFilterOnAppliedPmtEntry@22(VAR AppliedPaymentEntry@1001 : Record "Applied Payment Entry");
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
    END;

    LOCAL PROCEDURE UpdateTypeOption@19(EntryNo@1000 : Integer);
    VAR
      CheckLedgerEntry@1001 : Record "Check Ledger Entry";
    BEGIN
      CheckLedgerEntry.SETRANGE("Bank Account Ledger Entry No.",EntryNo);
      if CheckLedgerEntry.FINDFIRST then
        Type := Type::"Check Ledger Entry"
      else
        Type := Type::"Bank Account Ledger Entry";
    END;

    BEGIN
    END.
  }
}

