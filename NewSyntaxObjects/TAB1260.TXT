OBJECT Table 1260 Bank Data Conv. Service Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    OnInsert=VAR
               BankDataConvServMgt@1000 : Codeunit "Bank Data Conv. Serv. Mgt.";
             BEGIN
               if "User Name" = '' then
                 BankDataConvServMgt.InitDefaultURLs(Rec);
             END;

    OnDelete=BEGIN
               DeletePassword;
             END;

    CaptionML=ENU=Bank Data Conv. Service Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;User Name           ;Text50        ;CaptionML=ENU=User Name;
                                                   Editable=true }
    { 3   ;   ;Password Key        ;GUID          ;TableRelation="Service Password".Key;
                                                   CaptionML=ENU=Password Key }
    { 4   ;   ;Sign-up URL         ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Sign-up URL }
    { 5   ;   ;Service URL         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit "Web Request Helper";
                                                              BEGIN
                                                                if "Service URL" <> '' then
                                                                  WebRequestHelper.IsSecureHttpUrl("Service URL");
                                                              END;

                                                   CaptionML=ENU=Service URL }
    { 6   ;   ;Support URL         ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Support URL }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management";
      PermissionManager@1001 : Codeunit "Permission Manager";
      UserNameSecretTxt@1002 : TextConst '@@@={Locked};ENU=amcname';
      PasswordSecretTxt@1003 : TextConst '@@@={Locked};ENU=amcpassword';
      CompanyInformationMgt@1004 : Codeunit "Company Information Mgt.";

    [External]
    PROCEDURE SavePassword@1(PasswordText@1000 : Text);
    VAR
      ServicePassword@1002 : Record "Service Password";
    BEGIN
      if ISNULLGUID("Password Key") or not ServicePassword.GET("Password Key") then begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.INSERT(true);
        "Password Key" := ServicePassword.Key;
      end else begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.MODIFY;
      end;
    END;

    [External]
    PROCEDURE GetUserName@20() : Text[50];
    BEGIN
      if DemoSaaSCompany and ("User Name" = '') then
        exit(RetrieveSaaSUserName);

      exit("User Name");
    END;

    [External]
    PROCEDURE GetPassword@2() : Text;
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      // if Demo Company and empty User Name retrieve from Azure Key Vault
      if DemoSaaSCompany and ("User Name" = '') then
        exit(RetrieveSaaSPass);

      ServicePassword.GET("Password Key");
      exit(ServicePassword.GetPassword);
    END;

    LOCAL PROCEDURE DeletePassword@4();
    VAR
      ServicePassword@1001 : Record "Service Password";
    BEGIN
      if ServicePassword.GET("Password Key") then
        ServicePassword.DELETE;
    END;

    [External]
    PROCEDURE HasUserName@22() : Boolean;
    BEGIN
      // if Demo Company try to retrieve from Azure Key Vault
      if DemoSaaSCompany then
        exit(true);

      exit("User Name" <> '');
    END;

    [External]
    PROCEDURE HasPassword@3() : Boolean;
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      if PermissionManager.SoftwareAsAService and ("User Name" = '') then
        exit(true);

      exit(ServicePassword.GET("Password Key"));
    END;

    [External]
    PROCEDURE SetURLsToDefault@5();
    VAR
      BankDataConvServMgt@1000 : Codeunit "Bank Data Conv. Serv. Mgt.";
    BEGIN
      BankDataConvServMgt.SetURLsToDefault(Rec);
    END;

    LOCAL PROCEDURE RetrieveSaaSUserName@11() : Text[50];
    VAR
      UserNameValue@1000 : Text[50];
    BEGIN
      if AzureKeyVaultManagement.GetAzureKeyVaultSecret(UserNameValue,UserNameSecretTxt) then
        exit(UserNameValue);
    END;

    LOCAL PROCEDURE RetrieveSaaSPass@9() : Text;
    VAR
      PasswordValue@1000 : Text;
    BEGIN
      if AzureKeyVaultManagement.GetAzureKeyVaultSecret(PasswordValue,PasswordSecretTxt) then
        exit(PasswordValue);
    END;

    LOCAL PROCEDURE DemoSaaSCompany@10() : Boolean;
    BEGIN
      exit(PermissionManager.SoftwareAsAService and CompanyInformationMgt.IsDemoCompany);
    END;

    BEGIN
    END.
  }
}

