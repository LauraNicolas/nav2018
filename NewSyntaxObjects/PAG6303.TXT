OBJECT Page 6303 Power BI Report Spinner Part
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Power BI Reports;
    PageType=CardPart;
    SourceTableTemporary=true;
    OnOpenPage=BEGIN
                 IsErrorMessageVisible := false;
                 UpdateContext;

                 // Contextual Power BI FactBox: loading Power BI related user settings
                 SetPowerBIUserConfig.CreateOrReadUserConfigEntry(PowerBIUserConfiguration,LastOpenedReportID,Context);

                 if not TryLoadPart then
                   ShowErrorMessage(GETLASTERRORTEXT);

                 // Always call this function after calling TryLoadPart to log exceptions to ActivityLog table
                 PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);
                 CurrPage.UPDATE;
               END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      Name=ActionContainer3;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Select Report;
                      CaptionML=ENU=Select Report;
                      ToolTipML=ENU=Select the report.;
                      ApplicationArea=#All;
                      Enabled=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible;
                      Image=SelectChart;
                      OnAction=VAR
                                 PowerBiReportSelection@1001 : Page "Power BI Report Selection";
                               BEGIN
                                 // Opens the report selection page, then updates the onscreen report depending on the user's
                                 // subsequent selection and enabled/disabled settings.

                                 PowerBiReportSelection.SetContext(Context);
                                 PowerBiReportSelection.SetNameFilter(NameFilter);
                                 PowerBiReportSelection.SetReportBuffer(TempPowerBiReportBuffer);
                                 PowerBiReportSelection.LOOKUPMODE(true);

                                 PowerBiReportSelection.RUNMODAL;
                                 if PowerBiReportSelection.IsPageClosedOkay then begin
                                   PowerBiReportSelection.GETRECORD(TempPowerBiReportBuffer);

                                   if TempPowerBiReportBuffer.Enabled then
                                     LastOpenedReportID := TempPowerBiReportBuffer.ReportID; // RefreshAvailableReports handles fallback logic on invalid selection.

                                   RefreshAvailableReports;

                                   if AddInReady then
                                     CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                                   // at this point, NAV will load the web page viewer since HasReports should be true. WebReportViewer::ControlAddInReady will then fire, calling Navigate()
                                 end;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=Expand Report;
                      CaptionML=ENU=Expand Report;
                      ToolTipML=ENU=View all information in the report.;
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=View;
                      OnAction=VAR
                                 PowerBiReportDialog@1000 : Page "Power BI Report Dialog";
                               BEGIN
                                 PowerBiReportDialog.SetUrl(GetEmbedUrlWithNavigation,GetMessage);
                                 PowerBiReportDialog.CAPTION(TempPowerBiReportBuffer.ReportName);
                                 PowerBiReportDialog.RUN;
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=Previous Report;
                      CaptionML=ENU=Previous Report;
                      ToolTipML=ENU=Go to the previous report.;
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
                                 if TempPowerBiReportBuffer.NEXT(-1) = 0 then
                                   TempPowerBiReportBuffer.FINDLAST;

                                 CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=Next Report;
                      CaptionML=ENU=Next Report;
                      ToolTipML=ENU=Go to the next report.;
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=NextSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
                                 if TempPowerBiReportBuffer.NEXT = 0 then
                                   TempPowerBiReportBuffer.FINDFIRST;

                                 CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 11  ;1   ;Group     ;
                Name=Group11;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND HasReports;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=WebReportViewer;
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.WebPageViewer;PublicKeyToken=31bf3856ad364e35] }

    { 15  ;1   ;Group     ;
                Name=Group15;
                GroupType=GridLayout;
                Layout=Columns }

    { 13  ;2   ;Group     ;
                Name=Group13;
                GroupType=Group }

    { 7   ;3   ;Group     ;
                Name=Group7;
                Visible=IsGettingStartedVisible;
                GroupType=Group }

    { 19  ;4   ;Field     ;
                Name=GettingStarted;
                ToolTipML=ENU="Specifies that the Azure AD setup window opens. ";
                ApplicationArea=#All;
                SourceExpr='Get started with Power BI';
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              if not TryAzureAdMgtGetAccessToken then
                                ShowErrorMessage(GETLASTERRORTEXT);
                              if not TryLoadPart then
                                ShowErrorMessage(GETLASTERRORTEXT);

                              // Always call this function after calling TryLoadPart to log exceptions to ActivityLog table
                              PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);
                              CurrPage.UPDATE;
                            END;

                ShowCaption=false }

    { 10  ;3   ;Group     ;
                Name=Group10;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 16  ;4   ;Field     ;
                Name=ErrorMessageText;
                ApplicationArea=#All;
                SourceExpr=ErrorMessageText;
                Editable=FALSE;
                ShowCaption=false }

    { 14  ;4   ;Field     ;
                Name=ErrorUrlText;
                ExtendedDatatype=URL;
                ApplicationArea=#All;
                SourceExpr=ErrorUrlText;
                Visible=IsUrlFieldVisible;
                Editable=FALSE;
                ShowCaption=false }

    { 12  ;3   ;Group     ;
                Name=Group12;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND NOT HasReports;
                GroupType=Group }

    { 9   ;4   ;Field     ;
                Name=EmptyMessage;
                CaptionML=ENU=There are no enabled reports. Choose Select Report to see a list of reports that you can display.;
                ToolTipML=ENU=Specifies that the user needs to select Power BI reports.;
                ApplicationArea=#All;
                Editable=FALSE;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      TempPowerBiReportBuffer@1009 : TEMPORARY Record "Power BI Report Buffer";
      NoReportsAvailableErr@1004 : TextConst 'ENU=There are no reports available from Power BI.';
      PowerBIUserConfiguration@1013 : Record "Power BI User Configuration";
      SetPowerBIUserConfig@1014 : Codeunit "Set Power BI User Config";
      ConfPersonalizationMgt@1016 : Codeunit "Conf./Personalization Mgt.";
      PowerBiServiceMgt@1012 : Codeunit "Power BI Service Mgt.";
      AzureAdMgt@1011 : Codeunit "Azure AD Mgt.";
      LastOpenedReportID@1015 : GUID;
      Context@1010 : Text[30];
      NameFilter@1008 : Text;
      IsGettingStartedVisible@1007 : Boolean;
      HasReports@1006 : Boolean;
      AddInReady@1005 : Boolean;
      IsErrorMessageVisible@1003 : Boolean;
      ErrorMessageText@1002 : Text;
      IsUrlFieldVisible@1001 : Boolean;
      ErrorUrlText@1000 : Text;
      ExceptionMessage@1018 : Text;
      ExceptionDetails@1017 : Text;

    LOCAL PROCEDURE GetMessage@1() : Text;
    VAR
      HttpUtility@1000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      exit(
        '{"action":"loadReport","accessToken":"' +
        HttpUtility.JavaScriptStringEncode(AzureAdMgt.GetAccessToken(
            PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,false)) + '"}');
    END;

    LOCAL PROCEDURE GetEmbedUrl@2() : Text;
    BEGIN
      if TempPowerBiReportBuffer.ISEMPTY then begin
        // Clear out last opened report if there are no reports to display.
        CLEAR(LastOpenedReportID);
        SetLastOpenedReportID(LastOpenedReportID);
      end else begin
        // update last loaded report
        SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
        // Hides both filters and tabs for embedding in small spaces where navigation is unnecessary.
        exit(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false&navContentPaneEnabled=false');
      end;
    END;

    LOCAL PROCEDURE GetEmbedUrlWithNavigation@3() : Text;
    BEGIN
      // update last loaded report
      SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
      // Hides filters and shows tabs for embedding in large spaces where navigation is necessary.
      exit(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false');
    END;

    LOCAL PROCEDURE LoadPart@5();
    BEGIN
      IsGettingStartedVisible := not PowerBiServiceMgt.IsUserReadyForPowerBI;

      TempPowerBiReportBuffer.DELETEALL;
      if IsGettingStartedVisible then begin
        if AzureAdMgt.IsSaaS then
          ERROR(PowerBiServiceMgt.GetGenericError);

        TempPowerBiReportBuffer.INSERT // Hack to display Get Started link.
      end else begin
        PowerBiServiceMgt.GetReports(TempPowerBiReportBuffer,ExceptionMessage,ExceptionDetails,Context);

        if TempPowerBiReportBuffer.ISEMPTY then
          ERROR(NoReportsAvailableErr);

        RefreshAvailableReports;
      end;
    END;

    LOCAL PROCEDURE RefreshAvailableReports@7();
    BEGIN
      // Filters the report buffer to show the user's selected report onscreen if possible, otherwise defaulting
      // to other enabled reports.
      // (The updated selection will automatically get saved on render - can't save to database here without
      // triggering errors about calling MODIFY during a TryFunction.)

      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
      if not ISNULLGUID(LastOpenedReportID) then begin
        TempPowerBiReportBuffer.SETFILTER(ReportID,'%1',LastOpenedReportID);

        if TempPowerBiReportBuffer.ISEMPTY then begin
          // If last selection is invalid, clear it and default to showing the first enabled report.
          CLEAR(LastOpenedReportID);
          RefreshAvailableReports;
        end;
      end;

      HasReports := TempPowerBiReportBuffer.FINDFIRST;
    END;

    [External]
    PROCEDURE SetContext@6(ParentContext@1000 : Text[30]);
    BEGIN
      // Sets an ID that tracks which page to show reports for - called by the parent page hosting the part,
      // if possible (see UpdateContext).
      Context := ParentContext;
    END;

    LOCAL PROCEDURE UpdateContext@8();
    VAR
      ConfPersonalizationMgt@1000 : Codeunit "Conf./Personalization Mgt.";
    BEGIN
      // Automatically sets the parent page ID based on the user's selected role center (role centers can't
      // have codebehind, so they have no other way to set the context for their reports).
      if Context = '' then
        SetContext(ConfPersonalizationMgt.GetCurrentProfileIDNoError);
    END;

    [External]
    PROCEDURE SetNameFilter@9(ParentFilter@1000 : Text);
    BEGIN
      // Sets a text value that tells the selection page how to filter the reports list. This should be called
      // by the parent page hosting this page part, if possible.
      NameFilter := ParentFilter;
    END;

    LOCAL PROCEDURE ShowErrorMessage@4(TextToShow@1000 : Text);
    BEGIN
      // this condition checks if we caught the authorization error that contains a link to Power BI
      // the function divide the error message into simple text and url part
      if TextToShow = PowerBiServiceMgt.GetUnauthorizedErrorText then begin
        IsUrlFieldVisible := true;
        // this message is required to have ':' at the end, but it has '.' instead due to C/AL Localizability requirement
        TextToShow := DELSTR(PowerBiServiceMgt.GetUnauthorizedErrorText,STRLEN(PowerBiServiceMgt.GetUnauthorizedErrorText),1) + ':';
        ErrorUrlText := PowerBiServiceMgt.GetPowerBIUrl;
      end;

      IsErrorMessageVisible := true;
      IsGettingStartedVisible := false;
      TempPowerBiReportBuffer.DELETEALL; // Required to avoid one INSERT after another (that will lead to an error)
      if TextToShow = '' then
        TextToShow := PowerBiServiceMgt.GetGenericError;
      ErrorMessageText := TextToShow;
      TempPowerBiReportBuffer.INSERT; // Hack to show the field with the text
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLoadPart@11();
    BEGIN
      // Need the try function here to catch any possible internal errors
      LoadPart;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@33();
    BEGIN
      AzureAdMgt.GetAccessToken(PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,true);
    END;

    LOCAL PROCEDURE SetReport@10();
    BEGIN
      if (CURRENTCLIENTTYPE <> CLIENTTYPE::Phone) and (CURRENTCLIENTTYPE <> CLIENTTYPE::Windows) then
        CurrPage.WebReportViewer.InitializeIFrame(PowerBiServiceMgt.GetReportPageSize);

      CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    PROCEDURE SetLastOpenedReportID@14(LastOpenedReportIDInputValue@1000 : GUID);
    BEGIN
      LastOpenedReportID := LastOpenedReportIDInputValue;
      // filter to find the proper record
      PowerBIUserConfiguration.RESET;
      PowerBIUserConfiguration.SETFILTER("Page ID",'%1',Context);
      PowerBIUserConfiguration.SETFILTER("Profile ID",'%1',ConfPersonalizationMgt.GetCurrentProfileIDNoError);
      PowerBIUserConfiguration.SETFILTER("User Security ID",'%1',USERSECURITYID);

      // update the last loaded report field (the record at this point should already exist bacause it was created OnOpenPage)
      if not PowerBIUserConfiguration.ISEMPTY then begin
        PowerBIUserConfiguration."Selected Report ID" := LastOpenedReportID;
        PowerBIUserConfiguration.MODIFY;
        COMMIT;
      end;
    END;

    EVENT WebReportViewer@-2::ControlAddInReady@7(callbackUrl@1000 : Text);
    BEGIN
      AddInReady := true;
      if not TempPowerBiReportBuffer.ISEMPTY then
        SetReport;
    END;

    EVENT WebReportViewer@-2::DocumentReady@8();
    BEGIN
      if not TempPowerBiReportBuffer.ISEMPTY then
        CurrPage.WebReportViewer.PostMessage(GetMessage,'*',false);
    END;

    EVENT WebReportViewer@-2::Callback@9(data@1000 : Text);
    BEGIN
    END;

    EVENT WebReportViewer@-2::Refresh@10(callbackUrl@1000 : Text);
    BEGIN
      if AddInReady and not TempPowerBiReportBuffer.ISEMPTY then
        SetReport;
    END;

    BEGIN
    END.
  }
}

