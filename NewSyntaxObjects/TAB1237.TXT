OBJECT Table 1237 Transformation Rule
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    CaptionML=ENU=Transformation Rule;
    LookupPageID="Transformation Rules";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 3   ;   ;Transformation Type ;Option        ;OnValidate=BEGIN
                                                                if not ("Transformation Type" in ["Transformation Type"::Replace,
                                                                                                  "Transformation Type"::"Regular Expression - Replace",
                                                                                                  "Transformation Type"::"Regular Expression - Match"])
                                                                then begin
                                                                  "Find Value" := '';
                                                                  "Replace Value" := '';
                                                                end;
                                                                if not ("Transformation Type" in ["Transformation Type"::Substring]) then begin
                                                                  "Start Position" := 0;
                                                                  Length := 0;
                                                                  "Ending Text" := '';
                                                                  "Starting Text" := '';
                                                                end;
                                                                if not ("Transformation Type" in ["Transformation Type"::"Date Formatting",
                                                                                                  "Transformation Type"::"Date and Time Formatting",
                                                                                                  "Transformation Type"::"Decimal Formatting"])
                                                                then begin
                                                                  "Data Format" := '';
                                                                  "Data Formatting Culture" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Transformation Type;
                                                   OptionCaptionML=ENU=Uppercase,Lowercase,Title Case,Trim,Substring,Replace,Regular Expression - Replace,Remove Non-Alphanumeric Characters,Date Formatting,Decimal Formatting,Regular Expression - Match,Custom,Date and Time Formatting;
                                                   OptionString=Uppercase,Lowercase,"Title Case",Trim,Substring,Replace,"Regular Expression - Replace","Remove Non-Alphanumeric Characters","Date Formatting","Decimal Formatting","Regular Expression - Match",Custom,"Date and Time Formatting" }
    { 10  ;   ;Find Value          ;Text250       ;OnValidate=BEGIN
                                                                if not ("Transformation Type" in ["Transformation Type"::Replace,
                                                                                                  "Transformation Type"::"Regular Expression - Replace",
                                                                                                  "Transformation Type"::"Regular Expression - Match"])
                                                                then
                                                                  TESTFIELD("Find Value",'');
                                                              END;

                                                   CaptionML=ENU=Find Value }
    { 11  ;   ;Replace Value       ;Text250       ;OnValidate=BEGIN
                                                                if not ("Transformation Type" in ["Transformation Type"::Replace,"Transformation Type"::"Regular Expression - Replace"]) then
                                                                  TESTFIELD("Replace Value",'');
                                                              END;

                                                   CaptionML=ENU=Replace Value }
    { 12  ;   ;Starting Text       ;Text250       ;OnValidate=BEGIN
                                                                if "Starting Text" <> '' then begin
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Start Position",0);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Starting Text }
    { 13  ;   ;Ending Text         ;Text250       ;OnValidate=BEGIN
                                                                if "Ending Text" <> '' then begin
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE(Length,0);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Ending Text }
    { 15  ;   ;Start Position      ;Integer       ;OnValidate=BEGIN
                                                                if "Transformation Type" = "Transformation Type"::Substring then
                                                                  if "Start Position" < 0 then
                                                                    ERROR(MustBeGreaterThanZeroErr);

                                                                if "Start Position" <> 0 then begin
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Starting Text",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Start Position;
                                                   BlankZero=true }
    { 16  ;   ;Length              ;Integer       ;OnValidate=BEGIN
                                                                if "Transformation Type" = "Transformation Type"::Substring then
                                                                  if Length < 0 then
                                                                    ERROR(MustBeGreaterThanZeroErr);

                                                                if Length <> 0 then begin
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);
                                                                  VALIDATE("Ending Text",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   BlankZero=true }
    { 18  ;   ;Data Format         ;Text100       ;OnValidate=BEGIN
                                                                if not ("Transformation Type" in ["Transformation Type"::"Date Formatting",
                                                                                                  "Transformation Type"::"Date and Time Formatting",
                                                                                                  "Transformation Type"::"Decimal Formatting"])
                                                                then
                                                                  TESTFIELD("Data Format",'');
                                                              END;

                                                   CaptionML=ENU=Data Format }
    { 20  ;   ;Data Formatting Culture;Text10     ;OnValidate=BEGIN
                                                                if not ("Transformation Type" in ["Transformation Type"::"Date Formatting",
                                                                                                  "Transformation Type"::"Date and Time Formatting",
                                                                                                  "Transformation Type"::"Decimal Formatting"])
                                                                then
                                                                  TESTFIELD("Data Formatting Culture",'');
                                                              END;

                                                   CaptionML=ENU=Data Formatting Culture }
    { 30  ;   ;Next Transformation Rule;Code20    ;TableRelation="Transformation Rule".Code;
                                                   CaptionML=ENU=Next Transformation Rule }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeGreaterThanZeroErr@1000 : TextConst 'ENU=The Value entered must be greater than zero.';
      UPPERCASETxt@1001 : TextConst '@@@=Assigned to Transformation.Code field for Upper case;ENU=UPPERCASE';
      UpperCaseDescTxt@1007 : TextConst 'ENU=Upper Case Text';
      LOWERCASETxt@1002 : TextConst '@@@=Assigned to Transformation.Code field for Lower case;ENU=LOWERCASE';
      LowerCaseDescTxt@1008 : TextConst 'ENU=Lower Case Text';
      TITLECASETxt@1003 : TextConst '@@@=Assigned to Transformation.Code field for Title case;ENU=TITLECASE';
      TitleCaseDescTxt@1009 : TextConst 'ENU=Title Case Text';
      TRIMTxt@1004 : TextConst '@@@=Assigned to Transformation.Code field for Trim;ENU=TRIM';
      TrimDescTxt@1010 : TextConst 'ENU=Trim Text';
      FOURTH_TO_SIXTH_CHARTxt@1005 : TextConst '@@@=Assigned to Transformation.Code field for getting the 4th to 6th characters in a string;ENU=FOURTH_TO_SIXTH_CHAR';
      FourthToSixthCharactersDescTxt@1011 : TextConst 'ENU=Fourth to Sixth Characters Text';
      YYYYMMDDDateTxt@1014 : TextConst '@@@=Assigned to Transformation.Code field for converting dates from yyyyMMdd format;ENU=YYYYMMDD_DATE';
      YYYYMMDDDateDescTxt@1013 : TextConst 'ENU=yyyyMMdd Date Text';
      YYYYMMDDHHMMSSTxt@1022 : TextConst '@@@=Assigned to Transformation.Code field for converting dates from yyyyMMdd format;ENU=YYYYMMDDHHMMSS_FMT';
      YYYYMMDDHHMMSSDescTxt@1021 : TextConst 'ENU=yyyyMMddHHmmss Date/Time Format';
      ALPHANUMERIC_ONLYTxt@1006 : TextConst '@@@=Assigned to Transformation.Code field for getting only the Alphanumeric characters in a string;ENU=ALPHANUMERIC_ONLY';
      AlphaNumericDescTxt@1012 : TextConst 'ENU=Alphanumeric Text Only';
      DKNUMBERFORMATTxt@1015 : TextConst '@@@=Assigned to Transformation.Code field for getting decimal formatting rule for Danish numbers;ENU=DK_DECIMAL_FORMAT';
      DKNUMBERFORMATDescTxt@1016 : TextConst 'ENU=Danish Decimal Format';
      USDATEFORMATTxt@1017 : TextConst '@@@=Assigned to Transformation.Code field for getting date formatting rule from U.S. dates;ENU=US_DATE_FORMAT';
      USDATEFORMATDescTxt@1018 : TextConst 'ENU=U.S. Date Format';
      USDATETIMEFORMATTxt@1024 : TextConst '@@@=Assigned to Transformation.Code field for getting date formatting rule from U.S. dates;ENU=US_DATETIME_FORMAT';
      USDATETIMEFORMATDescTxt@1023 : TextConst 'ENU=U.S. Date/Time Format';
      DeleteNOTPROVIDEDTxt@1019 : TextConst '@@@=NOTPROVIDED should stay in english because it is a constant value. DELETE should be translated.;ENU=DELETE_NOTPROVIDED';
      DeleteNOTPROVIDEDDescriptionTxt@1020 : TextConst '@@@=NOTPROVIDED should stay in english because it is a constant value. ''Delete'' and ''value'' should be translated.;ENU=Delete NOTPROVIDED value';

    [External]
    PROCEDURE CreateDefaultTransformations@3();
    BEGIN
      InsertRec(UPPERCASETxt,UpperCaseDescTxt,"Transformation Type"::Uppercase,0,0,'','');
      InsertRec(LOWERCASETxt,LowerCaseDescTxt,"Transformation Type"::Lowercase,0,0,'','');
      InsertRec(TITLECASETxt,TitleCaseDescTxt,"Transformation Type"::"Title Case",0,0,'','');
      InsertRec(TRIMTxt,TrimDescTxt,"Transformation Type"::Trim,0,0,'','');
      InsertRec(FOURTH_TO_SIXTH_CHARTxt,FourthToSixthCharactersDescTxt,"Transformation Type"::Substring,4,3,'','');
      InsertRec(YYYYMMDDDateTxt,YYYYMMDDDateDescTxt,"Transformation Type"::"Date Formatting",0,0,'yyyyMMdd','');
      InsertRec(YYYYMMDDHHMMSSTxt,YYYYMMDDHHMMSSDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMddHHmmss','');
      InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
      InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
      InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date Formatting",0,0,'','en-US');
      InsertRec(USDATETIMEFORMATTxt,USDATETIMEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
      OnCreateTransformationRules;
      InsertFindAndReplaceRule(
        DeleteNOTPROVIDEDTxt,DeleteNOTPROVIDEDDescriptionTxt,"Transformation Type"::"Regular Expression - Replace",'NOTPROVIDED','');
    END;

    [External]
    PROCEDURE InsertRec@8(NewCode@1000 : Code[20];NewDescription@1001 : Text[100];NewTransformationType@1002 : Option;NewStartPosition@1003 : Integer;NewLength@1004 : Integer;NewDataFormat@1006 : Text[100];NewDataFormattingCulture@1007 : Text[10]);
    VAR
      TransformationRule@1005 : Record "Transformation Rule";
    BEGIN
      with TransformationRule do begin
        INIT;
        VALIDATE(Code,NewCode);
        VALIDATE(Description,NewDescription);
        VALIDATE("Transformation Type",NewTransformationType);
        VALIDATE("Start Position",NewStartPosition);
        VALIDATE(Length,NewLength);
        VALIDATE("Data Format",NewDataFormat);
        VALIDATE("Data Formatting Culture",NewDataFormattingCulture);
        if INSERT(true) then;
      end;
    END;

    LOCAL PROCEDURE InsertFindAndReplaceRule@27(NewCode@1000 : Code[20];NewDescription@1001 : Text[100];NewTransformationType@1002 : Option;NewFindValue@1003 : Text[250];NewReplaceValue@1004 : Text[250]);
    VAR
      TransformationRule@1005 : Record "Transformation Rule";
    BEGIN
      with TransformationRule do begin
        INIT;
        VALIDATE(Code,NewCode);
        VALIDATE(Description,NewDescription);
        VALIDATE("Transformation Type",NewTransformationType);
        VALIDATE("Find Value",NewFindValue);
        VALIDATE("Replace Value",NewReplaceValue);
        if INSERT(true) then;
      end;
    END;

    [External]
    PROCEDURE TransformText@5(OldValue@1001 : Text) : Text;
    VAR
      TransformationRule@1000 : Record "Transformation Rule";
      NewValue@1002 : Text;
    BEGIN
      NewValue := OldValue;

      case "Transformation Type" of
        "Transformation Type"::Uppercase:
          NewValue := UPPERCASE(OldValue);
        "Transformation Type"::Lowercase:
          NewValue := LOWERCASE(OldValue);
        "Transformation Type"::"Title Case":
          NewValue := TextToTitleCase(OldValue);
        "Transformation Type"::Trim:
          NewValue := DELCHR(OldValue,'<>');
        "Transformation Type"::Substring:
          NewValue := Substring(OldValue);
        "Transformation Type"::Replace:
          NewValue := StringReplace(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Regular Expression - Replace":
          NewValue := RegularExpressionReplace(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Regular Expression - Match":
          NewValue := RegularExpressionMatch(OldValue,"Find Value");
        "Transformation Type"::"Remove Non-Alphanumeric Characters":
          NewValue := RemoveNonAplhaNumericCharacters(OldValue);
        "Transformation Type"::"Date Formatting":
          NewValue := DateFormatting(OldValue);
        "Transformation Type"::"Date and Time Formatting":
          NewValue := DateTimeFormatting(OldValue);
        "Transformation Type"::"Decimal Formatting":
          NewValue := DecimalFormatting(OldValue);
        "Transformation Type"::Custom:
          OnTransformation(Code,OldValue,NewValue);
      end;

      if "Next Transformation Rule" <> '' then
        if TransformationRule.GET("Next Transformation Rule") then
          exit(TransformationRule.TransformText(NewValue));

      exit(NewValue);
    END;

    LOCAL PROCEDURE TextToTitleCase@17(OldValue@1001 : Text) : Text;
    VAR
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
      exit(CultureInfo.TextInfo.ToTitleCase(OldValue));
    END;

    LOCAL PROCEDURE StringReplace@4(StringToReplace@1000 : Text;OldValue@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      DotNetString@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      NewString@1004 : Text;
    BEGIN
      DotNetString := StringToReplace;
      NewString := DotNetString.Replace(OldValue,NewValue);
      exit(NewString);
    END;

    LOCAL PROCEDURE RegularExpressionReplace@2(StringToReplace@1000 : Text;Pattern@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      NewString@1004 : Text;
    BEGIN
      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      NewString := Regex.Replace(StringToReplace,NewValue);
      exit(NewString);
    END;

    LOCAL PROCEDURE RegularExpressionMatch@21(StringToMatch@1000 : Text;Pattern@1001 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      MatchCollection@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      Match@1007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      Group@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Group";
      Capture@1011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Capture";
      NewString@1004 : Text;
      WholeExpressionGroup@1009 : Boolean;
    BEGIN
      NewString := '';

      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      MatchCollection := Regex.Matches(StringToMatch);
      if ISNULL(MatchCollection) then
        exit(NewString);

      if MatchCollection.Count = 0 then
        exit(NewString);

      WholeExpressionGroup := true;
      foreach Match in MatchCollection do
        foreach Group in Match.Groups do begin
          if WholeExpressionGroup then
            WholeExpressionGroup := false
          else
            foreach Capture in Group.Captures do
              NewString += Capture.Value;
        end;

      exit(NewString);
    END;

    LOCAL PROCEDURE RemoveNonAplhaNumericCharacters@19(OldValue@1003 : Text) : Text;
    VAR
      DotNetChar@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      NewValue@1001 : Text;
      I@1000 : Integer;
    BEGIN
      NewValue := '';
      for I := 1 to STRLEN(OldValue) do begin
        if DotNetChar.IsLetterOrDigit(OldValue[I]) then
          NewValue += FORMAT(OldValue[I]);
      end;

      exit(NewValue);
    END;

    LOCAL PROCEDURE GetDateTime@20(TextValue@1001 : Text) : DateTime;
    VAR
      DotNetDateTime@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      DateTimeValue@1002 : DateTime;
    BEGIN
      DateTimeValue := 0DT;
      DotNetDateTime := DotNetDateTime.DateTime(1);
      if "Data Formatting Culture" = '' then begin
        CultureInfo := CultureInfo.InvariantCulture;
        if not DotNetDateTime.TryParseExact(
             TextValue,
             "Data Format",
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        then
          exit(DateTimeValue);
      end else begin
        CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
        if not DotNetDateTime.TryParse(
             TextValue,
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        then
          exit(DateTimeValue);
      end;
      DateTimeValue := DotNetDateTime;
      exit(DateTimeValue);
    END;

    LOCAL PROCEDURE DateTimeFormatting@36(OldValue@1001 : Text) : Text;
    VAR
      DateTimeValue@1002 : DateTime;
      NewValue@1003 : Text;
    BEGIN
      DateTimeValue := GetDateTime(OldValue);
      if DateTimeValue <> 0DT then
        NewValue := FORMAT(DateTimeValue,0,XmlFormat)
      else
        NewValue := OldValue;
      exit(NewValue);
    END;

    LOCAL PROCEDURE DateFormatting@28(OldValue@1001 : Text) : Text;
    VAR
      DateTimeValue@1002 : DateTime;
      DateValue@1006 : Date;
      NewValue@1003 : Text;
    BEGIN
      DateTimeValue := GetDateTime(OldValue);
      DateValue := DT2DATE(DateTimeValue);
      if DateValue <> 0D then
        NewValue := FORMAT(DateValue,0,XmlFormat)
      else
        NewValue := OldValue;
      exit(NewValue);
    END;

    LOCAL PROCEDURE DecimalFormatting@14(OldValue@1001 : Text) : Text;
    VAR
      TypeHelper@1006 : Codeunit "Type Helper";
      NewDecimalVariant@1000 : Variant;
      NewValue@1003 : Text;
      DummyDecimal@1007 : Decimal;
    BEGIN
      NewValue := OldValue;
      NewDecimalVariant := DummyDecimal;
      TypeHelper.Evaluate(NewDecimalVariant,OldValue,'',"Data Formatting Culture");

      NewValue := FORMAT(NewDecimalVariant,0,XmlFormat);
      exit(NewValue);
    END;

    LOCAL PROCEDURE Substring@7(OldValue@1000 : Text) : Text;
    VAR
      StartPosition@1002 : Integer;
      NewLength@1003 : Integer;
    BEGIN
      StartPosition := SubstringGetStartPosition(OldValue);
      if StartPosition <= 0 then
        exit('');

      NewLength := SubstringGetLength(OldValue,StartPosition);

      if NewLength <= 0 then
        exit('');

      exit(COPYSTR(OldValue,StartPosition,NewLength));
    END;

    [External]
    PROCEDURE GetFourthToSixthSubstringCode@6() : Code[20];
    BEGIN
      exit(FOURTH_TO_SIXTH_CHARTxt);
    END;

    [External]
    PROCEDURE GetUSDateFormatCode@1() : Code[20];
    BEGIN
      exit(USDATEFORMATTxt);
    END;

    [External]
    PROCEDURE GetUSDateTimeFormatCode@44() : Code[20];
    BEGIN
      exit(USDATETIMEFORMATTxt);
    END;

    [External]
    PROCEDURE GetUppercaseCode@10() : Code[20];
    BEGIN
      exit(UPPERCASETxt);
    END;

    [External]
    PROCEDURE GetLowercaseCode@9() : Code[20];
    BEGIN
      exit(LOWERCASETxt);
    END;

    [External]
    PROCEDURE GetTitlecaseCode@12() : Code[20];
    BEGIN
      exit(TITLECASETxt);
    END;

    [External]
    PROCEDURE GetTrimCode@11() : Code[20];
    BEGIN
      exit(TRIMTxt);
    END;

    [External]
    PROCEDURE GetAlphanumericCode@13() : Code[20];
    BEGIN
      exit(ALPHANUMERIC_ONLYTxt);
    END;

    [External]
    PROCEDURE GetDanishDecimalFormatCode@15() : Code[20];
    BEGIN
      exit(DKNUMBERFORMATTxt);
    END;

    [External]
    PROCEDURE GetYYYYMMDDCode@16() : Code[20];
    BEGIN
      exit(YYYYMMDDDateTxt);
    END;

    [External]
    PROCEDURE GetYYYYMMDDHHMMSSCode@41() : Code[20];
    BEGIN
      exit(YYYYMMDDHHMMSSTxt);
    END;

    [External]
    PROCEDURE GetDeleteNOTPROVIDEDCode@23() : Code[20];
    BEGIN
      exit(DeleteNOTPROVIDEDTxt);
    END;

    LOCAL PROCEDURE RemoveLeadingAndEndingQuotes@18(InputText@1000 : Text) : Text;
    VAR
      QuotedText@1002 : Boolean;
      InputTextLength@1001 : Integer;
    BEGIN
      InputTextLength := STRLEN(InputText);
      if InputTextLength < 2 then
        exit(InputText);

      QuotedText := (InputText[1] = '''') and (InputText[InputTextLength] = '''');
      if not QuotedText then
        QuotedText := (InputText[1] = '"') and (InputText[InputTextLength] = '"');

      if QuotedText then
        exit(COPYSTR(InputText,2,InputTextLength - 2));

      exit(InputText);
    END;

    LOCAL PROCEDURE SubstringGetLength@25(OldValue@1000 : Text;StartPosition@1001 : Integer) : Integer;
    VAR
      SearchableText@1002 : Text;
    BEGIN
      if (Length <= 0) and ("Ending Text" = '') then
        exit(STRLEN(OldValue) - StartPosition + 1);

      if Length > 0 then
        exit(Length);

      if "Ending Text" <> '' then begin
        SearchableText := COPYSTR(OldValue,StartPosition,STRLEN(OldValue) - StartPosition + 1);
        exit(STRPOS(SearchableText,RemoveLeadingAndEndingQuotes("Ending Text")) - 1);
      end;

      exit(-1);
    END;

    LOCAL PROCEDURE SubstringGetStartPosition@30(OldValue@1000 : Text) : Integer;
    VAR
      StartingText@1001 : Text;
      StartIndex@1002 : Integer;
    BEGIN
      if ("Start Position" <= 0) and ("Starting Text" = '') then
        exit(1);

      if "Start Position" > 0 then
        exit("Start Position");

      StartingText := RemoveLeadingAndEndingQuotes("Starting Text");
      if StartingText <> '' then begin
        StartIndex := STRPOS(OldValue,StartingText);
        if StartIndex > 0 then
          exit(StartIndex + STRLEN(StartingText));
      end;

      exit(-1);
    END;

    [External]
    PROCEDURE EditNextTransformationRule@22();
    VAR
      TransformationRule@1000 : Record "Transformation Rule";
    BEGIN
      if "Next Transformation Rule" = '' then
        exit;

      TransformationRule.GET("Next Transformation Rule");
      PAGE.RUN(PAGE::"Transformation Rule Card",TransformationRule);
    END;

    [Integration]
    [External]
    PROCEDURE OnTransformation@26(TransformationCode@1000 : Code[20];InputText@1001 : Text;VAR OutputText@1002 : Text);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCreateTransformationRules@24();
    BEGIN
    END;

    LOCAL PROCEDURE XmlFormat@32() : Integer;
    BEGIN
      exit(9);
    END;

    BEGIN
    END.
  }
}

