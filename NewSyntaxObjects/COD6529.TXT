OBJECT Codeunit 6529 Item Tracking Navigate Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemLedgEntry@1061 : Record "Item Ledger Entry";
      ReservEntry@1059 : Record "Reservation Entry";
      MiscArticleInfo@1058 : Record "Misc. Article Information";
      FixedAsset@1057 : Record "Fixed Asset";
      WhseActivLine@1056 : Record "Warehouse Activity Line";
      RgstrdWhseActivLine@1055 : Record "Registered Whse. Activity Line";
      ServItemLine@1054 : Record "Service Item Line";
      Loaner@1053 : Record Loaner;
      ServiceItem@1051 : Record "Service Item";
      ServiceItemComponent@1050 : Record "Service Item Component";
      ServContractLine@1049 : Record "Service Contract Line";
      FiledContractLine@1048 : Record "Filed Contract Line";
      SerialNoInfo@1047 : Record "Serial No. Information";
      LotNoInfo@1046 : Record "Lot No. Information";
      WhseEntry@1045 : Record "Warehouse Entry";
      PostedInvtPutAwayLine@1043 : Record "Posted Invt. Put-away Line";
      PostedInvtPickLine@1042 : Record "Posted Invt. Pick Line";
      JobLedgEntry@1063 : Record "Job Ledger Entry";
      TempPostedWhseRcptLine@1005 : TEMPORARY Record "Posted Whse. Receipt Line";
      TempPostedWhseShptLine@1004 : TEMPORARY Record "Posted Whse. Shipment Line";
      TempPurchRcptHeader@1029 : TEMPORARY Record "Purch. Rcpt. Header";
      TempPurchInvHeader@1028 : TEMPORARY Record "Purch. Inv. Header";
      TempAssemblyLine@1011 : TEMPORARY Record "Assembly Line";
      TempAssemblyHeader@1012 : TEMPORARY Record "Assembly Header";
      TempPostedAssemblyLine@1014 : TEMPORARY Record "Posted Assembly Line";
      TempPostedAssemblyHeader@1013 : TEMPORARY Record "Posted Assembly Header";
      TempPurchCrMemoHeader@1027 : TEMPORARY Record "Purch. Cr. Memo Hdr.";
      TempSalesShptHeader@1026 : TEMPORARY Record "Sales Shipment Header";
      TempSalesInvHeader@1025 : TEMPORARY Record "Sales Invoice Header";
      TempSalesCrMemoHeader@1024 : TEMPORARY Record "Sales Cr.Memo Header";
      TempServShptHeader@1009 : TEMPORARY Record "Service Shipment Header";
      TempServInvHeader@1007 : TEMPORARY Record "Service Invoice Header";
      TempServCrMemoHeader@1006 : TEMPORARY Record "Service Cr.Memo Header";
      TempReturnShipHeader@1031 : TEMPORARY Record "Return Shipment Header";
      TempReturnRcptHeader@1030 : TEMPORARY Record "Return Receipt Header";
      TempTransShipHeader@1023 : TEMPORARY Record "Transfer Shipment Header";
      TempTransRcptHeader@1022 : TEMPORARY Record "Transfer Receipt Header";
      TempProdOrder@1001 : TEMPORARY Record "Production Order";
      TempSalesLine@1062 : TEMPORARY Record "Sales Line";
      TempServLine@1010 : TEMPORARY Record "Service Line";
      TempReqLine@1060 : TEMPORARY Record "Requisition Line";
      TempPurchLine@1020 : TEMPORARY Record "Purchase Line";
      TempItemJnlLine@1019 : TEMPORARY Record "Item Journal Line";
      TempProdOrderLine@1017 : TEMPORARY Record "Prod. Order Line";
      TempProdOrderComp@1016 : TEMPORARY Record "Prod. Order Component";
      TempPlanningComponent@1015 : TEMPORARY Record "Planning Component";
      TempTransLine@1008 : TEMPORARY Record "Transfer Line";
      TempRecordBuffer@1000 : TEMPORARY Record "Record Buffer";
      TempField@1002 : TEMPORARY Record Field;
      TempJobLedgEntry@1064 : TEMPORARY Record "Job Ledger Entry";
      LastEntryNo@1003 : Integer;

    [Internal]
    PROCEDURE FindTrackingRecords@1(SerialNoFilter@1016 : Text;LotNoFilter@1015 : Text;ItemNoFilter@1023 : Text;VariantFilter@1024 : Text);
    VAR
      AssemblyLine@1021 : Record "Assembly Line";
      AssemblyHeader@1022 : Record "Assembly Header";
      PurchRcptHeader@1025 : Record "Purch. Rcpt. Header";
      SalesShptHeader@1020 : Record "Sales Shipment Header";
      ServShptHeader@1018 : Record "Service Shipment Header";
      ReturnShipHeader@1017 : Record "Return Shipment Header";
      ReturnRcptHeader@1014 : Record "Return Receipt Header";
      TransShipHeader@1013 : Record "Transfer Shipment Header";
      TransRcptHeader@1012 : Record "Transfer Receipt Header";
      PostedAssemblyHeader@1001 : Record "Posted Assembly Header";
      ProdOrder@1011 : Record "Production Order";
      SalesLine@1010 : Record "Sales Line";
      ServLine@1019 : Record "Service Line";
      ReqLine@1009 : Record "Requisition Line";
      PurchLine@1008 : Record "Purchase Line";
      ItemJnlLine@1007 : Record "Item Journal Line";
      ProdOrderLine@1004 : Record "Prod. Order Line";
      ProdOrderComp@1003 : Record "Prod. Order Component";
      PlanningComponent@1002 : Record "Planning Component";
      TransLine@1000 : Record "Transfer Line";
      RecRef@1005 : RecordRef;
    BEGIN
      if (SerialNoFilter = '') and (LotNoFilter = '') then
        exit;

      if ItemLedgEntry.READPERMISSION then
        with ItemLedgEntry do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(ItemLedgEntry);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

              case "Document Type" of
                "Document Type"::"Sales Shipment":
                  if SalesShptHeader.READPERMISSION then
                    if SalesShptHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(SalesShptHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempSalesShptHeader := SalesShptHeader;
                      if TempSalesShptHeader.INSERT then;

                      FindPostedWhseShptLine;

                      // Find Invoice if it exists
                      SearchValueEntries;
                    end;
                "Document Type"::"Sales Invoice":
                  FindSalesInvoice("Document No.");
                "Document Type"::"Service Shipment":
                  if ServShptHeader.READPERMISSION then
                    if ServShptHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(ServShptHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempServShptHeader := ServShptHeader;
                      if TempServShptHeader.INSERT then;

                      // Find Invoice if it exists
                      SearchValueEntries;
                    end;
                "Document Type"::"Service Invoice":
                  FindServInvoice("Document No.");
                "Document Type"::"Service Credit Memo":
                  FindServCrMemo("Document No.");
                "Document Type"::"Sales Return Receipt":
                  if ReturnRcptHeader.READPERMISSION then
                    if ReturnRcptHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(ReturnRcptHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempReturnRcptHeader := ReturnRcptHeader;
                      if TempReturnRcptHeader.INSERT then;

                      FindPostedWhseRcptLine;

                      // Find CreditMemo if it exists
                      SearchValueEntries;
                    end;
                "Document Type"::"Sales Credit Memo":
                  FindSalesCrMemo("Document No.");
                "Document Type"::"Purchase Receipt":
                  if PurchRcptHeader.READPERMISSION then
                    if PurchRcptHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(PurchRcptHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempPurchRcptHeader := PurchRcptHeader;
                      if TempPurchRcptHeader.INSERT then;

                      FindPostedWhseRcptLine;

                      // Find Invoice if it exists
                      SearchValueEntries;
                    end;
                "Document Type"::"Purchase Invoice":
                  FindPurchInvoice("Document No.");
                "Document Type"::"Purchase Return Shipment":
                  if ReturnShipHeader.READPERMISSION then
                    if ReturnShipHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(ReturnShipHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempReturnShipHeader := ReturnShipHeader;
                      if TempReturnShipHeader.INSERT then;

                      FindPostedWhseShptLine;

                      // Find CreditMemo if it exists
                      SearchValueEntries;
                    end;
                "Document Type"::"Purchase Credit Memo":
                  FindPurchCrMemo("Document No.");
                "Document Type"::"Transfer Shipment":
                  if TransShipHeader.READPERMISSION then
                    if TransShipHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(TransShipHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempTransShipHeader := TransShipHeader;
                      if TempTransShipHeader.INSERT then;

                      FindPostedWhseShptLine;
                    end;
                "Document Type"::"Transfer Receipt":
                  if TransRcptHeader.READPERMISSION then
                    if TransRcptHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(TransRcptHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempTransRcptHeader := TransRcptHeader;
                      if TempTransRcptHeader.INSERT then;

                      FindPostedWhseRcptLine;
                    end;
                "Document Type"::"Posted Assembly":
                  if PostedAssemblyHeader.READPERMISSION then
                    if PostedAssemblyHeader.GET("Document No.") then begin
                      RecRef.GETTABLE(PostedAssemblyHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempPostedAssemblyHeader := PostedAssemblyHeader;
                      if TempPostedAssemblyHeader.INSERT then;
                    end;
                else
                  if "Entry Type" in ["Entry Type"::Consumption,"Entry Type"::Output] then
                    if ProdOrder.READPERMISSION then begin
                      ProdOrder.SETRANGE(Status,ProdOrder.Status::Released,ProdOrder.Status::Finished);
                      ProdOrder.SETRANGE("No.","Document No.");
                      if ProdOrder.FINDFIRST then begin
                        RecRef.GETTABLE(ProdOrder);
                        InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                        TempProdOrder := ProdOrder;
                        if TempProdOrder.INSERT then;
                      end;
                    end;
              end;
            until NEXT = 0;
        end;

      if ReservEntry.READPERMISSION then
        with ReservEntry do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(ReservEntry);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

              case "Source Type" of
                DATABASE::"Sales Line":
                  if SalesLine.READPERMISSION then
                    if SalesLine.GET("Source Subtype","Source ID","Source Ref. No.") then begin
                      RecRef.GETTABLE(SalesLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempSalesLine := SalesLine;
                      if TempSalesLine.INSERT then;
                    end;
                DATABASE::"Service Line":
                  if ServLine.READPERMISSION then
                    if ServLine.GET("Source Subtype","Source ID","Source Ref. No.") then begin
                      RecRef.GETTABLE(ServLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempServLine := ServLine;
                      if TempServLine.INSERT then;
                    end;
                DATABASE::"Purchase Line":
                  if PurchLine.READPERMISSION then
                    if PurchLine.GET("Source Subtype","Source ID","Source Ref. No.") then begin
                      RecRef.GETTABLE(PurchLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempPurchLine := PurchLine;
                      if TempPurchLine.INSERT then;
                    end;
                DATABASE::"Requisition Line":
                  if ReqLine.READPERMISSION then
                    if ReqLine.GET("Source ID","Source Batch Name","Source Ref. No.") then begin
                      RecRef.GETTABLE(ReqLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempReqLine := ReqLine;
                      if TempReqLine.INSERT then;
                    end;
                DATABASE::"Planning Component":
                  if PlanningComponent.READPERMISSION then
                    if PlanningComponent.GET("Source ID","Source Batch Name","Source Prod. Order Line","Source Ref. No.") then begin
                      RecRef.GETTABLE(PlanningComponent);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempPlanningComponent := PlanningComponent;
                      if TempPlanningComponent.INSERT then;
                    end;
                DATABASE::"Item Journal Line":
                  if ItemJnlLine.READPERMISSION then
                    if ItemJnlLine.GET("Source ID","Source Batch Name","Source Ref. No.") then begin
                      RecRef.GETTABLE(ItemJnlLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempItemJnlLine := ItemJnlLine;
                      if TempItemJnlLine.INSERT then;
                    end;
                DATABASE::"Assembly Line":
                  if AssemblyLine.READPERMISSION then
                    if AssemblyLine.GET("Source Subtype","Source ID","Source Ref. No.") then begin
                      RecRef.GETTABLE(AssemblyLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempAssemblyLine := AssemblyLine;
                      if TempAssemblyLine.INSERT then;
                    end;
                DATABASE::"Assembly Header":
                  if AssemblyHeader.READPERMISSION then
                    if AssemblyHeader.GET("Source Subtype","Source ID") then begin
                      RecRef.GETTABLE(AssemblyHeader);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempAssemblyHeader := AssemblyHeader;
                      if TempAssemblyHeader.INSERT then;
                    end;
                DATABASE::"Prod. Order Line":
                  if ProdOrderLine.READPERMISSION then
                    if ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line") then begin
                      RecRef.GETTABLE(ProdOrderLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempProdOrderLine := ProdOrderLine;
                      if TempProdOrderLine.INSERT then;
                    end;
                DATABASE::"Prod. Order Component":
                  if ProdOrderComp.READPERMISSION then
                    if ProdOrderComp.GET("Source Subtype","Source ID","Source Prod. Order Line","Source Ref. No.") then begin
                      RecRef.GETTABLE(ProdOrderComp);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempProdOrderComp := ProdOrderComp;
                      if TempProdOrderComp.INSERT then;
                    end;
                DATABASE::"Transfer Line":
                  if TransLine.READPERMISSION then
                    if TransLine.GET("Source ID","Source Ref. No.") then begin
                      RecRef.GETTABLE(TransLine);
                      InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

                      TempTransLine := TransLine;
                      if TempTransLine.INSERT then;
                    end;
              end;
            until NEXT = 0;
        end;

      if WhseActivLine.READPERMISSION then
        with WhseActivLine do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(WhseActivLine);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;

      if RgstrdWhseActivLine.READPERMISSION then
        with RgstrdWhseActivLine do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(RgstrdWhseActivLine);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;

      if WhseEntry.READPERMISSION then
        with WhseEntry do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(WhseEntry);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;

      if PostedInvtPutAwayLine.READPERMISSION then
        with PostedInvtPutAwayLine do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(PostedInvtPutAwayLine);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;

      if PostedInvtPickLine.READPERMISSION then
        with PostedInvtPickLine do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(PostedInvtPickLine);
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;

      // Only LotNos
      if LotNoFilter <> '' then
        FindLotNoInfo(LotNoFilter,ItemNoFilter,VariantFilter);

      // Only SerialNos
      if SerialNoFilter <> '' then begin
        FindSerialNoInfo(SerialNoFilter,ItemNoFilter,VariantFilter);

        if MiscArticleInfo.READPERMISSION then
          with MiscArticleInfo do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(MiscArticleInfo);
                InsertBufferRec(RecRef,"Serial No.",'','','');
              until NEXT = 0;
          end;

        if FixedAsset.READPERMISSION then
          with FixedAsset do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(FixedAsset);
                InsertBufferRec(RecRef,"Serial No.",'','','');
              until NEXT = 0;
          end;

        if ServItemLine.READPERMISSION then
          with ServItemLine do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Item No.",ItemNoFilter);
            SETFILTER("Variant Code",VariantFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(ServItemLine);
                InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
              until NEXT = 0;
          end;

        if Loaner.READPERMISSION then
          with Loaner do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Item No.",ItemNoFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(Loaner);
                InsertBufferRec(RecRef,"Serial No.",'',"Item No.",'');
              until NEXT = 0;
          end;

        if ServiceItem.READPERMISSION then
          with ServiceItem do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Item No.",ItemNoFilter);
            SETFILTER("Variant Code",VariantFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(ServiceItem);
                InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
              until NEXT = 0;
          end;

        if ServiceItemComponent.READPERMISSION then
          with ServiceItemComponent do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Parent Service Item No.",ItemNoFilter);
            SETFILTER("Variant Code",VariantFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(ServiceItemComponent);
                InsertBufferRec(RecRef,"Serial No.",'',"Parent Service Item No.","Variant Code");
              until NEXT = 0;
          end;

        if ServContractLine.READPERMISSION then
          with ServContractLine do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Item No.",ItemNoFilter);
            SETFILTER("Variant Code",VariantFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(ServContractLine);
                InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
              until NEXT = 0;
          end;

        if FiledContractLine.READPERMISSION then
          with FiledContractLine do begin
            RESET;
            if SETCURRENTKEY("Serial No.") then;
            SETFILTER("Serial No.",SerialNoFilter);
            SETFILTER("Item No.",ItemNoFilter);
            SETFILTER("Variant Code",VariantFilter);
            if FINDSET then
              repeat
                RecRef.GETTABLE(FiledContractLine);
                InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
              until NEXT = 0;
          end;
      end;

      if JobLedgEntry.READPERMISSION then
        with JobLedgEntry do begin
          RESET;
          if LotNoFilter <> '' then
            if SETCURRENTKEY("Lot No.") then;
          if SerialNoFilter <> '' then
            if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(JobLedgEntry);
              InsertBufferRec(RecRef,"Serial No.","Lot No.",'',"Variant Code");
              TempJobLedgEntry := JobLedgEntry;
              if TempJobLedgEntry.INSERT then;
            until NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE FindLotNoInfo@9(LotNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      if LotNoInfo.READPERMISSION then
        with LotNoInfo do begin
          RESET;
          if SETCURRENTKEY("Lot No.") then;
          SETFILTER("Lot No.",LotNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(LotNoInfo);
              InsertBufferRec(RecRef,'',"Lot No.","Item No.","Variant Code");
            until NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE FindSerialNoInfo@11(SerialNoFilter@1002 : Text;ItemNoFilter@1001 : Text;VariantFilter@1000 : Text);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      if SerialNoInfo.READPERMISSION then
        with SerialNoInfo do begin
          RESET;
          if SETCURRENTKEY("Serial No.") then;
          SETFILTER("Serial No.",SerialNoFilter);
          SETFILTER("Item No.",ItemNoFilter);
          SETFILTER("Variant Code",VariantFilter);
          if FINDSET then
            repeat
              RecRef.GETTABLE(SerialNoInfo);
              InsertBufferRec(RecRef,"Serial No.",'',"Item No.","Variant Code");
            until NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE SearchValueEntries@15();
    VAR
      ValueEntry@1000 : Record "Value Entry";
    BEGIN
      if ValueEntry.READPERMISSION then
        with ValueEntry do begin
          RESET;
          SETCURRENTKEY("Item Ledger Entry No.");
          SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          SETRANGE("Entry Type","Entry Type"::"Direct Cost");
          SETFILTER("Document Type",'<>%1',ItemLedgEntry."Document Type");
          if FINDSET then
            repeat
              case "Document Type" of
                "Document Type"::"Sales Invoice":
                  FindSalesInvoice("Document No.");
                "Document Type"::"Sales Credit Memo":
                  FindSalesCrMemo("Document No.");
                "Document Type"::"Service Invoice":
                  FindServInvoice("Document No.");
                "Document Type"::"Service Credit Memo":
                  FindServCrMemo("Document No.");
                "Document Type"::"Purchase Invoice":
                  FindPurchInvoice("Document No.");
                "Document Type"::"Purchase Credit Memo":
                  FindPurchCrMemo("Document No.");
              end;
            until NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE FindSalesInvoice@10(DocumentNo@1002 : Code[20]);
    VAR
      SalesInvHeader@1000 : Record "Sales Invoice Header";
      RecRef@1001 : RecordRef;
    BEGIN
      if SalesInvHeader.READPERMISSION then
        if SalesInvHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(SalesInvHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempSalesInvHeader := SalesInvHeader;
          if TempSalesInvHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindSalesCrMemo@5(DocumentNo@1000 : Code[20]);
    VAR
      SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header";
      RecRef@1001 : RecordRef;
    BEGIN
      if SalesCrMemoHeader.READPERMISSION then
        if SalesCrMemoHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(SalesCrMemoHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempSalesCrMemoHeader := SalesCrMemoHeader;
          if TempSalesCrMemoHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindServInvoice@13(DocumentNo@1002 : Code[20]);
    VAR
      ServInvHeader@1000 : Record "Service Invoice Header";
      RecRef@1001 : RecordRef;
    BEGIN
      if ServInvHeader.READPERMISSION then
        if ServInvHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(ServInvHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempServInvHeader := ServInvHeader;
          if TempServInvHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindServCrMemo@22(DocumentNo@1000 : Code[20]);
    VAR
      ServCrMemoHeader@1002 : Record "Service Cr.Memo Header";
      RecRef@1001 : RecordRef;
    BEGIN
      if ServCrMemoHeader.READPERMISSION then
        if ServCrMemoHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(ServCrMemoHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempServCrMemoHeader := ServCrMemoHeader;
          if TempServCrMemoHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindPurchInvoice@29(DocumentNo@1002 : Code[20]);
    VAR
      PurchInvHeader@1000 : Record "Purch. Inv. Header";
      RecRef@1001 : RecordRef;
    BEGIN
      if PurchInvHeader.READPERMISSION then
        if PurchInvHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(PurchInvHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempPurchInvHeader := PurchInvHeader;
          if TempPurchInvHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindPurchCrMemo@30(DocumentNo@1000 : Code[20]);
    VAR
      PurchCrMemoHeader@1002 : Record "Purch. Cr. Memo Hdr.";
      RecRef@1001 : RecordRef;
    BEGIN
      if PurchCrMemoHeader.READPERMISSION then
        if PurchCrMemoHeader.GET(DocumentNo) then begin
          RecRef.GETTABLE(PurchCrMemoHeader);
          with ItemLedgEntry do
            InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

          TempPurchCrMemoHeader := PurchCrMemoHeader;
          if TempPurchCrMemoHeader.INSERT then;
        end;
    END;

    LOCAL PROCEDURE FindPostedWhseShptLine@6();
    VAR
      PostedWhseShptLine@1001 : Record "Posted Whse. Shipment Line";
      RecRef@1000 : RecordRef;
    BEGIN
      if PostedWhseShptLine.READPERMISSION then
        with PostedWhseShptLine do begin
          RESET;
          SETCURRENTKEY("Posted Source No.","Posting Date");
          SETRANGE("Posted Source No.",ItemLedgEntry."Document No.");
          SETRANGE("Posting Date",ItemLedgEntry."Posting Date");
          SETRANGE("Item No.",ItemLedgEntry."Item No.");
          SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
          SETRANGE("Source Line No.",ItemLedgEntry."Document Line No.");
          if FINDFIRST then begin
            RecRef.GETTABLE(PostedWhseShptLine);
            with ItemLedgEntry do
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

            TempPostedWhseShptLine := PostedWhseShptLine;
            if TempPostedWhseShptLine.INSERT then;
          end;
        end;
    END;

    LOCAL PROCEDURE FindPostedWhseRcptLine@8();
    VAR
      PostedWhseRcptLine@1001 : Record "Posted Whse. Receipt Line";
      RecRef@1000 : RecordRef;
    BEGIN
      if PostedWhseRcptLine.READPERMISSION then
        with PostedWhseRcptLine do begin
          RESET;
          SETCURRENTKEY("Posted Source No.","Posting Date");
          SETRANGE("Posted Source No.",ItemLedgEntry."Document No.");
          SETRANGE("Posting Date",ItemLedgEntry."Posting Date");
          SETRANGE("Item No.",ItemLedgEntry."Item No.");
          SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
          SETRANGE("Source Line No.",ItemLedgEntry."Document Line No.");
          if FINDFIRST then begin
            RecRef.GETTABLE(PostedWhseRcptLine);
            with ItemLedgEntry do
              InsertBufferRec(RecRef,"Serial No.","Lot No.","Item No.","Variant Code");

            TempPostedWhseRcptLine := PostedWhseRcptLine;
            if TempPostedWhseRcptLine.INSERT then;
          end;
        end;
    END;

    [External]
    PROCEDURE Show@4(TableNo@1000 : Integer);
    BEGIN
      case TableNo of
        DATABASE::"Item Ledger Entry":
          PAGE.RUN(0,ItemLedgEntry);
        DATABASE::"Reservation Entry":
          PAGE.RUN(0,ReservEntry);
        DATABASE::"Misc. Article Information":
          PAGE.RUN(0,MiscArticleInfo);
        DATABASE::"Fixed Asset":
          PAGE.RUN(0,FixedAsset);
        DATABASE::"Warehouse Activity Line":
          PAGE.RUN(0,WhseActivLine);
        DATABASE::"Registered Whse. Activity Line":
          PAGE.RUN(0,RgstrdWhseActivLine);
        DATABASE::"Service Item Line":
          PAGE.RUN(0,ServItemLine);
        DATABASE::Loaner:
          PAGE.RUN(0,Loaner);
        DATABASE::"Service Item":
          PAGE.RUN(0,ServiceItem);
        DATABASE::"Service Item Component":
          PAGE.RUN(0,ServiceItemComponent);
        DATABASE::"Service Contract Line":
          PAGE.RUN(0,ServContractLine);
        DATABASE::"Filed Contract Line":
          PAGE.RUN(0,FiledContractLine);
        DATABASE::"Serial No. Information":
          PAGE.RUN(0,SerialNoInfo);
        DATABASE::"Lot No. Information":
          PAGE.RUN(0,LotNoInfo);
        DATABASE::"Warehouse Entry":
          PAGE.RUN(0,WhseEntry);
        DATABASE::"Posted Whse. Shipment Line":
          PAGE.RUN(0,TempPostedWhseShptLine);
        DATABASE::"Posted Whse. Receipt Line":
          PAGE.RUN(0,TempPostedWhseRcptLine);
        DATABASE::"Posted Invt. Put-away Line":
          PAGE.RUN(0,PostedInvtPutAwayLine);
        DATABASE::"Posted Invt. Pick Line":
          PAGE.RUN(0,PostedInvtPickLine);
        DATABASE::"Purch. Rcpt. Header":
          PAGE.RUN(0,TempPurchRcptHeader);
        DATABASE::"Purch. Inv. Header":
          PAGE.RUN(0,TempPurchInvHeader);
        DATABASE::"Purch. Cr. Memo Hdr.":
          PAGE.RUN(0,TempPurchCrMemoHeader);
        DATABASE::"Sales Shipment Header":
          PAGE.RUN(0,TempSalesShptHeader);
        DATABASE::"Sales Invoice Header":
          PAGE.RUN(0,TempSalesInvHeader);
        DATABASE::"Sales Cr.Memo Header":
          PAGE.RUN(0,TempSalesCrMemoHeader);
        DATABASE::"Service Shipment Header":
          PAGE.RUN(0,TempServShptHeader);
        DATABASE::"Service Invoice Header":
          PAGE.RUN(0,TempServInvHeader);
        DATABASE::"Service Cr.Memo Header":
          PAGE.RUN(0,TempServCrMemoHeader);
        DATABASE::"Transfer Shipment Header":
          PAGE.RUN(0,TempTransShipHeader);
        DATABASE::"Return Shipment Header":
          PAGE.RUN(0,TempReturnShipHeader);
        DATABASE::"Return Receipt Header":
          PAGE.RUN(0,TempReturnRcptHeader);
        DATABASE::"Transfer Receipt Header":
          PAGE.RUN(0,TempTransRcptHeader);
        DATABASE::"Production Order":
          PAGE.RUN(0,TempProdOrder);
        DATABASE::"Sales Line":
          PAGE.RUN(0,TempSalesLine);
        DATABASE::"Service Line":
          PAGE.RUN(0,TempServLine);
        DATABASE::"Purchase Line":
          PAGE.RUN(0,TempPurchLine);
        DATABASE::"Requisition Line":
          PAGE.RUN(0,TempReqLine);
        DATABASE::"Item Journal Line":
          PAGE.RUN(0,TempItemJnlLine);
        DATABASE::"Prod. Order Line":
          PAGE.RUN(0,TempProdOrderLine);
        DATABASE::"Prod. Order Component":
          PAGE.RUN(0,TempProdOrderComp);
        DATABASE::"Planning Component":
          PAGE.RUN(0,TempPlanningComponent);
        DATABASE::"Transfer Line":
          PAGE.RUN(0,TempTransLine);
        DATABASE::"Job Ledger Entry":
          PAGE.RUN(0,TempJobLedgEntry);
        DATABASE::"Assembly Line":
          PAGE.RUN(0,TempAssemblyLine);
        DATABASE::"Assembly Header":
          PAGE.RUN(0,TempAssemblyHeader);
        DATABASE::"Posted Assembly Line":
          PAGE.RUN(0,TempPostedAssemblyLine);
        DATABASE::"Posted Assembly Header":
          PAGE.RUN(0,TempPostedAssemblyHeader);
      end;
    END;

    LOCAL PROCEDURE InsertBufferRec@3(RecRef@1000 : RecordRef;SerialNo@1007 : Code[20];LotNo@1006 : Code[20];ItemNo@1005 : Code[20];Variant@1004 : Code[10]);
    VAR
      KeyFldRef@1003 : FieldRef;
      KeyRef1@1002 : KeyRef;
      i@1001 : Integer;
    BEGIN
      if (SerialNo = '') and (LotNo = '') then
        exit;

      TempRecordBuffer.SETRANGE("Record Identifier",RecRef.RECORDID);
      TempRecordBuffer.SETRANGE("Serial No.",SerialNo);
      TempRecordBuffer.SETRANGE("Lot No.",LotNo);
      TempRecordBuffer.SETRANGE("Item No.",ItemNo);
      TempRecordBuffer.SETRANGE("Variant Code",Variant);
      if not TempRecordBuffer.FIND('-') then begin
        TempRecordBuffer.INIT;
        TempRecordBuffer."Entry No." := LastEntryNo + 10;
        LastEntryNo := TempRecordBuffer."Entry No.";

        TempRecordBuffer."Table No." := RecRef.NUMBER;
        TempRecordBuffer."Table Name" := GetTableCaption(RecRef.NUMBER);
        TempRecordBuffer."Record Identifier" := RecRef.RECORDID;
        TempRecordBuffer."Search Record ID" := FORMAT(TempRecordBuffer."Record Identifier");

        KeyRef1 := RecRef.KEYINDEX(1);
        for i := 1 to KeyRef1.FIELDCOUNT do begin
          KeyFldRef := KeyRef1.FIELDINDEX(i);
          if i = 1 then
            TempRecordBuffer."Primary Key" :=
              STRSUBSTNO('%1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER))
          else
            if MAXSTRLEN(TempRecordBuffer."Primary Key") >
               STRLEN(TempRecordBuffer."Primary Key") +
               STRLEN(STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)))
            then
              TempRecordBuffer."Primary Key" :=
                COPYSTR(
                  TempRecordBuffer."Primary Key" +
                  STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)),
                  1,MAXSTRLEN(TempRecordBuffer."Primary Key"));
          case i of
            1:
              begin
                TempRecordBuffer."Primary Key Field 1 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 1 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              end;
            2:
              begin
                TempRecordBuffer."Primary Key Field 2 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 2 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              end;
            3:
              begin
                TempRecordBuffer."Primary Key Field 3 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 3 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              end;
          end;
        end;

        TempRecordBuffer."Serial No." := SerialNo;
        TempRecordBuffer."Lot No." := LotNo;
        TempRecordBuffer."Item No." := ItemNo;
        TempRecordBuffer."Variant Code" := Variant;

        TempRecordBuffer.INSERT;
      end;
    END;

    [External]
    PROCEDURE Collect@2(VAR RecordBuffer@1000 : TEMPORARY Record "Record Buffer");
    BEGIN
      RecordBuffer.RESET;
      RecordBuffer.DELETEALL;

      TempRecordBuffer.RESET;
      if TempRecordBuffer.FIND('-') then
        repeat
          RecordBuffer := TempRecordBuffer;
          RecordBuffer.INSERT;
        until TempRecordBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTableCaption@12(TableNumber@1001 : Integer) : Text[80];
    VAR
      AllObjWithCaption@1000 : Record AllObjWithCaption;
    BEGIN
      AllObjWithCaption.RESET;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);
      AllObjWithCaption.SETRANGE("Object ID",TableNumber);
      if AllObjWithCaption.FINDFIRST then
        exit(AllObjWithCaption."Object Caption");

      exit('');
    END;

    LOCAL PROCEDURE FormatValue@17(VAR FldRef@1000 : FieldRef;TableNumber@1005 : Integer) : Text[250];
    VAR
      Field@1004 : Record Field;
      OptionNo@1001 : Integer;
      OptionStr@1002 : Text[1024];
      i@1003 : Integer;
    BEGIN
      GetField(TableNumber,FldRef.NUMBER,Field);
      if Field.Type = Field.Type::Option then begin
        OptionNo := FldRef.VALUE;
        OptionStr := FORMAT(FldRef.OPTIONCAPTION);
        for i := 1 to OptionNo do
          OptionStr := COPYSTR(OptionStr,STRPOS(OptionStr,',') + 1);
        if STRPOS(OptionStr,',') > 0 then
          if STRPOS(OptionStr,',') = 1 then
            OptionStr := ''
          else
            OptionStr := COPYSTR(OptionStr,1,STRPOS(OptionStr,',') - 1);
        exit(OptionStr);
      end;
      exit(FORMAT(FldRef.VALUE));
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record Field);
    VAR
      Field@1000 : Record Field;
    BEGIN
      if not TempField.GET(TableNumber,FieldNumber) then begin
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      end;
      Field2 := TempField;
    END;

    BEGIN
    END.
  }
}

