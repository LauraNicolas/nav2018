OBJECT Table 1222 Data Exch. Def
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if Name = '' then
                 Name := Code;

               CheckPositivePayExportFileType;
             END;

    OnModify=BEGIN
               CheckPositivePayExportFileType;
             END;

    OnDelete=VAR
               DataExchLineDef@1000 : Record "Data Exch. Line Def";
             BEGIN
               DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
               DataExchLineDef.DELETEALL(true);
             END;

    CaptionML=ENU=Data Exch. Def;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text100       ;CaptionML=ENU=Name }
    { 3   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export,Generic Export;
                                                   OptionString="Bank Statement Import","Payment Export","Payroll Import","Generic Import","Positive Pay Export","Generic Export" }
    { 4   ;   ;Reading/Writing XMLport;Integer    ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(XMLport));
                                                   CaptionML=ENU=Reading/Writing XMLport }
    { 5   ;   ;Header Lines        ;Integer       ;CaptionML=ENU=Header Lines }
    { 8   ;   ;Header Tag          ;Text250       ;CaptionML=ENU=Header Tag }
    { 9   ;   ;Footer Tag          ;Text250       ;CaptionML=ENU=Footer Tag }
    { 10  ;   ;Column Separator    ;Option        ;InitValue=Comma;
                                                   CaptionML=ENU=Column Separator;
                                                   OptionCaptionML=ENU=,Tab,Semicolon,Comma,Space,Custom;
                                                   OptionString=,Tab,Semicolon,Comma,Space,Custom }
    { 11  ;   ;File Encoding       ;Option        ;InitValue=WINDOWS;
                                                   CaptionML=ENU=File Encoding;
                                                   OptionCaptionML=ENU=MS-DOS,UTF-8,UTF-16,WINDOWS;
                                                   OptionString="MS-DOS","UTF-8","UTF-16",WINDOWS }
    { 13  ;   ;File Type           ;Option        ;CaptionML=ENU=File Type;
                                                   OptionCaptionML=ENU=Xml,Variable Text,Fixed Text,Json;
                                                   OptionString=Xml,"Variable Text","Fixed Text",Json }
    { 14  ;   ;Ext. Data Handling Codeunit;Integer;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit));
                                                   CaptionML=ENU=Ext. Data Handling Codeunit }
    { 15  ;   ;Reading/Writing Codeunit;Integer   ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit));
                                                   CaptionML=ENU=Reading/Writing Codeunit }
    { 16  ;   ;Validation Codeunit ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit));
                                                   CaptionML=ENU=Validation Codeunit }
    { 17  ;   ;Data Handling Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit));
                                                   CaptionML=ENU=Data Handling Codeunit }
    { 18  ;   ;User Feedback Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit));
                                                   CaptionML=ENU=User Feedback Codeunit }
    { 19  ;   ;Custom Column Separator;Text1      ;CaptionML=ENU=Custom Column Separator }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ColumnSeparatorMissingErr@1001 : TextConst 'ENU=Column separator is missing in the definition.';
      PositivePayFileTypeErr@1000 : TextConst 'ENU=The positive pay file that you are exporting must be of type Fixed Text or Variable Text.';

    [External]
    PROCEDURE InsertRec@1(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;HeaderCount@1004 : Integer;HeaderTag@1005 : Text[250];FooterTag@1006 : Text[250]);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      VALIDATE(Type,NewType);
      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      VALIDATE("Header Lines",HeaderCount);
      VALIDATE("Header Tag",HeaderTag);
      VALIDATE("Footer Tag",FooterTag);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecForExport@4(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;FileType@1004 : Option);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      "File Type" := FileType;
      Type := NewType;
      VALIDATE("File Type",FileType);
      VALIDATE(Type,NewType);

      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      INSERT;
    END;

    [External]
    PROCEDURE ColumnSeparatorChar@3() : Text;
    VAR
      SeparatorChar@1000 : Text;
    BEGIN
      case "Column Separator" of
        "Column Separator"::Tab:
          begin
            SeparatorChar[1] := 9;
            exit(SeparatorChar);
          end;
        "Column Separator"::Semicolon:
          exit(';');
        "Column Separator"::Comma:
          exit(',');
        "Column Separator"::Space:
          exit(' ');
        "Column Separator"::Custom:
          begin
            if "Custom Column Separator" <> '' then
              exit("Custom Column Separator");
            ERROR(ColumnSeparatorMissingErr);
          end;
        else
          ERROR(ColumnSeparatorMissingErr)
      end
    END;

    [External]
    PROCEDURE CheckEnableDisableIsNonXMLFileType@9() : Boolean;
    BEGIN
      exit(not ("File Type" in ["File Type"::Xml,"File Type"::Json]))
    END;

    [External]
    PROCEDURE CheckEnableDisableIsImportType@18() : Boolean;
    BEGIN
      if Type in [Type::"Payment Export",Type::"Positive Pay Export"] then
        exit(false);
      exit(not ("File Type" in ["File Type"::Xml,"File Type"::Json]))
    END;

    [External]
    PROCEDURE CheckEnableDisableIsBankStatementImportType@15() : Boolean;
    BEGIN
      exit(Type = Type::"Bank Statement Import");
    END;

    [External]
    PROCEDURE CheckEnableDisableDelimitedFileType@8() : Boolean;
    BEGIN
      exit("File Type" = "File Type"::"Variable Text");
    END;

    [External]
    PROCEDURE PositivePayUpdateCodeunits@2() : Boolean;
    BEGIN
      if Type = Type::"Positive Pay Export" then begin
        "Validation Codeunit" := CODEUNIT::"Exp. Validation Pos. Pay";
        "Reading/Writing Codeunit" := CODEUNIT::"Exp. Writing Pos. Pay";
        "Reading/Writing XMLport" := XMLPORT::"Export Generic Fixed Width";
        "Ext. Data Handling Codeunit" := CODEUNIT::"Exp. External Data Pos. Pay";
        "User Feedback Codeunit" := CODEUNIT::"Exp. User Feedback Pos. Pay";
      end else begin
        "Validation Codeunit" := 0;
        "Reading/Writing Codeunit" := 0;
        "Reading/Writing XMLport" := 0;
        "Ext. Data Handling Codeunit" := 0;
        "User Feedback Codeunit" := 0;
      end;
      exit(Type = Type::"Positive Pay Export");
    END;

    [External]
    PROCEDURE ProcessDataExchange@6(VAR DataExch@1000 : Record "Data Exch.");
    VAR
      DataExchLineDef@1003 : Record "Data Exch. Line Def";
      DataExchMapping@1002 : Record "Data Exch. Mapping";
    BEGIN
      if "Data Handling Codeunit" <> 0 then
        CODEUNIT.RUN("Data Handling Codeunit",DataExch);

      DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
      DataExchLineDef.SETRANGE("Parent Code",'');
      DataExchLineDef.FINDSET;

      repeat
        DataExchMapping.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
        DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
        DataExchMapping.FINDSET;

        repeat
          if DataExchMapping."Pre-Mapping Codeunit" <> 0 then
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          if DataExchMapping."Mapping Codeunit" <> 0 then
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          if DataExchMapping."Post-Mapping Codeunit" <> 0 then
            CODEUNIT.RUN(DataExchMapping."Post-Mapping Codeunit",DataExch);
        until DataExchMapping.NEXT = 0;
      until DataExchLineDef.NEXT = 0;
    END;

    LOCAL PROCEDURE IsFixedOrVariableText@20() : Boolean;
    BEGIN
      exit("File Type" in ["File Type"::"Fixed Text","File Type"::"Variable Text"]);
    END;

    LOCAL PROCEDURE CheckPositivePayExportFileType@22();
    BEGIN
      if Type <> Type::"Positive Pay Export" then
        exit;

      if not IsFixedOrVariableText then
        ERROR(PositivePayFileTypeErr);
    END;

    BEGIN
    END.
  }
}

