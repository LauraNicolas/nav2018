OBJECT Codeunit 5064 Email Logging Dispatcher
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    OnRun=VAR
            MarketingSetup@1003 : Record "Marketing Setup";
            StorageFolder@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";
            QueueFolder@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";
            WebCredentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
          BEGIN
            if ISNULLGUID(ID) then
              exit;

            SetErrorContext(Text101);
            CheckSetup(MarketingSetup);

            SetErrorContext(Text102);
            if MarketingSetup."Exchange Account User Name" <> '' then
              MarketingSetup.CreateExchangeAccountCredentials(WebCredentials);

            if not ExchangeWebServicesServer.Initialize2010(MarketingSetup."Autodiscovery E-Mail Address",
                 MarketingSetup."Exchange Service URL",WebCredentials,true)
            then
              ERROR(Text001);

            SetErrorContext(Text103);
            if not ExchangeWebServicesServer.GetEmailFolder(MarketingSetup.GetQueueFolderUID,QueueFolder) then
              ERROR(Text002,MarketingSetup."Queue Folder Path");

            SetErrorContext(Text104);
            if not ExchangeWebServicesServer.GetEmailFolder(MarketingSetup.GetStorageFolderUID,StorageFolder) then
              ERROR(Text002,MarketingSetup."Storage Folder Path");

            RunEMailBatch(MarketingSetup."Email Batch Size",QueueFolder,StorageFolder);
          END;

  }
  CODE
  {
    VAR
      ExchangeWebServicesServer@1012 : Codeunit "Exchange Web Services Server";
      Text001@1001 : TextConst 'ENU=Autodiscovery of exchange service failed.';
      Text002@1000 : TextConst 'ENU=The %1 folder does not exist. Verify that the path to the folder is correct in the Marketing Setup window.';
      Text003@1003 : TextConst 'ENU=The queue or storage folder has not been initialized. Enter the folder path in the Marketing Setup window.';
      Text101@1004 : TextConst 'ENU=Validating setup';
      Text102@1005 : TextConst 'ENU=Initialization and autodiscovery of Exchange web service is in progress';
      Text103@1006 : TextConst 'ENU=Opening queue folder';
      Text104@1007 : TextConst 'ENU=Opening storage folder';
      Text105@1008 : TextConst 'ENU=Reading email messages';
      Text106@1009 : TextConst 'ENU=Checking next email message';
      Text107@1010 : TextConst 'ENU=Logging email messages';
      Text108@1011 : TextConst 'ENU=Deleting email message from queue';
      ErrorContext@1002 : Text;
      Text109@1014 : TextConst 'ENU=The interaction template for email messages has not been specified in the Interaction Template Setup window.';
      Text110@1013 : TextConst 'ENU=An interaction template for email messages has been specified in the Interaction Template Setup window, but the template does not exist.';

    [Internal]
    PROCEDURE CheckSetup@18(VAR MarketingSetup@1001 : Record "Marketing Setup");
    VAR
      ErrorMsg@1000 : Text;
    BEGIN
      if not CheckInteractionTemplateSetup(ErrorMsg) then
        ERROR(ErrorMsg);

      MarketingSetup.GET;
      if not (MarketingSetup."Queue Folder UID".HASVALUE and MarketingSetup."Storage Folder UID".HASVALUE) then
        ERROR(Text003);

      MarketingSetup.TESTFIELD("Autodiscovery E-Mail Address");
    END;

    [Internal]
    PROCEDURE RunEMailBatch@2(BatchSize@1000 : Integer;VAR QueueFolder@1009 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageFolder@1008 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder");
    VAR
      QueueFindResults@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IFindEmailsResults";
      QueueEnumerator@1003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      QueueMessage@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      EmailsLeftInBatch@1005 : Integer;
      PageSize@1001 : Integer;
    BEGIN
      EmailsLeftInBatch := BatchSize;
      repeat
        SetErrorContext(Text105);

        PageSize := 50;
        if (BatchSize <> 0) and (EmailsLeftInBatch < PageSize) then
          PageSize := EmailsLeftInBatch;

        // Keep using zero offset, since all processed messages are deleted from the queue folder
        QueueFindResults := QueueFolder.FindEmailMessages(PageSize,0);
        QueueEnumerator := QueueFindResults.GetEnumerator;
        while QueueEnumerator.MoveNext do begin
          QueueMessage := QueueEnumerator.Current;
          ProcessMessage(QueueMessage,StorageFolder);
          SetErrorContext(Text108);
          QueueMessage.Delete;
        end;

        EmailsLeftInBatch := EmailsLeftInBatch - PageSize;
      until (not QueueFindResults.MoreAvailable) or ((BatchSize <> 0) and (EmailsLeftInBatch <= 0));
    END;

    [External]
    PROCEDURE GetErrorContext@1() : Text;
    BEGIN
      exit(ErrorContext);
    END;

    [External]
    PROCEDURE SetErrorContext@5(NewContext@1000 : Text);
    BEGIN
      ErrorContext := NewContext;
    END;

    [External]
    PROCEDURE ItemLinkedFromAttachment@10(MessageId@1002 : Text;VAR Attachment@1000 : Record Attachment) : Boolean;
    BEGIN
      Attachment.SETRANGE("Email Message Checksum",Attachment.Checksum(MessageId));

      if not Attachment.FINDSET then
        exit(false);
      repeat
        if Attachment.GetMessageID = MessageId then
          exit(true);
      until (Attachment.NEXT = 0);
      exit(false);
    END;

    [External]
    PROCEDURE AttachmentRecordAlreadyExists@17(AttachmentNo@1002 : Text;VAR Attachment@1003 : Record Attachment) : Boolean;
    VAR
      No@1001 : Integer;
    BEGIN
      if EVALUATE(No,AttachmentNo) then
        exit(Attachment.GET(No));
      exit(false);
    END;

    LOCAL PROCEDURE SalespersonRecipients@12(Message@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR SegLine@1001 : Record "Segment Line") : Boolean;
    VAR
      RecepientEnumerator@1002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Recepient@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
      RecepientAddress@1007 : Text;
    BEGIN
      RecepientEnumerator := Message.Recipients.GetEnumerator;
      while RecepientEnumerator.MoveNext do begin
        Recepient := RecepientEnumerator.Current;
        RecepientAddress := Recepient.Address;
        if IsSalesperson(RecepientAddress,SegLine."Salesperson Code") then begin
          SegLine.INSERT;
          SegLine."Line No." := SegLine."Line No." + 1;
        end;
      end;
      exit(not SegLine.ISEMPTY);
    END;

    LOCAL PROCEDURE ContactRecipients@11(Message@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR SegLine@1001 : Record "Segment Line") : Boolean;
    VAR
      RecepientEnumerator@1004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      RecepientAddress@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
    BEGIN
      RecepientEnumerator := Message.Recipients.GetEnumerator;
      while RecepientEnumerator.MoveNext do begin
        RecepientAddress := RecepientEnumerator.Current;
        if IsContact(RecepientAddress.Address,SegLine) then begin
          SegLine.INSERT;
          SegLine."Line No." := SegLine."Line No." + 1;
        end;
      end;
      exit(not SegLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsMessageToLog@3(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";StorageFolder@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR SegLine@1003 : Record "Segment Line";VAR Attachment@1008 : Record Attachment) : Boolean;
    VAR
      StorageMessage@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      Sender@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
      SenderAddress@1001 : Text;
      MessageId@1006 : Text;
    BEGIN
      if QueueMessage.IsSensitive then
        exit(false);

      Sender := QueueMessage.SenderAddress;
      if Sender.IsEmpty or (QueueMessage.RecipientsCount = 0) then
        exit(false);

      if ExchangeWebServicesServer.IdenticalMailExists(QueueMessage,StorageFolder,StorageMessage) then begin
        MessageId := StorageMessage.Id;
        StorageMessage.Delete;
        if ItemLinkedFromAttachment(MessageId,Attachment) then
          exit(true);
      end;

      if AttachmentRecordAlreadyExists(QueueMessage.NavAttachmentNo,Attachment) then
        exit(true);

      // Check if in- or out-bound and store sender and recipients in segment line(s)
      SenderAddress := Sender.Address;
      if IsSalesperson(SenderAddress,SegLine."Salesperson Code") then begin
        SegLine."Information Flow" := SegLine."Information Flow"::Outbound;
        if not ContactRecipients(QueueMessage,SegLine) then
          exit(false);
      end else begin
        if IsContact(SenderAddress,SegLine) then begin
          SegLine."Information Flow" := SegLine."Information Flow"::Inbound;
          if not SalespersonRecipients(QueueMessage,SegLine) then
            exit(false);
        end else
          exit(false);
      end;

      exit(not SegLine.ISEMPTY);
    END;

    [External]
    PROCEDURE UpdateSegLine@15(VAR SegLine@1000 : Record "Segment Line";Emails@1001 : Code[10];Subject@1002 : Text;DateSent@1005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";DateReceived@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";AttachmentNo@1003 : Integer);
    VAR
      LineDate@1007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTimeKind@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
      InformationFlow@1004 : Integer;
    BEGIN
      InformationFlow := SegLine."Information Flow";
      SegLine.VALIDATE("Interaction Template Code",Emails);
      SegLine."Information Flow" := InformationFlow;
      SegLine."Correspondence Type" := SegLine."Correspondence Type"::Email;
      SegLine.Description := COPYSTR(Subject,1,MAXSTRLEN(SegLine.Description));

      if SegLine."Information Flow" = SegLine."Information Flow"::Outbound then begin
        LineDate := DateSent;
        SegLine."Initiated By" := SegLine."Initiated By"::Us;
      end else begin
        LineDate := DateReceived;
        SegLine."Initiated By" := SegLine."Initiated By"::Them;
      end;

      // The date received from Exchange is UTC and to record the UTC date and time
      // using the AL functions requires datetime to be of the local date time kind.
      LineDate := LineDate.DateTime(LineDate.Ticks,DateTimeKind.Local);
      SegLine.Date := DT2DATE(LineDate);
      SegLine."Time of Interaction" := DT2TIME(LineDate);

      SegLine.Subject := COPYSTR(Subject,1,MAXSTRLEN(SegLine.Subject));
      SegLine."Attachment No." := AttachmentNo;
      SegLine.MODIFY;
    END;

    LOCAL PROCEDURE LogMessageAsInteraction@4(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";StorageFolder@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR SegLine@1002 : Record "Segment Line";VAR Attachment@1006 : Record Attachment);
    VAR
      InteractLogEntry@1009 : Record "Interaction Log Entry";
      InteractionTemplateSetup@1011 : Record "Interaction Template Setup";
      StorageMessage@1012 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      OStream@1004 : OutStream;
      Subject@1003 : Text;
      EMailMessageUrl@1007 : Text;
      AttachmentNo@1005 : Integer;
      NextInteractLogEntryNo@1013 : Integer;
    BEGIN
      if not SegLine.ISEMPTY then begin
        Subject := QueueMessage.Subject;

        Attachment.RESET;
        Attachment.LOCKTABLE;
        if Attachment.FINDLAST then
          AttachmentNo := Attachment."No." + 1
        else
          AttachmentNo := 1;

        Attachment.INIT;
        Attachment."No." := AttachmentNo;
        Attachment.INSERT;

        InteractionTemplateSetup.GET;
        SegLine.RESET;
        SegLine.FINDSET(true);
        repeat
          UpdateSegLine(
            SegLine,InteractionTemplateSetup."E-Mails",Subject,QueueMessage.DateTimeSent,QueueMessage.DateTimeReceived,
            Attachment."No.");
        until SegLine.NEXT = 0;

        InteractLogEntry.LOCKTABLE;
        if InteractLogEntry.FINDLAST then
          NextInteractLogEntryNo := InteractLogEntry."Entry No.";
        if SegLine.FINDSET then
          repeat
            NextInteractLogEntryNo := NextInteractLogEntryNo + 1;
            InsertInteractionLogEntry(SegLine,NextInteractLogEntryNo);
          until SegLine.NEXT = 0;
      end;

      if Attachment."No." <> 0 then begin
        StorageMessage := QueueMessage.CopyToFolder(StorageFolder);
        Attachment.LinkToMessage(StorageMessage.Id,StorageMessage.EntryId,true);

        StorageMessage.NavAttachmentNo := FORMAT(Attachment."No.");
        StorageMessage.Update;

        Attachment."Email Message Url".CREATEOUTSTREAM(OStream);
        EMailMessageUrl := StorageMessage.LinkUrl;
        if EMailMessageUrl <> '' then
          OStream.WRITE(EMailMessageUrl);
        Attachment.MODIFY;

        COMMIT;
      end;
    END;

    [External]
    PROCEDURE InsertInteractionLogEntry@7(SegLine@1000 : Record "Segment Line";EntryNo@1001 : Integer);
    VAR
      InteractLogEntry@1002 : Record "Interaction Log Entry";
    BEGIN
      InteractLogEntry.INIT;
      InteractLogEntry."Entry No." := EntryNo;
      InteractLogEntry."Correspondence Type" := InteractLogEntry."Correspondence Type"::Email;
      InteractLogEntry.CopyFromSegment(SegLine);
      InteractLogEntry."E-Mail Logged" := true;
      InteractLogEntry.INSERT;
    END;

    [External]
    PROCEDURE IsSalesperson@16(Email@1000 : Text;VAR SalespersonCode@1001 : Code[20]) : Boolean;
    VAR
      Salesperson@1002 : Record "Salesperson/Purchaser";
    BEGIN
      if Email = '' then
        exit(false);

      if STRLEN(Email) > MAXSTRLEN(Salesperson."Search E-Mail") then
        exit(false);

      Salesperson.SETCURRENTKEY("Search E-Mail");
      Salesperson.SETRANGE("Search E-Mail",Email);
      if Salesperson.FINDFIRST then begin
        SalespersonCode := Salesperson.Code;
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE IsContact@19(EMail@1002 : Text;VAR SegLine@1000 : Record "Segment Line") : Boolean;
    VAR
      Cont@1003 : Record Contact;
      ContAltAddress@1004 : Record "Contact Alt. Address";
    BEGIN
      if EMail = '' then
        exit(false);

      if STRLEN(EMail) > MAXSTRLEN(Cont."Search E-Mail") then
        exit(false);

      Cont.SETCURRENTKEY("Search E-Mail");
      Cont.SETRANGE("Search E-Mail",EMail);
      if Cont.FINDFIRST then begin
        SegLine."Contact No." := Cont."No.";
        SegLine."Contact Company No." := Cont."Company No.";
        SegLine."Contact Alt. Address Code" := '';
        exit(true);
      end;

      if STRLEN(EMail) > MAXSTRLEN(ContAltAddress."Search E-Mail") then
        exit(false);

      ContAltAddress.SETCURRENTKEY("Search E-Mail");
      ContAltAddress.SETRANGE("Search E-Mail",EMail);
      if ContAltAddress.FINDFIRST then begin
        SegLine."Contact No." := ContAltAddress."Contact No.";
        Cont.GET(ContAltAddress."Contact No.");
        SegLine."Contact Company No." := Cont."Company No.";
        SegLine."Contact Alt. Address Code" := ContAltAddress.Code;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE ProcessMessage@20(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";StorageFolder@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder");
    VAR
      TempSegLine@1001 : TEMPORARY Record "Segment Line";
      Attachment@1003 : Record Attachment;
    BEGIN
      TempSegLine.DELETEALL;
      TempSegLine.INIT;

      Attachment.INIT;
      Attachment.RESET;

      SetErrorContext(Text106);
      if IsMessageToLog(QueueMessage,StorageFolder,TempSegLine,Attachment) then begin
        SetErrorContext(Text107);
        LogMessageAsInteraction(QueueMessage,StorageFolder,TempSegLine,Attachment);
      end;
    END;

    [External]
    PROCEDURE CheckInteractionTemplateSetup@21(VAR ErrorMsg@1000 : Text) : Boolean;
    VAR
      InteractionTemplateSetup@1001 : Record "Interaction Template Setup";
      InteractionTemplate@1002 : Record "Interaction Template";
    BEGIN
      // Emails cannot be automatically logged unless the field Emails on Interaction Template Setup is set.
      InteractionTemplateSetup.GET;
      if InteractionTemplateSetup."E-Mails" = '' then begin
        ErrorMsg := Text109;
        exit(false);
      end;

      // Since we have no guarantees that the Interaction Template for Emails exists, we check for it here.
      InteractionTemplate.SETFILTER(Code,'=%1',InteractionTemplateSetup."E-Mails");
      if not InteractionTemplate.FINDFIRST then begin
        ErrorMsg := Text110;
        exit(false);
      end;

      exit(true);
    END;

    BEGIN
    END.
  }
}

