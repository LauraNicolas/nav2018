OBJECT Report 7310 Calculate Bins
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Bins;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  BinCreateFilter.TESTFIELD(Code);
                  if BinCreateFilter.GET(BinCreateFilter.Code) then;
                  BinCreateWkshLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                  BinCreateWkshLine.SETRANGE(Name,CurrWorksheetName);
                  BinCreateWkshLine.SETRANGE("Location Code",CurrLocationCode);
                  if BinCreateWkshLine.FINDLAST then
                    LineNo := BinCreateWkshLine."Line No." + 10000
                  else
                    LineNo := 10000;
                  BinCreateWkshLine.INIT;
                  with BinCreateWkshLine do begin
                    "Worksheet Template Name" := CurrTemplateName;
                    Name := CurrWorksheetName;
                    "Location Code" := CurrLocationCode;
                    Dedicated := BinCreateFilter.Dedicated;
                    "Zone Code" := BinCreateFilter."Zone Code";
                    Description := BinCreateFilter."Bin Description";
                    "Bin Type Code" := BinCreateFilter."Bin Type Code";
                    "Warehouse Class Code" := BinCreateFilter."Warehouse Class Code";
                    "Block Movement" := BinCreateFilter."Block Movement";
                    "Special Equipment Code" := BinCreateFilter."Special Equipment Code";
                    "Bin Ranking" := BinCreateFilter."Bin Ranking";
                    "Maximum Cubage" := BinCreateFilter."Maximum Cubage";
                    "Maximum Weight" := BinCreateFilter."Maximum Weight";
                  end;
                END;

  }
  DATASET
  {
    { 6034;    ;DataItem;Rack2               ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Rack := FromRack;
                             END;

               OnAfterGetRecord=BEGIN
                                  if INCSTR(Rack) = Rack then
                                    CurrReport.BREAK;
                                  if Rack > ToRack then
                                    CurrReport.BREAK;
                                  if STRLEN(Rack) > STRLEN(ToRack) then
                                    CurrReport.BREAK;

                                  if (FromSection = '') and (ToSection = '') then
                                    BinCreateWksh;
                                END;
                                 }

    { 6247;1   ;DataItem;Section2            ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Section := FromSection;
                             END;

               OnAfterGetRecord=BEGIN
                                  if INCSTR(Section) = Section then
                                    CurrReport.BREAK;
                                  if Section > ToSection then
                                    CurrReport.BREAK;
                                  if STRLEN(Section) > STRLEN(ToSection) then
                                    CurrReport.BREAK;

                                  if (FromLevel = '') and (ToLevel = '') then
                                    BinCreateWksh;
                                END;

               OnPostDataItem=BEGIN
                                Rack := INCSTR(Rack);
                              END;
                               }

    { 6891;2   ;DataItem;Level2              ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Level := FromLevel;
                             END;

               OnAfterGetRecord=BEGIN
                                  if INCSTR(Level) = Level then
                                    CurrReport.BREAK;
                                  if Level > ToLevel then
                                    CurrReport.BREAK;
                                  if STRLEN(Level) > STRLEN(ToLevel) then
                                    CurrReport.BREAK;

                                  BinCreateWksh;

                                  Level := INCSTR(Level);
                                END;

               OnPostDataItem=BEGIN
                                Section := INCSTR(Section);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 29  ;2   ;Field     ;
                  Name=BinTemplateCode;
                  CaptionML=ENU=Bin Template Code;
                  ToolTipML=ENU="Specifies the code for the bin. ";
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinCreateFilter.Code;
                  OnValidate=BEGIN
                               if  BinCreateFilter.Code <> '' then begin
                                 BinCreateFilter.GET(BinCreateFilter.Code);
                                 BinCreateFilter.TESTFIELD("Location Code");
                               end else begin
                                 BinCreateFilter.Code := '';
                                 BinCreateFilter.Description := '';
                                 BinCreateFilter."Location Code" := '';
                                 BinCreateFilter."Zone Code" := '';
                               end;
                             END;

                  OnLookup=BEGIN
                             if CurrLocationCode <> '' then begin
                               BinCreateFilter.FILTERGROUP := 2;
                               BinCreateFilter.SETRANGE("Location Code",CurrLocationCode);
                               BinCreateFilter.FILTERGROUP := 0;
                             end;
                             CLEAR(BinTemplateForm);
                             BinTemplateForm.SETTABLEVIEW(BinCreateFilter);
                             BinTemplateForm.EDITABLE(false);
                             BinTemplateForm.LOOKUPMODE(true);
                             if BinTemplateForm.RUNMODAL = ACTION::LookupOK then begin
                               BinTemplateForm.GETRECORD(BinCreateFilter);
                               BinCreateFilter.VALIDATE(Code);
                               BinCreateFilter.TESTFIELD("Location Code");
                             end;
                           END;
                            }

      { 31  ;2   ;Field     ;
                  Name=Description;
                  CaptionML=ENU=Description;
                  ToolTipML=ENU=Specifies the description of the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinCreateFilter.Description }

      { 33  ;2   ;Field     ;
                  Name=Location Code;
                  CaptionML=ENU=Location Code;
                  ToolTipML=ENU="Specifies the location where the warehouse activity takes place. ";
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinCreateFilter."Location Code";
                  Editable=FALSE }

      { 35  ;2   ;Field     ;
                  Name=Zone Code;
                  CaptionML=ENU=Zone Code;
                  ToolTipML=ENU=Specifies the zone code where the bin on this line is located.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinCreateFilter."Zone Code";
                  Editable=FALSE }

      { 6   ;2   ;Group     ;
                  Name=Rack;
                  CaptionML=ENU=Rack }

      { 11  ;3   ;Field     ;
                  Name=RackFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromRack;
                  OnValidate=BEGIN
                               if (FromRack <> '') and
                                  (ToRack <> '') and
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=RackToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToRack;
                  OnValidate=BEGIN
                               if (FromRack <> '') and
                                  (ToRack <> '') and
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 15  ;2   ;Group     ;
                  Name=Section;
                  CaptionML=ENU=Section }

      { 16  ;3   ;Field     ;
                  Name=SelectionFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromSection;
                  OnValidate=BEGIN
                               if (FromSection <> '') and
                                  (ToSection <> '') and
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=SelectionToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToSection;
                  OnValidate=BEGIN
                               if (FromSection <> '') and
                                  (ToSection <> '') and
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 20  ;2   ;Group     ;
                  Name=Level;
                  CaptionML=ENU=Level }

      { 21  ;3   ;Field     ;
                  Name=LevelFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromLevel;
                  OnValidate=BEGIN
                               if (FromLevel <> '') and
                                  (ToLevel <> '') and
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 23  ;3   ;Field     ;
                  Name=LevelToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToLevel;
                  OnValidate=BEGIN
                               if (FromLevel <> '') and
                                  (ToLevel <> '') and
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               then
                                 ERROR(Text004);
                             END;
                              }

      { 25  ;2   ;Field     ;
                  Name=FieldSeparator;
                  CaptionML=ENU=Field Separator;
                  ToolTipML=ENU=Specifies if you want a character, such as a hyphen, to separate the category fields you have defined as part of the bin code. If so, fill in the Field Separator field with this character.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FieldSeparator }

      { 27  ;2   ;Field     ;
                  Name=Check on Existing Bin;
                  CaptionML=ENU=Check on Existing Bin;
                  ToolTipML=ENU=Specifies whether or not to check on an existing bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=CheckOnBin }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Bin@1027 : Record Bin;
      BinCreateFilter@1016 : Record "Bin Template";
      BinCreateWkshLine@1013 : Record "Bin Creation Worksheet Line";
      BinTemplateForm@1020 : Page "Bin Templates";
      CurrTemplateName@1011 : Code[10];
      CurrWorksheetName@1010 : Code[10];
      CurrLocationCode@1000 : Code[10];
      FromRack@1009 : Code[20];
      FromSection@1008 : Code[20];
      FromLevel@1007 : Code[20];
      ToRack@1006 : Code[20];
      ToSection@1005 : Code[20];
      ToLevel@1004 : Code[20];
      FieldSeparator@1003 : Code[1];
      Rack@1017 : Code[20];
      Section@1018 : Code[20];
      Level@1019 : Code[20];
      CheckOnBin@1026 : Boolean;
      Text000@1002 : TextConst 'ENU=The length of From Rack+From Section+From Level is greater than the maximum length of Bin Code (%1).';
      LenFieldSeparator@1001 : Integer;
      LineNo@1014 : Integer;
      Text004@1012 : TextConst 'ENU=The length of the strings inserted in From No. and To No. must be identical.';

    LOCAL PROCEDURE BinCreateWksh@1();
    BEGIN
      LenFieldSeparator := 0;
      if FieldSeparator <> '' then
        LenFieldSeparator := 2;

      if (STRLEN(Rack + Section + Level) + LenFieldSeparator) > MAXSTRLEN(BinCreateWkshLine."Bin Code") then
        ERROR(Text000,MAXSTRLEN(BinCreateWkshLine."Bin Code"));

      BinCreateWkshLine."Line No." := LineNo;
      BinCreateWkshLine."Bin Code" := Rack + FieldSeparator + Section + FieldSeparator + Level;
      if not CheckOnBin then
        BinCreateWkshLine.INSERT(true)
      else begin
        if Bin.GET(BinCreateWkshLine."Location Code",BinCreateWkshLine."Bin Code") then
          exit
          ;
        BinCreateWkshLine.INSERT(true);
      end;
      LineNo := LineNo + 10000;
    END;

    [External]
    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1001 : Code[10];WorksheetName@1000 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      CurrLocationCode := LocationCode;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

