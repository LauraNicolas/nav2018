OBJECT Codeunit 7150 Update Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Item Analysis View";
    Permissions=TableData "Item Analysis View"=rm,
                TableData "Item Analysis View Filter"=r,
                TableData "Item Analysis View Entry"=rimd,
                TableData "Item Analysis View Budg. Entry"=rimd;
    OnRun=BEGIN
            if Code <> '' then begin
              InitLastEntryNo;
              LOCKTABLE;
              FIND;
              UpdateOne(Rec,2,"Last Entry No." < LastValueEntryNo - 1000);
            end;
          END;

  }
  CODE
  {
    VAR
      Text005@1001 : TextConst 'ENU=Analysis View     #1############################\\';
      Text006@1002 : TextConst 'ENU=Updating table    #2############################\';
      Text007@1003 : TextConst 'ENU=Speed: (Entries/s)#4########\';
      Text008@1004 : TextConst 'ENU=Average Speed     #5########';
      ItemAnalysisView@1005 : Record "Item Analysis View";
      GLSetup@1035 : Record "General Ledger Setup";
      ValueEntry@1006 : Record "Value Entry";
      ItemBudgetEntry@1007 : Record "Item Budget Entry";
      ItemAnalysisViewEntry@1008 : Record "Item Analysis View Entry";
      ItemAnalysisViewBudgetEntry@1009 : Record "Item Analysis View Budg. Entry";
      ItemAnalysisViewFilter@1036 : Record "Item Analysis View Filter";
      TempItemAnalysisViewEntry@1010 : TEMPORARY Record "Item Analysis View Entry";
      TempItemAnalysisViewBudgEntry@1011 : TEMPORARY Record "Item Analysis View Budg. Entry";
      TempDimBuf@1013 : TEMPORARY Record "Dimension Buffer";
      DimSetEntry@1034 : Record "Dimension Set Entry";
      TempDimSetEntry@1016 : TEMPORARY Record "Dimension Set Entry";
      TempDimEntryBuffer@1015 : TEMPORARY Record "Dimension Entry Buffer";
      ItemAnalysisViewSource@1000 : Query "Item Analysis View Source";
      Window@1020 : Dialog;
      FilterIsInitialized@1014 : Boolean;
      FiltersExist@1012 : Boolean;
      PrevPostingDate@1017 : Date;
      PrevCalculatedPostingDate@1018 : Date;
      NoOfEntries@1019 : Integer;
      ShowProgressWindow@1021 : Boolean;
      WinLastEntryNo@1022 : Integer;
      WinUpdateCounter@1024 : Integer;
      WinTotalCounter@1025 : Integer;
      WinTime0@1026 : Time;
      WinTime1@1027 : Time;
      WinTime2@1028 : Time;
      Text009@1030 : TextConst 'ENU=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\';
      Text010@1031 : TextConst 'ENU=Summarizing';
      Text011@1032 : TextConst 'ENU=Updating Database';
      LastValueEntryNo@1033 : Integer;
      LastItemBudgetEntryNo@1029 : Integer;
      LastEntryNoIsInitialized@1037 : Boolean;

    [External]
    PROCEDURE InitLastEntryNo@20();
    BEGIN
      ValueEntry.RESET;
      ItemBudgetEntry.RESET;
      if LastEntryNoIsInitialized then
        exit;
      with ValueEntry do
        if FINDLAST then
          LastValueEntryNo := "Entry No.";
      with ItemBudgetEntry do
        if FINDLAST then
          LastItemBudgetEntryNo := "Entry No.";
      LastEntryNoIsInitialized := true;
    END;

    [External]
    PROCEDURE UpdateAll@15(Which@1000 : '"Ledger Entries","Budget Entries",Both';DirectlyFromPosting@1001 : Boolean);
    VAR
      ItemAnalysisView2@1002 : Record "Item Analysis View";
    BEGIN
      ItemAnalysisView2.SETRANGE(Blocked,false);
      if DirectlyFromPosting then
        ItemAnalysisView2.SETRANGE("Update on Posting",true);

      if ItemAnalysisView2.ISEMPTY then
        exit;

      InitLastEntryNo;

      if DirectlyFromPosting then
        ItemAnalysisView2.SETFILTER("Last Entry No.",'<%1',LastValueEntryNo);

      ItemAnalysisView2.LOCKTABLE;
      if ItemAnalysisView2.FINDSET then
        repeat
          UpdateOne(ItemAnalysisView2,Which,ItemAnalysisView2."Last Entry No." < LastValueEntryNo - 1000);
        until ItemAnalysisView2.NEXT = 0;
    END;

    [External]
    PROCEDURE Update@23(VAR NewItemAnalysisView@1000 : Record "Item Analysis View";Which@1001 : '"Ledger Entries","Budget Entries",Both';ShowWindow@1002 : Boolean);
    BEGIN
      NewItemAnalysisView.LOCKTABLE;
      NewItemAnalysisView.FIND;
      UpdateOne(NewItemAnalysisView,Which,ShowWindow);
    END;

    LOCAL PROCEDURE UpdateOne@11(VAR NewItemAnalysisView@1000 : Record "Item Analysis View";Which@1001 : '"Ledger Entries","Budget Entries",Both';ShowWindow@1002 : Boolean);
    VAR
      Updated@1003 : Boolean;
    BEGIN
      ItemAnalysisView := NewItemAnalysisView;
      ItemAnalysisView.TESTFIELD(Blocked,false);
      ShowProgressWindow := ShowWindow;
      if ShowProgressWindow then
        InitWindow;

      if Which in [Which::"Ledger Entries",Which::Both] then begin
        if LastValueEntryNo > ItemAnalysisView."Last Entry No." then begin
          if ShowProgressWindow then
            UpdateWindowHeader(DATABASE::"Item Analysis View Entry",ValueEntry."Entry No.");
          UpdateEntries;
          ItemAnalysisView."Last Entry No." := LastValueEntryNo;
          Updated := true;
        end;
      end;

      if (Which in [Which::"Budget Entries",Which::Both]) and
         ItemAnalysisView."Include Budgets"
      then begin
        if LastItemBudgetEntryNo > ItemAnalysisView."Last Budget Entry No." then begin
          if ShowProgressWindow then
            UpdateWindowHeader(DATABASE::"Item Analysis View Budg. Entry",ItemBudgetEntry."Entry No.");
          ItemBudgetEntry.RESET;
          ItemBudgetEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
          ItemBudgetEntry.SETRANGE("Entry No.",ItemAnalysisView."Last Budget Entry No." + 1,LastItemBudgetEntryNo);
          UpdateBudgetEntries(ItemAnalysisView."Last Budget Entry No." + 1);
          ItemAnalysisView."Last Budget Entry No." := LastItemBudgetEntryNo;
          Updated := true;
        end;
      end;

      if Updated then begin
        ItemAnalysisView."Last Date Updated" := TODAY;
        ItemAnalysisView.MODIFY;
      end;
      if ShowProgressWindow then
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntries@9();
    VAR
      ItemLedgerEntry@1001 : Record "Item Ledger Entry";
      ProgressIndicator@1000 : Integer;
    BEGIN
      GLSetup.GET;
      FilterIsInitialized := false;
      ItemAnalysisViewSource.SETRANGE(AnalysisArea,ItemAnalysisView."Analysis Area");
      ItemAnalysisViewSource.SETRANGE(AnalysisViewCode,ItemAnalysisView.Code);
      ItemAnalysisViewSource.SETRANGE(EntryNo,ItemAnalysisView."Last Entry No." + 1,LastValueEntryNo);
      if ItemAnalysisView."Item Filter" <> '' then
        ItemAnalysisViewSource.SETFILTER(ItemNo,ItemAnalysisView."Item Filter");

      if ItemAnalysisView."Location Filter" <> '' then
        ItemAnalysisViewSource.SETFILTER(LocationCode,ItemAnalysisView."Location Filter");

      ItemAnalysisViewSource.OPEN;

      with ItemAnalysisViewSource do
        while READ do begin
          ProgressIndicator := ProgressIndicator + 1;
          if DimSetIDInFilter(DimensionSetID,ItemAnalysisView) then begin
            UpdateAnalysisViewEntry(DimVal1,DimVal2,DimVal3,ItemLedgerEntryType);
            if (ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) and
               (ItemLedgerEntryType = ItemLedgerEntryType::Purchase) and
               (CostAmountNonInvtbl <> 0) and
               (ItemChargeNo <> '' )
            then begin // purchase invoice for item charge can belong to sales - Cost Amount (Non-Invtbl.)
              ItemLedgerEntry.GET(ItemLedgerEntryNo);
              if ItemLedgerEntry."Entry Type" = ItemLedgerEntry."Entry Type"::Sale then
                UpdateAnalysisViewEntry(DimVal1,DimVal2,DimVal3,ItemLedgerEntryType::Sale);
            end;
          end;
          if ShowProgressWindow then
            UpdateWindowCounter(ProgressIndicator);
        end;
      ItemAnalysisViewSource.CLOSE;

      if ShowProgressWindow then
        UpdateWindowCounter(ProgressIndicator);
      FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateBudgetEntries@10(DeleteFromEntry@1000 : Integer);
    BEGIN
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
      ItemAnalysisViewBudgetEntry.SETFILTER("Entry No.",'>%1',DeleteFromEntry);
      ItemAnalysisViewBudgetEntry.DELETEALL;
      ItemAnalysisViewBudgetEntry.RESET;

      if ItemAnalysisView."Item Filter" <> '' then
        ItemBudgetEntry.SETFILTER("Item No.",ItemAnalysisView."Item Filter");
      if ItemAnalysisView."Location Filter" <> '' then
        ItemBudgetEntry.SETFILTER("Location Code",ItemAnalysisView."Location Filter");
      if ItemBudgetEntry.ISEMPTY then
        exit;
      ItemBudgetEntry.FINDSET(true);

      repeat
        if DimSetIDInFilter(ItemBudgetEntry."Dimension Set ID",ItemAnalysisView) then
          UpdateAnalysisViewBudgetEntry(
            GetDimVal(ItemAnalysisView."Dimension 1 Code",ItemBudgetEntry."Dimension Set ID"),
            GetDimVal(ItemAnalysisView."Dimension 2 Code",ItemBudgetEntry."Dimension Set ID"),
            GetDimVal(ItemAnalysisView."Dimension 3 Code",ItemBudgetEntry."Dimension Set ID"));
        if ShowProgressWindow then
          UpdateWindowCounter(ItemBudgetEntry."Entry No.");
      until ItemBudgetEntry.NEXT = 0;
      if ShowProgressWindow then
        UpdateWindowCounter(ItemBudgetEntry."Entry No.");
      FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewEntry@3(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];EntryType@1003 : Option);
    VAR
      PostingDate@1004 : Date;
      EntryNo@1005 : Integer;
    BEGIN
      PostingDate := ItemAnalysisViewSource.PostingDate;
      if PostingDate < ItemAnalysisView."Starting Date" then begin
        PostingDate := ItemAnalysisView."Starting Date" - 1;
        EntryNo := 0;
      end else begin
        PostingDate := CalculatePeriodStart(PostingDate,ItemAnalysisView."Date Compression");
        if PostingDate < ItemAnalysisView."Starting Date" then
          PostingDate := ItemAnalysisView."Starting Date";
        if ItemAnalysisView."Date Compression" <> ItemAnalysisView."Date Compression"::None then
          EntryNo := 0;
      end;
      TempItemAnalysisViewEntry.INIT;
      TempItemAnalysisViewEntry."Analysis Area" := ItemAnalysisView."Analysis Area";
      TempItemAnalysisViewEntry."Analysis View Code" := ItemAnalysisView.Code;
      TempItemAnalysisViewEntry."Item No." := ItemAnalysisViewSource.ItemNo;
      TempItemAnalysisViewEntry."Source Type" := ItemAnalysisViewSource.SourceType;
      TempItemAnalysisViewEntry."Source No." := ItemAnalysisViewSource.SourceNo;
      TempItemAnalysisViewEntry."Entry Type" := ItemAnalysisViewSource.EntryType;
      TempItemAnalysisViewEntry."Item Ledger Entry Type" := EntryType;

      TempItemAnalysisViewEntry."Location Code" := ItemAnalysisViewSource.LocationCode;
      TempItemAnalysisViewEntry."Posting Date" := PostingDate;
      TempItemAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
      TempItemAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
      TempItemAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
      TempItemAnalysisViewEntry."Entry No." := EntryNo;

      if TempItemAnalysisViewEntry.FIND then begin
        if (ItemAnalysisViewSource.EntryType = ItemAnalysisViewSource.EntryType::"Direct Cost") and
           (ItemAnalysisViewSource.ItemChargeNo = '')
        then
          AddValue(TempItemAnalysisViewEntry.Quantity,ItemAnalysisViewSource.ILEQuantity);
        AddValue(TempItemAnalysisViewEntry."Invoiced Quantity",ItemAnalysisViewSource.InvoicedQuantity);

        AddValue(TempItemAnalysisViewEntry."Sales Amount (Actual)",ItemAnalysisViewSource.SalesAmountActual);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Actual)",ItemAnalysisViewSource.CostAmountActual);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",ItemAnalysisViewSource.CostAmountNonInvtbl);

        AddValue(TempItemAnalysisViewEntry."Sales Amount (Expected)",ItemAnalysisViewSource.SalesAmountExpected);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Expected)",ItemAnalysisViewSource.CostAmountExpected);
        TempItemAnalysisViewEntry.MODIFY;
      end else begin
        if (ItemAnalysisViewSource.EntryType = ItemAnalysisViewSource.EntryType::"Direct Cost") and
           (ItemAnalysisViewSource.ItemChargeNo = '')
        then
          TempItemAnalysisViewEntry.Quantity := ItemAnalysisViewSource.ILEQuantity;
        TempItemAnalysisViewEntry."Invoiced Quantity" := ItemAnalysisViewSource.InvoicedQuantity;

        TempItemAnalysisViewEntry."Sales Amount (Actual)" := ItemAnalysisViewSource.SalesAmountActual;
        TempItemAnalysisViewEntry."Cost Amount (Actual)" := ItemAnalysisViewSource.CostAmountActual;
        TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)" := ItemAnalysisViewSource.CostAmountNonInvtbl;

        TempItemAnalysisViewEntry."Sales Amount (Expected)" := ItemAnalysisViewSource.SalesAmountExpected;
        TempItemAnalysisViewEntry."Cost Amount (Expected)" := ItemAnalysisViewSource.CostAmountExpected;
        TempItemAnalysisViewEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      end;
      if NoOfEntries >= 10000 then
        FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewBudgetEntry@18(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20]);
    BEGIN
      TempItemAnalysisViewBudgEntry."Analysis Area" := ItemAnalysisView."Analysis Area";
      TempItemAnalysisViewBudgEntry."Analysis View Code" := ItemAnalysisView.Code;
      TempItemAnalysisViewBudgEntry."Budget Name" := ItemBudgetEntry."Budget Name";
      TempItemAnalysisViewBudgEntry."Location Code" := ItemBudgetEntry."Location Code";
      TempItemAnalysisViewBudgEntry."Item No." := ItemBudgetEntry."Item No.";
      TempItemAnalysisViewBudgEntry."Source Type" := ItemBudgetEntry."Source Type";
      TempItemAnalysisViewBudgEntry."Source No." := ItemBudgetEntry."Source No.";

      if ItemBudgetEntry.Date < ItemAnalysisView."Starting Date" then
        TempItemAnalysisViewBudgEntry."Posting Date" := ItemAnalysisView."Starting Date" - 1
      else begin
        TempItemAnalysisViewBudgEntry."Posting Date" :=
          CalculatePeriodStart(ItemBudgetEntry.Date,ItemAnalysisView."Date Compression");
        if TempItemAnalysisViewBudgEntry."Posting Date" < ItemAnalysisView."Starting Date" then
          TempItemAnalysisViewBudgEntry."Posting Date" := ItemAnalysisView."Starting Date";
      end;
      TempItemAnalysisViewBudgEntry."Dimension 1 Value Code" := DimValue1;
      TempItemAnalysisViewBudgEntry."Dimension 2 Value Code" := DimValue2;
      TempItemAnalysisViewBudgEntry."Dimension 3 Value Code" := DimValue3;
      TempItemAnalysisViewBudgEntry."Entry No." := ItemBudgetEntry."Entry No.";

      if TempItemAnalysisViewBudgEntry.FIND then begin
        AddValue(TempItemAnalysisViewBudgEntry."Sales Amount",ItemBudgetEntry."Sales Amount");
        AddValue(TempItemAnalysisViewBudgEntry."Cost Amount",ItemBudgetEntry."Cost Amount");
        AddValue(TempItemAnalysisViewBudgEntry.Quantity,ItemBudgetEntry.Quantity);
        TempItemAnalysisViewBudgEntry.MODIFY;
      end else begin
        TempItemAnalysisViewBudgEntry."Sales Amount" := ItemBudgetEntry."Sales Amount";
        TempItemAnalysisViewBudgEntry."Cost Amount" := ItemBudgetEntry."Cost Amount";
        TempItemAnalysisViewBudgEntry.Quantity := ItemBudgetEntry.Quantity;
        TempItemAnalysisViewBudgEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      end;
      if NoOfEntries >= 10000 then
        FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
    BEGIN
      if PostingDate = CLOSINGDATE(PostingDate) then
        exit(PostingDate);

      case DateCompression of
        ItemAnalysisView."Date Compression"::Week:
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        ItemAnalysisView."Date Compression"::Month:
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        ItemAnalysisView."Date Compression"::Quarter:
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        ItemAnalysisView."Date Compression"::Year:
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        ItemAnalysisView."Date Compression"::Period:
          begin
            if PostingDate <> PrevPostingDate then begin
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              if AccountingPeriod.FINDLAST then begin
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              end else
                PrevCalculatedPostingDate := PostingDate;
            end;
            PostingDate := PrevCalculatedPostingDate;
          end;
      end;
      exit(PostingDate);
    END;

    LOCAL PROCEDURE FlushAnalysisViewEntry@5();
    BEGIN
      if ShowProgressWindow then
        Window.UPDATE(6,Text011);
      if TempItemAnalysisViewEntry.FINDSET then
        repeat
          ItemAnalysisViewEntry.INIT;
          ItemAnalysisViewEntry := TempItemAnalysisViewEntry;

          if ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) and
              ((ItemAnalysisViewEntry."Item Ledger Entry Type" <> ItemAnalysisViewEntry."Item Ledger Entry Type"::Sale) or
               (ItemAnalysisViewEntry."Entry Type" = ItemAnalysisViewEntry."Entry Type"::Revaluation))) or
             ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Purchase) and
              (ItemAnalysisViewEntry."Item Ledger Entry Type" <> ItemAnalysisViewEntry."Item Ledger Entry Type"::Purchase)) or
             ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Inventory) and
              (ItemAnalysisViewEntry."Item Ledger Entry Type" = ItemAnalysisViewEntry."Item Ledger Entry Type"::" "))
          then begin
            if ItemAnalysisViewEntry.FIND then
              ItemAnalysisViewEntry.DELETE;
          end else
            if not ItemAnalysisViewEntry.INSERT then begin
              ItemAnalysisViewEntry.FIND;
              AddValue(ItemAnalysisViewEntry.Quantity,TempItemAnalysisViewEntry.Quantity);
              AddValue(ItemAnalysisViewEntry."Invoiced Quantity",TempItemAnalysisViewEntry."Invoiced Quantity");

              AddValue(ItemAnalysisViewEntry."Sales Amount (Actual)",TempItemAnalysisViewEntry."Sales Amount (Actual)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Actual)",TempItemAnalysisViewEntry."Cost Amount (Actual)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)");

              AddValue(ItemAnalysisViewEntry."Sales Amount (Expected)",TempItemAnalysisViewEntry."Sales Amount (Expected)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Expected)",TempItemAnalysisViewEntry."Cost Amount (Expected)");

              ItemAnalysisViewEntry.MODIFY;
            end;
        until TempItemAnalysisViewEntry.NEXT = 0;
      TempItemAnalysisViewEntry.DELETEALL;
      NoOfEntries := 0;
      if ShowProgressWindow then
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE FlushAnalysisViewBudgetEntry@25();
    BEGIN
      if ShowProgressWindow then
        Window.UPDATE(6,Text011);
      if TempItemAnalysisViewBudgEntry.FINDSET then
        repeat
          ItemAnalysisViewBudgetEntry.INIT;
          ItemAnalysisViewBudgetEntry := TempItemAnalysisViewBudgEntry;
          if not ItemAnalysisViewBudgetEntry.INSERT then begin
            ItemAnalysisViewBudgetEntry.FIND;
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry."Sales Amount");
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry."Cost Amount");
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry.Quantity);
            ItemAnalysisViewBudgetEntry.MODIFY;
          end;
        until TempItemAnalysisViewBudgEntry.NEXT = 0;
      TempItemAnalysisViewBudgEntry.DELETEALL;
      NoOfEntries := 0;
      if ShowProgressWindow then
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE GetDimVal@24(DimCode@1000 : Code[20];DimSetID@1001 : Integer) : Code[20];
    BEGIN
      if TempDimSetEntry.GET(DimSetID,DimCode) then
        exit(TempDimSetEntry."Dimension Value Code");
      if DimSetEntry.GET(DimSetID,DimCode) then
        TempDimSetEntry := DimSetEntry
      else begin
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Code" := DimCode;
        TempDimSetEntry."Dimension Value Code" := '';
      end;
      TempDimSetEntry.INSERT;
      exit(TempDimSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE InitWindow@1();
    BEGIN
      Window.OPEN(
        Text005 +
        Text006 +
        Text009 +
        Text007 +
        Text008);
      Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE UpdateWindowCounter@7(EntryNo@1000 : Integer);
    BEGIN
      WinUpdateCounter := WinUpdateCounter + 1;
      WinTime2 := TIME;
      if (WinTime2 > WinTime1 + 1000) or (EntryNo = WinLastEntryNo) then begin
        if WinLastEntryNo <> 0 then
          Window.UPDATE(3,ROUND(EntryNo / WinLastEntryNo * 10000,1));
        WinTotalCounter := WinTotalCounter + WinUpdateCounter;
        if WinTime2 <> WinTime1 then
          Window.UPDATE(4,ROUND(WinUpdateCounter * (1000 / (WinTime2 - WinTime1)),1));
        if WinTime2 <> WinTime0 then
          Window.UPDATE(5,ROUND(WinTotalCounter * (1000 / (WinTime2 - WinTime0)),1));
        WinTime1 := WinTime2;
        WinUpdateCounter := 0;
      end;
    END;

    LOCAL PROCEDURE UpdateWindowHeader@13(TableID@1000 : Integer;EntryNo@1001 : Integer);
    VAR
      Object@1002 : Record Object;
    BEGIN
      WinLastEntryNo := EntryNo;
      WinTotalCounter := 0;
      Object.GET(Object.Type::Table,'',TableID);
      Window.UPDATE(1,ItemAnalysisView.Code);
      Window.UPDATE(2,Object.Name);
      Window.UPDATE(3,0);
      Window.UPDATE(4,0);
      Window.UPDATE(5,0);
      WinTime0 := TIME;
      WinTime1 := WinTime0;
      WinTime2 := WinTime0;
    END;

    [External]
    PROCEDURE SetLastBudgetEntryNo@16(NewLastBudgetEntryNo@1000 : Integer);
    VAR
      ItemAnalysisView2@1001 : Record "Item Analysis View";
    BEGIN
      ItemAnalysisView.SETRANGE("Last Budget Entry No.",NewLastBudgetEntryNo + 1,2147483647);
      ItemAnalysisView.SETRANGE("Include Budgets",true);
      if ItemAnalysisView.FINDSET(true,true) then
        repeat
          ItemAnalysisView2 := ItemAnalysisView;
          ItemAnalysisView2."Last Budget Entry No." := NewLastBudgetEntryNo;
          ItemAnalysisView2.MODIFY;
        until ItemAnalysisView.NEXT = 0;
    END;

    LOCAL PROCEDURE AddValue@19(VAR ToValue@1000 : Decimal;FromValue@1001 : Decimal);
    BEGIN
      ToValue := ToValue + FromValue;
    END;

    LOCAL PROCEDURE IsValueIncludedInFilter@28(DimValue@1002 : Code[20];DimFilter@1000 : Code[250]) : Boolean;
    BEGIN
      with TempDimBuf do begin
        RESET;
        DELETEALL;
        INIT;
        "Dimension Value Code" := DimValue;
        INSERT;
        SETFILTER("Dimension Value Code",DimFilter);
        exit(FINDFIRST);
      end;
    END;

    [External]
    PROCEDURE DimSetIDInFilter@2(DimSetID@1000 : Integer;VAR ItemAnalysisView@1002 : Record "Item Analysis View") : Boolean;
    VAR
      InFilters@1001 : Boolean;
    BEGIN
      if not FilterIsInitialized then begin
        TempDimEntryBuffer.DELETEALL;
        FilterIsInitialized := true;
        ItemAnalysisViewFilter.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
        ItemAnalysisViewFilter.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
        FiltersExist := not ItemAnalysisViewFilter.ISEMPTY;
      end;

      if not FiltersExist then
        exit(true);

      if TempDimEntryBuffer.GET(DimSetID) then  // cashed value?
        exit(TempDimEntryBuffer."Dimension Entry No." <> 0);

      InFilters := true;
      if ItemAnalysisViewFilter.FINDSET then
        repeat
          if DimSetEntry.GET(DimSetID,ItemAnalysisViewFilter."Dimension Code") then
            InFilters :=
              InFilters and
              IsValueIncludedInFilter(
                DimSetEntry."Dimension Value Code",ItemAnalysisViewFilter."Dimension Value Filter")
          else
            InFilters :=
              InFilters and IsValueIncludedInFilter('',ItemAnalysisViewFilter."Dimension Value Filter");
        until (ItemAnalysisViewFilter.NEXT = 0) or not InFilters;
      TempDimEntryBuffer."No." := DimSetID;
      if InFilters then
        TempDimEntryBuffer."Dimension Entry No." := 1
      else
        TempDimEntryBuffer."Dimension Entry No." := 0;
      TempDimEntryBuffer.INSERT;
      exit(InFilters);
    END;

    BEGIN
    END.
  }
}

