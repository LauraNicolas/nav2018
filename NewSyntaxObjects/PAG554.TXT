OBJECT Page 554 Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Analysis by Dimensions;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    DataCaptionExpr=AnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim4FilterEnable := true;
             Dim3FilterEnable := true;
             Dim2FilterEnable := true;
             Dim1FilterEnable := true;
           END;

    OnOpenPage=VAR
                 GLAcc@1002 : Record "G/L Account";
                 Field@1000 : Record Field;
                 CashFlowAccount@1001 : Record "Cash Flow Account";
               BEGIN
                 if (NewAnalysisViewCode <> '') and (NewAnalysisViewCode <> AnalysisViewCode) then
                   AnalysisViewCode := NewAnalysisViewCode;

                 ValidateAnalysisViewCode;

                 GLSetup.GET;
                 if GLSetup."Additional Reporting Currency" = '' then
                   ShowInAddCurr := false
                 else
                   Currency.GET(GLSetup."Additional Reporting Currency");

                 if GLAccountSource then
                   LineDimCode := GLAcc.TABLECAPTION
                 else
                   LineDimCode := CashFlowAccount.TABLECAPTION;
                 ColumnDimCode := Text000;

                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);
                 if GLAccountSource then begin
                   Field.GET(DATABASE::"G/L Account",42);
                   BusUnitFilterCaption := Field."Field Caption";
                 end;

                 FindPeriod('');

                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
               END;

    OnFindRecord=BEGIN
                   exit(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   exit(NextRec(LineDimOption,Rec,Steps));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      Name=&Actions;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 25      ;2   ;Action    ;
                      Name=Reverse Lines and Columns;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#Suite;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1000 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;
                                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the data overview according to the selected filters and options.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1000 : Page "Analysis by Dimensions Matrix";
                               BEGIN
                                 CLEAR(MatrixForm);

                                 if GLAccountSource then
                                   CashFlowFilter := '';

                                 MatrixForm.Load(
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,DateFilter,AccFilter,
                                   BusUnitFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,CashFlowFilter);
                                 MatrixForm.Load2(
                                   QtyType,AnalysisViewCode,ShowOppositeSign,ShowColumnName,
                                   ShowActualBudg,AmountField,ClosingEntryFilter,RoundingFactor,ShowInAddCurr,
                                   ColumnCaptions,PrimaryKeyFirstColInSet);

                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 12      ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Previous,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Next,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 5   ;2   ;Field     ;
                Name=AnalysisViewCode;
                CaptionML=ENU=Analysis View Code;
                ToolTipML=ENU=Specifies the code for the analysis view that the filter belongs to.;
                ApplicationArea=#Suite;
                SourceExpr=AnalysisViewCode;
                TableRelation="Analysis View";
                OnValidate=BEGIN
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                           END;

                OnLookup=VAR
                           AnalysisViewList@1002 : Page "Analysis View List";
                         BEGIN
                           AnalysisViewList.LOOKUPMODE := true;
                           AnalysisView.SETRANGE("Account Source",AnalysisView."Account Source");
                           AnalysisViewList.SETTABLEVIEW(AnalysisView);
                           AnalysisViewList.SETRECORD(AnalysisView);
                           if AnalysisViewList.RUNMODAL = ACTION::LookupOK then begin
                             AnalysisViewList.GETRECORD(AnalysisView);
                             AnalysisViewCode := AnalysisView.Code;
                             Text := AnalysisView.Code;
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                             CurrPage.UPDATE;
                             exit(true);
                           end;
                         END;

                ImplicitType=Code10 }

    { 6   ;2   ;Field     ;
                Name=LineDimCode;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             end;
                             ValidateLineDimCode;
                             if LineDimOption = LineDimOption::Period then
                               SETCURRENTKEY("Period Start")
                             else
                               SETCURRENTKEY(Code);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           if NewCode = LineDimCode then
                             exit(false);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           CurrPage.UPDATE;
                           exit(true);
                         END;

                ImplicitType=Text30 }

    { 9   ;2   ;Field     ;
                Name=ColumnDimCode;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               LineDimCode := '';
                               ValidateLineDimCode;
                             end;
                             ValidateColumnDimCode;

                             CurrPage.UPDATE;
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           if NewCode = ColumnDimCode then
                             exit(false);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           CurrPage.UPDATE;
                           exit(true);
                         END;

                ImplicitType=Text30 }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 36  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Suite;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             GLAcc@1001 : Record "G/L Account";
                             ApplicationManagement@1002 : Codeunit ApplicationManagement;
                           BEGIN
                             if ApplicationManagement.MakeDateFilter(DateFilter) = 0 then;
                             GLAcc.SETFILTER("Date Filter",DateFilter);
                             DateFilter := GLAcc.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             if ColumnDimOption = ColumnDimOption::Period then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Text }

    { 38  ;2   ;Field     ;
                Name=AccFilter;
                CaptionML=ENU=Account Filter;
                ToolTipML=ENU=Specifies a filter for the general ledger accounts for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=AccFilter;
                OnValidate=BEGIN
                             if (ColumnDimOption = ColumnDimOption::"G/L Account") or (ColumnDimOption = ColumnDimOption::"Cash Flow Account") then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page "G/L Account List";
                           CFAccList@1000 : Page "Cash Flow Account List";
                         BEGIN
                           if GLAccountSource then begin
                             GLAccList.LOOKUPMODE(true);
                             if not (GLAccList.RUNMODAL = ACTION::LookupOK) then
                               exit(false);

                             Text := GLAccList.GetSelectionFilter;
                           end else begin
                             CFAccList.LOOKUPMODE(true);
                             if not (CFAccList.RUNMODAL = ACTION::LookupOK) then
                               exit(false);

                             Text := CFAccList.GetSelectionFilter;
                           end;
                           exit(true);
                         END;

                ImplicitType=Text }

    { 22  ;2   ;Field     ;
                Name=BusUnitFilter;
                ApplicationArea=#Suite;
                SourceExpr=BusUnitFilter;
                CaptionClass='3,' + BusUnitFilterCaption;
                Visible=GLAccountSource;
                OnLookup=VAR
                           BusUnitList@1002 : Page "Business Unit List";
                         BEGIN
                           BusUnitList.LOOKUPMODE(true);
                           if not (BusUnitList.RUNMODAL = ACTION::LookupOK) then
                             exit(false);
                           Text := BusUnitList.GetSelectionFilter;
                           exit(true);
                         END;

                ImplicitType=Text }

    { 1013;2   ;Field     ;
                Name=CashFlowFilter;
                CaptionML=ENU=Cash Flow Forecast Filter;
                ToolTipML=ENU=Specifies the cash flow forecast that information in the matrix is shown for.;
                ApplicationArea=#Suite;
                SourceExpr=CashFlowFilter;
                TableRelation="Cash Flow Forecast";
                Visible=(GLAccountSource = FALSE);
                LookupPageID="Cash Flow Forecast List";
                OnValidate=BEGIN
                             if ColumnDimOption = ColumnDimOption::"Cash Flow Forecast" then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Text }

    { 53  ;2   ;Field     ;
                Name=BudgetFilter;
                CaptionML=ENU=Budget Filter;
                ToolTipML=ENU=Specifies the budget that information in the matrix is shown for.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetFilter;
                TableRelation="G/L Budget Name".Name;
                Visible=GLAccountSource;
                LookupPageID="G/L Budget Names";
                ImplicitType=Text }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=ENU=Dimension 1 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 1 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             if ColumnDimOption = ColumnDimOption::"Dimension 1" then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                         END;

                ImplicitType=Text }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=ENU=Dimension 2 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 2 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             if ColumnDimOption = ColumnDimOption::"Dimension 2" then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                         END;

                ImplicitType=Text }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=ENU=Dimension 3 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 3 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             if ColumnDimOption = ColumnDimOption::"Dimension 3" then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                         END;

                ImplicitType=Text }

    { 35  ;2   ;Field     ;
                Name=Dim4Filter;
                CaptionML=ENU=Dimension 4 Filter;
                ToolTipML=ENU=Specifies a filter for the Dimension 4 for which entries will be shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=Dim4Filter;
                CaptionClass=GetCaptionClass(4);
                Enabled=Dim4FilterEnable;
                OnValidate=BEGIN
                             if ColumnDimOption = ColumnDimOption::"Dimension 4" then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           exit(LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                         END;

                ImplicitType=Text }

    { 1903121901;1;Group  ;
                Name=Options;
                CaptionML=ENU=Options }

    { 29  ;2   ;Field     ;
                Name=ShowActualBudg;
                CaptionML=ENU=Show;
                ToolTipML=ENU=Specifies if the selected value is shown in the window.;
                OptionCaptionML=ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts;
                ApplicationArea=#Suite;
                SourceExpr=ShowActualBudg;
                Visible=GLAccountSource;
                ImplicitType=Option }

    { 47  ;2   ;Field     ;
                Name=AmountField;
                CaptionML=ENU=Show Amount Field;
                ToolTipML=ENU=Specifies the type of entries that will be included in the matrix window. The Amount options means that amounts that are the sum of debit and credit amounts are shown.;
                OptionCaptionML=ENU=Amount,Debit Amount,Credit Amount;
                ApplicationArea=#Suite;
                SourceExpr=AmountField;
                ImplicitType=Option }

    { 52  ;2   ;Field     ;
                Name=ClosingEntryFilter;
                CaptionML=ENU=Closing Entries;
                ToolTipML=ENU=Specifies whether the amounts shown in the matrix window will include closing entries.;
                OptionCaptionML=ENU=Include,Exclude;
                ApplicationArea=#Suite;
                SourceExpr=ClosingEntryFilter;
                Visible=GLAccountSource;
                OnValidate=BEGIN
                             FindPeriod('=');
                           END;

                ImplicitType=Option }

    { 18  ;2   ;Field     ;
                Name=RoundingFactor;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Suite;
                SourceExpr=RoundingFactor;
                ImplicitType=Option }

    { 49  ;2   ;Field     ;
                Name=ShowInAddCurr;
                CaptionML=ENU=Show Amounts in Add. Reporting Currency;
                ToolTipML=ENU=Specifies if the reported amounts are shown in the additional reporting currency.;
                ApplicationArea=#Suite;
                SourceExpr=ShowInAddCurr;
                Visible=GLAccountSource;
                MultiLine=true;
                ImplicitType=Boolean }

    { 4   ;2   ;Field     ;
                Name=ShowColumnName;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;

                ImplicitType=Boolean }

    { 54  ;2   ;Field     ;
                Name=ShowOppositeSign;
                CaptionML=ENU=Show Opposite Sign;
                ToolTipML=ENU=Specifies whether to show debits as negative amounts (with minus signs) and credits as positive amounts in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=ShowOppositeSign;
                MultiLine=true;
                ImplicitType=Boolean }

    { 1906098301;1;Group  ;
                Name=Matrix Options;
                CaptionML=ENU=Matrix Options }

    { 13  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             if ColumnDimOption = ColumnDimOption::Period then
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;

                ImplicitType=Option }

    { 14  ;2   ;Field     ;
                Name=ColumnsSet;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#Suite;
                SourceExpr=ColumnsSet;
                Editable=FALSE;
                ImplicitType=Text1024 }

    { 20  ;2   ;Field     ;
                Name=QtyType;
                CaptionML=ENU=View as;
                ToolTipML=ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                OptionCaptionML=ENU=Net Change,Balance at Date;
                ApplicationArea=#Suite;
                SourceExpr=QtyType;
                ImplicitType=Option }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period';
      Text002@1002 : TextConst 'ENU=You have not yet defined an analysis view.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid line definition.';
      Text004@1004 : TextConst 'ENU=%1 is not a valid column definition.';
      Text005@1005 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 4 Filter';
      GLSetup@1009 : Record "General Ledger Setup";
      AnalysisView@1011 : Record "Analysis View";
      AnalysisViewEntry@1012 : Record "Analysis View Entry";
      Currency@1044 : Record Currency;
      LineDimOption@1017 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';
      ColumnDimOption@1018 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      AmountType@1022 : '"Net Change","Balance at Date"';
      RoundingFactor@1023 : 'None,"1","1000","1000000"';
      AmountField@1024 : 'Amount,"Debit Amount","Credit Amount"';
      ShowActualBudg@1025 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%",Amounts';
      ClosingEntryFilter@1028 : 'Include,Exclude';
      GLAccountSource@1014 : Boolean INDATASET;
      LineDimCode@1015 : Text[30];
      ColumnDimCode@1010 : Text[30];
      DateFilter@1030 : Text;
      InternalDateFilter@1031 : Text;
      CashFlowFilter@1129 : Text;
      ColumnCaptions@1046 : ARRAY [32] OF Text[80];
      PrimaryKeyFirstColInSet@1054 : Text[1024];
      ColumnsSet@1055 : Text[1024];
      AnalysisViewCode@1016 : Code[10];
      NewAnalysisViewCode@1059 : Code[10];
      AccFilter@1033 : Text;
      BudgetFilter@1034 : Text;
      Dim1Filter@1035 : Text;
      Dim2Filter@1036 : Text;
      Dim3Filter@1037 : Text;
      Dim4Filter@1038 : Text;
      ShowOppositeSign@1027 : Boolean;
      ShowColumnName@1029 : Boolean;
      PeriodInitialized@1041 : Boolean;
      ShowInAddCurr@1026 : Boolean;
      BusUnitFilter@1043 : Text;
      Step@1056 : 'First,Previous,Same,Next';
      QtyType@1058 : '"Net Change","Balance at Date"';
      BusUnitFilterCaption@1001 : Text[80];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;
      Dim4FilterEnable@19064250 : Boolean INDATASET;
      Text009@1013 : TextConst 'ENU=Unsupported Account Source %1.';

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      case DimCode of
        AccountCaption:
          begin
            if GLAccountSource then
              exit(0);
            exit(7);
          end;
        Text000:
          exit(1);
        UnitCaption:
          begin
            if GLAccountSource then
              exit(2);
            exit(8);
          end;
        AnalysisView."Dimension 1 Code":
          exit(3);
        AnalysisView."Dimension 2 Code":
          exit(4);
        AnalysisView."Dimension 3 Code":
          exit(5);
        AnalysisView."Dimension 4 Code":
          exit(6);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1003 : Record "G/L Account";
      BusUnit@1004 : Record "Business Unit";
      CFAccount@1023 : Record "Cash Flow Account";
      CashFlowForecast@1024 : Record "Cash Flow Forecast";
      Period@1005 : Record Date;
      DimVal@1006 : Record "Dimension Value";
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      Found@1008 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if AccFilter <> '' then
              GLAcc.SETFILTER("No.",AccFilter);
            Found := GLAcc.FIND(Which);
            if Found then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::"Cash Flow Account":
          begin
            CFAccount."No." := DimCodeBuf.Code;
            if AccFilter <> '' then
              CFAccount.SETFILTER("No.",AccFilter);
            Found := CFAccount.FIND(Which);
            if Found then
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if not PeriodInitialized then
              DateFilter := '';
            PeriodInitialized := true;
            Period."Period Start" := DimCodeBuf."Period Start";
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if InternalDateFilter <> '' then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            if Found then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Cash Flow Forecast":
          begin
            CashFlowForecast."No." := DimCodeBuf.Code;
            if CashFlowFilter <> '' then
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            Found := CashFlowForecast.FIND(Which);
            if Found then
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if Dim1Filter <> '' then
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if Dim2Filter <> '' then
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 3":
          begin
            if Dim3Filter <> '' then
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 4":
          begin
            if Dim4Filter <> '' then
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1003 : Record "G/L Account";
      BusUnit@1004 : Record "Business Unit";
      CFAccount@1023 : Record "Cash Flow Account";
      CashFlowForecast@1024 : Record "Cash Flow Forecast";
      Period@1005 : Record Date;
      DimVal@1006 : Record "Dimension Value";
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      ResultSteps@1008 : Integer;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if AccFilter <> '' then
              GLAcc.SETFILTER("No.",AccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::"Cash Flow Account":
          begin
            CFAccount."No." := DimCodeBuf.Code;
            if AccFilter <> '' then
              CFAccount.SETFILTER("No.",AccFilter);
            ResultSteps := CFAccount.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            if ResultSteps <> 0 then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Cash Flow Forecast":
          begin
            CashFlowForecast."No." := DimCodeBuf.Code;
            if CashFlowFilter <> '' then
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            ResultSteps := CashFlowForecast.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if Dim1Filter <> '' then
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if Dim2Filter <> '' then
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 3":
          begin
            if Dim3Filter <> '' then
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 4":
          begin
            if Dim4Filter <> '' then
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record "G/L Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      end;
    END;

    LOCAL PROCEDURE CopyCFAccToBuf@1003(VAR TheCFAcc@1000 : Record "Cash Flow Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheCFAcc."No.";
        Name := TheCFAcc.Name;
        Totaling := TheCFAcc.Totaling;
        Indentation := TheCFAcc.Indentation;
        "Show in Bold" := TheCFAcc."Account Type" <> TheCFAcc."Account Type"::Entry;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record Date;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    VAR
      Period2@1002 : Record Date;
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        else
          "Period End" := ThePeriod."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := ThePeriod."Period Name";
      end;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record "Business Unit";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      end;
    END;

    LOCAL PROCEDURE CopyCashFlowToBuf@1005(VAR TheCashFlowForecast@1000 : Record "Cash Flow Forecast";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheCashFlowForecast."No.";
        Name := TheCashFlowForecast.Description;
      end;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record "Dimension Value";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      end;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record Date;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
      TempDate@1003 : Date;
    BEGIN
      if not PeriodInitialized then
        DateFilter := '';
      if (DateFilter <> '') and EVALUATE(TempDate,DateFilter) then begin
        Calendar.SETFILTER("Period Start",DateFilter);
        if not PeriodFormMgt.FindDate('+',Calendar,PeriodType) then
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      end;
      if PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) then
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          Calendar."Period End" := CLOSINGDATE(Calendar."Period End");
      if AmountType = AmountType::"Net Change" then begin
        AnalysisViewEntry.SETRANGE("Posting Date",Calendar."Period Start",Calendar."Period End");
        if AnalysisViewEntry.GETRANGEMIN("Posting Date") = AnalysisViewEntry.GETRANGEMAX("Posting Date") then
          AnalysisViewEntry.SETRANGE("Posting Date",AnalysisViewEntry.GETRANGEMIN("Posting Date"));
      end else
        AnalysisViewEntry.SETRANGE("Posting Date",0D,Calendar."Period End");

      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Page "Dimension Selection";
      AccountCaption@1003 : Text[30];
      UnitCaption@1002 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      DimSelection.InsertDimSelBuf(false,AccountCaption,AccountCaption);
      DimSelection.InsertDimSelBuf(false,Text000,Text000);
      DimSelection.InsertDimSelBuf(false,UnitCaption,UnitCaption);

      if AnalysisView."Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,AnalysisView."Dimension 1 Code",'');
      if AnalysisView."Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,AnalysisView."Dimension 2 Code",'');
      if AnalysisView."Dimension 3 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,AnalysisView."Dimension 3 Code",'');
      if AnalysisView."Dimension 4 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,AnalysisView."Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);

      exit(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      if Dim = '' then
        exit(false);
      DimValList.LOOKUPMODE(true);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@11();
    VAR
      AnalysisViewFilter@1000 : Record "Analysis View Filter";
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      if not AnalysisView.FIND('=<>') then
        ERROR(Text002);
      AnalysisViewCode := AnalysisView.Code;
      AccFilter := AnalysisView."Account Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");

      Dim1FilterEnable :=
        (AnalysisView."Dimension 1 Code" <> '') and
        (GETFILTER("Dimension 1 Value Filter") = '');
      Dim2FilterEnable :=
        (AnalysisView."Dimension 2 Code" <> '') and
        (GETFILTER("Dimension 2 Value Filter") = '');
      Dim3FilterEnable :=
        (AnalysisView."Dimension 3 Code" <> '') and
        (GETFILTER("Dimension 3 Value Filter") = '');
      Dim4FilterEnable :=
        (AnalysisView."Dimension 4 Code" <> '') and
        (GETFILTER("Dimension 4 Value Filter") = '');

      if Dim1FilterEnable then
        if AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 1 Code") then
          Dim1Filter := AnalysisViewFilter."Dimension Value Filter";

      if Dim2FilterEnable then
        if AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 2 Code") then
          Dim2Filter := AnalysisViewFilter."Dimension Value Filter";

      if Dim3FilterEnable then
        if AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 3 Code") then
          Dim3Filter := AnalysisViewFilter."Dimension Value Filter";

      if Dim4FilterEnable then
        if AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 4 Code") then
          Dim4Filter := AnalysisViewFilter."Dimension Value Filter";

      case AnalysisView."Account Source" of
        AnalysisView."Account Source"::"G/L Account":
          GLAccountSource := true;
        AnalysisView."Account Source"::"Cash Flow Account":
          GLAccountSource := false;
        else
          ERROR(Text009,AnalysisView."Account Source");
      end;
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      if (UPPERCASE(LineDimCode) <> UPPERCASE(AccountCaption)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(UnitCaption)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text000)) and
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 1 Code") and
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 2 Code") and
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 3 Code") and
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 4 Code") and
         (LineDimCode <> '')
      then begin
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      end;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      if (UPPERCASE(ColumnDimCode) <> UPPERCASE(AccountCaption)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(UnitCaption)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text000)) and
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 1 Code") and
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 2 Code") and
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 3 Code") and
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 4 Code") and
         (ColumnDimCode <> '')
      then begin
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      end;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    LOCAL PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      if AnalysisView.Code <> AnalysisViewCode then
        AnalysisView.GET(AnalysisViewCode);
      case AnalysisViewDimType of
        1:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 1 Code");

            exit(Text005);
          end;
        2:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 2 Code");

            exit(Text006);
          end;
        3:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 3 Code");

            exit(Text007);
          end;
        4:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 4 Code");

            exit(Text008);
          end;
      end;
    END;

    LOCAL PROCEDURE CreateCaptionSet@29(RecRef@1000 : Record "Dimension Code Buffer";Step@1008 : 'First,Previous,Same,Next';MaximumNoOfCaptions@1001 : Integer;VAR PrimaryKeyFirstCaptionInCurrSe@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024]);
    VAR
      CurrentCaptionOrdinal@1003 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';

      CurrentCaptionOrdinal := 0;

      case Step of
        Step::First:
          begin
            if (ColumnDimOption = ColumnDimOption::Period) and (DateFilter = '') then
              FindRec(ColumnDimOption,RecRef,'=><')
            else
              if not FindRec(ColumnDimOption,RecRef,'-') then
                exit;
          end;
        Step::Previous:
          begin
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            if ColumnDimOption = ColumnDimOption::Period then
              EVALUATE(RecRef."Period Start",RecRef.Code);
            if not FindRec(ColumnDimOption,RecRef,'=') then
              exit;
            NextRec(ColumnDimOption,RecRef,-MaximumNoOfCaptions);
          end;
        Step::Same:
          begin
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            if ColumnDimOption = ColumnDimOption::Period then
              EVALUATE(RecRef."Period Start",RecRef.Code);
            if not FindRec(ColumnDimOption,RecRef,'=') then
              exit;
          end;
        Step::Next:
          begin
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            if ColumnDimOption = ColumnDimOption::Period then
              EVALUATE(RecRef."Period Start",RecRef.Code);
            if not FindRec(ColumnDimOption,RecRef,'=') then
              exit;
            if not (NextRec(ColumnDimOption,RecRef,MaximumNoOfCaptions) = MaximumNoOfCaptions) then begin
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              FindRec(ColumnDimOption,RecRef,'=');
            end;
          end;
      end;

      PrimaryKeyFirstCaptionInCurrSe := RecRef.GETPOSITION;

      repeat
        CurrentCaptionOrdinal := CurrentCaptionOrdinal + 1;
        if ShowColumnName then
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Name
        else
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Code;
      until (CurrentCaptionOrdinal = MaximumNoOfCaptions) or (NextRec(ColumnDimOption,RecRef,1) <> 1);

      if CurrentCaptionOrdinal = 1 then
        CaptionRange := CaptionSet[1]
      else
        CaptionRange := COPYSTR(CaptionSet[1] + '..' + CaptionSet[CurrentCaptionOrdinal],1,MAXSTRLEN(CaptionRange));
    END;

    [External]
    PROCEDURE SetAnalysisViewCode@14(NextAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewAnalysisViewCode := NextAnalysisViewCode;
    END;

    LOCAL PROCEDURE GetAccountCaption@7(VAR AccountCaption@1000 : Text[30];VAR UnitCaption@1001 : Text[30]);
    VAR
      GLAcc@1002 : Record "G/L Account";
      CFAccount@1003 : Record "Cash Flow Account";
      BusUnit@1004 : Record "Business Unit";
      CashFlowForecast@1005 : Record "Cash Flow Forecast";
    BEGIN
      if GLAccountSource then begin
        AccountCaption := GLAcc.TABLECAPTION;
        UnitCaption := BusUnit.TABLECAPTION;
      end else begin
        AccountCaption := CFAccount.TABLECAPTION;
        UnitCaption := CashFlowForecast.TABLECAPTION;
      end;
    END;

    BEGIN
    END.
  }
}

