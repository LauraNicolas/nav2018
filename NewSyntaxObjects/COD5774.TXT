OBJECT Codeunit 5774 Whse.-Production Release
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Location@1000 : Record Location;
      WhseRqst@1003 : Record "Warehouse Request";
      WhsePickRqst@1001 : Record "Whse. Pick Request";
      ProdOrderComp@1002 : Record "Prod. Order Component";

    [External]
    PROCEDURE Release@1(ProdHeader@1000 : Record "Production Order");
    VAR
      LocationCode2@1001 : Code[10];
      CurrentSignFactor@1002 : Integer;
      OldSignFactor@1003 : Integer;
    BEGIN
      if ProdHeader.Status <> ProdHeader.Status::Released then
        exit;

      with ProdHeader do begin
        ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
        ProdOrderComp.SETRANGE(Status,Status);
        ProdOrderComp.SETRANGE("Prod. Order No.","No.");
        ProdOrderComp.SETFILTER(
          "Flushing Method",
          '%1|%2|%3',
          ProdOrderComp."Flushing Method"::Manual,
          ProdOrderComp."Flushing Method"::"Pick + Forward",
          ProdOrderComp."Flushing Method"::"Pick + Backward");
        ProdOrderComp.SETRANGE("Planning Level Code",0);
        ProdOrderComp.SETFILTER("Remaining Quantity",'<>0');
        if ProdOrderComp.FIND('-') then
          CreateWhseRqst(ProdOrderComp,ProdHeader);
        repeat
          CurrentSignFactor := SignFactor(ProdOrderComp.Quantity);
          if (ProdOrderComp."Location Code" <> LocationCode2) or
             (CurrentSignFactor <> OldSignFactor)
          then
            CreateWhseRqst(ProdOrderComp,ProdHeader);
          LocationCode2 := ProdOrderComp."Location Code";
          OldSignFactor := CurrentSignFactor;
        until ProdOrderComp.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateWhseRqst@3(VAR ProdOrderComp@1000 : Record "Prod. Order Component";VAR ProdHeader@1001 : Record "Production Order");
    VAR
      ProdOrderComp2@1002 : Record "Prod. Order Component";
    BEGIN
      GetLocation(ProdOrderComp."Location Code");
      if not Location."Require Pick" then
        exit;

      if (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::"Pick + Forward") and
         (ProdOrderComp."Routing Link Code" = '')
      then
        exit;

      ProdOrderComp2.COPY(ProdOrderComp);
      ProdOrderComp2.SETRANGE("Location Code",ProdOrderComp."Location Code");
      ProdOrderComp2.SETRANGE("Unit of Measure Code",'');
      if ProdOrderComp2.FINDFIRST then
        ProdOrderComp2.TESTFIELD("Unit of Measure Code");

      if Location."Require Shipment" then begin
        if ProdOrderComp."Remaining Quantity" > 0 then begin
          WhsePickRqst.INIT;
          WhsePickRqst."Document Type" := WhsePickRqst."Document Type"::Production;
          WhsePickRqst."Document Subtype" := ProdOrderComp.Status;
          WhsePickRqst."Document No." := ProdOrderComp."Prod. Order No.";
          WhsePickRqst.Status := WhsePickRqst.Status::Released;
          WhsePickRqst."Location Code" := ProdOrderComp."Location Code";
          WhsePickRqst."Completely Picked" :=
            ProdOrderCompletelyPicked(
              ProdOrderComp."Location Code",ProdHeader."No.",ProdHeader.Status,ProdOrderComp."Line No.");
          if WhsePickRqst."Completely Picked" and (not ProdOrderComp."Completely Picked") then
            WhsePickRqst."Completely Picked" := false;
          if not WhsePickRqst.INSERT then
            WhsePickRqst.MODIFY;
        end
      end else begin
        WhseRqst.INIT;
        if ProdOrderComp."Remaining Quantity" > 0 then
          WhseRqst.Type := WhseRqst.Type::Outbound
        else
          WhseRqst.Type := WhseRqst.Type::Inbound;
        WhseRqst."Location Code" := ProdOrderComp."Location Code";
        WhseRqst."Source Type" := DATABASE::"Prod. Order Component";
        WhseRqst."Source No." := ProdOrderComp."Prod. Order No.";
        WhseRqst."Source Subtype" := ProdOrderComp.Status;
        WhseRqst."Source Document" := WhseRqst."Source Document"::"Prod. Consumption";
        WhseRqst."Document Status" := WhseRqst."Document Status"::Released;
        case ProdHeader."Source Type" of
          ProdHeader."Source Type"::Item:
            WhseRqst."Destination Type" := WhseRqst."Destination Type"::Item;
          ProdHeader."Source Type"::Family:
            WhseRqst."Destination Type" := WhseRqst."Destination Type"::Family;
          ProdHeader."Source Type"::"Sales Header":
            WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
        end;
        WhseRqst."Destination No." := ProdHeader."Source No.";
        WhseRqst."Completely Handled" :=
          ProdOrderCompletelyHandled(ProdHeader,ProdOrderComp."Location Code");
        if not WhseRqst.INSERT then
          WhseRqst.MODIFY;
      end;
    END;

    [External]
    PROCEDURE ReleaseLine@2(VAR ProdOrderComp@1000 : Record "Prod. Order Component";VAR OldProdOrderComp@1001 : Record "Prod. Order Component");
    VAR
      ProdHeader@1002 : Record "Production Order";
      WarehouseRequest@1003 : Record "Warehouse Request";
      WhsePickRequest@1004 : Record "Whse. Pick Request";
    BEGIN
      with ProdOrderComp do begin
        GetLocation("Location Code");
        if Location."Require Pick" then
          if Location."Require Shipment" then begin
            if "Remaining Quantity" > 0 then begin
              WhsePickRequest.INIT;
              WhsePickRequest."Document Type" := WhsePickRequest."Document Type"::Production;
              WhsePickRequest."Document Subtype" := Status;
              WhsePickRequest."Document No." := "Prod. Order No.";
              WhsePickRequest.Status := WhsePickRequest.Status::Released;
              WhsePickRequest."Completely Picked" :=
                ProdOrderCompletelyPicked("Location Code","Prod. Order No.",Status,"Line No.");
              if WhsePickRequest."Completely Picked" and (not "Completely Picked") then
                WhsePickRequest."Completely Picked" := false;
              WhsePickRequest."Location Code" := "Location Code";
              if not WhsePickRequest.INSERT then
                WhsePickRequest.MODIFY;
            end;
          end else
            if "Remaining Quantity" <> 0 then begin
              if "Remaining Quantity" > 0 then
                WarehouseRequest.Type := WarehouseRequest.Type::Outbound
              else
                WarehouseRequest.Type := WarehouseRequest.Type::Inbound;
              ProdHeader.GET(Status,"Prod. Order No.");
              WarehouseRequest.INIT;
              WarehouseRequest."Location Code" := "Location Code";
              WarehouseRequest."Source Type" := DATABASE::"Prod. Order Component";
              WarehouseRequest."Source No." := "Prod. Order No.";
              WarehouseRequest."Source Subtype" := Status;
              WarehouseRequest."Source Document" := WarehouseRequest."Source Document"::"Prod. Consumption";
              WarehouseRequest."Document Status" := WarehouseRequest."Document Status"::Released;
              case ProdHeader."Source Type" of
                ProdHeader."Source Type"::Item:
                  WarehouseRequest."Destination Type" := WarehouseRequest."Destination Type"::Item;
                ProdHeader."Source Type"::Family:
                  WarehouseRequest."Destination Type" := WarehouseRequest."Destination Type"::Family;
                ProdHeader."Source Type"::"Sales Header":
                  WarehouseRequest."Destination Type" := WarehouseRequest."Destination Type"::"Sales Order";
              end;
              WarehouseRequest."Destination No." := ProdHeader."Source No.";
              if not WarehouseRequest.INSERT then
                WarehouseRequest.MODIFY;
            end;

        if ("Line No." = OldProdOrderComp."Line No.") and
           (("Location Code" <> OldProdOrderComp."Location Code") or
            (("Remaining Quantity" * OldProdOrderComp."Remaining Quantity") <= 0))
        then
          DeleteLine(OldProdOrderComp);
      end;
    END;

    [External]
    PROCEDURE DeleteLine@4(ProdOrderComp@1000 : Record "Prod. Order Component");
    VAR
      ProdOrderComp2@1001 : Record "Prod. Order Component";
      KeepWhseRqst@1002 : Boolean;
    BEGIN
      with ProdOrderComp do begin
        KeepWhseRqst := false;
        GetLocation("Location Code");
        ProdOrderComp2.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
        ProdOrderComp2.SETRANGE(Status,Status);
        ProdOrderComp2.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderComp2.SETRANGE("Location Code","Location Code");
        ProdOrderComp2.SETFILTER(
          "Flushing Method",'%1|%2|%3',
          ProdOrderComp2."Flushing Method"::Manual,
          ProdOrderComp2."Flushing Method"::"Pick + Forward",
          ProdOrderComp2."Flushing Method"::"Pick + Backward");
        ProdOrderComp2.SETRANGE("Planning Level Code",0);
        ProdOrderComp2.SETFILTER("Remaining Quantity",'<>0');
        if ProdOrderComp2.FIND('-') then
          repeat
            if ((ProdOrderComp2.Status <> Status) or
                (ProdOrderComp2."Prod. Order No." <> "Prod. Order No.") or
                (ProdOrderComp2."Prod. Order Line No." <> "Prod. Order Line No.") or
                (ProdOrderComp2."Line No." <> "Line No.")) and
               ((not ProdOrderComp2."Completely Picked") or
                (not (Location."Require Pick" and Location."Require Shipment")))
            then
              KeepWhseRqst := true;
          until (ProdOrderComp2.NEXT = 0) or KeepWhseRqst;

        if not KeepWhseRqst then begin
          if Location."Require Shipment" then
            DeleteWhsePickRqst(ProdOrderComp,false)
          else
            DeleteWhseRqst(ProdOrderComp,false);
        end;
      end;
    END;

    LOCAL PROCEDURE DeleteWhsePickRqst@5(ProdOrderComp@1000 : Record "Prod. Order Component";DeleteAllWhsePickRqst@1003 : Boolean);
    VAR
      WhseRqst@1005 : Record "Whse. Pick Request";
    BEGIN
      with ProdOrderComp do begin
        WhsePickRqst.SETRANGE("Document Type",WhseRqst."Document Type"::Production);
        WhsePickRqst.SETRANGE("Document No.","Prod. Order No.");
        if not DeleteAllWhsePickRqst then begin
          WhsePickRqst.SETRANGE("Document Subtype",Status);
          WhsePickRqst.SETRANGE("Location Code","Location Code");
        end;
        if not WhsePickRqst.ISEMPTY then
          WhsePickRqst.DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE DeleteWhseRqst@10(ProdOrderComp@1000 : Record "Prod. Order Component";DeleteAllWhseRqst@1003 : Boolean);
    VAR
      WhseRqst@1005 : Record "Warehouse Request";
    BEGIN
      with ProdOrderComp do begin
        if not DeleteAllWhseRqst then
          case true of
            "Remaining Quantity" > 0:
              WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
            "Remaining Quantity" < 0:
              WhseRqst.SETRANGE(Type,WhseRqst.Type::Inbound);
            "Remaining Quantity" = 0:
              exit;
          end;
        WhseRqst.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        WhseRqst.SETRANGE("Source No.","Prod. Order No.");
        if not DeleteAllWhseRqst then begin
          WhseRqst.SETRANGE("Source Subtype",Status);
          WhseRqst.SETRANGE("Location Code","Location Code");
        end;
        if not WhseRqst.ISEMPTY then
          WhseRqst.DELETEALL(true);
      end;
    END;

    [External]
    PROCEDURE FinishedDelete@6(VAR ProdHeader@1000 : Record "Production Order");
    BEGIN
      with ProdHeader do begin
        ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
        ProdOrderComp.SETRANGE(Status,Status);
        ProdOrderComp.SETRANGE("Prod. Order No.","No.");
        if ProdOrderComp.FIND('-') then begin
          DeleteWhsePickRqst(ProdOrderComp,true);
          DeleteWhseRqst(ProdOrderComp,true);
        end;
      end;
    END;

    LOCAL PROCEDURE ProdOrderCompletelyPicked@7(LocationCode@1001 : Code[10];ProdOrderNo@1003 : Code[20];ProdOrderStatus@1000 : Option;CompLineNo@1004 : Integer) : Boolean;
    VAR
      ProdOrderComp@1002 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
      ProdOrderComp.SETRANGE(Status,ProdOrderStatus);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComp.SETRANGE("Location Code",LocationCode);
      ProdOrderComp.SETFILTER("Line No.",'<>%1',CompLineNo);
      ProdOrderComp.SETRANGE("Flushing Method",ProdOrderComp."Flushing Method"::Manual);
      ProdOrderComp.SETRANGE("Planning Level Code",0);
      ProdOrderComp.SETRANGE("Completely Picked",false);
      exit(not ProdOrderComp.FINDFIRST);
    END;

    LOCAL PROCEDURE ProdOrderCompletelyHandled@9(ProdOrder@1000 : Record "Production Order";LocationCode@1001 : Code[10]) : Boolean;
    VAR
      ProdOrderComp@1002 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Location Code");
      ProdOrderComp.SETRANGE(Status,ProdOrder.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrder."No.");
      ProdOrderComp.SETRANGE("Location Code",LocationCode);
      ProdOrderComp.SETFILTER(
        "Flushing Method",'%1|%2|%3',
        ProdOrderComp."Flushing Method"::Manual,
        ProdOrderComp."Flushing Method"::"Pick + Forward",
        ProdOrderComp."Flushing Method"::"Pick + Backward");
      ProdOrderComp.SETRANGE("Planning Level Code",0);
      ProdOrderComp.SETFILTER("Remaining Quantity",'<>0');
      exit(not ProdOrderComp.FINDFIRST);
    END;

    LOCAL PROCEDURE GetLocation@8(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode <> Location.Code then begin
        if LocationCode = '' then begin
          Location.GetLocationSetup(LocationCode,Location);
          Location.Code := '';
        end else
          Location.GET(LocationCode);
      end;
    END;

    LOCAL PROCEDURE SignFactor@11(Quantity@1000 : Decimal) : Integer;
    BEGIN
      if Quantity > 0 then
        exit(1);
      exit(-1);
    END;

    BEGIN
    END.
  }
}

