OBJECT Table 5092 Opportunity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Description;
    OnInsert=BEGIN
               if "No." = '' then begin
                 RMSetup.GET;
                 RMSetup.TESTFIELD("Opportunity Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Opportunity Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;

               if "Salesperson Code" = '' then
                 SetDefaultSalesperson;

               "Creation Date" := WORKDATE;
             END;

    OnDelete=VAR
               OppEntry@1000 : Record "Opportunity Entry";
             BEGIN
               if Status = Status::"In Progress" then
                 ERROR(Text000);

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Opportunity);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.DELETEALL;

               OppEntry.SETCURRENTKEY("Opportunity No.");
               OppEntry.SETRANGE("Opportunity No.","No.");
               OppEntry.DELETEALL;
             END;

    CaptionML=ENU=Opportunity;
    LookupPageID="Opportunity List";
    DrillDownPageID="Opportunity List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Opportunity Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=VAR
                                                                Task@1000 : Record "To-do";
                                                                Task2@1004 : Record "To-do";
                                                                OppEntry@1001 : Record "Opportunity Entry";
                                                                Attendee@1005 : Record Attendee;
                                                                Window@1009 : Dialog;
                                                                TotalRecordsNumber@1003 : Integer;
                                                                Counter@1002 : Integer;
                                                              BEGIN
                                                                if ("Salesperson Code" <> xRec."Salesperson Code") and
                                                                   (xRec."Salesperson Code" <> '') and
                                                                   ("No." <> '')
                                                                then begin
                                                                  TESTFIELD("Salesperson Code");
                                                                  Task.RESET;
                                                                  Task.SETCURRENTKEY("Opportunity No.",Date,Closed);
                                                                  Task.SETRANGE("Opportunity No.","No.");
                                                                  Task.SETRANGE(Closed,false);
                                                                  Task.SETRANGE("Salesperson Code",xRec."Salesperson Code");
                                                                  TotalRecordsNumber := Task.COUNT;
                                                                  Counter := 0;
                                                                  if Task.FIND('-') then
                                                                    if CONFIRM(ChangeConfirmQst,false,FIELDCAPTION("Salesperson Code")) then begin
                                                                      Window.OPEN(Text012 + Text013);
                                                                      Window.UPDATE(2,Text014);
                                                                      repeat
                                                                        Counter := Counter + 1;
                                                                        Window.UPDATE(1,ROUND(Counter / TotalRecordsNumber * 10000,1));
                                                                        if Task.Type = Task.Type::Meeting then begin
                                                                          Task.GetMeetingOrganizerTask(Task2);
                                                                          if Task."Salesperson Code" <> Task2."Salesperson Code" then begin
                                                                            Task.VALIDATE("Salesperson Code","Salesperson Code");
                                                                            Task.MODIFY;
                                                                          end;
                                                                          Attendee.RESET;
                                                                          Attendee.SETRANGE("To-do No.",Task2."No.");
                                                                          Attendee.SETRANGE("Attendee No.",xRec."Salesperson Code");
                                                                          Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Salesperson);
                                                                          Attendee.SETRANGE("Attendance Type",Attendee."Attendance Type"::Required,Attendee."Attendance Type"::Optional);
                                                                          if Attendee.FINDFIRST then begin
                                                                            Attendee.VALIDATE("Attendee No.","Salesperson Code");
                                                                            Attendee.MODIFY(true);
                                                                          end;
                                                                        end
                                                                        else begin
                                                                          Task.VALIDATE("Salesperson Code","Salesperson Code");
                                                                          Task.MODIFY(true);
                                                                        end;
                                                                      until Task.NEXT = 0;
                                                                      Window.CLOSE;
                                                                    end;

                                                                  OppEntry.RESET;
                                                                  OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                  OppEntry.SETRANGE(Active,true);
                                                                  OppEntry.SETRANGE("Opportunity No.","No.");
                                                                  if OppEntry.FIND('-') then
                                                                    repeat
                                                                      OppEntry."Salesperson Code" := "Salesperson Code";
                                                                      OppEntry.MODIFY;
                                                                    until OppEntry.NEXT = 0;

                                                                  MODIFY;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 4   ;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=VAR
                                                                Task@1001 : Record "To-do";
                                                                OppEntry@1000 : Record "Opportunity Entry";
                                                              BEGIN
                                                                if ("Campaign No." <> xRec."Campaign No.") and
                                                                   ("No." <> '')
                                                                then begin
                                                                  CheckCampaign;
                                                                  SetDefaultSegmentNo;
                                                                  Task.RESET;
                                                                  Task.SETCURRENTKEY("Opportunity No.",Date,Closed);
                                                                  Task.SETRANGE("Opportunity No.","No.");
                                                                  Task.SETRANGE(Closed,false);
                                                                  Task.SETRANGE("Campaign No.",xRec."Campaign No.");
                                                                  if Task.FIND('-') then
                                                                    if CONFIRM(ChangeConfirmQst,false,FIELDCAPTION("Campaign No.")) then
                                                                      repeat
                                                                        Task."Campaign No." := "Campaign No.";
                                                                        Task.MODIFY;
                                                                      until Task.NEXT = 0;

                                                                  OppEntry.RESET;
                                                                  OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                  OppEntry.SETRANGE(Active,true);
                                                                  OppEntry.SETRANGE("Opportunity No.","No.");
                                                                  if OppEntry.FIND('-') then
                                                                    repeat
                                                                      OppEntry."Campaign No." := "Campaign No.";
                                                                      OppEntry.MODIFY;
                                                                    until OppEntry.NEXT = 0;

                                                                  MODIFY;
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCampaigns;
                                                            END;

                                                   CaptionML=ENU=Campaign No. }
    { 5   ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record Contact;
                                                                Task@1002 : Record "To-do";
                                                                Task2@1005 : Record "To-do";
                                                                OppEntry@1001 : Record "Opportunity Entry";
                                                                SalesHeader@1003 : Record "Sales Header";
                                                                Attendee@1004 : Record Attendee;
                                                                Window@1007 : Dialog;
                                                                TotalRecordsNumber@1011 : Integer;
                                                                Counter@1012 : Integer;
                                                              BEGIN
                                                                TESTFIELD("Contact No.");
                                                                Cont.GET("Contact No.");

                                                                if ("Contact No." <> xRec."Contact No.") and
                                                                   (xRec."Contact No." <> '') and
                                                                   ("No." <> '')
                                                                then begin
                                                                  CALCFIELDS("Contact Name");
                                                                  if ("Contact Company No." <> Cont."Company No.") and
                                                                     (Status <> Status::"Not Started")
                                                                  then
                                                                    ERROR(Text009,Cont."No.",Cont.Name);

                                                                  if ("Sales Document No." <> '') and ("Sales Document Type" = "Sales Document Type"::Quote) then begin
                                                                    SalesHeader.GET(SalesHeader."Document Type"::Quote,"Sales Document No.");
                                                                    if SalesHeader."Sell-to Contact No." <> "Contact No." then begin
                                                                      MODIFY;
                                                                      SalesHeader.SetHideValidationDialog(true);
                                                                      SalesHeader.VALIDATE("Sell-to Contact No.","Contact No.");
                                                                      SalesHeader.MODIFY
                                                                    end
                                                                  end;
                                                                  Task.RESET;
                                                                  Task.SETCURRENTKEY("Opportunity No.",Date,Closed);
                                                                  Task.SETRANGE("Opportunity No.","No.");
                                                                  Task.SETRANGE(Closed,false);
                                                                  Task.SETRANGE("Contact No.",xRec."Contact No.");
                                                                  TotalRecordsNumber := Task.COUNT;
                                                                  Counter := 0;
                                                                  if Task.FIND('-') then
                                                                    if CONFIRM(ChangeConfirmQst,false,FIELDCAPTION("Contact No.")) then begin
                                                                      Window.OPEN(Text012 + Text013);
                                                                      Window.UPDATE(2,Text014);
                                                                      repeat
                                                                        Counter := Counter + 1;
                                                                        Window.UPDATE(1,ROUND(Counter / TotalRecordsNumber * 10000,1));
                                                                        if Task.Type = Task.Type::Meeting then begin
                                                                          Task.GetMeetingOrganizerTask(Task2);
                                                                          Task.VALIDATE("Contact No.","Contact No.");
                                                                          Task.MODIFY;
                                                                          Attendee.RESET;
                                                                          Attendee.SETRANGE("To-do No.",Task2."No.");
                                                                          Attendee.SETRANGE("Attendee No.",xRec."Contact No.");
                                                                          Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Contact);
                                                                          if Attendee.FINDFIRST then begin
                                                                            Attendee.VALIDATE("Attendee No.","Contact No.");
                                                                            Attendee.MODIFY(true);
                                                                          end;
                                                                        end else begin
                                                                          Task.VALIDATE("Contact No.","Contact No.");
                                                                          Task.MODIFY(true);
                                                                        end;
                                                                      until Task.NEXT = 0;
                                                                      Window.CLOSE;
                                                                    end;

                                                                  OppEntry.RESET;
                                                                  OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                  OppEntry.SETRANGE(Active,true);
                                                                  OppEntry.SETRANGE("Opportunity No.","No.");
                                                                  if OppEntry.FIND('-') then
                                                                    repeat
                                                                      OppEntry.VALIDATE("Contact No.","Contact No.");
                                                                      OppEntry.MODIFY;
                                                                    until OppEntry.NEXT = 0;

                                                                  MODIFY;
                                                                end;

                                                                "Contact Company No." := Cont."Company No.";
                                                                CALCFIELDS("Contact Name","Contact Company Name");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record Contact;
                                                            BEGIN
                                                              if Cont.GET("Contact No.") and (Status <> Status::"Not Started") then
                                                                Cont.SETRANGE("Company No.",Cont."Company No.");
                                                              if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                                                xRec."Contact No." := "Contact No.";
                                                                VALIDATE("Contact No.",Cont."No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Contact No. }
    { 6   ;   ;Contact Company No. ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=ENU=Contact Company No. }
    { 7   ;   ;Sales Cycle Code    ;Code10        ;TableRelation="Sales Cycle";
                                                   OnValidate=VAR
                                                                SalesCycle@1000 : Record "Sales Cycle";
                                                              BEGIN
                                                                SalesCycle.GET("Sales Cycle Code");
                                                                SalesCycle.TESTFIELD(Blocked,false);
                                                              END;

                                                   CaptionML=ENU=Sales Cycle Code }
    { 8   ;   ;Sales Document No.  ;Code20        ;TableRelation=IF ("Sales Document Type"=CONST(Quote)) "Sales Header"."No." WHERE ("Document Type"=CONST(Quote),
                                                                                                                                     "Sell-to Contact No."=FIELD("Contact No."))
                                                                                                                                     ELSE IF ("Sales Document Type"=CONST(Order)) "Sales Header"."No." WHERE ("Document Type"=CONST(Order),
                                                                                                                                                                                                              "Sell-to Contact No."=FIELD("Contact No."))
                                                                                                                                                                                                              ELSE IF ("Sales Document Type"=CONST("Posted Invoice")) "Sales Invoice Header"."No." WHERE ("Sell-to Contact No."=FIELD("Contact No."));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record Opportunity;
                                                                SalesHeader@1001 : Record "Sales Header";
                                                              BEGIN
                                                                if "Sales Document No." = '' then begin
                                                                  "Sales Document Type" := "Sales Document Type"::" ";
                                                                  if xRec."Sales Document Type" = "Sales Document Type"::Quote then
                                                                    if SalesHeader.GET(SalesHeader."Document Type"::Quote,xRec."Sales Document No.") then begin
                                                                      SalesHeader."Opportunity No." := '';
                                                                      SalesHeader.MODIFY
                                                                    end
                                                                end else
                                                                  if "Sales Document No." <> xRec."Sales Document No." then begin
                                                                    Opp.RESET;
                                                                    Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
                                                                    Opp.SETRANGE("Sales Document Type","Sales Document Type");
                                                                    Opp.SETRANGE("Sales Document No.","Sales Document No.");
                                                                    if Opp.FINDFIRST then
                                                                      if Opp."No." <> "No." then
                                                                        ERROR(Text006,Opp."Sales Document Type",Opp."Sales Document No.",Opp."No.");

                                                                    if xRec."Sales Document Type" = "Sales Document Type"::Quote then
                                                                      if SalesHeader.GET(SalesHeader."Document Type"::Quote,xRec."Sales Document No.") then begin
                                                                        SalesHeader."Opportunity No." := '';
                                                                        SalesHeader.MODIFY
                                                                      end;
                                                                    if "Sales Document Type" = "Sales Document Type"::Quote then
                                                                      if SalesHeader.GET(SalesHeader."Document Type"::Quote,"Sales Document No.") then begin
                                                                        SalesHeader."Opportunity No." := "No.";
                                                                        SalesHeader.MODIFY
                                                                      end
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Sales Document No. }
    { 9   ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 10  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Won,Lost;
                                                   OptionString="Not Started","In Progress",Won,Lost;
                                                   Editable=false }
    { 11  ;   ;Priority            ;Option        ;InitValue=Normal;
                                                   CaptionML=ENU=Priority;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=false }
    { 13  ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed;
                                                   Editable=false }
    { 15  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 16  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE ("Table Name"=CONST(Opportunity),
                                                                                                       "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 17  ;   ;Current Sales Cycle Stage;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Opportunity Entry"."Sales Cycle Stage" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                     Active=CONST(true)));
                                                   CaptionML=ENU=Current Sales Cycle Stage;
                                                   BlankZero=true;
                                                   Editable=false }
    { 18  ;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                      Active=CONST(true)));
                                                   CaptionML=ENU=Estimated Value (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 19  ;   ;Probability %       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Opportunity Entry"."Probability %" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                 Active=CONST(true)));
                                                   CaptionML=ENU=Probability %;
                                                   DecimalPlaces=1:1;
                                                   Editable=false }
    { 20  ;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                           Active=CONST(true)));
                                                   CaptionML=ENU=Calcd. Current Value (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 21  ;   ;Chances of Success %;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Opportunity Entry"."Chances of Success %" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                        Active=CONST(true)));
                                                   CaptionML=ENU=Chances of Success %;
                                                   DecimalPlaces=0:0;
                                                   Editable=false }
    { 22  ;   ;Completed %         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Opportunity Entry"."Completed %" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                               Active=CONST(true)));
                                                   CaptionML=ENU=Completed %;
                                                   DecimalPlaces=0:0;
                                                   Editable=false }
    { 23  ;   ;Contact Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE ("No."=FIELD("Contact No.")));
                                                   CaptionML=ENU=Contact Name;
                                                   Editable=false }
    { 24  ;   ;Contact Company Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE ("No."=FIELD("Contact Company No.")));
                                                   CaptionML=ENU=Contact Company Name;
                                                   Editable=false }
    { 25  ;   ;Salesperson Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Salesperson/Purchaser".Name WHERE (Code=FIELD("Salesperson Code")));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=false }
    { 26  ;   ;Campaign Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Campaign.Description WHERE ("No."=FIELD("Campaign No.")));
                                                   CaptionML=ENU=Campaign Description;
                                                   Editable=false }
    { 27  ;   ;Segment No.         ;Code20        ;TableRelation="Segment Header";
                                                   OnValidate=BEGIN
                                                                if ("Segment No." <> xRec."Segment No.") and ("Segment No." <> '') and ("Campaign No." <> '') then
                                                                  CheckSegmentCampaignNo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSegments;
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Segment No. }
    { 28  ;   ;Estimated Closing Date;Date        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Opportunity Entry"."Estimated Close Date" WHERE ("Opportunity No."=FIELD("No."),
                                                                                                                        Active=CONST(true)));
                                                   CaptionML=ENU=Estimated Closing Date;
                                                   Editable=false }
    { 29  ;   ;Sales Document Type ;Option        ;OnValidate=BEGIN
                                                                if "Sales Document Type" = xRec."Sales Document Type" then
                                                                  exit;
                                                                if "Sales Document Type" = "Sales Document Type"::" " then
                                                                  VALIDATE("Sales Document No.",'');
                                                              END;

                                                   CaptionML=ENU=Sales Document Type;
                                                   OptionCaptionML=ENU=" ,Quote,Order,Posted Invoice";
                                                   OptionString=" ",Quote,Order,"Posted Invoice" }
    { 30  ;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE ("Opportunity No."=FIELD(FILTER("No.")),
                                                                                                    Canceled=CONST(false),
                                                                                                    Postponed=CONST(false)));
                                                   CaptionML=ENU=No. of Interactions;
                                                   Editable=false }
    { 9501;   ;Wizard Step         ;Option        ;CaptionML=ENU=Wizard Step;
                                                   OptionCaptionML=ENU=" ,1,2,3,4,5,6";
                                                   OptionString=" ","1","2","3","4","5","6";
                                                   Editable=false }
    { 9502;   ;Activate First Stage;Boolean       ;CaptionML=ENU=Activate First Stage }
    { 9503;   ;Segment Description ;Text50        ;CaptionML=ENU=Segment Description }
    { 9504;   ;Wizard Estimated Value (LCY);Decimal;
                                                   CaptionML=ENU=Wizard Estimated Value (LCY);
                                                   AutoFormatType=1 }
    { 9505;   ;Wizard Chances of Success %;Decimal;CaptionML=ENU=Wizard Chances of Success %;
                                                   DecimalPlaces=0:0 }
    { 9506;   ;Wizard Estimated Closing Date;Date ;CaptionML=ENU=Wizard Estimated Closing Date }
    { 9507;   ;Wizard Contact Name ;Text50        ;CaptionML=ENU=Wizard Contact Name }
    { 9508;   ;Wizard Campaign Description;Text50 ;CaptionML=ENU=Wizard Campaign Description }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Contact Company No.","Contact No.",Closed }
    {    ;"Salesperson Code",Closed                }
    {    ;"Campaign No.",Closed                    }
    {    ;"Segment No.",Closed                     }
    {    ;"Sales Document Type","Sales Document No." }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Description,"Creation Date",Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete this opportunity while it is active.';
      Text001@1001 : TextConst 'ENU=You cannot create opportunities on an empty segment.';
      Text002@1002 : TextConst 'ENU=Do you want to create an opportunity for all contacts in the %1 segment?';
      Text003@1009 : TextConst 'ENU=There is no sales quote that is assigned to this opportunity.';
      Text004@1003 : TextConst 'ENU=Sales quote %1 does not exist.';
      Text005@1005 : TextConst 'ENU=You cannot assign a sales quote to the %2 record of the %1 while the %2 record of the %1 has no contact company assigned.';
      RMSetup@1011 : Record "Marketing Setup";
      Opp@1012 : Record Opportunity;
      RMCommentLine@1013 : Record "Rlshp. Mgt. Comment Line";
      SegHeader@1018 : Record "Segment Header";
      OppEntry@1020 : Record "Opportunity Entry";
      RMCommentLineTmp@1022 : TEMPORARY Record "Rlshp. Mgt. Comment Line";
      NoSeriesMgt@1014 : Codeunit NoSeriesManagement;
      Text006@1004 : TextConst 'ENU=Sales %1 %2 is already assigned to opportunity %3.';
      ChangeConfirmQst@1007 : TextConst '@@@="%1 = Field Caption";ENU=Do you want to change %1 on the related open tasks with the same %1?';
      Text009@1008 : TextConst 'ENU=Contact %1 %2 is related to another company.';
      Text011@1010 : TextConst 'ENU=A sales quote has already been assigned to this opportunity.';
      Text012@1017 : TextConst 'ENU=Current process @1@@@@@@@@@@@@@@@\';
      Text013@1016 : TextConst 'ENU=Current status  #2###############';
      Text014@1015 : TextConst 'ENU=Updating Tasks';
      Text022@1026 : TextConst 'ENU=You must fill in the %1 field.';
      Text023@1025 : TextConst 'ENU=You must fill in the contact that is involved in the opportunity.';
      Text024@1024 : TextConst 'ENU=%1 must be greater than 0.';
      Text025@1023 : TextConst 'ENU=The Estimated closing date has to be later than this change';
      ActivateFirstStageQst@1021 : TextConst 'ENU=Would you like to activate first stage for this opportunity?';
      SalesCycleNotFoundErr@1019 : TextConst 'ENU=Sales Cycle Stage not found.';

    [External]
    PROCEDURE CreateFromInteractionLogEntry@21(InteractionLogEntry@1000 : Record "Interaction Log Entry");
    BEGIN
      INIT;
      "No." := '';
      "Creation Date" := WORKDATE;
      Description := InteractionLogEntry.Description;
      "Segment No." := InteractionLogEntry."Segment No.";
      "Segment Description" := InteractionLogEntry.Description;
      "Campaign No." := InteractionLogEntry."Campaign No.";
      "Salesperson Code" := InteractionLogEntry."Salesperson Code";
      "Contact No." := InteractionLogEntry."Contact No.";
      "Contact Company No." := InteractionLogEntry."Contact Company No.";
      SetDefaultSalesCycle;
      INSERT(true);
      CopyCommentLinesFromIntLogEntry(InteractionLogEntry);
    END;

    [External]
    PROCEDURE CreateFromSegmentLine@14(SegmentLine@1000 : Record "Segment Line");
    BEGIN
      INIT;
      "No." := '';
      "Creation Date" := WORKDATE;
      Description := SegmentLine.Description;
      "Segment No." := SegmentLine."Segment No.";
      "Segment Description" := SegmentLine.Description;
      "Campaign No." := SegmentLine."Campaign No.";
      "Salesperson Code" := SegmentLine."Salesperson Code";
      "Contact No." := SegmentLine."Contact No.";
      "Contact Company No." := SegmentLine."Contact Company No.";
      SetDefaultSalesCycle;
      INSERT(true);
    END;

    [External]
    PROCEDURE CreateOppFromOpp@1(VAR Opp@1007 : Record Opportunity);
    VAR
      Cont@1001 : Record Contact;
      SalesPurchPerson@1002 : Record "Salesperson/Purchaser";
      Campaign@1003 : Record Campaign;
      SegHeader@1004 : Record "Segment Header";
      SegLine@1005 : Record "Segment Line";
    BEGIN
      DELETEALL;
      INIT;
      "Creation Date" := WORKDATE;
      SetDefaultSalesCycle;
      if Cont.GET(Opp.GETFILTER("Contact Company No.")) then begin
        VALIDATE("Contact No.",Cont."No.");
        "Salesperson Code" := Cont."Salesperson Code";
        SETRANGE("Contact Company No.","Contact No.");
      end;
      if Cont.GET(Opp.GETFILTER("Contact No.")) then begin
        VALIDATE("Contact No.",Cont."No.");
        "Salesperson Code" := Cont."Salesperson Code";
        SETRANGE("Contact No.","Contact No.");
      end;
      if SalesPurchPerson.GET(Opp.GETFILTER("Salesperson Code")) then begin
        "Salesperson Code" := SalesPurchPerson.Code;
        SETRANGE("Salesperson Code","Salesperson Code");
      end;
      if Campaign.GET(Opp.GETFILTER("Campaign No.")) then begin
        "Campaign No." := Campaign."No.";
        "Salesperson Code" := Campaign."Salesperson Code";
        SETRANGE("Campaign No.","Campaign No.");
      end;
      if SegHeader.GET(Opp.GETFILTER("Segment No.")) then begin
        SegLine.SETRANGE("Segment No.",SegHeader."No.");
        if SegLine.COUNT = 0 then
          ERROR(Text001);
        "Segment No." := SegHeader."No.";
        "Campaign No." := SegHeader."Campaign No.";
        "Salesperson Code" := SegHeader."Salesperson Code";
        SETRANGE("Segment No.","Segment No.");
      end;

      StartWizard;
    END;

    LOCAL PROCEDURE InsertOpportunity@3(VAR Opp2@1000 : Record Opportunity;OppEntry2@1004 : Record "Opportunity Entry";VAR RMCommentLineTmp@1007 : Record "Rlshp. Mgt. Comment Line";ActivateFirstStage@1006 : Boolean);
    VAR
      SegHeader@1001 : Record "Segment Header";
      SegLine@1002 : Record "Segment Line";
      SalesCycleStage@1003 : Record "Sales Cycle Stage";
      OppEntry@1005 : Record "Opportunity Entry";
    BEGIN
      Opp := Opp2;

      if ActivateFirstStage then begin
        SalesCycleStage.RESET;
        SalesCycleStage.SETRANGE("Sales Cycle Code",Opp."Sales Cycle Code");
        if SalesCycleStage.FINDFIRST then
          OppEntry2."Sales Cycle Stage" := SalesCycleStage.Stage;
      end;

      if SegHeader.GET(GETFILTER("Segment No.")) then begin
        SegLine.SETRANGE("Segment No.",SegHeader."No.");
        SegLine.SETFILTER("Contact No.",'<>%1','');
        if SegLine.FIND('-') then begin
          if CONFIRM(Text002,true,SegHeader."No.") then
            repeat
              Opp."Contact No." := SegLine."Contact No.";
              Opp."Contact Company No." := SegLine."Contact Company No.";
              CLEAR(Opp."No.");
              Opp.INSERT(true);
              CreateCommentLines(RMCommentLineTmp,Opp."No.");
              if ActivateFirstStage then begin
                OppEntry.INIT;
                OppEntry := OppEntry2;
                OppEntry.InitOpportunityEntry(Opp);
                OppEntry.InsertEntry(OppEntry,false,true);
                OppEntry.UpdateEstimates;
              end;
            until SegLine.NEXT = 0;
        end;
      end else begin
        Opp.INSERT(true);
        CreateCommentLines(RMCommentLineTmp,Opp."No.");
        if ActivateFirstStage then begin
          OppEntry.INIT;
          OppEntry := OppEntry2;
          OppEntry.InitOpportunityEntry(Opp);
          OppEntry.InsertEntry(OppEntry,false,true);
          OppEntry.UpdateEstimates;
        end;
      end;
    END;

    [External]
    PROCEDURE UpdateOpportunity@4();
    VAR
      TempOppEntry@1000 : TEMPORARY Record "Opportunity Entry";
    BEGIN
      if "No." <> '' then
        TempOppEntry.UpdateOppFromOpp(Rec);
    END;

    [External]
    PROCEDURE CloseOpportunity@5();
    VAR
      TempOppEntry@1000 : TEMPORARY Record "Opportunity Entry";
    BEGIN
      if "No." <> '' then
        TempOppEntry.CloseOppFromOpp(Rec);
    END;

    [External]
    PROCEDURE AssignQuote@6();
    VAR
      Cont@1001 : Record Contact;
      ContactBusinessRelation@1002 : Record "Contact Business Relation";
      SalesHeader@1000 : Record "Sales Header";
      CustTemplate@1004 : Record "Customer Template";
      CustTemplateCode@1003 : Code[10];
    BEGIN
      Cont.GET("Contact No.");

      if (Cont.Type = Cont.Type::Person) and (Cont."Company No." = '') then
        ERROR(
          Text005,
          Cont.TABLECAPTION,Cont."No.");

      if Cont.Type = Cont.Type::Person then
        Cont.GET(Cont."Company No.");

      ContactBusinessRelation.SETRANGE("Contact No.",Cont."No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      if ContactBusinessRelation.ISEMPTY then begin
        if (Cont.Type = Cont.Type::Company) and (PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK) then
          CustTemplateCode := CustTemplate.Code
        else
          Cont.CreateCustomer(Cont.ChooseCustomerTemplate);
      end;

      TESTFIELD(Status,Status::"In Progress");

      if not SalesHeader.GET(SalesHeader."Document Type"::Quote,"Sales Document No.") then begin
        SalesHeader.SETRANGE("Sell-to Contact No.","Contact No.");
        SalesHeader.INIT;
        SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
        SalesHeader.INSERT(true);
        SalesHeader.VALIDATE("Salesperson Code","Salesperson Code");
        SalesHeader.VALIDATE("Campaign No.","Campaign No.");
        SalesHeader."Opportunity No." := "No.";
        SalesHeader."Order Date" := GetEstimatedClosingDate;
        SalesHeader."Shipment Date" := SalesHeader."Order Date";
        SalesHeader.VALIDATE("Sell-to Customer Template Code",CustTemplateCode);
        SalesHeader.MODIFY;
        "Sales Document Type" := "Sales Document Type"::Quote;
        "Sales Document No." := SalesHeader."No.";
        MODIFY;
      end else
        ERROR(Text011);
      PAGE.RUN(PAGE::"Sales Quote",SalesHeader);
    END;

    LOCAL PROCEDURE GetEstimatedClosingDate@8() : Date;
    VAR
      OppEntry@1000 : Record "Opportunity Entry";
    BEGIN
      OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
      OppEntry.SETRANGE(Active,true);
      OppEntry.SETRANGE("Opportunity No.","No.");
      if OppEntry.FINDFIRST then
        exit(OppEntry."Estimated Close Date");
    END;

    [External]
    PROCEDURE ShowQuote@2();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      if SalesHeader.GET(SalesHeader."Document Type"::Quote,"Sales Document No.") then
        PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHeader);
    END;

    LOCAL PROCEDURE CreateCommentLines@7(VAR RMCommentLineTmp@1001 : Record "Rlshp. Mgt. Comment Line";OppNo@1000 : Code[20]);
    BEGIN
      if RMCommentLineTmp.FIND('-') then
        repeat
          RMCommentLine.INIT;
          RMCommentLine := RMCommentLineTmp;
          RMCommentLine."No." := OppNo;
          RMCommentLine.INSERT;
        until RMCommentLineTmp.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyCommentLinesFromIntLogEntry@23(InteractionLogEntry@1000 : Record "Interaction Log Entry");
    VAR
      RlshpMgtCommentLine@1001 : Record "Rlshp. Mgt. Comment Line";
      InterLogEntryCommentLine@1002 : Record "Inter. Log Entry Comment Line";
    BEGIN
      InterLogEntryCommentLine.SETRANGE("Entry No.",InteractionLogEntry."Entry No.");
      if InterLogEntryCommentLine.FINDSET then
        repeat
          RlshpMgtCommentLine.INIT;
          RlshpMgtCommentLine."Table Name" := RlshpMgtCommentLine."Table Name"::Opportunity;
          RlshpMgtCommentLine."No." := "No.";
          RlshpMgtCommentLine."Line No." := InterLogEntryCommentLine."Line No.";
          RlshpMgtCommentLine.Date := InterLogEntryCommentLine.Date;
          RlshpMgtCommentLine.Code := InterLogEntryCommentLine.Code;
          RlshpMgtCommentLine.Comment := InterLogEntryCommentLine.Comment;
          RlshpMgtCommentLine."Last Date Modified" := InterLogEntryCommentLine."Last Date Modified";
          RlshpMgtCommentLine.INSERT;
        until InterLogEntryCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE StartWizard@11();
    VAR
      Cont@1000 : Record Contact;
      Campaign@1001 : Record Campaign;
      SegHeader@1002 : Record "Segment Header";
    BEGIN
      "Wizard Step" := "Wizard Step"::"1";

      if Cont.GET(GETFILTER("Contact No.")) then
        "Wizard Contact Name" := Cont.Name
      else
        if Cont.GET(GETFILTER("Contact Company No.")) then
          "Wizard Contact Name" := Cont.Name;

      if Campaign.GET(GETFILTER("Campaign No.")) then
        "Wizard Campaign Description" := Campaign.Description;
      if SegHeader.GET(GETFILTER("Segment No.")) then
        "Segment Description" := SegHeader.Description;

      INSERT;
      if PAGE.RUNMODAL(PAGE::"Create Opportunity",Rec) = ACTION::OK then;
    END;

    [External]
    PROCEDURE CheckStatus@16();
    BEGIN
      if "Creation Date" = 0D then
        ErrorMessage(FIELDCAPTION("Creation Date"));
      if Description = '' then
        ErrorMessage(FIELDCAPTION(Description));

      if not SegHeader.GET(GETFILTER("Segment No.")) then
        if "Contact No." = '' then
          ERROR(Text023);
      if "Salesperson Code" = '' then
        ErrorMessage(FIELDCAPTION("Salesperson Code"));
      if "Sales Cycle Code" = '' then
        ErrorMessage(FIELDCAPTION("Sales Cycle Code"));

      if "Activate First Stage" then begin
        if "Wizard Estimated Value (LCY)" <= 0 then
          ERROR(Text024,FIELDCAPTION("Wizard Estimated Value (LCY)"));
        if "Wizard Chances of Success %" <= 0 then
          ERROR(Text024,FIELDCAPTION("Wizard Chances of Success %"));
        if "Wizard Estimated Closing Date" = 0D then
          ErrorMessage(FIELDCAPTION("Wizard Estimated Closing Date"));
        if "Wizard Estimated Closing Date" < OppEntry."Date of Change" then
          ERROR(Text025);
      end;
    END;

    [Internal]
    PROCEDURE FinishWizard@18();
    VAR
      ActivateFirstStage@1000 : Boolean;
    BEGIN
      "Wizard Step" := Opp."Wizard Step"::" ";
      ActivateFirstStage := "Activate First Stage";
      "Activate First Stage" := false;
      OppEntry."Chances of Success %" := "Wizard Chances of Success %";
      OppEntry."Estimated Close Date" := "Wizard Estimated Closing Date";
      OppEntry."Estimated Value (LCY)" := "Wizard Estimated Value (LCY)";

      "Wizard Chances of Success %" := 0;
      "Wizard Estimated Closing Date" := 0D;
      "Wizard Estimated Value (LCY)" := 0;
      "Segment Description" := '';
      "Wizard Contact Name" := '';
      "Wizard Campaign Description" := '';

      InsertOpportunity(Rec,OppEntry,RMCommentLineTmp,ActivateFirstStage);
      DELETE;
    END;

    LOCAL PROCEDURE ErrorMessage@10(FieldName@1000 : Text[1024]);
    BEGIN
      ERROR(Text022,FieldName);
    END;

    [External]
    PROCEDURE SetComments@53(VAR RMCommentLine@1001 : Record "Rlshp. Mgt. Comment Line");
    BEGIN
      RMCommentLineTmp.DELETEALL;

      if RMCommentLine.FINDSET then
        repeat
          RMCommentLineTmp := RMCommentLine;
          RMCommentLineTmp.INSERT;
        until RMCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowSalesQuoteWithCheck@15();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      if ("Sales Document Type" <> "Sales Document Type"::Quote) or
         ("Sales Document No." = '')
      then
        ERROR(Text003);

      if not SalesHeader.GET(SalesHeader."Document Type"::Quote,"Sales Document No.") then
        ERROR(Text004,"Sales Document No.");
      PAGE.RUN(PAGE::"Sales Quote",SalesHeader);
    END;

    [External]
    PROCEDURE SetSegmentFromFilter@9();
    VAR
      SegmentNo@1000 : Code[20];
    BEGIN
      SegmentNo := GetFilterSegmentNo;
      if SegmentNo = '' then begin
        FILTERGROUP(2);
        SegmentNo := GetFilterSegmentNo;
        FILTERGROUP(0);
      end;
      if SegmentNo <> '' then
        VALIDATE("Segment No.",SegmentNo);
    END;

    LOCAL PROCEDURE GetFilterSegmentNo@12() : Code[20];
    BEGIN
      if GETFILTER("Segment No.") <> '' then
        if GETRANGEMIN("Segment No.") = GETRANGEMAX("Segment No.") then
          exit(GETRANGEMAX("Segment No."));
    END;

    [External]
    PROCEDURE SetContactFromFilter@19();
    VAR
      ContactNo@1000 : Code[20];
    BEGIN
      ContactNo := GetFilterContactNo;
      if ContactNo = '' then begin
        FILTERGROUP(2);
        ContactNo := GetFilterContactNo;
        FILTERGROUP(0);
      end;
      if ContactNo <> '' then
        VALIDATE("Contact No.",ContactNo);
    END;

    LOCAL PROCEDURE GetFilterContactNo@17() : Code[20];
    BEGIN
      if (GETFILTER("Contact No.") <> '') and (GETFILTER("Contact No.") <> '<>''''') then
        if GETRANGEMIN("Contact No.") = GETRANGEMAX("Contact No.") then
          exit(GETRANGEMAX("Contact No."));
      if GETFILTER("Contact Company No.") <> '' then
        if GETRANGEMIN("Contact Company No.") = GETRANGEMAX("Contact Company No.") then
          exit(GETRANGEMAX("Contact Company No."));
    END;

    [Internal]
    PROCEDURE StartActivateFirstStage@20();
    VAR
      SalesCycleStage@1000 : Record "Sales Cycle Stage";
      OpportunityEntry@1001 : Record "Opportunity Entry";
    BEGIN
      if CONFIRM(ActivateFirstStageQst) then begin
        TESTFIELD("Sales Cycle Code");
        TESTFIELD(Status,Status::"Not Started");
        SalesCycleStage.SETRANGE("Sales Cycle Code","Sales Cycle Code");
        if SalesCycleStage.FINDFIRST then begin
          OpportunityEntry.INIT;
          OpportunityEntry."Sales Cycle Stage" := SalesCycleStage.Stage;
          OpportunityEntry."Sales Cycle Stage Description" := SalesCycleStage.Description;
          OpportunityEntry.InitOpportunityEntry(Rec);
          OpportunityEntry.InsertEntry(OpportunityEntry,false,true);
          OpportunityEntry.UpdateEstimates;
        end else
          ERROR(SalesCycleNotFoundErr);
      end;
    END;

    [External]
    PROCEDURE SetDefaultSalesCycle@13();
    VAR
      SalesCycle@1000 : Record "Sales Cycle";
    BEGIN
      RMSetup.GET;
      if RMSetup."Default Sales Cycle Code" <> '' then
        if SalesCycle.GET(RMSetup."Default Sales Cycle Code") then
          if not SalesCycle.Blocked then
            "Sales Cycle Code" := RMSetup."Default Sales Cycle Code";
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@22();
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      if not UserSetup.GET(USERID) then
        exit;

      if UserSetup."Salespers./Purch. Code" <> '' then
        VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE LookupCampaigns@24();
    VAR
      Campaign@1000 : Record Campaign;
      Opportunity@1001 : Record Opportunity;
    BEGIN
      Campaign.SETFILTER("Starting Date",'..%1',"Creation Date");
      Campaign.SETFILTER("Ending Date",'%1..',"Creation Date");
      Campaign.CALCFIELDS(Activated);
      Campaign.SETRANGE(Activated,true);
      if PAGE.RUNMODAL(0,Campaign) = ACTION::LookupOK then begin
        Opportunity := Rec;
        Opportunity.VALIDATE("Campaign No.",Campaign."No.");
        Rec := Opportunity;
      end;
    END;

    LOCAL PROCEDURE LookupSegments@25();
    VAR
      SegmentHeader@1000 : Record "Segment Header";
    BEGIN
      if "Campaign No." <> '' then
        SegmentHeader.SETRANGE("Campaign No.","Campaign No.");
      if PAGE.RUNMODAL(0,SegmentHeader) = ACTION::LookupOK then
        VALIDATE("Segment No.",SegmentHeader."No.");
    END;

    LOCAL PROCEDURE CheckCampaign@28();
    VAR
      Campaign@1000 : Record Campaign;
    BEGIN
      if "Campaign No." <> '' then begin
        Campaign.GET("Campaign No.");
        if (Campaign."Starting Date" > "Creation Date") or (Campaign."Ending Date" < "Creation Date") then
          FIELDERROR("Campaign No.");
        Campaign.CALCFIELDS(Activated);
        Campaign.TESTFIELD(Activated,true);
      end;
    END;

    LOCAL PROCEDURE CheckSegmentCampaignNo@26();
    VAR
      SegmentHeader@1000 : Record "Segment Header";
    BEGIN
      SegmentHeader.GET("Segment No.");
      if SegmentHeader."Campaign No." <> '' then
        SegmentHeader.TESTFIELD("Campaign No.","Campaign No.");
    END;

    LOCAL PROCEDURE SetDefaultSegmentNo@33();
    VAR
      SegmentHeader@1000 : Record "Segment Header";
    BEGIN
      "Segment No." := '';
      if "Campaign No." <> '' then begin
        SegmentHeader.SETRANGE("Campaign No.","Campaign No.");
        if SegmentHeader.FINDFIRST and (SegmentHeader.COUNT = 1) then
          "Segment No." := SegmentHeader."No."
      end;
    END;

    [External]
    PROCEDURE SetCampaignFromFilter@27();
    VAR
      CampaignNo@1000 : Code[20];
    BEGIN
      CampaignNo := GetFilterCampaignNo;
      if CampaignNo = '' then begin
        FILTERGROUP(2);
        CampaignNo := GetFilterCampaignNo;
        FILTERGROUP(0);
      end;
      if CampaignNo <> '' then
        VALIDATE("Campaign No.",CampaignNo);
    END;

    LOCAL PROCEDURE GetFilterCampaignNo@30() : Code[20];
    BEGIN
      if GETFILTER("Campaign No.") <> '' then
        if GETRANGEMIN("Campaign No.") = GETRANGEMAX("Campaign No.") then
          exit(GETRANGEMAX("Campaign No."));
    END;

    BEGIN
    END.
  }
}

