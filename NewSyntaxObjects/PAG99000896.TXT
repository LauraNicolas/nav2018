OBJECT Page 99000896 Available - Transfer Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Available - Transfer Lines;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Transfer Line";
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING("Document No.","Line No.");
    PageType=List;
    OnOpenPage=BEGIN
                 ReservEntry.TESTFIELD("Source Type");
                 if not DirectionIsSet then
                   ERROR(Text000);
                 case Direction of
                   Direction::Outbound:
                     begin
                       SETFILTER("Shipment Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));
                       SETRANGE("Transfer-from Code",ReservEntry."Location Code");
                     end;
                   Direction::Inbound:
                     begin
                       SETFILTER("Receipt Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));
                       SETRANGE("Transfer-to Code",ReservEntry."Location Code");
                     end;
                 end;

                 SETRANGE("Item No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETFILTER("Outstanding Qty. (Base)",'>0');
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.TransferLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase,Direction);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 4       ;2   ;Action    ;
                      Name=Reserve;
                      CaptionML=ENU=&Reserve;
                      ToolTipML=ENU=Reserve the quantity that is required on the document line that you opened this window for.;
                      ApplicationArea=#Advanced;
                      Image=Reserve;
                      OnAction=BEGIN
                                 ReservEntry.LOCKTABLE;
                                 UpdateReservMgt;
                                 ReservMgt.TransferLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase,Direction);
                                 ReservMgt.CalculateRemainingQty(NewQtyReservedThisLine,NewQtyReservedThisLineBase);
                                 ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                 ReservMgt.CopySign(NewQtyReservedThisLineBase,QtyToReserveBase);
                                 if NewQtyReservedThisLineBase <> 0 then
                                   if NewQtyReservedThisLineBase > QtyToReserveBase then
                                     CreateReservation(QtyToReserve,QtyToReserveBase)
                                   else
                                     CreateReservation(NewQtyReservedThisLine,NewQtyReservedThisLineBase)
                                 else
                                   ERROR(Text001);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      Name=CancelReservation;
                      AccessByPermission=TableData Item=R;
                      CaptionML=ENU=&Cancel Reservation;
                      ToolTipML=ENU=Cancel the reservation that exists for the document line that you opened this window for.;
                      ApplicationArea=#Advanced;
                      Image=Cancel;
                      OnAction=BEGIN
                                 if not CONFIRM(Text002,false) then
                                   exit;

                                 ReservEntry2.COPY(ReservEntry);
                                 ReserveTransLine.FilterReservFor(ReservEntry2,Rec,Direction);

                                 if ReservEntry2.FIND('-') then begin
                                   UpdateReservMgt;
                                   repeat
                                     ReservEngineMgt.CancelReservation(ReservEntry2);
                                   until ReservEntry2.NEXT = 0;

                                   UpdateReservFrom;
                                 end;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Transfer-from Code;
                ToolTipML=ENU=Specifies the code of the location that you are transferring items from.;
                ApplicationArea=#Advanced;
                SourceExpr="Transfer-from Code";
                ImplicitType=Code10 }

    { 24  ;2   ;Field     ;
                Name=Transfer-to Code;
                ToolTipML=ENU=Specifies the code of the location that you are transferring items from.;
                ApplicationArea=#Advanced;
                SourceExpr="Transfer-to Code";
                ImplicitType=Code10 }

    { 26  ;2   ;Field     ;
                Name=Shipment Date;
                ToolTipML=ENU=Specifies when items on the document are shipped or were shipped. A shipment date is usually calculated from a requested delivery date plus lead time.;
                ApplicationArea=#Advanced;
                SourceExpr="Shipment Date";
                ImplicitType=Date }

    { 28  ;2   ;Field     ;
                Name=Receipt Date;
                ToolTipML=ENU=Specifies the date that you expect the transfer-to location to receive the items on this line.;
                ApplicationArea=#Advanced;
                SourceExpr="Receipt Date";
                ImplicitType=Date }

    { 10  ;2   ;Field     ;
                Name=Quantity (Base);
                ToolTipML=ENU=Specifies the quantity on the line expressed in base units of measure.;
                ApplicationArea=#Advanced;
                SourceExpr="Quantity (Base)";
                ImplicitType=Decimal }

    { 30  ;2   ;Field     ;
                Name=Reserved Qty. Inbnd. (Base);
                ToolTipML=ENU=Specifies the quantity of the item reserved at the transfer-to location, expressed in base units of measure.;
                ApplicationArea=#Advanced;
                SourceExpr="Reserved Qty. Inbnd. (Base)";
                ImplicitType=Decimal }

    { 32  ;2   ;Field     ;
                Name=Reserved Qty. Outbnd. (Base);
                ToolTipML=ENU=Specifies the quantity of the item reserved at the transfer-from location, expressed in the base unit of measure.;
                ApplicationArea=#Advanced;
                SourceExpr="Reserved Qty. Outbnd. (Base)";
                ImplicitType=Decimal }

    { 17  ;2   ;Field     ;
                Name=QtyToReserveBase;
                CaptionML=ENU=Available Quantity;
                ToolTipML=ENU=Specifies the quantity of the item that is available.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserveBase;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 19  ;2   ;Field     ;
                Name=Current Reserved Quantity;
                CaptionML=ENU=Current Reserved Quantity;
                ToolTipML=ENU=Specifies the quantity of the item that is reserved for the document type.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine;
                OnDrillDown=BEGIN
                              ReservEntry2.RESET;
                              ReserveTransLine.FilterReservFor(ReservEntry2,Rec,Direction);
                              ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                              ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                              PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);
                              UpdateReservFrom;
                              CurrPage.UPDATE;
                            END;
                             }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Direction has not been set.';
      Text001@1001 : TextConst 'ENU=Fully reserved.';
      Text002@1002 : TextConst 'ENU=Do you want to cancel the reservation?';
      Text003@1003 : TextConst 'ENU=Available Quantity is %1.';
      AssemblyLine@1037 : Record "Assembly Line";
      AssemblyHeader@1036 : Record "Assembly Header";
      ReservEntry@1004 : Record "Reservation Entry";
      ReservEntry2@1005 : Record "Reservation Entry";
      SalesLine@1006 : Record "Sales Line";
      PurchLine@1007 : Record "Purchase Line";
      ReqLine@1009 : Record "Requisition Line";
      ProdOrderLine@1010 : Record "Prod. Order Line";
      ProdOrderComp@1011 : Record "Prod. Order Component";
      PlanningComponent@1012 : Record "Planning Component";
      TransLine@1013 : Record "Transfer Line";
      ServiceInvLine@1014 : Record "Service Line";
      JobPlanningLine@1032 : Record "Job Planning Line";
      ReservMgt@1015 : Codeunit "Reservation Management";
      ReservEngineMgt@1016 : Codeunit "Reservation Engine Mgt.";
      ReserveSalesLine@1017 : Codeunit "Sales Line-Reserve";
      ReserveReqLine@1018 : Codeunit "Req. Line-Reserve";
      ReservePurchLine@1019 : Codeunit "Purch. Line-Reserve";
      ReserveProdOrderLine@1021 : Codeunit "Prod. Order Line-Reserve";
      ReserveProdOrderComp@1022 : Codeunit "Prod. Order Comp.-Reserve";
      ReservePlanningComponent@1023 : Codeunit "Plng. Component-Reserve";
      ReserveTransLine@1024 : Codeunit "Transfer Line-Reserve";
      ReserveServiceInvLine@1025 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1033 : Codeunit "Job Planning Line-Reserve";
      AssemblyLineReserve@1035 : Codeunit "Assembly Line-Reserve";
      AssemblyHeaderReserve@1034 : Codeunit "Assembly Header-Reserve";
      QtyToReserve@1026 : Decimal;
      QtyToReserveBase@1020 : Decimal;
      QtyReservedThisLine@1038 : Decimal;
      QtyReservedThisLineBase@1027 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      NewQtyReservedThisLineBase@1008 : Decimal;
      CaptionText@1029 : Text[80];
      Direction@1030 : 'Outbound,Inbound';
      DirectionIsSet@1031 : Boolean;

    [External]
    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record "Sales Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record "Requisition Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record "Purchase Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record "Prod. Order Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetProdOrderComponent@18(VAR CurrentProdOrderComp@1000 : Record "Prod. Order Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetPlanningComponent@15(VAR CurrentPlanningComponent@1000 : Record "Planning Component";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetTransferLine@3(VAR CurrentTransLine@1000 : Record "Transfer Line";CurrentReservEntry@1001 : Record "Reservation Entry";Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetServiceInvLine@8(VAR CurrentServiceInvLine@1000 : Record "Service Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetJobPlanningLine@4(VAR CurrentJobPlanningLine@1000 : Record "Job Planning Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    LOCAL PROCEDURE CreateReservation@14(ReserveQuantity@1005 : Decimal;ReserveQuantityBase@1000 : Decimal);
    VAR
      TrackingSpecification@1006 : Record "Tracking Specification";
      QtyThisLine@1001 : Decimal;
      ReservQty@1002 : Decimal;
      LocationCode@1003 : Code[10];
      EntryDate@1004 : Date;
    BEGIN
      case Direction of
        Direction::Outbound:
          begin
            CALCFIELDS("Reserved Qty. Outbnd. (Base)");
            QtyThisLine := "Outstanding Qty. (Base)";
            ReservQty := "Reserved Qty. Outbnd. (Base)";
            EntryDate := "Shipment Date";
            TESTFIELD("Transfer-from Code",ReservEntry."Location Code");
            LocationCode := "Transfer-from Code";
          end;
        Direction::Inbound:
          begin
            CALCFIELDS("Reserved Qty. Inbnd. (Base)");
            QtyThisLine := "Outstanding Qty. (Base)";
            ReservQty := "Reserved Qty. Inbnd. (Base)";
            EntryDate := "Receipt Date";
            TESTFIELD("Transfer-to Code",ReservEntry."Location Code");
            LocationCode := "Transfer-to Code";
          end;
      end;

      if QtyThisLine - ReservQty < ReserveQuantityBase then
        ERROR(Text003,QtyThisLine + ReservQty);

      TESTFIELD("Item No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");

      UpdateReservMgt;
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Transfer Line",Direction,"Document No.",'',"Derived From Line No.","Line No.",
        "Variant Code",LocationCode,"Qty. per Unit of Measure");
      ReservMgt.CreateReservation(
        ReservEntry.Description,EntryDate,ReserveQuantity,ReserveQuantityBase,TrackingSpecification);
      UpdateReservFrom;
    END;

    LOCAL PROCEDURE UpdateReservFrom@17();
    BEGIN
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          begin
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          end;
        DATABASE::"Requisition Line":
          begin
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          end;
        DATABASE::"Purchase Line":
          begin
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Line":
          begin
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          end;
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          end;
        DATABASE::"Transfer Line":
          begin
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          end;
        DATABASE::"Planning Component":
          begin
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          end;
        DATABASE::"Job Planning Line":
          begin
            JobPlanningLine.FIND;
            SetJobPlanningLine(JobPlanningLine,ReservEntry);
          end;
      end;
    END;

    LOCAL PROCEDURE UpdateReservMgt@13();
    BEGIN
      CLEAR(ReservMgt);
      case ReservEntry."Source Type" of
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Assembly Header":
          ReservMgt.SetAssemblyHeader(AssemblyHeader);
        DATABASE::"Assembly Line":
          ReservMgt.SetAssemblyLine(AssemblyLine);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceInvLine);
        DATABASE::"Job Planning Line":
          ReservMgt.SetJobPlanningLine(JobPlanningLine);
      end;
    END;

    LOCAL PROCEDURE ReservedThisLine@2() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      ReserveTransLine.FilterReservFor(ReservEntry2,Rec,Direction);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      exit(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    [External]
    PROCEDURE SetInbound@1(DirectionIsInbound@1000 : Boolean);
    BEGIN
      if DirectionIsInbound then
        Direction := Direction::Inbound
      else
        Direction := Direction::Outbound;
      DirectionIsSet := true;
    END;

    [External]
    PROCEDURE SetAssemblyLine@5(VAR CurrentAsmLine@1002 : Record "Assembly Line";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      CurrentAsmLine.TESTFIELD(Type,CurrentAsmLine.Type::Item);
      AssemblyLine := CurrentAsmLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyLineReserve.FilterReservFor(ReservEntry,AssemblyLine);
      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
      SetInbound(ReservMgt.IsPositive);
    END;

    [External]
    PROCEDURE SetAssemblyHeader@7(VAR CurrentAsmHeader@1000 : Record "Assembly Header";CurrentReservEntry@1001 : Record "Reservation Entry");
    BEGIN
      AssemblyHeader := CurrentAsmHeader;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,true);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,AssemblyHeader);
      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
      SetInbound(ReservMgt.IsPositive);
    END;

    BEGIN
    END.
  }
}

