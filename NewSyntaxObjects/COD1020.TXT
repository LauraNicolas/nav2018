OBJECT Codeunit 1020 JobJnlManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Job Journal Template"=imd,
                TableData "Job Journal Batch"=imd,
                TableData "Job Entry No."=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=JOB';
      Text001@1001 : TextConst 'ENU=Job Journal';
      Text002@1002 : TextConst 'ENU=RECURRING';
      Text003@1003 : TextConst 'ENU=Recurring Job Journal';
      Text004@1004 : TextConst 'ENU=DEFAULT';
      Text005@1005 : TextConst 'ENU=Default Journal';
      LastJobJnlLine@1006 : Record "Job Journal Line";
      OpenFromBatch@1007 : Boolean;

    [External]
    PROCEDURE TemplateSelection@1(PageID@1004 : Integer;RecurringJnl@1000 : Boolean;VAR JobJnlLine@1003 : Record "Job Journal Line";VAR JnlSelected@1002 : Boolean);
    VAR
      JobJnlTemplate@1001 : Record "Job Journal Template";
    BEGIN
      JnlSelected := true;

      JobJnlTemplate.RESET;
      JobJnlTemplate.SETRANGE("Page ID",PageID);
      JobJnlTemplate.SETRANGE(Recurring,RecurringJnl);

      case JobJnlTemplate.COUNT of
        0:
          begin
            JobJnlTemplate.INIT;
            JobJnlTemplate.Recurring := RecurringJnl;
            if not RecurringJnl then begin
              JobJnlTemplate.Name := Text000;
              JobJnlTemplate.Description := Text001;
            end else begin
              JobJnlTemplate.Name := Text002;
              JobJnlTemplate.Description := Text003;
            end;
            JobJnlTemplate.VALIDATE("Page ID");
            JobJnlTemplate.INSERT;
            COMMIT;
          end;
        1:
          JobJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,JobJnlTemplate) = ACTION::LookupOK;
      end;
      if JnlSelected then begin
        JobJnlLine.FILTERGROUP := 2;
        JobJnlLine.SETRANGE("Journal Template Name",JobJnlTemplate.Name);
        JobJnlLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          JobJnlLine."Journal Template Name" := '';
          PAGE.RUN(JobJnlTemplate."Page ID",JobJnlLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@10(VAR JobJnlBatch@1000 : Record "Job Journal Batch");
    VAR
      JobJnlLine@1002 : Record "Job Journal Line";
      JobJnlTemplate@1003 : Record "Job Journal Template";
    BEGIN
      OpenFromBatch := true;
      JobJnlTemplate.GET(JobJnlBatch."Journal Template Name");
      JobJnlTemplate.TESTFIELD("Page ID");
      JobJnlBatch.TESTFIELD(Name);

      JobJnlLine.FILTERGROUP := 2;
      JobJnlLine.SETRANGE("Journal Template Name",JobJnlTemplate.Name);
      JobJnlLine.FILTERGROUP := 0;

      JobJnlLine."Journal Template Name" := '';
      JobJnlLine."Journal Batch Name" := JobJnlBatch.Name;
      PAGE.RUN(JobJnlTemplate."Page ID",JobJnlLine);
    END;

    [External]
    PROCEDURE OpenJnl@2(VAR CurrentJnlBatchName@1000 : Code[10];VAR JobJnlLine@1001 : Record "Job Journal Line");
    BEGIN
      CheckTemplateName(JobJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
      JobJnlLine.FILTERGROUP := 2;
      JobJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      JobJnlLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenJnlBatch@12(VAR JobJnlBatch@1000 : Record "Job Journal Batch");
    VAR
      JobJnlTemplate@1002 : Record "Job Journal Template";
      JobJnlLine@1004 : Record "Job Journal Line";
      JnlSelected@1003 : Boolean;
    BEGIN
      if JobJnlBatch.GETFILTER("Journal Template Name") <> '' then
        exit;
      JobJnlBatch.FILTERGROUP(2);
      if JobJnlBatch.GETFILTER("Journal Template Name") <> '' then begin
        JobJnlBatch.FILTERGROUP(0);
        exit;
      end;
      JobJnlBatch.FILTERGROUP(0);

      if not JobJnlBatch.FIND('-') then begin
        if not JobJnlTemplate.FINDFIRST then
          TemplateSelection(0,false,JobJnlLine,JnlSelected);
        if JobJnlTemplate.FINDFIRST then
          CheckTemplateName(JobJnlTemplate.Name,JobJnlBatch.Name);
        JobJnlTemplate.SETRANGE(Recurring,true);
        if not JobJnlTemplate.FINDFIRST then
          TemplateSelection(0,true,JobJnlLine,JnlSelected);
        if JobJnlTemplate.FINDFIRST then
          CheckTemplateName(JobJnlTemplate.Name,JobJnlBatch.Name);
        JobJnlTemplate.SETRANGE(Recurring);
      end;
      JobJnlBatch.FIND('-');
      JnlSelected := true;
      JobJnlBatch.CALCFIELDS(Recurring);
      JobJnlTemplate.SETRANGE(Recurring,JobJnlBatch.Recurring);
      if JobJnlBatch.GETFILTER("Journal Template Name") <> '' then
        JobJnlTemplate.SETRANGE(Name,JobJnlBatch.GETFILTER("Journal Template Name"));
      case JobJnlTemplate.COUNT of
        1:
          JobJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,JobJnlTemplate) = ACTION::LookupOK;
      end;
      if not JnlSelected then
        ERROR('');

      JobJnlBatch.FILTERGROUP(2);
      JobJnlBatch.SETRANGE("Journal Template Name",JobJnlTemplate.Name);
      JobJnlBatch.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckTemplateName@3(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      JobJnlBatch@1002 : Record "Job Journal Batch";
    BEGIN
      JobJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      if not JobJnlBatch.GET(CurrentJnlTemplateName,CurrentJnlBatchName) then begin
        if not JobJnlBatch.FINDFIRST then begin
          JobJnlBatch.INIT;
          JobJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
          JobJnlBatch.SetupNewBatch;
          JobJnlBatch.Name := Text004;
          JobJnlBatch.Description := Text005;
          JobJnlBatch.INSERT(true);
          COMMIT;
        end;
        CurrentJnlBatchName := JobJnlBatch.Name;
      end;
    END;

    [External]
    PROCEDURE CheckName@4(CurrentJnlBatchName@1000 : Code[10];VAR JobJnlLine@1001 : Record "Job Journal Line");
    VAR
      JobJnlBatch@1002 : Record "Job Journal Batch";
    BEGIN
      JobJnlBatch.GET(JobJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
    END;

    [External]
    PROCEDURE SetName@5(CurrentJnlBatchName@1000 : Code[10];VAR JobJnlLine@1001 : Record "Job Journal Line");
    BEGIN
      JobJnlLine.FILTERGROUP := 2;
      JobJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      JobJnlLine.FILTERGROUP := 0;
      if JobJnlLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupName@6(VAR CurrentJnlBatchName@1000 : Code[10];VAR JobJnlLine@1001 : Record "Job Journal Line");
    VAR
      JobJnlBatch@1002 : Record "Job Journal Batch";
    BEGIN
      COMMIT;
      JobJnlBatch."Journal Template Name" := JobJnlLine.GETRANGEMAX("Journal Template Name");
      JobJnlBatch.Name := JobJnlLine.GETRANGEMAX("Journal Batch Name");
      JobJnlBatch.FILTERGROUP(2);
      JobJnlBatch.SETRANGE("Journal Template Name",JobJnlBatch."Journal Template Name");
      JobJnlBatch.FILTERGROUP(0);
      if PAGE.RUNMODAL(0,JobJnlBatch) = ACTION::LookupOK then begin
        CurrentJnlBatchName := JobJnlBatch.Name;
        SetName(CurrentJnlBatchName,JobJnlLine);
      end;
    END;

    [External]
    PROCEDURE GetNames@7(VAR JobJnlLine@1000 : Record "Job Journal Line";VAR JobDescription@1001 : Text[50];VAR AccName@1002 : Text[50]);
    VAR
      Job@1003 : Record Job;
      Res@1004 : Record Resource;
      Item@1005 : Record Item;
      GLAcc@1006 : Record "G/L Account";
    BEGIN
      if (JobJnlLine."Job No." = '') or
         (JobJnlLine."Job No." <> LastJobJnlLine."Job No.")
      then begin
        JobDescription := '';
        if Job.GET(JobJnlLine."Job No.") then
          JobDescription := Job.Description;
      end;

      if (JobJnlLine.Type <> LastJobJnlLine.Type) or
         (JobJnlLine."No." <> LastJobJnlLine."No.")
      then begin
        AccName := '';
        if JobJnlLine."No." <> '' then
          case JobJnlLine.Type of
            JobJnlLine.Type::Resource:
              if Res.GET(JobJnlLine."No.") then
                AccName := Res.Name;
            JobJnlLine.Type::Item:
              if Item.GET(JobJnlLine."No.") then
                AccName := Item.Description;
            JobJnlLine.Type::"G/L Account":
              if GLAcc.GET(JobJnlLine."No.") then
                AccName := GLAcc.Name;
          end;
      end;

      LastJobJnlLine := JobJnlLine;
    END;

    [External]
    PROCEDURE GetNextEntryNo@8() : Integer;
    VAR
      JobEntryNo@1000 : Record "Job Entry No.";
    BEGIN
      with JobEntryNo do begin
        LOCKTABLE;
        if not GET then
          INSERT;
        "Entry No." := "Entry No." + 1;
        MODIFY;
        exit("Entry No.");
      end;
    END;

    BEGIN
    END.
  }
}

