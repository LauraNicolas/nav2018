OBJECT Table 700 Error Message
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Error Message;
    LookupPageID="Error Messages Part";
    DrillDownPageID="Error Messages Part";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=ID }
    { 2   ;   ;Record ID           ;RecordID      ;OnValidate=VAR
                                                                RecordRef@1000 : RecordRef;
                                                              BEGIN
                                                                if RecordRef.GET("Record ID") then
                                                                  "Table Number" := RecordRef.NUMBER;
                                                              END;

                                                   CaptionML=ENU=Record ID }
    { 3   ;   ;Field Number        ;Integer       ;CaptionML=ENU=Field Number }
    { 4   ;   ;Message Type        ;Option        ;CaptionML=ENU=Message Type;
                                                   OptionCaptionML=ENU=Error,Warning,Information;
                                                   OptionString=Error,Warning,Information;
                                                   Editable=false }
    { 5   ;   ;Description         ;Text250       ;CaptionML=ENU=Description;
                                                   Editable=false }
    { 6   ;   ;Additional Information;Text250     ;CaptionML=ENU=Additional Information;
                                                   Editable=false }
    { 7   ;   ;Support Url         ;Text250       ;CaptionML=ENU=Support Url;
                                                   Editable=false }
    { 8   ;   ;Table Number        ;Integer       ;CaptionML=ENU=Table Number }
    { 10  ;   ;Context Record ID   ;RecordID      ;CaptionML=ENU=Context Record ID }
    { 11  ;   ;Field Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD("Table Number"),
                                                                                                   "No."=FIELD("Field Number")));
                                                   CaptionML=ENU=Field Name }
    { 12  ;   ;Table Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Table Metadata".Caption WHERE (ID=FIELD("Table Number")));
                                                   CaptionML=ENU=Table Name }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
    {    ;"Context Record ID","Record ID"          }
    {    ;"Message Type",ID                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IfEmptyErr@1000 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' must not be blank.';
      IfLengthExceededErr@1001 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=The maximum length of ''%1'' in ''%2'' is %3 characters. The actual length is %4.';
      IfInvalidCharactersErr@1002 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' contains characters that are not valid.';
      IfOutsideRangeErr@1006 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=''%1'' in ''%2'' is outside of the permitted range from %3 to %4.';
      IfGreaterThanErr@1007 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be less than or equal to %3.';
      IfLessThanErr@1008 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be greater than or equal to %3.';
      IfEqualToErr@1010 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must not be equal to %3.';
      IfNotEqualToErr@1009 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be equal to %3.';
      HasErrorsMsg@1003 : TextConst 'ENU=One or more errors were found. You must resolve all the errors before you can proceed.';
      DataTypeManagement@1004 : Codeunit "Data Type Management";
      DevMsgNotTemporaryErr@1005 : TextConst 'ENU=This function can only be used when the record is temporary.';
      ContextRecordID@1011 : RecordID;

    [External]
    PROCEDURE LogIfEmpty@19(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option) : Integer;
    VAR
      RecordRef@1032 : RecordRef;
      TempRecordRef@1031 : RecordRef;
      FieldRef@1006 : FieldRef;
      EmptyFieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if not DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) then
        exit(0);

      TempRecordRef.OPEN(RecordRef.NUMBER,true);
      EmptyFieldRef := TempRecordRef.FIELD(FieldNumber);

      if FieldRef.VALUE <> EmptyFieldRef.VALUE then
        exit(0);

      NewDescription := STRSUBSTNO(IfEmptyErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfLengthExceeded@17(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;MaxLength@1008 : Integer) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
      StringLength@1009 : Integer;
    BEGIN
      if not DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) then
        exit(0);

      StringLength := STRLEN(FORMAT(FieldRef.VALUE));
      if StringLength <= MaxLength then
        exit(0);

      NewDescription := STRSUBSTNO(IfLengthExceededErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),MaxLength,StringLength);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfInvalidCharacters@18(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValidCharacters@1008 : Text) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if not DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) then
        exit(0);

      if DELCHR(FORMAT(FieldRef.VALUE),'=',ValidCharacters) = '' then
        exit(0);

      NewDescription := STRSUBSTNO(IfInvalidCharactersErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfOutsideRange@11(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant;UpperBound@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'%1..%2',LowerBound,UpperBound) then
        exit(0);

      NewDescription := STRSUBSTNO(IfOutsideRangeErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound,UpperBound);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfGreaterThan@13(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'<=%1',LowerBound,'') then
        exit(0);

      NewDescription := STRSUBSTNO(IfGreaterThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfLessThan@20(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;UpperBound@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'>=%1',UpperBound,'') then
        exit(0);

      NewDescription := STRSUBSTNO(IfLessThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),UpperBound);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfEqualTo@12(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'<>%1',ValueVariant,'') then
        exit(0);

      NewDescription := STRSUBSTNO(IfEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfNotEqualTo@14(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      if FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'=%1',ValueVariant,'') then
        exit(0);

      NewDescription := STRSUBSTNO(IfNotEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);

      exit(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogSimpleMessage@10(MessageType@1003 : Option;NewDescription@1004 : Text) : Integer;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ID := 1;
      ClearFilters;
      if FINDLAST then
        ID += 1;

      INIT;
      VALIDATE("Message Type",MessageType);
      VALIDATE(Description,COPYSTR(NewDescription,1,MAXSTRLEN(Description)));
      VALIDATE("Context Record ID",ContextRecordID);
      INSERT(true);

      exit(ID);
    END;

    [External]
    PROCEDURE LogMessage@2(RecRelatedVariant@1000 : Variant;FieldNumber@1002 : Integer;MessageType@1003 : Option;NewDescription@1004 : Text) : Integer;
    VAR
      RecordRef@1001 : RecordRef;
      ErrorMessageID@1005 : Integer;
    BEGIN
      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit(0);

      ErrorMessageID := FindRecord(RecordRef.RECORDID,FieldNumber,MessageType,NewDescription);
      if ErrorMessageID <> 0 then
        exit(ErrorMessageID);

      LogSimpleMessage(MessageType,NewDescription);
      VALIDATE("Record ID",RecordRef.RECORDID);
      VALIDATE("Field Number",FieldNumber);
      MODIFY(true);

      exit(ID);
    END;

    [External]
    PROCEDURE LogDetailedMessage@3(RecRelatedVariant@1003 : Variant;FieldNumber@1002 : Integer;MessageType@1001 : Option;NewDescription@1006 : Text;AdditionalInformation@1004 : Text[250];SupportUrl@1005 : Text[250]) : Integer;
    BEGIN
      LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription);
      VALIDATE("Additional Information",AdditionalInformation);
      VALIDATE("Support Url",SupportUrl);
      MODIFY(true);

      exit(ID);
    END;

    [External]
    PROCEDURE AddMessageDetails@6(MessageID@1000 : Integer;AdditionalInformation@1002 : Text[250];SupportUrl@1001 : Text[250]);
    BEGIN
      if MessageID = 0 then
        exit;

      GET(MessageID);
      VALIDATE("Additional Information",AdditionalInformation);
      VALIDATE("Support Url",SupportUrl);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetContext@25(ContextRecordVariant@1002 : Variant);
    VAR
      RecordRef@1000 : RecordRef;
    BEGIN
      if DataTypeManagement.GetRecordRef(ContextRecordVariant,RecordRef) then
        ContextRecordID := RecordRef.RECORDID;
    END;

    [External]
    PROCEDURE ClearContext@22();
    BEGIN
      CLEAR(ContextRecordID);
    END;

    [External]
    PROCEDURE ClearLog@7();
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      DELETEALL(true);
    END;

    [External]
    PROCEDURE ClearLogRec@23(RecordVariant@1000 : Variant);
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SetRecordFilter(RecordVariant);
      DELETEALL(true);
    END;

    [External]
    PROCEDURE HasErrorMessagesRelatedTo@1(RecRelatedVariant@1000 : Variant) : Boolean;
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      AssertRecordTemporaryOrInContext;

      if not DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) then
        exit(false);

      ClearFilters;
      SetContextFilter;
      SETRANGE("Record ID",RecordRef.RECORDID);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE ErrorMessageCount@8(LowestSeverityMessageType@1000 : Option) : Integer;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SETRANGE("Message Type","Message Type"::Error,LowestSeverityMessageType);
      exit(COUNT);
    END;

    [External]
    PROCEDURE HasErrors@9(ShowMessage@1000 : Boolean) : Boolean;
    BEGIN
      if ErrorMessageCount("Message Type"::Error) = 0 then
        exit(false);

      if ShowMessage and GUIALLOWED then
        MESSAGE(HasErrorsMsg);

      exit(true);
    END;

    [External]
    PROCEDURE ShowErrorMessages@5(RollBackOnError@1001 : Boolean) ErrorString : Text;
    VAR
      ErrorMessages@1000 : Page "Error Messages";
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      if ISEMPTY then
        exit;

      if GUIALLOWED then begin
        ErrorMessages.SetRecords(Rec);
        ErrorMessages.RUN;
      end;

      ErrorString := ToString;

      if RollBackOnError then
        if HasErrors(false) then
          ERROR('');

      exit;
    END;

    [External]
    PROCEDURE ToString@15() : Text;
    VAR
      ErrorString@1000 : Text;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SETCURRENTKEY("Message Type",ID);
      if FINDSET then
        repeat
          if ErrorString <> '' then
            ErrorString += '\';
          ErrorString += FORMAT("Message Type") + ': ' + Description;
        until NEXT = 0;
      ClearFilters;
      exit(ErrorString);
    END;

    [External]
    PROCEDURE ThrowError@16();
    BEGIN
      AssertRecordTemporaryOrInContext;

      if HasErrors(false) then
        ERROR(ToString);
    END;

    LOCAL PROCEDURE FieldValueIsWithinFilter@30(RecRelatedVariant@1004 : Variant;FieldNumber@1003 : Integer;VAR RecordRef@1000 : RecordRef;VAR FieldRef@1001 : FieldRef;FilterString@1002 : Text;FilterValue1@1005 : Variant;FilterValue2@1006 : Variant) : Boolean;
    VAR
      TempRecordRef@1013 : RecordRef;
      TempFieldRef@1011 : FieldRef;
    BEGIN
      if not DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) then
        exit(false);

      TempRecordRef.OPEN(RecordRef.NUMBER,true);
      TempRecordRef.INIT;
      TempFieldRef := TempRecordRef.FIELD(FieldNumber);
      TempFieldRef.VALUE(FieldRef.VALUE);
      TempRecordRef.INSERT;

      TempFieldRef.SETFILTER(FilterString,FilterValue1,FilterValue2);

      exit(not TempRecordRef.ISEMPTY);
    END;

    [External]
    PROCEDURE FindRecord@21(RecordID@1000 : RecordID;FieldNumber@1003 : Integer;MessageType@1004 : Option;NewDescription@1002 : Text) : Integer;
    BEGIN
      ClearFilters;
      SetContextFilter;
      SETRANGE("Record ID",RecordID);
      SETRANGE("Field Number",FieldNumber);
      SETRANGE("Message Type",MessageType);
      SETRANGE(Description,COPYSTR(NewDescription,1,MAXSTRLEN(Description)));
      if FINDFIRST then
        exit(ID);
      exit(0);
    END;

    LOCAL PROCEDURE AssertRecordTemporary@32();
    BEGIN
      if not ISTEMPORARY then
        ERROR(DevMsgNotTemporaryErr);
    END;

    LOCAL PROCEDURE AssertRecordTemporaryOrInContext@27();
    VAR
      DummyEmptyRecordID@1000 : RecordID;
    BEGIN
      if ContextRecordID = DummyEmptyRecordID then
        AssertRecordTemporary;
    END;

    [External]
    PROCEDURE CopyToTemp@38(VAR TempErrorMessage@1000 : TEMPORARY Record "Error Message");
    VAR
      TempID@1001 : Integer;
    BEGIN
      if not FINDSET then
        exit;

      TempErrorMessage.RESET;
      if TempErrorMessage.FINDLAST then ;
      TempID := TempErrorMessage.ID;

      repeat
        if TempErrorMessage.FindRecord("Record ID","Field Number","Message Type",Description) = 0 then begin
          TempID += 1;
          TempErrorMessage := Rec;
          TempErrorMessage.ID := TempID;
          TempErrorMessage.INSERT;
        end;
      until NEXT = 0;
      TempErrorMessage.RESET;
    END;

    [External]
    PROCEDURE CopyFromTemp@4(VAR TempErrorMessage@1000 : TEMPORARY Record "Error Message");
    VAR
      ErrorMessage@1001 : Record "Error Message";
    BEGIN
      if not TempErrorMessage.FINDSET then
        exit;

      repeat
        ErrorMessage := TempErrorMessage;
        ErrorMessage.ID := 0;
        ErrorMessage.INSERT(true);
      until TempErrorMessage.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyFromContext@24(ContextRecordVariant@1000 : Variant);
    VAR
      ErrorMessage@1001 : Record "Error Message";
      RecordRef@1002 : RecordRef;
    BEGIN
      AssertRecordTemporary;

      if not DataTypeManagement.GetRecordRef(ContextRecordVariant,RecordRef) then
        exit;

      ErrorMessage.SETRANGE("Context Record ID",RecordRef.RECORDID);
      ErrorMessage.CopyToTemp(Rec);
    END;

    LOCAL PROCEDURE ClearFilters@31();
    VAR
      LocalContextRecordID@1000 : RecordID;
    BEGIN
      LocalContextRecordID := ContextRecordID;
      RESET;
      ContextRecordID := LocalContextRecordID;
    END;

    LOCAL PROCEDURE SetContextFilter@33();
    VAR
      DummyEmptyContextRecordID@1000 : RecordID;
    BEGIN
      if ContextRecordID = DummyEmptyContextRecordID then
        SETRANGE("Context Record ID")
      else
        SETRANGE("Context Record ID",ContextRecordID);
    END;

    LOCAL PROCEDURE SetRecordFilter@26(RecordVariant@1000 : Variant);
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);
      SETRANGE("Record ID",RecordRef.RECORDID);
    END;

    BEGIN
    END.
  }
}

