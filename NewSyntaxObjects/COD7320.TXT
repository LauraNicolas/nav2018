OBJECT Codeunit 7320 Whse. Undo Quantity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Item Journal Line";
    Permissions=TableData "Whse. Item Entry Relation"=md,
                TableData "Posted Whse. Shipment Line"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WMSMgmt@1001 : Codeunit "WMS Management";
      Text000@1000 : TextConst 'ENU=Assertion failed, %1.';
      Text001@1002 : TextConst 'ENU=There is not enough space to insert correction lines.';
      WhseJnlRegisterLine@1003 : Codeunit "Whse. Jnl.-Register Line";

    [External]
    PROCEDURE InsertTempWhseJnlLine@7302(ItemJnlLine@1000 : Record "Item Journal Line";SourceType@1001 : Integer;SourceSubType@1002 : Integer;SourceNo@1007 : Code[20];SourceLineNo@1005 : Integer;RefDoc@1006 : Integer;VAR TempWhseJnlLine@1008 : TEMPORARY Record "Warehouse Journal Line";VAR NextLineNo@1004 : Integer);
    VAR
      WhseEntry@1009 : Record "Warehouse Entry";
      WhseMgt@1003 : Codeunit "Whse. Management";
    BEGIN
      with ItemJnlLine do begin
        WhseEntry.RESET;
        WhseEntry.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,true);
        WhseEntry.SETRANGE("Reference No.","Document No.");
        WhseEntry.SETRANGE("Item No.","Item No.");
        if WhseEntry.FIND('+') then
          repeat
            TempWhseJnlLine.INIT;
            if WhseEntry."Entry Type" = WhseEntry."Entry Type"::"Positive Adjmt." then
              "Entry Type" := "Entry Type"::"Negative Adjmt."
            else
              "Entry Type" := "Entry Type"::"Positive Adjmt.";
            Quantity := ABS(WhseEntry.Quantity);
            "Quantity (Base)" := ABS(WhseEntry."Qty. (Base)");
            "Qty. per Unit of Measure" := WhseEntry."Qty. per Unit of Measure";
            WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,false);
            TempWhseJnlLine.SetSource(SourceType,SourceSubType,SourceNo,SourceLineNo,0);
            TempWhseJnlLine."Source Document" :=
              WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
            TempWhseJnlLine."Reference Document" := RefDoc;
            TempWhseJnlLine."Reference No." := "Document No.";
            TempWhseJnlLine."Location Code" := "Location Code";
            TempWhseJnlLine."Zone Code" := WhseEntry."Zone Code";
            TempWhseJnlLine."Bin Code" := WhseEntry."Bin Code";
            TempWhseJnlLine.SetWhseDoc(WhseEntry."Whse. Document Type",WhseEntry."Whse. Document No.",0);
            TempWhseJnlLine."Unit of Measure Code" := WhseEntry."Unit of Measure Code";
            TempWhseJnlLine."Line No." := NextLineNo;
            TempWhseJnlLine."Serial No." := WhseEntry."Serial No.";
            TempWhseJnlLine."Lot No." := WhseEntry."Lot No.";
            TempWhseJnlLine."Expiration Date" := WhseEntry."Expiration Date";
            if  "Entry Type" = "Entry Type"::"Negative Adjmt." then begin
              TempWhseJnlLine."From Zone Code" := TempWhseJnlLine."Zone Code";
              TempWhseJnlLine."From Bin Code" := TempWhseJnlLine."Bin Code";
            end else begin
              TempWhseJnlLine."To Zone Code" := TempWhseJnlLine."Zone Code";
              TempWhseJnlLine."To Bin Code" := TempWhseJnlLine."Bin Code";
            end;
            TempWhseJnlLine.INSERT;
            NextLineNo := TempWhseJnlLine."Line No." + 10000;
          until WhseEntry.NEXT(-1) = 0;
      end;
    END;

    [External]
    PROCEDURE PostTempWhseJnlLine@5(VAR TempWhseJnlLine@1000 : TEMPORARY Record "Warehouse Journal Line");
    BEGIN
      if TempWhseJnlLine.FIND('-') then
        repeat
          WhseJnlRegisterLine.RegisterWhseJnlLine(TempWhseJnlLine);
        until TempWhseJnlLine.NEXT = 0;
    END;

    [External]
    PROCEDURE UndoPostedWhseRcptLine@10(VAR PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line");
    BEGIN
      PostedWhseRcptLine.TESTFIELD("Source Type");
      InsertPostedWhseRcptLine(PostedWhseRcptLine);
      DeleteWhsePutAwayRequest(PostedWhseRcptLine);
      DeleteWhseItemEntryRelationRcpt(PostedWhseRcptLine);
    END;

    [External]
    PROCEDURE UndoPostedWhseShptLine@3(VAR PostedWhseShptLine@1000 : Record "Posted Whse. Shipment Line");
    BEGIN
      PostedWhseShptLine.TESTFIELD("Source Type");
      InsertPostedWhseShptLine(PostedWhseShptLine);
      DeleteWhsePickRequest(PostedWhseShptLine);
      DeleteWhseItemEntryRelationShpt(PostedWhseShptLine);
    END;

    [External]
    PROCEDURE UpdateRcptSourceDocLines@1(VAR PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line");
    BEGIN
      UpdateWhseRcptLine(PostedWhseRcptLine);
      UpdateWhseRequestRcpt(PostedWhseRcptLine);
    END;

    [External]
    PROCEDURE UpdateShptSourceDocLines@6(VAR PostedWhseShptLine@1000 : Record "Posted Whse. Shipment Line");
    BEGIN
      UpdateWhseShptLine(PostedWhseShptLine);
      UpdateWhseRequestShpt(PostedWhseShptLine);
    END;

    [External]
    PROCEDURE FindPostedWhseRcptLine@11(VAR PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line";UndoType@1006 : Integer;UndoID@1005 : Code[20];SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer) Ok : Boolean;
    BEGIN
      if not PostedWhseRcptLine.READPERMISSION then
        exit;
      with PostedWhseRcptLine do begin
        RESET;
        case UndoType of
          DATABASE::"Purch. Rcpt. Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Receipt");
          DATABASE::"Return Receipt Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Return Receipt");
          else
            exit;
        end;
        SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,true);
        SETRANGE("Posted Source No.",UndoID);
        if FINDFIRST then begin
          if COUNT > 1 then
            ERROR(Text000,TABLECAPTION); // Assert: only one posted line.
          Ok := true;
        end;
      end;
    END;

    [External]
    PROCEDURE FindPostedWhseShptLine@2(VAR PostedWhseShptLine@1000 : Record "Posted Whse. Shipment Line";UndoType@1006 : Integer;UndoID@1005 : Code[20];SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer) Ok : Boolean;
    VAR
      PostedWhseShptLine2@1007 : Record "Posted Whse. Shipment Line";
    BEGIN
      if not PostedWhseShptLine.READPERMISSION then
        exit;
      with PostedWhseShptLine do begin
        RESET;
        case UndoType of
          DATABASE::"Sales Shipment Line",
          DATABASE::"Service Shipment Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Shipment");
          DATABASE::"Return Shipment Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Return Shipment");
          else
            exit;
        end;
        SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,true);
        SETRANGE("Posted Source No.",UndoID);
        if FINDFIRST then begin
          PostedWhseShptLine2.COPYFILTERS(PostedWhseShptLine);
          PostedWhseShptLine2.SETFILTER("No.",'<>%1',"No.");
          PostedWhseShptLine2.SETFILTER("Line No.",'<>%1',"Line No.");
          if not PostedWhseShptLine2.ISEMPTY and not IsATO(UndoType,UndoID,SourceRefNo) then
            ERROR(Text000,TABLECAPTION); // Assert: only one posted line.
          Ok := true;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertPostedWhseRcptLine@14(OldPostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      NewPostedWhseRcptLine@1001 : Record "Posted Whse. Receipt Line";
      LineSpacing@1002 : Integer;
    BEGIN
      with OldPostedWhseRcptLine do begin
        "Qty. Put Away" := Quantity;
        "Qty. Put Away (Base)" := "Qty. (Base)";
        MODIFY;

        NewPostedWhseRcptLine.SETRANGE("No.","No.");
        NewPostedWhseRcptLine."No." := "No.";
        NewPostedWhseRcptLine."Line No." := "Line No.";
        NewPostedWhseRcptLine.FIND('=');

        if NewPostedWhseRcptLine.FIND('>') then begin
          LineSpacing := (NewPostedWhseRcptLine."Line No." - "Line No.") div 2;
          if LineSpacing = 0 then
            ERROR(Text001);
        end else
          LineSpacing := 10000;

        NewPostedWhseRcptLine.RESET;
        NewPostedWhseRcptLine.INIT;
        NewPostedWhseRcptLine.COPY(OldPostedWhseRcptLine);
        NewPostedWhseRcptLine."Line No." := "Line No." + LineSpacing;
        NewPostedWhseRcptLine.Quantity := -Quantity;
        NewPostedWhseRcptLine."Qty. (Base)" := -"Qty. (Base)";
        NewPostedWhseRcptLine."Qty. Put Away" := -"Qty. Put Away";
        NewPostedWhseRcptLine."Qty. Put Away (Base)" := -"Qty. Put Away (Base)";
        NewPostedWhseRcptLine.Status := NewPostedWhseRcptLine.Status::"Completely Put Away";
        NewPostedWhseRcptLine.INSERT;

        Status := Status::"Completely Put Away";
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE InsertPostedWhseShptLine@7(OldPostedWhseShptLine@1000 : Record "Posted Whse. Shipment Line");
    VAR
      NewPostedWhseShptLine@1001 : Record "Posted Whse. Shipment Line";
      LineSpacing@1002 : Integer;
    BEGIN
      with OldPostedWhseShptLine do begin
        NewPostedWhseShptLine.SETRANGE("No.","No.");
        NewPostedWhseShptLine."No." := "No.";
        NewPostedWhseShptLine."Line No." := "Line No.";
        NewPostedWhseShptLine.FIND('=');

        if NewPostedWhseShptLine.FIND('>') then begin
          LineSpacing := (NewPostedWhseShptLine."Line No." - "Line No.") div 2;
          if LineSpacing = 0 then
            ERROR(Text001);
        end else
          LineSpacing := 10000;

        NewPostedWhseShptLine.RESET;
        NewPostedWhseShptLine.INIT;
        NewPostedWhseShptLine.COPY(OldPostedWhseShptLine);
        NewPostedWhseShptLine."Line No." := "Line No." + LineSpacing;
        NewPostedWhseShptLine.Quantity := -Quantity;
        NewPostedWhseShptLine."Qty. (Base)" := -"Qty. (Base)";
        NewPostedWhseShptLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE DeleteWhsePutAwayRequest@16(VAR PostedWhseRcptLine@1003 : Record "Posted Whse. Receipt Line");
    VAR
      PostedWhseRcptLine2@1000 : Record "Posted Whse. Receipt Line";
      WhsePutAwayRequest@1002 : Record "Whse. Put-away Request";
      Sum@1001 : Decimal;
    BEGIN
      PostedWhseRcptLine2.SETRANGE("No.",PostedWhseRcptLine."No.");
      if PostedWhseRcptLine2.FIND('-') then begin
        repeat
          Sum := Sum + PostedWhseRcptLine2."Qty. (Base)";
        until PostedWhseRcptLine2.NEXT = 0;

        if Sum = 0 then begin
          WhsePutAwayRequest.SETRANGE("Document Type",WhsePutAwayRequest."Document Type"::Receipt);
          WhsePutAwayRequest.SETRANGE("Document No.",PostedWhseRcptLine."No.");
          WhsePutAwayRequest.DELETEALL;
        end;
      end;
    END;

    LOCAL PROCEDURE DeleteWhsePickRequest@4(VAR PostedWhseShptLine@1003 : Record "Posted Whse. Shipment Line");
    VAR
      PostedWhseShptLine2@1000 : Record "Posted Whse. Shipment Line";
      WhsePickRequest@1002 : Record "Whse. Pick Request";
      Sum@1001 : Decimal;
    BEGIN
      PostedWhseShptLine2.SETRANGE("No.",PostedWhseShptLine."No.");
      if PostedWhseShptLine2.FIND('-') then begin
        repeat
          Sum := Sum + PostedWhseShptLine2."Qty. (Base)";
        until PostedWhseShptLine2.NEXT = 0;

        if Sum = 0 then begin
          WhsePickRequest.SETRANGE("Document Type",WhsePickRequest."Document Type"::Shipment);
          WhsePickRequest.SETRANGE("Document No.",PostedWhseShptLine."No.");
          if not WhsePickRequest.ISEMPTY then
            WhsePickRequest.DELETEALL;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateWhseRcptLine@15(VAR PostedWhseRcptLine@1002 : Record "Posted Whse. Receipt Line");
    VAR
      WhseRcptHeader@1001 : Record "Warehouse Receipt Header";
      WhseRcptLine@1000 : Record "Warehouse Receipt Line";
    BEGIN
      with PostedWhseRcptLine do begin
        WhseRcptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",true);
        if WhseRcptLine.FINDFIRST then begin
          WhseRcptLine.VALIDATE("Qty. Outstanding",WhseRcptLine."Qty. Outstanding" + Quantity);
          WhseRcptLine.VALIDATE("Qty. Received",WhseRcptLine."Qty. Received" - Quantity);
          if WhseRcptLine."Qty. Received" = 0 then begin
            WhseRcptLine.Status := WhseRcptLine.Status::" ";
            WhseRcptHeader.GET(WhseRcptLine."No.");
            WhseRcptHeader."Document Status" := WhseRcptHeader."Document Status"::" ";
            WhseRcptHeader.MODIFY;
          end;
          WhseRcptLine.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateWhseShptLine@9(VAR PostedWhseShptLine@1002 : Record "Posted Whse. Shipment Line");
    VAR
      WhseShptHeader@1001 : Record "Warehouse Shipment Header";
      WhseShptLine@1000 : Record "Warehouse Shipment Line";
    BEGIN
      with PostedWhseShptLine do begin
        WhseShptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",true);
        if WhseShptLine.FINDFIRST then begin
          WhseShptLine.VALIDATE("Qty. Shipped",WhseShptLine."Qty. Shipped" - Quantity);
          WhseShptLine.VALIDATE("Qty. Outstanding",WhseShptLine."Qty. Outstanding" + Quantity);
          if WhseShptLine."Qty. Shipped" = 0 then begin
            WhseShptLine.Status := WhseShptLine.Status::" ";
            WhseShptHeader.GET(WhseShptLine."No.");
            WhseShptHeader."Document Status" := WhseShptHeader."Document Status"::" ";
            WhseShptHeader.MODIFY;
          end;
          WhseShptLine.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelationRcpt@18(NewPostedWhseRcptLine@1002 : Record "Posted Whse. Receipt Line");
    BEGIN
      with NewPostedWhseRcptLine do
        DeleteWhseItemEntryRelation(DATABASE::"Posted Whse. Receipt Line","No.","Line No.");
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelationShpt@17(NewPostedWhseShptLine@1002 : Record "Posted Whse. Shipment Line");
    BEGIN
      with NewPostedWhseShptLine do
        DeleteWhseItemEntryRelation(DATABASE::"Posted Whse. Shipment Line","No.","Line No.");
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelation@20(SourceType@1004 : Integer;SourceNo@1002 : Code[20];SourceLineNo@1000 : Integer);
    VAR
      WhseItemEntryRelation@1001 : Record "Whse. Item Entry Relation";
    BEGIN
      WhseItemEntryRelation.SetSourceFilter(SourceType,0,SourceNo,SourceLineNo,true);
      WhseItemEntryRelation.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateWhseRequestRcpt@12(VAR PostedWhseRcptLine@1002 : Record "Posted Whse. Receipt Line");
    VAR
      PurchLine@1000 : Record "Purchase Line";
      SalesLine@1003 : Record "Sales Line";
    BEGIN
      with PostedWhseRcptLine do begin
        case "Source Type" of
          DATABASE::"Purchase Line":
            begin
              PurchLine.GET("Source Subtype","Source No.","Source Line No.");
              if not (PurchLine."Quantity Received" < PurchLine.Quantity) then
                exit;
            end;
          DATABASE::"Sales Line":
            begin
              SalesLine.GET("Source Subtype","Source No.","Source Line No.");
              if not (SalesLine."Return Qty. Received" < SalesLine.Quantity) then
                exit;
            end;
        end;
        UpdateWhseRequest("Source Type","Source Subtype","Source No.");
      end;
    END;

    LOCAL PROCEDURE UpdateWhseRequestShpt@8(VAR PostedWhseShptLine@1002 : Record "Posted Whse. Shipment Line");
    VAR
      PurchLine@1000 : Record "Purchase Line";
      SalesLine@1003 : Record "Sales Line";
    BEGIN
      with PostedWhseShptLine do begin
        case "Source Type" of
          DATABASE::"Sales Line":
            begin
              SalesLine.GET("Source Subtype","Source No.","Source Line No.");
              if not (SalesLine."Quantity Shipped" < SalesLine.Quantity) then
                exit;
            end;
          DATABASE::"Purchase Line":
            begin
              PurchLine.GET("Source Subtype","Source No.","Source Line No.");
              if not (PurchLine."Return Qty. Shipped" < PurchLine.Quantity) then
                exit;
            end;
        end;
        UpdateWhseRequest("Source Type","Source Subtype","Source No.");
      end;
    END;

    LOCAL PROCEDURE UpdateWhseRequest@26(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20]);
    VAR
      WhseRequest@1001 : Record "Warehouse Request";
    BEGIN
      with WhseRequest do begin
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        if FINDFIRST and "Completely Handled" then begin
          "Completely Handled" := false;
          MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE IsATO@13(UndoType@1005 : Integer;UndoID@1004 : Code[20];SourceRefNo@1000 : Integer) : Boolean;
    VAR
      PostedATOLink@1001 : Record "Posted Assemble-to-Order Link";
    BEGIN
      if UndoType = DATABASE::"Sales Shipment Line" then begin
        PostedATOLink.SETRANGE("Document Type",PostedATOLink."Document Type"::"Sales Shipment");
        PostedATOLink.SETRANGE("Document No.",UndoID);
        PostedATOLink.SETRANGE("Document Line No.",SourceRefNo);
        exit(not PostedATOLink.ISEMPTY);
      end;
    END;

    BEGIN
    END.
  }
}

