OBJECT Codeunit 99000840 Plng. Component-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd,
                TableData "Action Message Entry"=rd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1.';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.';
      CreateReservEntry@1005 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1006 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1007 : Codeunit "Reservation Management";
      Blocked@1008 : Boolean;
      SetFromType@1009 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;

    [External]
    PROCEDURE CreateReservation@1(PlanningComponent@1000 : Record "Planning Component";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text004);

      PlanningComponent.TESTFIELD("Item No.");
      PlanningComponent.TESTFIELD("Due Date");

      if ABS(PlanningComponent."Net Quantity (Base)") < ABS(PlanningComponent."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(PlanningComponent."Net Quantity (Base)") - ABS(PlanningComponent."Reserved Qty. (Base)"));

      PlanningComponent.TESTFIELD("Location Code",SetFromLocationCode);
      PlanningComponent.TESTFIELD("Variant Code",SetFromVariantCode);

      if QuantityBase > 0 then
        ShipmentDate := PlanningComponent."Due Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := PlanningComponent."Due Date";
      end;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Planning Component",0,
        PlanningComponent."Worksheet Template Name",PlanningComponent."Worksheet Batch Name",
        PlanningComponent."Worksheet Line No.",PlanningComponent."Line No.",
        PlanningComponent."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        PlanningComponent."Item No.",PlanningComponent."Variant Code",PlanningComponent."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    LOCAL PROCEDURE CreateBindingReservation@11(PlanningComponent@1000 : Record "Planning Component";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(PlanningComponent,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@4(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE SetBinding@8(Binding@1000 : '" ","Order-to-Order"');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record "Reservation Entry";PlanningComponent@1001 : Record "Planning Component");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Planning Component",0,PlanningComponent."Worksheet Template Name",PlanningComponent."Line No.",false);
      FilterReservEntry.SetSourceFilter2(PlanningComponent."Worksheet Batch Name",PlanningComponent."Worksheet Line No.");
    END;

    [External]
    PROCEDURE Caption@30(PlanningComponent@1001 : Record "Planning Component") CaptionText@1000 : Text[80];
    VAR
      ReqLine@1002 : Record "Requisition Line";
    BEGIN
      ReqLine.GET(
        PlanningComponent."Worksheet Template Name",
        PlanningComponent."Worksheet Batch Name",
        PlanningComponent."Worksheet Line No.");
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          PlanningComponent."Worksheet Template Name",
          PlanningComponent."Worksheet Batch Name",
          ReqLine.Type,
          ReqLine."No.");
    END;

    [External]
    PROCEDURE FindReservEntry@5(PlanningComponent@1000 : Record "Planning Component";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,PlanningComponent);
      exit(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewPlanningComponent@1000 : Record "Planning Component";VAR OldPlanningComponent@1001 : Record "Planning Component");
    VAR
      PlanningComponent@1005 : Record "Planning Component";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if Blocked then
        exit;
      if NewPlanningComponent."Line No." = 0 then
        if not PlanningComponent.GET(
             NewPlanningComponent."Worksheet Template Name",
             NewPlanningComponent."Worksheet Batch Name",
             NewPlanningComponent."Worksheet Line No.",
             NewPlanningComponent."Line No.")
        then
          exit;

      NewPlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewPlanningComponent."Reserved Qty. (Base)" <> 0;

      if NewPlanningComponent."Due Date" = 0D then
        if ShowError then
          NewPlanningComponent.FIELDERROR("Due Date",Text002);
      HasError := true;
      if NewPlanningComponent."Item No." <> OldPlanningComponent."Item No." then
        if ShowError then
          NewPlanningComponent.FIELDERROR("Item No.",Text003);
      HasError := true;
      if NewPlanningComponent."Location Code" <> OldPlanningComponent."Location Code" then
        if ShowError then
          NewPlanningComponent.FIELDERROR("Location Code",Text003);
      HasError := true;
      if (NewPlanningComponent."Bin Code" <> OldPlanningComponent."Bin Code") and
         (not ReservMgt.CalcIsAvailTrackedQtyInBin(
            NewPlanningComponent."Item No.",NewPlanningComponent."Bin Code",
            NewPlanningComponent."Location Code",NewPlanningComponent."Variant Code",
            DATABASE::"Planning Component",0,
            NewPlanningComponent."Worksheet Template Name",
            NewPlanningComponent."Worksheet Batch Name",NewPlanningComponent."Worksheet Line No.",
            NewPlanningComponent."Line No."))
      then begin
        if ShowError then
          NewPlanningComponent.FIELDERROR("Bin Code",Text003);
        HasError := true;
      end;
      if NewPlanningComponent."Variant Code" <> OldPlanningComponent."Variant Code" then
        if ShowError then
          NewPlanningComponent.FIELDERROR("Variant Code",Text003);
      HasError := true;
      if NewPlanningComponent."Line No." <> OldPlanningComponent."Line No." then
        HasError := true;

      if HasError then
        if (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") or
           FindReservEntry(NewPlanningComponent,TempReservEntry)
        then begin
          if NewPlanningComponent."Item No." <> OldPlanningComponent."Item No." then begin
            ReservMgt.SetPlanningComponent(OldPlanningComponent);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetPlanningComponent(NewPlanningComponent);
          end else begin
            ReservMgt.SetPlanningComponent(NewPlanningComponent);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewPlanningComponent."Net Quantity (Base)");
        end;

      if HasError or (NewPlanningComponent."Due Date" <> OldPlanningComponent."Due Date")
      then begin
        AssignForPlanning(NewPlanningComponent);
        if (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") or
           (NewPlanningComponent."Variant Code" <> OldPlanningComponent."Variant Code") or
           (NewPlanningComponent."Location Code" <> OldPlanningComponent."Location Code")
        then
          AssignForPlanning(OldPlanningComponent);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@2(VAR NewPlanningComponent@1000 : Record "Planning Component";VAR OldPlanningComponent@1001 : Record "Planning Component");
    VAR
      PlanningComponent@1002 : Record "Planning Component";
    BEGIN
      if Blocked then
        exit;

      with NewPlanningComponent do begin
        if "Line No." = OldPlanningComponent."Line No." then
          if "Net Quantity (Base)" = OldPlanningComponent."Net Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not PlanningComponent.GET(
               "Worksheet Template Name",
               "Worksheet Batch Name",
               "Worksheet Line No.",
               "Line No.")
          then
            exit;
        ReservMgt.SetPlanningComponent(NewPlanningComponent);
        if "Qty. per Unit of Measure" <> OldPlanningComponent."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Net Quantity (Base)" * OldPlanningComponent."Net Quantity (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Net Quantity (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Net Quantity (Base)");
        AssignForPlanning(NewPlanningComponent);
      end;
    END;

    [External]
    PROCEDURE TransferPlanningCompToPOComp@31(VAR OldPlanningComponent@1000 : Record "Planning Component";VAR NewProdOrderComp@1001 : Record "Prod. Order Component";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldPlanningComponent,OldReservEntry) then
        exit;

      NewProdOrderComp.TestItemFields(
        OldPlanningComponent."Item No.",OldPlanningComponent."Variant Code",OldPlanningComponent."Location Code");

      TransferReservations(
        OldPlanningComponent,OldReservEntry,TransferAll,TransferQty,NewProdOrderComp."Qty. per Unit of Measure",
        DATABASE::"Prod. Order Component",NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",
        '',NewProdOrderComp."Prod. Order Line No.",NewProdOrderComp."Line No.");
    END;

    [External]
    PROCEDURE TransferPlanningCompToAsmLine@16(VAR OldPlanningComponent@1000 : Record "Planning Component";VAR NewAsmLine@1001 : Record "Assembly Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldPlanningComponent,OldReservEntry) then
        exit;

      NewAsmLine.TestItemFields(
        OldPlanningComponent."Item No.",OldPlanningComponent."Variant Code",OldPlanningComponent."Location Code");

      TransferReservations(
        OldPlanningComponent,OldReservEntry,TransferAll,TransferQty,NewAsmLine."Qty. per Unit of Measure",
        DATABASE::"Assembly Line",NewAsmLine."Document Type",NewAsmLine."Document No.",
        '',0,NewAsmLine."Line No.");
    END;

    LOCAL PROCEDURE TransferReservations@22(VAR OldPlanningComponent@1016 : Record "Planning Component";VAR OldReservEntry@1006 : Record "Reservation Entry";TransferAll@1007 : Boolean;TransferQty@1015 : Decimal;QtyPerUOM@1008 : Decimal;SrcType@1009 : Integer;SrcSubtype@1010 : Option;SrcID@1011 : Code[20];SrcBatchName@1012 : Code[10];SrcProdOrderLine@1013 : Integer;SrcRefNo@1014 : Integer);
    VAR
      NewReservEntry@1004 : Record "Reservation Entry";
      Status@1001 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      OldReservEntry.Lock;

      if TransferAll then begin
        OldReservEntry.FINDSET;
        OldReservEntry.TESTFIELD("Qty. per Unit of Measure",QtyPerUOM);

        repeat
          OldReservEntry.TestItemFields(
            OldPlanningComponent."Item No.",OldPlanningComponent."Variant Code",OldPlanningComponent."Location Code");

          NewReservEntry := OldReservEntry;
          NewReservEntry.SetSource(SrcType,SrcSubtype,SrcID,SrcRefNo,SrcBatchName,SrcProdOrderLine);
          NewReservEntry.MODIFY;
        until OldReservEntry.NEXT = 0;
      end else
        for Status := Status::Reservation to Status::Prospect do begin
          if TransferQty = 0 then
            exit;
          OldReservEntry.SETRANGE("Reservation Status",Status);

          if OldReservEntry.FINDSET then
            repeat
              OldReservEntry.TestItemFields(
                OldPlanningComponent."Item No.",OldPlanningComponent."Variant Code",OldPlanningComponent."Location Code");

              TransferQty :=
                CreateReservEntry.TransferReservEntry(
                  SrcType,SrcSubtype,SrcID,SrcBatchName,SrcProdOrderLine,SrcRefNo,QtyPerUOM,OldReservEntry,TransferQty);
            until (OldReservEntry.NEXT = 0) or (TransferQty = 0);
        end;
    END;

    [External]
    PROCEDURE DeleteLine@3(VAR PlanningComponent@1000 : Record "Planning Component");
    BEGIN
      if Blocked then
        exit;

      with PlanningComponent do begin
        ReservMgt.SetPlanningComponent(PlanningComponent);
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(PlanningComponent);
      end;
    END;

    [External]
    PROCEDURE UpdateDerivedTracking@9(VAR PlanningComponent@1000 : Record "Planning Component");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEntry2@1002 : Record "Reservation Entry";
      ActionMessageEntry@1003 : Record "Action Message Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ActionMessageEntry.SETCURRENTKEY("Reservation Entry");

      with ReservEntry do begin
        SETFILTER("Shipment Date",'<>%1',PlanningComponent."Due Date");
        case PlanningComponent."Ref. Order Type" of
          PlanningComponent."Ref. Order Type"::"Prod. Order":
            SetSourceFilter(
              DATABASE::"Prod. Order Component",PlanningComponent."Ref. Order Status",
              PlanningComponent."Ref. Order No.",PlanningComponent."Line No.",false);
          PlanningComponent."Ref. Order Type"::Assembly:
            SetSourceFilter(
              DATABASE::"Assembly Line",PlanningComponent."Ref. Order Status",
              PlanningComponent."Ref. Order No.",PlanningComponent."Line No.",false);
        end;
        SETRANGE("Source Prod. Order Line",PlanningComponent."Ref. Order Line No.");
        if FINDSET then
          repeat
            ReservEntry2 := ReservEntry;
            ReservEntry2."Shipment Date" := PlanningComponent."Due Date";
            ReservEntry2.MODIFY;
            if ReservEntry2.GET(ReservEntry2."Entry No.",not ReservEntry2.Positive) then begin
              ReservEntry2."Shipment Date" := PlanningComponent."Due Date";
              ReservEntry2.MODIFY;
            end;
            ActionMessageEntry.SETRANGE("Reservation Entry","Entry No.");
            ActionMessageEntry.DELETEALL;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AssignForPlanning@7(VAR PlanningComponent@1000 : Record "Planning Component");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with PlanningComponent do
        if "Item No." <> '' then
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Due Date");
    END;

    [External]
    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR PlanningComponent@1003 : Record "Planning Component");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromProdPlanningComp(PlanningComponent);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,PlanningComponent."Due Date");
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE BindToRequisition@10(PlanningComp@1000 : Record "Planning Component";ReqLine@1001 : Record "Requisition Line";ReservQty@1002 : Decimal;ReservQtyBase@1003 : Decimal);
    VAR
      TrackingSpecification@1004 : Record "Tracking Specification";
      ReservationEntry@1005 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Requisition Line",0,
        ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",0,ReqLine."Line No.",
        ReqLine."Variant Code",ReqLine."Location Code",ReqLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(PlanningComp,ReqLine.Description,ReqLine."Ending Date",ReservQty,ReservQtyBase);
    END;

    BEGIN
    END.
  }
}

