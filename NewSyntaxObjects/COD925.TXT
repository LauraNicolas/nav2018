OBJECT Codeunit 925 Assembly Header-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateReservEntry@1000 : Codeunit "Create Reserv. Entry";
      ReservMgt@1016 : Codeunit "Reservation Management";
      ReservEngineMgt@1014 : Codeunit "Reservation Engine Mgt.";
      SetFromType@1011 : Integer;
      SetFromSubtype@1010 : Integer;
      SetFromID@1009 : Code[20];
      SetFromBatchName@1008 : Code[10];
      SetFromProdOrderLine@1007 : Integer;
      SetFromRefNo@1006 : Integer;
      SetFromVariantCode@1005 : Code[10];
      SetFromLocationCode@1004 : Code[10];
      SetFromSerialNo@1003 : Code[20];
      SetFromLotNo@1002 : Code[20];
      SetFromQtyPerUOM@1001 : Decimal;
      Text000@1013 : TextConst 'ENU=Reserved quantity cannot be greater than %1.';
      Text001@1012 : TextConst 'ENU=Codeunit is not initialized correctly.';
      DeleteItemTracking@1017 : Boolean;
      Text002@1019 : TextConst '@@@=starts with "Due Date";ENU=must be filled in when a quantity is reserved';
      Text003@1018 : TextConst '@@@=starts with some field name;ENU=must not be changed when a quantity is reserved';

    [External]
    PROCEDURE CreateReservation@1(VAR AssemblyHeader@1000 : Record "Assembly Header";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text001);

      AssemblyHeader.TESTFIELD("Item No.");
      AssemblyHeader.TESTFIELD("Due Date");

      AssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(AssemblyHeader."Remaining Quantity (Base)") < ABS(AssemblyHeader."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(AssemblyHeader."Remaining Quantity (Base)") - ABS(AssemblyHeader."Reserved Qty. (Base)"));

      AssemblyHeader.TESTFIELD("Variant Code",SetFromVariantCode);
      AssemblyHeader.TESTFIELD("Location Code",SetFromLocationCode);

      if QuantityBase * SignFactor(AssemblyHeader) < 0 then
        ShipmentDate := AssemblyHeader."Due Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := AssemblyHeader."Due Date";
      end;

      if AssemblyHeader."Planning Flexibility" <> AssemblyHeader."Planning Flexibility"::Unlimited then
        CreateReservEntry.SetPlanningFlexibility(AssemblyHeader."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Assembly Header",AssemblyHeader."Document Type",
        AssemblyHeader."No.",'',0,0,AssemblyHeader."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        AssemblyHeader."Item No.",AssemblyHeader."Variant Code",AssemblyHeader."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservation2@6(VAR AssemblyHeader@1000 : Record "Assembly Header";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(AssemblyHeader,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@9(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    LOCAL PROCEDURE SignFactor@21(AssemblyHeader@1000 : Record "Assembly Header") : Integer;
    BEGIN
      if AssemblyHeader."Document Type" in [2,3,5] then
        ERROR(Text001);

      exit(1);
    END;

    [External]
    PROCEDURE SetBinding@15(Binding@1000 : '" ","Order-to-Order"');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE SetDisallowCancellation@24(DisallowCancellation@1000 : Boolean);
    BEGIN
      CreateReservEntry.SetDisallowCancellation(DisallowCancellation);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record "Reservation Entry";AssemblyHeader@1001 : Record "Assembly Header");
    BEGIN
      FilterReservEntry.SetSourceFilter(DATABASE::"Assembly Header",AssemblyHeader."Document Type",AssemblyHeader."No.",0,false);
      FilterReservEntry.SetSourceFilter2('',0);
    END;

    [External]
    PROCEDURE FindReservEntry@4(AssemblyHeader@1000 : Record "Assembly Header";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,AssemblyHeader);
      exit(ReservEntry.FINDLAST);
    END;

    LOCAL PROCEDURE AssignForPlanning@7(VAR AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with AssemblyHeader do begin
        if "Document Type" <> "Document Type"::Order then
          exit;

        if "Item No." <> '' then
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code",WORKDATE);
      end;
    END;

    [External]
    PROCEDURE UpdatePlanningFlexibility@5(VAR AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      if FindReservEntry(AssemblyHeader,ReservEntry) then
        ReservEntry.MODIFYALL("Planning Flexibility",AssemblyHeader."Planning Flexibility");
    END;

    [External]
    PROCEDURE ReservEntryExist@16(AssemblyHeader@1000 : Record "Assembly Header") : Boolean;
    VAR
      ReservEntry@1002 : Record "Reservation Entry";
      ReservEngineMgt@1001 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,AssemblyHeader);
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE DeleteLine@11(VAR AssemblyHeader@1000 : Record "Assembly Header");
    BEGIN
      with AssemblyHeader do begin
        ReservMgt.SetAssemblyHeader(AssemblyHeader);
        if DeleteItemTracking then
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(AssemblyHeader);
      end;
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewAssemblyHeader@1000 : Record "Assembly Header";VAR OldAssemblyHeader@1001 : Record "Assembly Header");
    VAR
      ReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      NewAssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewAssemblyHeader."Reserved Qty. (Base)" <> 0;

      if NewAssemblyHeader."Due Date" = 0D then begin
        if ShowError then
          NewAssemblyHeader.FIELDERROR("Due Date",Text002);
        HasError := true;
      end;

      if NewAssemblyHeader."Item No." <> OldAssemblyHeader."Item No." then begin
        if ShowError then
          NewAssemblyHeader.FIELDERROR("Item No.",Text003);
        HasError := true;
      end;

      if NewAssemblyHeader."Location Code" <> OldAssemblyHeader."Location Code" then begin
        if ShowError then
          NewAssemblyHeader.FIELDERROR("Location Code",Text003);
        HasError := true;
      end;

      if NewAssemblyHeader."Variant Code" <> OldAssemblyHeader."Variant Code" then begin
        if ShowError then
          NewAssemblyHeader.FIELDERROR("Variant Code",Text003);
        HasError := true;
      end;

      if HasError then
        if (NewAssemblyHeader."Item No." <> OldAssemblyHeader."Item No.") or
           FindReservEntry(NewAssemblyHeader,ReservEntry)
        then begin
          if NewAssemblyHeader."Item No." <> OldAssemblyHeader."Item No." then begin
            ReservMgt.SetAssemblyHeader(OldAssemblyHeader);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetAssemblyHeader(NewAssemblyHeader);
          end else begin
            ReservMgt.SetAssemblyHeader(NewAssemblyHeader);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewAssemblyHeader."Remaining Quantity (Base)");
        end;

      if HasError or (NewAssemblyHeader."Due Date" <> OldAssemblyHeader."Due Date") then begin
        AssignForPlanning(NewAssemblyHeader);
        if (NewAssemblyHeader."Item No." <> OldAssemblyHeader."Item No.") or
           (NewAssemblyHeader."Variant Code" <> OldAssemblyHeader."Variant Code") or
           (NewAssemblyHeader."Location Code" <> OldAssemblyHeader."Location Code")
        then
          AssignForPlanning(OldAssemblyHeader);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@13(VAR NewAssemblyHeader@1000 : Record "Assembly Header";VAR OldAssemblyHeader@1001 : Record "Assembly Header");
    BEGIN
      with NewAssemblyHeader do begin
        if "Quantity (Base)" = OldAssemblyHeader."Quantity (Base)" then
          exit;

        ReservMgt.SetAssemblyHeader(NewAssemblyHeader);
        if "Qty. per Unit of Measure" <> OldAssemblyHeader."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        ReservMgt.DeleteReservEntries(false,"Remaining Quantity (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Quantity (Base)");
        AssignForPlanning(NewAssemblyHeader);
      end;
    END;

    [External]
    PROCEDURE Caption@30(AssemblyHeader@1001 : Record "Assembly Header") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2',AssemblyHeader."Document Type",AssemblyHeader."No.");
    END;

    [External]
    PROCEDURE CallItemTracking@2(VAR AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromAsmHeader(AssemblyHeader);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,AssemblyHeader."Due Date");
      ItemTrackingLines.SetInbound(AssemblyHeader.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE DeleteLineConfirm@3(VAR AssemblyHeader@1000 : Record "Assembly Header") : Boolean;
    BEGIN
      with AssemblyHeader do begin
        if not ReservEntryExist(AssemblyHeader) then
          exit(true);

        ReservMgt.SetAssemblyHeader(AssemblyHeader);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@10(AssemblyHeader@1000 : Record "Assembly Header");
    VAR
      ReservEntry@1003 : Record "Reservation Entry";
      CreateReservEntry@1001 : Codeunit "Create Reserv. Entry";
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ReservEntry.SetSourceFilter(
        DATABASE::"Assembly Header",AssemblyHeader."Document Type",AssemblyHeader."No.",-1,false);
      ReservEntry.SetSourceFilter2('',0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [External]
    PROCEDURE TransferAsmHeaderToItemJnlLine@32(VAR AssemblyHeader@1000 : Record "Assembly Header";VAR ItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1002 : Decimal;CheckApplToItemEntry@1004 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
      OldReservEntry2@1005 : Record "Reservation Entry";
    BEGIN
      if TransferQty = 0 then
        exit;
      if not FindReservEntry(AssemblyHeader,OldReservEntry) then
        exit(TransferQty);

      ItemJnlLine.TestItemFields(AssemblyHeader."Item No.",AssemblyHeader."Variant Code",AssemblyHeader."Location Code");

      OldReservEntry.Lock;

      if ReservEngineMgt.InitRecordSet(OldReservEntry) then begin
        repeat
          OldReservEntry.TestItemFields(AssemblyHeader."Item No.",AssemblyHeader."Variant Code",AssemblyHeader."Location Code");
          if CheckApplToItemEntry and
             (OldReservEntry."Reservation Status" = OldReservEntry."Reservation Status"::Reservation)
          then begin
            OldReservEntry2.GET(OldReservEntry."Entry No.",not OldReservEntry.Positive);
            OldReservEntry2.TESTFIELD("Source Type",DATABASE::"Item Ledger Entry");
          end;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        until (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) or (TransferQty = 0);
        CheckApplToItemEntry := false;
      end;
      exit(TransferQty);
    END;

    BEGIN
    END.
  }
}

