OBJECT Codeunit 1201 Process Data Exch.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataTypeNotSupportedErr@1002 : TextConst '@@@="%1=Field Value;%2=Field Value;%3=Filed Type";ENU=The %1 column is mapped in the %2 format to a %3 field, which is not supported.';
      IncorrectFormatOrTypeErr@1001 : TextConst '@@@="%1=File Name;%2=Data Exch.Def Type;%3=Data Exch. Def Code;%4=Line No;%5=Column No;%6=Data Type;%7=Data Type Format;%8=Local;%9=Actual Value";ENU=The file that you are trying to import, %1, is different from the specified %2, %3.\\The value in line %4, column %5 has incorrect format or type.\Expected format: %6, according to the %7 and %8 of the %9.\Actual value: "%10".';
      MissingValueErr@1000 : TextConst '@@@="%1=File Name;%2=Data Exch.Def Type;%3=Data Exch. Def Code;%4=Line No;%5=Column No";ENU=The file that you are trying to import, %1, is different from the specified %2, %3.\\The value in line %4, column %5 is missing.';

    PROCEDURE ProcessColumnMapping@2(DataExch@1004 : Record "Data Exch.";DataExchLineDef@1001 : Record "Data Exch. Line Def";RecRefTemplate@1013 : RecordRef);
    VAR
      DataExchField@1009 : Record "Data Exch. Field";
      DataExchFieldGroupByLineNo@1003 : Record "Data Exch. Field";
      DataExchMapping@1060 : Record "Data Exch. Mapping";
      DataExchFieldMapping@1010 : Record "Data Exch. Field Mapping";
      TempFieldIdsToNegate@1011 : TEMPORARY Record Integer;
      RecRef@1005 : RecordRef;
      LastKeyFieldId@1015 : Integer;
      LineNoOffset@1002 : Integer;
      CurrLineNo@1000 : Integer;
    BEGIN
      LastKeyFieldId := GetLastIntegerKeyField(RecRefTemplate);
      LineNoOffset := GetLastKeyValueInRange(RecRefTemplate,LastKeyFieldId);

      DataExchMapping.GET(DataExch."Data Exch. Def Code",DataExchLineDef.Code,RecRefTemplate.NUMBER);

      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchFieldMapping.SETRANGE("Table ID",RecRefTemplate.NUMBER);

      DataExchField.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      DataExchField.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);

      DataExchFieldGroupByLineNo.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      DataExchFieldGroupByLineNo.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
      DataExchFieldGroupByLineNo.ASCENDING(true);
      if not DataExchFieldGroupByLineNo.FINDSET then
        exit;

      repeat
        if DataExchFieldGroupByLineNo."Line No." <> CurrLineNo then begin
          CurrLineNo := DataExchFieldGroupByLineNo."Line No.";

          RecRef := RecRefTemplate.DUPLICATE;
          if (DataExchMapping."Data Exch. No. Field ID" <> 0) and (DataExchMapping."Data Exch. Line Field ID" <> 0) then begin
            SetFieldValue(RecRef,DataExchMapping."Data Exch. No. Field ID",DataExch."Entry No.");
            SetFieldValue(RecRef,DataExchMapping."Data Exch. Line Field ID",CurrLineNo);
          end;
          SetFieldValue(RecRef,LastKeyFieldId,CurrLineNo * 10000 + LineNoOffset);
          DataExchFieldMapping.FINDSET;
          repeat
            DataExchField.SETRANGE("Line No.",CurrLineNo);
            DataExchField.SETRANGE("Column No.",DataExchFieldMapping."Column No.");
            if DataExchField.FINDSET then
              repeat
                SetField(RecRef,DataExchFieldMapping,DataExchField,TempFieldIdsToNegate)
              until DataExchField.NEXT = 0
            else
              if not DataExchFieldMapping.Optional then
                ERROR(
                  MissingValueErr,DataExch."File Name",GetType(DataExch."Data Exch. Def Code"),
                  DataExch."Data Exch. Def Code",CurrLineNo,DataExchFieldMapping."Column No.");
          until DataExchFieldMapping.NEXT = 0;

          NegateAmounts(RecRef,TempFieldIdsToNegate);

          RecRef.INSERT;
        end;
      until DataExchFieldGroupByLineNo.NEXT = 0;
    END;

    [External]
    PROCEDURE ProcessAllLinesColumnMapping@8(DataExch@1001 : Record "Data Exch.";RecRef@1003 : RecordRef);
    VAR
      DataExchLineDef@1000 : Record "Data Exch. Line Def";
    BEGIN
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
      if DataExchLineDef.FINDSET then
        repeat
          ProcessColumnMapping(DataExch,DataExchLineDef,RecRef);
        until DataExchLineDef.NEXT = 0;
    END;

    PROCEDURE SetField@1(RecRef@1015 : RecordRef;DataExchFieldMapping@1002 : Record "Data Exch. Field Mapping";VAR DataExchField@1017 : Record "Data Exch. Field";VAR TempFieldIdsToNegate@1004 : TEMPORARY Record Integer);
    VAR
      DataExchColumnDef@1000 : Record "Data Exch. Column Def";
      TransformationRule@1001 : Record "Transformation Rule";
      FieldRef@1008 : FieldRef;
      TransformedValue@1003 : Text;
    BEGIN
      DataExchColumnDef.GET(
        DataExchFieldMapping."Data Exch. Def Code",
        DataExchFieldMapping."Data Exch. Line Def Code",
        DataExchField."Column No.");

      FieldRef := RecRef.FIELD(DataExchFieldMapping."Field ID");

      TransformedValue := DELCHR(DataExchField.Value,'>'); // We shoud use the trim transformation rule instead of this
      if TransformationRule.GET(DataExchFieldMapping."Transformation Rule") then
        TransformedValue := TransformationRule.TransformText(DataExchField.Value);

      case FORMAT(FieldRef.TYPE) of
        'Text',
        'Code':
          SetAndMergeTextCodeField(TransformedValue,FieldRef,DataExchFieldMapping."Overwrite Value");
        'Date':
          SetDateDecimalField(TransformedValue,DataExchField,FieldRef,DataExchColumnDef);
        'Decimal':
          if DataExchColumnDef."Negative-Sign Identifier" = '' then begin
            SetDateDecimalField(TransformedValue,DataExchField,FieldRef,DataExchColumnDef);
            AdjustDecimalWithMultiplier(FieldRef,DataExchFieldMapping.Multiplier,FieldRef.VALUE);
          end else
            if DataExchColumnDef."Negative-Sign Identifier" = DataExchField.Value then
              SaveNegativeSignForField(DataExchFieldMapping."Field ID",TempFieldIdsToNegate);
        'Option':
          SetOptionField(TransformedValue,FieldRef);
        else
          ERROR(DataTypeNotSupportedErr,DataExchColumnDef.Description,DataExchFieldMapping."Data Exch. Def Code",FieldRef.TYPE);
      end;
      FieldRef.VALIDATE;
    END;

    LOCAL PROCEDURE SetOptionField@13(ValueText@1000 : Text;FieldRef@1001 : FieldRef);
    VAR
      OptionValue@1002 : Integer;
    BEGIN
      while true do begin
        OptionValue += 1;
        if UPPERCASE(ValueText) = UPPERCASE(SELECTSTR(OptionValue,FieldRef.OPTIONCAPTION)) then begin
          FieldRef.VALUE := OptionValue - 1;
          exit;
        end;
      end;
    END;

    LOCAL PROCEDURE SetAndMergeTextCodeField@10(Value@1000 : Text;VAR FieldRef@1001 : FieldRef;OverwriteValue@1003 : Boolean);
    VAR
      CurrentLength@1002 : Integer;
    BEGIN
      CurrentLength := STRLEN(FORMAT(FieldRef.VALUE));
      if (FieldRef.LENGTH = CurrentLength) and not OverwriteValue then
        exit;
      if (CurrentLength = 0) or OverwriteValue then
        FieldRef.VALUE := COPYSTR(Value,1,FieldRef.LENGTH)
      else
        FieldRef.VALUE := STRSUBSTNO('%1 %2',FORMAT(FieldRef.VALUE),COPYSTR(Value,1,FieldRef.LENGTH - CurrentLength - 1));
    END;

    LOCAL PROCEDURE SetDateDecimalField@18(ValueText@1002 : Text;VAR DataExchField@1000 : Record "Data Exch. Field";VAR FieldRef@1001 : FieldRef;VAR DataExchColumnDef@1003 : Record "Data Exch. Column Def");
    VAR
      TypeHelper@1006 : Codeunit "Type Helper";
      Value@1005 : Variant;
    BEGIN
      Value := FieldRef.VALUE;

      if not TypeHelper.Evaluate(
           Value,ValueText,DataExchColumnDef."Data Format",DataExchColumnDef."Data Formatting Culture")
      then
        ERROR(IncorrectFormatOrTypeErr,
          GetFileName(DataExchField."Data Exch. No."),GetType(DataExchColumnDef."Data Exch. Def Code"),
          DataExchColumnDef."Data Exch. Def Code",DataExchField."Line No.",DataExchField."Column No.",FORMAT(FieldRef.TYPE),
          DataExchColumnDef.FIELDCAPTION("Data Format"),DataExchColumnDef.FIELDCAPTION("Data Formatting Culture"),
          DataExchColumnDef.TABLECAPTION,DataExchField.Value);

      FieldRef.VALUE := Value;
    END;

    LOCAL PROCEDURE AdjustDecimalWithMultiplier@5(VAR FieldRef@1004 : FieldRef;Multiplier@1000 : Decimal;DecimalAsVariant@1001 : Variant);
    VAR
      DecimalValue@1003 : Decimal;
    BEGIN
      DecimalValue := DecimalAsVariant;
      FieldRef.VALUE := Multiplier * DecimalValue;
    END;

    LOCAL PROCEDURE GetLastIntegerKeyField@7(RecRef@1000 : RecordRef) : Integer;
    VAR
      KeyRef@1001 : KeyRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(KeyRef.FIELDCOUNT);
      if FORMAT(FieldRef.TYPE) <> 'Integer' then
        exit(0);

      exit(FieldRef.NUMBER);
    END;

    LOCAL PROCEDURE GetLastKeyValueInRange@4(RecRefTemplate@1000 : RecordRef;FieldId@1002 : Integer) : Integer;
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      RecRef := RecRefTemplate.DUPLICATE;
      SetKeyAsFilter(RecRef);
      FieldRef := RecRef.FIELD(FieldId);
      FieldRef.SETRANGE;
      if RecRef.FINDLAST then
        exit(RecRef.FIELD(FieldId).VALUE);
      exit(0);
    END;

    LOCAL PROCEDURE SetFieldValue@11(RecRef@1000 : RecordRef;FieldID@1001 : Integer;Value@1002 : Variant);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      if FieldID = 0 then
        exit;
      FieldRef := RecRef.FIELD(FieldID);
      FieldRef.VALIDATE(Value);
    END;

    LOCAL PROCEDURE SetKeyAsFilter@3(VAR RecRef@1000 : RecordRef);
    VAR
      KeyRef@1001 : KeyRef;
      FieldRef@1003 : FieldRef;
      i@1002 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      for i := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := RecRef.FIELD(KeyRef.FIELDINDEX(i).NUMBER);
        FieldRef.SETRANGE(FieldRef.VALUE);
      end
    END;

    LOCAL PROCEDURE GetType@6(DataExchDefCode@1000 : Code[20]) : Text;
    VAR
      DataExchDef@1001 : Record "Data Exch. Def";
    BEGIN
      DataExchDef.GET(DataExchDefCode);
      exit(FORMAT(DataExchDef.Type));
    END;

    LOCAL PROCEDURE GetFileName@9(DataExchEntryNo@1000 : Integer) : Text;
    VAR
      DataExch@1001 : Record "Data Exch.";
    BEGIN
      DataExch.GET(DataExchEntryNo);
      exit(DataExch."File Name");
    END;

    LOCAL PROCEDURE SaveNegativeSignForField@12(FieldId@1000 : Integer;VAR TempFieldIdsToNegate@1001 : TEMPORARY Record Integer);
    BEGIN
      TempFieldIdsToNegate.Number := FieldId;
      TempFieldIdsToNegate.INSERT;
    END;

    PROCEDURE NegateAmounts@15(RecRef@1000 : RecordRef;VAR TempFieldIdsToNegate@1001 : TEMPORARY Record Integer);
    VAR
      FieldRef@1002 : FieldRef;
      Amount@1003 : Decimal;
    BEGIN
      if TempFieldIdsToNegate.FINDSET then begin
        repeat
          FieldRef := RecRef.FIELD(TempFieldIdsToNegate.Number);
          Amount := FieldRef.VALUE;
          FieldRef.VALUE := -Amount;
          FieldRef.VALIDATE;
        until TempFieldIdsToNegate.NEXT = 0;
        TempFieldIdsToNegate.DELETEALL;
      end;
    END;

    BEGIN
    END.
  }
}

