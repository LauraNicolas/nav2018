OBJECT Codeunit 368 Format Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchaserTxt@1005 : TextConst 'ENU=Purchaser';
      SalespersonTxt@1000 : TextConst 'ENU=Salesperson';
      TotalTxt@1003 : TextConst '@@@="%1 = Currency Code";ENU=Total %1';
      TotalInclVATTxt@1002 : TextConst '@@@="%1 = Currency Code";ENU=Total %1 Incl. VAT';
      TotalExclVATTxt@1001 : TextConst '@@@="%1 = Currency Code";ENU=Total %1 Excl. VAT';
      GLSetup@1004 : Record "General Ledger Setup";
      COPYTxt@1006 : TextConst '@@@=COPY;ENU=COPY';
      AutoFormatManagement@1007 : Codeunit AutoFormatManagement;

    [External]
    PROCEDURE GetCOPYText@10() : Text[30];
    BEGIN
      exit(' ' + COPYTxt);
    END;

    [External]
    PROCEDURE ParseComment@11(Comment@1000 : Text[80];VAR Description@1001 : Text[50];VAR Description2@1002 : Text[50]);
    VAR
      SpacePointer@1003 : Integer;
    BEGIN
      if STRLEN(Comment) <= MAXSTRLEN(Description) then begin
        Description := COPYSTR(Comment,1,MAXSTRLEN(Description));
        Description2 := '';
      end else begin
        SpacePointer := MAXSTRLEN(Description) + 1;
        while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
          SpacePointer := SpacePointer - 1;
        if SpacePointer = 1 then
          SpacePointer := MAXSTRLEN(Description) + 1;
        Description := COPYSTR(Comment,1,SpacePointer - 1);
        Description2 := COPYSTR(COPYSTR(Comment,SpacePointer + 1),1,MAXSTRLEN(Description2));
      end;
    END;

    [External]
    PROCEDURE SetTotalLabels@8(CurrencyCode@1005 : Code[10];VAR TotalText@1002 : Text[50];VAR TotalInclVATText@1001 : Text[50];VAR TotalExclVATText@1000 : Text[50]);
    BEGIN
      if CurrencyCode = '' then begin
        GLSetup.GET;
        GLSetup.TESTFIELD("LCY Code");
        TotalText := STRSUBSTNO(TotalTxt,GLSetup."LCY Code");
        TotalInclVATText := STRSUBSTNO(TotalInclVATTxt,GLSetup."LCY Code");
        TotalExclVATText := STRSUBSTNO(TotalExclVATTxt,GLSetup."LCY Code");
      end else begin
        TotalText := STRSUBSTNO(TotalTxt,CurrencyCode);
        TotalInclVATText := STRSUBSTNO(TotalInclVATTxt,CurrencyCode);
        TotalExclVATText := STRSUBSTNO(TotalExclVATTxt,CurrencyCode);
      end;
    END;

    [External]
    PROCEDURE SetLogoPosition@1(LogoPosition@1000 : '"No Logo",Left,Center,Right';VAR CompanyInfo1@1001 : Record "Company Information";VAR CompanyInfo2@1002 : Record "Company Information";VAR CompanyInfo3@1003 : Record "Company Information");
    BEGIN
      case LogoPosition of
        LogoPosition::"No Logo":
          ;
        LogoPosition::Left:
          begin
            CompanyInfo3.GET;
            CompanyInfo3.CALCFIELDS(Picture);
          end;
        LogoPosition::Center:
          begin
            CompanyInfo1.GET;
            CompanyInfo1.CALCFIELDS(Picture);
          end;
        LogoPosition::Right:
          begin
            CompanyInfo2.GET;
            CompanyInfo2.CALCFIELDS(Picture);
          end;
      end;
    END;

    [External]
    PROCEDURE SetPaymentMethod@6(VAR PaymentMethod@1000 : Record "Payment Method";Code@1001 : Code[10]);
    BEGIN
      if Code = '' then
        PaymentMethod.INIT
      else
        PaymentMethod.GET(Code);
    END;

    [External]
    PROCEDURE SetPaymentTerms@2(VAR PaymentTerms@1000 : Record "Payment Terms";Code@1001 : Code[10];LanguageCode@1002 : Code[10]);
    BEGIN
      if Code = '' then
        PaymentTerms.INIT
      else begin
        PaymentTerms.GET(Code);
        PaymentTerms.TranslateDescription(PaymentTerms,LanguageCode);
      end;
    END;

    [External]
    PROCEDURE SetPurchaser@7(VAR SalespersonPurchaser@1000 : Record "Salesperson/Purchaser";Code@1001 : Code[20];VAR PurchaserText@1002 : Text[50]);
    BEGIN
      if Code = '' then begin
        SalespersonPurchaser.INIT;
        PurchaserText := '';
      end else begin
        SalespersonPurchaser.GET(Code);
        PurchaserText := PurchaserTxt;
      end;
    END;

    [External]
    PROCEDURE SetShipmentMethod@3(VAR ShipmentMethod@1000 : Record "Shipment Method";Code@1001 : Code[10];LanguageCode@1002 : Code[10]);
    BEGIN
      if Code = '' then
        ShipmentMethod.INIT
      else begin
        ShipmentMethod.GET(Code);
        ShipmentMethod.TranslateDescription(ShipmentMethod,LanguageCode);
      end;
    END;

    [External]
    PROCEDURE SetSalesPerson@5(VAR SalespersonPurchaser@1000 : Record "Salesperson/Purchaser";Code@1001 : Code[20];VAR SalesPersonText@1002 : Text[50]);
    BEGIN
      if Code = '' then begin
        SalespersonPurchaser.INIT;
        SalesPersonText := '';
      end else begin
        SalespersonPurchaser.GET(Code);
        SalesPersonText := SalespersonTxt;
      end;
    END;

    [External]
    PROCEDURE SetText@4(Condition@1000 : Boolean;Caption@1002 : Text[80]) : Text[80];
    BEGIN
      if Condition then
        exit(Caption);

      exit('');
    END;

    PROCEDURE SetSalesInvoiceLine@17(VAR SalesInvoiceLine@1000 : Record "Sales Invoice Line";VAR FormattedQuantity@1004 : Text;VAR FormattedUnitPrice@1003 : Text;VAR FormattedVATPercentage@1001 : Text);
    BEGIN
      SetSalesPurchaseLine(SalesInvoiceLine.Type = SalesInvoiceLine.Type::" ",
        SalesInvoiceLine.Quantity,
        SalesInvoiceLine."Unit Price",
        SalesInvoiceLine."VAT %",
        SalesInvoiceLine.GetCurrencyCode,
        FormattedQuantity,
        FormattedUnitPrice,
        FormattedVATPercentage);
    END;

    PROCEDURE SetSalesLine@18(VAR SalesLine@1000 : Record "Sales Line";VAR FormattedQuantity@1004 : Text;VAR FormattedUnitPrice@1003 : Text;VAR FormattedVATPercentage@1001 : Text);
    BEGIN
      SetSalesPurchaseLine(SalesLine.Type = SalesLine.Type::" ",
        SalesLine.Quantity,
        SalesLine."Unit Price",
        SalesLine."VAT %",
        SalesLine."Currency Code",
        FormattedQuantity,
        FormattedUnitPrice,
        FormattedVATPercentage);
    END;

    PROCEDURE SetSalesCrMemoLine@9(VAR SalesCrMemoLine@1000 : Record "Sales Cr.Memo Line";VAR FormattedQuantity@1004 : Text;VAR FormattedUnitPrice@1003 : Text;VAR FormattedVATPercentage@1001 : Text);
    BEGIN
      SetSalesPurchaseLine(SalesCrMemoLine.Type = SalesCrMemoLine.Type::" ",
        SalesCrMemoLine.Quantity,
        SalesCrMemoLine."Unit Price",
        SalesCrMemoLine."VAT %",
        SalesCrMemoLine.GetCurrencyCode,
        FormattedQuantity,
        FormattedUnitPrice,
        FormattedVATPercentage);
    END;

    PROCEDURE SetPurchaseLine@19(VAR PurchaseLine@1000 : Record "Purchase Line";VAR FormattedQuantity@1004 : Text;VAR FormattedDirectUnitCost@1003 : Text);
    VAR
      TempVatPct@1001 : Text;
    BEGIN
      SetSalesPurchaseLine(PurchaseLine.Type = PurchaseLine.Type::" ",
        PurchaseLine.Quantity,
        PurchaseLine."Direct Unit Cost",
        PurchaseLine."VAT %",
        PurchaseLine."Currency Code",
        FormattedQuantity,
        FormattedDirectUnitCost,
        TempVatPct);
    END;

    LOCAL PROCEDURE SetSalesPurchaseLine@12(CommentLine@1006 : Boolean;Quantity@1005 : Decimal;UnitPrice@1004 : Decimal;VATPercentage@1003 : Decimal;CurrencyCode@1007 : Code[10];VAR FormattedQuantity@1002 : Text;VAR FormattedUnitPrice@1001 : Text;VAR FormattedVATPercentage@1000 : Text);
    BEGIN
      if CommentLine then begin
        FormattedQuantity := '';
        FormattedUnitPrice := '';
        FormattedVATPercentage := '';
      end else begin
        FormattedQuantity := FORMAT(Quantity);
        FormattedUnitPrice := FORMAT(UnitPrice,0,AutoFormatManagement.AutoFormatTranslate(2,CurrencyCode));
        FormattedVATPercentage := FORMAT(VATPercentage);
      end;
    END;

    BEGIN
    END.
  }
}

