OBJECT Table 5377 Ext Txt ID Integration Record
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Ext Txt ID Integration Record;
  }
  FIELDS
  {
    { 1   ;   ;External ID         ;Text250       ;CaptionML=ENU=External ID }
    { 3   ;   ;Integration ID      ;GUID          ;TableRelation="Integration Record"."Integration ID";
                                                   CaptionML=ENU=Integration ID }
    { 4   ;   ;Last Synch. Modified On;DateTime   ;CaptionML=ENU=Last Synch. Modified On }
    { 5   ;   ;Last Synch. Ext Modified On;DateTime;
                                                   CaptionML=ENU=Last Synch. Ext Modified On }
    { 6   ;   ;Table ID            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Integration Record"."Table ID" WHERE ("Integration ID"=FIELD("Integration ID")));
                                                   CaptionML=ENU=Table ID }
  }
  KEYS
  {
    {    ;"External ID","Integration ID"          ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst '@@@="%1 = Record id";ENU=The integration record for entity %1 was not found.';
      RecordIdAlreadyMappedErr@1001 : TextConst '@@@=%1 ID of the record, %2 ID of the already mapped record;ENU=Cannot couple %1 to this external record, because the record is already coupled to key: %2 in external table.';
      CoupledRecordNotFoundErr@1002 : TextConst '@@@="%1 = the key of the external record, %2 is the NAV table that this key is linked with.";ENU=The coupling record for the key ''%1'' and table %2 was not found.';

    [External]
    PROCEDURE FindRecordIDFromID@3(SourceExternalID@1001 : Text[250];DestinationTableID@1004 : Integer;VAR DestinationRecordId@1002 : RecordID) : Boolean;
    VAR
      ExtTxtIDIntegrationRecord@1003 : Record "Ext Txt ID Integration Record";
      IntegrationRecord@1005 : Record "Integration Record";
    BEGIN
      if FindRowFromExternalID(SourceExternalID,DestinationTableID,ExtTxtIDIntegrationRecord) then
        if IntegrationRecord.FindByIntegrationId(ExtTxtIDIntegrationRecord."Integration ID") then begin
          DestinationRecordId := IntegrationRecord."Record ID";
          exit(true);
        end;

      exit(false);
    END;

    LOCAL PROCEDURE FindRowFromRecordID@10(SourceRecordID@1000 : RecordID;VAR ExtTxtIDIntegrationRecord@1001 : Record "Ext Txt ID Integration Record") : Boolean;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
    BEGIN
      if not IntegrationRecord.FindByRecordId(SourceRecordID) then
        exit(false);
      exit(FindRowFromIntegrationID(IntegrationRecord."Integration ID",ExtTxtIDIntegrationRecord));
    END;

    LOCAL PROCEDURE FindRowFromExternalID@11(ExternalID@1001 : Text[250];DestinationTableID@1003 : Integer;VAR ExtTxtIDIntegrationRecord@1000 : Record "Ext Txt ID Integration Record") : Boolean;
    BEGIN
      ExtTxtIDIntegrationRecord.SETRANGE("External ID",ExternalID);
      ExtTxtIDIntegrationRecord.SETFILTER("Table ID",FORMAT(DestinationTableID));
      exit(ExtTxtIDIntegrationRecord.FINDFIRST);
    END;

    [External]
    PROCEDURE CoupleExternalIDToRecordID@1(ExternalID@1000 : Text[250];RecordID@1001 : RecordID);
    VAR
      ExtTxtIDIntegrationRecord@1003 : Record "Ext Txt ID Integration Record";
      IntegrationRecord@1004 : Record "Integration Record";
      ExtTxtIDIntegrationRecord2@1006 : Record "Ext Txt ID Integration Record";
      ErrExternalID@1005 : Text[250];
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      // Find coupling between External ID and TableNo
      if not FindRowFromExternalID(ExternalID,RecordID.TABLENO,ExtTxtIDIntegrationRecord) then
        // Find rogue coupling beteen External ID and table 0
        if not FindRowFromExternalID(ExternalID,0,ExtTxtIDIntegrationRecord) then begin
          // Find other coupling to the record
          if ExtTxtIDIntegrationRecord2.FindIDFromRecordID(RecordID,ExternalID) then
            ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1),ExternalID);

          with ExtTxtIDIntegrationRecord do begin
            RESET;
            INIT;
            "External ID" := ExternalID;
            "Integration ID" := IntegrationRecord."Integration ID";
            INSERT(true);
          end;
          exit;
        end;

      // Update Integration ID
      if ExtTxtIDIntegrationRecord."Integration ID" <> IntegrationRecord."Integration ID" then begin
        if ExtTxtIDIntegrationRecord2.FindIDFromRecordID(RecordID,ErrExternalID) then
          ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));
        ExtTxtIDIntegrationRecord.RENAME(ExtTxtIDIntegrationRecord."External ID",IntegrationRecord."Integration ID");
      end;
    END;

    [External]
    PROCEDURE UpdateCoupledRecordForExternalId@15(OldExternalId@1000 : Text[250];NewExternalId@1004 : Text[250];TableNo@1002 : Integer);
    VAR
      ExtTxtIDIntegrationRecord@1003 : Record "Ext Txt ID Integration Record";
      ExtTxtIDIntegrationRecordNew@1001 : Record "Ext Txt ID Integration Record";
    BEGIN
      ExtTxtIDIntegrationRecord.SETRANGE("External ID",OldExternalId);
      ExtTxtIDIntegrationRecord.SETRANGE("Table ID",TableNo);
      if not ExtTxtIDIntegrationRecord.FINDFIRST then
        ERROR(CoupledRecordNotFoundErr,OldExternalId,TableNo);

      ExtTxtIDIntegrationRecordNew := ExtTxtIDIntegrationRecord;
      ExtTxtIDIntegrationRecordNew."External ID" := NewExternalId;
      ExtTxtIDIntegrationRecord.DELETEALL;
      ExtTxtIDIntegrationRecordNew.INSERT;
    END;

    [External]
    PROCEDURE SetLastSynchModifiedOns@8(SourceExternalID@1001 : Text[250];DestinationTableID@1005 : Integer;ExternalLastModifiedOn@1000 : DateTime;LastModifiedOn@1003 : DateTime);
    VAR
      ExtTxtIDIntegrationRecord@1004 : Record "Ext Txt ID Integration Record";
    BEGIN
      if not FindRowFromExternalID(SourceExternalID,DestinationTableID,ExtTxtIDIntegrationRecord) then
        exit;

      with ExtTxtIDIntegrationRecord do begin
        "Last Synch. Ext Modified On" := ExternalLastModifiedOn;
        "Last Synch. Modified On" := LastModifiedOn;
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE FindIDFromRecordID@2(SourceRecordID@1001 : RecordID;VAR DestinationTextID@1002 : Text[250]) : Boolean;
    VAR
      ExtTxtIDIntegrationRecord@1004 : Record "Ext Txt ID Integration Record";
    BEGIN
      if not FindRowFromRecordID(SourceRecordID,ExtTxtIDIntegrationRecord) then
        exit(false);

      DestinationTextID := ExtTxtIDIntegrationRecord."External ID";
      exit(true);
    END;

    LOCAL PROCEDURE FindRowFromIntegrationID@22(IntegrationID@1001 : GUID;VAR ExtTxtIDIntegrationRecord@1000 : Record "Ext Txt ID Integration Record") : Boolean;
    BEGIN
      ExtTxtIDIntegrationRecord.SETCURRENTKEY("Integration ID");
      ExtTxtIDIntegrationRecord.SETFILTER("Integration ID",IntegrationID);
      exit(ExtTxtIDIntegrationRecord.FINDFIRST);
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchonizedExternalRecord@6(ExternalID@1000 : Text[250];DestinationTableID@1004 : Integer;CurrentModifiedOn@1002 : DateTime) : Boolean;
    VAR
      ExtTxtIDIntegrationRecord@1003 : Record "Ext Txt ID Integration Record";
    BEGIN
      if not FindRowFromExternalID(ExternalID,DestinationTableID,ExtTxtIDIntegrationRecord) then
        exit(false);

      exit(ROUNDDATETIME(CurrentModifiedOn) > ROUNDDATETIME(ExtTxtIDIntegrationRecord."Last Synch. Ext Modified On"));
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchronizedRecord@7(RecordID@1001 : RecordID;CurrentModifiedOn@1000 : DateTime) : Boolean;
    VAR
      ExtTxtIDIntegrationRecord@1003 : Record "Ext Txt ID Integration Record";
    BEGIN
      if not FindRowFromRecordID(RecordID,ExtTxtIDIntegrationRecord) then
        exit(false);

      exit(ROUNDDATETIME(CurrentModifiedOn) > ROUNDDATETIME(ExtTxtIDIntegrationRecord."Last Synch. Modified On"));
    END;

    [External]
    PROCEDURE InsertIntegrationRecordIfNotPresent@9(RecordRef@1000 : RecordRef);
    VAR
      IntegrationRecord@1001 : Record "Integration Record";
    BEGIN
      IntegrationRecord.SETRANGE("Record ID",RecordRef.RECORDID);
      if not IntegrationRecord.FINDFIRST then
        InsertIntegrationRecord(RecordRef);
    END;

    [External]
    PROCEDURE InsertIntegrationRecord@4(RecordRef@1000 : RecordRef);
    VAR
      IntegrationRecord@1001 : Record "Integration Record";
    BEGIN
      IntegrationRecord.INIT;
      IntegrationRecord."Integration ID" := CREATEGUID;
      IntegrationRecord."Record ID" := RecordRef.RECORDID;
      IntegrationRecord."Table ID" := RecordRef.NUMBER;
      IntegrationRecord."Modified On" := CURRENTDATETIME;
      IntegrationRecord.INSERT;
    END;

    [External]
    PROCEDURE DeleteEmptyExternalIntegrationRecord@12(DestinationTableId@1001 : Integer);
    VAR
      ExtTxtIDIntegrationRecord@1002 : Record "Ext Txt ID Integration Record";
    BEGIN
      if FindRowFromExternalID('',DestinationTableId,ExtTxtIDIntegrationRecord) then
        ExtTxtIDIntegrationRecord.DELETE(true);
    END;

    BEGIN
    END.
  }
}

