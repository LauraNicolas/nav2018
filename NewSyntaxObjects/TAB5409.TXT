OBJECT Table 5409 Prod. Order Routing Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Prod. Order Capacity Need"=rimd;
    OnInsert=BEGIN
               TESTFIELD("Routing No.");
               if Status = Status::Finished then
                 ERROR(Text006,Status,TABLECAPTION);

               if "Next Operation No." = '' then
                 SetNextOperations(Rec);

               UpdateComponentsBin(0); // from trigger = insert
             END;

    OnModify=BEGIN
               if Status = Status::Finished then
                 ERROR(Text006,Status,TABLECAPTION);

               UpdateComponentsBin(1); // from trigger = modify
             END;

    OnDelete=VAR
               CapLedgEntry@1000 : Record "Capacity Ledger Entry";
             BEGIN
               if Status = Status::Finished then
                 ERROR(Text006,Status,TABLECAPTION);

               if Status = Status::Released then begin
                 CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
                 CapLedgEntry.SETRANGE("Order No.","Prod. Order No.");
                 CapLedgEntry.SETRANGE("Routing Reference No.","Routing Reference No.");
                 CapLedgEntry.SETRANGE("Routing No.","Routing No.");
                 CapLedgEntry.SETRANGE("Operation No.","Operation No.");
                 if not CapLedgEntry.ISEMPTY then
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"Operation No.",CapLedgEntry.TABLECAPTION);
               end;

               if SubcontractPurchOrderExist then
                 ERROR(
                   Text000,
                   Status,TABLECAPTION,"Operation No.",PurchLine.TABLECAPTION);

               DeleteRelations;

               UpdateComponentsBin(2); // from trigger = delete
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Prod. Order Routing Line;
    LookupPageID="Prod. Order Routing";
    DrillDownPageID="Prod. Order Routing";
  }
  FIELDS
  {
    { 1   ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No. }
    { 3   ;   ;Routing Reference No.;Integer      ;CaptionML=ENU=Routing Reference No.;
                                                   Editable=false }
    { 4   ;   ;Operation No.       ;Code10        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                GetLine;
                                                                "Starting Time" := ProdOrderLine."Starting Time";
                                                                "Ending Time" := ProdOrderLine."Ending Time";
                                                                "Starting Date" := ProdOrderLine."Starting Date";
                                                                "Ending Date" := ProdOrderLine."Ending Date";
                                                              END;

                                                   CaptionML=ENU=Operation No.;
                                                   NotBlank=true }
    { 5   ;   ;Next Operation No.  ;Code30        ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                                GetLine;
                                                              END;

                                                   CaptionML=ENU=Next Operation No. }
    { 6   ;   ;Previous Operation No.;Code30      ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Previous Operation No. }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';

                                                                ModifyCapNeedEntries;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Work Center,Machine Center;
                                                   OptionString="Work Center","Machine Center" }
    { 8   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("Work Center")) "Work Center"
                                                                 ELSE IF (Type=CONST("Machine Center")) "Machine Center";
                                                   OnValidate=BEGIN
                                                                if ("No." <> xRec."No.") and (xRec."No." <> '') then
                                                                  if SubcontractPurchOrderExist then
                                                                    ERROR(
                                                                      Text007,
                                                                      FIELDCAPTION("No."),PurchLine.TABLECAPTION,Status,TABLECAPTION,"Operation No.");

                                                                SetRecalcStatus;

                                                                if "No." = '' then
                                                                  exit;

                                                                case Type of
                                                                  Type::"Work Center":
                                                                    begin
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,false);
                                                                      WorkCenterTransferfields;
                                                                    end;
                                                                  Type::"Machine Center":
                                                                    begin
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,false);
                                                                      MachineCtrTransferfields;
                                                                    end;
                                                                end;
                                                                ModifyCapNeedEntries;

                                                                GetLine;
                                                                if ProdOrderLine."Routing Type" = ProdOrderLine."Routing Type"::Serial then
                                                                  CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=No. }
    { 9   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=false }
    { 10  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=ENU=Work Center Group Code;
                                                   Editable=false }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Setup Time          ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Setup Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 13  ;   ;Run Time            ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Run Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 14  ;   ;Wait Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Wait Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 15  ;   ;Move Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Move Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Fixed Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Fixed Scrap Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Lot Size            ;Decimal       ;CaptionML=ENU=Lot Size;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Scrap Factor %      ;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=ENU=Scrap Factor %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Setup Time Unit of Meas. Code }
    { 20  ;   ;Run Time Unit of Meas. Code;Code10 ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Run Time Unit of Meas. Code }
    { 21  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Wait Time Unit of Meas. Code }
    { 22  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Move Time Unit of Meas. Code }
    { 27  ;   ;Minimum Process Time;Decimal       ;CaptionML=ENU=Minimum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 28  ;   ;Maximum Process Time;Decimal       ;CaptionML=ENU=Maximum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 30  ;   ;Concurrent Capacities;Decimal      ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Concurrent Capacities;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 31  ;   ;Send-Ahead Quantity ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Send-Ahead Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   CaptionML=ENU=Routing Link Code;
                                                   Editable=false }
    { 35  ;   ;Standard Task Code  ;Code10        ;TableRelation="Standard Task";
                                                   OnValidate=VAR
                                                                StandardTask@1000 : Record "Standard Task";
                                                                StdTaskTool@1001 : Record "Standard Task Tool";
                                                                StdTaskPersonnel@1002 : Record "Standard Task Personnel";
                                                                StdTaskQltyMeasure@1003 : Record "Standard Task Quality Measure";
                                                                StdTaskComment@1004 : Record "Standard Task Description";
                                                              BEGIN
                                                                if "Standard Task Code" = '' then
                                                                  exit;

                                                                StandardTask.GET("Standard Task Code");
                                                                Description := StandardTask.Description;

                                                                DeleteRelations;

                                                                StdTaskTool.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskTool.FIND('-') then
                                                                  repeat
                                                                    ProdOrderRoutTool.Status := Status;
                                                                    ProdOrderRoutTool."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRoutTool."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRoutTool."Routing No." := "Routing No.";
                                                                    ProdOrderRoutTool."Operation No." := "Operation No.";
                                                                    ProdOrderRoutTool."Line No." := StdTaskTool."Line No.";
                                                                    ProdOrderRoutTool."No." := StdTaskTool."No.";
                                                                    ProdOrderRoutTool.Description := StdTaskTool.Description;
                                                                    ProdOrderRoutTool.INSERT;
                                                                  until StdTaskTool.NEXT = 0;

                                                                StdTaskPersonnel.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskPersonnel.FIND('-') then
                                                                  repeat
                                                                    ProdOrderRtngPersonnel.Status := Status;
                                                                    ProdOrderRtngPersonnel."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngPersonnel."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngPersonnel."Routing No." := "Routing No.";
                                                                    ProdOrderRtngPersonnel."Operation No." := "Operation No.";
                                                                    ProdOrderRtngPersonnel."Line No." := StdTaskPersonnel."Line No.";
                                                                    ProdOrderRtngPersonnel."No." := StdTaskPersonnel."No.";
                                                                    ProdOrderRtngPersonnel.Description := StdTaskPersonnel.Description;
                                                                    ProdOrderRtngPersonnel.INSERT;
                                                                  until StdTaskPersonnel.NEXT = 0;

                                                                StdTaskQltyMeasure.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskQltyMeasure.FIND('-') then
                                                                  repeat
                                                                    ProdOrderRtngQltyMeas.Status := Status;
                                                                    ProdOrderRtngQltyMeas."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngQltyMeas."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngQltyMeas."Routing No." := "Routing No.";
                                                                    ProdOrderRtngQltyMeas."Operation No." := "Operation No.";
                                                                    ProdOrderRtngQltyMeas."Line No." := StdTaskQltyMeasure."Line No.";
                                                                    ProdOrderRtngQltyMeas."Qlty Measure Code" := StdTaskQltyMeasure."Qlty Measure Code";
                                                                    ProdOrderRtngQltyMeas.Description := StdTaskQltyMeasure.Description;
                                                                    ProdOrderRtngQltyMeas."Min. Value" := StdTaskQltyMeasure."Min. Value";
                                                                    ProdOrderRtngQltyMeas."Max. Value" := StdTaskQltyMeasure."Max. Value";
                                                                    ProdOrderRtngQltyMeas."Mean Tolerance" := StdTaskQltyMeasure."Mean Tolerance";
                                                                    ProdOrderRtngQltyMeas.INSERT;
                                                                  until StdTaskQltyMeasure.NEXT = 0;

                                                                StdTaskComment.SETRANGE("Standard Task Code","Standard Task Code");
                                                                if StdTaskComment.FIND('-') then
                                                                  repeat
                                                                    ProdOrderRtngComment.Status := Status;
                                                                    ProdOrderRtngComment."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngComment."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngComment."Routing No." := "Routing No.";
                                                                    ProdOrderRtngComment."Operation No." := "Operation No.";
                                                                    ProdOrderRtngComment."Line No." := StdTaskComment."Line No.";
                                                                    ProdOrderRtngComment.Comment := StdTaskComment.Text;
                                                                    ProdOrderRtngComment.INSERT;
                                                                  until StdTaskComment.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Standard Task Code }
    { 40  ;   ;Unit Cost per       ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(
                                                                    ("Unit Cost per" - "Overhead Rate") /
                                                                    (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Unit Cost per;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 41  ;   ;Recalculate         ;Boolean       ;CaptionML=ENU=Recalculate }
    { 50  ;   ;Sequence No. (Forward);Integer     ;CaptionML=ENU=Sequence No. (Forward);
                                                   Editable=false }
    { 51  ;   ;Sequence No. (Backward);Integer    ;CaptionML=ENU=Sequence No. (Backward);
                                                   Editable=false }
    { 52  ;   ;Fixed Scrap Qty. (Accum.);Decimal  ;CaptionML=ENU=Fixed Scrap Qty. (Accum.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Scrap Factor % (Accumulated);Decimal;
                                                   CaptionML=ENU=Scrap Factor % (Accumulated);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 55  ;   ;Sequence No. (Actual);Integer      ;CaptionML=ENU=Sequence No. (Actual);
                                                   Editable=false }
    { 56  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   DecimalPlaces=2:5 }
    { 57  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                "Unit Cost per" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 58  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 71  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 72  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Backward);
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 73  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 74  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Simulated,Planned,"Firm Planned",Released,Finished }
    { 75  ;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order"."No." WHERE (Status=FIELD(Status));
                                                   CaptionML=ENU=Prod. Order No.;
                                                   NotBlank=true;
                                                   Editable=false }
    { 76  ;   ;Unit Cost Calculation;Option       ;CaptionML=ENU=Unit Cost Calculation;
                                                   OptionCaptionML=ENU=Time,Units;
                                                   OptionString=Time,Units }
    { 77  ;   ;Input Quantity      ;Decimal       ;CaptionML=ENU=Input Quantity;
                                                   DecimalPlaces=0:5 }
    { 78  ;   ;Critical Path       ;Boolean       ;CaptionML=ENU=Critical Path;
                                                   Editable=false }
    { 79  ;   ;Routing Status      ;Option        ;OnValidate=VAR
                                                                ProdOrderCapacityNeed@1000 : Record "Prod. Order Capacity Need";
                                                              BEGIN
                                                                if (xRec."Routing Status" = xRec."Routing Status"::Finished) and (xRec."Routing Status" <> "Routing Status") then
                                                                  ERROR(Text008,FIELDCAPTION("Routing Status"),xRec."Routing Status","Routing Status");

                                                                if ("Routing Status" = "Routing Status"::Finished) and (xRec."Routing Status" <> "Routing Status") then begin
                                                                  if not CONFIRM(Text009,false,FIELDCAPTION("Routing Status"),"Routing Status") then
                                                                    ERROR('');

                                                                  ProdOrderCapacityNeed.SETCURRENTKEY(
                                                                    Status,"Prod. Order No.","Requested Only","Routing No.","Routing Reference No.","Operation No.","Line No.");
                                                                  ProdOrderCapacityNeed.SETRANGE(Status,Status);
                                                                  ProdOrderCapacityNeed.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                  ProdOrderCapacityNeed.SETRANGE("Requested Only",false);
                                                                  ProdOrderCapacityNeed.SETRANGE("Routing No.","Routing No.");
                                                                  ProdOrderCapacityNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
                                                                  ProdOrderCapacityNeed.SETRANGE("Operation No.","Operation No.");
                                                                  ProdOrderCapacityNeed.MODIFYALL("Allocated Time",0);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Routing Status;
                                                   OptionCaptionML=ENU=" ,Planned,In Progress,Finished";
                                                   OptionString=" ",Planned,"In Progress",Finished }
    { 81  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=ENU=Flushing Method;
                                                   OptionCaptionML=ENU=Manual,Forward,Backward;
                                                   OptionString=Manual,Forward,Backward }
    { 90  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   CaptionML=ENU=Expected Operation Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 91  ;   ;Expected Capacity Need;Decimal     ;FieldClass=Normal;
                                                   CaptionML=ENU=Expected Capacity Need;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 96  ;   ;Expected Capacity Ovhd. Cost;Decimal;
                                                   CaptionML=ENU=Expected Capacity Ovhd. Cost;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 98  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 99  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
    { 100 ;   ;Schedule Manually   ;Boolean       ;CaptionML=ENU=Schedule Manually }
    { 101 ;   ;Location Code       ;Code10        ;AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 7301;   ;Open Shop Floor Bin Code;Code20    ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Open Shop Floor Bin Code;
                                                   Editable=false }
    { 7302;   ;To-Production Bin Code;Code20      ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=To-Production Bin Code;
                                                   Editable=false }
    { 7303;   ;From-Production Bin Code;Code20    ;AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=From-Production Bin Code;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.";
                                                   SumIndexFields="Expected Operation Cost Amt.","Expected Capacity Need","Expected Capacity Ovhd. Cost";
                                                   Clustered=true }
    {    ;"Prod. Order No.","Routing Reference No.",Status,"Routing No.","Operation No.";
                                                   MaintainSIFTIndex=false }
    {    ;Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Forward)" }
    {    ;Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Backward)" }
    {    ;Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Actual)" }
    {    ;"Work Center No."                       ;SumIndexFields="Expected Operation Cost Amt.";
                                                   MaintainSIFTIndex=false }
    {    ;Type,"No.","Starting Date"              ;SumIndexFields="Expected Operation Cost Amt.";
                                                   MaintainSIFTIndex=false }
    {    ;Status,"Work Center No."                 }
    {    ;"Prod. Order No.",Status,"Flushing Method" }
    {    ;"Starting Date","Starting Time"         ;MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    {    ;"Ending Date","Ending Time"             ;MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1 = Document status; %2 = Table Caption; %3 = Field Value; %4 = Table Caption";ENU=You cannot delete %1 %2 %3 because there is at least one %4 associated with it.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in previous operations';
      Text003@1003 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in next operations';
      WorkCenter@1006 : Record "Work Center";
      MachineCenter@1007 : Record "Machine Center";
      ProdOrderLine@1008 : Record "Prod. Order Line";
      ProdOrderRtngLine@1009 : Record "Prod. Order Routing Line";
      ProdOrderRoutTool@1010 : Record "Prod. Order Routing Tool";
      ProdOrderRtngPersonnel@1011 : Record "Prod. Order Routing Personnel";
      ProdOrderRtngQltyMeas@1012 : Record "Prod. Order Rtng Qlty Meas.";
      ProdOrderRtngComment@1013 : Record "Prod. Order Rtng Comment Line";
      GLSetup@1005 : Record "General Ledger Setup";
      ProdOrderCapNeed@1014 : Record "Prod. Order Capacity Need";
      PurchLine@1021 : Record "Purchase Line";
      CalcProdOrder@1015 : Codeunit "Calculate Prod. Order";
      ProdOrderRouteMgt@1016 : Codeunit "Prod. Order Route Management";
      Text004@1019 : TextConst 'ENU=Some routing lines are referring to the operation just deleted. The references are\in the fields %1 and %2.\\This may have to be corrected as a routing line referring to a non-existent\operation will lead to serious errors in capacity planning.\\Do you want to see a list of the lines in question?\(Access the columns Next Operation No. and Previous Operation No.)';
      Text005@1004 : TextConst 'ENU=Routing Lines referring to deleted Operation No. %1';
      Text006@1020 : TextConst 'ENU=A %1 %2 can not be inserted, modified, or deleted.';
      Direction@1018 : 'Forward,Backward';
      Text007@1022 : TextConst 'ENU=You cannot change %1, because there is at least one %2 associated with %3 %4 %5.';
      Text008@1023 : TextConst 'ENU=You cannot change the %1 from %2 to %3.';
      Text009@1024 : TextConst 'ENU=If you change the %1 to %2, then all related allocated capacity will be deleted, and you will not be able to change the %1 of the operation again.\\Are you sure that you want to continue?';
      SkipUpdateOfCompBinCodes@1017 : Boolean;

    [External]
    PROCEDURE Caption@12() : Text[100];
    VAR
      ProdOrder@1000 : Record "Production Order";
    BEGIN
      if GETFILTERS = '' then
        exit('');

      if not ProdOrder.GET(Status,"Prod. Order No.") then
        exit('');

      exit(
        STRSUBSTNO('%1 %2 %3',
          "Prod. Order No.",ProdOrder.Description,"Routing No."));
    END;

    LOCAL PROCEDURE GetLine@15();
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.FIND('-');
    END;

    LOCAL PROCEDURE DeleteRelations@3();
    BEGIN
      ProdOrderRoutTool.SETRANGE(Status,Status);
      ProdOrderRoutTool.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRoutTool.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRoutTool.SETRANGE("Routing No.","Routing No.");
      ProdOrderRoutTool.SETRANGE("Operation No.","Operation No.");
      ProdOrderRoutTool.DELETEALL;

      ProdOrderRtngPersonnel.SETRANGE(Status,Status);
      ProdOrderRtngPersonnel.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngPersonnel.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngPersonnel.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngPersonnel.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngPersonnel.DELETEALL;

      ProdOrderRtngQltyMeas.SETRANGE(Status,Status);
      ProdOrderRtngQltyMeas.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngQltyMeas.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngQltyMeas.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngQltyMeas.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngQltyMeas.DELETEALL;

      ProdOrderRtngComment.SETRANGE(Status,Status);
      ProdOrderRtngComment.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngComment.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngComment.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngComment.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngComment.DELETEALL;

      ProdOrderCapNeed.SETRANGE(Status,Status);
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderCapNeed.SETRANGE("Routing No.","Routing No.");
      ProdOrderCapNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
      ProdOrderCapNeed.DELETEALL;
    END;

    LOCAL PROCEDURE WorkCenterTransferfields@2();
    BEGIN
      "Work Center No." := WorkCenter."No.";
      "Work Center Group Code" := WorkCenter."Work Center Group Code";
      "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Run Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      Description := WorkCenter.Name;
      "Flushing Method" := WorkCenter."Flushing Method";
      "Unit Cost per" := WorkCenter."Unit Cost";
      "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
      "Indirect Cost %" := WorkCenter."Indirect Cost %";
      "Overhead Rate" := WorkCenter."Overhead Rate";
      "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
      FillDefaultLocationAndBins;
    END;

    LOCAL PROCEDURE MachineCtrTransferfields@1();
    BEGIN
      WorkCenter.GET(MachineCenter."Work Center No.");
      WorkCenterTransferfields;

      Description := MachineCenter.Name;
      "Setup Time" := MachineCenter."Setup Time";
      "Wait Time" := MachineCenter."Wait Time";
      "Move Time" := MachineCenter."Move Time";
      "Fixed Scrap Quantity" := MachineCenter."Fixed Scrap Quantity";
      "Scrap Factor %" := MachineCenter."Scrap %";
      "Minimum Process Time" := MachineCenter."Minimum Process Time";
      "Maximum Process Time" := MachineCenter."Maximum Process Time";
      "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
      if "Concurrent Capacities" = 0 then
        "Concurrent Capacities" := 1;
      "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
      "Setup Time Unit of Meas. Code" := MachineCenter."Setup Time Unit of Meas. Code";
      "Wait Time Unit of Meas. Code" := MachineCenter."Wait Time Unit of Meas. Code";
      "Move Time Unit of Meas. Code" := MachineCenter."Move Time Unit of Meas. Code";
      "Flushing Method" := MachineCenter."Flushing Method";
      "Unit Cost per" := MachineCenter."Unit Cost";
      "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
      "Indirect Cost %" := MachineCenter."Indirect Cost %";
      "Overhead Rate" := MachineCenter."Overhead Rate";
      FillDefaultLocationAndBins;
    END;

    [External]
    PROCEDURE FillDefaultLocationAndBins@8();
    BEGIN
      GetLine;
      "Location Code" := ProdOrderLine."Location Code";
      case Type of
        Type::"Work Center":
          begin
            if WorkCenter."No." <> "No." then
              WorkCenter.GET("No.");
            if WorkCenter."Location Code" = "Location Code" then begin
              "Open Shop Floor Bin Code" := WorkCenter."Open Shop Floor Bin Code";
              "To-Production Bin Code" := WorkCenter."To-Production Bin Code";
              "From-Production Bin Code" := WorkCenter."From-Production Bin Code";
            end;
          end;
        Type::"Machine Center":
          begin
            if MachineCenter."No." <> "No." then
              MachineCenter.GET("No.");
            if MachineCenter."Location Code" = "Location Code" then begin
              "Open Shop Floor Bin Code" := MachineCenter."Open Shop Floor Bin Code";
              "To-Production Bin Code" := MachineCenter."To-Production Bin Code";
              "From-Production Bin Code" := MachineCenter."From-Production Bin Code";
            end;
            if WorkCenter."No." <> MachineCenter."Work Center No." then
              WorkCenter.GET(MachineCenter."Work Center No.");
            if WorkCenter."Location Code" = "Location Code" then begin
              if "Open Shop Floor Bin Code" = '' then
                "Open Shop Floor Bin Code" := WorkCenter."Open Shop Floor Bin Code";
              if "To-Production Bin Code" = '' then
                "To-Production Bin Code" := WorkCenter."To-Production Bin Code";
              if "From-Production Bin Code" = '' then
                "From-Production Bin Code" := WorkCenter."From-Production Bin Code";
            end;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcStartingEndingDates@17(Direction1@1000 : 'Forward,Backward');
    VAR
      ReservationCheckDateConfl@1001 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      if "Routing Status" = "Routing Status"::Finished then
        FIELDERROR("Routing Status");

      MODIFY(true);

      ProdOrderRtngLine.GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");

      ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction1);
      ProdOrderRtngLine.GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
      ProdOrderRtngLine.SETCURRENTKEY(
        Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Actual)");
      CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction1,false);

      CalculateRoutingBack;
      CalculateRoutingForward;

      GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
      GetLine;
      ReservationCheckDateConfl.ProdOrderLineCheck(ProdOrderLine,true);
    END;

    [External]
    PROCEDURE SetRecalcStatus@5();
    BEGIN
      Recalculate := true;
    END;

    [External]
    PROCEDURE RunTimePer@7() : Decimal;
    BEGIN
      if "Lot Size" = 0 then
        "Lot Size" := 1;

      exit("Run Time" / "Lot Size");
    END;

    LOCAL PROCEDURE CalculateRoutingBack@10();
    VAR
      ProdOrderLine@1000 : Record "Prod. Order Line";
      ProdOrderRtngLine@1001 : Record "Prod. Order Routing Line";
    BEGIN
      if "Previous Operation No." <> '' then begin
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETFILTER("Operation No.","Previous Operation No.");
        ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

        if ProdOrderRtngLine.FIND('-') then
          repeat
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Sequence No. (Actual)");
            WorkCenter.GET(ProdOrderRtngLine."Work Center No.");
            case WorkCenter."Simulation Type" of
              WorkCenter."Simulation Type"::Moves:
                begin
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Backward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Backward,true);
                end;
              WorkCenter."Simulation Type"::"Moves When Necessary":
                if (ProdOrderRtngLine."Ending Date" > "Starting Date") or
                   ((ProdOrderRtngLine."Ending Date" = "Starting Date") and
                    (ProdOrderRtngLine."Ending Time" > "Starting Time"))
                then begin
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Backward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Backward,true);
                end;
              WorkCenter."Simulation Type"::Critical:
                begin
                  if (ProdOrderRtngLine."Ending Date" > "Starting Date") or
                     ((ProdOrderRtngLine."Ending Date" = "Starting Date") and
                      (ProdOrderRtngLine."Ending Time" > "Starting Time"))
                  then
                    ERROR(Text002);
                end;
            end;
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Operation No.");
          until ProdOrderRtngLine.NEXT = 0;
      end;

      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      if ProdOrderLine.FIND('-') then
        repeat
          CalcProdOrder.CalculateProdOrderDates(ProdOrderLine,true);
          AdjustComponents(ProdOrderLine);
        until ProdOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateRoutingForward@9();
    VAR
      ProdOrderLine@1000 : Record "Prod. Order Line";
      ProdOrderRtngLine@1001 : Record "Prod. Order Routing Line";
    BEGIN
      if "Next Operation No." <> '' then begin
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETFILTER("Operation No.","Next Operation No.");
        ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

        if ProdOrderRtngLine.FIND('-') then
          repeat
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Sequence No. (Actual)");
            WorkCenter.GET(ProdOrderRtngLine."Work Center No.");
            case WorkCenter."Simulation Type" of
              WorkCenter."Simulation Type"::Moves:
                begin
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Forward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Forward,true);
                end;
              WorkCenter."Simulation Type"::"Moves When Necessary":
                if (ProdOrderRtngLine."Starting Date" < "Ending Date") or
                   ((ProdOrderRtngLine."Starting Date" = "Ending Date") and
                    (ProdOrderRtngLine."Starting Time" < "Ending Time"))
                then begin
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Forward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Forward,true);
                end;
              WorkCenter."Simulation Type"::Critical:
                begin
                  if (ProdOrderRtngLine."Starting Date" < "Ending Date") or
                     ((ProdOrderRtngLine."Starting Date" = "Ending Date") and
                      (ProdOrderRtngLine."Starting Time" < "Ending Time"))
                  then
                    ERROR(Text003);
                end;
            end;
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Operation No.");
          until ProdOrderRtngLine.NEXT = 0;
      end;

      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      if ProdOrderLine.FIND('-') then
        repeat
          CalcProdOrder.CalculateProdOrderDates(ProdOrderLine,true);
          AdjustComponents(ProdOrderLine);
        until ProdOrderLine.NEXT = 0;
      CalcProdOrder.CalculateComponents;
    END;

    LOCAL PROCEDURE ModifyCapNeedEntries@13();
    BEGIN
      ProdOrderCapNeed.SETRANGE(Status,Status);
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderCapNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderCapNeed.SETRANGE("Routing No.","Routing No.");
      ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
      ProdOrderCapNeed.SETRANGE("Requested Only",false);
      if ProdOrderCapNeed.FIND('-') then
        repeat
          ProdOrderCapNeed."No." := "No.";
          ProdOrderCapNeed."Work Center No." := "Work Center No.";
          ProdOrderCapNeed."Work Center Group Code" := "Work Center Group Code";
          ProdOrderCapNeed.MODIFY;
        until ProdOrderCapNeed.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustComponents@14(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");

      if ProdOrderComp.FIND('-') then
        repeat
          ProdOrderComp.VALIDATE("Routing Link Code");
          ProdOrderComp.MODIFY;
        until ProdOrderComp.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateDatetime@11();
    BEGIN
      if ("Starting Date" <> 0D) and ("Starting Time" <> 000000T) then
        "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time")
      else
        "Starting Date-Time" := 0DT;

      if ("Ending Date" <> 0D) and ("Ending Time" <> 000000T) then
        "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
      else
        "Ending Date-Time" := 0DT;
    END;

    [External]
    PROCEDURE CheckPreviousAndNext@18();
    VAR
      ProdOrderRtngLine@1001 : Record "Prod. Order Routing Line";
      TempDeletedProdOrderRtngLine@1002 : TEMPORARY Record "Prod. Order Routing Line";
      TempRemainingProdOrderRtngLine@1003 : TEMPORARY Record "Prod. Order Routing Line";
      ProdOrderRoutingForm@1006 : Page "Prod. Order Routing";
      ErrorOnNext@1004 : Boolean;
      ErrorOnPrevious@1005 : Boolean;
    BEGIN
      TempDeletedProdOrderRtngLine := Rec;
      TempDeletedProdOrderRtngLine.INSERT;

      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngLine.SETFILTER("Operation No.",'<>%1',"Operation No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      if ProdOrderRtngLine.FIND('-') then
        repeat
          if ProdOrderRtngLine."Next Operation No." <> '' then begin
            TempDeletedProdOrderRtngLine.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            ErrorOnNext := TempDeletedProdOrderRtngLine.FINDFIRST;
          end else
            ErrorOnNext := false;

          if ProdOrderRtngLine."Previous Operation No." <> '' then begin
            TempDeletedProdOrderRtngLine.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
            ErrorOnPrevious := TempDeletedProdOrderRtngLine.FINDFIRST;
          end else
            ErrorOnPrevious := false;

          if ErrorOnNext or ErrorOnPrevious then begin
            TempRemainingProdOrderRtngLine := ProdOrderRtngLine;
            TempRemainingProdOrderRtngLine.INSERT;
          end
        until ProdOrderRtngLine.NEXT = 0;

      if TempRemainingProdOrderRtngLine.FIND('-') then begin
        COMMIT;
        if not CONFIRM(
             STRSUBSTNO(Text004,FIELDCAPTION("Next Operation No."),FIELDCAPTION("Previous Operation No.")),
             true)
        then
          exit;
        ProdOrderRoutingForm.Initialize(STRSUBSTNO(Text005,"Operation No."));
        repeat
          TempRemainingProdOrderRtngLine.MARK(true);
        until TempRemainingProdOrderRtngLine.NEXT = 0;
        TempRemainingProdOrderRtngLine.MARKEDONLY(true);
        ProdOrderRoutingForm.SETTABLEVIEW(TempRemainingProdOrderRtngLine);
        ProdOrderRoutingForm.RUNMODAL;
      end;
    END;

    [External]
    PROCEDURE SetNextOperations@4(VAR RtngLine@1001 : Record "Prod. Order Routing Line");
    VAR
      RtngLine2@1003 : Record "Prod. Order Routing Line";
    BEGIN
      RtngLine2.SETRANGE(Status,RtngLine.Status);
      RtngLine2.SETRANGE("Prod. Order No.",RtngLine."Prod. Order No.");
      RtngLine2.SETRANGE("Routing Reference No.",RtngLine."Routing Reference No.");
      RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
      RtngLine2.SETFILTER("Operation No.",'>%1',RtngLine."Operation No.");

      if RtngLine2.FINDFIRST then
        RtngLine."Next Operation No." := RtngLine2."Operation No."
      else begin
        RtngLine2.SETFILTER("Operation No.",'');
        RtngLine2.SETRANGE("Next Operation No.",'');
        if RtngLine2.FINDFIRST then begin
          RtngLine2."Next Operation No." := RtngLine."Operation No.";
          RtngLine2.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE SubcontractPurchOrderExist@6() : Boolean;
    BEGIN
      if Status <> Status::Released then
        exit(false);

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      if ProdOrderLine.FIND('-') then
        repeat
          PurchLine.SETCURRENTKEY(
            "Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
          PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
          PurchLine.SETRANGE(Type,PurchLine.Type::Item);
          PurchLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          PurchLine.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
          PurchLine.SETRANGE("Operation No.","Operation No.");
          if not PurchLine.ISEMPTY then
            exit(true);
        until ProdOrderLine.NEXT = 0;

      exit(false);
    END;

    [External]
    PROCEDURE UpdateComponentsBin@16(FromTrigger@1000 : 'Insert,Modify,Delete');
    VAR
      TempProdOrderRtngLine@1001 : TEMPORARY Record "Prod. Order Routing Line";
    BEGIN
      if SkipUpdateOfCompBinCodes then
        exit;

      if not UpdateOfComponentsBinRequired(FromTrigger) then
        exit;

      PopulateNewRoutingLineSet(TempProdOrderRtngLine,FromTrigger);
      ProdOrderRouteMgt.UpdateComponentsBin(TempProdOrderRtngLine,false);
    END;

    LOCAL PROCEDURE UpdateOfComponentsBinRequired@19(FromTrigger@1000 : 'Insert,Modify,Delete') : Boolean;
    BEGIN
      if ("No." = '') and (xRec."No." = "No.") then // bin codes are and were empty
        exit(false);

      case FromTrigger of
        FromTrigger::Insert,FromTrigger::Delete:
          exit(("Previous Operation No." = '') or ("Routing Link Code" <> ''));
        FromTrigger::Modify:
          exit(
            ((xRec."Previous Operation No." = '') and ("Previous Operation No." <> '')) or
            ((xRec."Previous Operation No." <> '') and ("Previous Operation No." = '')) or
            (xRec."Routing Link Code" <> "Routing Link Code") or
            ((("Previous Operation No." = '') or ("Routing Link Code" <> '')) and
             ((xRec."To-Production Bin Code" <> "To-Production Bin Code") or
              (xRec."Open Shop Floor Bin Code" <> "Open Shop Floor Bin Code"))));
      end;
    END;

    LOCAL PROCEDURE PopulateNewRoutingLineSet@20(VAR ProdOrderRtngLineTmp@1000 : Record "Prod. Order Routing Line";FromTrigger@1001 : 'Insert,Modify,Delete');
    VAR
      ProdOrderRtngLine2@1002 : Record "Prod. Order Routing Line";
    BEGIN
      // copy existing routings for this prod. order to temporary table
      ProdOrderRtngLineTmp.DELETEALL;
      ProdOrderRtngLine2.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
      ProdOrderRtngLine2.SETRANGE(Status,Status);
      ProdOrderRtngLine2.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine2.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngLine2.SETRANGE("Routing No.","Routing No.");
      if ProdOrderRtngLine2.FINDSET(false) then
        repeat
          ProdOrderRtngLineTmp := ProdOrderRtngLine2;
          ProdOrderRtngLineTmp.INSERT;
        until ProdOrderRtngLine2.NEXT = 0;

      // update the recordset with the current change
      ProdOrderRtngLineTmp := Rec;
      case FromTrigger of
        FromTrigger::Insert:
          ProdOrderRtngLineTmp.INSERT;
        FromTrigger::Modify:
          ProdOrderRtngLineTmp.MODIFY;
        FromTrigger::Delete:
          ProdOrderRtngLineTmp.DELETE;
      end;
    END;

    [External]
    PROCEDURE SetSkipUpdateOfCompBinCodes@21(Setting@1000 : Boolean);
    BEGIN
      SkipUpdateOfCompBinCodes := Setting;
    END;

    BEGIN
    END.
  }
}

