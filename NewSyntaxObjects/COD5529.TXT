OBJECT Codeunit 5529 Purch. Inv. Aggregator
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Purch. Inv. Header"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GraphMgtGeneralTools@1000 : Codeunit "Graph Mgt - General Tools";
      DocumentIDNotSpecifiedErr@1008 : TextConst '@@@={Locked};ENU=You must specify a document id to get the lines.';
      DocumentDoesNotExistErr@1007 : TextConst '@@@={Locked};ENU=No document with the specified ID exists.';
      MultipleDocumentsFoundForIdErr@1006 : TextConst '@@@={Locked};ENU=Multiple documents have been found for the specified criteria.';
      CannotModifyPostedInvioceErr@1005 : TextConst '@@@={Locked};ENU=The invoice has been posted and can no longer be modified.';
      CannotInsertALineThatAlreadyExistsErr@1004 : TextConst '@@@={Locked};ENU=You cannot insert a line with a duplicate sequence number.';
      CannotModifyALineThatDoesntExistErr@1003 : TextConst '@@@={Locked};ENU=You cannot modify a line that does not exist.';
      CannotInsertPostedInvoiceErr@1002 : TextConst '@@@={Locked};ENU=Invoices created through the API must be in Draft state.';
      CanOnlySetUOMForTypeItemErr@1001 : TextConst '@@@={Locked};ENU=Unit of Measure can be set only for lines with type Item.';

    [EventSubscriber(Table,38,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertPurchaseHeader@2(VAR Rec@1000 : Record "Purchase Header";RunTrigger@1001 : Boolean);
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseHeader(Rec);
    END;

    [EventSubscriber(Table,38,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyPurchaseHeader@3(VAR Rec@1000 : Record "Purchase Header";VAR xRec@1001 : Record "Purchase Header";RunTrigger@1002 : Boolean);
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseHeader(Rec);
    END;

    [EventSubscriber(Table,38,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeletePurchaseHeader@5(VAR Rec@1000 : Record "Purchase Header";RunTrigger@1001 : Boolean);
    VAR
      PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      TransferIntegrationRecordID(Rec);

      if not PurchInvEntityAggregate.GET(Rec."No.",false) then
        exit;
      PurchInvEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,66,OnAfterResetRecalculateInvoiceDisc)]
    LOCAL PROCEDURE OnAfterResetRecalculateInvoiceDisc@34(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      if not CheckValidRecord(PurchaseHeader) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseHeader(PurchaseHeader);
    END;

    [EventSubscriber(Table,39,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertPurchaseLine@71(VAR Rec@1000 : Record "Purchase Line";RunTrigger@1001 : Boolean);
    BEGIN
      if not CheckValidLineRecord(Rec) then
        exit;

      ModifyTotalsPurchaseLine(Rec);
    END;

    [EventSubscriber(Table,39,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyPurchaseLine@72(VAR Rec@1000 : Record "Purchase Line";VAR xRec@1001 : Record "Purchase Line";RunTrigger@1002 : Boolean);
    BEGIN
      if not CheckValidLineRecord(Rec) then
        exit;

      ModifyTotalsPurchaseLine(Rec);
    END;

    [EventSubscriber(Table,39,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeletePurchaseLine@73(VAR Rec@1000 : Record "Purchase Line";RunTrigger@1001 : Boolean);
    VAR
      PurchaseLine@1003 : Record "Purchase Line";
    BEGIN
      PurchaseLine.SETRANGE("Document No.",Rec."Document No.");
      PurchaseLine.SETRANGE("Document Type",Rec."Document Type");
      PurchaseLine.SETRANGE("Recalculate Invoice Disc.",true);

      if PurchaseLine.FINDFIRST then begin
        ModifyTotalsPurchaseLine(PurchaseLine);
        exit;
      end;

      PurchaseLine.SETRANGE("Recalculate Invoice Disc.");

      if not PurchaseLine.FINDFIRST then
        BlankTotals(Rec."Document No.",false);
    END;

    [EventSubscriber(Table,122,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertPurchaseInvoiceHeader@20(VAR Rec@1000 : Record "Purch. Inv. Header";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,122,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyPurchaseInvoiceHeader@21(VAR Rec@1000 : Record "Purch. Inv. Header";VAR xRec@1001 : Record "Purch. Inv. Header";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,122,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenamePurchaseInvoiceHeader@22(VAR Rec@1000 : Record "Purch. Inv. Header";VAR xRec@1001 : Record "Purch. Inv. Header";RunTrigger@1002 : Boolean);
    VAR
      PurchInvEntityAggregate@1003 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if not PurchInvEntityAggregate.GET(xRec."No.",true) then
        exit;

      PurchInvEntityAggregate.SetIsRenameAllowed(true);
      PurchInvEntityAggregate.RENAME(Rec."No.",true);
    END;

    [EventSubscriber(Table,122,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeletePurchaseInvoiceHeader@23(VAR Rec@1000 : Record "Purch. Inv. Header";RunTrigger@1001 : Boolean);
    VAR
      PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if not PurchInvEntityAggregate.GET(Rec."No.",true) then
        exit;

      PurchInvEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,70,OnAfterCalcPurchaseDiscount)]
    LOCAL PROCEDURE OnAfterCalculatePurchaseDiscountOnPurchaseHeader@36(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      if not CheckValidRecord(PurchaseHeader) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromPurchaseHeader(PurchaseHeader);
    END;

    [EventSubscriber(Table,25,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertVendorLedgerEntry@11(VAR Rec@1000 : Record "Vendor Ledger Entry";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromVendLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,25,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyVendorLedgerEntry@13(VAR Rec@1000 : Record "Vendor Ledger Entry";VAR xRec@1001 : Record "Vendor Ledger Entry";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromVendLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,25,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameVendorLedgerEntry@14(VAR Rec@1000 : Record "Vendor Ledger Entry";VAR xRec@1001 : Record "Vendor Ledger Entry";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromVendLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,25,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteVendorLedgerEntry@18(VAR Rec@1000 : Record "Vendor Ledger Entry";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromVendLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCancelledDocument@29(VAR Rec@1000 : Record "Cancelled Document";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCancelledDocument@28(VAR Rec@1000 : Record "Cancelled Document";VAR xRec@1001 : Record "Cancelled Document";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCancelledDocument@27(VAR Rec@1000 : Record "Cancelled Document";VAR xRec@1001 : Record "Cancelled Document";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(xRec);
      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCancelledDocument@26(VAR Rec@1000 : Record "Cancelled Document";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    PROCEDURE PropagateOnInsert@15(VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate";VAR TempFieldBuffer@1003 : TEMPORARY Record "Field Buffer");
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      TargetRecordRef@1004 : RecordRef;
      DocTypeFieldRef@1006 : FieldRef;
      NoFieldRef@1007 : FieldRef;
    BEGIN
      if PurchInvEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if PurchInvEntityAggregate.Posted then
        ERROR(CannotInsertPostedInvoiceErr);

      TargetRecordRef.OPEN(DATABASE::"Purchase Header");

      DocTypeFieldRef := TargetRecordRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      DocTypeFieldRef.VALUE(PurchaseHeader."Document Type"::Invoice);

      NoFieldRef := TargetRecordRef.FIELD(PurchaseHeader.FIELDNO("No."));

      TransferFieldsWithValidate(TempFieldBuffer,PurchInvEntityAggregate,TargetRecordRef);

      TargetRecordRef.INSERT(true);

      PurchInvEntityAggregate."No." := NoFieldRef.VALUE;
      PurchInvEntityAggregate.FIND;
    END;

    PROCEDURE PropagateOnModify@16(VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate";VAR TempFieldBuffer@1004 : TEMPORARY Record "Field Buffer");
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      TargetRecordRef@1005 : RecordRef;
      Exists@1003 : Boolean;
    BEGIN
      if PurchInvEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if PurchInvEntityAggregate.Posted then
        ERROR(CannotModifyPostedInvioceErr);

      Exists := PurchaseHeader.GET(PurchaseHeader."Document Type"::Invoice,PurchInvEntityAggregate."No.");
      if Exists then
        TargetRecordRef.GETTABLE(PurchaseHeader)
      else
        TargetRecordRef.OPEN(DATABASE::"Purchase Header");

      TransferFieldsWithValidate(TempFieldBuffer,PurchInvEntityAggregate,TargetRecordRef);

      if Exists then
        TargetRecordRef.MODIFY(true)
      else
        TargetRecordRef.INSERT(true);
    END;

    PROCEDURE PropagateOnDelete@17(VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchInvHeader@1001 : Record "Purch. Inv. Header";
      PurchaseHeader@1002 : Record "Purchase Header";
    BEGIN
      if PurchInvEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if PurchInvEntityAggregate.Posted then begin
        PurchInvHeader.GET(PurchInvEntityAggregate."No.");
        if PurchInvHeader."No. Printed" = 0 then
          PurchInvHeader."No. Printed" := 1;
        PurchInvHeader.DELETE(true);
      end else begin
        PurchaseHeader.GET(PurchaseHeader."Document Type"::Invoice,PurchInvEntityAggregate."No.");
        PurchaseHeader.DELETE(true);
      end;
    END;

    PROCEDURE UpdateAggregateTableRecords@35();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      PurchInvHeader@1001 : Record "Purch. Inv. Header";
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Invoice);
      if PurchaseHeader.FINDSET then
        repeat
          InsertOrModifyFromPurchaseHeader(PurchaseHeader);
        until PurchaseHeader.NEXT = 0;

      if PurchInvHeader.FINDSET then
        repeat
          InsertOrModifyFromPurchaseInvoiceHeader(PurchInvHeader);
        until PurchInvHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertOrModifyFromPurchaseHeader@39(VAR PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
      RecordExists@1001 : Boolean;
    BEGIN
      PurchInvEntityAggregate.LOCKTABLE;
      RecordExists := PurchInvEntityAggregate.GET(PurchaseHeader."No.",false);

      PurchInvEntityAggregate.TRANSFERFIELDS(PurchaseHeader,true);
      PurchInvEntityAggregate.Posted := false;
      SetStatusOptionFromPurchaseHeader(PurchaseHeader,PurchInvEntityAggregate);
      AssignTotalsFromPurchaseHeader(PurchaseHeader,PurchInvEntityAggregate);
      PurchInvEntityAggregate.UpdateReferencedRecordIds;

      if RecordExists then
        PurchInvEntityAggregate.MODIFY(true)
      else
        PurchInvEntityAggregate.INSERT(true);
    END;

    LOCAL PROCEDURE InsertOrModifyFromPurchaseInvoiceHeader@42(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
      RecordExists@1001 : Boolean;
    BEGIN
      PurchInvEntityAggregate.LOCKTABLE;
      RecordExists := PurchInvEntityAggregate.GET(PurchInvHeader."No.",true);
      PurchInvEntityAggregate.TRANSFERFIELDS(PurchInvHeader,true);
      PurchInvEntityAggregate.Posted := true;
      SetStatusOptionFromPurchaseInvoiceHeader(PurchInvHeader,PurchInvEntityAggregate);
      AssignTotalsFromPurchaseInvoiceHeader(PurchInvHeader,PurchInvEntityAggregate);
      PurchInvEntityAggregate.UpdateReferencedRecordIds;

      if RecordExists then
        PurchInvEntityAggregate.MODIFY(true)
      else
        PurchInvEntityAggregate.INSERT(true);
    END;

    LOCAL PROCEDURE SetStatusOptionFromPurchaseInvoiceHeader@9(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate");
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      PurchInvHeader.CALCFIELDS(Cancelled,Closed,Corrective);
      if PurchInvHeader.Cancelled then begin
        PurchInvEntityAggregate.Status := PurchInvEntityAggregate.Status::Canceled;
        exit;
      end;

      if PurchInvHeader.Corrective then begin
        PurchInvEntityAggregate.Status := PurchInvEntityAggregate.Status::Corrective;
        exit;
      end;

      if PurchInvHeader.Closed then begin
        PurchInvEntityAggregate.Status := PurchInvEntityAggregate.Status::Paid;
        exit;
      end;

      PurchInvEntityAggregate.Status := PurchInvEntityAggregate.Status::Open;
    END;

    LOCAL PROCEDURE SetStatusOptionFromPurchaseHeader@47(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate");
    BEGIN
      if (not GraphMgtGeneralTools.IsApiEnabled) and (not PurchaseHeader.ISTEMPORARY) then
        exit;

      PurchInvEntityAggregate.Status := PurchInvEntityAggregate.Status::Draft;
    END;

    LOCAL PROCEDURE SetStatusOptionFromVendLedgerEntry@19(VAR VendorLedgerEntry@1000 : Record "Vendor Ledger Entry");
    VAR
      PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      PurchInvEntityAggregate.SETRANGE("Vendor Ledger Entry No.",VendorLedgerEntry."Entry No.");
      PurchInvEntityAggregate.SETRANGE(Posted,true);

      if not PurchInvEntityAggregate.FINDSET(true) then
        exit;

      repeat
        UpdateStatusIfChanged(PurchInvEntityAggregate);
      until PurchInvEntityAggregate.NEXT = 0;
    END;

    LOCAL PROCEDURE SetStatusOptionFromCancelledDocument@30(VAR CancelledDocument@1000 : Record "Cancelled Document");
    VAR
      PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      case CancelledDocument."Source ID" of
        DATABASE::"Purch. Inv. Header":
          if not PurchInvEntityAggregate.GET(CancelledDocument."Cancelled Doc. No.",true) then
            exit;
        DATABASE::"Purch. Cr. Memo Hdr.":
          if not PurchInvEntityAggregate.GET(CancelledDocument."Cancelled By Doc. No.",true) then
            exit;
        else
          exit;
      end;

      UpdateStatusIfChanged(PurchInvEntityAggregate);
    END;

    PROCEDURE UpdateUnitOfMeasure@43(VAR Item@1004 : Record Item;JSONUnitOfMeasureTxt@1001 : Text);
    VAR
      TempFieldSet@1000 : TEMPORARY Record Field;
      GraphCollectionMgtItem@1003 : Codeunit "Graph Collection Mgt - Item";
      ItemModified@1005 : Boolean;
    BEGIN
      GraphCollectionMgtItem.UpdateOrCreateItemUnitOfMeasureFromSalesDocument(JSONUnitOfMeasureTxt,Item,TempFieldSet,ItemModified);

      if ItemModified then
        Item.MODIFY(true);
    END;

    LOCAL PROCEDURE UpdateStatusIfChanged@33(VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchInvHeader@1001 : Record "Purch. Inv. Header";
      CurrentStatus@1002 : Option;
    BEGIN
      PurchInvHeader.GET(PurchInvEntityAggregate."No.");
      CurrentStatus := PurchInvEntityAggregate.Status;

      SetStatusOptionFromPurchaseInvoiceHeader(PurchInvHeader,PurchInvEntityAggregate);
      if CurrentStatus <> PurchInvEntityAggregate.Status then
        PurchInvEntityAggregate.MODIFY(true);
    END;

    LOCAL PROCEDURE AssignTotalsFromPurchaseHeader@58(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchaseLine@1006 : Record "Purchase Line";
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");

      if not PurchaseLine.FINDFIRST then begin
        BlankTotals(PurchaseLine."Document No.",false);
        exit;
      end;

      AssignTotalsFromPurchaseLine(PurchaseLine,PurchInvEntityAggregate,PurchaseHeader);
    END;

    LOCAL PROCEDURE AssignTotalsFromPurchaseInvoiceHeader@69(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchInvLine@1006 : Record "Purch. Inv. Line";
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");

      if not PurchInvLine.FINDFIRST then begin
        BlankTotals(PurchInvLine."Document No.",true);
        exit;
      end;

      AssignTotalsFromPurchaseInvoiceLine(PurchInvLine,PurchInvEntityAggregate);
    END;

    LOCAL PROCEDURE AssignTotalsFromPurchaseLine@76(VAR PurchaseLine@1000 : Record "Purchase Line";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";VAR PurchaseHeader@1002 : Record "Purchase Header");
    VAR
      TotalPurchaseLine@1003 : Record "Purchase Line";
      DocumentTotals@1004 : Codeunit "Document Totals";
      VATAmount@1005 : Decimal;
    BEGIN
      if PurchaseLine."VAT Calculation Type" = PurchaseLine."VAT Calculation Type"::"Sales Tax" then begin
        PurchInvEntityAggregate."Discount Applied Before Tax" := true;
        PurchInvEntityAggregate."Prices Including VAT" := false;
      end else
        PurchInvEntityAggregate."Discount Applied Before Tax" := not PurchaseHeader."Prices Including VAT";

      DocumentTotals.CalculatePurchaseTotals(TotalPurchaseLine,VATAmount,PurchaseLine);

      PurchInvEntityAggregate."Invoice Discount Amount" := TotalPurchaseLine."Inv. Discount Amount";
      PurchInvEntityAggregate.Amount := TotalPurchaseLine.Amount;
      PurchInvEntityAggregate."Total Tax Amount" := VATAmount;
      PurchInvEntityAggregate."Amount Including VAT" := TotalPurchaseLine."Amount Including VAT";
    END;

    LOCAL PROCEDURE AssignTotalsFromPurchaseInvoiceLine@75(VAR PurchInvLine@1000 : Record "Purch. Inv. Line";VAR PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchInvHeader@1003 : Record "Purch. Inv. Header";
      TotalPurchInvHeader@1006 : Record "Purch. Inv. Header";
      DocumentTotals@1004 : Codeunit "Document Totals";
      VATAmount@1002 : Decimal;
    BEGIN
      if PurchInvLine."VAT Calculation Type" = PurchInvLine."VAT Calculation Type"::"Sales Tax" then
        PurchInvEntityAggregate."Discount Applied Before Tax" := true
      else begin
        PurchInvHeader.GET(PurchInvLine."Document No.");
        PurchInvEntityAggregate."Discount Applied Before Tax" := not PurchInvHeader."Prices Including VAT";
      end;

      DocumentTotals.CalculatePostedPurchInvoiceTotals(TotalPurchInvHeader,VATAmount,PurchInvLine);

      PurchInvEntityAggregate."Invoice Discount Amount" := TotalPurchInvHeader."Invoice Discount Amount";
      PurchInvEntityAggregate.Amount := TotalPurchInvHeader.Amount;
      PurchInvEntityAggregate."Total Tax Amount" := VATAmount;
      PurchInvEntityAggregate."Amount Including VAT" := TotalPurchInvHeader."Amount Including VAT";
    END;

    LOCAL PROCEDURE BlankTotals@25(DocumentNo@1000 : Code[20];Posted@1001 : Boolean);
    VAR
      PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if not PurchInvEntityAggregate.GET(DocumentNo,Posted) then
        exit;

      PurchInvEntityAggregate."Invoice Discount Amount" := 0;
      PurchInvEntityAggregate."Total Tax Amount" := 0;

      PurchInvEntityAggregate.Amount := 0;
      PurchInvEntityAggregate."Amount Including VAT" := 0;
      PurchInvEntityAggregate.MODIFY;
    END;

    LOCAL PROCEDURE CheckValidRecord@8(VAR PurchaseHeader@1000 : Record "Purchase Header") : Boolean;
    BEGIN
      if PurchaseHeader.ISTEMPORARY then
        exit(false);

      if PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE ModifyTotalsPurchaseLine@12(VAR PurchaseLine@1000 : Record "Purchase Line");
    VAR
      PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";
      PurchaseHeader@1003 : Record "Purchase Header";
    BEGIN
      if PurchaseLine.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if PurchaseLine."Document Type" <> PurchaseLine."Document Type"::Invoice then
        exit;

      if not PurchInvEntityAggregate.GET(PurchaseLine."Document No.",false) then
        exit;

      if not PurchaseLine."Recalculate Invoice Disc." then
        exit;

      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      AssignTotalsFromPurchaseLine(PurchaseLine,PurchInvEntityAggregate,PurchaseHeader);
      PurchInvEntityAggregate.MODIFY(true);
    END;

    LOCAL PROCEDURE TransferPurchaseInvoiceLineAggregateToPurchaseLine@37(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate";VAR PurchaseLine@1001 : Record "Purchase Line";VAR TempFieldBuffer@1002 : TEMPORARY Record "Field Buffer");
    VAR
      PurchaseLineRecordRef@1003 : RecordRef;
    BEGIN
      PurchaseLine."Document Type" := PurchaseLine."Document Type"::Invoice;
      PurchaseLineRecordRef.GETTABLE(PurchaseLine);

      TransferFieldsWithValidate(TempFieldBuffer,PurchInvLineAggregate,PurchaseLineRecordRef);

      PurchaseLineRecordRef.SETTABLE(PurchaseLine);
    END;

    LOCAL PROCEDURE TransferIntegrationRecordID@10(VAR PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      PurchInvHeader@1001 : Record "Purch. Inv. Header";
      NewIntegrationRecord@1002 : Record "Integration Record";
      OldIntegrationRecord@1003 : Record "Integration Record";
      IntegrationManagement@1004 : Codeunit "Integration Management";
      PurchaseInvoiceHeaderRecordRef@1005 : RecordRef;
    BEGIN
      if ISNULLGUID(PurchaseHeader.Id) then
        exit;

      PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseHeader."No.");
      if not PurchInvHeader.FINDFIRST then
        exit;

      if PurchInvHeader.Id = PurchaseHeader.Id then
        exit;

      if OldIntegrationRecord.GET(PurchaseHeader.Id) then
        OldIntegrationRecord.DELETE;

      if NewIntegrationRecord.GET(PurchInvHeader.Id) then
        NewIntegrationRecord.DELETE;

      PurchInvHeader.Id := PurchaseHeader.Id;
      PurchInvHeader.MODIFY(true);
      PurchaseInvoiceHeaderRecordRef.GETTABLE(PurchInvHeader);

      IntegrationManagement.InsertUpdateIntegrationRecord(PurchaseInvoiceHeaderRecordRef,CURRENTDATETIME);
    END;

    LOCAL PROCEDURE TransferFieldsWithValidate@32(VAR TempFieldBuffer@1000 : TEMPORARY Record "Field Buffer";RecordVariant@1001 : Variant;VAR TargetTableRecRef@1002 : RecordRef);
    VAR
      DataTypeManagement@1006 : Codeunit "Data Type Management";
      SourceRecRef@1004 : RecordRef;
      TargetFieldRef@1005 : FieldRef;
      SourceFieldRef@1003 : FieldRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,SourceRecRef);

      TempFieldBuffer.RESET;
      if not TempFieldBuffer.FINDFIRST then
        exit;

      repeat
        if TargetTableRecRef.FIELDEXIST(TempFieldBuffer."Field ID") then begin
          SourceFieldRef := SourceRecRef.FIELD(TempFieldBuffer."Field ID");
          TargetFieldRef := TargetTableRecRef.FIELD(TempFieldBuffer."Field ID");
          TargetFieldRef.VALIDATE(SourceFieldRef.VALUE);
        end;
      until TempFieldBuffer.NEXT = 0;
    END;

    PROCEDURE RedistributeInvoiceDiscounts@31(VAR PurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
    BEGIN
      if PurchInvEntityAggregate.Posted then
        exit;

      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
      PurchaseLine.SETRANGE("Document No.",PurchInvEntityAggregate."No.");
      PurchaseLine.SETRANGE("Recalculate Invoice Disc.",true);
      if PurchaseLine.FINDFIRST then
        CODEUNIT.RUN(CODEUNIT::"Purch - Calc Disc. By Type",PurchaseLine);

      PurchInvEntityAggregate.FIND;
    END;

    PROCEDURE LoadLines@1(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate";DocumentIdFilter@1007 : Text);
    VAR
      PurchInvEntityAggregate@1004 : Record "Purch. Inv. Entity Aggregate";
    BEGIN
      if DocumentIdFilter = '' then
        ERROR(DocumentIDNotSpecifiedErr);

      PurchInvEntityAggregate.SETFILTER(Id,DocumentIdFilter);
      if not PurchInvEntityAggregate.FINDFIRST then
        exit;

      if PurchInvEntityAggregate.Posted then
        LoadPurchaseInvoiceLines(PurchInvLineAggregate,PurchInvEntityAggregate)
      else
        LoadPurchaseLines(PurchInvLineAggregate,PurchInvEntityAggregate);
    END;

    LOCAL PROCEDURE LoadPurchaseInvoiceLines@4(VAR PurchInvLineAggregate@1001 : Record "Purch. Inv. Line Aggregate";VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchInvLine@1002 : Record "Purch. Inv. Line";
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PurchInvEntityAggregate."No.");

      if PurchInvLine.FINDSET(false,false) then
        repeat
          CLEAR(PurchInvLineAggregate);
          PurchInvLineAggregate.TRANSFERFIELDS(PurchInvLine,true);
          PurchInvLineAggregate."Document Id" := PurchInvEntityAggregate.Id;
          if PurchInvLine."VAT Calculation Type" = PurchInvLine."VAT Calculation Type"::"Sales Tax" then
            PurchInvLineAggregate."Tax Code" := PurchInvLine."Tax Group Code"
          else
            PurchInvLineAggregate."Tax Code" := PurchInvLine."VAT Identifier";

          PurchInvLineAggregate."VAT %" := PurchInvLine."VAT %";
          PurchInvLineAggregate."Tax Amount" := PurchInvLine."Amount Including VAT" - PurchInvLine."VAT Base Amount";
          PurchInvLineAggregate."Currency Code" := PurchInvLine.GetCurrencyCode;
          PurchInvLineAggregate."Prices Including Tax" := PurchInvEntityAggregate."Prices Including VAT";
          PurchInvLineAggregate.UpdateReferencedRecordIds;
          UpdateLineAmountsFromPurchaseInvoiceLine(PurchInvLineAggregate);
          PurchInvLineAggregate.INSERT(true);
        until PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadPurchaseLines@38(VAR PurchInvLineAggregate@1002 : Record "Purch. Inv. Line Aggregate";VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate");
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
      PurchaseLine.SETRANGE("Document No.",PurchInvEntityAggregate."No.");

      if PurchaseLine.FINDSET(false,false) then
        repeat
          TransferFromPurchaseLine(PurchInvLineAggregate,PurchInvEntityAggregate,PurchaseLine);
          PurchInvLineAggregate.INSERT(true);
        until PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferFromPurchaseLine@40(VAR PurchInvLineAggregate@1002 : Record "Purch. Inv. Line Aggregate";VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate";VAR PurchaseLine@1001 : Record "Purchase Line");
    BEGIN
      CLEAR(PurchInvLineAggregate);
      PurchInvLineAggregate.TRANSFERFIELDS(PurchaseLine,true);
      PurchInvLineAggregate."Document Id" := PurchInvEntityAggregate.Id;
      if PurchaseLine."VAT Calculation Type" = PurchaseLine."VAT Calculation Type"::"Sales Tax" then
        PurchInvLineAggregate."Tax Code" := PurchaseLine."Tax Group Code"
      else
        PurchInvLineAggregate."Tax Code" := PurchaseLine."VAT Identifier";

      PurchInvLineAggregate."VAT %" := PurchaseLine."VAT %";
      PurchInvLineAggregate."Tax Amount" := PurchaseLine."Amount Including VAT" - PurchaseLine."VAT Base Amount";
      PurchInvLineAggregate."Prices Including Tax" := PurchInvEntityAggregate."Prices Including VAT";
      PurchInvLineAggregate.UpdateReferencedRecordIds;
      UpdateLineAmountsFromPurchaseLine(PurchInvLineAggregate);
    END;

    PROCEDURE PropagateInsertLine@7(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate";VAR TempFieldBuffer@1005 : TEMPORARY Record "Field Buffer");
    VAR
      PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";
      PurchaseLine@1002 : Record "Purchase Line";
      LastUsedPurchaseLine@1004 : Record "Purchase Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(PurchInvLineAggregate,PurchInvEntityAggregate);

      PurchaseLine."Document Type" := PurchaseLine."Document Type"::Invoice;
      PurchaseLine."Document No." := PurchInvEntityAggregate."No.";

      if PurchInvLineAggregate."Line No." = 0 then begin
        LastUsedPurchaseLine.SETRANGE("Document No.",PurchInvEntityAggregate."No.");
        LastUsedPurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Invoice);
        if LastUsedPurchaseLine.FINDLAST then
          PurchInvLineAggregate."Line No." := LastUsedPurchaseLine."Line No." + 10000
        else
          PurchInvLineAggregate."Line No." := 10000;

        PurchaseLine."Line No." := PurchInvLineAggregate."Line No.";
      end else
        if PurchaseLine.GET(PurchaseLine."Document Type"::Invoice,PurchInvEntityAggregate."No.",PurchInvLineAggregate."Line No.") then
          ERROR(CannotInsertALineThatAlreadyExistsErr);

      TransferPurchaseInvoiceLineAggregateToPurchaseLine(PurchInvLineAggregate,PurchaseLine,TempFieldBuffer);
      PurchaseLine.INSERT(true);

      RedistributeInvoiceDiscounts(PurchInvEntityAggregate);

      PurchaseLine.FIND;
      TransferFromPurchaseLine(PurchInvLineAggregate,PurchInvEntityAggregate,PurchaseLine);
    END;

    PROCEDURE PropagateModifyLine@24(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate";VAR TempFieldBuffer@1004 : TEMPORARY Record "Field Buffer");
    VAR
      PurchInvEntityAggregate@1001 : Record "Purch. Inv. Entity Aggregate";
      PurchaseLine@1002 : Record "Purchase Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(PurchInvLineAggregate,PurchInvEntityAggregate);

      if not PurchaseLine.GET(PurchaseLine."Document Type"::Invoice,PurchInvEntityAggregate."No.",PurchInvLineAggregate."Line No.") then
        ERROR(CannotModifyALineThatDoesntExistErr);

      TransferPurchaseInvoiceLineAggregateToPurchaseLine(PurchInvLineAggregate,PurchaseLine,TempFieldBuffer);

      PurchaseLine.MODIFY(true);

      RedistributeInvoiceDiscounts(PurchInvEntityAggregate);

      PurchaseLine.FIND;
      TransferFromPurchaseLine(PurchInvLineAggregate,PurchInvEntityAggregate,PurchaseLine);
    END;

    PROCEDURE PropagateDeleteLine@6(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate");
    VAR
      PurchInvEntityAggregate@1003 : Record "Purch. Inv. Entity Aggregate";
      PurchaseLine@1002 : Record "Purchase Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(PurchInvLineAggregate,PurchInvEntityAggregate);

      if PurchaseLine.GET(PurchaseLine."Document Type"::Invoice,PurchInvEntityAggregate."No.",PurchInvLineAggregate."Line No.") then begin
        PurchaseLine.DELETE(true);
        RedistributeInvoiceDiscounts(PurchInvEntityAggregate);
      end;
    END;

    LOCAL PROCEDURE VerifyCRUDIsPossibleForLine@60(VAR PurchInvLineAggregate@1001 : Record "Purch. Inv. Line Aggregate";VAR PurchInvEntityAggregate@1000 : Record "Purch. Inv. Entity Aggregate");
    VAR
      SearchPurchInvEntityAggregate@1002 : Record "Purch. Inv. Entity Aggregate";
      DocumentIDFilter@1003 : Text;
    BEGIN
      if ISNULLGUID(PurchInvLineAggregate."Document Id") then begin
        DocumentIDFilter := PurchInvLineAggregate.GETFILTER("Document Id");
        if DocumentIDFilter = '' then
          ERROR(DocumentIDNotSpecifiedErr);
        PurchInvEntityAggregate.SETFILTER(Id,DocumentIDFilter);
      end else
        PurchInvEntityAggregate.SETRANGE(Id,PurchInvLineAggregate."Document Id");

      if not PurchInvEntityAggregate.FINDFIRST then
        ERROR(DocumentDoesNotExistErr);

      SearchPurchInvEntityAggregate.COPY(PurchInvEntityAggregate);
      if SearchPurchInvEntityAggregate.NEXT <> 0 then
        ERROR(MultipleDocumentsFoundForIdErr);

      if PurchInvEntityAggregate.Posted then
        ERROR(CannotModifyPostedInvioceErr);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromPurchaseLine@44(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate");
    BEGIN
      PurchInvLineAggregate."Line Tax Amount" :=
        PurchInvLineAggregate."Line Amount Including Tax" - PurchInvLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(PurchInvLineAggregate);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromPurchaseInvoiceLine@49(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate");
    BEGIN
      PurchInvLineAggregate."Line Tax Amount" :=
        PurchInvLineAggregate."Line Amount Including Tax" - PurchInvLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(PurchInvLineAggregate);
    END;

    LOCAL PROCEDURE UpdateInvoiceDiscountAmount@48(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate");
    BEGIN
      if PurchInvLineAggregate."Prices Including Tax" then
        PurchInvLineAggregate."Inv. Discount Amount Excl. VAT" :=
          PurchInvLineAggregate."Line Amount Excluding Tax" - PurchInvLineAggregate.Amount
      else
        PurchInvLineAggregate."Inv. Discount Amount Excl. VAT" := PurchInvLineAggregate."Inv. Discount Amount";
    END;

    PROCEDURE VerifyCanUpdateUOM@45(VAR PurchInvLineAggregate@1000 : Record "Purch. Inv. Line Aggregate");
    BEGIN
      if PurchInvLineAggregate."API Type" <> PurchInvLineAggregate."API Type"::Item then
        ERROR(CanOnlySetUOMForTypeItemErr);
    END;

    LOCAL PROCEDURE CheckValidLineRecord@41(VAR PurchaseLine@1000 : Record "Purchase Line") : Boolean;
    BEGIN
      if PurchaseLine.ISTEMPORARY then
        exit(false);

      if not GraphMgtGeneralTools.IsApiEnabled then
        exit(false);

      if PurchaseLine."Document Type" <> PurchaseLine."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    BEGIN
    END.
  }
}

