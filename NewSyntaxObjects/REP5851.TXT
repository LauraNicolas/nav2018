OBJECT Report 5851 Suggest Item Standard Cost
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Item Standard Cost;
    ProcessingOnly=true;
    OnInitReport=VAR
                   i@1000 : Integer;
                 BEGIN
                   for i := 1 to ARRAYLEN(AmtAdjustFactor) do
                     if AmtAdjustFactor[i] = 0 then
                       AmtAdjustFactor[i] := 1;
                 END;

    OnPreReport=VAR
                  StdCostWkshName@1002 : Record "Standard Cost Worksheet Name";
                BEGIN
                  if ToStdCostWkshName = '' then
                    ERROR(STRSUBSTNO(Text004));
                  StdCostWkshName.GET(ToStdCostWkshName);

                  ToStdCostWksh.LOCKTABLE
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;Item                ;
               DataItemTable=Item;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               WindowUpdateDateTime := CURRENTDATETIME;
                               Window.OPEN(Text007 + Text008);
                             END;

               OnAfterGetRecord=BEGIN
                                  InsertStdCostWksh("No.");
                                  if CURRENTDATETIME - WindowUpdateDateTime >= 750 then begin
                                    Window.UPDATE(1,"No.");
                                    WindowUpdateDateTime := CURRENTDATETIME;
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields="No.","Vendor No.","Replenishment System","Costing Method" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=VAR
                   i@1000 : Integer;
                 BEGIN
                   for i := 1 to ARRAYLEN(AmtAdjustFactor) do
                     if AmtAdjustFactor[i] = 0 then
                       AmtAdjustFactor[i] := 1;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 33  ;2   ;Group     ;
                  Name=Standard Cost;
                  CaptionML=ENU=Standard Cost }

      { 18  ;3   ;Field     ;
                  Name=Adjustment Factor;
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the standard cost that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                  ApplicationArea=#Advanced;
                  DecimalPlaces=0:5;
                  NotBlank=true;
                  SourceExpr=AmtAdjustFactor[1];
                  MinValue=0 }

      { 14  ;3   ;Field     ;
                  Name=Rounding Method;
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want to apply to costs that you adjust.;
                  ApplicationArea=#Advanced;
                  SourceExpr=RoundingMethod[1];
                  TableRelation="Rounding Method" }

      { 35  ;2   ;Group     ;
                  Name=Indirect Cost %;
                  CaptionML=ENU=Indirect Cost % }

      { 1   ;3   ;Field     ;
                  Name=AmtAdjustFactor[2];
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the standard cost that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                  ApplicationArea=#Advanced;
                  DecimalPlaces=0:5;
                  NotBlank=true;
                  SourceExpr=AmtAdjustFactor[2];
                  MinValue=0 }

      { 2   ;3   ;Field     ;
                  Name=RoundingMethod[2];
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want to apply to costs that you adjust.;
                  ApplicationArea=#Advanced;
                  SourceExpr=RoundingMethod[2];
                  TableRelation="Rounding Method" }

      { 36  ;2   ;Group     ;
                  Name=Overhead Rate;
                  CaptionML=ENU=Overhead Rate }

      { 3   ;3   ;Field     ;
                  Name=AmtAdjustFactor[3];
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the standard cost that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                  ApplicationArea=#Advanced;
                  DecimalPlaces=0:5;
                  NotBlank=true;
                  SourceExpr=AmtAdjustFactor[3];
                  MinValue=0 }

      { 4   ;3   ;Field     ;
                  Name=RoundingMethod[3];
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want to apply to costs that you adjust.;
                  ApplicationArea=#Advanced;
                  SourceExpr=RoundingMethod[3];
                  TableRelation="Rounding Method" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text004@1003 : TextConst 'ENU=You must specify a worksheet name to copy to.';
      Text007@1006 : TextConst 'ENU=Copying worksheet...\\';
      Text008@1007 : TextConst 'ENU=Item No. #1####################\';
      ToStdCostWksh@1010 : Record "Standard Cost Worksheet";
      Window@1000 : Dialog;
      ToStdCostWkshName@1026 : Code[10];
      RoundingMethod@1015 : ARRAY [3] OF Code[10];
      AmtAdjustFactor@1031 : ARRAY [3] OF Decimal;
      WindowUpdateDateTime@1002 : DateTime;

    LOCAL PROCEDURE InsertStdCostWksh@2(No2@1000 : Code[20]);
    BEGIN
      with ToStdCostWksh do begin
        INIT;
        VALIDATE("Standard Cost Worksheet Name",ToStdCostWkshName);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",No2);

        VALIDATE(
          "New Standard Cost",
          RoundAndAdjustAmt("Standard Cost",RoundingMethod[1],AmtAdjustFactor[1]));
        VALIDATE(
          "New Indirect Cost %",
          RoundAndAdjustAmt("Indirect Cost %",RoundingMethod[2],AmtAdjustFactor[2]));
        VALIDATE(
          "New Overhead Rate",
          RoundAndAdjustAmt("Overhead Rate",RoundingMethod[3],AmtAdjustFactor[3]));

        if not INSERT(true) then
          MODIFY(true);
      end;
    END;

    PROCEDURE RoundAndAdjustAmt@4(Amt@1000 : Decimal;RoundingMethodCode@1001 : Code[10];AmtAdjustFactor@1005 : Decimal) : Decimal;
    VAR
      RoundingMethod@1002 : Record "Rounding Method";
      Sign@1004 : Decimal;
    BEGIN
      if Amt = 0 then
        exit(Amt);

      Amt := ROUND(Amt * AmtAdjustFactor,0.00001);

      if RoundingMethodCode <> '' then
        with RoundingMethod do begin
          if Amt >= 0 then
            Sign := 1
          else
            Sign := -1;

          SETRANGE(Code,RoundingMethodCode);
          Code := RoundingMethodCode;
          "Minimum Amount" := ABS(Amt);
          if FIND('=<') then begin
            Amt := Amt + Sign * "Amount Added Before";
            if Precision > 0 then
              Amt := Sign * ROUND(ABS(Amt),Precision,COPYSTR('=><',Type + 1,1));
            Amt := Amt + Sign * "Amount Added After";
          end;
        end;

      exit(Amt);
    END;

    PROCEDURE SetCopyToWksh@3(ToStdCostWkshName2@1001 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
    END;

    PROCEDURE Initialize@1(ToStdCostWkshName2@1004 : Code[10];AmtAdjustFactor1@1007 : Decimal;AmtAdjustFactor2@1000 : Decimal;AmtAdjustFactor3@1001 : Decimal;RoundingMethod1@1008 : Code[10];RoundingMethod2@1002 : Code[10];RoundingMethod3@1003 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
      AmtAdjustFactor[1] := AmtAdjustFactor1;
      AmtAdjustFactor[2] := AmtAdjustFactor2;
      AmtAdjustFactor[3] := AmtAdjustFactor3;
      RoundingMethod[1] := RoundingMethod1;
      RoundingMethod[2] := RoundingMethod2;
      RoundingMethod[3] := RoundingMethod3;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

