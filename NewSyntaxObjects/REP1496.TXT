OBJECT Report 1496 Suggest Bank Acc. Recon. Lines
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Bank Acc. Recon. Lines;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 4558;    ;DataItem;Bank Account        ;
               DataItemTable="Bank Account";
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               if EndDate = 0D then
                                 ERROR(Text000);

                               BankAccReconLine.FilterBankRecLines(BankAccRecon);
                               if not BankAccReconLine.FINDLAST then begin
                                 BankAccReconLine."Statement Type" := BankAccRecon."Statement Type";
                                 BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
                                 BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
                                 BankAccReconLine."Statement Line No." := 0;
                               end;

                               SETRANGE("No.",BankAccRecon."Bank Account No.");
                             END;

               OnAfterGetRecord=BEGIN
                                  BankAccLedgEntry.RESET;
                                  BankAccLedgEntry.SETCURRENTKEY("Bank Account No.","Posting Date");
                                  BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                                  BankAccLedgEntry.SETRANGE("Posting Date",StartDate,EndDate);
                                  BankAccLedgEntry.SETRANGE(Open,true);
                                  BankAccLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                                  EOFBankAccLedgEntries := not BankAccLedgEntry.FIND('-');

                                  if IncludeChecks then begin
                                    CheckLedgEntry.RESET;
                                    CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Check Date");
                                    CheckLedgEntry.SETRANGE("Bank Account No.","No.");
                                    CheckLedgEntry.SETRANGE("Check Date",StartDate,EndDate);
                                    CheckLedgEntry.SETFILTER(
                                      "Entry Status",'%1|%2',CheckLedgEntry."Entry Status"::Posted,
                                      CheckLedgEntry."Entry Status"::"Financially Voided");
                                    CheckLedgEntry.SETRANGE(Open,true);
                                    CheckLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                                    EOFCheckLedgEntries := not CheckLedgEntry.FIND('-');
                                  end;

                                  while (not EOFBankAccLedgEntries) or (IncludeChecks and (not EOFCheckLedgEntries)) do
                                    case true of
                                      not IncludeChecks:
                                        begin
                                          EnterBankAccLine(BankAccLedgEntry);
                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        end;
                                      (not EOFBankAccLedgEntries) and (not EOFCheckLedgEntries) and
                                      (BankAccLedgEntry."Posting Date" <= CheckLedgEntry."Check Date"):
                                        begin
                                          CheckLedgEntry2.RESET;
                                          CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                          CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                          CheckLedgEntry2.SETRANGE(Open,true);
                                          if not CheckLedgEntry2.FINDFIRST then
                                            EnterBankAccLine(BankAccLedgEntry);
                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        end;
                                      (not EOFBankAccLedgEntries) and (not EOFCheckLedgEntries) and
                                      (BankAccLedgEntry."Posting Date" > CheckLedgEntry."Check Date"):
                                        begin
                                          EnterCheckLine(CheckLedgEntry);
                                          EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                        end;
                                      (not EOFBankAccLedgEntries) and EOFCheckLedgEntries:
                                        begin
                                          CheckLedgEntry2.RESET;
                                          CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                          CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                          CheckLedgEntry2.SETRANGE(Open,true);
                                          if not CheckLedgEntry2.FINDFIRST then
                                            EnterBankAccLine(BankAccLedgEntry);
                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        end;
                                      EOFBankAccLedgEntries and (not EOFCheckLedgEntries):
                                        begin
                                          EnterCheckLine(CheckLedgEntry);
                                          EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                        end;
                                    end;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 5   ;2   ;Group     ;
                  Name=Statement Period;
                  CaptionML=ENU=Statement Period }

      { 1   ;3   ;Field     ;
                  Name=StartingDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartDate }

      { 3   ;3   ;Field     ;
                  Name=EndingDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDate }

      { 8   ;2   ;Field     ;
                  Name=Include Checks;
                  CaptionML=ENU=Include Checks;
                  ToolTipML=ENU=Specifies if you want the report to include check ledger entries. If you choose this option, check ledger entries are suggested instead of the corresponding bank account ledger entries.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=IncludeChecks }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the Ending Date.';
      BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry";
      CheckLedgEntry@1002 : Record "Check Ledger Entry";
      CheckLedgEntry2@1003 : Record "Check Ledger Entry";
      BankAccRecon@1004 : Record "Bank Acc. Reconciliation";
      BankAccReconLine@1005 : Record "Bank Acc. Reconciliation Line";
      BankAccSetStmtNo@1006 : Codeunit "Bank Acc. Entry Set Recon.-No.";
      CheckSetStmtNo@1007 : Codeunit "Check Entry Set Recon.-No.";
      StartDate@1008 : Date;
      EndDate@1009 : Date;
      IncludeChecks@1010 : Boolean;
      EOFBankAccLedgEntries@1011 : Boolean;
      EOFCheckLedgEntries@1012 : Boolean;

    PROCEDURE SetStmt@1(VAR BankAccRecon2@1000 : Record "Bank Acc. Reconciliation");
    BEGIN
      BankAccRecon := BankAccRecon2;
      EndDate := BankAccRecon."Statement Date";
    END;

    LOCAL PROCEDURE EnterBankAccLine@2(VAR BankAccLedgEntry2@1000 : Record "Bank Account Ledger Entry");
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := BankAccReconLine."Statement Line No." + 10000;
      BankAccReconLine."Transaction Date" := BankAccLedgEntry2."Posting Date";
      BankAccReconLine.Description := BankAccLedgEntry2.Description;
      BankAccReconLine."Document No." := BankAccLedgEntry2."Document No.";
      BankAccReconLine."Statement Amount" := BankAccLedgEntry2."Remaining Amount";
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Bank Account Ledger Entry";
      BankAccReconLine."Applied Entries" := 1;
      BankAccSetStmtNo.SetReconNo(BankAccLedgEntry2,BankAccReconLine);
      BankAccReconLine.INSERT;
    END;

    LOCAL PROCEDURE EnterCheckLine@3(VAR CheckLedgEntry3@1000 : Record "Check Ledger Entry");
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := BankAccReconLine."Statement Line No." + 10000;
      BankAccReconLine."Transaction Date" := CheckLedgEntry3."Check Date";
      BankAccReconLine.Description := CheckLedgEntry3.Description;
      BankAccReconLine."Statement Amount" := -CheckLedgEntry3.Amount;
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Check Ledger Entry";
      BankAccReconLine."Check No." := CheckLedgEntry3."Check No.";
      BankAccReconLine."Applied Entries" := 1;
      CheckSetStmtNo.SetReconNo(CheckLedgEntry3,BankAccReconLine);
      BankAccReconLine.INSERT;
    END;

    PROCEDURE InitializeRequest@4(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewIncludeChecks@1002 : Boolean);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      IncludeChecks := NewIncludeChecks;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

