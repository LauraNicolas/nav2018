OBJECT Report 34 Change Payment Tolerance
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    Permissions=TableData Currency=rm,
                TableData "Cust. Ledger Entry"=rm,
                TableData "Vendor Ledger Entry"=rm,
                TableData "General Ledger Setup"=rm;
    CaptionML=ENU=Change Payment Tolerance;
    ProcessingOnly=true;
    OnPostReport=BEGIN
                   if AllCurrencies then begin
                     if Currency.FIND('-') then
                       repeat
                         if Currency."Payment Tolerance %" <> PaymentTolerancePct then
                           Currency."Payment Tolerance %" := PaymentTolerancePct;
                         if Currency."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount then
                           Currency."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                         Currency."Max. Payment Tolerance Amount" := ROUND(
                             Currency."Max. Payment Tolerance Amount",Currency."Amount Rounding Precision");
                         Currency.MODIFY;
                       until Currency.NEXT = 0;
                     GLSetup.GET;
                     if GLSetup."Payment Tolerance %" <> PaymentTolerancePct then
                       GLSetup."Payment Tolerance %" := PaymentTolerancePct;
                     if GLSetup."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount then
                       GLSetup."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                     GLSetup."Max. Payment Tolerance Amount" := ROUND(
                         GLSetup."Max. Payment Tolerance Amount",GLSetup."Amount Rounding Precision");
                     GLSetup.MODIFY;
                   end else
                     if CurrencyCode = '' then begin
                       GLSetup.GET;
                       AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
                       if GLSetup."Payment Tolerance %" <> PaymentTolerancePct then
                         GLSetup."Payment Tolerance %" := PaymentTolerancePct;
                       if GLSetup."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount then
                         GLSetup."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                       GLSetup."Max. Payment Tolerance Amount" := ROUND(
                           GLSetup."Max. Payment Tolerance Amount",GLSetup."Amount Rounding Precision");
                       GLSetup.MODIFY;
                     end else
                       if CurrencyCode <> '' then begin
                         Currency.GET(CurrencyCode);
                         AmountRoundingPrecision := Currency."Amount Rounding Precision";
                         if Currency."Payment Tolerance %" <> PaymentTolerancePct then
                           Currency."Payment Tolerance %" := PaymentTolerancePct;
                         if Currency."Max. Payment Tolerance Amount" <> MaxPmtToleranceAmount then
                           Currency."Max. Payment Tolerance Amount" := MaxPmtToleranceAmount;
                         Currency."Max. Payment Tolerance Amount" := ROUND(
                             Currency."Max. Payment Tolerance Amount",Currency."Amount Rounding Precision");
                         Currency.MODIFY;
                       end;

                   if AllCurrencies then begin
                     if CONFIRM(Text001,true) then begin
                       if Currency.FIND('-') then
                         repeat
                           AmountRoundingPrecision := Currency."Amount Rounding Precision";
                           CurrencyCode := Currency.Code;
                           ChangeCustLedgEntries;
                           ChangeVendLedgEntries;
                         until Currency.NEXT = 0;
                       CurrencyCode := '';
                       GLSetup.GET;
                       AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
                       ChangeCustLedgEntries;
                       ChangeVendLedgEntries;
                     end;
                   end else
                     if CONFIRM(Text001,true) then begin
                       ChangeCustLedgEntries;
                       ChangeVendLedgEntries;
                     end;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               CurrencyCodeEnable := true;
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 7   ;2   ;Field     ;
                  Name=All Currencies;
                  CaptionML=ENU=All Currencies;
                  ToolTipML=ENU=Specifies if you want to change the tolerance setup for both local and all foreign currencies.;
                  ApplicationArea=#Suite;
                  SourceExpr=AllCurrencies;
                  OnValidate=BEGIN
                               if AllCurrencies then begin
                                 CurrencyCode := '';
                                 PaymentTolerancePct := 0;
                                 MaxPmtToleranceAmount := 0;
                                 CurrencyCodeEnable := false;
                               end else begin
                                 CurrencyCodeEnable := true;
                                 CurrencyCode := '';
                                 PaymentTolerancePct := GLSetup."Payment Tolerance %";
                                 MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                                 DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                               end;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=Currency Code;
                  CaptionML=ENU=Currency Code;
                  ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                  ApplicationArea=#Suite;
                  SourceExpr=CurrencyCode;
                  TableRelation=Currency;
                  Enabled=CurrencyCodeEnable;
                  OnValidate=BEGIN
                               if not AllCurrencies then
                                 if CurrencyCode = '' then begin
                                   GLSetup.GET;
                                   PaymentTolerancePct := GLSetup."Payment Tolerance %";
                                   MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                                   DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                                 end else begin
                                   Currency.GET(CurrencyCode);
                                   PaymentTolerancePct := Currency."Payment Tolerance %";
                                   MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
                                   DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
                                 end;
                             END;

                  OnLookup=BEGIN
                             Currencies.LOOKUPMODE := true;
                             if Currencies.RUNMODAL = ACTION::LookupOK then
                               Currencies.GetCurrency(CurrencyCode);
                             CLEAR(Currencies);
                             if CurrencyCode = '' then begin
                               GLSetup.GET;
                               PaymentTolerancePct := GLSetup."Payment Tolerance %";
                               MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
                             end else begin
                               Currency.GET(CurrencyCode);
                               PaymentTolerancePct := Currency."Payment Tolerance %";
                               MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
                             end;
                           END;
                            }

      { 3   ;2   ;Field     ;
                  Name=Payment Tolerance %;
                  CaptionML=ENU=Payment Tolerance %;
                  ToolTipML=ENU=Specifies the percentage by which the payment or refund is allowed to be less than the amount on the invoice or credit memo.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=PaymentTolerancePct;
                  Enabled=TRUE }

      { 5   ;2   ;Field     ;
                  Name=Max. Pmt. Tolerance Amount;
                  CaptionML=ENU=Max. Pmt. Tolerance Amount;
                  ToolTipML=ENU=Specifies the maximum allowed amount by which the payment or refund can differ from the amount on the invoice or credit memo.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=MaxPmtToleranceAmount;
                  Enabled=TRUE;
                  OnValidate=BEGIN
                               if AllCurrencies then begin
                                 DecimalPlaces := 5;
                                 FormatString := Text002 + '0:5' + Text003;
                               end else
                                 if Currency.Code <> '' then begin
                                   Currency.GET(Currency.Code);
                                   DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
                                   FormatString := Text002 + Currency."Amount Decimal Places" + Text003;
                                 end else begin
                                   GLSetup.GET;
                                   DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
                                   FormatString := Text002 + GLSetup."Amount Decimal Places" + Text003;
                                 end;
                               TextFormat := FORMAT(MaxPmtToleranceAmount,0,FormatString);
                               TextInput := FORMAT(MaxPmtToleranceAmount);
                               if STRLEN(TextFormat) < STRLEN(TextInput) then
                                 ERROR(Text004,DecimalPlaces);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Currency@1003 : Record Currency;
      GLSetup@1004 : Record "General Ledger Setup";
      Currencies@1006 : Page Currencies;
      CurrencyCode@1007 : Code[10];
      PaymentTolerancePct@1001 : Decimal;
      MaxPmtToleranceAmount@1000 : Decimal;
      Text001@1005 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked?';
      AmountRoundingPrecision@1008 : Decimal;
      DecimalPlaces@1010 : Integer;
      AllCurrencies@1009 : Boolean;
      FormatString@1014 : Text[80];
      TextFormat@1015 : Text[250];
      TextInput@1016 : Text[250];
      Text002@1012 : TextConst 'ENU=<Precision,';
      Text003@1013 : TextConst 'ENU=><Standard Format,0>';
      Text004@1017 : TextConst 'ENU=The field can have a maximum of %1 decimal places.';
      CurrencyCodeEnable@19025310 : Boolean INDATASET;

    LOCAL PROCEDURE CheckApplnRounding@4(AmountDecimalPlaces@1000 : Text[5]) : Integer;
    VAR
      ColonPlace@1001 : Integer;
      ReturnNumber@1002 : Integer;
      OK@1003 : Boolean;
      TempAmountDecimalPlaces@1004 : Text[5];
    BEGIN
      ColonPlace := STRPOS(AmountDecimalPlaces,':');

      if ColonPlace = 0 then begin
        OK := EVALUATE(ReturnNumber,AmountDecimalPlaces);
        if OK then
          exit(ReturnNumber);
      end else begin
        TempAmountDecimalPlaces := COPYSTR(AmountDecimalPlaces,ColonPlace + 1,ColonPlace + 1);
        OK := EVALUATE(ReturnNumber,TempAmountDecimalPlaces);
        if OK then
          exit(ReturnNumber);
      end;
    END;

    LOCAL PROCEDURE ChangeCustLedgEntries@1();
    VAR
      Customer@1001 : Record Customer;
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
      NewPaymentTolerancePct@1003 : Decimal;
      NewMaxPmtToleranceAmount@1002 : Decimal;
    BEGIN
      Customer.SETCURRENTKEY("No.");
      Customer.LOCKTABLE;
      if not Customer.FIND('-')then
        exit;

      repeat
        if not Customer."Block Payment Tolerance" then begin
          CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
          CustLedgEntry.SETRANGE("Customer No.",Customer."No.");
          CustLedgEntry.SETRANGE(Open,true);

          CustLedgEntry.SETFILTER("Document Type",'%1|%2',
            CustLedgEntry."Document Type"::Invoice,
            CustLedgEntry."Document Type"::"Credit Memo");

          CustLedgEntry.SETRANGE("Currency Code",CurrencyCode);
          NewPaymentTolerancePct := PaymentTolerancePct;
          NewMaxPmtToleranceAmount := MaxPmtToleranceAmount;

          CustLedgEntry.LOCKTABLE;
          if CustLedgEntry.FIND('-') then begin
            repeat
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              CustLedgEntry."Max. Payment Tolerance" :=
                ROUND(NewPaymentTolerancePct * CustLedgEntry."Remaining Amount" / 100,AmountRoundingPrecision);
              if (CustLedgEntry."Max. Payment Tolerance" = 0) and
                 (NewMaxPmtToleranceAmount <> 0) or
                 ((ABS(CustLedgEntry."Max. Payment Tolerance") > NewMaxPmtToleranceAmount) and
                  (CustLedgEntry."Max. Payment Tolerance" <> 0) and
                  (NewMaxPmtToleranceAmount <> 0))
              then begin
                if CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice then
                  CustLedgEntry."Max. Payment Tolerance" :=
                    ROUND(NewMaxPmtToleranceAmount,AmountRoundingPrecision)
                else
                  CustLedgEntry."Max. Payment Tolerance" :=
                    ROUND(-NewMaxPmtToleranceAmount,AmountRoundingPrecision);
              end;
              if ABS(CustLedgEntry."Remaining Amount") < ABS(CustLedgEntry."Max. Payment Tolerance") then
                CustLedgEntry."Max. Payment Tolerance" := CustLedgEntry."Remaining Amount";
              CustLedgEntry.MODIFY;
            until CustLedgEntry.NEXT = 0;
          end;
        end;
      until Customer.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeVendLedgEntries@2();
    VAR
      Vendor@1001 : Record Vendor;
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
      NewPaymentTolerancePct@1003 : Decimal;
      NewMaxPmtToleranceAmount@1002 : Decimal;
    BEGIN
      Vendor.SETCURRENTKEY("No.");
      Vendor.LOCKTABLE;
      if not Vendor.FIND('-')then
        exit;
      repeat
        if not Vendor."Block Payment Tolerance" then begin
          VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
          VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

          VendLedgEntry.SETRANGE(Open,true);

          VendLedgEntry.SETFILTER("Document Type",'%1|%2',
            VendLedgEntry."Document Type"::Invoice,
            VendLedgEntry."Document Type"::"Credit Memo");

          VendLedgEntry.SETRANGE("Currency Code",CurrencyCode);
          NewPaymentTolerancePct := PaymentTolerancePct;
          NewMaxPmtToleranceAmount := MaxPmtToleranceAmount;

          VendLedgEntry.LOCKTABLE;
          if VendLedgEntry.FIND('-') then begin
            repeat
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Max. Payment Tolerance" :=
                ROUND(NewPaymentTolerancePct * VendLedgEntry."Remaining Amount" / 100,AmountRoundingPrecision);
              if (VendLedgEntry."Max. Payment Tolerance" = 0) and
                 (NewMaxPmtToleranceAmount <> 0) or
                 ((ABS(VendLedgEntry."Max. Payment Tolerance") > NewMaxPmtToleranceAmount) and
                  (VendLedgEntry."Max. Payment Tolerance" <> 0) and
                  (NewMaxPmtToleranceAmount <> 0))
              then begin
                if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice then
                  VendLedgEntry."Max. Payment Tolerance" :=
                    ROUND(-NewMaxPmtToleranceAmount,AmountRoundingPrecision)
                else
                  VendLedgEntry."Max. Payment Tolerance" :=
                    ROUND(NewMaxPmtToleranceAmount,AmountRoundingPrecision);
              end;
              if ABS(VendLedgEntry."Remaining Amount") < ABS(VendLedgEntry."Max. Payment Tolerance") then
                VendLedgEntry."Max. Payment Tolerance" := VendLedgEntry."Remaining Amount";
              VendLedgEntry.MODIFY;
            until VendLedgEntry.NEXT = 0;
          end;
        end;
      until Vendor.NEXT = 0;
    END;

    PROCEDURE SetCurrency@3(NewCurrency@1000 : Record Currency);
    BEGIN
      PageSetCurrency(NewCurrency);
      exit;
    END;

    LOCAL PROCEDURE PageSetCurrency@19033490(NewCurrency@1000 : Record Currency);
    BEGIN
      Currency := NewCurrency;

      if Currency.Code <> ''then begin
        Currency.GET(Currency.Code);
        CurrencyCode := Currency.Code;
        PaymentTolerancePct := Currency."Payment Tolerance %";
        MaxPmtToleranceAmount := Currency."Max. Payment Tolerance Amount";
        DecimalPlaces := CheckApplnRounding(Currency."Amount Decimal Places");
      end else begin
        GLSetup.GET;
        PaymentTolerancePct := GLSetup."Payment Tolerance %";
        MaxPmtToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
        DecimalPlaces := CheckApplnRounding(GLSetup."Amount Decimal Places");
      end;
    END;

    PROCEDURE InitializeRequest@5(AllCurrenciesFrom@1000 : Boolean;CurrencyCodeFrom@1001 : Code[10];PaymentTolerancePctFrom@1002 : Decimal;MaxPmtToleranceAmountFrom@1003 : Decimal);
    BEGIN
      AllCurrencies := AllCurrenciesFrom;
      CurrencyCode := CurrencyCodeFrom;
      PaymentTolerancePct := PaymentTolerancePctFrom;
      MaxPmtToleranceAmount := MaxPmtToleranceAmountFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

