OBJECT Codeunit 12 Gen. Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    Permissions=TableData "G/L Entry"=imd,
                TableData "Cust. Ledger Entry"=imd,
                TableData "Vendor Ledger Entry"=imd,
                TableData "G/L Register"=imd,
                TableData "G/L Entry - VAT Entry Link"=rimd,
                TableData "VAT Entry"=imd,
                TableData "Bank Account Ledger Entry"=imd,
                TableData "Check Ledger Entry"=imd,
                TableData "Detailed Cust. Ledg. Entry"=imd,
                TableData "Detailed Vendor Ledg. Entry"=imd,
                TableData "Line Fee Note on Report Hist."=rim,
                TableData "Employee Ledger Entry"=imd,
                TableData "Detailed Employee Ledger Entry"=imd,
                TableData "FA Ledger Entry"=rimd,
                TableData "FA Register"=imd,
                TableData "Maintenance Ledger Entry"=rimd;
    OnRun=BEGIN
            GetGLSetup;
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      NeedsRoundingErr@1000 : TextConst 'ENU=%1 needs to be rounded';
      PurchaseAlreadyExistsErr@1003 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.';
      BankPaymentTypeMustNotBeFilledErr@1004 : TextConst 'ENU=Bank Payment Type must not be filled if Currency Code is different in Gen. Journal Line and Bank Account.';
      DocNoMustBeEnteredErr@1005 : TextConst 'ENU=Document No. must be entered when Bank Payment Type is %1.';
      CheckAlreadyExistsErr@1006 : TextConst 'ENU=Check %1 already exists for this Bank Account.';
      GLSetup@1009 : Record "General Ledger Setup";
      GlobalGLEntry@1014 : Record "G/L Entry";
      TempGLEntryBuf@1010 : TEMPORARY Record "G/L Entry";
      TempGLEntryVAT@1016 : TEMPORARY Record "G/L Entry";
      GLReg@1029 : Record "G/L Register";
      AddCurrency@1033 : Record Currency;
      CurrExchRate@1035 : Record "Currency Exchange Rate";
      VATEntry@1038 : Record "VAT Entry";
      TaxDetail@1046 : Record "Tax Detail";
      UnrealizedCustLedgEntry@1084 : Record "Cust. Ledger Entry";
      UnrealizedVendLedgEntry@1085 : Record "Vendor Ledger Entry";
      GLEntryVATEntryLink@1087 : Record "G/L Entry - VAT Entry Link";
      TempVATEntry@1088 : TEMPORARY Record "VAT Entry";
      GenJnlCheckLine@1001 : Codeunit "Gen. Jnl.-Check Line";
      PaymentToleranceMgt@1002 : Codeunit "Payment Tolerance Management";
      DeferralUtilities@1031 : Codeunit "Deferral Utilities";
      DeferralDocType@1039 : 'Purchase,Sales,"G/L"';
      LastDocType@1025 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder';
      AddCurrencyCode@1117 : Code[10];
      GLSourceCode@1040 : Code[10];
      LastDocNo@1023 : Code[20];
      FiscalYearStartDate@1011 : Date;
      CurrencyDate@1020 : Date;
      LastDate@1021 : Date;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1086 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      AmountRoundingPrecision@1012 : Decimal;
      AddCurrGLEntryVATAmt@1017 : Decimal;
      CurrencyFactor@1019 : Decimal;
      FirstEntryNo@1042 : Integer;
      NextEntryNo@1022 : Integer;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      FirstTransactionNo@1024 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      NextCheckEntryNo@1028 : Integer;
      InsertedTempGLEntryVAT@1027 : Integer;
      GLEntryNo@1026 : Integer;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      ResidualRoundingErr@1008 : TextConst 'ENU=Residual caused by rounding of %1';
      DimensionUsedErr@1007 : TextConst '@@@=Comment;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5.';
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      GLSetupRead@1015 : Boolean;
      InvalidPostingDateErr@1034 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.';
      DescriptionMustNotBeBlankErr@1030 : TextConst '@@@=%1: Field Omit Default Descr. in Jnl., %2 G/L Account No, %3 Description;ENU=When %1 is selected for %2, %3 must have a value.';
      NoDeferralScheduleErr@1037 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=You must create a deferral schedule if a deferral template is selected. Line: %1, Deferral Template: %2.';
      ZeroDeferralAmtErr@1041 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      IsGLRegInserted@1013 : Boolean;

    [External]
    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record "G/L Register");
    BEGIN
      NewGLReg := GLReg;
    END;

    [External]
    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record "Gen. Journal Line") : Integer;
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,true);
      GenJnlLine2 := GenJnlLine;
      exit(GLEntryNo);
    END;

    [Internal]
    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record "Gen. Journal Line") : Integer;
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,false);
      GenJnlLine2 := GenJnlLine;
      exit(GLEntryNo);
    END;

    LOCAL PROCEDURE Code@9(VAR GenJnlLine@1003 : Record "Gen. Journal Line";CheckLine@1000 : Boolean);
    VAR
      Balancing@1002 : Boolean;
      IsTransactionConsistent@1001 : Boolean;
    BEGIN
      GetGLSourceCode;

      with GenJnlLine do begin
        if EmptyLine then begin
          InitLastDocDate(GenJnlLine);
          exit;
        end;

        if CheckLine then begin
          if OverrideDimErr then
            GenJnlCheckLine.SetOverDimErr;
          GenJnlCheckLine.RunCheck(GenJnlLine);
        end;

        AmountRoundingPrecision := InitAmounts(GenJnlLine);

        if "Bill-to/Pay-to No." = '' then
          case true of
            "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          end;
        if "Document Date" = 0D then
          "Document Date" := "Posting Date";
        if "Due Date" = 0D then
          "Due Date" := "Posting Date";

        JobLine := ("Job No." <> '');

        if NextEntryNo = 0 then
          StartPosting(GenJnlLine)
        else
          ContinuePosting(GenJnlLine);

        if "Account No." <> '' then begin
          if ("Bal. Account No." <> '') and
             (not "System-Created Entry") and
             ("Account Type" in
              ["Account Type"::Customer,
               "Account Type"::Vendor,
               "Account Type"::"Fixed Asset"])
          then begin
            CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
            Balancing := true;
          end;

          PostGenJnlLine(GenJnlLine,Balancing);
        end;

        if "Bal. Account No." <> '' then begin
          CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
          PostGenJnlLine(GenJnlLine,not Balancing);
        end;

        CheckPostUnrealizedVAT(GenJnlLine,true);

        CreateDeferralScheduleFromGL(GenJnlLine,Balancing);

        IsTransactionConsistent := FinishPosting;
      end;

      OnAfterGLFinishPosting(GlobalGLEntry,IsTransactionConsistent,FirstTransactionNo);
    END;

    LOCAL PROCEDURE PostGenJnlLine@47(VAR GenJnlLine@1000 : Record "Gen. Journal Line";Balancing@1001 : Boolean);
    BEGIN
      with GenJnlLine do
        case "Account Type" of
          "Account Type"::"G/L Account":
            PostGLAcc(GenJnlLine,Balancing);
          "Account Type"::Customer:
            PostCust(GenJnlLine,Balancing);
          "Account Type"::Vendor:
            PostVend(GenJnlLine,Balancing);
          "Account Type"::Employee:
            PostEmployee(GenJnlLine);
          "Account Type"::"Bank Account":
            PostBankAcc(GenJnlLine,Balancing);
          "Account Type"::"Fixed Asset":
            PostFixedAsset(GenJnlLine);
          "Account Type"::"IC Partner":
            PostICPartner(GenJnlLine);
        end;
    END;

    LOCAL PROCEDURE InitAmounts@186(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Decimal;
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      with GenJnlLine do begin
        if "Currency Code" = '' then begin
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
        end else begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          if not "System-Created Entry" then begin
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
          end;
        end;
        if "Additional-Currency Posting" = "Additional-Currency Posting"::None then begin
          if Amount <> ROUND(Amount,Currency."Amount Rounding Precision") then
            FIELDERROR(
              Amount,
              STRSUBSTNO(NeedsRoundingErr,Amount));
          if "Amount (LCY)" <> ROUND("Amount (LCY)") then
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(NeedsRoundingErr,"Amount (LCY)"));
        end;
        exit(Currency."Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE InitLastDocDate@23(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      with GenJnlLine do begin
        LastDocType := "Document Type";
        LastDocNo := "Document No.";
        LastDate := "Posting Date";
      end;
    END;

    LOCAL PROCEDURE InitVAT@33(VAR GenJnlLine@1001 : Record "Gen. Journal Line";VAR GLEntry@1002 : Record "G/L Entry";VAR VATPostingSetup@1003 : Record "VAT Posting Setup");
    VAR
      LCYCurrency@1000 : Record Currency;
      SalesTaxCalculate@1004 : Codeunit "Sales Tax Calculate";
    BEGIN
      LCYCurrency.InitRoundingPrecision;
      with GenJnlLine do
        if "Gen. Posting Type" <> 0 then begin // None
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          case "VAT Posting" of
            "VAT Posting"::"Automatic VAT Entry":
              begin
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                case "VAT Calculation Type" of
                  "VAT Calculation Type"::"Normal VAT":
                    if "VAT Difference" <> 0 then begin
                      GLEntry.Amount := "VAT Base Amount (LCY)";
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      if "Source Currency Code" = AddCurrencyCode then
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      else
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    end else begin
                      GLEntry."VAT Amount" :=
                        ROUND(
                          "Amount (LCY)" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                          LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                      GLEntry.Amount := "Amount (LCY)" - GLEntry."VAT Amount";
                      if "Source Currency Code" = AddCurrencyCode then
                        AddCurrGLEntryVATAmt :=
                          ROUND(
                            "Source Currency Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                            AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                      else
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount" - AddCurrGLEntryVATAmt;
                    end;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    case "Gen. Posting Type" of
                      "Gen. Posting Type"::Purchase:
                        if "VAT Difference" <> 0 then begin
                          GLEntry."VAT Amount" := "VAT Amount (LCY)";
                          if "Source Currency Code" = AddCurrencyCode then
                            AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                          else
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        end else begin
                          GLEntry."VAT Amount" :=
                            ROUND(
                              GLEntry.Amount * VATPostingSetup."VAT %" / 100,
                              LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                          if "Source Currency Code" = AddCurrencyCode then
                            AddCurrGLEntryVATAmt :=
                              ROUND(
                                GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                          else
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        end;
                      "Gen. Posting Type"::Sale:
                        begin
                          GLEntry."VAT Amount" := 0;
                          AddCurrGLEntryVATAmt := 0;
                        end;
                    end;
                  "VAT Calculation Type"::"Full VAT":
                    begin
                      case "Gen. Posting Type" of
                        "Gen. Posting Type"::Sale:
                          TESTFIELD("Account No.",VATPostingSetup.GetSalesAccount(false));
                        "Gen. Posting Type"::Purchase:
                          TESTFIELD("Account No.",VATPostingSetup.GetPurchAccount(false));
                      end;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      if "Source Currency Code" = AddCurrencyCode then
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      else
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    end;
                  "VAT Calculation Type"::"Sales Tax":
                    begin
                      if ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) and
                         "Use Tax"
                      then begin
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry.Amount := "Amount (LCY)";
                      end else begin
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      end;
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                      if "Source Currency Code" = AddCurrencyCode then
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      else
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    end;
                end;
              end;
            "VAT Posting"::"Manual VAT Entry":
              if "Gen. Posting Type" <> "Gen. Posting Type"::Settlement then begin
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                GLEntry."VAT Amount" := "VAT Amount (LCY)";
                if "Source Currency Code" = AddCurrencyCode then
                  AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                else
                  AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
              end;
          end;
        end;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",true,GenJnlLine);
    END;

    LOCAL PROCEDURE PostVAT@34(GenJnlLine@1010 : Record "Gen. Journal Line";VAR GLEntry@1015 : Record "G/L Entry";VATPostingSetup@1012 : Record "VAT Posting Setup");
    VAR
      TaxDetail2@1008 : Record "Tax Detail";
      SalesTaxCalculate@1013 : Codeunit "Sales Tax Calculate";
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      SalesTaxBaseAmount@1014 : Decimal;
      TaxDetailFound@1006 : Boolean;
    BEGIN
      with GenJnlLine do
        // Post VAT
        // VAT for VAT entry
        case "VAT Calculation Type" of
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            begin
              if "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" then
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              if "Gen. Posting Type" = "Gen. Posting Type"::Settlement then
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GenJnlLine,VATPostingSetup,
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            end;
          "VAT Calculation Type"::"Sales Tax":
            begin
              case "VAT Posting" of
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              end;
              if ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") and
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              then
                InsertVAT(
                  GenJnlLine,VATPostingSetup,
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount")
              else begin
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := false;
                while SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) do begin
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  if TaxDetailFound then
                    InsertVAT(
                      GenJnlLine,VATPostingSetup,
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := true;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                end;
                if TaxDetailFound then
                  InsertVAT(
                    GenJnlLine,VATPostingSetup,
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT(GenJnlLine);
              end;
            end;
        end;
    END;

    LOCAL PROCEDURE InsertVAT@30(GenJnlLine@1015 : Record "Gen. Journal Line";VATPostingSetup@1018 : Record "VAT Posting Setup";GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      TaxJurisdiction@1003 : Record "Tax Jurisdiction";
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      UnrealizedVAT@1019 : Boolean;
    BEGIN
      with GenJnlLine do begin
        // Post VAT
        // VAT for VAT entry
        VATEntry.INIT;
        VATEntry.CopyFromGenJnlLine(GenJnlLine);
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."EU Service" := VATPostingSetup."EU Service";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;

        if "VAT Difference" = 0 then
          VATDifferenceLCY := 0
        else
          if "Currency Code" = '' then
            VATDifferenceLCY := "VAT Difference"
          else
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code")));

        if "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" then begin
          if TaxDetail."Tax Jurisdiction Code" <> '' then
            TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
          if "Gen. Posting Type" <> "Gen. Posting Type"::Settlement then begin
            VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
            VATEntry."Tax Type" := TaxDetail."Tax Type";
            VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
          end;
          VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
        end;

        if AddCurrencyCode <> '' then
          if AddCurrencyCode <> SrcCurrCode then begin
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
            SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
          end else
            SrcCurrVATDifference := "VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) and
            (VATPostingSetup."VAT Calculation Type" in
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) or
           ((TaxJurisdiction."Unrealized VAT Type" > 0) and
            (VATPostingSetup."VAT Calculation Type" in
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) and
          IsNotPayment("Document Type");
        if GLSetup."Prepayment Unrealized VAT" and not GLSetup."Unrealized VAT" and
           (VATPostingSetup."Unrealized VAT Type" > 0)
        then
          UnrealizedVAT := Prepayment;

        // VAT for VAT entry
        if "Gen. Posting Type" <> 0 then begin
          case "VAT Posting" of
            "VAT Posting"::"Automatic VAT Entry":
              begin
                VATAmount := GLEntryVATAmount;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              end;
            "VAT Posting"::"Manual VAT Entry":
              begin
                if "Gen. Posting Type" = "Gen. Posting Type"::Settlement then begin
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := true;
                end else begin
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                end;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              end;
          end;

          if UnrealizedVAT then begin
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          end else begin
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          end;

          if AddCurrencyCode = '' then begin
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          end else
            if UnrealizedVAT then begin
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            end else begin
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            end;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;

          VATEntry.INSERT(true);
          GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
          NextVATEntryNo := NextVATEntryNo + 1;
        end;

        // VAT for G/L entry/entries
        if (GLEntryVATAmount <> 0) or
           ((SrcCurrGLEntryVATAmt <> 0) and (SrcCurrCode = AddCurrencyCode))
        then
          case "Gen. Posting Type" of
            "Gen. Posting Type"::Purchase:
              case VATPostingSetup."VAT Calculation Type" of
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  begin
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,true);
                  end;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  if "Use Tax" then begin
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(UnrealizedVAT),'',
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,true);
                  end else
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
              end;
            "Gen. Posting Type"::Sale:
              case VATPostingSetup."VAT Calculation Type" of
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetSalesAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  ;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetSalesAccount(UnrealizedVAT),'',
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,true);
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;GLEntry@1001 : Record "G/L Entry");
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := false;
      if SummarizeGLEntries then
        if TempGLEntryVAT.FINDSET then
          repeat
            if (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") and
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            then begin
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := true;
            end;
          until (TempGLEntryVAT.NEXT = 0) or InsertedTempVAT;
      if not InsertedTempVAT or not SummarizeGLEntries then begin
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      end;
    END;

    LOCAL PROCEDURE InsertSummarizedVAT@37(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if TempGLEntryVAT.FINDSET then begin
        repeat
          InsertGLEntry(GenJnlLine,TempGLEntryVAT,true);
        until TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      end;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11(GenJnlLine@1001 : Record "Gen. Journal Line";Balancing@1004 : Boolean);
    VAR
      GLAcc@1000 : Record "G/L Account";
      GLEntry@1002 : Record "G/L Entry";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      with GenJnlLine do begin
        GLAcc.GET("Account No.");
        // G/L entry
        InitGLEntry(GenJnlLine,GLEntry,
          "Account No.","Amount (LCY)",
          "Source Currency Amount",true,"System-Created Entry");
        if not "System-Created Entry" then
          if "Posting Date" = NORMALDATE("Posting Date") then
            GLAcc.TESTFIELD("Direct Posting",true);
        if GLAcc."Omit Default Descr. in Jnl." then
          if DELCHR(Description,'=',' ') = '' then
            ERROR(
              DescriptionMustNotBeBlankErr,
              GLAcc.FIELDCAPTION("Omit Default Descr. in Jnl."),
              GLAcc."No.",
              FIELDCAPTION(Description));
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        if "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        then begin
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        end;
        // Store Entry No. to global variable for return:
        GLEntryNo := GLEntry."Entry No.";
        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        InsertGLEntry(GenJnlLine,GLEntry,true);
        PostJob(GenJnlLine,GLEntry);
        PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
        DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(GLEntry.RECORDID);
      end;
    END;

    LOCAL PROCEDURE PostCust@12(VAR GenJnlLine@1007 : Record "Gen. Journal Line";Balancing@1010 : Boolean);
    VAR
      LineFeeNoteOnReportHist@1008 : Record "Line Fee Note on Report Hist.";
      Cust@1005 : Record Customer;
      CustPostingGr@1006 : Record "Customer Posting Group";
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
      CVLedgEntryBuf@1002 : Record "CV Ledger Entry Buffer";
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      DtldCustLedgEntry@1004 : Record "Detailed Cust. Ledg. Entry";
      ReceivablesAccount@1009 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
    BEGIN
      with GenJnlLine do begin
        Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",true);

        if "Posting Group" = '' then begin
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        end;
        CustPostingGr.GET("Posting Group");
        ReceivablesAccount := CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        InitCustLedgEntry(GenJnlLine,CustLedgEntry);

        if not Cust."Block Payment Tolerance" then
          CalcPmtTolerancePossible(
            GenJnlLine,CustLedgEntry."Pmt. Discount Date",CustLedgEntry."Pmt. Disc. Tolerance Date",
            CustLedgEntry."Max. Payment Tolerance");

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,true);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        if "Currency Code" <> '' then begin
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        end else
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";

        // Check the document no.
        if "Recurring Method" = 0 then
          if IsNotPayment("Document Type") then begin
            GenJnlCheckLine.CheckSalesDocNoIsNotUsed("Document Type","Document No.");
            CheckSalesExtDocNo(GenJnlLine);
          end;

        // Post application
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);

        // Post customer entry
        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Applies-to Doc. No." := '';
        CustLedgEntry.INSERT(true);

        // Post detailed customer entries
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,true);

        // Post Reminder Terms - Note About Line Fee on Report
        LineFeeNoteOnReportHist.Save(CustLedgEntry);

        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);

        DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(CustLedgEntry.RECORDID);
      end;
    END;

    LOCAL PROCEDURE PostVend@13(GenJnlLine@1007 : Record "Gen. Journal Line";Balancing@1009 : Boolean);
    VAR
      Vend@1005 : Record Vendor;
      VendPostingGr@1006 : Record "Vendor Posting Group";
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
      CVLedgEntryBuf@1002 : Record "CV Ledger Entry Buffer";
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      DtldVendLedgEntry@1004 : Record "Detailed Vendor Ledg. Entry";
      PayablesAccount@1008 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
    BEGIN
      with GenJnlLine do begin
        Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",true);

        if "Posting Group" = '' then begin
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        end;
        VendPostingGr.GET("Posting Group");
        PayablesAccount := VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        InitVendLedgEntry(GenJnlLine,VendLedgEntry);

        if not Vend."Block Payment Tolerance" then
          CalcPmtTolerancePossible(
            GenJnlLine,VendLedgEntry."Pmt. Discount Date",VendLedgEntry."Pmt. Disc. Tolerance Date",
            VendLedgEntry."Max. Payment Tolerance");

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,true);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        if "Currency Code" <> '' then begin
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        end else
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        if "Recurring Method" = 0 then
          if IsNotPayment("Document Type") then begin
            GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
            CheckPurchExtDocNo(GenJnlLine);
          end;

        // Post application
        ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend);

        // Post vendor entry
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. No." := '';
        VendLedgEntry.INSERT(true);

        // Post detailed vendor entries
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,true);

        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
        DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(VendLedgEntry.RECORDID);
      end;
    END;

    LOCAL PROCEDURE PostEmployee@86(GenJnlLine@1007 : Record "Gen. Journal Line");
    VAR
      Employee@1005 : Record Employee;
      EmployeePostingGr@1006 : Record "Employee Posting Group";
      EmployeeLedgerEntry@1000 : Record "Employee Ledger Entry";
      CVLedgEntryBuf@1008 : Record "CV Ledger Entry Buffer";
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      DtldEmplLedgEntry@1001 : Record "Detailed Employee Ledger Entry";
      DtldLedgEntryInserted@1010 : Boolean;
    BEGIN
      with GenJnlLine do begin
        Employee.GET("Account No.");

        if "Posting Group" = '' then begin
          Employee.TESTFIELD("Employee Posting Group");
          "Posting Group" := Employee."Employee Posting Group";
        end;
        EmployeePostingGr.GET("Posting Group");

        DtldEmplLedgEntry.LOCKTABLE;
        EmployeeLedgerEntry.LOCKTABLE;

        InitEmployeeLedgerEntry(GenJnlLine,EmployeeLedgerEntry);

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := EmployeeLedgerEntry."Entry No.";
        CVLedgEntryBuf.CopyFromEmplLedgEntry(EmployeeLedgerEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,true);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        // Post application
        ApplyEmplLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Employee);

        // Post vendor entry
        EmployeeLedgerEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        EmployeeLedgerEntry."Amount to Apply" := 0;
        EmployeeLedgerEntry."Applies-to Doc. No." := '';
        EmployeeLedgerEntry.INSERT(true);

        // Post detailed employee entries
        DtldLedgEntryInserted := PostDtldEmplLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,EmployeePostingGr,true);

        // Posting GL Entry
        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);

        OnMoveGenJournalLine(EmployeeLedgerEntry.RECORDID);
      end;
    END;

    LOCAL PROCEDURE PostBankAcc@14(GenJnlLine@1005 : Record "Gen. Journal Line";Balancing@1006 : Boolean);
    VAR
      BankAcc@1000 : Record "Bank Account";
      BankAccLedgEntry@1004 : Record "Bank Account Ledger Entry";
      CheckLedgEntry@1003 : Record "Check Ledger Entry";
      CheckLedgEntry2@1002 : Record "Check Ledger Entry";
      BankAccPostingGr@1001 : Record "Bank Account Posting Group";
    BEGIN
      with GenJnlLine do begin
        BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,false);
        if "Currency Code" = '' then
          BankAcc.TESTFIELD("Currency Code",'')
        else
          if BankAcc."Currency Code" <> '' then
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        BankAcc.TESTFIELD("Bank Acc. Posting Group");
        BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

        BankAccLedgEntry.LOCKTABLE;

        InitBankAccLedgEntry(GenJnlLine,BankAccLedgEntry);

        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
        if BankAcc."Currency Code" <> '' then
          BankAccLedgEntry.Amount := Amount
        else
          BankAccLedgEntry.Amount := "Amount (LCY)";
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
        BankAccLedgEntry.Open := Amount <> 0;
        BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        BankAccLedgEntry.Positive := Amount > 0;
        BankAccLedgEntry.UpdateDebitCredit(Correction);
        BankAccLedgEntry.INSERT(true);

        if ((Amount <= 0) and ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") and "Check Printed") or
           ((Amount < 0) and ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
        then begin
          if BankAcc."Currency Code" <> "Currency Code" then
            ERROR(BankPaymentTypeMustNotBeFilledErr);
          case "Bank Payment Type" of
            "Bank Payment Type"::"Computer Check":
              begin
                TESTFIELD("Check Printed",true);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                if CheckLedgEntry.FINDSET then
                  repeat
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    CheckLedgEntry2.MODIFY;
                  until CheckLedgEntry.NEXT = 0;
              end;
            "Bank Payment Type"::"Manual Check":
              begin
                if "Document No." = '' then
                  ERROR(DocNoMustBeEnteredErr,"Bank Payment Type");
                CheckLedgEntry.RESET;
                if NextCheckEntryNo = 0 then begin
                  CheckLedgEntry.LOCKTABLE;
                  if CheckLedgEntry.FINDLAST then
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  else
                    NextCheckEntryNo := 1;
                end;

                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                if not CheckLedgEntry.ISEMPTY then
                  ERROR(CheckAlreadyExistsErr,"Document No.");

                InitCheckLedgEntry(BankAccLedgEntry,CheckLedgEntry);
                CheckLedgEntry."Bank Payment Type" := CheckLedgEntry."Bank Payment Type"::"Manual Check";
                if BankAcc."Currency Code" <> '' then
                  CheckLedgEntry.Amount := -Amount
                else
                  CheckLedgEntry.Amount := -"Amount (LCY)";
                CheckLedgEntry.INSERT(true);
                NextCheckEntryNo := NextCheckEntryNo + 1;
              end;
          end;
        end;

        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        CreateGLEntryBalAcc(
          GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
        DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(BankAccLedgEntry.RECORDID);
      end;
    END;

    LOCAL PROCEDURE PostFixedAsset@29(GenJnlLine@1009 : Record "Gen. Journal Line");
    VAR
      GLEntry@1010 : Record "G/L Entry";
      GLEntry2@1000 : Record "G/L Entry";
      TempFAGLPostBuf@1001 : TEMPORARY Record "FA G/L Posting Buffer";
      FAGLPostBuf@1011 : Record "FA G/L Posting Buffer";
      VATPostingSetup@1012 : Record "VAT Posting Setup";
      FAJnlPostLine@1013 : Codeunit "FA Jnl.-Post Line";
      FAAutomaticEntry@1003 : Codeunit "FA Automatic Entry";
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
      DimensionSetID@1008 : Integer;
      VATEntryGLEntryNo@1002 : Integer;
    BEGIN
      with GenJnlLine do begin
        InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",true,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        GLEntry2 := GLEntry;
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,GLEntry2.Amount,GLEntry2."VAT Amount",NextTransactionNo,NextEntryNo,GLReg."No.");
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        DimensionSetID := "Dimension Set ID";
        Correction2 := Correction;
      end;
      with TempFAGLPostBuf do
        if FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) then
          repeat
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := "FA Posting Group" <> '';
            CheckDimValueForDisposal(GenJnlLine,"Account No.");
            if "Original General Journal Line" then
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,GLEntry2."Additional-Currency Amount",true,true)
            else begin
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,0,false,true);
            end;
            FADimAlreadyChecked := false;
            GLEntry.CopyPostingGroupsFromGLEntry(GLEntry2);
            GLEntry."VAT Amount" := GLEntry2."VAT Amount";
            GLEntry."Bal. Account Type" := GLEntry2."Bal. Account Type";
            GLEntry."Bal. Account No." := GLEntry2."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            if "Net Disposal" then
              NetDisposalNo := NetDisposalNo + 1
            else
              NetDisposalNo := 0;
            if "Automatic Entry" and not "Net Disposal" then
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            if NetDisposalNo > 1 then
              GLEntry."VAT Amount" := 0;
            if "FA Posting Group" <> '' then begin
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            end;
            InsertGLEntry(GenJnlLine,GLEntry,true);
            if (VATEntryGLEntryNo = 0) and (GLEntry."Gen. Posting Type" <> GLEntry."Gen. Posting Type"::" ") then
              VATEntryGLEntryNo := GLEntry."Entry No.";
          until FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine."Dimension Set ID" := DimensionSetID;
      GenJnlLine.Correction := Correction2;
      GLEntry := GLEntry2;
      if VATEntryGLEntryNo = 0 then
        VATEntryGLEntryNo := GLEntry."Entry No.";
      TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);

      FAJnlPostLine.UpdateRegNo(GLReg."No.");
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE PostICPartner@63(GenJnlLine@1002 : Record "Gen. Journal Line");
    VAR
      ICPartner@1001 : Record "IC Partner";
      AccountNo@1000 : Code[20];
    BEGIN
      with GenJnlLine do begin
        if "Account No." <> ICPartner.Code then
          ICPartner.GET("Account No.");
        if ("Document Type" = "Document Type"::"Credit Memo") xor (Amount > 0) then begin
          ICPartner.TESTFIELD("Receivables Account");
          AccountNo := ICPartner."Receivables Account";
        end else begin
          ICPartner.TESTFIELD("Payables Account");
          AccountNo := ICPartner."Payables Account";
        end;

        CreateGLEntryBalAcc(
          GenJnlLine,AccountNo,"Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
      end;
    END;

    LOCAL PROCEDURE PostJob@78(GenJnlLine@1000 : Record "Gen. Journal Line";GLEntry@1002 : Record "G/L Entry");
    VAR
      JobPostLine@1001 : Codeunit "Job Post-Line";
    BEGIN
      if JobLine then begin
        JobLine := false;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry);
      end;
    END;

    [Internal]
    PROCEDURE StartPosting@24(GenJnlLine@1001 : Record "Gen. Journal Line");
    VAR
      GenJnlTemplate@1000 : Record "Gen. Journal Template";
      AccountingPeriod@1002 : Record "Accounting Period";
    BEGIN
      OnBeforePostGenJnlLine(GenJnlLine);

      with GenJnlLine do begin
        GlobalGLEntry.LOCKTABLE;
        if GlobalGLEntry.FINDLAST then begin
          NextEntryNo := GlobalGLEntry."Entry No." + 1;
          NextTransactionNo := GlobalGLEntry."Transaction No." + 1;
        end else begin
          NextEntryNo := 1;
          NextTransactionNo := 1;
        end;
        FirstTransactionNo := NextTransactionNo;

        InitLastDocDate(GenJnlLine);
        CurrentBalance := 0;

        AccountingPeriod.RESET;
        AccountingPeriod.SETCURRENTKEY(Closed);
        AccountingPeriod.SETRANGE(Closed,false);
        AccountingPeriod.FINDFIRST;
        FiscalYearStartDate := AccountingPeriod."Starting Date";

        GetGLSetup;

        if not GenJnlTemplate.GET("Journal Template Name") then
          GenJnlTemplate.INIT;

        VATEntry.LOCKTABLE;
        if VATEntry.FINDLAST then
          NextVATEntryNo := VATEntry."Entry No." + 1
        else
          NextVATEntryNo := 1;
        NextConnectionNo := 1;
        FirstNewVATEntryNo := NextVATEntryNo;

        GLReg.LOCKTABLE;
        if GLReg.FINDLAST then
          GLReg."No." := GLReg."No." + 1
        else
          GLReg."No." := 1;
        GLReg.INIT;
        GLReg."From Entry No." := NextEntryNo;
        GLReg."From VAT Entry No." := NextVATEntryNo;
        GLReg."Creation Date" := TODAY;
        GLReg."Source Code" := "Source Code";
        GLReg."Journal Batch Name" := "Journal Batch Name";
        GLReg."User ID" := USERID;
        IsGLRegInserted := false;

        OnAfterInitGLRegister(GLReg,GenJnlLine);

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");
      end;
    END;

    [Internal]
    PROCEDURE ContinuePosting@155(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      with GenJnlLine do begin
        if (LastDocType <> "Document Type") or (LastDocNo <> "Document No.") or
           (LastDate <> "Posting Date") or ((CurrentBalance = 0) and (TotalAddCurrAmount = 0)) and not "System-Created Entry"
        then begin
          CheckPostUnrealizedVAT(GenJnlLine,false);
          NextTransactionNo := NextTransactionNo + 1;
          InitLastDocDate(GenJnlLine);
          FirstNewVATEntryNo := NextVATEntryNo;
        end;

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");
      end;
    END;

    [Internal]
    PROCEDURE FinishPosting@25() IsTransactionConsistent : Boolean;
    VAR
      CostAccSetup@1003 : Record "Cost Accounting Setup";
      TransferGlEntriesToCA@1004 : Codeunit "Transfer GL Entries to CA";
    BEGIN
      IsTransactionConsistent :=
        (BalanceCheckAmount = 0) and (BalanceCheckAmount2 = 0) and
        (BalanceCheckAddCurrAmount = 0) and (BalanceCheckAddCurrAmount2 = 0);

      if TempGLEntryBuf.FINDSET then begin
        repeat
          GlobalGLEntry := TempGLEntryBuf;
          if AddCurrencyCode = '' then begin
            GlobalGLEntry."Additional-Currency Amount" := 0;
            GlobalGLEntry."Add.-Currency Debit Amount" := 0;
            GlobalGLEntry."Add.-Currency Credit Amount" := 0;
          end;
          GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
          GlobalGLEntry.INSERT(true);
          OnAfterInsertGlobalGLEntry(GlobalGLEntry);
        until TempGLEntryBuf.NEXT = 0;

        GLReg."To VAT Entry No." := NextVATEntryNo - 1;
        GLReg."To Entry No." := GlobalGLEntry."Entry No.";
        if IsTransactionConsistent then
          if IsGLRegInserted then
            GLReg.MODIFY
          else begin
            GLReg.INSERT;
            IsGLRegInserted := true;
          end;
      end;
      GlobalGLEntry.CONSISTENT(IsTransactionConsistent);

      if CostAccSetup.GET then
        if CostAccSetup."Auto Transfer from G/L" then
          TransferGlEntriesToCA.GetGLEntries;

      FirstEntryNo := 0;
    END;

    LOCAL PROCEDURE PostUnrealizedVAT@64(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if CheckUnrealizedCust then begin
        CustUnrealizedVAT(GenJnlLine,UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust);
        CheckUnrealizedCust := false;
      end;
      if CheckUnrealizedVend then begin
        VendUnrealizedVAT(GenJnlLine,UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend);
        CheckUnrealizedVend := false;
      end;
    END;

    LOCAL PROCEDURE CheckPostUnrealizedVAT@41(GenJnlLine@1000 : Record "Gen. Journal Line";CheckCurrentBalance@1001 : Boolean);
    BEGIN
      if CheckCurrentBalance and (CurrentBalance = 0) or not CheckCurrentBalance then
        PostUnrealizedVAT(GenJnlLine)
    END;

    LOCAL PROCEDURE InitGLEntry@3(GenJnlLine@1008 : Record "Gen. Journal Line";VAR GLEntry@1009 : Record "G/L Entry";GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      GLAcc@1007 : Record "G/L Account";
    BEGIN
      if GLAccNo <> '' then begin
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,false);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        if (not
            ((GLAccNo = GenJnlLine."Account No.") and
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) or
            ((GLAccNo = GenJnlLine."Bal. Account No.") and
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) and
           not FADimAlreadyChecked
        then
          CheckGLAccDimError(GenJnlLine,GLAccNo);
      end;

      GLEntry.INIT;
      GLEntry.CopyFromGenJnlLine(GenJnlLine);
      GLEntry."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry.Amount := Amount;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);
    END;

    LOCAL PROCEDURE InitGLEntryVAT@113(GenJnlLine@1004 : Record "Gen. Journal Line";AccNo@1003 : Code[20];BalAccNo@1008 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;UseAmtAddCurr@1007 : Boolean);
    VAR
      GLEntry@1005 : Record "G/L Entry";
    BEGIN
      if UseAmtAddCurr then
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,true,true)
      else begin
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,false,true);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
        GLEntry."Bal. Account No." := BalAccNo;
      end;
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    END;

    LOCAL PROCEDURE InitGLEntryVATCopy@116(GenJnlLine@1001 : Record "Gen. Journal Line";AccNo@1003 : Code[20];BalAccNo@1007 : Code[20];Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal;VATEntry@1008 : Record "VAT Entry") : Integer;
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,false,true);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);

      exit(GLEntry."Entry No.");
    END;

    [External]
    PROCEDURE InsertGLEntry@2(GenJnlLine@1001 : Record "Gen. Journal Line";GLEntry@1002 : Record "G/L Entry";CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      with GLEntry do begin
        TESTFIELD("G/L Account No.");

        if Amount <> ROUND(Amount) then
          FIELDERROR(
            Amount,
            STRSUBSTNO(NeedsRoundingErr,Amount));

        UpdateCheckAmounts(
          "Posting Date",Amount,"Additional-Currency Amount",
          BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2);

        UpdateDebitCredit(GenJnlLine.Correction);
      end;

      TempGLEntryBuf := GLEntry;

      OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine);

      TempGLEntryBuf.INSERT;

      if FirstEntryNo = 0 then
        FirstEntryNo := TempGLEntryBuf."Entry No.";
      NextEntryNo := NextEntryNo + 1;

      if CalcAddCurrResiduals then
        HandleAddCurrResidualGLEntry(GenJnlLine,GLEntry.Amount,GLEntry."Additional-Currency Amount");
    END;

    LOCAL PROCEDURE CreateGLEntry@112(GenJnlLine@1005 : Record "Gen. Journal Line";AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      if UseAmountAddCurr then
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,true,true)
      else begin
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,false,true);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
      end;
      InsertGLEntry(GenJnlLine,GLEntry,true);
    END;

    LOCAL PROCEDURE CreateGLEntryBalAcc@126(GenJnlLine@1005 : Record "Gen. Journal Line";AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;BalAccType@1008 : Option;BalAccNo@1007 : Code[20]);
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,true,true);
      GLEntry."Bal. Account Type" := BalAccType;
      GLEntry."Bal. Account No." := BalAccNo;
      InsertGLEntry(GenJnlLine,GLEntry,true);
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE CreateGLEntryGainLoss@26(GenJnlLine@1005 : Record "Gen. Journal Line";AccNo@1004 : Code[20];Amount@1003 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,true);
      InsertGLEntry(GenJnlLine,GLEntry,true);
    END;

    LOCAL PROCEDURE CreateGLEntryVAT@117(GenJnlLine@1004 : Record "Gen. Journal Line";AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record "Detailed CV Ledg. Entry Buffer");
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,false,true);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,true);
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATCollectAdj@110(GenJnlLine@1004 : Record "Gen. Journal Line";AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record "Detailed CV Ledg. Entry Buffer";VAR AdjAmount@1007 : ARRAY [4] OF Decimal);
    VAR
      GLEntry@1000 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,false,true);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,true);
      CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryFromVATEntry@22(GenJnlLine@1000 : Record "Gen. Journal Line";VATAccNo@1002 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1004 : Decimal;VATEntry@1005 : Record "VAT Entry");
    VAR
      GLEntry@1001 : Record "G/L Entry";
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,VATAccNo,Amount,0,false,true);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      InsertGLEntry(GenJnlLine,GLEntry,true);
    END;

    LOCAL PROCEDURE CreateDeferralScheduleFromGL@386(VAR GenJournalLine@1000 : Record "Gen. Journal Line";IsBalancing@1001 : Boolean);
    BEGIN
      with GenJournalLine do
        if ("Account No." <> '') and ("Deferral Code" <> '') then
          if (("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]) and ("Source Code" = GLSourceCode)) or
             ("Account Type" in ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
          then begin
            if not IsBalancing then
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJournalLine);
            DeferralUtilities.CreateScheduleFromGL(GenJournalLine,FirstEntryNo);
          end;
    END;

    LOCAL PROCEDURE UpdateCheckAmounts@98(PostingDate@1000 : Date;Amount@1005 : Decimal;AddCurrAmount@1006 : Decimal;VAR BalanceCheckAmount@1001 : Decimal;VAR BalanceCheckAmount2@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1003 : Decimal;VAR BalanceCheckAddCurrAmount2@1004 : Decimal);
    BEGIN
      if PostingDate = NORMALDATE(PostingDate) then begin
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((PostingDate - 00000101D) mod 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((PostingDate - 00000101D) mod 98 + 1);
      end else begin
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((NORMALDATE(PostingDate) - 00000101D + 50) mod 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((NORMALDATE(PostingDate) - 00000101D + 50) mod 98 + 1);
      end;

      if AddCurrencyCode <> '' then
        if PostingDate = NORMALDATE(PostingDate) then begin
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + AddCurrAmount * ((PostingDate - 00000101D) mod 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + AddCurrAmount * ((PostingDate - 00000101D) mod 98 + 1);
        end else begin
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 00000101D + 50) mod 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 00000101D + 50) mod 98 + 1);
        end
      else begin
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      end;
    END;

    LOCAL PROCEDURE CalcPmtDiscPossible@71(GenJnlLine@1000 : Record "Gen. Journal Line";VAR CVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer");
    BEGIN
      with GenJnlLine do
        if "Amount (LCY)" <> 0 then begin
          if (CVLedgEntryBuf."Pmt. Discount Date" >= CVLedgEntryBuf."Posting Date") or
             (CVLedgEntryBuf."Pmt. Discount Date" = 0D)
          then begin
            if GLSetup."Pmt. Disc. Excl. VAT" then begin
              if "Sales/Purch. (LCY)" = 0 then
                CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
                  ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
              else
                CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
            end else
              CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
            CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
              ROUND(
                CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,AmountRoundingPrecision);
          end;
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        end;
    END;

    LOCAL PROCEDURE CalcPmtTolerancePossible@72(GenJnlLine@1003 : Record "Gen. Journal Line";PmtDiscountDate@1001 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR MaxPaymentTolerance@1000 : Decimal);
    BEGIN
      with GenJnlLine do
        if "Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"] then begin
          if PmtDiscountDate <> 0D then
            PmtDiscToleranceDate :=
              CALCDATE(GLSetup."Payment Discount Grace Period",PmtDiscountDate)
          else
            PmtDiscToleranceDate := PmtDiscountDate;

          case "Account Type" of
            "Account Type"::Customer:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",1,MaxPaymentTolerance);
            "Account Type"::Vendor:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",-1,MaxPaymentTolerance);
          end;
        end;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1007 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1006 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1005 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1004 : Record "Gen. Journal Line";VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
    BEGIN
      if OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 then
        exit;

      PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
      PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
      PmtTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
      OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

      if NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode then
        PmtTolAddCurr := PmtTol
      else
        PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

      if not GLSetup."Pmt. Disc. Excl. VAT" and GLSetup."Adjust for Payment Disc." and (PmtTolLCY <> 0) then
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolLCY,PmtTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance",PmtTol,PmtTolLCY,PmtTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1002 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1003 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1004 : Record "Gen. Journal Line";PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
      MinimalPossibleLiability@1014 : Decimal;
      PaymentExceedsLiability@1005 : Boolean;
      ToleratedPaymentExceedsLiability@1013 : Boolean;
    BEGIN
      MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
      PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
      ToleratedPaymentExceedsLiability := ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;

      if (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,true,true) and
          ((OldCVLedgEntryBuf2."Amount to Apply" = 0) or PaymentExceedsLiability) or
          (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,false,false) and
           (OldCVLedgEntryBuf2."Amount to Apply" <> 0) and PaymentExceedsLiability and ToleratedPaymentExceedsLiability))
      then begin
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
          NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        if (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) and (AddCurrencyCode <> '') then
          PmtDiscAddCurr := PmtDisc
        else
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        if not GLSetup."Pmt. Disc. Excl. VAT" and GLSetup."Adjust for Payment Disc." and
           (PmtDiscLCY <> 0)
        then
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

        DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
      end;
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1003 : Record "Gen. Journal Line";VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry2@1011 : Record "VAT Entry";
      VATPostingSetup@1012 : Record "VAT Posting Setup";
      TaxJurisdiction@1013 : Record "Tax Jurisdiction";
      DtldCVLedgEntryBuf2@1015 : Record "Detailed CV Ledg. Entry Buffer";
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      LastConnectionNo@1026 : Integer;
      VATEntryModifier@1027 : Integer;
    BEGIN
      if OldCVLedgEntryBuf."Original Amt. (LCY)" = 0 then
        exit;

      if (AddCurrencyCode = '') or (AddCurrencyCode = OldCVLedgEntryBuf."Currency Code") then
        OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
      else
        OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");

      PmtDiscRounding := PmtDiscLCY2;
      PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
      if OriginalAmountAddCurr <> 0 then
        PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
      else
        PmtDiscFactorAddCurr := 0;
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      if OldCVLedgEntryBuf."Transaction No." = NextTransactionNo then
        VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
      if VATEntry2.FINDSET then begin
        TotalVATAmount := 0;
        LastConnectionNo := 0;
        repeat
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          if VATEntry2."VAT Calculation Type" =
             VATEntry2."VAT Calculation Type"::"Sales Tax"
          then begin
            TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
            VATPostingSetup."Adjust for Payment Discount" :=
              TaxJurisdiction."Adjust for Payment Discount";
          end;
          if VATPostingSetup."Adjust for Payment Discount" then begin
            if LastConnectionNo <> VATEntry2."Sales Tax Connection No." then begin
              if LastConnectionNo <> 0 then begin
                DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,false);
                InsertSummarizedVAT(GenJnlLine);
              end;

              CalcPmtDiscVATBases(VATEntry2,VATBase,VATBaseAddCurr);

              PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
              VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

              PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
              VATBaseAddCurr := ROUND(CalcLCYToAddCurr(VATBase),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

              DtldCVLedgEntryBuf2.INIT;
              DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
              DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf2.Amount := 0;
              DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
              DtldCVLedgEntryBuf2."Entry Type" := EntryType;
              case EntryType of
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  VATEntryModifier := 1000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  VATEntryModifier := 2000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  VATEntryModifier := 3000000;
              end;
              DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf2."User ID" := USERID;
              DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
              DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
              TotalVATAmount := 0;
              LastConnectionNo := VATEntry2."Sales Tax Connection No.";
            end;

            CalcPmtDiscVATAmounts(
              VATEntry2,VATBase,VATBaseAddCurr,VATAmount,VATAmountAddCurr,
              PmtDiscRounding,PmtDiscFactorLCY,PmtDiscLCY2,PmtDiscAddCurr2);

            TotalVATAmount := TotalVATAmount + VATAmount;

            if (PmtDiscAddCurr2 <> 0) and (PmtDiscLCY2 = 0) then begin
              VATAmountAddCurr := VATAmountAddCurr - PmtDiscAddCurr2;
              PmtDiscAddCurr2 := 0;
            end;

            // Post VAT
            // VAT for VAT entry
            if VATEntry2.Type <> 0 then
              InsertPmtDiscVATForVATEntry(
                GenJnlLine,TempVATEntry,VATEntry2,VATEntryModifier,
                VATAmount,VATAmountAddCurr,VATBase,VATBaseAddCurr,
                PmtDiscFactorLCY,PmtDiscFactorAddCurr);

            // VAT for G/L entry/entries
            InsertPmtDiscVATForGLEntry(
              GenJnlLine,DtldCVLedgEntryBuf,NewCVLedgEntryBuf,VATEntry2,
              VATPostingSetup,TaxJurisdiction,EntryType,VATAmount,VATAmountAddCurr);
          end;
        until VATEntry2.NEXT = 0;

        if LastConnectionNo <> 0 then begin
          DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
          DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,true);
          InsertSummarizedVAT(GenJnlLine);
        end;
      end;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1007 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1006 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1005 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1004 : Record "Gen. Journal Line";NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
    BEGIN
      if not OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" then
        exit;

      PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      PmtDiscTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

      if NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode then
        PmtDiscTolAddCurr := PmtDiscTol
      else
        PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

      if not GLSetup."Pmt. Disc. Excl. VAT" and GLSetup."Adjust for Payment Disc." and (PmtDiscTolLCY <> 0) then
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscTolLCY,PmtDiscTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance",PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDiscVATBases@118(VATEntry2@1001 : Record "VAT Entry";VAR VATBase@1002 : Decimal;VAR VATBaseAddCurr@1003 : Decimal);
    VAR
      VATEntry@1000 : Record "VAT Entry";
    BEGIN
      case VATEntry2."VAT Calculation Type" of
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          begin
            VATBase :=
              VATEntry2.Base + VATEntry2."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry2."Additional-Currency Base" +
              VATEntry2."Add.-Currency Unrealized Base";
          end;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          begin
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
            VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
            VATEntry := VATEntry2;
            repeat
              if VATEntry.Base < 0 then
                VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
              else
                VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
            until not VATEntry.FINDLAST;
            VATEntry.RESET;
            VATBase :=
              VATEntry.Base + VATEntry."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry."Additional-Currency Base" +
              VATEntry."Add.-Currency Unrealized Base";
          end;
      end;
    END;

    LOCAL PROCEDURE CalcPmtDiscVATAmounts@129(VATEntry2@1000 : Record "VAT Entry";VATBase@1001 : Decimal;VATBaseAddCurr@1007 : Decimal;VAR VATAmount@1002 : Decimal;VAR VATAmountAddCurr@1003 : Decimal;VAR PmtDiscRounding@1004 : Decimal;PmtDiscFactorLCY@1005 : Decimal;VAR PmtDiscLCY2@1006 : Decimal;VAR PmtDiscAddCurr2@1008 : Decimal);
    BEGIN
      case VATEntry2."VAT Calculation Type" of
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          if (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) or
             (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
          then begin
            if (VATBase = 0) and
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            then
              VATAmount := 0
            else begin
              PmtDiscRounding :=
                PmtDiscRounding +
                (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
              VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
            end;
            if (VATBaseAddCurr = 0) and
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            then
              VATAmountAddCurr := 0
            else begin
              VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
            end;
          end else begin
            VATAmount := 0;
            VATAmountAddCurr := 0;
          end;
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
          begin
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          end;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          if (VATEntry2.Type = VATEntry2.Type::Purchase) and VATEntry2."Use Tax" then begin
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          end else
            if (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) or
               (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
            then begin
              if VATBase = 0 then
                VATAmount := 0
              else begin
                PmtDiscRounding :=
                  PmtDiscRounding +
                  (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
              end;

              if VATBaseAddCurr = 0 then
                VATAmountAddCurr := 0
              else begin
                VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
              end;
            end else begin
              VATAmount := 0;
              VATAmountAddCurr := 0;
            end;
      end;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForVATEntry@43(GenJnlLine@1000 : Record "Gen. Journal Line";VAR TempVATEntry@1001 : TEMPORARY Record "VAT Entry";VATEntry2@1004 : Record "VAT Entry";VATEntryModifier@1002 : Integer;VATAmount@1005 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBase@1007 : Decimal;VATBaseAddCurr@1008 : Decimal;PmtDiscFactorLCY@1009 : Decimal;PmtDiscFactorAddCurr@1010 : Decimal);
    VAR
      TempVATEntryNo@1003 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",VATEntryModifier,VATEntryModifier + 999999);
      if TempVATEntry.FINDLAST then
        TempVATEntryNo := TempVATEntry."Entry No." + 1
      else
        TempVATEntryNo := VATEntryModifier + 1;
      TempVATEntry := VATEntry2;
      TempVATEntry."Entry No." := TempVATEntryNo;
      TempVATEntry."Posting Date" := GenJnlLine."Posting Date";
      TempVATEntry."Document No." := GenJnlLine."Document No.";
      TempVATEntry."External Document No." := GenJnlLine."External Document No.";
      TempVATEntry."Document Type" := GenJnlLine."Document Type";
      TempVATEntry."Source Code" := GenJnlLine."Source Code";
      TempVATEntry."Reason Code" := GenJnlLine."Reason Code";
      TempVATEntry."Transaction No." := NextTransactionNo;
      TempVATEntry."Sales Tax Connection No." := NextConnectionNo;
      TempVATEntry."Unrealized Amount" := 0;
      TempVATEntry."Unrealized Base" := 0;
      TempVATEntry."Remaining Unrealized Amount" := 0;
      TempVATEntry."Remaining Unrealized Base" := 0;
      TempVATEntry."User ID" := USERID;
      TempVATEntry."Closed by Entry No." := 0;
      TempVATEntry.Closed := false;
      TempVATEntry."Internal Ref. No." := '';
      TempVATEntry.Amount := VATAmount;
      TempVATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      TempVATEntry."VAT Difference" := 0;
      TempVATEntry."Add.-Curr. VAT Difference" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
      if VATEntry2."Tax on Tax" then begin
        TempVATEntry.Base :=
          ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
        TempVATEntry."Additional-Currency Base" :=
          ROUND(
            (VATEntry2."Additional-Currency Base" +
             VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
            AddCurrency."Amount Rounding Precision");
      end else begin
        TempVATEntry.Base := VATBase;
        TempVATEntry."Additional-Currency Base" := VATBaseAddCurr;
      end;

      if AddCurrencyCode = '' then begin
        TempVATEntry."Additional-Currency Base" := 0;
        TempVATEntry."Additional-Currency Amount" := 0;
        TempVATEntry."Add.-Currency Unrealized Amt." := 0;
        TempVATEntry."Add.-Currency Unrealized Base" := 0;
      end;
      TempVATEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForGLEntry@94(GenJnlLine@1000 : Record "Gen. Journal Line";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";VAR NewCVLedgEntryBuf@1003 : Record "CV Ledger Entry Buffer";VATEntry2@1004 : Record "VAT Entry";VAR VATPostingSetup@1005 : Record "VAT Posting Setup";VAR TaxJurisdiction@1008 : Record "Tax Jurisdiction";EntryType@1002 : Integer;VATAmount@1006 : Decimal;VATAmountAddCurr@1007 : Decimal);
    BEGIN
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
      case EntryType of
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
      end;
      DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      DtldCVLedgEntryBuf.Amount := 0;
      DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
      DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
      DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
      // The total payment discount in currency is posted on the entry made in
      // the function CalcPmtDisc.
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Use Additional-Currency Amount" := true;

      case VATEntry2.Type of
        VATEntry2.Type::Purchase:
          case VATEntry2."VAT Calculation Type" of
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              begin
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,true);
              end;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              begin
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetRevChargeAccount(false),'',
                  -VATAmount,-VATAmountAddCurr,false);
              end;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              if VATEntry2."Use Tax" then begin
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(false),'',
                  -VATAmount,-VATAmountAddCurr,false);
              end else begin
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,true);
              end;
          end;
        VATEntry2.Type::Sale:
          case VATEntry2."VAT Calculation Type" of
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              begin
                InitGLEntryVAT(
                  GenJnlLine,VATPostingSetup.GetSalesAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,true);
              end;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              ;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              begin
                InitGLEntryVAT(
                  GenJnlLine,TaxJurisdiction.GetSalesAccount(false),'',
                  VATAmount,VATAmountAddCurr,false);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,true);
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1003 : Record "Gen. Journal Line";ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      if ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) and
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) or
         (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
      then
        exit;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      if (ApplnRounding = 0) or (ABS(ApplnRounding) > ApplnRoundingPrecision) then
        exit;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding",ApplnRounding,ApplnRoundingLCY,ApplnRounding,0,0,0);
    END;

    LOCAL PROCEDURE FindAmtForAppln@6(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1002 : Record "CV Ledger Entry Buffer";VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal);
    BEGIN
      if OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' then begin
        if OldCVLedgEntryBuf2."Amount to Apply" <> 0 then begin
          if (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,false,false) and
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))
          then
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
          else
            AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply"
        end else
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      end else begin
        if OldCVLedgEntryBuf2."Amount to Apply" <> 0 then
          if (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,false,false) and
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) and
              (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
               ABS(
                 ABSMin(
                   OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",
                   OldCVLedgEntryBuf2."Amount to Apply")))) or
             OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance"
          then begin
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := false;
          end else
            AppliedAmount := GetAppliedAmountFromBuffers(NewCVLedgEntryBuf,OldCVLedgEntryBuf2)
        else
          AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
      end;

      if (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) and
         (ApplnRoundingPrecision <> 0) and
         (OldCVLedgEntryBuf2."Amount to Apply" <> 0)
      then
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      if NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" then begin
        AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      end else begin
        // Management of posting in multiple currencies
        if AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" then
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        else
          OldAppliedAmount :=
            CurrExchRate.ExchangeAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date");

        if NewCVLedgEntryBuf."Currency Code" <> '' then
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        else
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      end;
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1003 : Record "Gen. Journal Line";AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      DtldCustLedgEntry@1008 : Record "Detailed Cust. Ledg. Entry";
      DtldVendLedgEntry@1009 : Record "Detailed Vendor Ledg. Entry";
      UnRealizedGainLossLCY@1001 : Decimal;
    BEGIN
      if (CVLedgEntryBuf."Currency Code" = '') or (RemainingAmountBeforeAppln = 0) then
        exit;

      // Calculate Unrealized GainLoss
      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer then
        UnRealizedGainLossLCY :=
          ROUND(
            DtldCustLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
            ABS(AppliedAmount / RemainingAmountBeforeAppln))
      else
        UnRealizedGainLossLCY :=
          ROUND(
            DtldVendLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
            ABS(AppliedAmount / RemainingAmountBeforeAppln));

      if UnRealizedGainLossLCY <> 0 then
        if UnRealizedGainLossLCY < 0 then
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",0,-UnRealizedGainLossLCY,0,0,0,0)
        else
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",0,-UnRealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record "CV Ledger Entry Buffer";VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1002 : Record "Gen. Journal Line";AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
    BEGIN
      if CVLedgEntryBuf."Currency Code" = '' then
        exit;

      // Calculate Realized GainLoss
      RealizedGainLossLCY :=
        AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      if RealizedGainLossLCY <> 0 then
        if RealizedGainLossLCY < 0 then
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Loss",0,RealizedGainLossLCY,0,0,0,0)
        else
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Gain",0,RealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1003 : Record "Gen. Journal Line";AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record "CV Ledger Entry Buffer";PrevOldCVLedgEntryBuf@1007 : Record "CV Ledger Entry Buffer";VAR AllApplied@1009 : Boolean);
    BEGIN
      if AppliedAmount = 0 then
        exit;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevOldCVLedgEntryBuf."Max. Payment Tolerance");

      OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
      if not OldCVLedgEntryBuf.Open then
        OldCVLedgEntryBuf.SetClosedFields(
          NewCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          -OldAppliedAmount,-AppliedAmountLCY,NewCVLedgEntryBuf."Currency Code",-AppliedAmount)
      else
        AllApplied := false;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevNewCVLedgEntryBuf."Max. Payment Tolerance");

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      if not NewCVLedgEntryBuf.Open and not AllApplied then
        NewCVLedgEntryBuf.SetClosedFields(
          OldCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          AppliedAmount,AppliedAmountLCY,OldCVLedgEntryBuf."Currency Code",OldAppliedAmount);
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1003 : Record "Gen. Journal Line");
    VAR
      AdjustedAmountLCY@1005 : Decimal;
    BEGIN
      if CVLedgEntryBuf."Currency Code" = '' then
        exit;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      if AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" then begin
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,false);
      end;
    END;

    LOCAL PROCEDURE InitBankAccLedgEntry@59(GenJnlLine@1000 : Record "Gen. Journal Line";VAR BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry");
    BEGIN
      BankAccLedgEntry.INIT;
      BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      BankAccLedgEntry."Entry No." := NextEntryNo;
      BankAccLedgEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InitCheckLedgEntry@65(BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";VAR CheckLedgEntry@1001 : Record "Check Ledger Entry");
    BEGIN
      CheckLedgEntry.INIT;
      CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
      CheckLedgEntry."Entry No." := NextCheckEntryNo;
    END;

    LOCAL PROCEDURE InitCustLedgEntry@57(GenJnlLine@1000 : Record "Gen. Journal Line";VAR CustLedgEntry@1001 : Record "Cust. Ledger Entry");
    BEGIN
      CustLedgEntry.INIT;
      CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      CustLedgEntry."Entry No." := NextEntryNo;
      CustLedgEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InitVendLedgEntry@58(GenJnlLine@1001 : Record "Gen. Journal Line";VAR VendLedgEntry@1000 : Record "Vendor Ledger Entry");
    BEGIN
      VendLedgEntry.INIT;
      VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      VendLedgEntry."Entry No." := NextEntryNo;
      VendLedgEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InitEmployeeLedgerEntry@134(GenJnlLine@1001 : Record "Gen. Journal Line";VAR EmployeeLedgerEntry@1000 : Record "Employee Ledger Entry");
    BEGIN
      EmployeeLedgerEntry.INIT;
      EmployeeLedgerEntry.CopyFromGenJnlLine(GenJnlLine);
      EmployeeLedgerEntry."Entry No." := NextEntryNo;
      EmployeeLedgerEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntry@102(GenJnlLine@1003 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";VAR DtldCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry";Offset@1000 : Integer);
    BEGIN
      with DtldCustLedgEntry do begin
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntry@103(GenJnlLine@1000 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";VAR DtldVendLedgEntry@1004 : Record "Detailed Vendor Ledg. Entry";Offset@1002 : Integer);
    BEGIN
      with DtldVendLedgEntry do begin
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE InsertDtldEmplLedgEntry@143(GenJnlLine@1000 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";VAR DtldEmplLedgEntry@1004 : Record "Detailed Employee Ledger Entry";Offset@1002 : Integer);
    BEGIN
      with DtldEmplLedgEntry do begin
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1002 : Record "Gen. Journal Line";Cust@1003 : Record Customer);
    VAR
      OldCustLedgEntry@1005 : Record "Cust. Ledger Entry";
      OldCVLedgEntryBuf@1006 : Record "CV Ledger Entry Buffer";
      NewCustLedgEntry@1008 : Record "Cust. Ledger Entry";
      NewCVLedgEntryBuf2@1019 : Record "CV Ledger Entry Buffer";
      TempOldCustLedgEntry@1021 : TEMPORARY Record "Cust. Ledger Entry";
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
    BEGIN
      if NewCVLedgEntryBuf."Amount to Apply" = 0 then
        exit;

      AllApplied := true;
      if (GenJnlLine."Applies-to Doc. No." = '') and (GenJnlLine."Applies-to ID" = '') and
         not
         ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") and
          GenJnlLine."Allow Application")
      then
        exit;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      if not PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate) then
        exit;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      repeat
        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        OldCVLedgEntryBuf.CopyFromCustLedgEntry(TempOldCustLedgEntry);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Cust."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied);

        if not OldCVLedgEntryBuf.Open then begin
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        end;

        TempOldCustLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldCustLedgEntry := TempOldCustLedgEntry;
        OldCustLedgEntry."Applies-to ID" := '';
        OldCustLedgEntry."Amount to Apply" := 0;
        OldCustLedgEntry.MODIFY;

        if GLSetup."Unrealized VAT" or
           (GLSetup."Prepayment Unrealized VAT" and TempOldCustLedgEntry.Prepayment)
        then
          if IsNotPayment(TempOldCustLedgEntry."Document Type") then begin
            TempOldCustLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            CustUnrealizedVAT(
              GenJnlLine,
              TempOldCustLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          end;

        TempOldCustLedgEntry.DELETE;

        // Find the next old entry for application of the new entry
        if GenJnlLine."Applies-to Doc. No." <> '' then
          Completed := true
        else
          if TempOldCustLedgEntry.GETFILTER(Positive) <> '' then
            if TempOldCustLedgEntry.NEXT = 1 then
              Completed := false
            else begin
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            end
          else
            if NewCVLedgEntryBuf.Open then
              Completed := TempOldCustLedgEntry.NEXT = 0
            else
              Completed := true;
      until Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      if not NewCVLedgEntryBuf.Open then
        UpdateCalcInterest(NewCVLedgEntryBuf);

      if GLSetup."Unrealized VAT" or
         (GLSetup."Prepayment Unrealized VAT" and NewCVLedgEntryBuf.Prepayment)
      then
        if IsNotPayment(NewCVLedgEntryBuf."Document Type") and
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        then begin
          NewCustLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          CheckUnrealizedCust := true;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedCustLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        end;
    END;

    [External]
    PROCEDURE CustPostApplyCustLedgEntry@74(VAR GenJnlLinePostApply@1000 : Record "Gen. Journal Line";VAR CustLedgEntryPostApply@1001 : Record "Cust. Ledger Entry");
    VAR
      Cust@1002 : Record Customer;
      CustPostingGr@1007 : Record "Customer Posting Group";
      CustLedgEntry@1006 : Record "Cust. Ledger Entry";
      DtldCustLedgEntry@1003 : Record "Detailed Cust. Ledg. Entry";
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      CVLedgEntryBuf@1005 : Record "CV Ledger Entry Buffer";
      GenJnlLine@1008 : Record "Gen. Journal Line";
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      with GenJnlLine do begin
        "Source Currency Code" := CustLedgEntryPostApply."Currency Code";
        "Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        if NextEntryNo = 0 then
          StartPosting(GenJnlLine)
        else
          ContinuePosting(GenJnlLine);

        Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",true);

        if "Posting Group" = '' then begin
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        end;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);
        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry.MODIFY;

        // Post the Dtld customer entry
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,false);

        CheckPostUnrealizedVAT(GenJnlLine,true);

        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
        FinishPosting;
      end;
    END;

    LOCAL PROCEDURE PrepareTempCustLedgEntry@111(GenJnlLine@1000 : Record "Gen. Journal Line";VAR NewCVLedgEntryBuf@1015 : Record "CV Ledger Entry Buffer";VAR TempOldCustLedgEntry@1010 : TEMPORARY Record "Cust. Ledger Entry";Cust@1016 : Record Customer;VAR ApplyingDate@1001 : Date) : Boolean;
    VAR
      OldCustLedgEntry@1014 : Record "Cust. Ledger Entry";
      SalesSetup@1009 : Record "Sales & Receivables Setup";
      GenJnlApply@1008 : Codeunit "Gen. Jnl.-Apply";
      RemainingAmount@1002 : Decimal;
    BEGIN
      if GenJnlLine."Applies-to Doc. No." <> '' then begin
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE(Open,true);

        OldCustLedgEntry.FINDFIRST;
        OldCustLedgEntry.TESTFIELD(Positive,not NewCVLedgEntryBuf.Positive);
        if OldCustLedgEntry."Posting Date" > ApplyingDate then
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,true);
        TempOldCustLedgEntry := OldCustLedgEntry;
        TempOldCustLedgEntry.INSERT;
      end else begin
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,true);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        if not (Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") then
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        if Cust."Application Method" = Cust."Application Method"::"Apply to Oldest" then
          OldCustLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check Cust Ledger Entry and add to Temp.
        SalesSetup.GET;
        if SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None then
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        if OldCustLedgEntry.FINDSET(false,false) then
          repeat
            if GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,false)
            then begin
              if (OldCustLedgEntry."Posting Date" > ApplyingDate) and (OldCustLedgEntry."Applies-to ID" <> '') then
                ApplyingDate := OldCustLedgEntry."Posting Date";
              TempOldCustLedgEntry := OldCustLedgEntry;
              TempOldCustLedgEntry.INSERT;
            end;
          until OldCustLedgEntry.NEXT = 0;

        TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        if TempOldCustLedgEntry.FIND('-') then begin
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldCustLedgEntry.SETRANGE(Positive);
          TempOldCustLedgEntry.FIND('-');
          repeat
            TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldCustLedgEntry.RecalculateAmounts(
              TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            if PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,false,false) then
              TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldCustLedgEntry."Remaining Amount";
          until TempOldCustLedgEntry.NEXT = 0;
          TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        end else
          TempOldCustLedgEntry.SETRANGE(Positive);

        exit(TempOldCustLedgEntry.FIND('-'));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine@1000 : Record "Gen. Journal Line";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";CustPostingGr@1002 : Record "Customer Posting Group";LedgEntryInserted@1012 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1011 : TEMPORARY Record "Invoice Post. Buffer";
      DtldCustLedgEntry@1005 : Record "Detailed Cust. Ledg. Entry";
      AdjAmount@1003 : ARRAY [4] OF Decimal;
      DtldCustLedgEntryNoOffset@1006 : Integer;
      SaveEntryNo@1014 : Integer;
    BEGIN
      if GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Customer then
        exit;

      if DtldCustLedgEntry.FINDLAST then
        DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
      else
        DtldCustLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      if DtldCVLedgEntryBuf.FINDSET then begin
        if LedgEntryInserted then begin
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        end;
        repeat
          InsertDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldCustLedgEntry,DtldCustLedgEntryNoOffset);

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          // Post automatic entries.
          if ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) or
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) or
             ((AddCurrencyCode <> '') and (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          then
            PostDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,AdjAmount);
        until DtldCVLedgEntryBuf.NEXT = 0;
      end;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,CustPostingGr.GetReceivablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := not DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntry@82(GenJnlLine@1005 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1003 : Record "Detailed CV Ledg. Entry Buffer";CustPostingGr@1002 : Record "Customer Posting Group";VAR AdjAmount@1001 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1006 : Code[20];
    BEGIN
      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,0,false);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,false);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntryUnapply@114(GenJnlLine@1007 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";CustPostingGr@1000 : Record "Customer Posting Group";OriginalTransactionNo@1006 : Integer);
    VAR
      AdjAmount@1004 : ARRAY [4] OF Decimal;
      AccNo@1002 : Code[20];
    BEGIN
      if (DtldCVLedgEntryBuf."Amount (LCY)" = 0) and
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) and
         ((AddCurrencyCode = '') or (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      then
        exit;

      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,true);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Sale;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
    END;

    LOCAL PROCEDURE GetDtldCustLedgEntryAccNo@147(GenJnlLine@1007 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";CustPostingGr@1000 : Record "Customer Posting Group";OriginalTransactionNo@1006 : Integer;Unapply@1012 : Boolean) : Code[20];
    VAR
      GenPostingSetup@1005 : Record "General Posting Setup";
      Currency@1009 : Record Currency;
      AmountCondition@1002 : Boolean;
    BEGIN
      with DtldCVLedgEntryBuf do begin
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        case "Entry Type" of
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            begin
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              exit(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            end;
          "Entry Type"::"Payment Discount":
            exit(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            begin
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              exit(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Appln. Rounding":
            exit(CustPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            exit(CustPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            case GLSetup."Pmt. Disc. Tolerance Posting" of
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                exit(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                exit(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Payment Tolerance":
            case GLSetup."Payment Tolerance Posting" of
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                exit(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                exit(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            begin
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              case GLSetup."Payment Tolerance Posting" of
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  exit(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  exit(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              end;
            end;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            begin
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              case GLSetup."Pmt. Disc. Tolerance Posting" of
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  exit(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  exit(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              end;
            end;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            if Unapply then
              PostDtldCustVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          else
            FIELDERROR("Entry Type");
        end;
      end;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(GenJnlLine@1015 : Record "Gen. Journal Line";VAR CustLedgEntry2@1000 : Record "Cust. Ledger Entry";SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record "VAT Entry";
      TaxJurisdiction@1014 : Record "Tax Jurisdiction";
      VATPostingSetup@1017 : Record "VAT Posting Setup";
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountLast@1012 : Decimal;
      TotalUnrealVATAmountFirst@1013 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
      GLEntryNo@1016 : Integer;
    BEGIN
      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      if VATEntry2.FINDSET then
        repeat
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          if VATPostingSetup."Unrealized VAT Type" in
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          then
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          if VATPostingSetup."Unrealized VAT Type" in
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          then
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        until VATEntry2.NEXT = 0;
      if VATEntry2.FINDSET then begin
        LastConnectionNo := 0;
        repeat
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          if LastConnectionNo <> VATEntry2."Sales Tax Connection No." then begin
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          end;

          VATPart :=
            VATEntry2.GetUnrealizedVATPart(
              ROUND(SettledAmount / CustLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              CustLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          if VATPart > 0 then begin
            case VATEntry2."VAT Calculation Type" of
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                begin
                  SalesVATAccount := VATPostingSetup.GetSalesAccount(false);
                  SalesVATUnrealAccount := VATPostingSetup.GetSalesAccount(true);
                end;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                begin
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  SalesVATAccount := TaxJurisdiction.GetSalesAccount(false);
                  SalesVATUnrealAccount := TaxJurisdiction.GetSalesAccount(true);
                end;
            end;

            if VATPart = 1 then begin
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            end else begin
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            end;

            InitGLEntryVAT(
              GenJnlLine,SalesVATUnrealAccount,SalesVATAccount,-VATAmount,-VATAmountAddCurr,false);
            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,SalesVATAccount,SalesVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          end;
        until VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1002 : Record "Gen. Journal Line";Vend@1015 : Record Vendor);
    VAR
      OldVendLedgEntry@1005 : Record "Vendor Ledger Entry";
      OldCVLedgEntryBuf@1006 : Record "CV Ledger Entry Buffer";
      NewVendLedgEntry@1008 : Record "Vendor Ledger Entry";
      NewCVLedgEntryBuf2@1019 : Record "CV Ledger Entry Buffer";
      TempOldVendLedgEntry@1003 : TEMPORARY Record "Vendor Ledger Entry";
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
    BEGIN
      if NewCVLedgEntryBuf."Amount to Apply" = 0 then
        exit;

      AllApplied := true;
      if (GenJnlLine."Applies-to Doc. No." = '') and (GenJnlLine."Applies-to ID" = '') and
         not
         ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") and
          GenJnlLine."Allow Application")
      then
        exit;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      if not PrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry,Vend,ApplyingDate) then
        exit;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      repeat
        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        OldCVLedgEntryBuf.CopyFromVendLedgEntry(TempOldVendLedgEntry);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Vend."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied);

        // Update the Old Entry
        TempOldVendLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldVendLedgEntry := TempOldVendLedgEntry;
        OldVendLedgEntry."Applies-to ID" := '';
        OldVendLedgEntry."Amount to Apply" := 0;
        OldVendLedgEntry.MODIFY;

        if GLSetup."Unrealized VAT" or
           (GLSetup."Prepayment Unrealized VAT" and TempOldVendLedgEntry.Prepayment)
        then
          if IsNotPayment(TempOldVendLedgEntry."Document Type") then begin
            TempOldVendLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            VendUnrealizedVAT(
              GenJnlLine,
              TempOldVendLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          end;

        TempOldVendLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        if GenJnlLine."Applies-to Doc. No." <> '' then
          Completed := true
        else
          if TempOldVendLedgEntry.GETFILTER(Positive) <> '' then
            if TempOldVendLedgEntry.NEXT = 1 then
              Completed := false
            else begin
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            end
          else
            if NewCVLedgEntryBuf.Open then
              Completed := TempOldVendLedgEntry.NEXT = 0
            else
              Completed := true;
      until Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      if GLSetup."Unrealized VAT" or
         (GLSetup."Prepayment Unrealized VAT" and NewCVLedgEntryBuf.Prepayment)
      then
        if IsNotPayment(NewCVLedgEntryBuf."Document Type") and
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        then begin
          NewVendLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          CheckUnrealizedVend := true;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedVendLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        end;
    END;

    LOCAL PROCEDURE ApplyEmplLedgEntry@141(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";GenJnlLine@1002 : Record "Gen. Journal Line";Employee@1015 : Record Employee);
    VAR
      OldEmplLedgEntry@1005 : Record "Employee Ledger Entry";
      OldCVLedgEntryBuf@1006 : Record "CV Ledger Entry Buffer";
      NewCVLedgEntryBuf2@1019 : Record "CV Ledger Entry Buffer";
      TempOldEmplLedgEntry@1003 : TEMPORARY Record "Employee Ledger Entry";
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1004 : Decimal;
      AllApplied@1024 : Boolean;
    BEGIN
      if NewCVLedgEntryBuf."Amount to Apply" = 0 then
        exit;

      AllApplied := true;
      if (GenJnlLine."Applies-to Doc. No." = '') and (GenJnlLine."Applies-to ID" = '') and
         not
         ((Employee."Application Method" = Employee."Application Method"::"Apply to Oldest") and
          GenJnlLine."Allow Application")
      then
        exit;

      PmtTolAmtToBeApplied := 0;
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      if not PrepareTempEmplLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldEmplLedgEntry,Employee,ApplyingDate) then
        exit;

      GenJnlLine."Posting Date" := ApplyingDate;

      // Apply the new entry (Payment) to the old entries one at a time
      repeat
        TempOldEmplLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        OldCVLedgEntryBuf.CopyFromEmplLedgEntry(TempOldEmplLedgEntry);
        TempOldEmplLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          true,AllApplied,AppliedAmount,PmtTolAmtToBeApplied);

        // Update the Old Entry
        TempOldEmplLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldEmplLedgEntry := TempOldEmplLedgEntry;
        OldEmplLedgEntry."Applies-to ID" := '';
        OldEmplLedgEntry."Amount to Apply" := 0;
        OldEmplLedgEntry.MODIFY;

        TempOldEmplLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        if GenJnlLine."Applies-to Doc. No." <> '' then
          Completed := true
        else
          if TempOldEmplLedgEntry.GETFILTER(Positive) <> '' then
            if TempOldEmplLedgEntry.NEXT = 1 then
              Completed := false
            else begin
              TempOldEmplLedgEntry.SETRANGE(Positive);
              TempOldEmplLedgEntry.FIND('-');
              TempOldEmplLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldEmplLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            end
          else
            if NewCVLedgEntryBuf.Open then
              Completed := TempOldEmplLedgEntry.NEXT = 0
            else
              Completed := true;
      until Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;
    END;

    [Internal]
    PROCEDURE VendPostApplyVendLedgEntry@66(VAR GenJnlLinePostApply@1000 : Record "Gen. Journal Line";VAR VendLedgEntryPostApply@1001 : Record "Vendor Ledger Entry");
    VAR
      Vend@1002 : Record Vendor;
      VendPostingGr@1007 : Record "Vendor Posting Group";
      VendLedgEntry@1006 : Record "Vendor Ledger Entry";
      DtldVendLedgEntry@1003 : Record "Detailed Vendor Ledg. Entry";
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      CVLedgEntryBuf@1005 : Record "CV Ledger Entry Buffer";
      GenJnlLine@1008 : Record "Gen. Journal Line";
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      with GenJnlLine do begin
        "Source Currency Code" := VendLedgEntryPostApply."Currency Code";
        "Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        if NextEntryNo = 0 then
          StartPosting(GenJnlLine)
        else
          ContinuePosting(GenJnlLine);

        Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",true);

        if "Posting Group" = '' then begin
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        end;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        ApplyVendLedgEntry(
          CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend);
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry.MODIFY(true);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,false);

        CheckPostUnrealizedVAT(GenJnlLine,true);

        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting;
      end;
    END;

    [Internal]
    PROCEDURE EmplPostApplyEmplLedgEntry@138(VAR GenJnlLinePostApply@1000 : Record "Gen. Journal Line";VAR EmplLedgEntryPostApply@1001 : Record "Employee Ledger Entry");
    VAR
      Empl@1002 : Record Employee;
      EmplPostingGr@1007 : Record "Employee Posting Group";
      EmplLedgEntry@1006 : Record "Employee Ledger Entry";
      DtldEmplLedgEntry@1003 : Record "Detailed Employee Ledger Entry";
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record "Detailed CV Ledg. Entry Buffer";
      CVLedgEntryBuf@1005 : Record "CV Ledger Entry Buffer";
      GenJnlLine@1008 : Record "Gen. Journal Line";
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      EmplLedgEntry.TRANSFERFIELDS(EmplLedgEntryPostApply);
      with GenJnlLine do begin
        "Source Currency Code" := EmplLedgEntryPostApply."Currency Code";
        "Applies-to ID" := EmplLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        if NextEntryNo = 0 then
          StartPosting(GenJnlLine)
        else
          ContinuePosting(GenJnlLine);

        Empl.GET(EmplLedgEntry."Employee No.");

        if "Posting Group" = '' then begin
          Empl.TESTFIELD("Employee Posting Group");
          "Posting Group" := Empl."Employee Posting Group";
        end;
        EmplPostingGr.GET("Posting Group");
        EmplPostingGr.GetPayablesAccount;

        DtldEmplLedgEntry.LOCKTABLE;
        EmplLedgEntry.LOCKTABLE;

        // Post the application
        EmplLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromEmplLedgEntry(EmplLedgEntry);
        ApplyEmplLedgEntry(
          CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Empl);
        EmplLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        EmplLedgEntry.MODIFY(true);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldEmplLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,EmplPostingGr,false);

        CheckPostUnrealizedVAT(GenJnlLine,true);

        if DtldLedgEntryInserted then
          if IsTempGLEntryBufEmpty then
            DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting;
      end;
    END;

    LOCAL PROCEDURE PrepareTempVendLedgEntry@119(GenJnlLine@1004 : Record "Gen. Journal Line";VAR NewCVLedgEntryBuf@1003 : Record "CV Ledger Entry Buffer";VAR TempOldVendLedgEntry@1002 : TEMPORARY Record "Vendor Ledger Entry";Vend@1001 : Record Vendor;VAR ApplyingDate@1000 : Date) : Boolean;
    VAR
      OldVendLedgEntry@1018 : Record "Vendor Ledger Entry";
      PurchSetup@1013 : Record "Purchases & Payables Setup";
      GenJnlApply@1012 : Codeunit "Gen. Jnl.-Apply";
      RemainingAmount@1009 : Decimal;
    BEGIN
      if GenJnlLine."Applies-to Doc. No." <> '' then begin
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,true);
        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,not NewCVLedgEntryBuf.Positive);
        if OldVendLedgEntry."Posting Date" > ApplyingDate then
          ApplyingDate := OldVendLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,true);
        TempOldVendLedgEntry := OldVendLedgEntry;
        TempOldVendLedgEntry.INSERT;
      end else begin
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,true);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        if not (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") then
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        if Vend."Application Method" = Vend."Application Method"::"Apply to Oldest" then
          OldVendLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check and Move Ledger Entries to Temp
        PurchSetup.GET;
        if PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None then
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        if OldVendLedgEntry.FINDSET(false,false) then
          repeat
            if GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,false)
            then begin
              if (OldVendLedgEntry."Posting Date" > ApplyingDate) and (OldVendLedgEntry."Applies-to ID" <> '') then
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;
              TempOldVendLedgEntry.INSERT;
            end;
          until OldVendLedgEntry.NEXT = 0;

        TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        if TempOldVendLedgEntry.FIND('-') then begin
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldVendLedgEntry.SETRANGE(Positive);
          TempOldVendLedgEntry.FIND('-');
          repeat
            TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldVendLedgEntry.RecalculateAmounts(
              TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            if PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,false,false) then
              TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldVendLedgEntry."Remaining Amount";
          until TempOldVendLedgEntry.NEXT = 0;
          TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        end else
          TempOldVendLedgEntry.SETRANGE(Positive);
        exit(TempOldVendLedgEntry.FIND('-'));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE PrepareTempEmplLedgEntry@145(GenJnlLine@1004 : Record "Gen. Journal Line";VAR NewCVLedgEntryBuf@1003 : Record "CV Ledger Entry Buffer";VAR TempOldEmplLedgEntry@1002 : TEMPORARY Record "Employee Ledger Entry";Employee@1001 : Record Employee;VAR ApplyingDate@1000 : Date) : Boolean;
    VAR
      OldEmplLedgEntry@1018 : Record "Employee Ledger Entry";
      RemainingAmount@1009 : Decimal;
    BEGIN
      if GenJnlLine."Applies-to Doc. No." <> '' then begin
        // Find the entry to be applied to
        OldEmplLedgEntry.RESET;
        OldEmplLedgEntry.SETCURRENTKEY("Document No.");
        OldEmplLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldEmplLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldEmplLedgEntry.SETRANGE("Employee No.",NewCVLedgEntryBuf."CV No.");
        OldEmplLedgEntry.SETRANGE(Open,true);
        OldEmplLedgEntry.FINDFIRST;
        OldEmplLedgEntry.TESTFIELD(Positive,not NewCVLedgEntryBuf.Positive);
        if OldEmplLedgEntry."Posting Date" > ApplyingDate then
          ApplyingDate := OldEmplLedgEntry."Posting Date";
        TempOldEmplLedgEntry := OldEmplLedgEntry;
        TempOldEmplLedgEntry.INSERT;
      end else begin
        // Find the first old entry which the new entry (Payment) should apply to
        OldEmplLedgEntry.RESET;
        OldEmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open,Positive);
        TempOldEmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open,Positive);
        OldEmplLedgEntry.SETRANGE("Employee No.",NewCVLedgEntryBuf."CV No.");
        OldEmplLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldEmplLedgEntry.SETRANGE(Open,true);
        OldEmplLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        if not (Employee."Application Method" = Employee."Application Method"::"Apply to Oldest") then
          OldEmplLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        if Employee."Application Method" = Employee."Application Method"::"Apply to Oldest" then
          OldEmplLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        OldEmplLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        if OldEmplLedgEntry.FINDSET(false,false) then
          repeat
            if (OldEmplLedgEntry."Posting Date" > ApplyingDate) and (OldEmplLedgEntry."Applies-to ID" <> '') then
              ApplyingDate := OldEmplLedgEntry."Posting Date";
            TempOldEmplLedgEntry := OldEmplLedgEntry;
            TempOldEmplLedgEntry.INSERT;
          until OldEmplLedgEntry.NEXT = 0;

        TempOldEmplLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        if TempOldEmplLedgEntry.FIND('-') then begin
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldEmplLedgEntry.SETRANGE(Positive);
          TempOldEmplLedgEntry.FIND('-');
          repeat
            TempOldEmplLedgEntry.CALCFIELDS("Remaining Amount");
            RemainingAmount += TempOldEmplLedgEntry."Remaining Amount";
          until TempOldEmplLedgEntry.NEXT = 0;
          TempOldEmplLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        end else
          TempOldEmplLedgEntry.SETRANGE(Positive);
        exit(TempOldEmplLedgEntry.FIND('-'));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine@1000 : Record "Gen. Journal Line";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";VendPostingGr@1002 : Record "Vendor Posting Group";LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record "Invoice Post. Buffer";
      DtldVendLedgEntry@1004 : Record "Detailed Vendor Ledg. Entry";
      AdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldVendLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
    BEGIN
      if GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor then
        exit;

      if DtldVendLedgEntry.FINDLAST then
        DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
      else
        DtldVendLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      if DtldCVLedgEntryBuf.FINDSET then begin
        if LedgEntryInserted then begin
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        end;
        repeat
          InsertDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldVendLedgEntry,DtldVendLedgEntryNoOffset);

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          // Post automatic entries.
          if ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) or
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) or
             ((AddCurrencyCode <> '') and (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          then
            PostDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,AdjAmount);
        until DtldCVLedgEntryBuf.NEXT = 0;
      end;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,VendPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := not DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntry@81(GenJnlLine@1000 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";VendPostingGr@1006 : Record "Vendor Posting Group";VAR AdjAmount@1003 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1005 : Code[20];
    BEGIN
      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,0,false);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,false);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntryUnapply@69(GenJnlLine@1007 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";VendPostingGr@1000 : Record "Vendor Posting Group";OriginalTransactionNo@1006 : Integer);
    VAR
      AccNo@1002 : Code[20];
      AdjAmount@1003 : ARRAY [4] OF Decimal;
    BEGIN
      if (DtldCVLedgEntryBuf."Amount (LCY)" = 0) and
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) and
         ((AddCurrencyCode = '') or (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      then
        exit;

      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,true);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
    END;

    LOCAL PROCEDURE GetDtldVendLedgEntryAccNo@56(GenJnlLine@1000 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";VendPostingGr@1006 : Record "Vendor Posting Group";OriginalTransactionNo@1003 : Integer;Unapply@1001 : Boolean) : Code[20];
    VAR
      Currency@1008 : Record Currency;
      GenPostingSetup@1007 : Record "General Posting Setup";
      AmountCondition@1004 : Boolean;
    BEGIN
      with DtldCVLedgEntryBuf do begin
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        case "Entry Type" of
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            begin
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              exit(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            end;
          "Entry Type"::"Payment Discount":
            exit(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            begin
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              exit(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Appln. Rounding":
            exit(VendPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            exit(VendPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            case GLSetup."Pmt. Disc. Tolerance Posting" of
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                exit(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                exit(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Payment Tolerance":
            case GLSetup."Payment Tolerance Posting" of
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                exit(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                exit(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            end;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            begin
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              case GLSetup."Payment Tolerance Posting" of
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  exit(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  exit(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              end;
            end;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            begin
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              case GLSetup."Pmt. Disc. Tolerance Posting" of
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  exit(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  exit(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              end;
            end;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            if Unapply then
              PostDtldVendVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          else
            FIELDERROR("Entry Type");
        end;
      end;
    END;

    LOCAL PROCEDURE PostDtldEmplLedgEntries@148(GenJnlLine@1000 : Record "Gen. Journal Line";VAR DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";EmplPostingGr@1002 : Record "Employee Posting Group";LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record "Invoice Post. Buffer";
      DtldEmplLedgEntry@1004 : Record "Detailed Employee Ledger Entry";
      DummyAdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldEmplLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
    BEGIN
      if GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Employee then
        exit;

      if DtldEmplLedgEntry.FINDLAST then
        DtldEmplLedgEntryNoOffset := DtldEmplLedgEntry."Entry No."
      else
        DtldEmplLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      if DtldCVLedgEntryBuf.FINDSET then begin
        if LedgEntryInserted then begin
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        end;
        repeat
          InsertDtldEmplLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldEmplLedgEntry,DtldEmplLedgEntryNoOffset);

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");
        until DtldCVLedgEntryBuf.NEXT = 0;
      end;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,DummyAdjAmount,SaveEntryNo,EmplPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := not DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCVLedgEntry@15(GenJnlLine@1000 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";AccNo@1002 : Code[20];VAR AdjAmount@1004 : ARRAY [4] OF Decimal;Unapply@1005 : Boolean);
    BEGIN
      with DtldCVLedgEntryBuf do
        case "Entry Type" of
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            begin
              CreateGLEntryGainLoss(GenJnlLine,AccNo,-"Amount (LCY)","Currency Code" = AddCurrencyCode);
              if not Unapply then
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            end;
          "Entry Type"::"Payment Discount",
          "Entry Type"::"Payment Tolerance",
          "Entry Type"::"Payment Discount Tolerance":
            begin
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",false);
              if not Unapply then
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            end;
          "Entry Type"::"Payment Discount (VAT Excl.)",
          "Entry Type"::"Payment Tolerance (VAT Excl.)",
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            begin
              if not Unapply then
                CreateGLEntryVATCollectAdj(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  AdjAmount)
              else
                CreateGLEntryVAT(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf);
            end;
          "Entry Type"::"Appln. Rounding":
            if "Amount (LCY)" <> 0 then begin
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",true);
              if not Unapply then
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            end;
          "Entry Type"::"Correction of Remaining Amount":
            if "Amount (LCY)" <> 0 then begin
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",0,false);
              if not Unapply then
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            end;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            ;
          else
            FIELDERROR("Entry Type");
        end;
    END;

    LOCAL PROCEDURE PostDtldCustVATAdjustment@75(GenJnlLine@1003 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1005 : Record "VAT Posting Setup";
      TaxJurisdiction@1004 : Record "Tax Jurisdiction";
    BEGIN
      with DtldCVLedgEntryBuf do begin
        FindVATEntry(VATEntry,OriginalTransactionNo);

        case VATPostingSetup."VAT Calculation Type" of
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            begin
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetSalesAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
            end;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            ;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            begin
              TESTFIELD("Tax Jurisdiction Code");
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              CreateGLEntry(
                GenJnlLine,TaxJurisdiction.GetPurchAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE PostDtldVendVATAdjustment@73(GenJnlLine@1004 : Record "Gen. Journal Line";DtldCVLedgEntryBuf@1002 : Record "Detailed CV Ledg. Entry Buffer";OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1003 : Record "VAT Posting Setup";
      TaxJurisdiction@1005 : Record "Tax Jurisdiction";
    BEGIN
      with DtldCVLedgEntryBuf do begin
        FindVATEntry(VATEntry,OriginalTransactionNo);

        case VATPostingSetup."VAT Calculation Type" of
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            begin
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
            end;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            begin
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetRevChargeAccount(false),"Amount (LCY)","Additional-Currency Amount",false);
            end;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            begin
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              if "Use Tax" then begin
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetRevChargeAccount(false),"Amount (LCY)","Additional-Currency Amount",false);
              end else
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(false),-"Amount (LCY)",-"Additional-Currency Amount",false);
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(GenJnlLine@1017 : Record "Gen. Journal Line";VAR VendLedgEntry2@1000 : Record "Vendor Ledger Entry";SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record "VAT Entry";
      TaxJurisdiction@1016 : Record "Tax Jurisdiction";
      VATPostingSetup@1019 : Record "VAT Posting Setup";
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountFirst@1014 : Decimal;
      TotalUnrealVATAmountLast@1015 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
      GLEntryNo@1018 : Integer;
    BEGIN
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      if VATEntry2.FINDSET then
        repeat
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          if VATPostingSetup."Unrealized VAT Type" in
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          then
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          if VATPostingSetup."Unrealized VAT Type" in
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          then
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        until VATEntry2.NEXT = 0;
      if VATEntry2.FINDSET then begin
        LastConnectionNo := 0;
        repeat
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          if LastConnectionNo <> VATEntry2."Sales Tax Connection No." then begin
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          end;

          VATPart :=
            VATEntry2.GetUnrealizedVATPart(
              ROUND(SettledAmount / VendLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              VendLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          if VATPart > 0 then begin
            case VATEntry2."VAT Calculation Type" of
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                begin
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(false);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(true);
                end;
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                begin
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(false);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(true);
                  PurchReverseAccount := VATPostingSetup.GetRevChargeAccount(false);
                  PurchReverseUnrealAccount := VATPostingSetup.GetRevChargeAccount(true);
                end;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                if (VATEntry2.Type = VATEntry2.Type::Purchase) and VATEntry2."Use Tax" then begin
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(false);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(true);
                  PurchReverseAccount := TaxJurisdiction.GetRevChargeAccount(false);
                  PurchReverseUnrealAccount := TaxJurisdiction.GetRevChargeAccount(true);
                end else begin
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(false);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(true);
                end;
            end;

            if VATPart = 1 then begin
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            end else begin
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            end;

            InitGLEntryVAT(
              GenJnlLine,PurchVATUnrealAccount,PurchVATAccount,-VATAmount,-VATAmountAddCurr,false);
            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,PurchVATAccount,PurchVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            if (VATEntry2."VAT Calculation Type" =
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") or
               ((VATEntry2."VAT Calculation Type" =
                 VATEntry2."VAT Calculation Type"::"Sales Tax") and
                (VATEntry2.Type = VATEntry2.Type::Purchase) and VATEntry2."Use Tax")
            then begin
              InitGLEntryVAT(
                GenJnlLine,PurchReverseUnrealAccount,PurchReverseAccount,VATAmount,VATAmountAddCurr,false);
              GLEntryNo :=
                InitGLEntryVATCopy(GenJnlLine,PurchReverseAccount,PurchReverseUnrealAccount,-VATAmount,-VATAmountAddCurr,VATEntry2);
            end;

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          end;
        until VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostUnrealVATEntry@5(GenJnlLine@1002 : Record "Gen. Journal Line";VAR VATEntry2@1000 : Record "VAT Entry";VATAmount@1003 : Decimal;VATBase@1004 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBaseAddCurr@1005 : Decimal;GLEntryNo@1001 : Integer);
    BEGIN
      VATEntry.LOCKTABLE;
      VATEntry := VATEntry2;
      VATEntry."Entry No." := NextVATEntryNo;
      VATEntry."Posting Date" := GenJnlLine."Posting Date";
      VATEntry."Document No." := GenJnlLine."Document No.";
      VATEntry."External Document No." := GenJnlLine."External Document No.";
      VATEntry."Document Type" := GenJnlLine."Document Type";
      VATEntry.Amount := VATAmount;
      VATEntry.Base := VATBase;
      VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      VATEntry."Additional-Currency Base" := VATBaseAddCurr;
      VATEntry.SetUnrealAmountsToZero;
      VATEntry."User ID" := USERID;
      VATEntry."Source Code" := GenJnlLine."Source Code";
      VATEntry."Reason Code" := GenJnlLine."Reason Code";
      VATEntry."Closed by Entry No." := 0;
      VATEntry.Closed := false;
      VATEntry."Transaction No." := NextTransactionNo;
      VATEntry."Sales Tax Connection No." := NextConnectionNo;
      VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
      VATEntry.INSERT(true);
      GLEntryVATEntryLink.InsertLink(GLEntryNo + 1,NextVATEntryNo);
      NextVATEntryNo := NextVATEntryNo + 1;

      VATEntry2."Remaining Unrealized Amount" :=
        VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
      VATEntry2."Remaining Unrealized Base" :=
        VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
      VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
      VATEntry2.MODIFY;
    END;

    LOCAL PROCEDURE PostApply@105(GenJnlLine@1007 : Record "Gen. Journal Line";VAR DtldCVLedgEntryBuf@1008 : Record "Detailed CV Ledg. Entry Buffer";VAR OldCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR NewCVLedgEntryBuf@1005 : Record "CV Ledger Entry Buffer";VAR NewCVLedgEntryBuf2@1013 : Record "CV Ledger Entry Buffer";BlockPaymentTolerance@1006 : Boolean;AllApplied@1009 : Boolean;VAR AppliedAmount@1016 : Decimal;VAR PmtTolAmtToBeApplied@1010 : Decimal);
    VAR
      OldCVLedgEntryBuf2@1003 : Record "CV Ledger Entry Buffer";
      OldCVLedgEntryBuf3@1002 : Record "CV Ledger Entry Buffer";
      OldRemainingAmtBeforeAppln@1001 : Decimal;
      ApplnRoundingPrecision@1004 : Decimal;
      AppliedAmountLCY@1012 : Decimal;
      OldAppliedAmount@1011 : Decimal;
    BEGIN
      OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
      OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

      // Management of posting in multiple currencies
      OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
      OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      OldCVLedgEntryBuf2.RecalculateAmounts(
        OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

      if not BlockPaymentTolerance then
        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

      CalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

      if not BlockPaymentTolerance then
        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          NextTransactionNo,FirstNewVATEntryNo);

      CalcCurrencyApplnRounding(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
        GenJnlLine,ApplnRoundingPrecision);

      FindAmtForAppln(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

      CalcCurrencyUnrealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

      CalcCurrencyRealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

      CalcCurrencyRealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

      CalcApplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
        NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

      PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

      CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    END;

    [External]
    PROCEDURE UnapplyCustLedgEntry@109(GenJnlLine2@1004 : Record "Gen. Journal Line";DtldCustLedgEntry@1003 : Record "Detailed Cust. Ledg. Entry");
    VAR
      Cust@1006 : Record Customer;
      CustPostingGr@1019 : Record "Customer Posting Group";
      GenJnlLine@1021 : Record "Gen. Journal Line";
      DtldCustLedgEntry2@1013 : Record "Detailed Cust. Ledg. Entry";
      NewDtldCustLedgEntry@1012 : Record "Detailed Cust. Ledg. Entry";
      CustLedgEntry@1011 : Record "Cust. Ledger Entry";
      DtldCVLedgEntryBuf@1010 : Record "Detailed CV Ledg. Entry Buffer";
      VATEntry@1009 : Record "VAT Entry";
      TempVATEntry2@1023 : TEMPORARY Record "VAT Entry";
      CurrencyLCY@1024 : Record Currency;
      TempInvPostBuf@1002 : TEMPORARY Record "Invoice Post. Buffer";
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      if GenJnlLine."Document Date" = 0D then
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      if NextEntryNo = 0 then
        StartPosting(GenJnlLine)
      else
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,GenJnlLine2."Document Type"::Payment,true);
      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.GetReceivablesAccount;

      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      if DtldCustLedgEntry."Transaction No." = 0 then begin
        DtldCustLedgEntry2.SETCURRENTKEY("Application No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Application No.",DtldCustLedgEntry."Application No.");
      end else begin
        DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      end;
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      if DtldCustLedgEntry."Transaction No." <> 0 then begin
        UnapplyVATEntries := false;
        DtldCustLedgEntry2.FINDSET;
        repeat
          DtldCustLedgEntry2.TESTFIELD(Unapplied,false);
          if IsVATAdjustment(DtldCustLedgEntry2."Entry Type") then
            UnapplyVATEntries := true
        until DtldCustLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Sale,
          DtldCustLedgEntry."Customer No.",DtldCustLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldCustLedgEntry2.FINDSET;
        repeat
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldCustLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
        until DtldCustLedgEntry2.NEXT = 0;
      end;

      // Look one more time
      DtldCustLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      repeat
        DtldCustLedgEntry2.TESTFIELD(Unapplied,false);
        InsertDtldCustLedgEntryUnapply(GenJnlLine,NewDtldCustLedgEntry,DtldCustLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        if (DtldCustLedgEntry2."Transaction No." <> 0) and IsVATExcluded(DtldCustLedgEntry2."Entry Type") then begin
          UnapplyExcludedVAT(
            TempVATEntry2,DtldCustLedgEntry2."Transaction No.",DtldCustLedgEntry2."VAT Bus. Posting Group",
            DtldCustLedgEntry2."VAT Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        end;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        if not (DtldCVLedgEntryBuf."Entry Type" in [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        then
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldCustLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,DtldCustLedgEntry2."Transaction No.");

        DtldCustLedgEntry2.Unapplied := true;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        UpdateCustLedgEntry(DtldCustLedgEntry2);
      until DtldCustLedgEntry2.NEXT = 0;

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);

      if IsTempGLEntryBufEmpty then
        DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,true);
      FinishPosting;
    END;

    [External]
    PROCEDURE UnapplyVendLedgEntry@108(GenJnlLine2@1003 : Record "Gen. Journal Line";DtldVendLedgEntry@1002 : Record "Detailed Vendor Ledg. Entry");
    VAR
      Vend@1005 : Record Vendor;
      VendPostingGr@1019 : Record "Vendor Posting Group";
      GenJnlLine@1021 : Record "Gen. Journal Line";
      DtldVendLedgEntry2@1012 : Record "Detailed Vendor Ledg. Entry";
      NewDtldVendLedgEntry@1011 : Record "Detailed Vendor Ledg. Entry";
      VendLedgEntry@1010 : Record "Vendor Ledger Entry";
      DtldCVLedgEntryBuf@1009 : Record "Detailed CV Ledg. Entry Buffer";
      VATEntry@1008 : Record "VAT Entry";
      TempVATEntry2@1023 : TEMPORARY Record "VAT Entry";
      CurrencyLCY@1024 : Record Currency;
      TempInvPostBuf@1001 : TEMPORARY Record "Invoice Post. Buffer";
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      if GenJnlLine."Document Date" = 0D then
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      if NextEntryNo = 0 then
        StartPosting(GenJnlLine)
      else
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,GenJnlLine2."Document Type"::Payment,true);
      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.GetPayablesAccount;

      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      if DtldVendLedgEntry."Transaction No." = 0 then begin
        DtldVendLedgEntry2.SETCURRENTKEY("Application No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
      end else begin
        DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      end;
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      if DtldVendLedgEntry."Transaction No." <> 0 then begin
        UnapplyVATEntries := false;
        DtldVendLedgEntry2.FINDSET;
        repeat
          DtldVendLedgEntry2.TESTFIELD(Unapplied,false);
          if IsVATAdjustment(DtldVendLedgEntry2."Entry Type") then
            UnapplyVATEntries := true
        until DtldVendLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Purchase,
          DtldVendLedgEntry."Vendor No.",DtldVendLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldVendLedgEntry2.FINDSET;
        repeat
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldVendLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
        until DtldVendLedgEntry2.NEXT = 0;
      end;

      // Look one more time
      DtldVendLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      repeat
        DtldVendLedgEntry2.TESTFIELD(Unapplied,false);
        InsertDtldVendLedgEntryUnapply(GenJnlLine,NewDtldVendLedgEntry,DtldVendLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        if (DtldVendLedgEntry2."Transaction No." <> 0) and IsVATExcluded(DtldVendLedgEntry2."Entry Type") then begin
          UnapplyExcludedVAT(
            TempVATEntry2,DtldVendLedgEntry2."Transaction No.",DtldVendLedgEntry2."VAT Bus. Posting Group",
            DtldVendLedgEntry2."VAT Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        end;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        if not (DtldCVLedgEntryBuf."Entry Type" in [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        then
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldVendLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,DtldVendLedgEntry2."Transaction No.");

        DtldVendLedgEntry2.Unapplied := true;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        UpdateVendLedgEntry(DtldVendLedgEntry2);
      until DtldVendLedgEntry2.NEXT = 0;

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);

      if IsTempGLEntryBufEmpty then
        DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,true);
      FinishPosting;
    END;

    [Internal]
    PROCEDURE UnapplyEmplLedgEntry@89(GenJnlLine2@1003 : Record "Gen. Journal Line";DtldEmplLedgEntry@1002 : Record "Detailed Employee Ledger Entry");
    VAR
      Employee@1005 : Record Employee;
      EmployeePostingGroup@1019 : Record "Employee Posting Group";
      GenJnlLine@1021 : Record "Gen. Journal Line";
      DtldEmplLedgEntry2@1012 : Record "Detailed Employee Ledger Entry";
      NewDtldEmplLedgEntry@1011 : Record "Detailed Employee Ledger Entry";
      EmplLedgEntry@1010 : Record "Employee Ledger Entry";
      DtldCVLedgEntryBuf@1009 : Record "Detailed CV Ledg. Entry Buffer";
      CurrencyLCY@1024 : Record Currency;
      TempInvPostBuf@1001 : TEMPORARY Record "Invoice Post. Buffer";
      NextDtldLedgEntryNo@1000 : Integer;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      if GenJnlLine."Document Date" = 0D then
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      if NextEntryNo = 0 then
        StartPosting(GenJnlLine)
      else
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Employee.GET(DtldEmplLedgEntry."Employee No.");
      EmployeePostingGroup.GET(GenJnlLine."Posting Group");
      EmployeePostingGroup.GetPayablesAccount;

      DtldEmplLedgEntry.LOCKTABLE;
      EmplLedgEntry.LOCKTABLE;

      DtldEmplLedgEntry.TESTFIELD("Entry Type",DtldEmplLedgEntry."Entry Type"::Application);

      DtldEmplLedgEntry2.RESET;
      DtldEmplLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldEmplLedgEntry2."Entry No." + 1;
      if DtldEmplLedgEntry."Transaction No." = 0 then begin
        DtldEmplLedgEntry2.SETCURRENTKEY("Application No.","Employee No.","Entry Type");
        DtldEmplLedgEntry2.SETRANGE("Application No.",DtldEmplLedgEntry."Application No.");
      end else begin
        DtldEmplLedgEntry2.SETCURRENTKEY("Transaction No.","Employee No.","Entry Type");
        DtldEmplLedgEntry2.SETRANGE("Transaction No.",DtldEmplLedgEntry."Transaction No.");
      end;
      DtldEmplLedgEntry2.SETRANGE("Employee No.",DtldEmplLedgEntry."Employee No.");
      DtldEmplLedgEntry2.SETFILTER("Entry Type",'>%1',DtldEmplLedgEntry."Entry Type"::"Initial Entry");

      // Look one more time
      DtldEmplLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      repeat
        DtldEmplLedgEntry2.TESTFIELD(Unapplied,false);
        InsertDtldEmplLedgEntryUnapply(GenJnlLine,NewDtldEmplLedgEntry,DtldEmplLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldEmplLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        DtldEmplLedgEntry2.Unapplied := true;
        DtldEmplLedgEntry2."Unapplied by Entry No." := NewDtldEmplLedgEntry."Entry No.";
        DtldEmplLedgEntry2.MODIFY;

        UpdateEmplLedgEntry(DtldEmplLedgEntry2);
      until DtldEmplLedgEntry2.NEXT = 0;

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,EmployeePostingGroup.GetPayablesAccount);

      if IsTempGLEntryBufEmpty then
        DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);
      FinishPosting;
    END;

    LOCAL PROCEDURE UnapplyExcludedVAT@85(VAR TempVATEntry@1000 : TEMPORARY Record "VAT Entry";TransactionNo@1004 : Integer;VATBusPostingGroup@1001 : Code[20];VATProdPostingGroup@1002 : Code[20];GenProdPostingGroup@1003 : Code[20]);
    BEGIN
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
      if not TempVATEntry.FINDFIRST then begin
        TempVATEntry.RESET;
        if TempVATEntry.FINDLAST then
          TempVATEntry."Entry No." := TempVATEntry."Entry No." + 1
        else
          TempVATEntry."Entry No." := 1;
        TempVATEntry.INIT;
        TempVATEntry."VAT Bus. Posting Group" := VATBusPostingGroup;
        TempVATEntry."VAT Prod. Posting Group" := VATProdPostingGroup;
        TempVATEntry."Gen. Prod. Posting Group" := GenProdPostingGroup;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",TransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
        VATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
        VATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
        if VATEntry.FINDSET then
          repeat
            if VATEntry."Unrealized VAT Entry No." = 0 then begin
              TempVATEntry.Base := TempVATEntry.Base + VATEntry.Base;
              TempVATEntry.Amount := TempVATEntry.Amount + VATEntry.Amount;
            end;
          until VATEntry.NEXT = 0;
        CLEAR(VATEntry);
        TempVATEntry.INSERT;
      end;
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@106(GenJnlLine@1002 : Record "Gen. Journal Line";VATPostingSetup@1008 : Record "VAT Posting Setup";VATEntry@1005 : Record "VAT Entry";NewVATEntry@1004 : Record "VAT Entry");
    VAR
      VATEntry2@1003 : Record "VAT Entry";
      AmountAddCurr@1007 : Decimal;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(
        GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,true),VATEntry.Amount,AmountAddCurr,false);
      CreateGLEntryFromVATEntry(
        GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,false),-VATEntry.Amount,-AmountAddCurr,VATEntry);

      with VATEntry2 do begin
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" := "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE PostPmtDiscountVATByUnapply@104(GenJnlLine@1003 : Record "Gen. Journal Line";ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record "VAT Entry");
    VAR
      AmountAddCurr@1005 : Decimal;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(GenJnlLine,ReverseChargeVATAccNo,VATEntry.Amount,AmountAddCurr,false);
      CreateGLEntry(GenJnlLine,VATAccNo,-VATEntry.Amount,-AmountAddCurr,false);
    END;

    LOCAL PROCEDURE PostUnapply@101(GenJnlLine@1007 : Record "Gen. Journal Line";VAR VATEntry@1002 : Record "VAT Entry";VATEntryType@1004 : Option;BilltoPaytoNo@1001 : Code[20];TransactionNo@1003 : Integer;VAR UnapplyVATEntries@1006 : Boolean;VAR TempVATEntry@1013 : TEMPORARY Record "VAT Entry");
    VAR
      VATPostingSetup@1000 : Record "VAT Posting Setup";
      VATEntry2@1009 : Record "VAT Entry";
      GLEntryVATEntryLink@1011 : Record "G/L Entry - VAT Entry Link";
      AccNo@1010 : Code[20];
      TempVATEntryNo@1005 : Integer;
    BEGIN
      TempVATEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntryType);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
      VATEntry.SETRANGE("Transaction No.",TransactionNo);
      if VATEntry.FINDSET then
        repeat
          VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
          if VATPostingSetup."Adjust for Payment Discount" and not IsNotPayment(VATEntry."Document Type") and
             (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT")
          then
            UnapplyVATEntries := true;
          if UnapplyVATEntries or (VATEntry."Unrealized VAT Entry No." <> 0) then begin
            InsertTempVATEntry(GenJnlLine,VATEntry,TempVATEntryNo,TempVATEntry);
            if VATEntry."Unrealized VAT Entry No." <> 0 then begin
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              if VATPostingSetup."VAT Calculation Type" in
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              then
                PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry)
              else
                if VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" then begin
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(true),
                    -VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount),false);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(false),
                    VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount),false);
                end else
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
              VATEntry2 := TempVATEntry;
              VATEntry2."Entry No." := NextVATEntryNo;
              VATEntry2.INSERT;
              if VATEntry2."Unrealized VAT Entry No." = 0 then
                GLEntryVATEntryLink.InsertLink(NextEntryNo,VATEntry2."Entry No.");
              TempVATEntry.DELETE;
              IncrNextVATEntryNo;
            end;

            if VATPostingSetup."Adjust for Payment Discount" and not IsNotPayment(VATEntry."Document Type") and
               (VATPostingSetup."VAT Calculation Type" =
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT") and
               (VATEntry."Unrealized VAT Entry No." = 0)
            then begin
              case VATEntryType of
                VATEntry.Type::Sale:
                  AccNo := VATPostingSetup.GetSalesAccount(false);
                VATEntry.Type::Purchase:
                  AccNo := VATPostingSetup.GetPurchAccount(false);
              end;
              PostPmtDiscountVATByUnapply(GenJnlLine,VATPostingSetup.GetRevChargeAccount(false),AccNo,VATEntry);
            end;
          end;
        until VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@100(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record Currency;
      CurrExchRate@1003 : Record "Currency Exchange Rate";
    BEGIN
      if AddCurrencyCode = '' then
        exit;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");

      exit(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            Date,AddCurrencyCode,Amt,CurrExchRate.ExchangeRate(Date,AddCurrencyCode)),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcVATAmountFromVATEntry@99(AmountLCY@1000 : Decimal;VAR VATEntry@1001 : Record "VAT Entry";CurrencyLCY@1003 : Record Currency) VATAmountLCY : Decimal;
    BEGIN
      with VATEntry do
        if (AmountLCY = Base) or (Base = 0) then begin
          VATAmountLCY := Amount;
          DELETE;
        end else begin
          VATAmountLCY :=
            ROUND(
              Amount * AmountLCY / Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
          Base := Base - AmountLCY;
          Amount := Amount - VATAmountLCY;
          MODIFY;
        end;
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntryUnapply@91(GenJnlLine@1002 : Record "Gen. Journal Line";VAR NewDtldCustLedgEntry@1000 : Record "Detailed Cust. Ledg. Entry";OldDtldCustLedgEntry@1001 : Record "Detailed Cust. Ledg. Entry";VAR NextDtldLedgEntryNo@1003 : Integer);
    BEGIN
      NewDtldCustLedgEntry := OldDtldCustLedgEntry;
      with NewDtldCustLedgEntry do begin
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldCustLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldCustLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldCustLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldCustLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldCustLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldCustLedgEntry."Credit Amount (LCY)";
        Unapplied := true;
        "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        INSERT(true);
      end;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntryUnapply@90(GenJnlLine@1003 : Record "Gen. Journal Line";VAR NewDtldVendLedgEntry@1002 : Record "Detailed Vendor Ledg. Entry";OldDtldVendLedgEntry@1001 : Record "Detailed Vendor Ledg. Entry";VAR NextDtldLedgEntryNo@1000 : Integer);
    BEGIN
      NewDtldVendLedgEntry := OldDtldVendLedgEntry;
      with NewDtldVendLedgEntry do begin
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldVendLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldVendLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldVendLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldVendLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldVendLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldVendLedgEntry."Credit Amount (LCY)";
        Unapplied := true;
        "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        INSERT(true);
      end;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldEmplLedgEntryUnapply@140(GenJnlLine@1003 : Record "Gen. Journal Line";VAR NewDtldEmplLedgEntry@1002 : Record "Detailed Employee Ledger Entry";OldDtldEmplLedgEntry@1001 : Record "Detailed Employee Ledger Entry";VAR NextDtldLedgEntryNo@1000 : Integer);
    BEGIN
      NewDtldEmplLedgEntry := OldDtldEmplLedgEntry;
      with NewDtldEmplLedgEntry do begin
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldEmplLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldEmplLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldEmplLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldEmplLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldEmplLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldEmplLedgEntry."Credit Amount (LCY)";
        Unapplied := true;
        "Unapplied by Entry No." := OldDtldEmplLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        INSERT(true);
      end;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertTempVATEntry@88(GenJnlLine@1002 : Record "Gen. Journal Line";VATEntry@1000 : Record "VAT Entry";VAR TempVATEntryNo@1001 : Integer;VAR TempVATEntry@1003 : TEMPORARY Record "VAT Entry");
    BEGIN
      TempVATEntry := VATEntry;
      with TempVATEntry do begin
        "Entry No." := TempVATEntryNo;
        TempVATEntryNo := TempVATEntryNo + 1;
        "Closed by Entry No." := 0;
        Closed := false;
        CopyAmountsFromVATEntry(VATEntry,true);
        "Posting Date" := GenJnlLine."Posting Date";
        "Document No." := GenJnlLine."Document No.";
        "User ID" := USERID;
        "Transaction No." := NextTransactionNo;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE ProcessTempVATEntry@87(DtldCVLedgEntryBuf@1000 : Record "Detailed CV Ledg. Entry Buffer";VAR TempVATEntry@1004 : TEMPORARY Record "VAT Entry");
    VAR
      VATEntrySaved@1005 : Record "VAT Entry";
      VATBaseSum@1003 : ARRAY [3] OF Decimal;
      DeductedVATBase@1006 : Decimal;
      EntryNoBegin@1002 : ARRAY [3] OF Integer;
      i@1001 : Integer;
    BEGIN
      if not (DtldCVLedgEntryBuf."Entry Type" in
              [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
      then
        exit;

      DeductedVATBase := 0;
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",0,999999);
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",DtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
      if TempVATEntry.FINDSET then
        repeat
          case true of
            VATBaseSum[3] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 4;
            VATBaseSum[2] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 3;
            VATBaseSum[1] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 2;
            TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 1;
            else
              i := 0;
          end;
          if i > 0 then begin
            TempVATEntry.RESET;
            if i > 1 then begin
              if EntryNoBegin[i - 1] < TempVATEntry."Entry No." then
                TempVATEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVATEntry."Entry No.")
              else
                TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.",EntryNoBegin[i - 1]);
            end else
              TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.");
            TempVATEntry.FINDSET;
            repeat
              VATEntrySaved := TempVATEntry;
              case DtldCVLedgEntryBuf."Entry Type" of
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 3000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 2000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 1000000);
              end;
              TempVATEntry := VATEntrySaved;
              DeductedVATBase += TempVATEntry.Base;
            until TempVATEntry.NEXT = 0;
            for i := 1 to 3 do begin
              VATBaseSum[i] := 0;
              EntryNoBegin[i] := 0;
            end;
            TempVATEntry.SETRANGE("Entry No.",0,999999);
          end else begin
            VATBaseSum[3] += TempVATEntry.Base;
            VATBaseSum[2] := VATBaseSum[1] + TempVATEntry.Base;
            VATBaseSum[1] := TempVATEntry.Base;
            if EntryNoBegin[3] > 0 then
              EntryNoBegin[3] := TempVATEntry."Entry No.";
            EntryNoBegin[2] := EntryNoBegin[1];
            EntryNoBegin[1] := TempVATEntry."Entry No.";
          end;
        until TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@80(DtldCustLedgEntry@1000 : Record "Detailed Cust. Ledg. Entry");
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
    BEGIN
      if DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::Application then
        exit;

      CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
      CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry."Remaining Pmt. Disc. Possible";
      CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry."Max. Payment Tolerance";
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      if not CustLedgEntry.Open then begin
        CustLedgEntry.Open := true;
        CustLedgEntry."Closed by Entry No." := 0;
        CustLedgEntry."Closed at Date" := 0D;
        CustLedgEntry."Closed by Amount" := 0;
        CustLedgEntry."Closed by Amount (LCY)" := 0;
        CustLedgEntry."Closed by Currency Code" := '';
        CustLedgEntry."Closed by Currency Amount" := 0;
        CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
        CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
        CustLedgEntry."Calculate Interest" := false;
      end;
      CustLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntry@76(DtldVendLedgEntry@1000 : Record "Detailed Vendor Ledg. Entry");
    VAR
      VendLedgEntry@1001 : Record "Vendor Ledger Entry";
    BEGIN
      if DtldVendLedgEntry."Entry Type" <> DtldVendLedgEntry."Entry Type"::Application then
        exit;

      VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
      VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry."Remaining Pmt. Disc. Possible";
      VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry."Max. Payment Tolerance";
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      if not VendLedgEntry.Open then begin
        VendLedgEntry.Open := true;
        VendLedgEntry."Closed by Entry No." := 0;
        VendLedgEntry."Closed at Date" := 0D;
        VendLedgEntry."Closed by Amount" := 0;
        VendLedgEntry."Closed by Amount (LCY)" := 0;
        VendLedgEntry."Closed by Currency Code" := '';
        VendLedgEntry."Closed by Currency Amount" := 0;
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
        VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
      end;
      VendLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateEmplLedgEntry@151(DtldEmplLedgEntry@1000 : Record "Detailed Employee Ledger Entry");
    VAR
      EmplLedgEntry@1001 : Record "Employee Ledger Entry";
    BEGIN
      if DtldEmplLedgEntry."Entry Type" <> DtldEmplLedgEntry."Entry Type"::Application then
        exit;

      EmplLedgEntry.GET(DtldEmplLedgEntry."Employee Ledger Entry No.");
      if not EmplLedgEntry.Open then begin
        EmplLedgEntry.Open := true;
        EmplLedgEntry."Closed by Entry No." := 0;
        EmplLedgEntry."Closed at Date" := 0D;
        EmplLedgEntry."Closed by Amount" := 0;
        EmplLedgEntry."Closed by Amount (LCY)" := 0;
      end;
      EmplLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer");
    VAR
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      CVLedgEntryBuf2@1002 : Record "CV Ledger Entry Buffer";
    BEGIN
      with CVLedgEntryBuf do begin
        if CustLedgEntry.GET("Closed by Entry No.") then begin
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        end;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        if CustLedgEntry.FINDSET then
          repeat
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          until CustLedgEntry.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR CVLedgEntryBuf2@1001 : Record "CV Ledger Entry Buffer");
    BEGIN
      with CVLedgEntryBuf do
        if "Due Date" < CVLedgEntryBuf2."Document Date" then
          "Calculate Interest" := true;
    END;

    LOCAL PROCEDURE GLCalcAddCurrency@35(Amount@1003 : Decimal;AddCurrAmount@1000 : Decimal;OldAddCurrAmount@1004 : Decimal;UseAddCurrAmount@1001 : Boolean;GenJnlLine@1002 : Record "Gen. Journal Line") : Decimal;
    BEGIN
      if (AddCurrencyCode <> '') and
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None)
      then begin
        if (GenJnlLine."Source Currency Code" = AddCurrencyCode) and UseAddCurrAmount then
          exit(AddCurrAmount);

        exit(ExchangeAmtLCYToFCY2(Amount));
      end;
      exit(OldAddCurrAmount);
    END;

    LOCAL PROCEDURE HandleAddCurrResidualGLEntry@38(GenJnlLine@1003 : Record "Gen. Journal Line";Amount@1000 : Decimal;AmountAddCurr@1001 : Decimal);
    VAR
      GLAcc@1002 : Record "G/L Account";
      GLEntry@1004 : Record "G/L Entry";
    BEGIN
      if AddCurrencyCode = '' then
        exit;

      TotalAddCurrAmount := TotalAddCurrAmount + AmountAddCurr;
      TotalAmount := TotalAmount + Amount;

      if (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) and
         (TotalAmount = 0) and (TotalAddCurrAmount <> 0) and
         CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      then begin
        GLEntry.INIT;
        GLEntry.CopyFromGenJnlLine(GenJnlLine);
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              ResidualRoundingErr,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        if TotalAddCurrAmount < 0 then
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        else
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."System-Created Entry" := true;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,false);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        InsertGLEntry(GenJnlLine,GLEntry,false);

        CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");

        TotalAddCurrAmount := 0;
      end;
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      if AddCurrencyCode = '' then
        exit;

      exit(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    LOCAL PROCEDURE GetCurrencyExchRate@39(GenJnlLine@1001 : Record "Gen. Journal Line");
    VAR
      NewCurrencyDate@1000 : Date;
    BEGIN
      if AddCurrencyCode = '' then
        exit;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");
      AddCurrency.TESTFIELD("Residual Gains Account");
      AddCurrency.TESTFIELD("Residual Losses Account");

      NewCurrencyDate := GenJnlLine."Posting Date";
      if GenJnlLine."Reversing Entry" then
        NewCurrencyDate := NewCurrencyDate - 1;
      if (NewCurrencyDate <> CurrencyDate) or
         UseCurrFactorOnly
      then begin
        UseCurrFactorOnly := false;
        CurrencyDate := NewCurrencyDate;
        CurrencyFactor :=
          CurrExchRate.ExchangeRate(CurrencyDate,AddCurrencyCode);
      end;
      if (GenJnlLine."FA Add.-Currency Factor" <> 0) and
         (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
      then begin
        UseCurrFactorOnly := true;
        CurrencyDate := 0D;
        CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
      end;
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      if UseCurrFactorOnly then
        exit(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      exit(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrencyDate,AddCurrencyCode,Amount,CurrencyFactor),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured or (AddCurrencyCode <> CurrencyCode);
      exit(NonAddCurrCodeOccured);
    END;

    LOCAL PROCEDURE TotalVATAmountOnJnlLines@1130(GenJnlLine@1000 : Record "Gen. Journal Line") TotalVATAmount : Decimal;
    VAR
      GenJnlLine2@1001 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine2 do begin
        SETRANGE("Source Code",GenJnlLine."Source Code");
        SETRANGE("Document No.",GenJnlLine."Document No.");
        SETRANGE("Posting Date",GenJnlLine."Posting Date");
        if FINDSET then
          repeat
            TotalVATAmount += "VAT Amount (LCY)" - "Bal. VAT Amount (LCY)";
          until NEXT = 0;
      end;
      exit(TotalVATAmount);
    END;

    [External]
    PROCEDURE SetGLRegReverse@8(VAR ReverseGLReg@1000 : Record "G/L Register");
    BEGIN
      GLReg.Reversed := true;
      ReverseGLReg := GLReg;
    END;

    LOCAL PROCEDURE InsertVATEntriesFromTemp@83(VAR DtldCVLedgEntryBuf@1000 : Record "Detailed CV Ledg. Entry Buffer";GLEntry@1003 : Record "G/L Entry");
    VAR
      Complete@1001 : Boolean;
      LinkedAmount@1002 : Decimal;
      FirstEntryNo@1006 : Integer;
      LastEntryNo@1004 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
      case DtldCVLedgEntryBuf."Entry Type" of
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          begin
            FirstEntryNo := 1000000;
            LastEntryNo := 1999999;
          end;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          begin
            FirstEntryNo := 2000000;
            LastEntryNo := 2999999;
          end;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          begin
            FirstEntryNo := 3000000;
            LastEntryNo := 3999999;
          end;
      end;
      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      if TempVATEntry.FINDSET then
        repeat
          VATEntry := TempVATEntry;
          VATEntry."Entry No." := NextVATEntryNo;
          VATEntry.INSERT(true);
          NextVATEntryNo := NextVATEntryNo + 1;
          if VATEntry."Unrealized VAT Entry No." = 0 then
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.",VATEntry."Entry No.");
          LinkedAmount += VATEntry.Amount + VATEntry.Base;
          Complete := LinkedAmount = -(DtldCVLedgEntryBuf."Amount (LCY)" + DtldCVLedgEntryBuf."VAT Amount (LCY)");
          LastEntryNo := TempVATEntry."Entry No.";
        until Complete or (TempVATEntry.NEXT = 0);

      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      TempVATEntry.DELETEALL;
    END;

    LOCAL PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(Decimal1) < ABS(Decimal2) then
        exit(Decimal1);
      exit(Decimal2);
    END;

    [External]
    PROCEDURE ABSMax@124(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(Decimal1) > ABS(Decimal2) then
        exit(Decimal1);
      exit(Decimal2);
    END;

    LOCAL PROCEDURE GetApplnRoundPrecision@92(NewCVLedgEntryBuf@1002 : Record "CV Ledger Entry Buffer";OldCVLedgEntryBuf@1003 : Record "CV Ledger Entry Buffer") : Decimal;
    VAR
      ApplnCurrency@1000 : Record Currency;
      CurrencyCode@1005 : Code[10];
    BEGIN
      if NewCVLedgEntryBuf."Currency Code" <> '' then
        CurrencyCode := NewCVLedgEntryBuf."Currency Code"
      else
        CurrencyCode := OldCVLedgEntryBuf."Currency Code";
      if CurrencyCode = '' then
        exit(0);
      ApplnCurrency.GET(CurrencyCode);
      if ApplnCurrency."Appln. Rounding Precision" <> 0 then
        exit(ApplnCurrency."Appln. Rounding Precision");
      exit(GLSetup."Appln. Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@19();
    BEGIN
      if GLSetupRead then
        exit;

      GLSetup.GET;
      GLSetupRead := true;

      AddCurrencyCode := GLSetup."Additional Reporting Currency";
    END;

    LOCAL PROCEDURE ReadGLSetup@17(VAR NewGLSetup@1000 : Record "General Ledger Setup");
    BEGIN
      NewGLSetup := GLSetup;
    END;

    LOCAL PROCEDURE CheckSalesExtDocNo@115(GenJnlLine@1001 : Record "Gen. Journal Line");
    VAR
      SalesSetup@1000 : Record "Sales & Receivables Setup";
    BEGIN
      SalesSetup.GET;
      if not SalesSetup."Ext. Doc. No. Mandatory" then
        exit;

      if GenJnlLine."Document Type" in
         [GenJnlLine."Document Type"::Invoice,
          GenJnlLine."Document Type"::"Credit Memo",
          GenJnlLine."Document Type"::Payment,
          GenJnlLine."Document Type"::Refund,
          GenJnlLine."Document Type"::" "]
      then
        GenJnlLine.TESTFIELD("External Document No.");
    END;

    LOCAL PROCEDURE CheckPurchExtDocNo@107(GenJnlLine@1003 : Record "Gen. Journal Line");
    VAR
      PurchSetup@1002 : Record "Purchases & Payables Setup";
      OldVendLedgEntry@1001 : Record "Vendor Ledger Entry";
    BEGIN
      PurchSetup.GET;
      if not (PurchSetup."Ext. Doc. No. Mandatory" or (GenJnlLine."External Document No." <> '')) then
        exit;

      GenJnlLine.TESTFIELD("External Document No.");
      OldVendLedgEntry.RESET;
      OldVendLedgEntry.SETRANGE("External Document No.",GenJnlLine."External Document No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Document Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
      OldVendLedgEntry.SETRANGE(Reversed,false);
      if not OldVendLedgEntry.ISEMPTY then
        ERROR(
          PurchaseAlreadyExistsErr,
          GenJnlLine."Document Type",GenJnlLine."External Document No.");
    END;

    LOCAL PROCEDURE CheckDimValueForDisposal@93(GenJnlLine@1001 : Record "Gen. Journal Line";AccountNo@1002 : Code[20]);
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
      TableID@1025 : ARRAY [10] OF Integer;
      AccNo@1026 : ARRAY [10] OF Code[20];
    BEGIN
      if ((GenJnlLine.Amount = 0) or (GenJnlLine."Amount (LCY)" = 0)) and
         (GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Disposal)
      then begin
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := AccountNo;
        if not DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") then
          ERROR(DimMgt.GetDimValuePostingErr);
      end;
    END;

    [External]
    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := true;
    END;

    LOCAL PROCEDURE CheckGLAccDimError@97(GenJnlLine@1005 : Record "Gen. Journal Line";GLAccNo@1004 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
    BEGIN
      if (GenJnlLine.Amount = 0) and (GenJnlLine."Amount (LCY)" = 0) then
        exit;

      TableID[1] := DATABASE::"G/L Account";
      AccNo[1] := GLAccNo;
      if DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") then
        exit;

      if GenJnlLine."Line No." <> 0 then
        ERROR(
          DimensionUsedErr,
          GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
          GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
          DimMgt.GetDimValuePostingErr);

      ERROR(DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CalculateCurrentBalance@95(AccountNo@1000 : Code[20];BalAccountNo@1001 : Code[20];InclVATAmount@1002 : Boolean;AmountLCY@1004 : Decimal;VATAmount@1005 : Decimal);
    BEGIN
      if (AccountNo <> '') and (BalAccountNo <> '') then
        exit;

      if AccountNo = BalAccountNo then
        exit;

      if not InclVATAmount then
        VATAmount := 0;

      if BalAccountNo <> '' then
        CurrentBalance -= AmountLCY + VATAmount
      else
        CurrentBalance += AmountLCY + VATAmount;
    END;

    LOCAL PROCEDURE GetCurrency@191(VAR Currency@1000 : Record Currency;CurrencyCode@1001 : Code[10]);
    BEGIN
      if Currency.Code <> CurrencyCode then begin
        if CurrencyCode = '' then
          CLEAR(Currency)
        else
          Currency.GET(CurrencyCode);
      end;
    END;

    LOCAL PROCEDURE CollectAdjustment@181(VAR AdjAmount@1003 : ARRAY [4] OF Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    VAR
      Offset@1001 : Integer;
    BEGIN
      Offset := GetAdjAmountOffset(Amount,AmountAddCurr);
      AdjAmount[Offset] += Amount;
      AdjAmount[Offset + 1] += AmountAddCurr;
    END;

    LOCAL PROCEDURE HandleDtldAdjustment@182(GenJnlLine@1008 : Record "Gen. Journal Line";VAR GLEntry@1002 : Record "G/L Entry";AdjAmount@1010 : ARRAY [4] OF Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAccNo@1007 : Code[20]);
    BEGIN
      if not PostDtldAdjustment(
           GenJnlLine,GLEntry,AdjAmount,
           TotalAmountLCY,TotalAmountAddCurr,GLAccNo,
           GetAdjAmountOffset(TotalAmountLCY,TotalAmountAddCurr))
      then
        InitGLEntry(GenJnlLine,GLEntry,GLAccNo,TotalAmountLCY,TotalAmountAddCurr,true,true);
    END;

    LOCAL PROCEDURE PostDtldAdjustment@96(GenJnlLine@1006 : Record "Gen. Journal Line";VAR GLEntry@1005 : Record "G/L Entry";AdjAmount@1004 : ARRAY [4] OF Decimal;TotalAmountLCY@1002 : Decimal;TotalAmountAddCurr@1001 : Decimal;GLAcc@1000 : Code[20];ArrayIndex@1007 : Integer) : Boolean;
    BEGIN
      if (GenJnlLine."Bal. Account No." <> '') and
         ((AdjAmount[ArrayIndex] <> 0) or (AdjAmount[ArrayIndex + 1] <> 0)) and
         ((TotalAmountLCY + AdjAmount[ArrayIndex] <> 0) or (TotalAmountAddCurr + AdjAmount[ArrayIndex + 1] <> 0))
      then begin
        CreateGLEntryBalAcc(
          GenJnlLine,GLAcc,-AdjAmount[ArrayIndex],-AdjAmount[ArrayIndex + 1],
          GenJnlLine."Bal. Account Type",GenJnlLine."Bal. Account No.");
        InitGLEntry(GenJnlLine,GLEntry,
          GLAcc,TotalAmountLCY + AdjAmount[ArrayIndex],
          TotalAmountAddCurr + AdjAmount[ArrayIndex + 1],true,true);
        AdjAmount[ArrayIndex] := 0;
        AdjAmount[ArrayIndex + 1] := 0;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE GetAdjAmountOffset@121(Amount@1000 : Decimal;AmountACY@1001 : Decimal) : Integer;
    BEGIN
      if (Amount > 0) or (Amount = 0) and (AmountACY > 0) then
        exit(1);
      exit(3);
    END;

    [External]
    PROCEDURE GetNextEntryNo@53() : Integer;
    BEGIN
      exit(NextEntryNo);
    END;

    [External]
    PROCEDURE GetNextTransactionNo@67() : Integer;
    BEGIN
      exit(NextTransactionNo);
    END;

    [External]
    PROCEDURE GetNextVATEntryNo@68() : Integer;
    BEGIN
      exit(NextVATEntryNo);
    END;

    [External]
    PROCEDURE IncrNextVATEntryNo@70();
    BEGIN
      NextVATEntryNo := NextVATEntryNo + 1;
    END;

    LOCAL PROCEDURE IsNotPayment@77(DocumentType@1000 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund') : Boolean;
    BEGIN
      exit(DocumentType in [DocumentType::Invoice,
                            DocumentType::"Credit Memo",
                            DocumentType::"Finance Charge Memo",
                            DocumentType::Reminder]);
    END;

    LOCAL PROCEDURE IsTempGLEntryBufEmpty@44() : Boolean;
    BEGIN
      exit(TempGLEntryBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE IsVATAdjustment@20(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";
    BEGIN
      exit(EntryType in [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]);
    END;

    LOCAL PROCEDURE IsVATExcluded@7(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";
    BEGIN
      exit(EntryType in [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]);
    END;

    LOCAL PROCEDURE UpdateGLEntryNo@120(VAR GLEntryNo@1002 : Integer;VAR SavedEntryNo@1000 : Integer);
    BEGIN
      if SavedEntryNo <> 0 then begin
        GLEntryNo := SavedEntryNo;
        NextEntryNo := NextEntryNo - 1;
        SavedEntryNo := 0;
      end;
    END;

    LOCAL PROCEDURE UpdateTotalAmounts@132(VAR TempInvPostBuf@1003 : TEMPORARY Record "Invoice Post. Buffer";DimSetID@1000 : Integer;AmountToCollect@1001 : Decimal;AmountACYToCollect@1002 : Decimal);
    BEGIN
      with TempInvPostBuf do begin
        SETRANGE("Dimension Set ID",DimSetID);
        if FINDFIRST then begin
          Amount += AmountToCollect;
          "Amount (ACY)" += AmountACYToCollect;
          MODIFY;
        end else begin
          INIT;
          "Dimension Set ID" := DimSetID;
          Amount := AmountToCollect;
          "Amount (ACY)" := AmountACYToCollect;
          INSERT;
        end;
      end;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmountsUnapply@135(GenJnlLine@1000 : Record "Gen. Journal Line";VAR TempInvPostBuf@1002 : TEMPORARY Record "Invoice Post. Buffer";Account@1001 : Code[20]);
    VAR
      DimMgt@1003 : Codeunit DimensionManagement;
    BEGIN
      with TempInvPostBuf do begin
        SETRANGE("Dimension Set ID");
        if FINDSET then
          repeat
            if (Amount <> 0) or
               ("Amount (ACY)" <> 0) and (GLSetup."Additional Reporting Currency" <> '')
            then begin
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntry(GenJnlLine,Account,Amount,"Amount (ACY)",true);
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmounts@36(GenJnlLine@1004 : Record "Gen. Journal Line";VAR InvPostBuf@1001 : Record "Invoice Post. Buffer";AdjAmountBuf@1006 : ARRAY [4] OF Decimal;SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20];LedgEntryInserted@1003 : Boolean);
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
      GLEntryInserted@1000 : Boolean;
    BEGIN
      GLEntryInserted := false;

      with InvPostBuf do begin
        RESET;
        if FINDSET then
          repeat
            if (Amount <> 0) or ("Amount (ACY)" <> 0) and (AddCurrencyCode <> '') then begin
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntryForTotalAmounts(GenJnlLine,Amount,"Amount (ACY)",AdjAmountBuf,SavedEntryNo,GLAccNo);
              GLEntryInserted := true;
            end;
          until NEXT = 0;
      end;

      if not GLEntryInserted and LedgEntryInserted then
        CreateGLEntryForTotalAmounts(GenJnlLine,0,0,AdjAmountBuf,SavedEntryNo,GLAccNo);
    END;

    LOCAL PROCEDURE CreateGLEntryForTotalAmounts@122(GenJnlLine@1004 : Record "Gen. Journal Line";Amount@1000 : Decimal;AmountACY@1001 : Decimal;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;VAR SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20]);
    VAR
      GLEntry@1005 : Record "G/L Entry";
    BEGIN
      HandleDtldAdjustment(GenJnlLine,GLEntry,AdjAmountBuf,Amount,AmountACY,GLAccNo);
      GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
      GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
      UpdateGLEntryNo(GLEntry."Entry No.",SavedEntryNo);
      InsertGLEntry(GenJnlLine,GLEntry,true);
    END;

    LOCAL PROCEDURE SetAddCurrForUnapplication@136(VAR DtldCVLedgEntryBuf@1000 : Record "Detailed CV Ledg. Entry Buffer");
    BEGIN
      with DtldCVLedgEntryBuf do
        if not ("Entry Type" in ["Entry Type"::Application,"Entry Type"::"Unrealized Loss",
                                 "Entry Type"::"Unrealized Gain","Entry Type"::"Realized Loss",
                                 "Entry Type"::"Realized Gain","Entry Type"::"Correction of Remaining Amount"])
        then
          if ("Entry Type" = "Entry Type"::"Appln. Rounding") or
             ((AddCurrencyCode <> '') and (AddCurrencyCode = "Currency Code"))
          then
            "Additional-Currency Amount" := Amount
          else
            "Additional-Currency Amount" := CalcAddCurrForUnapplication("Posting Date","Amount (LCY)");
    END;

    LOCAL PROCEDURE GetAppliedAmountFromBuffers@123(NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer") : Decimal;
    BEGIN
      if (((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment) and
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")) or
          ((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund) and
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice))) and
         (ABS(NewCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Amount to Apply"))
      then
        exit(ABSMax(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
      exit(ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
    END;

    LOCAL PROCEDURE PostDeferral@125(VAR GenJournalLine@1000 : Record "Gen. Journal Line";AccountNumber@1006 : Code[20]);
    VAR
      DeferralTemplate@1001 : Record "Deferral Template";
      DeferralHeader@1002 : Record "Deferral Header";
      DeferralLine@1003 : Record "Deferral Line";
      GLEntry@1004 : Record "G/L Entry";
      CurrExchRate@1012 : Record "Currency Exchange Rate";
      DeferralUtilities@1005 : Codeunit "Deferral Utilities";
      PerPostDate@1007 : Date;
      PeriodicCount@1008 : Integer;
      AmtToDefer@1010 : Decimal;
      AmtToDeferACY@1009 : Decimal;
      EmptyDeferralLine@1011 : Boolean;
    BEGIN
      with GenJournalLine do begin
        if "Source Type" in ["Source Type"::Vendor,"Source Type"::Customer] then
          // Purchasing and Sales, respectively
          // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
          // created for this GL Trx before handing it off to sales/purchasing subsystem
          if "Source Code" <> GLSourceCode then begin
            PostDeferralPostBuffer(GenJournalLine);
            exit;
          end;

        if DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") then begin
          EmptyDeferralLine := false;
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
          if DeferralLine.FINDSET then
            repeat
              if DeferralLine.Amount = 0.0 then
                EmptyDeferralLine := true;
            until (DeferralLine.NEXT = 0) or EmptyDeferralLine;
          if EmptyDeferralLine then
            ERROR(ZeroDeferralAmtErr,"Line No.","Deferral Code");
          DeferralHeader."Amount to Defer (LCY)" :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                DeferralHeader."Amount to Defer","Currency Factor"));
          DeferralHeader.MODIFY;
        end;

        DeferralUtilities.RoundDeferralAmount(
          DeferralHeader,
          "Currency Code","Currency Factor","Posting Date",AmtToDefer,AmtToDeferACY);

        DeferralTemplate.GET("Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralTemplate.TESTFIELD("Deferral %");

        // Get the Deferral Header table so we know the amount to defer...
        // Assume straight GL posting
        if DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") then begin
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
        end else
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");

        InitGLEntry(GenJournalLine,GLEntry,
          AccountNumber,
          -DeferralHeader."Amount to Defer (LCY)",
          -DeferralHeader."Amount to Defer",true,true);
        GLEntry.Description := Description;
        InsertGLEntry(GenJournalLine,GLEntry,true);

        InitGLEntry(GenJournalLine,GLEntry,
          DeferralTemplate."Deferral Account",
          DeferralHeader."Amount to Defer (LCY)",
          DeferralHeader."Amount to Defer",true,true);
        GLEntry.Description := Description;
        InsertGLEntry(GenJournalLine,GLEntry,true);

        // Here we want to get the Deferral Details table range and loop through them...
        if DeferralLine.FINDSET then begin
          PeriodicCount := 1;
          repeat
            PerPostDate := DeferralLine."Posting Date";
            if GenJnlCheckLine.DateNotAllowed(PerPostDate) then
              ERROR(InvalidPostingDateErr,PerPostDate);

            InitGLEntry(GenJournalLine,GLEntry,AccountNumber,DeferralLine."Amount (LCY)",
              DeferralLine.Amount,
              true,true);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,true);

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralTemplate."Deferral Account",-DeferralLine."Amount (LCY)",
              -DeferralLine.Amount,
              true,true);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,true);
            PeriodicCount := PeriodicCount + 1;
          until DeferralLine.NEXT = 0;
        end else
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
      end;
    END;

    LOCAL PROCEDURE PostDeferralPostBuffer@127(GenJournalLine@1005 : Record "Gen. Journal Line");
    VAR
      DeferralPostBuffer@1004 : Record "Deferral Post. Buffer";
      GLEntry@1003 : Record "G/L Entry";
      PostDate@1000 : Date;
    BEGIN
      with GenJournalLine do begin
        if "Source Type" = "Source Type"::Customer then
          DeferralDocType := DeferralDocType::Sales
        else
          DeferralDocType := DeferralDocType::Purchase;

        DeferralPostBuffer.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralPostBuffer.SETRANGE("Document No.","Document No.");
        DeferralPostBuffer.SETRANGE("Deferral Line No.","Deferral Line No.");

        if DeferralPostBuffer.FINDSET then begin
          repeat
            PostDate := DeferralPostBuffer."Posting Date";
            if GenJnlCheckLine.DateNotAllowed(PostDate) then
              ERROR(InvalidPostingDateErr,PostDate);

            // When no sales/purch amount is entered, the offset was already posted
            if (DeferralPostBuffer."Sales/Purch Amount" <> 0) or (DeferralPostBuffer."Sales/Purch Amount (LCY)" <> 0) then begin
              InitGLEntry(GenJournalLine,GLEntry,DeferralPostBuffer."G/L Account",
                DeferralPostBuffer."Sales/Purch Amount (LCY)",
                DeferralPostBuffer."Sales/Purch Amount",
                true,true);
              GLEntry."Posting Date" := PostDate;
              GLEntry.Description := DeferralPostBuffer.Description;
              GLEntry.CopyFromDeferralPostBuffer(DeferralPostBuffer);
              InsertGLEntry(GenJournalLine,GLEntry,true);
            end;

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralPostBuffer."Deferral Account",
              -DeferralPostBuffer."Amount (LCY)",
              -DeferralPostBuffer.Amount,
              true,true);
            GLEntry."Posting Date" := PostDate;
            GLEntry.Description := DeferralPostBuffer.Description;
            InsertGLEntry(GenJournalLine,GLEntry,true);
          until DeferralPostBuffer.NEXT = 0;
          DeferralPostBuffer.DELETEALL;
        end;
      end;
    END;

    [External]
    PROCEDURE RemoveDeferralSchedule@128(GenJournalLine@1002 : Record "Gen. Journal Line");
    VAR
      DeferralUtilities@1000 : Codeunit "Deferral Utilities";
      DeferralDocType@1001 : 'Purchase,Sales,"G/L"';
    BEGIN
      // Removing deferral schedule after all deferrals for this line have been posted successfully
      with GenJournalLine do
        DeferralUtilities.DeferralCodeOnDelete(
          DeferralDocType::"G/L",
          "Journal Template Name",
          "Journal Batch Name",0,'',"Line No.");
    END;

    LOCAL PROCEDURE GetGLSourceCode@130();
    VAR
      SourceCodeSetup@1000 : Record "Source Code Setup";
    BEGIN
      SourceCodeSetup.GET;
      GLSourceCode := SourceCodeSetup."General Journal";
    END;

    LOCAL PROCEDURE DeferralPosting@131(DeferralCode@1000 : Code[10];SourceCode@1001 : Code[10];AccountNo@1002 : Code[20];VAR GenJournalLine@1005 : Record "Gen. Journal Line";Balancing@1006 : Boolean);
    BEGIN
      if DeferralCode <> '' then
        // Sales and purchasing could have negative amounts, so check for them first...
        if (SourceCode <> GLSourceCode) and
           (GenJournalLine."Account Type" in [GenJournalLine."Account Type"::Customer,GenJournalLine."Account Type"::Vendor])
        then
          PostDeferralPostBuffer(GenJournalLine)
        else
          // Pure GL trx, only post deferrals if it is not a balancing entry
          if not Balancing then
            PostDeferral(GenJournalLine,AccountNo);
    END;

    LOCAL PROCEDURE GetPostingAccountNo@225(VATPostingSetup@1002 : Record "VAT Posting Setup";VATEntry@1001 : Record "VAT Entry";UnrealizedVAT@1000 : Boolean) : Code[20];
    VAR
      TaxJurisdiction@1003 : Record "Tax Jurisdiction";
    BEGIN
      if VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Sales Tax" then begin
        VATEntry.TESTFIELD("Tax Jurisdiction Code");
        TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
        case VATEntry.Type of
          VATEntry.Type::Sale:
            exit(TaxJurisdiction.GetSalesAccount(UnrealizedVAT));
          VATEntry.Type::Purchase:
            exit(TaxJurisdiction.GetPurchAccount(UnrealizedVAT));
        end;
      end;

      case VATEntry.Type of
        VATEntry.Type::Sale:
          exit(VATPostingSetup.GetSalesAccount(UnrealizedVAT));
        VATEntry.Type::Purchase:
          exit(VATPostingSetup.GetPurchAccount(UnrealizedVAT));
      end;
    END;

    LOCAL PROCEDURE IsDebitAmount@137(DtldCVLedgEntryBuf@1000 : Record "Detailed CV Ledg. Entry Buffer";Unapply@1001 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1002 : Record "VAT Posting Setup";
      VATAmountCondition@1003 : Boolean;
      EntryAmount@1004 : Decimal;
    BEGIN
      with DtldCVLedgEntryBuf do begin
        VATAmountCondition :=
          "Entry Type" in ["Entry Type"::"Payment Discount (VAT Excl.)","Entry Type"::"Payment Tolerance (VAT Excl.)",
                           "Entry Type"::"Payment Discount Tolerance (VAT Excl.)"];
        if VATAmountCondition then begin
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          VATAmountCondition := VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Full VAT";
        end;
        if VATAmountCondition then
          EntryAmount := "VAT Amount (LCY)"
        else
          EntryAmount := "Amount (LCY)";
        if Unapply then
          exit(EntryAmount > 0);
        exit(EntryAmount <= 0);
      end;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@133(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterInitGLRegister@139(VAR GLRegister@1000 : Record "G/L Register";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterInsertGlobalGLEntry@142(VAR GLEntry@1000 : Record "G/L Entry");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeInsertGLEntryBuffer@146(VAR TempGLEntryBuf@1000 : TEMPORARY Record "G/L Entry";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGLFinishPosting@144(GLEntry@1000 : Record "G/L Entry";IsTransactionConsistent@1001 : Boolean;FirstTransactionNo@1002 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

