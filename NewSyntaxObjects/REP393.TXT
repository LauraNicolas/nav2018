OBJECT Report 393 Suggest Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Vendor Payments;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  CompanyInformation.GET;
                  VendorLedgEntryTemp.DELETEALL;
                  ShowPostingDateWarning := false;
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   if not VendorLedgEntryTemp.ISEMPTY then
                     if CONFIRM(Text024) then
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;Vendor              ;
               DataItemTable=Vendor;
               DataItemTableView=SORTING("No.") WHERE(Blocked=FILTER(=" "));
               OnPreDataItem=BEGIN
                               if LastDueDateToPayReq = 0D then
                                 ERROR(Text000);
                               if (PostingDate = 0D) and (not UseDueDateAsPostingDate) then
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := false;
                               SeveralCurrencies := false;
                               MessageText := '';

                               if ((BankPmtType = BankPmtType::" ") or
                                   SummarizePerVend) and
                                  (NextDocNo = '')
                               then
                                 ERROR(Text002);

                               if ((BankPmtType = BankPmtType::"Manual Check") and
                                   not SummarizePerVend and
                                   not DocNoPerLine)
                               then
                                 ERROR(Text017,GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               if UsePaymentDisc and (LastDueDateToPayReq < WORKDATE) then
                                 if not CONFIRM(Text003,false,WORKDATE) then
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               if UsePriority then begin
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := true;
                               end;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               SummarizePerDim := SelectedDim.FIND('-') and SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(VendorBalance);
                                  CALCFIELDS("Balance (LCY)");
                                  VendorBalance := "Balance (LCY)";

                                  if StopPayments then
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  if VendorBalance > 0 then begin
                                    GetVendLedgEntries(true,false);
                                    GetVendLedgEntries(false,false);
                                    CheckAmounts(false);
                                    ClearNegative;
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if UsePriority and not StopPayments then begin
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  if FIND('-') then
                                    repeat
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      if VendorBalance > 0 then begin
                                        Window.UPDATE(1,"No.");
                                        GetVendLedgEntries(true,false);
                                        GetVendLedgEntries(false,false);
                                        CheckAmounts(false);
                                        ClearNegative;
                                      end;
                                    until (NEXT = 0) or StopPayments;
                                end;

                                if UsePaymentDisc and not StopPayments then begin
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window2.OPEN(Text007);
                                  if FIND('-') then
                                    repeat
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      Window2.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      if VendorBalance > 0 then begin
                                        GetVendLedgEntries(true,true);
                                        GetVendLedgEntries(false,true);
                                        CheckAmounts(true);
                                        ClearNegative;
                                      end;
                                    until (NEXT = 0) or StopPayments;
                                  Window2.CLOSE;
                                end else
                                  if FIND('-') then
                                    repeat
                                      ClearNegative;
                                    until NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                if GenJnlLine.FINDLAST then begin
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                end;

                                Window2.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields="No.","Payment Method Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               SummarizePerDimTextEnable := true;
               SkipExportedPayments := true;
             END;

      OnOpenPage=BEGIN
                   if LastDueDateToPayReq = 0D then
                     LastDueDateToPayReq := WORKDATE;
                   if PostingDate = 0D then
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                   SetDefaults;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  Name=Find Payments;
                  CaptionML=ENU=Find Payments;
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=ENU=Last Payment Date;
                  ToolTipML=ENU=Specifies the latest payment date that can appear on the vendor ledger entries to be included in the batch job. Only entries that have a due date or a payment discount date before or on this date will be included. If the payment date is earlier than the system date, a warning will be displayed.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;3   ;Field     ;
                  Name=FindPaymentDiscounts;
                  CaptionML=ENU=Find Payment Discounts;
                  ToolTipML=ENU=Specifies if you want the batch job to include vendor ledger entries for which you can receive a payment discount.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePaymentDisc;
                  Importance=Additional;
                  MultiLine=true;
                  OnValidate=BEGIN
                               if UsePaymentDisc and UseDueDateAsPostingDate then
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=UseVendorPriority;
                  CaptionML=ENU=Use Vendor Priority;
                  ToolTipML=ENU=Specifies if the Priority field on the vendor cards will determine in which order vendor entries are suggested for payment by the batch job. The batch job always prioritizes vendors for payment suggestions if you specify an available amount in the Available Amount (LCY) field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePriority;
                  Importance=Additional;
                  OnValidate=BEGIN
                               if not UsePriority and (AmountAvailable <> 0) then
                                 ERROR(Text011);
                             END;
                              }

      { 11  ;3   ;Field     ;
                  Name=Available Amount (LCY);
                  CaptionML=ENU=Available Amount (LCY);
                  ToolTipML=ENU=Specifies a maximum amount (in LCY) that is available for payments. The batch job will then create a payment suggestion on the basis of this amount and the Use Vendor Priority check box. It will only include vendor entries that can be paid fully.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AmountAvailable;
                  Importance=Additional;
                  OnValidate=BEGIN
                               if AmountAvailable <> 0 then
                                 UsePriority := true;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=SkipExportedPayments;
                  CaptionML=ENU=Skip Exported Payments;
                  ToolTipML=ENU=Specifies if you do not want the batch job to insert payment journal lines for documents for which payments have already been exported to a bank file.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SkipExportedPayments;
                  Importance=Additional }

      { 7   ;2   ;Group     ;
                  Name=Summarize Results;
                  CaptionML=ENU=Summarize Results;
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerVendor;
                  CaptionML=ENU=Summarize per Vendor;
                  ToolTipML=ENU=Specifies if you want the batch job to make one line per vendor for each currency in which the vendor has ledger entries. If, for example, a vendor uses two currencies, the batch job will create two lines in the payment journal for this vendor. The batch job then uses the Applies-to ID field when the journal lines are posted to apply the lines to vendor ledger entries. If you do not select this check box, then the batch job will make one line per invoice.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SummarizePerVend;
                  OnValidate=BEGIN
                               if SummarizePerVend and UseDueDateAsPostingDate then
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=ENU=By Dimension;
                  ToolTipML=ENU=Specifies the dimensions that you want the batch job to consider.;
                  ApplicationArea=#Suite;
                  SourceExpr=SummarizePerDimText;
                  Importance=Additional;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record "Dimension Selection Buffer";
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Vendor Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  Name=Fill in Journal Lines;
                  CaptionML=ENU=Fill in Journal Lines;
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  Importance=Promoted;
                  Editable=UseDueDateAsPostingDate = FALSE;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 16  ;3   ;Field     ;
                  Name=UseDueDateAsPostingDate;
                  CaptionML=ENU=Calculate Posting Date from Applies-to-Doc. Due Date;
                  ToolTipML=ENU=Specifies if the due date on the purchase invoice will be used as a basis to calculate the payment posting date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UseDueDateAsPostingDate;
                  Importance=Additional;
                  OnValidate=BEGIN
                               if UseDueDateAsPostingDate and (SummarizePerVend or UsePaymentDisc) then
                                 ERROR(PmtDiscUnavailableErr);
                               if not UseDueDateAsPostingDate then
                                 CLEAR(DueDateOffset);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  Name=DueDateOffset;
                  CaptionML=ENU=Applies-to-Doc. Due Date Offset;
                  ToolTipML=ENU=Specifies a period of time that will separate the payment posting date from the due date on the invoice. Example 1: To pay the invoice on the Friday in the week of the due date, enter CW-2D (current week minus two days). Example 2: To pay the invoice two days before the due date, enter -2D (minus two days).;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DueDateOffset;
                  Importance=Additional;
                  Enabled=UseDueDateAsPostingDate;
                  Editable=UseDueDateAsPostingDate }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=ENU=Starting Document No.;
                  ToolTipML=ENU=Specifies the next available number in the number series for the journal batch that is linked to the payment journal. When you run the batch job, this is the document number that appears on the first payment journal line. You can also fill in this field manually.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NextDocNo;
                  OnValidate=VAR
                               TextManagement@1000 : Codeunit TextManagement;
                             BEGIN
                               if NextDocNo <> '' then
                                 TextManagement.EvaluateIncStr(NextDocNo,StartingDocumentNoErr);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=NewDocNoPerLine;
                  CaptionML=ENU=New Doc. No. per Line;
                  ToolTipML=ENU=Specifies if you want the batch job to fill in the payment journal lines with consecutive document numbers, starting with the document number specified in the Starting Document No. field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNoPerLine;
                  Importance=Additional;
                  OnValidate=BEGIN
                               if not UsePriority and (AmountAvailable <> 0) then
                                 ERROR(Text013);
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=ENU=Bal. Account Type;
                  ToolTipML=ENU=Specifies the balancing account type that payments on the payment journal are posted to.;
                  OptionCaptionML=ENU=G/L Account,,,Bank Account;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=ENU=Bal. Account No.;
                  ToolTipML=ENU=Specifies the balancing account number that payments on the payment journal are posted to.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  Importance=Additional;
                  OnValidate=BEGIN
                               if GenJnlLine2."Bal. Account No." <> '' then
                                 case GenJnlLine2."Bal. Account Type" of
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 end;
                             END;

                  OnLookup=BEGIN
                             case GenJnlLine2."Bal. Account Type" of
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 if PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK then
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 if PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK then
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             end;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=BankPaymentType;
                  CaptionML=ENU=Bank Payment Type;
                  ToolTipML=ENU=Specifies the check type to be used, if you use Bank Account as the balancing account type.;
                  OptionCaptionML=ENU=" ,Computer Check,Manual Check";
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  Importance=Additional;
                  OnValidate=BEGIN
                               if (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") and
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               then
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=In the Last Payment Date field, specify the last possible date that payments must be made.';
      Text001@1001 : TextConst 'ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.';
      Text002@1002 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.';
      Text003@1003 : TextConst '@@@=%1 is a date;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?';
      Text005@1005 : TextConst 'ENU=The batch job was interrupted.';
      Text006@1006 : TextConst 'ENU=Processing vendors     #1##########';
      Text007@1007 : TextConst 'ENU=Processing vendors for payment discounts #1##########';
      Text008@1008 : TextConst 'ENU=Inserting payment journal lines #1##########';
      Text009@1009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.';
      Text010@1010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.';
      Text011@1011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.';
      Text013@1013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\';
      Text021@1021 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR\ There are no other open vendor ledger entries in other currencies.\\;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\';
      Text022@1022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.\\';
      Vend2@1023 : Record Vendor;
      GenJnlTemplate@1024 : Record "Gen. Journal Template";
      GenJnlBatch@1025 : Record "Gen. Journal Batch";
      GenJnlLine@1026 : Record "Gen. Journal Line";
      DimSetEntry@1027 : Record "Dimension Set Entry";
      GenJnlLine2@1028 : Record "Gen. Journal Line";
      VendLedgEntry@1029 : Record "Vendor Ledger Entry";
      GLAcc@1030 : Record "G/L Account";
      BankAcc@1031 : Record "Bank Account";
      PayableVendLedgEntry@1032 : TEMPORARY Record "Payable Vendor Ledger Entry";
      CompanyInformation@1062 : Record "Company Information";
      TempPaymentBuffer@1033 : TEMPORARY Record "Payment Buffer";
      OldTempPaymentBuffer@1034 : TEMPORARY Record "Payment Buffer";
      SelectedDim@1035 : Record "Selected Dimension";
      VendorLedgEntryTemp@1102601000 : TEMPORARY Record "Vendor Ledger Entry";
      NoSeriesMgt@1036 : Codeunit NoSeriesManagement;
      DimMgt@1038 : Codeunit DimensionManagement;
      DimBufMgt@1018 : Codeunit "Dimension Buffer Management";
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      DueDateOffset@1118 : DateFormula;
      UseDueDateAsPostingDate@1066 : Boolean;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : '" ","Computer Check","Manual Check"';
      BalAccType@1056 : '"G/L Account",Customer,Vendor,"Bank Account"';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text;
      GenJnlLineInserted@1059 : Boolean;
      SeveralCurrencies@1060 : Boolean;
      Text023@1061 : TextConst 'ENU=" ,Computer Check,Manual Check"';
      Text024@1102601001 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?';
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      Text025@1063 : TextConst 'ENU=The %1 with the number %2 has a %3 with the number %4.';
      ShowPostingDateWarning@1119 : Boolean;
      VendorBalance@1065 : Decimal;
      ReplacePostingDateMsg@1064 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.';
      PmtDiscUnavailableErr@1067 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.';
      SkipExportedPayments@1019 : Boolean;
      MessageToRecipientMsg@1068 : TextConst '@@@=%1 document type, %2 Document No.;ENU="Payment of %1 %2 "';
      StartingDocumentNoErr@1012 : TextConst 'ENU=Starting Document No.';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      if GenJnlBatch."No. Series" = '' then
        NextDocNo := ''
      else begin
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,false);
        CLEAR(NoSeriesMgt);
      end;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewSkipExportedPayments@1009 : Boolean;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : '"G/L Account",Customer,Vendor,"Bank Account"';BalAccNo@1007 : Code[20];BankPmtType@1008 : '" ","Computer Check","Manual Check"');
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      SkipExportedPayments := NewSkipExportedPayments;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    LOCAL PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,true);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      if Future then begin
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,DMY2DATE(31,12,9999));
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      end else
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      if SkipExportedPayments then
        VendLedgEntry.SETRANGE("Exported to Payment File",false);
      VendLedgEntry.SETRANGE("On Hold",'');
      VendLedgEntry.SETFILTER("Currency Code",Vendor.GETFILTER("Currency Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 1 Code",Vendor.GETFILTER("Global Dimension 1 Filter"));
      VendLedgEntry.SETFILTER("Global Dimension 2 Code",Vendor.GETFILTER("Global Dimension 2 Filter"));

      if VendLedgEntry.FIND('-') then
        repeat
          SaveAmount;
          if VendLedgEntry."Accepted Pmt. Disc. Tolerance" or
             (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          then begin
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
          end;
        until VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    VAR
      PaymentToleranceMgt@1000 : Codeunit "Payment Tolerance Management";
    BEGIN
      with GenJnlLine do begin
        INIT;
        SetPostingDate(GenJnlLine,VendLedgEntry."Due Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Vendor;
        Vend2.GET(VendLedgEntry."Vendor No.");
        Vend2.CheckBlockedVendOnJnls(Vend2,"Document Type",false);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Vendor Posting Group";
        "Salespers./Purch. Code" := Vend2."Purchaser Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        if PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,false) then
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        else
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);
      end;

      if UsePriority then
        PayableVendLedgEntry.Priority := Vendor.Priority
      else
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    LOCAL PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      if PayableVendLedgEntry.FIND('-') then begin
        repeat
          if PayableVendLedgEntry."Currency Code" <> PrevCurrency then begin
            if CurrencyBalance > 0 then
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          end;
          if (OriginalAmtAvailable = 0) or
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          then
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          else
            PayableVendLedgEntry.DELETE;
        until PayableVendLedgEntry.NEXT = 0;
        if OriginalAmtAvailable > 0 then
          AmountAvailable := AmountAvailable - CurrencyBalance;
        if (OriginalAmtAvailable > 0) and (AmountAvailable <= 0) then
          StopPayments := true;
      end;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine1@1010 : Record "Gen. Journal Line";
      DimBuf@1002 : Record "Dimension Buffer";
      Vendor@1001 : Record Vendor;
      RemainingAmtAvailable@1008 : Decimal;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      if BalAccType = BalAccType::"Bank Account" then begin
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      end;

      if OriginalAmtAvailable <> 0 then begin
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
      end;
      if PayableVendLedgEntry.FIND('-') then
        repeat
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          repeat
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            SetPostingDate(GenJnlLine1,VendLedgEntry."Due Date",PostingDate);
            if VendLedgEntry."Posting Date" <= GenJnlLine1."Posting Date" then begin
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";
              TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
              TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
              TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
              TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
              TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              OnUpdateTempBufferFromVendorLedgerEntry(TempPaymentBuffer,VendLedgEntry);
              SetTempPaymentBufferDims(DimBuf);

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              if SummarizePerVend then begin
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                if TempPaymentBuffer.FIND then begin
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                end else begin
                  TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                end;
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              end else
                if not IsEntryAlreadyApplied(GenJnlLine,VendLedgEntry) then begin
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                  TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                  TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                  TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                  TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                end;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            end else begin
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            end;

            PayableVendLedgEntry.DELETE;
            if OriginalAmtAvailable <> 0 then begin
              RemainingAmtAvailable := RemainingAmtAvailable - PayableVendLedgEntry."Amount (LCY)";
              RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
            end;

          until not PayableVendLedgEntry.FINDSET;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        until not PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      TempPaymentBuffer.SETFILTER(
        "Vendor Ledg. Entry Doc. Type",'<>%1&<>%2',TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Refund,
        TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Payment);
      if TempPaymentBuffer.FIND('-') then
        repeat
          with GenJnlLine do begin
            INIT;
            Window2.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            if SummarizePerVend then
              "Document No." := TempPaymentBuffer."Document No."
            else
              if DocNoPerLine then begin
                if TempPaymentBuffer.Amount < 0 then
                  "Document Type" := "Document Type"::Refund;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              end else
                if (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") and
                   (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                then
                  "Document No." := OldTempPaymentBuffer."Document No."
                else begin
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                end;
            "Account Type" := "Account Type"::Vendor;
            SetHideValidation(true);
            ShowPostingDateWarning := ShowPostingDateWarning or
              SetPostingDate(GenJnlLine,GetApplDueDate(TempPaymentBuffer."Vendor Ledg. Entry No."),PostingDate);
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            Vendor.GET(TempPaymentBuffer."Vendor No.");
            if (Vendor."Pay-to Vendor No." <> '') and (Vendor."Pay-to Vendor No." <> "Account No.") then
              MESSAGE(Text025,Vendor.TABLECAPTION,Vendor."No.",Vendor.FIELDCAPTION("Pay-to Vendor No."),
                Vendor."Pay-to Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Message to Recipient" := GetMessageToRecipient(SummarizePerVend);
            "Bank Payment Type" := BankPmtType;
            if SummarizePerVend then
              "Applies-to ID" := "Document No.";
            Description := Vendor.Name;
            "Source Line No." := TempPaymentBuffer."Vendor Ledg. Entry No.";
            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            "Dimension Set ID" := TempPaymentBuffer."Dimension Set ID";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";
            "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
            "Creditor No." := TempPaymentBuffer."Creditor No.";
            "Payment Reference" := TempPaymentBuffer."Payment Reference";
            "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
            "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";
            OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer(GenJnlLine,TempPaymentBuffer);
            UpdateDimensions(GenJnlLine);
            INSERT;
            GenJnlLineInserted := true;
          end;
        until TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record "Gen. Journal Line");
    VAR
      DimBuf@1002 : Record "Dimension Buffer";
      TempDimSetEntry@1001 : TEMPORARY Record "Dimension Set Entry";
      TempDimSetEntry2@1000 : TEMPORARY Record "Dimension Set Entry";
      DimVal@1004 : Record "Dimension Value";
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      with GenJnlLine do begin
        NewDimensionID := "Dimension Set ID";
        if SummarizePerVend then begin
          DimBuf.RESET;
          DimBuf.DELETEALL;
          DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",DimBuf);
          if DimBuf.FINDSET then
            repeat
              DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
              TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
              TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
              TempDimSetEntry.INSERT;
            until DimBuf.NEXT = 0;
          NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
          "Dimension Set ID" := NewDimensionID;
        end;
        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          DATABASE::Job,"Job No.",
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.");
        if NewDimensionID <> "Dimension Set ID" then begin
          DimSetIDArr[1] := "Dimension Set ID";
          DimSetIDArr[2] := NewDimensionID;
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        end;

        if SummarizePerVend then begin
          DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
          if AdjustAgainstSelectedDim(TempDimSetEntry,TempDimSetEntry2) then
            "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
        end;
      end;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : '"G/L Account",Customer,Vendor,"Bank Account"';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record "Payable Vendor Ledger Entry");
    VAR
      BankAcc@1003 : Record "Bank Account";
    BEGIN
      if BalAccType = BalAccType::"Bank Account" then
        if BalAccNo <> '' then begin
          BankAcc.GET(BalAccNo);
          if BankAcc."Currency Code" <> '' then
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
        end;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      if GenJnlLineInserted then begin
        if ShowPostingDateWarning then
          Text += ReplacePostingDateMsg;
        if Text <> '' then
          MESSAGE(Text);
      end;
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : '"G/L Account",Customer,Vendor,"Bank Account"';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record "Payable Vendor Ledger Entry");
    VAR
      BankAcc@1003 : Record "Bank Account";
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record "Payable Vendor Ledger Entry";
    BEGIN
      if BalAccType = BalAccType::"Bank Account" then
        if BalAccNo <> '' then begin
          BankAcc.GET(BalAccNo);
          if BankAcc."Currency Code" <> '' then begin
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            if TmpPayableVendLedgEntry.FIND('-') then
              repeat
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              until TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies or TmpPayableVendLedgEntry2.FINDFIRST;

            if SeveralCurrencies then
              MessageText :=
                STRSUBSTNO(Text020,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            else
              MessageText :=
                STRSUBSTNO(Text021,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          end else
            MessageText := Text022;
        end;
    END;

    LOCAL PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record Currency;
      PayableVendLedgEntry2@1001 : TEMPORARY Record "Payable Vendor Ledger Entry";
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(PayableVendLedgEntry);
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

      while PayableVendLedgEntry.NEXT <> 0 do begin
        TempCurrency.Code := PayableVendLedgEntry."Currency Code";
        CurrencyBalance := 0;
        if TempCurrency.INSERT then begin
          PayableVendLedgEntry2 := PayableVendLedgEntry;
          PayableVendLedgEntry.SETRANGE("Currency Code",PayableVendLedgEntry."Currency Code");
          repeat
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          until PayableVendLedgEntry.NEXT = 0;
          if CurrencyBalance < 0 then begin
            PayableVendLedgEntry.DELETEALL;
            AmountAvailable += CurrencyBalance;
          end;
          PayableVendLedgEntry.SETRANGE("Currency Code");
          PayableVendLedgEntry := PayableVendLedgEntry2;
        end;
      end;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record "Dimension Buffer") : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      exit(not DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableVendLedgEntry@1000 : Record "Payable Vendor Ledger Entry";RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      PayableVendLedgEntry.SETFILTER("Amount (LCY)",'>%1',RemainingAmtAvailable);
      PayableVendLedgEntry.DELETEALL;
      PayableVendLedgEntry.SETRANGE("Amount (LCY)");
    END;

    LOCAL PROCEDURE InsertDimBuf@9(VAR DimBuf@1004 : Record "Dimension Buffer";TableID@1000 : Integer;EntryNo@1001 : Integer;DimCode@1002 : Code[20];DimValue@1003 : Code[20]);
    BEGIN
      DimBuf.INIT;
      DimBuf."Table ID" := TableID;
      DimBuf."Entry No." := EntryNo;
      DimBuf."Dimension Code" := DimCode;
      DimBuf."Dimension Value Code" := DimValue;
      DimBuf.INSERT;
    END;

    LOCAL PROCEDURE GetMessageToRecipient@18(SummarizePerVend@1000 : Boolean) : Text[140];
    VAR
      VendorLedgerEntry@1001 : Record "Vendor Ledger Entry";
    BEGIN
      if SummarizePerVend then
        exit(CompanyInformation.Name);

      VendorLedgerEntry.GET(TempPaymentBuffer."Vendor Ledg. Entry No.");
      if VendorLedgerEntry."Message to Recipient" <> '' then
        exit(VendorLedgerEntry."Message to Recipient");

      exit(
        STRSUBSTNO(
          MessageToRecipientMsg,
          TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
          TempPaymentBuffer."Applies-to Ext. Doc. No."));
    END;

    LOCAL PROCEDURE SetPostingDate@92(VAR GenJnlLine@1002 : Record "Gen. Journal Line";DueDate@1001 : Date;PostingDate@1000 : Date) : Boolean;
    BEGIN
      if not UseDueDateAsPostingDate then begin
        GenJnlLine.VALIDATE("Posting Date",PostingDate);
        exit(false);
      end;

      if DueDate = 0D then
        DueDate := GenJnlLine.GetAppliesToDocDueDate;
      exit(GenJnlLine.SetPostingDateAsDueDate(DueDate,DueDateOffset));
    END;

    LOCAL PROCEDURE GetApplDueDate@94(VendLedgEntryNo@1001 : Integer) : Date;
    VAR
      AppliedVendLedgEntry@1000 : Record "Vendor Ledger Entry";
    BEGIN
      if AppliedVendLedgEntry.GET(VendLedgEntryNo) then
        exit(AppliedVendLedgEntry."Due Date");

      exit(PostingDate);
    END;

    LOCAL PROCEDURE AdjustAgainstSelectedDim@16(VAR TempDimSetEntry@1000 : TEMPORARY Record "Dimension Set Entry";VAR TempDimSetEntry2@1003 : TEMPORARY Record "Dimension Set Entry") : Boolean;
    BEGIN
      if SelectedDim.FINDSET then begin
        repeat
          TempDimSetEntry.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
          if TempDimSetEntry.FINDFIRST then begin
            TempDimSetEntry2.TRANSFERFIELDS(TempDimSetEntry,true);
            TempDimSetEntry2.INSERT;
          end;
        until SelectedDim.NEXT = 0;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE SetTempPaymentBufferDims@12(VAR DimBuf@1000 : Record "Dimension Buffer");
    VAR
      GLSetup@1003 : Record "General Ledger Setup";
      EntryNo@1001 : Integer;
    BEGIN
      if SummarizePerDim then begin
        DimBuf.RESET;
        DimBuf.DELETEALL;
        if SelectedDim.FIND('-') then
          repeat
            if DimSetEntry.GET(
                 VendLedgEntry."Dimension Set ID",SelectedDim."Dimension Code")
            then
              InsertDimBuf(DimBuf,DATABASE::"Dimension Buffer",0,DimSetEntry."Dimension Code",
                DimSetEntry."Dimension Value Code");
          until SelectedDim.NEXT = 0;
        EntryNo := DimBufMgt.FindDimensions(DimBuf);
        if EntryNo = 0 then
          EntryNo := DimBufMgt.InsertDimensions(DimBuf);
        TempPaymentBuffer."Dimension Entry No." := EntryNo;
        if TempPaymentBuffer."Dimension Entry No." <> 0 then begin
          GLSetup.GET;
          if DimCodeIsInDimBuf(GLSetup."Global Dimension 1 Code",DimBuf) then
            TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code"
          else
            TempPaymentBuffer."Global Dimension 1 Code" := '';
          if DimCodeIsInDimBuf(GLSetup."Global Dimension 2 Code",DimBuf) then
            TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code"
          else
            TempPaymentBuffer."Global Dimension 2 Code" := '';
        end else begin
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
        end;
        TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
      end else begin
        TempPaymentBuffer."Dimension Entry No." := 0;
        TempPaymentBuffer."Global Dimension 1 Code" := '';
        TempPaymentBuffer."Global Dimension 2 Code" := '';
        TempPaymentBuffer."Dimension Set ID" := 0;
      end;
    END;

    LOCAL PROCEDURE IsEntryAlreadyApplied@19(GenJnlLine3@1000 : Record "Gen. Journal Line";VendLedgEntry2@1001 : Record "Vendor Ledger Entry") : Boolean;
    VAR
      GenJnlLine4@1002 : Record "Gen. Journal Line";
    BEGIN
      GenJnlLine4.SETRANGE("Journal Template Name",GenJnlLine3."Journal Template Name");
      GenJnlLine4.SETRANGE("Journal Batch Name",GenJnlLine3."Journal Batch Name");
      GenJnlLine4.SETRANGE("Account Type",GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
      GenJnlLine4.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
      GenJnlLine4.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
      exit(not GenJnlLine4.ISEMPTY);
    END;

    LOCAL PROCEDURE SetDefaults@14();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      if GenJnlBatch."Bal. Account No." <> '' then begin
        GenJnlLine2."Bal. Account Type" := GenJnlBatch."Bal. Account Type";
        GenJnlLine2."Bal. Account No." := GenJnlBatch."Bal. Account No.";
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateTempBufferFromVendorLedgerEntry@1085(VAR TempPaymentBuffer@1086 : TEMPORARY Record "Payment Buffer";VendorLedgerEntry@1088 : Record "Vendor Ledger Entry");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateGnlJnlLineDimensionsFromTempBuffer@1090(VAR GenJournalLine@1091 : Record "Gen. Journal Line";TempPaymentBuffer@1092 : TEMPORARY Record "Payment Buffer");
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

