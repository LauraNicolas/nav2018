OBJECT Table 7500 Item Attribute
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Name;
    OnDelete=BEGIN
               if HasBeenUsed then
                 if not CONFIRM(DeleteUsedAttributeQst) then
                   ERROR('');
               DeleteValuesAndTranslations;
             END;

    OnRename=VAR
               ItemAttributeValue@1000 : Record "Item Attribute Value";
             BEGIN
               ItemAttributeValue.SETRANGE("Attribute ID",xRec.ID);
               if ItemAttributeValue.FINDSET then
                 repeat
                   ItemAttributeValue.RENAME(ID,ItemAttributeValue.ID);
                 until ItemAttributeValue.NEXT = 0;
             END;

    CaptionML=ENU=Item Attribute;
    LookupPageID="Item Attributes";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=ID;
                                                   NotBlank=true }
    { 2   ;   ;Name                ;Text250       ;OnValidate=BEGIN
                                                                if xRec.Name = Name then
                                                                  exit;

                                                                TESTFIELD(Name);
                                                                if HasBeenUsed then
                                                                  if not CONFIRM(RenameUsedAttributeQst) then
                                                                    ERROR('');
                                                                CheckNameUniqueness(Rec,Name);
                                                                DeleteValuesAndTranslationsConditionally(xRec,Name);
                                                              END;

                                                   CaptionML=ENU=Name;
                                                   NotBlank=true }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 7   ;   ;Type                ;Option        ;InitValue=Text;
                                                   OnValidate=VAR
                                                                ItemAttributeValue@1000 : Record "Item Attribute Value";
                                                              BEGIN
                                                                if xRec.Type <> Type then begin
                                                                  ItemAttributeValue.SETRANGE("Attribute ID",ID);
                                                                  if not ItemAttributeValue.ISEMPTY then
                                                                    ERROR(ChangingAttributeTypeErr,Name);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Option,Text,Integer,Decimal;
                                                   OptionString=Option,Text,Integer,Decimal }
    { 8   ;   ;Unit of Measure     ;Text30        ;OnValidate=BEGIN
                                                                if (xRec."Unit of Measure" <> '') and (xRec."Unit of Measure" <> "Unit of Measure") then
                                                                  if HasBeenUsed then
                                                                    if not CONFIRM(ChangeUsedAttributeUoMQst) then
                                                                      ERROR('');
                                                              END;

                                                   CaptionML=ENU=Unit of Measure }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=true }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Name                                     }
    { 2   ;Brick               ;ID,Name                                  }
  }
  CODE
  {
    VAR
      ItemAttributeTranslation@1022 : Record "Item Attribute Translation";
      NameAlreadyExistsErr@1000 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute with name ''%1'' already exists.';
      ReuseValueTranslationsQst@1001 : TextConst '@@@=%1 - arbitrary name,%2 - arbitrary name;ENU=There are values and translations for item attribute ''%1''.\\Do you want to reuse them after changing the item attribute name to ''%2''?';
      ChangingAttributeTypeErr@1002 : TextConst '@@@=%1 - arbirtrary text;ENU=You cannot change the type of item attribute ''%1'', because it is either in use or it has predefined values.';
      DeleteUsedAttributeQst@1004 : TextConst 'ENU=This item attribute has been assigned to at least one item.\\Are you sure you want to delete it?';
      RenameUsedAttributeQst@1005 : TextConst 'ENU=This item attribute has been assigned to at least one item.\\Are you sure you want to rename it?';
      ChangeUsedAttributeUoMQst@1003 : TextConst 'ENU=This item attribute has been assigned to at least one item.\\Are you sure you want to change its unit of measure?';
      ChangeToOptionQst@1006 : TextConst 'ENU=Predefined values can be defined only for item attributes of type Option.\\Do you want to change the type of this item attribute to Option?';

    [External]
    PROCEDURE GetTranslatedName@3(LanguageID@1000 : Integer) : Text[250];
    VAR
      Language@1001 : Record Language;
    BEGIN
      Language.SETRANGE("Windows Language ID",LanguageID);
      if Language.FINDFIRST then begin
        GetAttributeTranslation(Language.Code);
        exit(ItemAttributeTranslation.Name);
      end;
      exit(Name);
    END;

    [External]
    PROCEDURE GetNameInCurrentLanguage@4() : Text[250];
    BEGIN
      exit(GetTranslatedName(GLOBALLANGUAGE));
    END;

    LOCAL PROCEDURE GetAttributeTranslation@19(LanguageCode@1000 : Code[10]);
    BEGIN
      if (ItemAttributeTranslation."Attribute ID" <> ID) or (ItemAttributeTranslation."Language Code" <> LanguageCode) then
        if not ItemAttributeTranslation.GET(ID,LanguageCode) then begin
          ItemAttributeTranslation.INIT;
          ItemAttributeTranslation."Attribute ID" := ID;
          ItemAttributeTranslation."Language Code" := LanguageCode;
          ItemAttributeTranslation.Name := Name;
        end;
    END;

    [External]
    PROCEDURE GetValues@1() Values : Text;
    VAR
      ItemAttributeValue@1000 : Record "Item Attribute Value";
    BEGIN
      if Type <> Type::Option then
        exit('');
      ItemAttributeValue.SETRANGE("Attribute ID",ID);
      if ItemAttributeValue.FINDSET then
        repeat
          if Values <> '' then
            Values += ',';
          Values += ItemAttributeValue.Value;
        until ItemAttributeValue.NEXT = 0;
    END;

    [External]
    PROCEDURE HasBeenUsed@8() : Boolean;
    VAR
      ItemAttributeValueMapping@1000 : Record "Item Attribute Value Mapping";
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ID);
      exit(not ItemAttributeValueMapping.ISEMPTY);
    END;

    [External]
    PROCEDURE RemoveUnusedArbitraryValues@9();
    VAR
      ItemAttributeValue@1000 : Record "Item Attribute Value";
    BEGIN
      if Type = Type::Option then
        exit;

      ItemAttributeValue.SETRANGE("Attribute ID",ID);
      if ItemAttributeValue.FINDSET then
        repeat
          if not ItemAttributeValue.HasBeenUsed then
            ItemAttributeValue.DELETE;
        until ItemAttributeValue.NEXT = 0;
    END;

    [External]
    PROCEDURE OpenItemAttributeValues@2();
    VAR
      ItemAttributeValue@1000 : Record "Item Attribute Value";
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID",ID);
      if (Type <> Type::Option) and ItemAttributeValue.ISEMPTY then
        if CONFIRM(ChangeToOptionQst) then begin
          VALIDATE(Type,Type::Option);
          MODIFY;
        end;

      if Type = Type::Option then
        PAGE.RUN(PAGE::"Item Attribute Values",ItemAttributeValue);
    END;

    LOCAL PROCEDURE CheckNameUniqueness@5(ItemAttribute@1000 : Record "Item Attribute";NameToCheck@1001 : Text[250]);
    BEGIN
      ItemAttribute.SETRANGE(Name,NameToCheck);
      ItemAttribute.SETFILTER(ID,'<>%1',ItemAttribute.ID);
      if not ItemAttribute.ISEMPTY then
        ERROR(NameAlreadyExistsErr,NameToCheck);
    END;

    LOCAL PROCEDURE DeleteValuesAndTranslationsConditionally@7(ItemAttribute@1000 : Record "Item Attribute";NameToCheck@1001 : Text[250]);
    VAR
      ItemAttributeTranslation@1002 : Record "Item Attribute Translation";
      ItemAttributeValue@1003 : Record "Item Attribute Value";
      ValuesOrTranslationsExist@1004 : Boolean;
    BEGIN
      if (ItemAttribute.Name <> '') and (ItemAttribute.Name <> NameToCheck) then begin
        ItemAttributeValue.SETRANGE("Attribute ID",ID);
        ItemAttributeTranslation.SETRANGE("Attribute ID",ID);
        ValuesOrTranslationsExist := not (ItemAttributeValue.ISEMPTY and ItemAttributeTranslation.ISEMPTY);
        if ValuesOrTranslationsExist then
          if not CONFIRM(STRSUBSTNO(ReuseValueTranslationsQst,ItemAttribute.Name,NameToCheck)) then
            DeleteValuesAndTranslations;
      end;
    END;

    LOCAL PROCEDURE DeleteValuesAndTranslations@6();
    VAR
      ItemAttributeValue@1000 : Record "Item Attribute Value";
      ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID",ID);
      ItemAttributeValueMapping.DELETEALL;

      ItemAttributeValue.SETRANGE("Attribute ID",ID);
      ItemAttributeValue.DELETEALL;

      ItemAttributeTranslation.SETRANGE("Attribute ID",ID);
      ItemAttributeTranslation.DELETEALL;
    END;

    BEGIN
    END.
  }
}

