OBJECT Table 5766 Warehouse Activity Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "No." = '' then begin
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               end;

               NoSeriesMgt.SetDefaultSeries("Registering No. Series",GetRegisteringNoSeriesCode);
             END;

    OnDelete=BEGIN
               DeleteWhseActivHeader;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Activity Header;
    LookupPageID="Warehouse Activity List";
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Invt. Movement";
                                                   OptionString=" ","Put-away",Pick,Movement,"Invt. Put-away","Invt. Pick","Invt. Movement" }
    { 2   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                WMSManagement@1200 : Codeunit "WMS Management";
                                                              BEGIN
                                                                if "Location Code" <> '' then
                                                                  if not WMSManagement.LocationIsAllowed("Location Code") then
                                                                    ERROR(STRSUBSTNO(Text001,USERID) + STRSUBSTNO(' %1 %2.',FIELDCAPTION("Location Code"),"Location Code"));

                                                                GetLocation("Location Code");
                                                                case Type of
                                                                  Type::"Invt. Put-away":
                                                                    if Location.RequireReceive("Location Code") and ("Source Document" <> "Source Document"::"Prod. Output") then
                                                                      VALIDATE("Source Document","Source Document"::"Prod. Output");
                                                                  Type::"Invt. Pick":
                                                                    if Location.RequireShipment("Location Code") then
                                                                      Location.TESTFIELD("Require Shipment",false);
                                                                  Type::"Invt. Movement":
                                                                    Location.TESTFIELD("Directed Put-away and Pick",false);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 4   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Assigned User ID" <> '' then begin
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                end else begin
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 000000T;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 5   ;   ;Assignment Date     ;Date          ;CaptionML=ENU=Assignment Date;
                                                   Editable=false }
    { 6   ;   ;Assignment Time     ;Time          ;CaptionML=ENU=Assignment Time;
                                                   Editable=false }
    { 7   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                if "Sorting Method" <> xRec."Sorting Method" then
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=ENU=Sorting Method;
                                                   OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,Ship-To,Bin Ranking,Action Type";
                                                   OptionString=" ",Item,Document,"Shelf or Bin","Due Date","Ship-To","Bin Ranking","Action Type" }
    { 9   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 10  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE ("Table Name"=CONST("Whse. Activity Header"),
                                                                                                     Type=FIELD(Type),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 12  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=false }
    { 13  ;   ;No. of Lines        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Warehouse Activity Line" WHERE ("Activity Type"=FIELD(Type),
                                                                                                      "No."=FIELD("No."),
                                                                                                      "Source Type"=FIELD("Source Type Filter"),
                                                                                                      "Source Subtype"=FIELD("Source Subtype Filter"),
                                                                                                      "Source No."=FIELD("Source No. Filter"),
                                                                                                      "Location Code"=FIELD("Location Filter")));
                                                   CaptionML=ENU=No. of Lines;
                                                   Editable=false }
    { 14  ;   ;Source Type Filter  ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Type Filter }
    { 15  ;   ;Source Subtype Filter;Option       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Subtype Filter;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10" }
    { 16  ;   ;Source No. Filter   ;Code250       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source No. Filter }
    { 17  ;   ;Location Filter     ;Code250       ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Location Filter }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 61  ;   ;Registering No.     ;Code20        ;CaptionML=ENU=Registering No. }
    { 62  ;   ;Last Registering No.;Code20        ;TableRelation=IF (Type=CONST("Put-away")) "Registered Whse. Activity Hdr."."No." WHERE (Type=CONST("Put-away"))
                                                                 ELSE IF (Type=CONST(Pick)) "Registered Whse. Activity Hdr."."No." WHERE (Type=CONST(Pick))
                                                                 ELSE IF (Type=CONST(Movement)) "Registered Whse. Activity Hdr."."No." WHERE (Type=CONST(Movement));
                                                   CaptionML=ENU=Last Registering No.;
                                                   Editable=false }
    { 63  ;   ;Registering No. Series;Code20      ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Registering No. Series" <> '' then begin
                                                                  WhseSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetRegisteringNoSeriesCode,"Registering No. Series");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              with WhseActivHeader do begin
                                                                WhseActivHeader := Rec;
                                                                WhseSetup.GET;
                                                                TestNoSeries;
                                                                if NoSeriesMgt.LookupSeries(GetRegisteringNoSeriesCode,"Registering No. Series") then
                                                                  VALIDATE("Registering No. Series");
                                                                Rec := WhseActivHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Registering No. Series }
    { 7303;   ;Date of Last Printing;Date         ;CaptionML=ENU=Date of Last Printing;
                                                   Editable=false }
    { 7304;   ;Time of Last Printing;Time         ;CaptionML=ENU=Time of Last Printing;
                                                   Editable=false }
    { 7305;   ;Breakbulk Filter    ;Boolean       ;OnValidate=BEGIN
                                                                if "Breakbulk Filter" <> xRec."Breakbulk Filter" then
                                                                  SetBreakbulkFilter;
                                                              END;

                                                   AccessByPermission=TableData "Warehouse Source Filter"=R;
                                                   CaptionML=ENU=Breakbulk Filter }
    { 7306;   ;Source No.          ;Code20        ;OnValidate=VAR
                                                                WhseRequest@1002 : Record "Warehouse Request";
                                                                CreateInvtPutAway@1001 : Codeunit "Create Inventory Put-away";
                                                                CreateInvtPick@1000 : Codeunit "Create Inventory Pick/Movement";
                                                              BEGIN
                                                                if "Source No." <> xRec."Source No." then begin
                                                                  if LineExist then
                                                                    ERROR(Text002,FIELDCAPTION("Source No."));
                                                                  if "Source No." <> '' then begin
                                                                    TESTFIELD("Location Code");
                                                                    TESTFIELD("Source Document");
                                                                  end;
                                                                  ClearDestinationFields;

                                                                  if ("Source Type" <> 0) and ("Source No." <> '') then begin
                                                                    if Type = Type::"Invt. Put-away" then begin
                                                                      WhseRequest.GET(
                                                                        WhseRequest.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
                                                                      WhseRequest.TESTFIELD("Document Status",WhseRequest."Document Status"::Released);
                                                                      CreateInvtPutAway.SetWhseRequest(WhseRequest,true);
                                                                      CreateInvtPutAway.RUN(Rec);
                                                                    end;
                                                                    if Type = Type::"Invt. Pick" then begin
                                                                      WhseRequest.GET(
                                                                        WhseRequest.Type::Outbound,"Location Code","Source Type","Source Subtype","Source No.");
                                                                      WhseRequest.TESTFIELD("Document Status",WhseRequest."Document Status"::Released);
                                                                      CreateInvtPick.SetWhseRequest(WhseRequest,true);
                                                                      CreateInvtPick.RUN(Rec);
                                                                    end;
                                                                    if Type = Type::"Invt. Movement" then begin
                                                                      WhseRequest.GET(
                                                                        WhseRequest.Type::Outbound,"Location Code","Source Type","Source Subtype","Source No.");
                                                                      WhseRequest.TESTFIELD("Document Status",WhseRequest."Document Status"::Released);
                                                                      CreateInvtPick.SetInvtMovement(true);
                                                                      CreateInvtPick.SetWhseRequest(WhseRequest,true);
                                                                      CreateInvtPick.RUN(Rec);
                                                                    end;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Source No. }
    { 7307;   ;Source Document     ;Option        ;OnValidate=VAR
                                                                AssemblyLine@1000 : Record "Assembly Line";
                                                              BEGIN
                                                                if "Source Document" <> xRec."Source Document" then begin
                                                                  if LineExist then
                                                                    ERROR(Text002,FIELDCAPTION("Source Document"));
                                                                  "Source No." := '';
                                                                  ClearDestinationFields;
                                                                  if Type = Type::"Invt. Put-away" then begin
                                                                    GetLocation("Location Code");
                                                                    if Location.RequireReceive("Location Code") then
                                                                      TESTFIELD("Source Document","Source Document"::"Prod. Output");
                                                                  end;
                                                                end;

                                                                case "Source Document" of
                                                                  "Source Document"::"Purchase Order":
                                                                    begin
                                                                      "Source Type" := 39;
                                                                      "Source Subtype" := 1;
                                                                    end;
                                                                  "Source Document"::"Purchase Return Order":
                                                                    begin
                                                                      "Source Type" := 39;
                                                                      "Source Subtype" := 5;
                                                                    end;
                                                                  "Source Document"::"Sales Order":
                                                                    begin
                                                                      "Source Type" := 37;
                                                                      "Source Subtype" := 1;
                                                                    end;
                                                                  "Source Document"::"Sales Return Order":
                                                                    begin
                                                                      "Source Type" := 37;
                                                                      "Source Subtype" := 5;
                                                                    end;
                                                                  "Source Document"::"Outbound Transfer":
                                                                    begin
                                                                      "Source Type" := 5741;
                                                                      "Source Subtype" := 0;
                                                                    end;
                                                                  "Source Document"::"Inbound Transfer":
                                                                    begin
                                                                      "Source Type" := 5741;
                                                                      "Source Subtype" := 1;
                                                                    end;
                                                                  "Source Document"::"Prod. Consumption":
                                                                    begin
                                                                      "Source Type" := 5407;
                                                                      "Source Subtype" := 3;
                                                                    end;
                                                                  "Source Document"::"Prod. Output":
                                                                    begin
                                                                      "Source Type" := 5406;
                                                                      "Source Subtype" := 3;
                                                                    end;
                                                                  "Source Document"::"Assembly Consumption":
                                                                    begin
                                                                      "Source Type" := DATABASE::"Assembly Line";
                                                                      "Source Subtype" := AssemblyLine."Document Type"::Order;
                                                                    end;
                                                                end;

                                                                if "Source Document" = 0 then begin
                                                                  "Source Type" := 0;
                                                                  "Source Subtype" := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=" ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output,,,,,,,,Assembly Consumption,Assembly Order";
                                                   OptionString=" ","Sales Order",,,"Sales Return Order","Purchase Order",,,"Purchase Return Order","Inbound Transfer","Outbound Transfer","Prod. Consumption","Prod. Output",,,,,,,,"Assembly Consumption","Assembly Order";
                                                   BlankZero=true }
    { 7308;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 7309;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 7310;   ;Destination Type    ;Option        ;CaptionML=ENU=Destination Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Location,Item,Family,Sales Order";
                                                   OptionString=" ",Customer,Vendor,Location,Item,Family,"Sales Order" }
    { 7311;   ;Destination No.     ;Code20        ;TableRelation=IF ("Destination Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Destination Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Destination Type"=CONST(Location)) Location
                                                                 ELSE IF ("Destination Type"=CONST(Item)) Item
                                                                 ELSE IF ("Destination Type"=CONST(Family)) Family
                                                                 ELSE IF ("Destination Type"=CONST("Sales Order")) "Sales Header"."No." WHERE ("Document Type"=CONST(Order));
                                                   CaptionML=ENU=Destination No. }
    { 7312;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 7313;   ;Expected Receipt Date;Date         ;CaptionML=ENU=Expected Receipt Date }
    { 7314;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 7315;   ;External Document No.2;Code35      ;CaptionML=ENU=External Document No.2 }
  }
  KEYS
  {
    {    ;Type,"No."                              ;Clustered=true }
    {    ;"Location Code"                          }
    {    ;"Source Document","Source No.","Location Code" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.';
      Location@1012 : Record Location;
      WhseActivHeader@1006 : Record "Warehouse Activity Header";
      WhseSetup@1008 : Record "Warehouse Setup";
      InvtSetup@1002 : Record "Inventory Setup";
      NoSeriesMgt@1010 : Codeunit NoSeriesManagement;
      Text001@1001 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      Text002@1003 : TextConst 'ENU=You cannot change %1 because one or more lines exist.';

    [External]
    PROCEDURE AssistEdit@8(OldWhseActivHeader@1000 : Record "Warehouse Activity Header") : Boolean;
    BEGIN
      with WhseActivHeader do begin
        WhseActivHeader := Rec;
        TestNoSeries;
        if NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldWhseActivHeader."No. Series","No. Series")
        then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseActivHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@7() : Code[10];
    BEGIN
      case Type of
        Type::"Put-away":
          begin
            WhseSetup.GET;
            exit(WhseSetup."Whse. Put-away Nos.");
          end;
        Type::Pick:
          begin
            WhseSetup.GET;
            exit(WhseSetup."Whse. Pick Nos.");
          end;
        Type::Movement:
          begin
            WhseSetup.GET;
            exit(WhseSetup."Whse. Movement Nos.");
          end;
        Type::"Invt. Put-away":
          begin
            InvtSetup.GET;
            exit(InvtSetup."Inventory Put-away Nos.");
          end;
        Type::"Invt. Pick":
          begin
            InvtSetup.GET;
            exit(InvtSetup."Inventory Pick Nos.");
          end;
        Type::"Invt. Movement":
          begin
            InvtSetup.GET;
            exit(InvtSetup."Inventory Movement Nos.");
          end;
      end;
    END;

    LOCAL PROCEDURE TestNoSeries@5();
    BEGIN
      case Type of
        Type::"Put-away":
          begin
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Put-away Nos.");
          end;
        Type::Pick:
          begin
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Pick Nos.");
          end;
        Type::Movement:
          begin
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Movement Nos.");
          end;
        Type::"Invt. Put-away":
          begin
            InvtSetup.GET;
            InvtSetup.TESTFIELD("Inventory Put-away Nos.");
          end;
        Type::"Invt. Pick":
          begin
            InvtSetup.GET;
            InvtSetup.TESTFIELD("Inventory Pick Nos.");
          end;
        Type::"Invt. Movement":
          begin
            InvtSetup.GET;
            InvtSetup.TESTFIELD("Inventory Movement Nos.");
          end;
      end;
    END;

    LOCAL PROCEDURE GetRegisteringNoSeriesCode@9() : Code[10];
    VAR
      InventorySetup@1000 : Record "Inventory Setup";
    BEGIN
      WhseSetup.GET;
      case Type of
        Type::"Put-away":
          exit(WhseSetup."Registered Whse. Put-away Nos.");
        Type::Pick:
          exit(WhseSetup."Registered Whse. Pick Nos.");
        Type::Movement:
          exit(WhseSetup."Registered Whse. Movement Nos.");
        Type::"Invt. Movement":
          begin
            InventorySetup.GET;
            exit(InventorySetup."Registered Invt. Movement Nos.");
          end;
      end;
    END;

    [External]
    PROCEDURE SortWhseDoc@3();
    VAR
      WhseActivLine2@1001 : Record "Warehouse Activity Line";
      WhseActivLine3@1002 : Record "Warehouse Activity Line";
      BreakBulkWhseActivLine@1003 : Record "Warehouse Activity Line";
      TempWhseActivLine@1004 : TEMPORARY Record "Warehouse Activity Line";
      SequenceNo@1000 : Integer;
      SortingOrder@1005 : 'Bin,Shelf';
    BEGIN
      WhseActivLine2.LOCKTABLE;
      WhseActivLine2.SETRANGE("Activity Type",Type);
      WhseActivLine2.SETRANGE("No.","No.");
      case "Sorting Method" of
        "Sorting Method"::Item:
          WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Item No.");
        "Sorting Method"::Document:
          WhseActivLine2.SETCURRENTKEY(
            "Activity Type","No.","Location Code","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then begin
              WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Bin Code");
              if WhseActivLine2.FIND('-') then
                if WhseActivLine2."Activity Type" <> WhseActivLine2."Activity Type"::Pick
                then begin
                  SequenceNo := 10000;
                  WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
                  WhseActivLine2.SETRANGE("Breakbulk No.",0);
                  if WhseActivLine2.FIND('-') then
                    repeat
                      TempWhseActivLine.INIT;
                      TempWhseActivLine.COPY(WhseActivLine2);
                      TempWhseActivLine.INSERT;
                    until WhseActivLine2.NEXT = 0;
                  TempWhseActivLine.SETRANGE("Breakbulk No.",0);
                  if TempWhseActivLine.FIND('-') then
                    repeat
                      WhseActivLine2.SETRANGE("Breakbulk No.",0);
                      WhseActivLine2.SETRANGE(
                        "Action Type",WhseActivLine2."Action Type"::Take);
                      WhseActivLine2.SETRANGE(
                        "Whse. Document Type",TempWhseActivLine."Whse. Document Type");
                      WhseActivLine2.SETRANGE(
                        "Whse. Document No.",TempWhseActivLine."Whse. Document No.");
                      WhseActivLine2.SETRANGE(
                        "Whse. Document Line No.",TempWhseActivLine."Whse. Document Line No.");
                      if WhseActivLine2.FIND('-') then
                        repeat
                          SortTakeLines(WhseActivLine2,SequenceNo);
                          WhseActivLine3.GET(
                            TempWhseActivLine."Activity Type",
                            TempWhseActivLine."No.",TempWhseActivLine."Line No.");
                          WhseActivLine3."Sorting Sequence No." := SequenceNo;
                          WhseActivLine3.MODIFY;
                          SequenceNo := SequenceNo + 10000;
                        until WhseActivLine2.NEXT = 0;
                    until TempWhseActivLine.NEXT = 0;
                end else begin
                  SortLinesBinShelf(WhseActivLine2,SequenceNo,SortingOrder::Bin);
                  WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
                end;
            end else begin
              SortLinesBinShelf(WhseActivLine2,SequenceNo,SortingOrder::Shelf);
              WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
            end;
          end;
        "Sorting Method"::"Due Date":
          WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Due Date");
        "Sorting Method"::"Ship-To":
          WhseActivLine2.SETCURRENTKEY(
            "Activity Type","No.","Destination Type","Destination No.");
        "Sorting Method"::"Bin Ranking":
          begin
            WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Bin Ranking");
            WhseActivLine2.SETRANGE("Breakbulk No.",0);
            if WhseActivLine2.FIND('-') then begin
              SequenceNo := 10000;
              WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Take);
              if WhseActivLine2.FIND('-') then
                repeat
                  SetActivityFilter(WhseActivLine2,WhseActivLine3);
                  if WhseActivLine3.FIND('-') then
                    repeat
                      WhseActivLine3."Sorting Sequence No." := SequenceNo;
                      WhseActivLine3.MODIFY;
                      SequenceNo := SequenceNo + 10000;
                      BreakBulkWhseActivLine.COPY(WhseActivLine3);
                      BreakBulkWhseActivLine.SETRANGE("Action Type",WhseActivLine3."Action Type"::Place);
                      BreakBulkWhseActivLine.SETRANGE("Breakbulk No.",WhseActivLine3."Breakbulk No.");
                      if BreakBulkWhseActivLine.FIND('-') then
                        repeat
                          BreakBulkWhseActivLine."Sorting Sequence No." := SequenceNo;
                          BreakBulkWhseActivLine.MODIFY;
                          SequenceNo := SequenceNo + 10000;
                        until BreakBulkWhseActivLine.NEXT = 0;
                    until WhseActivLine3.NEXT = 0;
                  WhseActivLine2."Sorting Sequence No." := SequenceNo;
                  WhseActivLine2.MODIFY;
                  SequenceNo := SequenceNo + 10000;
                until WhseActivLine2.NEXT = 0;
              WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
              WhseActivLine2.SETRANGE("Breakbulk No.",0);
              if WhseActivLine2.FIND('-') then
                repeat
                  WhseActivLine2."Sorting Sequence No." := SequenceNo;
                  WhseActivLine2.MODIFY;
                  SequenceNo := SequenceNo + 10000;
                until WhseActivLine2.NEXT = 0;
            end;
          end;
        "Sorting Method"::"Action Type":
          begin
            WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Action Type","Bin Code");
            WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Take);
            if WhseActivLine2.FIND('-') then begin
              SequenceNo := 10000;
              repeat
                WhseActivLine2."Sorting Sequence No." := SequenceNo;
                WhseActivLine2.MODIFY;
                SequenceNo := SequenceNo + 10000;
                if WhseActivLine2."Breakbulk No." <> 0 then begin
                  WhseActivLine3.COPY(WhseActivLine2);
                  WhseActivLine3.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
                  WhseActivLine3.SETRANGE("Breakbulk No.",WhseActivLine2."Breakbulk No.");
                  if WhseActivLine3.FIND('-') then
                    repeat
                      WhseActivLine3."Sorting Sequence No." := SequenceNo;
                      WhseActivLine3.MODIFY;
                      SequenceNo := SequenceNo + 10000;
                    until WhseActivLine3.NEXT = 0;
                end;
              until WhseActivLine2.NEXT = 0;
            end;
            WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
            WhseActivLine2.SETRANGE("Breakbulk No.",0);
            if WhseActivLine2.FIND('-') then
              repeat
                WhseActivLine2."Sorting Sequence No." := SequenceNo;
                WhseActivLine2.MODIFY;
                SequenceNo := SequenceNo + 10000;
              until WhseActivLine2.NEXT = 0;
          end;
      end;

      if SequenceNo = 0 then begin
        WhseActivLine2.SETRANGE("Breakbulk No.",0);
        if WhseActivLine2.FIND('-') then begin
          SequenceNo := 10000;
          repeat
            SetActivityFilter(WhseActivLine2,WhseActivLine3);
            if WhseActivLine3.FIND('-') then
              repeat
                WhseActivLine3."Sorting Sequence No." := SequenceNo;
                WhseActivLine3.MODIFY;
                SequenceNo := SequenceNo + 10000;
              until WhseActivLine3.NEXT = 0;

            WhseActivLine2."Sorting Sequence No." := SequenceNo;
            WhseActivLine2.MODIFY;
            SequenceNo := SequenceNo + 10000;
          until WhseActivLine2.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE SortTakeLines@10(VAR NewWhseActivLine2@1000 : Record "Warehouse Activity Line";VAR NewSequenceNo@1001 : Integer);
    VAR
      WhseActivLine3@1002 : Record "Warehouse Activity Line";
    BEGIN
      if not NewWhseActivLine2.MARK then begin
        WhseActivLine3.COPY(NewWhseActivLine2);
        WhseActivLine3.SETRANGE("Bin Code",NewWhseActivLine2."Bin Code");
        WhseActivLine3.SETFILTER("Breakbulk No.",'<>0');
        WhseActivLine3.SETRANGE("Action Type");
        if WhseActivLine3.FIND('-') then
          repeat
            WhseActivLine3."Sorting Sequence No." := NewSequenceNo;
            WhseActivLine3.MODIFY;
            NewSequenceNo := NewSequenceNo + 10000;
          until WhseActivLine3.NEXT = 0;

        NewWhseActivLine2.MARK(true);
        NewWhseActivLine2."Sorting Sequence No." := NewSequenceNo;
        NewWhseActivLine2.MODIFY;
        NewSequenceNo := NewSequenceNo + 10000;
      end;
    END;

    LOCAL PROCEDURE SortLinesBinShelf@12(VAR WarehouseActivityLineParam@1000 : Record "Warehouse Activity Line";VAR SeqNo@1001 : Integer;SortOrder@1002 : 'Bin,Shelf');
    VAR
      WarehouseActivityLineLocal@1003 : Record "Warehouse Activity Line";
      TempWarehouseActivityLine@1004 : TEMPORARY Record "Warehouse Activity Line";
      NewSequenceNo@1005 : Integer;
    BEGIN
      TempWarehouseActivityLine.DELETEALL;
      SeqNo := 0;
      WarehouseActivityLineLocal.COPY(WarehouseActivityLineParam);
      WarehouseActivityLineLocal.SETCURRENTKEY("Activity Type","No.","Line No.");
      if not WarehouseActivityLineLocal.FINDSET then
        exit;
      repeat
        if WarehouseActivityLineLocal."Action Type" = WarehouseActivityLineLocal."Action Type"::Take then begin
          TempWarehouseActivityLine := WarehouseActivityLineLocal;
          TempWarehouseActivityLine.INSERT;
        end;
      until WarehouseActivityLineLocal.NEXT = 0;
      case SortOrder of
        SortOrder::Bin:
          TempWarehouseActivityLine.SETCURRENTKEY("Activity Type","No.","Bin Code");
        SortOrder::Shelf:
          TempWarehouseActivityLine.SETCURRENTKEY("Activity Type","No.","Shelf No.");
      end;
      if not TempWarehouseActivityLine.FIND('-') then
        exit;
      NewSequenceNo := 0;
      repeat
        NewSequenceNo += 10000;
        WarehouseActivityLineLocal.GET(
          TempWarehouseActivityLine."Activity Type",TempWarehouseActivityLine."No.",TempWarehouseActivityLine."Line No.");
        WarehouseActivityLineLocal."Sorting Sequence No." := NewSequenceNo;
        WarehouseActivityLineLocal.MODIFY;
        NewSequenceNo += 10000;
        if WarehouseActivityLineLocal.NEXT <> 0 then
          if WarehouseActivityLineLocal."Action Type" = WarehouseActivityLineLocal."Action Type"::Place then begin
            WarehouseActivityLineLocal."Sorting Sequence No." := NewSequenceNo;
            WarehouseActivityLineLocal.MODIFY;
          end;
      until TempWarehouseActivityLine.NEXT = 0;
      SeqNo := NewSequenceNo;
    END;

    LOCAL PROCEDURE SetBreakbulkFilter@6();
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETRANGE("Original Breakbulk",true);
      if "Breakbulk Filter" then
        WhseActivLine.MODIFYALL(Breakbulk,true)
      else
        WhseActivLine.MODIFYALL(Breakbulk,false)
    END;

    LOCAL PROCEDURE SetActivityFilter@18(VAR WhseActivLineFrom@1000 : Record "Warehouse Activity Line";VAR WhseActivLineTo@1001 : Record "Warehouse Activity Line");
    BEGIN
      WhseActivLineTo.COPY(WhseActivLineFrom);
      WhseActivLineTo.SETRANGE("Bin Code",WhseActivLineFrom."Bin Code");
      WhseActivLineTo.SETFILTER("Breakbulk No.",'<>0');
      WhseActivLineTo.SETRANGE("Whse. Document Type",WhseActivLineFrom."Whse. Document Type");
      WhseActivLineTo.SETRANGE("Whse. Document No.",WhseActivLineFrom."Whse. Document No.");
      WhseActivLineTo.SETRANGE("Whse. Document Line No.",WhseActivLineFrom."Whse. Document Line No.");
    END;

    LOCAL PROCEDURE DeleteWhseActivHeader@11();
    VAR
      WhseActivLine2@1000 : Record "Warehouse Activity Line";
      WhseCommentLine@1001 : Record "Warehouse Comment Line";
    BEGIN
      WhseActivLine2.SETRANGE("Activity Type",Type);
      WhseActivLine2.SETRANGE("No.","No.");
      if WhseActivLine2.FINDFIRST then
        WhseActivLine2.DeleteRelatedWhseActivLines(WhseActivLine2,true);

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Whse. Activity Header");
      WhseCommentLine.SETRANGE(Type,Type);
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;
    END;

    LOCAL PROCEDURE GetLocation@4(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE LookupActivityHeader@1(VAR CurrentLocationCode@1000 : Code[10];VAR WhseActivHeader@1001 : Record "Warehouse Activity Header");
    BEGIN
      COMMIT;
      if USERID <> '' then begin
        WhseActivHeader.FILTERGROUP := 2;
        WhseActivHeader.SETRANGE("Location Code");
      end;
      if PAGE.RUNMODAL(0,WhseActivHeader) = ACTION::LookupOK then;
      if USERID <> '' then begin
        WhseActivHeader.FILTERGROUP := 2;
        WhseActivHeader.SETRANGE("Location Code",WhseActivHeader."Location Code");
        WhseActivHeader.FILTERGROUP := 0;
      end;
      CurrentLocationCode := WhseActivHeader."Location Code";
    END;

    [External]
    PROCEDURE LineExist@2() : Boolean;
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      exit(not WhseActivLine.ISEMPTY);
    END;

    [External]
    PROCEDURE FindFirstAllowedRec@13(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseActivHeader@1010 : Record "Warehouse Activity Header";
      WMSManagement@1001 : Codeunit "WMS Management";
    BEGIN
      if FIND(Which) then begin
        WhseActivHeader := Rec;
        while true do begin
          if WMSManagement.LocationIsAllowedToView("Location Code") then
            exit(true);

          if NEXT(1) = 0 then begin
            Rec := WhseActivHeader;
            if FIND(Which) then
              while true do begin
                if WMSManagement.LocationIsAllowedToView("Location Code") then
                  exit(true);

                if NEXT(-1) = 0 then
                  exit(false);
              end;
          end;
        end;
      end;
      exit(false);
    END;

    [External]
    PROCEDURE FindNextAllowedRec@14(Steps@1000 : Integer) : Integer;
    VAR
      WhseActivHeader@1010 : Record "Warehouse Activity Header";
      WMSManagement@1001 : Codeunit "WMS Management";
      RealSteps@1003 : Integer;
      NextSteps@1002 : Integer;
    BEGIN
      RealSteps := 0;
      if Steps <> 0 then begin
        WhseActivHeader := Rec;
        repeat
          NextSteps := NEXT(Steps / ABS(Steps));
          if WMSManagement.LocationIsAllowedToView("Location Code") then begin
            RealSteps := RealSteps + NextSteps;
            WhseActivHeader := Rec;
          end;
        until (NextSteps = 0) or (RealSteps = Steps);
        Rec := WhseActivHeader;
        if not FIND then ;
      end;
      exit(RealSteps);
    END;

    [External]
    PROCEDURE ErrorIfUserIsNotWhseEmployee@15();
    VAR
      WhseEmployee@1000 : Record "Warehouse Employee";
    BEGIN
      if USERID <> '' then begin
        WhseEmployee.SETRANGE("User ID",USERID);
        if WhseEmployee.ISEMPTY then
          ERROR(Text001,USERID);
      end;
    END;

    [External]
    PROCEDURE GetUserLocation@17() : Code[10];
    VAR
      WarehouseEmployee@1000 : Record "Warehouse Employee";
    BEGIN
      WarehouseEmployee.SETCURRENTKEY(Default);
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,true);
      if WarehouseEmployee.FINDFIRST then
        exit(WarehouseEmployee."Location Code");

      WarehouseEmployee.SETRANGE(Default);
      WarehouseEmployee.FINDFIRST;
      exit(WarehouseEmployee."Location Code");
    END;

    LOCAL PROCEDURE ClearDestinationFields@16();
    BEGIN
      "Destination Type" := "Destination Type"::" ";
      "Destination No." := '';
    END;

    BEGIN
    END.
  }
}

