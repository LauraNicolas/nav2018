OBJECT Table 296 Reminder Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ReminderHeader.GET("Reminder No.");
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",false);
             END;

    OnDelete=BEGIN
               ReminderLine.SETRANGE("Reminder No.","Reminder No.");
               ReminderLine.SETRANGE("Attached to Line No.","Line No.");
               ReminderLine.DELETEALL;
             END;

    CaptionML=ENU=Reminder Line;
  }
  FIELDS
  {
    { 1   ;   ;Reminder No.        ;Code20        ;TableRelation="Reminder Header";
                                                   CaptionML=ENU=Reminder No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   NotBlank=true }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Reminder Line"."Line No." WHERE ("Reminder No."=FIELD("Reminder No."));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=false }
    { 4   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                CustPostingGr@1000 : Record "Customer Posting Group";
                                                              BEGIN
                                                                if Type <> xRec.Type then begin
                                                                  ReminderLine := Rec;
                                                                  INIT;
                                                                  Type := ReminderLine.Type;
                                                                  GetReminderHeader;
                                                                  if Type = Type::"Line Fee" then begin
                                                                    "Line Type" := "Line Type"::"Line Fee";
                                                                    CustPostingGr.GET(ReminderHeader."Customer Posting Group");
                                                                    if CustPostingGr."Add. Fee per Line Account" <> '' then
                                                                      VALIDATE("No.",CustPostingGr."Add. Fee per Line Account");
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Customer Ledger Entry,Line Fee";
                                                   OptionString=" ","G/L Account","Customer Ledger Entry","Line Fee" }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                GetReminderHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                CustLedgEntry.TESTFIELD(Open,true);
                                                                CustLedgEntry.TESTFIELD("Customer No.",ReminderHeader."Customer No.");
                                                                if CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" then
                                                                  ERROR(
                                                                    MustBeSameErr,
                                                                    ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                    ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                "No. of Reminders" := GetNoOfReminderForCustLedgEntry("Entry No.");

                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              if Type <> Type::"Customer Ledger Entry" then
                                                                exit;
                                                              SetCustLedgEntryView;
                                                              if CustLedgEntry.GET("Entry No.") then;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=ENU=Entry No.;
                                                   BlankZero=true }
    { 6   ;   ;No. of Reminders    ;Integer       ;OnValidate=BEGIN
                                                                if Type = Type::"Line Fee" then
                                                                  VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=ENU=No. of Reminders }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   Editable=false }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date;
                                                   Editable=false }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date;
                                                   Editable=false }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                if "Document No." <> '' then begin
                                                                  SetCustLedgEntryView;
                                                                  if "Document Type" <> 0 then
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  if CustLedgEntry.FINDFIRST then
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  else
                                                                    ERROR(NoOpenEntriesErr,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              if Type <> Type::"Customer Ledger Entry" then
                                                                exit;
                                                              SetCustLedgEntryView;
                                                              if "Document Type" <> 0 then
                                                                CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                              if "Document No." <> '' then
                                                                CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                              if CustLedgEntry.FINDFIRST then;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=ENU=Document No. }
    { 12  ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=ENU=Original Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=ENU=Remaining Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF (Type=CONST("Line Fee")) "G/L Account";
                                                   OnValidate=BEGIN
                                                                if "No." <> '' then
                                                                  case Type of
                                                                    Type::" ":
                                                                      begin
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      end;
                                                                    Type::"Customer Ledger Entry":
                                                                      begin
                                                                        ReminderLine.Type := ReminderLine.Type::" ";
                                                                        ReminderLine2.Type := ReminderLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          MustBeErr,
                                                                          FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                      end;
                                                                    Type::"G/L Account":
                                                                      FillLineWithGLAccountData("No.");
                                                                    Type::"Line Fee":
                                                                      FillLineWithGLAccountData("No.");
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                if Type = Type::" " then begin
                                                                  ReminderLine.Type := ReminderLine.Type::"G/L Account";
                                                                  ReminderLine2.Type := ReminderLine.Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    MustBeErr,
                                                                    FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                end;
                                                                if (Type = Type::"Line Fee") and (Amount < 0) then
                                                                  ERROR(MustBePositiveErr,FIELDCAPTION(Amount));

                                                                GetReminderHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount * ("VAT %" / 100);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      if Amount - "VAT Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                    end;
                                                                  4:
                                                                    begin
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    end;
                                                                end;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=ENU=Interest Rate;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 22  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 23  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetReminderHeader;
                                                                VATPostingSetup.GET(ReminderHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    begin
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      TESTFIELD("No.",VATPostingSetup.GetSalesAccount(false));
                                                                    end;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      if Amount - "VAT Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                end;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 24  ;   ;VAT Identifier      ;Code20        ;CaptionML=ENU=VAT Identifier;
                                                   Editable=false }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee;
                                                   OptionString="Reminder Line","Not Due","Beginning Text","Ending Text",Rounding,"On Hold","Additional Fee","Line Fee" }
    { 26  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=ENU=VAT Clause Code }
    { 27  ;   ;Applies-to Document Type;Option    ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=ENU=Applies-to Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 28  ;   ;Applies-to Document No.;Code20     ;OnValidate=VAR
                                                                NextLineFeeLevel@1000 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                "Entry No." := 0;
                                                                if "Applies-to Document No." <> '' then begin
                                                                  SetCustLedgEntryView;
                                                                  if "Applies-to Document Type" <> 0 then
                                                                    CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                                  if not CustLedgEntry.FINDFIRST then
                                                                    ERROR(NoOpenEntriesErr,CustLedgEntry.TABLENAME,FIELDCAPTION("Document No."),"Applies-to Document No.");
                                                                  "Applies-to Document Type" := CustLedgEntry."Document Type";

                                                                  if CustLedgEntry."Due Date" >= ReminderHeader."Document Date" then
                                                                    ERROR(EntryNotOverdueErr,CustLedgEntry.FIELDCAPTION("Document No."),"Applies-to Document No.",CustLedgEntry.TABLENAME);

                                                                  if "No. of Reminders" <> 0 then
                                                                    NextLineFeeLevel := "No. of Reminders"
                                                                  else
                                                                    NextLineFeeLevel := GetNoOfReminderForCustLedgEntry(CustLedgEntry."Entry No.");

                                                                  if LineFeeIssuedForReminderLevel(CustLedgEntry,NextLineFeeLevel) then
                                                                    ERROR(LineFeeAlreadyIssuedErr,"Applies-to Document Type","Applies-to Document No.",NextLineFeeLevel);

                                                                  GetReminderHeader;
                                                                  if CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" then
                                                                    ERROR(
                                                                      MustBeSameErr,
                                                                      ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                      ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);

                                                                  GetReminderLevel(ReminderLevel,NextLineFeeLevel,NextLineFeeLevel);
                                                                  "Posting Date" := ReminderHeader."Posting Date";
                                                                  "Document Date" := ReminderHeader."Document Date";
                                                                  "Due Date" := ReminderHeader."Due Date";
                                                                  "No. of Reminders" := NextLineFeeLevel;

                                                                  CustLedgEntry.CALCFIELDS("Remaining Amount");
                                                                  VALIDATE(Amount,ReminderLevel.GetAdditionalFee(
                                                                      CustLedgEntry."Remaining Amount",
                                                                      ReminderHeader."Currency Code",
                                                                      true,
                                                                      ReminderHeader."Posting Date"));

                                                                  Description := '';
                                                                  if (Amount <> 0) and (ReminderLevel."Add. Fee per Line Description" <> '') then
                                                                    Description := STRSUBSTNO(ReminderLevel."Add. Fee per Line Description",
                                                                        "Reminder No.",
                                                                        "No. of Reminders",
                                                                        "Document Date",
                                                                        "Posting Date",
                                                                        "No.",
                                                                        Amount,
                                                                        "Applies-to Document Type",
                                                                        "Applies-to Document No.",
                                                                        ReminderLevel."No.")
                                                                  else
                                                                    if GLAcc.GET("No.") then
                                                                      Description := GLAcc.Name;
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              if Type <> Type::"Line Fee" then
                                                                exit;
                                                              SetCustLedgEntryView;
                                                              if "Applies-to Document Type" <> 0 then
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                              if "Applies-to Document No." <> '' then
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                              if CustLedgEntry.FINDFIRST then;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=ENU=Applies-to Document No. }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Reminder No.","Line No."               ;SumIndexFields=Amount,"VAT Amount","Remaining Amount";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Reminder No.",Type,"Line Type"         ;SumIndexFields=Amount,"VAT Amount","Remaining Amount";
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeSameErr@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.';
      MustBeErr@1001 : TextConst 'ENU=%1 must be %2 or %3.';
      FinChrgTerms@1002 : Record "Finance Charge Terms";
      ReminderTerms@1003 : Record "Reminder Terms";
      ReminderLevel@1004 : Record "Reminder Level";
      ReminderHeader@1005 : Record "Reminder Header";
      ReminderLine@1006 : Record "Reminder Line";
      ReminderLine2@1007 : Record "Reminder Line";
      ReminderEntry@1008 : Record "Reminder/Fin. Charge Entry";
      CustLedgEntry@1009 : Record "Cust. Ledger Entry";
      Currency@1011 : Record Currency;
      VATPostingSetup@1012 : Record "VAT Posting Setup";
      CustPostingGr@1013 : Record "Customer Posting Group";
      GLAcc@1014 : Record "G/L Account";
      StdTxt@1015 : Record "Standard Text";
      GenProdPostingGrp@1016 : Record "Gen. Product Posting Group";
      SalesTaxCalculate@1017 : Codeunit "Sales Tax Calculate";
      InterestCalcDate@1018 : Date;
      CalcInterest@1019 : Boolean;
      NoOpenEntriesErr@1010 : TextConst '@@@="%1 = Table name, %2 = Document Type, %3 = Document No.";ENU=There is no open %1 with %2 %3.';
      EntryNotOverdueErr@1020 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Table name";ENU=%1 %2 in %3 is not overdue.';
      LineFeeAlreadyIssuedErr@1021 : TextConst '@@@="%1 = Document TYpe, %2 = Document No, %3 = Level number";ENU=The line fee for %1 %2 on reminder level %3 has already been issued.';
      MustBePositiveErr@1022 : TextConst 'ENU=%1 must be positive.';

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      DtldCLE@1001 : Record "Detailed Cust. Ledg. Entry";
      IssuedReminderHeader@1004 : Record "Issued Reminder Header";
      InterestStartDate@1002 : Date;
      LineFee@1003 : Decimal;
    BEGIN
      GetReminderHeader;
      "Interest Rate" := 0;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      CustLedgEntry.GET("Entry No.");
      if (CustLedgEntry."On Hold" <> '') or ("Due Date" >= ReminderHeader."Document Date") then
        exit;

      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      if ReminderHeader."Use Header Level" then
        ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level")
      else
        ReminderLevel.SETRANGE("No.",1,"No. of Reminders");
      if not ReminderLevel.FINDLAST then
        ReminderLevel.INIT;
      if (not ReminderLevel."Calculate Interest") or (ReminderHeader."Fin. Charge Terms Code" = '') then
        exit;
      FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");
      "Interest Rate" := FinChrgTerms."Interest Rate";
      case FinChrgTerms."Interest Calculation Method" of
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          begin
            CalcInterest := false;
            FinChrgTerms.TESTFIELD("Interest Period (Days)");
            InterestCalcDate := CustLedgEntry."Due Date";
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",true);
            if ReminderEntry.FINDLAST then
              InterestCalcDate := ReminderEntry."Document Date";
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            ReminderEntry.SETRANGE("Interest Posted");
            if ReminderEntry.FINDLAST then
              if ReminderEntry."Document Date" > InterestCalcDate then
                InterestCalcDate := ReminderEntry."Document Date";
            if InterestCalcDate < ReminderHeader."Document Date" then begin
              CalcInterest := true;
              DtldCLE.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
              DtldCLE.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
              DtldCLE.SETFILTER("Entry Type",'%1|%2|%3|%4|%5',
                DtldCLE."Entry Type"::"Initial Entry",
                DtldCLE."Entry Type"::Application,
                DtldCLE."Entry Type"::"Payment Tolerance",
                DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)");
              DtldCLE.SETRANGE("Posting Date",0D,ReminderHeader."Document Date");
              if DtldCLE.FIND('-') then
                repeat
                  if DtldCLE."Entry Type" = DtldCLE."Entry Type"::"Initial Entry" then
                    InterestStartDate := CustLedgEntry."Due Date"
                  else
                    InterestStartDate := DtldCLE."Posting Date";
                  if InterestCalcDate > InterestStartDate then
                    InterestStartDate := InterestCalcDate;
                  Amount := Amount + DtldCLE.Amount * (ReminderHeader."Document Date" - InterestStartDate);
                until DtldCLE.NEXT = 0;
              if not FinChrgTerms."Add. Line Fee in Interest" then
                if CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder then
                  if IssuedReminderHeader.GET(CustLedgEntry."Document No.") then begin
                    IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
                    LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
                    Amount := Amount - LineFee * (ReminderHeader."Document Date" - InterestStartDate);
                    if Amount < 0 then
                      Amount := 0;
                  end;
            end;
            if CalcInterest then
              Amount := Amount / FinChrgTerms."Interest Period (Days)" * "Interest Rate" / 100
            else
              Amount := 0;
          end;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          if "Due Date" < ReminderHeader."Document Date"
          then
            Amount := "Remaining Amount" * "Interest Rate" / 100;
      end;
      if Amount <> 0 then begin
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        GLAcc.GET(CustPostingGr.GetInterestAccount);
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      end;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetReminderHeader;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
      CustLedgEntry.SETRANGE("Customer No.",ReminderHeader."Customer No.");
      CustLedgEntry.SETRANGE(Open,true);
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      if PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK then
        if Type = Type::"Line Fee" then begin
          VALIDATE("Applies-to Document Type",CustLedgEntry."Document Type");
          VALIDATE("Applies-to Document No.",CustLedgEntry."Document No.");
        end else
          VALIDATE("Entry No.",CustLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE GetReminderHeader@2();
    BEGIN
      if "Reminder No." <> ReminderHeader."No." then begin
        ReminderHeader.GET("Reminder No.");
        ProcessReminderHeader;
      end;
    END;

    LOCAL PROCEDURE ProcessReminderHeader@1();
    BEGIN
      ReminderHeader.TESTFIELD("Customer No.");
      ReminderHeader.TESTFIELD("Document Date");
      ReminderHeader.TESTFIELD("Customer Posting Group");
      ReminderHeader.TESTFIELD("Reminder Terms Code");
      ReminderTerms.GET(ReminderHeader."Reminder Terms Code");
      if ReminderHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else begin
        Currency.GET(ReminderHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    [External]
    PROCEDURE GetCurrencyCodeFromHeader@4() : Code[10];
    VAR
      ReminderHeader@1000 : Record "Reminder Header";
    BEGIN
      if "Reminder No." = ReminderHeader."No." then
        exit(ReminderHeader."Currency Code");

      if ReminderHeader.GET("Reminder No.") then
        exit(ReminderHeader."Currency Code");

      exit('');
    END;

    LOCAL PROCEDURE FillLineWithGLAccountData@1023(GLAccountNo@1000 : Code[20]);
    BEGIN
      GLAcc.GET(GLAccountNo);
      GLAcc.CheckGLAcc;
      if not "System-Created Entry" then
        GLAcc.TESTFIELD("Direct Posting",true);
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      if Description = '' then
        Description := GLAcc.Name;
      GetReminderHeader;
      "Tax Group Code" := GLAcc."Tax Group Code";
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetNoOfReminderForCustLedgEntry@1024(EntryNo@1002 : Integer) : Integer;
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
      NoOfReminders@1001 : Integer;
    BEGIN
      CustLedgerEntry.GET(EntryNo);
      NoOfReminders := 0;
      ReminderEntry.RESET;
      ReminderEntry.SETCURRENTKEY("Customer Entry No.");
      ReminderEntry.SETRANGE("Customer Entry No.",EntryNo);
      ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
      if ReminderEntry.FINDLAST then
        NoOfReminders := ReminderEntry."Reminder Level";
      if (CustLedgerEntry."On Hold" = '') and (CustLedgerEntry."Due Date" < ReminderHeader."Document Date") then
        NoOfReminders := NoOfReminders + 1;

      exit(NoOfReminders);
    END;

    LOCAL PROCEDURE LineFeeIssuedForReminderLevel@1025(VAR CustLedgEntry@1002 : Record "Cust. Ledger Entry";IssuedNoOfReminders@1000 : Integer) : Boolean;
    VAR
      IssuedReminderLine@1001 : Record "Issued Reminder Line";
    BEGIN
      IssuedReminderLine.SETRANGE("Applies-To Document Type",CustLedgEntry."Document Type");
      IssuedReminderLine.SETRANGE("Applies-To Document No.",CustLedgEntry."Document No.");
      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"Line Fee");
      IssuedReminderLine.SETRANGE("No. of Reminders",IssuedNoOfReminders);
      exit(IssuedReminderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE GetReminderLevel@1026(VAR ReminderLevel@1001 : Record "Reminder Level";LevelStart@1000 : Integer;LevelEnd@1002 : Integer);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      if ReminderHeader."Use Header Level" then
        ReminderLevel.SETRANGE("No.",LevelStart,ReminderHeader."Reminder Level")
      else
        ReminderLevel.SETRANGE("No.",LevelStart,LevelEnd);
      if not ReminderLevel.FINDLAST then
        ReminderLevel.INIT;
    END;

    BEGIN
    END.
  }
}

