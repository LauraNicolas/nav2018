OBJECT Codeunit 7153 Item Analysis Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period';
      Text001@1008 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>';
      Text003@1006 : TextConst 'ENU=%1 is not a valid line definition.';
      Text004@1005 : TextConst 'ENU=%1 is not a valid column definition.';
      Text005@1004 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text006@1003 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text007@1002 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text008@1009 : TextConst 'ENU=DEFAULT';
      Text009@1001 : TextConst 'ENU=Default analysis view';
      PrevItemAnalysisView@1010 : Record "Item Analysis View";
      MatrixMgt@1007 : Codeunit "Matrix Management";

    LOCAL PROCEDURE DimCodeNotAllowed@24(DimCode@1000 : Text[30];ItemAnalysisView@1001 : Record "Item Analysis View") : Boolean;
    VAR
      Item@1003 : Record Item;
      Location@1006 : Record Location;
    BEGIN
      exit(
        not (UPPERCASE(DimCode) in
             [UPPERCASE(Item.TABLECAPTION),
              UPPERCASE(Location.TABLECAPTION),
              UPPERCASE(Text000),
              ItemAnalysisView."Dimension 1 Code",
              ItemAnalysisView."Dimension 2 Code",
              ItemAnalysisView."Dimension 3 Code",
              '']));
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30];ItemAnalysisView@1002 : Record "Item Analysis View") : Integer;
    VAR
      Location@1001 : Record Location;
      Item@1003 : Record Item;
    BEGIN
      case DimCode of
        Item.TABLECAPTION:
          exit(0);
        Text000:
          exit(1);
        Location.TABLECAPTION:
          exit(2);
        ItemAnalysisView."Dimension 1 Code":
          exit(3);
        ItemAnalysisView."Dimension 2 Code":
          exit(4);
        ItemAnalysisView."Dimension 3 Code":
          exit(5);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE CopyItemToBuf@1(VAR Item@1000 : Record Item;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Item."No.";
        Name := Item.Description;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR Period@1000 : Record Date;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";DateFilter@1003 : Text[30]);
    VAR
      Period2@1002 : Record Date;
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := FORMAT(Period."Period Start");
        "Period Start" := Period."Period Start";
        "Period End" := Period."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := Period."Period Name";
      end;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@5(VAR Location@1000 : Record Location;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Location.Code;
        Name := Location.Name;
      end;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR DimVal@1000 : Record "Dimension Value";VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := DimVal.Code;
        Name := DimVal.Name;
        Totaling := DimVal.Totaling;
        Indentation := DimVal.Indentation;
        "Show in Bold" :=
          DimVal."Dimension Value Type" <> DimVal."Dimension Value Type"::Standard;
      end;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewEntry@75(VAR ItemStatisticsBuffer@1000 : Record "Item Statistics Buffer";VAR ItemAnalysisViewEntry@1001 : Record "Item Analysis View Entry");
    BEGIN
      with ItemStatisticsBuffer do begin
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewEntry."Analysis View Code");

        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemAnalysisViewEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemAnalysisViewEntry."Posting Date");

        if GETFILTER("Location Filter") <> '' then
          COPYFILTER("Location Filter",ItemAnalysisViewEntry."Location Code");

        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");

        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");

        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");
      end;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewBudgEntry@73(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR ItemAnalysisViewBudgEntry@1001 : Record "Item Analysis View Budg. Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewBudgEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewBudgEntry."Analysis View Code");
        COPYFILTER("Budget Filter",ItemAnalysisViewBudgEntry."Budget Name");

        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemAnalysisViewBudgEntry."Item No.");

        if GETFILTER("Location Filter") <> '' then
          COPYFILTER("Location Filter",ItemAnalysisViewBudgEntry."Location Code");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemAnalysisViewBudgEntry."Posting Date");

        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");

        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");

        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");
      end;
    END;

    LOCAL PROCEDURE SetDimFilters@17(VAR ItemStatisticsBuffer@1000 : Record "Item Statistics Buffer";DimOption@1002 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with ItemStatisticsBuffer do
        case DimOption of
          DimOption::Item:
            SETRANGE("Item Filter",DimCodeBuf.Code);
          DimOption::Period:
            SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End");
          DimOption::Location:
            SETRANGE("Location Filter",DimCodeBuf.Code);
          DimOption::"Dimension 1":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 1 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 1 Filter",DimCodeBuf.Code);
          DimOption::"Dimension 2":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 2 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 2 Filter",DimCodeBuf.Code);
          DimOption::"Dimension 3":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 3 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 3 Filter",DimCodeBuf.Code);
        end;
    END;

    [External]
    PROCEDURE SetCommonFilters@15(CurrentAnalysisArea@1005 : Option;VAR ItemStatisticsBuffer@1000 : Record "Item Statistics Buffer";CurrentAnalysisViewCode@1010 : Code[10];ItemFilter@1009 : Text;LocationFilter@1004 : Text;DateFilter@1006 : Text;Dim1Filter@1003 : Text;Dim2Filter@1002 : Text;Dim3Filter@1001 : Text;BudgetFilter@1007 : Text);
    BEGIN
      with ItemStatisticsBuffer do begin
        RESET;
        SETRANGE("Analysis Area Filter",CurrentAnalysisArea);
        SETRANGE("Analysis View Filter",CurrentAnalysisViewCode);

        if ItemFilter <> '' then
          SETFILTER("Item Filter",ItemFilter);
        if LocationFilter <> '' then
          SETFILTER("Location Filter",LocationFilter);
        if DateFilter <> '' then
          SETFILTER("Date Filter",DateFilter);
        if Dim1Filter <> '' then
          SETFILTER("Dimension 1 Filter",Dim1Filter);
        if Dim2Filter <> '' then
          SETFILTER("Dimension 2 Filter",Dim2Filter);
        if Dim3Filter <> '' then
          SETFILTER("Dimension 3 Filter",Dim3Filter);
        if BudgetFilter <> '' then
          SETFILTER("Budget Filter",BudgetFilter);
      end;
    END;

    [External]
    PROCEDURE AnalysisViewSelection@22(CurrentAnalysisArea@1001 : Option;VAR CurrentItemAnalysisViewCode@1000 : Code[10];VAR ItemAnalysisView@1002 : Record "Item Analysis View";VAR ItemStatisticsBuffer@1003 : Record "Item Statistics Buffer";VAR Dim1Filter@1006 : Code[250];VAR Dim2Filter@1005 : Code[250];VAR Dim3Filter@1004 : Code[250]);
    BEGIN
      if not ItemAnalysisView.GET(CurrentAnalysisArea,CurrentItemAnalysisViewCode) then begin
        ItemAnalysisView.FILTERGROUP := 2;
        ItemAnalysisView.SETRANGE("Analysis Area",CurrentAnalysisArea);
        ItemAnalysisView.FILTERGROUP := 0;
        if not ItemAnalysisView.FIND('-') then begin
          ItemAnalysisView.INIT;
          ItemAnalysisView."Analysis Area" := CurrentAnalysisArea;
          ItemAnalysisView.Code := Text008;
          ItemAnalysisView.Name := Text009;
          ItemAnalysisView.INSERT(true);
        end;
        CurrentItemAnalysisViewCode := ItemAnalysisView.Code;
      end;

      SetItemAnalysisView(
        CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter);
    END;

    [External]
    PROCEDURE CheckAnalysisView@18(CurrentAnalysisArea@1002 : Option;CurrentItemAnalysisViewCode@1001 : Code[10];VAR ItemAnalysisView@1000 : Record "Item Analysis View");
    BEGIN
      ItemAnalysisView.GET(CurrentAnalysisArea,CurrentItemAnalysisViewCode);
    END;

    [External]
    PROCEDURE SetItemAnalysisView@16(CurrentAnalysisArea@1006 : Option;CurrentItemAnalysisViewCode@1002 : Code[10];VAR ItemAnalysisView@1001 : Record "Item Analysis View";VAR ItemStatisticsBuffer@1000 : Record "Item Statistics Buffer";VAR Dim1Filter@1005 : Code[250];VAR Dim2Filter@1004 : Code[250];VAR Dim3Filter@1003 : Code[250]);
    BEGIN
      ItemStatisticsBuffer.SETRANGE("Analysis Area Filter",CurrentAnalysisArea);
      ItemStatisticsBuffer.SETRANGE("Analysis View Filter",CurrentItemAnalysisViewCode);

      if PrevItemAnalysisView.Code <> '' then begin
        if ItemAnalysisView."Dimension 1 Code" <> PrevItemAnalysisView."Dimension 1 Code" then
          Dim1Filter := '';
        if ItemAnalysisView."Dimension 2 Code" <> PrevItemAnalysisView."Dimension 2 Code" then
          Dim2Filter := '';
        if ItemAnalysisView."Dimension 3 Code" <> PrevItemAnalysisView."Dimension 3 Code" then
          Dim3Filter := '';
      end;
      ItemStatisticsBuffer.SETFILTER("Dimension 1 Filter",Dim1Filter);
      ItemStatisticsBuffer.SETFILTER("Dimension 2 Filter",Dim2Filter);
      ItemStatisticsBuffer.SETFILTER("Dimension 3 Filter",Dim3Filter);

      PrevItemAnalysisView := ItemAnalysisView;
    END;

    [External]
    PROCEDURE LookupItemAnalysisView@14(CurrentAnalysisArea@1007 : Option;VAR CurrentItemAnalysisViewCode@1005 : Code[10];VAR ItemAnalysisView@1004 : Record "Item Analysis View";VAR ItemStatisticsBuffer@1003 : Record "Item Statistics Buffer";VAR Dim1Filter@1002 : Code[250];VAR Dim2Filter@1001 : Code[250];VAR Dim3Filter@1000 : Code[250]);
    VAR
      ItemAnalysisView2@1006 : Record "Item Analysis View";
    BEGIN
      ItemAnalysisView2.COPY(ItemAnalysisView);
      ItemAnalysisView2.FILTERGROUP := 2;
      ItemAnalysisView2.SETRANGE("Analysis Area",CurrentAnalysisArea);
      ItemAnalysisView2.FILTERGROUP := 0;
      if PAGE.RUNMODAL(0,ItemAnalysisView2) = ACTION::LookupOK then begin
        ItemAnalysisView := ItemAnalysisView2;
        CurrentItemAnalysisViewCode := ItemAnalysisView.Code;
        SetItemAnalysisView(
          CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
          Dim1Filter,Dim2Filter,Dim3Filter);
      end else
        AnalysisViewSelection(
          CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
          Dim1Filter,Dim2Filter,Dim3Filter);
    END;

    [External]
    PROCEDURE LookUpCode@4(DimOption@1000 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      Item@1003 : Record Item;
      Location@1004 : Record Location;
      DimVal@1005 : Record "Dimension Value";
      DimValList@1006 : Page "Dimension Value List";
    BEGIN
      case DimOption of
        DimOption::Item:
          begin
            Item.GET(Code);
            PAGE.RUNMODAL(0,Item);
          end;
        DimOption::Period:
          ;
        DimOption::Location:
          begin
            Location.GET(Code);
            PAGE.RUNMODAL(0,Location);
          end;
        DimOption::"Dimension 1",
        DimOption::"Dimension 2",
        DimOption::"Dimension 3":
          begin
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);
            CLEAR(DimValList);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          end;
      end;
    END;

    [Internal]
    PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      if Dim = '' then
        exit(false);
      DimValList.LOOKUPMODE(true);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE DrillDown@30(CurrentAnalysisArea@1010 : Option;ItemStatisticsBuffer@1015 : Record "Item Statistics Buffer";CurrentItemAnalysisViewCode@1013 : Code[10];ItemFilter@1014 : Text;LocationFilter@1009 : Text;DateFilter@1011 : Text;Dim1Filter@1008 : Text;Dim2Filter@1007 : Text;Dim3Filter@1006 : Text;BudgetFilter@1016 : Text;LineDimOption@1005 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';LineDimCodeBuf@1004 : Record "Dimension Code Buffer";ColDimOption@1003 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer";SetColumnFilter@1012 : Boolean;ValueType@1017 : '"Sales Amount","Cost Amount","Sales Quantity"';ShowActualBudget@1018 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%"');
    VAR
      ItemAnalysisViewEntry@1001 : Record "Item Analysis View Entry";
      ItemAnalysisViewBudgetEntry@1002 : Record "Item Analysis View Budg. Entry";
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
        ItemFilter,LocationFilter,DateFilter,Dim1Filter,Dim2Filter,Dim3Filter,BudgetFilter);
      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      if SetColumnFilter then
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf);

      case ShowActualBudget of
        ShowActualBudget::"Actual Amounts",
        ShowActualBudget::Variance,
        ShowActualBudget::"Variance%",
        ShowActualBudget::"Index%":
          begin
            FilterItemAnalyViewEntry(ItemStatisticsBuffer,ItemAnalysisViewEntry);
            case ValueType of
              ValueType::"Sales Amount":
                PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Actual)");
              ValueType::"Cost Amount":
                PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Actual)");
              ValueType::"Sales Quantity":
                PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry.Quantity);
            end;
          end;
        ShowActualBudget::"Budgeted Amounts":
          begin
            FilterItemAnalyViewBudgEntry(ItemStatisticsBuffer,ItemAnalysisViewBudgetEntry);
            case ValueType of
              ValueType::"Sales Amount":
                PAGE.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry."Sales Amount");
              ValueType::"Cost Amount":
                PAGE.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry."Cost Amount");
              ValueType::"Sales Quantity":
                PAGE.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry.Quantity);
            end;
          end;
      end;
    END;

    [External]
    PROCEDURE SetLineAndColDim@2(ItemAnalysisView@1005 : Record "Item Analysis View";VAR LineDimCode@1000 : Text[30];VAR LineDimOption@1006 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';VAR ColumnDimCode@1003 : Text[30];VAR ColumnDimOption@1001 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"');
    VAR
      Item@1004 : Record Item;
    BEGIN
      if (LineDimCode = '') and (ColumnDimCode = '') then begin
        LineDimCode := Item.TABLECAPTION;
        ColumnDimCode := Text000;
      end;
      LineDimOption := DimCodeToOption(LineDimCode,ItemAnalysisView);
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemAnalysisView);
    END;

    [External]
    PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30];VAR ItemAnalysisView@1001 : Record "Item Analysis View") : Text[30];
    VAR
      Item@1006 : Record Item;
      Location@1003 : Record Location;
      DimSelection@1002 : Page "Dimension Selection";
    BEGIN
      DimSelection.InsertDimSelBuf(false,Item.TABLECAPTION,Item.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Text000,Text000);
      if ItemAnalysisView."Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemAnalysisView."Dimension 1 Code",'');
      if ItemAnalysisView."Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemAnalysisView."Dimension 2 Code",'');
      if ItemAnalysisView."Dimension 3 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemAnalysisView."Dimension 3 Code",'');

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);
      exit(OldDimSelCode);
    END;

    [External]
    PROCEDURE ValidateLineDimCode@20(ItemAnalysisView@1006 : Record "Item Analysis View";VAR LineDimCode@1004 : Text[30];VAR LineDimOption@1007 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';ColumnDimOption@1010 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';VAR InternalDateFilter@1005 : Text;VAR DateFilter@1008 : Text;VAR ItemStatisticsBuffer@1009 : Record "Item Statistics Buffer";VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      if DimCodeNotAllowed(LineDimCode,ItemAnalysisView) then begin
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      end;
      LineDimOption := DimCodeToOption(LineDimCode,ItemAnalysisView);
      InternalDateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    [External]
    PROCEDURE ValidateColumnDimCode@19(ItemAnalysisView@1006 : Record "Item Analysis View";VAR ColumnDimCode@1004 : Text[30];VAR ColumnDimOption@1007 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';LineDimOption@1010 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';VAR InternalDateFilter@1005 : Text;VAR DateFilter@1008 : Text;VAR ItemStatisticsBuffer@1009 : Record "Item Statistics Buffer";VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      if DimCodeNotAllowed(ColumnDimCode,ItemAnalysisView) then begin
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      end;
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemAnalysisView);
      InternalDateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
      if (ColumnDimOption <> ColumnDimOption::Period) and (LineDimOption <> LineDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    [External]
    PROCEDURE FormatAmount@23(VAR Text@1005 : Text[250];RoundingFactor@1002 : 'None,"1","1000","1000000"');
    VAR
      Amount@1001 : Decimal;
    BEGIN
      if (Text = '') or (RoundingFactor = RoundingFactor::None) then
        exit;
      EVALUATE(Amount,Text);
      Amount := MatrixMgt.RoundValue(Amount,RoundingFactor);
      if Amount = 0 then
        Text := ''
      else
        case RoundingFactor of
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text001);
        end;
    END;

    [Internal]
    PROCEDURE FindRec@59(ItemAnalysisView@1011 : Record "Item Analysis View";DimOption@1000 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250];ItemFilter@1019 : Code[250];LocationFilter@1009 : Code[250];PeriodType@1017 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';VAR DateFilter@1016 : Text[30];VAR PeriodInitialized@1015 : Boolean;InternalDateFilter@1014 : Text[30];Dim1Filter@1013 : Code[250];Dim2Filter@1012 : Code[250];Dim3Filter@1010 : Code[250]) : Boolean;
    VAR
      Item@1003 : Record Item;
      Location@1004 : Record Location;
      Period@1005 : Record Date;
      DimVal@1006 : Record "Dimension Value";
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      Found@1008 : Boolean;
    BEGIN
      case DimOption of
        DimOption::Item:
          begin
            Item."No." := DimCodeBuf.Code;
            if ItemFilter <> '' then
              Item.SETFILTER("No.",ItemFilter);
            Found := Item.FIND(Which);
            if Found then
              CopyItemToBuf(Item,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if not PeriodInitialized then
              DateFilter := '';
            PeriodInitialized := true;
            Period."Period Start" := DimCodeBuf."Period Start";
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if InternalDateFilter <> '' then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
          end;
        DimOption::Location:
          begin
            Location.Code := COPYSTR(DimCodeBuf.Code,1,MAXSTRLEN(Location.Code));
            if LocationFilter <> '' then
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            if Found then
              CopyLocationToBuf(Location,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if Dim1Filter <> '' then
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if Dim2Filter <> '' then
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 3":
          begin
            if Dim3Filter <> '' then
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(Found);
    END;

    [Internal]
    PROCEDURE NextRec@60(ItemAnalysisView@1009 : Record "Item Analysis View";DimOption@1000 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer;ItemFilter@1018 : Code[250];LocationFilter@1017 : Code[250];PeriodType@1016 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';DateFilter@1015 : Text[30];Dim1Filter@1012 : Code[250];Dim2Filter@1011 : Code[250];Dim3Filter@1010 : Code[250]) : Integer;
    VAR
      Item@1003 : Record Item;
      Location@1004 : Record Location;
      Period@1005 : Record Date;
      DimVal@1006 : Record "Dimension Value";
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      ResultSteps@1008 : Integer;
    BEGIN
      case DimOption of
        DimOption::Item:
          begin
            Item."No." := DimCodeBuf.Code;
            if ItemFilter <> '' then
              Item.SETFILTER("No.",ItemFilter);
            ResultSteps := Item.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyItemToBuf(Item,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            if ResultSteps <> 0 then
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
          end;
        DimOption::Location:
          begin
            Location.Code := COPYSTR(DimCodeBuf.Code,1,MAXSTRLEN(Location.Code));
            if LocationFilter <> '' then
              Location.SETFILTER(Code,LocationFilter);
            ResultSteps := Location.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyLocationToBuf(Location,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if Dim1Filter <> '' then
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if Dim2Filter <> '' then
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 3":
          begin
            if Dim3Filter <> '' then
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(ResultSteps);
    END;

    [External]
    PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer;ItemAnalysisView@1001 : Record "Item Analysis View") : Text[250];
    BEGIN
      case AnalysisViewDimType of
        1:
          begin
            if ItemAnalysisView."Dimension 1 Code" <> '' then
              exit('1,6,' + ItemAnalysisView."Dimension 1 Code");
            exit(Text005);
          end;
        2:
          begin
            if ItemAnalysisView."Dimension 2 Code" <> '' then
              exit('1,6,' + ItemAnalysisView."Dimension 2 Code");
            exit(Text006);
          end;
        3:
          begin
            if ItemAnalysisView."Dimension 3 Code" <> '' then
              exit('1,6,' + ItemAnalysisView."Dimension 3 Code");
            exit(Text007);
          end;
      end;
    END;

    [External]
    PROCEDURE CalcAmount@7(ValueType@1017 : '"Sales Amount","Cost Amount",Quantity';SetColumnFilter@1016 : Boolean;CurrentAnalysisArea@1008 : Option;VAR ItemStatisticsBuffer@1015 : Record "Item Statistics Buffer";CurrentItemAnalysisViewCode@1014 : Code[10];ItemFilter@1013 : Code[250];LocationFilter@1011 : Code[250];DateFilter@1010 : Text[30];BudgetFilter@1009 : Code[250];Dim1Filter@1007 : Code[250];Dim2Filter@1006 : Code[250];Dim3Filter@1005 : Code[250];LineDimOption@1004 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';LineDimCodeBuf@1003 : Record "Dimension Code Buffer";ColDimOption@1002 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer";ShowActualBudget@1012 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%"') : Decimal;
    VAR
      Amount@1001 : Decimal;
      ActualAmt@1018 : Decimal;
      BudgetAmt@1019 : Decimal;
    BEGIN
      case ShowActualBudget of
        ShowActualBudget::"Actual Amounts":
          Amount :=
            CalcActualAmount(
              ValueType,SetColumnFilter,
              CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
              ItemFilter,LocationFilter,DateFilter,BudgetFilter,
              Dim1Filter,Dim2Filter,Dim3Filter,
              LineDimOption,LineDimCodeBuf,
              ColDimOption,ColDimCodeBuf);
        ShowActualBudget::"Budgeted Amounts":
          Amount :=
            CalcBudgetAmount(
              ValueType,SetColumnFilter,
              CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
              ItemFilter,LocationFilter,DateFilter,BudgetFilter,
              Dim1Filter,Dim2Filter,Dim3Filter,
              LineDimOption,LineDimCodeBuf,
              ColDimOption,ColDimCodeBuf);
        ShowActualBudget::Variance:
          begin
            ActualAmt :=
              CalcActualAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            BudgetAmt :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            Amount := ActualAmt - BudgetAmt;
          end;
        ShowActualBudget::"Variance%":
          begin
            Amount :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            if Amount <> 0 then begin
              ActualAmt :=
                CalcActualAmount(
                  ValueType,SetColumnFilter,
                  CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                  ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                  Dim1Filter,Dim2Filter,Dim3Filter,
                  LineDimOption,LineDimCodeBuf,
                  ColDimOption,ColDimCodeBuf);
              Amount := ROUND(100 * (ActualAmt - Amount) / Amount);
            end;
          end;
        ShowActualBudget::"Index%":
          begin
            Amount :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            ActualAmt :=
              CalcActualAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            if Amount <> 0 then
              Amount := ROUND(100 * ActualAmt / Amount);
          end;
      end;

      exit(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@6(ValueType@1015 : '"Sales Amount","Cost Amount",Quantity';SetColumnFilter@1014 : Boolean;CurrentAnalysisArea@1013 : Option;VAR ItemStatisticsBuffer@1012 : Record "Item Statistics Buffer";CurrentItemAnalysisViewCode@1011 : Code[10];ItemFilter@1010 : Code[250];LocationFilter@1009 : Code[250];DateFilter@1008 : Text[30];BudgetFilter@1007 : Code[250];Dim1Filter@1006 : Code[250];Dim2Filter@1005 : Code[250];Dim3Filter@1004 : Code[250];LineDimOption@1003 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';LineDimCodeBuf@1002 : Record "Dimension Code Buffer";ColDimOption@1001 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer") : Decimal;
    VAR
      Amount@1016 : Decimal;
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
        ItemFilter,LocationFilter,DateFilter,Dim1Filter,Dim2Filter,Dim3Filter,BudgetFilter);

      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      if SetColumnFilter then
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf)
      else
        case ColDimOption of
          ColDimOption::"Dimension 1":
            ItemStatisticsBuffer.SETRANGE("Dimension 1 Filter");
          ColDimOption::"Dimension 2":
            ItemStatisticsBuffer.SETRANGE("Dimension 2 Filter");
          ColDimOption::"Dimension 3":
            ItemStatisticsBuffer.SETRANGE("Dimension 3 Filter");
        end;

      case ValueType of
        ValueType::"Sales Amount":
          begin
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Sales Amt. (Actual)","Analysis - Sales Amt. (Exp)");
            Amount :=
              ItemStatisticsBuffer."Analysis - Sales Amt. (Actual)" +
              ItemStatisticsBuffer."Analysis - Sales Amt. (Exp)";
          end;
        ValueType::"Cost Amount":
          begin
            ItemStatisticsBuffer.CALCFIELDS(
              "Analysis - Cost Amt. (Actual)",
              "Analysis - Cost Amt. (Exp)",
              "Analysis CostAmt.(Non-Invtbl.)");
            Amount :=
              ItemStatisticsBuffer."Analysis - Cost Amt. (Actual)" +
              ItemStatisticsBuffer."Analysis - Cost Amt. (Exp)" +
              ItemStatisticsBuffer."Analysis CostAmt.(Non-Invtbl.)";
          end;
        ValueType::Quantity:
          begin
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Quantity");
            Amount := ItemStatisticsBuffer."Analysis - Quantity";
          end;
      end;

      exit(Amount);
    END;

    LOCAL PROCEDURE CalcBudgetAmount@10(ValueType@1015 : '"Sales Amount","Cost Amount",Quantity';SetColumnFilter@1014 : Boolean;CurrentAnalysisArea@1013 : Option;VAR ItemStatisticsBuffer@1012 : Record "Item Statistics Buffer";CurrentItemAnalysisViewCode@1011 : Code[10];ItemFilter@1010 : Code[250];LocationFilter@1009 : Code[250];DateFilter@1008 : Text[30];BudgetFilter@1007 : Code[250];Dim1Filter@1006 : Code[250];Dim2Filter@1005 : Code[250];Dim3Filter@1004 : Code[250];LineDimOption@1003 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';LineDimCodeBuf@1002 : Record "Dimension Code Buffer";ColDimOption@1001 : 'Item,Period,Location,"Dimension 1","Dimension 2","Dimension 3"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer") : Decimal;
    VAR
      Amount@1016 : Decimal;
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
        ItemFilter,LocationFilter,DateFilter,Dim1Filter,Dim2Filter,Dim3Filter,BudgetFilter);

      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      if SetColumnFilter then
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf);

      case ValueType of
        ValueType::"Sales Amount":
          begin
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Sales Amt.");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Sales Amt.";
          end;
        ValueType::"Cost Amount":
          begin
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Cost Amt.");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Cost Amt.";
          end;
        ValueType::Quantity:
          begin
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Quantity");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Quantity";
          end;
      end;

      exit(Amount);
    END;

    BEGIN
    END.
  }
}

