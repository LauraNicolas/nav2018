OBJECT Report 1495 Delete Check Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Check Ledger Entry"=rimd,
                TableData "G/L Register"=rimd,
                TableData "Date Compr. Register"=rimd;
    CaptionML=ENU=Delete Check Ledger Entries;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  CheckLedgEntryFilter := COPYSTR("Check Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 5439;    ;DataItem;Check Ledger Entry  ;
               DataItemTable="Check Ledger Entry";
               DataItemTableView=SORTING("Bank Account No.","Check Date") WHERE("Entry Status"=FILTER(<>Printed));
               OnPreDataItem=BEGIN
                               if not CONFIRM(Text000,false) then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(Text004);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Check Ledger");

                               CheckLedgEntry2.LOCKTABLE;
                               if CheckLedgEntry3.FINDLAST then;
                               DateComprReg.LOCKTABLE;

                               SETRANGE("Check Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");
                               DateComprMgt.GetDateFilter(EntrdDateComprReg."Ending Date",EntrdDateComprReg,true);

                               InitRegister;
                             END;

               OnAfterGetRecord=BEGIN
                                  CheckLedgEntry2 := "Check Ledger Entry";
                                  with CheckLedgEntry2 do begin
                                    SETCURRENTKEY("Bank Account No.","Check Date");
                                    COPYFILTERS("Check Ledger Entry");

                                    Window.UPDATE(1,"Bank Account No.");

                                    repeat
                                      DELETE;
                                      DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                                      Window.UPDATE(4,DateComprReg."No. Records Deleted");
                                    until NEXT = 0;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(DateComprReg);
                              END;

               ReqFilterFields="Bank Account No.","Bank Payment Type" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if EntrdDateComprReg."Ending Date" = 0D then
                     EntrdDateComprReg."Ending Date" := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the first date of the period from which the check ledger entries are suggested. The batch job includes all entries from this date to the ending date.;
                  ApplicationArea=#Advanced;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the last date of the period from which the check ledger entries are suggested. The batch job includes all entries from the starting date to this date.;
                  ApplicationArea=#Advanced;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing check ledger entries...\\Bank Account No.       #1##########\No. of entries deleted #4######';
      Text007@1007 : TextConst 'ENU=All records deleted';
      SourceCodeSetup@1008 : Record "Source Code Setup";
      DateComprReg@1009 : Record "Date Compr. Register";
      EntrdDateComprReg@1010 : Record "Date Compr. Register";
      CheckLedgEntry2@1011 : Record "Check Ledger Entry";
      CheckLedgEntry3@1012 : Record "Check Ledger Entry";
      DateComprMgt@1013 : Codeunit DateComprMgt;
      Window@1014 : Dialog;
      CheckLedgEntryFilter@1015 : Text[250];
      NoOfDeleted@1016 : Integer;
      RegExists@1017 : Boolean;

    LOCAL PROCEDURE InitRegister@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Check Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        CheckLedgEntryFilter,0,SourceCodeSetup."Compress Check Ledger");

      DateComprReg."Retain Field Contents" := Text007;

      RegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(DateComprReg@1000 : Record "Date Compr. Register");
    BEGIN
      if RegExists then begin
        DateComprReg.MODIFY;
      end else begin
        DateComprReg.INSERT;
        RegExists := true;
      end;
      COMMIT;

      CheckLedgEntry2.LOCKTABLE;
      if CheckLedgEntry3.FINDLAST then;
      DateComprReg.LOCKTABLE;

      InitRegister;
    END;

    PROCEDURE InitializeRequest@2(StartingDate@1000 : Date;EndingDate@1001 : Date);
    BEGIN
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

