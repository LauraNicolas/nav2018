OBJECT Codeunit 5802 Inventory Posting To G/L
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Value Entry";
    Permissions=TableData "Invt. Posting Buffer"=rimd,
                TableData "Value Entry"=r,
                TableData "G/L - Item Ledger Relation"=rimd;
    OnRun=VAR
            GenJnlLine@1000 : Record "Gen. Journal Line";
          BEGIN
            if GlobalPostPerPostGroup then
              PostInvtPostBuf(Rec,"Document No.",'','',true)
            else
              PostInvtPostBuf(
                Rec,
                "Document No.",
                "External Document No.",
                COPYSTR(
                  STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
                  1,MAXSTRLEN(GenJnlLine.Description)),
                false);
          END;

  }
  CODE
  {
    VAR
      GLSetup@1009 : Record "General Ledger Setup";
      InvtSetup@1008 : Record "Inventory Setup";
      Currency@1007 : Record Currency;
      SourceCodeSetup@1006 : Record "Source Code Setup";
      GlobalInvtPostBuf@1005 : TEMPORARY Record "Invt. Posting Buffer";
      TempInvtPostBuf@1029 : ARRAY [4] OF TEMPORARY Record "Invt. Posting Buffer";
      TempInvtPostToGLTestBuf@1014 : TEMPORARY Record "Invt. Post to G/L Test Buffer";
      TempGLItemLedgRelation@1026 : TEMPORARY Record "G/L - Item Ledger Relation";
      GenJnlPostLine@1002 : Codeunit "Gen. Jnl.-Post Line";
      GenJnlCheckLine@1004 : Codeunit "Gen. Jnl.-Check Line";
      DimMgt@1019 : Codeunit DimensionManagement;
      COGSAmt@1048 : Decimal;
      InvtAdjmtAmt@1047 : Decimal;
      DirCostAmt@1046 : Decimal;
      OvhdCostAmt@1045 : Decimal;
      VarPurchCostAmt@1044 : Decimal;
      VarMfgDirCostAmt@1049 : Decimal;
      VarMfgOvhdCostAmt@1039 : Decimal;
      WIPInvtAmt@1038 : Decimal;
      InvtAmt@1037 : Decimal;
      TotalCOGSAmt@1036 : Decimal;
      TotalInvtAdjmtAmt@1035 : Decimal;
      TotalDirCostAmt@1034 : Decimal;
      TotalOvhdCostAmt@1033 : Decimal;
      TotalVarPurchCostAmt@1032 : Decimal;
      TotalVarMfgDirCostAmt@1040 : Decimal;
      TotalVarMfgOvhdCostAmt@1017 : Decimal;
      TotalWIPInvtAmt@1016 : Decimal;
      TotalInvtAmt@1015 : Decimal;
      GlobalInvtPostBufEntryNo@1025 : Integer;
      PostBufDimNo@1030 : Integer;
      GLSetupRead@1012 : Boolean;
      SourceCodeSetupRead@1011 : Boolean;
      InvtSetupRead@1010 : Boolean;
      Text000@1000 : TextConst 'ENU=%1 %2 on %3';
      Text001@1031 : TextConst 'ENU=%1 - %2, %3,%4,%5,%6';
      Text002@1018 : TextConst 'ENU="The following combination %1 = %2, %3 = %4, and %5 = %6 is not allowed."';
      RunOnlyCheck@1003 : Boolean;
      RunOnlyCheckSaved@1022 : Boolean;
      CalledFromItemPosting@1021 : Boolean;
      CalledFromTestReport@1013 : Boolean;
      GlobalPostPerPostGroup@1023 : Boolean;
      Text003@1020 : TextConst 'ENU=%1 %2';

    [External]
    PROCEDURE Initialize@31(PostPerPostGroup@1002 : Boolean);
    BEGIN
      GlobalPostPerPostGroup := PostPerPostGroup;
      GlobalInvtPostBufEntryNo := 0;
    END;

    [External]
    PROCEDURE SetRunOnlyCheck@17(SetCalledFromItemPosting@1002 : Boolean;SetCheckOnly@1000 : Boolean;SetCalledFromTestReport@1001 : Boolean);
    BEGIN
      CalledFromItemPosting := SetCalledFromItemPosting;
      RunOnlyCheck := SetCheckOnly;
      CalledFromTestReport := SetCalledFromTestReport;

      TempGLItemLedgRelation.RESET;
      TempGLItemLedgRelation.DELETEALL;
    END;

    [External]
    PROCEDURE BufferInvtPosting@1(VAR ValueEntry@1000 : Record "Value Entry") : Boolean;
    VAR
      CostToPost@1003 : Decimal;
      CostToPostACY@1004 : Decimal;
      ExpCostToPost@1001 : Decimal;
      ExpCostToPostACY@1002 : Decimal;
      PostToGL@1005 : Boolean;
    BEGIN
      with ValueEntry do begin
        GetGLSetup;
        GetInvtSetup;
        if (not InvtSetup."Expected Cost Posting to G/L") and
           ("Expected Cost Posted to G/L" = 0) and
           "Expected Cost"
        then
          exit(false);

        if not ("Entry Type" in ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) and
           not CalledFromTestReport
        then begin
          TESTFIELD("Expected Cost",false);
          TESTFIELD("Cost Amount (Expected)",0);
          TESTFIELD("Cost Amount (Expected) (ACY)",0);
        end;

        if InvtSetup."Expected Cost Posting to G/L" then begin
          CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
          CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
        end;
        CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
        CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
        OnAfterCalcCostToPostFromBuffer(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
        PostBufDimNo := 0;

        RunOnlyCheckSaved := RunOnlyCheck;
        if not PostToGL then
          exit(false);

        case "Item Ledger Entry Type" of
          "Item Ledger Entry Type"::Purchase:
            BufferPurchPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::Sale:
            BufferSalesPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::"Positive Adjmt.",
          "Item Ledger Entry Type"::"Negative Adjmt.",
          "Item Ledger Entry Type"::Transfer:
            BufferAdjmtPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::Consumption:
            BufferConsumpPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::Output:
            BufferOutputPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::"Assembly Consumption":
            BufferAsmConsumpPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::"Assembly Output":
            BufferAsmOutputPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::" ":
            BufferCapPosting(ValueEntry,CostToPost,CostToPostACY);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
      end;

      if UpdateGlobalInvtPostBuf(ValueEntry."Entry No.") then
        exit(true);
      exit(CalledFromTestReport);
    END;

    LOCAL PROCEDURE BufferPurchPosting@5(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Variance:
            begin
              TESTFIELD("Variance Type","Variance Type"::Purchase);
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::Inventory,
                GlobalInvtPostBuf."Account Type"::"Purchase Variance",
                CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Revaluation:
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferSalesPosting@6(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::COGS,
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Revaluation:
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferOutputPosting@9(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Variance:
            case "Variance Type" of
              "Variance Type"::Material:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Material Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::Capacity:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Capacity Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::Subcontracted:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Subcontracted Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::"Capacity Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Cap. Overhead Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::"Manufacturing Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Mfg. Overhead Variance",
                  CostToPost,CostToPostACY,false);
              else
                ErrorNonValidCombination(ValueEntry);
            end;
          "Entry Type"::Revaluation:
            begin
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferConsumpPosting@34(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"WIP Inventory",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferCapPosting@16(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      with ValueEntry do
        if "Order Type" = "Order Type"::Assembly then
          case "Entry Type" of
            "Entry Type"::"Direct Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                CostToPost,CostToPostACY,false);
            "Entry Type"::"Indirect Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                CostToPost,CostToPostACY,false);
            else
              ErrorNonValidCombination(ValueEntry);
          end
        else
          case "Entry Type" of
            "Entry Type"::"Direct Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                CostToPost,CostToPostACY,false);
            "Entry Type"::"Indirect Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                CostToPost,CostToPostACY,false);
            else
              ErrorNonValidCombination(ValueEntry);
          end;
    END;

    LOCAL PROCEDURE BufferAsmOutputPosting@36(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Variance:
            case "Variance Type" of
              "Variance Type"::Material:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Material Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::Capacity:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Capacity Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::Subcontracted:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Subcontracted Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::"Capacity Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Cap. Overhead Variance",
                  CostToPost,CostToPostACY,false);
              "Variance Type"::"Manufacturing Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Mfg. Overhead Variance",
                  CostToPost,CostToPostACY,false);
              else
                ErrorNonValidCombination(ValueEntry);
            end;
          "Entry Type"::Revaluation:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferAsmConsumpPosting@38(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE BufferAdjmtPosting@39(ValueEntry@1000 : Record "Value Entry";CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      with ValueEntry do
        case "Entry Type" of
          "Entry Type"::"Direct Cost":
            begin
              // Posting adjustments to Interim accounts (Service)
              if (ExpCostToPost <> 0) or (ExpCostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,true);
              if (CostToPost <> 0) or (CostToPostACY <> 0) then
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,false);
            end;
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,false);
          else
            ErrorNonValidCombination(ValueEntry);
        end;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        if GLSetup."Additional Reporting Currency" <> '' then
          Currency.GET(GLSetup."Additional Reporting Currency");
      end;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE GetInvtSetup@4();
    BEGIN
      if not InvtSetupRead then
        InvtSetup.GET;
      InvtSetupRead := true;
    END;

    LOCAL PROCEDURE CalcCostToPost@8(VAR CostToPost@1000 : Decimal;AdjdCost@1001 : Decimal;VAR PostedCost@1002 : Decimal;VAR PostToGL@1005 : Boolean);
    BEGIN
      CostToPost := AdjdCost - PostedCost;

      if CostToPost <> 0 then begin
        if not RunOnlyCheck then
          PostedCost := AdjdCost;
        PostToGL := true;
      end;
    END;

    LOCAL PROCEDURE InitInvtPostBuf@10(ValueEntry@1000 : Record "Value Entry";AccType@1001 : Option;BalAccType@1002 : Option;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;InterimAccount@1007 : Boolean);
    BEGIN
      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";
      TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";

      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";
      TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    END;

    LOCAL PROCEDURE SetAccNo@18(VAR InvtPostBuf@1001 : Record "Invt. Posting Buffer";ValueEntry@1006 : Record "Value Entry";AccType@1005 : Option;BalAccType@1000 : Option);
    VAR
      InvtPostSetup@1003 : Record "Inventory Posting Setup";
      GenPostingSetup@1004 : Record "General Posting Setup";
      GLAccount@1002 : Record "G/L Account";
    BEGIN
      with InvtPostBuf do begin
        "Account No." := '';
        "Account Type" := AccType;
        "Bal. Account Type" := BalAccType;
        "Location Code" := ValueEntry."Location Code";
        "Inventory Posting Group" :=
          GetInvPostingGroupCode(ValueEntry,AccType = "Account Type"::"WIP Inventory",ValueEntry."Inventory Posting Group");
        "Gen. Bus. Posting Group" := ValueEntry."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := ValueEntry."Gen. Prod. Posting Group";
        "Posting Date" := ValueEntry."Posting Date";

        if UseInvtPostSetup then begin
          if CalledFromItemPosting then
            InvtPostSetup.GET("Location Code","Inventory Posting Group")
          else
            if not InvtPostSetup.GET("Location Code","Inventory Posting Group") then
              exit;
        end else begin
          if CalledFromItemPosting then
            GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group")
          else
            if not GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") then
              exit;
        end;

        case "Account Type" of
          "Account Type"::Inventory:
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetInventoryAccount
            else
              "Account No." := InvtPostSetup."Inventory Account";
          "Account Type"::"Inventory (Interim)":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetInventoryAccountInterim
            else
              "Account No." := InvtPostSetup."Inventory Account (Interim)";
          "Account Type"::"WIP Inventory":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetWIPAccount
            else
              "Account No." := InvtPostSetup."WIP Account";
          "Account Type"::"Material Variance":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetMaterialVarianceAccount
            else
              "Account No." := InvtPostSetup."Material Variance Account";
          "Account Type"::"Capacity Variance":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetCapacityVarianceAccount
            else
              "Account No." := InvtPostSetup."Capacity Variance Account";
          "Account Type"::"Subcontracted Variance":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetSubcontractedVarianceAccount
            else
              "Account No." := InvtPostSetup."Subcontracted Variance Account";
          "Account Type"::"Cap. Overhead Variance":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetCapOverheadVarianceAccount
            else
              "Account No." := InvtPostSetup."Cap. Overhead Variance Account";
          "Account Type"::"Mfg. Overhead Variance":
            if CalledFromItemPosting then
              "Account No." := InvtPostSetup.GetMfgOverheadVarianceAccount
            else
              "Account No." := InvtPostSetup."Mfg. Overhead Variance Account";
          "Account Type"::"Inventory Adjmt.":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetInventoryAdjmtAccount
            else
              "Account No." := GenPostingSetup."Inventory Adjmt. Account";
          "Account Type"::"Direct Cost Applied":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetDirectCostAppliedAccount
            else
              "Account No." := GenPostingSetup."Direct Cost Applied Account";
          "Account Type"::"Overhead Applied":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetOverheadAppliedAccount
            else
              "Account No." := GenPostingSetup."Overhead Applied Account";
          "Account Type"::"Purchase Variance":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetPurchaseVarianceAccount
            else
              "Account No." := GenPostingSetup."Purchase Variance Account";
          "Account Type"::COGS:
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetCOGSAccount
            else
              "Account No." := GenPostingSetup."COGS Account";
          "Account Type"::"COGS (Interim)":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetCOGSInterimAccount
            else
              "Account No." := GenPostingSetup."COGS Account (Interim)";
          "Account Type"::"Invt. Accrual (Interim)":
            if CalledFromItemPosting then
              "Account No." := GenPostingSetup.GetInventoryAccrualAccount
            else
              "Account No." := GenPostingSetup."Invt. Accrual Acc. (Interim)";
        end;
        if "Account No." <> '' then begin
          GLAccount.GET("Account No.");
          if GLAccount.Blocked then begin
            if CalledFromItemPosting then
              GLAccount.TESTFIELD(Blocked,false);
            if not CalledFromTestReport then
              "Account No." := '';
          end;
        end;
        OnAfterSetAccNo(InvtPostBuf,ValueEntry);
      end;
    END;

    LOCAL PROCEDURE SetPostBufAmounts@30(VAR InvtPostBuf@1004 : Record "Invt. Posting Buffer";CostToPost@1000 : Decimal;CostToPostACY@1001 : Decimal;InterimAccount@1003 : Boolean);
    BEGIN
      with InvtPostBuf do begin
        "Interim Account" := InterimAccount;
        Amount := CostToPost;
        "Amount (ACY)" := CostToPostACY;
      end;
    END;

    LOCAL PROCEDURE UpdateGlobalInvtPostBuf@28(ValueEntryNo@1002 : Integer) : Boolean;
    VAR
      i@1000 : Integer;
    BEGIN
      with GlobalInvtPostBuf do begin
        if not CalledFromTestReport then
          for i := 1 to PostBufDimNo do
            if TempInvtPostBuf[i]."Account No." = '' then begin
              CLEAR(TempInvtPostBuf);
              exit(false);
            end;
        for i := 1 to PostBufDimNo do begin
          GlobalInvtPostBuf := TempInvtPostBuf[i];
          "Dimension Set ID" := TempInvtPostBuf[i]."Dimension Set ID";
          Negative := (TempInvtPostBuf[i].Amount < 0) or (TempInvtPostBuf[i]."Amount (ACY)" < 0);

          UpdateReportAmounts;
          if FIND then begin
            Amount := Amount + TempInvtPostBuf[i].Amount;
            "Amount (ACY)" := "Amount (ACY)" + TempInvtPostBuf[i]."Amount (ACY)";
            MODIFY;
          end else begin
            GlobalInvtPostBufEntryNo := GlobalInvtPostBufEntryNo + 1;
            "Entry No." := GlobalInvtPostBufEntryNo;
            INSERT;
          end;

          if not (RunOnlyCheck or CalledFromTestReport) then begin
            TempGLItemLedgRelation.INIT;
            TempGLItemLedgRelation."G/L Entry No." := "Entry No.";
            TempGLItemLedgRelation."Value Entry No." := ValueEntryNo;
            TempGLItemLedgRelation.INSERT;
          end;
        end;
      end;
      CLEAR(TempInvtPostBuf);
      exit(true);
    END;

    LOCAL PROCEDURE UpdateReportAmounts@24();
    BEGIN
      with GlobalInvtPostBuf do
        case "Account Type" of
          "Account Type"::Inventory,"Account Type"::"Inventory (Interim)":
            InvtAmt += Amount;
          "Account Type"::"WIP Inventory":
            WIPInvtAmt += Amount;
          "Account Type"::"Inventory Adjmt.":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Invt. Accrual (Interim)":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Direct Cost Applied":
            DirCostAmt += Amount;
          "Account Type"::"Overhead Applied":
            OvhdCostAmt += Amount;
          "Account Type"::"Purchase Variance":
            VarPurchCostAmt += Amount;
          "Account Type"::COGS:
            COGSAmt += Amount;
          "Account Type"::"COGS (Interim)":
            COGSAmt += Amount;
          "Account Type"::"Material Variance","Account Type"::"Capacity Variance",
          "Account Type"::"Subcontracted Variance","Account Type"::"Cap. Overhead Variance":
            VarMfgDirCostAmt += Amount;
          "Account Type"::"Mfg. Overhead Variance":
            VarMfgOvhdCostAmt += Amount;
        end;
    END;

    LOCAL PROCEDURE ErrorNonValidCombination@2(ValueEntry@1000 : Record "Value Entry");
    BEGIN
      with ValueEntry do
        if CalledFromTestReport then
          InsertTempInvtPostToGLTestBuf2(ValueEntry)
        else
          ERROR(
            Text002,
            FIELDCAPTION("Item Ledger Entry Type"),"Item Ledger Entry Type",
            FIELDCAPTION("Entry Type"),"Entry Type",
            FIELDCAPTION("Expected Cost"),"Expected Cost")
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf2@23(ValueEntry@1000 : Record "Value Entry");
    BEGIN
      with ValueEntry do begin
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf.Description := STRSUBSTNO(Text003,TABLECAPTION,"Entry No.");
        TempInvtPostToGLTestBuf.Amount := "Cost Amount (Actual)";
        TempInvtPostToGLTestBuf."Value Entry No." := "Entry No.";
        TempInvtPostToGLTestBuf."Dimension Set ID" := "Dimension Set ID";
        TempInvtPostToGLTestBuf.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetNextLineNo@26() : Integer;
    VAR
      InvtPostToGLTestBuffer@1000 : Record "Invt. Post to G/L Test Buffer";
      LastLineNo@1001 : Integer;
    BEGIN
      InvtPostToGLTestBuffer := TempInvtPostToGLTestBuf;
      if TempInvtPostToGLTestBuf.FINDLAST then
        LastLineNo := TempInvtPostToGLTestBuf."Line No." + 10000
      else
        LastLineNo := 10000;
      TempInvtPostToGLTestBuf := InvtPostToGLTestBuffer;
      exit(LastLineNo);
    END;

    [External]
    PROCEDURE PostInvtPostBufPerEntry@20(VAR ValueEntry@1001 : Record "Value Entry");
    VAR
      DummyGenJnlLine@1002 : Record "Gen. Journal Line";
    BEGIN
      with ValueEntry do
        PostInvtPostBuf(
          ValueEntry,
          "Document No.",
          "External Document No.",
          COPYSTR(
            STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
            1,MAXSTRLEN(DummyGenJnlLine.Description)),
          false);
    END;

    [Internal]
    PROCEDURE PostInvtPostBufPerPostGrp@19(DocNo@1001 : Code[20];Desc@1000 : Text[50]);
    VAR
      ValueEntry@1003 : Record "Value Entry";
    BEGIN
      PostInvtPostBuf(ValueEntry,DocNo,'',Desc,true);
    END;

    LOCAL PROCEDURE PostInvtPostBuf@3(VAR ValueEntry@1008 : Record "Value Entry";DocNo@1002 : Code[20];ExternalDocNo@1007 : Code[35];Desc@1003 : Text[50];PostPerPostGrp@1001 : Boolean);
    VAR
      GenJnlLine@1004 : Record "Gen. Journal Line";
    BEGIN
      with GlobalInvtPostBuf do begin
        RESET;
        if not FINDSET then
          exit;

        GenJnlLine.INIT;
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."External Document No." := ExternalDocNo;
        GenJnlLine.Description := Desc;
        GetSourceCodeSetup;
        GenJnlLine."Source Code" := SourceCodeSetup."Inventory Post Cost";
        GenJnlLine."System-Created Entry" := true;
        GenJnlLine."Job No." := "Job No.";
        GenJnlLine."Reason Code" := ValueEntry."Reason Code";
        repeat
          GenJnlLine.VALIDATE("Posting Date","Posting Date");
          if SetAmt(GenJnlLine,Amount,"Amount (ACY)") then begin
            if PostPerPostGrp then
              SetDesc(GenJnlLine,GlobalInvtPostBuf);
            GenJnlLine."Account No." := "Account No.";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            DimMgt.UpdateGlobalDimFromDimSetID(
              "Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
              GenJnlLine."Shortcut Dimension 2 Code");
            if not CalledFromTestReport then
              if not RunOnlyCheck then begin
                if not CalledFromItemPosting then
                  GenJnlPostLine.SetOverDimErr;
                OnBeforePostInvtPostBuf(GenJnlLine,GlobalInvtPostBuf,ValueEntry);
                GenJnlPostLine.RunWithCheck(GenJnlLine)
              end else
                GenJnlCheckLine.RunCheck(GenJnlLine)
            else
              InsertTempInvtPostToGLTestBuf(GenJnlLine,ValueEntry);
          end;
          if not CalledFromTestReport and not RunOnlyCheck then
            CreateGLItemLedgRelation(ValueEntry);
        until NEXT = 0;
        RunOnlyCheck := RunOnlyCheckSaved;
        DELETEALL;
      end;
    END;

    LOCAL PROCEDURE GetSourceCodeSetup@15();
    BEGIN
      if not SourceCodeSetupRead then
        SourceCodeSetup.GET;
      SourceCodeSetupRead := true;
    END;

    LOCAL PROCEDURE SetAmt@22(VAR GenJnlLine@1000 : Record "Gen. Journal Line";Amt@1001 : Decimal;AmtACY@1002 : Decimal) : Boolean;
    BEGIN
      with GenJnlLine do begin
        "Additional-Currency Posting" := "Additional-Currency Posting"::None;
        VALIDATE(Amount,Amt);

        GetGLSetup;
        if GLSetup."Additional Reporting Currency" <> '' then begin
          "Source Currency Code" := GLSetup."Additional Reporting Currency";
          "Source Currency Amount" := AmtACY;
          if (Amount = 0) and ("Source Currency Amount" <> 0) then begin
            "Additional-Currency Posting" :=
              "Additional-Currency Posting"::"Additional-Currency Amount Only";
            VALIDATE(Amount,"Source Currency Amount");
            "Source Currency Amount" := 0;
          end;
        end;
      end;

      exit((Amt <> 0) or (AmtACY <> 0));
    END;

    [External]
    PROCEDURE SetDesc@27(VAR GenJnlLine@1006 : Record "Gen. Journal Line";InvtPostBuf@1004 : Record "Invt. Posting Buffer");
    BEGIN
      with InvtPostBuf do
        GenJnlLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text001,
              "Account Type","Bal. Account Type",
              "Location Code","Inventory Posting Group",
              "Gen. Bus. Posting Group","Gen. Prod. Posting Group"),
            1,MAXSTRLEN(GenJnlLine.Description));
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf@25(GenJnlLine@1000 : Record "Gen. Journal Line";ValueEntry@1001 : Record "Value Entry");
    BEGIN
      with GenJnlLine do begin
        TempInvtPostToGLTestBuf.INIT;
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf."Document No." := "Document No.";
        TempInvtPostToGLTestBuf.Description := Description;
        TempInvtPostToGLTestBuf."Account No." := "Account No.";
        TempInvtPostToGLTestBuf.Amount := Amount;
        TempInvtPostToGLTestBuf."Source Code" := "Source Code";
        TempInvtPostToGLTestBuf."System-Created Entry" := true;
        TempInvtPostToGLTestBuf."Value Entry No." := ValueEntry."Entry No.";
        TempInvtPostToGLTestBuf."Additional-Currency Posting" := "Additional-Currency Posting";
        TempInvtPostToGLTestBuf."Source Currency Code" := "Source Currency Code";
        TempInvtPostToGLTestBuf."Source Currency Amount" := "Source Currency Amount";
        TempInvtPostToGLTestBuf."Inventory Account Type" := GlobalInvtPostBuf."Account Type";
        TempInvtPostToGLTestBuf."Dimension Set ID" := "Dimension Set ID";
        if GlobalInvtPostBuf.UseInvtPostSetup then begin
          TempInvtPostToGLTestBuf."Location Code" := GlobalInvtPostBuf."Location Code";
          TempInvtPostToGLTestBuf."Invt. Posting Group Code" :=
            GetInvPostingGroupCode(
              ValueEntry,
              TempInvtPostToGLTestBuf."Inventory Account Type" = TempInvtPostToGLTestBuf."Inventory Account Type"::"WIP Inventory",
              GlobalInvtPostBuf."Inventory Posting Group")
        end else begin
          TempInvtPostToGLTestBuf."Gen. Bus. Posting Group" := GlobalInvtPostBuf."Gen. Bus. Posting Group";
          TempInvtPostToGLTestBuf."Gen. Prod. Posting Group" := GlobalInvtPostBuf."Gen. Prod. Posting Group";
        end;
        TempInvtPostToGLTestBuf.INSERT;
      end;
    END;

    LOCAL PROCEDURE CreateGLItemLedgRelation@33(VAR ValueEntry@1000 : Record "Value Entry");
    VAR
      GLReg@1001 : Record "G/L Register";
    BEGIN
      GenJnlPostLine.GetGLReg(GLReg);
      if GlobalPostPerPostGroup then begin
        TempGLItemLedgRelation.RESET;
        TempGLItemLedgRelation.SETRANGE("G/L Entry No.",GlobalInvtPostBuf."Entry No.");
        TempGLItemLedgRelation.FINDSET;
        repeat
          ValueEntry.GET(TempGLItemLedgRelation."Value Entry No.");
          UpdateValueEntry(ValueEntry);
          CreateGLItemLedgRelationEntry(GLReg);
        until TempGLItemLedgRelation.NEXT = 0;
      end else begin
        UpdateValueEntry(ValueEntry);
        CreateGLItemLedgRelationEntry(GLReg);
      end;
    END;

    LOCAL PROCEDURE CreateGLItemLedgRelationEntry@35(GLReg@1003 : Record "G/L Register");
    VAR
      GLItemLedgRelation@1002 : Record "G/L - Item Ledger Relation";
    BEGIN
      GLItemLedgRelation.INIT;
      GLItemLedgRelation."G/L Entry No." := GLReg."To Entry No.";
      GLItemLedgRelation."Value Entry No." := TempGLItemLedgRelation."Value Entry No.";
      GLItemLedgRelation."G/L Register No." := GLReg."No.";
      GLItemLedgRelation.INSERT;
      TempGLItemLedgRelation."G/L Entry No." := GlobalInvtPostBuf."Entry No.";
      TempGLItemLedgRelation.DELETE;
    END;

    LOCAL PROCEDURE UpdateValueEntry@13(VAR ValueEntry@1000 : Record "Value Entry");
    BEGIN
      with ValueEntry do begin
        if GlobalInvtPostBuf."Interim Account" then begin
          "Expected Cost Posted to G/L" := "Cost Amount (Expected)";
          "Exp. Cost Posted to G/L (ACY)" := "Cost Amount (Expected) (ACY)";
        end else begin
          "Cost Posted to G/L" := "Cost Amount (Actual)";
          "Cost Posted to G/L (ACY)" := "Cost Amount (Actual) (ACY)";
        end;
        if not CalledFromItemPosting then
          MODIFY;
      end;
    END;

    [External]
    PROCEDURE GetTempInvtPostToGLTestBuf@29(VAR InvtPostToGLTestBuf@1001 : Record "Invt. Post to G/L Test Buffer");
    BEGIN
      InvtPostToGLTestBuf.DELETEALL;
      if not TempInvtPostToGLTestBuf.FINDSET then
        exit;

      repeat
        InvtPostToGLTestBuf := TempInvtPostToGLTestBuf;
        InvtPostToGLTestBuf.INSERT;
      until TempInvtPostToGLTestBuf.NEXT = 0;
    END;

    [External]
    PROCEDURE GetAmtToPost@11(VAR NewCOGSAmt@1000 : Decimal;VAR NewInvtAdjmtAmt@1001 : Decimal;VAR NewDirCostAmt@1002 : Decimal;VAR NewOvhdCostAmt@1003 : Decimal;VAR NewVarPurchCostAmt@1004 : Decimal;VAR NewVarMfgDirCostAmt@1013 : Decimal;VAR NewVarMfgOvhdCostAmt@1008 : Decimal;VAR NewWIPInvtAmt@1009 : Decimal;VAR NewInvtAmt@1010 : Decimal;GetTotal@1007 : Boolean);
    BEGIN
      GetAmt(NewInvtAdjmtAmt,InvtAdjmtAmt,TotalInvtAdjmtAmt,GetTotal);
      GetAmt(NewDirCostAmt,DirCostAmt,TotalDirCostAmt,GetTotal);
      GetAmt(NewOvhdCostAmt,OvhdCostAmt,TotalOvhdCostAmt,GetTotal);
      GetAmt(NewVarPurchCostAmt,VarPurchCostAmt,TotalVarPurchCostAmt,GetTotal);
      GetAmt(NewVarMfgDirCostAmt,VarMfgDirCostAmt,TotalVarMfgDirCostAmt,GetTotal);
      GetAmt(NewVarMfgOvhdCostAmt,VarMfgOvhdCostAmt,TotalVarMfgOvhdCostAmt,GetTotal);
      GetAmt(NewWIPInvtAmt,WIPInvtAmt,TotalWIPInvtAmt,GetTotal);
      GetAmt(NewCOGSAmt,COGSAmt,TotalCOGSAmt,GetTotal);
      GetAmt(NewInvtAmt,InvtAmt,TotalInvtAmt,GetTotal);
    END;

    LOCAL PROCEDURE GetAmt@21(VAR NewAmt@1000 : Decimal;VAR Amt@1001 : Decimal;VAR TotalAmt@1002 : Decimal;GetTotal@1003 : Boolean);
    BEGIN
      if GetTotal then
        NewAmt := TotalAmt
      else begin
        NewAmt := Amt;
        TotalAmt := TotalAmt + Amt;
        Amt := 0;
      end;
    END;

    [External]
    PROCEDURE GetInvtPostBuf@7(VAR InvtPostBuf@1000 : Record "Invt. Posting Buffer");
    BEGIN
      InvtPostBuf.DELETEALL;

      GlobalInvtPostBuf.RESET;
      if GlobalInvtPostBuf.FINDSET then
        repeat
          InvtPostBuf := GlobalInvtPostBuf;
          InvtPostBuf.INSERT;
        until GlobalInvtPostBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE GetInvPostingGroupCode@32(ValueEntry@1000 : Record "Value Entry";WIPInventory@1001 : Boolean;InvPostingGroupCode@1002 : Code[20]) : Code[20];
    VAR
      Item@1003 : Record Item;
    BEGIN
      if WIPInventory then
        if ValueEntry."Source No." <> ValueEntry."Item No." then
          if Item.GET(ValueEntry."Source No.") then
            exit(Item."Inventory Posting Group");

      exit(InvPostingGroupCode);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcCostToPostFromBuffer@37(VAR ValueEntry@1000 : Record "Value Entry";VAR CostToPost@1001 : Decimal;VAR CostToPostACY@1002 : Decimal;VAR ExpCostToPost@1003 : Decimal;VAR ExpCostToPostACY@1004 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetAccNo@40(VAR InvtPostingBuffer@1000 : Record "Invt. Posting Buffer";ValueEntry@1001 : Record "Value Entry");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostInvtPostBuf@41(VAR GenJournalLine@1000 : Record "Gen. Journal Line";InvtPostingBuffer@1001 : Record "Invt. Posting Buffer";ValueEntry@1002 : Record "Value Entry");
    BEGIN
    END;

    BEGIN
    END.
  }
}

