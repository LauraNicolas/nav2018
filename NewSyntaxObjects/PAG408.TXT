OBJECT Page 408 G/L Balance by Dimension
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=G/L Balance by Dimension;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    PageType=Card;
    OnInit=VAR
             Field@1000 : Record Field;
           BEGIN
             Dim2FilterEnable := true;
             Dim1FilterEnable := true;
             Field.GET(DATABASE::"G/L Account",42);
             BusUnitFilterCaption := Field."Field Caption";
           END;

    OnOpenPage=VAR
                 MATRIX_Step@1000 : 'Initial,Previous,Same,Next';
               BEGIN
                 GlobalDim1Filter := GLAcc.GETFILTER("Global Dimension 1 Filter");
                 GlobalDim2Filter := GLAcc.GETFILTER("Global Dimension 2 Filter");

                 GLSetup.GET;
                 Dim1FilterEnable :=
                   (GLSetup."Global Dimension 1 Code" <> '') and
                   (GLAcc.GETFILTER("Global Dimension 1 Filter") = '');
                 Dim2FilterEnable :=
                   (GLSetup."Global Dimension 2 Code" <> '') and
                   (GLAcc.GETFILTER("Global Dimension 2 Filter") = '');

                 if GLSetup."Additional Reporting Currency" = '' then
                   ShowInAddCurr := false;

                 if (LineDimCode = '') and (ColumnDimCode = '') then begin
                   LineDimCode := GLAcc.TABLECAPTION;
                   ColumnDimCode := Text001;
                 end;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 FindPeriod('');

                 MATRIX_NoOfColumns := 32;
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 8       ;1   ;ActionGroup;
                      Name=&Actions;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 13      ;2   ;Action    ;
                      Name=Reverse Lines and Columns;
                      CaptionML=ENU=Reverse Lines and Columns;
                      ToolTipML=ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                      ApplicationArea=#Suite;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                                 MATRIX_Step@1002 : 'First,Previous,Next';
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 119     ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the data overview according to the selected filters and options.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 MatrixForm@1284 : Page "G/L Balance by Dim. Matrix";
                               BEGIN
                                 CLEAR(MatrixForm);
                                 MatrixForm.Load(
                                   LineDimCode,ColumnDimCode,PeriodType,DateFilter,GLAccFilter,BusUnitFilter,
                                   BudgetFilter,GlobalDim1Filter,GlobalDim2Filter,
                                   ShowActualBudg,AmountField,ClosingEntryFilter,RoundingFactor,ShowInAddCurr,
                                   MATRIX_ColumnCaptions,MATRIX_PrimaryKeyFirstColInSet,
                                   AmountType,MATRIX_CurrSetLength);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=Previous Set;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Go to the previous set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                               END;
                                }
      { 18      ;1   ;Action    ;
                      Name=Next Set;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Go to the next set of data.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NextSet;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 6   ;2   ;Field     ;
                Name=LineDimCode;
                CaptionML=ENU=Show as Lines;
                ToolTipML=ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             end;
                             ValidateLineDimCode;
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           if NewCode = LineDimCode then
                             exit(false);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           CurrPage.UPDATE;
                           exit(true);
                         END;

                ImplicitType=Text30 }

    { 9   ;2   ;Field     ;
                Name=ColumnDimCode;
                CaptionML=ENU=Show as Columns;
                ToolTipML=ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                ApplicationArea=#Suite;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             if (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) and (LineDimCode <> '') then begin
                               LineDimCode := '';
                               ValidateLineDimCode;
                             end;
                             ValidateColumnDimCode;
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           if NewCode = ColumnDimCode then
                             exit(false);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           ColumnDimCodeOnAfterValidate;
                           exit(true);
                         END;

                ImplicitType=Text30 }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 36  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Suite;
                SourceExpr=DateFilter;
                OnValidate=VAR
                             ApplicationManagement@1001 : Codeunit ApplicationManagement;
                             Date1@1002 : Date;
                           BEGIN
                             if ApplicationManagement.MakeDateFilter(DateFilter) = 0 then;
                             if DateFilter <> '' then
                               if EVALUATE(Date1,DateFilter) then
                                 if Date1 <> NORMALDATE(Date1) then
                                   DateFilter := STRSUBSTNO('%1..%2',NORMALDATE(Date1),Date1);
                             GLAcc.SETFILTER("Date Filter",DateFilter);
                             DateFilter := GLAcc.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;

                ImplicitType=Text }

    { 38  ;2   ;Field     ;
                Name=GLAccFilter;
                CaptionML=ENU=G/L Account Filter;
                ToolTipML=ENU=Specifies the G/L accounts for which you will see information in the window.;
                ApplicationArea=#Suite;
                SourceExpr=GLAccFilter;
                OnValidate=BEGIN
                             GLAccFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page "G/L Account List";
                         BEGIN
                           GLAccList.LOOKUPMODE(true);
                           if not (GLAccList.RUNMODAL = ACTION::LookupOK) then
                             exit(false);

                           Text := GLAccList.GetSelectionFilter;
                           exit(true);
                         END;

                ImplicitType=Text }

    { 53  ;2   ;Field     ;
                Name=BudgetFilter;
                CaptionML=ENU=Budget Filter;
                ToolTipML=ENU=Specifies the budget that information in the matrix is shown for.;
                ApplicationArea=#Suite;
                SourceExpr=BudgetFilter;
                TableRelation="G/L Budget Name".Name;
                LookupPageID="G/L Budget Names";
                OnValidate=BEGIN
                             BudgetFilterOnAfterValidate;
                           END;

                ImplicitType=Text }

    { 16  ;2   ;Field     ;
                Name=BusUnitFilter;
                ApplicationArea=#Advanced;
                SourceExpr=BusUnitFilter;
                CaptionClass='3,' + BusUnitFilterCaption;
                OnValidate=BEGIN
                             BusUnitFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           BusUnitList@1002 : Page "Business Unit List";
                         BEGIN
                           BusUnitList.LOOKUPMODE(true);
                           if not (BusUnitList.RUNMODAL = ACTION::LookupOK) then
                             exit(false);
                           Text := BusUnitList.GetSelectionFilter;
                           exit(true);
                         END;

                ImplicitType=Text }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                ApplicationArea=#Suite;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             GlobalDim1FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 1 Code",Text));
                         END;

                ImplicitType=Text }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                ApplicationArea=#Suite;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             GlobalDim2FilterOnAfterValidat;
                           END;

                OnLookup=VAR
                           DimensionValue@1001 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(GLSetup."Global Dimension 2 Code",Text));
                         END;

                ImplicitType=Text }

    { 1903121901;1;Group  ;
                Name=Options;
                CaptionML=ENU=Options }

    { 29  ;2   ;Field     ;
                Name=ShowActualBudg;
                CaptionML=ENU=Show;
                ToolTipML=ENU=Specifies if the selected value is shown in the window.;
                OptionCaptionML=ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                ApplicationArea=#Suite;
                SourceExpr=ShowActualBudg;
                ImplicitType=Option }

    { 47  ;2   ;Field     ;
                Name=AmountField;
                CaptionML=ENU=Show Amount Field;
                ToolTipML=ENU=Specifies the type of entries that will be included in the matrix window. The Amount options means that amounts that are the sum of debit and credit amounts are shown.;
                OptionCaptionML=ENU=Amount,Debit Amount,Credit Amount;
                ApplicationArea=#Suite;
                SourceExpr=AmountField;
                ImplicitType=Option }

    { 20  ;2   ;Field     ;
                Name=ClosingEntryFilter;
                CaptionML=ENU=Closing Entries;
                ToolTipML=ENU=Specifies whether the balance shown will include closing entries. If you want to see the amounts on income statement accounts in closed years, you must exclude closing entries.;
                OptionCaptionML=ENU=Include,Exclude;
                ApplicationArea=#Suite;
                SourceExpr=ClosingEntryFilter;
                OnValidate=BEGIN
                             FindPeriod('=');
                           END;

                ImplicitType=Option }

    { 19  ;2   ;Field     ;
                Name=RoundingFactor;
                CaptionML=ENU=Rounding Factor;
                ToolTipML=ENU=Specifies the factor that is used to round the amounts.;
                OptionCaptionML=ENU=None,1,1000,1000000;
                ApplicationArea=#Suite;
                SourceExpr=RoundingFactor;
                ImplicitType=Option }

    { 49  ;2   ;Field     ;
                Name=ShowInAddCurr;
                CaptionML=ENU=Show Amounts in Add. Reporting Currency;
                ToolTipML=ENU=Specifies whether to show the reported amounts in the additional reporting currency.;
                ApplicationArea=#Suite;
                SourceExpr=ShowInAddCurr;
                MultiLine=true;
                ImplicitType=Boolean }

    { 4   ;2   ;Field     ;
                Name=ShowColumnName;
                CaptionML=ENU=Show Column Name;
                ToolTipML=ENU=Specifies that the names of columns are shown in the matrix window.;
                ApplicationArea=#Suite;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;

                ImplicitType=Boolean }

    { 1906098301;1;Group  ;
                Name=Matrix Options;
                CaptionML=ENU=Matrix Options }

    { 26  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=ENU=View by;
                ToolTipML=ENU=Specifies by which period amounts are displayed.;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                ApplicationArea=#Suite;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 11  ;2   ;Field     ;
                Name=AmountType;
                CaptionML=ENU=View as;
                ToolTipML=ENU=Specifies how amounts are displayed. Net Change: The net change in the balance for the selected period. Balance at Date: The balance as of the last day in the selected period.;
                OptionCaptionML=ENU=Net Change,Balance at Date;
                ApplicationArea=#Suite;
                SourceExpr=AmountType;
                OnValidate=BEGIN
                             FindPeriod('');
                             AmountTypeOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 22  ;2   ;Field     ;
                Name=MATRIX_ColumnSet;
                CaptionML=ENU=Column Set;
                ToolTipML=ENU=Specifies the range of values that are displayed in the matrix window, for example, the total period. To change the contents of the field, choose Next Set or Previous Set.;
                ApplicationArea=#Suite;
                SourceExpr=MATRIX_ColumnSet;
                Editable=FALSE;
                ImplicitType=Text1024 }

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Period';
      Text002@1002 : TextConst 'ENU=%1 is not a valid line definition.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid column definition.';
      GLSetup@1004 : Record "General Ledger Setup";
      GLAcc@1005 : Record "G/L Account";
      BusUnit@1038 : Record "Business Unit";
      LineDimOption@1008 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4"';
      ColumnDimOption@1009 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4"';
      LineDimCode@1010 : Text[30];
      ColumnDimCode@1011 : Text[30];
      PeriodType@1012 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      AmountType@1013 : '"Net Change","Balance at Date"';
      RoundingFactor@1014 : 'None,"1","1000","1000000"';
      AmountField@1015 : 'Amount,"Debit Amount","Credit Amount"';
      ShowActualBudg@1016 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%"';
      ShowInAddCurr@1017 : Boolean;
      ClosingEntryFilter@1018 : 'Include,Exclude';
      ShowColumnName@1019 : Boolean;
      DateFilter@1020 : Text;
      InternalDateFilter@1021 : Text;
      GLAccFilter@1023 : Text;
      BudgetFilter@1024 : Text;
      BusUnitFilter@1025 : Text;
      GlobalDim1Filter@1026 : Text;
      GlobalDim2Filter@1027 : Text;
      BusUnitFilterCaption@1000 : Text[80];
      PeriodInitialized@1030 : Boolean;
      MATRIX_ColumnCaptions@1032 : ARRAY [32] OF Text[1024];
      MATRIX_NoOfColumns@1033 : Integer;
      MATRIX_ColumnSet@1035 : Text[1024];
      MATRIX_PrimaryKeyFirstColInSet@1034 : Text[1024];
      MATRIX_CurrSetLength@1037 : Integer;
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1001 : Record "Business Unit";
    BEGIN
      case DimCode of
        '':
          exit(-1);
        GLAcc.TABLECAPTION:
          exit(0);
        Text001:
          exit(1);
        BusUnit.TABLECAPTION:
          exit(2);
        GLSetup."Global Dimension 1 Code":
          exit(3);
        GLSetup."Global Dimension 2 Code":
          exit(4);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record "G/L Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record Date;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    VAR
      Period2@1002 : Record Date;
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        else
          "Period End" := ThePeriod."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := ThePeriod."Period Name";
      end;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record "Business Unit";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      end;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record "Dimension Value";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      end;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Period@1001 : Record Date;
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
    BEGIN
      if DateFilter <> '' then begin
        Period.SETFILTER("Period Start",DateFilter);
        if not PeriodFormMgt.FindDate('+',Period,PeriodType) then
          PeriodFormMgt.FindDate('+',Period,PeriodType::Day);
        Period.SETRANGE("Period Start");
      end;
      if PeriodFormMgt.FindDate(SearchText,Period,PeriodType) then
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          Period."Period End" := CLOSINGDATE(Period."Period End");
      if AmountType = AmountType::"Net Change" then begin
        GLAcc.SETRANGE("Date Filter",Period."Period Start",Period."Period End");
        if GLAcc.GETRANGEMIN("Date Filter") = GLAcc.GETRANGEMAX("Date Filter") then
          GLAcc.SETRANGE("Date Filter",GLAcc.GETRANGEMIN("Date Filter"));
      end else
        GLAcc.SETRANGE("Date Filter",0D,Period."Period End");

      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Page "Dimension Selection";
    BEGIN
      DimSelection.InsertDimSelBuf(false,GLAcc.TABLECAPTION,GLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,BusUnit.TABLECAPTION,BusUnit.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Text001,Text001);
      if GLSetup."Global Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 1 Code",'');
      if GLSetup."Global Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 2 Code",'');

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);

      exit(OldDimSelCode);
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      BusUnit@1000 : Record "Business Unit";
    BEGIN
      if (UPPERCASE(LineDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) and
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text001)) and
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 1 Code") and
         (UPPERCASE(LineDimCode) <> GLSetup."Global Dimension 2 Code") and
         (LineDimCode <> '')
      then begin
        MESSAGE(Text002,LineDimCode);
        LineDimCode := '';
      end;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      BusUnit@1000 : Record "Business Unit";
    BEGIN
      if (UPPERCASE(ColumnDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) and
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text001)) and
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 1 Code") and
         (UPPERCASE(ColumnDimCode) <> GLSetup."Global Dimension 2 Code") and
         (ColumnDimCode <> '')
      then begin
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      end;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    LOCAL PROCEDURE FindRec@1223(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1224 : Record "G/L Account";
      BusUnit@1225 : Record "Business Unit";
      Period@1226 : Record Date;
      DimVal@1227 : Record "Dimension Value";
      PeriodFormMgt@1228 : Codeunit PeriodFormManagement;
      Found@1229 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if GLAccFilter <> '' then
              GLAcc.SETFILTER("No.",GLAccFilter);
            Found := GLAcc.FIND(Which);
            if Found then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if not PeriodInitialized then
              DateFilter := '';
            PeriodInitialized := true;
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if not PeriodInitialized and (InternalDateFilter <> '') then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            if Found then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if GlobalDim1Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if GlobalDim2Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE NextRec@1230(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1231 : Record "G/L Account";
      BusUnit@1232 : Record "Business Unit";
      Period@1233 : Record Date;
      DimVal@1234 : Record "Dimension Value";
      PeriodFormMgt@1235 : Codeunit PeriodFormManagement;
      ResultSteps@1236 : Integer;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if GLAccFilter <> '' then
              GLAcc.SETFILTER("No.",GLAccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter);
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            if ResultSteps <> 0 then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if GlobalDim1Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if GlobalDim2Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@7(Step@1000 : 'Initial,Previous,Same,Next');
    VAR
      CurrentColumn@1003 : Record "Dimension Code Buffer";
      Found@1001 : Boolean;
      Which@1004 : Text[30];
    BEGIN
      MATRIX_CurrSetLength := 0;
      CLEAR(MATRIX_ColumnCaptions);
      MATRIX_ColumnSet := '';

      case Step of
        Step::Initial:
          begin
            if (ColumnDimOption = ColumnDimOption::Period) and (PeriodType <> PeriodType::"Accounting Period")
               and (DateFilter = '')
            then begin
              EVALUATE(CurrentColumn.Code,FORMAT(WORKDATE));
              Which := '=><';
            end else
              Which := '-';
            Found := FindRec(ColumnDimOption,CurrentColumn,Which);
          end;
        Step::Previous:
          begin
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            NextRec(ColumnDimOption,CurrentColumn,-MATRIX_NoOfColumns)
          end;
        Step::Same:
          begin
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
          end;
        Step::Next:
          begin
            CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
            Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            if not (NextRec(ColumnDimOption,CurrentColumn,MATRIX_NoOfColumns) = MATRIX_NoOfColumns) then begin
              CurrentColumn.SETPOSITION(MATRIX_PrimaryKeyFirstColInSet);
              Found := FindRec(ColumnDimOption,CurrentColumn,'=');
            end
          end;
      end;

      MATRIX_PrimaryKeyFirstColInSet := CurrentColumn.GETPOSITION;

      if Found then begin
        repeat
          MATRIX_CurrSetLength := MATRIX_CurrSetLength + 1;
          if ShowColumnName then
            MATRIX_ColumnCaptions[MATRIX_CurrSetLength] := CurrentColumn.Name
          else
            MATRIX_ColumnCaptions[MATRIX_CurrSetLength] := CurrentColumn.Code;
        until (MATRIX_CurrSetLength = MATRIX_NoOfColumns) or (NextRec(ColumnDimOption,CurrentColumn,1) <> 1);

        if MATRIX_CurrSetLength = 1 then
          MATRIX_ColumnSet := MATRIX_ColumnCaptions[1]
        else
          MATRIX_ColumnSet := MATRIX_ColumnCaptions[1] + '..' + MATRIX_ColumnCaptions[MATRIX_CurrSetLength];
      end;
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    VAR
      MATRIX_Steps@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_Steps::First);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      if ColumnDimOption = ColumnDimOption::Period then begin
        PeriodInitialized := true;
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
      end;
    END;

    LOCAL PROCEDURE GLAccFilterOnAfterValidate@19040142();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      if ColumnDimOption = ColumnDimOption::"G/L Account" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE GlobalDim2FilterOnAfterValidat@19025957();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      if ColumnDimOption = ColumnDimOption::"Dimension 2" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE GlobalDim1FilterOnAfterValidat@19037628();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      if ColumnDimOption = ColumnDimOption::"Dimension 1" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE BudgetFilterOnAfterValidate@19069837();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BusUnitFilterOnAfterValidate@19015355();
    VAR
      MATRIX_Step@1000 : 'First,Previous,Next';
    BEGIN
      CurrPage.UPDATE;
      if ColumnDimOption = ColumnDimOption::"Business Unit" then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    VAR
      MATRIX_Step@1000 : 'Initial,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Same);
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    LOCAL PROCEDURE AmountTypeOnAfterValidate@19077637();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      if ColumnDimOption = ColumnDimOption::Period then
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
    END;

    BEGIN
    END.
  }
}

