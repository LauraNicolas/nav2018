OBJECT Codeunit 915 Assembly Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record Item;
      AvailableToPromise@1005 : Codeunit "Available to Promise";

    [External]
    PROCEDURE CalcAvailability@18(VAR AsmLine@1000 : Record "Assembly Line") : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(
          AvailableToPromise.QtyAvailabletoPromise(
            Item,
            GrossRequirement,
            ScheduledReceipt,
            CalcAvailabilityDate(AsmLine),
            PeriodType,
            LookaheadDateformula));
      end;
    END;

    LOCAL PROCEDURE CalcAvailabilityDate@27(AsmLine@1000 : Record "Assembly Line") : Date;
    BEGIN
      if AsmLine."Due Date" <> 0D then
        exit(AsmLine."Due Date");

      exit(WORKDATE);
    END;

    [External]
    PROCEDURE CalcAvailableInventory@9(VAR AsmLine@1000 : Record "Assembly Line") : Decimal;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(AvailableToPromise.CalcAvailableInventory(Item));
      end;
    END;

    [External]
    PROCEDURE CalcScheduledReceipt@21(VAR AsmLine@1001 : Record "Assembly Line") : Decimal;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(AvailableToPromise.CalcScheduledReceipt(Item));
      end;
    END;

    [External]
    PROCEDURE CalcGrossRequirement@23(VAR AsmLine@1001 : Record "Assembly Line") : Decimal;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(AvailableToPromise.CalcGrossRequirement(Item));
      end;
    END;

    [External]
    PROCEDURE CalcReservedReceipt@25(VAR AsmLine@1001 : Record "Assembly Line") : Decimal;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(AvailableToPromise.CalcReservedReceipt(Item));
      end;
    END;

    [External]
    PROCEDURE CalcReservedRequirement@26(VAR AsmLine@1000 : Record "Assembly Line") : Decimal;
    BEGIN
      if GetItem(AsmLine) then begin
        SetItemFilter(Item,AsmLine);

        exit(AvailableToPromise.CalcReservedRequirement(Item));
      end;
    END;

    [External]
    PROCEDURE LookupItem@7(AsmLine@1000 : Record "Assembly Line");
    BEGIN
      AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
      AsmLine.TESTFIELD("No.");
      GetItem(AsmLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    LOCAL PROCEDURE GetItem@24(AsmLine@1000 : Record "Assembly Line") : Boolean;
    BEGIN
      with Item do begin
        if (AsmLine.Type <> AsmLine.Type::Item) or (AsmLine."No." = '') then
          exit(false);

        if AsmLine."No." <> "No." then
          GET(AsmLine."No.");
        exit(true);
      end;
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record Item;AsmLine@1001 : Record "Assembly Line");
    BEGIN
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(AsmLine));
      Item.SETRANGE("Variant Filter",AsmLine."Variant Code");
      Item.SETRANGE("Location Filter",AsmLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",false);
    END;

    BEGIN
    END.
  }
}

