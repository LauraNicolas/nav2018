OBJECT Codeunit 400 SMTP Mail
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "SMTP Mail Setup"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record "SMTP Mail Setup";
      Mail@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      Text002@1002 : TextConst '@@@="%1=file name";ENU=Attachment %1 does not exist or can not be accessed from the program.';
      SendResult@1004 : Text;
      Text003@1005 : TextConst '@@@="%1=an error message";ENU=The mail system returned the following error: "%1".';
      SendErr@1001 : TextConst 'ENU=The email couldn''t be sent.';
      RecipientErr@1006 : TextConst '@@@="%1 = email address";ENU=Could not add recipient %1.';
      BodyErr@1007 : TextConst 'ENU=Could not add text to email body.';
      AttachErr@1008 : TextConst 'ENU=Could not add an attachment to the email.';

    [External]
    PROCEDURE CreateMessage@1(SenderName@1008 : Text;SenderAddress@1000 : Text;Recipients@1001 : Text;Subject@1004 : Text;Body@1005 : Text;HtmlFormatted@1006 : Boolean);
    BEGIN
      if Recipients <> '' then
        CheckValidEmailAddresses(Recipients);
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      if not ISNULL(Mail) then begin
        Mail.Dispose;
        CLEAR(Mail);
      end;
      SendResult := '';
      Mail := Mail.SmtpMessage;
      Mail.FromName := SenderName;
      Mail.FromAddress := SenderAddress;
      Mail."To" := Recipients;
      Mail.Subject := Subject;
      Mail.Body := Body;
      Mail.HtmlFormatted := HtmlFormatted;

      if HtmlFormatted then
        Mail.ConvertBase64ImagesToContentId;
    END;

    [External]
    PROCEDURE TrySend@10() : Boolean;
    VAR
      Password@1000 : Text[250];
    BEGIN
      OnBeforeTrySend;
      SendResult := '';
      Password := SMTPMailSetup.GetPassword;
      with SMTPMailSetup do
        SendResult :=
          Mail.Send(
            "SMTP Server",
            "SMTP Server Port",
            Authentication <> Authentication::Anonymous,
            "User ID",
            Password,
            "Secure Connection");
      Mail.Dispose;
      CLEAR(Mail);

      exit(SendResult = '');
    END;

    [External]
    PROCEDURE Send@3();
    BEGIN
      if not TrySend then
        ShowErrorNotification(SendErr,SendResult);
    END;

    [External]
    PROCEDURE AddRecipients@4(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddRecipients(Recipients);
      if Result <> '' then
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddCC@5(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddCC(Recipients);
      if Result <> '' then
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AddBCC@6(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddBCC(Recipients);
      if Result <> '' then
        ShowErrorNotification(STRSUBSTNO(RecipientErr,Recipients),Result);
    END;

    [External]
    PROCEDURE AppendBody@7(BodyPart@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      Result := Mail.AppendBody(BodyPart);
      if Result <> '' then
        ShowErrorNotification(BodyErr,Result);
    END;

    [External]
    PROCEDURE AddAttachment@2(Attachment@1000 : Text;FileName@1002 : Text);
    VAR
      FileManagement@1003 : Codeunit "File Management";
      Result@1001 : Text;
    BEGIN
      if Attachment = '' then
        exit;
      if not EXISTS(Attachment) then
        ERROR(Text002,Attachment);

      FileName := FileManagement.StripNotsupportChrInFileName(FileName);
      FileName := DELCHR(FileName,'=',';'); // Used for splitting multiple file names in Mail .NET component

      Result := Mail.AddAttachmentWithName(Attachment,FileName);

      if Result <> '' then
        ShowErrorNotification(AttachErr,Result);
    END;

    [External]
    PROCEDURE AddAttachmentStream@15(AttachmentStream@1000 : InStream;AttachmentName@1001 : Text);
    VAR
      FileManagement@1002 : Codeunit "File Management";
    BEGIN
      AttachmentName := FileManagement.StripNotsupportChrInFileName(AttachmentName);

      Mail.AddAttachment(AttachmentStream,AttachmentName);
    END;

    [External]
    PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      MailManagement@1002 : Codeunit "Mail Management";
    BEGIN
      MailManagement.CheckValidEmailAddresses(Recipients);
    END;

    [External]
    PROCEDURE GetLastSendMailErrorText@9() : Text;
    BEGIN
      exit(SendResult);
    END;

    [External]
    PROCEDURE GetSMTPMessage@35(VAR SMTPMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage");
    BEGIN
      SMTPMessage := Mail;
    END;

    [External]
    PROCEDURE IsEnabled@11() : Boolean;
    BEGIN
      if SMTPMailSetup.FIND then
        exit(not (SMTPMailSetup."SMTP Server" = ''));

      exit(false);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleSMTPRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record "Service Connection");
    VAR
      SMTPMailSetup@1001 : Record "SMTP Mail Setup";
      RecRef@1002 : RecordRef;
    BEGIN
      if not SMTPMailSetup.GET then begin
        if not SMTPMailSetup.WRITEPERMISSION then
          exit;
        SMTPMailSetup.INIT;
        SMTPMailSetup.INSERT;
      end;

      RecRef.GETTABLE(SMTPMailSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      if SMTPMailSetup."SMTP Server" = '' then
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      with SMTPMailSetup do
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"SMTP Mail Setup");
    END;

    [External]
    PROCEDURE GetBody@13() : Text;
    BEGIN
      exit(Mail.Body);
    END;

    [Integration(TRUE)]
    PROCEDURE OnBeforeTrySend@32();
    BEGIN
    END;

    LOCAL PROCEDURE ShowErrorNotification@20(ErrorMessage@1000 : Text;SmtpResult@1002 : Text);
    VAR
      Notification@1001 : Notification;
    BEGIN
      if GUIALLOWED then begin
        Notification.MESSAGE := ErrorMessage;
        Notification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
        Notification.ADDACTION('Details',CODEUNIT::"SMTP Mail",'ShowNotificationDetail');
        Notification.SETDATA('Details',STRSUBSTNO(Text003,SmtpResult));
        Notification.SEND;
        ERROR('');
      end;
      ERROR(Text003,SmtpResult);
    END;

    PROCEDURE ShowNotificationDetail@22(Notification@1000 : Notification);
    BEGIN
      MESSAGE(Notification.GETDATA('Details'));
    END;

    [External]
    PROCEDURE GetO365SmtpServer@17() : Text[250];
    BEGIN
      exit('smtp.office365.com')
    END;

    [External]
    PROCEDURE GetOutlookSmtpServer@21() : Text[250];
    BEGIN
      exit('smtp-mail.outlook.com')
    END;

    [External]
    PROCEDURE GetGmailSmtpServer@23() : Text[250];
    BEGIN
      exit('smtp.gmail.com')
    END;

    [External]
    PROCEDURE GetYahooSmtpServer@24() : Text[250];
    BEGIN
      exit('smtp.mail.yahoo.com')
    END;

    [External]
    PROCEDURE GetDefaultSmtpPort@18() : Integer;
    BEGIN
      exit(587);
    END;

    [External]
    PROCEDURE GetYahooSmtpPort@36() : Integer;
    BEGIN
      exit(465);
    END;

    [External]
    PROCEDURE GetDefaultSmtpAuthType@19() : Integer;
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
    BEGIN
      exit(SMTPMailSetup.Authentication::Basic);
    END;

    LOCAL PROCEDURE ApplyDefaultSmtpConnectionSettings@25(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup");
    BEGIN
      SMTPMailSetupConfig.Authentication := GetDefaultSmtpAuthType;
      SMTPMailSetupConfig."Secure Connection" := true;
    END;

    [External]
    PROCEDURE ApplyOffice365Smtp@12(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup");
    BEGIN
      // This might be changed by the Microsoft Office 365 team.
      // Current source: http://technet.microsoft.com/library/dn554323.aspx
      SMTPMailSetupConfig."SMTP Server" := GetO365SmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyOutlookSmtp@34(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup");
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetOutlookSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyGmailSmtp@33(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup");
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetGmailSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetDefaultSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE ApplyYahooSmtp@31(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup");
    BEGIN
      // This might be changed.
      SMTPMailSetupConfig."SMTP Server" := GetYahooSmtpServer;
      SMTPMailSetupConfig."SMTP Server Port" := GetYahooSmtpPort;
      ApplyDefaultSmtpConnectionSettings(SMTPMailSetupConfig);
    END;

    [External]
    PROCEDURE IsOffice365Setup@16(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup") : Boolean;
    BEGIN
      if SMTPMailSetupConfig."SMTP Server" <> GetO365SmtpServer then
        exit(false);

      if SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort then
        exit(false);

      exit(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsOutlookSetup@38(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup") : Boolean;
    BEGIN
      if SMTPMailSetupConfig."SMTP Server" <> GetOutlookSmtpServer then
        exit(false);

      if SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort then
        exit(false);

      exit(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsGmailSetup@39(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup") : Boolean;
    BEGIN
      if SMTPMailSetupConfig."SMTP Server" <> GetGmailSmtpServer then
        exit(false);

      if SMTPMailSetupConfig."SMTP Server Port" <> GetDefaultSmtpPort then
        exit(false);

      exit(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    [External]
    PROCEDURE IsYahooSetup@40(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup") : Boolean;
    BEGIN
      if SMTPMailSetupConfig."SMTP Server" <> GetYahooSmtpServer then
        exit(false);

      if SMTPMailSetupConfig."SMTP Server Port" <> GetYahooSmtpPort then
        exit(false);

      exit(IsSmtpConnectionSetup(SMTPMailSetupConfig));
    END;

    LOCAL PROCEDURE IsSmtpConnectionSetup@26(VAR SMTPMailSetupConfig@1000 : Record "SMTP Mail Setup") : Boolean;
    BEGIN
      if SMTPMailSetupConfig.Authentication <> GetDefaultSmtpAuthType then
        exit(false);

      if SMTPMailSetupConfig."Secure Connection" <> true then
        exit(false);

      exit(true);
    END;

    BEGIN
    END.
  }
}

