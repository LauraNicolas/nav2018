OBJECT Codeunit 5900 ServOrderManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot create a %1, because the %2 field is not empty.';
      Text001@1001 : TextConst 'ENU=You must specify %1, %2 and %3 in %4 %5, before you create new %6.';
      Text002@1002 : TextConst 'ENU=This customer already exists.\\';
      Text003@1003 : TextConst 'ENU=Do you want create a new %1 instead of using the existing one?';
      Text004@1004 : TextConst 'ENU=There are no Customer Templates.';
      Text005@1005 : TextConst 'ENU=Posting cannot be completed successfully. The %1 field on the service invoice lines should contain 1 because %2 %3 was replaced.';
      Text006@1006 : TextConst 'ENU=The %1 %2 is already assigned to %3 %4.';
      Text007@1007 : TextConst 'ENU=%1 %2 was created.';
      Text008@1008 : TextConst 'ENU=There is not enough space to insert %1.';
      Text009@1009 : TextConst 'ENU=Travel fee in the %1 table with %2 %3 cannot be found.';
      Text011@1011 : TextConst 'ENU=There is no %1 for %2 %3.';
      Text012@1012 : TextConst 'ENU=You can not post %1 %2.\\%3 %4 in %5 line %6 is preventing it.';

    [External]
    PROCEDURE ServHeaderLookup@5(DocumentType@1003 : Integer;VAR DocumentNo@1000 : Code[20]) : Boolean;
    VAR
      ServHeader@1001 : Record "Service Header";
    BEGIN
      if ServHeader.GET(DocumentType,DocumentNo) then begin
        ServHeader.SETRANGE("Document Type",DocumentType);
        if PAGE.RUNMODAL(0,ServHeader) = ACTION::LookupOK then begin
          DocumentNo := ServHeader."No.";
          exit(true);
        end;
      end;
      exit(false);
    END;

    [External]
    PROCEDURE UpdateResponseDateTime@7(VAR ServItemLine@1000 : Record "Service Item Line";Deleting@1005 : Boolean);
    VAR
      ServItemLine2@1006 : Record "Service Item Line";
      ServHeader@1007 : Record "Service Header";
      NewResponseDate@1001 : Date;
      NewResponseTime@1002 : Time;
    BEGIN
      if not ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.") then
        exit;

      if not Deleting then begin
        NewResponseDate := ServItemLine."Response Date";
        NewResponseTime := ServItemLine."Response Time";
      end;

      ServItemLine2.RESET;
      ServItemLine2.SETRANGE("Document Type",ServItemLine."Document Type");
      ServItemLine2.SETRANGE("Document No.",ServItemLine."Document No.");
      ServItemLine2.SETFILTER("Line No.",'<>%1',ServItemLine."Line No.");
      if ServItemLine2.FIND('-') then begin
        if Deleting then begin
          NewResponseDate := ServItemLine2."Response Date";
          NewResponseTime := ServItemLine2."Response Time";
        end;
        repeat
          if ServItemLine2."Response Date" < NewResponseDate then begin
            NewResponseDate := ServItemLine2."Response Date";
            NewResponseTime := ServItemLine2."Response Time"
          end else
            if (ServItemLine2."Response Date" = NewResponseDate) and
               (ServItemLine2."Response Time" < NewResponseTime)
            then
              NewResponseTime := ServItemLine2."Response Time";
        until ServItemLine2.NEXT = 0;
      end;

      if (ServHeader."Response Date" <> NewResponseDate) or
         (ServHeader."Response Time" <> NewResponseTime)
      then begin
        ServHeader."Response Date" := NewResponseDate;
        ServHeader."Response Time" := NewResponseTime;
        ServHeader.MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE CreateNewCustomer@2(VAR ServHeader@1000 : Record "Service Header");
    VAR
      Cust@1001 : Record Customer;
      DefaultDim@1002 : Record "Default Dimension";
      DefaultDim2@1003 : Record "Default Dimension";
      CustTempl@1005 : Record "Customer Template";
      FromCustInvDisc@1004 : Record "Cust. Invoice Disc.";
      ToCustInvDisc@1006 : Record "Cust. Invoice Disc.";
      CustContUpdate@1007 : Codeunit "CustCont-Update";
    BEGIN
      with ServHeader do begin
        if "Customer No." <> '' then
          ERROR(
            Text000,
            Cust.TABLECAPTION,FIELDCAPTION("Customer No."));
        if (Name = '') or (Address = '') or (City = '') then
          ERROR(
            Text001,
            FIELDCAPTION(Name),FIELDCAPTION(Address),FIELDCAPTION(City),TABLECAPTION,"No.",Cust.TABLECAPTION);

        Cust.RESET;
        Cust.SETCURRENTKEY(Name,Address,City);
        Cust.SETRANGE(Name,Name);
        Cust.SETRANGE(Address,Address);
        Cust.SETRANGE(City,City);
        if Cust.FINDFIRST then
          if not
             CONFIRM(
               Text002 + Text003,
               false,Cust.TABLECAPTION)
          then begin
            VALIDATE("Customer No.",Cust."No.");
            exit;
          end;
        CustTempl.RESET;
        if not CustTempl.FINDFIRST then
          ERROR(Text004);
        if PAGE.RUNMODAL(PAGE::"Customer Template List",CustTempl) = ACTION::LookupOK then begin
          Cust."No." := '';
          Cust.VALIDATE(Name,Name);
          Cust."Name 2" := "Name 2";
          Cust.Address := Address;
          Cust."Address 2" := "Address 2";
          Cust.City := City;
          Cust."Post Code" := "Post Code";
          Cust.Contact := "Contact Name";
          Cust."Phone No." := "Phone No.";
          Cust."E-Mail" := "E-Mail";
          Cust.Blocked := Cust.Blocked::" ";
          Cust."Territory Code" := CustTempl."Territory Code";
          Cust."Global Dimension 1 Code" := CustTempl."Global Dimension 1 Code";
          Cust."Global Dimension 2 Code" := CustTempl."Global Dimension 2 Code";
          Cust."Customer Posting Group" := CustTempl."Customer Posting Group";
          Cust."Currency Code" := CustTempl."Currency Code";
          Cust."Invoice Disc. Code" := CustTempl."Invoice Disc. Code";
          Cust."Customer Price Group" := CustTempl."Customer Price Group";
          Cust."Customer Disc. Group" := CustTempl."Customer Disc. Group";
          Cust."Country/Region Code" := CustTempl."Country/Region Code";
          Cust."Allow Line Disc." := CustTempl."Allow Line Disc.";
          Cust."Gen. Bus. Posting Group" := CustTempl."Gen. Bus. Posting Group";
          Cust."VAT Bus. Posting Group" := CustTempl."VAT Bus. Posting Group";
          Cust.VALIDATE("Payment Terms Code",CustTempl."Payment Terms Code");
          Cust.VALIDATE("Payment Method Code",CustTempl."Payment Method Code");
          Cust."Prices Including VAT" := CustTempl."Prices Including VAT";
          Cust."Shipment Method Code" := CustTempl."Shipment Method Code";
          Cust.INSERT(true);

          if "Contact Name" <> '' then begin
            CustContUpdate.InsertNewContactPerson(Cust,false);
            Cust.MODIFY;
          end;

          DefaultDim.RESET;
          DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
          DefaultDim.SETRANGE("No.",CustTempl.Code);
          if DefaultDim.FIND('-') then
            repeat
              DefaultDim2 := DefaultDim;
              DefaultDim2."Table ID" := DATABASE::Customer;
              DefaultDim2."No." := Cust."No.";
              DefaultDim2.INSERT(true);
            until DefaultDim.NEXT = 0;

          if CustTempl."Invoice Disc. Code" <> '' then begin
            FromCustInvDisc.RESET;
            FromCustInvDisc.SETRANGE(Code,CustTempl."Invoice Disc. Code");
            if FromCustInvDisc.FIND('-') then
              repeat
                ToCustInvDisc.INIT;
                ToCustInvDisc.Code := Cust."No.";
                ToCustInvDisc."Currency Code" := FromCustInvDisc."Currency Code";
                ToCustInvDisc."Minimum Amount" := FromCustInvDisc."Minimum Amount";
                ToCustInvDisc."Discount %" := FromCustInvDisc."Discount %";
                ToCustInvDisc."Service Charge" := FromCustInvDisc."Service Charge";
                ToCustInvDisc.INSERT;
              until FromCustInvDisc.NEXT = 0;
          end;
          VALIDATE("Customer No.",Cust."No.");
        end;
      end;
    END;

    [External]
    PROCEDURE ReplacementCreateServItem@1(FromServItem@1000 : Record "Service Item";ServiceLine@1001 : Record "Service Line";ServShptDocNo@1011 : Code[20];ServShptLineNo@1012 : Integer;VAR TempTrackingSpecification@1008 : TEMPORARY Record "Tracking Specification");
    VAR
      ServMgtSetup@1006 : Record "Service Mgt. Setup";
      NewServItem@1003 : Record "Service Item";
      ResSkill@1010 : Record "Resource Skill";
      ServLogMgt@1004 : Codeunit ServLogManagement;
      NoSeriesMgt@1005 : Codeunit NoSeriesManagement;
      ResSkillMgt@1009 : Codeunit "Resource Skill Mgt.";
      SerialNo@1007 : Code[20];
    BEGIN
      if ServiceLine.Quantity <> 1 then
        ERROR(Text005,ServiceLine.FIELDCAPTION(Quantity),FromServItem.TABLECAPTION,FromServItem."No.");

      SerialNo := '';
      TempTrackingSpecification.RESET;
      TempTrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");
      TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
      TempTrackingSpecification.SETRANGE("Source Subtype",ServiceLine."Document Type");
      TempTrackingSpecification.SETRANGE("Source ID",ServiceLine."Document No.");
      TempTrackingSpecification.SETRANGE("Source Ref. No.",ServiceLine."Line No.");
      if TempTrackingSpecification.FIND('-') then
        SerialNo := TempTrackingSpecification."Serial No.";

      if SerialNo <> '' then begin
        NewServItem.RESET;
        NewServItem.SETCURRENTKEY("Item No.","Serial No.");
        NewServItem.SETRANGE("Item No.",ServiceLine."No.");
        NewServItem.SETRANGE("Variant Code",ServiceLine."Variant Code");
        NewServItem.SETRANGE("Serial No.",SerialNo);
        if NewServItem.FINDFIRST then
          ERROR(
            Text006,
            NewServItem.TABLECAPTION,NewServItem."No.",NewServItem.FIELDCAPTION("Serial No."),NewServItem."Serial No.");
      end;

      NewServItem.RESET;
      ServMgtSetup.GET;
      NewServItem := FromServItem;
      NewServItem."No." := '';
      NoSeriesMgt.InitSeries(
        ServMgtSetup."Service Item Nos.",NewServItem."No. Series",0D,NewServItem."No.",NewServItem."No. Series");
      NewServItem."Serial No." := SerialNo;
      NewServItem."Variant Code" := ServiceLine."Variant Code";
      NewServItem."Shipment Type" := NewServItem."Shipment Type"::Service;
      NewServItem."Sales/Serv. Shpt. Document No." := ServShptDocNo;
      NewServItem."Sales/Serv. Shpt. Line No." := ServShptLineNo;
      case ServiceLine."Spare Part Action" of
        ServiceLine."Spare Part Action"::"Temporary":
          NewServItem.Status := NewServItem.Status::"Temporarily Installed";
        ServiceLine."Spare Part Action"::Permanent:
          NewServItem.Status := NewServItem.Status::Installed;
      end;

      NewServItem.INSERT;
      ResSkillMgt.CloneObjectResourceSkills(ResSkill.Type::"Service Item",FromServItem."No.",NewServItem."No.");

      CLEAR(ServLogMgt);
      ServLogMgt.ServItemAutoCreated(NewServItem);

      CLEAR(ServLogMgt);
      ServLogMgt.ServItemReplaced(FromServItem,NewServItem);
      FromServItem.Status := FromServItem.Status::Defective;
      FromServItem.MODIFY;
      case ServiceLine."Copy Components From" of
        ServiceLine."Copy Components From"::"Item BOM":
          CopyComponentsFromBOM(NewServItem);
        ServiceLine."Copy Components From"::"Old Service Item":
          CopyComponentsFromSI(FromServItem,NewServItem,true);
        ServiceLine."Copy Components From"::"Old Serv.Item w/o Serial No.":
          CopyComponentsFromSI(FromServItem,NewServItem,false);
      end;

      MESSAGE(
        Text007,
        NewServItem.TABLECAPTION,NewServItem."No.");
    END;

    [External]
    PROCEDURE InsertServCost@4(ServInvLine@1000 : Record "Service Line";CostType@1001 : Integer;LinktoServItemLine@1007 : Boolean) : Boolean;
    VAR
      ServMgtSetup@1002 : Record "Service Mgt. Setup";
      ServHeader@1003 : Record "Service Header";
      ServInvLine2@1004 : Record "Service Line";
      ServCost@1005 : Record "Service Cost";
      NextLine@1006 : Integer;
    BEGIN
      ServHeader.GET(ServInvLine."Document Type",ServInvLine."Document No.");

      ServInvLine2.RESET;
      ServInvLine2.SETRANGE("Document Type",ServInvLine."Document Type");
      ServInvLine2.SETRANGE("Document No.",ServInvLine."Document No.");
      ServInvLine2 := ServInvLine;

      NextLine := ServInvLine.GetNextLineNo(ServInvLine,false);
      if NextLine = 0 then
        ERROR(Text008,ServInvLine.TABLECAPTION);

      case CostType of
        0: // Travel Fee
          begin
            ServHeader.TESTFIELD("Service Zone Code");
            ServCost.RESET;
            ServCost.SETCURRENTKEY("Service Zone Code");
            ServCost.SETRANGE("Service Zone Code",ServHeader."Service Zone Code");
            ServCost.SETRANGE("Cost Type",ServCost."Cost Type"::Travel);
            if not ServCost.FINDFIRST then
              ERROR(
                Text009,
                ServCost.TABLECAPTION,ServCost.FIELDCAPTION("Service Zone Code"),ServHeader."Service Zone Code");

            ServInvLine2.INIT;
            if LinktoServItemLine then begin
              ServInvLine2."Service Item Line No." := ServInvLine."Service Item Line No.";
              ServInvLine2."Service Item No." := ServInvLine."Service Item No.";
              ServInvLine2."Service Item Serial No." := ServInvLine."Service Item Serial No.";
            end;
            ServInvLine2."Document Type" := ServHeader."Document Type";
            ServInvLine2."Document No." := ServHeader."No.";
            ServInvLine2."Line No." := NextLine;
            ServInvLine2.Type := ServInvLine2.Type::Cost;
            ServInvLine2.VALIDATE("No.",ServCost.Code);
            ServInvLine2.VALIDATE("Unit of Measure Code",ServCost."Unit of Measure Code");
            ServInvLine2.INSERT(true);
            exit(true);
          end;
        1: // Starting Fee
          begin
            ServMgtSetup.GET;
            ServMgtSetup.TESTFIELD("Service Order Starting Fee");
            ServCost.GET(ServMgtSetup."Service Order Starting Fee");
            ServInvLine2.INIT;
            if LinktoServItemLine then begin
              ServInvLine2."Service Item Line No." := ServInvLine."Service Item Line No.";
              ServInvLine2."Service Item No." := ServInvLine."Service Item No.";
              ServInvLine2."Service Item Serial No." := ServInvLine."Service Item Serial No.";
            end;
            ServInvLine2."Document Type" := ServHeader."Document Type";
            ServInvLine2."Document No." := ServHeader."No.";
            ServInvLine2."Line No." := NextLine;
            ServInvLine2.Type := ServInvLine2.Type::Cost;
            ServInvLine2.VALIDATE("No.",ServCost.Code);
            ServInvLine2.VALIDATE("Unit of Measure Code",ServCost."Unit of Measure Code");
            ServInvLine2.INSERT(true);
            exit(true);
          end;
        else
          exit(false);
      end;
    END;

    [External]
    PROCEDURE FindContactInformation@3(CustNo@1000 : Code[20]) : Code[20];
    VAR
      ServMgtSetup@1006 : Record "Service Mgt. Setup";
      Cust@1007 : Record Customer;
      ContBusRel@1008 : Record "Contact Business Relation";
      ContJobResp@1009 : Record "Contact Job Responsibility";
      Cont@1010 : Record Contact;
      ContactFound@1012 : Boolean;
    BEGIN
      if Cust.GET(CustNo) then begin
        ServMgtSetup.GET;
        ContactFound := false;
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.",Cust."No.");
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE(Type,Cont.Type::Person);
        if ContBusRel.FINDFIRST then begin
          Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
          if Cont.FIND('-') then
            repeat
              ContJobResp.RESET;
              ContJobResp.SETRANGE("Contact No.",Cont."No.");
              ContJobResp.SETRANGE("Job Responsibility Code",ServMgtSetup."Serv. Job Responsibility Code");
              ContactFound := ContJobResp.FINDFIRST;
            until (Cont.NEXT = 0) or ContactFound;
        end;
        if ContactFound then begin
          Cont.GET(ContJobResp."Contact No.");
          exit(Cont."No.");
        end;
      end;
    END;

    [External]
    PROCEDURE FindResLocationCode@8(ResourceNo@1000 : Code[20];StartDate@1001 : Date) : Code[10];
    VAR
      ResLocation@1002 : Record "Resource Location";
    BEGIN
      ResLocation.RESET;
      ResLocation.SETCURRENTKEY("Resource No.","Starting Date");
      ResLocation.SETRANGE("Resource No.",ResourceNo);
      ResLocation.SETRANGE("Starting Date",0D,StartDate);
      if ResLocation.FINDLAST then
        exit(ResLocation."Location Code");
    END;

    [External]
    PROCEDURE CalcServTime@6(StartingDate@1000 : Date;StartingTime@1001 : Time;FinishingDate@1002 : Date;FinishingTime@1003 : Time;ContractNo@1004 : Code[20];ContractCalendarExists@1005 : Boolean) : Decimal;
    VAR
      CalChange@1015 : Record "Customized Calendar Change";
      ServHour@1006 : Record "Service Hour";
      ServMgtSetup@1013 : Record "Service Mgt. Setup";
      CalendarMgmt@1012 : Codeunit "Calendar Management";
      TotTime@1011 : Decimal;
      TempDay@1010 : Integer;
      TempDate@1009 : Date;
      Holiday@1008 : Boolean;
      CalendarCustomized@1014 : Boolean;
      NewDescription@1007 : Text[50];
      MiliSecPerDay@1016 : Decimal;
    BEGIN
      MiliSecPerDay := 86400000;
      if (StartingDate = 0D) or (StartingTime = 000000T) or (FinishingDate = 0D) or (FinishingTime = 000000T) then
        exit(0);

      ServHour.RESET;
      if (ContractNo <> '') and ContractCalendarExists then begin
        ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Contract);
        ServHour.SETRANGE("Service Contract No.",ContractNo)
      end else begin
        ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::" ");
        ServHour.SETRANGE("Service Contract No.",'');
      end;

      if ServHour.ISEMPTY then
        exit(
          ROUND(
            ((FinishingDate - StartingDate) * MiliSecPerDay +
             CalendarMgmt.CalcTimeDelta(FinishingTime,StartingTime)) / 3600000,0.01));

      TotTime := 0;
      TempDate := StartingDate;

      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Base Calendar Code");
      CalendarCustomized :=
        CalendarMgmt.CustomizedChangesExist(CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code");

      repeat
        TempDay := DATE2DWY(TempDate,1) - 1;
        ServHour.SETFILTER("Starting Date",'<=%1',TempDate);
        ServHour.SETRANGE(Day,TempDay);
        if ServHour.FINDLAST then begin
          if CalendarCustomized then
            Holiday :=
              CalendarMgmt.CheckCustomizedDateStatus(
                CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code",TempDate,NewDescription)
          else
            Holiday := CalendarMgmt.CheckDateStatus(ServMgtSetup."Base Calendar Code",TempDate,NewDescription);

          if not Holiday or ServHour."Valid on Holidays" then begin
            if StartingDate > FinishingDate then
              exit(0);

            if StartingDate = FinishingDate then
              TotTime := CalendarMgmt.CalcTimeDelta(FinishingTime,StartingTime)
            else
              case TempDate of
                StartingDate:
                  if ServHour."Ending Time" > StartingTime then
                    TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",StartingTime);
                FinishingDate:
                  if FinishingTime > ServHour."Starting Time" then
                    TotTime := TotTime + CalendarMgmt.CalcTimeDelta(FinishingTime,ServHour."Starting Time");
                else
                  TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time");
              end;
          end;
        end;
        TempDate := TempDate + 1;
      until TempDate > FinishingDate;

      exit(ROUND(TotTime / 3600000,0.01));
    END;

    [External]
    PROCEDURE LookupServItemNo@9(VAR ServItemLine@1005 : Record "Service Item Line");
    VAR
      ServHeader@1004 : Record "Service Header";
      ServItem@1003 : Record "Service Item";
      ServContractLine@1002 : Record "Service Contract Line";
      ServItemList@1001 : Page "Service Item List";
      ServContractLineList@1000 : Page "Serv. Item List (Contract)";
    BEGIN
      ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.");

      if ServHeader."Contract No." = '' then begin
        if ServItem.GET(ServItemLine."Service Item No.") then
          ServItemList.SETRECORD(ServItem);
        ServItem.RESET;
        ServItem.SETCURRENTKEY("Customer No.","Ship-to Code");
        ServItem.SETRANGE("Customer No.",ServHeader."Customer No.");
        ServItem.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
        ServItemList.SETTABLEVIEW(ServItem);
        ServItemList.LOOKUPMODE(true);
        if ServItemList.RUNMODAL = ACTION::LookupOK then begin
          ServItemList.GETRECORD(ServItem);
          ServItemLine.VALIDATE("Service Item No.",ServItem."No.");
        end;
      end else begin
        if ServItemLine."Service Item No." <> '' then
          if ServContractLine.GET(
               ServContractLine."Contract Type"::Contract,
               ServItemLine."Contract No.",ServItemLine."Contract Line No.")
          then
            ServContractLineList.SETRECORD(ServContractLine);
        ServContractLine.RESET;
        ServContractLine.FILTERGROUP(2);
        ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
        ServContractLine.SETRANGE("Contract No.",ServHeader."Contract No.");
        ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
        ServContractLine.SETRANGE("Customer No.",ServHeader."Customer No.");
        ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
        ServContractLine.SETFILTER("Contract Expiration Date",'>%1 | =%2',ServHeader."Order Date",0D);
        ServContractLine.FILTERGROUP(0);
        ServContractLine.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
        ServContractLineList.SETTABLEVIEW(ServContractLine);
        ServContractLineList.LOOKUPMODE(true);
        if ServContractLineList.RUNMODAL = ACTION::LookupOK then begin
          ServContractLineList.GETRECORD(ServContractLine);
          ServItemLine.VALIDATE("Service Item No.",ServContractLine."Service Item No.");
        end;
      end;
    END;

    [External]
    PROCEDURE UpdatePriority@10(VAR ServItemLine@1000 : Record "Service Item Line";Deleting@1001 : Boolean);
    VAR
      ServItemLine2@1006 : Record "Service Item Line";
      ServHeader@1007 : Record "Service Header";
      NewPriority@1002 : Integer;
    BEGIN
      if not ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.") then
        exit;

      if not Deleting then
        NewPriority := ServItemLine.Priority;

      ServItemLine2.RESET;
      ServItemLine2.SETRANGE("Document Type",ServItemLine."Document Type");
      ServItemLine2.SETRANGE("Document No.",ServItemLine."Document No.");
      ServItemLine2.SETFILTER("Line No.",'<>%1',ServItemLine."Line No.");
      if ServItemLine2.FIND('-') then
        repeat
          if ServItemLine2.Priority > NewPriority then
            NewPriority := ServItemLine2.Priority;
        until ServItemLine2.NEXT = 0;

      if ServHeader.Priority <> NewPriority then begin
        ServHeader.Priority := NewPriority;
        ServHeader.MODIFY;
      end;
    END;

    LOCAL PROCEDURE CopyComponentsFromSI@11(OldServItem@1000 : Record "Service Item";NewServItem@1001 : Record "Service Item";CopySerialNo@1002 : Boolean);
    VAR
      ServItemComponent@1003 : Record "Service Item Component";
      OldSIComponent@1006 : Record "Service Item Component";
    BEGIN
      OldSIComponent.RESET;
      OldSIComponent.SETRANGE(Active,true);
      OldSIComponent.SETRANGE("Parent Service Item No.",OldServItem."No.");
      if OldSIComponent.FIND('-') then begin
        repeat
          CLEAR(ServItemComponent);
          ServItemComponent.INIT;
          ServItemComponent := OldSIComponent;
          ServItemComponent."Parent Service Item No." := NewServItem."No.";
          if not CopySerialNo then
            ServItemComponent."Serial No." := '';
          ServItemComponent.INSERT;
        until OldSIComponent.NEXT = 0;
      end else
        ERROR(
          Text011,
          ServItemComponent.TABLECAPTION,OldServItem.FIELDCAPTION("No."),OldServItem."No.");
    END;

    LOCAL PROCEDURE CopyComponentsFromBOM@12(VAR NewServItem@1000 : Record "Service Item");
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ServComponent-Copy from BOM",NewServItem);
    END;

    [External]
    PROCEDURE InServiceContract@13(VAR ServInvLine@1000 : Record "Service Line") : Boolean;
    BEGIN
      exit(ServInvLine."Contract No." <> '');
    END;

    [External]
    PROCEDURE CheckServItemRepairStatus@59(ServHeader@1000 : Record "Service Header";VAR ServItemLine@1003 : TEMPORARY Record "Service Item Line";VAR ServLine@1002 : Record "Service Line");
    VAR
      RepairStatus@1001 : Record "Repair Status";
    BEGIN
      if ServItemLine.GET(ServHeader."Document Type",ServHeader."No.",ServLine."Service Item Line No.") then
        if ServItemLine."Repair Status Code" <> '' then begin
          RepairStatus.GET(ServItemLine."Repair Status Code");
          if not RepairStatus."Posting Allowed" then
            ERROR(
              Text012,
              ServHeader.TABLECAPTION,ServHeader."No.",ServItemLine.FIELDCAPTION("Repair Status Code"),
              ServItemLine."Repair Status Code",ServItemLine.TABLECAPTION,ServItemLine."Line No.")
        end;
    END;

    [External]
    PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNo@1002 : Code[20];ToNo@1003 : Code[20]);
    VAR
      ServCommentLine@1005 : Record "Service Comment Line";
      ServCommentLine2@1004 : Record "Service Comment Line";
    BEGIN
      ServCommentLine.RESET;
      ServCommentLine.SETRANGE("Table Name",FromDocumentType);
      ServCommentLine.SETRANGE("No.",FromNo);
      if ServCommentLine.FIND('-') then
        repeat
          ServCommentLine2 := ServCommentLine;
          ServCommentLine2."Table Name" := ToDocumentType;
          ServCommentLine2."Table Subtype" := 0;
          ServCommentLine2."No." := ToNo;
          ServCommentLine2.INSERT;
        until ServCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcContractDates@56(VAR ServHeader@1000 : Record "Service Header";VAR ServItemLine@1002 : Record "Service Item Line");
    VAR
      ServContractLine@1001 : Record "Service Contract Line";
    BEGIN
      if ServContractLine.GET(
           ServContractLine."Contract Type"::Contract,
           ServItemLine."Contract No.",
           ServItemLine."Contract Line No.")
      then begin
        ServContractLine.SuspendStatusCheck(true);
        if ServHeader."Finishing Date" <> 0D then
          ServContractLine."Last Service Date" := ServHeader."Finishing Date"
        else
          ServContractLine."Last Service Date" := ServHeader."Posting Date";
        ServContractLine."Last Planned Service Date" :=
          ServContractLine."Next Planned Service Date";
        ServContractLine.CalculateNextServiceVisit;
        ServContractLine."Last Preventive Maint. Date" := ServContractLine."Last Service Date";
      end;
      ServContractLine.MODIFY;
    END;

    [External]
    PROCEDURE CalcServItemDates@14(VAR ServHeader@1000 : Record "Service Header";ServItemNo@1002 : Code[20]);
    VAR
      ServItem@1001 : Record "Service Item";
    BEGIN
      if ServItem.GET(ServItemNo) then begin
        if ServHeader."Finishing Date" <> 0D then
          ServItem."Last Service Date" := ServHeader."Finishing Date"
        else
          ServItem."Last Service Date" := ServHeader."Posting Date";
        ServItem.MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

