OBJECT Table 1304 Sales Price and Line Disc Buff
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "Sales Type" = "Sales Type"::"All Customers" then
                 "Sales Code" := ''
               else
                 TESTFIELD("Sales Code");
               TESTFIELD(Code);

               InsertNewRecordVersion;
             END;

    OnModify=BEGIN
               DeleteOldRecordVersion;
               InsertNewRecordVersion;
             END;

    OnDelete=BEGIN
               DeleteOldRecordVersion;
             END;

    OnRename=BEGIN
               if "Sales Type" <> "Sales Type"::"All Customers" then
                 TESTFIELD("Sales Code");

               TESTFIELD(Code);

               DeleteOldRecordVersion;
               InsertNewRecordVersion;
             END;

    CaptionML=ENU=Sales Price and Line Disc Buff;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST("Item Disc. Group")) "Item Discount Group";
                                                   OnValidate=VAR
                                                                Item@1000 : Record Item;
                                                                CustPriceGr@1001 : Record "Customer Price Group";
                                                              BEGIN
                                                                "Unit of Measure Code" := '';
                                                                "Variant Code" := '';

                                                                if Type = Type::Item then
                                                                  if Item.GET(Code) then
                                                                    "Unit of Measure Code" := Item."Sales Unit of Measure";

                                                                if "Line Type" = "Line Type"::"Sales Price" then begin
                                                                  if "Sales Type" = "Sales Type"::"Customer Price/Disc. Group" then
                                                                    if CustPriceGr.GET("Sales Code") and
                                                                       (CustPriceGr."Allow Invoice Disc." = "Allow Invoice Disc.")
                                                                    then
                                                                      exit;

                                                                  UpdateValuesFromItem;
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              Item@1000 : Record Item;
                                                              ItemDiscountGroup@1001 : Record "Item Discount Group";
                                                            BEGIN
                                                              case Type of
                                                                Type::Item:
                                                                  if PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK then
                                                                    VALIDATE(Code,Item."No.");
                                                                Type::"Item Disc. Group":
                                                                  if PAGE.RUNMODAL(PAGE::"Item Disc. Groups",ItemDiscountGroup) = ACTION::LookupOK then
                                                                    VALIDATE(Code,ItemDiscountGroup.Code);
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Sales Code          ;Code20        ;TableRelation=IF ("Sales Type"=CONST("Customer Price/Disc. Group"),
                                                                     "Line Type"=CONST("Sales Line Discount")) "Customer Discount Group"
                                                                     ELSE IF ("Sales Type"=CONST("Customer Price/Disc. Group"),
                                                                              "Line Type"=CONST("Sales Price")) "Customer Price Group"
                                                                              ELSE IF ("Sales Type"=CONST(Customer)) Customer;
                                                   OnValidate=VAR
                                                                CustPriceGr@1000 : Record "Customer Price Group";
                                                                Cust@1001 : Record Customer;
                                                              BEGIN
                                                                if "Sales Code" <> '' then
                                                                  case "Sales Type" of
                                                                    "Sales Type"::"All Customers":
                                                                      ERROR(MustBeBlankErr,FIELDCAPTION("Sales Code"));
                                                                    "Sales Type"::"Customer Price/Disc. Group":
                                                                      if "Line Type" = "Line Type"::"Sales Price" then begin
                                                                        CustPriceGr.GET("Sales Code");
                                                                        "Price Includes VAT" := CustPriceGr."Price Includes VAT";
                                                                        "VAT Bus. Posting Gr. (Price)" := CustPriceGr."VAT Bus. Posting Gr. (Price)";
                                                                        "Allow Line Disc." := CustPriceGr."Allow Line Disc.";
                                                                        "Allow Invoice Disc." := CustPriceGr."Allow Invoice Disc.";
                                                                      end;
                                                                    "Sales Type"::Customer:
                                                                      begin
                                                                        Cust.GET("Sales Code");
                                                                        "Currency Code" := Cust."Currency Code";
                                                                        if "Line Type" = "Line Type"::"Sales Price" then begin
                                                                          "Price Includes VAT" := Cust."Prices Including VAT";
                                                                          "VAT Bus. Posting Gr. (Price)" := Cust."VAT Bus. Posting Group";
                                                                          "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                        end;
                                                                      end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Sales Code }
    { 3   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 4   ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                if ("Starting Date" > "Ending Date") and ("Ending Date" <> 0D) then
                                                                  ERROR(EndDateErr,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 5   ;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=2 }
    { 6   ;   ;Unit Price          ;Decimal       ;CaptionML=ENU=Unit Price;
                                                   MinValue=0;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 7   ;   ;Price Includes VAT  ;Boolean       ;CaptionML=ENU=Price Includes VAT }
    { 10  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 11  ;   ;VAT Bus. Posting Gr. (Price);Code20;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Gr. (Price) }
    { 13  ;   ;Sales Type          ;Option        ;OnValidate=BEGIN
                                                                case "Sales Type" of
                                                                  "Sales Type"::Customer:
                                                                    VALIDATE("Sales Code","Loaded Customer No.");
                                                                  "Sales Type"::"All Customers":
                                                                    VALIDATE("Sales Code",'');
                                                                  "Sales Type"::"Customer Price/Disc. Group":
                                                                    if "Loaded Customer No." = '' then
                                                                      VALIDATE("Sales Code",'')
                                                                    else begin
                                                                      if "Line Type" = "Line Type"::"Sales Price" then begin
                                                                        if "Loaded Price Group" = '' then
                                                                          ERROR(CustNotInPriceGrErr);
                                                                        VALIDATE("Sales Code","Loaded Price Group");
                                                                      end;

                                                                      if "Line Type" = "Line Type"::"Sales Line Discount" then begin
                                                                        if "Loaded Disc. Group" = '' then
                                                                          ERROR(CustNotInDiscGrErr);
                                                                        VALIDATE("Sales Code","Loaded Disc. Group");
                                                                      end;
                                                                    end;
                                                                end;

                                                                UpdateValuesFromItem;
                                                              END;

                                                   CaptionML=ENU=Sales Type;
                                                   OptionCaptionML=ENU=Customer,Customer Price/Disc. Group,All Customers,Campaign;
                                                   OptionString=Customer,"Customer Price/Disc. Group","All Customers",Campaign }
    { 14  ;   ;Minimum Quantity    ;Decimal       ;CaptionML=ENU=Minimum Quantity;
                                                   MinValue=0 }
    { 15  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Date");
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 21  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                case Type of
                                                                  Type::Item:
                                                                    VALIDATE(Code,"Loaded Item No.");
                                                                  Type::"Item Disc. Group":
                                                                    begin
                                                                      VALIDATE(Code,'');
                                                                      if "Loaded Item No." <> '' then begin
                                                                        if "Loaded Disc. Group" = '' then
                                                                          ERROR(ItemNotInDiscGrErr);

                                                                        TESTFIELD("Line Type","Line Type"::"Sales Line Discount");
                                                                        VALIDATE(Code,"Loaded Disc. Group");
                                                                      end;
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Item,Item Disc. Group;
                                                   OptionString=Item,"Item Disc. Group" }
    { 1300;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Line Type");
                                                                case "Line Type" of
                                                                  "Line Type"::"Sales Price":
                                                                    begin
                                                                      TESTFIELD(Type,Type::Item);
                                                                      "Line Discount %" := 0;
                                                                    end;
                                                                  "Line Type"::"Sales Line Discount":
                                                                    "Unit Price" := 0;
                                                                end;
                                                                VALIDATE("Sales Type","Sales Type");
                                                                VALIDATE(Type,Type);
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=" ,Sales Line Discount,Sales Price";
                                                   OptionString=" ","Sales Line Discount","Sales Price" }
    { 1301;   ;Loaded Item No.     ;Code20        ;CaptionML=ENU=Loaded Item No.;
                                                   Editable=false }
    { 1302;   ;Loaded Disc. Group  ;Code20        ;CaptionML=ENU=Loaded Disc. Group;
                                                   Editable=false }
    { 1303;   ;Loaded Customer No. ;Code20        ;CaptionML=ENU=Loaded Customer No.;
                                                   Editable=false }
    { 1304;   ;Loaded Price Group  ;Code20        ;CaptionML=ENU=Loaded Price Group;
                                                   Editable=false }
    { 5400;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5700;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Line Disc. }
  }
  KEYS
  {
    {    ;"Line Type",Type,Code,"Sales Type","Sales Code","Starting Date","Currency Code","Variant Code","Unit of Measure Code","Minimum Quantity","Loaded Item No.","Loaded Disc. Group","Loaded Customer No.","Loaded Price Group";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EndDateErr@1000 : TextConst 'ENU=%1 cannot be after %2.';
      MustBeBlankErr@1003 : TextConst 'ENU=%1 must be blank.';
      CustNotInPriceGrErr@1004 : TextConst 'ENU=This customer is not assigned to any price group, therefore a price group could not be used in context of this customer.';
      CustNotInDiscGrErr@1001 : TextConst 'ENU=This customer is not assigned to any discount group, therefore a discount group could not be used in context of this customer.';
      ItemNotInDiscGrErr@1002 : TextConst 'ENU=This item is not assigned to any discount group, therefore a discount group could not be used in context of this item.';
      IncludeVATQst@1006 : TextConst 'ENU=One or more of the sales prices do not include VAT.\Do you want to update all sales prices to include VAT?';
      ExcludeVATQst@1007 : TextConst 'ENU=One or more of the sales prices include VAT.\Do you want to update all sales prices to exclude VAT?';

    LOCAL PROCEDURE UpdateValuesFromItem@1();
    VAR
      Item@1000 : Record Item;
    BEGIN
      if "Line Type" <> "Line Type"::"Sales Price" then
        exit;

      if Item.GET(Code) then begin
        "Allow Invoice Disc." := Item."Allow Invoice Disc.";
        if "Sales Type" = "Sales Type"::"All Customers" then begin
          "Price Includes VAT" := Item."Price Includes VAT";
          "VAT Bus. Posting Gr. (Price)" := Item."VAT Bus. Posting Gr. (Price)";
        end;
      end;
    END;

    [External]
    PROCEDURE LoadDataForItem@7(Item@1000 : Record Item);
    VAR
      SalesPrice@1002 : Record "Sales Price";
      SalesLineDiscountItem@1001 : Record "Sales Line Discount";
      SalesLineDiscountItemGroup@1003 : Record "Sales Line Discount";
    BEGIN
      RESET;
      DELETEALL;

      "Loaded Item No." := Item."No.";
      "Loaded Disc. Group" := Item."Item Disc. Group";

      SetFiltersOnSalesPrice(SalesPrice);
      LoadSalesPrice(SalesPrice);

      SetFiltersOnSalesLineDiscountItem(SalesLineDiscountItem);
      LoadSalesLineDiscount(SalesLineDiscountItem);

      SetFiltersOnSalesLineDiscountItemGroup(SalesLineDiscountItemGroup);
      LoadSalesLineDiscount(SalesLineDiscountItemGroup);

      if FINDFIRST then;
    END;

    [External]
    PROCEDURE LoadDataForCustomer@2(Customer@1000 : Record Customer);
    BEGIN
      RESET;
      DELETEALL;

      "Loaded Customer No." := Customer."No.";
      "Loaded Disc. Group" := Customer."Customer Disc. Group";
      "Loaded Price Group" := Customer."Customer Price Group";

      LoadSalesPriceForCustomer;
      LoadSalesPriceForAllCustomers;
      LoadSalesPriceForCustPriceGr;

      LoadSalesLineDiscForCustomer;
      LoadSalesLineDiscForAllCustomers;
      LoadSalesLineDiscForCustDiscGr;

      GetCustomerCampaignSalesPrice;
    END;

    LOCAL PROCEDURE LoadSalesLineDiscForCustomer@20();
    VAR
      SalesLineDiscount@1000 : Record "Sales Line Discount";
    BEGIN
      SetFiltersForSalesLineDiscForCustomer(SalesLineDiscount);
      LoadSalesLineDiscount(SalesLineDiscount);
    END;

    LOCAL PROCEDURE LoadSalesLineDiscForAllCustomers@17();
    VAR
      SalesLineDiscount@1000 : Record "Sales Line Discount";
    BEGIN
      SetFiltersForSalesLineDiscForAllCustomers(SalesLineDiscount);
      LoadSalesLineDiscount(SalesLineDiscount);
    END;

    LOCAL PROCEDURE LoadSalesLineDiscForCustDiscGr@15();
    VAR
      SalesLineDiscount@1000 : Record "Sales Line Discount";
    BEGIN
      SetFiltersForSalesLineDiscForCustDiscGr(SalesLineDiscount);
      LoadSalesLineDiscount(SalesLineDiscount);
    END;

    LOCAL PROCEDURE LoadSalesPriceForCustomer@21();
    VAR
      SalesPrice@1000 : Record "Sales Price";
    BEGIN
      SetFiltersForSalesPriceForCustomer(SalesPrice);
      LoadSalesPrice(SalesPrice);
    END;

    LOCAL PROCEDURE LoadSalesPriceForAllCustomers@23();
    VAR
      SalesPrice@1000 : Record "Sales Price";
    BEGIN
      SetFiltersForSalesPriceForAllCustomers(SalesPrice);
      LoadSalesPrice(SalesPrice);
    END;

    LOCAL PROCEDURE LoadSalesPriceForCustPriceGr@24();
    VAR
      SalesPrice@1000 : Record "Sales Price";
    BEGIN
      SetFiltersForSalesPriceForCustPriceGr(SalesPrice);
      LoadSalesPrice(SalesPrice);
    END;

    LOCAL PROCEDURE SetFiltersForSalesLineDiscForCustomer@34(VAR SalesLineDiscount@1000 : Record "Sales Line Discount");
    BEGIN
      SalesLineDiscount.SETRANGE("Sales Type","Sales Type"::Customer);
      SalesLineDiscount.SETRANGE("Sales Code","Loaded Customer No.");
    END;

    LOCAL PROCEDURE SetFiltersForSalesLineDiscForAllCustomers@33(VAR SalesLineDiscount@1000 : Record "Sales Line Discount");
    BEGIN
      SalesLineDiscount.SETRANGE("Sales Type","Sales Type"::"All Customers");
    END;

    LOCAL PROCEDURE SetFiltersForSalesLineDiscForCustDiscGr@32(VAR SalesLineDiscount@1001 : Record "Sales Line Discount");
    BEGIN
      SalesLineDiscount.SETRANGE("Sales Code","Loaded Disc. Group");
      SalesLineDiscount.SETRANGE("Sales Type","Sales Type"::"Customer Price/Disc. Group");
    END;

    LOCAL PROCEDURE SetFiltersForSalesPriceForCustomer@31(VAR SalesPrice@1000 : Record "Sales Price");
    BEGIN
      SalesPrice.SETRANGE("Sales Type","Sales Type"::Customer);
      SalesPrice.SETRANGE("Sales Code","Loaded Customer No.");
    END;

    LOCAL PROCEDURE SetFiltersForSalesPriceForAllCustomers@30(VAR SalesPrice@1001 : Record "Sales Price");
    BEGIN
      SalesPrice.SETRANGE("Sales Type","Sales Type"::"All Customers");
    END;

    LOCAL PROCEDURE SetFiltersForSalesPriceForCustPriceGr@29(VAR SalesPrice@1001 : Record "Sales Price");
    BEGIN
      SalesPrice.SETRANGE("Sales Code","Loaded Price Group");
      SalesPrice.SETRANGE("Sales Type","Sales Type"::"Customer Price/Disc. Group");
    END;

    LOCAL PROCEDURE LoadSalesLineDiscount@4(VAR SalesLineDiscount@1000 : Record "Sales Line Discount");
    BEGIN
      if SalesLineDiscount.FINDSET then
        repeat
          INIT;
          "Line Type" := "Line Type"::"Sales Line Discount";

          Code := SalesLineDiscount.Code;
          Type := SalesLineDiscount.Type;
          "Sales Code" := SalesLineDiscount."Sales Code";
          "Sales Type" := SalesLineDiscount."Sales Type";

          "Starting Date" := SalesLineDiscount."Starting Date";
          "Minimum Quantity" := SalesLineDiscount."Minimum Quantity";
          "Unit of Measure Code" := SalesLineDiscount."Unit of Measure Code";

          "Line Discount %" := SalesLineDiscount."Line Discount %";
          "Currency Code" := SalesLineDiscount."Currency Code";
          "Ending Date" := SalesLineDiscount."Ending Date";
          "Variant Code" := SalesLineDiscount."Variant Code";

          INSERT;
        until SalesLineDiscount.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadSalesPrice@5(VAR SalesPrice@1000 : Record "Sales Price");
    BEGIN
      if SalesPrice.FINDSET then
        repeat
          INIT;
          "Line Type" := "Line Type"::"Sales Price";

          Code := SalesPrice."Item No.";
          Type := Type::Item;
          "Sales Code" := SalesPrice."Sales Code";
          "Sales Type" := SalesPrice."Sales Type";

          "Starting Date" := SalesPrice."Starting Date";
          "Minimum Quantity" := SalesPrice."Minimum Quantity";
          "Unit of Measure Code" := SalesPrice."Unit of Measure Code";
          "Unit Price" := SalesPrice."Unit Price";
          "Currency Code" := SalesPrice."Currency Code";
          "Ending Date" := SalesPrice."Ending Date";
          "Variant Code" := SalesPrice."Variant Code";

          "Price Includes VAT" := SalesPrice."Price Includes VAT";
          "VAT Bus. Posting Gr. (Price)" := SalesPrice."VAT Bus. Posting Gr. (Price)";

          INSERT;
        until SalesPrice.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertNewPriceLine@14();
    VAR
      SalesPrice@1001 : Record "Sales Price";
    BEGIN
      SalesPrice.INIT;

      SalesPrice."Item No." := Code;
      SalesPrice."Sales Code" := "Sales Code";
      SalesPrice."Sales Type" := "Sales Type";
      SalesPrice."Starting Date" := "Starting Date";
      SalesPrice."Minimum Quantity" := "Minimum Quantity";
      SalesPrice."Unit of Measure Code" := "Unit of Measure Code";
      SalesPrice."Unit Price" := "Unit Price";
      SalesPrice."Currency Code" := "Currency Code";
      SalesPrice."Ending Date" := "Ending Date";
      SalesPrice."Variant Code" := "Variant Code";

      SalesPrice."Allow Invoice Disc." := "Allow Invoice Disc.";
      SalesPrice."Allow Line Disc." := "Allow Line Disc.";
      SalesPrice."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
      SalesPrice."Price Includes VAT" := "Price Includes VAT";

      SalesPrice.INSERT(true);
    END;

    LOCAL PROCEDURE InsertNewDiscountLine@13();
    VAR
      SalesLineDiscount@1000 : Record "Sales Line Discount";
    BEGIN
      SalesLineDiscount.INIT;

      SalesLineDiscount.Code := Code;
      SalesLineDiscount.Type := Type;
      SalesLineDiscount."Sales Code" := "Sales Code";
      SalesLineDiscount."Sales Type" := "Sales Type";
      SalesLineDiscount."Starting Date" := "Starting Date";
      SalesLineDiscount."Minimum Quantity" := "Minimum Quantity";
      SalesLineDiscount."Unit of Measure Code" := "Unit of Measure Code";
      SalesLineDiscount."Line Discount %" := "Line Discount %";
      SalesLineDiscount."Currency Code" := "Currency Code";
      SalesLineDiscount."Ending Date" := "Ending Date";
      SalesLineDiscount."Variant Code" := "Variant Code";
      SalesLineDiscount.INSERT(true);
    END;

    LOCAL PROCEDURE SetFiltersOnSalesPrice@8(VAR SalesPrice@1000 : Record "Sales Price");
    BEGIN
      SalesPrice.SETRANGE("Item No.","Loaded Item No.");
      SalesPrice.SETFILTER("Sales Type",'<> %1',SalesPrice."Sales Type"::Campaign);
    END;

    LOCAL PROCEDURE SetFiltersOnSalesLineDiscountItem@9(VAR SalesLineDiscount@1000 : Record "Sales Line Discount");
    BEGIN
      SalesLineDiscount.SETRANGE(Type,SalesLineDiscount.Type::Item);
      SalesLineDiscount.SETRANGE(Code,"Loaded Item No.");
      SalesLineDiscount.SETFILTER("Sales Type",'<> %1',SalesLineDiscount."Sales Type"::Campaign);
    END;

    LOCAL PROCEDURE SetFiltersOnSalesLineDiscountItemGroup@11(VAR SalesLineDiscount@1000 : Record "Sales Line Discount");
    BEGIN
      SalesLineDiscount.SETRANGE(Type,SalesLineDiscount.Type::"Item Disc. Group");
      SalesLineDiscount.SETRANGE(Code,"Loaded Disc. Group");
      SalesLineDiscount.SETFILTER("Sales Type",'<> %1',SalesLineDiscount."Sales Type"::Campaign);
    END;

    [External]
    PROCEDURE FilterToActualRecords@10();
    BEGIN
      SETFILTER("Ending Date",'%1|%2..',0D,TODAY)
    END;

    LOCAL PROCEDURE DeleteOldRecordVersion@12();
    BEGIN
      TESTFIELD("Line Type");
      if xRec."Line Type" = xRec."Line Type"::"Sales Line Discount" then
        DeleteOldRecordVersionFromDiscounts
      else
        DeleteOldRecordVersionFromPrices;
    END;

    LOCAL PROCEDURE DeleteOldRecordVersionFromDiscounts@18();
    VAR
      SalesLineDiscount@1000 : Record "Sales Line Discount";
    BEGIN
      SalesLineDiscount.GET(
        xRec.Type,
        xRec.Code,
        xRec."Sales Type",
        xRec."Sales Code",
        xRec."Starting Date",
        xRec."Currency Code",
        xRec."Variant Code",
        xRec."Unit of Measure Code",
        xRec."Minimum Quantity");

      SalesLineDiscount.DELETE(true);
    END;

    LOCAL PROCEDURE DeleteOldRecordVersionFromPrices@19();
    VAR
      SalesPrice@1000 : Record "Sales Price";
    BEGIN
      SalesPrice.GET(
        xRec.Code,
        xRec."Sales Type",
        xRec."Sales Code",
        xRec."Starting Date",
        xRec."Currency Code",
        xRec."Variant Code",
        xRec."Unit of Measure Code",
        xRec."Minimum Quantity");

      SalesPrice.DELETE(true);
    END;

    LOCAL PROCEDURE InsertNewRecordVersion@16();
    BEGIN
      TESTFIELD("Line Type");
      if "Line Type" = "Line Type"::"Sales Line Discount" then
        InsertNewDiscountLine
      else
        InsertNewPriceLine
    END;

    [External]
    PROCEDURE CustHasLines@25(Cust@1000 : Record Customer) : Boolean;
    VAR
      SalesLineDiscount@1001 : Record "Sales Line Discount";
      SalesPrice@1002 : Record "Sales Price";
    BEGIN
      RESET;

      "Loaded Customer No." := Cust."No.";
      "Loaded Disc. Group" := Cust."Customer Disc. Group";
      "Loaded Price Group" := Cust."Customer Price Group";

      SetFiltersForSalesLineDiscForAllCustomers(SalesLineDiscount);
      if SalesLineDiscount.COUNT > 0 then
        exit(true);
      CLEAR(SalesLineDiscount);

      SetFiltersForSalesPriceForAllCustomers(SalesPrice);
      if SalesPrice.COUNT > 0 then
        exit(true);
      CLEAR(SalesPrice);

      SetFiltersForSalesLineDiscForCustDiscGr(SalesLineDiscount);
      if SalesLineDiscount.COUNT > 0 then
        exit(true);
      CLEAR(SalesLineDiscount);

      SetFiltersForSalesPriceForCustPriceGr(SalesPrice);
      if SalesPrice.COUNT > 0 then
        exit(true);
      CLEAR(SalesPrice);

      SetFiltersForSalesLineDiscForCustomer(SalesLineDiscount);
      if SalesLineDiscount.COUNT > 0 then
        exit(true);
      CLEAR(SalesLineDiscount);

      SetFiltersForSalesPriceForCustomer(SalesPrice);
      if SalesPrice.COUNT > 0 then
        exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE ItemHasLines@26(Item@1000 : Record Item) : Boolean;
    VAR
      SalesLineDiscount@1001 : Record "Sales Line Discount";
      SalesPrice@1002 : Record "Sales Price";
    BEGIN
      RESET;

      "Loaded Item No." := Item."No.";
      "Loaded Disc. Group" := Item."Item Disc. Group";

      SetFiltersOnSalesPrice(SalesPrice);
      if not SalesPrice.ISEMPTY then
        exit(true);

      SetFiltersOnSalesLineDiscountItem(SalesLineDiscount);
      if not SalesLineDiscount.ISEMPTY then
        exit(true);
      CLEAR(SalesLineDiscount);

      SetFiltersOnSalesLineDiscountItemGroup(SalesLineDiscount);
      if not SalesLineDiscount.ISEMPTY then
        exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE UpdatePriceIncludesVatAndPrices@6(Item@1002 : Record Item;IncludesVat@1000 : Boolean);
    VAR
      VATPostingSetup@1001 : Record "VAT Posting Setup";
      MsgQst@1003 : Text;
    BEGIN
      SETRANGE("Price Includes VAT",not IncludesVat);
      SETRANGE("Line Type","Line Type"::"Sales Price");
      SETRANGE(Type,Type::Item);
      SETFILTER("Unit Price",'>0');

      if not FINDSET then
        exit;

      if IncludesVat then
        MsgQst := IncludeVATQst
      else
        MsgQst := ExcludeVATQst;

      if not CONFIRM(MsgQst,false) then
        exit;

      repeat
        VATPostingSetup.GET("VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group");

        "Price Includes VAT" := IncludesVat;

        if IncludesVat then
          "Unit Price" := "Unit Price" * (100 + VATPostingSetup."VAT %") / 100
        else
          "Unit Price" := "Unit Price" * 100 / (100 + VATPostingSetup."VAT %");

        MODIFY(true);
      until NEXT = 0;
    END;

    LOCAL PROCEDURE GetCustomerCampaignSalesPrice@3();
    VAR
      ContactBusinessRelation@1000 : Record "Contact Business Relation";
      SalesPrice@1003 : Record "Sales Price";
      TempCampaign@1002 : TEMPORARY Record Campaign;
    BEGIN
      ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,"Loaded Customer No.");
      GetContactCampaigns(TempCampaign,ContactBusinessRelation."Contact No.");

      TempCampaign.SETAUTOCALCFIELDS(Activated);
      if TempCampaign.FINDSET then
        repeat
          if TempCampaign.Activated then begin
            SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Campaign);
            SalesPrice.SETRANGE("Sales Code",TempCampaign."No.");
            LoadSalesPrice(SalesPrice);
          end;
        until TempCampaign.NEXT = 0;
    END;

    LOCAL PROCEDURE GetContactCampaigns@27(VAR TempCampaign@1001 : TEMPORARY Record Campaign;CompanyContactNo@1000 : Code[20]);
    VAR
      Contact@1002 : Record Contact;
      SegmentLine@1003 : Record "Segment Line";
    BEGIN
      Contact.SETRANGE("Company No.",CompanyContactNo);
      if Contact.FINDSET then begin
        SegmentLine.SETFILTER("Campaign No.",'<>%1','');
        SegmentLine.SETRANGE("Campaign Target",true);
        repeat
          SegmentLine.SETRANGE("Contact No.",Contact."No.");
          InsertTempCampaignFromSegmentLines(TempCampaign,SegmentLine);
        until Contact.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertTempCampaignFromSegmentLines@48(VAR TempCampaign@1000 : TEMPORARY Record Campaign;SegmentLine@1001 : Record "Segment Line");
    BEGIN
      if SegmentLine.FINDSET then
        repeat
          TempCampaign.INIT;
          TempCampaign."No." := SegmentLine."Campaign No.";
          if TempCampaign.INSERT then;
        until SegmentLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

