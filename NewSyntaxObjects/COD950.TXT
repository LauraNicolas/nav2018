OBJECT Codeunit 950 Time Sheet Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Time Sheet Posting Entry"=ri,
                TableData "Job Planning Line"=r,
                TableData Employee=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1003 : TextConst 'ENU=Mon,Tue,Wed,Thu,Fri,Sat,Sun';
      Text002@1001 : TextConst '@@@=User1 is already defined as Resources for Resource No. LIFT with type Machine.;ENU=%1 is already defined as Time Sheet Owner User ID for Resource No. %2 with type %3.';
      Text003@1000 : TextConst '@@@=Time Sheet Header Archive 10 is not found.;ENU=Time Sheet Header %1 is not found.';
      Text004@1002 : TextConst '@@@=%1 - Quantity, %2 - Unit of measure. Example: Quantity cannot be greater than 8 HOUR.;ENU=cannot be greater than %1 %2.';
      Text005@1004 : TextConst '@@@=Time Sheet Header Archive 10 is not found.;ENU=Time Sheet Header Archive %1 is not found.';

    [External]
    PROCEDURE FilterTimeSheets@9(VAR TimeSheetHeader@1000 : Record "Time Sheet Header";FieldNo@1001 : Integer);
    VAR
      UserSetup@1002 : Record "User Setup";
    BEGIN
      if UserSetup.GET(USERID) then;
      if not UserSetup."Time Sheet Admin." then begin
        TimeSheetHeader.FILTERGROUP(2);
        case FieldNo of
          TimeSheetHeader.FIELDNO("Owner User ID"):
            TimeSheetHeader.SETRANGE("Owner User ID",USERID);
          TimeSheetHeader.FIELDNO("Approver User ID"):
            TimeSheetHeader.SETRANGE("Approver User ID",USERID);
        end;
        TimeSheetHeader.FILTERGROUP(0);
      end;
    END;

    [External]
    PROCEDURE CheckTimeSheetNo@8(VAR TimeSheetHeader@1002 : Record "Time Sheet Header";TimeSheetNo@1000 : Code[20]);
    BEGIN
      TimeSheetHeader.SETRANGE("No.",TimeSheetNo);
      if TimeSheetHeader.ISEMPTY then
        ERROR(Text003,TimeSheetNo);
    END;

    [External]
    PROCEDURE SetTimeSheetNo@3(TimeSheetNo@1000 : Code[20];VAR TimeSheetLine@1001 : Record "Time Sheet Line");
    BEGIN
      TimeSheetLine.FILTERGROUP(2);
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetNo);
      TimeSheetLine.FILTERGROUP(0);
      TimeSheetLine."Time Sheet No." := TimeSheetNo;
    END;

    [External]
    PROCEDURE LookupOwnerTimeSheet@5(VAR TimeSheetNo@1001 : Code[20];VAR TimeSheetLine@1000 : Record "Time Sheet Line";VAR TimeSheetHeader@1004 : Record "Time Sheet Header");
    VAR
      TimeSheetList@1003 : Page "Time Sheet List";
    BEGIN
      COMMIT;
      if TimeSheetNo <> '' then begin
        TimeSheetHeader.GET(TimeSheetNo);
        TimeSheetList.SETRECORD(TimeSheetHeader);
      end;

      TimeSheetList.LOOKUPMODE := true;
      if TimeSheetList.RUNMODAL = ACTION::LookupOK then begin
        TimeSheetList.GETRECORD(TimeSheetHeader);
        TimeSheetNo := TimeSheetHeader."No.";
        SetTimeSheetNo(TimeSheetNo,TimeSheetLine);
      end;
    END;

    [External]
    PROCEDURE LookupApproverTimeSheet@2(VAR TimeSheetNo@1001 : Code[20];VAR TimeSheetLine@1000 : Record "Time Sheet Line";VAR TimeSheetHeader@1004 : Record "Time Sheet Header");
    VAR
      ManagerTimeSheetList@1003 : Page "Manager Time Sheet List";
    BEGIN
      COMMIT;
      if TimeSheetNo <> '' then begin
        TimeSheetHeader.GET(TimeSheetNo);
        ManagerTimeSheetList.SETRECORD(TimeSheetHeader);
      end;

      ManagerTimeSheetList.LOOKUPMODE := true;
      if ManagerTimeSheetList.RUNMODAL = ACTION::LookupOK then begin
        ManagerTimeSheetList.GETRECORD(TimeSheetHeader);
        TimeSheetNo := TimeSheetHeader."No.";
        SetTimeSheetNo(TimeSheetNo,TimeSheetLine);
      end;
    END;

    [External]
    PROCEDURE FormatDate@10(Date@1000 : Date;DOWFormatType@1001 : 'Full,Short') : Text[30];
    BEGIN
      case DOWFormatType of
        DOWFormatType::Full:
          exit(STRSUBSTNO('%1 %2',DATE2DMY(Date,1),FORMAT(Date,0,'<Weekday Text>')));
        DOWFormatType::Short:
          exit(STRSUBSTNO('%1 %2',DATE2DMY(Date,1),SELECTSTR(DATE2DWY(Date,1),Text001)));
      end;
    END;

    [External]
    PROCEDURE CheckAccPeriod@1(Date@1000 : Date);
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'..%1',Date);
      AccountingPeriod.FINDLAST;
      AccountingPeriod.TESTFIELD(Closed,false);
    END;

    [External]
    PROCEDURE CheckResourceTimeSheetOwner@13(TimeSheetOwnerUserID@1000 : Code[50];CurrResourceNo@1002 : Code[20]);
    VAR
      Resource@1001 : Record Resource;
    BEGIN
      Resource.RESET;
      Resource.SETFILTER("No.",'<>%1',CurrResourceNo);
      Resource.SETRANGE(Type,Resource.Type::Person);
      Resource.SETRANGE("Time Sheet Owner User ID",TimeSheetOwnerUserID);
      if Resource.FINDFIRST then
        ERROR(
          Text002,
          TimeSheetOwnerUserID,
          Resource."No.",
          Resource.Type);
    END;

    [External]
    PROCEDURE CalcStatusFactBoxData@12(VAR TimeSheetHeader@1000 : Record "Time Sheet Header";VAR OpenQty@1008 : Decimal;VAR SubmittedQty@1007 : Decimal;VAR RejectedQty@1006 : Decimal;VAR ApprovedQty@1003 : Decimal;VAR PostedQty@1002 : Decimal;VAR TotalQuantity@1001 : Decimal);
    VAR
      Status@1004 : 'Open,Submitted,Rejected,Approved,Posted';
    BEGIN
      TotalQuantity := 0;
      TimeSheetHeader.SETRANGE("Date Filter",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
      OpenQty := TimeSheetHeader.CalcQtyWithStatus(Status::Open);

      SubmittedQty := TimeSheetHeader.CalcQtyWithStatus(Status::Submitted);

      RejectedQty := TimeSheetHeader.CalcQtyWithStatus(Status::Rejected);

      ApprovedQty := TimeSheetHeader.CalcQtyWithStatus(Status::Approved);

      TimeSheetHeader.SETRANGE("Status Filter");
      TimeSheetHeader.CALCFIELDS(Quantity);
      TimeSheetHeader.CALCFIELDS("Posted Quantity");
      TotalQuantity := TimeSheetHeader.Quantity;
      PostedQty := TimeSheetHeader."Posted Quantity";
    END;

    [External]
    PROCEDURE CalcActSchedFactBoxData@33(TimeSheetHeader@1000 : Record "Time Sheet Header";VAR DateDescription@1003 : ARRAY [7] OF Text[30];VAR DateQuantity@1002 : ARRAY [7] OF Text[30];VAR TotalQtyText@1007 : Text[30];VAR TotalPresenceQty@1001 : Decimal;VAR AbsenceQty@1006 : Decimal);
    VAR
      Resource@1008 : Record Resource;
      Calendar@1005 : Record Date;
      TotalSchedQty@1009 : Decimal;
      i@1004 : Integer;
    BEGIN
      TotalPresenceQty := 0;
      if Resource.GET(TimeSheetHeader."Resource No.") then begin
        Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
        Calendar.SETRANGE("Period Start",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
        if Calendar.FINDSET then
          repeat
            i += 1;
            DateDescription[i] := FormatDate(Calendar."Period Start",0);
            TimeSheetHeader.SETRANGE("Date Filter",Calendar."Period Start");
            TimeSheetHeader.CALCFIELDS(Quantity);
            Resource.SETRANGE("Date Filter",Calendar."Period Start");
            Resource.CALCFIELDS(Capacity);
            DateQuantity[i] := FormatActualSched(TimeSheetHeader.Quantity,Resource.Capacity);
            TotalPresenceQty += TimeSheetHeader.Quantity;
            TotalSchedQty += Resource.Capacity;
          until Calendar.NEXT = 0;
        TotalQtyText := FormatActualSched(TotalPresenceQty,TotalSchedQty);
        TimeSheetHeader.SETRANGE("Type Filter",TimeSheetHeader."Type Filter"::Absence);
        TimeSheetHeader.SETRANGE("Date Filter",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
        TimeSheetHeader.CALCFIELDS(Quantity);
        AbsenceQty := TimeSheetHeader.Quantity;
      end;
    END;

    [External]
    PROCEDURE FormatActualSched@34(ActualQty@1001 : Decimal;ScheduledQty@1000 : Decimal) : Text[30];
    BEGIN
      exit(
        FORMAT(ActualQty,0,'<Precision,2:2><Standard Format,0>') + '/' + FORMAT(ScheduledQty,0,'<Precision,2:2><Standard Format,0>'));
    END;

    [External]
    PROCEDURE FilterTimeSheetsArchive@4(VAR TimeSheetHeaderArchive@1000 : Record "Time Sheet Header Archive";FieldNo@1001 : Integer);
    VAR
      UserSetup@1002 : Record "User Setup";
    BEGIN
      if UserSetup.GET(USERID) then;
      if not UserSetup."Time Sheet Admin." then begin
        TimeSheetHeaderArchive.FILTERGROUP(2);
        case FieldNo of
          TimeSheetHeaderArchive.FIELDNO("Owner User ID"):
            TimeSheetHeaderArchive.SETRANGE("Owner User ID",USERID);
          TimeSheetHeaderArchive.FIELDNO("Approver User ID"):
            TimeSheetHeaderArchive.SETRANGE("Approver User ID",USERID);
        end;
        TimeSheetHeaderArchive.FILTERGROUP(0);
      end;
    END;

    [External]
    PROCEDURE CheckTimeSheetArchiveNo@14(VAR TimeSheetHeaderArchive@1002 : Record "Time Sheet Header Archive";TimeSheetNo@1000 : Code[20]);
    BEGIN
      TimeSheetHeaderArchive.SETRANGE("No.",TimeSheetNo);
      if TimeSheetHeaderArchive.ISEMPTY then
        ERROR(Text005,TimeSheetNo);
    END;

    [External]
    PROCEDURE SetTimeSheetArchiveNo@15(TimeSheetNo@1000 : Code[20];VAR TimeSheetLineArchive@1001 : Record "Time Sheet Line Archive");
    BEGIN
      TimeSheetLineArchive.FILTERGROUP(2);
      TimeSheetLineArchive.SETRANGE("Time Sheet No.",TimeSheetNo);
      TimeSheetLineArchive.FILTERGROUP(0);
      TimeSheetLineArchive."Time Sheet No." := TimeSheetNo;
    END;

    [External]
    PROCEDURE LookupOwnerTimeSheetArchive@18(VAR TimeSheetNo@1001 : Code[20];VAR TimeSheetLineArchive@1000 : Record "Time Sheet Line Archive";VAR TimeSheetHeaderArchive@1004 : Record "Time Sheet Header Archive");
    VAR
      TimeSheetArchiveList@1002 : Page "Time Sheet Archive List";
    BEGIN
      COMMIT;
      if TimeSheetNo <> '' then begin
        TimeSheetHeaderArchive.GET(TimeSheetNo);
        TimeSheetArchiveList.SETRECORD(TimeSheetHeaderArchive);
      end;

      TimeSheetArchiveList.LOOKUPMODE := true;
      if TimeSheetArchiveList.RUNMODAL = ACTION::LookupOK then begin
        TimeSheetArchiveList.GETRECORD(TimeSheetHeaderArchive);
        TimeSheetNo := TimeSheetHeaderArchive."No.";
        SetTimeSheetArchiveNo(TimeSheetNo,TimeSheetLineArchive);
      end;
    END;

    [External]
    PROCEDURE LookupApproverTimeSheetArchive@16(VAR TimeSheetNo@1001 : Code[20];VAR TimeSheetLineArchive@1000 : Record "Time Sheet Line Archive";VAR TimeSheetHeaderArchive@1004 : Record "Time Sheet Header Archive");
    VAR
      ManagerTimeSheetArcList@1003 : Page "Manager Time Sheet Arc. List";
    BEGIN
      COMMIT;
      if TimeSheetNo <> '' then begin
        TimeSheetHeaderArchive.GET(TimeSheetNo);
        ManagerTimeSheetArcList.SETRECORD(TimeSheetHeaderArchive);
      end;

      ManagerTimeSheetArcList.LOOKUPMODE := true;
      if ManagerTimeSheetArcList.RUNMODAL = ACTION::LookupOK then begin
        ManagerTimeSheetArcList.GETRECORD(TimeSheetHeaderArchive);
        TimeSheetNo := TimeSheetHeaderArchive."No.";
        SetTimeSheetArchiveNo(TimeSheetNo,TimeSheetLineArchive);
      end;
    END;

    [External]
    PROCEDURE CalcSummaryArcFactBoxData@11(TimeSheetHeaderArchive@1000 : Record "Time Sheet Header Archive";VAR DateDescription@1003 : ARRAY [7] OF Text[30];VAR DateQuantity@1002 : ARRAY [7] OF Decimal;VAR TotalQuantity@1001 : Decimal;VAR AbsenceQuantity@1006 : Decimal);
    VAR
      Calendar@1005 : Record Date;
      i@1004 : Integer;
    BEGIN
      TotalQuantity := 0;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
      Calendar.SETRANGE("Period Start",TimeSheetHeaderArchive."Starting Date",TimeSheetHeaderArchive."Ending Date");
      if Calendar.FINDSET then
        repeat
          i += 1;
          DateDescription[i] := FormatDate(Calendar."Period Start",0);
          TimeSheetHeaderArchive.SETRANGE("Date Filter",Calendar."Period Start");
          TimeSheetHeaderArchive.CALCFIELDS(Quantity);
          DateQuantity[i] := TimeSheetHeaderArchive.Quantity;
          TotalQuantity += TimeSheetHeaderArchive.Quantity;
        until Calendar.NEXT = 0;

      TimeSheetHeaderArchive.SETRANGE("Type Filter",TimeSheetHeaderArchive."Type Filter"::Absence);
      TimeSheetHeaderArchive.SETRANGE("Date Filter",TimeSheetHeaderArchive."Starting Date",TimeSheetHeaderArchive."Ending Date");
      TimeSheetHeaderArchive.CALCFIELDS(Quantity);
      AbsenceQuantity := TimeSheetHeaderArchive.Quantity;
    END;

    [External]
    PROCEDURE MoveTimeSheetToArchive@17(TimeSheetHeader@1000 : Record "Time Sheet Header");
    VAR
      TimeSheetLine@1007 : Record "Time Sheet Line";
      TimeSheetDetail@1006 : Record "Time Sheet Detail";
      TimeSheetCommentLine@1005 : Record "Time Sheet Comment Line";
      TimeSheetHeaderArchive@1004 : Record "Time Sheet Header Archive";
      TimeSheetLineArchive@1003 : Record "Time Sheet Line Archive";
      TimeSheetDetailArchive@1002 : Record "Time Sheet Detail Archive";
      TimeSheetCmtLineArchive@1001 : Record "Time Sheet Cmt. Line Archive";
    BEGIN
      with TimeSheetHeader do begin
        Check;

        TimeSheetHeaderArchive.TRANSFERFIELDS(TimeSheetHeader);
        TimeSheetHeaderArchive.INSERT;

        TimeSheetLine.SETRANGE("Time Sheet No.","No.");
        if TimeSheetLine.FINDSET then begin
          repeat
            TimeSheetLineArchive.TRANSFERFIELDS(TimeSheetLine);
            TimeSheetLineArchive.INSERT;
          until TimeSheetLine.NEXT = 0;
          TimeSheetLine.DELETEALL;
        end;

        TimeSheetDetail.SETRANGE("Time Sheet No.","No.");
        if TimeSheetDetail.FINDSET then begin
          repeat
            TimeSheetDetailArchive.TRANSFERFIELDS(TimeSheetDetail);
            TimeSheetDetailArchive.INSERT
          until TimeSheetDetail.NEXT = 0;
          TimeSheetDetail.DELETEALL;
        end;

        TimeSheetCommentLine.SETRANGE("No.","No.");
        if TimeSheetCommentLine.FINDSET then begin
          repeat
            TimeSheetCmtLineArchive.TRANSFERFIELDS(TimeSheetCommentLine);
            TimeSheetCmtLineArchive.INSERT;
          until TimeSheetCommentLine.NEXT = 0;
          TimeSheetCommentLine.DELETEALL;
        end;

        DELETE;
      end;
    END;

    [External]
    PROCEDURE CopyPrevTimeSheetLines@19(ToTimeSheetHeader@1000 : Record "Time Sheet Header");
    VAR
      FromTimeSheetHeader@1002 : Record "Time Sheet Header";
      FromTimeSheetLine@1003 : Record "Time Sheet Line";
      ToTimeSheetLine@1001 : Record "Time Sheet Line";
      LineNo@1004 : Integer;
    BEGIN
      LineNo := ToTimeSheetHeader.GetLastLineNo;

      FromTimeSheetHeader.GET(ToTimeSheetHeader."No.");
      FromTimeSheetHeader.SETCURRENTKEY("Resource No.","Starting Date");
      FromTimeSheetHeader.SETRANGE("Resource No.",ToTimeSheetHeader."Resource No.");
      if FromTimeSheetHeader.NEXT(-1) <> 0 then begin
        FromTimeSheetLine.SETRANGE("Time Sheet No.",FromTimeSheetHeader."No.");
        FromTimeSheetLine.SETFILTER(Type,'<>%1&<>%2',FromTimeSheetLine.Type::Service,FromTimeSheetLine.Type::"Assembly Order");
        if FromTimeSheetLine.FINDSET then
          repeat
            LineNo := LineNo + 10000;
            ToTimeSheetLine.INIT;
            ToTimeSheetLine."Time Sheet No." := ToTimeSheetHeader."No.";
            ToTimeSheetLine."Line No." := LineNo;
            ToTimeSheetLine."Time Sheet Starting Date" := ToTimeSheetHeader."Starting Date";
            ToTimeSheetLine.Type := FromTimeSheetLine.Type;
            case ToTimeSheetLine.Type of
              ToTimeSheetLine.Type::Job:
                begin
                  ToTimeSheetLine.VALIDATE("Job No.",FromTimeSheetLine."Job No.");
                  ToTimeSheetLine.VALIDATE("Job Task No.",FromTimeSheetLine."Job Task No.");
                end;
              ToTimeSheetLine.Type::Absence:
                ToTimeSheetLine.VALIDATE("Cause of Absence Code",FromTimeSheetLine."Cause of Absence Code");
            end;
            ToTimeSheetLine.Description := FromTimeSheetLine.Description;
            ToTimeSheetLine.Chargeable := FromTimeSheetLine.Chargeable;
            ToTimeSheetLine."Work Type Code" := FromTimeSheetLine."Work Type Code";
            ToTimeSheetLine.INSERT;
          until FromTimeSheetLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CalcPrevTimeSheetLines@39(ToTimeSheetHeader@1000 : Record "Time Sheet Header") LinesQty : Integer;
    VAR
      TimeSheetHeader@1002 : Record "Time Sheet Header";
      TimeSheetLine@1003 : Record "Time Sheet Line";
    BEGIN
      TimeSheetHeader.GET(ToTimeSheetHeader."No.");
      TimeSheetHeader.SETCURRENTKEY("Resource No.","Starting Date");
      TimeSheetHeader.SETRANGE("Resource No.",ToTimeSheetHeader."Resource No.");
      if TimeSheetHeader.NEXT(-1) <> 0 then begin
        TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
        TimeSheetLine.SETFILTER(Type,'<>%1&<>%2',TimeSheetLine.Type::Service,TimeSheetLine.Type::"Assembly Order");
        LinesQty := TimeSheetLine.COUNT;
      end;
    END;

    [External]
    PROCEDURE CreateLinesFromJobPlanning@20(TimeSheetHeader@1000 : Record "Time Sheet Header") CreatedLinesQty : Integer;
    VAR
      TimeSheetLine@1001 : Record "Time Sheet Line";
      TempJobPlanningLine@1004 : TEMPORARY Record "Job Planning Line";
      LineNo@1002 : Integer;
    BEGIN
      LineNo := TimeSheetHeader.GetLastLineNo;

      FillJobPlanningBuffer(TimeSheetHeader,TempJobPlanningLine);

      TempJobPlanningLine.RESET;
      if TempJobPlanningLine.FINDSET then
        repeat
          LineNo := LineNo + 10000;
          CreatedLinesQty := CreatedLinesQty + 1;
          TimeSheetLine.INIT;
          TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
          TimeSheetLine."Line No." := LineNo;
          TimeSheetLine."Time Sheet Starting Date" := TimeSheetHeader."Starting Date";
          TimeSheetLine.VALIDATE(Type,TimeSheetLine.Type::Job);
          TimeSheetLine.VALIDATE("Job No.",TempJobPlanningLine."Job No.");
          TimeSheetLine.VALIDATE("Job Task No.",TempJobPlanningLine."Job Task No.");
          TimeSheetLine.INSERT;
        until TempJobPlanningLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcLinesFromJobPlanning@41(TimeSheetHeader@1000 : Record "Time Sheet Header") : Integer;
    VAR
      TempJobPlanningLine@1004 : TEMPORARY Record "Job Planning Line";
    BEGIN
      FillJobPlanningBuffer(TimeSheetHeader,TempJobPlanningLine);
      exit(TempJobPlanningLine.COUNT);
    END;

    LOCAL PROCEDURE FillJobPlanningBuffer@40(TimeSheetHeader@1000 : Record "Time Sheet Header";VAR JobPlanningLineBuffer@1004 : Record "Job Planning Line");
    VAR
      JobPlanningLine@1003 : Record "Job Planning Line";
    BEGIN
      JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Resource);
      JobPlanningLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      JobPlanningLine.SETRANGE("Planning Date",TimeSheetHeader."Starting Date",TimeSheetHeader."Ending Date");
      if JobPlanningLine.FINDSET then
        repeat
          JobPlanningLineBuffer.SETRANGE("Job No.",JobPlanningLine."Job No.");
          JobPlanningLineBuffer.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
          if JobPlanningLineBuffer.ISEMPTY then begin
            JobPlanningLineBuffer."Job No." := JobPlanningLine."Job No.";
            JobPlanningLineBuffer."Job Task No." := JobPlanningLine."Job Task No.";
            JobPlanningLineBuffer.INSERT;
          end;
        until JobPlanningLine.NEXT = 0;
      JobPlanningLineBuffer.RESET;
    END;

    [External]
    PROCEDURE FindTimeSheet@23(VAR TimeSheetHeader@1000 : Record "Time Sheet Header";Which@1001 : 'Prev,Next') : Code[20];
    BEGIN
      TimeSheetHeader.RESET;
      TimeSheetHeader.SETCURRENTKEY("Resource No.","Starting Date");
      TimeSheetHeader.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      case Which of
        Which::Prev:
          TimeSheetHeader.NEXT(-1);
        Which::Next:
          TimeSheetHeader.NEXT(1);
      end;
      exit(TimeSheetHeader."No.");
    END;

    [External]
    PROCEDURE FindTimeSheetArchive@26(VAR TimeSheetHeaderArchive@1000 : Record "Time Sheet Header Archive";Which@1001 : 'Prev,Next') : Code[20];
    BEGIN
      TimeSheetHeaderArchive.RESET;
      TimeSheetHeaderArchive.SETCURRENTKEY("Resource No.","Starting Date");
      TimeSheetHeaderArchive.SETRANGE("Resource No.",TimeSheetHeaderArchive."Resource No.");
      case Which of
        Which::Prev:
          TimeSheetHeaderArchive.NEXT(-1);
        Which::Next:
          TimeSheetHeaderArchive.NEXT(1);
      end;
      exit(TimeSheetHeaderArchive."No.");
    END;

    [External]
    PROCEDURE GetDateFilter@24(StartingDate@1001 : Date;EndingDate@1002 : Date) DateFilter : Text[30];
    BEGIN
      case true of
        (StartingDate <> 0D) and (EndingDate <> 0D):
          DateFilter := STRSUBSTNO('%1..%2',StartingDate,EndingDate);
        (StartingDate = 0D) and (EndingDate <> 0D):
          DateFilter := STRSUBSTNO('..%1',EndingDate);
        (StartingDate <> 0D) and (EndingDate = 0D):
          DateFilter := STRSUBSTNO('%1..',StartingDate);
      end;
    END;

    [External]
    PROCEDURE CreateServDocLinesFromTS@27(ServiceHeader@1000 : Record "Service Header");
    VAR
      TimeSheetLine@1001 : Record "Time Sheet Line";
    BEGIN
      CreateServLinesFromTS(ServiceHeader,TimeSheetLine,false);
    END;

    [External]
    PROCEDURE CreateServDocLinesFromTSLine@54(ServiceHeader@1000 : Record "Service Header";VAR TimeSheetLine@1001 : Record "Time Sheet Line");
    BEGIN
      CreateServLinesFromTS(ServiceHeader,TimeSheetLine,true);
    END;

    LOCAL PROCEDURE GetFirstServiceItemNo@28(ServiceHeader@1000 : Record "Service Header") : Code[20];
    VAR
      ServiceItemLine@1001 : Record "Service Item Line";
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;
      exit(ServiceItemLine."Service Item No.");
    END;

    [External]
    PROCEDURE CreateTSLineFromServiceLine@29(ServiceLine@1000 : Record "Service Line";DocumentNo@1001 : Code[20];Chargeable@1002 : Boolean);
    BEGIN
      with ServiceLine do
        if "Time Sheet No." = '' then
          CreateTSLineFromDocLine(
            DATABASE::"Service Line",
            "No.",
            "Posting Date",
            DocumentNo,
            "Document No.",
            "Line No.",
            "Work Type Code",
            Chargeable,
            Description,
            -"Qty. to Ship");
    END;

    [External]
    PROCEDURE CreateTSLineFromServiceShptLine@30(ServiceShipmentLine@1000 : Record "Service Shipment Line");
    BEGIN
      with ServiceShipmentLine do
        if "Time Sheet No." = '' then
          CreateTSLineFromDocLine(
            DATABASE::"Service Shipment Line",
            "No.",
            "Posting Date",
            "Document No.",
            "Order No.",
            "Order Line No.",
            "Work Type Code",
            true,
            Description,
            -"Qty. Shipped Not Invoiced");
    END;

    LOCAL PROCEDURE CreateTSLineFromDocLine@25(TableID@1016 : Integer;ResourceNo@1000 : Code[20];PostingDate@1001 : Date;DocumentNo@1002 : Code[20];OrderNo@1008 : Code[20];OrderLineNo@1003 : Integer;WorkTypeCode@1004 : Code[10];Chargbl@1013 : Boolean;Desc@1005 : Text[50];Quantity@1006 : Decimal);
    VAR
      Resource@1012 : Record Resource;
      TimeSheetHeader@1011 : Record "Time Sheet Header";
      TimeSheetLine@1010 : Record "Time Sheet Line";
      TimeSheetDetail@1009 : Record "Time Sheet Detail";
      LineNo@1007 : Integer;
    BEGIN
      Resource.GET(ResourceNo);
      if not Resource."Use Time Sheet" then
        exit;

      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      TimeSheetHeader.SETFILTER("Starting Date",'..%1',PostingDate);
      TimeSheetHeader.SETFILTER("Ending Date",'%1..',PostingDate);
      TimeSheetHeader.FINDFIRST;

      with TimeSheetLine do begin
        SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
        if FINDLAST then;
        LineNo := "Line No." + 10000;

        INIT;
        "Time Sheet No." := TimeSheetHeader."No.";
        "Line No." := LineNo;
        "Time Sheet Starting Date" := TimeSheetHeader."Starting Date";
        case TableID of
          DATABASE::"Service Line",
          DATABASE::"Service Shipment Line":
            begin
              Type := Type::Service;
              "Service Order No." := OrderNo;
              "Service Order Line No." := OrderLineNo;
            end;
          DATABASE::"Assembly Line":
            begin
              Type := Type::"Assembly Order";
              "Assembly Order No." := OrderNo;
              "Assembly Order Line No." := OrderLineNo;
            end;
        end;
        Description := Desc;
        "Work Type Code" := WorkTypeCode;
        Chargeable := Chargbl;
        "Approver ID" := TimeSheetHeader."Approver User ID";
        "Approved By" := USERID;
        "Approval Date" := TODAY;
        Status := Status::Approved;
        Posted := true;
        INSERT;

        TimeSheetDetail.INIT;
        TimeSheetDetail.CopyFromTimeSheetLine(TimeSheetLine);
        TimeSheetDetail.Date := PostingDate;
        TimeSheetDetail.Quantity := Quantity;
        TimeSheetDetail."Posted Quantity" := Quantity;
        TimeSheetDetail.Posted := true;
        TimeSheetDetail.INSERT;

        CreateTSPostingEntry(TimeSheetDetail,Quantity,PostingDate,DocumentNo,Description);
      end;
    END;

    [External]
    PROCEDURE CreateTSLineFromAssemblyLine@32(AssemblyHeader@1000 : Record "Assembly Header";AssemblyLine@1004 : Record "Assembly Line";Qty@1001 : Decimal);
    BEGIN
      AssemblyLine.TESTFIELD(Type,AssemblyLine.Type::Resource);

      with AssemblyLine do
        CreateTSLineFromDocLine(
          DATABASE::"Assembly Line",
          "No.",
          AssemblyHeader."Posting Date",
          AssemblyHeader."Posting No.",
          "Document No.",
          "Line No.",
          '',
          true,
          Description,
          Qty);
    END;

    [External]
    PROCEDURE CreateTSPostingEntry@7(TimeSheetDetail@1000 : Record "Time Sheet Detail";Qty@1001 : Decimal;PostingDate@1002 : Date;DocumentNo@1003 : Code[20];Desc@1005 : Text[50]);
    VAR
      TimeSheetPostingEntry@1004 : Record "Time Sheet Posting Entry";
    BEGIN
      with TimeSheetPostingEntry do begin
        INIT;
        "Time Sheet No." := TimeSheetDetail."Time Sheet No.";
        "Time Sheet Line No." := TimeSheetDetail."Time Sheet Line No.";
        "Time Sheet Date" := TimeSheetDetail.Date;
        Quantity := Qty;
        "Document No." := DocumentNo;
        "Posting Date" := PostingDate;
        Description := Desc;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CheckTSLineDetailPosting@38(TimeSheetNo@1000 : Code[20];TimeSheetLineNo@1001 : Integer;TimeSheetDate@1002 : Date;QtyToPost@1005 : Decimal;QtyPerUnitOfMeasure@1006 : Decimal;VAR MaxAvailableQty@1003 : Decimal) : Boolean;
    VAR
      TimeSheetDetail@1004 : Record "Time Sheet Detail";
      MaxAvailableQtyBase@1007 : Decimal;
    BEGIN
      TimeSheetDetail.GET(TimeSheetNo,TimeSheetLineNo,TimeSheetDate);
      TimeSheetDetail.TESTFIELD(Status,TimeSheetDetail.Status::Approved);
      TimeSheetDetail.TESTFIELD(Posted,false);

      MaxAvailableQtyBase := TimeSheetDetail.GetMaxQtyToPost;
      MaxAvailableQty := MaxAvailableQtyBase * QtyPerUnitOfMeasure;
      exit(QtyToPost <= MaxAvailableQty);
    END;

    [External]
    PROCEDURE CheckResJnlLine@31(ResJnlLine@1000 : Record "Res. Journal Line");
    VAR
      MaxAvailableQty@1001 : Decimal;
    BEGIN
      with ResJnlLine do begin
        TESTFIELD("Qty. per Unit of Measure");
        if not CheckTSLineDetailPosting(
             "Time Sheet No.",
             "Time Sheet Line No.",
             "Time Sheet Date",
             Quantity,
             "Qty. per Unit of Measure",
             MaxAvailableQty)
        then
          FIELDERROR(Quantity,STRSUBSTNO(Text004,MaxAvailableQty,"Unit of Measure Code"));
      end;
    END;

    [External]
    PROCEDURE CheckJobJnlLine@35(JobJnlLine@1000 : Record "Job Journal Line");
    VAR
      MaxAvailableQty@1001 : Decimal;
    BEGIN
      with JobJnlLine do begin
        TESTFIELD("Qty. per Unit of Measure");
        if not CheckTSLineDetailPosting(
             "Time Sheet No.",
             "Time Sheet Line No.",
             "Time Sheet Date",
             Quantity,
             "Qty. per Unit of Measure",
             MaxAvailableQty)
        then
          FIELDERROR(Quantity,STRSUBSTNO(Text004,MaxAvailableQty,"Unit of Measure Code"));
      end;
    END;

    [External]
    PROCEDURE CheckServiceLine@37(ServiceLine@1000 : Record "Service Line");
    VAR
      MaxAvailableQty@1001 : Decimal;
    BEGIN
      with ServiceLine do begin
        TESTFIELD("Qty. per Unit of Measure");
        if not CheckTSLineDetailPosting(
             "Time Sheet No.",
             "Time Sheet Line No.",
             "Time Sheet Date",
             "Qty. to Ship",
             "Qty. per Unit of Measure",
             MaxAvailableQty)
        then
          FIELDERROR(Quantity,STRSUBSTNO(Text004,MaxAvailableQty,"Unit of Measure Code"));
      end;
    END;

    [External]
    PROCEDURE UpdateTimeAllocation@36(TimeSheetLine@1001 : Record "Time Sheet Line";AllocatedQty@1000 : ARRAY [7] OF Decimal);
    VAR
      TimeSheetHeader@1005 : Record "Time Sheet Header";
      TimeSheetDetail@1002 : Record "Time Sheet Detail";
      TimeSheetDate@1004 : Date;
      i@1003 : Integer;
    BEGIN
      with TimeSheetLine do begin
        TimeSheetHeader.GET("Time Sheet No.");
        for i := 1 to 7 do begin
          TimeSheetDate := TimeSheetHeader."Starting Date" + i - 1;
          if AllocatedQty[i] <> 0 then begin
            if TimeSheetDetail.GET("Time Sheet No.","Line No.",TimeSheetDate) then begin
              TimeSheetDetail.Quantity := AllocatedQty[i];
              TimeSheetDetail."Posted Quantity" := TimeSheetDetail.Quantity;
              TimeSheetDetail.MODIFY;
            end else begin
              TimeSheetDetail.INIT;
              TimeSheetDetail.CopyFromTimeSheetLine(TimeSheetLine);
              TimeSheetDetail.Posted := true;
              TimeSheetDetail.Date := TimeSheetDate;
              TimeSheetDetail.Quantity := AllocatedQty[i];
              TimeSheetDetail."Posted Quantity" := TimeSheetDetail.Quantity;
              TimeSheetDetail.INSERT;
            end;
          end else begin
            if TimeSheetDetail.GET("Time Sheet No.","Line No.",TimeSheetDate) then
              TimeSheetDetail.DELETE;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE GetActivityInfo@42(TimeSheetLine@1000 : Record "Time Sheet Line";VAR ActivityCaption@1001 : Text[30];VAR ActivityID@1002 : Code[20];VAR ActivitySubCaption@1004 : Text[30];VAR ActivitySubID@1003 : Code[20]);
    BEGIN
      ActivitySubCaption := '';
      ActivitySubID := '';
      ActivityCaption := '';
      ActivityID := '';
      with TimeSheetLine do
        case Type of
          Type::Job:
            begin
              ActivityCaption := FIELDCAPTION("Job No.");
              ActivityID := "Job No.";
              ActivitySubCaption := FIELDCAPTION("Job Task No.");
              ActivitySubID := "Job Task No.";
            end;
          Type::Absence:
            begin
              ActivityCaption := FIELDCAPTION("Cause of Absence Code");
              ActivityID := "Cause of Absence Code";
            end;
          Type::"Assembly Order":
            begin
              ActivityCaption := FIELDCAPTION("Assembly Order No.");
              ActivityID := "Assembly Order No.";
            end;
          Type::Service:
            begin
              ActivityCaption := FIELDCAPTION("Service Order No.");
              ActivityID := "Service Order No.";
            end;
        end;
    END;

    [External]
    PROCEDURE ShowPostingEntries@43(TimeSheetNo@1002 : Code[20];TimeSheetLineNo@1003 : Integer);
    VAR
      TimeSheetPostingEntry@1000 : Record "Time Sheet Posting Entry";
      TimeSheetPostingEntries@1001 : Page "Time Sheet Posting Entries";
    BEGIN
      TimeSheetPostingEntry.FILTERGROUP(2);
      TimeSheetPostingEntry.SETRANGE("Time Sheet No.",TimeSheetNo);
      TimeSheetPostingEntry.SETRANGE("Time Sheet Line No.",TimeSheetLineNo);
      TimeSheetPostingEntry.FILTERGROUP(0);
      CLEAR(TimeSheetPostingEntries);
      TimeSheetPostingEntries.SETTABLEVIEW(TimeSheetPostingEntry);
      TimeSheetPostingEntries.RUNMODAL;
    END;

    [External]
    PROCEDURE FindNearestTimeSheetStartDate@44(Date@1000 : Date) : Date;
    VAR
      ResourcesSetup@1001 : Record "Resources Setup";
    BEGIN
      ResourcesSetup.GET;
      if DATE2DWY(Date,1) = ResourcesSetup."Time Sheet First Weekday" + 1 then
        exit(Date);

      exit(CALCDATE(STRSUBSTNO('<WD%1>',ResourcesSetup."Time Sheet First Weekday" + 1),Date));
    END;

    LOCAL PROCEDURE CreateServLinesFromTS@6(ServiceHeader@1000 : Record "Service Header";VAR TimeSheetLine@1001 : Record "Time Sheet Line";AddBySelectedTimesheetLine@1006 : Boolean);
    VAR
      TimeSheetDetail@1007 : Record "Time Sheet Detail";
      TempTimeSheetDetail@1009 : TEMPORARY Record "Time Sheet Detail";
      ServiceLine@1003 : Record "Service Line";
      LineNo@1004 : Integer;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      if ServiceLine.FINDLAST then;
      LineNo := ServiceLine."Line No." + 10000;

      ServiceLine.SETFILTER("Time Sheet No.",'<>%1','');
      if ServiceLine.FINDSET then
        repeat
          if not TempTimeSheetDetail.GET(
               ServiceLine."Time Sheet No.",
               ServiceLine."Time Sheet Line No.",
               ServiceLine."Time Sheet Date")
          then
            if TimeSheetDetail.GET(
                 ServiceLine."Time Sheet No.",
                 ServiceLine."Time Sheet Line No.",
                 ServiceLine."Time Sheet Date")
            then begin
              TempTimeSheetDetail := TimeSheetDetail;
              TempTimeSheetDetail.INSERT;
            end;
        until ServiceLine.NEXT = 0;

      TimeSheetDetail.SETRANGE("Service Order No.",ServiceHeader."No.");
      TimeSheetDetail.SETRANGE(Status,TimeSheetDetail.Status::Approved);
      if AddBySelectedTimesheetLine = true then begin
        TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
        TimeSheetDetail.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
      end;
      TimeSheetDetail.SETRANGE(Posted,false);
      if TimeSheetDetail.FINDSET then
        repeat
          if not TempTimeSheetDetail.GET(
               TimeSheetDetail."Time Sheet No.",
               TimeSheetDetail."Time Sheet Line No.",
               TimeSheetDetail.Date)
          then begin
            AddServLinesFromTSDetail(ServiceHeader,TimeSheetDetail,LineNo);
            LineNo := LineNo + 10000;
          end;
        until TimeSheetDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE AddServLinesFromTSDetail@46(ServiceHeader@1000 : Record "Service Header";VAR TimeSheetDetail@1001 : Record "Time Sheet Detail";LineNo@1006 : Integer);
    VAR
      TimeSheetHeader@1002 : Record "Time Sheet Header";
      TimeSheetLine@1004 : Record "Time Sheet Line";
      ServiceLine@1003 : Record "Service Line";
      QtyToPost@1005 : Decimal;
    BEGIN
      QtyToPost := TimeSheetDetail.GetMaxQtyToPost;
      if QtyToPost <> 0 then begin
        ServiceLine.INIT;
        ServiceLine."Document Type" := ServiceHeader."Document Type";
        ServiceLine."Document No." := ServiceHeader."No.";
        ServiceLine."Line No." := LineNo;
        ServiceLine.VALIDATE("Service Item No.",GetFirstServiceItemNo(ServiceHeader));
        ServiceLine."Time Sheet No." := TimeSheetDetail."Time Sheet No.";
        ServiceLine."Time Sheet Line No." := TimeSheetDetail."Time Sheet Line No.";
        ServiceLine."Time Sheet Date" := TimeSheetDetail.Date;
        ServiceLine.Type := ServiceLine.Type::Resource;
        TimeSheetHeader.GET(TimeSheetDetail."Time Sheet No.");
        ServiceLine.VALIDATE("No.",TimeSheetHeader."Resource No.");
        ServiceLine.VALIDATE(Quantity,TimeSheetDetail.Quantity);
        TimeSheetLine.GET(TimeSheetDetail."Time Sheet No.",TimeSheetDetail."Time Sheet Line No.");
        if not TimeSheetLine.Chargeable then
          ServiceLine.VALIDATE("Qty. to Consume",QtyToPost);
        ServiceLine."Planned Delivery Date" := TimeSheetDetail.Date;
        ServiceLine.VALIDATE("Work Type Code",TimeSheetLine."Work Type Code");
        ServiceLine.INSERT;
      end;
    END;

    BEGIN
    END.
  }
}

