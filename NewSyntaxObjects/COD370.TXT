OBJECT Codeunit 370 Bank Acc. Reconciliation Post
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Bank Acc. Reconciliation";
    Permissions=TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rm,
                TableData "Bank Account Statement"=ri,
                TableData "Bank Account Statement Line"=ri,
                TableData "Posted Payment Recon. Hdr"=ri;
    OnRun=BEGIN
            Window.OPEN(
              '#1#################################\\' +
              Text000);
            Window.UPDATE(1,STRSUBSTNO('%1 %2',"Bank Account No.","Statement No."));

            InitPost(Rec);
            Post(Rec);
            FinalizePost(Rec);

            Window.CLOSE;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Posting lines              #2######';
      Text001@1001 : TextConst 'ENU=%1 is not equal to Total Balance.';
      Text002@1002 : TextConst 'ENU=There is nothing to post.';
      Text003@1003 : TextConst 'ENU="The application is not correct. The total amount applied is %1; it should be %2."';
      Text004@1004 : TextConst 'ENU=The total difference is %1. It must be %2.';
      BankAcc@1007 : Record "Bank Account";
      BankAccLedgEntry@1008 : Record "Bank Account Ledger Entry";
      CheckLedgEntry@1009 : Record "Check Ledger Entry";
      GenJnlLine@1005 : Record "Gen. Journal Line";
      SourceCodeSetup@1011 : Record "Source Code Setup";
      GenJnlPostLine@1010 : Codeunit "Gen. Jnl.-Post Line";
      Window@1018 : Dialog;
      SourceCode@1012 : Code[10];
      TotalAmount@1014 : Decimal;
      TotalAppliedAmount@1015 : Decimal;
      TotalDiff@1016 : Decimal;
      Lines@1017 : Integer;
      Difference@1006 : Decimal;
      ExcessiveAmtErr@1013 : TextConst '@@@=%1 a decimal number, %2 currency code;ENU=You must apply the excessive amount of %1 %2 manually.';
      PostPaymentsOnly@1019 : Boolean;
      NotFullyAppliedErr@1020 : TextConst '@@@=%1 - total applied amount, %2 - total transaction amount;ENU=One or more payments are not fully applied.\\The sum of applied amounts is %1. It must be %2.';
      LineNoTAppliedErr@1021 : TextConst '@@@=%1 - transaction date, %2 - arbitrary text;ENU=The line with transaction date %1 and transaction text ''%2'' is not applied. You must apply all lines.';
      TransactionAlreadyReconciledErr@1022 : TextConst '@@@=%1 - transaction date, %2 - arbitrary text;ENU=The line with transaction date %1 and transaction text ''%2'' is already reconciled.\\You must remove it from the payment reconciliation journal before posting.';

    LOCAL PROCEDURE InitPost@2(BankAccRecon@1000 : Record "Bank Acc. Reconciliation");
    BEGIN
      with BankAccRecon do
        case "Statement Type" of
          "Statement Type"::"Bank Reconciliation":
            begin
              TESTFIELD("Statement Date");
              CheckLinesMatchEndingBalance(BankAccRecon,Difference);
            end;
          "Statement Type"::"Payment Application":
            begin
              SourceCodeSetup.GET;
              SourceCode := SourceCodeSetup."Payment Reconciliation Journal";
              PostPaymentsOnly := "Post Payments Only";
            end;
        end;
    END;

    LOCAL PROCEDURE Post@3(BankAccRecon@1000 : Record "Bank Acc. Reconciliation");
    VAR
      BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";
      AppliedAmount@1002 : Decimal;
      TotalTransAmtNotAppliedErr@1003 : Text;
    BEGIN
      with BankAccRecon do begin
        // Run through lines
        BankAccReconLine.FilterBankRecLines(BankAccRecon);
        TotalAmount := 0;
        TotalAppliedAmount := 0;
        TotalDiff := 0;
        Lines := 0;
        if BankAccReconLine.ISEMPTY then
          ERROR(Text002);
        BankAccLedgEntry.LOCKTABLE;
        CheckLedgEntry.LOCKTABLE;

        if BankAccReconLine.FINDSET then
          repeat
            Lines := Lines + 1;
            Window.UPDATE(2,Lines);
            AppliedAmount := 0;
            // Adjust entries
            // Test amount and settled amount
            case "Statement Type" of
              "Statement Type"::"Bank Reconciliation":
                case BankAccReconLine.Type of
                  BankAccReconLine.Type::"Bank Account Ledger Entry":
                    CloseBankAccLedgEntry(BankAccReconLine,AppliedAmount);
                  BankAccReconLine.Type::"Check Ledger Entry":
                    CloseCheckLedgEntry(BankAccReconLine,AppliedAmount);
                  BankAccReconLine.Type::Difference:
                    TotalDiff += BankAccReconLine."Statement Amount";
                end;
              "Statement Type"::"Payment Application":
                PostPaymentApplications(BankAccReconLine,AppliedAmount);
            end;
            BankAccReconLine.TESTFIELD("Applied Amount",AppliedAmount);
            TotalAmount += BankAccReconLine."Statement Amount";
            TotalAppliedAmount += AppliedAmount;
          until BankAccReconLine.NEXT = 0;

        // Test amount
        if "Statement Type" = "Statement Type"::"Payment Application" then
          TotalTransAmtNotAppliedErr := NotFullyAppliedErr
        else
          TotalTransAmtNotAppliedErr := Text003;
        if TotalAmount <> TotalAppliedAmount + TotalDiff then
          ERROR(
            TotalTransAmtNotAppliedErr,
            TotalAppliedAmount + TotalDiff,TotalAmount);
        if Difference <> TotalDiff then
          ERROR(Text004,Difference,TotalDiff);

        // Get bank
        UpdateBank(BankAccRecon,TotalAmount);

        case "Statement Type" of
          "Statement Type"::"Bank Reconciliation":
            TransferToBankStmt(BankAccRecon);
          "Statement Type"::"Payment Application":
            begin
              TransferToPostPmtAppln(BankAccRecon);
              if not "Post Payments Only" then
                TransferToBankStmt(BankAccRecon);
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE FinalizePost@4(BankAccRecon@1000 : Record "Bank Acc. Reconciliation");
    VAR
      BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";
      AppliedPmtEntry@1002 : Record "Applied Payment Entry";
    BEGIN
      with BankAccRecon do begin
        // Delete statement
        if BankAccReconLine.LinesExist(BankAccRecon) then
          repeat
            AppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconLine);
            AppliedPmtEntry.DELETEALL;

            BankAccReconLine.DELETE;
            BankAccReconLine.ClearDataExchEntries;
          until BankAccReconLine.NEXT = 0;

        FIND;
        DELETE;
      end;
    END;

    LOCAL PROCEDURE CheckLinesMatchEndingBalance@1(BankAccRecon@1000 : Record "Bank Acc. Reconciliation";VAR Difference@1002 : Decimal);
    VAR
      BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      with BankAccReconLine do begin
        LinesExist(BankAccRecon);
        CALCSUMS("Statement Amount",Difference);

        if "Statement Amount" <>
           BankAccRecon."Statement Ending Balance" - BankAccRecon."Balance Last Statement"
        then
          ERROR(Text001,BankAccRecon.FIELDCAPTION("Statement Ending Balance"));
      end;
      Difference := BankAccReconLine.Difference;
    END;

    LOCAL PROCEDURE CloseBankAccLedgEntry@7(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";VAR AppliedAmount@1001 : Decimal);
    BEGIN
      BankAccLedgEntry.RESET;
      BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAccReconLine."Bank Account No.");
      BankAccLedgEntry.SETRANGE(Open,true);
      BankAccLedgEntry.SETRANGE(
        "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
      BankAccLedgEntry.SETRANGE("Statement No.",BankAccReconLine."Statement No.");
      BankAccLedgEntry.SETRANGE("Statement Line No.",BankAccReconLine."Statement Line No.");
      if BankAccLedgEntry.FIND('-') then
        repeat
          AppliedAmount += BankAccLedgEntry."Remaining Amount";
          BankAccLedgEntry."Remaining Amount" := 0;
          BankAccLedgEntry.Open := false;
          BankAccLedgEntry."Statement Status" := BankAccLedgEntry."Statement Status"::Closed;
          BankAccLedgEntry.MODIFY;

          CheckLedgEntry.RESET;
          CheckLedgEntry.SETCURRENTKEY("Bank Account Ledger Entry No.");
          CheckLedgEntry.SETRANGE(
            "Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
          CheckLedgEntry.SETRANGE(Open,true);
          if CheckLedgEntry.FIND('-') then
            repeat
              CheckLedgEntry.TESTFIELD(Open,true);
              CheckLedgEntry.TESTFIELD(
                "Statement Status",
                CheckLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
              CheckLedgEntry.TESTFIELD("Statement No.",'');
              CheckLedgEntry.TESTFIELD("Statement Line No.",0);
              CheckLedgEntry.Open := false;
              CheckLedgEntry."Statement Status" := CheckLedgEntry."Statement Status"::Closed;
              CheckLedgEntry.MODIFY;
            until CheckLedgEntry.NEXT = 0;
        until BankAccLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CloseCheckLedgEntry@9(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";VAR AppliedAmount@1001 : Decimal);
    VAR
      CheckLedgEntry2@1002 : Record "Check Ledger Entry";
    BEGIN
      CheckLedgEntry.RESET;
      CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
      CheckLedgEntry.SETRANGE("Bank Account No.",BankAccReconLine."Bank Account No.");
      CheckLedgEntry.SETRANGE(Open,true);
      CheckLedgEntry.SETRANGE(
        "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
      CheckLedgEntry.SETRANGE("Statement No.",BankAccReconLine."Statement No.");
      CheckLedgEntry.SETRANGE("Statement Line No.",BankAccReconLine."Statement Line No.");
      if CheckLedgEntry.FIND('-') then
        repeat
          AppliedAmount -= CheckLedgEntry.Amount;
          CheckLedgEntry.Open := false;
          CheckLedgEntry."Statement Status" := CheckLedgEntry."Statement Status"::Closed;
          CheckLedgEntry.MODIFY;

          BankAccLedgEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
          BankAccLedgEntry.TESTFIELD(Open,true);
          BankAccLedgEntry.TESTFIELD(
            "Statement Status",BankAccLedgEntry."Statement Status"::"Check Entry Applied");
          BankAccLedgEntry.TESTFIELD("Statement No.",'');
          BankAccLedgEntry.TESTFIELD("Statement Line No.",0);
          BankAccLedgEntry."Remaining Amount" :=
            BankAccLedgEntry."Remaining Amount" + CheckLedgEntry.Amount;
          if BankAccLedgEntry."Remaining Amount" = 0 then begin
            BankAccLedgEntry.Open := false;
            BankAccLedgEntry."Statement Status" := BankAccLedgEntry."Statement Status"::Closed;
            BankAccLedgEntry."Statement No." := BankAccReconLine."Statement No.";
            BankAccLedgEntry."Statement Line No." := CheckLedgEntry."Statement Line No.";
          end else begin
            CheckLedgEntry2.RESET;
            CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
            CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
            CheckLedgEntry2.SETRANGE(Open,true);
            CheckLedgEntry2.SETRANGE("Check Type",CheckLedgEntry2."Check Type"::"Partial Check");
            CheckLedgEntry2.SETRANGE(
              "Statement Status",CheckLedgEntry2."Statement Status"::"Check Entry Applied");
            if not CheckLedgEntry2.FINDFIRST then
              BankAccLedgEntry."Statement Status" := BankAccLedgEntry."Statement Status"::Open;
          end;
          BankAccLedgEntry.MODIFY;
        until CheckLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE PostPaymentApplications@21(BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";VAR AppliedAmount@1000 : Decimal);
    VAR
      BankAccReconciliation@1011 : Record "Bank Acc. Reconciliation";
      CurrExchRate@1009 : Record "Currency Exchange Rate";
      AppliedPmtEntry@1002 : Record "Applied Payment Entry";
      BankAccountLedgerEntry@1005 : Record "Bank Account Ledger Entry";
      GLSetup@1007 : Record "General Ledger Setup";
      DimensionManagement@1006 : Codeunit DimensionManagement;
      PaymentLineAmount@1003 : Decimal;
      RemainingAmount@1004 : Decimal;
      IsApplied@1008 : Boolean;
    BEGIN
      if BankAccReconLine.IsTransactionPostedAndReconciled then
        ERROR(TransactionAlreadyReconciledErr,BankAccReconLine."Transaction Date",BankAccReconLine."Transaction Text");

      with GenJnlLine do begin
        if BankAccReconLine."Account No." = '' then
          ERROR(LineNoTAppliedErr,BankAccReconLine."Transaction Date",BankAccReconLine."Transaction Text");
        BankAcc.GET(BankAccReconLine."Bank Account No.");
        INIT;
        "Document Type" := "Document Type"::Payment;

        if IsRefund(BankAccReconLine) then
          "Document Type" := "Document Type"::Refund;

        "Account Type" := BankAccReconLine.GetAppliedToAccountType;
        BankAccReconciliation.GET(
          BankAccReconLine."Statement Type",BankAccReconLine."Bank Account No.",BankAccReconLine."Statement No.");
        "Copy VAT Setup to Jnl. Lines" := BankAccReconciliation."Copy VAT Setup to Jnl. Line";
        VALIDATE("Account No.",BankAccReconLine.GetAppliedToAccountNo);
        "Dimension Set ID" := BankAccReconLine."Dimension Set ID";
        DimensionManagement.UpdateGlobalDimFromDimSetID(
          BankAccReconLine."Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

        "Posting Date" := BankAccReconLine."Transaction Date";
        Description := BankAccReconLine.Description;

        "Document No." := BankAccReconLine."Statement No.";
        "Bal. Account Type" := "Bal. Account Type"::"Bank Account";
        "Bal. Account No." := BankAcc."No.";

        "Source Code" := SourceCode;
        "Allow Zero-Amount Posting" := true;

        "Applies-to ID" := BankAccReconLine.GetAppliesToID;
      end;

      IsApplied := false;
      with AppliedPmtEntry do
        if AppliedPmtEntryLinesExist(BankAccReconLine) then
          repeat
            AppliedAmount += "Applied Amount" - "Applied Pmt. Discount";
            PaymentLineAmount += "Applied Amount" - "Applied Pmt. Discount";
            TESTFIELD("Account Type",BankAccReconLine."Account Type");
            TESTFIELD("Account No.",BankAccReconLine."Account No.");
            if "Applies-to Entry No." <> 0 then begin
              case "Account Type" of
                "Account Type"::Customer:
                  ApplyCustLedgEntry(
                    AppliedPmtEntry,GenJnlLine."Applies-to ID",GenJnlLine."Posting Date",0D,0D,"Applied Pmt. Discount");
                "Account Type"::Vendor:
                  ApplyVendLedgEntry(
                    AppliedPmtEntry,GenJnlLine."Applies-to ID",GenJnlLine."Posting Date",0D,0D,"Applied Pmt. Discount");
                "Account Type"::"Bank Account":
                  begin
                    BankAccountLedgerEntry.GET("Applies-to Entry No.");
                    RemainingAmount := BankAccountLedgerEntry."Remaining Amount";
                    case true of
                      RemainingAmount = "Applied Amount":
                        begin
                          if not PostPaymentsOnly then
                            CloseBankAccountLedgerEntry("Applies-to Entry No.","Applied Amount");
                          PaymentLineAmount -= "Applied Amount";
                        end;
                      ABS(RemainingAmount) > ABS("Applied Amount"):
                        begin
                          if not PostPaymentsOnly then begin
                            BankAccountLedgerEntry."Remaining Amount" -= "Applied Amount";
                            BankAccountLedgerEntry.MODIFY;
                          end;
                          PaymentLineAmount -= "Applied Amount";
                        end;
                      ABS(RemainingAmount) < ABS("Applied Amount"):
                        begin
                          if not PostPaymentsOnly then
                            CloseBankAccountLedgerEntry("Applies-to Entry No.",RemainingAmount);
                          PaymentLineAmount -= RemainingAmount;
                        end;
                    end;
                  end;
              end;
              IsApplied := true;
            end;
          until NEXT = 0;

      if PaymentLineAmount <> 0 then begin
        if not IsApplied then
          GenJnlLine."Applies-to ID" := '';
        if (GenJnlLine."Account Type" <> GenJnlLine."Account Type"::"Bank Account") or
           (GenJnlLine."Currency Code" = BankAcc."Currency Code")
        then begin
          GenJnlLine.VALIDATE("Currency Code",BankAcc."Currency Code");
          GenJnlLine.Amount := -PaymentLineAmount;
          if GenJnlLine."Currency Code" <> '' then
            GenJnlLine."Amount (LCY)" := ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  GenJnlLine."Posting Date",GenJnlLine."Currency Code",
                  GenJnlLine.Amount,GenJnlLine."Currency Factor"));
          GenJnlLine.VALIDATE("VAT %");
          GenJnlLine.VALIDATE("Bal. VAT %")
        end else begin
          GLSetup.GET;
          ERROR(ExcessiveAmtErr,PaymentLineAmount,GLSetup.GetCurrencyCode(BankAcc."Currency Code"));
        end;
        GenJnlPostLine.RunWithCheck(GenJnlLine);
        if not PostPaymentsOnly then begin
          BankAccountLedgerEntry.SETRANGE(Open,true);
          BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAcc."No.");
          BankAccountLedgerEntry.SETRANGE("Document Type",GenJnlLine."Document Type"::Payment);
          BankAccountLedgerEntry.SETRANGE("Document No.",BankAccReconLine."Statement No.");
          BankAccountLedgerEntry.SETRANGE("Posting Date",GenJnlLine."Posting Date");
          if BankAccountLedgerEntry.FINDLAST then
            CloseBankAccountLedgerEntry(BankAccountLedgerEntry."Entry No.",BankAccountLedgerEntry.Amount);
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateBank@17(BankAccRecon@1000 : Record "Bank Acc. Reconciliation";Amt@1001 : Decimal);
    BEGIN
      with BankAcc do begin
        LOCKTABLE;
        GET(BankAccRecon."Bank Account No.");
        TESTFIELD(Blocked,false);
        "Last Statement No." := BankAccRecon."Statement No.";
        "Balance Last Statement" := BankAccRecon."Balance Last Statement" + Amt;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE TransferToBankStmt@25(BankAccRecon@1002 : Record "Bank Acc. Reconciliation");
    VAR
      BankAccStmt@1001 : Record "Bank Account Statement";
      BankAccStmtLine@1000 : Record "Bank Account Statement Line";
      BankAccReconLine@1003 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      if BankAccReconLine.LinesExist(BankAccRecon) then
        repeat
          BankAccStmtLine.TRANSFERFIELDS(BankAccReconLine);
          BankAccStmtLine.INSERT;
          BankAccReconLine.ClearDataExchEntries;
        until BankAccReconLine.NEXT = 0;

      BankAccStmt.TRANSFERFIELDS(BankAccRecon);
      BankAccStmt.INSERT;
    END;

    LOCAL PROCEDURE TransferToPostPmtAppln@5(BankAccRecon@1002 : Record "Bank Acc. Reconciliation");
    VAR
      PostedPmtReconHdr@1000 : Record "Posted Payment Recon. Hdr";
      PostedPmtReconLine@1003 : Record "Posted Payment Recon. Line";
      BankAccReconLine@1004 : Record "Bank Acc. Reconciliation Line";
      TypeHelper@1005 : Codeunit "Type Helper";
      FieldLength@1001 : Integer;
    BEGIN
      if BankAccReconLine.LinesExist(BankAccRecon) then
        repeat
          PostedPmtReconLine.TRANSFERFIELDS(BankAccReconLine);

          FieldLength := TypeHelper.GetFieldLength(DATABASE::"Posted Payment Recon. Line",
              PostedPmtReconLine.FIELDNO("Applied Document No."));
          PostedPmtReconLine."Applied Document No." := COPYSTR(BankAccReconLine.GetAppliedToDocumentNo,1,FieldLength);

          FieldLength := TypeHelper.GetFieldLength(DATABASE::"Posted Payment Recon. Line",
              PostedPmtReconLine.FIELDNO("Applied Entry No."));
          PostedPmtReconLine."Applied Entry No." := COPYSTR(BankAccReconLine.GetAppliedToEntryNo,1,FieldLength);

          PostedPmtReconLine.Reconciled := not PostPaymentsOnly;

          PostedPmtReconLine.INSERT;
          BankAccReconLine.ClearDataExchEntries;
        until BankAccReconLine.NEXT = 0;

      PostedPmtReconHdr.TRANSFERFIELDS(BankAccRecon);
      PostedPmtReconHdr.INSERT;
    END;

    [Internal]
    PROCEDURE ApplyCustLedgEntry@12(AppliedPmtEntry@1000 : Record "Applied Payment Entry";AppliesToID@1001 : Code[50];PostingDate@1004 : Date;PmtDiscDueDate@1007 : Date;PmtDiscToleranceDate@1006 : Date;RemPmtDiscPossible@1003 : Decimal);
    VAR
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
      CurrExchRate@1005 : Record "Currency Exchange Rate";
    BEGIN
      with CustLedgEntry do begin
        GET(AppliedPmtEntry."Applies-to Entry No.");
        TESTFIELD(Open);
        BankAcc.GET(AppliedPmtEntry."Bank Account No.");
        if AppliesToID = '' then begin
          "Pmt. Discount Date" := PmtDiscDueDate;
          "Pmt. Disc. Tolerance Date" := PmtDiscToleranceDate;

          "Remaining Pmt. Disc. Possible" := RemPmtDiscPossible;
          if BankAcc.IsInLocalCurrency then
            "Remaining Pmt. Disc. Possible" :=
              CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",'',"Currency Code",PostingDate);
        end else begin
          "Applies-to ID" := AppliesToID;
          "Amount to Apply" := AppliedPmtEntry.CalcAmountToApply(PostingDate);
        end;

        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      end;
    END;

    [Internal]
    PROCEDURE ApplyVendLedgEntry@14(AppliedPmtEntry@1000 : Record "Applied Payment Entry";AppliesToID@1001 : Code[50];PostingDate@1003 : Date;PmtDiscDueDate@1007 : Date;PmtDiscToleranceDate@1006 : Date;RemPmtDiscPossible@1004 : Decimal);
    VAR
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
      CurrExchRate@1005 : Record "Currency Exchange Rate";
    BEGIN
      with VendLedgEntry do begin
        GET(AppliedPmtEntry."Applies-to Entry No.");
        TESTFIELD(Open);
        BankAcc.GET(AppliedPmtEntry."Bank Account No.");
        if AppliesToID = '' then begin
          "Pmt. Discount Date" := PmtDiscDueDate;
          "Pmt. Disc. Tolerance Date" := PmtDiscToleranceDate;

          "Remaining Pmt. Disc. Possible" := RemPmtDiscPossible;
          if BankAcc.IsInLocalCurrency then
            "Remaining Pmt. Disc. Possible" :=
              CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",'',"Currency Code",PostingDate);
        end else begin
          "Applies-to ID" := AppliesToID;
          "Amount to Apply" := AppliedPmtEntry.CalcAmountToApply(PostingDate);
        end;

        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      end;
    END;

    LOCAL PROCEDURE CloseBankAccountLedgerEntry@8(EntryNo@1000 : Integer;AppliedAmount@1003 : Decimal);
    VAR
      BankAccountLedgerEntry@1002 : Record "Bank Account Ledger Entry";
      CheckLedgerEntry@1001 : Record "Check Ledger Entry";
    BEGIN
      with BankAccountLedgerEntry do begin
        GET(EntryNo);
        TESTFIELD(Open);
        TESTFIELD("Remaining Amount",AppliedAmount);
        "Remaining Amount" := 0;
        Open := false;
        "Statement Status" := "Statement Status"::Closed;
        MODIFY;

        CheckLedgerEntry.RESET;
        CheckLedgerEntry.SETCURRENTKEY("Bank Account Ledger Entry No.");
        CheckLedgerEntry.SETRANGE(
          "Bank Account Ledger Entry No.","Entry No.");
        CheckLedgerEntry.SETRANGE(Open,true);
        if CheckLedgerEntry.FINDSET then
          repeat
            CheckLedgerEntry.Open := false;
            CheckLedgerEntry."Statement Status" := CheckLedgerEntry."Statement Status"::Closed;
            CheckLedgerEntry.MODIFY;
          until CheckLedgerEntry.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE IsRefund@6(BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line") : Boolean;
    BEGIN
      with BankAccReconLine do
        if ("Account Type" = "Account Type"::Customer) and ("Statement Amount" < 0) or
           ("Account Type" = "Account Type"::Vendor) and ("Statement Amount" > 0)
        then
          exit(true);
      exit(false);
    END;

    BEGIN
    END.
  }
}

