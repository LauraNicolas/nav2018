OBJECT Table 9900 Web Service Aggregate
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataPerCompany=false;
    OnInsert=VAR
               WebService@1000 : Record "Web Service";
               TenantWebService@1003 : Record "Tenant Web Service";
             BEGIN
               AssertValidRec;

               // Adding a new web service with the same Object Type and Service Name as an existing record
               // (system or tenant record) will result in a duplicate service error the same as today
               // =>  This scenario is covered by the PK on all tables involved.

               // Adding a new record for an Object (Type and ID) that has an unpublished system record
               // will give the following record/row error (Message:  The web service can't be added
               // because it conflicts with an unpublished system web service for the object.)
               CLEAR(WebService);
               WebService.SETRANGE("Object Type","Object Type");
               WebService.SETRANGE("Object ID","Object ID");
               WebService.SETRANGE(Published,false);

               if not WebService.ISEMPTY then
                 ERROR(WebServiceNotAllowedErr);

               WebService.RESET;

               // If the all tenants checkbox is selected, then create the web service record as a system
               // record, otherwise create as a tenant record
               if "All Tenants" then begin
                 CLEAR(WebService);
                 WebService.TRANSFERFIELDS(Rec);
                 WebService.INSERT;
               end else begin
                 CLEAR(TenantWebService);
                 TenantWebService.TRANSFERFIELDS(Rec);
                 TenantWebService.INSERT;
               end
             END;

    OnModify=VAR
               WebService@1000 : Record "Web Service";
               TenantWebService@1001 : Record "Tenant Web Service";
             BEGIN
               AssertValidRec;

               if "All Tenants" <> xRec."All Tenants" then
                 if not "All Tenants" and xRec."All Tenants" then begin
                   // Unselecting the all tenants checkbox will remove the system record and add a tenant record if one
                   // doesn't already exist.
                   if WebService.GET(xRec."Object Type",xRec."Service Name") then
                     WebService.DELETE;

                   if not TenantWebService.GET("Object Type","Service Name") then begin
                     CLEAR(TenantWebService);
                     TenantWebService.TRANSFERFIELDS(Rec);
                     TenantWebService.INSERT;
                   end
                 end else begin
                   // Selecting the all tenants checkbox will add a system record.
                   CLEAR(WebService);
                   WebService.TRANSFERFIELDS(Rec);
                   WebService.INSERT;
                 end
               else
                 // Changing the Object Type, Object ID, Service Name, and Publish fields of a system record will
                 // change the value in the system record.
                 if "All Tenants" then
                   if WebService.GET("Object Type","Service Name") then begin
                     // There is an existing record, so modify it.
                     WebService."Object ID" := "Object ID";
                     WebService.Published := Published;
                     WebService.MODIFY;
                   end else begin
                     // There is no existing record, so insert one.
                     CLEAR(WebService);
                     WebService.TRANSFERFIELDS(Rec);
                     WebService.INSERT;
                   end
                 else begin
                   // Changing the Object Type, Object ID, Service Name, and Publish fields of a tenant record will
                   // change the value in the tenant record.
                   // i.  Changing the web service to have the same Object Type and Service Name as an existing
                   // record (system or tenant record) will result in a duplicate error the same as today.
                   // =>  This scenario is covered by keys on the Web Service Aggregate table.
                   // ii. Changing the web service to have the same Object (Type and ID) as an Unpublished system
                   // record will give the following record/row error. (Message:  The web service can't be modified
                   // because it conflicts with an unpublished system web service for the object.

                   AssertModAllowed;

                   if TenantWebService.GET("Object Type","Service Name") then begin
                     TenantWebService."Object ID" := "Object ID";
                     TenantWebService.Published := Published;
                     TenantWebService.MODIFY
                   end else begin
                     TenantWebService.TRANSFERFIELDS(Rec);
                     TenantWebService.INSERT;
                   end
                 end
             END;

    OnDelete=VAR
               WebService@1000 : Record "Web Service";
               TenantWebService@1001 : Record "Tenant Web Service";
             BEGIN
               // When deleting an existing web service record...
               // Deleting a tenant record will delete the tenant record.
               // Deleting a system record will delete the system record.
               if xRec."All Tenants" then begin
                 if WebService.GET(xRec."Object Type",xRec."Service Name") then
                   WebService.DELETE;
               end else
                 if TenantWebService.GET(xRec."Object Type",xRec."Service Name") then
                   TenantWebService.DELETE;
             END;

    OnRename=VAR
               WebService@1000 : Record "Web Service";
               TenantWebService@1001 : Record "Tenant Web Service";
             BEGIN
               if "All Tenants" = xRec."All Tenants" then
                 if "All Tenants" then begin
                   // Changing the Object Type, Object ID, Service Name, and Publish fields of a system record will
                   // change the value in the system record.
                   if WebService.GET(xRec."Object Type",xRec."Service Name") then
                     WebService.RENAME("Object Type","Service Name");

                   if WebService.GET("Object Type","Service Name") then begin
                     WebService."Object ID" := "Object ID";
                     WebService.Published := Published;
                     WebService.MODIFY
                   end else begin
                     WebService.TRANSFERFIELDS(Rec);
                     WebService.INSERT;
                   end
                 end else begin
                   // Changing the Object Type, Object ID, Service Name, and Publish fields of a tenant record will
                   // change the value in the tenant record.
                   // i.  Changing the web service to have the same Object Type and Service Name as an existing
                   // record (system or tenant record) will result in a duplicate error the same as today.
                   // =>  This scenario is covered by keys on the Web Service Aggregate table.
                   // ii. Changing the web service to have the same Object (Type and ID) as an Unpublished system
                   // record will give the following record/row error. (Message:  The web service can't be modified
                   // because it conflicts with an unpublished system web service for the object.

                   AssertModAllowed;

                   if TenantWebService.GET(xRec."Object Type",xRec."Service Name") then
                     TenantWebService.RENAME("Object Type","Service Name");

                   if TenantWebService.GET("Object Type","Service Name") then begin
                     TenantWebService."Object ID" := "Object ID";
                     TenantWebService.Published := Published;
                     TenantWebService.MODIFY
                   end else begin
                     TenantWebService.TRANSFERFIELDS(Rec);
                     TenantWebService.INSERT;
                   end
                 end
               else
                 if not "All Tenants" and xRec."All Tenants" then begin
                   // Unselecting the all tenants checkbox will remove the system record and add a tenant record if one
                   // doesn't already exist.
                   if WebService.GET(xRec."Object Type",xRec."Service Name") then
                     WebService.DELETE;

                   if not TenantWebService.GET("Object Type","Service Name") then begin
                     CLEAR(TenantWebService);
                     TenantWebService.TRANSFERFIELDS(Rec);
                     TenantWebService.INSERT;
                   end
                 end else begin
                   // Selecting the all tenants checkbox will add a system record.
                   CLEAR(WebService);
                   WebService.TRANSFERFIELDS(Rec);
                   WebService.INSERT;
                 end
             END;

    CaptionML=ENU=Web Service Aggregate;
  }
  FIELDS
  {
    { 3   ;   ;Object Type         ;Option        ;CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=,,,,,Codeunit,,,Page,Query;
                                                   OptionString=,,,,,Codeunit,,,Page,Query }
    { 6   ;   ;Object ID           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=FIELD("Object Type"));
                                                   CaptionML=ENU=Object ID }
    { 9   ;   ;Service Name        ;Text240       ;CaptionML=ENU=Service Name }
    { 12  ;   ;Published           ;Boolean       ;CaptionML=ENU=Published }
    { 15  ;   ;All Tenants         ;Boolean       ;CaptionML=ENU=All Tenants }
  }
  KEYS
  {
    {    ;"Object Type","Service Name"            ;Clustered=true }
    {    ;"Object Type","Object ID"                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NotApplicableTxt@1002 : TextConst 'ENU=Not applicable';
      WebServiceNotAllowedErr@1001 : TextConst 'ENU=The web service cannot be added because it conflicts with an unpublished system web service for the object.';
      WebServiceModNotAllowedErr@1000 : TextConst 'ENU=The web service cannot be modified because it conflicts with an unpublished system web service for the object.';

    LOCAL PROCEDURE AssertModAllowed@5();
    VAR
      WebService@1000 : Record "Web Service";
    BEGIN
      WebService.SETRANGE("Object Type","Object Type");
      WebService.SETRANGE("Object ID","Object ID");
      WebService.SETRANGE(Published,false);

      if not WebService.ISEMPTY then
        ERROR(WebServiceModNotAllowedErr);
    END;

    LOCAL PROCEDURE AssertValidRec@4();
    VAR
      AllObj@1001 : Record AllObj;
    BEGIN
      TESTFIELD("Object ID");
      TESTFIELD("Service Name");
      if not ("Object Type" in ["Object Type"::Codeunit,"Object Type"::Page,"Object Type"::Query]) then
        FIELDERROR("Object Type");
      if ("Object Type" = "Object Type"::Page) and
         ("Object ID" = PAGE::"Web Services")
      then
        FIELDERROR("Object ID");
      AllObj.GET("Object Type","Object ID");
    END;

    [Internal]
    PROCEDURE GetODataUrl@2() : Text;
    VAR
      WebService@1000 : Record "Web Service";
      TenantWebService@1001 : Record "Tenant Web Service";
      ODataUtility@1003 : Codeunit ODataUtility;
      ODataServiceRootUrl@1002 : Text;
      ODataUrl@1005 : Text;
      ObjectTypeParam@1007 : ',,,,,,,,Page,Query';
    BEGIN
      if "All Tenants" then begin
        CLEAR(WebService);
        WebService.INIT;
        WebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            exit(GETURL(CLIENTTYPE::OData,COMPANYNAME,OBJECTTYPE::Page,"Object ID",WebService));
          "Object Type"::Query:
            exit(GETURL(CLIENTTYPE::OData,COMPANYNAME,OBJECTTYPE::Query,"Object ID",WebService));
          else
            exit(NotApplicableTxt);
        end
      end else begin
        CLEAR(TenantWebService);
        TenantWebService.INIT;
        TenantWebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            begin
              ODataServiceRootUrl := GETURL(CLIENTTYPE::OData,COMPANYNAME,OBJECTTYPE::Page,"Object ID",TenantWebService);
              ODataUrl := ODataUtility.GenerateODataV3Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Page);
              exit(ODataUrl);
            end;
          "Object Type"::Query:
            begin
              ODataServiceRootUrl := GETURL(CLIENTTYPE::OData,COMPANYNAME,OBJECTTYPE::Query,"Object ID",TenantWebService);
              ODataUrl := ODataUtility.GenerateODataV3Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Query);
              exit(ODataUrl);
            end;
          else
            exit(NotApplicableTxt);
        end
      end
    END;

    [External]
    PROCEDURE GetSOAPUrl@3() : Text;
    VAR
      WebService@1000 : Record "Web Service";
      TenantWebService@1001 : Record "Tenant Web Service";
    BEGIN
      if "All Tenants" then begin
        CLEAR(WebService);
        WebService.INIT;
        WebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            exit(GETURL(CLIENTTYPE::SOAP,COMPANYNAME,OBJECTTYPE::Page,"Object ID",WebService));
          "Object Type"::Codeunit:
            exit(GETURL(CLIENTTYPE::SOAP,COMPANYNAME,OBJECTTYPE::Codeunit,"Object ID",WebService));
          else
            exit(NotApplicableTxt);
        end
      end else begin
        CLEAR(TenantWebService);
        TenantWebService.INIT;
        TenantWebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            exit(GETURL(CLIENTTYPE::SOAP,COMPANYNAME,OBJECTTYPE::Page,"Object ID",TenantWebService));
          "Object Type"::Codeunit:
            exit(GETURL(CLIENTTYPE::SOAP,COMPANYNAME,OBJECTTYPE::Codeunit,"Object ID",TenantWebService));
          else
            exit(NotApplicableTxt);
        end
      end
    END;

    [External]
    PROCEDURE PopulateTable@1();
    VAR
      WebService@1000 : Record "Web Service";
      TenantWebService@1001 : Record "Tenant Web Service";
    BEGIN
      RESET;
      DELETEALL;

      // The system records will always be displayed...
      if WebService.FINDSET then
        repeat
          INIT;
          TRANSFERFIELDS(WebService);
          "All Tenants" := true;
          INSERT;
        until WebService.NEXT = 0;

      // The tenant records that don't have the same (Object Type and Service Name)
      // or (Object Type and Object ID) as a system record will be displayed.
      // i.e. any tenant records that have the same values for these will not be
      // displayed
      "All Tenants" := false;

      CLEAR(TenantWebService);
      if TenantWebService.FINDSET then
        repeat
          CLEAR(WebService);
          if not WebService.GET(TenantWebService."Object Type",TenantWebService."Service Name") then begin
            WebService.SETRANGE("Object Type",TenantWebService."Object Type");
            WebService.SETRANGE("Object ID",TenantWebService."Object ID");

            // DCR: Include the tenant record if it has the same Object Type and Object ID
            // of a system record AND the system record is published...
            WebService.SETRANGE(Published,false);

            if not WebService.FINDSET then begin
              INIT;
              TRANSFERFIELDS(TenantWebService);
              INSERT;
            end
          end
        until TenantWebService.NEXT = 0;
    END;

    [Internal]
    PROCEDURE GetODataV4Url@6() : Text;
    VAR
      WebService@1005 : Record "Web Service";
      TenantWebService@1004 : Record "Tenant Web Service";
      ODataUtility@1003 : Codeunit ODataUtility;
      ODataServiceRootUrl@1002 : Text;
      ODataUrl@1001 : Text;
      ObjectTypeParam@1000 : ',,,,,,,,Page,Query';
    BEGIN
      if "All Tenants" then begin
        CLEAR(WebService);
        WebService.INIT;
        WebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            exit(GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Page,"Object ID",WebService));
          "Object Type"::Query:
            exit(GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Query,"Object ID",WebService));
          else
            exit(NotApplicableTxt);
        end
      end else begin
        CLEAR(TenantWebService);
        TenantWebService.INIT;
        TenantWebService.TRANSFERFIELDS(Rec);

        case "Object Type" of
          "Object Type"::Page:
            begin
              ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Page,"Object ID",TenantWebService);
              ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Page);
              exit(ODataUrl);
            end;
          "Object Type"::Query:
            begin
              ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Query,"Object ID",TenantWebService);
              ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Query);
              exit(ODataUrl);
            end;
          else
            exit(NotApplicableTxt);
        end
      end
    END;

    BEGIN
    END.
  }
}

