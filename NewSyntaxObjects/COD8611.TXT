OBJECT Codeunit 8611 Config. Package Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Config. Package Record";
    OnRun=BEGIN
            CLEAR(RecordsInsertedCount);
            CLEAR(RecordsModifiedCount);
            InsertPackageRecord(Rec);
          END;

  }
  CODE
  {
    VAR
      KeyFieldValueMissingErr@1033 : TextConst '@@@=Parameter 1 - field name, 2 - table name, 3 - code value. Example: The value of the key field Customer Posting Group has not been filled in for record Customer : XXXXX.;ENU=The value of the key field %1 has not been filled in for record %2 : %3.';
      ValidatingTableRelationsMsg@1000 : TextConst 'ENU=Validating table relations';
      RecordsXofYMsg@1011 : TextConst '@@@="Sample: 5 of 1025. 1025 is total number of records, 5 is a number of the current record ";ENU=Records: %1 of %2';
      ApplyingPackageMsg@1001 : TextConst '@@@="%1 = The name of the package being applied.";ENU=Applying package %1';
      ApplyingTableMsg@1010 : TextConst '@@@="%1 = The name of the table being applied.";ENU=Applying table %1';
      NoTablesAndErrorsMsg@1002 : TextConst '@@@="%1 = number of tables processed, %2 = number of errors, %3 = number of records inserted, %4 = number of records modified";ENU=%1 tables are processed.\%2 errors found.\%3 records inserted.\%4 records modified.';
      NoTablesMsg@1003 : TextConst '@@@="%1 = The number of tables that were processed.";ENU=%1 tables are processed.';
      UpdatingDimSetsMsg@1006 : TextConst 'ENU=Updating dimension sets';
      TempConfigRecordForProcessing@1015 : TEMPORARY Record "Config. Record For Processing";
      TempAppliedConfigPackageRecord@1016 : TEMPORARY Record "Config. Package Record";
      InventorySetup@1021 : Record "Inventory Setup";
      GeneralLedgerSetup@1022 : Record "General Ledger Setup";
      ConfigProgressBar@1005 : Codeunit "Config. Progress Bar";
      ConfigValidateMgt@1014 : Codeunit "Config. Validate Management";
      ConfigMgt@1007 : Codeunit "Config. Management";
      ValidationFieldID@1037 : Integer;
      RecordsInsertedCount@1017 : Integer;
      RecordsModifiedCount@1018 : Integer;
      ApplyMode@1013 : ',PrimaryKey,NonKeyFields';
      ProcessingOrderErr@1122 : TextConst '@@@="%1 = The name of the table.";ENU=Cannot set up processing order numbers. A cycle reference exists in the primary keys for table %1.';
      ErrorTypeEnum@1123 : 'General,TableRelation';
      HideDialog@1012 : Boolean;
      ReferenceSameTableErr@1004 : TextConst 'ENU=Some lines refer to the same table. You cannot assign a table to a package more than one time.';
      BlankTxt@1008 : TextConst 'ENU=[Blank]';
      DimValueDoesNotExistsErr@1009 : TextConst '@@@="%1 = Dimension Code, %2 = Dimension Value Code";ENU=Dimension Value %1 %2 does not exist.';
      MSGPPackageCodeTxt@1019 : TextConst 'ENU=GB.ENU.CSV';
      QBPackageCodeTxt@1020 : TextConst 'ENU=DM.IIF';

    [External]
    PROCEDURE InsertPackage@2(VAR ConfigPackage@1001 : Record "Config. Package";PackageCode@1003 : Code[20];PackageName@1002 : Text[50];ExcludeConfigTables@1000 : Boolean);
    BEGIN
      ConfigPackage.Code := PackageCode;
      ConfigPackage."Package Name" := PackageName;
      ConfigPackage."Exclude Config. Tables" := ExcludeConfigTables;
      ConfigPackage.INSERT;
    END;

    [External]
    PROCEDURE InsertPackageTable@58(VAR ConfigPackageTable@1001 : Record "Config. Package Table";PackageCode@1002 : Code[20];TableID@1000 : Integer);
    BEGIN
      if not ConfigPackageTable.GET(PackageCode,TableID) then begin
        ConfigPackageTable.INIT;
        ConfigPackageTable.VALIDATE("Package Code",PackageCode);
        ConfigPackageTable.VALIDATE("Table ID",TableID);
        ConfigPackageTable.INSERT(true);
      end;
    END;

    [External]
    PROCEDURE InsertPackageTableWithoutValidation@84(VAR ConfigPackageTable@1001 : Record "Config. Package Table";PackageCode@1002 : Code[20];TableID@1000 : Integer);
    BEGIN
      if not ConfigPackageTable.GET(PackageCode,TableID) then begin
        ConfigPackageTable.INIT;
        ConfigPackageTable."Package Code" := PackageCode;
        ConfigPackageTable."Table ID" := TableID;
        ConfigPackageTable.INSERT;
      end;
    END;

    [Internal]
    PROCEDURE InsertPackageField@19(VAR ConfigPackageField@1007 : Record "Config. Package Field";PackageCode@1006 : Code[20];TableID@1000 : Integer;FieldID@1001 : Integer;FieldName@1008 : Text[30];FieldCaption@1009 : Text[250];SetInclude@1002 : Boolean;SetValidate@1003 : Boolean;SetLocalize@1005 : Boolean;SetDimension@1004 : Boolean);
    BEGIN
      if not ConfigPackageField.GET(PackageCode,TableID,FieldID) then begin
        ConfigPackageField.INIT;
        ConfigPackageField.VALIDATE("Package Code",PackageCode);
        ConfigPackageField.VALIDATE("Table ID",TableID);
        ConfigPackageField.VALIDATE(Dimension,SetDimension);
        ConfigPackageField.VALIDATE("Field ID",FieldID);
        ConfigPackageField."Field Name" := FieldName;
        ConfigPackageField."Field Caption" := FieldCaption;
        ConfigPackageField."Primary Key" := ConfigValidateMgt.IsKeyField(TableID,FieldID);
        ConfigPackageField."Include Field" := SetInclude or ConfigPackageField."Primary Key";
        if not SetDimension then begin
          ConfigPackageField."Relation Table ID" := ConfigValidateMgt.GetRelationTableID(TableID,FieldID);
          ConfigPackageField."Validate Field" :=
            ConfigPackageField."Include Field" and SetValidate and not ValidateException(TableID,FieldID);
        end;
        ConfigPackageField."Localize Field" := SetLocalize;
        ConfigPackageField.Dimension := SetDimension;
        if SetDimension then
          ConfigPackageField."Processing Order" := ConfigPackageField."Field ID";
        ConfigPackageField.INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertPackageFilter@10(VAR ConfigPackageFilter@1004 : Record "Config. Package Filter";PackageCode@1003 : Code[20];TableID@1002 : Integer;ProcessingRuleNo@1006 : Integer;FieldID@1001 : Integer;FieldFilter@1005 : Text[250]);
    BEGIN
      if not ConfigPackageFilter.GET(PackageCode,TableID,0,FieldID) then begin
        ConfigPackageFilter.INIT;
        ConfigPackageFilter.VALIDATE("Package Code",PackageCode);
        ConfigPackageFilter.VALIDATE("Table ID",TableID);
        ConfigPackageFilter.VALIDATE("Processing Rule No.",ProcessingRuleNo);
        ConfigPackageFilter.VALIDATE("Field ID",FieldID);
        ConfigPackageFilter.VALIDATE("Field Filter",FieldFilter);
        ConfigPackageFilter.INSERT;
      end else
        if ConfigPackageFilter."Field Filter" <> FieldFilter then begin
          ConfigPackageFilter."Field Filter" := FieldFilter;
          ConfigPackageFilter.MODIFY;
        end;
    END;

    [Internal]
    PROCEDURE InsertPackageRecord@3(ConfigPackageRecord@1001 : Record "Config. Package Record");
    VAR
      RecRef@1000 : RecordRef;
      DelayedInsert@1002 : Boolean;
    BEGIN
      if (ConfigPackageRecord."Package Code" = '') or (ConfigPackageRecord."Table ID" = 0) then
        exit;

      if ConfigMgt.IsSystemTable(ConfigPackageRecord."Table ID") then
        exit;

      RecRef.OPEN(ConfigPackageRecord."Table ID");
      if ApplyMode <> ApplyMode::NonKeyFields then
        RecRef.INIT;

      InsertPrimaryKeyFields(RecRef,ConfigPackageRecord,true,DelayedInsert);

      if ApplyMode = ApplyMode::PrimaryKey then
        UpdateKeyInfoForConfigPackageRecord(RecRef,ConfigPackageRecord);

      if (ApplyMode = ApplyMode::NonKeyFields) or DelayedInsert then
        ModifyRecordDataFields(RecRef,ConfigPackageRecord,true,DelayedInsert);
    END;

    [External]
    PROCEDURE InsertPackageData@31(VAR ConfigPackageData@1000 : Record "Config. Package Data";PackageCode@1001 : Code[20];TableID@1002 : Integer;No@1003 : Integer;FieldID@1004 : Integer;Value@1005 : Text[250];Invalid@1006 : Boolean);
    BEGIN
      if not ConfigPackageData.GET(PackageCode,TableID,No,FieldID) then begin
        ConfigPackageData.INIT;
        ConfigPackageData."Package Code" := PackageCode;
        ConfigPackageData."Table ID" := TableID;
        ConfigPackageData."No." := No;
        ConfigPackageData."Field ID" := FieldID;
        ConfigPackageData.Value := Value;
        ConfigPackageData.Invalid := Invalid;
        ConfigPackageData.INSERT;
      end else
        if ConfigPackageData.Value <> Value then begin
          ConfigPackageData.Value := Value;
          ConfigPackageData.MODIFY;
        end;
    END;

    [External]
    PROCEDURE InsertProcessingRule@71(VAR ConfigTableProcessingRule@1000 : Record "Config. Table Processing Rule";ConfigPackageTable@1001 : Record "Config. Package Table";RuleNo@1002 : Integer;NewAction@1003 : Option);
    BEGIN
      with ConfigTableProcessingRule do begin
        VALIDATE("Package Code",ConfigPackageTable."Package Code");
        VALIDATE("Table ID",ConfigPackageTable."Table ID");
        VALIDATE("Rule No.",RuleNo);
        VALIDATE(Action,NewAction);
        INSERT(true);
      end;
    END;

    [External]
    PROCEDURE InsertProcessingRuleCustom@66(VAR ConfigTableProcessingRule@1000 : Record "Config. Table Processing Rule";ConfigPackageTable@1001 : Record "Config. Package Table";RuleNo@1002 : Integer;CodeunitID@1003 : Integer);
    BEGIN
      with ConfigTableProcessingRule do begin
        VALIDATE("Package Code",ConfigPackageTable."Package Code");
        VALIDATE("Table ID",ConfigPackageTable."Table ID");
        VALIDATE("Rule No.",RuleNo);
        VALIDATE(Action,Action::Custom);
        VALIDATE("Custom Processing Codeunit ID",CodeunitID);
        INSERT(true);
      end;
    END;

    [External]
    PROCEDURE SetSkipTableTriggers@55(VAR ConfigPackageTable@1001 : Record "Config. Package Table";PackageCode@1002 : Code[20];TableID@1000 : Integer;Skip@1003 : Boolean);
    BEGIN
      if ConfigPackageTable.GET(PackageCode,TableID) then begin
        ConfigPackageTable.VALIDATE("Skip Table Triggers",Skip);
        ConfigPackageTable.MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE GetNumberOfRecordsInserted@80() : Integer;
    BEGIN
      exit(RecordsInsertedCount);
    END;

    [External]
    PROCEDURE GetNumberOfRecordsModified@81() : Integer;
    BEGIN
      exit(RecordsModifiedCount);
    END;

    LOCAL PROCEDURE InsertPrimaryKeyFields@40(VAR RecRef@1000 : RecordRef;ConfigPackageRecord@1002 : Record "Config. Package Record";DoInsert@1008 : Boolean;VAR DelayedInsert@1006 : Boolean);
    VAR
      ConfigPackageData@1001 : Record "Config. Package Data";
      ConfigPackageField@1007 : Record "Config. Package Field";
      TempConfigPackageField@1010 : TEMPORARY Record "Config. Package Field";
      ConfigPackageError@1005 : Record "Config. Package Error";
      RecRef1@1004 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageData.SETRANGE("No.",ConfigPackageRecord."No.");

      GetKeyFieldsOrder(RecRef,ConfigPackageRecord."Package Code",TempConfigPackageField);
      GetFieldsMarkedAsPrimaryKey(ConfigPackageRecord."Package Code",RecRef.NUMBER,TempConfigPackageField);

      TempConfigPackageField.RESET;
      TempConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");

      TempConfigPackageField.FINDSET;
      repeat
        FieldRef := RecRef.FIELD(TempConfigPackageField."Field ID");
        ConfigPackageData.SETRANGE("Field ID",TempConfigPackageField."Field ID");
        if ConfigPackageData.FINDFIRST then begin
          ConfigPackageField.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."Field ID");
          UpdateValueUsingMapping(ConfigPackageData,ConfigPackageField,ConfigPackageRecord."Package Code");
          ValidationFieldID := FieldRef.NUMBER;
          ConfigValidateMgt.EvaluateTextToFieldRef(
            ConfigPackageData.Value,FieldRef,ConfigPackageField."Validate Field" and (ApplyMode = ApplyMode::PrimaryKey));
        end else
          ERROR(KeyFieldValueMissingErr,FieldRef.NAME,RecRef.NAME,ConfigPackageData."No.");
      until TempConfigPackageField.NEXT = 0;

      RecRef1 := RecRef.DUPLICATE;

      if RecRef1.FIND then begin
        RecRef := RecRef1;
        exit
      end;
      if ((ConfigPackageRecord."Package Code" = QBPackageCodeTxt) or (ConfigPackageRecord."Package Code" = MSGPPackageCodeTxt)) and
         (ConfigPackageRecord."Table ID" = 15)
      then
        if ConfigPackageError.GET(
             ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",1)
        then
          exit;

      if DoInsert then begin
        DelayedInsert := InsertRecord(RecRef,ConfigPackageRecord);
        RecordsInsertedCount += 1;
      end else
        DelayedInsert := false;
    END;

    LOCAL PROCEDURE UpdateKeyInfoForConfigPackageRecord@128(RecRef@1001 : RecordRef;ConfigPackageRecord@1000 : Record "Config. Package Record");
    VAR
      ConfigPackageData@1005 : Record "Config. Package Data";
      KeyRef@1004 : KeyRef;
      FieldRef@1003 : FieldRef;
      KeyFieldCount@1002 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      for KeyFieldCount := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);

        ConfigPackageData.GET(
          ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",FieldRef.NUMBER);
        ConfigPackageData.Value := FieldRef.VALUE;
        ConfigPackageData.MODIFY;
      end;
    END;

    [External]
    PROCEDURE InitPackageRecord@42(VAR ConfigPackageRecord@1001 : Record "Config. Package Record";PackageCode@1002 : Code[20];TableID@1000 : Integer);
    VAR
      NextNo@1003 : Integer;
    BEGIN
      ConfigPackageRecord.RESET;
      ConfigPackageRecord.SETRANGE("Package Code",PackageCode);
      ConfigPackageRecord.SETRANGE("Table ID",TableID);
      if ConfigPackageRecord.FINDLAST then
        NextNo := ConfigPackageRecord."No." + 1
      else
        NextNo := 1;

      ConfigPackageRecord.INIT;
      ConfigPackageRecord."Package Code" := PackageCode;
      ConfigPackageRecord."Table ID" := TableID;
      ConfigPackageRecord."No." := NextNo;
      ConfigPackageRecord.INSERT;
    END;

    LOCAL PROCEDURE InsertRecord@86(VAR RecRef@1000 : RecordRef;ConfigPackageRecord@1001 : Record "Config. Package Record") : Boolean;
    VAR
      ConfigPackageTable@1003 : Record "Config. Package Table";
      ConfigInsertWithValidation@1004 : Codeunit "Config. Insert With Validation";
    BEGIN
      ConfigPackageTable.GET(ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID");
      if ConfigPackageTable."Skip Table Triggers" then
        RecRef.INSERT
      else begin
        COMMIT;
        ConfigInsertWithValidation.SetInsertParameters(RecRef);
        if not ConfigInsertWithValidation.RUN then begin
          CLEARLASTERROR;
          exit(true);
        end;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE ModifyRecordDataFields@39(VAR RecRef@1004 : RecordRef;ConfigPackageRecord@1005 : Record "Config. Package Record";DoModify@1013 : Boolean;DelayedInsert@1009 : Boolean);
    VAR
      ConfigPackageData@1002 : Record "Config. Package Data";
      ConfigPackageField@1000 : Record "Config. Package Field";
      ConfigQuestion@1003 : Record "Config. Question";
      Field@1007 : Record Field;
      ConfigPackageTable@1012 : Record "Config. Package Table";
      ConfigPackageError@1008 : Record "Config. Package Error";
      ConfigQuestionnaireMgt@1006 : Codeunit "Questionnaire Management";
      FieldRef@1001 : FieldRef;
      IsTemplate@1010 : Boolean;
    BEGIN
      ConfigPackageField.RESET;
      ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      ConfigPackageField.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageField.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageField.SETRANGE("Include Field",true);
      ConfigPackageField.SETRANGE(Dimension,false);

      ConfigPackageTable.GET(ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID");
      if DoModify or DelayedInsert then
        ApplyTemplate(ConfigPackageTable,RecRef);

      if ConfigPackageField.FINDSET then
        repeat
          ValidationFieldID := ConfigPackageField."Field ID";
          if ((ConfigPackageRecord."Package Code" = QBPackageCodeTxt) or (ConfigPackageRecord."Package Code" = MSGPPackageCodeTxt)) and
             ((ConfigPackageRecord."Table ID" = 15) or (ConfigPackageRecord."Table ID" = 18) or
              (ConfigPackageRecord."Table ID" = 23) or (ConfigPackageRecord."Table ID" = 27))
          then
            if ConfigPackageError.GET(
                 ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",1)
            then
              exit;

          if ConfigPackageData.GET(
               ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",
               ConfigPackageField."Field ID")
          then
            if not ConfigPackageField."Primary Key" then begin
              IsTemplate := IsTemplateField(ConfigPackageTable."Data Template",ConfigPackageField."Field ID");
              if not IsTemplate or (IsTemplate and (ConfigPackageData.Value <> '')) then begin
                FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
                UpdateValueUsingMapping(ConfigPackageData,ConfigPackageField,ConfigPackageRecord."Package Code");

                case true of
                  IsBLOBField(ConfigPackageData."Table ID",ConfigPackageData."Field ID"):
                    EvaluateBLOBToFieldRef(ConfigPackageData,FieldRef);
                  IsMediaSetField(ConfigPackageData."Table ID",ConfigPackageData."Field ID"):
                    ImportMediaSetFiles(ConfigPackageData,FieldRef,DoModify);
                  IsMediaField(ConfigPackageData."Table ID",ConfigPackageData."Field ID"):
                    ImportMediaFiles(ConfigPackageData,FieldRef,DoModify);
                  else
                    ConfigValidateMgt.EvaluateTextToFieldRef(
                      ConfigPackageData.Value,FieldRef,
                      ConfigPackageField."Validate Field" and ((ApplyMode = ApplyMode::NonKeyFields) or DelayedInsert));
                end;
              end;
            end;
        until ConfigPackageField.NEXT = 0;

      if DoModify then begin
        if DelayedInsert then
          RecRef.INSERT(true)
        else begin
          RecRef.MODIFY(not ConfigPackageTable."Skip Table Triggers");
          RecordsModifiedCount += 1;
        end;

        if RecRef.NUMBER <> DATABASE::"Config. Question" then
          exit;

        RecRef.SETTABLE(ConfigQuestion);

        SetFieldFilter(Field,ConfigQuestion."Table ID",ConfigQuestion."Field ID");
        if Field.FINDFIRST then
          ConfigQuestionnaireMgt.ModifyConfigQuestionAnswer(ConfigQuestion,Field);
      end;
    END;

    LOCAL PROCEDURE ApplyTemplate@68(ConfigPackageTable@1002 : Record "Config. Package Table";VAR RecRef@1000 : RecordRef);
    VAR
      ConfigTemplateHeader@1003 : Record "Config. Template Header";
      ConfigTemplateMgt@1001 : Codeunit "Config. Template Management";
    BEGIN
      if ConfigTemplateHeader.GET(ConfigPackageTable."Data Template") then begin
        ConfigTemplateMgt.UpdateRecord(ConfigTemplateHeader,RecRef);
        InsertDimensionsFromTemplates(ConfigPackageTable."Table ID",ConfigTemplateHeader,RecRef);
      end;
    END;

    LOCAL PROCEDURE InsertDimensionsFromTemplates@89(TableID@1005 : Integer;ConfigTemplateHeader@1001 : Record "Config. Template Header";VAR RecRef@1000 : RecordRef);
    VAR
      DimensionsTemplate@1004 : Record "Dimensions Template";
      KeyRef@1003 : KeyRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      if KeyRef.FIELDCOUNT = 1 then begin
        FieldRef := KeyRef.FIELDINDEX(1);
        if FORMAT(FieldRef.VALUE) <> '' then
          DimensionsTemplate.InsertDimensionsFromTemplates(
            ConfigTemplateHeader,FORMAT(FieldRef.VALUE),TableID);
      end;
    END;

    LOCAL PROCEDURE IsTemplateField@88(TemplateCode@1005 : Code[20];FieldNo@1003 : Integer) : Boolean;
    VAR
      ConfigTemplateHeader@1002 : Record "Config. Template Header";
      ConfigTemplateLine@1001 : Record "Config. Template Line";
    BEGIN
      if TemplateCode = '' then
        exit(false);

      if not ConfigTemplateHeader.GET(TemplateCode) then
        exit(false);

      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.SETRANGE("Field ID",FieldNo);
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::Field);
      if not ConfigTemplateLine.ISEMPTY then
        exit(true);

      ConfigTemplateLine.SETRANGE("Field ID");
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::Template);
      if ConfigTemplateLine.FINDSET then
        repeat
          if IsTemplateField(ConfigTemplateLine."Template Code",FieldNo) then
            exit(true);
        until ConfigTemplateLine.NEXT = 0;
      exit(false);
    END;

    [Internal]
    PROCEDURE ValidatePackageRelations@11(VAR ConfigPackageTable@1000 : Record "Config. Package Table";VAR TempConfigPackageTable@1001 : TEMPORARY Record "Config. Package Table";SetupProcessingOrderForTables@1003 : Boolean);
    VAR
      TableCount@1002 : Integer;
    BEGIN
      if SetupProcessingOrderForTables then
        SetupProcessingOrder(ConfigPackageTable);

      with ConfigPackageTable do begin
        TableCount := COUNT;
        if not HideDialog then
          ConfigProgressBar.Init(TableCount,1,ValidatingTableRelationsMsg);

        MODIFYALL(Validated,false);

        SETCURRENTKEY("Package Processing Order","Processing Order");
        if FINDSET then
          repeat
            CALCFIELDS("Table Name");
            if not HideDialog then
              ConfigProgressBar.Update("Table Name");
            ValidateTableRelation("Package Code","Table ID",TempConfigPackageTable);

            TempConfigPackageTable.INIT;
            TempConfigPackageTable."Package Code" := "Package Code";
            TempConfigPackageTable."Table ID" := "Table ID";
            TempConfigPackageTable.INSERT;
            Validated := true;
            MODIFY;
          until NEXT = 0;
        if not HideDialog then
          ConfigProgressBar.Close;
      end;

      if not HideDialog then
        MESSAGE(NoTablesMsg,TableCount);
    END;

    LOCAL PROCEDURE ValidateTableRelation@46(PackageCode@1003 : Code[20];TableId@1000 : Integer;VAR ValidatedConfigPackageTable@1002 : Record "Config. Package Table");
    VAR
      ConfigPackageField@1001 : Record "Config. Package Field";
    BEGIN
      ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      ConfigPackageField.SETRANGE("Package Code",PackageCode);
      ConfigPackageField.SETRANGE("Table ID",TableId);
      ConfigPackageField.SETRANGE("Validate Field",true);
      if ConfigPackageField.FINDSET then
        repeat
          ValidateFieldRelation(ConfigPackageField,ValidatedConfigPackageTable);
        until ConfigPackageField.NEXT = 0;
    END;

    [Internal]
    PROCEDURE ValidateFieldRelation@35(ConfigPackageField@1007 : Record "Config. Package Field";VAR ValidatedConfigPackageTable@1006 : Record "Config. Package Table") NoValidateErrors : Boolean;
    VAR
      ConfigPackageData@1005 : Record "Config. Package Data";
    BEGIN
      NoValidateErrors := true;

      ConfigPackageData.SETRANGE("Package Code",ConfigPackageField."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageField."Table ID");
      ConfigPackageData.SETRANGE("Field ID",ConfigPackageField."Field ID");
      if ConfigPackageData.FINDSET then
        repeat
          NoValidateErrors :=
            NoValidateErrors and
            ValidatePackageDataRelation(ConfigPackageData,ValidatedConfigPackageTable,ConfigPackageField,true);
        until ConfigPackageData.NEXT = 0;
    END;

    [Internal]
    PROCEDURE ValidateSinglePackageDataRelation@38(VAR ConfigPackageData@1002 : Record "Config. Package Data") : Boolean;
    VAR
      TempConfigPackageTable@1000 : TEMPORARY Record "Config. Package Table";
      ConfigPackageField@1001 : Record "Config. Package Field";
    BEGIN
      ConfigPackageField.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."Field ID");
      exit(ValidatePackageDataRelation(ConfigPackageData,TempConfigPackageTable,ConfigPackageField,false));
    END;

    LOCAL PROCEDURE ValidatePackageDataRelation@36(VAR ConfigPackageData@1000 : Record "Config. Package Data";VAR ValidatedConfigPackageTable@1002 : Record "Config. Package Table";VAR ConfigPackageField@1003 : Record "Config. Package Field";GenerateFieldError@1001 : Boolean) : Boolean;
    VAR
      ErrorText@1006 : Text[250];
      RelationTableNo@1005 : Integer;
      RelationFieldNo@1004 : Integer;
      DataInPackageData@1007 : Boolean;
    BEGIN
      if FORMAT(ConfigPackageData.Value) <> '' then begin
        DataInPackageData := false;
        if GetRelationInfo(ConfigPackageField,RelationTableNo,RelationFieldNo) then
          DataInPackageData :=
            ValidateFieldRelationAgainstPackageData(
              ConfigPackageData,ValidatedConfigPackageTable,RelationTableNo,RelationFieldNo);

        if not DataInPackageData then begin
          ErrorText := ValidateFieldRelationAgainstCompanyData(ConfigPackageData);
          if ErrorText <> '' then begin
            if GenerateFieldError then
              FieldError(ConfigPackageData,ErrorText,ErrorTypeEnum::TableRelation);
            exit(false);
          end;
        end;
      end;

      if PackageErrorsExists(ConfigPackageData,ErrorTypeEnum::TableRelation) then
        CleanFieldError(ConfigPackageData);
      exit(true);
    END;

    [External]
    PROCEDURE ValidateException@20(TableID@1000 : Integer;FieldID@1001 : Integer) : Boolean;
    BEGIN
      case TableID of
        // Dimension Value ID: ERROR message
        DATABASE::"Dimension Value":
          exit(FieldID = 12);
        // Default Dimension: multi-relations
        DATABASE::"Default Dimension":
          exit(FieldID = 2);
        // VAT %: CheckVATIdentifier
        DATABASE::"VAT Posting Setup":
          exit(FieldID = 4);
        // Table ID - OnValidate
        DATABASE::"Config. Template Header":
          exit(FieldID = 3);
        // Field ID relation
        DATABASE::"Config. Template Line":
          exit(FieldID in [4,8,12]);
        // Dimensions as Columns
        DATABASE::"Config. Line":
          exit(FieldID = 12);
        // Customer : Contact OnValidate
        DATABASE::Customer:
          exit(FieldID = 8);
        // Vendor : Contact OnValidate
        DATABASE::Vendor:
          exit(FieldID = 8);
        // Item : Base Unit of Measure OnValidate
        DATABASE::Item:
          exit(FieldID = 8);
        // "No." to pass not manual No. Series
        DATABASE::"Sales Header",DATABASE::"Purchase Header":
          exit(FieldID = 3);
        // "Document No." conditional relation
        DATABASE::"Sales Line",DATABASE::"Purchase Line":
          exit(FieldID = 3);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE IsDimSetIDField@44(TableId@1001 : Integer;FieldId@1002 : Integer) : Boolean;
    VAR
      DimensionValue@1000 : Record "Dimension Value";
    BEGIN
      exit((TableId = DATABASE::"Dimension Value") and (DimensionValue.FIELDNO("Dimension Value ID") = FieldId));
    END;

    LOCAL PROCEDURE GetRelationInfo@43(ConfigPackageField@1004 : Record "Config. Package Field";VAR RelationTableNo@1000 : Integer;VAR RelationFieldNo@1001 : Integer) : Boolean;
    BEGIN
      exit(
        ConfigValidateMgt.GetRelationInfoByIDs(
          ConfigPackageField."Table ID",ConfigPackageField."Field ID",RelationTableNo,RelationFieldNo));
    END;

    LOCAL PROCEDURE ValidateFieldRelationAgainstCompanyData@25(ConfigPackageData@1006 : Record "Config. Package Data") : Text[250];
    VAR
      TempConfigPackageField@1003 : TEMPORARY Record "Config. Package Field";
      ConfigPackageRecord@1002 : Record "Config. Package Record";
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
      DelayedInsert@1004 : Boolean;
    BEGIN
      RecRef.OPEN(ConfigPackageData."Table ID");
      ConfigPackageRecord.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.");
      InsertPrimaryKeyFields(RecRef,ConfigPackageRecord,false,DelayedInsert);
      ModifyRecordDataFields(RecRef,ConfigPackageRecord,false,false);

      FieldRef := RecRef.FIELD(ConfigPackageData."Field ID");
      ConfigValidateMgt.EvaluateValue(FieldRef,ConfigPackageData.Value,false);

      GetFieldsOrder(RecRef,ConfigPackageRecord."Package Code",TempConfigPackageField);
      exit(ConfigValidateMgt.ValidateFieldRefRelationAgainstCompanyData(FieldRef,TempConfigPackageField));
    END;

    LOCAL PROCEDURE ValidateFieldRelationAgainstPackageData@29(ConfigPackageData@1002 : Record "Config. Package Data";VAR ValidatedConfigPackageTable@1001 : Record "Config. Package Table";RelationTableNo@1005 : Integer;RelationFieldNo@1004 : Integer) : Boolean;
    VAR
      RelatedConfigPackageData@1006 : Record "Config. Package Data";
      ConfigPackageTable@1000 : Record "Config. Package Table";
      TablePriority@1003 : Integer;
    BEGIN
      if not ConfigPackageTable.GET(ConfigPackageData."Package Code",RelationTableNo) then
        exit(false);

      TablePriority := ConfigPackageTable."Processing Order";
      if ConfigValidateMgt.IsRelationInKeyFields(ConfigPackageData."Table ID",ConfigPackageData."Field ID") then begin
        ConfigPackageTable.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID");

        if ConfigPackageTable."Processing Order" < TablePriority then
          exit(false);

        // That current order will be for apply data
        ValidatedConfigPackageTable.RESET;
        ValidatedConfigPackageTable.SETRANGE("Table ID",RelationTableNo);
        if ValidatedConfigPackageTable.ISEMPTY then
          exit(false);
      end;

      RelatedConfigPackageData.SETRANGE("Package Code",ConfigPackageData."Package Code");
      RelatedConfigPackageData.SETRANGE("Table ID",RelationTableNo);
      RelatedConfigPackageData.SETRANGE("Field ID",RelationFieldNo);
      RelatedConfigPackageData.SETRANGE(Value,ConfigPackageData.Value);
      exit(not RelatedConfigPackageData.ISEMPTY);
    END;

    [Internal]
    PROCEDURE RecordError@8(VAR ConfigPackageRecord@1000 : Record "Config. Package Record";ValidationFieldID@1003 : Integer;ErrorText@1001 : Text[250]);
    VAR
      ConfigPackageError@1002 : Record "Config. Package Error";
      ConfigPackageData@1004 : Record "Config. Package Data";
      RecordID@1005 : RecordID;
    BEGIN
      if ErrorText = '' then
        exit;

      ConfigPackageError.INIT;
      ConfigPackageError."Package Code" := ConfigPackageRecord."Package Code";
      ConfigPackageError."Table ID" := ConfigPackageRecord."Table ID";
      ConfigPackageError."Record No." := ConfigPackageRecord."No.";
      ConfigPackageError."Field ID" := ValidationFieldID;
      ConfigPackageError."Error Text" := ErrorText;

      ConfigPackageData.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageData.SETRANGE("No.",ConfigPackageRecord."No.");
      if EVALUATE(RecordID,GetRecordIDOfRecordError(ConfigPackageData)) then
        ConfigPackageError."Record ID" := RecordID;
      if not ConfigPackageError.INSERT then
        ConfigPackageError.MODIFY;
      ConfigPackageRecord.Invalid := true;
      ConfigPackageRecord.MODIFY;
    END;

    [Internal]
    PROCEDURE FieldError@9(VAR ConfigPackageData@1000 : Record "Config. Package Data";ErrorText@1001 : Text[250];ErrorType@1004 : ',TableRelation');
    VAR
      ConfigPackageRecord@1003 : Record "Config. Package Record";
      ConfigPackageError@1002 : Record "Config. Package Error";
      ConfigPackageData2@1006 : Record "Config. Package Data";
      RecordID@1005 : RecordID;
    BEGIN
      if ErrorText = '' then
        exit;

      ConfigPackageError.INIT;
      ConfigPackageError."Package Code" := ConfigPackageData."Package Code";
      ConfigPackageError."Table ID" := ConfigPackageData."Table ID";
      ConfigPackageError."Record No." := ConfigPackageData."No.";
      ConfigPackageError."Field ID" := ConfigPackageData."Field ID";
      ConfigPackageError."Error Text" := ErrorText;
      ConfigPackageError."Error Type" := ErrorType;

      ConfigPackageData2.SETRANGE("Package Code",ConfigPackageData."Package Code");
      ConfigPackageData2.SETRANGE("Table ID",ConfigPackageData."Table ID");
      ConfigPackageData2.SETRANGE("No.",ConfigPackageData."No.");
      if EVALUATE(RecordID,GetRecordIDOfRecordError(ConfigPackageData2)) then
        ConfigPackageError."Record ID" := RecordID;
      if not ConfigPackageError.INSERT then
        ConfigPackageError.MODIFY;

      ConfigPackageData.Invalid := true;
      ConfigPackageData.MODIFY;

      ConfigPackageRecord.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.");
      ConfigPackageRecord.Invalid := true;
      ConfigPackageRecord.MODIFY;
    END;

    [External]
    PROCEDURE CleanRecordError@15(VAR ConfigPackageRecord@1000 : Record "Config. Package Record");
    VAR
      ConfigPackageError@1001 : Record "Config. Package Error";
    BEGIN
      ConfigPackageError.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageError.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageError.SETRANGE("Record No.",ConfigPackageRecord."No.");
      ConfigPackageError.DELETEALL;
    END;

    [External]
    PROCEDURE CleanFieldError@18(VAR ConfigPackageData@1000 : Record "Config. Package Data");
    VAR
      ConfigPackageError@1001 : Record "Config. Package Error";
      ConfigPackageRecord@1002 : Record "Config. Package Record";
    BEGIN
      ConfigPackageError.SETRANGE("Package Code",ConfigPackageData."Package Code");
      ConfigPackageError.SETRANGE("Table ID",ConfigPackageData."Table ID");
      ConfigPackageError.SETRANGE("Record No.",ConfigPackageData."No.");
      ConfigPackageError.SETRANGE("Field ID",ConfigPackageData."Field ID");
      ConfigPackageError.DELETEALL;

      ConfigPackageData.Invalid := false;
      ConfigPackageData.MODIFY;

      ConfigPackageRecord.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.");

      ConfigPackageError.RESET;
      ConfigPackageError.SETRANGE("Package Code",ConfigPackageData."Package Code");
      ConfigPackageError.SETRANGE("Table ID",ConfigPackageData."Table ID");
      ConfigPackageError.SETRANGE("Record No.",ConfigPackageData."No.");
      if ConfigPackageError.FINDFIRST then
        ConfigPackageRecord.Invalid := true
      else
        ConfigPackageRecord.Invalid := false;

      ConfigPackageRecord.MODIFY;
    END;

    LOCAL PROCEDURE CleanPackageErrors@45(PackageCode@1000 : Code[20];TableFilter@1002 : Text);
    VAR
      ConfigPackageError@1001 : Record "Config. Package Error";
    BEGIN
      ConfigPackageError.SETRANGE("Package Code",PackageCode);
      if TableFilter <> '' then
        ConfigPackageError.SETFILTER("Table ID",TableFilter);

      ConfigPackageError.DELETEALL;
    END;

    LOCAL PROCEDURE PackageErrorsExists@59(ConfigPackageData@1000 : Record "Config. Package Data";ErrorType@1001 : 'General,TableRelation') : Boolean;
    VAR
      ConfigPackageError@1002 : Record "Config. Package Error";
    BEGIN
      if not ConfigPackageError.GET(
           ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.",ConfigPackageData."Field ID")
      then
        exit(false);

      if ConfigPackageError."Error Type" = ErrorType then
        exit(true);

      exit(false)
    END;

    [External]
    PROCEDURE GetValidationFieldID@33() : Integer;
    BEGIN
      exit(ValidationFieldID);
    END;

    [Internal]
    PROCEDURE ApplyConfigLines@17(VAR ConfigLine@1003 : Record "Config. Line");
    VAR
      ConfigPackage@1000 : Record "Config. Package";
      ConfigPackageTable@1002 : Record "Config. Package Table";
      ConfigMgt@1004 : Codeunit "Config. Management";
      Filter@1001 : Text;
    BEGIN
      ConfigLine.FINDFIRST;
      ConfigPackage.GET(ConfigLine."Package Code");
      ConfigPackageTable.SETRANGE("Package Code",ConfigLine."Package Code");
      Filter := ConfigMgt.MakeTableFilter(ConfigLine,false);

      if Filter = '' then
        exit;

      ConfigPackageTable.SETFILTER("Table ID",Filter);
      ApplyPackage(ConfigPackage,ConfigPackageTable,true);
    END;

    [Internal]
    PROCEDURE ApplyPackage@12(ConfigPackage@1004 : Record "Config. Package";VAR ConfigPackageTable@1000 : Record "Config. Package Table";SetupProcessingOrderForTables@1003 : Boolean) ErrorCount : Integer;
    VAR
      DimSetEntry@1006 : Record "Dimension Set Entry";
      TableCount@1001 : Integer;
      DimSetIDUsed@1007 : Boolean;
      ResetPostingSetup@1002 : Boolean;
    BEGIN
      InventorySetup.RESET;
      InventorySetup.FINDFIRST;
      ResetPostingSetup := false;
      if InventorySetup."Automatic Cost Posting" then begin
        InventorySetup."Automatic Cost Posting" := false;
        InventorySetup.MODIFY;
        ResetPostingSetup := true;
      end;
      ConfigPackage.CALCFIELDS("No. of Records","No. of Errors");
      TableCount := ConfigPackageTable.COUNT;
      if (ConfigPackage.Code <> MSGPPackageCodeTxt) and (ConfigPackage.Code <> QBPackageCodeTxt) then
        // Hold the error count for duplicate records.
        ErrorCount := ConfigPackage."No. of Errors";
      if (TableCount = 0) or (ConfigPackage."No. of Records" = 0) then
        exit;
      if (ConfigPackage.Code <> MSGPPackageCodeTxt) and (ConfigPackage.Code <> QBPackageCodeTxt) then
        // Skip this code to hold the error count for duplicate records.
        CleanPackageErrors(ConfigPackage.Code,ConfigPackageTable.GETFILTER("Table ID"));

      if SetupProcessingOrderForTables then begin
        SetupProcessingOrder(ConfigPackageTable);
        COMMIT;
      end;

      DimSetIDUsed := false;
      if ConfigPackageTable.FINDSET then
        repeat
          DimSetIDUsed := ConfigMgt.IsDimSetIDTable(ConfigPackageTable."Table ID");
        until (ConfigPackageTable.NEXT = 0) or DimSetIDUsed;

      if DimSetIDUsed and not DimSetEntry.ISEMPTY then
        UpdateDimSetIDValues(ConfigPackage);
      if (ConfigPackage.Code <> MSGPPackageCodeTxt) and (ConfigPackage.Code <> QBPackageCodeTxt) then
        DeleteAppliedPackageRecords(TempAppliedConfigPackageRecord); // Do not delete PackageRecords till transactions are created

      COMMIT;

      TempAppliedConfigPackageRecord.DELETEALL;
      TempConfigRecordForProcessing.DELETEALL;
      CLEAR(RecordsInsertedCount);
      CLEAR(RecordsModifiedCount);

      // Handle independent tables
      ConfigPackageTable.SETRANGE("Parent Table ID",0);
      ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::PrimaryKey);
      ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::NonKeyFields);

      // Handle children tables
      ConfigPackageTable.SETFILTER("Parent Table ID",'>0');
      ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::PrimaryKey);
      ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::NonKeyFields);

      ProcessAppliedPackageRecords(TempConfigRecordForProcessing,TempAppliedConfigPackageRecord);
      if (ConfigPackage.Code <> MSGPPackageCodeTxt) and (ConfigPackage.Code <> QBPackageCodeTxt) then
        DeleteAppliedPackageRecords(TempAppliedConfigPackageRecord); // Do not delete PackageRecords till transactions are created

      ConfigPackage.CALCFIELDS("No. of Errors");
      ErrorCount := ConfigPackage."No. of Errors" - ErrorCount;
      if ErrorCount < 0 then
        ErrorCount := 0;

      RecordsModifiedCount := MaxInt(RecordsModifiedCount - RecordsInsertedCount,0);

      if not HideDialog then
        MESSAGE(NoTablesAndErrorsMsg,TableCount,ErrorCount,RecordsInsertedCount,RecordsModifiedCount);

      if ResetPostingSetup then begin
        GeneralLedgerSetup.RESET;
        GeneralLedgerSetup.FINDFIRST;
        if not GeneralLedgerSetup."Use Legacy G/L Entry Locking" then begin
          GeneralLedgerSetup."Use Legacy G/L Entry Locking" := true;
          GeneralLedgerSetup.MODIFY;
        end;
        InventorySetup.RESET;
        InventorySetup.FINDFIRST;
        InventorySetup."Automatic Cost Posting" := true;
        InventorySetup.MODIFY;
        ResetPostingSetup := false;
      end;

      FixIntegrationRecordIds;
    END;

    LOCAL PROCEDURE ApplyPackageTables@24(ConfigPackage@1002 : Record "Config. Package";VAR ConfigPackageTable@1000 : Record "Config. Package Table";ApplyMode@1003 : ',PrimaryKey,NonKeyFields');
    VAR
      ConfigPackageRecord@1001 : Record "Config. Package Record";
    BEGIN
      ConfigPackageTable.SETCURRENTKEY("Package Processing Order","Processing Order");

      if not HideDialog then
        ConfigProgressBar.Init(ConfigPackageTable.COUNT,1,
          STRSUBSTNO(ApplyingPackageMsg,ConfigPackage.Code));
      if ConfigPackageTable.FINDSET then
        repeat
          ConfigPackageTable.CALCFIELDS("Table Name");
          ConfigPackageRecord.SETRANGE("Package Code",ConfigPackageTable."Package Code");
          ConfigPackageRecord.SETRANGE("Table ID",ConfigPackageTable."Table ID");
          if not HideDialog then
            ConfigProgressBar.Update(ConfigPackageTable."Table Name");
          if not IsTableErrorsExists(ConfigPackageTable) then// Added to show item duplicate errors
            ApplyPackageRecords(
              ConfigPackageRecord,ConfigPackageTable."Package Code",ConfigPackageTable."Table ID",ApplyMode);
        until ConfigPackageTable.NEXT = 0;

      if not HideDialog then
        ConfigProgressBar.Close;
    END;

    [Internal]
    PROCEDURE ApplySelectedPackageRecords@14(VAR ConfigPackageRecord@1000 : Record "Config. Package Record";PackageCode@1002 : Code[20];TableNo@1006 : Integer);
    BEGIN
      TempAppliedConfigPackageRecord.DELETEALL;
      TempConfigRecordForProcessing.DELETEALL;

      ApplyPackageRecords(ConfigPackageRecord,PackageCode,TableNo,ApplyMode::PrimaryKey);
      ApplyPackageRecords(ConfigPackageRecord,PackageCode,TableNo,ApplyMode::NonKeyFields);

      ProcessAppliedPackageRecords(TempConfigRecordForProcessing,TempAppliedConfigPackageRecord);
      DeleteAppliedPackageRecords(TempAppliedConfigPackageRecord);
    END;

    LOCAL PROCEDURE ApplyPackageRecords@67(VAR ConfigPackageRecord@1000 : Record "Config. Package Record";PackageCode@1002 : Code[20];TableNo@1006 : Integer;ApplyMode@1004 : ',PrimaryKey,NonKeyFields');
    VAR
      ConfigPackageTable@1005 : Record "Config. Package Table";
      ConfigTableProcessingRule@1012 : Record "Config. Table Processing Rule";
      ConfigPackageMgt@1003 : Codeunit "Config. Package Management";
      ConfigProgressBarRecord@1008 : Codeunit "Config. Progress Bar";
      RecRef@1001 : RecordRef;
      RecordCount@1007 : Integer;
      StepCount@1009 : Integer;
      Counter@1010 : Integer;
      ProcessingRuleIsSet@1013 : Boolean;
    BEGIN
      ConfigPackageTable.GET(PackageCode,TableNo);
      ProcessingRuleIsSet := ConfigTableProcessingRule.FindTableRules(ConfigPackageTable);

      ConfigPackageMgt.SetApplyMode(ApplyMode);
      RecordCount := ConfigPackageRecord.COUNT;
      if not HideDialog and (RecordCount > 1000) then begin
        StepCount := ROUND(RecordCount / 100,1);
        ConfigPackageTable.CALCFIELDS("Table Name");
        ConfigProgressBarRecord.Init(
          RecordCount,StepCount,STRSUBSTNO(ApplyingTableMsg,ConfigPackageTable."Table Name"));
      end;

      Counter := 0;
      if ConfigPackageRecord.FINDSET then begin
        RecRef.OPEN(ConfigPackageRecord."Table ID");
        if ConfigPackageTable."Delete Recs Before Processing" then begin
          RecRef.DELETEALL;
          COMMIT;
        end;
        repeat
          Counter := Counter + 1;
          if (ApplyMode = ApplyMode::PrimaryKey) or not IsRecordErrorsExistsInPrimaryKeyFields(ConfigPackageRecord) then begin
            if ConfigPackageMgt.RUN(ConfigPackageRecord) then begin
              if not ((ApplyMode = ApplyMode::PrimaryKey) or IsRecordErrorsExists(ConfigPackageRecord)) then begin
                CollectAppliedPackageRecord(ConfigPackageRecord,TempAppliedConfigPackageRecord);
                if ProcessingRuleIsSet then
                  CollectRecordForProcessingAction(ConfigPackageRecord,ConfigTableProcessingRule);
              end
            end else
              if GETLASTERRORTEXT <> '' then begin
                ConfigPackageMgt.RecordError(
                  ConfigPackageRecord,ConfigPackageMgt.GetValidationFieldID,COPYSTR(GETLASTERRORTEXT,1,250));
                CLEARLASTERROR;
                COMMIT;
              end;
            RecordsInsertedCount += ConfigPackageMgt.GetNumberOfRecordsInserted;
            RecordsModifiedCount += ConfigPackageMgt.GetNumberOfRecordsModified;
          end;
          if not HideDialog and (RecordCount > 1000) then
            ConfigProgressBarRecord.Update(STRSUBSTNO(RecordsXofYMsg,Counter,RecordCount));
        until ConfigPackageRecord.NEXT = 0;
      end;

      if not HideDialog and (RecordCount > 1000) then
        ConfigProgressBarRecord.Close;
    END;

    LOCAL PROCEDURE CollectRecordForProcessingAction@70(ConfigPackageRecord@1000 : Record "Config. Package Record";VAR ConfigTableProcessingRule@1001 : Record "Config. Table Processing Rule");
    BEGIN
      ConfigTableProcessingRule.FINDSET;
      repeat
        if ConfigPackageRecord.FitsProcessingFilter(ConfigTableProcessingRule."Rule No.") then
          TempConfigRecordForProcessing.AddRecord(ConfigPackageRecord,ConfigTableProcessingRule."Rule No.");
      until ConfigTableProcessingRule.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectAppliedPackageRecord@85(ConfigPackageRecord@1000 : Record "Config. Package Record";VAR TempConfigPackageRecord@1001 : TEMPORARY Record "Config. Package Record");
    BEGIN
      TempConfigPackageRecord.INIT;
      TempConfigPackageRecord := ConfigPackageRecord;
      TempConfigPackageRecord.INSERT;
    END;

    LOCAL PROCEDURE DeleteAppliedPackageRecords@82(VAR TempConfigPackageRecord@1000 : TEMPORARY Record "Config. Package Record");
    VAR
      ConfigPackageRecord@1001 : Record "Config. Package Record";
    BEGIN
      if TempConfigPackageRecord.FINDSET then
        repeat
          ConfigPackageRecord.TRANSFERFIELDS(TempConfigPackageRecord);
          ConfigPackageRecord.DELETE(true);
        until TempConfigPackageRecord.NEXT = 0;
      TempConfigPackageRecord.DELETEALL;
      COMMIT;
    END;

    [Internal]
    PROCEDURE ApplyConfigTables@47(ConfigPackage@1002 : Record "Config. Package");
    VAR
      ConfigPackageTable@1000 : Record "Config. Package Table";
    BEGIN
      ConfigPackageTable.RESET;
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTable.SETFILTER("Table ID",'%1|%2|%3|%4|%5|%6|%7|%8',
        DATABASE::"Config. Template Header",DATABASE::"Config. Template Line",
        DATABASE::"Config. Questionnaire",DATABASE::"Config. Question Area",DATABASE::"Config. Question",
        DATABASE::"Config. Line",DATABASE::"Config. Package Filter",DATABASE::"Config. Table Processing Rule");
      if not ConfigPackageTable.ISEMPTY then begin
        COMMIT;
        SetHideDialog(true);
        ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::PrimaryKey);
        ApplyPackageTables(ConfigPackage,ConfigPackageTable,ApplyMode::NonKeyFields);
        DeleteAppliedPackageRecords(TempAppliedConfigPackageRecord);
      end;
    END;

    LOCAL PROCEDURE ProcessAppliedPackageRecords@76(VAR TempConfigRecordForProcessing@1000 : TEMPORARY Record "Config. Record For Processing";VAR TempConfigPackageRecord@1003 : TEMPORARY Record "Config. Package Record");
    VAR
      ConfigTableProcessingRule@1001 : Record "Config. Table Processing Rule";
    BEGIN
      if TempConfigRecordForProcessing.FINDSET then
        repeat
          if not ConfigTableProcessingRule.Process(TempConfigRecordForProcessing) then begin
            TempConfigRecordForProcessing.FindConfigRecord(TempConfigPackageRecord);
            RecordError(TempConfigPackageRecord,0,COPYSTR(GETLASTERRORTEXT,1,250));
            TempConfigPackageRecord.DELETE; // Remove it from the buffer to avoid deletion in the package
            COMMIT;
          end;
        until TempConfigRecordForProcessing.NEXT = 0;
      TempConfigRecordForProcessing.DELETEALL;
    END;

    [External]
    PROCEDURE SetApplyMode@41(NewApplyMode@1000 : ',PrimaryKey,NonKeyFields');
    BEGIN
      ApplyMode := NewApplyMode;
    END;

    [Internal]
    PROCEDURE SetFieldFilter@4(VAR Field@1000 : Record Field;TableID@1001 : Integer;FieldID@1002 : Integer);
    BEGIN
      Field.RESET;
      if TableID > 0 then
        Field.SETRANGE(TableNo,TableID);
      if FieldID > 0 then
        Field.SETRANGE("No.",FieldID);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.SETRANGE(Enabled,true);
    END;

    [External]
    PROCEDURE SelectAllPackageFields@32(VAR ConfigPackageField@1000 : Record "Config. Package Field";SetInclude@1003 : Boolean);
    VAR
      ConfigPackageField2@1004 : Record "Config. Package Field";
    BEGIN
      ConfigPackageField.SETRANGE("Primary Key",false);
      ConfigPackageField.SETRANGE("Include Field",not SetInclude);
      if ConfigPackageField.FINDSET then
        repeat
          ConfigPackageField2.GET(ConfigPackageField."Package Code",ConfigPackageField."Table ID",ConfigPackageField."Field ID");
          ConfigPackageField2."Include Field" := SetInclude;
          ConfigPackageField2."Validate Field" :=
            SetInclude and not ValidateException(ConfigPackageField."Table ID",ConfigPackageField."Field ID");
          ConfigPackageField2.MODIFY;
        until ConfigPackageField.NEXT = 0;
      ConfigPackageField.SETRANGE("Include Field");
      ConfigPackageField.SETRANGE("Primary Key");
    END;

    [Internal]
    PROCEDURE SetupProcessingOrder@53(VAR ConfigPackageTable@1000 : Record "Config. Package Table");
    VAR
      ConfigPackageTableLoop@1001 : Record "Config. Package Table";
      TempConfigPackageTable@1003 : TEMPORARY Record "Config. Package Table";
      Flag@1002 : Integer;
    BEGIN
      ConfigPackageTableLoop.COPYFILTERS(ConfigPackageTable);
      if not ConfigPackageTableLoop.FINDSET(true) then
        exit;

      Flag := -1; // flag for all selected records: record processing order no was not initialized

      repeat
        ConfigPackageTableLoop."Processing Order" := Flag;
        ConfigPackageTableLoop.MODIFY;
      until ConfigPackageTableLoop.NEXT = 0;

      ConfigPackageTable.FINDSET(true);
      repeat
        if ConfigPackageTable."Processing Order" = Flag then begin
          SetupTableProcessingOrder(ConfigPackageTable."Package Code",ConfigPackageTable."Table ID",TempConfigPackageTable,1);
          TempConfigPackageTable.RESET;
          TempConfigPackageTable.DELETEALL;
        end;
      until ConfigPackageTable.NEXT = 0;
    END;

    LOCAL PROCEDURE SetupTableProcessingOrder@49(PackageCode@1010 : Code[20];TableId@1000 : Integer;VAR CheckedConfigPackageTable@1009 : Record "Config. Package Table";StackLevel@1011 : Integer) : Integer;
    VAR
      ConfigPackageTable@1007 : Record "Config. Package Table";
      RecRef@1004 : RecordRef;
      FieldRef@1003 : FieldRef;
      KeyRef@1002 : KeyRef;
      I@1001 : Integer;
      ProcessingOrder@1008 : Integer;
    BEGIN
      if CheckedConfigPackageTable.GET(PackageCode,TableId) then
        ERROR(ProcessingOrderErr,TableId);

      CheckedConfigPackageTable.INIT;
      CheckedConfigPackageTable."Package Code" := PackageCode;
      CheckedConfigPackageTable."Table ID" := TableId;
      // level to cleanup temptable from field branch checking history for case with multiple field branches
      CheckedConfigPackageTable."Processing Order" := StackLevel;
      CheckedConfigPackageTable.INSERT;

      RecRef.OPEN(TableId);
      KeyRef := RecRef.KEYINDEX(1);

      ProcessingOrder := 1;

      for I := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(I);
        if (FieldRef.RELATION <> 0) and (FieldRef.RELATION <> TableId) then
          if ConfigPackageTable.GET(PackageCode,FieldRef.RELATION) then begin
            ProcessingOrder :=
              MaxInt(
                SetupTableProcessingOrder(PackageCode,FieldRef.RELATION,CheckedConfigPackageTable,StackLevel + 1) + 1,ProcessingOrder);
            ClearFieldBranchCheckingHistory(PackageCode,CheckedConfigPackageTable,StackLevel);
          end;
      end;

      if ConfigPackageTable.GET(PackageCode,TableId) then begin
        ConfigPackageTable."Processing Order" := ProcessingOrder;
        AdjustProcessingOrder(ConfigPackageTable);
        ConfigPackageTable.MODIFY;
      end;

      exit(ProcessingOrder);
    END;

    LOCAL PROCEDURE AdjustProcessingOrder@74(VAR ConfigPackageTable@1000 : Record "Config. Package Table");
    VAR
      RelatedConfigPackageTable@1001 : Record "Config. Package Table";
    BEGIN
      with ConfigPackageTable do
        case "Table ID" of
          DATABASE::"G/L Account Category": // Pushing G/L Account Category before G/L Account
            if RelatedConfigPackageTable.GET("Package Code",DATABASE::"G/L Account") then
              "Processing Order" := RelatedConfigPackageTable."Processing Order" - 1;
          DATABASE::"Sales Header"..DATABASE::"Purchase Line": // Moving Sales/Purchase Documents down
            "Processing Order" += 4;
          DATABASE::"Company Information":
            "Processing Order" += 1;
          DATABASE::"Custom Report Layout": // Moving Layouts to be on the top
            "Processing Order" := 0;
          // Moving Jobs tables down so contacts table can be processed first
          DATABASE::Job, DATABASE::"Job Task", DATABASE::"Job Planning Line", DATABASE::"Job Journal Line",
          DATABASE::"Job Journal Batch", DATABASE::"Job Posting Group", DATABASE::"Job Journal Template",
          DATABASE::"Job Responsibility":
            "Processing Order" += 4;
        end;
    END;

    LOCAL PROCEDURE ClearFieldBranchCheckingHistory@37(PackageCode@1002 : Code[20];VAR CheckedConfigPackageTable@1001 : Record "Config. Package Table";StackLevel@1000 : Integer);
    BEGIN
      CheckedConfigPackageTable.SETRANGE("Package Code",PackageCode);
      CheckedConfigPackageTable.SETFILTER("Processing Order",'>%1',StackLevel);
      CheckedConfigPackageTable.DELETEALL;
    END;

    LOCAL PROCEDURE MaxInt@50(Int1@1000 : Integer;Int2@1001 : Integer) : Integer;
    BEGIN
      if Int1 > Int2 then
        exit(Int1);

      exit(Int2);
    END;

    LOCAL PROCEDURE GetDimSetID@57(PackageCode@1005 : Code[20];DimSetValue@1000 : Text[250]) : Integer;
    VAR
      ConfigPackageData@1001 : Record "Config. Package Data";
      ConfigPackageData2@1003 : Record "Config. Package Data";
      TempDimSetEntry@1002 : TEMPORARY Record "Dimension Set Entry";
      DimMgt@1004 : Codeunit DimensionManagement;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code",PackageCode);
      ConfigPackageData.SETRANGE("Table ID",DATABASE::"Dimension Set Entry");
      ConfigPackageData.SETRANGE("Field ID",TempDimSetEntry.FIELDNO("Dimension Set ID"));
      if ConfigPackageData.FINDSET then
        repeat
          if ConfigPackageData.Value = DimSetValue then begin
            TempDimSetEntry.INIT;
            ConfigPackageData2.GET(
              ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.",
              TempDimSetEntry.FIELDNO("Dimension Code"));
            TempDimSetEntry.VALIDATE("Dimension Code",FORMAT(ConfigPackageData2.Value));
            ConfigPackageData2.GET(
              ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.",
              TempDimSetEntry.FIELDNO("Dimension Value Code"));
            TempDimSetEntry.VALIDATE(
              "Dimension Value Code",COPYSTR(FORMAT(ConfigPackageData2.Value),1,MAXSTRLEN(TempDimSetEntry."Dimension Value Code")));
            TempDimSetEntry.INSERT;
          end;
        until ConfigPackageData.NEXT = 0;

      exit(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    [Internal]
    PROCEDURE GetDimSetIDForRecord@1(ConfigPackageRecord@1000 : Record "Config. Package Record") : Integer;
    VAR
      ConfigPackageData@1001 : Record "Config. Package Data";
      ConfigPackageField@1004 : Record "Config. Package Field";
      TempDimSetEntry@1003 : TEMPORARY Record "Dimension Set Entry";
      DimValue@1005 : Record "Dimension Value";
      DimMgt@1002 : Codeunit DimensionManagement;
      ConfigPackageMgt@1008 : Codeunit "Config. Package Management";
      DimCode@1006 : Code[20];
      DimValueCode@1007 : Code[20];
      DimValueNotFound@1009 : Boolean;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageData.SETRANGE("No.",ConfigPackageRecord."No.");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      ConfigPackageData.SETFILTER(Value,'<>%1','');
      if ConfigPackageData.FINDSET then
        repeat
          if ConfigPackageField.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."Field ID") then begin
            ConfigPackageField.TESTFIELD(Dimension);
            DimCode := COPYSTR(FORMAT(ConfigPackageField."Field Name"),1,20);
            DimValueCode := COPYSTR(FORMAT(ConfigPackageData.Value),1,MAXSTRLEN(TempDimSetEntry."Dimension Value Code"));
            TempDimSetEntry.INIT;
            TempDimSetEntry.VALIDATE("Dimension Code",DimCode);
            if DimValue.GET(DimCode,DimValueCode) then begin
              TempDimSetEntry.VALIDATE("Dimension Value Code",DimValueCode);
              TempDimSetEntry.INSERT;
            end else begin
              ConfigPackageMgt.FieldError(
                ConfigPackageData,STRSUBSTNO(DimValueDoesNotExistsErr,DimCode,DimValueCode),ErrorTypeEnum::General);
              DimValueNotFound := true;
            end;
          end;
        until ConfigPackageData.NEXT = 0;
      if DimValueNotFound then
        exit(0);
      exit(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE UpdateDimSetIDValues@61(ConfigPackage@1001 : Record "Config. Package");
    VAR
      ConfigPackageData@1000 : Record "Config. Package Data";
      ConfigPackageTable@1004 : Record "Config. Package Table";
      ConfigPackageTableDim@1002 : Record "Config. Package Table";
      ConfigPackageDataDimSet@1003 : Record "Config. Package Data";
      DimSetEntry@1005 : Record "Dimension Set Entry";
    BEGIN
      ConfigPackageTableDim.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTableDim.SETRANGE("Table ID",DATABASE::Dimension,DATABASE::"Default Dimension Priority");
      if not ConfigPackageTableDim.ISEMPTY then begin
        ApplyPackageTables(ConfigPackage,ConfigPackageTableDim,ApplyMode::PrimaryKey);
        ApplyPackageTables(ConfigPackage,ConfigPackageTableDim,ApplyMode::NonKeyFields);
      end;

      ConfigPackageDataDimSet.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageDataDimSet.SETRANGE("Table ID",DATABASE::"Dimension Set Entry");
      ConfigPackageDataDimSet.SETRANGE("Field ID",DimSetEntry.FIELDNO("Dimension Set ID"));
      if ConfigPackageDataDimSet.ISEMPTY then
        exit;

      ConfigPackageData.RESET;
      ConfigPackageData.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageData.SETFILTER("Table ID",'<>%1',DATABASE::"Dimension Set Entry");
      ConfigPackageData.SETRANGE("Field ID",DATABASE::"Dimension Set Entry");
      if ConfigPackageData.FINDSET(true) then begin
        if not HideDialog then
          ConfigProgressBar.Init(ConfigPackageData.COUNT,1,UpdatingDimSetsMsg);
        repeat
          ConfigPackageTable.GET(ConfigPackage.Code,ConfigPackageData."Table ID");
          ConfigPackageTable.CALCFIELDS("Table Name");
          if not HideDialog then
            ConfigProgressBar.Update(ConfigPackageTable."Table Name");
          if ConfigPackageData.Value <> '' then begin
            ConfigPackageData.Value := FORMAT(GetDimSetID(ConfigPackage.Code,ConfigPackageData.Value));
            ConfigPackageData.MODIFY;
          end;
        until ConfigPackageData.NEXT = 0;
        if not HideDialog then
          ConfigProgressBar.Close;
      end;
    END;

    [Internal]
    PROCEDURE UpdateDefaultDimValues@30(ConfigPackageRecord@1001 : Record "Config. Package Record";MasterNo@1007 : Code[20]);
    VAR
      ConfigPackageTableDim@1000 : Record "Config. Package Table";
      ConfigPackageRecordDim@1003 : Record "Config. Package Record";
      ConfigPackageDataDim@1004 : ARRAY [4] OF Record "Config. Package Data";
      ConfigPackageField@1006 : Record "Config. Package Field";
      ConfigPackageData@1002 : Record "Config. Package Data";
      DefaultDim@1005 : Record "Default Dimension";
      DimValue@1009 : Record "Dimension Value";
      RecordFound@1008 : Boolean;
    BEGIN
      ConfigPackageRecord.TESTFIELD("Package Code");
      ConfigPackageRecord.TESTFIELD("Table ID");

      ConfigPackageData.RESET;
      ConfigPackageData.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageData.SETRANGE("No.",ConfigPackageRecord."No.");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      ConfigPackageData.SETFILTER(Value,'<>%1','');
      if ConfigPackageData.FINDSET then
        repeat
          if ConfigPackageField.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."Field ID") then begin
            // find if Dimension Code already exist
            RecordFound := false;
            ConfigPackageDataDim[1].SETRANGE("Package Code",ConfigPackageRecord."Package Code");
            ConfigPackageDataDim[1].SETRANGE("Table ID",DATABASE::"Default Dimension");
            ConfigPackageDataDim[1].SETRANGE("Field ID",DefaultDim.FIELDNO("Table ID"));
            ConfigPackageDataDim[1].SETRANGE(Value,FORMAT(ConfigPackageRecord."Table ID"));
            if ConfigPackageDataDim[1].FINDSET then
              repeat
                ConfigPackageDataDim[2].SETRANGE("Package Code",ConfigPackageRecord."Package Code");
                ConfigPackageDataDim[2].SETRANGE("Table ID",DATABASE::"Default Dimension");
                ConfigPackageDataDim[2].SETRANGE("No.",ConfigPackageDataDim[1]."No.");
                ConfigPackageDataDim[2].SETRANGE("Field ID",DefaultDim.FIELDNO("No."));
                ConfigPackageDataDim[2].SETRANGE(Value,MasterNo);
                if ConfigPackageDataDim[2].FINDSET then
                  repeat
                    ConfigPackageDataDim[3].SETRANGE("Package Code",ConfigPackageRecord."Package Code");
                    ConfigPackageDataDim[3].SETRANGE("Table ID",DATABASE::"Default Dimension");
                    ConfigPackageDataDim[3].SETRANGE("No.",ConfigPackageDataDim[2]."No.");
                    ConfigPackageDataDim[3].SETRANGE("Field ID",DefaultDim.FIELDNO("Dimension Code"));
                    ConfigPackageDataDim[3].SETRANGE(Value,ConfigPackageField."Field Name");
                    RecordFound := ConfigPackageDataDim[3].FINDFIRST;
                  until (ConfigPackageDataDim[2].NEXT = 0) or RecordFound;
              until (ConfigPackageDataDim[1].NEXT = 0) or RecordFound;
            if not RecordFound then begin
              if not ConfigPackageTableDim.GET(ConfigPackageRecord."Package Code",DATABASE::"Default Dimension") then
                InsertPackageTable(ConfigPackageTableDim,ConfigPackageRecord."Package Code",DATABASE::"Default Dimension");
              InitPackageRecord(ConfigPackageRecordDim,ConfigPackageTableDim."Package Code",ConfigPackageTableDim."Table ID");
              // Insert Default Dimension record
              InsertPackageData(ConfigPackageDataDim[4],
                ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                DefaultDim.FIELDNO("Table ID"),FORMAT(ConfigPackageRecord."Table ID"),false);
              InsertPackageData(ConfigPackageDataDim[4],
                ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                DefaultDim.FIELDNO("No."),FORMAT(MasterNo),false);
              InsertPackageData(ConfigPackageDataDim[4],
                ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                DefaultDim.FIELDNO("Dimension Code"),ConfigPackageField."Field Name",false);
              if IsBlankDim(ConfigPackageData.Value) then
                InsertPackageData(ConfigPackageDataDim[4],
                  ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                  DefaultDim.FIELDNO("Dimension Value Code"),'',false)
              else
                InsertPackageData(ConfigPackageDataDim[4],
                  ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                  DefaultDim.FIELDNO("Dimension Value Code"),ConfigPackageData.Value,false);
            end else begin
              ConfigPackageDataDim[3].SETRANGE("Field ID",DefaultDim.FIELDNO("Dimension Value Code"));
              ConfigPackageDataDim[3].SETRANGE(Value);
              ConfigPackageDataDim[3].FINDFIRST;
              ConfigPackageDataDim[3].Value := ConfigPackageData.Value;
              ConfigPackageDataDim[3].MODIFY;
            end;
            // Insert Dimension value if needed
            if not IsBlankDim(ConfigPackageData.Value) then
              if not DimValue.GET(ConfigPackageField."Field Name",ConfigPackageData.Value) then begin
                ConfigPackageRecord.TESTFIELD("Package Code");
                if not ConfigPackageTableDim.GET(ConfigPackageRecord."Package Code",DATABASE::"Dimension Value") then
                  InsertPackageTable(ConfigPackageTableDim,ConfigPackageRecord."Package Code",DATABASE::"Dimension Value");
                InitPackageRecord(ConfigPackageRecordDim,ConfigPackageTableDim."Package Code",ConfigPackageTableDim."Table ID");
                InsertPackageData(ConfigPackageDataDim[4],
                  ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                  DimValue.FIELDNO("Dimension Code"),ConfigPackageField."Field Name",false);
                InsertPackageData(ConfigPackageDataDim[4],
                  ConfigPackageRecordDim."Package Code",ConfigPackageRecordDim."Table ID",ConfigPackageRecordDim."No.",
                  DimValue.FIELDNO(Code),ConfigPackageData.Value,false);
              end;
          end;
        until ConfigPackageData.NEXT = 0;
    END;

    LOCAL PROCEDURE IsBlankDim@28(Value@1000 : Text[250]) : Boolean;
    BEGIN
      exit(UPPERCASE(Value) = UPPERCASE(BlankTxt));
    END;

    [External]
    PROCEDURE SetHideDialog@48(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    [External]
    PROCEDURE AddConfigTables@5(PackageCode@1000 : Code[20]);
    VAR
      ConfigPackageTable@1001 : Record "Config. Package Table";
      ConfigPackageFilter@1002 : Record "Config. Package Filter";
      ConfigLine@1003 : Record "Config. Line";
    BEGIN
      ConfigPackageTable.INIT;
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Questionnaire");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Question Area");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Question");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Template Header");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Template Line");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Tmpl. Selection Rules");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Line");
      InsertPackageFilter(ConfigPackageFilter,PackageCode,DATABASE::"Config. Line",0,ConfigLine.FIELDNO("Package Code"),PackageCode);
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Package Filter");
      InsertPackageFilter(
        ConfigPackageFilter,PackageCode,DATABASE::"Config. Package Filter",0,ConfigPackageFilter.FIELDNO("Package Code"),PackageCode);
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Field Mapping");
      InsertPackageTable(ConfigPackageTable,PackageCode,DATABASE::"Config. Table Processing Rule");
      SetSkipTableTriggers(ConfigPackageTable,PackageCode,DATABASE::"Config. Table Processing Rule",true);
      InsertPackageFilter(
        ConfigPackageFilter,PackageCode,DATABASE::"Config. Table Processing Rule",0,
        ConfigPackageFilter.FIELDNO("Package Code"),PackageCode);
    END;

    [External]
    PROCEDURE AssignPackage@13(VAR ConfigLine@1000 : Record "Config. Line";PackageCode@1005 : Code[20]);
    VAR
      ConfigLine2@1001 : Record "Config. Line";
      TempConfigLine@1002 : TEMPORARY Record "Config. Line";
      ConfigPackageTable@1003 : Record "Config. Package Table";
      ConfigPackageTable2@1004 : Record "Config. Package Table";
      LineTypeFilter@1006 : Text;
    BEGIN
      CreateConfigLineBuffer(ConfigLine,TempConfigLine,PackageCode);
      CheckConfigLinesToAssign(TempConfigLine);

      LineTypeFilter := ConfigLine.GETFILTER("Line Type");
      ConfigLine.SETFILTER("Package Code",'<>%1',PackageCode);
      ConfigLine.SETRANGE("Line Type");
      if ConfigLine.FINDSET(true) then
        repeat
          ConfigLine.CheckBlocked;
          if ConfigLine.Status <= ConfigLine.Status::"In Progress" then begin
            if ConfigLine."Line Type" = ConfigLine."Line Type"::Table then begin
              ConfigLine.TESTFIELD("Table ID");
              if ConfigPackageTable.GET(ConfigLine."Package Code",ConfigLine."Table ID") then begin
                ConfigLine2.SETRANGE("Package Code",PackageCode);
                ConfigLine2.SETRANGE("Table ID",ConfigLine."Table ID");
                CheckConfigLinesToAssign(ConfigLine2);
                InsertPackageTable(ConfigPackageTable2,PackageCode,ConfigLine."Table ID");
                ChangePackageCode(ConfigLine."Package Code",PackageCode,ConfigLine."Table ID");
                ConfigPackageTable.DELETE(true);
              end else
                if not ConfigPackageTable.GET(PackageCode,ConfigLine."Table ID") then
                  InsertPackageTable(ConfigPackageTable,PackageCode,ConfigLine."Table ID");
            end;
            ConfigLine."Package Code" := PackageCode;
            ConfigLine.MODIFY;
          end;
        until ConfigLine.NEXT = 0;

      ConfigLine.SETRANGE("Package Code");
      if LineTypeFilter <> '' then
        ConfigLine.SETFILTER("Line Type",LineTypeFilter);
    END;

    LOCAL PROCEDURE ChangePackageCode@34(OldPackageCode@1000 : Code[20];NewPackageCode@1001 : Code[20];TableID@1010 : Integer);
    VAR
      ConfigPackageRecord@1006 : Record "Config. Package Record";
      TempConfigPackageRecord@1007 : TEMPORARY Record "Config. Package Record";
      ConfigPackageData@1008 : Record "Config. Package Data";
      TempConfigPackageData@1009 : TEMPORARY Record "Config. Package Data";
      ConfigPackageFilter@1005 : Record "Config. Package Filter";
      TempConfigPackageFilter@1004 : TEMPORARY Record "Config. Package Filter";
      ConfigPackageError@1003 : Record "Config. Package Error";
      TempConfigPackageError@1002 : TEMPORARY Record "Config. Package Error";
    BEGIN
      TempConfigPackageRecord.DELETEALL;
      ConfigPackageRecord.SETRANGE("Package Code",OldPackageCode);
      ConfigPackageRecord.SETRANGE("Table ID",TableID);
      if ConfigPackageRecord.FINDSET(true,true) then
        repeat
          TempConfigPackageRecord := ConfigPackageRecord;
          TempConfigPackageRecord."Package Code" := NewPackageCode;
          TempConfigPackageRecord.INSERT;
        until ConfigPackageRecord.NEXT = 0;
      if TempConfigPackageRecord.FINDSET then
        repeat
          ConfigPackageRecord := TempConfigPackageRecord;
          ConfigPackageRecord.INSERT;
        until TempConfigPackageRecord.NEXT = 0;

      TempConfigPackageData.DELETEALL;
      ConfigPackageData.SETRANGE("Package Code",OldPackageCode);
      ConfigPackageData.SETRANGE("Table ID",TableID);
      if ConfigPackageData.FINDSET(true,true) then
        repeat
          TempConfigPackageData := ConfigPackageData;
          TempConfigPackageData."Package Code" := NewPackageCode;
          TempConfigPackageData.INSERT;
        until ConfigPackageData.NEXT = 0;
      if TempConfigPackageData.FINDSET then
        repeat
          ConfigPackageData := TempConfigPackageData;
          ConfigPackageData.INSERT;
        until TempConfigPackageData.NEXT = 0;

      TempConfigPackageError.DELETEALL;
      ConfigPackageError.SETRANGE("Package Code",OldPackageCode);
      ConfigPackageError.SETRANGE("Table ID",TableID);
      if ConfigPackageError.FINDSET(true,true) then
        repeat
          TempConfigPackageError := ConfigPackageError;
          TempConfigPackageError."Package Code" := NewPackageCode;
          TempConfigPackageError.INSERT;
        until ConfigPackageError.NEXT = 0;
      if TempConfigPackageError.FINDSET then
        repeat
          ConfigPackageError := TempConfigPackageError;
          ConfigPackageError.INSERT;
        until TempConfigPackageError.NEXT = 0;

      TempConfigPackageFilter.DELETEALL;
      ConfigPackageFilter.SETRANGE("Package Code",OldPackageCode);
      ConfigPackageFilter.SETRANGE("Table ID",TableID);
      if ConfigPackageFilter.FINDSET(true,true) then
        repeat
          TempConfigPackageFilter := ConfigPackageFilter;
          TempConfigPackageFilter."Package Code" := NewPackageCode;
          TempConfigPackageFilter.INSERT;
        until ConfigPackageFilter.NEXT = 0;
      if TempConfigPackageFilter.FINDSET then
        repeat
          ConfigPackageFilter := TempConfigPackageFilter;
          ConfigPackageFilter.INSERT;
        until TempConfigPackageFilter.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckConfigLinesToAssign@7(VAR ConfigLine@1000 : Record "Config. Line");
    VAR
      TempObject@1001 : TEMPORARY Record Object;
    BEGIN
      ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Table);
      if ConfigLine.FINDSET then
        repeat
          if TempObject.GET(TempObject.Type::Table,'',ConfigLine."Table ID") then
            ERROR(ReferenceSameTableErr);
          TempObject.Type := TempObject.Type::Table;
          TempObject.ID := ConfigLine."Table ID";
          TempObject.INSERT;
        until ConfigLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateConfigLineBuffer@16(VAR ConfigLineNew@1000 : Record "Config. Line";VAR ConfigLineBuffer@1002 : Record "Config. Line";PackageCode@1001 : Code[20]);
    VAR
      ConfigLine@1003 : Record "Config. Line";
    BEGIN
      ConfigLine.SETRANGE("Package Code",PackageCode);
      AddConfigLineToBuffer(ConfigLine,ConfigLineBuffer);
      AddConfigLineToBuffer(ConfigLineNew,ConfigLineBuffer);
    END;

    LOCAL PROCEDURE AddConfigLineToBuffer@21(VAR ConfigLine@1001 : Record "Config. Line";VAR ConfigLineBuffer@1000 : Record "Config. Line");
    BEGIN
      if ConfigLine.FINDSET then
        repeat
          if not ConfigLineBuffer.GET(ConfigLine."Line No.") then begin
            ConfigLineBuffer.INIT;
            ConfigLineBuffer.TRANSFERFIELDS(ConfigLine);
            ConfigLineBuffer.INSERT;
          end;
        until ConfigLine.NEXT = 0;
    END;

    [Internal]
    PROCEDURE GetRelatedTables@22(VAR ConfigPackageTable@1000 : Record "Config. Package Table");
    VAR
      TempConfigPackageTable@1001 : TEMPORARY Record "Config. Package Table";
      Field@1002 : Record Field;
    BEGIN
      TempConfigPackageTable.DELETEALL;
      if ConfigPackageTable.FINDSET then
        repeat
          SetFieldFilter(Field,ConfigPackageTable."Table ID",0);
          Field.SETFILTER(RelationTableNo,'<>%1&<>%2&..%3',0,ConfigPackageTable."Table ID",99000999);
          if Field.FINDSET then
            repeat
              TempConfigPackageTable."Package Code" := ConfigPackageTable."Package Code";
              TempConfigPackageTable."Table ID" := Field.RelationTableNo;
              if TempConfigPackageTable.INSERT then;
            until Field.NEXT = 0;
        until ConfigPackageTable.NEXT = 0;

      ConfigPackageTable.RESET;
      if TempConfigPackageTable.FINDSET then
        repeat
          if not ConfigPackageTable.GET(TempConfigPackageTable."Package Code",TempConfigPackageTable."Table ID") then
            InsertPackageTable(ConfigPackageTable,TempConfigPackageTable."Package Code",TempConfigPackageTable."Table ID");
        until TempConfigPackageTable.NEXT = 0;
    END;

    LOCAL PROCEDURE GetKeyFieldsOrder@27(RecRef@1000 : RecordRef;PackageCode@1003 : Code[20];VAR TempConfigPackageField@1001 : TEMPORARY Record "Config. Package Field");
    VAR
      ConfigPackageField@1002 : Record "Config. Package Field";
      KeyRef@1006 : KeyRef;
      FieldRef@1007 : FieldRef;
      KeyFieldCount@1005 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      for KeyFieldCount := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        ValidationFieldID := FieldRef.NUMBER;

        if ConfigPackageField.GET(PackageCode,RecRef.NUMBER,FieldRef.NUMBER) then;

        TempConfigPackageField.INIT;
        TempConfigPackageField."Package Code" := PackageCode;
        TempConfigPackageField."Table ID" := RecRef.NUMBER;
        TempConfigPackageField."Field ID" := FieldRef.NUMBER;
        TempConfigPackageField."Processing Order" := ConfigPackageField."Processing Order";
        TempConfigPackageField.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetFieldsMarkedAsPrimaryKey@87(PackageCode@1001 : Code[20];TableID@1002 : Integer;VAR TempConfigPackageField@1000 : TEMPORARY Record "Config. Package Field");
    VAR
      ConfigPackageField@1003 : Record "Config. Package Field";
    BEGIN
      ConfigPackageField.SETRANGE("Package Code",PackageCode);
      ConfigPackageField.SETRANGE("Table ID",TableID);
      ConfigPackageField.SETRANGE("Primary Key",true);
      if ConfigPackageField.FINDSET then
        repeat
          TempConfigPackageField.TRANSFERFIELDS(ConfigPackageField);
          if TempConfigPackageField.INSERT then;
        until ConfigPackageField.NEXT = 0;
    END;

    [External]
    PROCEDURE GetFieldsOrder@23(RecRef@1000 : RecordRef;PackageCode@1003 : Code[20];VAR TempConfigPackageField@1001 : TEMPORARY Record "Config. Package Field");
    VAR
      ConfigPackageField@1002 : Record "Config. Package Field";
      FieldRef@1007 : FieldRef;
      FieldCount@1005 : Integer;
    BEGIN
      for FieldCount := 1 to RecRef.FIELDCOUNT do begin
        FieldRef := RecRef.FIELDINDEX(FieldCount);

        if ConfigPackageField.GET(PackageCode,RecRef.NUMBER,FieldRef.NUMBER) then;

        TempConfigPackageField.INIT;
        TempConfigPackageField."Package Code" := PackageCode;
        TempConfigPackageField."Table ID" := RecRef.NUMBER;
        TempConfigPackageField."Field ID" := FieldRef.NUMBER;
        TempConfigPackageField."Processing Order" := ConfigPackageField."Processing Order";
        TempConfigPackageField.INSERT;
      end;
    END;

    LOCAL PROCEDURE IsRecordErrorsExists@26(ConfigPackageRecord@1001 : Record "Config. Package Record") : Boolean;
    VAR
      ConfigPackageError@1000 : Record "Config. Package Error";
    BEGIN
      ConfigPackageError.SETRANGE("Package Code",ConfigPackageRecord."Package Code");
      ConfigPackageError.SETRANGE("Table ID",ConfigPackageRecord."Table ID");
      ConfigPackageError.SETRANGE("Record No.",ConfigPackageRecord."No.");
      exit(not ConfigPackageError.ISEMPTY);
    END;

    LOCAL PROCEDURE IsRecordErrorsExistsInPrimaryKeyFields@60(ConfigPackageRecord@1001 : Record "Config. Package Record") : Boolean;
    VAR
      ConfigPackageError@1000 : Record "Config. Package Error";
    BEGIN
      with ConfigPackageError do begin
        SETRANGE("Package Code",ConfigPackageRecord."Package Code");
        SETRANGE("Table ID",ConfigPackageRecord."Table ID");
        SETRANGE("Record No.",ConfigPackageRecord."No.");

        if FINDSET then
          repeat
            if ConfigValidateMgt.IsKeyField("Table ID","Field ID") then
              exit(true);
          until NEXT = 0;
      end;

      exit(false);
    END;

    [External]
    PROCEDURE UpdateConfigLinePackageData@6(ConfigPackageCode@1004 : Code[20]);
    VAR
      ConfigLine@1000 : Record "Config. Line";
      ConfigPackageData@1003 : Record "Config. Package Data";
      ShiftLineNo@1001 : BigInteger;
      ShiftVertNo@1002 : Integer;
      TempValue@1005 : BigInteger;
    BEGIN
      ConfigLine.RESET;
      if not ConfigLine.FINDLAST then
        exit;

      ShiftLineNo := ConfigLine."Line No." + 10000L;
      ShiftVertNo := ConfigLine."Vertical Sorting" + 1;

      with ConfigPackageData do begin
        SETRANGE("Package Code",ConfigPackageCode);
        SETRANGE("Table ID",DATABASE::"Config. Line");
        SETRANGE("Field ID",ConfigLine.FIELDNO("Line No."));
        if FINDSET then
          repeat
            if EVALUATE(TempValue,Value) then begin
              Value := FORMAT(TempValue + ShiftLineNo);
              MODIFY;
            end;
          until NEXT = 0;
        SETRANGE("Field ID",ConfigLine.FIELDNO("Vertical Sorting"));
        if FINDSET then
          repeat
            if EVALUATE(TempValue,Value) then begin
              Value := FORMAT(TempValue + ShiftVertNo);
              MODIFY;
            end;
          until NEXT = 0;
      end;
    END;

    [Internal]
    PROCEDURE HandlePackageDataDimSetIDForRecord@51(ConfigPackageRecord@1004 : Record "Config. Package Record");
    VAR
      ConfigPackageData@1003 : Record "Config. Package Data";
      ConfigPackageMgt@1000 : Codeunit "Config. Package Management";
      DimPackageDataExists@1001 : Boolean;
      DimSetID@1002 : Integer;
    BEGIN
      DimSetID := ConfigPackageMgt.GetDimSetIDForRecord(ConfigPackageRecord);
      DimPackageDataExists :=
        GetDimPackageDataFromRecord(ConfigPackageData,ConfigPackageRecord);
      if DimSetID = 0 then begin
        if DimPackageDataExists then
          ConfigPackageData.DELETE(true);
      end else
        if not DimPackageDataExists then
          CreateDimPackageDataFromRecord(ConfigPackageData,ConfigPackageRecord,DimSetID)
        else
          if ConfigPackageData.Value <> FORMAT(DimSetID) then begin
            ConfigPackageData.Value := FORMAT(DimSetID);
            ConfigPackageData.MODIFY;
          end;
    END;

    LOCAL PROCEDURE GetDimPackageDataFromRecord@54(VAR ConfigPackageData@1000 : Record "Config. Package Data";ConfigPackageRecord@1001 : Record "Config. Package Record") : Boolean;
    BEGIN
      exit(
        ConfigPackageData.GET(
          ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",
          DATABASE::"Dimension Set Entry"));
    END;

    LOCAL PROCEDURE CreateDimPackageDataFromRecord@52(VAR ConfigPackageData@1000 : Record "Config. Package Data";ConfigPackageRecord@1003 : Record "Config. Package Record";DimSetID@1002 : Integer);
    VAR
      ConfigPackageField@1001 : Record "Config. Package Field";
    BEGIN
      if ConfigPackageField.GET(ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",DATABASE::"Dimension Set Entry") then begin
        ConfigPackageField.VALIDATE("Include Field",true);
        ConfigPackageField.MODIFY(true);
      end;

      with ConfigPackageData do begin
        INIT;
        "Package Code" := ConfigPackageRecord."Package Code";
        "Table ID" := ConfigPackageRecord."Table ID";
        "Field ID" := DATABASE::"Dimension Set Entry";
        "No." := ConfigPackageRecord."No.";
        Value := FORMAT(DimSetID);
        INSERT;
      end;
    END;

    LOCAL PROCEDURE UpdateValueUsingMapping@56(VAR ConfigPackageData@1000 : Record "Config. Package Data";ConfigPackageField@1002 : Record "Config. Package Field";PackageCode@1003 : Code[20]);
    VAR
      ConfigFieldMapping@1001 : Record "Config. Field Mapping";
      RecRef@1006 : RecordRef;
      FieldRef@1007 : FieldRef;
      NewValue@1004 : Text[250];
    BEGIN
      if ConfigFieldMapping.GET(
           ConfigPackageData."Package Code",
           ConfigPackageField."Table ID",
           ConfigPackageField."Field ID",
           ConfigPackageData.Value)
      then
        NewValue := ConfigFieldMapping."New Value";

      if (NewValue = '') and (ConfigPackageField."Relation Table ID" <> 0) then
        NewValue := GetMappingFromPKOfRelatedTable(ConfigPackageField,ConfigPackageData.Value);

      if NewValue <> '' then begin
        ConfigPackageData.VALIDATE(Value,NewValue);
        ConfigPackageData.MODIFY;
      end;

      if ConfigPackageField."Create Missing Codes" then begin
        RecRef.OPEN(ConfigPackageField."Relation Table ID");
        FieldRef := RecRef.FIELD(1);
        FieldRef.VALUE(ConfigPackageData.Value);
        // even "Create Missing Codes" is marked we should not create for blank account numbers and blank/zero account categories should not be created
        if ConfigPackageData."Table ID" <> 15 then begin
          if RecRef.INSERT then;
        end else
          if (ConfigPackageData.Value <> '') and ((ConfigPackageData.Value <> '0') and (ConfigPackageData."Field ID" = 80)) or
             ((PackageCode <> QBPackageCodeTxt) and (PackageCode <> MSGPPackageCodeTxt))
          then
            if RecRef.INSERT then;
      end;
    END;

    LOCAL PROCEDURE GetMappingFromPKOfRelatedTable@63(ConfigPackageField@1002 : Record "Config. Package Field";MappingOldValue@1003 : Text[250]) : Text[250];
    VAR
      ConfigPackageField2@1001 : Record "Config. Package Field";
      ConfigFieldMapping@1000 : Record "Config. Field Mapping";
    BEGIN
      ConfigPackageField2.SETRANGE("Package Code",ConfigPackageField."Package Code");
      ConfigPackageField2.SETRANGE("Table ID",ConfigPackageField."Relation Table ID");
      ConfigPackageField2.SETRANGE("Primary Key",true);
      if ConfigPackageField2.FINDFIRST then
        if ConfigFieldMapping.GET(
             ConfigPackageField2."Package Code",
             ConfigPackageField2."Table ID",
             ConfigPackageField2."Field ID",
             MappingOldValue)
        then
          exit(ConfigFieldMapping."New Value");
    END;

    [External]
    PROCEDURE ShowFieldMapping@62(ConfigPackageField@1000 : Record "Config. Package Field");
    VAR
      ConfigFieldMapping@1001 : Record "Config. Field Mapping";
      ConfigFieldMappingPage@1002 : Page "Config. Field Mapping";
    BEGIN
      CLEAR(ConfigFieldMappingPage);
      ConfigFieldMapping.FILTERGROUP(2);
      ConfigFieldMapping.SETRANGE("Package Code",ConfigPackageField."Package Code");
      ConfigFieldMapping.SETRANGE("Table ID",ConfigPackageField."Table ID");
      ConfigFieldMapping.SETRANGE("Field ID",ConfigPackageField."Field ID");
      ConfigFieldMapping.FILTERGROUP(0);
      ConfigFieldMappingPage.SETTABLEVIEW(ConfigFieldMapping);
      ConfigFieldMappingPage.RUNMODAL;
    END;

    [External]
    PROCEDURE IsBLOBField@64(TableId@1000 : Integer;FieldId@1001 : Integer) : Boolean;
    VAR
      Field@1002 : Record Field;
    BEGIN
      Field.SETRANGE(TableNo,TableId);
      Field.SETRANGE("No.",FieldId);
      if Field.FINDFIRST then
        exit(Field.Type = Field.Type::BLOB);
      exit(false);
    END;

    LOCAL PROCEDURE EvaluateBLOBToFieldRef@65(VAR ConfigPackageData@1000 : Record "Config. Package Data";VAR FieldRef@1001 : FieldRef);
    BEGIN
      ConfigPackageData.CALCFIELDS("BLOB Value");
      FieldRef.VALUE := ConfigPackageData."BLOB Value";
    END;

    [External]
    PROCEDURE IsMediaSetField@73(TableId@1000 : Integer;FieldId@1001 : Integer) : Boolean;
    VAR
      Field@1002 : Record Field;
    BEGIN
      Field.SETRANGE(TableNo,TableId);
      Field.SETRANGE("No.",FieldId);
      if Field.FINDFIRST then
        exit(Field.Type = Field.Type::MediaSet);

      exit(false);
    END;

    LOCAL PROCEDURE ImportMediaSetFiles@72(VAR ConfigPackageData@1000 : Record "Config. Package Data";VAR FieldRef@1001 : FieldRef;DoModify@1010 : Boolean);
    VAR
      TempConfigMediaBuffer@1007 : TEMPORARY Record "Config. Media Buffer";
      MediaSetIDConfigPackageData@1005 : Record "Config. Package Data";
      BlobMediaSetConfigPackageData@1002 : Record "Config. Package Data";
      BlobInStream@1011 : InStream;
      MediaSetID@1006 : Text;
    BEGIN
      if not CanImportMediaField(ConfigPackageData,FieldRef,DoModify,MediaSetID) then
        exit;

      MediaSetIDConfigPackageData.SETRANGE("Package Code",ConfigPackageData."Package Code");
      MediaSetIDConfigPackageData.SETRANGE("Table ID",DATABASE::"Config. Media Buffer");
      MediaSetIDConfigPackageData.SETRANGE("Field ID",TempConfigMediaBuffer.FIELDNO("Media Set ID"));
      MediaSetIDConfigPackageData.SETRANGE(Value,MediaSetID);

      if not MediaSetIDConfigPackageData.FINDSET then
        exit;

      TempConfigMediaBuffer.INIT;
      TempConfigMediaBuffer.INSERT;
      BlobMediaSetConfigPackageData.SETAUTOCALCFIELDS("BLOB Value");

      repeat
        BlobMediaSetConfigPackageData.GET(
          MediaSetIDConfigPackageData."Package Code",MediaSetIDConfigPackageData."Table ID",MediaSetIDConfigPackageData."No.",
          TempConfigMediaBuffer.FIELDNO("Media Blob"));
        BlobMediaSetConfigPackageData."BLOB Value".CREATEINSTREAM(BlobInStream);
        TempConfigMediaBuffer."Media Set".IMPORTSTREAM(BlobInStream,'');
        TempConfigMediaBuffer.MODIFY;
      until MediaSetIDConfigPackageData.NEXT = 0;

      FieldRef.VALUE := FORMAT(TempConfigMediaBuffer."Media Set");
    END;

    [External]
    PROCEDURE IsMediaField@78(TableId@1000 : Integer;FieldId@1001 : Integer) : Boolean;
    VAR
      Field@1002 : Record Field;
    BEGIN
      Field.SETRANGE(TableNo,TableId);
      Field.SETRANGE("No.",FieldId);
      if Field.FINDFIRST then
        exit(Field.Type = Field.Type::Media);

      exit(false);
    END;

    LOCAL PROCEDURE ImportMediaFiles@77(VAR ConfigPackageData@1000 : Record "Config. Package Data";VAR FieldRef@1001 : FieldRef;DoModify@1010 : Boolean);
    VAR
      TempConfigMediaBuffer@1007 : TEMPORARY Record "Config. Media Buffer";
      MediaIDConfigPackageData@1005 : Record "Config. Package Data";
      BlobMediaConfigPackageData@1002 : Record "Config. Package Data";
      BlobInStream@1011 : InStream;
      MediaID@1006 : Text;
    BEGIN
      if not CanImportMediaField(ConfigPackageData,FieldRef,DoModify,MediaID) then
        exit;

      MediaIDConfigPackageData.SETRANGE("Package Code",ConfigPackageData."Package Code");
      MediaIDConfigPackageData.SETRANGE("Table ID",DATABASE::"Config. Media Buffer");
      MediaIDConfigPackageData.SETRANGE("Field ID",TempConfigMediaBuffer.FIELDNO("Media ID"));
      MediaIDConfigPackageData.SETRANGE(Value,MediaID);

      if not MediaIDConfigPackageData.FINDFIRST then
        exit;

      BlobMediaConfigPackageData.SETAUTOCALCFIELDS("BLOB Value");

      BlobMediaConfigPackageData.GET(
        MediaIDConfigPackageData."Package Code",MediaIDConfigPackageData."Table ID",MediaIDConfigPackageData."No.",
        TempConfigMediaBuffer.FIELDNO("Media Blob"));
      BlobMediaConfigPackageData."BLOB Value".CREATEINSTREAM(BlobInStream);

      TempConfigMediaBuffer.INIT;
      TempConfigMediaBuffer.Media.IMPORTSTREAM(BlobInStream,'');
      TempConfigMediaBuffer.INSERT;

      FieldRef.VALUE := FORMAT(TempConfigMediaBuffer.Media);
    END;

    LOCAL PROCEDURE CanImportMediaField@75(VAR ConfigPackageData@1003 : Record "Config. Package Data";VAR FieldRef@1002 : FieldRef;DoModify@1001 : Boolean;VAR MediaID@1004 : Text) : Boolean;
    VAR
      RecRef@1000 : RecordRef;
      DummyNotInitializedGuid@1005 : GUID;
    BEGIN
      if not DoModify then
        exit(false);

      RecRef := FieldRef.RECORD;
      if RecRef.NUMBER = DATABASE::"Config. Media Buffer" then
        exit(false);

      MediaID := FORMAT(ConfigPackageData.Value);
      if (MediaID = FORMAT(DummyNotInitializedGuid)) or (MediaID = '') then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE GetRecordIDOfRecordError@79(VAR ConfigPackageData@1000 : Record "Config. Package Data") : Text[250];
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1002 : FieldRef;
      KeyRef@1004 : KeyRef;
      RecordID@1003 : Text;
      KeyFieldCount@1005 : Integer;
      KeyFieldValNotEmpty@1006 : Boolean;
    BEGIN
      if not ConfigPackageData.FINDSET then
        exit;

      RecRef.OPEN(ConfigPackageData."Table ID");
      KeyRef := RecRef.KEYINDEX(1);
      for KeyFieldCount := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);

        if not ConfigPackageData.GET(ConfigPackageData."Package Code",ConfigPackageData."Table ID",ConfigPackageData."No.",
             FieldRef.NUMBER)
        then
          exit;

        if ConfigPackageData.Value <> '' then
          KeyFieldValNotEmpty := true;

        if KeyFieldCount = 1 then
          RecordID := RecRef.NAME + ': ' + ConfigPackageData.Value
        else
          RecordID += ', ' + ConfigPackageData.Value;
      end;

      if not KeyFieldValNotEmpty then
        exit;

      exit(COPYSTR(RecordID,1,250));
    END;

    LOCAL PROCEDURE IsTableErrorsExists@83(ConfigPackageTable@1001 : Record "Config. Package Table") : Boolean;
    VAR
      ConfigPackageError@1000 : Record "Config. Package Error";
    BEGIN
      if ConfigPackageTable."Table ID" = 27 then begin
        ConfigPackageError.SETRANGE("Package Code",ConfigPackageTable."Package Code");
        ConfigPackageError.SETRANGE("Table ID",ConfigPackageTable."Table ID");
        if ConfigPackageError.FIND('-') then
          repeat
            if STRPOS(ConfigPackageError."Error Text",'is a duplicate item number') > 0 then
              exit(not ConfigPackageError.ISEMPTY);
          until ConfigPackageError.NEXT = 0;
      end
    END;

    LOCAL PROCEDURE FixIntegrationRecordIds@69();
    VAR
      GraphMgtGeneralTools@1000 : Codeunit "Graph Mgt - General Tools";
    BEGIN
      COMMIT;
      GraphMgtGeneralTools.ApiSetup;
    END;

    PROCEDURE IsFieldMultiRelation@90(TableID@1000 : Integer;FieldID@1001 : Integer) : Boolean;
    VAR
      TableRelationsMetadata@1002 : Record "Table Relations Metadata";
    BEGIN
      TableRelationsMetadata.SETRANGE("Table ID",TableID);
      TableRelationsMetadata.SETRANGE("Field No.",FieldID);
      exit(TableRelationsMetadata.COUNT > 1);
    END;

    BEGIN
    END.
  }
}

