OBJECT Codeunit 5932 Service-Get Shipment
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Service Line";
    OnRun=BEGIN
            ServiceHeader.GET("Document Type","Document No.");
            ServiceHeader.TESTFIELD("Document Type",ServiceHeader."Document Type"::Invoice);

            CLEAR(ServiceShptLine);
            ServiceShptLine.SETCURRENTKEY("Bill-to Customer No.");
            ServiceShptLine.SETRANGE("Bill-to Customer No.",ServiceHeader."Bill-to Customer No.");
            ServiceShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
            ServiceShptLine.SETRANGE("Currency Code",ServiceHeader."Currency Code");
            ServiceShptLine.FILTERGROUP(2);

            GetServiceShipments.SETTABLEVIEW(ServiceShptLine);
            GetServiceShipments.SetServiceHeader(ServiceHeader);
            GetServiceShipments.LOOKUPMODE(true);
            GetServiceShipments.RUNMODAL;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.';
      ServiceHeader@1001 : Record "Service Header";
      ServiceLine@1002 : Record "Service Line";
      ServiceShptHeader@1003 : Record "Service Shipment Header";
      ServiceShptLine@1004 : Record "Service Shipment Line";
      GetServiceShipments@1005 : Page "Get Service Shipment Lines";

    [External]
    PROCEDURE CreateInvLines@1(VAR ServiceShptLine2@1000 : Record "Service Shipment Line");
    VAR
      TransferLine@1001 : Boolean;
    BEGIN
      with ServiceShptLine2 do begin
        SETFILTER("Qty. Shipped Not Invoiced",'<>0');
        if FIND('-') then begin
          ServiceLine.LOCKTABLE;
          ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
          ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
          ServiceLine."Document Type" := ServiceHeader."Document Type";
          ServiceLine."Document No." := ServiceHeader."No.";

          repeat
            if ServiceShptHeader."No." <> "Document No." then begin
              ServiceShptHeader.GET("Document No.");
              TransferLine := true;
              if ServiceShptHeader."Currency Code" <> ServiceHeader."Currency Code" then begin
                MESSAGE(
                  Text001,
                  ServiceHeader.FIELDCAPTION("Currency Code"),
                  ServiceHeader.TABLECAPTION,ServiceHeader."No.",
                  ServiceShptHeader.TABLECAPTION,ServiceShptHeader."No.");
                TransferLine := false;
              end;
              if ServiceShptHeader."Bill-to Customer No." <> ServiceHeader."Bill-to Customer No." then begin
                MESSAGE(
                  Text001,
                  ServiceHeader.FIELDCAPTION("Bill-to Customer No."),
                  ServiceHeader.TABLECAPTION,ServiceHeader."No.",
                  ServiceShptHeader.TABLECAPTION,ServiceShptHeader."No.");
                TransferLine := false;
              end;
            end;
            if TransferLine then begin
              ServiceShptLine := ServiceShptLine2;

              ServiceShptLine.InsertInvLineFromShptLine(ServiceLine);
            end;
          until NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE SetServiceHeader@2(VAR ServiceHeader2@1000 : Record "Service Header");
    BEGIN
      ServiceHeader.GET(ServiceHeader2."Document Type",ServiceHeader2."No.");
      ServiceHeader.TESTFIELD("Document Type",ServiceHeader."Document Type"::Invoice);
    END;

    BEGIN
    END.
  }
}

