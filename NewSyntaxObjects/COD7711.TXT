OBJECT Codeunit 7711 Miniform Whse. Activity Line
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Miniform Header";
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit "Miniform Management";
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgt,ADCSCommunication,ADCSUserId,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            if Code <> CurrentCode then
              PrepareData
            else
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1015 : Record "Miniform Header";
      XMLDOMMgt@1007 : Codeunit "XML DOM Management";
      ADCSCommunication@1003 : Codeunit "ADCS Communication";
      ADCSMgt@1024 : Codeunit "ADCS Management";
      RecRef@1005 : RecordRef;
      DOMxmlin@1011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ADCSUserId@1004 : Text[250];
      Remark@1002 : Text[250];
      WhseEmpId@1016 : Text[250];
      LocationFilter@1000 : Text[250];
      Text000@1009 : TextConst 'ENU=Function not Found.';
      Text004@1021 : TextConst 'ENU=Invalid %1.';
      Text006@1001 : TextConst 'ENU=No input Node found.';
      Text007@1014 : TextConst 'ENU=Record not found.';
      Text008@1013 : TextConst 'ENU=End of Document.';
      Text009@1019 : TextConst 'ENU=Qty. does not match.';
      Text011@1017 : TextConst 'ENU=Invalid Quantity.';
      CurrentCode@1006 : Text[250];
      StackCode@1008 : Text[250];
      ActiveInputField@1026 : Integer;
      Text012@1027 : TextConst 'ENU=No Lines available.';

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      WhseActivityLine@1002 : Record "Warehouse Activity Line";
      FuncGroup@1001 : Record "Miniform Function Group";
      RecId@1004 : RecordID;
      TextValue@1007 : Text[250];
      TableNo@1008 : Integer;
      FldNo@1000 : Integer;
    BEGIN
      if XMLDOMMgt.FindNode(RootNode,'Header/Input',ReturnedNode) then
        TextValue := ReturnedNode.InnerText
      else
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      if RecRef.GET(RecId) then begin
        RecRef.SETTABLE(WhseActivityLine);
        WhseActivityLine.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
        WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type");
        WhseActivityLine.SETRANGE("No.",WhseActivityLine."No.");
        RecRef.GETTABLE(WhseActivityLine);
        ADCSCommunication.SetRecRef(RecRef);
      end else begin
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        exit;
      end;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      case FuncGroup.KeyDef of
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          if not ADCSCommunication.FindRecRef(1,MiniformHeader."No. of Records in List") then
            Remark := Text008;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          if not ADCSCommunication.FindRecRef(4,MiniformHeader."No. of Records in List") then
            Remark := Text008;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Reset:
          Reset(WhseActivityLine);
        FuncGroup.KeyDef::Register:
          begin
            Register(WhseActivityLine);
            if Remark = '' then
              ADCSCommunication.RunPreviousMiniform(DOMxmlin)
            else
              SendForm(ActiveInputField);
          end;
        FuncGroup.KeyDef::Input:
          begin
            EVALUATE(FldNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID'));
            case FldNo of
              WhseActivityLine.FIELDNO("Bin Code"):
                CheckBinNo(WhseActivityLine,UPPERCASE(TextValue));
              WhseActivityLine.FIELDNO("Item No."):
                CheckItemNo(WhseActivityLine,UPPERCASE(TextValue));
              WhseActivityLine.FIELDNO("Qty. to Handle"):
                CheckQty(WhseActivityLine,TextValue);
              else begin
                ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                RecRef.SETTABLE(WhseActivityLine);
              end;
            end;

            WhseActivityLine.MODIFY;
            RecRef.GETTABLE(WhseActivityLine);
            ADCSCommunication.SetRecRef(RecRef);
            ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
            if Remark = '' then
              if ADCSCommunication.LastEntryField(CurrentCode,FldNo) then begin
                RecRef.GETTABLE(WhseActivityLine);
                if not ADCSCommunication.FindRecRef(1,ActiveInputField) then begin
                  Remark := Text008;
                end else
                  ActiveInputField := 1;
              end else
                ActiveInputField += 1;
          end;
        else
          ERROR(Text000);
      end;

      if not (FuncGroup.KeyDef in [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Register]) then
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE CheckBinNo@17(VAR WhseActLine@1003 : Record "Warehouse Activity Line";InputValue@1002 : Text[250]);
    BEGIN
      if InputValue = WhseActLine."Bin Code" then
        exit;

      Remark := STRSUBSTNO(Text004,WhseActLine.FIELDCAPTION("Bin Code"));
    END;

    LOCAL PROCEDURE CheckItemNo@16(VAR WhseActLine@1006 : Record "Warehouse Activity Line";InputValue@1005 : Text[250]);
    VAR
      ItemIdent@1000 : Record "Item Identifier";
    BEGIN
      if InputValue = WhseActLine."Item No." then
        exit;

      if not ItemIdent.GET(InputValue) then
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Item No."));

      if ItemIdent."Item No." <> WhseActLine."Item No." then
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Item No."));

      if (ItemIdent."Variant Code" <> '') and (ItemIdent."Variant Code" <> WhseActLine."Variant Code") then
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Variant Code"));

      if (ItemIdent."Unit of Measure Code" <> '') and (ItemIdent."Unit of Measure Code" <> WhseActLine."Unit of Measure Code") then
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION("Unit of Measure Code"));
    END;

    LOCAL PROCEDURE CheckQty@26(VAR WhseActLine@1001 : Record "Warehouse Activity Line";InputValue@1000 : Text[250]);
    VAR
      QtyToHandle@1002 : Decimal;
    BEGIN
      if InputValue = '' then begin
        Remark := Text011;
        exit;
      end;

      with WhseActLine do begin
        EVALUATE(QtyToHandle,InputValue);
        if QtyToHandle = ABS(QtyToHandle) then begin
          CheckItemNo(WhseActLine,"Item No.");
          if QtyToHandle <= "Qty. Outstanding" then
            VALIDATE("Qty. to Handle",QtyToHandle)
          else
            Remark := Text011;
        end else
          Remark := Text011;
      end;
    END;

    LOCAL PROCEDURE Reset@29(VAR WhseActLine2@1004 : Record "Warehouse Activity Line");
    VAR
      WhseActLine@1003 : Record "Warehouse Activity Line";
    BEGIN
      if not WhseActLine.GET(WhseActLine2."Activity Type",WhseActLine2."No.",WhseActLine2."Line No.") then
        ERROR(Text007);

      Remark := '';
      WhseActLine.VALIDATE("Qty. to Handle",0);
      WhseActLine.MODIFY;

      RecRef.GETTABLE(WhseActLine);
      ADCSCommunication.SetRecRef(RecRef);
      ActiveInputField := 1;
    END;

    LOCAL PROCEDURE Register@30(WhseActLine2@1000 : Record "Warehouse Activity Line");
    VAR
      WhseActLine@1003 : Record "Warehouse Activity Line";
      WhseActivityRegister@1005 : Codeunit "Whse.-Activity-Register";
    BEGIN
      if not WhseActLine.GET(WhseActLine2."Activity Type",WhseActLine2."No.",WhseActLine2."Line No.") then
        ERROR(Text007);
      if not BalanceQtyToHandle(WhseActLine) then
        Remark := Text009
      else begin
        WhseActivityRegister.ShowHideDialog(true);
        WhseActivityRegister.RUN(WhseActLine);
      end;
    END;

    LOCAL PROCEDURE BalanceQtyToHandle@18(VAR WhseActivLine2@1000 : Record "Warehouse Activity Line") : Boolean;
    VAR
      WhseActLine@1004 : Record "Warehouse Activity Line";
      QtyToPick@1002 : Decimal;
      QtyToPutAway@1003 : Decimal;
    BEGIN
      WhseActLine.COPY(WhseActivLine2);
      with WhseActLine do begin
        SETCURRENTKEY("Activity Type","No.","Item No.","Variant Code","Action Type");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        SETRANGE("Action Type");

        if FIND('-') then
          repeat
            SETRANGE("Item No.","Item No.");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Serial No.","Serial No.");
            SETRANGE("Lot No.","Lot No.");

            if (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) or
               (WhseActivLine2.GETFILTER("Action Type") = '')
            then begin
              SETRANGE("Action Type","Action Type"::Take);
              if FIND('-') then
                repeat
                  QtyToPick := QtyToPick + "Qty. to Handle (Base)";
                until NEXT = 0;
            end;

            if (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Place) or
               (WhseActivLine2.GETFILTER("Action Type") = '')
            then begin
              SETRANGE("Action Type","Action Type"::Place);
              if FIND('-') then
                repeat
                  QtyToPutAway := QtyToPutAway + "Qty. to Handle (Base)";
                until NEXT = 0;
            end;

            if QtyToPick <> QtyToPutAway then
              exit(false);

            SETRANGE("Action Type");
            FIND('+');
            SETRANGE("Item No.");
            SETRANGE("Variant Code");
            SETRANGE("Serial No.");
            SETRANGE("Lot No.");
            QtyToPick := 0;
            QtyToPutAway := 0;
          until NEXT = 0;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE PrepareData@1();
    VAR
      WhseActivityLine@1002 : Record "Warehouse Activity Line";
      WhseActivityHeader@1000 : Record "Warehouse Activity Header";
      RecId@1003 : RecordID;
      TableNo@1004 : Integer;
    BEGIN
      XMLDOMMgt.FindNode(RootNode,'Header/Input',ReturnedNode);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      if RecRef.GET(RecId) then begin
        RecRef.SETTABLE(WhseActivityHeader);
        WhseActivityLine.SETRANGE("Activity Type",WhseActivityHeader.Type);
        WhseActivityLine.SETRANGE("No.",WhseActivityHeader."No.");
        if not WhseActivityLine.FINDFIRST then begin
          ADCSMgt.SendError(Text012);
          exit;
        end;
        RecRef.GETTABLE(WhseActivityLine);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      end else
        ERROR(Text007);
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,ADCSUserId);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSMgt.SendXMLReply(DOMxmlin);
    END;

    BEGIN
    END.
  }
}

