OBJECT Codeunit 1315 Chart Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountSchedulesChartSetup@6002 : Record "Account Schedules Chart Setup";
      TempEntryNoAmountBuf@1008 : TEMPORARY Record "Entry No. Amount Buffer";
      SalesByCustGrpChartSetup@1015 : Record "Sales by Cust. Grp.Chart Setup";
      AccSchedChartManagement@6001 : Codeunit "Acc. Sched. Chart Management";
      TopTenCustomersChartMgt@6006 : Codeunit "Top Ten Customers Chart Mgt.";
      TopFiveCustomersChartMgt@1020 : Codeunit "Top Five Customers Chart Mgt.";
      AgedInventoryChartMgt@1005 : Codeunit "Aged Inventory Chart Mgt.";
      SalesByCustGrpChartMgt@1017 : Codeunit "Sales by Cust. Grp. Chart Mgt.";
      AgedAccReceivable@1006 : Codeunit "Aged Acc. Receivable";
      AgedAccPayable@1009 : Codeunit "Aged Acc. Payable";
      Period@1004 : '" ",Next,Previous';
      MediumStatusTxt@1001 : TextConst '@@@=%1 Account Schedule Chart Setup Name, %2 Period Length, %3 Current time;ENU=%1 | View by %2';
      LongStatusTxt@1000 : TextConst '@@@="%1 Account Schedule Chart Setup Name, %2 = Start Date, %3 = End Date, %4 Period Length, %5 Current time";ENU=%1 | %2..%3 | %4';
      TopTenCustomerChartNameTxt@1170000000 : TextConst 'ENU=Top Ten Customers by Sales Value';
      TopFiveCustomerChartNameTxt@1022 : TextConst 'ENU=Top Five Customers by Sales Value';
      AgedInventoryChartNameTxt@1170000001 : TextConst 'ENU=Aged Inventory';
      SalesByCustomerGroupNameTxt@1016 : TextConst 'ENU=Sales Trends by Customer Groups';
      SalesByCustomerGroupDescriptionTxt@1018 : TextConst 'ENU=This chart shows sales trends by customer group in the selected period.';
      TopTenCustomersChartDescriptionTxt@1002 : TextConst 'ENU=This chart shows the ten customers with the highest total sales value. The last column shows the sum of sales values of all other customers.';
      TopFiveCustomersChartDescriptionTxt@1021 : TextConst 'ENU=This Pie chart shows the five customers with the highest total sales value.';
      AgedInventoryChartDescriptionTxt@1003 : TextConst 'ENU=This chart shows the total inventory value, grouped by the number of days that the items are on inventory.';
      AgedAccReceivableNameTxt@1007 : TextConst 'ENU=Aged Accounts Receivable';
      AgedAccPayableNameTxt@1010 : TextConst 'ENU=Aged Accounts Payable';
      XCashFlowChartNameTxt@1013 : TextConst 'ENU=Cash Flow';
      XIncomeAndExpenseChartNameTxt@1012 : TextConst 'ENU=Income & Expense';
      XCashCycleChartNameTxt@1011 : TextConst 'ENU=Cash Cycle';
      NoEnabledChartsFoundErr@1014 : TextConst 'ENU=There are no enabled charts. Choose Select Chart to see a list of charts that you can display.';
      ChartDefinitionMissingErr@1019 : TextConst 'ENU=There are no charts defined.';

    [Internal]
    PROCEDURE AddinReady@6000(VAR ChartDefinition@6000 : Record "Chart Definition";VAR BusinessChartBuffer@6001 : Record "Business Chart Buffer");
    VAR
      LastUsedChart@1170000000 : Record "Last Used Chart";
      LastChartRecorded@1000 : Boolean;
      LastChartExists@1001 : Boolean;
      LastChartEnabled@1002 : Boolean;
    BEGIN
      LastChartRecorded := LastUsedChart.GET(USERID);
      LastChartExists :=
        LastChartRecorded and ChartDefinition.GET(LastUsedChart."Code Unit ID",LastUsedChart."Chart Name");
      LastChartEnabled := LastChartExists and ChartDefinition.Enabled;
      if ChartDefinition.ISEMPTY then
        exit;
      if not LastChartEnabled then begin
        ChartDefinition.SETRANGE(Enabled,true);
        if not ChartDefinition.FINDLAST then
          DIALOG.ERROR(NoEnabledChartsFoundErr);
      end;
      SetDefaultPeriodLength(ChartDefinition,BusinessChartBuffer);
      UpdateChart(ChartDefinition,BusinessChartBuffer,Period::" ");
    END;

    [External]
    PROCEDURE ChartDescription@1(ChartDefinition@1000 : Record "Chart Definition") : Text;
    BEGIN
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Acc. Sched. Chart Management":
          exit(AccountSchedulesChartSetup.Description);
        CODEUNIT::"Top Ten Customers Chart Mgt.":
          exit(TopTenCustomersChartDescriptionTxt);
        CODEUNIT::"Aged Inventory Chart Mgt.":
          exit(AgedInventoryChartDescriptionTxt);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          exit(SalesByCustomerGroupDescriptionTxt);
        CODEUNIT::"Aged Acc. Receivable":
          exit(AgedAccReceivable.Description(false));
        CODEUNIT::"Aged Acc. Payable":
          exit(AgedAccPayable.Description(false));
        CODEUNIT::"Top Five Customers Chart Mgt.":
          exit(TopFiveCustomersChartDescriptionTxt);
      end;
    END;

    [External]
    PROCEDURE CashFlowChartName@3() : Text[30];
    BEGIN
      exit(XCashFlowChartNameTxt)
    END;

    [External]
    PROCEDURE CashCycleChartName@5() : Text[30];
    BEGIN
      exit(XCashCycleChartNameTxt)
    END;

    [External]
    PROCEDURE IncomeAndExpenseChartName@6() : Text[30];
    BEGIN
      exit(XIncomeAndExpenseChartNameTxt)
    END;

    [Internal]
    PROCEDURE DataPointClicked@6001(VAR BusinessChartBuffer@6000 : Record "Business Chart Buffer";VAR ChartDefinition@6001 : Record "Chart Definition");
    BEGIN
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Acc. Sched. Chart Management":
          AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);
        CODEUNIT::"Top Ten Customers Chart Mgt.":
          TopTenCustomersChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Top Five Customers Chart Mgt.":
          TopFiveCustomersChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Aged Inventory Chart Mgt.":
          AgedInventoryChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          SalesByCustGrpChartMgt.DrillDown(BusinessChartBuffer);
        CODEUNIT::"Aged Acc. Receivable":
          AgedAccReceivable.DrillDownByGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
        CODEUNIT::"Aged Acc. Payable":
          AgedAccPayable.DrillDownByGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
      end;
    END;

    [External]
    PROCEDURE PopulateChartDefinitionTable@2();
    BEGIN
      InsertChartDefinition(CODEUNIT::"Top Five Customers Chart Mgt.",TopFiveCustomerChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Top Ten Customers Chart Mgt.",TopTenCustomerChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Inventory Chart Mgt.",AgedInventoryChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Sales by Cust. Grp. Chart Mgt.",SalesByCustomerGroupNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Acc. Receivable",AgedAccReceivableNameTxt);
      InsertChartDefinition(CODEUNIT::"Aged Acc. Payable",AgedAccPayableNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XCashFlowChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XIncomeAndExpenseChartNameTxt);
      InsertChartDefinition(CODEUNIT::"Acc. Sched. Chart Management",XCashCycleChartNameTxt);
    END;

    [Internal]
    PROCEDURE SelectChart@6011(VAR BusinessChartBuffer@6002 : Record "Business Chart Buffer";VAR ChartDefinition@6001 : Record "Chart Definition");
    VAR
      ChartList@6000 : Page "Chart List";
    BEGIN
      if ChartDefinition.ISEMPTY then
        if ChartDefinition.WRITEPERMISSION then begin
          PopulateChartDefinitionTable;
          COMMIT;
        end else
          ERROR(ChartDefinitionMissingErr);
      ChartList.LOOKUPMODE(true);

      if ChartList.RUNMODAL = ACTION::LookupOK then begin
        ChartList.GETRECORD(ChartDefinition);
        SetDefaultPeriodLength(ChartDefinition,BusinessChartBuffer);
        UpdateChart(ChartDefinition,BusinessChartBuffer,Period::" ");
      end;
    END;

    [Internal]
    PROCEDURE SetDefaultPeriodLength@7002(ChartDefinition@1170000001 : Record "Chart Definition";VAR BusChartBuf@1170000000 : Record "Business Chart Buffer");
    VAR
      BusChartUserSetup@1000 : Record "Business Chart User Setup";
    BEGIN
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Aged Inventory Chart Mgt.":
          SetPeriodLength(ChartDefinition,BusChartBuf,BusChartBuf."Period Length"::Month,true);
        CODEUNIT::"Aged Acc. Receivable":
          begin
            BusChartUserSetup.InitSetupCU(CODEUNIT::"Aged Acc. Receivable");
            SetPeriodLength(ChartDefinition,BusChartBuf,BusChartUserSetup."Period Length",true);
          end;
        CODEUNIT::"Aged Acc. Payable":
          begin
            BusChartUserSetup.InitSetupCU(CODEUNIT::"Aged Acc. Payable");
            SetPeriodLength(ChartDefinition,BusChartBuf,BusChartUserSetup."Period Length",true);
          end;
        CODEUNIT::"Acc. Sched. Chart Management":
          begin
            AccountSchedulesChartSetup.GET('',ChartDefinition."Chart Name");
            SetPeriodLength(ChartDefinition,BusChartBuf,AccountSchedulesChartSetup."Period Length",true);
          end;
      end;
    END;

    [Internal]
    PROCEDURE SetPeriodLength@7001(ChartDefinition@1000 : Record "Chart Definition";VAR BusChartBuf@1170000000 : Record "Business Chart Buffer";PeriodLength@1170000001 : Option;IsInitState@1002 : Boolean);
    VAR
      NewStartDate@1001 : Date;
    BEGIN
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Acc. Sched. Chart Management":
          begin
            AccountSchedulesChartSetup.GET('',ChartDefinition."Chart Name");
            AccountSchedulesChartSetup.SetPeriodLength(PeriodLength);
            BusChartBuf."Period Length" := PeriodLength;
            if AccountSchedulesChartSetup."Look Ahead" then
              NewStartDate := GetBaseDate(BusChartBuf,IsInitState)
            else
              NewStartDate :=
                CALCDATE(
                  STRSUBSTNO(
                    '<-%1%2>',AccountSchedulesChartSetup."No. of Periods",BusChartBuf.GetPeriodLength),
                  GetBaseDate(BusChartBuf,IsInitState));
            if AccountSchedulesChartSetup."Start Date" <> NewStartDate then begin
              AccountSchedulesChartSetup.VALIDATE("Start Date",NewStartDate);
              AccountSchedulesChartSetup.MODIFY(true);
            end;
          end;
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          SalesByCustGrpChartSetup.SetPeriodLength(PeriodLength);
        else
          BusChartBuf."Period Length" := PeriodLength;
      end;
    END;

    [Internal]
    PROCEDURE UpdateChart@6012(VAR ChartDefinition@6001 : Record "Chart Definition";VAR BusinessChartBuffer@6000 : Record "Business Chart Buffer";Period@6002 : Option);
    BEGIN
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Acc. Sched. Chart Management":
          begin
            AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartDefinition."Chart Name",0);
            AccSchedChartManagement.UpdateData(BusinessChartBuffer,Period,AccountSchedulesChartSetup);
          end;
        CODEUNIT::"Aged Inventory Chart Mgt.":
          AgedInventoryChartMgt.UpdateChart(BusinessChartBuffer);
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.":
          begin
            SalesByCustGrpChartSetup.SetPeriod(Period);
            SalesByCustGrpChartMgt.UpdateChart(BusinessChartBuffer);
          end;
        CODEUNIT::"Aged Acc. Receivable":
          begin
            BusinessChartBuffer."Period Filter Start Date" := WORKDATE;
            AgedAccReceivable.UpdateDataPerGroup(BusinessChartBuffer,TempEntryNoAmountBuf);
            AgedAccReceivable.SaveSettings(BusinessChartBuffer);
          end;
        CODEUNIT::"Aged Acc. Payable":
          begin
            BusinessChartBuffer."Period Filter Start Date" := WORKDATE;
            AgedAccPayable.UpdateData(BusinessChartBuffer,TempEntryNoAmountBuf);
            AgedAccPayable.SaveSettings(BusinessChartBuffer)
          end;
        CODEUNIT::"Top Five Customers Chart Mgt.":
          TopFiveCustomersChartMgt.UpdateChart(BusinessChartBuffer);
        else
          TopTenCustomersChartMgt.UpdateChart(BusinessChartBuffer);
      end;
      UpdateLastUsedChart(ChartDefinition);
    END;

    [External]
    PROCEDURE UpdateNextPrevious@6002(VAR ChartDefinition@6001 : Record "Chart Definition") : Boolean;
    BEGIN
      exit(ChartDefinition."Code Unit ID" in
        [CODEUNIT::"Acc. Sched. Chart Management",
         CODEUNIT::"Sales by Cust. Grp. Chart Mgt."]);
    END;

    [External]
    PROCEDURE UpdateStatusText@6003(VAR ChartDefinition@6000 : Record "Chart Definition";VAR BusinessChartBuffer@1000 : Record "Business Chart Buffer";VAR StatusText@6001 : Text);
    VAR
      StartDate@1001 : Date;
      EndDate@1002 : Date;
    BEGIN
      StartDate := BusinessChartBuffer."Period Filter Start Date";
      EndDate := BusinessChartBuffer."Period Filter End Date";
      case ChartDefinition."Code Unit ID" of
        CODEUNIT::"Acc. Sched. Chart Management":
          with AccountSchedulesChartSetup do
            case "Base X-Axis on" of
              "Base X-Axis on"::Period:
                StatusText := STRSUBSTNO(MediumStatusTxt,ChartDefinition."Chart Name","Period Length");
              "Base X-Axis on"::"Acc. Sched. Line",
              "Base X-Axis on"::"Acc. Sched. Column":
                StatusText := STRSUBSTNO(LongStatusTxt,ChartDefinition."Chart Name",StartDate,EndDate,"Period Length");
            end;
        CODEUNIT::"Sales by Cust. Grp. Chart Mgt.",
        CODEUNIT::"Aged Acc. Receivable",
        CODEUNIT::"Aged Acc. Payable",
        CODEUNIT::"Aged Inventory Chart Mgt.":
          StatusText := STRSUBSTNO(MediumStatusTxt,ChartDefinition."Chart Name",BusinessChartBuffer."Period Length");
        else
          StatusText := ChartDefinition."Chart Name";
      end;
    END;

    LOCAL PROCEDURE UpdateLastUsedChart@4(ChartDefinition@1001 : Record "Chart Definition");
    VAR
      LastUsedChart@1000 : Record "Last Used Chart";
    BEGIN
      with LastUsedChart do
        if GET(USERID) then begin
          VALIDATE("Code Unit ID",ChartDefinition."Code Unit ID");
          VALIDATE("Chart Name",ChartDefinition."Chart Name");
          MODIFY;
        end else begin
          VALIDATE(UID,USERID);
          VALIDATE("Code Unit ID",ChartDefinition."Code Unit ID");
          VALIDATE("Chart Name",ChartDefinition."Chart Name");
          INSERT;
        end;
    END;

    LOCAL PROCEDURE InsertChartDefinition@7(ChartCodeunitId@1000 : Integer;ChartName@1001 : Text[60]);
    VAR
      ChartDefinition@1002 : Record "Chart Definition";
    BEGIN
      if not ChartDefinition.GET(ChartCodeunitId,ChartName) then begin
        ChartDefinition."Code Unit ID" := ChartCodeunitId;
        ChartDefinition."Chart Name" := ChartName;
        ChartDefinition.Enabled := true;
        ChartDefinition.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetPeriodLength@31() : Text[1];
    BEGIN
      case AccountSchedulesChartSetup."Period Length" of
        AccountSchedulesChartSetup."Period Length"::Day:
          exit('D');
        AccountSchedulesChartSetup."Period Length"::Week:
          exit('W');
        AccountSchedulesChartSetup."Period Length"::Month:
          exit('M');
        AccountSchedulesChartSetup."Period Length"::Quarter:
          exit('Q');
        AccountSchedulesChartSetup."Period Length"::Year:
          exit('Y');
      end;
    END;

    LOCAL PROCEDURE GetBaseDate@8(VAR BusChartBuf@1005 : Record "Business Chart Buffer";IsInitState@1001 : Boolean) : Date;
    VAR
      ColumnIndex@1000 : Integer;
      StartDate@1002 : Date;
      EndDate@1003 : Date;
    BEGIN
      if AccountSchedulesChartSetup."Look Ahead" then
        ColumnIndex := 0
      else
        ColumnIndex := AccountSchedulesChartSetup."No. of Periods" - 1;

      if IsInitState then
        exit(WORKDATE);

      BusChartBuf.GetPeriodFromMapColumn(ColumnIndex,StartDate,EndDate);

      if AccountSchedulesChartSetup."Look Ahead" then
        exit(StartDate);

      exit(CALCDATE(STRSUBSTNO('<1%1>',GetPeriodLength),EndDate));
    END;

    BEGIN
    END.
  }
}

