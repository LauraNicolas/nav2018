OBJECT Table 8622 Config. Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Name;
    OnDelete=VAR
               ConfigRelatedTable@1000 : Record "Config. Related Table";
             BEGIN
               if CountWorksheetTableOccurrences("Table ID") = 1 then begin
                 ConfigRelatedTable.SETRANGE("Table ID","Table ID");
                 ConfigRelatedTable.DELETEALL(true);
               end;
             END;

    CaptionML=ENU=Config. Line;
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 2   ;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                if "Line Type" <> "Line Type"::Table then
                                                                  TESTFIELD("Table ID",0);
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Area,Group,Table;
                                                   OptionString=Area,Group,Table }
    { 3   ;   ;Table ID            ;Integer       ;TableRelation=IF ("Line Type"=CONST(Table)) Object.ID WHERE (Type=CONST(Table),
                                                                                                                ID=FILTER(..99000999|2000000004|2000000005));
                                                   OnValidate=VAR
                                                                RecRef@1000 : RecordRef;
                                                              BEGIN
                                                                if CurrFieldNo > 0 then
                                                                  TESTFIELD("Line Type","Line Type"::Table);

                                                                if ("Table ID" <> xRec."Table ID") and (xRec."Table ID" > 0) then
                                                                  TESTFIELD("Dimensions as Columns",false);

                                                                if ("Table ID" <> xRec."Table ID") and ("Package Code" <> '') then
                                                                  if CONFIRM(Text003,false) then
                                                                    "Package Code" := ''
                                                                  else begin
                                                                    "Table ID" := xRec."Table ID";
                                                                    exit;
                                                                  end;

                                                                if "Table ID" > 0 then begin
                                                                  RecRef.OPEN("Table ID");
                                                                  VALIDATE(Name,RecRef.CAPTION);
                                                                  "Page ID" := ConfigMgt.FindPage("Table ID");
                                                                  "Copying Available" := ConfigMgt.TransferContents("Table ID",'',false);
                                                                  GetRelatedTables;
                                                                end else
                                                                  if xRec."Table ID" > 0 then
                                                                    ERROR(Text001);
                                                              END;

                                                   OnLookup=VAR
                                                              ConfigValidateMgt@1000 : Codeunit "Config. Validate Management";
                                                            BEGIN
                                                              TESTFIELD("Line Type","Line Type"::Table);
                                                              ConfigValidateMgt.LookupTable("Table ID");
                                                              VALIDATE("Table ID");
                                                            END;

                                                   CaptionML=ENU=Table ID }
    { 4   ;   ;Name                ;Text250       ;CaptionML=ENU=Name }
    { 5   ;   ;Company Filter      ;Text30        ;FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Company Filter }
    { 6   ;   ;Company Filter (Source Table);Text30;
                                                   FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Company Filter (Source Table) }
    { 8   ;   ;No. of Records      ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Table Information"."No. of Records" WHERE ("Company Name"=FIELD("Company Filter"),
                                                                                                               "Table No."=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Records;
                                                   BlankZero=true;
                                                   Editable=false }
    { 9   ;   ;No. of Records (Source Table);Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Table Information"."No. of Records" WHERE ("Company Name"=FIELD("Company Filter (Source Table)"),
                                                                                                               "Table No."=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Records (Source Table);
                                                   BlankZero=true;
                                                   Editable=false }
    { 10  ;   ;Licensed Table      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("License Permission" WHERE ("Object Type"=CONST(TableData),
                                                                                                 "Object Number"=FIELD("Table ID"),
                                                                                                 "Read Permission"=CONST(Yes),
                                                                                                 "Insert Permission"=CONST(Yes),
                                                                                                 "Modify Permission"=CONST(Yes),
                                                                                                 "Delete Permission"=CONST(Yes)));
                                                   CaptionML=ENU=Licensed Table;
                                                   BlankZero=true;
                                                   Editable=false }
    { 11  ;   ;Promoted Table      ;Boolean       ;OnValidate=BEGIN
                                                                if "Promoted Table" then
                                                                  TESTFIELD("Line Type","Line Type"::Table);
                                                              END;

                                                   CaptionML=ENU=Promoted Table }
    { 12  ;   ;Dimensions as Columns;Boolean      ;OnValidate=VAR
                                                                ConfigPackageTable@1000 : Record "Config. Package Table";
                                                              BEGIN
                                                                TESTFIELD("Line Type","Line Type"::Table);
                                                                TESTFIELD("Table ID");
                                                                TESTFIELD("Package Code");
                                                                ConfigPackageTable.GET("Package Code","Table ID");
                                                                ConfigPackageTable.SetHideValidationDialog(HideValidationDialog);
                                                                ConfigPackageTable.VALIDATE("Dimensions as Columns","Dimensions as Columns");
                                                                ConfigPackageTable.MODIFY;
                                                              END;

                                                   CaptionML=ENU=Dimensions as Columns }
    { 13  ;   ;Copying Available   ;Boolean       ;CaptionML=ENU=Copying Available;
                                                   Editable=false }
    { 14  ;   ;Page ID             ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Page));
                                                   OnLookup=VAR
                                                              ConfigValidateMgt@1000 : Codeunit "Config. Validate Management";
                                                            BEGIN
                                                              ConfigValidateMgt.LookupPage("Page ID");
                                                              VALIDATE("Page ID");
                                                            END;

                                                   CaptionML=ENU=Page ID }
    { 15  ;   ;Page Caption        ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE ("Object Type"=CONST(Page),
                                                                                                             "Object ID"=FIELD("Page ID")));
                                                   CaptionML=ENU=Page Caption;
                                                   Editable=false }
    { 18  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                if ("Starting Date" <> 0D) and (xRec."Starting Date" <> 0D) and ("Ending Date" <> 0D) then
                                                                  "Ending Date" := "Ending Date" + ("Starting Date" - xRec."Starting Date");
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 19  ;   ;Ending Date         ;Date          ;CaptionML=ENU=Ending Date }
    { 20  ;   ;Responsible ID      ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit "User Management";
                                                              BEGIN
                                                                UserMgt.ValidateUserID("Responsible ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("Responsible ID");
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Responsible ID }
    { 21  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,In Progress,Completed,Ignored,Blocked";
                                                   OptionString=" ","In Progress",Completed,Ignored,Blocked }
    { 25  ;   ;Vertical Sorting    ;Integer       ;CaptionML=ENU=Vertical Sorting }
    { 26  ;   ;Data Origin         ;Text50        ;CaptionML=ENU=Data Origin }
    { 28  ;   ;Reference           ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Reference }
    { 30  ;   ;Licensed Page       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("License Permission" WHERE ("Object Type"=CONST(Page),
                                                                                                 "Object Number"=FIELD("Page ID"),
                                                                                                 "Execute Permission"=CONST(Yes)));
                                                   CaptionML=ENU=Licensed Page;
                                                   BlankZero=true;
                                                   Editable=false }
    { 31  ;   ;No. of Question Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Question Area" WHERE ("Table ID"=FIELD("Table ID")));
                                                   CaptionML=ENU=No. of Question Groups;
                                                   Editable=false }
    { 32  ;   ;Parent Line No.     ;Integer       ;CaptionML=ENU=Parent Line No. }
    { 36  ;   ;Package Code        ;Code20        ;TableRelation="Config. Package";
                                                   CaptionML=ENU=Package Code }
    { 37  ;   ;Package Caption     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Config. Package"."Package Name" WHERE (Code=FIELD("Package Code")));
                                                   CaptionML=ENU=Package Caption;
                                                   Editable=false }
    { 38  ;   ;Package Exists      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Config. Package" WHERE (Code=FIELD("Package Code")));
                                                   CaptionML=ENU=Package Exists;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Line No."                              ;Clustered=true }
    {    ;"Line Type",Status,"Promoted Table"      }
    {    ;"Table ID"                               }
    {    ;"Vertical Sorting"                       }
    {    ;"Line Type","Parent Line No."            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigMgt@1001 : Codeunit "Config. Management";
      Text001@1000 : TextConst 'ENU=Delete the line instead.';
      Text002@1002 : TextConst 'ENU=The status %1 is not supported.';
      Text003@1003 : TextConst 'ENU=The table you are trying to rename is linked to a package. Do you want to remove the link?';
      Text004@1004 : TextConst 'ENU=You cannot process line for table %1 and package code %2 because it is blocked.';
      HideValidationDialog@1005 : Boolean;
      NoDuplicateLinesMsg@1006 : TextConst 'ENU=There are no duplicate lines.';
      NoOfDuplicateLinesDeletedMsg@1007 : TextConst 'ENU=%1 line(s) were deleted.';

    [External]
    PROCEDURE CheckBlocked@4();
    BEGIN
      if Status = Status::Blocked then
        ERROR(Text004,"Table ID","Package Code");
    END;

    [External]
    PROCEDURE ShowTableData@3();
    BEGIN
      if ("Line Type" = "Line Type"::Table) and ("Page ID" <> 0) then
        PAGE.RUN("Page ID");
    END;

    [External]
    PROCEDURE ShowQuestions@10();
    VAR
      ConfigQuestionArea@1000 : Record "Config. Question Area";
      ConfigQuestionAreaPage@1001 : Page "Config. Question Area";
    BEGIN
      TESTFIELD("Line Type","Line Type"::Table);
      TESTFIELD("Table ID");

      ConfigQuestionArea.SETRANGE("Table ID","Table ID");
      ConfigQuestionArea.FINDFIRST;

      ConfigQuestionArea.RESET;
      ConfigQuestionArea.FILTERGROUP(2);
      ConfigQuestionArea.SETRANGE("Table ID","Table ID");
      ConfigQuestionArea.FILTERGROUP(0);
      ConfigQuestionAreaPage.SETTABLEVIEW(ConfigQuestionArea);
      ConfigQuestionAreaPage.RUNMODAL;
      CLEAR(ConfigQuestionAreaPage);
    END;

    [External]
    PROCEDURE GetProgress@1() : Integer;
    VAR
      Total@1001 : Integer;
      TotalStatusWeight@1005 : Decimal;
    BEGIN
      Total := GetNoTables;
      TotalStatusWeight := GetTotalStatusWeight;

      if Total = 0 then
        exit(0);

      exit(ROUND(100 * TotalStatusWeight / Total,1));
    END;

    [External]
    PROCEDURE GetNoOfDirectChildrenTables@2() : Integer;
    VAR
      ConfigLine@1000 : Record "Config. Line";
    BEGIN
      with ConfigLine do begin
        RESET;
        SETCURRENTKEY("Line Type");
        SETRANGE("Line Type","Line Type"::Table);
        SETRANGE("Parent Line No.",Rec."Line No.");
        exit(COUNT);
      end;
    END;

    [External]
    PROCEDURE GetDirectChildrenTablesStatusWeight@8() StatusWeight : Decimal;
    VAR
      ConfigLine@1000 : Record "Config. Line";
    BEGIN
      with ConfigLine do begin
        RESET;
        SETCURRENTKEY("Line Type");
        SETRANGE("Line Type","Line Type"::Table);
        SETRANGE("Parent Line No.",Rec."Line No.");
        if FINDSET then
          repeat
            StatusWeight += GetLineStatusWeight;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetNoTables@7() Total : Integer;
    VAR
      ConfigLine@1001 : Record "Config. Line";
    BEGIN
      case "Line Type" of
        "Line Type"::Table:
          Total := 0;
        "Line Type"::Group:
          Total := GetNoOfDirectChildrenTables;
        "Line Type"::Area:
          begin
            Total := GetNoOfDirectChildrenTables;

            ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Group);
            ConfigLine.SETRANGE("Parent Line No.","Line No.");
            if ConfigLine.FINDSET then
              repeat
                Total += ConfigLine.GetNoOfDirectChildrenTables;
              until ConfigLine.NEXT = 0;
          end;
      end;
    END;

    LOCAL PROCEDURE GetTotalStatusWeight@13() Total : Decimal;
    VAR
      ConfigLine@1001 : Record "Config. Line";
    BEGIN
      case "Line Type" of
        "Line Type"::Table:
          Total := 0;
        "Line Type"::Group:
          Total := GetDirectChildrenTablesStatusWeight;
        "Line Type"::Area:
          begin
            Total := GetDirectChildrenTablesStatusWeight;

            ConfigLine.SETRANGE("Line Type",ConfigLine."Line Type"::Group);
            ConfigLine.SETRANGE("Parent Line No.","Line No.");
            if ConfigLine.FINDSET then
              repeat
                Total += ConfigLine.GetDirectChildrenTablesStatusWeight;
              until ConfigLine.NEXT = 0;
          end;
      end;
    END;

    LOCAL PROCEDURE GetRelatedTables@5();
    VAR
      ConfigRelatedTable@1000 : Record "Config. Related Table";
      ConfigRelatedField@1002 : Record "Config. Related Field";
      Field@1001 : Record Field;
    BEGIN
      Field.SETRANGE(TableNo,"Table ID");
      Field.SETRANGE(Class,Field.Class::Normal);
      if Field.FINDSET then
        repeat
          if Field.RelationTableNo <> 0 then
            if not ConfigRelatedField.GET("Table ID",Field."No.") then begin
              ConfigRelatedField.INIT;
              ConfigRelatedField."Table ID" := "Table ID";
              ConfigRelatedField."Field ID" := Field."No.";
              ConfigRelatedField."Relation Table ID" := Field.RelationTableNo;
              ConfigRelatedField.INSERT;
            end;
        until Field.NEXT = 0;

      if ConfigRelatedField.FINDSET then
        repeat
          if not ConfigRelatedTable.GET(ConfigRelatedField."Table ID",ConfigRelatedField."Relation Table ID") then begin
            ConfigRelatedTable."Table ID" := ConfigRelatedField."Table ID";
            ConfigRelatedTable."Relation Table ID" := ConfigRelatedField."Relation Table ID";
            ConfigRelatedTable.INSERT;
          end;
        until ConfigRelatedField.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLineStatusWeight@6() : Decimal;
    BEGIN
      case Status of
        Status::" ":
          exit(0);
        Status::Completed,Status::Ignored:
          exit(1);
        Status::"In Progress",Status::Blocked:
          exit(0.5);
        else
          ERROR(Text002,Status);
      end;
    END;

    LOCAL PROCEDURE CountWorksheetTableOccurrences@9(TableID@1000 : Integer) : Integer;
    VAR
      ConfigLine@1001 : Record "Config. Line";
    BEGIN
      ConfigLine.SETRANGE("Table ID",TableID);
      exit(ConfigLine.COUNT);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [Internal]
    PROCEDURE GetNoOfRecords@11() : Integer;
    BEGIN
      exit(GetNoOfDatabaseRecords("Table ID","Company Filter"));
    END;

    [Internal]
    PROCEDURE GetNoOfRecordsSourceTable@12() : Integer;
    BEGIN
      exit(GetNoOfDatabaseRecords("Table ID","Company Filter (Source Table)"));
    END;

    LOCAL PROCEDURE GetNoOfDatabaseRecords@15(TableID@1002 : Integer;Filter@1003 : Text) : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      if TableID = 0 then
        exit(0);

      RecRef.OPEN(TableID,false,Filter);
      exit(RecRef.COUNT);
    END;

    [External]
    PROCEDURE DeleteDuplicateLines@16();
    VAR
      ConfigLine@1001 : Record "Config. Line";
      TempConfigLine@1002 : TEMPORARY Record "Config. Line";
      NoOfDuplicateLines@1003 : Integer;
    BEGIN
      if FINDSET then
        repeat
          TempConfigLine.RESET;
          TempConfigLine.SETRANGE("Line Type","Line Type"::Table);
          TempConfigLine.SETRANGE("Table ID","Table ID");
          TempConfigLine.SETRANGE("Package Code","Package Code");
          if not TempConfigLine.ISEMPTY then begin
            ConfigLine.GET("Line No.");
            ConfigLine.DELETE(true);
            NoOfDuplicateLines := NoOfDuplicateLines + 1;
          end else begin
            TempConfigLine.INIT;
            TempConfigLine := Rec;
            TempConfigLine.INSERT;
          end;
        until NEXT = 0;

      if NoOfDuplicateLines = 0 then
        MESSAGE(NoDuplicateLinesMsg)
      else
        MESSAGE(NoOfDuplicateLinesDeletedMsg,NoOfDuplicateLines);
    END;

    BEGIN
    END.
  }
}

