OBJECT Codeunit 1410 Doc. Exch. Service Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Invoice Header"=m,
                TableData "Sales Cr.Memo Header"=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MissingCredentialsQst@1000 : TextConst '@@@="%1=Doc. Exch. Service Setup";ENU=The %1 is missing the secret keys or tokens. Do you want to open the %1 window?';
      MissingCredentialsErr@1001 : TextConst '@@@="%1 = Doc. Exch. Service Setup";ENU=The tokens and secret keys must be filled in the %1 window.';
      ResponseTempBlob@1006 : Record TempBlob;
      TempTraceTempBlob@1028 : TEMPORARY Record TempBlob;
      Trace@1027 : Codeunit Trace;
      HttpWebRequestMgt@1005 : Codeunit "Http Web Request Mgt.";
      ConnectionSuccessMsg@1012 : TextConst 'ENU=The connection test was successful. The settings are valid.';
      DocSendSuccessMsg@1007 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully sent to the document exchange service for processing.';
      DocUploadSuccessMsg@1030 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully uploaded to the document exchange service for processing.';
      DocDispatchSuccessMsg@1017 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully sent for dispatching.';
      DocDispatchFailedMsg@1018 : TextConst '@@@=%1 is the actual document no.;ENU="The document was not successfully dispatched. "';
      DocStatusOKMsg@1016 : TextConst '@@@=%1 is the returned value.;ENU=The current status of the electronic document is %1.';
      NotEnabledErr@1010 : TextConst 'ENU=The document exchange service is not enabled.';
      DocExchLinks@1020 : Codeunit "Doc. Exch. Links";
      XMLDOMMgt@1033 : Codeunit "XML DOM Management";
      GLBResponseInStream@1011 : InStream;
      CheckConnectionTxt@1013 : TextConst 'ENU=Check connection.';
      SendDocTxt@1014 : TextConst 'ENU=Send document.';
      GLBHttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      GLBResponseHeaders@1019 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      GLBLastUsedGUID@1015 : Text;
      DispatchDocTxt@1009 : TextConst 'ENU=Dispatch document.';
      GetDocStatusTxt@1002 : TextConst 'ENU=Check document status.';
      GetDocsTxt@1021 : TextConst 'ENU=Get received documents.';
      LoggingConstTxt@1003 : TextConst 'ENU=Document exchange service.';
      GetDocErrorTxt@1004 : TextConst 'ENU=Check document dispatch errors.';
      MarkBusinessProcessedTxt@1022 : TextConst 'ENU=Mark as Business Processed.';
      DocIdImportedTxt@1023 : TextConst '@@@=%1 is the actual doc id.;ENU=The document ID %1 is imported into incoming documents.';
      FileInvalidTxt@1024 : TextConst '@@@=%1 is the actual doc id;ENU="The document ID %1 is not a valid XML format. "';
      GLBTraceLogEnabled@1026 : Boolean;
      UnSupportedTableTypeErr@1025 : TextConst '@@@=%1 is the table.;ENU=The %1 table is not supported.';
      InvalidHeaderResponseMsg@1029 : TextConst 'ENU=The document exchange service did not return a document identifier.';
      CannotResendErr@1031 : TextConst 'ENU=You cannot send this electronic document because it is already delivered or in progress.';
      MalformedGuidErr@1032 : TextConst 'ENU=The document exchange service did not return a valid document identifier.';

    [External]
    PROCEDURE SetURLsToDefault@2(VAR DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup");
    BEGIN
      with DocExchServiceSetup do begin
        "Sign-up URL" := 'https://go.tradeshift.com/register';
        "Service URL" := 'https://api.tradeshift.com/tradeshift/rest/external';
        "Sign-in URL" := 'https://go.tradeshift.com/login';
        "User Agent" := COPYSTR(COMPANYNAME + '/v1.0',1,MAXSTRLEN("User Agent"));
      end;
    END;

    [Internal]
    PROCEDURE CheckConnection@10();
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
    BEGIN
      VerifyPrerequisites(true);
      Initialize(GetCheckConnectionURL,'GET','');

      DocExchServiceSetup.GET;
      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(DocExchServiceSetup.RECORDID,CheckConnectionTxt,'');

      LogActivitySucceeded(DocExchServiceSetup.RECORDID,CheckConnectionTxt,ConnectionSuccessMsg);

      MESSAGE(ConnectionSuccessMsg);

      if GLBTraceLogEnabled then
        Trace.LogStreamToTempFile(GLBResponseInStream,'checkstatus',TempTraceTempBlob);
    END;

    [Internal]
    PROCEDURE SendUBLDocument@36(DocVariant@1003 : Variant;FileName@1000 : Text) : Text;
    VAR
      DocRecRef@1002 : RecordRef;
    BEGIN
      CheckServiceEnabled;

      DocRecRef.GETTABLE(DocVariant);

      CheckDocumentStatus(DocRecRef);

      Initialize(GetPostSalesURL(DocRecRef),'POST',FileName);

      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(DocRecRef.RECORDID,SendDocTxt,'');

      LogActivitySucceeded(DocRecRef.RECORDID,SendDocTxt,DocSendSuccessMsg);

      DocExchLinks.UpdateDocumentRecord(DocRecRef,GLBLastUsedGUID,'');

      if GUIALLOWED then
        MESSAGE(DocSendSuccessMsg);

      exit(GLBLastUsedGUID);
    END;

    [Internal]
    PROCEDURE SendDocument@20(DocVariant@1003 : Variant;FileName@1001 : Text) : Text;
    VAR
      DocRecRef@1002 : RecordRef;
      DocIdentifier@1000 : Text;
    BEGIN
      CheckServiceEnabled;

      DocIdentifier := GetGUID;
      DocRecRef.GETTABLE(DocVariant);

      CheckDocumentStatus(DocRecRef);

      PutDocument(FileName,DocIdentifier,DocRecRef);
      DispatchDocument(DocIdentifier,DocRecRef);

      if GUIALLOWED then
        MESSAGE(DocSendSuccessMsg);

      exit(DocIdentifier);
    END;

    LOCAL PROCEDURE PutDocument@26(FileName@1003 : Text;DocIdentifier@1000 : Text;DocRecRef@1002 : RecordRef);
    BEGIN
      Initialize(GetPUTDocURL(DocIdentifier),'PUT',FileName);

      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(DocRecRef.RECORDID,SendDocTxt,'');

      if not GLBHttpStatusCode.Equals(GLBHttpStatusCode.NoContent) then
        LogActivityFailedAndError(DocRecRef.RECORDID,SendDocTxt,'');

      LogActivitySucceeded(DocRecRef.RECORDID,SendDocTxt,DocUploadSuccessMsg);

      if GLBTraceLogEnabled then
        Trace.LogStreamToTempFile(GLBResponseInStream,'put',TempTraceTempBlob);
    END;

    LOCAL PROCEDURE DispatchDocument@31(DocOrigIdentifier@1000 : Text;DocRecRef@1001 : RecordRef);
    VAR
      DocIdentifier@1003 : Text;
      PlaceholderGuid@1002 : GUID;
    BEGIN
      Initialize(GetDispatchDocURL(DocOrigIdentifier),'POST','');

      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(DocRecRef.RECORDID,DispatchDocTxt,'');

      if not GLBHttpStatusCode.Equals(GLBHttpStatusCode.Created) then begin
        DocExchLinks.UpdateDocumentRecord(DocRecRef,'',DocOrigIdentifier);
        LogActivityFailedAndError(DocRecRef.RECORDID,DispatchDocTxt,DocDispatchFailedMsg);
      end;

      if GLBTraceLogEnabled then
        Trace.LogStreamToTempFile(GLBResponseInStream,'dispatch',TempTraceTempBlob);

      DocIdentifier := GLBResponseHeaders.Get(GetDocumentIDKey);
      if not EVALUATE(PlaceholderGuid,DocIdentifier) then
        LogActivityFailedAndError(DocRecRef.RECORDID,DispatchDocTxt,InvalidHeaderResponseMsg);
      DocExchLinks.UpdateDocumentRecord(DocRecRef,DocIdentifier,DocOrigIdentifier);

      LogActivitySucceeded(DocRecRef.RECORDID,DispatchDocTxt,DocDispatchSuccessMsg);
    END;

    [Internal]
    PROCEDURE GetDocumentStatus@18(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text[50];DocOrigIdentifier@1002 : Text[50]) : Text;
    VAR
      Errors@1005 : Text;
    BEGIN
      CheckServiceEnabled;

      // Check for dispatch errors first
      if DocOrigIdentifier <> '' then
        if GetDocDispatchErrors(DocRecordID,DocOrigIdentifier,Errors) then
          if Errors <> '' then
            exit('FAILED');

      // Check metadata
      if not GetDocumentMetadata(DocRecordID,DocIdentifier,Errors) then
        exit('PENDING');

      // If metadata exist it means doc has been dispatched
      exit(Errors);
    END;

    LOCAL PROCEDURE GetDocDispatchErrors@27(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text;VAR Errors@1002 : Text) : Boolean;
    VAR
      XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;

      Initialize(GetDispatchErrorsURL(DocIdentifier),'GET','');

      if not ExecuteWebServiceRequest then begin
        LogActivityFailed(DocRecordID,GetDocErrorTxt,'');
        exit(false);
      end;

      if not HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) then begin
        LogActivityFailed(DocRecordID,GetDocErrorTxt,'');
        exit(false);
      end;

      Errors := XMLDOMMgt.FindNodeTextWithNamespace(XmlDoc.DocumentElement,GetErrorXPath,
          GetPrefix,GetApiNamespace);

      LogActivitySucceeded(DocRecordID,GetDocErrorTxt,Errors);

      if GLBTraceLogEnabled then
        Trace.LogStreamToTempFile(GLBResponseInStream,'dispatcherrors',TempTraceTempBlob);

      exit(true);
    END;

    [Internal]
    PROCEDURE GetDocumentMetadata@19(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text[50];VAR NewStatus@1002 : Text) : Boolean;
    VAR
      XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;
      NewStatus := '';

      Initialize(GetDocStatusURL(DocIdentifier),'GET','');

      if not ExecuteWebServiceRequest then begin
        LogActivityFailed(DocRecordID,GetDocStatusTxt,'');
        exit(false);
      end;

      if not HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) then begin
        LogActivityFailed(DocRecordID,GetDocStatusTxt,'');
        exit(false);
      end;

      if GLBTraceLogEnabled then
        Trace.LogStreamToTempFile(GLBResponseInStream,'checkstatus',TempTraceTempBlob);

      NewStatus := XMLDOMMgt.FindNodeTextWithNamespace(XmlDoc.DocumentElement,GetStatusXPath,GetPrefix,GetPublicNamespace);
      LogActivitySucceeded(DocRecordID,GetDocStatusTxt,STRSUBSTNO(DocStatusOKMsg,NewStatus));
      exit(true);
    END;

    [Internal]
    PROCEDURE ReceiveDocuments@9(ContextRecordID@1002 : RecordID);
    VAR
      XmlDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveDocsURL,'GET','');

      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(ContextRecordID,GetDocsTxt,'');

      if not HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) then
        LogActivityFailedAndError(ContextRecordID,GetDocsTxt,'');

      ProcessReceivedDocs(ContextRecordID,XmlDoc);
    END;

    LOCAL PROCEDURE ProcessReceivedDocs@126(ContextRecordID@1004 : RecordID;XmlDocs@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      IncomingDocument@1003 : Record "Incoming Document";
      XMLRootNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Node@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DummyGuid@1010 : GUID;
      DocIdentifier@1002 : Text;
      Description@1000 : Text;
    BEGIN
      XMLRootNode := XmlDocs.DocumentElement;

      foreach Node in XMLRootNode.ChildNodes do begin
        DocIdentifier := XMLDOMMgt.FindNodeTextWithNamespace(Node,GetDocumentIDXPath,
            GetPrefix,GetPublicNamespace);

        if not EVALUATE(DummyGuid,DocIdentifier) then
          LogActivityFailedAndError(ContextRecordID,GetDocsTxt,MalformedGuidErr);
        if TryGetDocumentDescription(Node,Description) then;
        if DELCHR(Description,'<>',' ') = '' then
          Description := DocIdentifier;
        GetOriginalDocument(ContextRecordID,DocIdentifier);
        CreateIncomingDocEntry(IncomingDocument,ContextRecordID,DocIdentifier,Description);

        if not MarkDocBusinessProcessed(DocIdentifier) then begin
          IncomingDocument.DELETE;
          LogActivityFailed(ContextRecordID,MarkBusinessProcessedTxt,'');
        end else
          LogActivitySucceeded(ContextRecordID,MarkBusinessProcessedTxt,STRSUBSTNO(DocIdImportedTxt,DocIdentifier));
        COMMIT;

        IncomingDocument.FIND;
        OnAfterIncomingDocReceivedFromDocExch(IncomingDocument);
      end;
    END;

    LOCAL PROCEDURE GetOriginalDocument@42(ContextRecordID@1002 : RecordID;DocIdentifier@1000 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveOriginalDocIDURL(DocIdentifier),'GET','');

      // If can't get the original, it means it was not a 2-step. Get the actual TS-UBL
      if not ExecuteWebServiceRequest then
        GetDocument(ContextRecordID,DocIdentifier);
    END;

    LOCAL PROCEDURE GetDocument@29(ContextRecordID@1002 : RecordID;DocIdentifier@1000 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveDocIDURL(DocIdentifier),'GET','');

      if not ExecuteWebServiceRequest then
        LogActivityFailedAndError(ContextRecordID,GetDocsTxt,'');
    END;

    [TryFunction]
    LOCAL PROCEDURE MarkDocBusinessProcessed@41(DocIdentifier@1001 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetSetTagURL(DocIdentifier),'PUT','');

      ExecuteWebServiceRequest;
    END;

    LOCAL PROCEDURE CreateIncomingDocEntry@131(VAR IncomingDocument@1001 : Record "Incoming Document";ContextRecordID@1004 : RecordID;DocIdentifier@1003 : Text;Description@1005 : Text);
    VAR
      IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // Assert response is XML
      if not HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) then
        LogActivityFailedAndError(ContextRecordID,GetDocsTxt,STRSUBSTNO(FileInvalidTxt,DocIdentifier));

      IncomingDocument.CreateIncomingDocument(
        COPYSTR(Description,1,MAXSTRLEN(IncomingDocument.Description)),GetExternalDocURL(DocIdentifier));

      // set received XML as main attachment and extract additional ones as secondary attachments
      IncomingDocument.AddAttachmentFromStream(IncomingDocumentAttachment,DocIdentifier,'xml',GLBResponseInStream);
      ProcessAttachments(IncomingDocument,XmlDoc);
    END;

    LOCAL PROCEDURE ProcessAttachments@51(VAR IncomingDocument@1003 : Record "Incoming Document";XmlDoc@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      NodeList@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Node@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMMgt.FindNodesWithNamespace(XmlDoc.DocumentElement,GetEmbeddedDocXPath,GetPrefix,GetCBCNamespace,
        NodeList);
      foreach Node in NodeList do
        ExtractAdditionalAttachment(IncomingDocument,Node);
    END;

    LOCAL PROCEDURE ExtractAdditionalAttachment@49(VAR IncomingDocument@1007 : Record "Incoming Document";Node@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      FileMgt@1004 : Codeunit "File Management";
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      TempFile@1002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FilePath@1001 : Text;
      FileName@1000 : Text;
    BEGIN
      FileName := XMLDOMMgt.GetAttributeValue(Node,'filename');
      FilePath := FileMgt.ServerTempFileName(FileMgt.GetExtension(FileName));
      TempFile.WriteAllBytes(FilePath,Convert.FromBase64String(Node.InnerText));
      IncomingDocument.AddAttachmentFromServerFile(FileName,FilePath);
    END;

    LOCAL PROCEDURE Initialize@3(URL@1002 : Text;Method@1001 : Text[6];BodyFilePath@1003 : Text);
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
      OAuthAuthorization@1006 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      OAuthConsumer@1005 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      OAuthToken@1004 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
    BEGIN
      CheckCredentials;

      with DocExchServiceSetup do begin
        GET;
        OAuthConsumer := OAuthConsumer.Consumer(GetPassword("Consumer Key"),GetPassword("Consumer Secret"));
        OAuthToken := OAuthToken.Token(GetPassword(Token),GetPassword("Token Secret"));
        OAuthAuthorization := OAuthAuthorization.OAuthAuthorization(OAuthConsumer,OAuthToken);
      end;

      CLEAR(HttpWebRequestMgt);
      HttpWebRequestMgt.Initialize(URL);
      HttpWebRequestMgt.SetMethod(Method);
      HttpWebRequestMgt.AddHeader('Authorization',OAuthAuthorization.GetAuthorizationHeader(URL,Method));

      SetDefaults(BodyFilePath);
    END;

    LOCAL PROCEDURE SetDefaults@16(BodyFilePath@1000 : Text);
    VAR
      DocExchServiceSetup@1001 : Record "Doc. Exch. Service Setup";
    BEGIN
      HttpWebRequestMgt.SetContentType('text/xml');
      HttpWebRequestMgt.SetReturnType('text/xml');
      HttpWebRequestMgt.SetUserAgent(GetUserAgent);
      HttpWebRequestMgt.AddHeader('X-Tradeshift-TenantId',GetTenantID);
      HttpWebRequestMgt.AddHeader('Accept-Encoding','utf-8');
      HttpWebRequestMgt.AddBody(BodyFilePath);

      // Set tracing
      DocExchServiceSetup.GET;
      GLBTraceLogEnabled := DocExchServiceSetup."Log Web Requests";
      HttpWebRequestMgt.SetTraceLogEnabled(DocExchServiceSetup."Log Web Requests");
    END;

    [External]
    PROCEDURE CheckCredentials@4();
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
    BEGIN
      if not VerifyPrerequisites(false) then
        if CONFIRM(STRSUBSTNO(MissingCredentialsQst,DocExchServiceSetup.TABLECAPTION),true) then begin
          COMMIT;
          PAGE.RUNMODAL(PAGE::"Doc. Exch. Service Setup",DocExchServiceSetup);
          if not VerifyPrerequisites(false) then
            ERROR(MissingCredentialsErr,DocExchServiceSetup.TABLECAPTION);
        end else
          ERROR(MissingCredentialsErr,DocExchServiceSetup.TABLECAPTION);
    END;

    [TryFunction]
    LOCAL PROCEDURE ExecuteWebServiceRequest@1();
    BEGIN
      CLEAR(ResponseTempBlob);
      ResponseTempBlob.INIT;
      ResponseTempBlob.Blob.CREATEINSTREAM(GLBResponseInStream);

      if not GUIALLOWED then
        HttpWebRequestMgt.DisableUI;

      if not HttpWebRequestMgt.GetResponse(GLBResponseInStream,GLBHttpStatusCode,GLBResponseHeaders) then
        HttpWebRequestMgt.ProcessFaultXMLResponse('',GetErrorXPath,GetPrefix,GetApiNamespace);
    END;

    [External]
    PROCEDURE CheckServiceEnabled@6();
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
    BEGIN
      DocExchServiceSetup.GET;
      if not DocExchServiceSetup.Enabled then
        ERROR(NotEnabledErr);
    END;

    LOCAL PROCEDURE CheckDocumentStatus@28(DocRecRef@1000 : RecordRef);
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header";
      ServiceInvoiceHeader@1003 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1004 : Record "Service Cr.Memo Header";
    BEGIN
      case DocRecRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            DocRecRef.SETTABLE(SalesInvoiceHeader);
            if SalesInvoiceHeader."Document Exchange Status" in
               [SalesInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                SalesInvoiceHeader."Document Exchange Status"::"Delivered to Recipient",
                SalesInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            then
              ERROR(CannotResendErr);
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            DocRecRef.SETTABLE(SalesCrMemoHeader);
            if SalesCrMemoHeader."Document Exchange Status" in
               [SalesCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                SalesCrMemoHeader."Document Exchange Status"::"Delivered to Recipient",
                SalesCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            then
              ERROR(CannotResendErr);
          end;
        DATABASE::"Service Invoice Header":
          begin
            DocRecRef.SETTABLE(ServiceInvoiceHeader);
            if ServiceInvoiceHeader."Document Exchange Status" in
               [ServiceInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                ServiceInvoiceHeader."Document Exchange Status"::"Delivered to Recipient",
                ServiceInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            then
              ERROR(CannotResendErr);
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            DocRecRef.SETTABLE(ServiceCrMemoHeader);
            if ServiceCrMemoHeader."Document Exchange Status" in
               [ServiceCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                ServiceCrMemoHeader."Document Exchange Status"::"Delivered to Recipient",
                ServiceCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            then
              ERROR(CannotResendErr);
          end;
        else
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      end;
    END;

    LOCAL PROCEDURE GetTenantID@11() : Text;
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
    BEGIN
      with DocExchServiceSetup do begin
        GET;
        exit(GetPassword("Doc. Exch. Tenant ID"));
      end;
    END;

    LOCAL PROCEDURE GetUserAgent@17() : Text;
    VAR
      DocExchServiceSetup@1000 : Record "Doc. Exch. Service Setup";
    BEGIN
      with DocExchServiceSetup do begin
        GET;
        TESTFIELD("User Agent");
        exit("User Agent");
      end;
    END;

    LOCAL PROCEDURE GetFullURL@47(PartialURL@1000 : Text) : Text;
    VAR
      DocExchServiceSetup@1001 : Record "Doc. Exch. Service Setup";
    BEGIN
      with DocExchServiceSetup do begin
        GET;
        TESTFIELD("Service URL");
        exit("Service URL" + PartialURL);
      end;
    END;

    LOCAL PROCEDURE GetCheckConnectionURL@5() : Text;
    BEGIN
      exit(GetFullURL('/account/info'));
    END;

    LOCAL PROCEDURE GetPostSalesURL@46(DocRecRef@1000 : RecordRef) : Text;
    BEGIN
      case DocRecRef.NUMBER of
        DATABASE::"Sales Invoice Header",DATABASE::"Service Invoice Header":
          exit(GetPostSalesInvURL);
        DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header":
          exit(GetPostSalesCrMemoURL);
        else
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      end;
    END;

    LOCAL PROCEDURE GetPostSalesInvURL@1110() : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/dispatcher?documentId=%1&documentProfileId=tradeshift.invoice.ubl.1.0',
            GetGUID)));
    END;

    LOCAL PROCEDURE GetPostSalesCrMemoURL@12() : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/dispatcher?documentId=%1&documentProfileId=tradeshift.creditnote.ubl.1.0',
            GetGUID)));
    END;

    LOCAL PROCEDURE GetDocStatusURL@15(DocIdentifier@1001 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/%1/metadata',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetPUTDocURL@119(FileName@1000 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documentfiles/%1/file?directory=outbox',FileName)));
    END;

    LOCAL PROCEDURE GetDispatchDocURL@30(FileName@1000 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documentfiles/%1/dispatcher?directory=outbox',FileName)));
    END;

    LOCAL PROCEDURE GetDispatchErrorsURL@23(DocIdentifier@1001 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documentfiles/%1/errors',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetRetrieveDocsURL@123() : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents?stag=inbox&withouttag=BusinessDelivered&limit=%1',GetChunckSize)));
    END;

    LOCAL PROCEDURE GetRetrieveDocIDURL@130(DocIdentifier@1003 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/%1',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetRetrieveOriginalDocIDURL@21(DocIdentifier@1003 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/%1/original',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetSetTagURL@127(DocIdentifier@1002 : Text) : Text;
    BEGIN
      exit(GetFullURL(STRSUBSTNO('/documents/%1/tags/BusinessDelivered',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetGUID@1111() : Text;
    BEGIN
      GLBLastUsedGUID := DELCHR(DELCHR(FORMAT(CREATEGUID),'=','{'),'=','}');

      exit(GLBLastUsedGUID);
    END;

    LOCAL PROCEDURE GetChunckSize@33() : Integer;
    BEGIN
      exit(100);
    END;

    LOCAL PROCEDURE GetApiNamespace@13() : Text;
    BEGIN
      exit('http://tradeshift.com/api/1.0');
    END;

    LOCAL PROCEDURE GetPublicNamespace@40() : Text;
    BEGIN
      exit('http://tradeshift.com/api/public/1.0');
    END;

    LOCAL PROCEDURE GetCBCNamespace@43() : Text;
    BEGIN
      exit('urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2');
    END;

    LOCAL PROCEDURE GetErrorXPath@48() : Text;
    BEGIN
      exit(STRSUBSTNO('//%1:Message',GetPrefix));
    END;

    LOCAL PROCEDURE GetStatusXPath@22() : Text;
    BEGIN
      exit(STRSUBSTNO('//%1:DeliveryState',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentIDXPath@39() : Text;
    BEGIN
      exit(STRSUBSTNO('.//%1:DocumentId',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentTypeXPath@44() : Text;
    BEGIN
      exit(STRSUBSTNO('.//%1:DocumentType',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentIDForDescriptionXPath@38() : Text;
    BEGIN
      exit(STRSUBSTNO('.//%1:ID',GetPrefix));
    END;

    LOCAL PROCEDURE GetEmbeddedDocXPath@14() : Text;
    BEGIN
      exit(STRSUBSTNO('//%1:EmbeddedDocumentBinaryObject',GetPrefix));
    END;

    LOCAL PROCEDURE GetPrefix@45() : Text;
    BEGIN
      exit('newnamespace');
    END;

    LOCAL PROCEDURE GetDocumentIDKey@34() : Text;
    BEGIN
      exit('X-Tradeshift-DocumentId');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetDocumentDescription@35(Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Description@1003 : Text);
    VAR
      SrchNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Description := '';
      XMLDOMMgt.FindNodeWithNamespace(Node,GetDocumentTypeXPath,GetPrefix,
        GetPublicNamespace,SrchNode);
      Description := MapDocumentType(XMLDOMMgt.GetAttributeValue(SrchNode,'type'));
      Description += ' ' + XMLDOMMgt.FindNodeTextWithNamespace(Node,GetDocumentIDForDescriptionXPath,
          GetPrefix,GetPublicNamespace);
    END;

    LOCAL PROCEDURE MapDocumentType@37(DocType@1000 : Text) : Text;
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
    BEGIN
      case DocType of
        'invoice':
          PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
        'creditnote':
          PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo";
        else
          exit('');
      end;
      exit(FORMAT(PurchaseHeader."Document Type"));
    END;

    LOCAL PROCEDURE LogActivitySucceeded@25(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;ActivityMessage@1003 : Text);
    VAR
      ActivityLog@1000 : Record "Activity Log";
    BEGIN
      ActivityLog.LogActivity(RelatedRecordID,ActivityLog.Status::Success,LoggingConstTxt,
        ActivityDescription,ActivityMessage);
    END;

    LOCAL PROCEDURE LogActivityFailed@24(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;ActivityMessage@1003 : Text);
    VAR
      ActivityMessageVar@1000 : Text;
    BEGIN
      ActivityMessageVar := ActivityMessage;
      LogActivityFailedCommon(RelatedRecordID,ActivityDescription,ActivityMessageVar);
    END;

    LOCAL PROCEDURE LogActivityFailedAndError@53(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;ActivityMessage@1003 : Text);
    BEGIN
      LogActivityFailedCommon(RelatedRecordID,ActivityDescription,ActivityMessage);
      if DELCHR(ActivityMessage,'<>',' ') <> '' then
        ERROR(ActivityMessage);
    END;

    LOCAL PROCEDURE LogActivityFailedCommon@54(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;VAR ActivityMessage@1003 : Text);
    VAR
      ActivityLog@1000 : Record "Activity Log";
    BEGIN
      ActivityMessage := GETLASTERRORTEXT + ' ' + ActivityMessage;
      CLEARLASTERROR;

      ActivityLog.LogActivity(RelatedRecordID,ActivityLog.Status::Failed,LoggingConstTxt,
        ActivityDescription,ActivityMessage);

      if ActivityMessage = '' then
        ActivityLog.SetDetailedInfoFromStream(GLBResponseInStream);

      COMMIT;
    END;

    [External]
    PROCEDURE EnableTraceLog@8(NewTraceLogEnabled@1000 : Boolean);
    BEGIN
      GLBTraceLogEnabled := NewTraceLogEnabled;
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleVANRegisterServiceConnection@122(VAR ServiceConnection@1000 : Record "Service Connection");
    VAR
      DocExchServiceSetup@1001 : Record "Doc. Exch. Service Setup";
      RecRef@1002 : RecordRef;
    BEGIN
      if not DocExchServiceSetup.GET then begin
        DocExchServiceSetup.INIT;
        DocExchServiceSetup.INSERT;
      end;

      RecRef.GETTABLE(DocExchServiceSetup);

      if DocExchServiceSetup.Enabled then
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      else
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      with DocExchServiceSetup do
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLENAME,"Service URL",PAGE::"Doc. Exch. Service Setup");
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnAfterIncomingDocReceivedFromDocExch@32(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [External]
    PROCEDURE GetExternalDocURL@7(DocID@1000 : Text) : Text;
    VAR
      URLPart@1001 : Text;
    BEGIN
      URLPart := 'www';
      if STRPOS(GetFullURL(''),'sandbox') > 0 then
        URLPart := 'sandbox';

      exit(STRSUBSTNO('https://%1.tradeshift.com/app/Tradeshift.Migration#::conversation/view/%2::',URLPart,DocID));
    END;

    [External]
    PROCEDURE VerifyPrerequisites@50(ShowFailure@1000 : Boolean) : Boolean;
    VAR
      DocExchServiceSetup@1001 : Record "Doc. Exch. Service Setup";
    BEGIN
      with DocExchServiceSetup do
        if not (GET and HasPassword("Consumer Key") and HasPassword("Consumer Secret") and
                HasPassword(Token) and HasPassword("Token Secret") and HasPassword("Doc. Exch. Tenant ID"))
        then
          if ShowFailure then
            ERROR(MissingCredentialsErr,TABLECAPTION);
      exit(true)
    END;

    BEGIN
    END.
  }
}

