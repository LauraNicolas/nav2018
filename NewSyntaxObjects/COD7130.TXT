OBJECT Codeunit 7130 Item Budget Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1002 : TextConst 'ENU=DEFAULT';
      Text002@1001 : TextConst 'ENU=Default budget';
      GLSetup@1007 : Record "General Ledger Setup";
      PrevItemBudgetName@1003 : Record "Item Budget Name";
      Text003@1004 : TextConst 'ENU=Period';
      Text004@1006 : TextConst 'ENU=%1 is not a valid line definition.';
      Text005@1005 : TextConst 'ENU=%1 is not a valid column definition.';
      MatrixMgt@1000 : Codeunit "Matrix Management";
      GLSetupRead@1008 : Boolean;
      Text006@1009 : TextConst 'ENU=Do you want to delete the budget entries shown?';
      Text007@1010 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>';
      GlobalDimOption@1011 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';

    [External]
    PROCEDURE BudgetNameSelection@3(CurrentAnalysisArea@1001 : Option;VAR CurrentItemBudgetName@1000 : Code[10];VAR ItemBudgetName@1002 : Record "Item Budget Name";VAR ItemStatisticsBuffer@1003 : Record "Item Statistics Buffer";VAR BudgetDim1Filter@1006 : Text;VAR BudgetDim2Filter@1005 : Text;VAR BudgetDim3Filter@1004 : Text);
    BEGIN
      if not ItemBudgetName.GET(CurrentAnalysisArea,CurrentItemBudgetName) then begin
        ItemBudgetName.FILTERGROUP := 2;
        ItemBudgetName.SETRANGE("Analysis Area",CurrentAnalysisArea);
        ItemBudgetName.FILTERGROUP := 0;
        if not ItemBudgetName.FIND('-') then begin
          ItemBudgetName.INIT;
          ItemBudgetName."Analysis Area" := CurrentAnalysisArea;
          ItemBudgetName.Name := Text001;
          ItemBudgetName.Description := Text002;
          ItemBudgetName.INSERT(true);
        end;
        CurrentItemBudgetName := ItemBudgetName.Name;
      end;

      SetItemBudgetName(
        CurrentItemBudgetName,ItemBudgetName,ItemStatisticsBuffer,
        BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
    END;

    [External]
    PROCEDURE CheckBudgetName@2(CurrentAnalysisType@1002 : Option;CurrentItemBudgetName@1001 : Code[10];VAR ItemBudgetName@1000 : Record "Item Budget Name");
    BEGIN
      ItemBudgetName.GET(CurrentAnalysisType,CurrentItemBudgetName);
    END;

    [External]
    PROCEDURE SetItemBudgetName@4(CurrentItemBudgetName@1002 : Code[10];VAR ItemBudgetName@1001 : Record "Item Budget Name";VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR BudgetDim1Filter@1005 : Text;VAR BudgetDim2Filter@1004 : Text;VAR BudgetDim3Filter@1003 : Text);
    BEGIN
      ItemStatisticsBuf.SETRANGE("Budget Filter",CurrentItemBudgetName);
      if PrevItemBudgetName.Name <> '' then begin
        if ItemBudgetName."Budget Dimension 1 Code" <> PrevItemBudgetName."Budget Dimension 1 Code" then
          BudgetDim1Filter := '';
        if ItemBudgetName."Budget Dimension 2 Code" <> PrevItemBudgetName."Budget Dimension 2 Code" then
          BudgetDim2Filter := '';
        if ItemBudgetName."Budget Dimension 3 Code" <> PrevItemBudgetName."Budget Dimension 3 Code" then
          BudgetDim3Filter := '';
      end;
      ItemStatisticsBuf.SETFILTER("Dimension 1 Filter",BudgetDim1Filter);
      ItemStatisticsBuf.SETFILTER("Dimension 2 Filter",BudgetDim2Filter);
      ItemStatisticsBuf.SETFILTER("Dimension 3 Filter",BudgetDim3Filter);

      PrevItemBudgetName := ItemBudgetName;
    END;

    [External]
    PROCEDURE LookupItemBudgetName@5(VAR CurrentItemBudgetName@1005 : Code[10];VAR ItemBudgetName@1004 : Record "Item Budget Name";VAR ItemStatisticsBuf@1003 : Record "Item Statistics Buffer";VAR BudgetDim1Filter@1002 : Text;VAR BudgetDim2Filter@1001 : Text;VAR BudgetDim3Filter@1000 : Text);
    VAR
      ItemBudgetName2@1006 : Record "Item Budget Name";
    BEGIN
      ItemBudgetName2.COPY(ItemBudgetName);
      ItemBudgetName2.FILTERGROUP := 2;
      ItemBudgetName2.SETRANGE("Analysis Area",ItemBudgetName2."Analysis Area");
      ItemBudgetName2.FILTERGROUP := 0;
      if PAGE.RUNMODAL(0,ItemBudgetName2) = ACTION::LookupOK then begin
        ItemBudgetName := ItemBudgetName2;
        CurrentItemBudgetName := ItemBudgetName.Name;
        SetItemBudgetName(
          CurrentItemBudgetName,ItemBudgetName,ItemStatisticsBuf,
          BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      end else
        BudgetNameSelection(
          ItemBudgetName."Analysis Area",CurrentItemBudgetName,ItemBudgetName,ItemStatisticsBuf,
          BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
    END;

    [External]
    PROCEDURE SetLineAndColDim@6(ItemBudgetName@1005 : Record "Item Budget Name";VAR LineDimCode@1000 : Text[30];VAR LineDimOption@1006 : Option;VAR ColumnDimCode@1003 : Text[30];VAR ColumnDimOption@1001 : Option);
    VAR
      Item@1004 : Record Item;
    BEGIN
      if (LineDimCode = '') and (ColumnDimCode = '') then begin
        LineDimCode := Item.TABLECAPTION;
        ColumnDimCode := Text003;
      end;
      LineDimOption := DimCodeToOption(LineDimCode,ItemBudgetName);
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemBudgetName);
    END;

    [Internal]
    PROCEDURE FindRec@59(ItemBudgetName@1022 : Record "Item Budget Name";DimOption@1000 : Option;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250];ItemFilter@1011 : Text;SourceNoFilter@1012 : Text;PeriodType@1016 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';DateFilter@1014 : Text;VAR PeriodInitialized@1013 : Boolean;InternalDateFilter@1015 : Text;GlobalDim1Filter@1021 : Text;GlobalDim2Filter@1020 : Text;BudgetDim1Filter@1019 : Text;BudgetDim2Filter@1018 : Text;BudgetDim3Filter@1017 : Text) : Boolean;
    VAR
      Item@1003 : Record Item;
      Cust@1009 : Record Customer;
      Vend@1010 : Record Vendor;
      Location@1004 : Record Location;
      Period@1005 : Record Date;
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      Found@1008 : Boolean;
    BEGIN
      GetGLSetup;
      case DimOption of
        GlobalDimOption::Item:
          begin
            Item."No." := DimCodeBuf.Code;
            if ItemFilter <> '' then
              Item.SETFILTER("No.",ItemFilter);
            Found := Item.FIND(Which);
            if Found then
              CopyItemToBuf(Item,DimCodeBuf);
          end;
        GlobalDimOption::Customer:
          begin
            Cust."No." := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Cust.SETFILTER("No.",SourceNoFilter);
            Found := Cust.FIND(Which);
            if Found then
              CopyCustToBuf(Cust,DimCodeBuf);
          end;
        GlobalDimOption::Vendor:
          begin
            Vend."No." := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Vend.SETFILTER("No.",SourceNoFilter);
            Found := Vend.FIND(Which);
            if Found then
              CopyVendToBuf(Vend,DimCodeBuf);
          end;
        GlobalDimOption::Period:
          begin
            Period."Period Start" := DimCodeBuf."Period Start";
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if not PeriodInitialized and (InternalDateFilter <> '') then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
            PeriodInitialized := true;
          end;
        GlobalDimOption::Location:
          begin
            Location.Code := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Location.SETFILTER(Code,SourceNoFilter);
            Found := Location.FIND(Which);
            if Found then
              CopyLocationToBuf(Location,DimCodeBuf);
          end;
        GlobalDimOption::"Global Dimension 1":
          Found := FindDim(DimCodeBuf,Which,GlobalDim1Filter,GLSetup."Global Dimension 1 Code");
        GlobalDimOption::"Global Dimension 2":
          Found := FindDim(DimCodeBuf,Which,GlobalDim2Filter,GLSetup."Global Dimension 2 Code");
        GlobalDimOption::"Budget Dimension 1":
          Found := FindDim(DimCodeBuf,Which,BudgetDim1Filter,ItemBudgetName."Budget Dimension 1 Code");
        GlobalDimOption::"Budget Dimension 2":
          Found := FindDim(DimCodeBuf,Which,BudgetDim2Filter,ItemBudgetName."Budget Dimension 2 Code");
        GlobalDimOption::"Budget Dimension 3":
          Found := FindDim(DimCodeBuf,Which,BudgetDim3Filter,ItemBudgetName."Budget Dimension 3 Code");
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE FindDim@27(VAR DimCodeBuf@1003 : Record "Dimension Code Buffer";Which@1004 : Text[250];DimFilter@1000 : Text;DimCode@1001 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
    BEGIN
      if DimFilter <> '' then
        DimVal.SETFILTER(Code,DimFilter);
      DimVal."Dimension Code" := DimCode;
      DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
      DimVal.Code := DimCodeBuf.Code;
      if DimVal.FIND(Which) then begin
        CopyDimValToBuf(DimVal,DimCodeBuf);
        exit(true);
      end
    END;

    [Internal]
    PROCEDURE NextRec@60(ItemBudgetName@1022 : Record "Item Budget Name";DimOption@1000 : Option;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer;ItemFilter@1021 : Text;SourceNoFilter@1020 : Text;PeriodType@1019 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';DateFilter@1018 : Text;GlobalDim1Filter@1015 : Text;GlobalDim2Filter@1014 : Text;BudgetDim1Filter@1013 : Text;BudgetDim2Filter@1012 : Text;BudgetDim3Filter@1011 : Text) : Integer;
    VAR
      Item@1003 : Record Item;
      Cust@1009 : Record Customer;
      Vend@1010 : Record Vendor;
      Location@1004 : Record Location;
      Period@1005 : Record Date;
      PeriodFormMgt@1007 : Codeunit PeriodFormManagement;
      ResultSteps@1008 : Integer;
    BEGIN
      GetGLSetup;
      case DimOption of
        GlobalDimOption::Item:
          begin
            Item."No." := DimCodeBuf.Code;
            if ItemFilter <> '' then
              Item.SETFILTER("No.",ItemFilter);
            ResultSteps := Item.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyItemToBuf(Item,DimCodeBuf);
          end;
        GlobalDimOption::Customer:
          begin
            Cust."No." := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Cust.SETFILTER("No.",SourceNoFilter);
            ResultSteps := Cust.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyCustToBuf(Cust,DimCodeBuf);
          end;
        GlobalDimOption::Vendor:
          begin
            Vend."No." := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Vend.SETFILTER("No.",SourceNoFilter);
            ResultSteps := Vend.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyVendToBuf(Vend,DimCodeBuf);
          end;
        GlobalDimOption::Period:
          begin
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            if ResultSteps <> 0 then
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
          end;
        GlobalDimOption::Location:
          begin
            Location.Code := DimCodeBuf.Code;
            if SourceNoFilter <> '' then
              Location.SETFILTER(Code,SourceNoFilter);
            ResultSteps := Location.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyLocationToBuf(Location,DimCodeBuf);
          end;
        GlobalDimOption::"Global Dimension 1":
          ResultSteps := NextDim(DimCodeBuf,Steps,GlobalDim1Filter,GLSetup."Global Dimension 1 Code");
        GlobalDimOption::"Global Dimension 2":
          ResultSteps := NextDim(DimCodeBuf,Steps,GlobalDim2Filter,GLSetup."Global Dimension 2 Code");
        GlobalDimOption::"Budget Dimension 1":
          ResultSteps := NextDim(DimCodeBuf,Steps,BudgetDim1Filter,ItemBudgetName."Budget Dimension 1 Code");
        GlobalDimOption::"Budget Dimension 2":
          ResultSteps := NextDim(DimCodeBuf,Steps,BudgetDim2Filter,ItemBudgetName."Budget Dimension 2 Code");
        GlobalDimOption::"Budget Dimension 3":
          ResultSteps := NextDim(DimCodeBuf,Steps,BudgetDim3Filter,ItemBudgetName."Budget Dimension 3 Code");
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE NextDim@31(VAR DimCodeBuf@1003 : Record "Dimension Code Buffer";Steps@1004 : Integer;DimFilter@1000 : Text;DimCode@1001 : Code[20]) : Integer;
    VAR
      DimVal@1002 : Record "Dimension Value";
      ActualSteps@1005 : Integer;
    BEGIN
      if DimFilter <> '' then
        DimVal.SETFILTER(Code,DimFilter);
      DimVal."Dimension Code" := DimCode;
      DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
      DimVal.Code := DimCodeBuf.Code;
      ActualSteps := DimVal.NEXT(Steps);
      if ActualSteps <> 0 then
        CopyDimValToBuf(DimVal,DimCodeBuf);
      exit(ActualSteps);
    END;

    [External]
    PROCEDURE SetCommonFilters@15(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";ItemBudgetName@1001 : Record "Item Budget Name";ItemFilter@1002 : Text;SourceTypeFilter@1004 : Option;SourceNoFilter@1003 : Text;DateFilter@1005 : Text;GlobalDim1Filter@1010 : Text;GlobalDim2Filter@1009 : Text;BudgetDim1Filter@1008 : Text;BudgetDim2Filter@1007 : Text;BudgetDim3Filter@1006 : Text);
    BEGIN
      with ItemStatisticsBuf do begin
        RESET;
        SETRANGE("Analysis Area Filter",ItemBudgetName."Analysis Area");
        SETRANGE("Budget Filter",ItemBudgetName.Name);
        if ItemFilter <> '' then
          SETFILTER("Item Filter",ItemFilter);
        if SourceNoFilter <> '' then begin
          SETFILTER("Source Type Filter",'%1',SourceTypeFilter);
          SETFILTER("Source No. Filter",SourceNoFilter);
        end;
        if DateFilter <> '' then
          SETFILTER("Date Filter",DateFilter);
        if GlobalDim1Filter <> '' then
          SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
        if GlobalDim2Filter <> '' then
          SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
        if BudgetDim1Filter <> '' then
          SETFILTER("Dimension 1 Filter",BudgetDim1Filter);
        if BudgetDim2Filter <> '' then
          SETFILTER("Dimension 2 Filter",BudgetDim2Filter);
        if BudgetDim3Filter <> '' then
          SETFILTER("Dimension 3 Filter",BudgetDim3Filter);
      end;
    END;

    [External]
    PROCEDURE SetDimFilters@17(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";DimOption@1002 : Option;DimCodeBuf@1003 : Record "Dimension Code Buffer");
    BEGIN
      with ItemStatisticsBuf do
        case DimOption of
          GlobalDimOption::Item:
            SETRANGE("Item Filter",DimCodeBuf.Code);
          GlobalDimOption::Customer:
            begin
              SETRANGE("Source Type Filter","Source Type Filter"::Customer);
              SETRANGE("Source No. Filter",DimCodeBuf.Code);
            end;
          GlobalDimOption::Vendor:
            begin
              SETRANGE("Source Type Filter","Source Type Filter"::Vendor);
              SETRANGE("Source No. Filter",DimCodeBuf.Code);
            end;
          GlobalDimOption::Location:
            SETRANGE("Location Filter",DimCodeBuf.Code);
          GlobalDimOption::Period:
            SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End");
          GlobalDimOption::"Global Dimension 1":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Global Dimension 1 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Global Dimension 1 Filter",DimCodeBuf.Code);
          GlobalDimOption::"Global Dimension 2":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Global Dimension 2 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Global Dimension 2 Filter",DimCodeBuf.Code);
          GlobalDimOption::"Budget Dimension 1":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 1 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 1 Filter",DimCodeBuf.Code);
          GlobalDimOption::"Budget Dimension 2":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 2 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 2 Filter",DimCodeBuf.Code);
          GlobalDimOption::"Budget Dimension 3":
            if DimCodeBuf.Totaling <> '' then
              SETFILTER("Dimension 3 Filter",DimCodeBuf.Totaling)
            else
              SETRANGE("Dimension 3 Filter",DimCodeBuf.Code);
        end;
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Code[20];ItemBudgetName@1006 : Record "Item Budget Name") : Integer;
    VAR
      Location@1001 : Record Location;
      Item@1002 : Record Item;
      Cust@1003 : Record Customer;
      Vend@1004 : Record Vendor;
    BEGIN
      GetGLSetup;
      case DimCode of
        '':
          exit(-1);
        UPPERCASE(Item.TABLECAPTION):
          exit(0);
        UPPERCASE(Cust.TABLECAPTION):
          exit(1);
        UPPERCASE(Vend.TABLECAPTION):
          exit(2);
        UPPERCASE(Text003):
          exit(3);
        UPPERCASE(Location.TABLECAPTION):
          exit(4);
        GLSetup."Global Dimension 1 Code":
          exit(5);
        GLSetup."Global Dimension 2 Code":
          exit(6);
        ItemBudgetName."Budget Dimension 1 Code":
          exit(7);
        ItemBudgetName."Budget Dimension 2 Code":
          exit(8);
        ItemBudgetName."Budget Dimension 3 Code":
          exit(9);
        else
          exit(-1);
      end;
    END;

    [External]
    PROCEDURE GetDimSelection@8(OldDimSelCode@1000 : Text[30];ItemBudgetName@1006 : Record "Item Budget Name") : Text[30];
    VAR
      Item@1001 : Record Item;
      Cust@1003 : Record Customer;
      Vend@1004 : Record Vendor;
      Location@1005 : Record Location;
      DimSelection@1002 : Page "Dimension Selection";
    BEGIN
      GetGLSetup;
      DimSelection.InsertDimSelBuf(false,Item.TABLECAPTION,Item.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Cust.TABLECAPTION,Cust.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Vend.TABLECAPTION,Vend.TABLECAPTION);
      DimSelection.InsertDimSelBuf(false,Text003,Text003);
      if GLSetup."Global Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 1 Code",'');
      if GLSetup."Global Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,GLSetup."Global Dimension 2 Code",'');
      if ItemBudgetName."Budget Dimension 1 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemBudgetName."Budget Dimension 1 Code",'');
      if ItemBudgetName."Budget Dimension 2 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemBudgetName."Budget Dimension 2 Code",'');
      if ItemBudgetName."Budget Dimension 3 Code" <> '' then
        DimSelection.InsertDimSelBuf(false,ItemBudgetName."Budget Dimension 3 Code",'');

      DimSelection.LOOKUPMODE := true;
      if DimSelection.RUNMODAL = ACTION::LookupOK then
        exit(DimSelection.GetDimSelCode);
      exit(OldDimSelCode);
    END;

    [External]
    PROCEDURE ValidateLineDimCode@19(ItemBudgetName@1006 : Record "Item Budget Name";VAR LineDimCode@1004 : Text[30];VAR LineDimOption@1007 : Option;ColumnDimOption@1010 : Option;VAR InternalDateFilter@1005 : Text;VAR DateFilter@1008 : Text;VAR ItemStatisticsBuf@1009 : Record "Item Statistics Buffer";VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      if DimCodeNotAllowed(LineDimCode,ItemBudgetName) then begin
        MESSAGE(Text004,LineDimCode);
        LineDimCode := '';
      end;
      LineDimOption := DimCodeToOption(LineDimCode,ItemBudgetName);
      InternalDateFilter := ItemStatisticsBuf.GETFILTER("Date Filter");
      if (not OptionIsPeriod(LineDimOption)) and (not OptionIsPeriod(ColumnDimOption)) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    [External]
    PROCEDURE ValidateColumnDimCode@10(ItemBudgetName@1006 : Record "Item Budget Name";VAR ColumnDimCode@1004 : Text[30];VAR ColumnDimOption@1007 : Option;LineDimOption@1010 : Option;VAR InternalDateFilter@1005 : Text;VAR DateFilter@1008 : Text;VAR ItemStatisticsBuf@1009 : Record "Item Statistics Buffer";VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      if DimCodeNotAllowed(ColumnDimCode,ItemBudgetName) then begin
        MESSAGE(Text005,ColumnDimCode);
        ColumnDimCode := '';
      end;
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemBudgetName);
      InternalDateFilter := ItemStatisticsBuf.GETFILTER("Date Filter");
      if (not OptionIsPeriod(ColumnDimOption)) and (not OptionIsPeriod(LineDimOption)) then begin
        DateFilter := InternalDateFilter;
        if STRPOS(DateFilter,'&') > 1 then
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      end else
        PeriodInitialized := false;
    END;

    [External]
    PROCEDURE DimCodeNotAllowed@7(DimCode@1000 : Text[30];ItemBudgetName@1001 : Record "Item Budget Name") : Boolean;
    VAR
      Item@1003 : Record Item;
      Cust@1004 : Record Customer;
      Vend@1005 : Record Vendor;
      Location@1006 : Record Location;
    BEGIN
      GetGLSetup;
      exit(
        not (UPPERCASE(DimCode) in
             [UPPERCASE(Item.TABLECAPTION),
              UPPERCASE(Cust.TABLECAPTION),
              UPPERCASE(Vend.TABLECAPTION),
              UPPERCASE(Location.TABLECAPTION),
              UPPERCASE(Text003),
              ItemBudgetName."Budget Dimension 1 Code",
              ItemBudgetName."Budget Dimension 2 Code",
              ItemBudgetName."Budget Dimension 3 Code",
              GLSetup."Global Dimension 1 Code",
              GLSetup."Global Dimension 2 Code",
              '']));
    END;

    [External]
    PROCEDURE FormatAmount@23(VAR Text@1005 : Text[250];RoundingFactor@1002 : 'None,"1","1000","1000000"');
    VAR
      Amount@1001 : Decimal;
    BEGIN
      if (Text = '') or (RoundingFactor = RoundingFactor::None) then
        exit;
      EVALUATE(Amount,Text);
      Amount := MatrixMgt.RoundValue(Amount,RoundingFactor);
      if Amount = 0 then
        Text := ''
      else
        case RoundingFactor of
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text007);
        end;
    END;

    [External]
    PROCEDURE BudgetDrillDown@30(ItemBudgetName@1001 : Record "Item Budget Name";ItemFilter@1010 : Text;SourceTypeFilter@1009 : Option;SourceNoFilter@1008 : Text;DateFilter@1007 : Text;GlobalDim1Filter@1006 : Text;GlobalDim2Filter@1005 : Text;BudgetDim1Filter@1004 : Text;BudgetDim2Filter@1003 : Text;BudgetDim3Filter@1002 : Text;RowDimOption@1015 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';RowDimCodeBuf@1014 : Record "Dimension Code Buffer";ColDimOption@1013 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3"';ColDimCodeBuf@1012 : Record "Dimension Code Buffer";ValueType@1018 : '"Sales Amount","Cost Amount",Quantity';LinesOnly@1016 : Boolean);
    VAR
      ItemStatisticsBuf@1011 : Record "Item Statistics Buffer";
      ItemBudgetEntry@1000 : Record "Item Budget Entry";
    BEGIN
      SetCommonFilters(
        ItemStatisticsBuf,ItemBudgetName,
        ItemFilter,SourceTypeFilter,SourceNoFilter,DateFilter,
        GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      SetDimFilters(ItemStatisticsBuf,RowDimOption,RowDimCodeBuf);
      if not LinesOnly then
        SetDimFilters(ItemStatisticsBuf,ColDimOption,ColDimCodeBuf);

      ItemBudgetEntry.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area");
      ItemBudgetEntry.SETRANGE("Budget Name",ItemBudgetName.Name);

      if ItemStatisticsBuf.GETFILTER("Item Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Item Filter",ItemBudgetEntry."Item No.");
      if ItemStatisticsBuf.GETFILTER("Global Dimension 1 Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Global Dimension 1 Filter",ItemBudgetEntry."Global Dimension 1 Code");
      if ItemStatisticsBuf.GETFILTER("Global Dimension 2 Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Global Dimension 2 Filter",ItemBudgetEntry."Global Dimension 2 Code");
      if ItemStatisticsBuf.GETFILTER("Dimension 1 Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Dimension 1 Filter",ItemBudgetEntry."Budget Dimension 1 Code");
      if ItemStatisticsBuf.GETFILTER("Dimension 2 Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Dimension 2 Filter",ItemBudgetEntry."Budget Dimension 2 Code");
      if ItemStatisticsBuf.GETFILTER("Dimension 3 Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Dimension 3 Filter",ItemBudgetEntry."Budget Dimension 3 Code");
      if ItemStatisticsBuf.GETFILTER("Location Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Location Filter",ItemBudgetEntry."Location Code");
      if ItemStatisticsBuf.GETFILTER("Date Filter") <> '' then
        ItemStatisticsBuf.COPYFILTER("Date Filter",ItemBudgetEntry.Date)
      else
        ItemBudgetEntry.SETRANGE(Date,0D,DMY2DATE(31,12,9999));

      if ItemStatisticsBuf.GETFILTER("Source No. Filter") <> '' then begin
        ItemStatisticsBuf.COPYFILTER("Source Type Filter",ItemBudgetEntry."Source Type");
        ItemStatisticsBuf.COPYFILTER("Source No. Filter",ItemBudgetEntry."Source No.");
        ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Source Type","Source No.","Item No.");
      end else
        ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Item No.");

      case ValueType of
        ValueType::"Sales Amount":
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Sales Amount");
        ValueType::"Cost Amount":
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Cost Amount");
        ValueType::Quantity:
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry.Quantity);
      end;
    END;

    [External]
    PROCEDURE DeleteBudget@1(AnalysisArea@1002 : Integer;ItemBudgetName@1003 : Code[10];ItemFilter@1004 : Text;DateFilter@1005 : Text;SourceTypeFilter@1012 : Option;SourceNoFilter@1011 : Text;GlobalDim1Filter@1006 : Text;GlobalDim2Filter@1007 : Text;BudgetDim1Filter@1008 : Text;BudgetDim2Filter@1009 : Text;BudgetDim3Filter@1010 : Text);
    VAR
      ItemBudgetEntry@1000 : Record "Item Budget Entry";
      UpdateItemAnalysisView@1001 : Codeunit "Update Item Analysis View";
    BEGIN
      if CONFIRM(Text006) then
        with ItemBudgetEntry do begin
          SETRANGE("Analysis Area",AnalysisArea);
          SETRANGE("Budget Name",ItemBudgetName);
          if ItemFilter <> '' then
            SETFILTER("Item No.",ItemFilter);
          if DateFilter <> '' then
            SETFILTER(Date,DateFilter);
          if SourceNoFilter <> '' then begin
            SETRANGE("Source Type",SourceTypeFilter);
            SETFILTER("Source No.",SourceNoFilter);
          end;
          if GlobalDim1Filter <> '' then
            SETFILTER("Global Dimension 1 Code",GlobalDim1Filter);
          if GlobalDim2Filter <> '' then
            SETFILTER("Global Dimension 2 Code",GlobalDim2Filter);
          if BudgetDim1Filter <> '' then
            SETFILTER("Budget Dimension 1 Code",BudgetDim1Filter);
          if BudgetDim2Filter <> '' then
            SETFILTER("Budget Dimension 2 Code",BudgetDim2Filter);
          if BudgetDim3Filter <> '' then
            SETFILTER("Budget Dimension 3 Code",BudgetDim3Filter);
          SETCURRENTKEY("Entry No.");
          if FINDFIRST then
            UpdateItemAnalysisView.SetLastBudgetEntryNo("Entry No." - 1);
          SETCURRENTKEY("Analysis Area","Budget Name");
          DELETEALL(true);
        end;
    END;

    LOCAL PROCEDURE GetGLSetup@9();
    BEGIN
      if GLSetupRead then
        exit;
      GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE CopyItemToBuf@14(VAR Item@1000 : Record Item;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Item."No.";
        Name := Item.Description;
      end;
    END;

    LOCAL PROCEDURE CopyCustToBuf@18(VAR Cust@1000 : Record Customer;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Cust."No.";
        Name := Cust.Name;
      end;
    END;

    LOCAL PROCEDURE CopyVendToBuf@22(VAR Vend@1000 : Record Vendor;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Vend."No.";
        Name := Vend.Name;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@13(VAR Period@1000 : Record Date;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";DateFilter@1003 : Text);
    VAR
      Period2@1002 : Record Date;
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := FORMAT(Period."Period Start");
        "Period Start" := Period."Period Start";
        "Period End" := Period."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := Period."Period Name";
      end;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@12(VAR Location@1000 : Record Location;VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := Location.Code;
        if Location.Name <> '' then
          Name := Location.Name
      end;
    END;

    LOCAL PROCEDURE CopyDimValToBuf@11(VAR DimVal@1000 : Record "Dimension Value";VAR DimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with DimCodeBuf do begin
        INIT;
        Code := DimVal.Code;
        Name := DimVal.Name;
        Totaling := DimVal.Totaling;
        Indentation := DimVal.Indentation;
        "Show in Bold" :=
          DimVal."Dimension Value Type" <> DimVal."Dimension Value Type"::Standard;
      end;
    END;

    [External]
    PROCEDURE CalcAmount@16(ValueType@1015 : '"Sales Amount","Cost Amount",Quantity';SetColumnFilter@1014 : Boolean;VAR ItemStatisticsBuf@1013 : Record "Item Statistics Buffer";ItemBudgetName@1012 : Record "Item Budget Name";ItemFilter@1011 : Text;SourceTypeFilter@1010 : '" ",Customer,Vendor,Item';SourceNoFilter@1009 : Text;DateFilter@1008 : Text;GlobalDim1Filter@1007 : Text;GlobalDim2Filter@1006 : Text;BudgetDim1Filter@1005 : Text;BudgetDim2Filter@1004 : Text;BudgetDim3Filter@1003 : Text;RowDimOption@1002 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';RowDimCodeBuf@1001 : Record "Dimension Code Buffer";ColDimOption@1016 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer") : Decimal;
    BEGIN
      SetCommonFilters(
        ItemStatisticsBuf,ItemBudgetName,ItemFilter,SourceTypeFilter,SourceNoFilter,
        DateFilter,GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      SetDimFilters(ItemStatisticsBuf,RowDimOption,RowDimCodeBuf);
      if SetColumnFilter then
        SetDimFilters(ItemStatisticsBuf,ColDimOption,ColDimCodeBuf);

      case ValueType of
        ValueType::"Sales Amount":
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Sales Amount");
            exit(ItemStatisticsBuf."Budgeted Sales Amount");
          end;
        ValueType::"Cost Amount":
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Cost Amount");
            exit(ItemStatisticsBuf."Budgeted Cost Amount");
          end;
        ValueType::Quantity:
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Quantity");
            exit(ItemStatisticsBuf."Budgeted Quantity");
          end;
      end;
    END;

    [External]
    PROCEDURE UpdateAmount@24(ValueType@1015 : '"Sales Amount","Cost Amount",Quantity';SetColumnFilter@1014 : Boolean;VAR ItemStatisticsBuf@1013 : Record "Item Statistics Buffer";ItemBudgetName@1012 : Record "Item Budget Name";ItemFilter@1011 : Text;SourceTypeFilter@1010 : '" ",Customer,Vendor,Item';SourceNoFilter@1009 : Text;DateFilter@1008 : Text;GlobalDim1Filter@1007 : Text;GlobalDim2Filter@1006 : Text;BudgetDim1Filter@1005 : Text;BudgetDim2Filter@1004 : Text;BudgetDim3Filter@1003 : Text;RowDimOption@1002 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';RowDimCodeBuf@1001 : Record "Dimension Code Buffer";ColDimOption@1016 : 'Item,Customer,Vendor,Period,Location,"Global Dimension 1","Global Dimension 2","Budget Dimension 1","Budget Dimension 2","Budget Dimension 3","Budget Dimension 4"';ColDimCodeBuf@1000 : Record "Dimension Code Buffer";NewAmount@1017 : Decimal);
    BEGIN
      SetCommonFilters(
        ItemStatisticsBuf,ItemBudgetName,ItemFilter,SourceTypeFilter,SourceNoFilter,
        DateFilter,GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      SetDimFilters(ItemStatisticsBuf,RowDimOption,RowDimCodeBuf);
      if SetColumnFilter then
        SetDimFilters(ItemStatisticsBuf,ColDimOption,ColDimCodeBuf);

      case ValueType of
        ValueType::"Sales Amount":
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Sales Amount");
            ItemStatisticsBuf.VALIDATE("Budgeted Sales Amount",NewAmount);
          end;
        ValueType::"Cost Amount":
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Cost Amount");
            ItemStatisticsBuf.VALIDATE("Budgeted Cost Amount",NewAmount);
          end;
        ValueType::Quantity:
          begin
            ItemStatisticsBuf.CALCFIELDS("Budgeted Quantity");
            ItemStatisticsBuf.VALIDATE("Budgeted Quantity",NewAmount);
          end;
      end;
    END;

    LOCAL PROCEDURE OptionIsPeriod@20(DimOption@1000 : Option) : Boolean;
    BEGIN
      exit(DimOption = GlobalDimOption::Period);
    END;

    BEGIN
    END.
  }
}

