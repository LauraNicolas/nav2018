OBJECT Codeunit 99000853 Calc. Low-level code
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            FindTopLevel;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Calculate low-level code';
      Text001@1001 : TextConst 'ENU=No. #2################## @3@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=Top-Level Items';
      Text003@1003 : TextConst 'ENU=BOMs';
      HideDialogs@1007 : Boolean;

    LOCAL PROCEDURE FindTopLevel@1();
    VAR
      ProdBOMLine@1000 : Record "Production BOM Line";
      BOMComp@1006 : Record "BOM Component";
      Item@1001 : Record Item;
      ProdBOMHeader@1002 : Record "Production BOM Header";
      ProdBOMHeader2@1009 : Record "Production BOM Header";
      CalcLowLevelCode@1005 : Codeunit "Calculate Low-Level Code";
      Window@1004 : Dialog;
      WindowUpdateDateTime@1007 : DateTime;
      NoofItems@1003 : Integer;
      CountOfRecords@1008 : Integer;
      HasProductionBOM@1010 : Boolean;
    BEGIN
      NoofItems := 0;
      if not HideDialogs then
        if not CONFIRM(Text000,false) then
          exit;
      Window.OPEN(
        '#1################## \\' +
        Text001);
      WindowUpdateDateTime := CURRENTDATETIME;

      Window.UPDATE(1,Text002);

      Item.LOCKTABLE;
      Item.MODIFYALL("Low-Level Code",0);
      ProdBOMHeader.LOCKTABLE;
      ProdBOMHeader.MODIFYALL("Low-Level Code",0);

      ProdBOMLine.SETCURRENTKEY(Type,"No.");
      CountOfRecords := Item.COUNT;
      if Item.FIND('-') then
        repeat
          if CURRENTDATETIME - WindowUpdateDateTime > 2000 then begin
            Window.UPDATE(2,Item."No.");
            Window.UPDATE(3,ROUND(NoofItems / CountOfRecords * 10000,1));
            WindowUpdateDateTime := CURRENTDATETIME;
          end;

          HasProductionBOM := ProdBOMHeader.GET(Item."Production BOM No.");
          if (ProdBOMHeader."Low-Level Code" = 0) or not HasProductionBOM
          then begin
            ProdBOMLine.SETRANGE("No.",Item."No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);

            BOMComp.SETRANGE(Type,BOMComp.Type::Item);
            BOMComp.SETRANGE("No.",Item."No.");

            if ProdBOMLine.ISEMPTY and BOMComp.ISEMPTY then begin
              // handle items which are not part of any BOMs
              Item.CALCFIELDS("Assembly BOM");
              if Item."Assembly BOM" then
                CalcLowLevelCode.RecalcAsmLowerLevels(Item."No.",CalcLowLevelCode.CalcLevels(3,Item."No.",0,0),true);
              if HasProductionBOM then
                CalcLevelsForBOM(ProdBOMHeader);
            end else
              if HasProductionBOM then begin
                if ProdBOMLine.FIND('-') then
                  repeat
                    // handle items which are part of un-certified, active BOMs
                    if ProdBOMHeader2.GET(ProdBOMLine."Production BOM No.") then
                      if ProdBOMHeader2.Status in [ProdBOMHeader2.Status::New,ProdBOMHeader2.Status::"Under Development"] then
                        CalcLevelsForBOM(ProdBOMHeader);
                  until ProdBOMLine.NEXT = 0;
              end;
          end;

          NoofItems := NoofItems + 1;
        until Item.NEXT = 0;

      NoofItems := 0;
      Window.UPDATE(1,Text003);
      ProdBOMHeader.RESET;
      ProdBOMHeader.SETCURRENTKEY(Status);
      ProdBOMHeader.SETRANGE(Status,ProdBOMHeader.Status::Certified);
      ProdBOMHeader.SETRANGE("Low-Level Code",0);
      CountOfRecords := ProdBOMHeader.COUNT;
      if ProdBOMHeader.FIND('-') then
        repeat
          if CURRENTDATETIME - WindowUpdateDateTime > 2000 then begin
            Window.UPDATE(2,ProdBOMHeader."No.");
            Window.UPDATE(3,ROUND(NoofItems / CountOfRecords * 10000,1));
            WindowUpdateDateTime := CURRENTDATETIME;
          end;
          ProdBOMHeader2 := ProdBOMHeader;
          CalcLevelsForBOM(ProdBOMHeader2);
          NoofItems := NoofItems + 1;
        until ProdBOMHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcLevelsForBOM@10(VAR ProdBOM@1000 : Record "Production BOM Header");
    VAR
      ProdBOMLine@1004 : Record "Production BOM Line";
      CalcLowLevelCode@1001 : Codeunit "Calculate Low-Level Code";
    BEGIN
      if ProdBOM.Status = ProdBOM.Status::Certified then begin
        ProdBOM."Low-Level Code" := CalcLowLevelCode.CalcLevels(ProdBOMLine.Type::"Production BOM",ProdBOM."No.",0,0);
        CalcLowLevelCode.RecalcLowerLevels(ProdBOM."No.",ProdBOM."Low-Level Code",true);
        ProdBOM.MODIFY;
      end;
    END;

    [External]
    PROCEDURE SetHideDialogs@4(NewHideDialogs@1000 : Boolean);
    BEGIN
      HideDialogs := NewHideDialogs;
    END;

    BEGIN
    END.
  }
}

