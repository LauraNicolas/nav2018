OBJECT Codeunit 1560 Workflow Imp. / Exp. Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MoreThanOneWorkflowImportErr@1005 : TextConst 'ENU=You cannot import more than one workflow.';

    LOCAL PROCEDURE GetWorkflowCodeListFromXml@2(TempBlob@1000 : Record TempBlob) WorkflowCodes : Text;
    VAR
      XMLDOMManagement@1003 : Codeunit "XML DOM Management";
      XmlNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InStream@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      XMLDOMManagement.LoadXMLNodeFromInStream(InStream,XmlNode);

      XMLDOMManagement.FindNodes(XmlNode,'/Root/Workflow',XmlNodeList);

      foreach XmlNode in XmlNodeList do begin
        if WorkflowCodes = '' then
          WorkflowCodes := XMLDOMManagement.GetAttributeValue(XmlNode,'Code')
        else
          WorkflowCodes := WorkflowCodes + ',' + XMLDOMManagement.GetAttributeValue(XmlNode,'Code');
      end;
    END;

    [Internal]
    PROCEDURE ReplaceWorkflow@4(VAR Workflow@1000 : Record Workflow;VAR TempBlob@1009 : Record TempBlob);
    VAR
      FromWorkflow@1002 : Record Workflow;
      CopyWorkflow@1001 : Report "Copy Workflow";
      NewWorkflowCodes@1006 : Text;
      TempWorkflowCode@1007 : Text[20];
    BEGIN
      NewWorkflowCodes := GetWorkflowCodeListFromXml(TempBlob);
      if TrySelectStr(2,NewWorkflowCodes,TempWorkflowCode) then
        ERROR(MoreThanOneWorkflowImportErr);

      FromWorkflow.INIT;
      FromWorkflow.Code := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(Workflow.Code));
      FromWorkflow.ImportFromBlob(TempBlob);

      CopyWorkflow.InitCopyWorkflow(FromWorkflow,Workflow);
      CopyWorkflow.USEREQUESTPAGE(false);
      CopyWorkflow.RUN;

      FromWorkflow.DELETE(true);
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySelectStr@10(Index@1000 : Integer;InputString@1001 : Text;VAR SelectedString@1002 : Text[20]);
    BEGIN
      SelectedString := SELECTSTR(Index,InputString);
    END;

    BEGIN
    END.
  }
}

