OBJECT Table 1301 Item Template
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FieldRefArray@1001 : ARRAY [17] OF FieldRef;
               RecRef@1000 : RecordRef;
             BEGIN
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);

               InsertConfigurationTemplateHeaderAndLines;
             END;

    OnModify=VAR
               FieldRefArray@1000 : ARRAY [17] OF FieldRef;
               RecRef@1001 : RecordRef;
             BEGIN
               TESTFIELD(Code);
               TESTFIELD("Template Name");
               RecRef.GETTABLE(Rec);
               CreateFieldRefArray(FieldRefArray,RecRef);
               ConfigTemplateManagement.UpdateConfigTemplateAndLines(Code,"Template Name",DATABASE::Item,FieldRefArray);
             END;

    OnDelete=VAR
               ConfigTemplateHeader@1000 : Record "Config. Template Header";
             BEGIN
               if ConfigTemplateHeader.GET(Code) then begin
                 ConfigTemplateManagement.DeleteRelatedTemplates(Code,DATABASE::"Default Dimension");
                 ConfigTemplateHeader.DELETE(true);
               end;
             END;

    CaptionML=ENU=Item Template;
  }
  FIELDS
  {
    { 1   ;   ;Key                 ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Key }
    { 2   ;   ;Code                ;Code10        ;OnValidate=VAR
                                                                InventorySetup@1000 : Record "Inventory Setup";
                                                              BEGIN
                                                                InventorySetup.GET;
                                                                "Costing Method" := InventorySetup."Default Costing Method";
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Template Name       ;Text50        ;CaptionML=ENU=Template Name;
                                                   NotBlank=true }
    { 8   ;   ;Base Unit of Measure;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Base Unit of Measure }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                if Type = Type::Service then
                                                                  VALIDATE("Inventory Posting Group",'');
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Inventory,Service;
                                                   OptionString=Inventory,Service }
    { 11  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 14  ;   ;Item Disc. Group    ;Code20        ;TableRelation="Item Discount Group";
                                                   CaptionML=ENU=Item Disc. Group }
    { 15  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 19  ;   ;Price/Profit Calculation;Option    ;CaptionML=ENU=Price/Profit Calculation;
                                                   OptionCaptionML=ENU="Profit=Price-Cost,Price=Cost+Profit,No Relationship";
                                                   OptionString="Profit=Price-Cost","Price=Cost+Profit","No Relationship" }
    { 20  ;   ;Profit %            ;Decimal       ;CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100 }
    { 21  ;   ;Costing Method      ;Option        ;CaptionML=ENU=Costing Method;
                                                   OptionCaptionML=ENU=FIFO,LIFO,Specific,Average,Standard;
                                                   OptionString=FIFO,LIFO,Specific,Average,Standard }
    { 28  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 87  ;   ;Price Includes VAT  ;Boolean       ;CaptionML=ENU=Price Includes VAT }
    { 91  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 96  ;   ;Automatic Ext. Texts;Boolean       ;CaptionML=ENU=Automatic Ext. Texts }
    { 98  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 99  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 5702;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5900;   ;Service Item Group  ;Code10        ;TableRelation="Service Item Group".Code;
                                                   CaptionML=ENU=Service Item Group }
    { 7300;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   CaptionML=ENU=Warehouse Class Code }
  }
  KEYS
  {
    {    ;Key                                     ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfigTemplateManagement@1000 : Codeunit "Config. Template Management";

    [External]
    PROCEDURE CreateFieldRefArray@12(VAR FieldRefArray@1000 : ARRAY [17] OF FieldRef;RecRef@1003 : RecordRef);
    VAR
      I@1002 : Integer;
    BEGIN
      I := 1;

      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO(Type)));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Base Unit of Measure")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Automatic Ext. Texts")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Gen. Prod. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("VAT Prod. Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Inventory Posting Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Costing Method")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Indirect Cost %")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Price Includes VAT")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Profit %")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Price/Profit Calculation")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Allow Invoice Disc.")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Disc. Group")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Tax Group Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Warehouse Class Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Item Category Code")));
      AddToArray(FieldRefArray,I,RecRef.FIELD(FIELDNO("Service Item Group")));
    END;

    LOCAL PROCEDURE AddToArray@4(VAR FieldRefArray@1000 : ARRAY [17] OF FieldRef;VAR I@1001 : Integer;CurrFieldRef@1002 : FieldRef);
    BEGIN
      FieldRefArray[I] := CurrFieldRef;
      I += 1;
    END;

    [External]
    PROCEDURE InitializeTempRecordFromConfigTemplate@1(VAR TempItemTemplate@1000 : TEMPORARY Record "Item Template";ConfigTemplateHeader@1001 : Record "Config. Template Header");
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      TempItemTemplate.SETRANGE(Code,ConfigTemplateHeader.Code);
      TempItemTemplate.SETRANGE("Template Name",ConfigTemplateHeader.Description);
      if not TempItemTemplate.FINDFIRST then begin
        TempItemTemplate.INIT;
        TempItemTemplate.Code := ConfigTemplateHeader.Code;
        TempItemTemplate."Template Name" := ConfigTemplateHeader.Description;
        TempItemTemplate.INSERT;
      end;

      RecRef.GETTABLE(TempItemTemplate);

      ConfigTemplateManagement.ApplyTemplateLinesWithoutValidation(ConfigTemplateHeader,RecRef);

      RecRef.SETTABLE(TempItemTemplate);
    END;

    [External]
    PROCEDURE CreateConfigTemplateFromExistingItem@5(Item@1000 : Record Item;VAR TempItemTemplate@1001 : TEMPORARY Record "Item Template");
    VAR
      DimensionsTemplate@1002 : Record "Dimensions Template";
      ConfigTemplateHeader@1010 : Record "Config. Template Header";
      RecRef@1008 : RecordRef;
      FieldRefArray@1004 : ARRAY [17] OF FieldRef;
      NewTemplateCode@1011 : Code[10];
    BEGIN
      RecRef.GETTABLE(Item);
      CreateFieldRefArray(FieldRefArray,RecRef);

      ConfigTemplateManagement.CreateConfigTemplateAndLines(NewTemplateCode,'',DATABASE::Item,FieldRefArray);
      DimensionsTemplate.CreateTemplatesFromExistingMasterRecord(Item."No.",NewTemplateCode,DATABASE::Item);
      ConfigTemplateHeader.GET(NewTemplateCode);
      InitializeTempRecordFromConfigTemplate(TempItemTemplate,ConfigTemplateHeader);
    END;

    [External]
    PROCEDURE SaveAsTemplate@7(Item@1000 : Record Item);
    VAR
      TempItemTemplate@1001 : TEMPORARY Record "Item Template";
      ItemTemplateCard@1002 : Page "Item Template Card";
    BEGIN
      ItemTemplateCard.CreateFromItem(Item);
      ItemTemplateCard.SETRECORD(TempItemTemplate);
      ItemTemplateCard.LOOKUPMODE := true;
      if ItemTemplateCard.RUNMODAL = ACTION::LookupOK then;
    END;

    LOCAL PROCEDURE InsertConfigurationTemplateHeaderAndLines@2();
    VAR
      FieldRefArray@1001 : ARRAY [17] OF FieldRef;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      CreateFieldRefArray(FieldRefArray,RecRef);
      ConfigTemplateManagement.CreateConfigTemplateAndLines(Code,"Template Name",DATABASE::Item,FieldRefArray);
    END;

    [External]
    PROCEDURE NewItemFromTemplate@3(VAR Item@1002 : Record Item) : Boolean;
    VAR
      ConfigTemplateHeader@1004 : Record "Config. Template Header";
      ConfigTemplates@1001 : Page "Config Templates";
    BEGIN
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Item);
      ConfigTemplateHeader.SETRANGE(Enabled,true);

      if ConfigTemplateHeader.COUNT = 1 then begin
        ConfigTemplateHeader.FINDFIRST;
        InsertItemFromTemplate(ConfigTemplateHeader,Item);
        exit(true);
      end;

      if (ConfigTemplateHeader.COUNT > 1) and GUIALLOWED then begin
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        ConfigTemplates.SetNewMode;
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          InsertItemFromTemplate(ConfigTemplateHeader,Item);
          exit(true);
        end;
      end;

      exit(false);
    END;

    [External]
    PROCEDURE UpdateItemFromTemplate@8(VAR Item@1000 : Record Item);
    VAR
      ConfigTemplateHeader@1001 : Record "Config. Template Header";
      DimensionsTemplate@1004 : Record "Dimensions Template";
      ConfigTemplates@1003 : Page "Config Templates";
      ItemRecRef@1002 : RecordRef;
    BEGIN
      if GUIALLOWED then begin
        ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Item);
        ConfigTemplateHeader.SETRANGE(Enabled,true);
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          ItemRecRef.GETTABLE(Item);
          ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,ItemRecRef);
          DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
          ItemRecRef.SETTABLE(Item);
        end;
      end;
    END;

    [External]
    PROCEDURE InsertItemFromTemplate@16(ConfigTemplateHeader@1006 : Record "Config. Template Header";VAR Item@1003 : Record Item);
    VAR
      DimensionsTemplate@1001 : Record "Dimensions Template";
      UnitOfMeasure@1004 : Record "Unit of Measure";
      ConfigTemplateMgt@1002 : Codeunit "Config. Template Management";
      RecRef@1000 : RecordRef;
    BEGIN
      Item.INSERT(true);
      RecRef.GETTABLE(Item);
      ConfigTemplateMgt.UpdateRecord(ConfigTemplateHeader,RecRef);
      RecRef.SETTABLE(Item);
      if Item."Base Unit of Measure" = '' then begin
        UnitOfMeasure.SETRANGE("International Standard Code",'EA'); // 'Each' ~= 'PCS'
        if not UnitOfMeasure.FINDFIRST then begin
          UnitOfMeasure.SETRANGE("International Standard Code");
          if UnitOfMeasure.FINDFIRST then;
        end;
        Item.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      end;
      DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
    END;

    [External]
    PROCEDURE UpdateItemsFromTemplate@6(VAR Item@1000 : Record Item);
    VAR
      ConfigTemplateHeader@1001 : Record "Config. Template Header";
      DimensionsTemplate@1004 : Record "Dimensions Template";
      ConfigTemplates@1003 : Page "Config Templates";
      ItemRecRef@1002 : RecordRef;
    BEGIN
      if GUIALLOWED then begin
        ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Item);
        ConfigTemplateHeader.SETRANGE(Enabled,true);
        ConfigTemplates.SETTABLEVIEW(ConfigTemplateHeader);
        ConfigTemplates.LOOKUPMODE(true);
        if ConfigTemplates.RUNMODAL = ACTION::LookupOK then begin
          ConfigTemplates.GETRECORD(ConfigTemplateHeader);
          ItemRecRef.GETTABLE(Item);
          if ItemRecRef.FINDSET then
            repeat
              ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,ItemRecRef);
              DimensionsTemplate.InsertDimensionsFromTemplates(ConfigTemplateHeader,Item."No.",DATABASE::Item);
            until ItemRecRef.NEXT = 0;
          ItemRecRef.SETTABLE(Item);
        end;
      end;
    END;

    BEGIN
    END.
  }
}

