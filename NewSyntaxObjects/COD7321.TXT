OBJECT Codeunit 7321 Create Inventory Put-away
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Warehouse Activity Header";
    OnRun=BEGIN
            WhseActivHeader := Rec;
            Code;
            Rec := WhseActivHeader;
          END;

  }
  CODE
  {
    VAR
      WhseActivHeader@1000 : Record "Warehouse Activity Header";
      WhseRequest@1011 : Record "Warehouse Request";
      TempTrackingSpecification@1010 : TEMPORARY Record "Tracking Specification";
      Location@1012 : Record Location;
      Item@1021 : Record Item;
      PurchHeader@1013 : Record "Purchase Header";
      SalesHeader@1014 : Record "Sales Header";
      TransferHeader@1015 : Record "Transfer Header";
      ProdOrder@1018 : Record "Production Order";
      PostingDate@1019 : Date;
      VendorDocNo@1020 : Code[35];
      RemQtyToPutAway@1002 : Decimal;
      NextLineNo@1008 : Integer;
      LineCreated@1007 : Boolean;
      SNRequired@1006 : Boolean;
      LNRequired@1005 : Boolean;
      ReservationFound@1004 : Boolean;
      HideDialog@1001 : Boolean;
      CheckLineExist@1016 : Boolean;
      AutoCreation@1017 : Boolean;
      Text000@1009 : TextConst 'ENU=Nothing to handle.';

    LOCAL PROCEDURE Code@11();
    BEGIN
      WhseActivHeader.TESTFIELD("No.");
      WhseActivHeader.TESTFIELD("Location Code");

      if not HideDialog then
        if not GetWhseRequest(WhseRequest) then
          exit;

      GetSourceDocHeader;
      UpdateWhseActivHeader(WhseRequest);

      case WhseRequest."Source Document" of
        WhseRequest."Source Document"::"Purchase Order":
          CreatePutAwayLinesFromPurchase(PurchHeader);
        WhseRequest."Source Document"::"Purchase Return Order":
          CreatePutAwayLinesFromPurchase(PurchHeader);
        WhseRequest."Source Document"::"Sales Order":
          CreatePutAwayLinesFromSales(SalesHeader);
        WhseRequest."Source Document"::"Sales Return Order":
          CreatePutAwayLinesFromSales(SalesHeader);
        WhseRequest."Source Document"::"Inbound Transfer":
          CreatePutAwayLinesFromTransfer(TransferHeader);
        WhseRequest."Source Document"::"Prod. Output":
          CreatePutAwayLinesFromProd(ProdOrder);
        WhseRequest."Source Document"::"Prod. Consumption":
          CreatePutAwayLinesFromComp(ProdOrder);
      end;

      if LineCreated then
        WhseActivHeader.MODIFY
      else
        if not AutoCreation then
          ERROR(Text000);
    END;

    LOCAL PROCEDURE GetWhseRequest@1(VAR WhseRequest@1000 : Record "Warehouse Request") : Boolean;
    BEGIN
      with WhseRequest do begin
        FILTERGROUP := 2;
        SETRANGE(Type,Type::Inbound);
        SETRANGE("Location Code",WhseActivHeader."Location Code");
        SETRANGE("Document Status","Document Status"::Released);
        if WhseActivHeader."Source Document" <> 0 then
          SETRANGE("Source Document",WhseActivHeader."Source Document");
        if WhseActivHeader."Source No." <> '' then
          SETRANGE("Source No.",WhseActivHeader."Source No.");
        SETRANGE("Completely Handled",false);
        FILTERGROUP := 0;
        if PAGE.RUNMODAL(
             PAGE::"Source Documents",WhseRequest,"Source No.") = ACTION::LookupOK
        then
          exit(true);
      end;
    END;

    LOCAL PROCEDURE GetSourceDocHeader@12();
    BEGIN
      case WhseRequest."Source Document" of
        WhseRequest."Source Document"::"Purchase Order":
          begin
            PurchHeader.GET(PurchHeader."Document Type"::Order,WhseRequest."Source No.");
            PostingDate := PurchHeader."Posting Date";
            VendorDocNo := PurchHeader."Vendor Invoice No.";
          end;
        WhseRequest."Source Document"::"Purchase Return Order":
          begin
            PurchHeader.GET(PurchHeader."Document Type"::"Return Order",WhseRequest."Source No.");
            PostingDate := PurchHeader."Posting Date";
            VendorDocNo := PurchHeader."Vendor Cr. Memo No.";
          end;
        WhseRequest."Source Document"::"Sales Order":
          begin
            SalesHeader.GET(SalesHeader."Document Type"::Order,WhseRequest."Source No.");
            PostingDate := SalesHeader."Posting Date";
          end;
        WhseRequest."Source Document"::"Sales Return Order":
          begin
            SalesHeader.GET(SalesHeader."Document Type"::"Return Order",WhseRequest."Source No.");
            PostingDate := SalesHeader."Posting Date";
          end;
        WhseRequest."Source Document"::"Inbound Transfer":
          begin
            TransferHeader.GET(WhseRequest."Source No.");
            PostingDate := TransferHeader."Posting Date";
          end;
        WhseRequest."Source Document"::"Prod. Output":
          begin
            ProdOrder.GET(ProdOrder.Status::Released,WhseRequest."Source No.");
            PostingDate := WORKDATE;
          end;
        WhseRequest."Source Document"::"Prod. Consumption":
          begin
            ProdOrder.GET(WhseRequest."Source Subtype",WhseRequest."Source No.");
            PostingDate := WORKDATE;
          end;
      end;
    END;

    LOCAL PROCEDURE UpdateWhseActivHeader@2(WhseRequest@1001 : Record "Warehouse Request");
    BEGIN
      with WhseRequest do begin
        if WhseActivHeader."Source Document" = 0 then begin
          WhseActivHeader."Source Document" := "Source Document";
          WhseActivHeader."Source Type" := "Source Type";
          WhseActivHeader."Source Subtype" := "Source Subtype";
        end else
          WhseActivHeader.TESTFIELD("Source Document","Source Document");
        if WhseActivHeader."Source No." = '' then begin
          WhseActivHeader."Source No." := "Source No.";
        end else
          WhseActivHeader.TESTFIELD("Source No.","Source No.");

        WhseActivHeader."Destination Type" := "Destination Type";
        WhseActivHeader."Destination No." := "Destination No.";
        WhseActivHeader."External Document No." := "External Document No.";
        WhseActivHeader."Expected Receipt Date" := "Expected Receipt Date";
        WhseActivHeader."Posting Date" := PostingDate;
        WhseActivHeader."External Document No.2" := VendorDocNo;
        GetLocation("Location Code");
      end;
    END;

    LOCAL PROCEDURE CreatePutAwayLinesFromPurchase@7(PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchLine@1001 : Record "Purchase Line";
      NewWhseActivLine@1005 : Record "Warehouse Activity Line";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
    BEGIN
      with PurchLine do begin
        if not SetFilterPurchLine(PurchLine,PurchHeader) then begin
          if not HideDialog then
            MESSAGE(Text000);
          exit;
        end;

        FindNextLineNo;

        repeat
          if not NewWhseActivLine.ActivityExists(DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,0) then begin
            if "Document Type" = "Document Type"::Order then
              RemQtyToPutAway := "Qty. to Receive"
            else
              RemQtyToPutAway := -"Return Qty. to Ship";

            ItemTrackingMgt.CheckWhseItemTrkgSetup("No.",SNRequired,LNRequired,false);
            if SNRequired or LNRequired then
              ReservationFound :=
                FindReservationEntry(DATABASE::"Purchase Line","Document Type","Document No.","Line No.",SNRequired,LNRequired);

            repeat
              NewWhseActivLine.INIT;
              NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
              NewWhseActivLine."No." := WhseActivHeader."No.";
              NewWhseActivLine."Line No." := NextLineNo;
              NewWhseActivLine.SetSource(DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0);
              NewWhseActivLine."Location Code" := "Location Code";
              if "Bin Code" = '' then
                NewWhseActivLine."Bin Code" := GetDefaultBinCode("No.","Variant Code","Location Code")
              else
                NewWhseActivLine."Bin Code" := "Bin Code";
              if not Location."Bin Mandatory" then
                NewWhseActivLine."Shelf No." := GetShelfNo("No.");
              NewWhseActivLine."Item No." := "No.";
              NewWhseActivLine."Variant Code" := "Variant Code";
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Expected Receipt Date";
              if "Document Type" = "Document Type"::Order then
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Order"
              else
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Purchase Return Order";

              if not ReservationFound and SNRequired then
                repeat
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
                until RemQtyToPutAway <= 0
              else
                InsertWhseActivLine(NewWhseActivLine,RemQtyToPutAway);
            until RemQtyToPutAway <= 0;
          end;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetFilterPurchLine@17(VAR PurchLine@1000 : Record "Purchase Line";PurchHeader@1001 : Record "Purchase Header") : Boolean;
    BEGIN
      with PurchLine do begin
        SETCURRENTKEY("Document Type","Document No.","Location Code");
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETRANGE("Drop Shipment",false);
        if not CheckLineExist then
          SETRANGE("Location Code",WhseActivHeader."Location Code");
        SETRANGE(Type,Type::Item);
        if PurchHeader."Document Type" = PurchHeader."Document Type"::Order then
          SETFILTER("Qty. to Receive",'>%1',0)
        else
          SETFILTER("Return Qty. to Ship",'<%1',0);
        exit(FIND('-'));
      end;
    END;

    LOCAL PROCEDURE CreatePutAwayLinesFromSales@8(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1006 : Record "Sales Line";
      NewWhseActivLine@1003 : Record "Warehouse Activity Line";
      ItemTrackingMgt@1011 : Codeunit "Item Tracking Management";
    BEGIN
      with SalesLine do begin
        if not SetFilterSalesLine(SalesLine,SalesHeader) then begin
          if not HideDialog then
            MESSAGE(Text000);
          exit;
        end;

        FindNextLineNo;

        repeat
          if not NewWhseActivLine.ActivityExists(DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,0) then begin
            if "Document Type" = "Document Type"::Order then
              RemQtyToPutAway := -"Qty. to Ship"
            else
              RemQtyToPutAway := "Return Qty. to Receive";

            ItemTrackingMgt.CheckWhseItemTrkgSetup("No.",SNRequired,LNRequired,false);
            if SNRequired or LNRequired then
              ReservationFound :=
                FindReservationEntry(DATABASE::"Sales Line","Document Type","Document No.","Line No.",SNRequired,LNRequired);

            repeat
              NewWhseActivLine.INIT;
              NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
              NewWhseActivLine."No." := WhseActivHeader."No.";
              NewWhseActivLine."Line No." := NextLineNo;
              NewWhseActivLine.SetSource(DATABASE::"Sales Line","Document Type","Document No.","Line No.",0);
              NewWhseActivLine."Location Code" := "Location Code";
              if "Bin Code" = '' then
                NewWhseActivLine."Bin Code" := GetDefaultBinCode("No.","Variant Code","Location Code")
              else
                NewWhseActivLine."Bin Code" := "Bin Code";
              if not Location."Bin Mandatory" then
                NewWhseActivLine."Shelf No." := GetShelfNo("No.");
              NewWhseActivLine."Item No." := "No.";
              NewWhseActivLine."Variant Code" := "Variant Code";
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Planned Shipment Date";
              if "Document Type" = "Document Type"::Order then
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Order"
              else
                NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Sales Return Order";

              if not ReservationFound and SNRequired then
                repeat
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
                until RemQtyToPutAway <= 0
              else
                InsertWhseActivLine(NewWhseActivLine,RemQtyToPutAway);
            until RemQtyToPutAway <= 0;
          end;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetFilterSalesLine@21(VAR SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header") : Boolean;
    BEGIN
      with SalesLine do begin
        SETCURRENTKEY("Document Type","Document No.","Location Code");
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE("Drop Shipment",false);
        if not CheckLineExist then
          SETRANGE("Location Code",WhseActivHeader."Location Code");
        SETRANGE(Type,Type::Item);
        if SalesHeader."Document Type" = SalesHeader."Document Type"::Order then
          SETFILTER("Qty. to Ship",'<%1',0)
        else
          SETFILTER("Return Qty. to Receive",'>%1',0);
        exit(FIND('-'));
      end;
    END;

    LOCAL PROCEDURE CreatePutAwayLinesFromTransfer@9(TransferHeader@1000 : Record "Transfer Header");
    VAR
      TransferLine@1006 : Record "Transfer Line";
      NewWhseActivLine@1003 : Record "Warehouse Activity Line";
      ItemTrackingMgt@1011 : Codeunit "Item Tracking Management";
    BEGIN
      with TransferLine do begin
        if not SetFilterTransferLine(TransferLine,TransferHeader) then begin
          if not HideDialog then
            MESSAGE(Text000);
          exit;
        end;

        FindNextLineNo;

        repeat
          if not NewWhseActivLine.ActivityExists(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,0) then begin
            RemQtyToPutAway := "Qty. to Receive";

            ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,false);
            if SNRequired or LNRequired then
              ReservationFound :=
                FindReservationEntry(DATABASE::"Transfer Line",1,"Document No.","Line No.",SNRequired,LNRequired);

            repeat
              NewWhseActivLine.INIT;
              NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
              NewWhseActivLine."No." := WhseActivHeader."No.";
              NewWhseActivLine."Line No." := NextLineNo;
              NewWhseActivLine.SetSource(DATABASE::"Transfer Line",1,"Document No.","Line No.",0);
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Inbound Transfer";
              NewWhseActivLine."Location Code" := "Transfer-to Code";
              if "Transfer-To Bin Code" = '' then
                NewWhseActivLine."Bin Code" := GetDefaultBinCode("Item No.","Variant Code","Transfer-to Code")
              else
                NewWhseActivLine."Bin Code" := "Transfer-To Bin Code";
              if not Location."Bin Mandatory" then
                NewWhseActivLine."Shelf No." := GetShelfNo("Item No.");
              NewWhseActivLine."Item No." := "Item No.";
              NewWhseActivLine."Variant Code" := "Variant Code";
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Receipt Date";
              if not ReservationFound and SNRequired then
                repeat
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
                until RemQtyToPutAway <= 0
              else
                InsertWhseActivLine(NewWhseActivLine,RemQtyToPutAway);
            until RemQtyToPutAway <= 0;
          end;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetFilterTransferLine@22(VAR TransferLine@1000 : Record "Transfer Line";TransferHeader@1001 : Record "Transfer Header") : Boolean;
    BEGIN
      with TransferLine do begin
        SETRANGE("Document No.",TransferHeader."No.");
        SETRANGE("Derived From Line No.",0);
        if not CheckLineExist then
          SETRANGE("Transfer-to Code",WhseActivHeader."Location Code");
        SETFILTER("Qty. to Receive",'>%1',0);
        exit(FIND('-'));
      end;
    END;

    LOCAL PROCEDURE CreatePutAwayLinesFromProd@16(ProdOrder@1000 : Record "Production Order");
    VAR
      ProdOrderLine@1001 : Record "Prod. Order Line";
      NewWhseActivLine@1005 : Record "Warehouse Activity Line";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
    BEGIN
      with ProdOrderLine do begin
        if not SetFilterProdOrderLine(ProdOrderLine,ProdOrder) then begin
          if not HideDialog then
            MESSAGE(Text000);
          exit;
        end;

        FindNextLineNo;

        repeat
          if not NewWhseActivLine.ActivityExists(DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,0) then begin
            RemQtyToPutAway := "Remaining Quantity";

            ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,false);
            if SNRequired or LNRequired then
              ReservationFound :=
                FindReservationEntry(DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",SNRequired,LNRequired);

            repeat
              NewWhseActivLine.INIT;
              NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
              NewWhseActivLine."No." := WhseActivHeader."No.";
              NewWhseActivLine."Line No." := NextLineNo;
              NewWhseActivLine.SetSource(DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0);
              NewWhseActivLine."Location Code" := "Location Code";
              if "Bin Code" = '' then
                NewWhseActivLine."Bin Code" := GetDefaultBinCode("Item No.","Variant Code","Location Code")
              else
                NewWhseActivLine."Bin Code" := "Bin Code";
              if not Location."Bin Mandatory" then
                NewWhseActivLine."Shelf No." := GetShelfNo("Item No.");
              NewWhseActivLine."Item No." := "Item No.";
              NewWhseActivLine."Variant Code" := "Variant Code";
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Description 2" := "Description 2";
              NewWhseActivLine."Due Date" := "Due Date";
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Output";

              if not ReservationFound and SNRequired then
                repeat
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
                until RemQtyToPutAway <= 0
              else
                InsertWhseActivLine(NewWhseActivLine,RemQtyToPutAway);
            until RemQtyToPutAway <= 0;
          end;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetFilterProdOrderLine@15(VAR ProdOrderLine@1000 : Record "Prod. Order Line";ProdOrder@1001 : Record "Production Order") : Boolean;
    BEGIN
      with ProdOrderLine do begin
        SETRANGE(Status,ProdOrder.Status);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        if not CheckLineExist then
          SETRANGE("Location Code",WhseActivHeader."Location Code");
        SETFILTER("Remaining Quantity",'>%1',0);
        exit(FIND('-'));
      end;
    END;

    LOCAL PROCEDURE CreatePutAwayLinesFromComp@25(ProdOrder@1000 : Record "Production Order");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
      NewWhseActivLine@1003 : Record "Warehouse Activity Line";
      ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
    BEGIN
      with ProdOrderComp do begin
        if not SetFilterProdCompLine(ProdOrderComp,ProdOrder) then begin
          if not HideDialog then
            MESSAGE(Text000);
          exit;
        end;

        FindNextLineNo;

        repeat
          if not
             NewWhseActivLine.ActivityExists(
               DATABASE::"Prod. Order Component",Status,"Prod. Order No.","Prod. Order Line No.","Line No.",0)
          then begin
            RemQtyToPutAway := -"Remaining Quantity";

            ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,false);
            if SNRequired or LNRequired then
              ReservationFound :=
                FindReservationEntry(DATABASE::"Prod. Order Component",Status,"Prod. Order No.","Line No.",SNRequired,LNRequired);

            repeat
              NewWhseActivLine.INIT;
              NewWhseActivLine."Activity Type" := WhseActivHeader.Type;
              NewWhseActivLine."No." := WhseActivHeader."No.";
              NewWhseActivLine.SetSource(DATABASE::"Prod. Order Component",Status,"Prod. Order No.","Prod. Order Line No.","Line No.");
              NewWhseActivLine."Location Code" := "Location Code";
              NewWhseActivLine."Item No." := "Item No.";
              NewWhseActivLine."Variant Code" := "Variant Code";
              if "Bin Code" = '' then
                NewWhseActivLine."Bin Code" := GetDefaultBinCode("Item No.","Variant Code","Location Code")
              else
                NewWhseActivLine."Bin Code" := "Bin Code";
              if not Location."Bin Mandatory" then
                NewWhseActivLine."Shelf No." := GetShelfNo("Item No.");
              NewWhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
              NewWhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              NewWhseActivLine.Description := Description;
              NewWhseActivLine."Due Date" := "Due Date";
              NewWhseActivLine."Source Document" := NewWhseActivLine."Source Document"::"Prod. Consumption";

              if not ReservationFound and SNRequired then
                repeat
                  NewWhseActivLine."Line No." := NextLineNo;
                  InsertWhseActivLine(NewWhseActivLine,1);
                until RemQtyToPutAway <= 0
              else
                InsertWhseActivLine(NewWhseActivLine,RemQtyToPutAway);
            until RemQtyToPutAway <= 0;
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SetFilterProdCompLine@20(VAR ProdOrderComp@1000 : Record "Prod. Order Component";ProdOrder@1001 : Record "Production Order") : Boolean;
    BEGIN
      with ProdOrderComp do begin
        SETRANGE(Status,ProdOrder.Status);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        if not CheckLineExist then
          SETRANGE("Location Code",WhseActivHeader."Location Code");
        SETRANGE("Flushing Method","Flushing Method"::Manual);
        SETRANGE("Planning Level Code",0);
        SETFILTER("Remaining Quantity",'<0');
        exit(FIND('-'));
      end;
    END;

    LOCAL PROCEDURE FindNextLineNo@24();
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      with WhseActivHeader do begin
        WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::"Invt. Put-away");
        WhseActivLine.SETRANGE("No.","No.");
        if WhseActivLine.FINDLAST then
          NextLineNo := WhseActivLine."Line No." + 10000
        else
          NextLineNo := 10000;
      end;
    END;

    LOCAL PROCEDURE FindReservationEntry@3(SourceType@1001 : Integer;DocType@1002 : Integer;DocNo@1003 : Code[20];DocLineNo@1004 : Integer;SNRequired@1005 : Boolean;LNRequired@1006 : Boolean) : Boolean;
    VAR
      ReservEntry@1007 : Record "Reservation Entry";
      ItemTrackMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      with ReservEntry do begin
        if SourceType in [DATABASE::"Prod. Order Line",DATABASE::"Transfer Line"] then begin
          SetSourceFilter(SourceType,DocType,DocNo,-1,true);
          SETRANGE("Source Prod. Order Line",DocLineNo)
        end else
          SetSourceFilter(SourceType,DocType,DocNo,DocLineNo,true);
        if SNRequired then
          SETFILTER("Serial No.",'<>%1','');
        if LNRequired then
          SETFILTER("Lot No.",'<>%1','');
        if FINDFIRST then
          if ItemTrackMgt.SumUpItemTracking(ReservEntry,TempTrackingSpecification,true,true) then
            exit(true);
      end;
    END;

    LOCAL PROCEDURE InsertWhseActivLine@4(VAR NewWhseActivLine@1000 : Record "Warehouse Activity Line";PutAwayQty@1001 : Decimal);
    BEGIN
      with NewWhseActivLine do begin
        if Location."Bin Mandatory" then
          "Action Type" := "Action Type"::Place;

        "Serial No." := '';
        "Expiration Date" := 0D;
        if ReservationFound then begin
          CopyTrackingFromSpec(TempTrackingSpecification);
          VALIDATE(Quantity,CalcQty(TempTrackingSpecification."Qty. to Handle (Base)"));
          ReservationFound := false;
        end else
          if (SNRequired or LNRequired) and (TempTrackingSpecification.NEXT <> 0) then begin
            CopyTrackingFromSpec(TempTrackingSpecification);
            VALIDATE(Quantity,CalcQty(TempTrackingSpecification."Qty. to Handle (Base)"));
          end else
            VALIDATE(Quantity,PutAwayQty);
        VALIDATE("Qty. to Handle",0);
      end;

      if AutoCreation and not LineCreated then begin
        WhseActivHeader."No." := '';
        WhseActivHeader.INSERT(true);
        UpdateWhseActivHeader(WhseRequest);
        NextLineNo := 10000;
        COMMIT;
      end;
      NewWhseActivLine."No." := WhseActivHeader."No.";
      NewWhseActivLine."Line No." := NextLineNo;
      NewWhseActivLine.INSERT;

      LineCreated := true;
      NextLineNo := NextLineNo + 10000;
      RemQtyToPutAway -= NewWhseActivLine.Quantity;
    END;

    LOCAL PROCEDURE GetDefaultBinCode@6(ItemNo@1004 : Code[20];VariantCode@1003 : Code[10];LocationCode@1001 : Code[10]) : Code[20];
    VAR
      WMSMgt@1000 : Codeunit "WMS Management";
      BinCode@1002 : Code[20];
    BEGIN
      GetLocation(LocationCode);
      if Location."Bin Mandatory" then
        if WMSMgt.GetDefaultBin(ItemNo,VariantCode,LocationCode,BinCode) then
          exit(BinCode);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if LocationCode <> Location.Code then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetShelfNo@18(ItemNo@1000 : Code[20]) : Code[10];
    BEGIN
      GetItem(ItemNo);
      exit(Item."Shelf No.");
    END;

    LOCAL PROCEDURE GetItem@19(ItemNo@1000 : Code[20]);
    BEGIN
      if ItemNo <> Item."No." then
        Item.GET(ItemNo);
    END;

    [External]
    PROCEDURE SetWhseRequest@5(NewWhseRequest@1000 : Record "Warehouse Request";SetHideDialog@1001 : Boolean);
    BEGIN
      WhseRequest := NewWhseRequest;
      HideDialog := SetHideDialog;
      LineCreated := false;
    END;

    [External]
    PROCEDURE CheckSourceDoc@13(NewWhseRequest@1000 : Record "Warehouse Request") : Boolean;
    VAR
      PurchLine@1001 : Record "Purchase Line";
      SalesLine@1002 : Record "Sales Line";
      TransferLine@1003 : Record "Transfer Line";
      ProdOrderLine@1004 : Record "Prod. Order Line";
      ProdOrderComp@1005 : Record "Prod. Order Component";
    BEGIN
      WhseRequest := NewWhseRequest;
      if Location.RequireReceive(WhseRequest."Location Code") and
         (WhseRequest."Source Document" <> WhseRequest."Source Document"::"Prod. Output")
      then
        exit(false);

      GetSourceDocHeader;
      CheckLineExist := true;
      case WhseRequest."Source Document" of
        WhseRequest."Source Document"::"Purchase Order":
          exit(SetFilterPurchLine(PurchLine,PurchHeader));
        WhseRequest."Source Document"::"Purchase Return Order":
          exit(SetFilterPurchLine(PurchLine,PurchHeader));
        WhseRequest."Source Document"::"Sales Order":
          exit(SetFilterSalesLine(SalesLine,SalesHeader));
        WhseRequest."Source Document"::"Sales Return Order":
          exit(SetFilterSalesLine(SalesLine,SalesHeader));
        WhseRequest."Source Document"::"Inbound Transfer":
          exit(SetFilterTransferLine(TransferLine,TransferHeader));
        WhseRequest."Source Document"::"Prod. Output":
          exit(SetFilterProdOrderLine(ProdOrderLine,ProdOrder));
        WhseRequest."Source Document"::"Prod. Consumption":
          exit(SetFilterProdCompLine(ProdOrderComp,ProdOrder));
      end;
    END;

    [External]
    PROCEDURE AutoCreatePutAway@14(VAR WhseActivHeaderNew@1000 : Record "Warehouse Activity Header");
    BEGIN
      WhseActivHeader := WhseActivHeaderNew;
      CheckLineExist := false;
      AutoCreation := true;
      GetLocation(WhseRequest."Location Code");

      case WhseRequest."Source Document" of
        WhseRequest."Source Document"::"Purchase Order":
          CreatePutAwayLinesFromPurchase(PurchHeader);
        WhseRequest."Source Document"::"Purchase Return Order":
          CreatePutAwayLinesFromPurchase(PurchHeader);
        WhseRequest."Source Document"::"Sales Order":
          CreatePutAwayLinesFromSales(SalesHeader);
        WhseRequest."Source Document"::"Sales Return Order":
          CreatePutAwayLinesFromSales(SalesHeader);
        WhseRequest."Source Document"::"Inbound Transfer":
          CreatePutAwayLinesFromTransfer(TransferHeader);
        WhseRequest."Source Document"::"Prod. Output":
          CreatePutAwayLinesFromProd(ProdOrder);
        WhseRequest."Source Document"::"Prod. Consumption":
          CreatePutAwayLinesFromComp(ProdOrder);
      end;
      if LineCreated then begin
        WhseActivHeader.MODIFY;
        WhseActivHeaderNew := WhseActivHeader;
      end;
    END;

    BEGIN
    END.
  }
}

