OBJECT Table 7332 Whse. Internal Put-away Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               TESTFIELD("Item No.");
               xRec.TESTFIELD("Qty. Put Away",0);
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
               DocStatus@1000 : Option;
             BEGIN
               TestReleased;

               if ("Qty. Put Away" > 0) and (Quantity > "Qty. Put Away") then
                 if not HideValidationDialog then
                   if not CONFIRM(
                        STRSUBSTNO(
                          Text004,
                          FIELDCAPTION("Qty. Put Away"),"Qty. Put Away",
                          FIELDCAPTION(Quantity),Quantity,TABLECAPTION),false)
                   then
                     ERROR(Text005);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Whse. Internal Put-away Line",0,"No.",'',0,"Line No.","Location Code",true);

               DocStatus :=
                 WhseInternalPutAwayHeader.GetDocumentStatus("Line No.");
               if DocStatus <> WhseInternalPutAwayHeader."Document Status" then begin
                 WhseInternalPutAwayHeader.VALIDATE("Document Status",DocStatus);
                 WhseInternalPutAwayHeader.MODIFY;
               end;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Whse. Internal Put-away Line;
    LookupPageID="Whse. Internal Put-away Lines";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;From Bin Code       ;Code20        ;OnValidate=VAR
                                                                BinContent@1000 : Record "Bin Content";
                                                              BEGIN
                                                                TestReleased;
                                                                if xRec."From Bin Code" <> "From Bin Code" then
                                                                  if "From Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if "From Bin Code" = Location."Adjustment Bin Code" then
                                                                      FIELDERROR(
                                                                        "From Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text000,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));
                                                                    if Location."Directed Put-away and Pick" then
                                                                      CheckBlocking(BinContent);
                                                                  end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Bin Code"));
                                                            END;

                                                   CaptionML=ENU=From Bin Code }
    { 13  ;   ;From Zone Code      ;Code10        ;OnValidate=BEGIN
                                                                TestReleased;
                                                                if "From Zone Code" <> xRec."From Zone Code" then begin
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                  "From Bin Code" := '';
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Zone Code"));
                                                              Location.TESTFIELD("Directed Put-away and Pick");
                                                            END;

                                                   CaptionML=ENU=From Zone Code }
    { 14  ;   ;Item No.            ;Code20        ;OnValidate=BEGIN
                                                                TestReleased;
                                                                TESTFIELD("Qty. Put Away",0);
                                                                if "Item No." <> xRec."Item No." then
                                                                  "Variant Code" := '';

                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;

                                                                if WhseInternalPutAwayHeader.GET("No.") then begin
                                                                  if "Location Code" = '' then
                                                                    VALIDATE("Location Code",WhseInternalPutAwayHeader."Location Code");
                                                                  if "From Zone Code" = '' then
                                                                    VALIDATE("From Zone Code",WhseInternalPutAwayHeader."From Zone Code");
                                                                  if "From Bin Code" = '' then
                                                                    VALIDATE("From Bin Code",WhseInternalPutAwayHeader."From Bin Code");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Item No."));
                                                            END;

                                                   CaptionML=ENU=Item No. }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DocStatus@1000 : Option;
                                                              BEGIN
                                                                TestReleased;
                                                                TESTFIELD("Qty. Put Away",0);
                                                                CALCFIELDS("Put-away Qty.");
                                                                if Quantity < "Qty. Put Away" + "Put-away Qty." then
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Put Away" + "Put-away Qty."));

                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                if CurrFieldNo = FIELDNO(Quantity) then
                                                                  CheckBinContentQty;

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Put Away"));
                                                                Status := CalcStatusPutAwayLine;
                                                                if Status <> xRec.Status then begin
                                                                  GetInternalPutAwayHeader("No.");
                                                                  DocStatus := WhseInternalPutAwayHeader.GetDocumentStatus(0);
                                                                  if DocStatus <> WhseInternalPutAwayHeader."Document Status" then begin
                                                                    WhseInternalPutAwayHeader.VALIDATE("Document Status",DocStatus);
                                                                    WhseInternalPutAwayHeader.MODIFY;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 23  ;   ;Qty. Put Away       ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Put Away (Base)" := CalcBaseQty("Qty. Put Away");
                                                              END;

                                                   CaptionML=ENU=Qty. Put Away;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Put Away (Base);Decimal       ;CaptionML=ENU=Qty. Put Away (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 25  ;   ;Put-away Qty.       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Activity Type"=CONST("Put-away"),
                                                                                                                       "Whse. Document Type"=CONST("Internal Put-away"),
                                                                                                                       "Whse. Document No."=FIELD("No."),
                                                                                                                       "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=FILTER(" "|Take),
                                                                                                                       "Original Breakbulk"=CONST(false)));
                                                   CaptionML=ENU=Put-away Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 26  ;   ;Put-away Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=CONST("Put-away"),
                                                                                                                              "Whse. Document Type"=CONST("Internal Put-away"),
                                                                                                                              "Whse. Document No."=FIELD("No."),
                                                                                                                              "Whse. Document Line No."=FIELD("Line No."),
                                                                                                                              "Action Type"=FILTER(" "|Take),
                                                                                                                              "Original Breakbulk"=CONST(false)));
                                                   CaptionML=ENU=Put-away Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Partially Put Away,Completely Put Away";
                                                   OptionString=" ","Partially Put Away","Completely Put Away";
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Unit of Measure Code"));
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   Editable=false }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" = '' then
                                                                  VALIDATE("Item No.")
                                                                else begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Variant Code"));
                                                            END;

                                                   CaptionML=ENU=Variant Code;
                                                   Editable=true }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"No.","Line No."                        ;Clustered=true }
    {    ;"No.","Item No."                        ;MaintainSQLIndex=false }
    {    ;"No.","From Bin Code"                   ;MaintainSQLIndex=false }
    {    ;"No.","Shelf No."                       ;MaintainSQLIndex=false }
    {    ;"No.","Sorting Sequence No."             }
    {    ;"No.","Due Date"                        ;MaintainSQLIndex=false }
    {    ;"Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code";
                                                   SumIndexFields="Qty. (Base)";
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WhseInternalPutAwayHeader@1002 : Record "Whse. Internal Put-away Header";
      Location@1004 : Record Location;
      Item@1000 : Record Item;
      ItemUnitOfMeasure@1001 : Record "Item Unit of Measure";
      Text000@1003 : TextConst 'ENU=must not be the %1 of the %2';
      Text001@1005 : TextConst 'ENU=must be greater than %1';
      Text002@1006 : TextConst 'ENU=must not be greater than %1 units';
      Text003@1007 : TextConst 'ENU=You cannot rename a %1.';
      LastLineNo@1012 : Integer;
      HideValidationDialog@1008 : Boolean;
      Text004@1009 : TextConst 'ENU="%1 = %2 is less than the %3 = %4.\Do you really want to delete the %5?"';
      Text005@1010 : TextConst 'ENU=Cancelled.';
      Text006@1011 : TextConst 'ENU=Nothing to handle.';

    [External]
    PROCEDURE SetUpNewLine@3(LastWhseInternalPutAwayLine@1000 : Record "Whse. Internal Put-away Line");
    VAR
      WhseInternalPutAwayLine@1001 : Record "Whse. Internal Put-away Line";
    BEGIN
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      if WhseInternalPutAwayLine.COUNT > 0 then
        LastLineNo := LastWhseInternalPutAwayLine."Line No."
      else
        LastLineNo := 0;
      "Line No." := GetNextLineNo;
      VALIDATE("Location Code",WhseInternalPutAwayHeader."Location Code");
      "From Zone Code" := WhseInternalPutAwayHeader."From Zone Code";
      "From Bin Code" := WhseInternalPutAwayHeader."From Bin Code";
      "Due Date" := WhseInternalPutAwayHeader."Due Date";
    END;

    LOCAL PROCEDURE TestReleased@2();
    BEGIN
      TESTFIELD("No.");
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayHeader.TESTFIELD(Status,0);
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE CalcStatusPutAwayLine@4() : Integer;
    BEGIN
      if (Quantity <> 0) and (Quantity = "Qty. Put Away") then
        exit(Status::"Completely Put Away");
      if "Qty. Put Away" > 0 then
        exit(Status::"Partially Put Away");
      exit(Status::" ");
    END;

    LOCAL PROCEDURE CheckBinContentQty@9();
    VAR
      BinContent@1000 : Record "Bin Content";
      WhseInternalPutAwayLine@1002 : Record "Whse. Internal Put-away Line";
      AvailQtyBase@1001 : Decimal;
    BEGIN
      GetLocation("Location Code");

      if Location."Bin Mandatory" and
         ("Location Code" <> '') and ("From Bin Code" <> '') and
         ("Item No." <> '') and ("Unit of Measure Code" <> '')
      then begin
        if Location."Directed Put-away and Pick" then
          CheckBlocking(BinContent);
        AvailQtyBase := BinContent.CalcQtyAvailToTake(0);
        WhseInternalPutAwayLine.SETCURRENTKEY(
          "Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code");
        WhseInternalPutAwayLine.SETRANGE("Item No.","Item No.");
        WhseInternalPutAwayLine.SETRANGE("From Bin Code","From Bin Code");
        WhseInternalPutAwayLine.SETRANGE("Location Code","Location Code");
        WhseInternalPutAwayLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        WhseInternalPutAwayLine.SETRANGE("Variant Code","Variant Code");
        WhseInternalPutAwayLine.SETFILTER("Line No.",'<>%1',"Line No.");
        WhseInternalPutAwayLine.CALCSUMS("Qty. (Base)");
        if AvailQtyBase - WhseInternalPutAwayLine."Qty. (Base)" < "Qty. (Base)" then
          FIELDERROR(
            "Qty. (Base)",
            STRSUBSTNO(
              Text002,AvailQtyBase - WhseInternalPutAwayLine."Qty. (Base)"));
      end;
    END;

    LOCAL PROCEDURE CheckBlocking@13(VAR BinContent@1002 : Record "Bin Content");
    VAR
      Bin@1001 : Record Bin;
      BinType@1000 : Record "Bin Type";
    BEGIN
      if BinContent.GET(
           "Location Code","From Bin Code","Item No.","Variant Code","Unit of Measure Code")
      then begin
        if BinContent."Bin Type Code" <> '' then
          if BinType.GET(Bin."Bin Type Code") then
            BinType.TESTFIELD(Receive,false);
        if BinContent."Block Movement" in [
                                           BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        then
          BinContent.FIELDERROR("Block Movement");

        "From Zone Code" := BinContent."Zone Code";
      end else begin
        Bin.GET("Location Code","From Bin Code");
        if Bin."Bin Type Code" <> '' then
          if BinType.GET(Bin."Bin Type Code") then
            BinType.TESTFIELD(Receive,false);

        if Bin."Block Movement" in [
                                    Bin."Block Movement"::Outbound,Bin."Block Movement"::All]
        then
          Bin.FIELDERROR("Block Movement");
        "From Zone Code" := Bin."Zone Code";
      end;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetInternalPutAwayHeader@7(InternalPutAwayNo@1000 : Code[20]);
    BEGIN
      if InternalPutAwayNo <> '' then
        WhseInternalPutAwayHeader.GET(InternalPutAwayNo);
    END;

    LOCAL PROCEDURE LookUpBinContent@6();
    VAR
      BinContent@1000 : Record "Bin Content";
    BEGIN
      BinContent.FILTERGROUP(2);
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.FILTERGROUP(0);
      BinContent."Location Code" := "Location Code";
      BinContent."Zone Code" := "From Zone Code";
      BinContent."Bin Code" := "From Bin Code";
      BinContent."Item No." := "Item No.";
      if "Variant Code" <> '' then begin
        TESTFIELD("Item No.");
        BinContent."Variant Code" := "Variant Code";
      end;
      if "Unit of Measure Code" <> '' then begin
        TESTFIELD("Item No.");
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
      end;
      if PAGE.RUNMODAL(0,BinContent) = ACTION::LookupOK then begin
        if BinContent."Block Movement" in [
                                           BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        then
          BinContent.FIELDERROR("Block Movement");
        VALIDATE("Location Code",BinContent."Location Code");
        VALIDATE(Quantity,0);
        VALIDATE("From Bin Code",BinContent."Bin Code");
        VALIDATE("Item No.",BinContent."Item No.");
        VALIDATE("Variant Code",BinContent."Variant Code");
        VALIDATE("Unit of Measure Code",BinContent."Unit of Measure Code");
      end;
    END;

    [External]
    PROCEDURE CreatePutAwayDoc@11(VAR WhseInternalPutAwayLine@1000 : Record "Whse. Internal Put-away Line");
    VAR
      CreatePutAwayFromWhseSource@1002 : Report "Whse.-Source - Create Document";
    BEGIN
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayHeader.CheckPutawayRequired(WhseInternalPutAwayLine."Location Code");
      WhseInternalPutAwayHeader.TESTFIELD(
        Status,WhseInternalPutAwayHeader.Status::Released);
      WhseInternalPutAwayLine.SETFILTER(Quantity,'>0');
      WhseInternalPutAwayLine.SETFILTER(
        Status,'<>%1',WhseInternalPutAwayLine.Status::"Completely Put Away");
      if WhseInternalPutAwayLine.FIND('-') then begin
        CreatePutAwayFromWhseSource.SetWhseInternalPutAway(WhseInternalPutAwayHeader);
        CreatePutAwayFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        CreatePutAwayFromWhseSource.USEREQUESTPAGE(not HideValidationDialog);
        CreatePutAwayFromWhseSource.RUNMODAL;
        CreatePutAwayFromWhseSource.GetResultMessage(1);
        CLEAR(CreatePutAwayFromWhseSource);
      end else
        if not HideValidationDialog then
          MESSAGE(Text006);
    END;

    LOCAL PROCEDURE SelectLookUp@10(CurrentFieldNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record "Item Variant";
    BEGIN
      GetLocation("Location Code");
      if Location."Bin Mandatory" then
        LookUpBinContent
      else begin
        if CurrentFieldNo = FIELDNO("From Zone Code") then
          Location.TESTFIELD("Bin Mandatory");
        if CurrentFieldNo = FIELDNO("From Bin Code") then
          Location.TESTFIELD("Bin Mandatory");
        if CurrentFieldNo = FIELDNO("Item No.") then begin
          Item."No." := "Item No.";
          if PAGE.RUNMODAL(0,Item) = ACTION::LookupOK then
            VALIDATE("Item No.",Item."No.");
        end;
        if CurrentFieldNo = FIELDNO("Variant Code") then begin
          TESTFIELD("Item No.");
          ItemVariant.FILTERGROUP(2);
          ItemVariant.SETRANGE("Item No.","Item No.");
          ItemVariant.FILTERGROUP(0);
          ItemVariant."Item No." := "Item No.";
          ItemVariant.Code := "Variant Code";
          if PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK then
            VALIDATE("Variant Code",ItemVariant.Code);
        end;
        if CurrentFieldNo = FIELDNO("Unit of Measure Code") then begin
          TESTFIELD("Item No.");
          ItemUnitOfMeasure.FILTERGROUP(2);
          ItemUnitOfMeasure.SETRANGE("Item No.","Item No.");
          ItemUnitOfMeasure.FILTERGROUP(0);
          ItemUnitOfMeasure."Item No." := "Item No.";
          ItemUnitOfMeasure.Code := "Unit of Measure Code";
          if PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK then
            VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
        end;
      end;
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      TempWhseWorksheetLine@1001 : TEMPORARY Record "Whse. Worksheet Line";
      WhseItemTrackingForm@1000 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWorksheetLine.InitLineWithItem(
        TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away","No.","Line No.","Location Code",
        "Item No.","Qty. (Base)","Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)","Qty. per Unit of Measure");

      WhseItemTrackingForm.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Put-away Line");
      WhseItemTrackingForm.RUNMODAL;
    END;

    LOCAL PROCEDURE GetNextLineNo@16() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record "Whse. Internal Put-away Line";
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      if WhseInternalPutAwayHeader."Sorting Method" <> WhseInternalPutAwayHeader."Sorting Method"::" " then
        exit(GetLastLineNo + 10000);

      WhseInternalPutAwayLine."No." := WhseInternalPutAwayHeader."No.";
      WhseInternalPutAwayLine."Line No." := LastLineNo;
      if WhseInternalPutAwayLine.FIND('<') then
        LowerLineNo := WhseInternalPutAwayLine."Line No."
      else
        if WhseInternalPutAwayLine.FIND('>') then
          exit(LastLineNo div 2)
        else
          exit(LastLineNo + 10000);

      WhseInternalPutAwayLine."No." := WhseInternalPutAwayHeader."No.";
      WhseInternalPutAwayLine."Line No." := LastLineNo;
      if WhseInternalPutAwayLine.FIND('>') then
        HigherLineNo := LastLineNo
      else
        exit(LastLineNo + 10000);
      exit(LowerLineNo + (HigherLineNo - LowerLineNo) div 2);
    END;

    LOCAL PROCEDURE GetLastLineNo@20() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record "Whse. Internal Put-away Line";
    BEGIN
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      if WhseInternalPutAwayLine.FINDLAST then
        exit(WhseInternalPutAwayLine."Line No.");
      exit(0);
    END;

    LOCAL PROCEDURE GetSortSeqNo@12() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record "Whse. Internal Put-away Line";
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalPutAwayHeader("No.");

      WhseInternalPutAwayLine.SETRANGE("No.","No.");
      case WhseInternalPutAwayHeader."Sorting Method" of
        WhseInternalPutAwayHeader."Sorting Method"::" ":
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Line No.");
        WhseInternalPutAwayHeader."Sorting Method"::Item:
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Item No.");
        WhseInternalPutAwayHeader."Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              WhseInternalPutAwayLine.SETCURRENTKEY("No.","From Bin Code")
            else
              WhseInternalPutAwayLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        WhseInternalPutAwayHeader."Sorting Method"::"Due Date":
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Due Date");
        else
          exit("Line No.");
      end;

      WhseInternalPutAwayLine := Rec;
      LastSeqNo := GetLastSeqNo(WhseInternalPutAwayLine);
      if WhseInternalPutAwayLine.FIND('<') then
        LowerSeqNo := WhseInternalPutAwayLine."Sorting Sequence No."
      else
        if WhseInternalPutAwayLine.FIND('>') then
          exit(WhseInternalPutAwayLine."Sorting Sequence No." div 2)
        else
          LowerSeqNo := 10000;

      WhseInternalPutAwayLine := Rec;
      if WhseInternalPutAwayLine.FIND('>') then
        HigherSeqNo := WhseInternalPutAwayLine."Sorting Sequence No."
      else
        if WhseInternalPutAwayLine.FIND('<') then
          exit(LastSeqNo + 10000)
        else
          HigherSeqNo := LastSeqNo;
      exit(LowerSeqNo + (HigherSeqNo - LowerSeqNo) div 2);
    END;

    LOCAL PROCEDURE GetLastSeqNo@17(WhseInternalPutAwayLine@1001 : Record "Whse. Internal Put-away Line") : Integer;
    BEGIN
      WhseInternalPutAwayLine.SETRECFILTER;
      WhseInternalPutAwayLine.SETRANGE("Line No.");
      WhseInternalPutAwayLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      if WhseInternalPutAwayLine.FINDLAST then
        exit(WhseInternalPutAwayLine."Sorting Sequence No.");
      exit(0);
    END;

    [External]
    PROCEDURE SetItemTrackingLines@19(SerialNo@1000 : Code[20];LotNo@1001 : Code[20];ExpirationDate@1005 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      TempWhseWorksheetLine@1004 : TEMPORARY Record "Whse. Worksheet Line";
      WhseItemTrackingForm@1003 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWorksheetLine.InitLineWithItem(
        TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away","No.","Line No.","Location Code",
        "Item No.","Qty. (Base)","Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)","Qty. per Unit of Measure");

      WhseItemTrackingForm.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Put-away Line");
      WhseItemTrackingForm.InsertItemTrackingLine(TempWhseWorksheetLine,SerialNo,LotNo,ExpirationDate,QtyToEmpty);
    END;

    [External]
    PROCEDURE CheckCurrentLineQty@25();
    VAR
      BinContent@1000 : Record "Bin Content";
      AvailQtyBase@1001 : Decimal;
    BEGIN
      GetLocation("Location Code");

      if Location."Bin Mandatory" and
         ("Location Code" <> '') and ("From Bin Code" <> '') and
         ("Item No." <> '') and ("Unit of Measure Code" <> '')
      then begin
        if Location."Directed Put-away and Pick" then
          CheckBlocking(BinContent);
        AvailQtyBase := BinContent.CalcQtyAvailToTake(0);
        if AvailQtyBase < "Qty. (Base)" then
          FIELDERROR("Qty. (Base)",STRSUBSTNO(Text002,AvailQtyBase));
      end;
    END;

    BEGIN
    END.
  }
}

