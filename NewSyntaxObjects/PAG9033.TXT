OBJECT Page 9033 Invite External Accountant
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invite External Accountant;
    PageType=NavigatePage;
    OnInit=BEGIN
             DefineInitialEmailBody;
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit "Permission Manager";
                 InviteExternalAccountant@1001 : Codeunit "Invite External Accountant";
                 NavUserAccountHelper@1004 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
                 ProgressWindow@1002 : Dialog;
                 ErrorMessage@1003 : Text;
               BEGIN
                 OnInvitationStart;
                 if not PermissionManager.SoftwareAsAService then
                   ERROR(SaaSOnlyErrorErr);

                 ProgressWindow.OPEN(WizardOpenValidationMsg);

                 if not InviteExternalAccountant.VerifySMTPIsEnabledAndSetup then
                   ERROR(SMTPMustBeSetupErrorErr);

                 if not InviteExternalAccountant.InvokeIsExternalAccountantLicenseAvailable(ErrorMessage) then begin
                   OnInvitationNoExternalAccountantLicenseFail;
                   ERROR(NoExternalAccountantLicenseAvailableErr);
                 end;

                 if not InviteExternalAccountant.InvokeIsUserAdministrator(ErrorMessage) then begin
                   OnInvitationNoAADPermissionsFail;
                   ERROR(NoAADPermissionsErr);
                 end;

                 if not (NavUserAccountHelper.IsSessionAdminSession or NavUserAccountHelper.IsUserSuperInAllCompanies) then begin
                   OnInvitationNoUserTablePermissionsFail;
                   ERROR(NoUserTableWritePermissionErr);
                 end;

                 ProgressWindow.CLOSE;
                 Step := Step::Start;
                 EnableControls;
               END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::OK then
                         if not UserInvited then
                           if not CONFIRM(SetupNotCompletedQst,false) then
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      Name=ActionContainer2;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackActionEnabled;
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(true);
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextActionEnabled;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=VAR
                                 ErrorMessage@1010 : Text;
                               BEGIN
                                 if Step = Step::DefineInformation then begin
                                   if (NewUserEmailAddress <> '') and (NewFirstName <> '') and (NewLastName <> '') and (NewUserWelcomeEmail <> '') then begin
                                     if InviteExternalAccountant.InvokeEmailAddressIsAADAccount(NewUserEmailAddress,ErrorMessage) then begin
                                       Invite;
                                       OnInvitationEnd(WasInvitationSuccessful,InvitationResult,InviteProgress);
                                       NextStep(false);
                                     end else
                                       ERROR(ErrorMessage);
                                   end else
                                     ERROR(NotAllFieldsEnteredErrorErr);
                                 end else
                                   NextStep(false);
                               END;
                                }
      { 46      ;1   ;Action    ;
                      Name=ActionClose;
                      CaptionML=ENU=Close;
                      ApplicationArea=#Basic,#Suite;
                      Visible=CloseActionVisible;
                      Enabled=TRUE;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                Name=Group10;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 11  ;2   ;Group     ;
                Name=Welcome to assisted setup for inviting an external accountant.;
                CaptionML=ENU=Welcome to assisted setup for inviting an external accountant.;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 12  ;3   ;Group     ;
                Name=Group12;
                Visible=FirstStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=This guide will help you invite an external accountant to login to your company. }

    { 24  ;4   ;Group     ;
                Name=Group24;
                CaptionML=ENU=This Invite External Accountant feature allows your organization to share its data with an external party either through the use of a separate portal or through the external party's access to your organization's online services account. Microsoft has no control over the third-party's use of your data. You are responsible for ensuring that you have separate agreements in place with any such external user governing such external user's access to and use of your data.;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 8   ;5   ;Group     ;
                Name=By clicking 'I Accept', you consent to share your organization's data with external parties you designate.;
                CaptionML=ENU=By clicking 'I Accept', you consent to share your organization's data with external parties you designate.;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 6   ;6   ;Field     ;
                Name=DataPrivacy;
                CaptionML=ENU=I Accept;
                ToolTipML=ENU=Specifies your consent to share your organization's data with external parties you designate.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataPrivacyAccepted;
                OnValidate=BEGIN
                             NextActionEnabled := true;
                           END;
                            }

    { 7   ;6   ;Group     ;
                Name=Group7;
                Visible=FirstStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to get started. }

    { 13  ;1   ;Group     ;
                Name=Group13;
                Visible=DefineInformationStepVisible;
                GroupType=Group }

    { 20  ;2   ;Group     ;
                Name=Group20;
                Visible=DefineInformationStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Please enter the email address of the accountant. }

    { 21  ;3   ;Field     ;
                Name=NewUserEmailAddress;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NewUserEmailAddress;
                ShowMandatory=TRUE;
                ShowCaption=false }

    { 25  ;2   ;Group     ;
                Name=Group25;
                Visible=DefineInformationStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Please enter the first name. }

    { 26  ;3   ;Field     ;
                Name=NewFirstName;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NewFirstName;
                OnValidate=BEGIN
                             DefineInitialEmailBody;
                           END;

                ShowMandatory=TRUE;
                ShowCaption=false }

    { 15  ;2   ;Group     ;
                Name=Group15;
                Visible=DefineInformationStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Please enter the last name. }

    { 5   ;3   ;Field     ;
                Name=NewLastName;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NewLastName;
                ShowMandatory=TRUE;
                ShowCaption=false }

    { 16  ;2   ;Group     ;
                Name=Welcome Email;
                CaptionML=ENU=Welcome Email;
                Visible=DefineInformationStepVisible;
                GroupType=Group }

    { 23  ;3   ;Field     ;
                Name=NewUserWelcomeEmail;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NewUserWelcomeEmail;
                MultiLine=true;
                ShowCaption=false }

    { 17  ;1   ;Group     ;
                Name=Group17;
                Visible=CloseActionVisible;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                Name=InvitationResult;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InvitationResult;
                Enabled=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE;
                ShowCaption=false }

    { 19  ;2   ;Field     ;
                Name=InviteProgress;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InviteProgress;
                Enabled=FALSE;
                Editable=FALSE;
                MultiLine=true;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      InviteExternalAccountant@1018 : Codeunit "Invite External Accountant";
      Step@1002 : 'Start,DefineInformation,Finish';
      FirstStepVisible@1004 : Boolean;
      DefineInformationStepVisible@1005 : Boolean;
      BackActionEnabled@1008 : Boolean;
      NextActionEnabled@1009 : Boolean;
      SetupNotCompletedQst@1013 : TextConst 'ENU=The user was not yet invited. Are you sure that you want to exit?';
      DataPrivacyAccepted@1000 : Boolean;
      CloseActionVisible@1021 : Boolean;
      NewUserEmailAddress@1010 : Text;
      NewFirstName@1053 : Text;
      NewLastName@1020 : Text;
      NewUserWelcomeEmail@1012 : Text;
      UserInvited@1015 : Boolean;
      EmailGreetingTxt@1024 : TextConst 'ENU="Hello "';
      EmailBodylTxt@1025 : TextConst 'ENU=Please accept this invitation to get access to my Dynamics 365 for Finance and Operations, Business edition.';
      EmailClosingTxt@1026 : TextConst 'ENU=Best Regards,';
      SaaSOnlyErrorErr@1014 : TextConst 'ENU=This functionality is not intended for on premises.';
      InviteProgress@1022 : Text;
      InvitationErrorTxt@1027 : TextConst '@@@="%1=part of the invite process, e.g. invite, profile update, license assignment.  %2 =the error message.";ENU=Inviting external accountant failed while doing the %1.  %2';
      InviteTxt@1028 : TextConst 'ENU=invite';
      ProfileUpdateTxt@1029 : TextConst 'ENU=profile update';
      LicenseAssignmentTxt@1030 : TextConst 'ENU=license assignment';
      EmailTxt@1031 : TextConst 'ENU=email';
      InvitationSuccessTxt@1032 : TextConst '@@@="%1=first name.  %2 =last name.";ENU=%1 %2 was successfully invited!';
      NoExternalAccountantLicenseAvailableErr@1033 : TextConst 'ENU=No External Accountant license available. Contact your administrator.';
      NoAADPermissionsErr@1034 : TextConst 'ENU=You do not have permission to invite the user. You must either be a global administrator or a user administrator in Azure AD. Please contact your administrator.';
      WizardOpenValidationMsg@1035 : TextConst 'ENU=Verifying permissions and license availability.';
      InviteProgressWindowMsg@1036 : TextConst 'ENU=Inviting external accountant.  This process could take a little while.';
      EmailSubjectTxt@1037 : TextConst 'ENU=You have been invited to Dynamics 365 for Finance and Operations, Business edition';
      EmailUseThisLinkToAcceptInvitationTxt@1038 : TextConst 'ENU=Use this link to accept the invitation.';
      EmailUseThisLinkWhenAddingClientTxt@1039 : TextConst 'ENU="Use this link when adding this client in your Accountant Hub:  "';
      EmailNotUsingAccountantPortalTxt@1040 : TextConst '@@@={Do not translate html portion.};ENU="Not using the Accountant Hub?  Click <a href=""https://www.microsoft.com/en-us/dynamics365/financial-insights-for-accountants"">here</a> to learn more."';
      InvitationResult@1023 : Text;
      FailureTxt@1041 : TextConst 'ENU=Failure';
      SuccessTxt@1042 : TextConst 'ENU=Success';
      EmailErrorTxt@1043 : TextConst 'ENU=Error occurred while sending email.';
      NotAllFieldsEnteredErrorErr@1044 : TextConst 'ENU=To continue, enter all required fields.';
      WasInvitationSuccessful@1060 : Boolean;
      SMTPMustBeSetupErrorErr@1045 : TextConst 'ENU=SMTP must be configured prior to inviting external accountant. Contact your administrator.';
      NoUserTableWritePermissionErr@1046 : TextConst 'ENU=This step adds a user to your company, and only your administrator can do that. Please contact your administrator.';

    LOCAL PROCEDURE EnableControls@1();
    BEGIN
      ResetControls;

      case Step of
        Step::Start:
          ShowStartStep;
        Step::DefineInformation:
          ShowDefineInformationStep;
        Step::Finish:
          ShowFinishStep;
      end;
    END;

    LOCAL PROCEDURE NextStep@3(Backwards@1000 : Boolean);
    BEGIN
      if Backwards then
        Step := Step - 1
      else
        Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE ShowStartStep@4();
    BEGIN
      FirstStepVisible := true;

      BackActionEnabled := false;
    END;

    LOCAL PROCEDURE ShowDefineInformationStep@5();
    BEGIN
      DefineInformationStepVisible := true;
    END;

    LOCAL PROCEDURE ShowFinishStep@6();
    BEGIN
      NextActionEnabled := false;
      CloseActionVisible := true;
    END;

    LOCAL PROCEDURE Invite@1045();
    VAR
      SMTPMail@1011 : Codeunit "SMTP Mail";
      MailManagement@1012 : Codeunit "Mail Management";
      GuestGraphUser@1013 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.IUser";
      Graph@1014 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery";
      ProgressWindow@1015 : Dialog;
      InvitedUserId@1016 : GUID;
      InviteRedeemUrl@1017 : Text;
      ErrorMessage@1018 : Text;
    BEGIN
      UserInvited := true;
      ProgressWindow.OPEN(InviteProgressWindowMsg);

      if not InviteExternalAccountant.InvokeInvitationsRequest(NewFirstName + NewLastName,
           NewUserEmailAddress,GetWebClientUrl,InvitedUserId,InviteRedeemUrl,ErrorMessage)
      then begin
        InvitationResult := FailureTxt;
        InviteProgress := STRSUBSTNO(InvitationErrorTxt,InviteTxt,ErrorMessage);
        ProgressWindow.CLOSE;
        exit;
      end;
      Graph := Graph.GraphQuery;
      GuestGraphUser := Graph.GetUserByObjectId(InvitedUserId);

      if not InviteExternalAccountant.InvokeUserProfileUpdateRequest(GuestGraphUser,
           Graph.GetTenantDetail().CountryLetterCode,ErrorMessage)
      then begin
        InvitationResult := FailureTxt;
        InviteProgress := STRSUBSTNO(InvitationErrorTxt,ProfileUpdateTxt,ErrorMessage);
        ProgressWindow.CLOSE;
        exit;
      end;

      if not InviteExternalAccountant.InvokeUserAssignLicenseRequest(GuestGraphUser,ErrorMessage) then begin
        InvitationResult := FailureTxt;
        InviteProgress := STRSUBSTNO(InvitationErrorTxt,LicenseAssignmentTxt,ErrorMessage);
        ProgressWindow.CLOSE;
        exit;
      end;

      SMTPMail.CreateMessage('',MailManagement.GetSenderEmailAddress,NewUserEmailAddress,
        EmailSubjectTxt,DefineFullEmailBody(NewUserWelcomeEmail,InviteRedeemUrl),true);
      if not SMTPMail.TrySend then begin
        InvitationResult := FailureTxt;
        InviteProgress := STRSUBSTNO(InvitationErrorTxt,EmailTxt,EmailErrorTxt);
        ProgressWindow.CLOSE;
        exit;
      end;

      ProgressWindow.CLOSE;

      InvitationResult := SuccessTxt;
      WasInvitationSuccessful := true;
      InviteProgress := STRSUBSTNO(InvitationSuccessTxt,NewFirstName,NewLastName);
      CurrPage.UPDATE(false);
      InviteExternalAccountant.UpdateAssistedSetup;
      InviteExternalAccountant.CreateNewUser(InvitedUserId);
    END;

    LOCAL PROCEDURE ResetControls@7();
    BEGIN
      FirstStepVisible := false;
      DefineInformationStepVisible := false;
      NextActionEnabled := false;

      BackActionEnabled := true;

      if DataPrivacyAccepted then
        NextActionEnabled := true;

      CloseActionVisible := false;
    END;

    LOCAL PROCEDURE DefineInitialEmailBody@1046();
    VAR
      User@1010 : Record User;
      EmailGreeting@1011 : Text;
      EmailBody@1012 : Text;
      EmailClosing@1013 : Text;
    BEGIN
      User.GET(USERSECURITYID);
      EmailGreeting := EmailGreetingTxt + NewFirstName + ',' + NewLineForTextControl;
      EmailBody := EmailBodylTxt + NewLineForTextControl + NewLineForTextControl;
      EmailClosing := EmailClosingTxt + NewLineForTextControl + User."User Name" + NewLineForTextControl + COMPANYNAME;
      NewUserWelcomeEmail := EmailGreeting + EmailBody + EmailClosing;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DefineFullEmailBody@1047(InitialEmailMessage@1010 : Text;InviteRedeemUrl@1011 : Text) : Text;
    VAR
      EmailBody@1012 : Text;
    BEGIN
      EmailBody := ReplaceNewLinesWithHtmlLineBreak(InitialEmailMessage);
      EmailBody := EmailBody + LineBreakForEmail + LineBreakForEmail + EmailUseThisLinkToAcceptInvitationTxt + LineBreakForEmail;
      EmailBody := EmailBody + InviteRedeemUrl + LineBreakForEmail;
      EmailBody := EmailBody + LineBreakForEmail + EmailUseThisLinkWhenAddingClientTxt + GetWebClientUrl + LineBreakForEmail;
      EmailBody := EmailBody + EmailNotUsingAccountantPortalTxt + LineBreakForEmail;
      exit(EmailBody)
    END;

    LOCAL PROCEDURE NewLineForTextControl@1048() Newline : Text;
    BEGIN
      Newline[1] := 13;
      Newline[2] := 10;
    END;

    LOCAL PROCEDURE LineBreakForEmail@1050() : Text;
    BEGIN
      exit('</br>');
    END;

    LOCAL PROCEDURE ReplaceNewLinesWithHtmlLineBreak@1051(InputText@1010 : Text) : Text;
    VAR
      String@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      TextToReplace@1012 : Text;
    BEGIN
      String := InputText;
      TextToReplace[1] := 10;
      exit(String.Replace(TextToReplace,LineBreakForEmail));
    END;

    LOCAL PROCEDURE GetWebClientUrl@1052() : Text;
    VAR
      BaseUrlEndingPosition@1010 : Integer;
    BEGIN
      BaseUrlEndingPosition := STRPOS(GETURL(CLIENTTYPE::Web),'.com/') + 3;
      exit(COPYSTR(GETURL(CLIENTTYPE::Web),1,BaseUrlEndingPosition));
    END;

    [Integration]
    LOCAL PROCEDURE OnInvitationStart@20();
    BEGIN
      // This event is called the invitation process is started.
    END;

    [Integration]
    LOCAL PROCEDURE OnInvitationNoExternalAccountantLicenseFail@21();
    BEGIN
      // This event is called when the invitation process can not proceed due to a lack of external accountant licenses.
    END;

    [Integration]
    LOCAL PROCEDURE OnInvitationNoAADPermissionsFail@22();
    BEGIN
      // This event is called when the invitation process can not proceed due to a lack of user AAD permissions.
    END;

    [Integration]
    LOCAL PROCEDURE OnInvitationEnd@23(WasInvitationSuccessful@1001 : Boolean;Result@1002 : Text;Progress@1003 : Text);
    BEGIN
      // This event is called when the invitation process is finished.
    END;

    [Integration]
    LOCAL PROCEDURE OnInvitationNoUserTablePermissionsFail@24();
    BEGIN
      // This event is called when the invitation process can not proceed because session is not admin or user is not super in all companies.
    END;

    BEGIN
    END.
  }
}

