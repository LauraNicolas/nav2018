OBJECT Page 1877 VAT Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "VAT Setup Posting Groups"=rimd,
                TableData "VAT Assisted Setup Templates"=rimd,
                TableData "VAT Assisted Setup Bus. Grp."=rimd,
                TableData "Service Line"=rimd;
    CaptionML=ENU=VAT Setup;
    PageType=NavigatePage;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 AutoVATSetupIsAllowed := WizardIsAllowed;
                 if not AutoVATSetupIsAllowed then
                   Step := Step::Finish;

                 WizardNotification.ID := FORMAT(CREATEGUID);
                 EnableControls;
               END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::OK then
                         if WizardIsAllowed and (AssistedSetup.GetStatus(PAGE::"VAT Setup Wizard") = AssistedSetup.Status::"Not Completed") then
                           if not CONFIRM(NAVNotSetUpQst,false) then
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=BackActionEnabled;
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(true);
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=NextActionEnabled;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(false);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Enabled=FinishActionEnabled;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=BEGIN
                                 if AutoVATSetupIsAllowed then
                                   FinishAction
                                 else
                                   CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Name=Group96;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 98  ;1   ;Group     ;
                Name=Group98;
                Visible=TopBannerVisible AND FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 20  ;1   ;Group     ;
                Name=<MediaRepositoryDone>;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                Name=Welcome to VAT Setup;
                CaptionML=ENU=Welcome to VAT Setup;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 28  ;3   ;Group     ;
                Name=Group28;
                GroupType=Group;
                InstructionalTextML=ENU=This assisted setup guide helps you automate VAT calculations for sales and purchase documents. }

    { 27  ;3   ;Group     ;
                Name=Group27;
                GroupType=Group;
                InstructionalTextML=ENU=You will set up the VAT rates that apply to customers, vendors, and items in different markets, and then specify the accounts to post VAT to. If you sometimes use VAT rates that deviate from standard rates, there…s also an option to enter clauses that explain why to tax authorities. }

    { 21  ;2   ;Group     ;
                Name=Let's go!;
                CaptionML=ENU=Let's go!;
                GroupType=Group }

    { 22  ;3   ;Group     ;
                Name=Group22;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to get started. }

    { 2   ;1   ;Group     ;
                Name=Group2;
                Visible=VATBusPostGrpPartStepVisible;
                GroupType=Group }

    { 31  ;2   ;Group     ;
                Name=VAT Business Posting Groups;
                CaptionML=ENU=VAT Business Posting Groups;
                GroupType=Group;
                InstructionalTextML=ENU=VAT business posting groups specify where you do business, or the type of business you do. See the options from a VAT perspective, and choose all that apply. In the next steps, you'll specify the VAT types to use for customers, vendors, and items in those markets. }

    { 3   ;2   ;Part      ;
                Name=VAT Bus. Post. Grp Part;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID="VAT Bus. Post. Grp Part";
                PartType=Page }

    { 6   ;1   ;Group     ;
                Name=VAT Product Posting Setup;
                CaptionML=ENU=VAT Product Posting Setup;
                Visible=VATProdPostGrpPartStepVisible;
                GroupType=Group }

    { 8   ;2   ;Group     ;
                Name=VAT Rates for Items and Services;
                CaptionML=ENU=VAT Rates for Items and Services;
                Visible=VATProdRatesStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify types of products (items and services) that you buy or sell, and the VAT rates that apply. If the default VAT rates aren't correct, you can adjust them. You can also add lines if you use reduced VAT rates when buying or selling. }

    { 5   ;2   ;Group     ;
                Name=G/L Accounts for VAT Amounts;
                CaptionML=ENU=G/L Accounts for VAT Amounts;
                Visible=VATProdAccountStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Get a clear picture of your finances by assigning G/L accounts for sales, purchases, and reversed charges VAT amounts to VAT product posting groups. For example, this lets you compare the VAT amount figures you'll report to VAT authorities to the figures posted in your general ledger. }

    { 7   ;2   ;Group     ;
                Name=Optional: Clauses for Non-Standard VAT Rates;
                CaptionML=ENU=Optional: Clauses for Non-Standard VAT Rates;
                Visible=VATProdClausesStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Some tax authorities require explanations, and sometimes even references to regulatory statues, when non-standard VAT rates, such as reduced or zero, are used on invoices. You can enter the clauses, and they will be printed on sales documents that use non-standard VAT rates. }

    { 4   ;2   ;Part      ;
                Name=VATProdPostGrpPart;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID="VAT Product Posting Grp Part";
                PartType=Page }

    { 12  ;1   ;Group     ;
                Name=Assign VAT Setup to Customer, Vendor, and Item Templates;
                CaptionML=ENU=Assign VAT Setup to Customer, Vendor, and Item Templates;
                Visible=TemplateStepVisible;
                GroupType=Group }

    { 26  ;2   ;Group     ;
                Name=Default VAT Rates on Customer Templates;
                CaptionML=ENU=Default VAT Rates on Customer Templates;
                Visible=CustomerTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default VAT rates for customer templates. When assigned to customers, customer templates apply default settings for posting things like revenue, costs, receivables, payables, inventory, and VAT rates. }

    { 18  ;2   ;Group     ;
                Name=Group18;
                Visible=CustomerTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to do the same thing for vendor templates. }

    { 19  ;2   ;Group     ;
                Name=Default VAT Rates on Vendor Templates;
                CaptionML=ENU=Default VAT Rates on Vendor Templates;
                Visible=VendorTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default VAT rates for vendor templates. When assigned to vendors, vendor templates apply default settings for posting, including VAT rates. }

    { 29  ;2   ;Group     ;
                Name=Group29;
                Visible=VendorTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to repeat this for item templates. }

    { 16  ;2   ;Group     ;
                Name=Default VAT Rates on Item Templates;
                CaptionML=ENU=Default VAT Rates on Item Templates;
                Visible=ItemTemplateStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Specify default VAT rates for item templates. When assigned to items, item templates apply default settings for posting, including VAT rates. }

    { 9   ;2   ;Part      ;
                Name=VATAssistedSetupTemplate;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID="VAT Assisted Setup Template";
                PartType=Page }

    { 17  ;1   ;Group     ;
                Name=Group17;
                Visible=ManualVATStepVisible OR FinalStepVisible;
                GroupType=Group }

    { 33  ;2   ;Group     ;
                Name=Manual set up required;
                CaptionML=ENU=Manual set up required;
                Visible=ManualVATStepVisible;
                GroupType=Group }

    { 32  ;3   ;Group     ;
                Name=Group32;
                Visible=ManualVATStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Looks like you…ve already posted one or more transactions that include VAT. To avoid mistakes, you…ll have to manually set up VAT calculations. }

    { 24  ;3   ;Group     ;
                Name=Group24;
                Visible=ManualVATStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To do that now, choose a VAT posting setup. In the VAT Posting Setup window, add or edit the VAT business posting group, VAT product posting group, and other details as needed. }

    { 23  ;2   ;Group     ;
                Name=That's it!;
                CaptionML=ENU=That's it!;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=VAT is set up and ready to go. }

    { 30  ;2   ;Group     ;
                Name=Group30;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To apply the settings, choose Finish. }

    { 25  ;2   ;Group     ;
                Name=Group25;
                Visible=FinalStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=To review your VAT settings later, open the VAT Setup window. }

  }
  CODE
  {
    VAR
      AssistedSetup@1005 : Record "Assisted Setup";
      MediaRepositoryStandard@1040 : Record "Media Repository";
      MediaRepositoryDone@1041 : Record "Media Repository";
      WizardNotification@1021 : Notification;
      Step@1012 : 'Start,VATBusPostingGroup,VATProdPostingRates,VATProdPostingAccounts,VATProdPostingClauses,CustomerTemplates,VendorTemplates,ItemTemplates,Finish';
      TopBannerVisible@1042 : Boolean;
      ManualVATStepVisible@1022 : Boolean;
      FirstStepVisible@1000 : Boolean;
      VATBusPostGrpPartStepVisible@1003 : Boolean;
      VATProdPostGrpPartStepVisible@1006 : Boolean;
      VATProdClausesStepVisible@1011 : Boolean;
      VATProdRatesStepVisible@1008 : Boolean;
      VATProdAccountStepVisible@1007 : Boolean;
      CustomerTemplateStepVisible@1017 : Boolean;
      VendorTemplateStepVisible@1019 : Boolean;
      ItemTemplateStepVisible@1002 : Boolean;
      TemplateStepVisible@1020 : Boolean;
      FinalStepVisible@1015 : Boolean;
      FinishActionEnabled@1009 : Boolean;
      BackActionEnabled@1013 : Boolean;
      NextActionEnabled@1014 : Boolean;
      NAVNotSetUpQst@1004 : TextConst 'ENU=VAT has not been set up.\\Are you sure you want to exit?';
      NoBusPostingGroupErr@1018 : TextConst 'ENU=You must to have at least one VAT business posting group.';
      VATAssistedRatesMsg@1103 : TextConst 'ENU=You must select at least one item or service.';
      VATAssistedBusPostingGrpMsg@1102 : TextConst 'ENU=You must select at least one VAT business posting group.';
      AutoVATSetupIsAllowed@1023 : Boolean;
      InvalidVATBusGrpMsg@1001 : TextConst '@@@="%1 is code for vat bus group which is not valid anymore ";ENU=%1 is not valid VAT Business group.';
      InvaledVATProductMsg@1024 : TextConst '@@@="%1 is code for vat product group which is not valid anymore ";ENU=%1 is not valid VAT product group.';
      EmptyGLAccountsWarning@1010 : Boolean;

    LOCAL PROCEDURE EnableControls@2();
    BEGIN
      ResetControls;

      case Step of
        Step::Start:
          ShowStartStep;
        Step::VATBusPostingGroup:
          ShowVATBusPostingGroup;
        Step::VATProdPostingRates:
          ShowProdRatesGroup;
        Step::VATProdPostingAccounts:
          ShowProdAccountGroup;
        Step::VATProdPostingClauses:
          ShowProdClausesGroup;
        Step::CustomerTemplates:
          ShowCustomerTemplatesStep;
        Step::VendorTemplates:
          ShowVendorTemplatesStep;
        Step::ItemTemplates:
          ShowItemTemplatesStep;
        Step::Finish:
          if AutoVATSetupIsAllowed then
            ShowFinishStep
          else
            ShowManualStep;
      end;
    END;

    LOCAL PROCEDURE FinishAction@12();
    VAR
      VATAssistedSetupBusGrp@1003 : Record "VAT Assisted Setup Bus. Grp.";
      VATSetupPostingGroups@1001 : Record "VAT Setup Posting Groups";
    BEGIN
      if not AutoVATSetupIsAllowed then
        exit;
      ClearVATProdPostingGrp;
      ClearVATBusPostingGrp;
      ClearVATSetup;

      VATAssistedSetupBusGrp.SETRANGE(Selected,true);
      VATSetupPostingGroups.SETRANGE(Selected,true);

      if not VATAssistedSetupBusGrp.FINDSET then
        ERROR(NoBusPostingGroupErr);

      repeat
        AddVATBusPostingGrp(VATAssistedSetupBusGrp.Code,VATAssistedSetupBusGrp.Description);
        if VATSetupPostingGroups.FINDSET then
          repeat
            CreateVATPostingSetupLines(VATSetupPostingGroups,VATAssistedSetupBusGrp.Code);
          until VATSetupPostingGroups.NEXT = 0;
      until VATAssistedSetupBusGrp.NEXT = 0;

      CreatVATSetupWithoutBusPostingGrp;

      UpdateTemplates;

      AssistedSetup.SetStatus(PAGE::"VAT Setup Wizard",AssistedSetup.Status::Completed);
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      HideNotification;

      if Backwards then
        Step := Step - 1
      else
        if StepValidation then
          Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE ShowManualStep@17();
    BEGIN
      ManualVATStepVisible := true;
      BackActionEnabled := false;
      NextActionEnabled := false;
      FinishActionEnabled := true;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := true;
      FinishActionEnabled := false;
      BackActionEnabled := false;
    END;

    LOCAL PROCEDURE ShowVATBusPostingGroup@33();
    BEGIN
      VATBusPostGrpPartStepVisible := true;
    END;

    LOCAL PROCEDURE ShowProdClausesGroup@11();
    BEGIN
      VATProdPostGrpPartStepVisible := true;
      VATProdClausesStepVisible := true;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATClauses;
    END;

    LOCAL PROCEDURE ShowProdRatesGroup@18();
    BEGIN
      VATProdPostGrpPartStepVisible := true;
      VATProdRatesStepVisible := true;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATRates;
    END;

    LOCAL PROCEDURE ShowProdAccountGroup@19();
    BEGIN
      VATProdPostGrpPartStepVisible := true;
      VATProdAccountStepVisible := true;
      CurrPage.VATProdPostGrpPart.PAGE.ShowVATAccounts;
    END;

    LOCAL PROCEDURE ShowCustomerTemplatesStep@34();
    BEGIN
      CustomerTemplateStepVisible := true;
      TemplateStepVisible := true;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowCustomerTemplate;
      NextActionEnabled := true;
    END;

    LOCAL PROCEDURE ShowVendorTemplatesStep@8();
    BEGIN
      VendorTemplateStepVisible := true;
      TemplateStepVisible := true;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowVendorTemplate;
      NextActionEnabled := true;
    END;

    LOCAL PROCEDURE ShowItemTemplatesStep@10();
    BEGIN
      ItemTemplateStepVisible := true;
      TemplateStepVisible := true;
      CurrPage.VATAssistedSetupTemplate.PAGE.ShowItemTemplate;
      NextActionEnabled := true;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := true;
      NextActionEnabled := false;
      FinishActionEnabled := true;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      FinishActionEnabled := false;
      BackActionEnabled := true;
      NextActionEnabled := true;

      FirstStepVisible := false;
      VATProdPostGrpPartStepVisible := false;
      VATBusPostGrpPartStepVisible := false;
      VATProdClausesStepVisible := false;
      VATProdRatesStepVisible := false;
      VATProdAccountStepVisible := false;
      CustomerTemplateStepVisible := false;
      VendorTemplateStepVisible := false;
      ItemTemplateStepVisible := false;
      TemplateStepVisible := false;
      FinalStepVisible := false;
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      then
        TopBannerVisible := MediaRepositoryDone.Image.HASVALUE;
    END;

    LOCAL PROCEDURE ClearVATSetup@3();
    VAR
      VATClause@1002 : Record "VAT Clause";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      VATClause.DELETEALL;
      VATPostingSetup.DELETEALL;
    END;

    LOCAL PROCEDURE AddVATProdPostingGroups@5(GroupCode@1001 : Code[20];GroupDesc@1000 : Text[50]);
    VAR
      VATProductPostingGroup@1002 : Record "VAT Product Posting Group";
    BEGIN
      if VATProductPostingGroup.GET(GroupCode) then
        exit;
      VATProductPostingGroup.INIT;
      VATProductPostingGroup.VALIDATE(Code,GroupCode);
      VATProductPostingGroup.VALIDATE(Description,GroupDesc);
      VATProductPostingGroup.INSERT(true);
    END;

    LOCAL PROCEDURE AddVATBusPostingGrp@16(VATBusPostingCode@1000 : Code[20];VATBusPostingDesc@1001 : Text[50]);
    VAR
      VATBusinessPostingGroup@1002 : Record "VAT Business Posting Group";
    BEGIN
      if VATBusinessPostingGroup.GET(VATBusPostingCode) then
        exit;

      VATBusinessPostingGroup.VALIDATE(Code,VATBusPostingCode);
      VATBusinessPostingGroup.VALIDATE(Description,VATBusPostingDesc);
      VATBusinessPostingGroup.INSERT(true);
    END;

    LOCAL PROCEDURE AddVATClause@6(ClauseCode@1002 : Code[20];ClauseDescription@1003 : Text[250]);
    VAR
      VATClause@1001 : Record "VAT Clause";
    BEGIN
      if VATClause.GET(ClauseCode) then
        exit;

      VATClause.INIT;
      VATClause.VALIDATE(Code,ClauseCode);
      VATClause.VALIDATE(Description,ClauseDescription);
      VATClause.INSERT(true);
    END;

    LOCAL PROCEDURE AddVATPostingGroup@7(VATSetupPostingGroups@1000 : Record "VAT Setup Posting Groups";IsService@1003 : Boolean;VATBusPostingGrpCode@1004 : Code[20]);
    VAR
      VATPostingSetup@1002 : Record "VAT Posting Setup";
    BEGIN
      AddVATProdPostingGroups(VATSetupPostingGroups."VAT Prod. Posting Group",
        VATSetupPostingGroups."VAT Prod. Posting Grp Desc.");
      InitVATPostingSetup(VATPostingSetup,VATSetupPostingGroups,VATBusPostingGrpCode);
      VATPostingSetup.VALIDATE("EU Service",IsService);
      VATPostingSetup.VALIDATE("VAT Prod. Posting Group",VATSetupPostingGroups."VAT Prod. Posting Group");
      if VATSetupPostingGroups."VAT %" = 100 then
        VATPostingSetup.VALIDATE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Full VAT");
      VATPostingSetup.INSERT;
    END;

    LOCAL PROCEDURE InitVATPostingSetup@42(VAR VATPostingSetup@1000 : Record "VAT Posting Setup";VATSetupPostingGroups@1001 : Record "VAT Setup Posting Groups";VATBusPostingGrpCode@1002 : Code[20]);
    BEGIN
      VATPostingSetup.INIT;
      VATPostingSetup.TRANSFERFIELDS(VATSetupPostingGroups);
      VATPostingSetup.VALIDATE("VAT Bus. Posting Group",VATBusPostingGrpCode);
      if VATSetupPostingGroups."VAT Clause Desc" <> '' then
        VATPostingSetup."VAT Clause Code" := VATSetupPostingGroups."VAT Prod. Posting Group";
    END;

    LOCAL PROCEDURE CreateVATPostingSetupLines@9(VATSetupPostingGroups@1000 : Record "VAT Setup Posting Groups";VATBusPostingGrpCode@1001 : Code[20]);
    VAR
      IsService@1003 : Boolean;
    BEGIN
      if VATSetupPostingGroups."VAT Clause Desc" <> '' then
        AddVATClause(VATSetupPostingGroups."VAT Prod. Posting Group",VATSetupPostingGroups."VAT Clause Desc");

      IsService := VATSetupPostingGroups."Application Type" = VATSetupPostingGroups."Application Type"::Services;
      AddVATPostingGroup(VATSetupPostingGroups,IsService,VATBusPostingGrpCode);
    END;

    LOCAL PROCEDURE WizardIsAllowed@45() : Boolean;
    VAR
      VATEntry@1000 : Record "VAT Entry";
    BEGIN
      exit(VATEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE StepValidation@13() : Boolean;
    VAR
      VATAssistedSetupBusGrp@1000 : Record "VAT Assisted Setup Bus. Grp.";
      VATSetupPostingGroups@1001 : Record "VAT Setup Posting Groups";
      VATAssistedSetupTemplates@1002 : Record "VAT Assisted Setup Templates";
      ErrorMessage@1005 : Text;
      ValidationErrorMsg@1003 : Text;
    BEGIN
      case Step of
        Step::VATBusPostingGroup:
          if not VATAssistedSetupBusGrp.ValidateVATBusGrp then
            ErrorMessage := VATAssistedBusPostingGrpMsg;
        Step::VATProdPostingRates:
          if not VATSetupPostingGroups.ValidateVATRates then
            ErrorMessage := VATAssistedRatesMsg;
        Step::VATProdPostingAccounts:
          if not EmptyGLAccountsWarning then begin
            VATSetupPostingGroups.ValidateGLAccountsExist(ErrorMessage);
            EmptyGLAccountsWarning := true;
          end;
        Step::CustomerTemplates:
          if not VATAssistedSetupTemplates.ValidateCustomerTemplate(ValidationErrorMsg) then
            ErrorMessage := STRSUBSTNO(InvalidVATBusGrpMsg,ValidationErrorMsg);
        Step::VendorTemplates:
          if not VATAssistedSetupTemplates.ValidateVendorTemplate(ValidationErrorMsg) then
            ErrorMessage := STRSUBSTNO(InvalidVATBusGrpMsg,ValidationErrorMsg);
        Step::ItemTemplates:
          if not VATAssistedSetupTemplates.ValidateItemTemplate(ValidationErrorMsg) then
            ErrorMessage := STRSUBSTNO(InvaledVATProductMsg,ValidationErrorMsg);
      end;

      if ErrorMessage = '' then
        exit(true);

      TrigerNotification(ErrorMessage);
      exit(false);
    END;

    LOCAL PROCEDURE UpdateTemplates@4();
    VAR
      VATAssistedSetupTemplates@1000 : Record "VAT Assisted Setup Templates";
      Customer@1001 : Record Customer;
      Item@1002 : Record Item;
    BEGIN
      VATAssistedSetupTemplates.RESET;
      if not VATAssistedSetupTemplates.FINDSET then
        exit;

      repeat
        if
           (VATAssistedSetupTemplates."Table ID" = DATABASE::Customer) or
           (VATAssistedSetupTemplates."Table ID" = DATABASE::Vendor)
        then
          AddOrUpdateConfigTemplateLine(VATAssistedSetupTemplates.Code,Customer.FIELDNO("VAT Bus. Posting Group"),
            VATAssistedSetupTemplates."Default VAT Bus. Posting Grp",
            VATAssistedSetupTemplates."Table ID")
        else
          if VATAssistedSetupTemplates."Table ID" = DATABASE::Item then
            AddOrUpdateConfigTemplateLine(VATAssistedSetupTemplates.Code,Item.FIELDNO("VAT Prod. Posting Group"),
              VATAssistedSetupTemplates."Default VAT Prod. Posting Grp",
              VATAssistedSetupTemplates."Table ID");
      until VATAssistedSetupTemplates.NEXT = 0;
    END;

    LOCAL PROCEDURE AddOrUpdateConfigTemplateLine@14(TemplateCode@1001 : Code[10];FieldID@1004 : Integer;DefaultValue@1005 : Text[250];TableId@1006 : Integer);
    VAR
      ConfigTemplateLine@1000 : Record "Config. Template Line";
      ConfigTemplateManagement@1002 : Codeunit "Config. Template Management";
    BEGIN
      if ConfigTemplateLine.GetLine(ConfigTemplateLine,TemplateCode,FieldID) then begin
        if DefaultValue = '' then begin
          ConfigTemplateLine.DELETE;
          exit;
        end;
        ConfigTemplateLine."Default Value" := DefaultValue;
        ConfigTemplateLine.MODIFY;
      end else
        if DefaultValue <> '' then
          ConfigTemplateManagement.InsertConfigTemplateLine(TemplateCode,FieldID,DefaultValue,TableId);
    END;

    LOCAL PROCEDURE TrigerNotification@15(NotificationMsg@1000 : Text);
    BEGIN
      WizardNotification.RECALL;
      WizardNotification.MESSAGE(NotificationMsg);
      WizardNotification.SEND;
    END;

    LOCAL PROCEDURE CreatVATSetupWithoutBusPostingGrp@20();
    VAR
      VATAssistedSetupBusGrp@1000 : Record "VAT Assisted Setup Bus. Grp.";
      VATSetupPostingGroups@1001 : Record "VAT Setup Posting Groups";
    BEGIN
      if VATAssistedSetupBusGrp.GET('') then
        exit;

      VATSetupPostingGroups.SETRANGE(Selected,true);
      if VATSetupPostingGroups.FINDSET then
        repeat
          CreateVATPostingSetupLines(VATSetupPostingGroups,'');
        until VATSetupPostingGroups.NEXT = 0;
    END;

    LOCAL PROCEDURE HideNotification@21();
    BEGIN
      CurrPage.VATProdPostGrpPart.PAGE.HideNotification;
      CurrPage."VAT Bus. Post. Grp Part".PAGE.HideNotification;
      WizardNotification.MESSAGE := '';
      WizardNotification.RECALL;

      if Step::VATProdPostingAccounts <> Step then
        EmptyGLAccountsWarning := false;
    END;

    LOCAL PROCEDURE ClearVATProdPostingGrp@22();
    VAR
      Item@1000 : Record Item;
      ServiceLine@1001 : Record "Service Line";
      VATProductPostingGroup@1002 : Record "VAT Product Posting Group";
    BEGIN
      if not VATProductPostingGroup.FINDSET then
        exit;

      repeat
        Item.SETRANGE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
        ServiceLine.SETRANGE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
        if (not Item.FINDFIRST) and (not ServiceLine.FINDFIRST) then
          VATProductPostingGroup.DELETE;
      until VATProductPostingGroup.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearVATBusPostingGrp@23();
    VAR
      Customer@1000 : Record Customer;
      Vendor@1001 : Record Vendor;
      VATBusinessPostingGroup@1002 : Record "VAT Business Posting Group";
    BEGIN
      if not VATBusinessPostingGroup.FINDSET then
        exit;

      repeat
        Customer.SETRANGE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
        Vendor.SETRANGE("VAT Bus. Posting Group",VATBusinessPostingGroup.Code);
        if (not Vendor.FINDFIRST) and (not Customer.FINDFIRST) then
          VATBusinessPostingGroup.DELETE;
      until VATBusinessPostingGroup.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

