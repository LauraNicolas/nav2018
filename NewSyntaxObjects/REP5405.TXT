OBJECT Report 5405 Calc. Consumption
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calc. Consumption;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 4824;    ;DataItem;Production Order    ;
               DataItemTable="Production Order";
               DataItemTableView=SORTING(Status,"No.") WHERE(Status=CONST(Released));
               OnPreDataItem=BEGIN
                               ItemJnlLine.SETRANGE("Journal Template Name",ToTemplateName);
                               ItemJnlLine.SETRANGE("Journal Batch Name",ToBatchName);
                               if ItemJnlLine.FINDLAST then
                                 NextConsumpJnlLineNo := ItemJnlLine."Line No." + 10000
                               else
                                 NextConsumpJnlLineNo := 10000;

                               Window.OPEN(
                                 Text000 +
                                 Text001 +
                                 Text002 +
                                 Text003);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");
                                END;

               ReqFilterFields="No." }

    { 7771;1   ;DataItem;Prod. Order Component;
               DataItemTable="Prod. Order Component";
               OnPreDataItem=BEGIN
                               SETFILTER("Flushing Method",'<>%1&<>%2',"Flushing Method"::Backward,"Flushing Method"::"Pick + Backward");
                             END;

               OnAfterGetRecord=VAR
                                  NeededQty@1000 : Decimal;
                                BEGIN
                                  Window.UPDATE(2,"Item No.");

                                  CLEAR(ItemJnlLine);
                                  Item.GET("Item No.");
                                  ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

                                  NeededQty := GetNeededQty(CalcBasedOn,true);

                                  if NeededQty <> 0 then begin
                                    if LocationCode <> '' then
                                      CreateConsumpJnlLine(LocationCode,'',NeededQty)
                                    else
                                      CreateConsumpJnlLine("Location Code","Bin Code",NeededQty);
                                    LastItemJnlLine := ItemJnlLine;
                                  end;
                                END;

               ReqFilterFields="Item No.";
               DataItemLink=Status=FIELD(Status),"Prod. Order No."=FIELD("No.") }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   InitializeRequest(WORKDATE,CalcBasedOn::"Expected Output");
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the posting date that you want the program to use in the Consumption Journal window.;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=PostingDate }

      { 4   ;2   ;Field     ;
                  Name=Calculation Based on;
                  CaptionML=ENU=Calculation Based on;
                  ToolTipML=ENU=Specifies whether the calculation of the quantity to consume is based on the actual output or on the expected output (the quantity of finished goods that you expect to produce).;
                  OptionCaptionML=ENU=Actual Output,Expected Output;
                  ApplicationArea=#Manufacturing;
                  SourceExpr=CalcBasedOn }

      { 6   ;2   ;Field     ;
                  Name=Picking Location;
                  CaptionML=ENU=Picking Location;
                  ToolTipML=ENU=Specifies the location from where you want the program to post the items.;
                  ApplicationArea=#Location;
                  SourceExpr=LocationCode;
                  OnLookup=VAR
                             Location@1002 : Record Location;
                           BEGIN
                             if PAGE.RUNMODAL(0,Location) = ACTION::LookupOK then begin
                               Text := Location.Code;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Calculating consumption...\\';
      Text001@1001 : TextConst 'ENU=Prod. Order No.   #1##########\';
      Text002@1002 : TextConst 'ENU=Item No.          #2##########\';
      Text003@1003 : TextConst 'ENU=Quantity          #3##########';
      Item@1004 : Record Item;
      ProdOrderLine@1005 : Record "Prod. Order Line";
      ItemJnlLine@1006 : Record "Item Journal Line";
      LastItemJnlLine@1017 : Record "Item Journal Line";
      Window@1009 : Dialog;
      PostingDate@1010 : Date;
      CalcBasedOn@1011 : '"Actual Output","Expected Output"';
      LocationCode@1013 : Code[10];
      ToTemplateName@1014 : Code[10];
      ToBatchName@1015 : Code[10];
      NextConsumpJnlLineNo@1016 : Integer;

    PROCEDURE InitializeRequest@2(NewPostingDate@1001 : Date;NewCalcBasedOn@1000 : Option);
    BEGIN
      PostingDate := NewPostingDate;
      CalcBasedOn := NewCalcBasedOn;
    END;

    LOCAL PROCEDURE CreateConsumpJnlLine@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];QtyToPost@1002 : Decimal);
    VAR
      Location@1004 : Record Location;
      ItemTrackingMgt@1003 : Codeunit "Item Tracking Management";
    BEGIN
      Window.UPDATE(3,QtyToPost);

      if Location.GET(LocationCode) and Location."Require Pick" and Location."Require Shipment" then
        "Prod. Order Component".AdjustQtyToQtyPicked(QtyToPost);

      if (ItemJnlLine."Item No." = "Prod. Order Component"."Item No.") and
         (LocationCode = ItemJnlLine."Location Code") and
         (BinCode = ItemJnlLine."Bin Code")
      then begin
        if Item."Rounding Precision" > 0 then
          ItemJnlLine.VALIDATE(Quantity,ItemJnlLine.Quantity + ROUND(QtyToPost,Item."Rounding Precision",'>'))
        else
          ItemJnlLine.VALIDATE(Quantity,ItemJnlLine.Quantity + ROUND(QtyToPost,0.00001));
        ItemJnlLine.MODIFY;
      end else begin
        ItemJnlLine.INIT;
        ItemJnlLine."Journal Template Name" := ToTemplateName;
        ItemJnlLine."Journal Batch Name" := ToBatchName;
        ItemJnlLine.SetUpNewLine(LastItemJnlLine);
        ItemJnlLine."Line No." := NextConsumpJnlLineNo;

        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Consumption);
        ItemJnlLine.VALIDATE("Order Type",ItemJnlLine."Order Type"::Production);
        ItemJnlLine.VALIDATE("Order No.","Prod. Order Component"."Prod. Order No.");
        ItemJnlLine.VALIDATE("Source No.",ProdOrderLine."Item No.");
        ItemJnlLine.VALIDATE("Posting Date",PostingDate);
        ItemJnlLine.VALIDATE("Item No.","Prod. Order Component"."Item No.");
        ItemJnlLine.VALIDATE("Unit of Measure Code","Prod. Order Component"."Unit of Measure Code");
        ItemJnlLine.Description := "Prod. Order Component".Description;
        if Item."Rounding Precision" > 0 then
          ItemJnlLine.VALIDATE(Quantity,ROUND(QtyToPost,Item."Rounding Precision",'>'))
        else
          ItemJnlLine.VALIDATE(Quantity,ROUND(QtyToPost,0.00001));
        ItemJnlLine."Variant Code" := "Prod. Order Component"."Variant Code";
        ItemJnlLine.VALIDATE("Location Code",LocationCode);
        if BinCode <> '' then
          ItemJnlLine."Bin Code" := BinCode;
        ItemJnlLine.VALIDATE("Order Line No.","Prod. Order Component"."Prod. Order Line No.");
        ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Prod. Order Component"."Line No.");

        ItemJnlLine.INSERT;
        if Item."Item Tracking Code" <> '' then
          ItemTrackingMgt.CopyItemTracking("Prod. Order Component".RowID1,ItemJnlLine.RowID1,false);
      end;

      NextConsumpJnlLineNo := NextConsumpJnlLineNo + 10000;
    END;

    PROCEDURE SetTemplateAndBatchName@1(TemplateName@1000 : Code[10];BatchName@1001 : Code[10]);
    BEGIN
      ToTemplateName := TemplateName;
      ToBatchName := BatchName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

