OBJECT Codeunit 378 Transfer Extended Text
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There is not enough space to insert extended text lines.';
      GLAcc@1001 : Record "G/L Account";
      Item@1002 : Record Item;
      Res@1003 : Record Resource;
      TmpExtTextLine@1004 : TEMPORARY Record "Extended Text Line";
      NextLineNo@1005 : Integer;
      LineSpacing@1006 : Integer;
      MakeUpdateRequired@1007 : Boolean;
      AutoText@1008 : Boolean;

    [External]
    PROCEDURE SalesCheckIfAnyExtText@1(VAR SalesLine@1000 : Record "Sales Line";Unconditionally@1001 : Boolean) : Boolean;
    VAR
      SalesHeader@1002 : Record "Sales Header";
      ExtTextHeader@1003 : Record "Extended Text Header";
    BEGIN
      MakeUpdateRequired := false;
      if IsDeleteAttachedLines(SalesLine."Line No.",SalesLine."No.",SalesLine."Attached to Line No.") then
        MakeUpdateRequired := DeleteSalesLines(SalesLine);

      AutoText := false;

      if Unconditionally then
        AutoText := true
      else
        case SalesLine.Type of
          SalesLine.Type::" ":
            AutoText := true;
          SalesLine.Type::"G/L Account":
            begin
              if GLAcc.GET(SalesLine."No.") then
                AutoText := GLAcc."Automatic Ext. Texts";
            end;
          SalesLine.Type::Item:
            begin
              if Item.GET(SalesLine."No.") then
                AutoText := Item."Automatic Ext. Texts";
            end;
          SalesLine.Type::Resource:
            begin
              if Res.GET(SalesLine."No.") then
                AutoText := Res."Automatic Ext. Texts";
            end;
        end;

      if AutoText then begin
        SalesLine.TESTFIELD("Document No.");
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
        ExtTextHeader.SETRANGE("Table Name",SalesLine.Type);
        ExtTextHeader.SETRANGE("No.",SalesLine."No.");
        case SalesLine."Document Type" of
          SalesLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Sales Quote",true);
          SalesLine."Document Type"::"Blanket Order":
            ExtTextHeader.SETRANGE("Sales Blanket Order",true);
          SalesLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Sales Order",true);
          SalesLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Sales Invoice",true);
          SalesLine."Document Type"::"Return Order":
            ExtTextHeader.SETRANGE("Sales Return Order",true);
          SalesLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Sales Credit Memo",true);
        end;
        exit(ReadLines(ExtTextHeader,SalesHeader."Document Date",SalesHeader."Language Code"));
      end;
    END;

    [External]
    PROCEDURE ReminderCheckIfAnyExtText@14(VAR ReminderLine@1000 : Record "Reminder Line";Unconditionally@1001 : Boolean) : Boolean;
    VAR
      ReminderHeader@1002 : Record "Reminder Header";
      ExtTextHeader@1003 : Record "Extended Text Header";
    BEGIN
      MakeUpdateRequired := false;
      if IsDeleteAttachedLines(ReminderLine."Line No.",ReminderLine."No.",ReminderLine."Attached to Line No.") then
        MakeUpdateRequired := DeleteReminderLines(ReminderLine);

      if Unconditionally then
        AutoText := true
      else
        case ReminderLine.Type of
          ReminderLine.Type::" ":
            AutoText := true;
          ReminderLine.Type::"G/L Account":
            if GLAcc.GET(ReminderLine."No.") then
              AutoText := GLAcc."Automatic Ext. Texts";
        end;

      if AutoText then begin
        ReminderLine.TESTFIELD("Reminder No.");
        ReminderHeader.GET(ReminderLine."Reminder No.");
        ExtTextHeader.SETRANGE("Table Name",ReminderLine.Type);
        ExtTextHeader.SETRANGE("No.",ReminderLine."No.");
        ExtTextHeader.SETRANGE(Reminder,true);
        exit(ReadLines(ExtTextHeader,ReminderHeader."Document Date",ReminderHeader."Language Code"));
      end;
    END;

    [External]
    PROCEDURE FinChrgMemoCheckIfAnyExtText@15(VAR FinChrgMemoLine@1000 : Record "Finance Charge Memo Line";Unconditionally@1001 : Boolean) : Boolean;
    VAR
      FinChrgMemoHeader@1002 : Record "Finance Charge Memo Header";
      ExtTextHeader@1003 : Record "Extended Text Header";
    BEGIN
      MakeUpdateRequired := false;
      if IsDeleteAttachedLines(FinChrgMemoLine."Line No.",FinChrgMemoLine."No.",FinChrgMemoLine."Attached to Line No.") then
        MakeUpdateRequired := DeleteFinChrgMemoLines(FinChrgMemoLine);

      if Unconditionally then
        AutoText := true
      else
        case FinChrgMemoLine.Type of
          FinChrgMemoLine.Type::" ":
            AutoText := true;
          FinChrgMemoLine.Type::"G/L Account":
            if GLAcc.GET(FinChrgMemoLine."No.") then
              AutoText := GLAcc."Automatic Ext. Texts";
        end;

      if AutoText then begin
        FinChrgMemoLine.TESTFIELD("Finance Charge Memo No.");
        FinChrgMemoHeader.GET(FinChrgMemoLine."Finance Charge Memo No.");
        ExtTextHeader.SETRANGE("Table Name",FinChrgMemoLine.Type);
        ExtTextHeader.SETRANGE("No.",FinChrgMemoLine."No.");
        ExtTextHeader.SETRANGE("Finance Charge Memo",true);
        exit(ReadLines(ExtTextHeader,FinChrgMemoHeader."Document Date",FinChrgMemoHeader."Language Code"));
      end;
    END;

    [External]
    PROCEDURE PurchCheckIfAnyExtText@7(VAR PurchLine@1000 : Record "Purchase Line";Unconditionally@1001 : Boolean) : Boolean;
    VAR
      PurchHeader@1002 : Record "Purchase Header";
      ExtTextHeader@1003 : Record "Extended Text Header";
    BEGIN
      MakeUpdateRequired := false;
      if IsDeleteAttachedLines(PurchLine."Line No.",PurchLine."No.",PurchLine."Attached to Line No.") then
        MakeUpdateRequired := DeletePurchLines(PurchLine);

      AutoText := false;

      if Unconditionally then
        AutoText := true
      else
        case PurchLine.Type of
          PurchLine.Type::" ":
            AutoText := true;
          PurchLine.Type::"G/L Account":
            begin
              if GLAcc.GET(PurchLine."No.") then
                AutoText := GLAcc."Automatic Ext. Texts";
            end;
          PurchLine.Type::Item:
            begin
              if Item.GET(PurchLine."No.") then
                AutoText := Item."Automatic Ext. Texts";
            end;
        end;

      if AutoText then begin
        PurchLine.TESTFIELD("Document No.");
        PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
        ExtTextHeader.SETRANGE("Table Name",PurchLine.Type);
        ExtTextHeader.SETRANGE("No.",PurchLine."No.");
        case PurchLine."Document Type" of
          PurchLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Purchase Quote",true);
          PurchLine."Document Type"::"Blanket Order":
            ExtTextHeader.SETRANGE("Purchase Blanket Order",true);
          PurchLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Purchase Order",true);
          PurchLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Purchase Invoice",true);
          PurchLine."Document Type"::"Return Order":
            ExtTextHeader.SETRANGE("Purchase Return Order",true);
          PurchLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Purchase Credit Memo",true);
        end;
        exit(ReadLines(ExtTextHeader,PurchHeader."Document Date",PurchHeader."Language Code"));
      end;
    END;

    [External]
    PROCEDURE PrepmtGetAnyExtText@8(GLAccNo@1001 : Code[20];TabNo@1000 : Integer;DocumentDate@1006 : Date;LanguageCode@1003 : Code[10];VAR ExtTextLine@1004 : TEMPORARY Record "Extended Text Line");
    VAR
      GLAcc@1002 : Record "G/L Account";
      ExtTextHeader@1005 : Record "Extended Text Header";
    BEGIN
      ExtTextLine.DELETEALL;

      GLAcc.GET(GLAccNo);
      if not GLAcc."Automatic Ext. Texts" then
        exit;

      ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
      ExtTextHeader.SETRANGE("No.",GLAccNo);
      case TabNo of
        DATABASE::"Sales Invoice Line":
          ExtTextHeader.SETRANGE("Prepmt. Sales Invoice",true);
        DATABASE::"Sales Cr.Memo Line":
          ExtTextHeader.SETRANGE("Prepmt. Sales Credit Memo",true);
        DATABASE::"Purch. Inv. Line":
          ExtTextHeader.SETRANGE("Prepmt. Purchase Invoice",true);
        DATABASE::"Purch. Cr. Memo Line":
          ExtTextHeader.SETRANGE("Prepmt. Purchase Credit Memo",true);
      end;
      if ReadLines(ExtTextHeader,DocumentDate,LanguageCode) then begin
        TmpExtTextLine.FIND('-');
        repeat
          ExtTextLine := TmpExtTextLine;
          ExtTextLine.INSERT;
        until TmpExtTextLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE InsertSalesExtText@2(VAR SalesLine@1000 : Record "Sales Line");
    VAR
      ToSalesLine@1001 : Record "Sales Line";
    BEGIN
      ToSalesLine.RESET;
      ToSalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      ToSalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      ToSalesLine := SalesLine;
      if ToSalesLine.FIND('>') then begin
        LineSpacing :=
          (ToSalesLine."Line No." - SalesLine."Line No.") div
          (1 + TmpExtTextLine.COUNT);
        if LineSpacing = 0 then
          ERROR(Text000);
      end else
        LineSpacing := 10000;

      NextLineNo := SalesLine."Line No." + LineSpacing;

      TmpExtTextLine.RESET;
      if TmpExtTextLine.FIND('-') then begin
        repeat
          ToSalesLine.INIT;
          ToSalesLine."Document Type" := SalesLine."Document Type";
          ToSalesLine."Document No." := SalesLine."Document No.";
          ToSalesLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToSalesLine.Description := TmpExtTextLine.Text;
          ToSalesLine."Attached to Line No." := SalesLine."Line No.";
          ToSalesLine.INSERT;
        until TmpExtTextLine.NEXT = 0;
        MakeUpdateRequired := true;
      end;
      TmpExtTextLine.DELETEALL;
    END;

    [External]
    PROCEDURE InsertReminderExtText@13(VAR ReminderLine@1000 : Record "Reminder Line");
    VAR
      ToReminderLine@1001 : Record "Reminder Line";
    BEGIN
      COMMIT;
      ToReminderLine.RESET;
      ToReminderLine.SETRANGE("Reminder No.",ReminderLine."Reminder No.");
      ToReminderLine := ReminderLine;
      if ToReminderLine.FIND('>') then begin
        LineSpacing :=
          (ToReminderLine."Line No." - ReminderLine."Line No.") div
          (1 + TmpExtTextLine.COUNT);
        if LineSpacing = 0 then
          ERROR(Text000);
      end else
        LineSpacing := 10000;

      NextLineNo := ReminderLine."Line No." + LineSpacing;

      TmpExtTextLine.RESET;
      if TmpExtTextLine.FIND('-') then begin
        repeat
          ToReminderLine.INIT;
          ToReminderLine."Reminder No." := ReminderLine."Reminder No.";
          ToReminderLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToReminderLine.Description := TmpExtTextLine.Text;
          ToReminderLine."Attached to Line No." := ReminderLine."Line No.";
          ToReminderLine."Line Type" := ReminderLine."Line Type";
          ToReminderLine.INSERT;
        until TmpExtTextLine.NEXT = 0;
        MakeUpdateRequired := true;
      end;
      TmpExtTextLine.DELETEALL;
    END;

    [External]
    PROCEDURE InsertFinChrgMemoExtText@16(VAR FinChrgMemoLine@1000 : Record "Finance Charge Memo Line");
    VAR
      ToFinChrgMemoLine@1001 : Record "Finance Charge Memo Line";
    BEGIN
      COMMIT;
      ToFinChrgMemoLine.RESET;
      ToFinChrgMemoLine.SETRANGE("Finance Charge Memo No.",FinChrgMemoLine."Finance Charge Memo No.");
      ToFinChrgMemoLine := FinChrgMemoLine;
      if ToFinChrgMemoLine.FIND('>') then begin
        LineSpacing :=
          (ToFinChrgMemoLine."Line No." - FinChrgMemoLine."Line No.") div
          (1 + TmpExtTextLine.COUNT);
        if LineSpacing = 0 then
          ERROR(Text000);
      end else
        LineSpacing := 10000;

      NextLineNo := FinChrgMemoLine."Line No." + LineSpacing;

      TmpExtTextLine.RESET;
      if TmpExtTextLine.FIND('-') then begin
        repeat
          ToFinChrgMemoLine.INIT;
          ToFinChrgMemoLine."Finance Charge Memo No." := FinChrgMemoLine."Finance Charge Memo No.";
          ToFinChrgMemoLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToFinChrgMemoLine.Description := TmpExtTextLine.Text;
          ToFinChrgMemoLine."Attached to Line No." := FinChrgMemoLine."Line No.";
          ToFinChrgMemoLine.INSERT;
        until TmpExtTextLine.NEXT = 0;
        MakeUpdateRequired := true;
      end;
      TmpExtTextLine.DELETEALL;
    END;

    [External]
    PROCEDURE InsertPurchExtText@3(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      ToPurchLine@1001 : Record "Purchase Line";
    BEGIN
      COMMIT;
      ToPurchLine.RESET;
      ToPurchLine.SETRANGE("Document Type",PurchLine."Document Type");
      ToPurchLine.SETRANGE("Document No.",PurchLine."Document No.");
      ToPurchLine := PurchLine;
      if ToPurchLine.FIND('>') then begin
        LineSpacing :=
          (ToPurchLine."Line No." - PurchLine."Line No.") div
          (1 + TmpExtTextLine.COUNT);
        if LineSpacing = 0 then
          ERROR(Text000);
      end else
        LineSpacing := 10000;

      NextLineNo := PurchLine."Line No." + LineSpacing;

      TmpExtTextLine.RESET;
      if TmpExtTextLine.FIND('-') then begin
        repeat
          ToPurchLine.INIT;
          ToPurchLine."Document Type" := PurchLine."Document Type";
          ToPurchLine."Document No." := PurchLine."Document No.";
          ToPurchLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToPurchLine.Description := TmpExtTextLine.Text;
          ToPurchLine."Attached to Line No." := PurchLine."Line No.";
          ToPurchLine.INSERT;
        until TmpExtTextLine.NEXT = 0;
        MakeUpdateRequired := true;
      end;
      TmpExtTextLine.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteSalesLines@4(VAR SalesLine@1000 : Record "Sales Line") : Boolean;
    VAR
      SalesLine2@1001 : Record "Sales Line";
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine2.SETRANGE("Attached to Line No.",SalesLine."Line No.");
      SalesLine2 := SalesLine;
      if SalesLine2.FIND('>') then begin
        repeat
          SalesLine2.DELETE(true);
        until SalesLine2.NEXT = 0;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE DeleteReminderLines@12(VAR ReminderLine@1000 : Record "Reminder Line") : Boolean;
    VAR
      ReminderLine2@1001 : Record "Reminder Line";
    BEGIN
      ReminderLine2.SETRANGE("Reminder No.",ReminderLine."Reminder No.");
      ReminderLine2.SETRANGE("Attached to Line No.",ReminderLine."Line No.");
      ReminderLine2 := ReminderLine;
      if ReminderLine2.FIND('>') then begin
        repeat
          ReminderLine2.DELETE;
        until ReminderLine2.NEXT = 0;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE DeleteFinChrgMemoLines@17(VAR FinChrgMemoLine@1000 : Record "Finance Charge Memo Line") : Boolean;
    VAR
      FinChrgMemoLine2@1001 : Record "Finance Charge Memo Line";
    BEGIN
      FinChrgMemoLine2.SETRANGE("Finance Charge Memo No.",FinChrgMemoLine."Finance Charge Memo No.");
      FinChrgMemoLine2.SETRANGE("Attached to Line No.",FinChrgMemoLine."Line No.");
      FinChrgMemoLine2 := FinChrgMemoLine;
      if FinChrgMemoLine2.FIND('>') then begin
        repeat
          FinChrgMemoLine2.DELETE;
        until FinChrgMemoLine2.NEXT = 0;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE DeletePurchLines@5(VAR PurchLine@1000 : Record "Purchase Line") : Boolean;
    VAR
      PurchLine2@1001 : Record "Purchase Line";
    BEGIN
      PurchLine2.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLine2.SETRANGE("Attached to Line No.",PurchLine."Line No.");
      PurchLine2 := PurchLine;
      if PurchLine2.FIND('>') then begin
        repeat
          PurchLine2.DELETE(true);
        until PurchLine2.NEXT = 0;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE MakeUpdate@6() : Boolean;
    BEGIN
      exit(MakeUpdateRequired);
    END;

    LOCAL PROCEDURE ReadLines@10(VAR ExtTextHeader@1000 : Record "Extended Text Header";DocDate@1001 : Date;LanguageCode@1002 : Code[10]) Result : Boolean;
    VAR
      ExtTextLine@1003 : Record "Extended Text Line";
    BEGIN
      ExtTextHeader.SETCURRENTKEY(
        "Table Name","No.","Language Code","All Language Codes","Starting Date","Ending Date");
      ExtTextHeader.SETRANGE("Starting Date",0D,DocDate);
      ExtTextHeader.SETFILTER("Ending Date",'%1..|%2',DocDate,0D);
      if LanguageCode = '' then begin
        ExtTextHeader.SETRANGE("Language Code",'');
        if not ExtTextHeader.FINDSET then
          exit;
      end else begin
        ExtTextHeader.SETRANGE("Language Code",LanguageCode);
        if not ExtTextHeader.FINDSET then begin
          ExtTextHeader.SETRANGE("All Language Codes",true);
          ExtTextHeader.SETRANGE("Language Code",'');
          if not ExtTextHeader.FINDSET then
            exit;
        end;
      end;
      TmpExtTextLine.DELETEALL;
      repeat
        ExtTextLine.SETRANGE("Table Name",ExtTextHeader."Table Name");
        ExtTextLine.SETRANGE("No.",ExtTextHeader."No.");
        ExtTextLine.SETRANGE("Language Code",ExtTextHeader."Language Code");
        ExtTextLine.SETRANGE("Text No.",ExtTextHeader."Text No.");
        if ExtTextLine.FINDSET then begin
          repeat
            TmpExtTextLine := ExtTextLine;
            TmpExtTextLine.INSERT;
          until ExtTextLine.NEXT = 0;
          Result := true;
        end;
      until ExtTextHeader.NEXT = 0;
    END;

    [External]
    PROCEDURE ServCheckIfAnyExtText@9(VAR ServiceLine@1000 : Record "Service Line";Unconditionally@1001 : Boolean) : Boolean;
    VAR
      ServHeader@1002 : Record "Service Header";
      ExtTextHeader@1003 : Record "Extended Text Header";
      ServCost@1004 : Record "Service Cost";
    BEGIN
      MakeUpdateRequired := false;
      if IsDeleteAttachedLines(ServiceLine."Line No.",ServiceLine."No.",ServiceLine."Attached to Line No.") then
        MakeUpdateRequired := DeleteServiceLines(ServiceLine);

      AutoText := false;
      if Unconditionally then
        AutoText := true
      else
        case ServiceLine.Type of
          ServiceLine.Type::" ":
            AutoText := true;
          ServiceLine.Type::Cost:
            begin
              if ServCost.GET(ServiceLine."No.") then
                if GLAcc.GET(ServCost."Account No.") then
                  AutoText := GLAcc."Automatic Ext. Texts";
            end;
          ServiceLine.Type::Item:
            begin
              if Item.GET(ServiceLine."No.") then
                AutoText := Item."Automatic Ext. Texts";
            end;
          ServiceLine.Type::Resource:
            begin
              if Res.GET(ServiceLine."No.") then
                AutoText := Res."Automatic Ext. Texts";
            end;
          ServiceLine.Type::"G/L Account":
            begin
              if GLAcc.GET(ServiceLine."No.") then
                AutoText := GLAcc."Automatic Ext. Texts";
            end;
        end;
      if AutoText then begin
        case ServiceLine.Type of
          ServiceLine.Type::" ":
            begin
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"Standard Text");
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            end;
          ServiceLine.Type::Item:
            begin
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            end;
          ServiceLine.Type::Resource:
            begin
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Resource);
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            end;
          ServiceLine.Type::Cost:
            begin
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
              ServCost.GET(ServiceLine."No.");
              ExtTextHeader.SETRANGE("No.",ServCost."Account No.");
            end;
          ServiceLine.Type::"G/L Account":
            begin
              ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
              ExtTextHeader.SETRANGE("No.",ServiceLine."No.");
            end;
        end;

        case ServiceLine."Document Type" of
          ServiceLine."Document Type"::Quote:
            ExtTextHeader.SETRANGE("Service Quote",true);
          ServiceLine."Document Type"::Order:
            ExtTextHeader.SETRANGE("Service Order",true);
          ServiceLine."Document Type"::Invoice:
            ExtTextHeader.SETRANGE("Service Invoice",true);
          ServiceLine."Document Type"::"Credit Memo":
            ExtTextHeader.SETRANGE("Service Credit Memo",true);
        end;

        ServHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
        exit(ReadLines(ExtTextHeader,ServHeader."Order Date",ServHeader."Language Code"));
      end;
    END;

    LOCAL PROCEDURE DeleteServiceLines@11(VAR ServiceLine@1000 : Record "Service Line") : Boolean;
    VAR
      ServiceLine2@1001 : Record "Service Line";
    BEGIN
      ServiceLine2.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine2.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine2.SETRANGE("Attached to Line No.",ServiceLine."Line No.");
      ServiceLine2 := ServiceLine;
      if ServiceLine2.FIND('>') then begin
        repeat
          ServiceLine2.DELETE;
        until ServiceLine2.NEXT = 0;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE InsertServExtText@18(VAR ServiceLine@1000 : Record "Service Line");
    VAR
      ToServiceLine@1001 : Record "Service Line";
    BEGIN
      COMMIT;
      ToServiceLine.RESET;
      ToServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ToServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ToServiceLine := ServiceLine;
      if ToServiceLine.FIND('>') then begin
        LineSpacing :=
          (ToServiceLine."Line No." - ServiceLine."Line No.") div
          (1 + TmpExtTextLine.COUNT);
        if LineSpacing = 0 then
          ERROR(Text000);
      end else
        LineSpacing := 10000;

      NextLineNo := ServiceLine."Line No." + LineSpacing;

      TmpExtTextLine.RESET;
      if TmpExtTextLine.FIND('-') then begin
        repeat
          ToServiceLine.INIT;
          ToServiceLine."Document Type" := ServiceLine."Document Type";
          ToServiceLine."Document No." := ServiceLine."Document No.";
          ToServiceLine."Service Item Line No." := ServiceLine."Service Item Line No.";
          ToServiceLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + LineSpacing;
          ToServiceLine.Description := TmpExtTextLine.Text;
          ToServiceLine."Attached to Line No." := ServiceLine."Line No.";
          ToServiceLine."Service Item No." := ServiceLine."Service Item No.";
          ToServiceLine.INSERT(true);
        until TmpExtTextLine.NEXT = 0;
        MakeUpdateRequired := true;
      end;
      TmpExtTextLine.DELETEALL;
    END;

    LOCAL PROCEDURE IsDeleteAttachedLines@19(LineNo@1000 : Integer;No@1002 : Code[20];AttachedToLineNo@1001 : Integer) : Boolean;
    BEGIN
      exit((LineNo <> 0) and (AttachedToLineNo = 0) and (No <> ''));
    END;

    BEGIN
    END.
  }
}

