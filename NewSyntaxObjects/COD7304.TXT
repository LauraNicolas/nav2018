OBJECT Codeunit 7304 Whse. Jnl.-Register Batch
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Warehouse Journal Line";
    Permissions=TableData "Warehouse Journal Batch"=imd,
                TableData "Warehouse Entry"=imd,
                TableData "Warehouse Register"=imd;
    OnRun=BEGIN
            WhseJnlLine.COPY(Rec);
            Code;
            Rec := WhseJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters';
      Text001@1001 : TextConst 'ENU=Journal Batch Name    #1##########\\';
      Text002@1002 : TextConst 'ENU=Checking lines        #2######\';
      Text003@1005 : TextConst 'ENU=Registering lines     #3###### @4@@@@@@@@@@@@@';
      Text004@1006 : TextConst 'ENU=A maximum of %1 registering number series can be used in each journal.';
      Text007@1009 : TextConst '@@@="One or more reservation entries exist for the item with Item No. = 1000, Location Code = BLUE, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      WhseJnlTemplate@1010 : Record "Warehouse Journal Template";
      WhseJnlBatch@1011 : Record "Warehouse Journal Batch";
      WhseJnlLine@1012 : Record "Warehouse Journal Line";
      WhseJnlLine2@1013 : Record "Warehouse Journal Line";
      WhseJnlLine3@1014 : Record "Warehouse Journal Line";
      WhseEntry@1015 : Record "Warehouse Entry";
      WhseReg@1016 : Record "Warehouse Register";
      TempBinContentBuffer@1007 : TEMPORARY Record "Bin Content Buffer";
      NoSeries@1019 : TEMPORARY Record "No. Series";
      NoSeriesMgt@1023 : Codeunit NoSeriesManagement;
      NoSeriesMgt2@1024 : ARRAY [10] OF Codeunit NoSeriesManagement;
      WMSMgt@1046 : Codeunit "WMS Management";
      ItemJnlPostLine@1008 : Codeunit "Item Jnl.-Post Line";
      Window@1027 : Dialog;
      WhseRegNo@1028 : Integer;
      StartLineNo@1029 : Integer;
      NoOfRecords@1034 : Integer;
      LineCount@1035 : Integer;
      LastDocNo@1036 : Code[20];
      LastDocNo2@1037 : Code[20];
      LastRegisteredDocNo@1038 : Code[20];
      NoOfRegisteringNoSeries@1039 : Integer;
      RegisteringNoSeriesNo@1040 : Integer;
      Text005@1003 : TextConst 'ENU=Item tracking lines defined for the source line must account for the same quantity as you have entered.';
      Text006@1004 : TextConst 'ENU=Item tracking lines do not match the bin content.';
      PhysInvtCount@1018 : Boolean;

    LOCAL PROCEDURE Code@3();
    VAR
      TempHandlingSpecification@1000 : TEMPORARY Record "Tracking Specification";
      TempWhseJnlLine2@1001 : TEMPORARY Record "Warehouse Journal Line";
      ItemJnlLine@1006 : Record "Item Journal Line";
      ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
      WhseJnlRegisterLine@1005 : Codeunit "Whse. Jnl.-Register Line";
      PhysInvtCountMgt@1007 : Codeunit "Phys. Invt. Count.-Management";
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      with WhseJnlLine do begin
        LOCKTABLE;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        SETRANGE("Location Code","Location Code");
        WhseJnlTemplate.GET("Journal Template Name");
        WhseJnlBatch.GET("Journal Template Name","Journal Batch Name","Location Code");
        if STRLEN(INCSTR(WhseJnlBatch.Name)) > MAXSTRLEN(WhseJnlBatch.Name) then
          WhseJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(
              Text000,
              MAXSTRLEN(WhseJnlBatch.Name)));

        if not FIND('=><') then begin
          "Line No." := 0;
          COMMIT;
          exit;
        end;

        Window.OPEN(
          Text001 +
          Text002 +
          Text003);

        Window.UPDATE(1,"Journal Batch Name");
        CheckItemAvailability(WhseJnlLine);

        // Check Lines
        LineCount := 0;
        StartLineNo := "Line No.";
        ItemTrackingMgt.InitCollectItemTrkgInformation;
        repeat
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          WMSMgt.CheckWhseJnlLine(WhseJnlLine,4,"Qty. (Absolute, Base)",false);
          if "Entry Type" in ["Entry Type"::"Positive Adjmt.","Entry Type"::Movement] then
            UpdateTempBinContentBuffer(WhseJnlLine,"To Bin Code",true);
          if "Entry Type" in ["Entry Type"::"Negative Adjmt.","Entry Type"::Movement] then
            UpdateTempBinContentBuffer(WhseJnlLine,"From Bin Code",false);

          ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,false);
          if WhseSNRequired or WhseLNRequired then begin
            if WhseSNRequired then
              TESTFIELD("Qty. per Unit of Measure",1);
            if WhseJnlTemplate.Type <> WhseJnlTemplate.Type::"Physical Inventory" then
              CreateTrackingSpecification(WhseJnlLine,TempHandlingSpecification)
            else begin
              if WhseSNRequired then
                TESTFIELD("Serial No.");
              if WhseLNRequired then
                TESTFIELD("Lot No.");
            end;
          end;
          ItemTrackingMgt.CollectItemTrkgInfWhseJnlLine(WhseJnlLine);
          if NEXT = 0 then
            FIND('-');
        until "Line No." = StartLineNo;
        ItemTrackingMgt.CheckItemTrkgInfBeforePost;
        CheckBin;
        NoOfRecords := LineCount;

        // Find next register no.
        WhseEntry.LOCKTABLE;
        if WhseEntry.FINDLAST then;
        WhseReg.LOCKTABLE;
        if WhseReg.FINDLAST then
          WhseRegNo := WhseReg."No." + 1
        else
          WhseRegNo := 1;

        PhysInvtCount := false;

        // Register lines
        LineCount := 0;
        LastDocNo := '';
        LastDocNo2 := '';
        LastRegisteredDocNo := '';
        FIND('-');
        repeat
          if not EmptyLine and
             (WhseJnlBatch."No. Series" <> '') and
             ("Whse. Document No." <> LastDocNo2)
          then
            TESTFIELD("Whse. Document No.",
              NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series","Registering Date",false));
          if not EmptyLine then
            LastDocNo2 := "Whse. Document No.";
          if "Registering No. Series" = '' then
            "Registering No. Series" := WhseJnlBatch."No. Series"
          else
            if not EmptyLine then
              if "Whse. Document No." = LastDocNo then
                "Whse. Document No." := LastRegisteredDocNo
              else begin
                if not NoSeries.GET("Registering No. Series") then begin
                  NoOfRegisteringNoSeries := NoOfRegisteringNoSeries + 1;
                  if NoOfRegisteringNoSeries > ARRAYLEN(NoSeriesMgt2) then
                    ERROR(
                      Text004,
                      ARRAYLEN(NoSeriesMgt2));
                  NoSeries.Code := "Registering No. Series";
                  NoSeries.Description := FORMAT(NoOfRegisteringNoSeries);
                  NoSeries.INSERT;
                end;
                LastDocNo := "Whse. Document No.";
                EVALUATE(RegisteringNoSeriesNo,NoSeries.Description);
                "Whse. Document No." :=
                  NoSeriesMgt2[RegisteringNoSeriesNo].GetNextNo(
                    "Registering No. Series","Registering Date",false);
                LastRegisteredDocNo := "Whse. Document No.";
              end;

          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);
          Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));

          if Quantity < 0 then
            WMSMgt.CalcCubageAndWeight(
              "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);

          ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempHandlingSpecification,false);
          if TempWhseJnlLine2.FIND('-') then
            repeat
              WhseJnlRegisterLine.RUN(TempWhseJnlLine2);
            until TempWhseJnlLine2.NEXT = 0;

          if IsReclass("Journal Template Name") then
            if CreateItemJnlLine(WhseJnlLine,ItemJnlLine) then
              ItemJnlPostLine.RunWithCheck(ItemJnlLine);

          if IsPhysInvtCount(WhseJnlTemplate,"Phys Invt Counting Period Code","Phys Invt Counting Period Type") then begin
            if not PhysInvtCount then begin
              PhysInvtCountMgt.InitTempItemSKUList;
              PhysInvtCount := true;
            end;
            PhysInvtCountMgt.AddToTempItemSKUList("Item No.","Location Code","Variant Code","Phys Invt Counting Period Type");
          end;
        until NEXT = 0;

        // Copy register no. and current journal batch name to Whse journal
        if not WhseReg.FINDLAST or (WhseReg."No." <> WhseRegNo) then
          WhseRegNo := 0;

        INIT;
        "Line No." := WhseRegNo;

        // Update/delete lines
        if WhseRegNo <> 0 then begin
          // Not a recurring journal
          WhseJnlLine2.COPYFILTERS(WhseJnlLine);
          WhseJnlLine2.SETFILTER("Item No.",'<>%1','');
          if WhseJnlLine2.FINDLAST then; // Remember the last line

          if FIND('-') then begin
            repeat
              ItemTrackingMgt.DeleteWhseItemTrkgLines(
                DATABASE::"Warehouse Journal Line",0,"Journal Batch Name",
                "Journal Template Name",0,"Line No.","Location Code",true);
            until NEXT = 0;
            DELETEALL;
          end;

          WhseJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
          WhseJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          WhseJnlLine3.SETRANGE("Location Code","Location Code");
          if not WhseJnlLine3.FINDLAST then
            if INCSTR("Journal Batch Name") <> '' then begin
              WhseJnlBatch.DELETE;
              WhseJnlBatch.Name := INCSTR("Journal Batch Name");
              if WhseJnlBatch.INSERT then;
              "Journal Batch Name" := WhseJnlBatch.Name;
            end;

          WhseJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          if (WhseJnlBatch."No. Series" = '') and not WhseJnlLine3.FINDLAST then begin
            WhseJnlLine3.INIT;
            WhseJnlLine3."Journal Template Name" := "Journal Template Name";
            WhseJnlLine3."Journal Batch Name" := "Journal Batch Name";
            WhseJnlLine3."Location Code" := "Location Code";
            WhseJnlLine3."Line No." := 10000;
            WhseJnlLine3.INSERT;
            WhseJnlLine3.SetUpNewLine(WhseJnlLine2);
            WhseJnlLine3.MODIFY;
          end;
        end;
        if WhseJnlBatch."No. Series" <> '' then
          NoSeriesMgt.SaveNoSeries;
        if NoSeries.FIND('-') then
          repeat
            EVALUATE(RegisteringNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[RegisteringNoSeriesNo].SaveNoSeries;
          until NoSeries.NEXT = 0;

        if PhysInvtCount then
          PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;

        Window.CLOSE;
        COMMIT;
        CLEAR(WhseJnlRegisterLine);
      end;
    END;

    LOCAL PROCEDURE CreateTrackingSpecification@1(WhseJnlLine@1000 : Record "Warehouse Journal Line";VAR TempHandlingSpecification@1001 : TEMPORARY Record "Tracking Specification");
    VAR
      WhseItemTrkgLine@1002 : Record "Whse. Item Tracking Line";
      BinContent@1003 : Record "Bin Content";
      Location@1007 : Record Location;
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      WhseSNRequired@1005 : Boolean;
      WhseLNRequired@1006 : Boolean;
    BEGIN
      if (WhseJnlLine."Entry Type" = WhseJnlLine."Entry Type"::Movement) or
         (WhseJnlLine.Quantity < 0)
      then
        BinContent.GET(WhseJnlLine."Location Code",WhseJnlLine."From Bin Code",WhseJnlLine."Item No.",
          WhseJnlLine."Variant Code",WhseJnlLine."Unit of Measure Code");

      WhseItemTrkgLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.","Location Code");
      WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
      WhseItemTrkgLine.SETRANGE("Source ID",WhseJnlLine."Journal Batch Name");
      WhseItemTrkgLine.SETRANGE("Source Batch Name",WhseJnlLine."Journal Template Name");
      WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseJnlLine."Line No.");
      WhseItemTrkgLine.SETRANGE("Location Code",WhseJnlLine."Location Code");
      WhseItemTrkgLine.CALCSUMS("Qty. to Handle (Base)");

      if WhseItemTrkgLine."Qty. to Handle (Base)" <> ABS(WhseJnlLine."Qty. (Absolute, Base)") then
        ERROR(Text005);

      if WhseItemTrkgLine.FIND('-') then
        repeat
          ItemTrackingMgt.CheckWhseItemTrkgSetup(WhseJnlLine."Item No.",WhseSNRequired,WhseLNRequired,false);
          if WhseSNRequired then
            WhseItemTrkgLine.TESTFIELD("Serial No.");
          if WhseLNRequired then
            WhseItemTrkgLine.TESTFIELD("Lot No.");
        until WhseItemTrkgLine.NEXT = 0;

      if (WhseJnlLine."Entry Type" = WhseJnlLine."Entry Type"::Movement) or
         (WhseJnlLine.Quantity < 0)
      then
        if WhseItemTrkgLine.FIND('-') then
          repeat
            BinContent.SETRANGE("Lot No. Filter",WhseItemTrkgLine."Lot No.");
            BinContent.SETRANGE("Serial No. Filter",WhseItemTrkgLine."Serial No.");
            BinContent.CALCFIELDS("Quantity (Base)");
            if WhseItemTrkgLine."Quantity (Base)" > BinContent."Quantity (Base)" then
              ERROR(Text006);
          until WhseItemTrkgLine.NEXT = 0;

      if WhseItemTrkgLine.FIND('-') then
        repeat
          TempHandlingSpecification.INIT;
          TempHandlingSpecification.TRANSFERFIELDS(WhseItemTrkgLine);
          TempHandlingSpecification."Quantity actual Handled (Base)" := WhseItemTrkgLine."Qty. to Handle (Base)";
          TempHandlingSpecification.INSERT;

          with WhseJnlLine do begin
            Location.GET("Location Code");
            if ("From Bin Code" <> '') and
               ("From Bin Code" <> Location."Adjustment Bin Code") and
               Location."Directed Put-away and Pick"
            then begin
              BinContent.GET(
                "Location Code","From Bin Code",
                "Item No.","Variant Code","Unit of Measure Code");
              BinContent.SETFILTER("Lot No. Filter",TempHandlingSpecification."Lot No.");
              BinContent.SETFILTER("Serial No. Filter",TempHandlingSpecification."Serial No.");
              BinContent.CheckDecreaseBinContent("Qty. (Absolute)","Qty. (Absolute, Base)","Qty. (Absolute, Base)");
            end;
          end;
        until WhseItemTrkgLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateTempBinContentBuffer@2(WhseJnlLine@1000 : Record "Warehouse Journal Line";BinCode@1001 : Code[20];Increase@1002 : Boolean);
    BEGIN
      // Calculate cubage and weight per bin
      with WhseJnlLine do begin
        if not TempBinContentBuffer.GET(
             "Location Code",BinCode,'','','','','')
        then begin
          TempBinContentBuffer.INIT;
          TempBinContentBuffer."Location Code" := "Location Code";
          TempBinContentBuffer."Bin Code" := BinCode;
          TempBinContentBuffer.INSERT;
        end;
        if Increase then begin
          TempBinContentBuffer."Qty. to Handle (Base)" := TempBinContentBuffer."Qty. to Handle (Base)" + "Qty. (Absolute, Base)";
          TempBinContentBuffer.Cubage := TempBinContentBuffer.Cubage + Cubage;
          TempBinContentBuffer.Weight := TempBinContentBuffer.Weight + Weight;
        end else begin
          WMSMgt.CalcCubageAndWeight(
            "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight);
          TempBinContentBuffer."Qty. to Handle (Base)" := TempBinContentBuffer."Qty. to Handle (Base)" - "Qty. (Absolute, Base)";
          TempBinContentBuffer.Cubage := TempBinContentBuffer.Cubage - Cubage;
          TempBinContentBuffer.Weight := TempBinContentBuffer.Weight - Weight;
        end;
        TempBinContentBuffer.MODIFY;
      end;
    END;

    LOCAL PROCEDURE CheckBin@18();
    VAR
      Bin@1000 : Record Bin;
    BEGIN
      with TempBinContentBuffer do begin
        SETFILTER("Qty. to Handle (Base)",'>0');
        if FIND('-') then
          repeat
            Bin.GET("Location Code","Bin Code");
            Bin.CheckIncreaseBin(
              "Bin Code",'',"Qty. to Handle (Base)",Cubage,Weight,Cubage,Weight,true,false);
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetWhseRegNo@6() : Integer;
    BEGIN
      exit(WhseRegNo);
    END;

    LOCAL PROCEDURE CreateItemJnlLine@9(WhseJnlLine2@1000 : Record "Warehouse Journal Line";VAR ItemJnlLine@1002 : Record "Item Journal Line") : Boolean;
    VAR
      ReservEntry@1005 : Record "Reservation Entry";
      WhseItemTrkgLine@1006 : Record "Whse. Item Tracking Line";
      CreateReservEntry@1004 : Codeunit "Create Reserv. Entry";
      QtyToHandleBase@1003 : Decimal;
    BEGIN
      WhseItemTrkgLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.","Location Code");
      WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
      WhseItemTrkgLine.SETRANGE("Source ID",WhseJnlLine2."Journal Batch Name");
      WhseItemTrkgLine.SETRANGE("Source Batch Name",WhseJnlLine2."Journal Template Name");
      WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseJnlLine2."Line No.");
      WhseItemTrkgLine.SETRANGE("Location Code",WhseJnlLine2."Location Code");

      if WhseItemTrkgLine.FINDSET then begin
        ItemJnlLine.INIT;
        ItemJnlLine."Line No." := 0;
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Transfer);
        with WhseJnlLine2 do begin
          repeat
            if ((WhseItemTrkgLine."New Serial No." <> WhseItemTrkgLine."Serial No.") or
                (WhseItemTrkgLine."New Lot No." <> WhseItemTrkgLine."Lot No.") or
                (WhseItemTrkgLine."New Expiration Date" <> WhseItemTrkgLine."Expiration Date"))
            then begin
              CreateReservEntry.CreateReservEntryFor(
                DATABASE::"Item Journal Line",
                ItemJnlLine."Entry Type",
                '',
                '',
                0,
                "Line No.",
                WhseItemTrkgLine."Qty. per Unit of Measure",
                ABS(WhseItemTrkgLine."Qty. to Handle"),
                ABS(WhseItemTrkgLine."Qty. to Handle (Base)"),
                WhseItemTrkgLine."Serial No.",
                WhseItemTrkgLine."Lot No.");
              CreateReservEntry.SetNewSerialLotNo(WhseItemTrkgLine."New Serial No.",WhseItemTrkgLine."New Lot No.");
              CreateReservEntry.SetDates(WhseItemTrkgLine."Warranty Date",WhseItemTrkgLine."Expiration Date");
              CreateReservEntry.SetNewExpirationDate(WhseItemTrkgLine."New Expiration Date");
              CreateReservEntry.CreateEntry(
                "Item No.",
                "Variant Code",
                "Location Code",
                Description,
                0D,
                0D,
                0,
                ReservEntry."Reservation Status"::Prospect);
              QtyToHandleBase += ABS(WhseItemTrkgLine."Qty. to Handle (Base)");
            end;
          until WhseItemTrkgLine.NEXT = 0;

          if QtyToHandleBase <> 0 then begin
            ItemJnlLine."Document No." := "Whse. Document No.";
            ItemJnlLine.VALIDATE("Posting Date","Registering Date");
            ItemJnlLine.VALIDATE("Item No.","Item No.");
            ItemJnlLine.VALIDATE("Variant Code","Variant Code");
            ItemJnlLine.VALIDATE("Location Code","Location Code");
            ItemJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
            ItemJnlLine.VALIDATE(Quantity,ROUND(QtyToHandleBase / "Qty. per Unit of Measure",0.00001));
            ItemJnlLine.Description := Description;
            ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
            ItemJnlLine."Source No." := "Item No.";
            ItemJnlLine."Source Code" := "Source Code";
            ItemJnlLine."Reason Code" := "Reason Code";
            ItemJnlLine."Line No." := "Line No.";
          end;
        end;
      end;

      exit(QtyToHandleBase <> 0);
    END;

    LOCAL PROCEDURE IsPhysInvtCount@10(WhseJnlTemplate2@1000 : Record "Warehouse Journal Template";PhysInvtCountingPeriodCode@1002 : Code[10];PhysInvtCountingPeriodType@1003 : '" ",Item,SKU') : Boolean;
    BEGIN
      exit(
        (WhseJnlTemplate2.Type = WhseJnlTemplate2.Type::"Physical Inventory") and
        (PhysInvtCountingPeriodType <> PhysInvtCountingPeriodType::" ") and
        (PhysInvtCountingPeriodCode <> ''));
    END;

    LOCAL PROCEDURE CheckItemAvailability@11(VAR WhseJnlLine@1000 : Record "Warehouse Journal Line");
    VAR
      TempSKU@1002 : TEMPORARY Record "Stockkeeping Unit";
      WhseJnlLineToPost@1005 : Record "Warehouse Journal Line";
      WhseJnlLineQty@1003 : Decimal;
      ReservedQtyOnInventory@1004 : Decimal;
      QtyOnWarehouseEntries@1001 : Decimal;
    BEGIN
      WhseJnlLineToPost.COPYFILTERS(WhseJnlLine);
      if WhseJnlLineToPost.FINDSET then
        repeat
          if not TempSKU.GET(WhseJnlLineToPost."Location Code",WhseJnlLineToPost."Item No.",WhseJnlLineToPost."Variant Code") then begin
            InsertTempSKU(TempSKU,WhseJnlLineToPost);

            WhseJnlLineQty := CalcRequiredQty(TempSKU,WhseJnlLine);
            if WhseJnlLineQty < 0 then begin
              ReservedQtyOnInventory := CalcReservedQtyOnInventory(TempSKU."Item No.",TempSKU."Location Code",TempSKU."Variant Code");
              QtyOnWarehouseEntries := CalcQtyOnWarehouseEntry(TempSKU."Item No.",TempSKU."Location Code",TempSKU."Variant Code");
              if (ReservedQtyOnInventory > 0) and ((QtyOnWarehouseEntries - ReservedQtyOnInventory) < ABS(WhseJnlLineQty)) then
                if not CONFIRM(
                     Text007,false,TempSKU.FIELDCAPTION("Item No."),TempSKU."Item No.",TempSKU.FIELDCAPTION("Location Code"),
                     TempSKU."Location Code",TempSKU.FIELDCAPTION("Variant Code"),TempSKU."Variant Code")
                then
                  ERROR('');
            end;
          end;
        until WhseJnlLineToPost.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcReservedQtyOnInventory@12(ItemNo@1000 : Code[20];LocationCode@1001 : Code[20];VariantCode@1002 : Code[20]) : Decimal;
    VAR
      Item@1004 : Record Item;
    BEGIN
      with Item do begin
        GET(ItemNo);
        SETFILTER("Location Filter",LocationCode);
        SETFILTER("Variant Filter",VariantCode);
        CALCFIELDS("Reserved Qty. on Inventory");
        exit("Reserved Qty. on Inventory")
      end;
    END;

    LOCAL PROCEDURE CalcQtyOnWarehouseEntry@4(ItemNo@1000 : Code[20];LocationCode@1001 : Code[20];VariantCode@1002 : Code[20]) : Decimal;
    VAR
      WarehouseEntry@1004 : Record "Warehouse Entry";
    BEGIN
      with WarehouseEntry do begin
        RESET;
        SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code","Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        CALCSUMS("Qty. (Base)");
        exit("Qty. (Base)");
      end;
    END;

    LOCAL PROCEDURE InsertTempSKU@13(VAR TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";WhseJnlLine@1001 : Record "Warehouse Journal Line");
    BEGIN
      with TempSKU do begin
        INIT;
        "Location Code" := WhseJnlLine."Location Code";
        "Item No." := WhseJnlLine."Item No.";
        "Variant Code" := WhseJnlLine."Variant Code";
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CalcRequiredQty@14(TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";VAR WhseJnlLineFiltered@1001 : Record "Warehouse Journal Line") : Decimal;
    VAR
      WhseJnlLine@1002 : Record "Warehouse Journal Line";
    BEGIN
      WhseJnlLine.COPYFILTERS(WhseJnlLineFiltered);
      WhseJnlLine.SETRANGE("Item No.",TempSKU."Item No.");
      WhseJnlLine.SETRANGE("Location Code",TempSKU."Location Code");
      WhseJnlLine.SETRANGE("Variant Code",TempSKU."Variant Code");
      WhseJnlLine.CALCSUMS("Qty. (Base)");
      exit(WhseJnlLine."Qty. (Base)");
    END;

    BEGIN
    END.
  }
}

