OBJECT Codeunit 5899 Calc. Inventory Value-Check
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Avg. Cost Adjmt. Entry Point"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text004@1000 : TextConst 'ENU=Checking items #1##########';
      InvtSetup@1017 : Record "Inventory Setup";
      TempErrorBuf@1004 : TEMPORARY Record "Error Buffer";
      PostingDate@1008 : Date;
      CalculatePer@1001 : '"Item Ledger Entry",Item';
      ByLocation@1019 : Boolean;
      ByVariant@1018 : Boolean;
      Text007@1006 : TextConst 'ENU=You have to run the Adjust Cost - Item Entries batch job, before you can revalue item %1.';
      Text009@1009 : TextConst 'ENU=You must not revalue items with Costing Method %1, if Calculate Per is Item Ledger Entry.';
      Text011@1016 : TextConst 'ENU=You must not enter a %1 if you revalue items with Costing Method %2 and if Average Cost Calc. Type is %3 in Inventory Setup.';
      Text012@1015 : TextConst 'ENU=The By Location field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.';
      Text014@1013 : TextConst 'ENU=The By Variant field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.';
      Text015@1012 : TextConst 'ENU=You must fill in a Location filter and a Variant filter or select the By Location field and the By Variant field, if you revalue items with Costing Method %1, and if Average Cost Calc. Type is %2 in Inventory Setup.';
      ShowDialog@1002 : Boolean;
      Text018@1102601000 : TextConst 'ENU=The Item %1 cannot be revalued because there is at least one open outbound item ledger entry.';
      TestMode@1003 : Boolean;
      ErrorCounter@1007 : Integer;
      Text020@1011 : TextConst 'ENU=Open Outbound Entry %1 found.';

    [External]
    PROCEDURE SetProperties@1(NewPostingDate@1000 : Date;NewCalculatePer@1003 : Option;NewByLocation@1002 : Boolean;NewByVariant@1001 : Boolean;NewShowDialog@1005 : Boolean;NewTestMode@1006 : Boolean);
    BEGIN
      TempErrorBuf.DELETEALL;
      CLEARALL;

      PostingDate := NewPostingDate;
      CalculatePer := NewCalculatePer;
      ByLocation := NewByLocation;
      ByVariant := NewByVariant;
      ShowDialog := NewShowDialog;
      TestMode := NewTestMode;

      InvtSetup.GET;
    END;

    [External]
    PROCEDURE RunCheck@3(VAR Item@1000 : Record Item;VAR NewErrorBuf@1002 : Record "Error Buffer");
    VAR
      Item2@1004 : Record Item;
      Window@1001 : Dialog;
    BEGIN
      with Item2 do begin
        COPY(Item);

        CheckCalculatePer(Item2);

        if FINDSET then begin
          if ShowDialog then
            Window.OPEN(Text004,"No.");
          repeat
            if ShowDialog then
              Window.UPDATE(1,"No.");

            if FindOpenOutboundEntry(Item2) then
              if not TestMode then
                ERROR(Text018,"No.");
            if not Adjusted(Item2) then
              AddError(
                STRSUBSTNO(Text007,"No."),DATABASE::Item,"No.",0);
          until NEXT = 0;
          if ShowDialog then
            Window.CLOSE;
        end;
      end;

      TempErrorBuf.RESET;
      if TempErrorBuf.FINDSET then
        repeat
          NewErrorBuf := TempErrorBuf;
          NewErrorBuf.INSERT;
        until TempErrorBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE Adjusted@10(Item@1000 : Record Item) : Boolean;
    VAR
      AvgCostAdjmt@1002 : Record "Avg. Cost Adjmt. Entry Point";
    BEGIN
      if Item."Costing Method" = Item."Costing Method"::Average then begin
        AvgCostAdjmt.SETCURRENTKEY("Item No.","Cost Is Adjusted");
        AvgCostAdjmt.SETFILTER("Item No.",Item."No.");
        AvgCostAdjmt.SETRANGE("Cost Is Adjusted",false);
        AvgCostAdjmt.SETRANGE("Valuation Date",0D,PostingDate);
        exit(AvgCostAdjmt.ISEMPTY);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CheckCalculatePer@6(VAR Item@1000 : Record Item);
    VAR
      Item2@1001 : Record Item;
    BEGIN
      with Item2 do begin
        COPYFILTERS(Item);

        FILTERGROUP(2);
        SETRANGE("Costing Method","Costing Method"::Average);
        FILTERGROUP(0);

        if FINDFIRST then
          case CalculatePer of
            CalculatePer::"Item Ledger Entry":
              AddError(
                STRSUBSTNO(Text009,"Costing Method"),DATABASE::Item,"No.",0);
            CalculatePer::Item:
              begin
                if InvtSetup."Average Cost Calc. Type" = InvtSetup."Average Cost Calc. Type"::Item then begin
                  if GETFILTER("Location Filter") <> '' then
                    AddError(
                      STRSUBSTNO(
                        Text011,
                        FIELDCAPTION("Location Filter"),"Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  if GETFILTER("Variant Filter") <> '' then
                    AddError(
                      STRSUBSTNO(
                        Text011,
                        FIELDCAPTION("Variant Filter"),"Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  if ByLocation then
                    AddError(
                      STRSUBSTNO(
                        Text012,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  if ByVariant then
                    AddError(
                      STRSUBSTNO(
                        Text014,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                end else
                  if ((GETFILTER("Location Filter") = '') and (not ByLocation)) or
                     ((GETFILTER("Variant Filter") = '') and (not ByVariant))
                  then
                    AddError(
                      STRSUBSTNO(
                        Text015,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
              end;
          end;
      end;
    END;

    LOCAL PROCEDURE FindOpenOutboundEntry@2(VAR Item@1000 : Record Item) : Boolean;
    VAR
      ItemLedgEntry@1102601000 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE(Open,true);
      ItemLedgEntry.SETRANGE(Positive,false);
      ItemLedgEntry.SETRANGE("Posting Date",0D,PostingDate);

      Item.COPYFILTER("Variant Filter",ItemLedgEntry."Variant Code");
      Item.COPYFILTER("Location Filter",ItemLedgEntry."Location Code");

      if ItemLedgEntry.FINDSET then begin
        repeat
          AddError(
            STRSUBSTNO(Text020,ItemLedgEntry."Entry No."),
            DATABASE::"Item Ledger Entry",ItemLedgEntry."Item No.",ItemLedgEntry."Entry No.");
        until ItemLedgEntry.NEXT = 0;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE AddError@4(Text@1004 : Text;SourceTable@1001 : Integer;SourceNo@1002 : Code[20];SourceRefNo@1003 : Integer);
    BEGIN
      if TestMode then begin
        ErrorCounter := ErrorCounter + 1;
        TempErrorBuf.INIT;
        TempErrorBuf."Error No." := ErrorCounter;
        TempErrorBuf."Error Text" := COPYSTR(Text,1,MAXSTRLEN(TempErrorBuf."Error Text"));
        TempErrorBuf."Source Table" := SourceTable;
        TempErrorBuf."Source No." := SourceNo;
        TempErrorBuf."Source Ref. No." := SourceRefNo;
        TempErrorBuf.INSERT;
      end else
        ERROR(Text);
    END;

    BEGIN
    END.
  }
}

