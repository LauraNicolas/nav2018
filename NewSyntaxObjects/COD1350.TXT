OBJECT Codeunit 1350 Telemetry Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ScheduleCalEventsForTelemetryAsync@1(TelemetryCodeunitRecID@1002 : RecordID;CalEventsCodeunit@1000 : Integer;ExecutionDelayInSeconds@1001 : Integer);
    BEGIN
      if not GUIALLOWED then
        exit;

      if CanScheduleTask and (ExecutionDelayInSeconds >= 0) and (CalEventsCodeunit > 0) then
        if not (CURRENTCLIENTTYPE in [CLIENTTYPE::Background,CLIENTTYPE::NAS,CLIENTTYPE::Management]) then
          TASKSCHEDULER.CREATETASK(CalEventsCodeunit,0,true,COMPANYNAME,
            CURRENTDATETIME + (ExecutionDelayInSeconds * 1000),TelemetryCodeunitRecID);
    END;

    PROCEDURE DoesTelemetryCalendarEventExist@2(EventDate@1003 : Date;Description@1002 : Text[50];CodeunitID@1001 : Integer) : Boolean;
    VAR
      CalendarEvent@1000 : Record "Calendar Event";
    BEGIN
      CalendarEvent.SETRANGE(Description,Description);
      CalendarEvent.SETRANGE("Scheduled Date",EventDate);
      CalendarEvent.SETRANGE("Object ID to Run",CodeunitID);
      CalendarEvent.SETRANGE(Type,CalendarEvent.Type::System);
      exit(not CalendarEvent.ISEMPTY);
    END;

    LOCAL PROCEDURE CanScheduleTask@5() : Boolean;
    VAR
      DoNotScheduleTask@1000 : Boolean;
    BEGIN
      OnBeforeTelemetryScheduleTask(DoNotScheduleTask);
      exit(not DoNotScheduleTask and TASKSCHEDULER.CANCREATETASK);
    END;

    [Integration]
    [External]
    PROCEDURE OnBeforeTelemetryScheduleTask@6(VAR DoNotScheduleTask@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

