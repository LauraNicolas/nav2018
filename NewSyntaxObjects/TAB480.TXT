OBJECT Table 480 Dimension Set Entry
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Dimension Set Entry"=ri,
                TableData "Dimension Set Tree Node"=rim;
    OnInsert=BEGIN
               if DimVal.GET("Dimension Code","Dimension Value Code") then
                 "Dimension Value ID" := DimVal."Dimension Value ID"
               else
                 "Dimension Value ID" := 0;
             END;

    OnModify=BEGIN
               if DimVal.GET("Dimension Code","Dimension Value Code") then
                 "Dimension Value ID" := DimVal."Dimension Value ID"
               else
                 "Dimension Value ID" := 0;
             END;

    CaptionML=ENU=Dimension Set Entry;
    LookupPageID="Dimension Set Entries";
    DrillDownPageID="Dimension Set Entries";
  }
  FIELDS
  {
    { 1   ;   ;Dimension Set ID    ;Integer       ;CaptionML=ENU=Dimension Set ID }
    { 2   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                if not DimMgt.CheckDim("Dimension Code") then
                                                                  ERROR(DimMgt.GetDimErr);
                                                                if "Dimension Code" <> xRec."Dimension Code" then begin
                                                                  "Dimension Value Code" := '';
                                                                  "Dimension Value ID" := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Dimension Code;
                                                   NotBlank=true }
    { 3   ;   ;Dimension Value Code;Code20        ;TableRelation="Dimension Value".Code WHERE ("Dimension Code"=FIELD("Dimension Code"));
                                                   OnValidate=BEGIN
                                                                if not DimMgt.CheckDimValue("Dimension Code","Dimension Value Code") then
                                                                  ERROR(DimMgt.GetDimErr);

                                                                DimVal.GET("Dimension Code","Dimension Value Code");
                                                                "Dimension Value ID" := DimVal."Dimension Value ID";
                                                              END;

                                                   CaptionML=ENU=Dimension Value Code;
                                                   NotBlank=true }
    { 4   ;   ;Dimension Value ID  ;Integer       ;CaptionML=ENU=Dimension Value ID }
    { 5   ;   ;Dimension Name      ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Dimension.Name WHERE (Code=FIELD("Dimension Code")));
                                                   CaptionML=ENU=Dimension Name;
                                                   Editable=false }
    { 6   ;   ;Dimension Value Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE ("Dimension Code"=FIELD("Dimension Code"),
                                                                                                    Code=FIELD("Dimension Value Code")));
                                                   CaptionML=ENU=Dimension Value Name;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Dimension Set ID","Dimension Code"     ;Clustered=true }
    {    ;"Dimension Value ID"                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimVal@1000 : Record "Dimension Value";
      DimMgt@1001 : Codeunit DimensionManagement;

    [External]
    PROCEDURE GetDimensionSetID@3(VAR DimSetEntry@1000 : Record "Dimension Set Entry") : Integer;
    VAR
      DimSetEntry2@1001 : Record "Dimension Set Entry";
      DimSetTreeNode@1002 : Record "Dimension Set Tree Node";
      Found@1003 : Boolean;
    BEGIN
      DimSetEntry2.COPY(DimSetEntry);
      if DimSetEntry."Dimension Set ID" > 0 then
        DimSetEntry.SETRANGE("Dimension Set ID",DimSetEntry."Dimension Set ID");

      DimSetEntry.SETCURRENTKEY("Dimension Value ID");
      DimSetEntry.SETFILTER("Dimension Code",'<>%1','');
      DimSetEntry.SETFILTER("Dimension Value Code",'<>%1','');

      if not DimSetEntry.FINDSET then
        exit(0);

      Found := true;
      DimSetTreeNode."Dimension Set ID" := 0;
      repeat
        DimSetEntry.TESTFIELD("Dimension Value ID");
        if Found then
          if not DimSetTreeNode.GET(DimSetTreeNode."Dimension Set ID",DimSetEntry."Dimension Value ID") then begin
            Found := false;
            DimSetTreeNode.LOCKTABLE;
          end;
        if not Found then begin
          DimSetTreeNode."Parent Dimension Set ID" := DimSetTreeNode."Dimension Set ID";
          DimSetTreeNode."Dimension Value ID" := DimSetEntry."Dimension Value ID";
          DimSetTreeNode."Dimension Set ID" := 0;
          DimSetTreeNode."In Use" := false;
          if not DimSetTreeNode.INSERT(true) then
            DimSetTreeNode.GET(DimSetTreeNode."Parent Dimension Set ID",DimSetTreeNode."Dimension Value ID");
        end;
      until DimSetEntry.NEXT = 0;
      if not DimSetTreeNode."In Use" then begin
        if Found then begin
          DimSetTreeNode.LOCKTABLE;
          DimSetTreeNode.GET(DimSetTreeNode."Parent Dimension Set ID",DimSetTreeNode."Dimension Value ID");
        end;
        DimSetTreeNode."In Use" := true;
        DimSetTreeNode.MODIFY;
        InsertDimSetEntries(DimSetEntry,DimSetTreeNode."Dimension Set ID");
      end;

      DimSetEntry.COPY(DimSetEntry2);

      exit(DimSetTreeNode."Dimension Set ID");
    END;

    LOCAL PROCEDURE InsertDimSetEntries@13(VAR DimSetEntry@1000 : Record "Dimension Set Entry";NewID@1001 : Integer);
    VAR
      DimSetEntry2@1002 : Record "Dimension Set Entry";
    BEGIN
      DimSetEntry2.LOCKTABLE;
      if DimSetEntry.FINDSET then
        repeat
          DimSetEntry2 := DimSetEntry;
          DimSetEntry2."Dimension Set ID" := NewID;
          DimSetEntry2.INSERT;
        until DimSetEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

