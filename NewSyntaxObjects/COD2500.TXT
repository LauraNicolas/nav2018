OBJECT Codeunit 2500 NavExtensionInstallationMgmt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "NAV App Installed App"=rimd,
                TableData "NAV App"=rimd;
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InstalledExtensionTable@1000 : Record "NAV App Installed App";
      Installer@1001 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.Apps.NavAppALInstaller";
      InstallerHasBeenCreated@1002 : Boolean;
      InstalledTxt@1004 : TextConst 'ENU=Installed';
      NotInstalledTxt@1003 : TextConst 'ENU=Not Installed';
      FullVersionStringTxt@1007 : TextConst '@@@="%1=Version Major, %2=Version Minor, %3=Version build, %4=Version revision";ENU=%1.%2.%3.%4';
      NoRevisionVersionStringTxt@1006 : TextConst '@@@="%1=Version Major, %2=Version Minor, %3=Version build";ENU=%1.%2.%3';
      NoBuildVersionStringTxt@1005 : TextConst '@@@="%1=Version Major, %2=Version Minor";ENU=%1.%2';
      NullGuidTok@1008 : TextConst '@@@={Locked};ENU=00000000-0000-0000-0000-000000000000';
      PermissionErr@1009 : TextConst 'ENU=You do not have the required permissions to install the selected app. Contact your Partner or system administrator to install the app or assign you permissions.';

    [External]
    PROCEDURE IsInstalled@1(PackageID@1000 : GUID) : Boolean;
    BEGIN
      // Check if the user is entitled to make extension changes.
      if (not InstalledExtensionTable.READPERMISSION) or (not InstalledExtensionTable.WRITEPERMISSION) then
        ERROR(PermissionErr);

      InstalledExtensionTable.SETFILTER("Package ID",'%1',PackageID);
      exit(InstalledExtensionTable.FINDFIRST);
    END;

    [Internal]
    PROCEDURE InstallNavExtension@2(PackageID@1000 : GUID;Lcid@1001 : Integer);
    BEGIN
      AssertIsInitialized;
      Installer.ALInstallNavApp(PackageID,Lcid);
    END;

    [External]
    PROCEDURE GetExtensionInstalledDisplayString@9(PackageId@1000 : GUID) : Text[15];
    BEGIN
      if IsInstalled(PackageId) then
        exit(InstalledTxt);

      exit(NotInstalledTxt);
    END;

    [Internal]
    PROCEDURE GetDependenciesForExtensionToInstall@3(PackageID@1000 : GUID) : Text;
    BEGIN
      AssertIsInitialized;
      exit(Installer.ALGetAppDependenciesToInstallString(PackageID));
    END;

    [Internal]
    PROCEDURE GetDependentForExtensionToUninstall@4(PackageID@1000 : GUID) : Text;
    BEGIN
      AssertIsInitialized;
      exit(Installer.ALGetDependentAppsToUninstallString(PackageID));
    END;

    LOCAL PROCEDURE AssertIsInitialized@6();
    BEGIN
      if not InstallerHasBeenCreated then begin
        Installer := Installer.NavAppALInstaller;
        InstallerHasBeenCreated := true;
      end;
    END;

    [Internal]
    PROCEDURE UninstallNavExtension@7(PackageID@1000 : GUID);
    BEGIN
      AssertIsInitialized;
      Installer.ALUninstallNavApp(PackageID);
    END;

    [External]
    PROCEDURE GetVersionDisplayString@5(Major@1000 : Integer;Minor@1001 : Integer;Build@1002 : Integer;Revision@1003 : Integer) : Text;
    BEGIN
      if Build <= -1 then
        exit(STRSUBSTNO(NoBuildVersionStringTxt,Major,Minor));

      if Revision <= -1 then
        exit(STRSUBSTNO(NoRevisionVersionStringTxt,Major,Minor,Build));

      exit(STRSUBSTNO(FullVersionStringTxt,Major,Minor,Build,Revision));
    END;

    [External]
    PROCEDURE GetLatestVersionPackageId@8(AppId@1000 : GUID) : GUID;
    VAR
      NavAppTable@1001 : Record "NAV App";
      Result@1002 : GUID;
    BEGIN
      NavAppTable.SETFILTER(ID,'%1',AppId);
      NavAppTable.SETCURRENTKEY(Name,"Version Major","Version Minor","Version Build","Version Revision");
      NavAppTable.ASCENDING(false);
      Result := NullGuidTok;
      if NavAppTable.FINDFIRST then
        Result := NavAppTable."Package ID";

      exit(Result);
    END;

    [External]
    PROCEDURE IsInstalledNoPermissionCheck@10(ExtensionName@1000 : Text[250]) : Boolean;
    BEGIN
      InstalledExtensionTable.SETFILTER(Name,'%1',ExtensionName);
      exit(InstalledExtensionTable.FINDFIRST);
    END;

    PROCEDURE UnpublishNavTenantExtension@11(PackageID@1000 : GUID);
    BEGIN
      AssertIsInitialized;
      Installer.ALUnpublishNavTenantApp(PackageID);
    END;

    BEGIN
    END.
  }
}

