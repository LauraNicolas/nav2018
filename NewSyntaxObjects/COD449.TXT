OBJECT Codeunit 449 Job Queue Start Codeunit
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    Permissions=TableData "Job Queue Entry"=rm;
    OnRun=BEGIN
            if "User Language ID" <> 0 then
              GLOBALLANGUAGE("User Language ID");

            case "Object Type to Run" of
              "Object Type to Run"::Codeunit:
                CODEUNIT.RUN("Object ID to Run",Rec);
              "Object Type to Run"::Report:
                RunReport("Object ID to Run",Rec);
            end;

            // Commit any remaining transactions from the target codeunit\report. This is necessary due
            // to buffered record insertion which may not have surfaced errors in CODEUNIT.RUN above.
            COMMIT;
            OnAfterRun(Rec);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE RunReport@1(ReportID@1000 : Integer;VAR JobQueueEntry@1006 : Record "Job Queue Entry");
    VAR
      ReportInbox@1003 : Record "Report Inbox";
      RecRef@1002 : RecordRef;
      OutStr@1004 : OutStream;
      RunOnRec@1001 : Boolean;
    BEGIN
      ReportInbox.INIT;
      ReportInbox."User ID" := JobQueueEntry."User ID";
      ReportInbox."Job Queue Log Entry ID" := JobQueueEntry.ID;
      ReportInbox."Report ID" := ReportID;
      ReportInbox.Description := JobQueueEntry.Description;
      ReportInbox."Report Output".CREATEOUTSTREAM(OutStr);
      RunOnRec := RecRef.GET(JobQueueEntry."Record ID to Process");
      if RunOnRec then
        RecRef.SETRECFILTER;

      case JobQueueEntry."Report Output Type" of
        JobQueueEntry."Report Output Type"::"None (Processing only)":
          if RunOnRec then
            REPORT.EXECUTE(ReportID,JobQueueEntry.GetReportParameters,RecRef)
          else
            REPORT.EXECUTE(ReportID,JobQueueEntry.GetReportParameters);
        JobQueueEntry."Report Output Type"::Print:
          if RunOnRec then
            REPORT.PRINT(ReportID,JobQueueEntry.GetReportParameters,JobQueueEntry."Printer Name",RecRef)
          else
            REPORT.PRINT(ReportID,JobQueueEntry.GetReportParameters,JobQueueEntry."Printer Name");
        JobQueueEntry."Report Output Type"::PDF:
          begin
            if RunOnRec then
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Pdf,OutStr,RecRef)
            else
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Pdf,OutStr);
            ReportInbox."Output Type" := ReportInbox."Output Type"::PDF;
          end;
        JobQueueEntry."Report Output Type"::Word:
          begin
            if RunOnRec then
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Word,OutStr,RecRef)
            else
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Word,OutStr);
            ReportInbox."Output Type" := ReportInbox."Output Type"::Word;
          end;
        JobQueueEntry."Report Output Type"::Excel:
          begin
            if RunOnRec then
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Excel,OutStr,RecRef)
            else
              REPORT.SAVEAS(ReportID,JobQueueEntry.GetReportParameters,REPORTFORMAT::Excel,OutStr);
            ReportInbox."Output Type" := ReportInbox."Output Type"::Excel;
          end;
      end;

      case JobQueueEntry."Report Output Type" of
        JobQueueEntry."Report Output Type"::"None (Processing only)":
          begin
            JobQueueEntry."Notify On Success" := true;
            JobQueueEntry.MODIFY;
          end;
        JobQueueEntry."Report Output Type"::Print:
          ;
        else begin
          ReportInbox."Created Date-Time" := ROUNDDATETIME(CURRENTDATETIME,60000);
          ReportInbox.INSERT(true);
        end;
      end;
      COMMIT;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@2(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    BEGIN
    END;

    BEGIN
    END.
  }
}

