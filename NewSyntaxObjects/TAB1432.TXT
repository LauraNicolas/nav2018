OBJECT Table 1432 Net Promoter Score Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataPerCompany=false;
    CaptionML=ENU=Net Promoter Score Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;API URL             ;BLOB          ;CaptionML=ENU=API URL }
    { 3   ;   ;Expire Time         ;DateTime      ;CaptionML=ENU=Expire Time }
    { 4   ;   ;Time Between Requests;Integer      ;CaptionML=ENU=Time Between Requests }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NpsApiUrlTxt@1002 : TextConst '@@@={Locked};ENU=NpsApiUrl';
      NpsCacheLifeTimeTxt@1001 : TextConst '@@@={Locked};ENU=NpsCacheLifeTime';

    [Internal]
    PROCEDURE GetApiUrl@2() : Text;
    VAR
      InStream@1000 : InStream;
      ApiUrl@1001 : Text;
    BEGIN
      SetApiUrl;

      if not GET then
        exit('');

      ApiUrl := '';
      CALCFIELDS("API URL");
      if "API URL".HASVALUE then begin
        "API URL".CREATEINSTREAM(InStream);
        InStream.READ(ApiUrl);
      end;
      exit(ApiUrl);
    END;

    LOCAL PROCEDURE SetApiUrl@8();
    VAR
      AzureKeyVaultManagement@1001 : Codeunit "Azure Key Vault Management";
      OutStream@1005 : OutStream;
      ApiUrl@1003 : Text;
      CacheLifeTime@1006 : Integer;
    BEGIN
      if GET then
        if CURRENTDATETIME < "Expire Time" then
          exit;

      CacheLifeTime := MinCacheLifeTime;
      if AzureKeyVaultManagement.IsEnable then
        if AzureKeyVaultManagement.GetAzureKeyVaultSecret(ApiUrl,NpsApiUrlTxt) then
          CacheLifeTime := GetCacheLifeTime;

      LOCKTABLE;

      if not GET then begin
        INIT;
        "Primary Key" := '';
        INSERT;
      end;

      if ApiUrl = '' then
        CLEAR("API URL")
      else begin
        "API URL".CREATEOUTSTREAM(OutStream);
        OutStream.WRITE(ApiUrl);
      end;
      "Expire Time" := CURRENTDATETIME + CacheLifeTime * MillisecondsInMinute;
      MODIFY;

      COMMIT;
    END;

    LOCAL PROCEDURE GetCacheLifeTime@9() : Integer;
    VAR
      AzureKeyVaultManagement@1001 : Codeunit "Azure Key Vault Management";
      CacheLifeTimeValue@1004 : Text;
      CacheLifeTimeNumber@1008 : Integer;
    BEGIN
      if AzureKeyVaultManagement.GetAzureKeyVaultSecret(CacheLifeTimeValue,NpsCacheLifeTimeTxt) then
        if EVALUATE(CacheLifeTimeNumber,CacheLifeTimeValue) then begin
          if CacheLifeTimeNumber < MinCacheLifeTime then
            CacheLifeTimeNumber := MinCacheLifeTime;
          exit(CacheLifeTimeNumber);
        end;
      exit(MinCacheLifeTime);
    END;

    LOCAL PROCEDURE MinCacheLifeTime@4() : Integer;
    BEGIN
      exit(1); // one minute
    END;

    LOCAL PROCEDURE MillisecondsInMinute@24() : Integer;
    BEGIN
      exit(60000);
    END;

    BEGIN
    END.
  }
}

