OBJECT Codeunit 2129 O365 Export Invoices + Email
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesInvoiceHeader@1022 : Record "Sales Invoice Header";
      SalesInvoiceLine@1021 : Record "Sales Invoice Line";
      TempExcelBuffer@1001 : TEMPORARY Record "Excel Buffer";
      NoInvoicesExportedErr@1005 : TextConst 'ENU=There were no invoices to export.';
      InvoicesExportedMsg@1004 : TextConst 'ENU=Your exported invoices have been sent.';
      AttachmentNameTxt@1002 : TextConst 'ENU=Invoices.xlsx';
      ExportInvoicesEmailSubjectTxt@1007 : TextConst '@@@="%1 = Start Date, %2 =End Date";ENU=Please find the invoices summary and price details from %1 date until %2 date in the attached Excel book.';
      InvoiceNoFieldTxt@1003 : TextConst 'ENU=Invoice No.';
      CustomerNameFieldTxt@1006 : TextConst 'ENU=Customer Name';
      AddressFieldTxt@1008 : TextConst 'ENU=Address';
      CityFieldTxt@1009 : TextConst 'ENU=City';
      CountyFieldTxt@1010 : TextConst 'ENU=County';
      CountryRegionCodeFieldTxt@1011 : TextConst 'ENU=Country/Region Code';
      InvoiceDateFieldTxt@1012 : TextConst 'ENU=Invoice Date';
      NetTotalFieldTxt@1013 : TextConst 'ENU=Net Total';
      TotalIncludingVatFieldTxt@1014 : TextConst 'ENU=Total Including VAT';
      VatPercentFieldTxt@1015 : TextConst '@@@=The heading used when exporting the invoice lines;ENU=VAT %';
      InvoicesSummaryHeaderTxt@1016 : TextConst 'ENU=Invoices Summary';
      ItemsHeaderTxt@1017 : TextConst 'ENU=Prices';
      InvoicesSheetNameTxt@1018 : TextConst 'ENU=Invoices';
      CellBold@1000 : Boolean;
      RowNo@1019 : Integer;
      LineRowNo@1020 : Integer;
      VATAmountTxt@1023 : TextConst 'ENU=VAT Amount';

    [Internal]
    PROCEDURE ExportInvoicesToExcelandEmail@2(StartDate@1000 : Date;EndDate@1002 : Date;Email@1012 : Text[80]);
    VAR
      TempEmailItem@1011 : TEMPORARY Record "Email Item";
      FileManagement@1006 : Codeunit "File Management";
      EmailSuccess@1001 : Boolean;
      ServerFileName@1005 : Text;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Document Date",StartDate,EndDate);

      if not SalesInvoiceHeader.FINDSET then
        ERROR(NoInvoicesExportedErr);

      TempExcelBuffer.RESET;
      InsertHeaderTextForSalesInvoices;
      InsertHeaderTextForSalesLines;
      InsertSalesInvoices;

      ServerFileName := FileManagement.ServerTempFileName('xlsx');
      TempExcelBuffer.CreateBook(ServerFileName,InvoicesSheetNameTxt);
      TempExcelBuffer.WriteSheet(InvoicesSheetNameTxt,COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;

      CODEUNIT.RUN(CODEUNIT::"O365 Setup Email");

      with TempEmailItem do begin
        VALIDATE("Send to",Email);
        VALIDATE(Subject,STRSUBSTNO(ExportInvoicesEmailSubjectTxt,StartDate,EndDate));
        "Attachment File Path" := COPYSTR(ServerFileName,1,250);
        VALIDATE("Attachment Name",AttachmentNameTxt);
        EmailSuccess := Send(true);
      end;

      if EmailSuccess then
        MESSAGE(InvoicesExportedMsg);
    END;

    LOCAL PROCEDURE EnterCell@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Variant);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);

      if CellValue.ISDECIMAL or CellValue.ISINTEGER then
        TempExcelBuffer.VALIDATE("Cell Type",TempExcelBuffer."Cell Type"::Number)
      else
        if CellValue.ISDATE then
          TempExcelBuffer.VALIDATE("Cell Type",TempExcelBuffer."Cell Type"::Date)
        else
          TempExcelBuffer."Cell Value as Text" := COPYSTR(FORMAT(CellValue),1,MAXSTRLEN(TempExcelBuffer."Cell Value as Text" ));

      TempExcelBuffer."Cell Value as Text" := FORMAT(CellValue);
      TempExcelBuffer.Bold := CellBold;
      TempExcelBuffer.INSERT(true);
    END;

    LOCAL PROCEDURE InsertSalesInvoiceSummary@8();
    BEGIN
      EnterCell(RowNo,1,SalesInvoiceHeader."No.");
      EnterCell(RowNo,2,SalesInvoiceHeader."Sell-to Customer Name");
      EnterCell(RowNo,3,SalesInvoiceHeader."Sell-to Address");
      EnterCell(RowNo,4,SalesInvoiceHeader."Sell-to City");
      EnterCell(RowNo,5,SalesInvoiceHeader."Sell-to County");
      EnterCell(RowNo,6,SalesInvoiceHeader."Sell-to Country/Region Code");
      EnterCell(RowNo,7,SalesInvoiceHeader."VAT Registration No.");
      EnterCell(RowNo,8,SalesInvoiceHeader."Document Date");
      EnterCell(RowNo,9,SalesInvoiceHeader."Due Date");
      EnterCell(RowNo,10,SalesInvoiceHeader.GetWorkDescription);
      EnterCell(RowNo,11,SalesInvoiceHeader.Amount);
      EnterCell(RowNo,12,SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount);
      EnterCell(RowNo,13,SalesInvoiceHeader."Amount Including VAT");
      EnterCell(RowNo,14,SalesInvoiceHeader."Invoice Discount Amount");
    END;

    LOCAL PROCEDURE InsertSalesLineItem@9();
    BEGIN
      EnterCell(LineRowNo,1,SalesInvoiceLine."Document No.");
      EnterCell(LineRowNo,2,SalesInvoiceHeader."Sell-to Customer Name");
      EnterCell(LineRowNo,3,SalesInvoiceLine.Description);
      EnterCell(LineRowNo,4,SalesInvoiceLine.Quantity);
      EnterCell(LineRowNo,5,SalesInvoiceLine."Unit of Measure");
      EnterCell(LineRowNo,6,SalesInvoiceLine."Unit Price");
      EnterCell(LineRowNo,7,SalesInvoiceLine."Tax Group Code");
      EnterCell(LineRowNo,8,SalesInvoiceLine."VAT %");
      EnterCell(LineRowNo,9,SalesInvoiceLine.Amount);
      EnterCell(LineRowNo,10,SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount);
      EnterCell(LineRowNo,11,SalesInvoiceLine."Amount Including VAT");
      EnterCell(LineRowNo,12,SalesInvoiceLine."Line Discount Amount");
    END;

    LOCAL PROCEDURE InsertHeaderTextForSalesInvoices@11();
    BEGIN
      CellBold := true;
      RowNo := 1;
      EnterCell(RowNo,1,InvoicesSummaryHeaderTxt);

      RowNo := RowNo + 1;
      EnterCell(RowNo,1,InvoiceNoFieldTxt);
      EnterCell(RowNo,2,CustomerNameFieldTxt);
      EnterCell(RowNo,3,AddressFieldTxt);
      EnterCell(RowNo,4,CityFieldTxt);
      EnterCell(RowNo,5,CountyFieldTxt);
      EnterCell(RowNo,6,CountryRegionCodeFieldTxt);
      EnterCell(RowNo,7,SalesInvoiceHeader.FIELDCAPTION("VAT Registration No."));
      EnterCell(RowNo,8,InvoiceDateFieldTxt);
      EnterCell(RowNo,9,SalesInvoiceHeader.FIELDCAPTION("Due Date"));
      EnterCell(RowNo,10,SalesInvoiceHeader.FIELDCAPTION("Work Description"));
      EnterCell(RowNo,11,NetTotalFieldTxt);
      EnterCell(RowNo,12,VATAmountTxt);
      EnterCell(RowNo,13,TotalIncludingVatFieldTxt);
      EnterCell(RowNo,14,SalesInvoiceHeader.FIELDCAPTION("Invoice Discount Amount"));
      CellBold := false;
    END;

    LOCAL PROCEDURE InsertHeaderTextForSalesLines@12();
    VAR
      NumberOfEmptyLines@1000 : Integer;
    BEGIN
      CellBold := true;
      NumberOfEmptyLines := 5;
      LineRowNo := SalesInvoiceHeader.COUNT + NumberOfEmptyLines;
      EnterCell(LineRowNo,1,ItemsHeaderTxt);

      LineRowNo := LineRowNo + 1;
      EnterCell(LineRowNo,1,InvoiceNoFieldTxt);
      EnterCell(LineRowNo,2,CustomerNameFieldTxt);
      EnterCell(LineRowNo,3,SalesInvoiceLine.FIELDCAPTION(Description));
      EnterCell(LineRowNo,4,SalesInvoiceLine.FIELDCAPTION(Quantity));
      EnterCell(LineRowNo,5,SalesInvoiceLine.FIELDCAPTION("Unit of Measure"));
      EnterCell(LineRowNo,6,SalesInvoiceLine.FIELDCAPTION("Unit Price"));
      EnterCell(LineRowNo,7,SalesInvoiceLine.FIELDCAPTION("Tax Group Code"));
      EnterCell(LineRowNo,8,VatPercentFieldTxt);
      EnterCell(LineRowNo,9,SalesInvoiceLine.FIELDCAPTION(Amount));
      EnterCell(LineRowNo,10,VATAmountTxt);
      EnterCell(LineRowNo,11,SalesInvoiceLine.FIELDCAPTION("Amount Including VAT"));
      EnterCell(LineRowNo,12,SalesInvoiceLine.FIELDCAPTION("Line Discount Amount"));
      CellBold := false;
    END;

    LOCAL PROCEDURE InsertSalesInvoices@16();
    BEGIN
      if SalesInvoiceHeader.FINDSET then begin
        repeat
          RowNo := RowNo + 1;
          SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT","Work Description","Invoice Discount Amount");
          InsertSalesInvoiceSummary;
          SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          if SalesInvoiceLine.FINDSET then begin
            repeat
              LineRowNo := LineRowNo + 1;
              InsertSalesLineItem;
            until SalesInvoiceLine.NEXT = 0;
          end;
        until SalesInvoiceHeader.NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

