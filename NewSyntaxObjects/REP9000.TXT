OBJECT Report 9000 Add/Subtract Permission Set
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Add/Subtract Permission Set;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if DestinationPermissionSet = '' then
                    ERROR(NoDestinationErr);
                  if SourcePermissionSet = '' then
                    ERROR(NoSourceErr);
                END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;SourcePermission    ;
               DataItemTable=Permission;
               DataItemTableView=SORTING("Role ID","Object Type","Object ID") ORDER(Ascending);
               OnPreDataItem=BEGIN
                               SETRANGE("Role ID",SourcePermissionSet);
                             END;

               OnAfterGetRecord=VAR
                                  DestinationPermission@1000 : Record Permission;
                                BEGIN
                                  case SetOperation of
                                    SetOperation::Include:
                                      if DestinationPermission.GET(DestinationPermissionSet,"Object Type","Object ID") then begin
                                        if PermissionValueIsGreaterOrEqual("Read Permission",DestinationPermission."Read Permission") then
                                          DestinationPermission."Read Permission" := "Read Permission";
                                        if PermissionValueIsGreaterOrEqual("Insert Permission",DestinationPermission."Insert Permission") then
                                          DestinationPermission."Insert Permission" := "Insert Permission";
                                        if PermissionValueIsGreaterOrEqual("Modify Permission",DestinationPermission."Modify Permission") then
                                          DestinationPermission."Modify Permission" := "Modify Permission";
                                        if PermissionValueIsGreaterOrEqual("Delete Permission",DestinationPermission."Delete Permission") then
                                          DestinationPermission."Delete Permission" := "Delete Permission";
                                        if PermissionValueIsGreaterOrEqual("Execute Permission",DestinationPermission."Execute Permission") then
                                          DestinationPermission."Execute Permission" := "Execute Permission";
                                        DestinationPermission.MODIFY;
                                      end else begin
                                        DestinationPermission := SourcePermission;
                                        DestinationPermission."Role ID" := DestinationPermissionSet;
                                        DestinationPermission.INSERT;
                                      end;
                                    SetOperation::Exclude:
                                      begin
                                        DestinationPermission.SETRANGE("Role ID",DestinationPermissionSet);
                                        DestinationPermission.SETRANGE("Object Type","Object Type");
                                        if "Object ID" <> 0 then
                                          DestinationPermission.SETRANGE("Object ID","Object ID");
                                        if DestinationPermission.FINDSET then
                                          repeat
                                            if PermissionValueIsGreaterOrEqual("Read Permission",DestinationPermission."Read Permission") then
                                              DestinationPermission."Read Permission" := "Read Permission"::" ";
                                            if PermissionValueIsGreaterOrEqual("Insert Permission",DestinationPermission."Insert Permission") then
                                              DestinationPermission."Insert Permission" := "Insert Permission"::" ";
                                            if PermissionValueIsGreaterOrEqual("Modify Permission",DestinationPermission."Modify Permission") then
                                              DestinationPermission."Modify Permission" := "Modify Permission"::" ";
                                            if PermissionValueIsGreaterOrEqual("Delete Permission",DestinationPermission."Delete Permission") then
                                              DestinationPermission."Delete Permission" := "Delete Permission"::" ";
                                            if PermissionValueIsGreaterOrEqual("Execute Permission",DestinationPermission."Execute Permission") then
                                              DestinationPermission."Execute Permission" := "Execute Permission"::" ";
                                            DestinationPermission.MODIFY;
                                            if (DestinationPermission."Read Permission" = "Read Permission"::" ") and
                                               (DestinationPermission."Insert Permission" = "Read Permission"::" ") and
                                               (DestinationPermission."Modify Permission" = "Read Permission"::" ") and
                                               (DestinationPermission."Delete Permission" = "Read Permission"::" ") and
                                               (DestinationPermission."Execute Permission" = "Read Permission"::" ")
                                            then
                                              DestinationPermission.DELETE;
                                          until DestinationPermission.NEXT = 0;
                                      end;
                                  end;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1   ;    ;Container ;
                  Name=Parameter;
                  ContainerType=ContentArea }

      { 2   ;1   ;Field     ;
                  Name=DestinationPermissionSet;
                  CaptionML=ENU=Destination;
                  ToolTipML=ENU=Specifies the permission set for which permission sets are included or excluded.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DestinationPermissionSet;
                  TableRelation="Permission Set"."Role ID";
                  Editable=FALSE }

      { 4   ;1   ;Field     ;
                  Name=SetOperation;
                  CaptionML=ENU=Operation;
                  ToolTipML=ENU=Specifies if the batch job includes or excludes a permission set for the destination permission set.;
                  OptionCaptionML=ENU=Include,Exclude;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SetOperation }

      { 3   ;1   ;Field     ;
                  Name=SourcePermissionSet;
                  CaptionML=ENU=Source;
                  ToolTipML=ENU=Specifies which permission set is included or excluded for the destination permission set.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SourcePermissionSet;
                  TableRelation="Permission Set"."Role ID" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      DestinationPermissionSet@1000 : Code[20];
      SourcePermissionSet@1001 : Code[20];
      SetOperation@1002 : 'Include,Exclude';
      NoDestinationErr@1003 : TextConst 'ENU=No destination permission set has been set.';
      NoSourceErr@1004 : TextConst 'ENU=You must select a source permission set.';

    [External]
    PROCEDURE SetDestination@3(NewDestination@1000 : Code[20]);
    BEGIN
      DestinationPermissionSet := NewDestination;
    END;

    LOCAL PROCEDURE PermissionValueIsGreaterOrEqual@5(Left@1000 : '" ",Yes,Indirect';Right@1001 : '" ",Yes,Indirect') : Boolean;
    BEGIN
      // Returns (Left >= Right)
      case Left of
        Left::" ":
          exit(Right = Right::" ");
        Left::Yes:
          exit(true);
        Left::Indirect:
          exit(Right <> Right::Yes);
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

