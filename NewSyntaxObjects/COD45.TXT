OBJECT Codeunit 45 AutoFormatManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1001 : Record Currency;
      GLSetup@1000 : Record "General Ledger Setup";
      GLSetupRead@1002 : Boolean;
      Text012@1003 : TextConst 'ENU=<Precision,%1><Standard Format,0>';
      CurrFormatTxt@1004 : TextConst '@@@={LOCKED} Do not translate;ENU=<Custom,%3%2<Precision,%1><Standard Format,0>>';

    [External]
    PROCEDURE AutoFormatTranslate@12(AutoFormatType@1000 : Integer;AutoFormatExpr@1001 : Text[80]) : Text[80];
    VAR
      FormatSubtype@1002 : Text;
      AutoFormatPrefixedText@1004 : Text;
      AutoFormatCurrencyCode@1003 : Text;
      NumCommasInAutoFomatExpr@1005 : Integer;
    BEGIN
      if AutoFormatType = 0 then
        exit('');

      if not GetGLSetup then
        exit('');

      case AutoFormatType of
        1: // Amount
          begin
            if AutoFormatExpr = '' then
              exit(STRSUBSTNO(Text012,GLSetup."Amount Decimal Places"));
            if GetCurrency(COPYSTR(AutoFormatExpr,1,10)) and
               (Currency."Amount Decimal Places" <> '')
            then
              exit(STRSUBSTNO(Text012,Currency."Amount Decimal Places"));
            exit(STRSUBSTNO(Text012,GLSetup."Amount Decimal Places"));
          end;
        2: // Unit Amount
          begin
            if AutoFormatExpr = '' then
              exit(STRSUBSTNO(Text012,GLSetup."Unit-Amount Decimal Places"));
            if GetCurrency(COPYSTR(AutoFormatExpr,1,10)) and
               (Currency."Unit-Amount Decimal Places" <> '')
            then
              exit(STRSUBSTNO(Text012,Currency."Unit-Amount Decimal Places"));
            exit(STRSUBSTNO(Text012,GLSetup."Unit-Amount Decimal Places"));
          end;
        10: // Custom or AutoFormatExpr = '1[,<curr>[,<PrefixedText>]]' or '2[,<curr>[,<PrefixedText>]]'
          begin
            FormatSubtype := SELECTSTR(1,AutoFormatExpr);
            if FormatSubtype in ['1','2'] then begin
              NumCommasInAutoFomatExpr := STRLEN(AutoFormatExpr) - STRLEN(DELCHR(AutoFormatExpr,'=',','));
              if NumCommasInAutoFomatExpr >= 1 then
                AutoFormatCurrencyCode := SELECTSTR(2,AutoFormatExpr);
              if NumCommasInAutoFomatExpr >= 2 then
                AutoFormatPrefixedText := SELECTSTR(3,AutoFormatExpr);
              if AutoFormatPrefixedText <> '' then
                AutoFormatPrefixedText := AutoFormatPrefixedText + ' ';
            end else
              FormatSubtype := '';

            case FormatSubtype of
              '1':
                begin
                  if AutoFormatCurrencyCode = '' then
                    exit(STRSUBSTNO(CurrFormatTxt,GLSetup."Amount Decimal Places",GLSetup.GetCurrencySymbol,AutoFormatPrefixedText));
                  if GetCurrency(COPYSTR(AutoFormatCurrencyCode,1,10)) and
                     (Currency."Amount Decimal Places" <> '')
                  then
                    exit(STRSUBSTNO(CurrFormatTxt,Currency."Amount Decimal Places",Currency.GetCurrencySymbol,AutoFormatPrefixedText));
                  exit(STRSUBSTNO(CurrFormatTxt,GLSetup."Amount Decimal Places",GLSetup.GetCurrencySymbol,AutoFormatPrefixedText));
                end;
              '2':
                begin
                  if AutoFormatCurrencyCode = '' then
                    exit(
                      STRSUBSTNO(CurrFormatTxt,GLSetup."Unit-Amount Decimal Places",GLSetup.GetCurrencySymbol,AutoFormatPrefixedText));
                  if GetCurrency(COPYSTR(AutoFormatCurrencyCode,1,10)) and
                     (Currency."Unit-Amount Decimal Places" <> '')
                  then
                    exit(
                      STRSUBSTNO(CurrFormatTxt,Currency."Unit-Amount Decimal Places",Currency.GetCurrencySymbol,AutoFormatPrefixedText));
                  exit(
                    STRSUBSTNO(CurrFormatTxt,GLSetup."Unit-Amount Decimal Places",GLSetup.GetCurrencySymbol,AutoFormatPrefixedText));
                end;
              else
                exit('<Custom,' + AutoFormatExpr + '>');
            end;
          end;
      end;
    END;

    [External]
    PROCEDURE ReadRounding@14() : Decimal;
    BEGIN
      GetGLSetup;
      exit(GLSetup."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@15() : Boolean;
    BEGIN
      if not GLSetupRead then
        GLSetupRead := GLSetup.GET;
      exit(GLSetupRead);
    END;

    LOCAL PROCEDURE GetCurrency@16(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      if CurrencyCode = Currency.Code then
        exit(true);
      if CurrencyCode = '' then begin
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
        exit(true);
      end;
      exit(Currency.GET(CurrencyCode));
    END;

    BEGIN
    END.
  }
}

