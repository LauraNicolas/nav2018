OBJECT Codeunit 1306 Company Information Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyBankAccountTxt@1002 : TextConst 'ENU=CompanyBankAccount';
      XPAYMENTTxt@1001 : TextConst '@@@=Payment;ENU=PAYMENT';
      XPmtRegTxt@1000 : TextConst '@@@=Payment Registration;ENU=PMT REG';
      CompanyBankAccountPostGroupTxt@1003 : TextConst '@@@=Same as Bank Account Posting Group;ENU=OPERATING';

    LOCAL PROCEDURE UpdateGeneralJournalBatch@5(BankAccount@1000 : Record "Bank Account";JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      GenJournalBatch@1003 : Record "Gen. Journal Batch";
    BEGIN
      with GenJournalBatch do
        if GET(JournalTemplateName,JournalBatchName) then
          if ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") and ("Bal. Account No." = '') then begin
            VALIDATE("Bal. Account No.",BankAccount."No.");
            MODIFY;
          end;
    END;

    [External]
    PROCEDURE UpdateCompanyBankAccount@1(VAR CompanyInformation@1000 : Record "Company Information";BankAccountPostingGroup@1002 : Code[20];VAR BankAccount@1003 : Record "Bank Account");
    BEGIN
      // create or update existing company bank account with the information entered by the user
      // update general journal payment batches to point to the company bank account (unless a bank account is already specified in them)
      with CompanyInformation do begin
        if (("Bank Branch No." = '') and ("Bank Account No." = '')) and (("SWIFT Code" = '') and (IBAN = '')) then
          exit;
        UpdateBankAccount(BankAccount,CompanyInformation,BankAccountPostingGroup);
        UpdateGeneralJournalBatch(BankAccount,XPAYMENTTxt,XPmtRegTxt);
        UpdatePaymentRegistrationSetup(BankAccount,XPAYMENTTxt,XPmtRegTxt);
      end;
    END;

    LOCAL PROCEDURE UpdatePaymentRegistrationSetup@2(BankAccount@1000 : Record "Bank Account";JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      PaymentRegistrationSetup@1003 : Record "Payment Registration Setup";
    BEGIN
      if not PaymentRegistrationSetup.GET(USERID) then begin
        PaymentRegistrationSetup."User ID" := USERID;
        PaymentRegistrationSetup.INSERT;
      end;
      PaymentRegistrationSetup."Journal Template Name" := JournalTemplateName;
      PaymentRegistrationSetup."Journal Batch Name" := JournalBatchName;
      PaymentRegistrationSetup."Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type"::"Bank Account";
      PaymentRegistrationSetup."Bal. Account No." := BankAccount."No.";
      PaymentRegistrationSetup."Use this Account as Def." := true;
      PaymentRegistrationSetup."Auto Fill Date Received" := true;
      PaymentRegistrationSetup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateBankAccount@3(VAR BankAccount@1001 : Record "Bank Account";CompanyInformation@1000 : Record "Company Information";BankAccountPostingGroup@1002 : Code[20]);
    VAR
      BankAccPostingGroup@1004 : Record "Bank Account Posting Group";
      IsCompanyBankAcc@1003 : Boolean;
    BEGIN
      if BankAccount."No." = '' then
        BankAccount."No." := CompanyBankAccountTxt;

      with CompanyInformation do begin
        if not BankAccount.GET(BankAccount."No.") then begin
          BankAccount.INIT;
          BankAccount."No." := CompanyBankAccountTxt;
          BankAccount.INSERT;

          IsCompanyBankAcc := true;
        end;
        BankAccount.VALIDATE(Name,"Bank Name");
        BankAccount.VALIDATE("Bank Branch No.","Bank Branch No.");
        BankAccount.VALIDATE("Bank Account No.","Bank Account No.");
        BankAccount.VALIDATE("SWIFT Code","SWIFT Code");
        BankAccount.VALIDATE(IBAN,IBAN);
        if (BankAccountPostingGroup = '') and IsCompanyBankAcc then
          BankAccountPostingGroup := CompanyBankAccountPostGroupTxt;
        if BankAccPostingGroup.GET(BankAccountPostingGroup) then
          BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccPostingGroup.Code);
        BankAccount.MODIFY;
      end;
    END;

    [External]
    PROCEDURE GetCompanyBankAccount@6() : Code[20];
    BEGIN
      exit(CompanyBankAccountTxt);
    END;

    [External]
    PROCEDURE GetCompanyBankAccountPostingGroup@4() : Code[20];
    VAR
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      if BankAccount.GET(CompanyBankAccountTxt) then
        exit(BankAccount."Bank Acc. Posting Group");
      exit('');
    END;

    [External]
    PROCEDURE IsDemoCompany@11() : Boolean;
    VAR
      CompanyInformation@1000 : Record "Company Information";
    BEGIN
      if CompanyInformation.GET then;
      exit(CompanyInformation."Demo Company");
    END;

    [EventSubscriber(Table,79,OnAfterModifyEvent)]
    [External]
    PROCEDURE SetCompanyDisplayNameOnCompanyInformationModify@7(VAR Rec@1000 : Record "Company Information";VAR xRec@1001 : Record "Company Information";RunTrigger@1002 : Boolean);
    VAR
      Company@1003 : Record Company;
    BEGIN
      Company.LOCKTABLE;
      if Company.GET(COMPANYNAME) then
        if Company."Display Name" <> Rec.Name then begin
          Company.VALIDATE("Display Name",Rec.Name);
          Company.MODIFY(true);
        end;
    END;

    BEGIN
    END.
  }
}

