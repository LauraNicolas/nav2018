OBJECT Page 5495 Sales Order Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesOrders];
    SourceTable="Sales Order Entity Buffer";
    DelayedInsert=true;
    PageType=API;
    OnOpenPage=BEGIN
                 CheckPermissions;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                       GraphMgtSalesOrderBuffer.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalesOrderBuffer.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnModifyRecord=BEGIN
                     if xRec.Id <> Id then
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalesOrderBuffer.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnDeleteRecord=BEGIN
                     GraphMgtSalesOrderBuffer.PropagateOnDelete(Rec);

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                Name=Container21;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 19  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;

                ImplicitType=GUID }

    { 18  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=number];
                ApplicationArea=#All;
                SourceExpr="No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;

                ImplicitType=Code20 }

    { 29  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;

                ImplicitType=Code35 }

    { 28  ;2   ;Field     ;
                Name=orderDate;
                CaptionML=[@@@={Locked};
                           ENU=orderDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := true;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;

                ImplicitType=Date }

    { 14  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             if not Customer.FINDFIRST then
                               ERROR(CouldNotFindCustomerErr);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=GUID }

    { 26  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record Contact;
                             Customer@1001 : Record Customer;
                             GraphIntContact@1003 : Codeunit "Graph Int. - Contact";
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             if "Contact Graph Id" = '' then
                               ERROR(ContactIdHasToHaveValueErr);

                             if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) then
                               exit;

                             UpdateCustomerFromGraphContactId(Customer);

                             if Contact."Company No." = Customer."No." then begin
                               VALIDATE("Sell-To Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-To Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             end;
                           END;

                ImplicitType=Text250 }

    { 12  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=BEGIN
                             if Customer."No." <> '' then begin
                               if Customer."No." <> "Sell-to Customer No." then
                                 ERROR(CustomerValuesDontMatchErr);
                               exit;
                             end;

                             if not Customer.GET("Sell-to Customer No.") then
                               ERROR(CouldNotFindCustomerErr);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=Code20 }

    { 15  ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE;
                ImplicitType=Text50 }

    { 6   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress];
                ToolTipML=ENU=Specifies the billing address of the Sales Invoice.;
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := true;
                           END;

                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 22  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             if "Currency Id" = BlankGUID then
                               "Currency Code" := ''
                             else begin
                               Currency.SETRANGE(Id,"Currency Id");
                               if not Currency.FINDFIRST then
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=GUID }

    { 25  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             if Currency.Code <> '' then begin
                               if Currency.Code <> "Currency Code" then
                                 ERROR(CurrencyValuesDontMatchErr);
                               exit;
                             end;

                             if "Currency Code" = '' then
                               "Currency Id" := BlankGUID
                             else begin
                               if not Currency.GET("Currency Code") then
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=Text }

    { 23  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Prices Including VAT"));
                           END;

                ImplicitType=Boolean }

    { 27  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             if "Payment Terms Id" = BlankGUID then
                               "Payment Terms Code" := ''
                             else begin
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               if not PaymentTerms.FINDFIRST then
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=GUID }

    { 5   ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=paymentTerms];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Code";
                OnValidate=BEGIN
                             if PaymentTerms.Code <> '' then begin
                               if PaymentTerms.Code <> "Payment Terms Code" then
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Terms Code" = '' then
                               "Payment Terms Id" := BlankGUID
                             else begin
                               if not PaymentTerms.GET("Payment Terms Code") then
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=Code10 }

    { 3   ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;

                ImplicitType=Code20 }

    { 2   ;2   ;Field     ;
                Name=partialShipping;
                CaptionML=[@@@={Locked};
                           ENU=partialShipping];
                ApplicationArea=#All;
                SourceExpr=PartialShipping;
                OnValidate=BEGIN
                             ProcessPartialShipping;
                           END;

                ImplicitType=Boolean }

    { 4   ;2   ;Field     ;
                Name=requestedDeliveryDate;
                CaptionML=[@@@={Locked};
                           ENU=requestedDeliveryDate];
                ApplicationArea=#All;
                SourceExpr="Requested Delivery Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Requested Delivery Date"));
                           END;

                ImplicitType=Date }

    { 24  ;2   ;Part      ;
                Name=salesOrderLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines];
                ApplicationArea=#All;
                SubPageLink="Document Id"=FIELD(Id);
                PagePartID="Sales Order Line Entity";
                PartType=Page }

    { 11  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                             DiscountAmountSet := true;
                           END;

                ImplicitType=Decimal }

    { 10  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE;
                ImplicitType=Boolean }

    { 9   ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 8   ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount];
                ToolTipML=ENU=Specifies the total tax amount for the sales invoice.;
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;

                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;

                ImplicitType=Decimal }

    { 16  ;2   ;Field     ;
                Name=fullyShipped;
                CaptionML=[@@@={Locked};
                           ENU=fullyShipped];
                ApplicationArea=#All;
                SourceExpr="Completely Shipped";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Completely Shipped"));
                           END;

                ImplicitType=Boolean }

    { 13  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status];
                ToolTipML=ENU=Specifies the status of the Sales Invoice (cancelled, paid, on hold, created).;
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE;
                ImplicitType=Option }

    { 1   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      CannotChangeIDErr@1004 : TextConst '@@@={Locked};ENU=The id cannot be changed.';
      TempFieldBuffer@1001 : TEMPORARY Record "Field Buffer";
      Customer@1003 : Record Customer;
      Currency@1015 : Record Currency;
      PaymentTerms@1019 : Record "Payment Terms";
      GraphMgtSalesOrderBuffer@1007 : Codeunit "Graph Mgt - Sales Order Buffer";
      GraphMgtGeneralTools@1009 : Codeunit "Graph Mgt - General Tools";
      LCYCurrencyCode@1008 : Code[10];
      CurrencyCodeTxt@1006 : Text;
      BillingPostalAddressJSONText@1002 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CustomerNotProvidedErr@1024 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1025 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.';
      CouldNotFindCustomerErr@1005 : TextConst '@@@={Locked};ENU=The customer cannot be found.';
      PartialShipping@1010 : Boolean;
      ContactIdHasToHaveValueErr@1011 : TextConst '@@@={Locked};ENU=Contact Id must have a value set.';
      SalesOrderPermissionsErr@1023 : TextConst 'ENU=You do not have permissions to read Sales Orders.';
      CurrencyValuesDontMatchErr@1014 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1013 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1012 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.';
      PaymentTermsValuesDontMatchErr@1018 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1017 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1016 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.';
      DiscountAmountSet@1021 : Boolean;
      InvoiceDiscountAmount@1022 : Decimal;
      BlankGUID@1020 : GUID;
      DocumentDateSet@1027 : Boolean;
      DocumentDateVar@1026 : Date;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesOrder@1000 : Codeunit "Graph Mgt - Sales Order";
    BEGIN
      BillingPostalAddressJSONText := GraphMgtSalesOrder.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
      PartialShipping := ("Shipping Advice" = "Shipping Advice"::Partial);
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(DiscountAmountSet);
      CLEAR(InvoiceDiscountAmount);

      PartialShipping := false;
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      if TempFieldBuffer.FINDLAST then
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Invoice Entity Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      if ("Sell-to Customer No." = '') and
         ("Customer Id" = BlankGUID)
      then
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtSalesOrder@1000 : Codeunit "Graph Mgt - Sales Order";
    BEGIN
      if not BillingPostalAddressSet then
        exit;

      GraphMgtSalesOrder.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      if xRec."Sell-to Address" <> "Sell-to Address" then
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      if xRec."Sell-to Address 2" <> "Sell-to Address 2" then
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      if xRec."Sell-to City" <> "Sell-to City" then
        RegisterFieldSet(FIELDNO("Sell-to City"));

      if xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" then
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      if xRec."Sell-to Post Code" <> "Sell-to Post Code" then
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      if xRec."Sell-to County" <> "Sell-to County" then
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE ProcessPartialShipping@8();
    BEGIN
      if PartialShipping then
        "Shipping Advice" := "Shipping Advice"::Partial
      else
        "Shipping Advice" := "Shipping Advice"::Complete;

      RegisterFieldSet(FIELDNO("Shipping Advice"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record Customer);
    VAR
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      if not UpdateCustomer then begin
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := not TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      end;

      if UpdateCustomer then begin
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      end;
    END;

    LOCAL PROCEDURE CheckPermissions@4();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      if not SalesHeader.READPERMISSION then
        ERROR(SalesOrderPermissionsErr);
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record "Sales Header";
      SalesCalcDiscountByType@1000 : Codeunit "Sales - Calc Discount By Type";
    BEGIN
      if not DiscountAmountSet then begin
        GraphMgtSalesOrderBuffer.RedistributeInvoiceDiscounts(Rec);
        exit;
      end;

      SalesHeader.GET(SalesHeader."Document Type"::Order,"No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@7();
    VAR
      GraphMgtSalesOrderBuffer@1000 : Codeunit "Graph Mgt - Sales Order Buffer";
    BEGIN
      if not DocumentDateSet then
        exit;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      if DocumentDateSet then begin
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      end;

      GraphMgtSalesOrderBuffer.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    BEGIN
    END.
  }
}

