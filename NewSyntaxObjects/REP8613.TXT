OBJECT Report 8613 Create Item Journal Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Item Journal Lines;
    ProcessingOnly=true;
    OnPostReport=BEGIN
                   MESSAGE(Text004);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Item                ;
               DataItemTable=Item;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               CheckJournalTemplate;
                               CheckBatchName;
                               CheckPostingDate;

                               ItemJnlLine.SETRANGE("Journal Template Name",JournalTemplate);
                               ItemJnlLine.SETRANGE("Journal Batch Name",BatchName);
                               if ItemJnlLine.FINDLAST then
                                 LineNo := ItemJnlLine."Line No." + 10000
                               else
                                 LineNo := 10000;

                               ItemJnlBatch.GET(JournalTemplate,BatchName);
                               if TemplateCode <> '' then
                                 StdItemJnl.GET(JournalTemplate,TemplateCode);
                             END;

               OnAfterGetRecord=VAR
                                  StdItemJnlLine@1000 : Record "Standard Item Journal Line";
                                BEGIN
                                  ItemJnlLine.INIT;
                                  if GetStandardJournalLine then begin
                                    Initialize(StdItemJnl,ItemJnlBatch.Name);

                                    StdItemJnlLine.SETRANGE("Journal Template Name",StdItemJnl."Journal Template Name");
                                    StdItemJnlLine.SETRANGE("Standard Journal Code",StdItemJnl.Code);
                                    if StdItemJnlLine.FINDSET then
                                      repeat
                                        CopyItemJnlFromStdJnl(StdItemJnlLine,ItemJnlLine);
                                        ItemJnlLine.VALIDATE("Entry Type",EntryTypes);
                                        ItemJnlLine.VALIDATE("Item No.","No.");

                                        if PostingDate <> 0D then
                                          ItemJnlLine.VALIDATE("Posting Date",PostingDate);

                                        if DocumentDate <> 0D then begin
                                          ItemJnlLine.VALIDATE("Posting Date",DocumentDate);
                                          ItemJnlLine."Posting Date" := PostingDate;
                                        end;

                                        if not ItemJnlLine.INSERT(true) then
                                          ItemJnlLine.MODIFY(true);
                                      until StdItemJnlLine.NEXT = 0;
                                  end else begin
                                    ItemJnlLine.VALIDATE("Journal Template Name",ItemJnlLine.GETFILTER("Journal Template Name"));
                                    ItemJnlLine.VALIDATE("Journal Batch Name",BatchName);
                                    ItemJnlLine."Line No." := LineNo;
                                    LineNo := LineNo + 10000;

                                    ItemJnlLine.VALIDATE("Entry Type",EntryTypes);
                                    ItemJnlLine.VALIDATE("Item No.","No.");

                                    if PostingDate <> 0D then
                                      ItemJnlLine.VALIDATE("Posting Date",PostingDate);

                                    if DocumentDate <> 0D then begin
                                      ItemJnlLine.VALIDATE("Posting Date",DocumentDate);
                                      ItemJnlLine."Posting Date" := PostingDate;
                                    end;

                                    if not ItemJnlLine.INSERT(true) then
                                      ItemJnlLine.MODIFY(true);
                                  end;
                                END;

               ReqFilterFields="No.","Statistics Group","Vendor No.",Blocked }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if PostingDate = 0D then
                     PostingDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 2   ;2   ;Field     ;
                  Name=Entry Type;
                  CaptionML=ENU=Entry Type;
                  ToolTipML=ENU=Specifies the entry type.;
                  OptionCaptionML=ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EntryTypes }

      { 4   ;2   ;Field     ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               CheckPostingDate;
                             END;
                              }

      { 6   ;2   ;Field     ;
                  Name=Document Date;
                  CaptionML=ENU=Document Date;
                  ToolTipML=ENU=Specifies the document date that will be inserted on the created records.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocumentDate }

      { 12  ;2   ;Field     ;
                  Name=Journal Template;
                  CaptionML=ENU=Journal Template;
                  ToolTipML=ENU=Specifies the journal template that the item journal is based on.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=JournalTemplate;
                  TableRelation="Gen. Journal Batch".Name;
                  OnValidate=BEGIN
                               CheckJournalTemplate;
                             END;

                  OnLookup=VAR
                             ItemJnlTemplate@1001 : Record "Item Journal Template";
                             ItemJnlTemplates@1000 : Page "Item Journal Templates";
                           BEGIN
                             ItemJnlTemplate.SETRANGE(Type,ItemJnlTemplate.Type::Item);
                             ItemJnlTemplate.SETRANGE(Recurring,false);
                             ItemJnlTemplates.SETTABLEVIEW(ItemJnlTemplate);

                             ItemJnlTemplates.LOOKUPMODE := true;
                             ItemJnlTemplates.EDITABLE := false;
                             if ItemJnlTemplates.RUNMODAL = ACTION::LookupOK then begin
                               ItemJnlTemplates.GETRECORD(ItemJnlTemplate);
                               JournalTemplate := ItemJnlTemplate.Name;
                             end;
                           END;
                            }

      { 8   ;2   ;Field     ;
                  Name=Batch Name;
                  CaptionML=ENU=Batch Name;
                  ToolTipML=ENU=Specifies the name of the journal batch.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=BatchName;
                  OnValidate=BEGIN
                               CheckBatchName;
                             END;

                  OnLookup=VAR
                             ItemJnlBatches@1000 : Page "Item Journal Batches";
                           BEGIN
                             if JournalTemplate <> '' then begin
                               ItemJnlBatch.SETRANGE("Journal Template Name",JournalTemplate);
                               ItemJnlBatches.SETTABLEVIEW(ItemJnlBatch);
                             end;

                             ItemJnlBatches.LOOKUPMODE := true;
                             ItemJnlBatches.EDITABLE := false;
                             if ItemJnlBatches.RUNMODAL = ACTION::LookupOK then begin
                               ItemJnlBatches.GETRECORD(ItemJnlBatch);
                               BatchName := ItemJnlBatch.Name;
                             end;
                           END;
                            }

      { 10  ;2   ;Field     ;
                  Name=Standard Item Journal;
                  CaptionML=ENU=Standard Item Journal;
                  ToolTipML=ENU=Specifies the standard item journal that the batch job uses.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=TemplateCode;
                  TableRelation="Standard Item Journal".Code;
                  OnLookup=VAR
                             StdItemJnl1@1001 : Record "Standard Item Journal";
                             StdItemJnls@1000 : Page "Standard Item Journals";
                           BEGIN
                             if JournalTemplate <> '' then begin
                               StdItemJnl1.SETRANGE("Journal Template Name",JournalTemplate);
                               StdItemJnls.SETTABLEVIEW(StdItemJnl1);
                             end;

                             StdItemJnls.LOOKUPMODE := true;
                             StdItemJnls.EDITABLE := false;
                             if StdItemJnls.RUNMODAL = ACTION::LookupOK then begin
                               StdItemJnls.GETRECORD(StdItemJnl1);
                               TemplateCode := StdItemJnl1.Code;
                             end;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      StdItemJnl@1007 : Record "Standard Item Journal";
      ItemJnlBatch@1006 : Record "Item Journal Batch";
      LastItemJnlLine@1012 : Record "Item Journal Line";
      ItemJnlLine@1011 : Record "Item Journal Line";
      EntryTypes@1000 : 'Purchase,Sale,"Positive Adjmt.","Negative Adjmt."';
      PostingDate@1001 : Date;
      DocumentDate@1002 : Date;
      BatchName@1003 : Code[10];
      TemplateCode@1004 : Code[20];
      LineNo@1008 : Integer;
      JournalTemplate@1015 : Text[10];
      Text001@1018 : TextConst 'ENU=Item Journal Template name is blank.';
      Text002@1017 : TextConst 'ENU=Item Journal Batch name is blank.';
      Text004@1005 : TextConst 'ENU=Item Journal lines are successfully created.';
      PostingDateIsEmptyErr@1009 : TextConst 'ENU=The Posting Date is empty.';

    LOCAL PROCEDURE GetStandardJournalLine@3() : Boolean;
    VAR
      StdItemJnlLine@1000 : Record "Standard Item Journal Line";
    BEGIN
      if TemplateCode = '' then
        exit;
      StdItemJnlLine.SETRANGE("Journal Template Name",StdItemJnl."Journal Template Name");
      StdItemJnlLine.SETRANGE("Standard Journal Code",StdItemJnl.Code);
      exit(StdItemJnlLine.FINDFIRST);
    END;

    [External]
    PROCEDURE Initialize@2(StdItemJnl@1000 : Record "Standard Item Journal";JnlBatchName@1001 : Code[10]);
    BEGIN
      ItemJnlLine."Journal Template Name" := StdItemJnl."Journal Template Name";
      ItemJnlLine."Journal Batch Name" := JnlBatchName;
      ItemJnlLine.SETRANGE("Journal Template Name",StdItemJnl."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",JnlBatchName);

      LastItemJnlLine.SETRANGE("Journal Template Name",StdItemJnl."Journal Template Name");
      LastItemJnlLine.SETRANGE("Journal Batch Name",JnlBatchName);

      if LastItemJnlLine.FINDLAST then;
    END;

    LOCAL PROCEDURE CopyItemJnlFromStdJnl@7(StdItemJnlLine@1000 : Record "Standard Item Journal Line";VAR ItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine."Line No." := 0;
      ItemJnlLine.SetUpNewLine(LastItemJnlLine);
      if LastItemJnlLine."Line No." <> 0 then
        ItemJnlLine."Line No." := LastItemJnlLine."Line No." + 10000
      else
        ItemJnlLine."Line No." := 10000;

      ItemJnlLine.TRANSFERFIELDS(StdItemJnlLine,false);

      if (ItemJnlLine."Item No." <> '') and (ItemJnlLine."Unit Amount" = 0) then
        ItemJnlLine.RecalculateUnitAmount;

      if (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Output) and
         (ItemJnlLine."Value Entry Type" <> ItemJnlLine."Value Entry Type"::Revaluation)
      then
        ItemJnlLine."Invoiced Quantity" := 0
      else
        ItemJnlLine."Invoiced Quantity" := ItemJnlLine.Quantity;
      ItemJnlLine.TESTFIELD("Qty. per Unit of Measure");
      ItemJnlLine."Invoiced Qty. (Base)" := ROUND(ItemJnlLine."Invoiced Quantity" * ItemJnlLine."Qty. per Unit of Measure",0.00001);

      ItemJnlLine.INSERT(true);

      LastItemJnlLine := ItemJnlLine;
    END;

    [External]
    PROCEDURE InitializeRequest@1(EntryTypesFrom@1000 : Option;PostingDateFrom@1001 : Date;DocumentDateFrom@1002 : Date);
    BEGIN
      EntryTypes := EntryTypesFrom;
      PostingDate := PostingDateFrom;
      DocumentDate := DocumentDateFrom;
    END;

    [External]
    PROCEDURE InitializeRequestTemplate@4(JournalTemplateFrom@1000 : Text[10];BatchNameFrom@1001 : Code[10];TemplateCodeFrom@1002 : Code[20]);
    BEGIN
      JournalTemplate := JournalTemplateFrom;
      BatchName := BatchNameFrom;
      TemplateCode := TemplateCodeFrom;
    END;

    LOCAL PROCEDURE CheckPostingDate@24();
    BEGIN
      if PostingDate = 0D then
        ERROR(PostingDateIsEmptyErr);
    END;

    LOCAL PROCEDURE CheckBatchName@32();
    BEGIN
      if BatchName = '' then
        ERROR(Text002);
    END;

    LOCAL PROCEDURE CheckJournalTemplate@33();
    BEGIN
      if JournalTemplate = '' then
        ERROR(Text001);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

