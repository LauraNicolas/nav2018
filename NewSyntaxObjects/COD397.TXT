OBJECT Codeunit 397 Mail
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@="%1 = Contact Table Caption (eg. No registered email addresses found for this Contact.)";ENU=No registered email addresses exist for this %1.';
      OutlookMessageHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.IOutlookMessage" RUNONCLIENT;

    [Internal]
    PROCEDURE OpenNewMessage@1(ToName@1000 : Text);
    BEGIN
      Initialize;
      NewMessage(ToName,'','','','','',true);
    END;

    [Internal]
    PROCEDURE NewMessageAsync@1000(ToAddresses@1001 : Text;CcAddresses@1002 : Text;BccAddresses@1000 : Text;Subject@1003 : Text;Body@1004 : Text;AttachFilename@1005 : Text;ShowNewMailDialogOnSend@1006 : Boolean) : Boolean;
    BEGIN
      exit(CreateAndSendMessage(ToAddresses,CcAddresses,BccAddresses,Subject,Body,AttachFilename,ShowNewMailDialogOnSend,false));
    END;

    [Internal]
    PROCEDURE NewMessage@2(ToAddresses@1001 : Text;CcAddresses@1002 : Text;BccAddresses@1000 : Text;Subject@1003 : Text;Body@1004 : Text;AttachFilename@1005 : Text;ShowNewMailDialogOnSend@1006 : Boolean) : Boolean;
    BEGIN
      exit(CreateAndSendMessage(ToAddresses,CcAddresses,BccAddresses,Subject,Body,AttachFilename,ShowNewMailDialogOnSend,true));
    END;

    LOCAL PROCEDURE CreateAndSendMessage@1001(ToAddresses@1001 : Text;CcAddresses@1002 : Text;BccAddresses@1007 : Text;Subject@1003 : Text;Body@1004 : Text;AttachFilename@1005 : Text;ShowNewMailDialogOnSend@1006 : Boolean;RunModal@1000 : Boolean) : Boolean;
    BEGIN
      Initialize;

      CreateMessage(ToAddresses,CcAddresses,BccAddresses,Subject,Body,ShowNewMailDialogOnSend,RunModal);
      AttachFile(AttachFilename);

      exit(Send);
    END;

    [Internal]
    PROCEDURE CreateMessage@26(ToAddresses@1001 : Text;CcAddresses@1002 : Text;BccAddresses@1007 : Text;Subject@1003 : Text;Body@1004 : Text;ShowNewMailDialogOnSend@1006 : Boolean;RunModal@1000 : Boolean);
    BEGIN
      Initialize;

      OutlookMessageHelper.Recipients := ToAddresses;
      OutlookMessageHelper.CarbonCopyRecipients := CcAddresses;
      OutlookMessageHelper.BlindCarbonCopyRecipients := BccAddresses;
      OutlookMessageHelper.Subject := Subject;
      OutlookMessageHelper.BodyFormat := 2;
      OutlookMessageHelper.ShowNewMailDialogOnSend := ShowNewMailDialogOnSend;
      OutlookMessageHelper.NewMailDialogIsModal := RunModal;
      OutlookMessageHelper.AttachmentFileNames.Clear;
      AddBodyline(Body);
    END;

    [Internal]
    PROCEDURE AddBodyline@5(TextLine@1000 : Text) : Boolean;
    BEGIN
      Initialize;

      if TextLine <> '' then
        OutlookMessageHelper.Body.Append(FormatTextForHtml(TextLine));
      exit(true);
    END;

    [Internal]
    PROCEDURE AttachFile@21(Filename@1000 : Text);
    BEGIN
      Initialize;

      if Filename <> '' then
        OutlookMessageHelper.AttachmentFileNames.Add(Filename);
    END;

    [Internal]
    PROCEDURE Send@4() : Boolean;
    BEGIN
      Initialize;
      exit(OutlookMessageHelper.Send);
    END;

    [Internal]
    PROCEDURE GetErrorDesc@7() : Text;
    BEGIN
      Initialize;
      if not ISNULL(OutlookMessageHelper.LastException) then
        exit(OutlookMessageHelper.LastException.Message);
    END;

    [External]
    PROCEDURE CollectAddresses@9(ContactNo@1000 : Code[20];VAR ContactThrough@1002 : Record "Communication Method";ShowAddresses@1008 : Boolean) : Text[260];
    VAR
      Contact@1003 : Record Contact;
    BEGIN
      ContactThrough.RESET;
      ContactThrough.DELETEALL;
      if not Contact.GET(ContactNo) then
        exit;

      CollectContactAddresses(ContactThrough,ContactNo);

      // Get linked Company Addresses
      if (Contact.Type = Contact.Type::Person) and (Contact."Company No." <> '') then
        CollectContactAddresses(ContactThrough,Contact."Company No.");

      if ShowAddresses then
        if ContactThrough.FIND('-') then begin
          if PAGE.RUNMODAL(PAGE::"Contact Through",ContactThrough) = ACTION::LookupOK then
            exit(ContactThrough."E-Mail");
        end else
          ERROR(Text001,Contact.TABLECAPTION);
    END;

    LOCAL PROCEDURE TrimCode@8(Code@1001 : Code[20]) TrimString : Text[20];
    BEGIN
      TrimString := COPYSTR(Code,1,1) + LOWERCASE(COPYSTR(Code,2,STRLEN(Code) - 1))
    END;

    [External]
    PROCEDURE ValidateEmail@12(VAR ContactThrough@1000 : Record "Communication Method";EMailToValidate@1001 : Text) EMailExists : Boolean;
    BEGIN
      ContactThrough.RESET;
      if ContactThrough.FINDFIRST then begin
        ContactThrough.SETRANGE("E-Mail",COPYSTR(EMailToValidate,1,MAXSTRLEN(ContactThrough."E-Mail")));
        EMailExists := not ContactThrough.ISEMPTY;
      end;
    END;

    LOCAL PROCEDURE CollectContactAddresses@14(VAR ContactThrough@1000 : Record "Communication Method";ContactNo@1001 : Code[20]);
    VAR
      Contact@1007 : Record Contact;
      ContAltAddr@1005 : Record "Contact Alt. Address";
      ContAltAddrDateRange@1004 : Record "Contact Alt. Addr. Date Range";
      KeyNo@1002 : Integer;
    BEGIN
      if not Contact.GET(ContactNo) then
        exit;
      with ContactThrough do begin
        if FINDLAST then
          KeyNo := Key + 1
        else
          KeyNo := 1;

        if Contact."E-Mail" <> '' then begin
          Key := KeyNo;
          "Contact No." := ContactNo;
          Name := Contact.Name;
          Description := COPYSTR(Contact.FIELDCAPTION("E-Mail"),1,MAXSTRLEN(Description));
          "E-Mail" := Contact."E-Mail";
          Type := Contact.Type;
          INSERT;
          KeyNo := KeyNo + 1;
        end;

        // Alternative address
        ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
        ContAltAddrDateRange.SETRANGE("Contact No.",ContactNo);
        ContAltAddrDateRange.SETRANGE("Starting Date",0D,TODAY);
        ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',TODAY,0D);
        if ContAltAddrDateRange.FINDSET then
          repeat
            if ContAltAddr.GET(Contact."No.",ContAltAddrDateRange."Contact Alt. Address Code") then
              if ContAltAddr."E-Mail" <> '' then begin
                Key := KeyNo;
                Description :=
                  COPYSTR(TrimCode(ContAltAddr.Code) + ' - ' + ContAltAddr.FIELDCAPTION("E-Mail"),1,MAXSTRLEN(Description));
                "E-Mail" := ContAltAddr."E-Mail";
                Type := Contact.Type;
                INSERT;
                KeyNo := KeyNo + 1;
              end;
          until ContAltAddrDateRange.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE Initialize@11();
    VAR
      OutlookMessageFactory@1001 : Codeunit "Outlook Message Factory";
    BEGIN
      if ISNULL(OutlookMessageHelper) then
        OutlookMessageFactory.CreateOutlookMessage(OutlookMessageHelper);
    END;

    [Internal]
    PROCEDURE TryInitializeOutlook@1002() : Boolean;
    BEGIN
      Initialize;
      exit(OutlookMessageHelper.CanInitializeOutlook);
    END;

    [External]
    PROCEDURE CollectCurrentUserEmailAddresses@6(VAR TempNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer");
    VAR
      PermissionManager@1001 : Codeunit "Permission Manager";
    BEGIN
      AddAddressToCollection('UserSetup',GetEmailFromUserSetupTable,TempNameValueBuffer);
      AddAddressToCollection('ContactEmail',GetContactEmailFromUserTable,TempNameValueBuffer);
      AddAddressToCollection('AuthEmail',GetAuthenticationEmailFromUserTable,TempNameValueBuffer);
      if not PermissionManager.SoftwareAsAService then
        AddAddressToCollection('AD',GetActiveDirectoryMailFromUser,TempNameValueBuffer);
      AddAddressToCollection('SMTPSetup',GetBasicAuthAddressFromSMTPSetup,TempNameValueBuffer);
    END;

    LOCAL PROCEDURE AddAddressToCollection@20(EmailKey@1003 : Text;EmailAddress@1000 : Text;VAR TempNameValueBuffer@1001 : TEMPORARY Record "Name/Value Buffer") : Boolean;
    VAR
      NextID@1002 : Integer;
    BEGIN
      if EmailAddress = '' then
        exit;

      with TempNameValueBuffer do begin
        RESET;
        if FINDSET then
          repeat
            if UPPERCASE(Value) = UPPERCASE(EmailAddress) then
              exit(false);
          until NEXT = 0;
        if FINDLAST then
          NextID := ID + 1
        else
          NextID := 1;

        INIT;

        ID := NextID;
        Name := COPYSTR(EmailKey,1,MAXSTRLEN(Name));
        Value := COPYSTR(EmailAddress,1,MAXSTRLEN(Value));
        INSERT;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE GetBasicAuthAddressFromSMTPSetup@17() : Text;
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
    BEGIN
      with SMTPMailSetup do begin
        if not FINDFIRST then
          exit;
        if Authentication = Authentication::Basic then
          if "User ID" <> '' then
            if STRPOS("User ID",'@') > 0 then
              exit("User ID");
      end;
    END;

    LOCAL PROCEDURE GetActiveDirectoryMailFromUser@16() : Text;
    VAR
      Email@1003 : Text;
      Handled@1001 : Boolean;
    BEGIN
      OnGetEmailAddressFromActiveDirectory(Email,Handled);
      if Handled then
        exit(Email);
      exit(GetEmailAddressFromActiveDirectory);
    END;

    LOCAL PROCEDURE GetEmailAddressFromActiveDirectory@24() : Text;
    VAR
      FileManagement@1000 : Codeunit "File Management";
      MailHelpers@1002 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.MailHelpers" RUNONCLIENT;
    BEGIN
      if FileManagement.CanRunDotNetOnClient then
        if CANLOADTYPE(MailHelpers) then
          exit(MailHelpers.TryGetEmailAddressFromActiveDirectory);
    END;

    LOCAL PROCEDURE GetAuthenticationEmailFromUserTable@15() : Text;
    VAR
      User@1000 : Record User;
    BEGIN
      User.SETRANGE("User Name",USERID);
      if User.FINDFIRST then
        exit(User."Authentication Email");
    END;

    LOCAL PROCEDURE GetContactEmailFromUserTable@10() : Text;
    VAR
      User@1000 : Record User;
    BEGIN
      User.SETRANGE("User Name",USERID);
      if User.FINDFIRST then
        exit(User."Contact Email");
    END;

    LOCAL PROCEDURE GetEmailFromUserSetupTable@13() : Text;
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      UserSetup.SETRANGE("User ID",USERID);
      if UserSetup.FINDFIRST then
        exit(UserSetup."E-Mail");
    END;

    [External]
    PROCEDURE FormatTextForHtml@3(Text@1003 : Text) : Text;
    VAR
      String@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Char10@1001 : Char;
      Char13@1000 : Char;
    BEGIN
      if Text <> '' then begin
        Char13 := 13;
        Char10 := 10;
        String := Text;
        exit(String.Replace(FORMAT(Char13) + FORMAT(Char10),'<br />'));
      end;

      exit('');
    END;

    [Integration]
    PROCEDURE OnGetEmailAddressFromActiveDirectory@22(VAR Email@1001 : Text;VAR Handled@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

