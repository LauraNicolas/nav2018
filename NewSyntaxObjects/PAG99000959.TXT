OBJECT Page 99000959 Order Promising Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Order Promising Lines;
    InsertAllowed=false;
    SourceTable="Order Promising Line";
    DataCaptionExpr=AvailabilityMgt.GetCaption;
    SourceTableView=SORTING("Requested Shipment Date");
    PageType=Worksheet;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    OnInit=BEGIN
             AcceptButtonEnable := true;
           END;

    OnOpenPage=VAR
                 SalesHeader@1000 : Record "Sales Header";
                 ServHeader@1001 : Record "Service Header";
                 Job@1002 : Record Job;
               BEGIN
                 OrderPromisingCalculationDone := false;
                 Accepted := false;
                 if GETFILTER("Source ID") <> '' then
                   case CrntSourceType of
                     "Source Type"::"Service Order":
                       begin
                         ServHeader."Document Type" := ServHeader."Document Type"::Order;
                         ServHeader."No." := GETRANGEMIN("Source ID");
                         ServHeader.FIND;
                         SetServHeader(ServHeader);
                       end;
                     "Source Type"::Job:
                       begin
                         Job.Status := Job.Status::Open;
                         Job."No." := GETRANGEMIN("Source ID");
                         Job.FIND;
                         SetJob(Job);
                       end;
                     else
                       SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
                       SalesHeader."No." := GETRANGEMIN("Source ID");
                       SalesHeader.FIND;
                       SetSalesHeader(SalesHeader);
                       AcceptButtonEnable := SalesHeader.Status = SalesHeader.Status::Open;
                   end;
               END;

    OnClosePage=VAR
                  CapableToPromise@1000 : Codeunit "Capable to Promise";
                BEGIN
                  if Accepted = false then
                    CapableToPromise.RemoveReqLines(CrntSourceID,0,0,true);
                END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 9       ;1   ;ActionGroup;
                      Name=&Calculate;
                      CaptionML=ENU=&Calculate;
                      Image=Calculate }
      { 10      ;2   ;Action    ;
                      Name=AvailableToPromise;
                      CaptionML=ENU=Available-to-Promise;
                      ToolTipML=ENU=Calculate the delivery date of the customerÂs order because the items are available, either in inventory or on planned receipts, based on the reservation system. The function performs an availability check of the unreserved quantities in inventory with regard to planned production, purchases, transfers, and sales returns.;
                      ApplicationArea=#Planning;
                      Image=AvailableToPromise;
                      OnAction=BEGIN
                                 CheckCalculationDone;
                                 AvailabilityMgt.CalcAvailableToPromise(Rec);
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=CapableToPromise;
                      CaptionML=ENU=Capable-to-Promise;
                      ToolTipML=ENU=Calculate the earliest date that the item can be available if it is to be produced, purchased, or transferred, assuming that the item is not in inventory and no orders are scheduled. This function is useful for "what if" scenarios.;
                      ApplicationArea=#Planning;
                      Image=CapableToPromise;
                      OnAction=BEGIN
                                 CheckCalculationDone;
                                 AvailabilityMgt.CalcCapableToPromise(Rec,CrntSourceID);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;Action    ;
                      Name=AcceptButton;
                      CaptionML=ENU=&Accept;
                      ToolTipML=ENU=Accept the earliest shipment date available.;
                      ApplicationArea=#Planning;
                      Promoted=true;
                      Enabled=AcceptButtonEnable;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReqLine@1001 : Record "Requisition Line";
                               BEGIN
                                 Accepted := true;
                                 AvailabilityMgt.UpdateSource(Rec);
                                 ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
                                 ReqLine.SETRANGE("Order Promising ID",CrntSourceID);
                                 ReqLine.MODIFYALL("Accept Action Message",true);
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group17 }

    { 19  ;2   ;Field     ;
                Name=CrntSourceID;
                CaptionML=ENU=No.;
                ToolTipML=ENU=Specifies the number of the item.;
                ApplicationArea=#Planning;
                SourceExpr=CrntSourceID;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 16  ;1   ;Group     ;
                Name=Group16;
                Editable=TRUE;
                GroupType=Repeater }

    { 29  ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the item number of the item that is on the promised order.;
                ApplicationArea=#Planning;
                SourceExpr="Item No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 13  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the description of the entry.;
                ApplicationArea=#Planning;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 1   ;2   ;Field     ;
                Name=Requested Delivery Date;
                ToolTipML=ENU=Specifies the requested delivery date for the entry.;
                ApplicationArea=#Planning;
                SourceExpr="Requested Delivery Date";
                Editable=FALSE;
                ImplicitType=Date }

    { 26  ;2   ;Field     ;
                Name=Requested Shipment Date;
                ToolTipML=ENU=Specifies the delivery date that the customer requested, minus the shipping time.;
                ApplicationArea=#Planning;
                SourceExpr="Requested Shipment Date";
                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name=Planned Delivery Date;
                ToolTipML=ENU=Specifies the planned date that the shipment will be delivered at the customer's address.  If the customer requests a delivery date, the program calculates whether the items will be available for delivery on this date. If the items are available, the planned delivery date will be the same as the requested delivery date. If not, the program calculates the date that the items are available for delivery and enters this date in the Planned Delivery Date field.;
                ApplicationArea=#Planning;
                SourceExpr="Planned Delivery Date";
                ImplicitType=Date }

    { 6   ;2   ;Field     ;
                Name=Original Shipment Date;
                ToolTipML=ENU=Specifies the shipment date of the entry.;
                ApplicationArea=#Planning;
                SourceExpr="Original Shipment Date";
                Editable=FALSE;
                ImplicitType=Date }

    { 8   ;2   ;Field     ;
                Name=Earliest Shipment Date;
                ToolTipML=ENU=Specifies the Capable to Promise function as the earliest possible shipment date for the item.;
                ApplicationArea=#Planning;
                SourceExpr="Earliest Shipment Date";
                ImplicitType=Date }

    { 15  ;2   ;Field     ;
                Name=Quantity;
                ToolTipML=ENU=Specifies the number of units, calculated by subtracting the reserved quantity from the outstanding quantity in the Sales Line table.;
                ApplicationArea=#Planning;
                SourceExpr=Quantity;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 3   ;2   ;Field     ;
                Name=Required Quantity;
                ToolTipML=ENU=Specifies the quantity required for order promising lines.;
                ApplicationArea=#Planning;
                SourceExpr="Required Quantity";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 5   ;2   ;Field     ;
                Name=Availability;
                CaptionML=ENU=Availability;
                ToolTipML=ENU=Specifies how many units of the item on the order promising line are available.;
                ApplicationArea=#Planning;
                DecimalPlaces=0:5;
                SourceExpr=CalcAvailability;
                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=Unavailability Date;
                ToolTipML=ENU=Specifies the date when the order promising line is no longer available.;
                ApplicationArea=#Planning;
                SourceExpr="Unavailability Date";
                Editable=FALSE;
                ImplicitType=Date }

    { 20  ;2   ;Field     ;
                Name=Unavailable Quantity;
                ToolTipML=ENU=Specifies the quantity of items that are not available for the requested delivery date on the order.;
                ApplicationArea=#Planning;
                SourceExpr="Unavailable Quantity";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 22  ;2   ;Field     ;
                Name=Unit of Measure Code;
                ToolTipML=ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                ApplicationArea=#Planning;
                SourceExpr="Unit of Measure Code";
                Editable=FALSE;
                ImplicitType=Code10 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      AvailabilityMgt@1004 : Codeunit AvailabilityManagement;
      Accepted@1005 : Boolean;
      CrntSourceID@1007 : Code[20];
      CrntSourceType@1010 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry","Prod. Order Line","Prod. Order Component","Planning Line","Planning Component",Transfer,"Service Order",Job';
      AcceptButtonEnable@19001938 : Boolean INDATASET;
      OrderPromisingCalculationDone@1000 : Boolean;
      Text000@1001 : TextConst 'ENU=The order promising lines are already calculated. You must close and open the window again to perform a new calculation.';

    [External]
    PROCEDURE SetSalesHeader@24(VAR CrntSalesHeader@1000 : Record "Sales Header");
    BEGIN
      AvailabilityMgt.SetSalesHeader(Rec,CrntSalesHeader);

      CrntSourceType := CrntSourceType::Sales;
      CrntSourceID := CrntSalesHeader."No.";
    END;

    [External]
    PROCEDURE SetServHeader@1(VAR CrntServHeader@1000 : Record "Service Header");
    BEGIN
      AvailabilityMgt.SetServHeader(Rec,CrntServHeader);

      CrntSourceType := CrntSourceType::"Service Order";
      CrntSourceID := CrntServHeader."No.";
    END;

    [External]
    PROCEDURE SetJob@2(VAR CrntJob@1000 : Record Job);
    BEGIN
      AvailabilityMgt.SetJob(Rec,CrntJob);
      CrntSourceType := CrntSourceType::Job;
      CrntSourceID := CrntJob."No.";
    END;

    [External]
    PROCEDURE SetSourceType@3(SourceType@1000 : Option);
    BEGIN
      CrntSourceType := SourceType;
    END;

    LOCAL PROCEDURE CheckCalculationDone@4();
    BEGIN
      if OrderPromisingCalculationDone then
        ERROR(Text000);
      OrderPromisingCalculationDone := true;
    END;

    BEGIN
    END.
  }
}

