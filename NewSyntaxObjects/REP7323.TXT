OBJECT Report 7323 Create Invt Put-away/Pick/Mvmt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Invt. Put-away/Pick/Movement;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  if not CreatePutAway and not (CreatePick or CreateMovement)then
                    ERROR(Text008);

                  CreateInvtPickMovement.SetInvtMovement(CreateMovement);
                END;

    OnPostReport=BEGIN
                   TempWhseActivHdr.DELETEALL;
                 END;

  }
  DATASET
  {
    { 9356;    ;DataItem;Warehouse Request   ;
               DataItemTable="Warehouse Request";
               DataItemTableView=SORTING("Source Document","Source No.");
               OnPreDataItem=BEGIN
                               if CreatePutAway and not (CreatePick or CreateMovement) then
                                 SETRANGE(Type,Type::Inbound);
                               if not CreatePutAway and (CreatePick or CreateMovement) then
                                 SETRANGE(Type,Type::Outbound);

                               Window.OPEN(
                                 Text001 +
                                 Text002 +
                                 Text003);

                               DocumentCreated := false;

                               if CreatePick or CreateMovement then
                                 CreateInvtPickMovement.SetReportGlobals(PrintDocument,ShowError);
                             END;

               OnAfterGetRecord=VAR
                                  ATOMvmntCreated@1001 : Integer;
                                  TotalATOMvmtToBeCreated@1002 : Integer;
                                BEGIN
                                  Window.UPDATE(1,"Source Document");
                                  Window.UPDATE(2,"Source No.");

                                  case Type of
                                    Type::Inbound:
                                      TotalPutAwayCounter += 1;
                                    Type::Outbound:
                                      if CreatePick then
                                        TotalPickCounter += 1
                                      else
                                        TotalMovementCounter += 1;
                                  end;

                                  if CheckWhseRequest("Warehouse Request") then
                                    CurrReport.SKIP;

                                  if ((Type = Type::Inbound) and (WhseActivHeader.Type <> WhseActivHeader.Type::"Invt. Put-away")) or
                                     ((Type = Type::Outbound) and ((WhseActivHeader.Type <> WhseActivHeader.Type::"Invt. Pick") and
                                                                   (WhseActivHeader.Type <> WhseActivHeader.Type::"Invt. Movement"))) or
                                     ("Source Type" <> WhseActivHeader."Source Type") or
                                     ("Source Subtype" <> WhseActivHeader."Source Subtype") or
                                     ("Source No." <> WhseActivHeader."Source No.") or
                                     ("Location Code" <> WhseActivHeader."Location Code")
                                  then begin
                                    case Type of
                                      Type::Inbound:
                                        if not CreateInvtPutAway.CheckSourceDoc("Warehouse Request") then
                                          CurrReport.SKIP;
                                      Type::Outbound:
                                        if not CreateInvtPickMovement.CheckSourceDoc("Warehouse Request") then
                                          CurrReport.SKIP;
                                    end;
                                    InitWhseActivHeader;
                                  end;

                                  case Type of
                                    Type::Inbound:
                                      begin
                                        CreateInvtPutAway.SetWhseRequest("Warehouse Request",true);
                                        CreateInvtPutAway.AutoCreatePutAway(WhseActivHeader);
                                      end;
                                    Type::Outbound:
                                      begin
                                        CreateInvtPickMovement.SetWhseRequest("Warehouse Request",true);
                                        CreateInvtPickMovement.AutoCreatePickOrMove(WhseActivHeader);
                                      end;
                                  end;

                                  if WhseActivHeader."No." <> '' then begin
                                    DocumentCreated := true;
                                    case Type of
                                      Type::Inbound:
                                        PutAwayCounter := PutAwayCounter + 1;
                                      Type::Outbound:
                                        if CreatePick then begin
                                          PickCounter := PickCounter + 1;

                                          CreateInvtPickMovement.GetATOMovementsCounters(ATOMvmntCreated,TotalATOMvmtToBeCreated);
                                          MovementCounter += ATOMvmntCreated;
                                          TotalMovementCounter += TotalATOMvmtToBeCreated;
                                        end else
                                          MovementCounter += 1;
                                    end;
                                    if PrintDocument then
                                      InsertTempWhseActivHdr;
                                    COMMIT;
                                  end;
                                END;

               OnPostDataItem=VAR
                                ExpiredItemMessageText@1000 : Text[100];
                                Msg@1002 : Text;
                              BEGIN
                                ExpiredItemMessageText := CreateInvtPickMovement.GetExpiredItemMessage;
                                if TempWhseActivHdr.FIND('-') then
                                  PrintNewDocuments;

                                Window.CLOSE;
                                if not SuppressMessagesState then
                                  if DocumentCreated then begin
                                    if PutAwayCounter > 0 then
                                      AddToText(Msg,STRSUBSTNO(Text005,WhseActivHeader.Type::"Invt. Put-away",PutAwayCounter,TotalPutAwayCounter));
                                    if PickCounter > 0 then
                                      AddToText(Msg,STRSUBSTNO(Text005,WhseActivHeader.Type::"Invt. Pick",PickCounter,TotalPickCounter));
                                    if MovementCounter > 0 then
                                      AddToText(Msg,STRSUBSTNO(Text005,WhseActivHeader.Type::"Invt. Movement",MovementCounter,TotalMovementCounter));

                                    if CreatePutAway or CreatePick then
                                      Msg += ExpiredItemMessageText;

                                    MESSAGE(Msg);
                                  end else begin
                                    Msg := Text004 + ' ' + ExpiredItemMessageText;
                                    MESSAGE(Msg);
                                  end;
                              END;

               ReqFilterFields="Source Document","Source No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               CreatePickEditable := true;
               CreateMovementEditable := true;
             END;

      OnOpenPage=BEGIN
                   EnableFieldsInPage;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=CreateInventorytPutAway;
                  CaptionML=ENU=Create Invt. Put-Away;
                  ToolTipML=ENU=Specifies if you want to create inventory put-away documents for all source documents that are included in the filter and for which a put-away document is appropriate.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=CreatePutAway }

      { 3   ;2   ;Field     ;
                  Name=CInvtPick;
                  CaptionML=ENU=Create Invt. Pick;
                  ToolTipML=ENU=Specifies if you want to create inventory pick documents for all source documents that are included in the filter and for which a pick document is appropriate.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=CreatePick;
                  Enabled=CreatePickEditable;
                  Editable=CreatePickEditable;
                  OnValidate=BEGIN
                               if CreatePick and CreateMovement then
                                 ERROR(Text009);
                               EnableFieldsInPage;
                             END;
                              }

      { 10  ;2   ;Field     ;
                  Name=CInvtMvmt;
                  CaptionML=ENU=Create Invt. Movement;
                  ToolTipML=ENU=Specifies if you want to create inventory movement documents for all source documents that are included in the filter and for which a movement document is appropriate.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=CreateMovement;
                  Enabled=CreateMovementEditable;
                  Editable=CreateMovementEditable;
                  OnValidate=BEGIN
                               if CreatePick and CreateMovement then
                                 ERROR(Text009);
                               EnableFieldsInPage;
                             END;
                              }

      { 6   ;2   ;Field     ;
                  Name=Print Document;
                  CaptionML=ENU=Print Document;
                  ToolTipML=ENU=Specifies if you want the document to be printed.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDocument }

      { 7   ;2   ;Field     ;
                  Name=Show Error;
                  CaptionML=ENU=Show Error;
                  ToolTipML=ENU=Specifies if the report shows error information.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ShowError }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      WhseActivHeader@1002 : Record "Warehouse Activity Header";
      TempWhseActivHdr@1013 : TEMPORARY Record "Warehouse Activity Header";
      CreateInvtPutAway@1003 : Codeunit "Create Inventory Put-away";
      CreateInvtPickMovement@1004 : Codeunit "Create Inventory Pick/Movement";
      WhseDocPrint@1012 : Codeunit "Warehouse Document-Print";
      Window@1005 : Dialog;
      CreatePutAway@1000 : Boolean;
      CreatePick@1001 : Boolean;
      Text001@1008 : TextConst 'ENU=Creating Inventory Activities...\\';
      Text002@1007 : TextConst 'ENU=Source Type     #1##########\';
      Text003@1006 : TextConst 'ENU=Source No.      #2##########';
      CreateMovement@1023 : Boolean;
      DocumentCreated@1010 : Boolean;
      PrintDocument@1011 : Boolean;
      PutAwayCounter@1014 : Integer;
      PickCounter@1015 : Integer;
      MovementCounter@1027 : Integer;
      Text004@1009 : TextConst 'ENU=There is nothing to create.';
      Text005@1016 : TextConst 'ENU=Number of %1 activities created: %2 out of a total of %3.';
      Text006@1017 : TextConst '@@@={Locked};ENU=%1\\%2';
      Text008@1019 : TextConst 'ENU=You must select Create Invt. Put-away, Create Invt. Pick, or Create Invt. Movement.';
      TotalPutAwayCounter@1020 : Integer;
      TotalPickCounter@1021 : Integer;
      TotalMovementCounter@1025 : Integer;
      ShowError@1022 : Boolean;
      Text009@1024 : TextConst 'ENU=You can select either Create Invt. Pick or Create Invt. Movement.';
      CreatePickEditable@1026 : Boolean INDATASET;
      CreateMovementEditable@1030 : Boolean INDATASET;
      SuppressMessagesState@1031 : Boolean;

    LOCAL PROCEDURE InitWhseActivHeader@7();
    BEGIN
      with WhseActivHeader do begin
        INIT;
        case "Warehouse Request".Type of
          "Warehouse Request".Type::Inbound:
            Type := Type::"Invt. Put-away";
          "Warehouse Request".Type::Outbound:
            if CreatePick then
              Type := Type::"Invt. Pick"
            else
              Type := Type::"Invt. Movement";
        end;
        "No." := '';
        "Location Code" := "Warehouse Request"."Location Code";
      end;
    END;

    LOCAL PROCEDURE InsertTempWhseActivHdr@1();
    BEGIN
      TempWhseActivHdr.INIT;
      TempWhseActivHdr := WhseActivHeader;
      TempWhseActivHdr.INSERT;
    END;

    LOCAL PROCEDURE PrintNewDocuments@2();
    BEGIN
      with TempWhseActivHdr do begin
        repeat
          case Type of
            Type::"Invt. Put-away":
              WhseDocPrint.PrintInvtPutAwayHeader(TempWhseActivHdr,true);
            Type::"Invt. Pick":
              if CreatePick then
                WhseDocPrint.PrintInvtPickHeader(TempWhseActivHdr,true)
              else
                WhseDocPrint.PrintInvtMovementHeader(TempWhseActivHdr,true);
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckWhseRequest@3(WhseRequest@1000 : Record "Warehouse Request") : Boolean;
    VAR
      SalesHeader@1001 : Record "Sales Header";
      TransferHeader@1002 : Record "Transfer Header";
      GetSrcDocOutbound@1003 : Codeunit "Get Source Doc. Outbound";
    BEGIN
      if WhseRequest."Document Status" <> WhseRequest."Document Status"::Released then
        exit(true);
      if (WhseRequest.Type = WhseRequest.Type::Outbound) and
         (WhseRequest."Shipping Advice" = WhseRequest."Shipping Advice"::Complete)
      then
        case WhseRequest."Source Type" of
          DATABASE::"Sales Line":
            if WhseRequest."Source Subtype" = WhseRequest."Source Subtype"::"1" then begin
              SalesHeader.GET(SalesHeader."Document Type"::Order,WhseRequest."Source No.");
              exit(GetSrcDocOutbound.CheckSalesHeader(SalesHeader,ShowError));
            end;
          DATABASE::"Transfer Line":
            begin
              TransferHeader.GET(WhseRequest."Source No.");
              exit(GetSrcDocOutbound.CheckTransferHeader(TransferHeader,ShowError));
            end;
        end;
    END;

    [External]
    PROCEDURE InitializeRequest@4(NewCreateInvtPutAway@1000 : Boolean;NewCreateInvtPick@1001 : Boolean;NewCreateInvtMovement@1004 : Boolean;NewPrintDocument@1002 : Boolean;NewShowError@1003 : Boolean);
    BEGIN
      CreatePutAway := NewCreateInvtPutAway;
      CreatePick := NewCreateInvtPick;
      CreateMovement := NewCreateInvtMovement;
      PrintDocument := NewPrintDocument;
      ShowError := NewShowError;
    END;

    LOCAL PROCEDURE EnableFieldsInPage@5();
    BEGIN
      CreatePickEditable := not CreateMovement;
      CreateMovementEditable := not CreatePick;
    END;

    [External]
    PROCEDURE SuppressMessages@6(NewState@1000 : Boolean);
    BEGIN
      SuppressMessagesState := NewState;
    END;

    LOCAL PROCEDURE AddToText@9(VAR OrigText@1000 : Text;Addendum@1001 : Text);
    BEGIN
      if OrigText = '' then
        OrigText := Addendum
      else
        OrigText := STRSUBSTNO(Text006,OrigText,Addendum);
    END;

    [External]
    PROCEDURE GetMovementCounters@16(VAR MovementsCreated@1000 : Integer;VAR TotalMovementsToBeCreated@1001 : Integer);
    BEGIN
      MovementsCreated := MovementCounter;
      TotalMovementsToBeCreated := TotalMovementCounter;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

