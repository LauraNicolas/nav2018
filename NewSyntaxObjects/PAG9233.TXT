OBJECT Page 9233 G/L Balance by Dim. Matrix
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=G/L Balance by Dim. Matrix;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    PageType=List;
    SourceTableTemporary=true;
    OnInit=BEGIN
             Field32Visible := true;
             Field31Visible := true;
             Field30Visible := true;
             Field29Visible := true;
             Field28Visible := true;
             Field27Visible := true;
             Field26Visible := true;
             Field25Visible := true;
             Field24Visible := true;
             Field23Visible := true;
             Field22Visible := true;
             Field21Visible := true;
             Field20Visible := true;
             Field19Visible := true;
             Field18Visible := true;
             Field17Visible := true;
             Field16Visible := true;
             Field15Visible := true;
             Field14Visible := true;
             Field13Visible := true;
             Field12Visible := true;
             Field11Visible := true;
             Field10Visible := true;
             Field9Visible := true;
             Field8Visible := true;
             Field7Visible := true;
             Field6Visible := true;
             Field5Visible := true;
             Field4Visible := true;
             Field3Visible := true;
             Field2Visible := true;
             Field1Visible := true;
           END;

    OnOpenPage=BEGIN
                 Code := '';

                 GLSetup.GET;

                 if (LineDimCode = '') and (ColumnDimCode = '') then begin
                   LineDimCode := GLAcc.TABLECAPTION;
                   ColumnDimCode := Text001;
                 end;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 CalculateClosingDateFilter;

                 MATRIX_NoOfMatrixColumns := ARRAYLEN(MATRIX_CellData);

                 if not PeriodInitialized then
                   LoadDefault;

                 FindRec(ColumnDimOption,MatrixRecord,'=');
                 SetColumnVisibility;
                 if MATRIX_PrimKeyFirstCol = '' then
                   MATRIX_PrimKeyFirstCol := MatrixRecord.GETPOSITION;
               END;

    OnFindRecord=BEGIN
                   exit(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   exit(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1148 : Integer;
                       MATRIX_Steps@1149 : Integer;
                     BEGIN
                       // IF CurrForm.TotalAmount.VISIBLE THEN
                       Amount := MatrixMgt.RoundValue(CalcAmount(false),RoundingFactor);

                       MATRIX_CurrentColumnOrdinal := 0;
                       MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);

                       if MATRIX_OnFindRecord('=><') then begin
                         MATRIX_CurrentColumnOrdinal := 1;
                         repeat
                           MATRIX_ColumnOrdinal := MATRIX_CurrentColumnOrdinal;
                           MATRIX_OnAfterGetRecord;
                           MATRIX_Steps := MATRIX_OnNextRecord(1);
                           MATRIX_CurrentColumnOrdinal := MATRIX_CurrentColumnOrdinal + MATRIX_Steps;
                         until (MATRIX_CurrentColumnOrdinal - MATRIX_Steps = MATRIX_NoOfMatrixColumns) or (MATRIX_Steps = 0);
                         if MATRIX_CurrentColumnOrdinal <> 1 then
                           MATRIX_OnNextRecord(1 - MATRIX_CurrentColumnOrdinal);
                       end;

                       FormatLine;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                Editable=FALSE;
                IndentationColumnName=Indentation;
                IndentationControls=Name;
                GroupType=Repeater }

    { 120 ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies the code of the record.;
                ApplicationArea=#Suite;
                SourceExpr=Code;
                Style=Strong;
                StyleExpr=Emphasize;
                OnLookup=BEGIN
                           LookUpCode(LineDimOption,LineDimCode,Code);
                         END;

                ImplicitType=Code20 }

    { 22  ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the name of the record.;
                ApplicationArea=#Suite;
                SourceExpr=Name;
                Style=Strong;
                StyleExpr=Emphasize;
                ImplicitType=Text50 }

    { 24  ;2   ;Field     ;
                Name=TotalAmount;
                CaptionML=ENU=Total Amount;
                ToolTipML=ENU=Specifies the total value for the amount type that you select in the Show field.;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=+Amount;
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              DrillDown(false);
                            END;
                             }

    { 1116;2   ;Field     ;
                Name=Field1;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[1];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[1];
                Visible=Field1Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(1);
                              DrillDown(true);
                            END;
                             }

    { 1117;2   ;Field     ;
                Name=Field2;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[2];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[2];
                Visible=Field2Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(2);
                              DrillDown(true);
                            END;
                             }

    { 1118;2   ;Field     ;
                Name=Field3;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[3];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[3];
                Visible=Field3Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(3);
                              DrillDown(true);
                            END;
                             }

    { 1119;2   ;Field     ;
                Name=Field4;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[4];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[4];
                Visible=Field4Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(4);
                              DrillDown(true);
                            END;
                             }

    { 1120;2   ;Field     ;
                Name=Field5;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[5];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[5];
                Visible=Field5Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(5);
                              DrillDown(true);
                            END;
                             }

    { 1121;2   ;Field     ;
                Name=Field6;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[6];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[6];
                Visible=Field6Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(6);
                              DrillDown(true);
                            END;
                             }

    { 1122;2   ;Field     ;
                Name=Field7;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[7];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[7];
                Visible=Field7Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(7);
                              DrillDown(true);
                            END;
                             }

    { 1123;2   ;Field     ;
                Name=Field8;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[8];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[8];
                Visible=Field8Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(8);
                              DrillDown(true);
                            END;
                             }

    { 1124;2   ;Field     ;
                Name=Field9;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[9];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[9];
                Visible=Field9Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(9);
                              DrillDown(true);
                            END;
                             }

    { 1125;2   ;Field     ;
                Name=Field10;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[10];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[10];
                Visible=Field10Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(10);
                              DrillDown(true);
                            END;
                             }

    { 1126;2   ;Field     ;
                Name=Field11;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[11];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[11];
                Visible=Field11Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(11);
                              DrillDown(true);
                            END;
                             }

    { 1127;2   ;Field     ;
                Name=Field12;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[12];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[12];
                Visible=Field12Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(12);
                              DrillDown(true);
                            END;
                             }

    { 1128;2   ;Field     ;
                Name=Field13;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[13];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[13];
                Visible=Field13Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(13);
                              DrillDown(true);
                            END;
                             }

    { 1129;2   ;Field     ;
                Name=Field14;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[14];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[14];
                Visible=Field14Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(14);
                              DrillDown(true);
                            END;
                             }

    { 1130;2   ;Field     ;
                Name=Field15;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[15];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[15];
                Visible=Field15Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(15);
                              DrillDown(true);
                            END;
                             }

    { 1131;2   ;Field     ;
                Name=Field16;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[16];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[16];
                Visible=Field16Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(16);
                              DrillDown(true);
                            END;
                             }

    { 1132;2   ;Field     ;
                Name=Field17;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[17];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[17];
                Visible=Field17Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(17);
                              DrillDown(true);
                            END;
                             }

    { 1133;2   ;Field     ;
                Name=Field18;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[18];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[18];
                Visible=Field18Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(18);
                              DrillDown(true);
                            END;
                             }

    { 1134;2   ;Field     ;
                Name=Field19;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[19];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[19];
                Visible=Field19Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(19);
                              DrillDown(true);
                            END;
                             }

    { 1135;2   ;Field     ;
                Name=Field20;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[20];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[20];
                Visible=Field20Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(20);
                              DrillDown(true);
                            END;
                             }

    { 1136;2   ;Field     ;
                Name=Field21;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[21];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[21];
                Visible=Field21Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(21);
                              DrillDown(true);
                            END;
                             }

    { 1137;2   ;Field     ;
                Name=Field22;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[22];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[22];
                Visible=Field22Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(22);
                              DrillDown(true);
                            END;
                             }

    { 1138;2   ;Field     ;
                Name=Field23;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[23];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[23];
                Visible=Field23Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(23);
                              DrillDown(true);
                            END;
                             }

    { 1139;2   ;Field     ;
                Name=Field24;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[24];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[24];
                Visible=Field24Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(24);
                              DrillDown(true);
                            END;
                             }

    { 1140;2   ;Field     ;
                Name=Field25;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[25];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[25];
                Visible=Field25Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(25);
                              DrillDown(true);
                            END;
                             }

    { 1141;2   ;Field     ;
                Name=Field26;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[26];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[26];
                Visible=Field26Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(26);
                              DrillDown(true);
                            END;
                             }

    { 1142;2   ;Field     ;
                Name=Field27;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[27];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[27];
                Visible=Field27Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(27);
                              DrillDown(true);
                            END;
                             }

    { 1143;2   ;Field     ;
                Name=Field28;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[28];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[28];
                Visible=Field28Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(28);
                              DrillDown(true);
                            END;
                             }

    { 1144;2   ;Field     ;
                Name=Field29;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[29];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[29];
                Visible=Field29Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(29);
                              DrillDown(true);
                            END;
                             }

    { 1145;2   ;Field     ;
                Name=Field30;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[30];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[30];
                Visible=Field30Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(30);
                              DrillDown(true);
                            END;
                             }

    { 1146;2   ;Field     ;
                Name=Field31;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[31];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[31];
                Visible=Field31Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(31);
                              DrillDown(true);
                            END;
                             }

    { 1147;2   ;Field     ;
                Name=Field32;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[32];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_ColumnCaptions[32];
                Visible=Field32Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(32);
                              DrillDown(true);
                            END;
                             }

  }
  CODE
  {
    VAR
      Text001@1186 : TextConst 'ENU=Period';
      GLSetup@1189 : Record "General Ledger Setup";
      GLAcc@1190 : Record "G/L Account";
      DimCodAmtBuf@1191 : TEMPORARY Record "Dimension Code Amount Buffer";
      CurrExchRate@1192 : Record "Currency Exchange Rate";
      MatrixRecord@1005 : Record "Dimension Code Buffer";
      MatrixMgt@1004 : Codeunit "Matrix Management";
      LineDimOption@1193 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4"';
      ColumnDimOption@1194 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4"';
      LineDimCode@1195 : Text[30];
      ColumnDimCode@1196 : Text[30];
      PeriodType@1197 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      AmountType@1198 : '"Net Change","Balance at Date"';
      RoundingFactor@1199 : 'None,"1","1000","1000000"';
      AmountField@1200 : 'Amount,"Debit Amount","Credit Amount"';
      ShowActualBudg@1201 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%"';
      ShowInAddCurr@1202 : Boolean;
      ClosingEntryFilter@1203 : 'Include,Exclude';
      DateFilter@1205 : Text;
      InternalDateFilter@1206 : Text;
      ExcludeClosingDateFilter@1207 : Text;
      GLAccFilter@1208 : Text;
      BudgetFilter@1209 : Text;
      BusUnitFilter@1210 : Text;
      GlobalDim1Filter@1211 : Text;
      GlobalDim2Filter@1212 : Text;
      MatrixAmount@1214 : Decimal;
      PeriodInitialized@1215 : Boolean;
      CurrExchDate@1216 : Date;
      MATRIX_ColumnOrdinal@1218 : Integer;
      MATRIX_NoOfMatrixColumns@1219 : Integer;
      MATRIX_CellData@1220 : ARRAY [32] OF Decimal;
      MATRIX_ColumnCaptions@1000 : ARRAY [32] OF Text[1024];
      MATRIX_PrimKeyFirstCol@1002 : Text[1024];
      RoundingFactorFormatString@1039 : Text;
      MATRIX_CurrSetLength@1001 : Integer;
      Field1Visible@19069335 : Boolean INDATASET;
      Field2Visible@19014807 : Boolean INDATASET;
      Field3Visible@19062679 : Boolean INDATASET;
      Field4Visible@19074839 : Boolean INDATASET;
      Field5Visible@19043543 : Boolean INDATASET;
      Field6Visible@19067287 : Boolean INDATASET;
      Field7Visible@19067863 : Boolean INDATASET;
      Field8Visible@19039959 : Boolean INDATASET;
      Field9Visible@19008663 : Boolean INDATASET;
      Field10Visible@19006501 : Boolean INDATASET;
      Field11Visible@19052468 : Boolean INDATASET;
      Field12Visible@19013039 : Boolean INDATASET;
      Field13Visible@19079726 : Boolean INDATASET;
      Field14Visible@19077225 : Boolean INDATASET;
      Field15Visible@19035896 : Boolean INDATASET;
      Field16Visible@19003763 : Boolean INDATASET;
      Field17Visible@19049730 : Boolean INDATASET;
      Field18Visible@19007213 : Boolean INDATASET;
      Field19Visible@19053180 : Boolean INDATASET;
      Field20Visible@19014629 : Boolean INDATASET;
      Field21Visible@19060596 : Boolean INDATASET;
      Field22Visible@19021167 : Boolean INDATASET;
      Field23Visible@19047854 : Boolean INDATASET;
      Field24Visible@19045353 : Boolean INDATASET;
      Field25Visible@19004024 : Boolean INDATASET;
      Field26Visible@19011891 : Boolean INDATASET;
      Field27Visible@19057858 : Boolean INDATASET;
      Field28Visible@19015341 : Boolean INDATASET;
      Field29Visible@19061308 : Boolean INDATASET;
      Field30Visible@19010597 : Boolean INDATASET;
      Field31Visible@19056564 : Boolean INDATASET;
      Field32Visible@19017135 : Boolean INDATASET;
      Emphasize@1003 : Boolean;

    LOCAL PROCEDURE DimCodeToOption@1221(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1222 : Record "Business Unit";
    BEGIN
      case DimCode of
        '':
          exit(-1);
        GLAcc.TABLECAPTION:
          exit(0);
        Text001:
          exit(1);
        BusUnit.TABLECAPTION:
          exit(2);
        GLSetup."Global Dimension 1 Code":
          exit(3);
        GLSetup."Global Dimension 2 Code":
          exit(4);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindRec@1223(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[1024]) : Boolean;
    VAR
      GLAcc@1224 : Record "G/L Account";
      BusUnit@1225 : Record "Business Unit";
      Period@1226 : Record Date;
      DimVal@1227 : Record "Dimension Value";
      PeriodFormMgt@1228 : Codeunit PeriodFormManagement;
      Found@1229 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if GLAccFilter <> '' then
              GLAcc.SETFILTER("No.",GLAccFilter);
            Found := GLAcc.FIND(Which);
            if Found then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if not PeriodInitialized then
              DateFilter := '';
            PeriodInitialized := true;
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter)
            else
              if not PeriodInitialized and (InternalDateFilter <> '') then
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            if Found then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            if Found then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if GlobalDim1Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if GlobalDim2Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            if Found then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE NextRec@1230(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1231 : Record "G/L Account";
      BusUnit@1232 : Record "Business Unit";
      Period@1233 : Record Date;
      DimVal@1234 : Record "Dimension Value";
      PeriodFormMgt@1235 : Codeunit PeriodFormManagement;
      ResultSteps@1236 : Integer;
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc."No." := DimCodeBuf.Code;
            if GLAccFilter <> '' then
              GLAcc.SETFILTER("No.",GLAccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          end;
        DimOption::Period:
          begin
            if DateFilter <> '' then
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            if ResultSteps <> 0 then
              CopyPeriodToBuf(Period,DimCodeBuf);
          end;
        DimOption::"Business Unit":
          begin
            BusUnit.Code := DimCodeBuf.Code;
            if BusUnitFilter <> '' then
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          end;
        DimOption::"Dimension 1":
          begin
            if GlobalDim1Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
        DimOption::"Dimension 2":
          begin
            if GlobalDim2Filter <> '' then
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          end;
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1237(VAR TheGLAcc@1000 : Record "G/L Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1238(VAR ThePeriod@1000 : Record Date;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    VAR
      Period2@1239 : Record Date;
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        else
          "Period End" := ThePeriod."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := ThePeriod."Period Name";
      end;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@1240(VAR TheBusUnit@1000 : Record "Business Unit";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      end;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1241(VAR TheDimVal@1000 : Record "Dimension Value";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      end;
    END;

    LOCAL PROCEDURE FindPeriod@1242(SearchText@1000 : Code[10]);
    VAR
      Period@1243 : Record Date;
      PeriodFormMgt@1244 : Codeunit PeriodFormManagement;
    BEGIN
      if DateFilter <> '' then begin
        Period.SETFILTER("Period Start",DateFilter);
        if not PeriodFormMgt.FindDate('+',Period,PeriodType) then
          PeriodFormMgt.FindDate('+',Period,PeriodType::Day);
        Period.SETRANGE("Period Start");
      end;
      if PeriodFormMgt.FindDate(SearchText,Period,PeriodType) then
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          Period."Period End" := CLOSINGDATE(Period."Period End");
      if AmountType = AmountType::"Net Change" then begin
        GLAcc.SETRANGE("Date Filter",Period."Period Start",Period."Period End");
        if GLAcc.GETRANGEMIN("Date Filter") = GLAcc.GETRANGEMAX("Date Filter") then
          GLAcc.SETRANGE("Date Filter",GLAcc.GETRANGEMIN("Date Filter"));
      end else
        GLAcc.SETRANGE("Date Filter",0D,Period."Period End");
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      if (LineDimOption <> LineDimOption::Period) and (ColumnDimOption <> ColumnDimOption::Period) then
        DateFilter := InternalDateFilter;
      DimCodAmtBuf.DELETEALL;
    END;

    LOCAL PROCEDURE CalculateClosingDateFilter@1245();
    VAR
      AccountingPeriod@1246 : Record "Accounting Period";
      FirstRec@1247 : Boolean;
    BEGIN
      if ClosingEntryFilter = ClosingEntryFilter::Include then
        ExcludeClosingDateFilter := ''
      else begin
        AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
        AccountingPeriod.SETRANGE("New Fiscal Year",true);
        FirstRec := true;
        if AccountingPeriod.FIND('-') then
          repeat
            if FirstRec then
              ExcludeClosingDateFilter :=
                STRSUBSTNO('<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1))
            else
              ExcludeClosingDateFilter :=
                STRSUBSTNO('%1&<>%2',ExcludeClosingDateFilter,CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
            FirstRec := false;
          until AccountingPeriod.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE LookUpCode@1252(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2"';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      GLAcc@1253 : Record "G/L Account";
      BusUnit@1254 : Record "Business Unit";
      DimVal@1255 : Record "Dimension Value";
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc.GET(Code);
            PAGE.RUNMODAL(PAGE::"G/L Account List",GLAcc);
          end;
        DimOption::Period:
          ;
        DimOption::"Business Unit":
          begin
            BusUnit.GET(Code);
            PAGE.RUNMODAL(PAGE::"Business Unit List",BusUnit);
          end;
        DimOption::"Dimension 1",DimOption::"Dimension 2":
          begin
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);

            PAGE.RUNMODAL(PAGE::"Dimension Value List",DimVal);
          end;
      end;
    END;

    LOCAL PROCEDURE SetCommonFilters@1260(VAR TheGLAcc@1000 : Record "G/L Account");
    VAR
      DateFilter2@1261 : Text;
    BEGIN
      CLEAR(TheGLAcc);
      with TheGLAcc do begin
        if DateFilter = '' then
          DateFilter2 := ExcludeClosingDateFilter
        else begin
          if AmountType = AmountType::"Net Change" then begin
            DateFilter2 := DateFilter;
          end else begin
            SETFILTER("Date Filter",DateFilter);
            DateFilter2 := STRSUBSTNO('..%1',GETRANGEMAX("Date Filter"));
          end;
          if ExcludeClosingDateFilter <> '' then
            DateFilter2 := STRSUBSTNO('%1 & %2',DateFilter2,ExcludeClosingDateFilter);
        end;
        RESET;
        if GLAccFilter <> '' then
          SETFILTER("No.",GLAccFilter)
        else
          SETRANGE("No.");
        if GLAccFilter <> '' then
          Totaling := COPYSTR(GLAccFilter,1,MAXSTRLEN(Totaling))
        else
          if "No." = '' then
            Totaling := STRSUBSTNO('>%1','''''');
        SETFILTER("Date Filter",DateFilter2);
        if BusUnitFilter <> '' then
          SETFILTER("Business Unit Filter",BusUnitFilter);
        if GlobalDim1Filter <> '' then
          SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
        if GlobalDim2Filter <> '' then
          SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
        if BudgetFilter = '' then
          SETRANGE("Budget Filter")
        else
          SETFILTER("Budget Filter",BudgetFilter);
      end;
    END;

    LOCAL PROCEDURE SetDimFilters@1262(VAR TheGLAcc@1000 : Record "G/L Account";LineOrColumn@1001 : 'Line,Column');
    VAR
      DimCodeBuf@1002 : Record "Dimension Code Buffer";
      DimOption@1263 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4"';
    BEGIN
      if LineOrColumn = LineOrColumn::Line then begin
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      end else begin
        DimCodeBuf := MatrixRecord;
        DimOption := ColumnDimOption;
      end;
      case DimOption of
        DimOption::"G/L Account":
          begin
            TheGLAcc."No." := DimCodeBuf.Code;
            TheGLAcc.Totaling := DimCodeBuf.Totaling;
          end;
        DimOption::Period:
          begin
            if AmountType = AmountType::"Net Change" then
              TheGLAcc.SETRANGE(
                "Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            else
              TheGLAcc.SETRANGE("Date Filter",0D,DimCodeBuf."Period End");
            if (ClosingEntryFilter = ClosingEntryFilter::Exclude) and (ExcludeClosingDateFilter <> '') then
              TheGLAcc.SETFILTER(
                "Date Filter",TheGLAcc.GETFILTER("Date Filter") +
                '&' + ExcludeClosingDateFilter);
          end;
        DimOption::"Business Unit":
          TheGLAcc.SETRANGE("Business Unit Filter",DimCodeBuf.Code);
        DimOption::"Dimension 1":
          if DimCodeBuf.Totaling = '' then
            TheGLAcc.SETRANGE("Global Dimension 1 Filter",DimCodeBuf.Code)
          else
            TheGLAcc.SETFILTER("Global Dimension 1 Filter",DimCodeBuf.Totaling);
        DimOption::"Dimension 2":
          if DimCodeBuf.Totaling = '' then
            TheGLAcc.SETRANGE("Global Dimension 2 Filter",DimCodeBuf.Code)
          else
            TheGLAcc.SETFILTER("Global Dimension 2 Filter",DimCodeBuf.Totaling);
      end;
    END;

    LOCAL PROCEDURE DrillDown@1265(SetColFilter@1000 : Boolean);
    VAR
      GLEntry@1266 : Record "G/L Entry";
      GLBudgetEntry@1267 : Record "G/L Budget Entry";
    BEGIN
      SetCommonFilters(GLAcc);
      SetDimFilters(GLAcc,0);
      if SetColFilter then
        SetDimFilters(GLAcc,1);
      if ShowActualBudg = ShowActualBudg::"Actual Amounts" then begin
        with GLEntry do begin
          if GLAcc."No." <> '' then
            SETRANGE("G/L Account No.",GLAcc."No.");
          if GLAcc.Totaling <> '' then
            SETFILTER("G/L Account No.",GLAcc.Totaling);
          GLAcc.COPYFILTER("Date Filter","Posting Date");
          GLAcc.COPYFILTER("Global Dimension 1 Filter","Global Dimension 1 Code");
          GLAcc.COPYFILTER("Global Dimension 2 Filter","Global Dimension 2 Code");
          GLAcc.COPYFILTER("Business Unit Filter","Business Unit Code");
          if (GETFILTER("Global Dimension 1 Code") <> '') or (GETFILTER("Global Dimension 2 Code") <> '') or
             (GETFILTER("Business Unit Code") <> '')
          then
            SETCURRENTKEY("G/L Account No.","Business Unit Code","Global Dimension 1 Code")
          else
            SETCURRENTKEY("G/L Account No.","Posting Date");
        end;
        PAGE.RUN(PAGE::"General Ledger Entries",GLEntry);
      end;
      if ShowActualBudg = ShowActualBudg::"Budgeted Amounts" then begin
        with GLBudgetEntry do begin
          GLAcc.COPYFILTER("Budget Filter","Budget Name");
          if GLAcc."No." <> '' then
            SETRANGE("G/L Account No.",GLAcc."No.");
          if GLAcc.Totaling <> '' then
            SETFILTER("G/L Account No.",GLAcc.Totaling);
          GLAcc.COPYFILTER("Date Filter",Date);
          GLAcc.COPYFILTER("Global Dimension 1 Filter","Global Dimension 1 Code");
          GLAcc.COPYFILTER("Global Dimension 2 Filter","Global Dimension 2 Code");
          GLAcc.COPYFILTER("Business Unit Filter","Business Unit Code");
          if (GETFILTER("Global Dimension 1 Code") <> '') or (GETFILTER("Global Dimension 2 Code") <> '') or
             (GETFILTER("Business Unit Code") <> '')
          then
            SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code")
          else
            SETCURRENTKEY("Budget Name","G/L Account No.",Date);
        end;
        PAGE.RUN(PAGE::"G/L Budget Entries",GLBudgetEntry);
      end;
    END;

    LOCAL PROCEDURE CalcAmount@1272(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1273 : Decimal;
      ColumnCode@1274 : Code[20];
    BEGIN
      if SetColFilter then
        ColumnCode := MatrixRecord.Code
      else
        ColumnCode := '';
      if DimCodAmtBuf.GET(Code,ColumnCode) then
        exit(DimCodAmtBuf.Amount);
      GLAcc.RESET;
      SetCommonFilters(GLAcc);
      SetDimFilters(GLAcc,0);
      if SetColFilter then
        SetDimFilters(GLAcc,1);
      case ShowActualBudg of
        ShowActualBudg::"Actual Amounts":
          Amount := CalcActualAmount;
        ShowActualBudg::"Budgeted Amounts":
          Amount := CalcBudgAmount;
        ShowActualBudg::Variance:
          Amount := CalcActualAmount - CalcBudgAmount;
        ShowActualBudg::"Variance%":
          begin
            Amount := CalcBudgAmount;
            if Amount <> 0 then
              Amount := ROUND(100 * (CalcActualAmount - Amount) / Amount);
          end;
        ShowActualBudg::"Index%":
          begin
            Amount := CalcBudgAmount;
            if Amount <> 0 then
              Amount := ROUND(100 * CalcActualAmount / Amount);
          end;
      end;
      DimCodAmtBuf."Line Code" := Code;
      DimCodAmtBuf."Column Code" := ColumnCode;
      DimCodAmtBuf.Amount := Amount;
      DimCodAmtBuf.INSERT;
      exit(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@1275() : Decimal;
    VAR
      Amount@1276 : Decimal;
    BEGIN
      if ShowInAddCurr then
        case AmountField of
          AmountField::Amount:
            begin
              GLAcc.CALCFIELDS("Additional-Currency Net Change");
              Amount := GLAcc."Additional-Currency Net Change";
            end;
          AmountField::"Debit Amount":
            begin
              GLAcc.CALCFIELDS("Add.-Currency Debit Amount");
              Amount := GLAcc."Add.-Currency Debit Amount";
            end;
          AmountField::"Credit Amount":
            begin
              GLAcc.CALCFIELDS("Add.-Currency Credit Amount");
              Amount := GLAcc."Add.-Currency Credit Amount";
            end;
        end
      else
        case AmountField of
          AmountField::Amount:
            begin
              GLAcc.CALCFIELDS("Net Change");
              Amount := GLAcc."Net Change";
            end;
          AmountField::"Debit Amount":
            begin
              GLAcc.CALCFIELDS("Debit Amount");
              Amount := GLAcc."Debit Amount";
            end;
          AmountField::"Credit Amount":
            begin
              GLAcc.CALCFIELDS("Credit Amount");
              Amount := GLAcc."Credit Amount";
            end;
        end;
      exit(Amount);
    END;

    LOCAL PROCEDURE CalcBudgAmount@1277() : Decimal;
    VAR
      Amount@1278 : Decimal;
    BEGIN
      if BudgetFilter = '' then
        GLAcc.SETRANGE("Budget Filter")
      else
        GLAcc.SETFILTER("Budget Filter",BudgetFilter);
      GLAcc.CALCFIELDS("Budgeted Amount");
      Amount := GLAcc."Budgeted Amount";
      case AmountField of
        AmountField::"Debit Amount":
          if Amount < 0 then
            Amount := 0;
        AmountField::"Credit Amount":
          if Amount > 0 then
            Amount := 0
          else
            Amount := -Amount;
      end;
      if (Amount <> 0) and ShowInAddCurr then begin
        if GLAcc.GETFILTER("Date Filter") = '' then
          CurrExchDate := WORKDATE
        else
          CurrExchDate := GLAcc.GETRANGEMIN("Date Filter");
        Amount :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
            CurrExchRate.ExchangeRate(CurrExchDate,GLSetup."Additional Reporting Currency"));
      end;
      exit(Amount);
    END;

    LOCAL PROCEDURE MATRIX_UpdateMatrixRecord@1279(MATRIX_NewColumnOrdinal@1110 : Integer);
    BEGIN
      MATRIX_ColumnOrdinal := MATRIX_NewColumnOrdinal;
      MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);
      MATRIX_OnFindRecord('=');
      if MATRIX_ColumnOrdinal <> 1 then
        MATRIX_OnNextRecord(MATRIX_ColumnOrdinal - 1);
    END;

    LOCAL PROCEDURE MATRIX_OnFindRecord@1281(Which@1112 : Text[1024]) : Boolean;
    BEGIN
      exit(FindRec(ColumnDimOption,MatrixRecord,Which));
    END;

    LOCAL PROCEDURE MATRIX_OnNextRecord@1282(Steps@1113 : Integer) : Integer;
    BEGIN
      exit(NextRec(ColumnDimOption,MatrixRecord,Steps));
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1283();
    BEGIN
      MatrixAmount := MatrixMgt.RoundValue(CalcAmount(true),RoundingFactor);

      MATRIX_CellData[MATRIX_ColumnOrdinal] := MatrixAmount;
    END;

    [Internal]
    PROCEDURE Load@1(NewLineDimCode@1000 : Text[30];NewColumnDimCode@1001 : Text[30];NewPeriodType@1002 : Option;NewDateFilter@1003 : Text;NewGLAccFilter@1004 : Text;NewBusUnitFilter@1017 : Text;NewBudgetFilter@1005 : Text;NewGlobalDim1Filter@1006 : Text;NewGlobalDim2Filter@1007 : Text;NewShowActualBudg@1008 : Option;NewAmountField@1009 : Option;NewClosingEntryFilter@1010 : Option;NewRoundingFactor@1011 : Option;NewShowInAddCurr@1012 : Boolean;NewMATRIX_ColumnCaptions@1013 : ARRAY [32] OF Text[1024];NewPrimKeyFirstCol@1014 : Text[1024];NewAmountType@1015 : '"Net Change","Balance at Date"';CurrSetLength@1016 : Integer);
    BEGIN
      FindPeriod('');
      LineDimCode := NewLineDimCode;
      ColumnDimCode := NewColumnDimCode;
      PeriodType := NewPeriodType;
      DateFilter := NewDateFilter;
      PeriodInitialized := true;
      GLAccFilter := NewGLAccFilter;
      BusUnitFilter := NewBusUnitFilter;
      BudgetFilter := NewBudgetFilter;
      GlobalDim1Filter := NewGlobalDim1Filter;
      GlobalDim2Filter := NewGlobalDim2Filter;
      ShowActualBudg := NewShowActualBudg;
      AmountField := NewAmountField;
      ClosingEntryFilter := NewClosingEntryFilter;
      RoundingFactor := NewRoundingFactor;
      ShowInAddCurr := NewShowInAddCurr;
      COPYARRAY(MATRIX_ColumnCaptions,NewMATRIX_ColumnCaptions,1);
      MATRIX_PrimKeyFirstCol := NewPrimKeyFirstCol;
      AmountType := NewAmountType;
      MATRIX_CurrSetLength := CurrSetLength;
      RoundingFactorFormatString := MatrixMgt.GetFormatString(RoundingFactor,false);
    END;

    [External]
    PROCEDURE SetColumnVisibility@2();
    BEGIN
      Field1Visible := MATRIX_CurrSetLength >= 1;
      Field2Visible := MATRIX_CurrSetLength >= 2;
      Field3Visible := MATRIX_CurrSetLength >= 3;
      Field4Visible := MATRIX_CurrSetLength >= 4;
      Field5Visible := MATRIX_CurrSetLength >= 5;
      Field6Visible := MATRIX_CurrSetLength >= 6;
      Field7Visible := MATRIX_CurrSetLength >= 7;
      Field8Visible := MATRIX_CurrSetLength >= 8;
      Field9Visible := MATRIX_CurrSetLength >= 9;
      Field10Visible := MATRIX_CurrSetLength >= 10;
      Field11Visible := MATRIX_CurrSetLength >= 11;
      Field12Visible := MATRIX_CurrSetLength >= 12;
      Field13Visible := MATRIX_CurrSetLength >= 13;
      Field14Visible := MATRIX_CurrSetLength >= 14;
      Field15Visible := MATRIX_CurrSetLength >= 15;
      Field16Visible := MATRIX_CurrSetLength >= 16;
      Field17Visible := MATRIX_CurrSetLength >= 17;
      Field18Visible := MATRIX_CurrSetLength >= 18;
      Field19Visible := MATRIX_CurrSetLength >= 19;
      Field20Visible := MATRIX_CurrSetLength >= 20;
      Field21Visible := MATRIX_CurrSetLength >= 21;
      Field22Visible := MATRIX_CurrSetLength >= 22;
      Field23Visible := MATRIX_CurrSetLength >= 23;
      Field24Visible := MATRIX_CurrSetLength >= 24;
      Field25Visible := MATRIX_CurrSetLength >= 25;
      Field26Visible := MATRIX_CurrSetLength >= 26;
      Field27Visible := MATRIX_CurrSetLength >= 27;
      Field28Visible := MATRIX_CurrSetLength >= 28;
      Field29Visible := MATRIX_CurrSetLength >= 29;
      Field30Visible := MATRIX_CurrSetLength >= 30;
      Field31Visible := MATRIX_CurrSetLength >= 31;
      Field32Visible := MATRIX_CurrSetLength >= 32;
    END;

    LOCAL PROCEDURE FormatLine@3();
    BEGIN
      Emphasize := "Show in Bold";
    END;

    LOCAL PROCEDURE LoadDefault@8();
    BEGIN
      FindPeriod('');
      PeriodInitialized := true;
      MATRIX_CurrSetLength := ARRAYLEN(MATRIX_ColumnCaptions);
      MATRIX_GenerateColumnCaptions;
      RoundingFactorFormatString := MatrixMgt.GetFormatString(RoundingFactor::None,false);
    END;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@7();
    VAR
      DimCodeBuffer@1003 : Record "Dimension Code Buffer";
      Found@1001 : Boolean;
      Which@1004 : Text[30];
    BEGIN
      MATRIX_CurrSetLength := 0;
      CLEAR(MATRIX_ColumnCaptions);

      if (ColumnDimOption = ColumnDimOption::Period) and
         (PeriodType <> PeriodType::"Accounting Period") and
         (DateFilter = '')
      then begin
        EVALUATE(DimCodeBuffer.Code,FORMAT(WORKDATE));
        Which := '=><';
      end else
        Which := '-';
      Found := FindRec(ColumnDimOption,DimCodeBuffer,Which);

      MATRIX_PrimKeyFirstCol := DimCodeBuffer.GETPOSITION;

      if Found then begin
        repeat
          MATRIX_CurrSetLength := MATRIX_CurrSetLength + 1;
          MATRIX_ColumnCaptions[MATRIX_CurrSetLength] := DimCodeBuffer.Code;
        until (MATRIX_CurrSetLength = MATRIX_NoOfMatrixColumns) or (NextRec(ColumnDimOption,DimCodeBuffer,1) <> 1);
      end;
    END;

    LOCAL PROCEDURE FormatStr@9() : Text;
    BEGIN
      exit(RoundingFactorFormatString);
    END;

    BEGIN
    END.
  }
}

