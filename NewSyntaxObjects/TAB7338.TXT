OBJECT Table 7338 Bin Creation Worksheet Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetLocation("Location Code");
               if Location."Bin Mandatory" then
                 TESTFIELD("Bin Code");
               "User ID" := USERID;
             END;

    OnModify=BEGIN
               GetLocation("Location Code");
               if Location."Bin Mandatory" then
                 TESTFIELD("Bin Code");
             END;

    CaptionML=ENU=Bin Creation Worksheet Line;
    LookupPageID="Bin Creation Worksheet";
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Bin Creation Wksh. Template".Name WHERE (Type=FIELD(Type));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Worksheet Template Name }
    { 2   ;   ;Name                ;Code10        ;TableRelation="Bin Creation Wksh. Name".Name WHERE ("Worksheet Template Name"=FIELD("Worksheet Template Name"));
                                                   CaptionML=ENU=Name }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                BinCreateWkshLine@1000 : Record "Bin Creation Worksheet Line";
                                                              BEGIN
                                                                if Type <> xRec.Type then begin
                                                                  BinCreateWkshLine := Rec;
                                                                  "Item No." := '';
                                                                  "Bin Code" := '';
                                                                  "Zone Code" := '';
                                                                  "Variant Code" := '';
                                                                  INIT;
                                                                  Type := BinCreateWkshLine.Type;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Bin,Bin Content;
                                                   OptionString=Bin,"Bin Content" }
    { 5   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Bin Mandatory"=CONST(true));
                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=true }
    { 6   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Directed Put-away and Pick");
                                                                GetZone("Location Code","Zone Code");
                                                                "Bin Type Code" := Zone."Bin Type Code";
                                                                VALIDATE("Warehouse Class Code",Zone."Warehouse Class Code");
                                                                "Special Equipment Code" := Zone."Special Equipment Code";
                                                                "Bin Ranking" := Zone."Zone Ranking";
                                                                "Cross-Dock Bin" := Zone."Cross-Dock Bin Zone";
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 7   ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if ("Bin Code" <> '') and (Type = Type::"Bin Content") then begin
                                                                  Bin.GET("Location Code","Bin Code");
                                                                  Dedicated := Bin.Dedicated;
                                                                  "Bin Type Code" := Bin."Bin Type Code";
                                                                  VALIDATE("Warehouse Class Code",Bin."Warehouse Class Code");
                                                                  "Special Equipment Code" := Bin."Special Equipment Code";
                                                                  "Block Movement" := Bin."Block Movement";
                                                                  "Bin Ranking" := Bin."Bin Ranking";
                                                                  "Cross-Dock Bin" := Bin."Cross-Dock Bin";
                                                                  "Zone Code" := Bin."Zone Code";
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Bin Code;
                                                   NotBlank=true }
    { 8   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                Item@1000 : Record Item;
                                                              BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItem("Item No.");
                                                                  Description := Item.Description;
                                                                  GetItemUnitOfMeasure;
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                  CheckWhseClass("Item No.");
                                                                end else begin
                                                                  Description := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No.;
                                                   NotBlank=true }
    { 9   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=ENU=Bin Type Code }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   OnValidate=BEGIN
                                                                if ("Item No." <> '') and (Type = Type::"Bin Content") then
                                                                  CheckWhseClass("Item No.");
                                                              END;

                                                   CaptionML=ENU=Warehouse Class Code }
    { 12  ;   ;Block Movement      ;Option        ;CaptionML=ENU=Block Movement;
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound,All";
                                                   OptionString=" ",Inbound,Outbound,All }
    { 15  ;   ;Min. Qty.           ;Decimal       ;OnValidate=BEGIN
                                                                if "Min. Qty." > "Max. Qty." then
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Max. Qty."),"Max. Qty.",
                                                                    FIELDCAPTION("Min. Qty."),"Min. Qty.");
                                                              END;

                                                   CaptionML=ENU=Min. Qty.;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Max. Qty.           ;Decimal       ;OnValidate=BEGIN
                                                                if "Max. Qty." <> xRec."Max. Qty." then
                                                                  CheckMaxQtyBinContent(true);

                                                                if "Min. Qty." > "Max. Qty." then
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Max. Qty."),"Max. Qty.",
                                                                    FIELDCAPTION("Min. Qty."),"Min. Qty.");
                                                              END;

                                                   CaptionML=ENU=Max. Qty.;
                                                   DecimalPlaces=0:5;
                                                   MinValue=1 }
    { 20  ;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=ENU=Special Equipment Code }
    { 21  ;   ;Bin Ranking         ;Integer       ;CaptionML=ENU=Bin Ranking }
    { 22  ;   ;Maximum Cubage      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(false);
                                                              END;

                                                   CaptionML=ENU=Maximum Cubage;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=true }
    { 23  ;   ;Maximum Weight      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(true);
                                                              END;

                                                   CaptionML=ENU=Maximum Weight;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=true }
    { 37  ;   ;Fixed               ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Fixed }
    { 38  ;   ;Default             ;Boolean       ;OnValidate=BEGIN
                                                                if Default then
                                                                  if WMSMgt.CheckDefaultBin("Item No.","Variant Code","Location Code","Bin Code") then
                                                                    ERROR(Text010,"Location Code","Item No.","Variant Code");
                                                              END;

                                                   CaptionML=ENU=Default }
    { 40  ;   ;Cross-Dock Bin      ;Boolean       ;CaptionML=ENU=Cross-Dock Bin }
    { 67  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" <> '' then begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                GetItem("Item No.");
                                                                "Qty. per Unit of Measure" :=
                                                                  UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   NotBlank=true }
    { 5408;   ;Dedicated           ;Boolean       ;CaptionML=ENU=Dedicated }
  }
  KEYS
  {
    {    ;"Worksheet Template Name",Name,"Location Code","Line No.";
                                                   Clustered=true }
    {    ;"Location Code","Zone Code","Bin Code","Item No.","Variant Code" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      BinCreateWkshTemplate@1019 : Record "Bin Creation Wksh. Template";
      Location@1009 : Record Location;
      Zone@1000 : Record Zone;
      Text001@1002 : TextConst 'ENU=%1 Worksheet';
      Text002@1015 : TextConst 'ENU=Default Worksheet';
      Text003@1004 : TextConst 'ENU=Cancelled.';
      Bin@1016 : Record Bin;
      Item@1012 : Record Item;
      ItemUnitOfMeasure@1017 : Record "Item Unit of Measure";
      WMSMgt@1005 : Codeunit "WMS Management";
      Text004@1003 : TextConst 'ENU=DEFAULT';
      Text005@1006 : TextConst 'ENU=The Total Cubage %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?';
      Text007@1008 : TextConst 'ENU=The %1 %2 %3 does not match the %4 %5.';
      Text008@1018 : TextConst 'ENU=The location %1 of bin creation  Wksh. batch %2 is not enabled for user %3.';
      Text009@1013 : TextConst 'ENU=The %1 %2 must not be less than the %3 %4.';
      UOMMgt@1014 : Codeunit "Unit of Measure Management";
      Text010@1001 : TextConst 'ENU=There is already a default bin content for location code %1, item no. %2 and variant code %3.';
      OpenFromBatch@1010 : Boolean;

    [External]
    PROCEDURE EmptyLine@7() : Boolean;
    BEGIN
      if Type = Type::Bin then
        exit(("Bin Code" = '') and ("Location Code" = '') and ("Zone Code" = ''));

      exit(("Bin Code" = '') and ("Location Code" = '') and ("Zone Code" = '') and
        ("Item No." = '') and ("Unit of Measure Code" = ''))
    END;

    [External]
    PROCEDURE SetUpNewLine@8(CurrentWkshTemplateName@1000 : Code[10]);
    BEGIN
      if BinCreateWkshTemplate.Name <> CurrentWkshTemplateName then
        BinCreateWkshTemplate.GET(CurrentWkshTemplateName);
      Type := BinCreateWkshTemplate.Type;
    END;

    [External]
    PROCEDURE TemplateSelection@18(PageID@1004 : Integer;PageTemplate@1000 : Option;VAR BinCreateWkshLine@1003 : Record "Bin Creation Worksheet Line";VAR WkshSelected@1002 : Boolean);
    VAR
      BinCreateWkshTemplate@1001 : Record "Bin Creation Wksh. Template";
    BEGIN
      WkshSelected := true;

      BinCreateWkshTemplate.RESET;
      if not OpenFromBatch then
        BinCreateWkshTemplate.SETRANGE("Page ID",PageID);
      BinCreateWkshTemplate.SETRANGE(Type,PageTemplate);
      case BinCreateWkshTemplate.COUNT of
        0:
          begin
            BinCreateWkshTemplate.INIT;
            BinCreateWkshTemplate.Type := PageTemplate;
            BinCreateWkshTemplate.Name :=
              FORMAT(BinCreateWkshTemplate.Type,MAXSTRLEN(BinCreateWkshTemplate.Name));
            BinCreateWkshTemplate.Description :=
              STRSUBSTNO(Text001,BinCreateWkshTemplate.Type);
            BinCreateWkshTemplate.VALIDATE("Page ID");
            BinCreateWkshTemplate.INSERT;
            COMMIT;
          end;
        1:
          BinCreateWkshTemplate.FINDFIRST;
        else
          WkshSelected := PAGE.RUNMODAL(0,BinCreateWkshTemplate) = ACTION::LookupOK;
      end;
      if WkshSelected then begin
        BinCreateWkshLine.FILTERGROUP := 2;
        BinCreateWkshLine.SETRANGE("Worksheet Template Name",BinCreateWkshTemplate.Name);
        BinCreateWkshLine.SETRANGE(Type,BinCreateWkshTemplate.Type);
        BinCreateWkshLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          BinCreateWkshLine."Worksheet Template Name" := '';
          PAGE.RUN(BinCreateWkshTemplate."Page ID",BinCreateWkshLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@9(VAR BinCreateWkshName@1003 : Record "Bin Creation Wksh. Name");
    VAR
      BinCreateWkshLine@1000 : Record "Bin Creation Worksheet Line";
      JnlSelected@1001 : Boolean;
    BEGIN
      OpenFromBatch := true;
      BinCreateWkshName.CALCFIELDS("Template Type");
      BinCreateWkshLine.Name := BinCreateWkshName.Name;
      BinCreateWkshLine."Location Code" := BinCreateWkshName."Location Code";
      TemplateSelection(0,BinCreateWkshName."Template Type",BinCreateWkshLine,JnlSelected);
    END;

    [External]
    PROCEDURE OpenWksh@17(VAR CurrentWkshName@1000 : Code[10];VAR CurrentLocationCode@1002 : Code[10];VAR BinCreateWkshLine@1001 : Record "Bin Creation Worksheet Line");
    BEGIN
      WMSMgt.CheckUserIsWhseEmployee;
      CheckTemplateName(
        BinCreateWkshLine.GETRANGEMAX("Worksheet Template Name"),
        CurrentLocationCode,CurrentWkshName);
      BinCreateWkshLine.FILTERGROUP := 2;
      BinCreateWkshLine.SETRANGE(Name,CurrentWkshName);
      if CurrentLocationCode <> '' then
        BinCreateWkshLine.SETRANGE("Location Code",CurrentLocationCode);
      BinCreateWkshTemplate.GET(BinCreateWkshLine.GETRANGEMAX("Worksheet Template Name"));
      BinCreateWkshLine.SETRANGE(Type,BinCreateWkshTemplate.Type);
      BinCreateWkshLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenWkshBatch@3(VAR BinCreateWkshName@1005 : Record "Bin Creation Wksh. Name");
    VAR
      CopyOfBinCreateWkshName@1000 : Record "Bin Creation Wksh. Name";
      BinCreateWkshTemplate@1001 : Record "Bin Creation Wksh. Template";
      BinCreateWkshLine@1002 : Record "Bin Creation Worksheet Line";
      JnlSelected@1003 : Boolean;
    BEGIN
      CopyOfBinCreateWkshName := BinCreateWkshName;
      if not BinCreateWkshName.FIND('-') then begin
        for BinCreateWkshTemplate.Type := BinCreateWkshTemplate.Type::Bin to BinCreateWkshTemplate.Type::"Bin Content" do begin
          BinCreateWkshTemplate.SETRANGE(Type,BinCreateWkshTemplate.Type);
          if not BinCreateWkshTemplate.FINDFIRST then
            TemplateSelection(0,BinCreateWkshTemplate.Type,BinCreateWkshLine,JnlSelected);
          if BinCreateWkshTemplate.FINDFIRST then
            CheckTemplateName(BinCreateWkshTemplate.Name,BinCreateWkshName.Name,BinCreateWkshName."Location Code");
        end;
        if BinCreateWkshName.FIND('-') then;
        CopyOfBinCreateWkshName := BinCreateWkshName;
      end;
      BinCreateWkshName := CopyOfBinCreateWkshName;
    END;

    LOCAL PROCEDURE CheckTemplateName@16(CurrentWkshTemplateName@1000 : Code[10];VAR CurrentLocationCode@1003 : Code[10];VAR CurrentWkshName@1001 : Code[10]);
    VAR
      BinCreateWkshName@1002 : Record "Bin Creation Wksh. Name";
    BEGIN
      WMSMgt.GetWMSLocation(CurrentLocationCode);

      BinCreateWkshName.SETRANGE("Worksheet Template Name",CurrentWkshTemplateName);
      BinCreateWkshName.SETRANGE("Location Code",CurrentLocationCode);
      BinCreateWkshName.SETRANGE(Name,CurrentWkshName);
      if not BinCreateWkshName.ISEMPTY then
        exit;

      BinCreateWkshName.SETRANGE(Name);
      if not BinCreateWkshName.FINDFIRST then begin
        BinCreateWkshName.INIT;
        BinCreateWkshName."Worksheet Template Name" := CurrentWkshTemplateName;
        BinCreateWkshName.SetupNewName;
        BinCreateWkshName."Location Code" := CurrentLocationCode;
        BinCreateWkshName.Name := Text004;
        BinCreateWkshName.Description := Text002;
        BinCreateWkshName.INSERT(true);
        COMMIT;
      end;
      CurrentWkshName := BinCreateWkshName.Name;
    END;

    [External]
    PROCEDURE CheckName@14(CurrentWkshName@1000 : Code[10];CurrentLocationCode@1003 : Code[10];VAR BinCreateWkshLine@1001 : Record "Bin Creation Worksheet Line");
    VAR
      BinCreateWkshName@1002 : Record "Bin Creation Wksh. Name";
      WhseEmployee@1004 : Record "Warehouse Employee";
    BEGIN
      BinCreateWkshName.GET(
        BinCreateWkshLine.GETRANGEMAX(
          "Worksheet Template Name"),CurrentWkshName,CurrentLocationCode);
      if (USERID <> '') and not WhseEmployee.GET(USERID,CurrentLocationCode) then
        ERROR(Text008,CurrentLocationCode,CurrentWkshName,USERID);
    END;

    [External]
    PROCEDURE SetName@13(CurrentWkshName@1000 : Code[10];CurrentLocationCode@1002 : Code[10];VAR BinCreateWkshLine@1001 : Record "Bin Creation Worksheet Line");
    BEGIN
      BinCreateWkshLine.FILTERGROUP := 2;
      BinCreateWkshLine.SETRANGE(Name,CurrentWkshName);
      BinCreateWkshLine.SETRANGE("Location Code",CurrentLocationCode);
      BinCreateWkshLine.FILTERGROUP := 0;
      if BinCreateWkshLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupBinCreationName@19(VAR CurrentWkshName@1000 : Code[10];VAR CurrentLocationCode@1003 : Code[10];VAR BinCreateWkshLine@1001 : Record "Bin Creation Worksheet Line");
    VAR
      BinCreateWkshName@1002 : Record "Bin Creation Wksh. Name";
    BEGIN
      COMMIT;
      BinCreateWkshName."Worksheet Template Name" :=
        BinCreateWkshLine.GETRANGEMAX("Worksheet Template Name");
      BinCreateWkshName.Name := BinCreateWkshLine.GETRANGEMAX(Name);
      BinCreateWkshName.SETRANGE(
        "Worksheet Template Name",BinCreateWkshName."Worksheet Template Name");
      if PAGE.RUNMODAL(
           PAGE::"Bin Creation Wksh. Name List",BinCreateWkshName) = ACTION::LookupOK
      then begin
        CurrentWkshName := BinCreateWkshName.Name;
        CurrentLocationCode := BinCreateWkshName."Location Code";
        SetName(CurrentWkshName,CurrentLocationCode,BinCreateWkshLine);
      end;
    END;

    LOCAL PROCEDURE CheckMaxQtyBinContent@4(CheckWeight@1000 : Boolean);
    VAR
      BinContent@1001 : Record "Bin Content";
      TotalCubage@1002 : Decimal;
      TotalWeight@1003 : Decimal;
      Cubage@1004 : Decimal;
      Weight@1005 : Decimal;
    BEGIN
      if ("Maximum Cubage" <> 0) or ("Maximum Weight" <> 0) then begin
        BinContent.SETRANGE("Location Code","Location Code");
        BinContent.SETRANGE("Zone Code","Zone Code");
        BinContent.SETRANGE("Bin Code","Bin Code");
        if BinContent.FIND('-') then
          repeat
            WMSMgt.CalcCubageAndWeight(
              BinContent."Item No.",BinContent."Unit of Measure Code",
              BinContent."Max. Qty.",Cubage,Weight);
            TotalCubage := TotalCubage + Cubage;
            TotalWeight := TotalWeight + Weight;
          until BinContent.NEXT = 0;

        if (not CheckWeight) and
           ("Maximum Cubage" > 0) and ("Maximum Cubage" - TotalCubage < 0)
        then
          if not CONFIRM(Text005,false,
               TotalCubage,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Cubage"),"Maximum Cubage")
          then
            ERROR(Text003);
        if CheckWeight and ("Maximum Weight" > 0) and ("Maximum Weight" - TotalWeight < 0) then
          if not CONFIRM(Text005,false,
               TotalWeight,BinContent.FIELDCAPTION("Max. Qty."),
               FIELDCAPTION("Maximum Weight"),"Maximum Weight")
          then
            ERROR(Text003);
      end;
    END;

    LOCAL PROCEDURE CheckWhseClass@6(ItemNo@1000 : Code[20]);
    BEGIN
      GetItem(ItemNo);
      if (Item."Warehouse Class Code" <> '') and
         (Item."Warehouse Class Code" <> "Warehouse Class Code")
      then
        ERROR(
          Text007,
          TABLECAPTION,FIELDCAPTION("Warehouse Class Code"),"Warehouse Class Code",
          Item.TABLECAPTION,Item.FIELDCAPTION("Warehouse Class Code"));
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      if ItemNo <> Item."No." then
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE GetZone@1(LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10]);
    BEGIN
      TESTFIELD("Location Code");
      TESTFIELD("Zone Code");
      if (Zone."Location Code" <> LocationCode) or
         (Zone.Code <> ZoneCode)
      then
        Zone.GET("Location Code","Zone Code");
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@11();
    BEGIN
      GetItem("Item No.");
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    [External]
    PROCEDURE GetItemDescr@20(ItemNo@1000 : Code[20];VariantCode@1005 : Code[10];VAR ItemDescription@1001 : Text[50]);
    VAR
      Item@1002 : Record Item;
      ItemVariant@1004 : Record "Item Variant";
      OldItemNo@1003 : Code[20];
    BEGIN
      ItemDescription := '';
      if ItemNo <> OldItemNo then begin
        ItemDescription := '';
        if ItemNo <> '' then begin
          if Item.GET(ItemNo) then
            ItemDescription := Item.Description;
          if VariantCode <> '' then
            if ItemVariant.GET(ItemNo,VariantCode) then
              ItemDescription := ItemVariant.Description;
        end;
        OldItemNo := ItemNo;
      end;
    END;

    [External]
    PROCEDURE GetUnitOfMeasureDescr@24(UOMCode@1002 : Code[10];VAR UOMDescription@1000 : Text[50]);
    VAR
      UOM@1001 : Record "Unit of Measure";
    BEGIN
      UOMDescription := '';
      if UOMCode = '' then
        CLEAR(UOM)
      else
        if UOMCode <> UOM.Code then
          if UOM.GET(UOMCode) then;
      UOMDescription := UOM.Description;
    END;

    BEGIN
    END.
  }
}

