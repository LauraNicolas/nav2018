OBJECT Codeunit 869 Cash Flow Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CashFlowForecast@1016 : Record "Cash Flow Forecast";
      CashFlowSetup@1008 : Record "Cash Flow Setup";
      CashFlowChartSetup@1006 : Record "Cash Flow Chart Setup";
      TextTotal@1005 : TextConst 'ENU=Total';
      TextPositive@1012 : TextConst 'ENU=Positive';
      TextNegative@1014 : TextConst 'ENU=Negative';
      Text001@1009 : TextConst 'ENU=Select the "Show in Chart on Role Center" field in the Cash Flow Forecast window to display the chart on the Role Center.';

    [External]
    PROCEDURE OnOpenPage@3(VAR CashFlowChartSetup@1000 : Record "Cash Flow Chart Setup");
    BEGIN
      with CashFlowChartSetup do
        if not GET(USERID) then begin
          "User ID" := USERID;
          "Start Date" := "Start Date"::"Working Date";
          "Period Length" := "Period Length"::Month;
          Show := Show::Combined;
          "Chart Type" := "Chart Type"::"Stacked Column";
          "Group By" := "Group By"::"Source Type";
          INSERT;
        end;
    END;

    [Internal]
    PROCEDURE DrillDown@4(VAR BusChartBuf@1002 : Record "Business Chart Buffer");
    VAR
      ToDate@1003 : Date;
    BEGIN
      ToDate := BusChartBuf.GetXValueAsDate(BusChartBuf."Drill-Down X Index");

      CashFlowChartSetup.GET(USERID);
      BusChartBuf."Period Length" := CashFlowChartSetup."Period Length";
      CashFlowForecast.RESET;
      CashFlowForecast.SetCashFlowDateFilter(BusChartBuf.CalcFromDate(ToDate),ToDate);
      DrillDownAmountForGroupBy(CashFlowForecast,CashFlowChartSetup."Group By",BusChartBuf.GetCurrMeasureValueString);
    END;

    LOCAL PROCEDURE DrillDownAmountForGroupBy@19(VAR CashFlowForecast@1005 : Record "Cash Flow Forecast";GroupBy@1000 : Option;Value@1001 : Text[30]);
    VAR
      SourceType@1004 : Integer;
      AccountNo@1003 : Code[20];
      PositiveAmount@1002 : Boolean;
    BEGIN
      if Value = '' then
        CashFlowForecast.DrillDown
      else
        case GroupBy of
          CashFlowChartSetup."Group By"::"Positive/Negative":
            begin
              EVALUATE(PositiveAmount,Value,9);
              CashFlowForecast.DrillDownPosNegEntries(PositiveAmount);
            end;
          CashFlowChartSetup."Group By"::"Account No.":
            begin
              EVALUATE(AccountNo,Value,9);
              CashFlowForecast.DrillDownEntriesForAccNo(AccountNo);
            end;
          CashFlowChartSetup."Group By"::"Source Type":
            begin
              EVALUATE(SourceType,Value,9);
              CashFlowForecast.DrillDownEntriesFromSource(SourceType);
            end;
        end;
    END;

    [Internal]
    PROCEDURE UpdateData@6(VAR BusChartBuf@1004 : Record "Business Chart Buffer") : Boolean;
    VAR
      BusChartMapColumn@1005 : Record "Business Chart Map";
      BusChartMapMeasure@1003 : Record "Business Chart Map";
      Amount@1008 : Decimal;
      FromDate@1007 : Date;
      ToDate@1001 : Date;
      Accumulate@1006 : Boolean;
    BEGIN
      if not CashFlowSetup.GET or CashFlowForecast.ISEMPTY then
        exit(false);
      if CashFlowSetup."CF No. on Chart in Role Center" = '' then begin
        MESSAGE(Text001);
        exit(false);
      end;
      CashFlowForecast.GET(CashFlowSetup."CF No. on Chart in Role Center");
      CashFlowChartSetup.GET(USERID);

      with BusChartBuf do begin
        Initialize;
        "Period Length" := CashFlowChartSetup."Period Length";
        SetPeriodXAxis;

        if CalcPeriods(CashFlowForecast,BusChartBuf) then begin
          case CashFlowChartSetup.Show of
            CashFlowChartSetup.Show::"Accumulated Cash":
              AddMeasures(CashFlowForecast,CashFlowChartSetup.Show::"Accumulated Cash",BusChartBuf);
            CashFlowChartSetup.Show::"Change in Cash":
              AddMeasures(CashFlowForecast,CashFlowChartSetup.Show::"Change in Cash",BusChartBuf);
            CashFlowChartSetup.Show::Combined:
              begin
                AddMeasures(CashFlowForecast,CashFlowChartSetup.Show::"Change in Cash",BusChartBuf);
                AddMeasures(CashFlowForecast,CashFlowChartSetup.Show::"Accumulated Cash",BusChartBuf);
              end;
          end;

          if FindFirstMeasure(BusChartMapMeasure) then
            repeat
              Accumulate := BusChartMapMeasure.Name = TextTotal;
              if FindFirstColumn(BusChartMapColumn) then
                repeat
                  ToDate := BusChartMapColumn.GetValueAsDate;

                  if Accumulate then begin
                    if CashFlowChartSetup."Start Date" = CashFlowChartSetup."Start Date"::"Working Date" then
                      FromDate := WORKDATE
                    else
                      FromDate := 0D
                  end else
                    FromDate := CalcFromDate(ToDate);

                  CashFlowForecast.RESET;
                  CashFlowForecast.SetCashFlowDateFilter(FromDate,ToDate);
                  Amount := CalcAmountForGroupBy(CashFlowForecast,CashFlowChartSetup."Group By",BusChartMapMeasure."Value String");

                  SetValue(BusChartMapMeasure.Name,BusChartMapColumn.Index,Amount);
                until not NextColumn(BusChartMapColumn);
            until not NextMeasure(BusChartMapMeasure);
        end;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CalcAmountForGroupBy@12(VAR CashFlowForecast@1005 : Record "Cash Flow Forecast";GroupBy@1000 : Option;Value@1001 : Text[30]) : Decimal;
    VAR
      SourceType@1004 : Integer;
      AccountNo@1003 : Code[20];
      PositiveAmount@1002 : Boolean;
    BEGIN
      if Value = '' then
        exit(CashFlowForecast.CalcAmount);

      case GroupBy of
        CashFlowChartSetup."Group By"::"Positive/Negative":
          begin
            EVALUATE(PositiveAmount,Value,9);
            exit(CashFlowForecast.CalcAmountForPosNeg(PositiveAmount));
          end;
        CashFlowChartSetup."Group By"::"Account No.":
          begin
            EVALUATE(AccountNo,Value,9);
            exit(CashFlowForecast.CalcAmountForAccountNo(AccountNo));
          end;
        CashFlowChartSetup."Group By"::"Source Type":
          begin
            EVALUATE(SourceType,Value,9);
            exit(CashFlowForecast.CalcAmountFromSource(SourceType));
          end;
      end;
    END;

    LOCAL PROCEDURE AddMeasures@13(CashFlowForecast@1001 : Record "Cash Flow Forecast";Show@1003 : Option;VAR BusChartBuf@1004 : Record "Business Chart Buffer");
    BEGIN
      case Show of
        CashFlowChartSetup.Show::"Accumulated Cash":
          BusChartBuf.AddMeasure(TextTotal,'',BusChartBuf."Data Type"::Decimal,BusChartBuf."Chart Type"::StepLine);
        CashFlowChartSetup.Show::"Change in Cash":
          case CashFlowChartSetup."Group By" of
            CashFlowChartSetup."Group By"::"Positive/Negative":
              CollectPosNeg(CashFlowForecast,BusChartBuf);
            CashFlowChartSetup."Group By"::"Account No.":
              CollectAccounts(CashFlowForecast,BusChartBuf);
            CashFlowChartSetup."Group By"::"Source Type":
              CollectSourceTypes(CashFlowForecast,BusChartBuf);
          end;
      end;
    END;

    LOCAL PROCEDURE GetEntryDate@14(CashFlowForecast@1001 : Record "Cash Flow Forecast";Which@1000 : 'First,Last') : Date;
    BEGIN
      if Which = Which::First then
        if CashFlowChartSetup."Start Date" = CashFlowChartSetup."Start Date"::"Working Date" then
          exit(WORKDATE);
      exit(CashFlowForecast.GetEntryDate(Which));
    END;

    [Internal]
    PROCEDURE CollectSourceTypes@1(CashFlowForecast@1000 : Record "Cash Flow Forecast";VAR BusChartBuf@1001 : Record "Business Chart Buffer") : Integer;
    VAR
      CFForecastEntry@1004 : Record "Cash Flow Forecast Entry";
      CashFlowWorksheetLine@1005 : Record "Cash Flow Worksheet Line";
      FromDate@1003 : Date;
      ToDate@1002 : Date;
      SourceType@1006 : Option;
      Which@1008 : 'First,Last';
      Index@1007 : Integer;
    BEGIN
      Index := 0;
      FromDate := CashFlowChartSetup.GetStartDate;
      ToDate := CashFlowForecast.GetEntryDate(Which::Last);
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.SETRANGE("Cash Flow Date",FromDate,ToDate);
      for SourceType := 1 to CashFlowWorksheetLine.GetNumberOfSourceTypes do begin
        CFForecastEntry.SETRANGE("Source Type",SourceType);
        if not CFForecastEntry.ISEMPTY then begin
          CashFlowForecast."Source Type Filter" := SourceType;
          Index += 1;
          BusChartBuf.AddMeasure(
            FORMAT(CashFlowForecast."Source Type Filter"),
            CashFlowForecast."Source Type Filter",
            BusChartBuf."Data Type"::Decimal,
            BusChartBuf."Chart Type"::StackedColumn);
        end;
      end;
      exit(Index);
    END;

    [Internal]
    PROCEDURE CollectAccounts@11(CashFlowForecast@1000 : Record "Cash Flow Forecast";VAR BusChartBuf@1001 : Record "Business Chart Buffer") : Integer;
    VAR
      CFForecastEntry@1004 : Record "Cash Flow Forecast Entry";
      CFAccount@1009 : Record "Cash Flow Account";
      FromDate@1003 : Date;
      ToDate@1002 : Date;
      Which@1008 : 'First,Last';
      Index@1007 : Integer;
    BEGIN
      Index := 0;
      FromDate := CashFlowChartSetup.GetStartDate;
      ToDate := CashFlowForecast.GetEntryDate(Which::Last);
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.SETRANGE("Cash Flow Date",FromDate,ToDate);
      CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
      if CFAccount.FINDSET then
        repeat
          CFForecastEntry.SETRANGE("Cash Flow Account No.",CFAccount."No.");
          if not CFForecastEntry.ISEMPTY then begin
            Index += 1;
            BusChartBuf.AddMeasure(
              CFAccount."No.",
              CFAccount."No.",
              BusChartBuf."Data Type"::Decimal,
              BusChartBuf."Chart Type"::StackedColumn);
          end;
        until CFAccount.NEXT = 0;
      exit(Index);
    END;

    [Internal]
    PROCEDURE CollectPosNeg@10(CashFlowForecast@1000 : Record "Cash Flow Forecast";VAR BusChartBuf@1009 : Record "Business Chart Buffer") : Integer;
    VAR
      CFForecastEntry@1004 : Record "Cash Flow Forecast Entry";
      Caption@1006 : Text[80];
      FromDate@1003 : Date;
      ToDate@1002 : Date;
      Which@1008 : 'First,Last';
      Index@1007 : Integer;
      Positive@1001 : Boolean;
    BEGIN
      Index := 0;
      FromDate := CashFlowChartSetup.GetStartDate;
      ToDate := CashFlowForecast.GetEntryDate(Which::Last);
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.SETRANGE("Cash Flow Date",FromDate,ToDate);
      Caption := TextNegative;
      for Positive := false to true do begin
        CFForecastEntry.SETRANGE(Positive,Positive);
        if not CFForecastEntry.ISEMPTY then begin
          Index += 1;
          BusChartBuf.AddMeasure(
            Caption,
            Positive,
            BusChartBuf."Data Type"::Decimal,
            BusChartBuf."Chart Type"::StackedColumn);
        end;
        Caption := TextPositive;
      end;
      exit(Index);
    END;

    LOCAL PROCEDURE CalcPeriods@5(CashFlowForecast@1000 : Record "Cash Flow Forecast";VAR BusChartBuf@1001 : Record "Business Chart Buffer") : Boolean;
    VAR
      Which@1002 : 'First,Last';
      FromDate@1003 : Date;
      ToDate@1004 : Date;
    BEGIN
      FromDate := GetEntryDate(CashFlowForecast,Which::First);
      ToDate := GetEntryDate(CashFlowForecast,Which::Last);
      if ToDate <> 0D then
        BusChartBuf.AddPeriods(FromDate,ToDate);
      exit(ToDate <> 0D);
    END;

    BEGIN
    END.
  }
}

