OBJECT Page 481 Dimension Set ID Filter
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Dimension Filter;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=Dimension;
    DelayedInsert=true;
    PageType=List;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    ShowFilter=false;
    OnOpenPage=BEGIN
                 TempDimensionSetIDFilterLine.SETRANGE(Code,'');
                 TempDimensionSetIDFilterLine.SETRANGE("Line No.",1);
                 if TempDimensionSetIDFilterLine.FINDSET then
                   repeat
                     Code := TempDimensionSetIDFilterLine."Dimension Code";
                     INSERT;
                   until TempDimensionSetIDFilterLine.NEXT = 0;
               END;

    OnAfterGetRecord=BEGIN
                       DimensionValueFilter := TempDimensionSetIDFilterLine.GetDimensionValueFilter('',Code);
                     END;

    OnNewRecord=BEGIN
                  DimensionValueFilter := ''
                END;

    OnInsertRecord=BEGIN
                     exit(false);
                   END;

    OnDeleteRecord=BEGIN
                     TempDimensionSetIDFilterLine.RESET;
                     TempDimensionSetIDFilterLine.SETRANGE(Code,'');
                     TempDimensionSetIDFilterLine.SETRANGE("Dimension Code",Code);
                     TempDimensionSetIDFilterLine.DELETEALL;
                     DELETE;
                     CurrPage.UPDATE(false);
                     exit(false);
                   END;

    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      Name=ActionContainer5;
                      ActionContainerType=ActionItems }
      { 6       ;1   ;Action    ;
                      Name=Clear Filter;
                      CaptionML=ENU=Clear Filter;
                      ToolTipML=ENU=Remove the filter for all dimensions.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ClearFilter;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 TempDimensionSetIDFilterLine.RESET;
                                 TempDimensionSetIDFilterLine.DELETEALL;
                                 DELETEALL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                Name=Group4;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies the code for the dimension.;
                ApplicationArea=#Suite;
                SourceExpr=Code;
                TableRelation=Dimension.Code;
                OnValidate=VAR
                             Dimension@1000 : Record Dimension;
                           BEGIN
                             if not Dimension.GET(Code) then begin
                               Dimension.SETFILTER(Code,'%1','@' + Code + '*');
                               if not Dimension.FINDFIRST then
                                 Dimension.GET(Code);
                               Code := Dimension.Code;
                             end;
                             if GET(Code) then
                               ERROR(RecordAlreadyExistsErr);
                             INSERT;
                             TempDimensionSetIDFilterLine.Code := '';
                             TempDimensionSetIDFilterLine."Dimension Code" := Code;
                             TempDimensionSetIDFilterLine.SetDimensionValueFilter('');
                             CurrPage.UPDATE(false);
                           END;

                ImplicitType=Code20 }

    { 3   ;2   ;Field     ;
                Name=DimensionValueFilter;
                CaptionML=ENU=Filter;
                ToolTipML=ENU=Specifies the filter for the dimension values.;
                ApplicationArea=#Suite;
                SourceExpr=DimensionValueFilter;
                OnValidate=BEGIN
                             TempDimensionSetIDFilterLine.Code := '';
                             TempDimensionSetIDFilterLine."Dimension Code" := Code;
                             TempDimensionSetIDFilterLine.SetDimensionValueFilter(DimensionValueFilter);
                           END;

                OnLookup=VAR
                           DimensionValue@1000 : Record "Dimension Value";
                         BEGIN
                           exit(DimensionValue.LookUpDimFilter(Code,Text));
                         END;

                ImplicitType=Text }

  }
  CODE
  {
    VAR
      TempDimensionSetIDFilterLine@1003 : TEMPORARY Record "Dimension Set ID Filter Line";
      FilterNotification@1001 : Notification;
      NotificationGUID@1004 : GUID;
      DimensionValueFilter@1000 : Text;
      NotificationMsg@1002 : TextConst 'ENU=The view is filtered by dimensions:';
      RecordAlreadyExistsErr@1005 : TextConst 'ENU=The record already exists.';

    [External]
    PROCEDURE LookupFilter@6() DimFilter : Text;
    VAR
      DimensionMgt@1000 : Codeunit DimensionManagement;
      DimSetIDFilterPage@1001 : Page "Dimension Set ID Filter";
    BEGIN
      DimSetIDFilterPage.SetTempDimensionSetIDFilterLine(TempDimensionSetIDFilterLine);
      DimSetIDFilterPage.EDITABLE(true);
      DimSetIDFilterPage.RUNMODAL;
      DimSetIDFilterPage.GetTempDimensionSetIDFilterLine(TempDimensionSetIDFilterLine);
      TempDimensionSetIDFilterLine.RESET;
      if not TempDimensionSetIDFilterLine.ISEMPTY then begin
        GetDimSetIDsForFilter(DimensionMgt);
        DimFilter := DimensionMgt.GetDimSetFilter;
        if DimFilter = '' then
          DimFilter := '0&<>0';
        SendNotification;
      end else
        RecallNotification
    END;

    LOCAL PROCEDURE GetDimSetIDsForFilter@3(VAR DimensionMgt@1000 : Codeunit DimensionManagement);
    BEGIN
      TempDimensionSetIDFilterLine.RESET;
      TempDimensionSetIDFilterLine.SETRANGE(Code,'');
      TempDimensionSetIDFilterLine.SETRANGE("Line No.",1);
      if TempDimensionSetIDFilterLine.FINDSET then
        repeat
          DimensionMgt.GetDimSetIDsForFilter(TempDimensionSetIDFilterLine."Dimension Code",
            TempDimensionSetIDFilterLine.GetDimensionValueFilter(
              TempDimensionSetIDFilterLine.Code,TempDimensionSetIDFilterLine."Dimension Code"));
        until TempDimensionSetIDFilterLine.NEXT = 0;
    END;

    PROCEDURE GetTempDimensionSetIDFilterLine@9(VAR NewTempDimensionSetIDFilterLine@1000 : TEMPORARY Record "Dimension Set ID Filter Line");
    BEGIN
      NewTempDimensionSetIDFilterLine.COPY(TempDimensionSetIDFilterLine,true)
    END;

    PROCEDURE SetTempDimensionSetIDFilterLine@10(VAR NewTempDimensionSetIDFilterLine@1001 : TEMPORARY Record "Dimension Set ID Filter Line");
    BEGIN
      TempDimensionSetIDFilterLine.COPY(NewTempDimensionSetIDFilterLine,true);
    END;

    LOCAL PROCEDURE GetNotificationMessage@2() MessageTxt : Text;
    BEGIN
      TempDimensionSetIDFilterLine.RESET;
      TempDimensionSetIDFilterLine.SETRANGE(Code,'');
      TempDimensionSetIDFilterLine.SETRANGE("Line No.",1);
      if TempDimensionSetIDFilterLine.FINDSET then begin
        MessageTxt := STRSUBSTNO('%1 %2: %3',NotificationMsg,TempDimensionSetIDFilterLine."Dimension Code",
            TempDimensionSetIDFilterLine.GetDimensionValueFilter('',TempDimensionSetIDFilterLine."Dimension Code"));
        if TempDimensionSetIDFilterLine.NEXT <> 0 then
          repeat
            MessageTxt += STRSUBSTNO(', %1: %2',TempDimensionSetIDFilterLine."Dimension Code",
                TempDimensionSetIDFilterLine.GetDimensionValueFilter('',TempDimensionSetIDFilterLine."Dimension Code"));
          until TempDimensionSetIDFilterLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SendNotification@1();
    BEGIN
      if ISNULLGUID(NotificationGUID) then
        NotificationGUID := CREATEGUID;
      FilterNotification.ID := NotificationGUID;
      FilterNotification.MESSAGE(GetNotificationMessage);
      FilterNotification.SEND;
    END;

    LOCAL PROCEDURE RecallNotification@4();
    BEGIN
      if not ISNULLGUID(NotificationGUID) then begin
        FilterNotification.ID := NotificationGUID;
        FilterNotification.RECALL;
      end;
    END;

    BEGIN
    END.
  }
}

