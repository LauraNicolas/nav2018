OBJECT Page 5845 Inventory - G/L Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Inventory - G/L Reconciliation;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    DataCaptionExpr='';
    PageType=Card;
    OnInit=BEGIN
             ShowEditable := true;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;
                 TestWarning;
                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 if (LineDimCode = '') and (ColumnDimCode = '') then begin
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 end;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);
               END;

    OnFindRecord=BEGIN
                   with InvtReportHeader do begin
                     if "Line Option" = "Line Option"::"Balance Sheet" then begin
                       if (ItemFilter = '') and (LocationFilter = '') then begin
                         if ShowWarning then
                           RowIntegerLine.SETRANGE(Number,1,7)
                         else
                           RowIntegerLine.SETRANGE(Number,1,6)
                       end else
                         RowIntegerLine.SETRANGE(Number,1,4)
                     end else
                       if "Line Option" = "Line Option"::"Income Statement" then
                         if (ItemFilter = '') and (LocationFilter = '') then begin
                           if ShowWarning then
                             RowIntegerLine.SETRANGE(Number,1,18)
                           else
                             RowIntegerLine.SETRANGE(Number,1,17)
                         end else
                           RowIntegerLine.SETRANGE(Number,1,15);
                     exit(FindRec("Line Option",Rec,Which,true));
                   end;
                 END;

    OnNextRecord=BEGIN
                   exit(NextRec(InvtReportHeader."Line Option",Rec,Steps,true));
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=&Show Matrix;
                      CaptionML=ENU=&Show Matrix;
                      ToolTipML=ENU=View the data overview according to the selected filters and options.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1157 : Page "Inventory - G/L Recon Matrix";
                                 i@1001 : Integer;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 CLEAR(MatrixRecords);
                                 CLEAR(MATRIX_CaptionSet);

                                 with InvtReportHeader do begin
                                   if "Column Option" = "Line Option"::"Balance Sheet" then begin
                                     if (ItemFilter = '') and (LocationFilter = '') then begin
                                       if ShowWarning then
                                         ColIntegerLine.SETRANGE(Number,1,7)
                                       else
                                         ColIntegerLine.SETRANGE(Number,1,6)
                                     end else
                                       ColIntegerLine.SETRANGE(Number,1,4)
                                   end else
                                     if "Column Option" = "Line Option"::"Income Statement" then
                                       if (ItemFilter = '') and (LocationFilter = '') then begin
                                         if ShowWarning then
                                           ColIntegerLine.SETRANGE(Number,1,18)
                                         else
                                           ColIntegerLine.SETRANGE(Number,1,17)
                                       end else
                                         ColIntegerLine.SETRANGE(Number,1,15);
                                   i := 1;

                                   if FindRec("Column Option",MatrixRecords[i],'-',false) then begin
                                     MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                     i := i + 1;
                                     while NextRec("Column Option",MatrixRecords[i],1,false) <> 0 do begin
                                       MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                       i := i + 1;
                                     end;
                                   end;
                                 end;
                                 if ShowWarning then
                                   MATRIX_CurrentNoOfColumns := i
                                 else
                                   MATRIX_CurrentNoOfColumns := i - 1;

                                 MatrixForm.Load(MATRIX_CaptionSet,MatrixRecords,MATRIX_CurrentNoOfColumns,ShowWarning,
                                   DateFilter,ItemFilter,LocationFilter);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 20  ;2   ;Field     ;
                Name=DateFilter;
                CaptionML=ENU=Date Filter;
                ToolTipML=ENU=Specifies the dates that will be used to filter the amounts in the window.;
                ApplicationArea=#Advanced;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                             DateFilter := InvtReportHeader.GETFILTER("Posting Date Filter");
                             DateFilterOnAfterValidate;
                           END;

                ImplicitType=Text30 }

    { 25  ;2   ;Field     ;
                Name=ItemFilter;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies which items the information is shown for.;
                ApplicationArea=#Advanced;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             TestWarning;
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record Item;
                           ItemList@1003 : Page "Item List";
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := true;
                           if ItemList.RUNMODAL = ACTION::LookupOK then begin
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Code250 }

    { 14  ;2   ;Field     ;
                Name=LocationFilter;
                CaptionML=ENU=Location Filter;
                ToolTipML=ENU=Specifies which item locations the information is shown for.;
                ApplicationArea=#Advanced;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             TestWarning;
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Location@1002 : Record Location;
                           Locations@1003 : Page "Location List";
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := true;
                           if Locations.RUNMODAL = ACTION::LookupOK then begin
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Code250 }

    { 4   ;2   ;Field     ;
                Name=Show;
                CaptionML=ENU=Show Warning;
                ToolTipML=ENU=Specifies that a messages will be shown in the Warning field of the grid if there are any discrepancies between the inventory totals and G/L totals. If you choose the Warning field, the program gives you more information on what the warning means.;
                ApplicationArea=#Advanced;
                SourceExpr=ShowWarning;
                Editable=ShowEditable;
                OnValidate=BEGIN
                             ShowWarningOnAfterValidate;
                           END;

                ImplicitType=Boolean }

  }
  CODE
  {
    VAR
      MatrixRecords@1158 : ARRAY [32] OF Record "Dimension Code Buffer";
      GLSetup@1002 : Record "General Ledger Setup";
      InvtReportHeader@1028 : Record "Inventory Report Header";
      InvtReportEntry@1001 : TEMPORARY Record "Inventory Report Entry";
      RowIntegerLine@1005 : Record Integer;
      ColIntegerLine@1032 : Record Integer;
      MATRIX_CaptionSet@1004 : ARRAY [32] OF Text[80];
      MATRIX_CurrentNoOfColumns@1003 : Integer;
      LineDimCode@1031 : Text[20];
      ColumnDimCode@1020 : Text[20];
      DateFilter@1011 : Text[30];
      ItemFilter@1015 : Code[250];
      LocationFilter@1013 : Code[250];
      Text004@1029 : TextConst 'ENU=Income Statement';
      Text005@1030 : TextConst 'ENU=Balance Sheet';
      ShowWarning@1000 : Boolean;
      ShowEditable@19062405 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    BEGIN
      case DimCode of
        '':
          exit(-1);
        Text005:
          exit(0);
        Text004:
          exit(1);
        else
          exit(-1);
      end;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : '"Balance Sheet","Income Statement"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1007 : Boolean;
    BEGIN
      case DimOption of
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          if IsRow then begin
            if EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) then;
            Found := RowIntegerLine.FIND(Which);
            if Found then
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          end else begin
            if EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) then;
            Found := ColIntegerLine.FIND(Which);
            if Found then
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          end;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : '"Balance Sheet","Income Statement"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1007 : Integer;
    BEGIN
      case DimOption of
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          if IsRow then begin
            if EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) then;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          end else begin
            if EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) then;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            if ResultSteps <> 0 then
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          end;
      end;
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record Integer;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer";IsRow@1002 : Boolean);
    BEGIN
      with InvtReportEntry do
        case true of
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") and IsRow) or
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") and not IsRow):
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION(Inventory),0,false,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("WIP Inventory"),0,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION(Total),0,true,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("G/L Total"),0,true,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION(Difference),0,true,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION(Warning),0,true,TheDimCodeBuf);
            end;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") and IsRow) or
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") and not IsRow):
            case TheDimValue.Number of
              1:
                InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,false,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("WIP To Interim"),0,false,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,false,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,false,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Overhead Applied"),0,false,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,false,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,false,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION(COGS),0,false,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Purchase Variance"),0,false,TheDimCodeBuf);
              10:
                InsertRow('10',FIELDCAPTION("Material Variance"),0,false,TheDimCodeBuf);
              11:
                InsertRow('11',FIELDCAPTION("Capacity Variance"),0,false,TheDimCodeBuf);
              12:
                InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,false,TheDimCodeBuf);
              13:
                InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,false,TheDimCodeBuf);
              14:
                InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,false,TheDimCodeBuf);
              15:
                InsertRow('15',FIELDCAPTION(Total),0,true,TheDimCodeBuf);
              16:
                InsertRow('16',FIELDCAPTION("G/L Total"),0,true,TheDimCodeBuf);
              17:
                InsertRow('17',FIELDCAPTION(Difference),0,true,TheDimCodeBuf);
              18:
                InsertRow('18',FIELDCAPTION(Warning),0,true,TheDimCodeBuf);
            end;
        end
    END;

    LOCAL PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      end;
    END;

    LOCAL PROCEDURE TestWarning@2();
    BEGIN
      ShowEditable := true;
      if ShowWarning then begin
        if (ItemFilter <> '') or (LocationFilter <> '') then begin
          ShowWarning := false;
          ShowEditable := false;
        end;
      end else
        if (ItemFilter <> '') or (LocationFilter <> '') then begin
          ShowWarning := false;
          ShowEditable := false;
        end;
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowWarningOnAfterValidate@19052425();
    BEGIN
      InvtReportHeader."Show Warning" := ShowWarning;
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

