OBJECT Codeunit 1636 Office Contact Handler
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Office Add-in Context";
    OnRun=BEGIN
            if Email <> '' then
              RedirectContact(Rec)
            else
              ShowContactSelection(Rec);
          END;

  }
  CODE
  {
    VAR
      SelectAContactTxt@1000 : TextConst 'ENU=Select a contact';

    LOCAL PROCEDURE RedirectContact@11(TempOfficeAddinContext@1002 : TEMPORARY Record "Office Add-in Context");
    VAR
      Contact@1000 : Record Contact;
      TempOfficeContactAssociations@1001 : TEMPORARY Record "Office Contact Associations";
    BEGIN
      if TempOfficeAddinContext."Contact No." <> '' then
        Contact.SETRANGE("No.",TempOfficeAddinContext."Contact No.")
      else
        Contact.SETRANGE("Search E-Mail",UPPERCASE(TempOfficeAddinContext.Email));

      if not Contact.FINDFIRST then
        PAGE.RUN(PAGE::"Office New Contact Dlg")
      else
        with TempOfficeContactAssociations do begin
          CollectMultipleContacts(Contact,TempOfficeContactAssociations,TempOfficeAddinContext);
          if (COUNT > 1) and (TempOfficeAddinContext.Command <> '') then
            SETRANGE("Associated Table",TempOfficeAddinContext.CommandType);

          if COUNT = 1 then begin
            FINDFIRST;
            ShowCustomerVendor(TempOfficeAddinContext,Contact,"Associated Table",GetContactNo);
            exit;
          end;

          SETRANGE(Type,Type::"Contact Person");
          if COUNT = 1 then begin
            FINDFIRST;
            ShowCustomerVendor(TempOfficeAddinContext,Contact,"Associated Table",GetContactNo);
            exit;
          end;

          SETRANGE(Type);
          if COUNT > 1 then
            PAGE.RUN(PAGE::"Office Contact Associations",TempOfficeContactAssociations);
        end;
    END;

    [External]
    PROCEDURE ShowContactSelection@2(OfficeAddinContext@1000 : Record "Office Add-in Context");
    VAR
      Contact@1002 : Record Contact;
      ContactList@1001 : Page "Contact List";
    BEGIN
      FilterContacts(OfficeAddinContext,Contact);
      ContactList.SETTABLEVIEW(Contact);
      ContactList.LOOKUPMODE(true);
      ContactList.CAPTION(SelectAContactTxt);
      if ContactList.LOOKUPMODE then;
      ContactList.RUN;
    END;

    [External]
    PROCEDURE ShowCustomerVendor@8(TempOfficeAddinContext@1006 : TEMPORARY Record "Office Add-in Context";Contact@1005 : Record Contact;AssociatedTable@1000 : Option;LinkNo@1001 : Code[20]);
    VAR
      OfficeContactAssociations@1002 : Record "Office Contact Associations";
      Customer@1003 : Record Customer;
      Vendor@1004 : Record Vendor;
    BEGIN
      case AssociatedTable of
        OfficeContactAssociations."Associated Table"::Customer:
          begin
            if TempOfficeAddinContext.CommandType = OfficeContactAssociations."Associated Table"::Vendor then
              PAGE.RUN(PAGE::"Office No Vendor Dlg",Contact)
            else
              if Customer.GET(LinkNo) then
                RedirectCustomer(Customer,TempOfficeAddinContext);
            exit;
          end;
        OfficeContactAssociations."Associated Table"::Vendor:
          begin
            if TempOfficeAddinContext.CommandType = OfficeContactAssociations."Associated Table"::Customer then
              PAGE.RUN(PAGE::"Office No Customer Dlg",Contact)
            else
              if Vendor.GET(LinkNo) then
                RedirectVendor(Vendor,TempOfficeAddinContext);
            exit;
          end;
        else
          if TempOfficeAddinContext.CommandType = OfficeContactAssociations."Associated Table"::Customer then begin
            PAGE.RUN(PAGE::"Office No Customer Dlg",Contact);
            exit;
          end;
          if TempOfficeAddinContext.CommandType = OfficeContactAssociations."Associated Table"::Vendor then begin
            PAGE.RUN(PAGE::"Office No Vendor Dlg",Contact);
            exit;
          end;
      end;

      Contact.GET(LinkNo);
      PAGE.RUN(PAGE::"Contact Card",Contact)
    END;

    LOCAL PROCEDURE CollectMultipleContacts@7(VAR Contact@1000 : Record Contact;VAR TempOfficeContactAssociations@1001 : TEMPORARY Record "Office Contact Associations";TempOfficeAddinContext@1005 : TEMPORARY Record "Office Add-in Context");
    VAR
      ContactBusinessRelation@1002 : Record "Contact Business Relation";
    BEGIN
      FilterContactBusinessRelations(Contact,ContactBusinessRelation);
      if TempOfficeAddinContext.IsAppointment then
        ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      if ContactBusinessRelation.FINDSET then
        repeat
          ContactBusinessRelation.CALCFIELDS("Business Relation Description");
          with TempOfficeContactAssociations do
            if not GET(ContactBusinessRelation."Contact No.",Contact.Type,ContactBusinessRelation."Link to Table") then begin
              CLEAR(TempOfficeContactAssociations);
              INIT;
              TRANSFERFIELDS(ContactBusinessRelation);
              "Contact Name" := Contact.Name;
              Type := Contact.Type;
              "Business Relation Description" := ContactBusinessRelation."Business Relation Description";
              if ContactBusinessRelation."Link to Table" = TempOfficeAddinContext.CommandType then begin
                "Contact No." := Contact."No.";
                "Associated Table" := TempOfficeAddinContext.CommandType;
              end;
              INSERT;
            end;
        until ContactBusinessRelation.NEXT = 0
      else
        if Contact.FINDSET then
          repeat
            CreateUnlinkedContactAssociation(TempOfficeContactAssociations,Contact);
          until Contact.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateUnlinkedContactAssociation@5(VAR TempOfficeContactAssociations@1000 : TEMPORARY Record "Office Contact Associations";Contact@1001 : Record Contact);
    BEGIN
      CLEAR(TempOfficeContactAssociations);
      with TempOfficeContactAssociations do begin
        SETRANGE("No.",Contact."Company No.");
        if FINDFIRST and (Type = Contact.Type::Company) then
          DELETE;

        if ISEMPTY then begin
          INIT;
          "No." := Contact."Company No.";
          if "No." = '' then
            "No." := Contact."No.";
          "Contact No." := Contact."No.";
          "Contact Name" := Contact.Name;
          Type := Contact.Type;
          INSERT;
        end;

        SETRANGE("No.");
      end;
    END;

    LOCAL PROCEDURE FilterContactBusinessRelations@4(VAR Contact@1000 : Record Contact;VAR ContactBusinessRelation@1001 : Record "Contact Business Relation");
    VAR
      ContactFilter@1002 : Text;
    BEGIN
      // Filter contact business relations based on the specified list of contacts
      if Contact.FINDSET then
        repeat
          if STRPOS(ContactFilter,Contact."No.") = 0 then
            ContactFilter += Contact."No." + '|';
          if (STRPOS(ContactFilter,Contact."Company No.") = 0) and (Contact."Company No." <> '') then
            ContactFilter += Contact."Company No." + '|';
        until Contact.NEXT = 0;

      ContactBusinessRelation.SETFILTER("Contact No.",DELCHR(ContactFilter,'>','|'));
    END;

    LOCAL PROCEDURE FilterContacts@1(OfficeAddinContext@1001 : Record "Office Add-in Context";VAR Contact@1000 : Record Contact);
    VAR
      ContactBusinessRelation@1002 : Record "Contact Business Relation";
    BEGIN
      with ContactBusinessRelation do
        case true of
          OfficeAddinContext.Command <> '':
            SETRANGE("Link to Table",OfficeAddinContext.CommandType);
          OfficeAddinContext.IsAppointment:
            SETRANGE("Link to Table","Link to Table"::Customer);
          else
            exit;
        end;

      if ContactBusinessRelation.FINDSET then begin
        Contact.FILTERGROUP(-1);
        repeat
          Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.");
          Contact.SETRANGE("No.",ContactBusinessRelation."Contact No.");
          if Contact.FINDSET then
            repeat
              Contact.MARK(true);
            until Contact.NEXT = 0;
        until ContactBusinessRelation.NEXT = 0;

        Contact.MARKEDONLY(true);
      end;
    END;

    LOCAL PROCEDURE RedirectCustomer@19(Customer@1000 : Record Customer;VAR TempOfficeAddinContext@1002 : TEMPORARY Record "Office Add-in Context");
    VAR
      OfficeDocumentHandler@1001 : Codeunit "Office Document Handler";
    BEGIN
      PAGE.RUN(PAGE::"Customer Card",Customer);
      OfficeDocumentHandler.HandleSalesCommand(Customer,TempOfficeAddinContext);
    END;

    LOCAL PROCEDURE RedirectVendor@30(Vendor@1000 : Record Vendor;VAR TempOfficeAddinContext@1001 : TEMPORARY Record "Office Add-in Context");
    VAR
      OfficeDocumentHandler@1002 : Codeunit "Office Document Handler";
    BEGIN
      PAGE.RUN(PAGE::"Vendor Card",Vendor);
      OfficeDocumentHandler.HandlePurchaseCommand(Vendor,TempOfficeAddinContext);
    END;

    [EventSubscriber(Page,5052,OnClosePageEvent)]
    LOCAL PROCEDURE OnContactSelected@3(VAR Rec@1000 : Record Contact);
    VAR
      TempOfficeAddinContext@1002 : TEMPORARY Record "Office Add-in Context";
      OfficeMgt@1001 : Codeunit "Office Management";
    BEGIN
      if OfficeMgt.IsAvailable then begin
        OfficeMgt.GetContext(TempOfficeAddinContext);
        if TempOfficeAddinContext.Email = '' then begin
          TempOfficeAddinContext.Name := Rec.Name;
          TempOfficeAddinContext.Email := Rec."E-Mail";
          TempOfficeAddinContext."Contact No." := Rec."No.";
          if not TempOfficeAddinContext.IsAppointment then
            OfficeMgt.AddRecipient(Rec.Name,Rec."E-Mail");
          OfficeMgt.InitializeContext(TempOfficeAddinContext);
        end;
      end;
    END;

    BEGIN
    END.
  }
}

