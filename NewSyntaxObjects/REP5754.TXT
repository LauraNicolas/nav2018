OBJECT Report 5754 Create Pick
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Pick;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 5444;    ;DataItem;Integer             ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number) WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               CLEAR(CreatePick);
                               CreatePick.SetValues(
                                 AssignedID,0,SortPick,1,MaxNoOfSourceDoc,MaxNoOfLines,PerZone,
                                 DoNotFillQtytoHandle,BreakbulkFilter,PerBin);
                             END;

               OnAfterGetRecord=BEGIN
                                  PickWkshLine.SETFILTER("Qty. to Handle (Base)",'>%1',0);
                                  PickWkshLineFilter.COPYFILTERS(PickWkshLine);

                                  if PickWkshLine.FIND('-') then begin
                                    if PickWkshLine."Location Code" = '' then
                                      Location.INIT
                                    else
                                      Location.GET(PickWkshLine."Location Code");
                                    repeat
                                      PickWkshLine.CheckBin(PickWkshLine."Location Code",PickWkshLine."To Bin Code",true);
                                      TempNo := TempNo + 1;

                                      if PerWhseDoc then begin
                                        PickWkshLine.SETRANGE("Whse. Document Type",PickWkshLine."Whse. Document Type");
                                        PickWkshLine.SETRANGE("Whse. Document No.",PickWkshLine."Whse. Document No.");
                                      end;
                                      if PerDestination then begin
                                        PickWkshLine.SETRANGE("Destination Type",PickWkshLine."Destination Type");
                                        PickWkshLine.SETRANGE("Destination No.",PickWkshLine."Destination No.");
                                        SetPickFilters;
                                        PickWkshLineFilter.COPYFILTER("Destination Type",PickWkshLine."Destination Type");
                                        PickWkshLineFilter.COPYFILTER("Destination No.",PickWkshLine."Destination No.");
                                      end else begin
                                        PickWkshLineFilter.COPYFILTER("Destination Type",PickWkshLine."Destination Type");
                                        PickWkshLineFilter.COPYFILTER("Destination No.",PickWkshLine."Destination No.");
                                        SetPickFilters;
                                      end;
                                      PickWkshLineFilter.COPYFILTER("Whse. Document Type",PickWkshLine."Whse. Document Type");
                                      PickWkshLineFilter.COPYFILTER("Whse. Document No.",PickWkshLine."Whse. Document No.");
                                    until not PickWkshLine.FIND('-');
                                    CheckPickActivity;
                                  end else
                                    ERROR(Text000);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if LocationCode <> '' then begin
                     Location.GET(LocationCode);
                     if Location."Use ADCS" then
                       DoNotFillQtytoHandle := true;
                   end;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 13  ;2   ;Group     ;
                  Name=Create Pick;
                  CaptionML=ENU=Create Pick }

      { 21  ;3   ;Field     ;
                  Name=Per Whse. Document;
                  CaptionML=ENU=Per Whse. Document;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for worksheet lines with the same warehouse source document.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerWhseDoc }

      { 3   ;3   ;Field     ;
                  Name=Per Cust./Vend./Loc.;
                  CaptionML=ENU=Per Cust./Vend./Loc.;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for each customer (sale orders), vendor (purchase return orders), and location (transfer orders).;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerDestination }

      { 6   ;3   ;Field     ;
                  Name=Per Item;
                  CaptionML=ENU=Per Item;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for each item in the pick worksheet.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerItem }

      { 23  ;3   ;Field     ;
                  Name=Per From Zone;
                  CaptionML=ENU=Per From Zone;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for each zone that you will take the items from.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerZone }

      { 8   ;3   ;Field     ;
                  Name=Per Bin;
                  CaptionML=ENU=Per Bin;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for each bin that you will take the items from.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerBin }

      { 10  ;3   ;Field     ;
                  Name=Per Due Date;
                  CaptionML=ENU=Per Due Date;
                  ToolTipML=ENU=Specifies if you want to create separate pick documents for source documents that have the same due date.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PerDate }

      { 1   ;2   ;Field     ;
                  Name=Max. No. of Pick Lines;
                  CaptionML=ENU=Max. No. of Pick Lines;
                  ToolTipML=ENU=Specifies if you want to create pick documents that have no more than the specified number of lines in each document.;
                  ApplicationArea=#Warehouse;
                  BlankZero=true;
                  SourceExpr=MaxNoOfLines;
                  MultiLine=true }

      { 12  ;2   ;Field     ;
                  Name=Max. No. of Pick Source Docs.;
                  CaptionML=ENU=Max. No. of Pick Source Docs.;
                  ToolTipML=ENU=Specifies if you want to create pick documents that each cover no more than the specified number of source documents.;
                  ApplicationArea=#Warehouse;
                  BlankZero=true;
                  SourceExpr=MaxNoOfSourceDoc;
                  MultiLine=true }

      { 16  ;2   ;Field     ;
                  Name=Assigned User ID;
                  CaptionML=ENU=Assigned User ID;
                  ToolTipML=ENU=Specifies the ID of the assigned user to perform the pick instruction.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=AssignedID;
                  TableRelation="Warehouse Employee";
                  OnValidate=VAR
                               WhseEmployee@1000 : Record "Warehouse Employee";
                             BEGIN
                               if AssignedID <> '' then
                                 WhseEmployee.GET(AssignedID,LocationCode);
                             END;

                  OnLookup=VAR
                             WhseEmployee@1000 : Record "Warehouse Employee";
                             LookupWhseEmployee@1001 : Page "Warehouse Employee List";
                           BEGIN
                             WhseEmployee.SETCURRENTKEY("Location Code");
                             WhseEmployee.SETRANGE("Location Code",LocationCode);
                             LookupWhseEmployee.LOOKUPMODE(true);
                             LookupWhseEmployee.SETTABLEVIEW(WhseEmployee);
                             if LookupWhseEmployee.RUNMODAL = ACTION::LookupOK then begin
                               LookupWhseEmployee.GETRECORD(WhseEmployee);
                               AssignedID := WhseEmployee."User ID";
                             end;
                           END;
                            }

      { 18  ;2   ;Field     ;
                  Name=Sorting Method for Pick Lines;
                  CaptionML=ENU=Sorting Method for Pick Lines;
                  ToolTipML=ENU=Specifies that you want to select from the available options to sort lines in the created pick document.;
                  OptionCaptionML=ENU=" ,Item,Document,Shelf/Bin No.,Due Date,Destination,Bin Ranking,Action Type";
                  ApplicationArea=#Warehouse;
                  SourceExpr=SortPick;
                  MultiLine=true }

      { 26  ;2   ;Field     ;
                  Name=Set Breakbulk Filter;
                  CaptionML=ENU=Set Breakbulk Filter;
                  ToolTipML=ENU=Specifies if you do not want to view the intermediate breakbulk pick lines, when a larger unit of measure is converted to a smaller unit of measure and completely picked.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BreakbulkFilter }

      { 24  ;2   ;Field     ;
                  Name=Do Not Fill Qty. to Handle;
                  CaptionML=ENU=Do Not Fill Qty. to Handle;
                  ToolTipML=ENU=Specifies if you want to leave the Quantity to Handle field in the created pick lines empty.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=DoNotFillQtytoHandle }

      { 14  ;2   ;Field     ;
                  Name=Print Pick;
                  CaptionML=ENU=Print Pick;
                  ToolTipML=ENU=Specifies that you want to print the pick documents when they are created.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintPick }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There is nothing to handle.';
      Text001@1001 : TextConst 'ENU=Pick activity no. %1 has been created.';
      Text002@1002 : TextConst 'ENU=Pick activities no. %1 to %2 have been created.';
      Location@1006 : Record Location;
      PickWkshLine@1004 : Record "Whse. Worksheet Line";
      PickWkshLineFilter@1005 : Record "Whse. Worksheet Line";
      Cust@1011 : Record Customer;
      CreatePick@1038 : Codeunit "Create Pick";
      LocationCode@1009 : Code[10];
      AssignedID@1017 : Code[50];
      FirstPickNo@1018 : Code[20];
      FirstSetPickNo@1010 : Code[20];
      LastPickNo@1019 : Code[20];
      MaxNoOfLines@1020 : Integer;
      MaxNoOfSourceDoc@1021 : Integer;
      TempNo@1024 : Integer;
      SortPick@1029 : '" ",Item,Document,"Shelf No.","Due Date",Destination,"Bin Ranking","Action Type"';
      PerDestination@1030 : Boolean;
      PerItem@1031 : Boolean;
      PerZone@1037 : Boolean;
      PerBin@1032 : Boolean;
      PerWhseDoc@1027 : Boolean;
      PerDate@1033 : Boolean;
      PrintPick@1034 : Boolean;
      DoNotFillQtytoHandle@1003 : Boolean;
      Text003@1008 : TextConst 'ENU="You can create a Pick only for the available quantity in %1 %2 = %3,%4 = %5,%6 = %7,%8 = %9."';
      BreakbulkFilter@1007 : Boolean;
      NothingToHandleErr@1012 : TextConst 'ENU=There is nothing to handle. %1.';

    LOCAL PROCEDURE CreateTempLine@1();
    VAR
      PickWhseActivHeader@1001 : Record "Warehouse Activity Header";
      TempWhseItemTrkgLine@1002 : TEMPORARY Record "Whse. Item Tracking Line";
      ItemTrackingMgt@1003 : Codeunit "Item Tracking Management";
      PickQty@1000 : Decimal;
      PickQtyBase@1005 : Decimal;
      TempMaxNoOfSourceDoc@1004 : Integer;
      OldFirstSetPickNo@1006 : Code[20];
      TotalQtyPickedBase@1007 : Decimal;
    BEGIN
      PickWkshLine.LOCKTABLE;
      repeat
        if Location."Bin Mandatory" and
           (not Location."Always Create Pick Line")
        then
          if PickWkshLine.CalcAvailableQtyBase(true) < 0 then
            ERROR(
              Text003,
              PickWkshLine.TABLECAPTION,PickWkshLine.FIELDCAPTION("Worksheet Template Name"),
              PickWkshLine."Worksheet Template Name",PickWkshLine.FIELDCAPTION(Name),
              PickWkshLine.Name,PickWkshLine.FIELDCAPTION("Location Code"),
              PickWkshLine."Location Code",PickWkshLine.FIELDCAPTION("Line No."),
              PickWkshLine."Line No.");

        PickWkshLine.TESTFIELD("Qty. per Unit of Measure");
        CreatePick.SetWhseWkshLine(PickWkshLine,TempNo);
        case PickWkshLine."Whse. Document Type" of
          PickWkshLine."Whse. Document Type"::Shipment:
            CreatePick.SetTempWhseItemTrkgLine(
              PickWkshLine."Whse. Document No.",DATABASE::"Warehouse Shipment Line",'',0,
              PickWkshLine."Whse. Document Line No.",PickWkshLine."Location Code");
          PickWkshLine."Whse. Document Type"::Assembly:
            CreatePick.SetTempWhseItemTrkgLine(
              PickWkshLine."Whse. Document No.",DATABASE::"Assembly Line",'',0,
              PickWkshLine."Whse. Document Line No.",PickWkshLine."Location Code");
          PickWkshLine."Whse. Document Type"::"Internal Pick":
            CreatePick.SetTempWhseItemTrkgLine(
              PickWkshLine."Whse. Document No.",DATABASE::"Whse. Internal Pick Line",'',0,
              PickWkshLine."Whse. Document Line No.",PickWkshLine."Location Code");
          PickWkshLine."Whse. Document Type"::Production:
            CreatePick.SetTempWhseItemTrkgLine(
              PickWkshLine."Source No.",PickWkshLine."Source Type",'',PickWkshLine."Source Line No.",
              PickWkshLine."Source Subline No.",PickWkshLine."Location Code");
          else // Movement Worksheet Line
            CreatePick.SetTempWhseItemTrkgLine(
              PickWkshLine.Name,DATABASE::"Prod. Order Component",PickWkshLine."Worksheet Template Name",
              0,PickWkshLine."Line No.",PickWkshLine."Location Code");
        end;

        PickQty := PickWkshLine."Qty. to Handle";
        PickQtyBase := PickWkshLine."Qty. to Handle (Base)";
        if (PickQty > 0) and
           (PickWkshLine."Destination Type" = PickWkshLine."Destination Type"::Customer)
        then begin
          PickWkshLine.TESTFIELD("Destination No.");
          Cust.GET(PickWkshLine."Destination No.");
          Cust.CheckBlockedCustOnDocs(Cust,PickWkshLine."Source Document",false,false);
        end;

        CreatePick.SetCalledFromWksh(true);

        with PickWkshLine do
          CreatePick.CreateTempLine("Location Code","Item No.","Variant Code",
            "Unit of Measure Code",'',"To Bin Code","Qty. per Unit of Measure",PickQty,PickQtyBase);

        TotalQtyPickedBase := CreatePick.GetActualQtyPickedBase;

        // Update/delete lines
        PickWkshLine."Qty. to Handle (Base)" := PickWkshLine.CalcBaseQty(PickWkshLine."Qty. to Handle");
        if PickWkshLine."Qty. (Base)" =
           PickWkshLine."Qty. Handled (Base)" + TotalQtyPickedBase
        then
          PickWkshLine.DELETE(true)
        else begin
          PickWkshLine."Qty. Handled" := PickWkshLine."Qty. Handled" + PickWkshLine.CalcQty(TotalQtyPickedBase);
          PickWkshLine."Qty. Handled (Base)" := PickWkshLine.CalcBaseQty(PickWkshLine."Qty. Handled");
          PickWkshLine."Qty. Outstanding" := PickWkshLine.Quantity - PickWkshLine."Qty. Handled";
          PickWkshLine."Qty. Outstanding (Base)" := PickWkshLine.CalcBaseQty(PickWkshLine."Qty. Outstanding");
          PickWkshLine."Qty. to Handle" := 0;
          PickWkshLine."Qty. to Handle (Base)" := 0;
          PickWkshLine.MODIFY;
        end;
      until PickWkshLine.NEXT = 0;

      OldFirstSetPickNo := FirstSetPickNo;
      CreatePick.CreateWhseDocument(FirstSetPickNo,LastPickNo,false);
      if FirstSetPickNo = OldFirstSetPickNo then
        exit;

      if FirstPickNo = '' then
        FirstPickNo := FirstSetPickNo;
      CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
      ItemTrackingMgt.UpdateWhseItemTrkgLines(TempWhseItemTrkgLine);
      COMMIT;

      TempMaxNoOfSourceDoc := MaxNoOfSourceDoc;
      PickWhseActivHeader.SETRANGE(Type,PickWhseActivHeader.Type::Pick);
      PickWhseActivHeader.SETRANGE("No.",FirstSetPickNo,LastPickNo);
      PickWhseActivHeader.FIND('-');
      repeat
        if SortPick > 0 then
          PickWhseActivHeader.SortWhseDoc;
        COMMIT;
        if PrintPick then begin
          REPORT.RUN(REPORT::"Picking List",false,false,PickWhseActivHeader);
          TempMaxNoOfSourceDoc -= 1;
        end;
      until ((PickWhseActivHeader.NEXT = 0) or (TempMaxNoOfSourceDoc = 0));
    END;

    PROCEDURE SetWkshPickLine@4(VAR PickWkshLine2@1000 : Record "Whse. Worksheet Line");
    BEGIN
      PickWkshLine.COPYFILTERS(PickWkshLine2);
      LocationCode := PickWkshLine2."Location Code";
    END;

    PROCEDURE GetResultMessage@2() : Boolean;
    BEGIN
      if FirstPickNo <> '' then
        if FirstPickNo = LastPickNo then
          MESSAGE(Text001,FirstPickNo)
        else
          MESSAGE(Text002,FirstPickNo,LastPickNo);
      exit(FirstPickNo <> '');
    END;

    PROCEDURE InitializeReport@3(AssignedID2@1013 : Code[50];MaxNoOfLines2@1010 : Integer;MaxNoOfSourceDoc2@1009 : Integer;SortPick2@1007 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';PerDestination2@1006 : Boolean;PerItem2@1005 : Boolean;PerZone2@1004 : Boolean;PerBin2@1003 : Boolean;PerWhseDoc2@1002 : Boolean;PerDate2@1001 : Boolean;PrintPick2@1000 : Boolean;DoNotFillQtytoHandle2@1008 : Boolean;BreakbulkFilter2@1011 : Boolean);
    BEGIN
      AssignedID := AssignedID2;
      MaxNoOfLines := MaxNoOfLines2;
      MaxNoOfSourceDoc := MaxNoOfSourceDoc2;
      SortPick := SortPick2;
      PerDestination := PerDestination2;
      PerItem := PerItem2;
      PerZone := PerZone2;
      PerBin := PerBin2;
      PerWhseDoc := PerWhseDoc2;
      PerDate := PerDate2;
      PrintPick := PrintPick2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    LOCAL PROCEDURE CheckPickActivity@5();
    BEGIN
      if FirstPickNo = '' then
        ERROR(NothingToHandleErr,CreatePick.GetExpiredItemMessage);
    END;

    LOCAL PROCEDURE SetPickFilters@6();
    BEGIN
      if PerItem then begin
        PickWkshLine.SETRANGE("Item No.",PickWkshLine."Item No.");
        if PerBin then
          SetPerBinFilters
        else begin
          if not Location."Bin Mandatory" then
            PickWkshLineFilter.COPYFILTER("Shelf No.",PickWkshLine."Shelf No.");
          SetPerDateFilters;
        end;
        PickWkshLineFilter.COPYFILTER("Item No.",PickWkshLine."Item No.");
      end else begin
        PickWkshLineFilter.COPYFILTER("Item No.",PickWkshLine."Item No.");
        if PerBin then
          SetPerBinFilters
        else begin
          if not Location."Bin Mandatory" then
            PickWkshLineFilter.COPYFILTER("Shelf No.",PickWkshLine."Shelf No.");
          SetPerDateFilters;
        end;
      end;
    END;

    LOCAL PROCEDURE SetPerBinFilters@7();
    BEGIN
      if not Location."Bin Mandatory" then
        PickWkshLine.SETRANGE("Shelf No.",PickWkshLine."Shelf No.");
      if PerDate then begin
        PickWkshLine.SETRANGE("Due Date",PickWkshLine."Due Date");
        CreateTempLine;
        PickWkshLineFilter.COPYFILTER("Due Date",PickWkshLine."Due Date");
      end else begin
        PickWkshLineFilter.COPYFILTER("Due Date",PickWkshLine."Due Date");
        CreateTempLine;
      end;
      if not Location."Bin Mandatory" then
        PickWkshLineFilter.COPYFILTER("Shelf No.",PickWkshLine."Shelf No.");
    END;

    LOCAL PROCEDURE SetPerDateFilters@10();
    BEGIN
      if PerDate then begin
        PickWkshLine.SETRANGE("Due Date",PickWkshLine."Due Date");
        CreateTempLine;
        PickWkshLineFilter.COPYFILTER("Due Date",PickWkshLine."Due Date");
      end else begin
        PickWkshLineFilter.COPYFILTER("Due Date",PickWkshLine."Due Date");
        CreateTempLine;
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

