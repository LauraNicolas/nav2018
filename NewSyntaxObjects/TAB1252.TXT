OBJECT Table 1252 Bank Pmt. Appl. Rule
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               UpdateScore(Rec);
             END;

    OnRename=BEGIN
               UpdateScore(Rec);
             END;

    CaptionML=ENU=Bank Pmt. Appl. Rule;
  }
  FIELDS
  {
    { 1   ;   ;Match Confidence    ;Option        ;CaptionML=ENU=Match Confidence;
                                                   OptionCaptionML=ENU=None,Low,Medium,High;
                                                   OptionString=None,Low,Medium,High }
    { 2   ;   ;Priority            ;Integer       ;OnValidate=BEGIN
                                                                if (Priority > GetMaximumPriorityNo) or (Priority < 1) then
                                                                  ERROR(WrongPriorityNoErr,FIELDCAPTION(Priority),1,GetMaximumPriorityNo);
                                                              END;

                                                   CaptionML=ENU=Priority }
    { 3   ;   ;Related Party Matched;Option       ;CaptionML=ENU=Related Party Matched;
                                                   OptionCaptionML=ENU=Not Considered,Fully,Partially,No;
                                                   OptionString="Not Considered",Fully,Partially,No }
    { 4   ;   ;Doc. No./Ext. Doc. No. Matched;Option;
                                                   CaptionML=ENU=Doc. No./Ext. Doc. No. Matched;
                                                   OptionCaptionML=ENU=Not Considered,Yes,No,Yes - Multiple;
                                                   OptionString="Not Considered",Yes,No,"Yes - Multiple" }
    { 5   ;   ;Amount Incl. Tolerance Matched;Option;
                                                   CaptionML=ENU=Amount Incl. Tolerance Matched;
                                                   OptionCaptionML=ENU=Not Considered,One Match,Multiple Matches,No Matches;
                                                   OptionString="Not Considered","One Match","Multiple Matches","No Matches" }
    { 30  ;   ;Score               ;Integer       ;CaptionML=ENU=Score;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Match Confidence",Priority             ;Clustered=true }
    {    ;Score                                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WrongPriorityNoErr@1000 : TextConst '@@@=%1 - Table field with caption Priority. %2 and %3 are numbers presenting a range - e.g. 1 and 999;ENU=The %1 you entered is invalid. The %1 must be between %2 and %3.';
      LoadRulesOnlyOnTempRecordsErr@1001 : TextConst '@@@=Description to developers, should not be seen by users;ENU=Programming error: The LoadRules function can only be called from temporary records.';

    [External]
    PROCEDURE LoadRules@4();
    VAR
      BankPmtApplRule@1001 : Record "Bank Pmt. Appl. Rule";
    BEGIN
      if not ISTEMPORARY then
        ERROR(LoadRulesOnlyOnTempRecordsErr);

      DELETEALL;
      if BankPmtApplRule.FINDSET then
        repeat
          TRANSFERFIELDS(BankPmtApplRule);
          INSERT;
        until BankPmtApplRule.NEXT = 0;
    END;

    [External]
    PROCEDURE GetBestMatchScore@5(ParameterBankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule") : Integer;
    BEGIN
      CLEAR(Rec);
      SETCURRENTKEY(Score);
      ASCENDING(false);

      SETFILTER("Related Party Matched",'%1|%2',
        ParameterBankPmtApplRule."Related Party Matched",
        ParameterBankPmtApplRule."Related Party Matched"::"Not Considered");

      SETFILTER("Doc. No./Ext. Doc. No. Matched",'%1|%2',
        ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched",
        ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");

      SETFILTER("Amount Incl. Tolerance Matched",'%1|%2',
        ParameterBankPmtApplRule."Amount Incl. Tolerance Matched",
        ParameterBankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      if FINDFIRST then
        exit(Score);

      exit(0);
    END;

    [External]
    PROCEDURE GetTextMapperScore@8() : Integer;
    VAR
      MediumConfidenceHighestScore@1001 : Integer;
    BEGIN
      // Text mapper should override only Medium confidence and lower
      MediumConfidenceHighestScore := CalculateScore("Match Confidence"::Medium,0);
      exit(MediumConfidenceHighestScore);
    END;

    LOCAL PROCEDURE UpdateScore@3(VAR BankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule");
    BEGIN
      BankPmtApplRule.Score := CalculateScore(BankPmtApplRule."Match Confidence",BankPmtApplRule.Priority);
    END;

    LOCAL PROCEDURE CalculateScore@9(MatchConfidence@1000 : Option;NewPriority@1002 : Integer) : Integer;
    VAR
      ConfidenceRangeScore@1001 : Integer;
    BEGIN
      ConfidenceRangeScore := (MatchConfidence + 1 ) * GetConfidenceScoreRange;

      // Update the score based on priority
      exit(ConfidenceRangeScore - NewPriority);
    END;

    LOCAL PROCEDURE GetConfidenceScoreRange@2() : Integer;
    BEGIN
      exit(1000);
    END;

    LOCAL PROCEDURE GetMaximumPriorityNo@6() : Integer;
    BEGIN
      exit(GetConfidenceScoreRange - 1);
    END;

    [External]
    PROCEDURE GetMatchConfidence@7(MatchQuality@1002 : Integer) : Integer;
    VAR
      BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";
      OptionNo@1001 : Integer;
    BEGIN
      if MatchQuality = GetTextMapperScore then
        exit(BankAccReconciliationLine."Match Confidence"::"High - Text-to-Account Mapping");

      OptionNo := MatchQuality div GetConfidenceScoreRange;
      case OptionNo of
        "Match Confidence"::None:
          exit(BankAccReconciliationLine."Match Confidence"::None);
        "Match Confidence"::Low:
          exit(BankAccReconciliationLine."Match Confidence"::Low);
        "Match Confidence"::Medium:
          exit(BankAccReconciliationLine."Match Confidence"::Medium);
        "Match Confidence"::High:
          exit(BankAccReconciliationLine."Match Confidence"::High);
      end;
    END;

    [External]
    PROCEDURE GetLowestScoreInRange@10(AssignedScore@1000 : Integer) : Integer;
    BEGIN
      exit((AssignedScore div GetConfidenceScoreRange) * GetConfidenceScoreRange);
    END;

    [External]
    PROCEDURE GetHighestScoreInRange@11(AssignedScore@1000 : Integer) : Integer;
    BEGIN
      exit(GetLowestScoreInRange(AssignedScore) + GetConfidenceScoreRange);
    END;

    [External]
    PROCEDURE GetHighestPossibleScore@1() : Integer;
    BEGIN
      exit(GetConfidenceScoreRange * ("Match Confidence"::High + 1));
    END;

    [External]
    PROCEDURE InsertDefaultMatchingRules@23();
    VAR
      BankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule";
      RulePriority@1001 : Integer;
    BEGIN
      if not BankPmtApplRule.ISEMPTY then
        exit;

      // Insert High Confidence rules
      RulePriority := 1;
      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::High,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      // Insert Medium Confidence rules
      RulePriority := 1;
      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple",
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Medium,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");

      // Insert Low Confidence rules
      RulePriority := 1;
      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Low,RulePriority,
        BankPmtApplRule."Related Party Matched"::Fully,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Low,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Low,RulePriority,
        BankPmtApplRule."Related Party Matched"::Partially,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Low,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      InsertBankPaymentApplicationRule(
        BankPmtApplRule."Match Confidence"::Low,RulePriority,
        BankPmtApplRule."Related Party Matched"::No,
        BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No,
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
    END;

    LOCAL PROCEDURE InsertBankPaymentApplicationRule@22(MatchConfidence@1001 : Option;VAR RulePriority@1002 : Integer;RelatedPartyIdentification@1003 : Option;DocumentMatch@1004 : Option;AmountMatch@1005 : Option);
    VAR
      BankPmtApplRule@1000 : Record "Bank Pmt. Appl. Rule";
    BEGIN
      BankPmtApplRule.INIT;
      BankPmtApplRule."Match Confidence" := MatchConfidence;
      BankPmtApplRule.Priority := RulePriority;
      BankPmtApplRule."Related Party Matched" := RelatedPartyIdentification;
      BankPmtApplRule."Doc. No./Ext. Doc. No. Matched" := DocumentMatch;
      BankPmtApplRule."Amount Incl. Tolerance Matched" := AmountMatch;
      BankPmtApplRule.INSERT(true);
      RulePriority += 1;
    END;

    BEGIN
    END.
  }
}

