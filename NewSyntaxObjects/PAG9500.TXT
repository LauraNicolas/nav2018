OBJECT Page 9500 Debugger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Debugger;
    LinksAllowed=false;
    SourceTable="Active Session";
    DataCaptionExpr=DataCaption;
    PageType=Card;
    RefreshOnActivate=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Code Tracking,Running Code,Breakpoints,Show;
    ShowFilter=false;
    OnInit=BEGIN
             BreakOnError := true;
             BreakpointHit := DEBUGGER.ISBREAKPOINTHIT;
             BreakEnabled := not BreakpointHit;
           END;

    OnOpenPage=VAR
                 DebuggedSession@1000 : Record "Active Session";
               BEGIN
                 StartTime := CURRENTDATETIME;
                 FinishTime := StartTime;
                 DebuggerManagement.GetDebuggedSession(DebuggedSession);
                 if DebuggedSession."Session ID" = 0 then
                   DEBUGGER.ACTIVATE
                 else begin
                   DEBUGGER.ATTACH(DebuggedSession."Session ID");
                   SetAttachedSession := true;
                 end;

                 if UserPersonalization.GET(USERSECURITYID) then begin
                   BreakOnError := UserPersonalization."Debugger Break On Error";
                   BreakOnRecordChanges := UserPersonalization."Debugger Break On Rec Changes";
                   SkipCodeunit1 := UserPersonalization."Debugger Skip System Triggers";
                 end;

                 if BreakOnError then
                   DEBUGGER.BREAKONERROR(true);
                 if BreakOnRecordChanges then
                   DEBUGGER.BREAKONRECORDCHANGES(true);
                 if SkipCodeunit1 then
                   DEBUGGER.SKIPSYSTEMTRIGGERS(true);

                 DebuggerManagement.ResetActionState;
               END;

    OnClosePage=BEGIN
                  if DEBUGGER.DEACTIVATE then;
                  SetAttachedSession := false;
                END;

    OnFindRecord=VAR
                   DebuggedSession@1003 : Record "Active Session";
                   IsBreakOnErrorMessageNew@1001 : Boolean;
                   BreakOnErrorMessage@1002 : Text;
                 BEGIN
                   if not DEBUGGER.ISACTIVE and (Which = '=') then
                     MESSAGE(Text007Msg);

                   if not DEBUGGER.ISACTIVE then begin
                     CurrPage.CLOSE;
                     exit(false);
                   end;

                   BreakpointHit := DEBUGGER.ISBREAKPOINTHIT;

                   if BreakpointHit then begin
                     BreakOnErrorMessage := DebuggerManagement.GetLastErrorMessage(IsBreakOnErrorMessageNew);

                     if IsBreakOnErrorMessageNew and (BreakOnErrorMessage <> '') then
                       MESSAGE(STRSUBSTNO(Text002Msg,BreakOnErrorMessage));

                     ShowLastErrorEnabled := (BreakOnErrorMessage <> '') or (DEBUGGER.GETLASTERRORTEXT <> '');

                     BreakEnabled := false;
                     if not SetAttachedSession then begin
                       DebuggedSession."Session ID" := DEBUGGER.DEBUGGEDSESSIONID;
                       DebuggerManagement.SetDebuggedSession(DebuggedSession);
                       SetAttachedSession := true;
                     end;
                   end else begin
                     IsBreakOnErrorMessageNew := false;
                     ShowLastErrorEnabled := false;
                     DataCaption := Text004Cap;
                   end;

                   exit(true);
                 END;

    OnAfterGetRecord=BEGIN
                       if BreakpointHit then begin
                         CurrPage.Callstack.PAGE.GetCurrentCallstack(DebuggerCallstack);
                         with DebuggerCallstack do begin
                           if ID <> 0 then
                             DataCaption := STRSUBSTNO(Text003Cap,"Object Type","Object ID","Object Name")
                           else
                             DataCaption := Text004Cap;
                         end;
                         FinishTime := CURRENTDATETIME;
                       end;
                     END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      Name=Debugger Actions;
                      CaptionML=ENU=Debugger Actions;
                      ActionContainerType=ActionItems }
      { 25      ;1   ;Separator ;
                      Name=Separator25 }
      { 26      ;1   ;ActionGroup;
                      Name=Code Tracking;
                      CaptionML=ENU=Code Tracking }
      { 8       ;2   ;Action    ;
                      Name=Step Into;
                      ShortCutKey=F11;
                      CaptionML=ENU=Step Into;
                      ToolTipML=ENU=Execute the current statement. If the statement contains a function call, then execute the function and break at the first statement inside the function.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=StepInto;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 StartTime := CURRENTDATETIME;
                                 WaitingForBreak;
                                 DebuggerManagement.SetCodeTrackingAction;
                                 DEBUGGER.STEPINTO;
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=Step Over;
                      ShortCutKey=F10;
                      CaptionML=ENU=Step Over;
                      ToolTipML=ENU=Execute the current statement. If the statement contains a function call, then execute the function and break at the first statement outside the function.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=StepOver;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 StartTime := CURRENTDATETIME;
                                 WaitingForBreak;
                                 DebuggerManagement.SetCodeTrackingAction;
                                 DEBUGGER.STEPOVER;
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Step Out;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=Step Out;
                      ToolTipML=ENU=Execute the remaining statements in the current function and break at the next statement in the calling function.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=StepOut;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 StartTime := CURRENTDATETIME;
                                 WaitingForBreak;
                                 DebuggerManagement.SetCodeTrackingAction;
                                 DEBUGGER.STEPOUT;
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 11      ;1   ;Separator ;
                      Name=Separator11 }
      { 27      ;1   ;ActionGroup;
                      Name=Running Code;
                      CaptionML=ENU=Running Code }
      { 12      ;2   ;Action    ;
                      Name=Continue;
                      ShortCutKey=F5;
                      CaptionML=ENU=Continue;
                      ToolTipML=ENU=Continue until the next break.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=Continue;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 StartTime := CURRENTDATETIME;
                                 WaitingForBreak;
                                 DebuggerManagement.SetRunningCodeAction;
                                 DEBUGGER.CONTINUE;
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 31      ;2   ;Action    ;
                      Name=Break;
                      ShortCutKey=Shift+Ctrl+B;
                      CaptionML=ENU=Break;
                      ToolTipML=ENU=Break at the next statement.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakEnabled;
                      PromotedIsBig=true;
                      Image=Pause;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 BreakEnabled := false;
                                 DebuggerManagement.SetRunningCodeAction;
                                 DEBUGGER."BREAK";
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=Stop;
                      ShortCutKey=Shift+F5;
                      CaptionML=ENU=Stop;
                      ToolTipML=ENU=Stop the current activity in the session being debugged while continuing to debug the session.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=Stop;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 WaitingForBreak;
                                 DebuggerManagement.SetRunningCodeAction;
                                 DEBUGGER.STOP;
                                 FinishTime := CURRENTDATETIME;
                               END;
                                }
      { 21      ;1   ;Separator ;
                      Name=Separator21 }
      { 28      ;1   ;ActionGroup;
                      Name=Breakpoints Group;
                      CaptionML=ENU=Breakpoints }
      { 14      ;2   ;Action    ;
                      Name=Toggle;
                      ShortCutKey=F9;
                      CaptionML=ENU=Toggle;
                      ToolTipML=ENU=Toggle a breakpoint at the current line.;
                      ApplicationArea=#All;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ToggleBreakpoint;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 CurrPage.CodeViewer.PAGE.ToggleBreakpoint;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=Set/Clear Condition;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Set/Clear Condition;
                      ToolTipML=ENU=Set or clear a breakpoint condition at the current line.;
                      ApplicationArea=#All;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ConditionalBreakpoint;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 CurrPage.CodeViewer.PAGE.SetBreakpointCondition;
                               END;
                                }
      { 19      ;2   ;Action    ;
                      Name=Disable All;
                      CaptionML=ENU=Disable All;
                      ToolTipML=ENU=Disable all breakpoints in the breakpoint list. You can edit the list by using the Breakpoints action.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Image=DisableAllBreakpoints;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 DebuggerBreakpoint@1001 : Record "Debugger Breakpoint";
                               BEGIN
                                 DebuggerBreakpoint.MODIFYALL(Enabled,false,true);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=Breakpoints;
                      CaptionML=ENU=Breakpoints;
                      ToolTipML=ENU=Edit the breakpoint list for all objects.;
                      ApplicationArea=#All;
                      RunObject=Page "Debugger Breakpoint List";
                      Promoted=true;
                      Image=BreakpointsList;
                      PromotedCategory=Category6 }
      { 35      ;2   ;Action    ;
                      Name=Break Rules;
                      CaptionML=ENU=Break Rules;
                      ToolTipML=ENU=Change settings for break rules. The debugger breaks code execution for certain configurable rules as well as for breakpoints.;
                      ApplicationArea=#All;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=BreakRulesList;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 DebuggerBreakRulesPage@1000 : Page "Debugger Break Rules";
                               BEGIN
                                 DebuggerBreakRulesPage.SetBreakOnError(BreakOnError);
                                 DebuggerBreakRulesPage.SetBreakOnRecordChanges(BreakOnRecordChanges);
                                 DebuggerBreakRulesPage.SetSkipCodeunit1(SkipCodeunit1);

                                 if DebuggerBreakRulesPage.RUNMODAL = ACTION::OK then begin
                                   BreakOnError := DebuggerBreakRulesPage.GetBreakOnError;
                                   DEBUGGER.BREAKONERROR(BreakOnError);
                                   BreakOnRecordChanges := DebuggerBreakRulesPage.GetBreakOnRecordChanges;
                                   DEBUGGER.BREAKONRECORDCHANGES(BreakOnRecordChanges);
                                   SkipCodeunit1 := DebuggerBreakRulesPage.GetSkipCodeunit1;
                                   DEBUGGER.SKIPSYSTEMTRIGGERS(SkipCodeunit1);

                                   SaveConfiguration;
                                 end;
                               END;
                                }
      { 22      ;1   ;Separator ;
                      Name=Separator22 }
      { 33      ;1   ;ActionGroup;
                      Name=Show;
                      CaptionML=ENU=Show;
                      Image=View }
      { 6       ;2   ;Action    ;
                      Name=Variables;
                      ShortCutKey=Shift+Ctrl+V;
                      CaptionML=ENU=Variables;
                      ToolTipML=ENU=View the list of variables in the current scope.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=BreakpointHit;
                      PromotedIsBig=true;
                      Image=VariableList;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 DebuggerCallstack@1001 : Record "Debugger Call Stack";
                                 DebuggerVariable@1003 : Record "Debugger Variable";
                               BEGIN
                                 CurrPage.Callstack.PAGE.GetCurrentCallstack(DebuggerCallstack);

                                 DebuggerVariable.FILTERGROUP(2);
                                 DebuggerVariable.SETRANGE("Call Stack ID",DebuggerCallstack.ID);
                                 DebuggerVariable.FILTERGROUP(0);

                                 PAGE.RUNMODAL(PAGE::"Debugger Variable List",DebuggerVariable);
                               END;
                                }
      { 36      ;2   ;Action    ;
                      Name=LastErrorMessage;
                      CaptionML=ENU=Last Error;
                      ToolTipML=ENU=View the last error message shown by the session being debugged.;
                      ApplicationArea=#All;
                      Promoted=true;
                      Enabled=ShowLastErrorEnabled;
                      PromotedIsBig=true;
                      Image=PrevErrorMessage;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 DebuggerManagement@1003 : Codeunit "Debugger Management";
                                 LastErrorMessage@1001 : Text;
                                 IsLastErrorMessageNew@1002 : Boolean;
                               BEGIN
                                 LastErrorMessage := DebuggerManagement.GetLastErrorMessage(IsLastErrorMessageNew);

                                 if LastErrorMessage = '' then
                                   LastErrorMessage := DEBUGGER.GETLASTERRORTEXT;

                                 MESSAGE(STRSUBSTNO(Text005Msg,LastErrorMessage));
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Part      ;
                Name=CodeViewer;
                CaptionML=ENU=Code;
                ApplicationArea=#All;
                SubPageLink="Object Type"=FIELD("Object Type"),
                            "Object ID"=FIELD("Object ID"),
                            "Line No."=FIELD("Line No."),
                            ID=FIELD(ID);
                PagePartID="Debugger Code Viewer";
                ProviderID=10 }

    { 16  ;1   ;Field     ;
                Name=Duration;
                CaptionML=ENU=Duration;
                ToolTipML=ENU=Specifies how long the debugger will take to run.;
                ApplicationArea=#All;
                SourceExpr=FinishTime - StartTime }

    { 3   ;0   ;Container ;
                Name=Container3;
                ContainerType=FactBoxArea }

    { 5   ;1   ;Part      ;
                Name=Watches;
                CaptionML=ENU=Watches;
                ApplicationArea=#All;
                SubPageLink="Call Stack ID"=FIELD(ID);
                PagePartID="Debugger Watch Value FactBox";
                ProviderID=10 }

    { 10  ;1   ;Part      ;
                Name=Callstack;
                CaptionML=ENU=Call Stack;
                ApplicationArea=#All;
                PagePartID="Debugger Callstack FactBox" }

  }
  CODE
  {
    VAR
      DebuggerCallstack@1005 : Record "Debugger Call Stack";
      UserPersonalization@1009 : Record "User Personalization";
      DebuggerManagement@1012 : Codeunit "Debugger Management";
      BreakEnabled@1004 : Boolean INDATASET;
      BreakpointHit@1002 : Boolean INDATASET;
      BreakOnError@1000 : Boolean INDATASET;
      Text002Msg@1007 : TextConst '@@@=Message shown when Break On Error occurs. Include the original error message.;ENU=Break On Error Message:\ \%1';
      BreakOnRecordChanges@1003 : Boolean INDATASET;
      SkipCodeunit1@1010 : Boolean;
      DataCaption@1001 : Text[100];
      ShowLastErrorEnabled@1006 : Boolean INDATASET;
      Text003Cap@1011 : TextConst '@@@=DataCaption when debugger is broken in application code. Example: Codeunit 1:  Application Management;ENU=%1 %2 : %3';
      Text004Cap@1013 : TextConst '@@@=DataCaption when waiting for break;ENU=Waiting for break...';
      SetAttachedSession@1008 : Boolean;
      Text005Msg@1014 : TextConst 'ENU=Last Error Message:\ \%1';
      Text007Msg@1016 : TextConst 'ENU=The session that was being debugged has closed. The Debugger Page will close.';
      StartTime@1015 : DateTime;
      FinishTime@1017 : DateTime;

    LOCAL PROCEDURE SaveConfiguration@1();
    BEGIN
      if UserPersonalization.GET(USERSECURITYID) then begin
        UserPersonalization."Debugger Break On Error" := BreakOnError;
        UserPersonalization."Debugger Break On Rec Changes" := BreakOnRecordChanges;
        UserPersonalization."Debugger Skip System Triggers" := SkipCodeunit1;
        UserPersonalization.MODIFY;
      end;
    END;

    LOCAL PROCEDURE WaitingForBreak@3();
    BEGIN
      BreakEnabled := true;
      CurrPage.Callstack.PAGE.ResetCallstackToTop;
    END;

    BEGIN
    END.
  }
}

