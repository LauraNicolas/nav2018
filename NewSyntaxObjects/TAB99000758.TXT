OBJECT Table 99000758 Machine Center
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               MfgSetup.GET;
               if "No." = '' then begin
                 MfgSetup.TESTFIELD("Machine Center Nos.");
                 NoSeriesMgt.InitSeries(MfgSetup."Machine Center Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               ProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";
               StdCostWksh@1001 : Record "Standard Cost Worksheet";
               CapLedgEntry@1002 : Record "Capacity Ledger Entry";
             BEGIN
               CapLedgEntry.SETRANGE(Type,CapLedgEntry.Type::"Machine Center");
               CapLedgEntry.SETRANGE("No.","No.");
               if not CapLedgEntry.ISEMPTY then
                 ERROR(Text007,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);

               StdCostWksh.RESET;
               StdCostWksh.SETRANGE(Type,StdCostWksh.Type::"Machine Center");
               StdCostWksh.SETRANGE("No.","No.");
               if not StdCostWksh.ISEMPTY then
                 ERROR(Text007,TABLECAPTION,"No.",StdCostWksh.TABLECAPTION);

               CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
               CalendarEntry.SETRANGE("No.","No.");
               CalendarEntry.DELETEALL;

               CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
               CalAbsentEntry.SETRANGE("No.","No.");
               CalAbsentEntry.DELETEALL;

               MfgCommentLine.SETRANGE("Table Name",MfgCommentLine."Table Name"::"Machine Center");
               MfgCommentLine.SETRANGE("No.","No.");
               MfgCommentLine.DELETEALL;

               ProdOrderRtngLine.SETRANGE(Type,ProdOrderRtngLine.Type::"Machine Center");
               ProdOrderRtngLine.SETRANGE("No.","No.");
               if not ProdOrderRtngLine.ISEMPTY then
                 ERROR(Text000);
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Machine Center;
    LookupPageID="Machine Center List";
    DrillDownPageID="Machine Center List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 4   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 14  ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=VAR
                                                                WorkCenter@1000 : Record "Work Center";
                                                                ProdOrderRtngLine@1001 : Record "Prod. Order Routing Line";
                                                                ProdOrderCapNeed@1002 : Record "Prod. Order Capacity Need";
                                                                PlanningRtngLine@1003 : Record "Planning Routing Line";
                                                              BEGIN
                                                                if "Work Center No." = xRec."Work Center No." then
                                                                  exit;

                                                                if "Work Center No." <> '' then begin
                                                                  WorkCenter.GET("Work Center No.");
                                                                  WorkCenter.TESTFIELD("Unit of Measure Code");
                                                                  "Queue Time Unit of Meas. Code" := WorkCenter."Queue Time Unit of Meas. Code";
                                                                  "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                  "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                  "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                end;
                                                                VALIDATE("Location Code",WorkCenter."Location Code");

                                                                CalendarEntry.SETCURRENTKEY("Capacity Type","No.");
                                                                CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
                                                                CalendarEntry.SETRANGE("No.","No.");
                                                                if not CalendarEntry.FIND('-') then
                                                                  exit;

                                                                if CurrFieldNo <> 0 then
                                                                  if not CONFIRM(Text001,false,FIELDCAPTION("Work Center No."))
                                                                  then begin
                                                                    "Work Center No." := xRec."Work Center No.";
                                                                    exit;
                                                                  end;

                                                                Window.OPEN(
                                                                  Text002 +
                                                                  Text003 +
                                                                  Text004 +
                                                                  Text006);

                                                                i := 0;
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                if CalendarEntry.FIND('-') then
                                                                  repeat
                                                                    i := i + 1;
                                                                    Window.UPDATE(1,i);
                                                                    Window.UPDATE(2,ROUND(i / NoOfRecords * 10000,1));
                                                                    CalendarEntry.VALIDATE("Work Center No.","Work Center No.");
                                                                    CalendarEntry.MODIFY;
                                                                  until CalendarEntry.NEXT = 0;

                                                                i := 0;
                                                                CalAbsentEntry.SETCURRENTKEY("Capacity Type","No.");
                                                                CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
                                                                CalAbsentEntry.SETRANGE("No.","No.");
                                                                NoOfRecords := CalAbsentEntry.COUNT;
                                                                if CalAbsentEntry.FIND('-') then
                                                                  repeat
                                                                    i := i + 1;
                                                                    Window.UPDATE(3,i);
                                                                    Window.UPDATE(4,ROUND(i / NoOfRecords * 10000,1));
                                                                    CalAbsentEntry.VALIDATE("Work Center No.","Work Center No.");
                                                                    CalAbsentEntry.MODIFY;
                                                                  until CalAbsentEntry.NEXT = 0;

                                                                i := 0;
                                                                ProdOrderCapNeed.SETCURRENTKEY(Type,"No.");
                                                                ProdOrderCapNeed.SETRANGE(Type,ProdOrderCapNeed.Type::"Machine Center");
                                                                ProdOrderCapNeed.SETRANGE("No.","No.");
                                                                NoOfRecords := ProdOrderCapNeed.COUNT;
                                                                if ProdOrderCapNeed.FIND('-') then
                                                                  repeat
                                                                    i := i + 1;
                                                                    Window.UPDATE(7,i);
                                                                    Window.UPDATE(8,ROUND(i / NoOfRecords * 10000,1));
                                                                    ProdOrderCapNeed.VALIDATE("Work Center No.","Work Center No.");
                                                                    ProdOrderCapNeed.MODIFY;
                                                                  until ProdOrderCapNeed.NEXT = 0;

                                                                MODIFY;

                                                                RtngLine.SETCURRENTKEY(Type,"No.");
                                                                RtngLine.SETRANGE(Type,RtngLine.Type::"Machine Center");
                                                                RtngLine.SETRANGE("No.","No.");
                                                                if RtngLine.FIND('-') then
                                                                  repeat
                                                                    RtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    RtngLine.MODIFY;
                                                                  until RtngLine.NEXT = 0;

                                                                PlanningRtngLine.SETCURRENTKEY(Type,"No.");
                                                                PlanningRtngLine.SETRANGE(Type,PlanningRtngLine.Type::"Machine Center");
                                                                PlanningRtngLine.SETRANGE("No.","No.");
                                                                if PlanningRtngLine.FIND('-') then
                                                                  repeat
                                                                    PlanningRtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    PlanningRtngLine.MODIFY;
                                                                  until PlanningRtngLine.NEXT = 0;

                                                                ProdOrderRtngLine.SETCURRENTKEY(Type,"No.");
                                                                ProdOrderRtngLine.SETRANGE(Type,PlanningRtngLine.Type::"Machine Center");
                                                                ProdOrderRtngLine.SETRANGE("No.","No.");
                                                                if ProdOrderRtngLine.FIND('-') then
                                                                  repeat
                                                                    ProdOrderRtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    ProdOrderRtngLine.MODIFY;
                                                                  until ProdOrderRtngLine.NEXT = 0;

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=ENU=Work Center No. }
    { 19  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 20  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   DecimalPlaces=2:5;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 22  ;   ;Queue Time          ;Decimal       ;CaptionML=ENU=Queue Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 23  ;   ;Queue Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Queue Time Unit of Meas. Code }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 27  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE ("Table Name"=CONST("Machine Center"),
                                                                                                         "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 31  ;   ;Capacity            ;Decimal       ;CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 32  ;   ;Efficiency          ;Decimal       ;InitValue=100;
                                                   CaptionML=ENU=Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 33  ;   ;Maximum Efficiency  ;Decimal       ;CaptionML=ENU=Maximum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Minimum Efficiency  ;Decimal       ;CaptionML=ENU=Minimum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 38  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 39  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 40  ;   ;Work Shift Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Shift";
                                                   CaptionML=ENU=Work Shift Filter }
    { 41  ;   ;Capacity (Total)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Total)" WHERE ("Capacity Type"=CONST("Machine Center"),
                                                                                                              "No."=FIELD("No."),
                                                                                                              "Work Shift Code"=FIELD("Work Shift Filter"),
                                                                                                              Date=FIELD("Date Filter")));
                                                   CaptionML=ENU=Capacity (Total);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 42  ;   ;Capacity (Effective);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Effective)" WHERE ("Capacity Type"=CONST("Machine Center"),
                                                                                                                  "No."=FIELD("No."),
                                                                                                                  "Work Shift Code"=FIELD("Work Shift Filter"),
                                                                                                                  Date=FIELD("Date Filter")));
                                                   CaptionML=ENU=Capacity (Effective);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 44  ;   ;Prod. Order Need (Qty.);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Allocated Time" WHERE (Type=CONST("Machine Center"),
                                                                                                                       "No."=FIELD("No."),
                                                                                                                       Status=FIELD("Prod. Order Status Filter"),
                                                                                                                       Date=FIELD("Date Filter"),
                                                                                                                       "Requested Only"=CONST(false)));
                                                   CaptionML=ENU=Prod. Order Need (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 45  ;   ;Prod. Order Need Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Type=CONST("Machine Center"),
                                                                                                                                    "No."=FIELD("No."),
                                                                                                                                    Status=FIELD("Prod. Order Status Filter")));
                                                   CaptionML=ENU=Prod. Order Need Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 47  ;   ;Prod. Order Status Filter;Option   ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Prod. Order Status Filter;
                                                   OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Simulated,Planned,"Firm Planned",Released,Finished }
    { 50  ;   ;Setup Time          ;Decimal       ;CaptionML=ENU=Setup Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 52  ;   ;Wait Time           ;Decimal       ;CaptionML=ENU=Wait Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 53  ;   ;Move Time           ;Decimal       ;CaptionML=ENU=Move Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 54  ;   ;Fixed Scrap Quantity;Decimal       ;CaptionML=ENU=Fixed Scrap Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 55  ;   ;Scrap %             ;Decimal       ;CaptionML=ENU=Scrap %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 56  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Setup Time Unit of Meas. Code }
    { 57  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Wait Time Unit of Meas. Code }
    { 58  ;   ;Send-Ahead Quantity ;Decimal       ;CaptionML=ENU=Send-Ahead Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 59  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Move Time Unit of Meas. Code }
    { 60  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=ENU=Flushing Method;
                                                   OptionCaptionML=ENU=Manual,Forward,Backward;
                                                   OptionString=Manual,Forward,Backward }
    { 62  ;   ;Minimum Process Time;Decimal       ;CaptionML=ENU=Minimum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 63  ;   ;Maximum Process Time;Decimal       ;CaptionML=ENU=Maximum Process Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 64  ;   ;Concurrent Capacities;Decimal      ;CaptionML=ENU=Concurrent Capacities;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 65  ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=ENU=Item Filter }
    { 66  ;   ;Stop Code Filter    ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Stop;
                                                   CaptionML=ENU=Stop Code Filter }
    { 67  ;   ;Scrap Code Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Scrap;
                                                   CaptionML=ENU=Scrap Code Filter }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 81  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   AutoFormatType=2 }
    { 82  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 83  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 84  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 7300;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE ("Use As In-Transit"=CONST(false),
                                                                                      "Bin Mandatory"=CONST(true));
                                                   OnValidate=VAR
                                                                WorkCenter@1000 : Record "Work Center";
                                                                AutoUpdate@1001 : Boolean;
                                                              BEGIN
                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  if ("Work Center No." = '') and ("Location Code" <> '') then
                                                                    ERROR(Text008,FIELDCAPTION("Location Code"),TABLECAPTION,WorkCenter.TABLECAPTION);

                                                                  if "Open Shop Floor Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("Open Shop Floor Bin Code",'')
                                                                    else
                                                                      TESTFIELD("Open Shop Floor Bin Code",'');
                                                                  end;
                                                                  if "To-Production Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("To-Production Bin Code",'')
                                                                    else
                                                                      TESTFIELD("To-Production Bin Code",'');
                                                                  end;
                                                                  if "From-Production Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("From-Production Bin Code",'')
                                                                    else
                                                                      TESTFIELD("From-Production Bin Code",'');
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 7301;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=ENU=Open Shop Floor Bin Code }
    { 7302;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=ENU=To-Production Bin Code }
    { 7303;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=ENU=From-Production Bin Code }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Work Center No."                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Machine Center is being used on production orders.';
      Text001@1001 : TextConst 'ENU=Do you want to change %1?';
      Text002@1002 : TextConst 'ENU=Work Center No. is corrected on\\';
      Text003@1003 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Calendar Absent.  #3###### @4@@@@@@@@@@@@@\';
      Text006@1005 : TextConst 'ENU=Prod. Order Need  #7###### @8@@@@@@@@@@@@@';
      PostCode@1020 : Record "Post Code";
      MfgSetup@1006 : Record "Manufacturing Setup";
      MachineCenter@1007 : Record "Machine Center";
      CalendarEntry@1008 : Record "Calendar Entry";
      CalAbsentEntry@1009 : Record "Calendar Absence Entry";
      MfgCommentLine@1010 : Record "Manufacturing Comment Line";
      RtngLine@1011 : Record "Routing Line";
      GLSetup@1017 : Record "General Ledger Setup";
      NoSeriesMgt@1013 : Codeunit NoSeriesManagement;
      Window@1014 : Dialog;
      i@1015 : Integer;
      NoOfRecords@1016 : Integer;
      GLSetupRead@1018 : Boolean;
      Text007@1019 : TextConst '@@@="%1 = Table caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot delete %1 %2 because there is at least one %3 associated with it.';
      Text008@1021 : TextConst 'ENU=You cannot change the %1 on %2 unless it is linked to a %3.';
      Text009@1022 : TextConst 'ENU=If you change the %1, then all bin codes on the %2 will be removed. Are you sure that you want to continue?';

    [External]
    PROCEDURE AssistEdit@2(OldMachineCenter@1000 : Record "Machine Center") : Boolean;
    BEGIN
      with MachineCenter do begin
        MachineCenter := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Machine Center Nos.");
        if NoSeriesMgt.SelectSeries(MfgSetup."Machine Center Nos.",OldMachineCenter."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := MachineCenter;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE ConfirmAutoRemovalOfBinCode@1(VAR AutoUpdate@1000 : Boolean) : Boolean;
    BEGIN
      if AutoUpdate then
        exit(true);

      if CONFIRM(Text009,false,FIELDCAPTION("Location Code"),TABLECAPTION) then
        AutoUpdate := true;

      exit(AutoUpdate);
    END;

    [External]
    PROCEDURE GetBinCode@9(UseFlushingMethod@1000 : Boolean;FlushingMethod@1001 : 'Manual,Forward,Backward,"Pick + Forward","Pick + Backward"') : Code[20];
    BEGIN
      if not UseFlushingMethod then
        exit("From-Production Bin Code");

      case FlushingMethod of
        FlushingMethod::Manual,
        FlushingMethod::"Pick + Forward",
        FlushingMethod::"Pick + Backward":
          exit("To-Production Bin Code");
        FlushingMethod::Forward,
        FlushingMethod::Backward:
          exit("Open Shop Floor Bin Code");
      end;
    END;

    BEGIN
    END.
  }
}

