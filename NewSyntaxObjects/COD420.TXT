OBJECT Codeunit 420 XBRL Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1013 : Record "Company Information";
      PeriodStartDate@1001 : Date;
      PeriodEndDate@1002 : Date;
      PeriodOption@1003 : '"Accounting Period","Fiscal Year"';
      PeriodOptionText@1009 : Text[30];
      NoOfPeriods@1004 : Integer;
      Text001@1000 : TextConst 'ENU=Accounting Period';
      Text002@1014 : TextConst 'ENU=Fiscal Year';
      Text003@1015 : TextConst 'ENU=%1 is not a period start date.';

    [Internal]
    PROCEDURE AddAttribute@2(DOMNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[250];Value@1003 : Text[250]);
    VAR
      TempAttribute@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TempAttribute := DOMNode.OwnerDocument.CreateAttribute(Name);
      if Value <> '' then
        TempAttribute.Value := Value;
      DOMNode.Attributes.SetNamedItem(TempAttribute);
      CLEAR(TempAttribute);
    END;

    [Internal]
    PROCEDURE AddAttributeWithNamespace@8(DOMNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[250];Value@1003 : Text[250];Prefix@1000 : Text[250];Namespace@1005 : Text[250]);
    VAR
      TempAttribute@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TempAttribute := DOMNode.OwnerDocument.CreateAttribute(Prefix,Name,Namespace);
      if Value <> '' then
        TempAttribute.Value := Value;
      DOMNode.Attributes.SetNamedItem(TempAttribute);
      CLEAR(TempAttribute);
    END;

    [External]
    PROCEDURE CalcConstant@5(VAR XBRLTaxonomyLine@1000 : Record "XBRL Taxonomy Line") : Decimal;
    VAR
      XBRLLineConst@1001 : Record "XBRL Line Constant";
    BEGIN
      with XBRLLineConst do begin
        RESET;
        SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
        SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
        SETRANGE("Starting Date",0D,PeriodEndDate);
        if FINDLAST then
          exit("Constant Amount");

        exit(XBRLTaxonomyLine."Constant Amount");
      end;
    END;

    [External]
    PROCEDURE CalcAmount@9(VAR XBRLTaxonomyLine@1000 : Record "XBRL Taxonomy Line") : Decimal;
    VAR
      GLEntry@1001 : Record "G/L Entry";
      GLAcc@1004 : Record "G/L Account";
      XBRLGLMapLine@1002 : Record "XBRL G/L Map Line";
      Amount@1003 : Decimal;
    BEGIN
      Amount := 0;
      with XBRLGLMapLine do begin
        RESET;
        SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
        SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
        if FIND('-') then
          repeat
            GLEntry.RESET;
            GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
            GLEntry.SETFILTER("G/L Account No.","G/L Account Filter");
            if ((XBRLTaxonomyLine.GETFILTER("Business Unit Filter") <> '') or
                (XBRLTaxonomyLine.GETFILTER("Global Dimension 1 Filter") <> '') or
                (XBRLTaxonomyLine.GETFILTER("Global Dimension 2 Filter") <> ''))
            then begin
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              XBRLTaxonomyLine.COPYFILTER("Business Unit Filter",GLEntry."Business Unit Code");
              XBRLTaxonomyLine.COPYFILTER("Global Dimension 1 Filter",GLEntry."Global Dimension 1 Code");
              XBRLTaxonomyLine.COPYFILTER("Global Dimension 2 Filter",GLEntry."Global Dimension 2 Code");
            end;
            GLEntry.FILTERGROUP(2);
            if "Business Unit Filter" <> '' then begin
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Business Unit Code","Business Unit Filter");
            end;
            if "Global Dimension 1 Filter" <> '' then begin
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Global Dimension 1 Code","Global Dimension 1 Filter");
            end;
            if "Global Dimension 2 Filter" <> '' then begin
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Global Dimension 2 Code","Global Dimension 2 Filter");
            end;
            GLEntry.FILTERGROUP(0);
            case "Timeframe Type" of
              "Timeframe Type"::"Net Change":
                GLEntry.SETRANGE("Posting Date",PeriodStartDate,PeriodEndDate);
              "Timeframe Type"::"Beginning Balance":
                GLEntry.SETRANGE("Posting Date",0D,CLOSINGDATE(PeriodStartDate - 1));
              "Timeframe Type"::"Ending Balance":
                GLEntry.SETRANGE("Posting Date",0D,PeriodEndDate);
            end;
            case "Amount Type" of
              "Amount Type"::"Net Amount":
                begin
                  GLEntry.CALCSUMS(Amount);
                  if (("Normal Balance" = "Normal Balance"::"Debit (positive)") and (GLEntry.Amount < 0) or
                      ("Normal Balance" = "Normal Balance"::"Credit (negative)") and (GLEntry.Amount > 0))
                  then
                    Amount := Amount - ABS(GLEntry.Amount)
                  else
                    Amount := Amount + ABS(GLEntry.Amount);
                end;
              "Amount Type"::"Debits Only":
                begin
                  GLEntry.CALCSUMS("Debit Amount");
                  Amount := Amount + GLEntry."Debit Amount";
                end;
              "Amount Type"::"Credits Only":
                begin
                  GLEntry.CALCSUMS("Credit Amount");
                  Amount := Amount + GLEntry."Credit Amount";
                end;
            end;
            with GLAcc do begin
              SETFILTER("No.",XBRLGLMapLine."G/L Account Filter");
              SETFILTER("Account Type",'%1|%2',"Account Type"::"End-Total","Account Type"::Total);
              GLEntry.COPYFILTER("Posting Date","Date Filter");
              GLEntry.COPYFILTER("Global Dimension 1 Code","Global Dimension 1 Filter");
              GLEntry.COPYFILTER("Global Dimension 2 Code","Global Dimension 2 Filter");
              GLEntry.COPYFILTER("Business Unit Code","Business Unit Filter");
              if FIND('-') then
                repeat
                  case "Amount Type" of
                    "Amount Type"::"Net Amount":
                      begin
                        CALCFIELDS("Net Change");
                        if (("Normal Balance" = "Normal Balance"::"Debit (positive)") and ("Net Change" < 0) or
                            ("Normal Balance" = "Normal Balance"::"Credit (negative)") and ("Net Change" > 0))
                        then
                          Amount := Amount - ABS("Net Change")
                        else
                          Amount := Amount + ABS("Net Change");
                      end;
                    "Amount Type"::"Debits Only":
                      begin
                        CALCFIELDS("Debit Amount");
                        Amount := Amount + "Debit Amount";
                      end;
                    "Amount Type"::"Credits Only":
                      begin
                        CALCFIELDS("Credit Amount");
                        Amount := Amount + "Credit Amount";
                      end;
                  end;
                until NEXT = 0;
            end;
          until NEXT = 0;
      end;
      exit(Amount);
    END;

    [External]
    PROCEDURE CalcRollup@4(VAR XBRLTaxonomyLine@1000 : Record "XBRL Taxonomy Line") : Decimal;
    VAR
      XBRLTaxonomyLine2@1003 : Record "XBRL Taxonomy Line";
      XBRLRollupLine@1001 : Record "XBRL Rollup Line";
      TotalAmount@1002 : Decimal;
    BEGIN
      TotalAmount := 0;
      XBRLRollupLine.SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
      XBRLRollupLine.SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
      with XBRLRollupLine do
        if FIND('-') then
          repeat
            XBRLTaxonomyLine2.GET("XBRL Taxonomy Name","From XBRL Taxonomy Line No.");
            XBRLTaxonomyLine2.COPYFILTERS(XBRLTaxonomyLine);
            case XBRLTaxonomyLine2."Source Type" of
              XBRLTaxonomyLine2."Source Type"::Constant:
                TotalAmount := TotalAmount + Weight * XBRLTaxonomyLine2."Constant Amount";
              XBRLTaxonomyLine2."Source Type"::"General Ledger":
                TotalAmount := TotalAmount + Weight * CalcAmount(XBRLTaxonomyLine2);
              XBRLTaxonomyLine2."Source Type"::Rollup:
                TotalAmount := TotalAmount + Weight * CalcRollup(XBRLTaxonomyLine2);
            end;
          until NEXT = 0;
      exit(TotalAmount);
    END;

    LOCAL PROCEDURE CalcPeriodEndDate@14(StartDate@1000 : Date) : Date;
    VAR
      AccountingPeriodRec@1001 : Record "Accounting Period";
      EndDate@1002 : Date;
    BEGIN
      CLEAR(AccountingPeriodRec);
      if PeriodOption = PeriodOption::"Fiscal Year" then
        AccountingPeriodRec.SETRANGE("New Fiscal Year",true);
      if not AccountingPeriodRec.GET(StartDate) then
        ERROR(Text003,StartDate);
      AccountingPeriodRec.NEXT;
      EndDate := CALCDATE('<-1D>',AccountingPeriodRec."Starting Date");
      exit(EndDate);
    END;

    LOCAL PROCEDURE CalcPeriodStartDate@7(EndDate@1000 : Date) : Date;
    VAR
      AccountingPeriodRec@1001 : Record "Accounting Period";
    BEGIN
      CLEAR(AccountingPeriodRec);
      AccountingPeriodRec.SETRANGE("Starting Date",0D,EndDate);
      if PeriodOption = PeriodOption::"Fiscal Year" then
        AccountingPeriodRec.SETRANGE("New Fiscal Year",true);
      AccountingPeriodRec.FINDLAST;
      exit(AccountingPeriodRec."Starting Date");
    END;

    [External]
    PROCEDURE ExpandString@19(Description@1001 : Text[200]) : Text[250];
    VAR
      Parameters@1002 : ARRAY [25] OF Text[50];
      Result@1006 : Text[250];
      I@1003 : Integer;
      Param@1004 : Integer;
      Digits@1005 : Integer;
    BEGIN
      // Setup all the parameters
      if CompanyInformation.Name = '' then
        CompanyInformation.GET;
      CLEAR(Parameters);
      Parameters[1] := FORMAT(PeriodEndDate,0,'<Day>');
      Parameters[2] := FORMAT(PeriodEndDate,0,'<Day,2>');
      Parameters[3] := FORMAT(PeriodEndDate,0,'<Month,2>');
      Parameters[4] := FORMAT(PeriodEndDate,0,'<Month Text>');
      Parameters[5] := FORMAT(PeriodEndDate,0,'<Year>');
      Parameters[6] := FORMAT(PeriodEndDate,0,'<Year4>');
      Parameters[7] := FORMAT(PeriodStartDate,0,'<Day>');
      Parameters[8] := FORMAT(PeriodStartDate,0,'<Day,2>');
      Parameters[9] := FORMAT(PeriodStartDate,0,'<Month,2>');
      Parameters[10] := FORMAT(PeriodStartDate,0,'<Month Text>');
      Parameters[11] := FORMAT(PeriodStartDate,0,'<Year>');
      Parameters[12] := FORMAT(PeriodStartDate,0,'<Year4>');
      Parameters[13] := FORMAT(NoOfPeriods);
      Parameters[14] := PeriodOptionText;
      Parameters[15] := CompanyInformation.Name;

      // Replace all substitution parameters (%1..%25 allowed)
      I := 1;
      while I <= STRLEN(Description) do begin
        Digits := 0;
        if Description[I] = '%' then
          case true of
            (Description[I + 1] in ['1','2']) and (Description[I + 2] in ['0'..'9']):  // Two digits
              Digits := 2;
            (Description[I + 1] in ['0'..'9']):                                      // One digit
              Digits := 1;
          end;
        if Digits = 0 then begin
          if STRLEN(Result) < 250 then
            Result := Result + COPYSTR(Description,I,1)
          else
            I := 251;
        end else begin
          EVALUATE(Param,COPYSTR(Description,I + 1,Digits));
          if STRLEN(Result) + STRLEN(Parameters[Param]) < 250 then
            Result := Result + Parameters[Param]
          else
            I := 251;
        end;
        I := I + 1 + Digits;
      end;
      exit(Result);
    END;

    [External]
    PROCEDURE FormatAmount2@3(Amount@1000 : Decimal) : Text[30];
    BEGIN
      exit(CONVERTSTR(FORMAT(Amount,0,1),',','.'));
    END;

    [External]
    PROCEDURE InitializeOptions@6(NumOfPeriods@1001 : Integer;PerOption@1003 : '"Accounting Period","Fiscal Year"');
    BEGIN
      PeriodOption := PerOption;
      if PerOption = PerOption::"Accounting Period" then
        PeriodOptionText := Text001
      else
        PeriodOptionText := Text002;
      NoOfPeriods := NumOfPeriods;
    END;

    [External]
    PROCEDURE SetPeriodDates@15(StartingDate@1000 : Date;EndDate@1002 : Date;VAR XBRLTaxonomyLine@1001 : Record "XBRL Taxonomy Line");
    BEGIN
      if EndDate = 0D then
        PeriodEndDate := CalcPeriodEndDate(StartingDate)
      else
        PeriodEndDate := EndDate;
      if EndDate = 0D then
        PeriodStartDate := CalcPeriodStartDate(PeriodEndDate)
      else
        PeriodStartDate := StartingDate;
      XBRLTaxonomyLine.SETRANGE("Date Filter",PeriodStartDate,PeriodEndDate);
    END;

    BEGIN
    END.
  }
}

