OBJECT Codeunit 90 Purch.-Post
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Purchase Header";
    Permissions=TableData "Sales Header"=m,
                TableData "Sales Line"=m,
                TableData "Purchase Line"=imd,
                TableData "Invoice Post. Buffer"=imd,
                TableData "Vendor Posting Group"=imd,
                TableData "Inventory Posting Group"=imd,
                TableData "Sales Shipment Header"=imd,
                TableData "Sales Shipment Line"=imd,
                TableData "Purch. Rcpt. Header"=imd,
                TableData "Purch. Rcpt. Line"=imd,
                TableData "Purch. Inv. Header"=imd,
                TableData "Purch. Inv. Line"=imd,
                TableData "Purch. Cr. Memo Hdr."=imd,
                TableData "Purch. Cr. Memo Line"=imd,
                TableData "Drop Shpt. Post. Buffer"=imd,
                TableData "Item Entry Relation"=ri,
                TableData "Value Entry Relation"=rid,
                TableData "Return Shipment Header"=imd,
                TableData "Return Shipment Line"=imd;
    OnRun=VAR
            PurchHeader@1005 : Record "Purchase Header";
            PurchLine@1006 : Record "Purchase Line";
            TempInvoicePostBuffer@1003 : TEMPORARY Record "Invoice Post. Buffer";
            TempCombinedPurchLine@1035 : TEMPORARY Record "Purchase Line";
            TempVATAmountLine@1036 : TEMPORARY Record "VAT Amount Line";
            TempVATAmountLineRemainder@1037 : TEMPORARY Record "VAT Amount Line";
            TempDropShptPostBuffer@1000 : TEMPORARY Record "Drop Shpt. Post. Buffer";
            UpdateAnalysisView@1002 : Codeunit "Update Analysis View";
            UpdateItemAnalysisView@1008 : Codeunit "Update Item Analysis View";
            EverythingInvoiced@1026 : Boolean;
            BiggestLineNo@1021 : Integer;
            ICGenJnlLineNo@1004 : Integer;
            LineCount@1027 : Integer;
          BEGIN
            OnBeforePostPurchaseDoc(Rec);

            ValidatePostingAndDocumentDate(Rec);

            if PreviewMode then begin
              CLEARALL;
              PreviewMode := true;
            end else
              CLEARALL;

            GetGLSetup;
            GetCurrency("Currency Code");

            PurchSetup.GET;
            PurchHeader := Rec;
            FillTempLines(PurchHeader);

            // Header
            CheckAndUpdate(PurchHeader);

            TempDeferralHeader.DELETEALL;
            TempDeferralLine.DELETEALL;
            TempInvoicePostBuffer.DELETEALL;
            TempDropShptPostBuffer.DELETEALL;
            EverythingInvoiced := true;

            // Lines
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
            PurchLine.SETRANGE("Document No.",PurchHeader."No.");

            LineCount := 0;
            RoundingLineInserted := false;
            MergePurchLines(PurchHeader,PurchLine,TempPrepmtPurchLine,TempCombinedPurchLine);
            AdjustFinalInvWith100PctPrepmt(TempCombinedPurchLine);

            TempVATAmountLineRemainder.DELETEALL;
            PurchLine.CalcVATAmountLines(1,PurchHeader,TempCombinedPurchLine,TempVATAmountLine);

            PurchaseLinesProcessed := false;
            if PurchLine.FINDFIRST then
              repeat
                ItemJnlRollRndg := false;
                LineCount := LineCount + 1;
                if GUIALLOWED then
                  Window.UPDATE(2,LineCount);

                PostPurchLine(
                  PurchHeader,PurchLine,TempInvoicePostBuffer,TempVATAmountLine,TempVATAmountLineRemainder,
                  TempDropShptPostBuffer,EverythingInvoiced,ICGenJnlLineNo);

                if not JobItem then
                  JobItem := (PurchLine.Type = PurchLine.Type::Item) and (PurchLine."Job No." <> '');

                if RoundingLineInserted then
                  LastLineRetrieved := true
                else begin
                  BiggestLineNo := MAX(BiggestLineNo,PurchLine."Line No.");
                  LastLineRetrieved := GetNextPurchline(PurchLine);
                  if LastLineRetrieved and PurchSetup."Invoice Rounding" then
                    InvoiceRounding(PurchHeader,PurchLine,false,BiggestLineNo);
                end;
              until LastLineRetrieved;

            if PurchHeader.IsCreditDocType then begin
              ReverseAmount(TotalPurchLine);
              ReverseAmount(TotalPurchLineLCY);
            end;

            // Post combine shipment of sales order
            PostCombineSalesOrderShipment(PurchHeader,TempDropShptPostBuffer);

            if PurchHeader.Invoice then
              PostGLAndVendor(PurchHeader,TempInvoicePostBuffer);

            if ICGenJnlLineNo > 0 then
              PostICGenJnl;

            MakeInventoryAdjustment(JobItem);
            UpdateLastPostingNos(PurchHeader);
            FinalizePosting(PurchHeader,TempDropShptPostBuffer,EverythingInvoiced);

            Rec := PurchHeader;

            if not InvtPickPutaway then begin
              COMMIT;
              UpdateAnalysisView.UpdateAll(0,true);
              UpdateItemAnalysisView.UpdateAll(0,true);
            end;

            OnAfterPostPurchaseDoc(
              Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",PurchCrMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      NothingToPostErr@1000 : TextConst 'ENU=There is nothing to post.';
      DropShipmentErr@1001 : TextConst 'ENU=A drop shipment from a purchase order cannot be received and invoiced at the same time.';
      PostingLinesMsg@1004 : TextConst '@@@=Counter;ENU=Posting lines              #2######\';
      PostingPurchasesAndVATMsg@1005 : TextConst '@@@=Counter;ENU=Posting purchases and VAT  #3######\';
      PostingVendorsMsg@1006 : TextConst '@@@=Counter;ENU=Posting to vendors         #4######\';
      PostingBalAccountMsg@1007 : TextConst '@@@=Counter;ENU=Posting to bal. account    #5######';
      PostingLines2Msg@1008 : TextConst '@@@=Counter;ENU=Posting lines         #2######';
      InvoiceNoMsg@1009 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Invoice No.";ENU=%1 %2 -> Invoice %3';
      CreditMemoNoMsg@1010 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Credit Memo No.";ENU=%1 %2 -> Credit Memo %3';
      CannotInvoiceBeforeAssosSalesOrderErr@1002 : TextConst '@@@="%1 = Document No.";ENU=You cannot invoice this purchase order before the associated sales orders have been invoiced. Please invoice sales order %1 before invoicing this purchase order.';
      ReceiptSameSignErr@1011 : TextConst 'ENU=must have the same sign as the receipt';
      ReceiptLinesDeletedErr@1012 : TextConst 'ENU=Receipt lines have been deleted.';
      CannotPurchaseResourcesErr@1013 : TextConst 'ENU=You cannot purchase resources.';
      PurchaseAlreadyExistsErr@1014 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.';
      InvoiceMoreThanReceivedErr@1015 : TextConst '@@@="%1 = Order No.";ENU=You cannot invoice order %1 for more than you have received.';
      CannotPostBeforeAssosSalesOrderErr@1016 : TextConst '@@@="%1 = Sales Order No.";ENU=You cannot post this purchase order before the associated sales orders have been invoiced. Post sales order %1 before posting this purchase order.';
      ExtDocNoNeededErr@1183 : TextConst '@@@="%1 = Field caption of e.g. Vendor Invoice No.";ENU=You need to enter the document number of the document from the vendor in the %1 field, so that this document stays linked to the original.';
      VATAmountTxt@1017 : TextConst 'ENU=VAT Amount';
      VATRateTxt@1018 : TextConst '@@@="%1 = VAT Rate";ENU=%1% VAT';
      BlanketOrderQuantityGreaterThanErr@1019 : TextConst '@@@="%1 = Quantity";ENU=in the associated blanket order must not be greater than %1';
      BlanketOrderQuantityReducedErr@1020 : TextConst 'ENU=in the associated blanket order must be reduced';
      ReceiveInvoiceShipErr@1021 : TextConst 'ENU=Please enter "Yes" in Receive and/or Invoice and/or Ship.';
      WarehouseRequiredErr@1022 : TextConst '@@@="%1/%2 = Document Type, %3/%4 - Document No.,%5/%6 = Line No.";ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6."';
      ReturnShipmentSamesSignErr@1024 : TextConst 'ENU=must have the same sign as the return shipment';
      ReturnShipmentInvoicedErr@1025 : TextConst '@@@="%1 = Line No., %2 = Document No.";ENU=Line %1 of the return shipment %2, which you are attempting to invoice, has already been invoiced.';
      ReceiptInvoicedErr@1026 : TextConst '@@@="%1 = Line No., %2 = Document No.";ENU=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.';
      QuantityToInvoiceGreaterErr@1027 : TextConst '@@@="%1 = Receipt No.";ENU=The quantity you are attempting to invoice is greater than the quantity in receipt %1.';
      DimensionIsBlockedErr@1028 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The combination of dimensions used in %1 %2 is blocked (Error: %3).';
      LineDimensionBlockedErr@1029 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked (Error: %4).';
      InvalidDimensionsErr@1030 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = Error text";ENU=The dimensions used in %1 %2 are invalid (Error: %3).';
      LineInvalidDimensionsErr@1031 : TextConst '@@@="%1 = Document Type, %2 = Document No, %3 = LineNo., %4 = Error text";ENU=The dimensions used in %1 %2, line no. %3 are invalid (Error: %4).';
      CannotAssignMoreErr@1032 : TextConst '@@@="%1 = Quantity, %2/%3 = Document Type, %4/%5 - Document No.,%6/%7 = Line No.";ENU="You cannot assign more than %1 units in %2 = %3,%4 = %5,%6 = %7."';
      MustAssignErr@1033 : TextConst 'ENU=You must assign all item charges, if you invoice everything.';
      CannotAssignInvoicedErr@1034 : TextConst '@@@="%1 = Purchase Line, %2/%3 = Document Type, %4/%5 - Document No.,%6/%7 = Line No.";ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced."';
      PurchSetup@1037 : Record "Purchases & Payables Setup";
      GLSetup@1038 : Record "General Ledger Setup";
      GLEntry@1039 : Record "G/L Entry";
      TempPurchLineGlobal@1040 : TEMPORARY Record "Purchase Line";
      JobPurchLine@1169 : Record "Purchase Line";
      TotalPurchLine@1043 : Record "Purchase Line";
      TotalPurchLineLCY@1044 : Record "Purchase Line";
      xPurchLine@1046 : Record "Purchase Line";
      PurchLineACY@1047 : Record "Purchase Line";
      TempPrepmtPurchLine@1167 : TEMPORARY Record "Purchase Line";
      PurchRcptHeader@1048 : Record "Purch. Rcpt. Header";
      PurchInvHeader@1050 : Record "Purch. Inv. Header";
      PurchCrMemoHeader@1052 : Record "Purch. Cr. Memo Hdr.";
      ReturnShptHeader@1054 : Record "Return Shipment Header";
      ReturnShptLine@1055 : Record "Return Shipment Line";
      SalesShptHeader@1058 : Record "Sales Shipment Header";
      SalesShptLine@1059 : Record "Sales Shipment Line";
      ItemChargeAssgntPurch@1045 : Record "Item Charge Assignment (Purch)";
      TempItemChargeAssgntPurch@1060 : TEMPORARY Record "Item Charge Assignment (Purch)";
      SourceCodeSetup@1065 : Record "Source Code Setup";
      Currency@1073 : Record Currency;
      VendLedgEntry@1075 : Record "Vendor Ledger Entry";
      WhseRcptHeader@1023 : Record "Warehouse Receipt Header";
      TempWhseRcptHeader@1142 : TEMPORARY Record "Warehouse Receipt Header";
      WhseShptHeader@1143 : Record "Warehouse Shipment Header";
      TempWhseShptHeader@1145 : TEMPORARY Record "Warehouse Shipment Header";
      PostedWhseRcptHeader@1140 : Record "Posted Whse. Receipt Header";
      PostedWhseRcptLine@1146 : Record "Posted Whse. Receipt Line";
      PostedWhseShptHeader@1147 : Record "Posted Whse. Shipment Header";
      PostedWhseShptLine@1151 : Record "Posted Whse. Shipment Line";
      Location@1085 : Record Location;
      TempHandlingSpecification@1094 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecification@1137 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecificationInv@1158 : TEMPORARY Record "Tracking Specification";
      TempWhseSplitSpecification@1160 : TEMPORARY Record "Tracking Specification";
      TempValueEntryRelation@5555 : TEMPORARY Record "Value Entry Relation";
      Job@1093 : Record Job;
      TempICGenJnlLine@11093 : TEMPORARY Record "Gen. Journal Line";
      TempPrepmtDeductLCYPurchLine@1190 : TEMPORARY Record "Purchase Line";
      TempSKU@1081 : TEMPORARY Record "Stockkeeping Unit";
      DeferralPostBuffer@1049 : ARRAY [2] OF Record "Deferral Post. Buffer";
      TempDeferralHeader@1003 : TEMPORARY Record "Deferral Header";
      TempDeferralLine@1035 : TEMPORARY Record "Deferral Line";
      GenJnlPostLine@1087 : Codeunit "Gen. Jnl.-Post Line";
      ItemJnlPostLine@1089 : Codeunit "Item Jnl.-Post Line";
      SalesTaxCalculate@1091 : Codeunit "Sales Tax Calculate";
      ReservePurchLine@1092 : Codeunit "Purch. Line-Reserve";
      ApprovalsMgmt@1250 : Codeunit "Approvals Mgmt.";
      WhsePurchRelease@1097 : Codeunit "Whse.-Purch. Release";
      SalesPost@1101 : Codeunit "Sales-Post";
      ItemTrackingMgt@1138 : Codeunit "Item Tracking Management";
      WhseJnlPostLine@1100 : Codeunit "Whse. Jnl.-Register Line";
      WhsePostRcpt@1148 : Codeunit "Whse.-Post Receipt";
      WhsePostShpt@1149 : Codeunit "Whse.-Post Shipment";
      CostCalcMgt@1162 : Codeunit "Cost Calculation Management";
      JobPostLine@1172 : Codeunit "Job Post-Line";
      ServItemMgt@1063 : Codeunit ServItemManagement;
      DeferralUtilities@1051 : Codeunit "Deferral Utilities";
      Window@1102 : Dialog;
      Usedate@1104 : Date;
      GenJnlLineDocNo@1105 : Code[20];
      GenJnlLineExtDocNo@1106 : Code[35];
      SrcCode@1107 : Code[10];
      ItemLedgShptEntryNo@1108 : Integer;
      GenJnlLineDocType@1110 : Integer;
      FALineNo@1111 : Integer;
      RoundingLineNo@1112 : Integer;
      DeferralLineNo@1053 : Integer;
      InvDefLineNo@1064 : Integer;
      RemQtyToBeInvoiced@1114 : Decimal;
      RemQtyToBeInvoicedBase@1115 : Decimal;
      RemAmt@1135 : Decimal;
      RemDiscAmt@1136 : Decimal;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      DropShipOrder@1121 : Boolean;
      GLSetupRead@1130 : Boolean;
      InvoiceGreaterThanReturnShipmentErr@1098 : TextConst '@@@="%1 = Return Shipment No.";ENU=The quantity you are attempting to invoice is greater than the quantity in return shipment %1.';
      ReturnShipmentLinesDeletedErr@1099 : TextConst 'ENU=Return shipment lines have been deleted.';
      InvoiceMoreThanShippedErr@1132 : TextConst '@@@="%1 = Order No.";ENU=You cannot invoice return order %1 for more than you have shipped.';
      RelatedItemLedgEntriesNotFoundErr@1165 : TextConst 'ENU=Related item ledger entries cannot be found.';
      ItemTrackingWrongSignErr@1173 : TextConst 'ENU=Item Tracking is signed wrongly.';
      ItemTrackingMismatchErr@1163 : TextConst 'ENU=Item Tracking does not match.';
      PostingDateNotAllowedErr@1155 : TextConst 'ENU=is not within your range of allowed posting dates';
      ItemTrackQuantityMismatchErr@1144 : TextConst '@@@="%1 = Quantity";ENU=The %1 does not match the quantity defined in item tracking.';
      CannotBeGreaterThanErr@1141 : TextConst '@@@="%1 = Amount";ENU=cannot be more than %1.';
      CannotBeSmallerThanErr@1129 : TextConst '@@@="%1 = Amount";ENU=must be at least %1.';
      ItemJnlRollRndg@1134 : Boolean;
      WhseReceive@1113 : Boolean;
      WhseShip@1150 : Boolean;
      InvtPickPutaway@1154 : Boolean;
      JobItem@1189 : Boolean;
      PositiveWhseEntrycreated@1191 : Boolean;
      PrepAmountToDeductToBigErr@1177 : TextConst '@@@="%1 = Prepmt Amt to Deduct, %2 = Max Amount";ENU=The total %1 cannot be more than %2.';
      PrepAmountToDeductToSmallErr@1178 : TextConst '@@@="%1 = Prepmt Amt to Deduct, %2 = Max Amount";ENU=The total %1 must be at least %2.';
      UnpostedInvoiceDuplicateQst@1175 : TextConst '@@@="%1 = Order No.,%2 = Invoice No.";ENU=An unposted invoice for order %1 exists. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post order %1?';
      InvoiceDuplicateInboxQst@1176 : TextConst '@@@="%1 = Order No.";ENU=An invoice for order %1 exists in the IC inbox. To avoid duplicate postings, cancel invoice %2 in the IC inbox.\Do you still want to post order %1?';
      PostedInvoiceDuplicateQst@1179 : TextConst '@@@="%1 = Invoice No., %2 = Order No.";ENU=Posted invoice %1 already exists for order %2. To avoid duplicate postings, do not post order %2.\Do you still want to post order %2?';
      OrderFromSameTransactionQst@1180 : TextConst '@@@="%1 = Order No., %2 = Invoice No.";ENU=Order %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post invoice %2?';
      DocumentFromSameTransactionQst@1181 : TextConst '@@@="%1 and %2 = Document No.";ENU=A document originating from the same IC transaction as document %1 exists in the IC inbox. To avoid duplicate postings, cancel document %2 in the IC inbox.\Do you still want to post document %1?';
      PostedInvoiceFromSameTransactionQst@1182 : TextConst '@@@="%1 and %2 = Invoice No.";ENU=Posted invoice %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, do not post invoice %2.\Do you still want to post invoice %2?';
      MustAssignItemChargeErr@1102601000 : TextConst '@@@="%1 = Item Charge No.";ENU=You must assign item charge %1 if you want to invoice it.';
      CannotInvoiceItemChargeErr@1102601001 : TextConst '@@@="%1 = Item Charge No.";ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.';
      PurchaseLinesProcessed@1080 : Boolean;
      ReservationDisruptedQst@1200 : TextConst '@@@="One or more reservation entries exist for the item with No. = 1000, Location Code = SILVER, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      ReassignItemChargeErr@1199 : TextConst 'ENU=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.';
      PreviewMode@1036 : Boolean;
      NoDeferralScheduleErr@1068 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1067 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      MixedDerpFAUntilPostingDateErr@1268 : TextConst '@@@=%1 - Fixed Asset No.;ENU=The value in the Depr. Until FA Posting Date field must be the same on lines for the same fixed asset %1.';
      CannotPostSameMultipleFAWhenDeprBookValueZeroErr@1274 : TextConst '@@@=%1 - Fixed Asset No.;ENU=You cannot select the Depr. Until FA Posting Date check box because there is no previous acquisition entry for fixed asset %1.\\If you want to depreciate new acquisitions, you can select the Depr. Acquisition Cost check box instead.';

    LOCAL PROCEDURE CopyToTempLines@174(PurchHeader@1001 : Record "Purchase Header");
    VAR
      PurchLine@1000 : Record "Purchase Line";
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      if PurchLine.FINDSET then
        repeat
          TempPurchLineGlobal := PurchLine;
          TempPurchLineGlobal.INSERT;
        until PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillTempLines@36(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      TempPurchLineGlobal.RESET;
      if TempPurchLineGlobal.ISEMPTY then
        CopyToTempLines(PurchHeader);
    END;

    LOCAL PROCEDURE ModifyTempLine@171(VAR TempPurchLineLocal@1000 : TEMPORARY Record "Purchase Line");
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      TempPurchLineLocal.MODIFY;
      PurchLine := TempPurchLineLocal;
      PurchLine.MODIFY;
    END;

    LOCAL PROCEDURE RefreshTempLines@172(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      TempPurchLineGlobal.RESET;
      TempPurchLineGlobal.DELETEALL;
      CopyToTempLines(PurchHeader);
    END;

    LOCAL PROCEDURE ResetTempLines@131(VAR TempPurchLineLocal@1000 : TEMPORARY Record "Purchase Line");
    BEGIN
      TempPurchLineLocal.RESET;
      TempPurchLineLocal.COPY(TempPurchLineGlobal,true);
    END;

    LOCAL PROCEDURE CalcInvoice@118(VAR PurchHeader@1000 : Record "Purchase Header") NewInvoice : Boolean;
    VAR
      TempPurchLine@1001 : TEMPORARY Record "Purchase Line";
    BEGIN
      with PurchHeader do begin
        ResetTempLines(TempPurchLine);
        TempPurchLine.SETFILTER(Quantity,'<>0');
        if "Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"] then
          TempPurchLine.SETFILTER("Qty. to Invoice",'<>0');
        NewInvoice := not TempPurchLine.ISEMPTY;
        if NewInvoice then
          case "Document Type" of
            "Document Type"::Order:
              if not Receive then begin
                TempPurchLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
                NewInvoice := not TempPurchLine.ISEMPTY;
              end;
            "Document Type"::"Return Order":
              if not Ship then begin
                TempPurchLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                NewInvoice := not TempPurchLine.ISEMPTY;
              end;
          end;
      end;
      exit(NewInvoice);
    END;

    LOCAL PROCEDURE CalcInvDiscount@134(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchLine@1001 : Record "Purchase Line";
      TempInvoice@1004 : Boolean;
      TempRcpt@1003 : Boolean;
      TempReturn@1002 : Boolean;
    BEGIN
      with PurchHeader do begin
        if not (PurchSetup."Calc. Inv. Discount" and (Status <> Status::Open)) then
          exit;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.FINDFIRST;
        TempInvoice := Invoice;
        TempRcpt := Receive;
        TempReturn := Ship;
        CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
        GET("Document Type","No.");
        Invoice := TempInvoice;
        Receive := TempRcpt;
        Ship := TempReturn;
        if not PreviewMode then
          COMMIT;
      end;
    END;

    LOCAL PROCEDURE CheckAndUpdate@147(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      GenJnlCheckLine@1001 : Codeunit "Gen. Jnl.-Check Line";
      ModifyHeader@1003 : Boolean;
    BEGIN
      with PurchHeader do begin
        // Check
        CheckMandatoryHeaderFields(PurchHeader);
        if GenJnlCheckLine.DateNotAllowed("Posting Date") then
          FIELDERROR("Posting Date",PostingDateNotAllowedErr);

        SetPostingFlags(PurchHeader);
        InitProgressWindow(PurchHeader);

        InvtPickPutaway := "Posting from Whse. Ref." <> 0;
        "Posting from Whse. Ref." := 0;

        CheckDim(PurchHeader);

        if Invoice then
          CheckFAPostingPossibility(PurchHeader);

        CheckPostRestrictions(PurchHeader);

        CheckICDocumentDuplicatePosting(PurchHeader);

        if Invoice then
          Invoice := CalcInvoice(PurchHeader);

        if Invoice then
          CopyAndCheckItemCharge(PurchHeader);

        if Invoice and not IsCreditDocType then
          TESTFIELD("Due Date");

        if Receive then
          Receive := CheckTrackingAndWarehouseForReceive(PurchHeader);

        if Ship then
          Ship := CheckTrackingAndWarehouseForShip(PurchHeader);

        if not (Receive or Invoice or Ship) then
          ERROR(NothingToPostErr);

        if Invoice then
          CheckAssosOrderLines(PurchHeader);

        if Invoice and PurchSetup."Ext. Doc. No. Mandatory" then
          CheckExtDocNo(PurchHeader);

        OnAfterCheckPurchDoc(PurchHeader);

        // Update
        if Invoice then
          CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,true);

        ModifyHeader := UpdatePostingNos(PurchHeader);

        DropShipOrder := UpdateAssosOrderPostingNos(PurchHeader);

        OnBeforePostCommitPurchaseDoc(PurchHeader,GenJnlPostLine,PreviewMode,ModifyHeader);
        if not PreviewMode and ModifyHeader then begin
          MODIFY;
          COMMIT;
        end;

        CalcInvDiscount(PurchHeader);
        ReleasePurchDocument(PurchHeader);

        if Receive or Ship then
          ArchiveUnpostedOrder(PurchHeader);

        CheckICPartnerBlocked(PurchHeader);
        SendICDocument(PurchHeader,ModifyHeader);
        UpdateHandledICInboxTransaction(PurchHeader);

        LockTables;

        SourceCodeSetup.GET;
        SrcCode := SourceCodeSetup.Purchases;

        InsertPostedHeaders(PurchHeader);

        UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
      end;
    END;

    LOCAL PROCEDURE CheckExtDocNo@179(PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      with PurchaseHeader do
        case "Document Type" of
          "Document Type"::Order,
          "Document Type"::Invoice:
            if "Vendor Invoice No." = '' then
              ERROR(ExtDocNoNeededErr,FIELDCAPTION("Vendor Invoice No."));
          else
            if "Vendor Cr. Memo No." = '' then
              ERROR(ExtDocNoNeededErr,FIELDCAPTION("Vendor Cr. Memo No."));
        end;
    END;

    LOCAL PROCEDURE PostPurchLine@152(PurchHeader@1001 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line";VAR TempInvoicePostBuffer@1006 : TEMPORARY Record "Invoice Post. Buffer";VAR TempVATAmountLine@1005 : TEMPORARY Record "VAT Amount Line";VAR TempVATAmountLineRemainder@1004 : TEMPORARY Record "VAT Amount Line";VAR TempDropShptPostBuffer@1009 : TEMPORARY Record "Drop Shpt. Post. Buffer";VAR EverythingInvoiced@1003 : Boolean;VAR ICGenJnlLineNo@1008 : Integer);
    VAR
      PurchInvLine@1010 : Record "Purch. Inv. Line";
      PurchCrMemoLine@1011 : Record "Purch. Cr. Memo Line";
      InvoicePostBuffer@1007 : Record "Invoice Post. Buffer";
      CostBaseAmount@1002 : Decimal;
    BEGIN
      with PurchLine do begin
        if Type = Type::Item then
          CostBaseAmount := "Line Amount";
        UpdateQtyPerUnitOfMeasure(PurchLine);

        TestPurchLine(PurchHeader,PurchLine);
        UpdatePurchLineBeforePost(PurchHeader,PurchLine);

        if "Qty. to Invoice" + "Quantity Invoiced" <> Quantity then
          EverythingInvoiced := false;

        if Quantity <> 0 then begin
          TESTFIELD("No.");
          TESTFIELD(Type);
          TESTFIELD("Gen. Bus. Posting Group");
          TESTFIELD("Gen. Prod. Posting Group");
          DivideAmount(PurchHeader,PurchLine,1,"Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);
        end else
          TESTFIELD(Amount,0);

        CheckItemReservDisruption(PurchLine);
        RoundAmount(PurchHeader,PurchLine,"Qty. to Invoice");

        if IsCreditDocType then begin
          ReverseAmount(PurchLine);
          ReverseAmount(PurchLineACY);
        end;

        RemQtyToBeInvoiced := "Qty. to Invoice";
        RemQtyToBeInvoicedBase := "Qty. to Invoice (Base)";

        // Job Credit Memo Item Qty Check
        if IsCreditDocType then
          if ("Job No." <> '') and (Type = Type::Item) and ("Qty. to Invoice" <> 0) then
            JobPostLine.CheckItemQuantityPurchCredit(PurchHeader,PurchLine);

        PostItemTrackingLine(PurchHeader,PurchLine);

        case Type of
          Type::"G/L Account":
            PostGLAccICLine(PurchHeader,PurchLine,ICGenJnlLineNo);
          Type::Item:
            PostItemLine(PurchHeader,PurchLine,TempDropShptPostBuffer);
          3:
            ERROR(CannotPurchaseResourcesErr);
          Type::"Charge (Item)":
            PostItemChargeLine(PurchHeader,PurchLine);
        end;

        if (Type >= Type::"G/L Account") and ("Qty. to Invoice" <> 0) then begin
          AdjustPrepmtAmountLCY(PurchHeader,PurchLine);
          FillInvoicePostBuffer(PurchHeader,PurchLine,PurchLineACY,TempInvoicePostBuffer,InvoicePostBuffer);
          InsertPrepmtAdjInvPostingBuf(PurchHeader,PurchLine,TempInvoicePostBuffer,InvoicePostBuffer);
        end;

        if (PurchRcptHeader."No." <> '') and ("Receipt No." = '') and
           not RoundingLineInserted and not "Prepayment Line"
        then
          InsertReceiptLine(PurchRcptHeader,PurchLine,CostBaseAmount);

        if (ReturnShptHeader."No." <> '') and ("Return Shipment No." = '') and
           not RoundingLineInserted
        then
          InsertReturnShipmentLine(ReturnShptHeader,PurchLine,CostBaseAmount);

        if PurchHeader.Invoice then
          if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then begin
            PurchInvLine.InitFromPurchLine(PurchInvHeader,xPurchLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchInvLine.RowID1,1,100));
            OnBeforePurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine);
            PurchInvLine.INSERT(true);
            OnAfterPurchInvLineInsert(PurchInvLine,PurchInvHeader,PurchLine);
            CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchInvLine.GetDocumentType,
              PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
          end else begin // Credit Memo
            PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,xPurchLine);
            ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
            OnBeforePurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine);
            PurchCrMemoLine.INSERT(true);
            OnAfterPurchCrMemoLineInsert(PurchCrMemoLine,PurchCrMemoHeader,PurchLine);
            CreatePostedDeferralScheduleFromPurchDoc(xPurchLine,PurchCrMemoLine.GetDocumentType,
              PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
          end;
      end;
    END;

    LOCAL PROCEDURE PostGLAndVendor@157(VAR PurchHeader@1000 : Record "Purchase Header";VAR TempInvoicePostBuffer@1001 : TEMPORARY Record "Invoice Post. Buffer");
    BEGIN
      with PurchHeader do begin
        // Post purchase and VAT to G/L entries from buffer
        PostInvoicePostingBuffer(PurchHeader,TempInvoicePostBuffer);

        // Check External Document number
        if PurchSetup."Ext. Doc. No. Mandatory" or (GenJnlLineExtDocNo <> '') then
          CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);

        // Post vendor entries
        if GUIALLOWED then
          Window.UPDATE(4,1);
        PostVendorEntry(
          PurchHeader,TotalPurchLine,TotalPurchLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);

        UpdatePurchaseHeader(VendLedgEntry);

        // Balancing account
        if "Bal. Account No." <> '' then begin
          if GUIALLOWED then
            Window.UPDATE(5,1);
          PostBalancingEntry(
            PurchHeader,TotalPurchLine,TotalPurchLineLCY,GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
        end;
      end;
    END;

    LOCAL PROCEDURE PostGLAccICLine@154(PurchHeader@1002 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";VAR ICGenJnlLineNo@1003 : Integer);
    VAR
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if (PurchLine."No." <> '') and not PurchLine."System-Created Entry" then begin
        GLAcc.GET(PurchLine."No.");
        GLAcc.TESTFIELD("Direct Posting");
        if (PurchLine."Job No." <> '') and (PurchLine."Qty. to Invoice" <> 0) then begin
          CreateJobPurchLine(JobPurchLine,PurchLine,PurchHeader."Prices Including VAT");
          JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
        end;
        if (PurchLine."IC Partner Code" <> '') and PurchHeader.Invoice then
          InsertICGenJnlLine(PurchHeader,xPurchLine,ICGenJnlLineNo);
      end;
    END;

    LOCAL PROCEDURE PostItemLine@135(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line";VAR TempDropShptPostBuffer@1003 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      DummyTrackingSpecification@1002 : Record "Tracking Specification";
    BEGIN
      ItemLedgShptEntryNo := 0;
      with PurchHeader do begin
        if RemQtyToBeInvoiced <> 0 then
          ItemLedgShptEntryNo :=
            PostItemJnlLine(
              PurchHeader,PurchLine,
              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
              0,'',DummyTrackingSpecification);
        if IsCreditDocType then begin
          if ABS(PurchLine."Return Qty. to Ship") > ABS(RemQtyToBeInvoiced) then
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                PurchHeader,PurchLine,
                PurchLine."Return Qty. to Ship" - RemQtyToBeInvoiced,
                PurchLine."Return Qty. to Ship (Base)" - RemQtyToBeInvoicedBase,
                0,0,0,'',DummyTrackingSpecification);
        end else begin
          if ABS(PurchLine."Qty. to Receive") > ABS(RemQtyToBeInvoiced) then
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                PurchHeader,PurchLine,
                PurchLine."Qty. to Receive" - RemQtyToBeInvoiced,
                PurchLine."Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                0,0,0,'',DummyTrackingSpecification);
          if (PurchLine."Qty. to Receive" <> 0) and (PurchLine."Sales Order Line No." <> 0) then begin
            TempDropShptPostBuffer."Order No." := PurchLine."Sales Order No.";
            TempDropShptPostBuffer."Order Line No." := PurchLine."Sales Order Line No.";
            TempDropShptPostBuffer.Quantity := PurchLine."Qty. to Receive";
            TempDropShptPostBuffer."Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
            TempDropShptPostBuffer."Item Shpt. Entry No." :=
              PostAssocItemJnlLine(PurchHeader,PurchLine,TempDropShptPostBuffer.Quantity,TempDropShptPostBuffer."Quantity (Base)");
            TempDropShptPostBuffer.INSERT;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE PostItemChargeLine@146(PurchHeader@1002 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line");
    VAR
      PurchaseLineBackup@1001 : Record "Purchase Line";
    BEGIN
      if not (PurchHeader.Invoice and (PurchLine."Qty. to Invoice" <> 0)) then
        exit;

      ItemJnlRollRndg := true;
      PurchaseLineBackup.COPY(PurchLine);
      if FindTempItemChargeAssgntPurch(PurchaseLineBackup."Line No.") then
        repeat
          case TempItemChargeAssgntPurch."Applies-to Doc. Type" of
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
              begin
                PostItemChargePerRcpt(PurchHeader,PurchaseLineBackup);
                TempItemChargeAssgntPurch.MARK(true);
              end;
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt":
              begin
                PostItemChargePerTransfer(PurchHeader,PurchaseLineBackup);
                TempItemChargeAssgntPurch.MARK(true);
              end;
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
              begin
                PostItemChargePerRetShpt(PurchHeader,PurchaseLineBackup);
                TempItemChargeAssgntPurch.MARK(true);
              end;
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
              begin
                PostItemChargePerSalesShpt(PurchHeader,PurchaseLineBackup);
                TempItemChargeAssgntPurch.MARK(true);
              end;
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
              begin
                PostItemChargePerRetRcpt(PurchHeader,PurchaseLineBackup);
                TempItemChargeAssgntPurch.MARK(true);
              end;
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::Order,
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::Invoice,
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Order",
            TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Credit Memo":
              CheckItemCharge(TempItemChargeAssgntPurch);
          end;
        until TempItemChargeAssgntPurch.NEXT = 0;
    END;

    LOCAL PROCEDURE PostItemTrackingLine@159(PurchHeader@1000 : Record "Purchase Header";PurchLine@1001 : Record "Purchase Line");
    VAR
      TempTrackingSpecification@1003 : TEMPORARY Record "Tracking Specification";
      TrackingSpecificationExists@1002 : Boolean;
    BEGIN
      if PurchLine."Prepayment Line" then
        exit;

      if PurchHeader.Invoice then
        if PurchLine."Qty. to Invoice" = 0 then
          TrackingSpecificationExists := false
        else
          TrackingSpecificationExists :=
            ReservePurchLine.RetrieveInvoiceSpecification(PurchLine,TempTrackingSpecification);

      PostItemTracking(PurchHeader,PurchLine,TempTrackingSpecification,TrackingSpecificationExists);

      if TrackingSpecificationExists then
        SaveInvoiceSpecification(TempTrackingSpecification);
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(PurchHeader@1019 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";QtyToBeReceived@1001 : Decimal;QtyToBeReceivedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1010 : Record "Tracking Specification") : Integer;
    VAR
      ItemJnlLine@1008 : Record "Item Journal Line";
      OriginalItemJnlLine@1014 : Record "Item Journal Line";
      TempWhseJnlLine@1012 : TEMPORARY Record "Warehouse Journal Line";
      TempWhseTrackingSpecification@1016 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecificationChargeAssmt@1030 : TEMPORARY Record "Tracking Specification";
      CurrExchRate@1007 : Record "Currency Exchange Rate";
      TempReservationEntry@1011 : TEMPORARY Record "Reservation Entry";
      Factor@1009 : Decimal;
      PostWhseJnlLine@1013 : Boolean;
      CheckApplToItemEntry@1015 : Boolean;
      PostJobConsumptionBeforePurch@1018 : Boolean;
    BEGIN
      if not ItemJnlRollRndg then begin
        RemAmt := 0;
        RemDiscAmt := 0;
      end;
      with ItemJnlLine do begin
        INIT;
        CopyFromPurchHeader(PurchHeader);
        CopyFromPurchLine(PurchLine);

        if QtyToBeReceived = 0 then
          if PurchLine.IsCreditDocType then
            CopyDocumentFields(
              "Document Type"::"Purchase Credit Memo",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series")
          else
            CopyDocumentFields(
              "Document Type"::"Purchase Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series")
        else begin
          if PurchLine.IsCreditDocType then
            CopyDocumentFields(
              "Document Type"::"Purchase Return Shipment",
              ReturnShptHeader."No.",ReturnShptHeader."Vendor Authorization No.",SrcCode,ReturnShptHeader."No. Series")
          else
            CopyDocumentFields(
              "Document Type"::"Purchase Receipt",
              PurchRcptHeader."No.",PurchRcptHeader."Vendor Shipment No.",SrcCode,PurchRcptHeader."No. Series");
          if QtyToBeInvoiced <> 0 then begin
            if "Document No." = '' then
              if PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo" then
                CopyDocumentFields(
                  "Document Type"::"Purchase Credit Memo",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series")
              else
                CopyDocumentFields(
                  "Document Type"::"Purchase Invoice",GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series");
          end;
        end;

        if QtyToBeInvoiced <> 0 then
          "Invoice No." := GenJnlLineDocNo;

        CopyTrackingFromSpec(TrackingSpecification);
        "Item Shpt. Entry No." := ItemLedgShptEntryNo;

        Quantity := QtyToBeReceived;
        "Quantity (Base)" := QtyToBeReceivedBase;
        "Invoiced Quantity" := QtyToBeInvoiced;
        "Invoiced Qty. (Base)" := QtyToBeInvoicedBase;

        if ItemChargeNo <> '' then begin
          "Item Charge No." := ItemChargeNo;
          PurchLine."Qty. to Invoice" := QtyToBeInvoiced;
        end;

        if QtyToBeInvoiced <> 0 then begin
          if (QtyToBeInvoicedBase <> 0) and (PurchLine.Type = PurchLine.Type::Item)then
            Factor := QtyToBeInvoicedBase / PurchLine."Qty. to Invoice (Base)"
          else
            Factor := QtyToBeInvoiced / PurchLine."Qty. to Invoice";
          Amount := PurchLine.Amount * Factor + RemAmt;
          if PurchHeader."Prices Including VAT" then
            "Discount Amount" :=
              (PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount") /
              (1 + PurchLine."VAT %" / 100) * Factor + RemDiscAmt
          else
            "Discount Amount" :=
              (PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount") * Factor + RemDiscAmt;
          RemAmt := Amount - ROUND(Amount);
          RemDiscAmt := "Discount Amount" - ROUND("Discount Amount");
          Amount := ROUND(Amount);
          "Discount Amount" := ROUND("Discount Amount");
        end else begin
          if PurchHeader."Prices Including VAT" then
            Amount :=
              (QtyToBeReceived * PurchLine."Direct Unit Cost" * (1 - PurchLine."Line Discount %" / 100) /
               (1 + PurchLine."VAT %" / 100)) + RemAmt
          else
            Amount :=
              (QtyToBeReceived * PurchLine."Direct Unit Cost" * (1 - PurchLine."Line Discount %" / 100)) + RemAmt;
          RemAmt := Amount - ROUND(Amount);
          if PurchHeader."Currency Code" <> '' then
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
                  Amount,PurchHeader."Currency Factor"))
          else
            Amount := ROUND(Amount);
        end;

        if PurchLine."Prod. Order No." <> '' then
          PostItemJnlLineCopyProdOrder(PurchLine,ItemJnlLine,QtyToBeReceived,QtyToBeInvoiced);

        CheckApplToItemEntry := SetCheckApplToItemEntry(PurchLine);

        PostWhseJnlLine := ShouldPostWhseJnlLine(PurchLine,ItemJnlLine,TempWhseJnlLine);

        if QtyToBeReceivedBase <> 0 then begin
          if PurchLine.IsCreditDocType then
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,-QtyToBeReceivedBase,CheckApplToItemEntry)
          else
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,QtyToBeReceivedBase,CheckApplToItemEntry);

          if CheckApplToItemEntry and (not PurchLine.IsServiceItem) then
            PurchLine.TESTFIELD("Appl.-to Item Entry");
        end;

        CollectPurchaseLineReservEntries(TempReservationEntry,ItemJnlLine);
        OriginalItemJnlLine := ItemJnlLine;

        if PurchLine."Job No." <> '' then begin
          PostJobConsumptionBeforePurch := IsPurchaseReturn;
          if PostJobConsumptionBeforePurch then
            PostItemJnlLineJobConsumption(
              PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived);
        end;

        ItemJnlPostLine.RunWithCheck(ItemJnlLine);

        if not Subcontracting then
          PostItemJnlLineTracking(
            PurchLine,TempWhseTrackingSpecification,TempTrackingSpecificationChargeAssmt,PostWhseJnlLine,QtyToBeInvoiced);

        if PurchLine."Job No." <> '' then
          if not PostJobConsumptionBeforePurch then
            PostItemJnlLineJobConsumption(
              PurchHeader,PurchLine,OriginalItemJnlLine,TempReservationEntry,QtyToBeInvoiced,QtyToBeReceived);

        if PostWhseJnlLine then
          PostItemJnlLineWhseLine(TempWhseJnlLine,TempWhseTrackingSpecification,PurchLine,PostJobConsumptionBeforePurch);

        if (PurchLine.Type = PurchLine.Type::Item) and PurchHeader.Invoice then
          PostItemJnlLineItemCharges(
            PurchHeader,PurchLine,OriginalItemJnlLine,"Item Shpt. Entry No.",TempTrackingSpecificationChargeAssmt);
      end;

      exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemJnlLineCopyProdOrder@166(PurchLine@1000 : Record "Purchase Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";QtyToBeReceived@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal);
    BEGIN
      with PurchLine do begin
        ItemJnlLine.Subcontracting := true;
        ItemJnlLine."Quantity (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeReceived);
        ItemJnlLine."Invoiced Qty. (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeInvoiced);
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Output Quantity (Base)" := ItemJnlLine."Quantity (Base)";
        ItemJnlLine."Output Quantity" := QtyToBeReceived;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
        ItemJnlLine.Type := ItemJnlLine.Type::"Work Center";
        ItemJnlLine."No." := "Work Center No.";
        ItemJnlLine."Routing No." := "Routing No.";
        ItemJnlLine."Routing Reference No." := "Routing Reference No.";
        ItemJnlLine."Operation No." := "Operation No.";
        ItemJnlLine."Work Center No." := "Work Center No.";
        ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
        if Finished then
          ItemJnlLine.Finished := Finished;
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLineItemCharges@161(PurchHeader@1000 : Record "Purchase Header";PurchLine@1001 : Record "Purchase Line";VAR OriginalItemJnlLine@1003 : Record "Item Journal Line";ItemShptEntryNo@1004 : Integer;VAR TempTrackingSpecificationChargeAssmt@1005 : TEMPORARY Record "Tracking Specification");
    VAR
      ItemChargePurchLine@1002 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETCURRENTKEY(
          "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
        TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
        TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
        if TempItemChargeAssgntPurch.FIND('-') then
          repeat
            TESTFIELD("Allow Item Charge Assignment");
            GetItemChargeLine(PurchHeader,ItemChargePurchLine);
            ItemChargePurchLine.CALCFIELDS("Qty. Assigned");
            if (ItemChargePurchLine."Qty. to Invoice" <> 0) or
               (ABS(ItemChargePurchLine."Qty. Assigned") < ABS(ItemChargePurchLine."Quantity Invoiced"))
            then begin
              OriginalItemJnlLine."Item Shpt. Entry No." := ItemShptEntryNo;
              PostItemChargePerOrder(
                PurchHeader,PurchLine,OriginalItemJnlLine,ItemChargePurchLine,TempTrackingSpecificationChargeAssmt);
              TempItemChargeAssgntPurch.MARK(true);
            end;
          until TempItemChargeAssgntPurch.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLineTracking@162(PurchLine@1000 : Record "Purchase Line";VAR TempWhseTrackingSpecification@1002 : TEMPORARY Record "Tracking Specification";VAR TempTrackingSpecificationChargeAssmt@1004 : TEMPORARY Record "Tracking Specification";PostWhseJnlLine@1001 : Boolean;QtyToBeInvoiced@1003 : Decimal);
    BEGIN
      if ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) then
        if TempHandlingSpecification.FIND('-') then
          repeat
            TempTrackingSpecification := TempHandlingSpecification;
            TempTrackingSpecification.SetSourceFromPurchLine(PurchLine);
            if TempTrackingSpecification.INSERT then;
            if QtyToBeInvoiced <> 0 then begin
              TempTrackingSpecificationInv := TempTrackingSpecification;
              if TempTrackingSpecificationInv.INSERT then;
            end;
            if PostWhseJnlLine then begin
              TempWhseTrackingSpecification := TempTrackingSpecification;
              if TempWhseTrackingSpecification.INSERT then;
            end;
            TempTrackingSpecificationChargeAssmt := TempTrackingSpecification;
            TempTrackingSpecificationChargeAssmt.INSERT;
          until TempHandlingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE PostItemJnlLineWhseLine@165(VAR TempWhseJnlLine@1000 : TEMPORARY Record "Warehouse Journal Line";VAR TempWhseTrackingSpecification@1002 : TEMPORARY Record "Tracking Specification";PurchLine@1003 : Record "Purchase Line";PostBefore@1004 : Boolean);
    VAR
      TempWhseJnlLine2@1001 : TEMPORARY Record "Warehouse Journal Line";
    BEGIN
      ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,false);
      if TempWhseJnlLine2.FIND('-') then
        repeat
          if PurchLine.IsCreditDocType and (PurchLine.Quantity > 0) or
             PurchLine.IsInvoiceDocType and (PurchLine.Quantity < 0)
          then
            CreatePositiveEntry(TempWhseJnlLine2,PurchLine."Job No.",PostBefore);
          WhseJnlPostLine.RUN(TempWhseJnlLine2);
          if RevertWarehouseEntry(TempWhseJnlLine2,PurchLine."Job No.",PostBefore) then
            WhseJnlPostLine.RUN(TempWhseJnlLine2);
        until TempWhseJnlLine2.NEXT = 0;
      TempWhseTrackingSpecification.DELETEALL;
    END;

    LOCAL PROCEDURE ShouldPostWhseJnlLine@167(PurchLine@1000 : Record "Purchase Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";VAR TempWhseJnlLine@1002 : TEMPORARY Record "Warehouse Journal Line") : Boolean;
    BEGIN
      with PurchLine do
        if ("Location Code" <> '') and (Type = Type::Item) and (ItemJnlLine.Quantity <> 0) and
           not ItemJnlLine.Subcontracting
        then begin
          GetLocation("Location Code");
          if (("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) and
              Location."Directed Put-away and Pick") or
             (Location."Bin Mandatory" and not (WhseReceive or WhseShip or InvtPickPutaway or "Drop Shipment"))
          then begin
            CreateWhseJnlLine(ItemJnlLine,PurchLine,TempWhseJnlLine);
            exit(true);
          end;
        end;
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(PurchHeader@1013 : Record "Purchase Header";PurchLine@1014 : Record "Purchase Line";ItemJnlLine2@1001 : Record "Item Journal Line";ItemChargePurchLine@1002 : Record "Purchase Line";VAR TempTrackingSpecificationChargeAssmt@1030 : TEMPORARY Record "Tracking Specification");
    VAR
      NonDistrItemJnlLine@1000 : Record "Item Journal Line";
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      OriginalAmt@1007 : Decimal;
      OriginalAmtACY@1008 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      TotalChargeAmt2@1011 : Decimal;
      TotalChargeAmtLCY2@1012 : Decimal;
      SignFactor@1006 : Integer;
    BEGIN
      with TempItemChargeAssgntPurch do begin
        PurchLine.TESTFIELD("Allow Item Charge Assignment",true);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargePurchLine.Description;
        ItemJnlLine2."Document Line No." := ItemChargePurchLine."Line No.";
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Return Qty. to Ship (Base)",PurchLine."Qty. to Invoice (Base)")
        else
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)");
        if ItemJnlLine2."Invoiced Quantity" = 0 then begin
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        end;
        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        if PurchHeader."Currency Code" <> '' then
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt2 + TotalPurchLine.Amount,PurchHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalPurchLineLCY.Amount
        else
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";
        ItemJnlLine2."Overhead Rate" := 0;

        if PurchHeader."Currency Code" <> '' then
          ItemJnlLine2."Discount Amount" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",(ItemChargePurchLine."Inv. Discount Amount" +
                                                     ItemChargePurchLine."Line Discount Amount") *
                ItemJnlLine2."Invoiced Qty. (Base)" /
                ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
                PurchHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        else
          ItemJnlLine2."Discount Amount" := ROUND(
              (ItemChargePurchLine."Line Discount Amount" + ItemChargePurchLine."Inv. Discount Amount") *
              ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              GLSetup."Amount Rounding Precision");

        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargePurchLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargePurchLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Dimension Set ID" := ItemChargePurchLine."Dimension Set ID";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargePurchLine."Gen. Prod. Posting Group";
      end;

      with TempTrackingSpecificationChargeAssmt do begin
        RESET;
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source ID",TempItemChargeAssgntPurch."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
        if ISEMPTY then
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2)
        else begin
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalAmtACY := NonDistrItemJnlLine."Amount (ACY)";
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          if ("Quantity (Base)" / OriginalQty) > 0 then
            SignFactor := 1
          else
            SignFactor := -1;
          repeat
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            if ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") then begin
              ItemJnlLine2."Quantity (Base)" := "Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2."Amount (ACY)" :=
                ROUND(OriginalAmtACY * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost (ACY)" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Item Ledger Entry No.";
              ItemJnlLine2."Applies-to Entry" := "Item Ledger Entry No.";
              ItemJnlLine2.CopyTrackingFromSpec(TempTrackingSpecificationChargeAssmt);
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= "Quantity (Base)";
              NonDistrItemJnlLine.Amount -= (ItemJnlLine2.Amount * SignFactor);
              NonDistrItemJnlLine."Amount (ACY)" -= (ItemJnlLine2."Amount (ACY)" * SignFactor);
              NonDistrItemJnlLine."Discount Amount" -= (ItemJnlLine2."Discount Amount" * SignFactor);
            end else begin
              NonDistrItemJnlLine."Quantity (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Unit Cost (ACY)" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Applies-to Entry" := "Item Ledger Entry No.";
              NonDistrItemJnlLine.CopyTrackingFromSpec(TempTrackingSpecificationChargeAssmt);
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            end;
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE PostItemChargePerRcpt@5807(PurchHeader@1012 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      PurchRcptLine@1002 : Record "Purch. Rcpt. Line";
      TempItemLedgEntry@1003 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1005 : Codeunit "Item Tracking Management";
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      if not PurchRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      then
        ERROR(ReceiptLinesDeletedErr);

      Sign := GetSign(PurchRcptLine."Quantity (Base)");

      if PurchRcptLine."Item Rcpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,PurchRcptLine."Quantity (Base)",PurchRcptLine."Item Rcpt. Entry No.")
      else begin
        DistributeCharge := true;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Purch. Rcpt. Line",0,PurchRcptLine."Document No.",
          '',0,PurchRcptLine."Line No.",PurchRcptLine."Quantity (Base)");
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          PurchHeader,PurchLine,TempItemLedgEntry,PurchRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Qty. to Assign",TempItemChargeAssgntPurch."Amount to Assign",
          Sign,PurchRcptLine."Indirect Cost %")
      else
        PostItemCharge(PurchHeader,PurchLine,
          PurchRcptLine."Item Rcpt. Entry No.",PurchRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          PurchRcptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerRetShpt@5811(PurchHeader@1012 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      ReturnShptLine@1002 : Record "Return Shipment Line";
      TempItemLedgEntry@1010 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      ReturnShptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
      ReturnShptLine.TESTFIELD("Job No.",'');

      Sign := GetSign(PurchLine."Line Amount");
      if PurchLine.IsCreditDocType then
        Sign := -Sign;

      if ReturnShptLine."Item Shpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-ReturnShptLine."Quantity (Base)",ReturnShptLine."Item Shpt. Entry No.")
      else begin
        DistributeCharge := true;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Shipment Line",0,ReturnShptLine."Document No.",
          '',0,ReturnShptLine."Line No.",ReturnShptLine."Quantity (Base)");
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          PurchHeader,PurchLine,TempItemLedgEntry,-ReturnShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Qty. to Assign",ABS(TempItemChargeAssgntPurch."Amount to Assign"),
          Sign,ReturnShptLine."Indirect Cost %")
      else
        PostItemCharge(PurchHeader,PurchLine,
          ReturnShptLine."Item Shpt. Entry No.",-ReturnShptLine."Quantity (Base)",
          ABS(TempItemChargeAssgntPurch."Amount to Assign") * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          ReturnShptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerTransfer@23(PurchHeader@1018 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      TransRcptLine@1002 : Record "Transfer Receipt Line";
      ItemApplnEntry@1003 : Record "Item Application Entry";
      DummyTrackingSpecification@1001 : Record "Tracking Specification";
      PurchLine2@1016 : Record "Purchase Line";
      CurrExchRate@1017 : Record "Currency Exchange Rate";
      TotalAmountToPostFCY@1004 : Decimal;
      TotalAmountToPostLCY@1005 : Decimal;
      TotalDiscAmountToPost@1006 : Decimal;
      AmountToPostFCY@1007 : Decimal;
      AmountToPostLCY@1008 : Decimal;
      DiscAmountToPost@1009 : Decimal;
      RemAmountToPostFCY@1010 : Decimal;
      RemAmountToPostLCY@1011 : Decimal;
      RemDiscAmountToPost@1012 : Decimal;
      CalcAmountToPostFCY@1013 : Decimal;
      CalcAmountToPostLCY@1014 : Decimal;
      CalcDiscAmountToPost@1015 : Decimal;
    BEGIN
      with TempItemChargeAssgntPurch do begin
        TransRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
        PurchLine2 := PurchLine;
        PurchLine2."No." := "Item No.";
        PurchLine2."Variant Code" := TransRcptLine."Variant Code";
        PurchLine2."Location Code" := TransRcptLine."Transfer-to Code";
        PurchLine2."Bin Code" := '';
        PurchLine2."Line No." := "Document Line No.";

        if TransRcptLine."Item Rcpt. Entry No." = 0 then
          PostItemChargePerITTransfer(PurchHeader,PurchLine,TransRcptLine)
        else begin
          TotalAmountToPostFCY := "Amount to Assign";
          if PurchHeader."Currency Code" <> '' then
            TotalAmountToPostLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalAmountToPostFCY,PurchHeader."Currency Factor")
          else
            TotalAmountToPostLCY := TotalAmountToPostFCY;

          TotalDiscAmountToPost :=
            ROUND(
              PurchLine2."Inv. Discount Amount" / PurchLine2.Quantity * "Qty. to Assign",
              GLSetup."Amount Rounding Precision");
          TotalDiscAmountToPost :=
            TotalDiscAmountToPost +
            ROUND(
              PurchLine2."Line Discount Amount" * ("Qty. to Assign" / PurchLine2."Qty. to Invoice"),
              GLSetup."Amount Rounding Precision");

          TotalAmountToPostLCY := ROUND(TotalAmountToPostLCY,GLSetup."Amount Rounding Precision");

          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.",TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",true);
          if ItemApplnEntry.FINDSET then
            repeat
              PurchLine2."Appl.-to Item Entry" := ItemApplnEntry."Item Ledger Entry No.";
              CalcAmountToPostFCY :=
                ((TotalAmountToPostFCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostFCY;
              AmountToPostFCY := ROUND(CalcAmountToPostFCY);
              RemAmountToPostFCY := CalcAmountToPostFCY - AmountToPostFCY;
              CalcAmountToPostLCY :=
                ((TotalAmountToPostLCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostLCY;
              AmountToPostLCY := ROUND(CalcAmountToPostLCY);
              RemAmountToPostLCY := CalcAmountToPostLCY - AmountToPostLCY;
              CalcDiscAmountToPost :=
                ((TotalDiscAmountToPost / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemDiscAmountToPost;
              DiscAmountToPost := ROUND(CalcDiscAmountToPost);
              RemDiscAmountToPost := CalcDiscAmountToPost - DiscAmountToPost;
              PurchLine2.Amount := AmountToPostLCY;
              PurchLine2."Inv. Discount Amount" := DiscAmountToPost;
              PurchLine2."Line Discount Amount" := 0;
              PurchLine2."Unit Cost" :=
                ROUND(AmountToPostFCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              PurchLine2."Unit Cost (LCY)" :=
                ROUND(AmountToPostLCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
                PurchLine2.Amount := -PurchLine2.Amount;
              PostItemJnlLine(
                PurchHeader,PurchLine2,
                0,0,
                ItemApplnEntry.Quantity,ItemApplnEntry.Quantity,
                PurchLine2."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
            until ItemApplnEntry.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE PostItemChargePerITTransfer@43(PurchHeader@1002 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line";TransRcptLine@1017 : Record "Transfer Receipt Line");
    VAR
      TempItemLedgEntry@1016 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
    BEGIN
      with TempItemChargeAssgntPurch do begin
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Transfer Receipt Line",0,TransRcptLine."Document No.",
          '',0,TransRcptLine."Line No.",TransRcptLine."Quantity (Base)");
        PostDistributeItemCharge(
          PurchHeader,PurchLine,TempItemLedgEntry,TransRcptLine."Quantity (Base)",
          "Qty. to Assign","Amount to Assign",1,0);
      end;
    END;

    LOCAL PROCEDURE PostItemChargePerSalesShpt@41(PurchHeader@1012 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      SalesShptLine@1002 : Record "Sales Shipment Line";
      TempItemLedgEntry@1010 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1009 : Codeunit "Item Tracking Management";
      Sign@1001 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      if not SalesShptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      then
        ERROR(RelatedItemLedgEntriesNotFoundErr);
      SalesShptLine.TESTFIELD("Job No.",'');

      Sign := -GetSign(SalesShptLine."Quantity (Base)");

      if SalesShptLine."Item Shpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      else begin
        DistributeCharge := true;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
          '',0,SalesShptLine."Line No.",SalesShptLine."Quantity (Base)");
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          PurchHeader,PurchLine,TempItemLedgEntry,-SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Qty. to Assign",TempItemChargeAssgntPurch."Amount to Assign",Sign,0)
      else
        PostItemCharge(PurchHeader,PurchLine,
          SalesShptLine."Item Shpt. Entry No.",-SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@37(PurchHeader@1012 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line");
    VAR
      ReturnRcptLine@1000 : Record "Return Receipt Line";
      TempItemLedgEntry@1011 : TEMPORARY Record "Item Ledger Entry";
      ItemTrackingMgt@1010 : Codeunit "Item Tracking Management";
      Sign@1003 : Decimal;
      DistributeCharge@1002 : Boolean;
    BEGIN
      if not ReturnRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      then
        ERROR(RelatedItemLedgEntriesNotFoundErr);
      ReturnRcptLine.TESTFIELD("Job No.",'');
      Sign := GetSign(ReturnRcptLine."Quantity (Base)");

      if ReturnRcptLine."Item Rcpt. Entry No." <> 0 then
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      else begin
        DistributeCharge := true;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
          '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)");
      end;

      if DistributeCharge then
        PostDistributeItemCharge(
          PurchHeader,PurchLine,TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Qty. to Assign",TempItemChargeAssgntPurch."Amount to Assign",Sign,0)
      else
        PostItemCharge(PurchHeader,PurchLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostDistributeItemCharge@66(PurchHeader@1000 : Record "Purchase Header";PurchLine@1001 : Record "Purchase Line";VAR TempItemLedgEntry@1002 : TEMPORARY Record "Item Ledger Entry";NonDistrQuantity@1003 : Decimal;NonDistrQtyToAssign@1004 : Decimal;NonDistrAmountToAssign@1005 : Decimal;Sign@1009 : Decimal;IndirectCostPct@1010 : Decimal);
    VAR
      Factor@1006 : Decimal;
      QtyToAssign@1007 : Decimal;
      AmountToAssign@1008 : Decimal;
    BEGIN
      if TempItemLedgEntry.FINDSET then begin
        repeat
          Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          if Factor < 1 then begin
            PostItemCharge(PurchHeader,PurchLine,
              TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
              AmountToAssign * Sign,QtyToAssign,IndirectCostPct);
            NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          end else // the last time
            PostItemCharge(PurchHeader,PurchLine,
              TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
              NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,IndirectCostPct);
        until TempItemLedgEntry.NEXT = 0;
      end else
        ERROR(RelatedItemLedgEntriesNotFoundErr)
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(PurchHeader@1003 : Record "Purchase Header";PurchLine@1004 : Record "Purchase Line";QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      ItemJnlLine@1009 : Record "Item Journal Line";
      TempHandlingSpecification2@1005 : TEMPORARY Record "Tracking Specification";
      ItemEntryRelation@1006 : Record "Item Entry Relation";
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      SalesOrderHeader@1008 : Record "Sales Header";
      SalesOrderLine@1007 : Record "Sales Line";
    BEGIN
      SalesOrderHeader.GET(
        SalesOrderHeader."Document Type"::Order,PurchLine."Sales Order No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");

      with ItemJnlLine do begin
        INIT;
        CopyDocumentFields(
          "Document Type"::"Sales Shipment",SalesOrderHeader."Shipping No.",'',SrcCode,SalesOrderHeader."Posting No. Series");

        CopyFromSalesHeader(SalesOrderHeader);
        "Country/Region Code" := GetCountryCode(SalesOrderLine,SalesOrderHeader);
        "Posting Date" := PurchHeader."Posting Date";
        "Document Date" := PurchHeader."Document Date";

        CopyFromSalesLine(SalesOrderLine);
        "Derived from Blanket Order" := SalesOrderLine."Blanket Order No." <> '';
        "Applies-to Entry" := ItemLedgShptEntryNo;

        Quantity := QtyToBeShipped;
        "Quantity (Base)" := QtyToBeShippedBase;
        "Invoiced Quantity" := 0;
        "Invoiced Qty. (Base)" := 0;
        "Source Currency Code" := PurchHeader."Currency Code";

        Amount := SalesOrderLine.Amount * QtyToBeShipped / SalesOrderLine.Quantity;
        if SalesOrderHeader."Currency Code" <> '' then begin
          Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
                Amount,SalesOrderHeader."Currency Factor"));
          "Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
                SalesOrderLine."Line Discount Amount",SalesOrderHeader."Currency Factor"));
        end else begin
          Amount := ROUND(Amount);
          "Discount Amount" := SalesOrderLine."Line Discount Amount";
        end;
      end;

      if SalesOrderLine."Job Contract Entry No." = 0 then begin
        TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,PurchLine,QtyToBeShippedBase,true);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        // Handle Item Tracking
        if ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) then begin
          if TempHandlingSpecification2.FINDSET then
            repeat
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification.SetSourceFromSalesLine(SalesOrderLine);
              if TempTrackingSpecification.INSERT then;
              ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification2);
              ItemEntryRelation.SetSource(DATABASE::"Sales Shipment Line",0,SalesOrderHeader."Shipping No.",SalesOrderLine."Line No.");
              ItemEntryRelation.SetOrderInfo(SalesOrderLine."Document No.",SalesOrderLine."Line No.");
              ItemEntryRelation.INSERT;
            until TempHandlingSpecification2.NEXT = 0;
          exit(0);
        end;
      end;

      exit(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE ReleasePurchDocument@136(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      ReleasePurchaseDocument@1005 : Codeunit "Release Purchase Document";
      LinesWereModified@1006 : Boolean;
      TempInvoice@1004 : Boolean;
      TempRcpt@1003 : Boolean;
      TempReturn@1002 : Boolean;
      PrevStatus@1001 : Option;
    BEGIN
      with PurchHeader do begin
        if not (Status = Status::Open) or (Status = Status::"Pending Prepayment") then
          exit;

        TempInvoice := Invoice;
        TempRcpt := Receive;
        TempReturn := Ship;
        PrevStatus := Status;
        LinesWereModified := ReleasePurchaseDocument.ReleasePurchaseHeader(PurchHeader,PreviewMode);
        if LinesWereModified then
          RefreshTempLines(PurchHeader);
        TESTFIELD(Status,Status::Released);
        Status := PrevStatus;
        Invoice := TempInvoice;
        Receive := TempRcpt;
        Ship := TempReturn;
        if PreviewMode and ("Posting No." = '') then
          "Posting No." := '***';
        if not PreviewMode then begin
          MODIFY;
          COMMIT;
        end;
        Status := Status::Released;
      end;
    END;

    LOCAL PROCEDURE TestPurchLine@139(PurchHeader@1004 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line");
    VAR
      FA@1001 : Record "Fixed Asset";
      FASetup@1003 : Record "FA Setup";
      DeprBook@1002 : Record "Depreciation Book";
      DummyTrackingSpecification@1005 : Record "Tracking Specification";
    BEGIN
      with PurchLine do begin
        if Type = Type::Item then
          DummyTrackingSpecification.CheckItemTrackingQuantity(
            DATABASE::"Purchase Line","Document Type","Document No.","Line No.",
            "Qty. to Receive (Base)","Qty. to Invoice (Base)",PurchHeader.Receive,PurchHeader.Invoice);

        if Type = Type::"Charge (Item)" then begin
          TESTFIELD(Amount);
          TESTFIELD("Job No.",'');
        end;
        if "Job No." <> '' then
          TESTFIELD("Job Task No.");
        if Type = Type::"Fixed Asset" then begin
          TESTFIELD("Job No.",'');
          TESTFIELD("Depreciation Book Code");
          TESTFIELD("FA Posting Type");
          FA.GET("No.");
          FA.TESTFIELD("Budgeted Asset",false);
          DeprBook.GET("Depreciation Book Code");
          if "Budgeted FA No." <> '' then begin
            FA.GET("Budgeted FA No.");
            FA.TESTFIELD("Budgeted Asset",true);
          end;
          if "FA Posting Type" = "FA Posting Type"::Maintenance then begin
            TESTFIELD("Insurance No.",'');
            TESTFIELD("Depr. until FA Posting Date",false);
            TESTFIELD("Depr. Acquisition Cost",false);
            DeprBook.TESTFIELD("G/L Integration - Maintenance",true);
          end;
          if "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" then begin
            TESTFIELD("Maintenance Code",'');
            DeprBook.TESTFIELD("G/L Integration - Acq. Cost",true);
          end;
          if "Insurance No." <> '' then begin
            FASetup.GET;
            FASetup.TESTFIELD("Insurance Depr. Book","Depreciation Book Code");
          end;
        end else begin
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
          TESTFIELD("Maintenance Code",'');
          TESTFIELD("Insurance No.",'');
          TESTFIELD("Depr. until FA Posting Date",false);
          TESTFIELD("Depr. Acquisition Cost",false);
          TESTFIELD("Budgeted FA No.",'');
          TESTFIELD("FA Posting Date",0D);
          TESTFIELD("Salvage Value",0);
          TESTFIELD("Duplicate in Depreciation Book",'');
          TESTFIELD("Use Duplication List",false);
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4(VAR TempDropShptPostBuffer@1002 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      SalesSetup@1001 : Record "Sales & Receivables Setup";
      SalesOrderHeader@1004 : Record "Sales Header";
      SalesOrderLine@1003 : Record "Sales Line";
      ReserveSalesLine@1000 : Codeunit "Sales Line-Reserve";
    BEGIN
      TempDropShptPostBuffer.RESET;
      if TempDropShptPostBuffer.ISEMPTY then
        exit;
      SalesSetup.GET;
      if TempDropShptPostBuffer.FINDSET then begin
        repeat
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            TempDropShptPostBuffer."Order No.");
          SalesOrderHeader."Last Shipping No." := SalesOrderHeader."Shipping No.";
          SalesOrderHeader."Shipping No." := '';
          SalesOrderHeader.MODIFY;
          ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesOrderHeader);
          TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
          repeat
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
            SalesOrderLine."Quantity Shipped" := SalesOrderLine."Quantity Shipped" + TempDropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. Shipped (Base)" := SalesOrderLine."Qty. Shipped (Base)" + TempDropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.InitOutstanding;
            if SalesSetup."Default Quantity to Ship" <> SalesSetup."Default Quantity to Ship"::Blank then
              SalesOrderLine.InitQtyToShip
            else begin
              SalesOrderLine."Qty. to Ship" := 0;
              SalesOrderLine."Qty. to Ship (Base)" := 0;
            end;
            SalesOrderLine.MODIFY;
          until TempDropShptPostBuffer.NEXT = 0;
          TempDropShptPostBuffer.SETRANGE("Order No.");
        until TempDropShptPostBuffer.NEXT = 0;
        TempDropShptPostBuffer.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE UpdateAssosOrderPostingNos@121(PurchHeader@1000 : Record "Purchase Header") DropShipment : Boolean;
    VAR
      TempPurchLine@1001 : TEMPORARY Record "Purchase Line";
      SalesOrderHeader@1002 : Record "Sales Header";
      NoSeriesMgt@1003 : Codeunit NoSeriesManagement;
      ReleaseSalesDocument@1004 : Codeunit "Release Sales Document";
    BEGIN
      with PurchHeader do begin
        ResetTempLines(TempPurchLine);
        TempPurchLine.SETFILTER("Sales Order Line No.",'<>0');
        if not TempPurchLine.ISEMPTY then begin
          DropShipment := true;
          if Receive then begin
            TempPurchLine.FINDSET;
            repeat
              if SalesOrderHeader."No." <> TempPurchLine."Sales Order No." then begin
                SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,TempPurchLine."Sales Order No.");
                SalesOrderHeader.TESTFIELD("Bill-to Customer No.");
                SalesOrderHeader.Ship := true;
                ReleaseSalesDocument.ReleaseSalesHeader(SalesOrderHeader,PreviewMode);
                if SalesOrderHeader."Shipping No." = '' then begin
                  SalesOrderHeader.TESTFIELD("Shipping No. Series");
                  SalesOrderHeader."Shipping No." :=
                    NoSeriesMgt.GetNextNo(SalesOrderHeader."Shipping No. Series","Posting Date",true);
                  SalesOrderHeader.MODIFY;
                end;
              end;
            until TempPurchLine.NEXT = 0;
          end;
        end;
        exit(DropShipment);
      end;
    END;

    LOCAL PROCEDURE UpdateAfterPosting@137(PurchHeader@1001 : Record "Purchase Header");
    VAR
      TempPurchLine@1002 : TEMPORARY Record "Purchase Line";
    BEGIN
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETFILTER("Blanket Order Line No.",'<>0');
        if FINDSET then
          repeat
            UpdateBlanketOrderLine(TempPurchLine,PurchHeader.Receive,PurchHeader.Ship,PurchHeader.Invoice);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateLastPostingNos@153(VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      with PurchHeader do begin
        if Receive then begin
          "Last Receiving No." := "Receiving No.";
          "Receiving No." := '';
        end;
        if Invoice then begin
          "Last Posting No." := "Posting No.";
          "Posting No." := '';
        end;
        if Ship then begin
          "Last Return Shipment No." := "Return Shipment No.";
          "Return Shipment No." := '';
        end;
      end;
    END;

    LOCAL PROCEDURE UpdatePostingNos@125(VAR PurchHeader@1000 : Record "Purchase Header") ModifyHeader : Boolean;
    VAR
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
    BEGIN
      with PurchHeader do begin
        if Receive and ("Receiving No." = '') then
          if ("Document Type" = "Document Type"::Order) or
             (("Document Type" = "Document Type"::Invoice) and PurchSetup."Receipt on Invoice")
          then begin
            TESTFIELD("Receiving No. Series");
            "Receiving No." := NoSeriesMgt.GetNextNo("Receiving No. Series","Posting Date",true);
            ModifyHeader := true;
          end;

        if Ship and ("Return Shipment No." = '') then
          if ("Document Type" = "Document Type"::"Return Order") or
             (("Document Type" = "Document Type"::"Credit Memo") and PurchSetup."Return Shipment on Credit Memo")
          then begin
            TESTFIELD("Return Shipment No. Series");
            "Return Shipment No." := NoSeriesMgt.GetNextNo("Return Shipment No. Series","Posting Date",true);
            ModifyHeader := true;
          end;

        if Invoice and ("Posting No." = '') then begin
          if ("No. Series" <> '') or
             ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
          then
            TESTFIELD("Posting No. Series");
          if ("No. Series" <> "Posting No. Series") or
             ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
          then begin
            if not PreviewMode then begin
              "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",true);
              ModifyHeader := true;
            end else
              "Posting No." := '***';
          end;
        end;
      end;

      OnAfterUpdatePostingNos(PurchHeader,NoSeriesMgt);
    END;

    LOCAL PROCEDURE UpdatePurchLineBeforePost@138(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line");
    BEGIN
      with PurchLine do begin
        case PurchHeader."Document Type" of
          "Document Type"::Order:
            TESTFIELD("Return Qty. to Ship",0);
          "Document Type"::Invoice:
            begin
              if "Receipt No." = '' then
                TESTFIELD("Qty. to Receive",Quantity);
              TESTFIELD("Return Qty. to Ship",0);
              TESTFIELD("Qty. to Invoice",Quantity);
            end;
          "Document Type"::"Return Order":
            TESTFIELD("Qty. to Receive",0);
          "Document Type"::"Credit Memo":
            begin
              if "Return Shipment No." = '' then
                TESTFIELD("Return Qty. to Ship",Quantity);
              TESTFIELD("Qty. to Receive",0);
              TESTFIELD("Qty. to Invoice",Quantity);
            end;
        end;

        if not (PurchHeader.Receive or RoundingLineInserted) then begin
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
        end;

        if not (PurchHeader.Ship or RoundingLineInserted) then begin
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
        end;

        if (PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice) and ("Receipt No." <> '') then begin
          "Quantity Received" := Quantity;
          "Qty. Received (Base)" := "Quantity (Base)";
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
        end;

        if (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo") and ("Return Shipment No." <> '')
        then begin
          "Return Qty. Shipped" := Quantity;
          "Return Qty. Shipped (Base)" := "Quantity (Base)";
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
        end;

        if PurchHeader.Invoice then begin
          if ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice) then
            InitQtyToInvoice;
        end else begin
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateWhseDocuments@156();
    BEGIN
      if WhseReceive then begin
        WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
        TempWhseRcptHeader.DELETE;
      end;
      if WhseShip then begin
        WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
        TempWhseShptHeader.DELETE;
      end;
    END;

    LOCAL PROCEDURE DeleteAfterPosting@158(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchCommentLine@1001 : Record "Purch. Comment Line";
      PurchLine@1004 : Record "Purchase Line";
      TempPurchLine@1003 : TEMPORARY Record "Purchase Line";
      WarehouseRequest@1002 : Record "Warehouse Request";
    BEGIN
      with PurchHeader do begin
        if HASLINKS then
          DELETELINKS;
        DELETE;

        ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
        ResetTempLines(TempPurchLine);
        if TempPurchLine.FINDFIRST then
          repeat
            if TempPurchLine."Deferral Code" <> '' then
              DeferralUtilities.RemoveOrSetDeferralSchedule(
                '',DeferralUtilities.GetPurchDeferralDocType,'','',
                TempPurchLine."Document Type",
                TempPurchLine."Document No.",
                TempPurchLine."Line No.",0,0D,
                TempPurchLine.Description,
                '',
                true);
            if TempPurchLine.HASLINKS then
              TempPurchLine.DELETELINKS;
          until TempPurchLine.NEXT = 0;

        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.DELETEALL;

        DeleteItemChargeAssgnt(PurchHeader);
        PurchCommentLine.DeleteComments("Document Type","No.");
        WarehouseRequest.DeleteRequest(DATABASE::"Purchase Line","Document Type","No.");
      end;
    END;

    LOCAL PROCEDURE FinalizePosting@155(VAR PurchHeader@1000 : Record "Purchase Header";VAR TempDropShptPostBuffer@1003 : TEMPORARY Record "Drop Shpt. Post. Buffer";EverythingInvoiced@1001 : Boolean);
    VAR
      TempPurchLine@1002 : TEMPORARY Record "Purchase Line";
      GenJnlPostPreview@1004 : Codeunit "Gen. Jnl.-Post Preview";
      ArchiveManagement@1005 : Codeunit ArchiveManagement;
    BEGIN
      with PurchHeader do begin
        if ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"]) and
           (not EverythingInvoiced)
        then begin
          MODIFY;
          InsertTrackingSpecification(PurchHeader);
          PostUpdateOrderLine(PurchHeader);
          UpdateAssocOrder(TempDropShptPostBuffer);
          UpdateWhseDocuments;
          WhsePurchRelease.Release(PurchHeader);
          UpdateItemChargeAssgnt;
        end else begin
          case "Document Type" of
            "Document Type"::Invoice:
              begin
                PostUpdateInvoiceLine;
                InsertTrackingSpecification(PurchHeader);
              end;
            "Document Type"::"Credit Memo":
              begin
                PostUpdateCreditMemoLine;
                InsertTrackingSpecification(PurchHeader);
              end;
            else begin
              ResetTempLines(TempPurchLine);
              TempPurchLine.SETFILTER("Prepayment %",'<>0');
              if TempPurchLine.FINDSET then
                repeat
                  DecrementPrepmtAmtInvLCY(
                    TempPurchLine,TempPurchLine."Prepmt. Amount Inv. (LCY)",TempPurchLine."Prepmt. VAT Amount Inv. (LCY)");
                until TempPurchLine.NEXT = 0;
            end;
          end;
          UpdateAfterPosting(PurchHeader);
          UpdateWhseDocuments;
          ArchiveManagement.AutoArchivePurchDocument(PurchHeader);
          ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
          if not PreviewMode then
            DeleteAfterPosting(PurchHeader);
        end;

        InsertValueEntryRelation;
      end;

      if PreviewMode then begin
        Window.CLOSE;
        GenJnlPostPreview.ThrowError;
      end;
      if not InvtPickPutaway then
        COMMIT;
      ClearPostBuffers;
      if GUIALLOWED then
        Window.CLOSE;

      OnAfterFinalizePosting(PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,ReturnShptHeader,GenJnlPostLine);
    END;

    LOCAL PROCEDURE FillInvoicePostBuffer@5804(PurchHeader@1012 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";PurchLineACY@1001 : Record "Purchase Line";VAR TempInvoicePostBuffer@1014 : TEMPORARY Record "Invoice Post. Buffer";VAR InvoicePostBuffer@1013 : Record "Invoice Post. Buffer");
    VAR
      GenPostingSetup@1007 : Record "General Posting Setup";
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
      AmtToDefer@1011 : Decimal;
      AmtToDeferACY@1010 : Decimal;
      TotalVATBase@1015 : Decimal;
      TotalVATBaseACY@1006 : Decimal;
      DeferralAccount@1009 : Code[20];
      PurchAccount@1008 : Code[20];
    BEGIN
      GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
      InvoicePostBuffer.PreparePurchase(PurchLine);
      InitAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,AmtToDefer,AmtToDeferACY,DeferralAccount);

      if PurchSetup."Discount Posting" in
         [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      then begin
        CalcInvoiceDiscountPosting(PurchHeader,PurchLine,PurchLineACY,InvoicePostBuffer);

        if PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" then
          InvoicePostBuffer.SetSalesTaxForPurchLine(PurchLine);

        if (InvoicePostBuffer.Amount <> 0) or (InvoicePostBuffer."Amount (ACY)" <> 0) then begin
          GenPostingSetup.TESTFIELD("Purch. Inv. Disc. Account");
          if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
            FillInvoicePostBufferFADiscount(
              TempInvoicePostBuffer,InvoicePostBuffer,GenPostingSetup,PurchLine."No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvoicePostBuffer.SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvoicePostBuffer.Type := InvoicePostBuffer.Type::"G/L Account";
            UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
            InvoicePostBuffer.Type := InvoicePostBuffer.Type::"Fixed Asset";
          end else begin
            InvoicePostBuffer.SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
          end;
        end;
      end;

      if PurchSetup."Discount Posting" in
         [PurchSetup."Discount Posting"::"Line Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      then begin
        CalcLineDiscountPosting(PurchHeader,PurchLine,PurchLineACY,InvoicePostBuffer);

        if PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" then
          InvoicePostBuffer.SetSalesTaxForPurchLine(PurchLine);

        if (InvoicePostBuffer.Amount <> 0) or (InvoicePostBuffer."Amount (ACY)" <> 0) then begin
          GenPostingSetup.TESTFIELD("Purch. Line Disc. Account");
          if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
            FillInvoicePostBufferFADiscount(
              TempInvoicePostBuffer,InvoicePostBuffer,GenPostingSetup,PurchLine."No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvoicePostBuffer.SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvoicePostBuffer.Type := InvoicePostBuffer.Type::"G/L Account";
            UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
            InvoicePostBuffer.Type := InvoicePostBuffer.Type::"Fixed Asset";
          end else begin
            InvoicePostBuffer.SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
          end;
        end;
      end;
      // Don't adjust VAT Base Amounts when Deferrals are included
      DeferralUtilities.AdjustTotalAmountForDeferrals(PurchLine."Deferral Code",
        AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY,TotalVATBase,TotalVATBaseACY);

      if PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Reverse Charge VAT" then begin
        if PurchLine."Deferral Code" <> '' then
          InvoicePostBuffer.SetAmounts(
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,PurchLine."VAT Difference",TotalVATBase,TotalVATBaseACY)
        else
          InvoicePostBuffer.SetAmountsNoVAT(TotalAmount,TotalAmountACY,PurchLine."VAT Difference")
      end else
        if (not PurchLine."Use Tax") or (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Sales Tax") then
          InvoicePostBuffer.SetAmounts(
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,PurchLine."VAT Difference",TotalVATBase,TotalVATBaseACY)
        else
          InvoicePostBuffer.SetAmountsNoVAT(TotalAmount,TotalAmountACY,PurchLine."VAT Difference");

      if PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" then
        InvoicePostBuffer.SetSalesTaxForPurchLine(PurchLine);

      if (PurchLine.Type = PurchLine.Type::"G/L Account") or (PurchLine.Type = PurchLine.Type::"Fixed Asset") then begin
        PurchAccount := PurchLine."No.";
        InvoicePostBuffer.SetAccount(
          DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
          TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY)
      end else
        if PurchLine.IsCreditDocType then begin
          PurchAccount := GenPostingSetup.GetPurchCrMemoAccount;
          InvoicePostBuffer.SetAccount(
            DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        end else begin
          PurchAccount := GenPostingSetup.GetPurchAccount;
          InvoicePostBuffer.SetAccount(
            DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
            TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        end;
      InvoicePostBuffer."Deferral Code" := PurchLine."Deferral Code";
      UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
      FillDeferralPostingBuffer(PurchHeader,PurchLine,InvoicePostBuffer,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
    END;

    LOCAL PROCEDURE FillInvoicePostBufferFADiscount@81(VAR TempInvoicePostBuffer@1007 : TEMPORARY Record "Invoice Post. Buffer";VAR InvoicePostBuffer@1000 : Record "Invoice Post. Buffer";GenPostingSetup@1002 : Record "General Posting Setup";AccountNo@1008 : Code[20];TotalVAT@1003 : Decimal;TotalVATACY@1004 : Decimal;TotalAmount@1005 : Decimal;TotalAmountACY@1006 : Decimal);
    VAR
      DeprBook@1001 : Record "Depreciation Book";
    BEGIN
      DeprBook.GET(InvoicePostBuffer."Depreciation Book Code");
      if DeprBook."Subtract Disc. in Purch. Inv." then begin
        GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
        InvoicePostBuffer.SetAccount(AccountNo,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
        InvoicePostBuffer.ReverseAmounts;
        InvoicePostBuffer.SetAccount(GenPostingSetup."Purch. FA Disc. Account",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        InvoicePostBuffer.Type := InvoicePostBuffer.Type::"G/L Account";
        UpdateInvoicePostBuffer(TempInvoicePostBuffer,InvoicePostBuffer);
        InvoicePostBuffer.ReverseAmounts;
      end;
    END;

    LOCAL PROCEDURE UpdateInvoicePostBuffer@5(VAR TempInvoicePostBuffer@1001 : TEMPORARY Record "Invoice Post. Buffer";InvoicePostBuffer@1002 : Record "Invoice Post. Buffer");
    BEGIN
      if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
        FALineNo := FALineNo + 1;
        InvoicePostBuffer."Fixed Asset Line No." := FALineNo;
      end;

      TempInvoicePostBuffer.Update(InvoicePostBuffer,InvDefLineNo,DeferralLineNo);
    END;

    LOCAL PROCEDURE InsertPrepmtAdjInvPostingBuf@79(PurchHeader@1003 : Record "Purchase Header";PrepmtPurchLine@1000 : Record "Purchase Line";VAR TempInvoicePostBuffer@1005 : TEMPORARY Record "Invoice Post. Buffer";InvoicePostBuffer@1006 : Record "Invoice Post. Buffer");
    VAR
      PurchPostPrepayments@1002 : Codeunit "Purchase-Post Prepayments";
      AdjAmount@1001 : Decimal;
    BEGIN
      with PrepmtPurchLine do
        if "Prepayment Line" then
          if "Prepmt. Amount Inv. (LCY)" <> 0 then begin
            AdjAmount := -"Prepmt. Amount Inv. (LCY)";
            TempInvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
              "No.",AdjAmount,PurchHeader."Currency Code" = '');
            TempInvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
              PurchPostPrepayments.GetCorrBalAccNo(PurchHeader,AdjAmount > 0),
              -AdjAmount,
              PurchHeader."Currency Code" = '');
          end else
            if ("Prepayment %" = 100) and ("Prepmt. VAT Amount Inv. (LCY)" <> 0) then
              TempInvoicePostBuffer.FillPrepmtAdjBuffer(TempInvoicePostBuffer,InvoicePostBuffer,
                PurchPostPrepayments.GetInvRoundingAccNo(PurchHeader."Vendor Posting Group"),
                "Prepmt. VAT Amount Inv. (LCY)",PurchHeader."Currency Code" = '');
    END;

    LOCAL PROCEDURE GetCurrency@17(CurrencyCode@1000 : Code[10]);
    BEGIN
      if CurrencyCode = '' then
        Currency.InitRoundingPrecision
      else begin
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    LOCAL PROCEDURE DivideAmount@8(PurchHeader@1004 : Record "Purchase Header";VAR PurchLine@1005 : Record "Purchase Line";QtyType@1000 : 'General,Invoicing,Shipping';PurchLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record "VAT Amount Line";VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record "VAT Amount Line");
    VAR
      OriginalDeferralAmount@1006 : Decimal;
    BEGIN
      if RoundingLineInserted and (RoundingLineNo = PurchLine."Line No.") then
        exit;
      with PurchLine do
        if (PurchLineQty = 0) or ("Direct Unit Cost" = 0) then begin
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        end else begin
          OriginalDeferralAmount := GetDeferralAmount;
          TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0);
          if "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" then
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          if not TempVATAmountLineRemainder.FIND then begin
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          end;
          "Line Amount" := GetLineAmountToHandle(PurchLineQty) + GetPrepmtDiffToLineAmount(PurchLine);
          if PurchLineQty <> Quantity then
            "Line Discount Amount" :=
              ROUND("Line Discount Amount" * PurchLineQty / Quantity,Currency."Amount Rounding Precision");

          if "Allow Invoice Disc." and (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) then
            if QtyType = QtyType::Invoicing then
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            else begin
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            end;

          if PurchHeader."Prices Including VAT" then begin
            if (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) or
               ("Line Amount" = 0)
            then begin
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            end else begin
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            end;
            if "Line Discount %" <> 100 then
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            else
              "Amount Including VAT" := 0;
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          end else
            if "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" then begin
              if "Line Discount %" <> 100 then
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              else
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            end else begin
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              if TempVATAmountLine."VAT Base" = 0 then
                TempVATAmountLineRemainder."VAT Amount" := 0
              else
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              if "Line Discount %" <> 100 then
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              else
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            end;

          TempVATAmountLineRemainder.MODIFY;
          if "Deferral Code" <> '' then
            CalcDeferralAmounts(PurchHeader,PurchLine,OriginalDeferralAmount);
        end;
    END;

    LOCAL PROCEDURE RoundAmount@9(PurchHeader@1003 : Record "Purchase Header";VAR PurchLine@1004 : Record "Purchase Line";PurchLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      NoVAT@1001 : Boolean;
    BEGIN
      with PurchLine do begin
        IncrAmount(PurchHeader,PurchLine,TotalPurchLine);
        Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",0.00001));
        Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",0.00001));
        Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",0.00001));
        Increment(TotalPurchLine.Quantity,PurchLineQty);
        if "Units per Parcel" > 0 then
          Increment(TotalPurchLine."Units per Parcel",ROUND(PurchLineQty / "Units per Parcel",1,'>'));

        xPurchLine := PurchLine;
        PurchLineACY := PurchLine;
        if PurchHeader."Currency Code" <> '' then begin
          if PurchHeader."Posting Date" = 0D then
            Usedate := WORKDATE
          else
            Usedate := PurchHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Amount Including VAT",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Amount Including VAT";
          if NoVAT then
            Amount := "Amount Including VAT"
          else
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine.Amount,PurchHeader."Currency Factor")) -
              TotalPurchLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Discount Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Inv. Discount Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."VAT Difference",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."VAT Difference";
        end;

        IncrAmount(PurchHeader,PurchLine,TotalPurchLineLCY);
        Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
      end;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
      with PurchLine do begin
        "Qty. to Receive" := -"Qty. to Receive";
        "Qty. to Receive (Base)" := -"Qty. to Receive (Base)";
        "Return Qty. to Ship" := -"Return Qty. to Ship";
        "Return Qty. to Ship (Base)" := -"Return Qty. to Ship (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
        "Salvage Value" := -"Salvage Value";
      end;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(PurchHeader@1003 : Record "Purchase Header";VAR PurchLine@1005 : Record "Purchase Line";UseTempData@1000 : Boolean;BiggestLineNo@1004 : Integer);
    VAR
      VendPostingGr@1002 : Record "Vendor Posting Group";
      TempPurchLineForCalc@1006 : TEMPORARY Record "Purchase Line";
      InvoiceRoundingAmount@1001 : Decimal;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalPurchLine."Amount Including VAT" -
          ROUND(
            TotalPurchLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      if InvoiceRoundingAmount <> 0 then begin
        VendPostingGr.GET(PurchHeader."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        with PurchLine do begin
          INIT;
          BiggestLineNo := BiggestLineNo + 10000;
          "System-Created Entry" := true;
          if UseTempData then begin
            "Line No." := 0;
            Type := Type::"G/L Account";
            TempPurchLineForCalc := PurchLine;
            TempPurchLineForCalc.VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
            PurchLine := TempPurchLineForCalc;
          end else begin
            "Line No." := BiggestLineNo;
            VALIDATE(Type,Type::"G/L Account");
            VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          end;
          VALIDATE(Quantity,1);
          if IsCreditDocType then
            VALIDATE("Return Qty. to Ship",Quantity)
          else
            VALIDATE("Qty. to Receive",Quantity);
          if PurchHeader."Prices Including VAT" then
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          else
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;
          LastLineRetrieved := false;
          RoundingLineInserted := true;
          RoundingLineNo := "Line No.";
        end;
      end;
    END;

    LOCAL PROCEDURE IncrAmount@13(PurchHeader@1001 : Record "Purchase Header";PurchLine@1002 : Record "Purchase Line";VAR TotalPurchLine@1000 : Record "Purchase Line");
    BEGIN
      with PurchLine do begin
        if PurchHeader."Prices Including VAT" or
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        then
          Increment(TotalPurchLine."Line Amount","Line Amount");
        Increment(TotalPurchLine.Amount,Amount);
        Increment(TotalPurchLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalPurchLine."VAT Difference","VAT Difference");
        Increment(TotalPurchLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalPurchLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalPurchLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalPurchLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalPurchLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalPurchLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      end;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    [External]
    PROCEDURE GetPurchLines@16(VAR PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line";QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldPurchLine@1003 : Record "Purchase Line";
      MergedPurchLines@1004 : TEMPORARY Record "Purchase Line";
    BEGIN
      if QtyType = QtyType::Invoicing then begin
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,false);
        MergePurchLines(PurchHeader,OldPurchLine,TempPrepmtPurchLine,MergedPurchLines);
        SumPurchLines2(PurchHeader,PurchLine,MergedPurchLines,QtyType,true);
      end else
        SumPurchLines2(PurchHeader,PurchLine,OldPurchLine,QtyType,true);
    END;

    [External]
    PROCEDURE SumPurchLines@15(VAR NewPurchHeader@1000 : Record "Purchase Header";QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1002 : Record "Purchase Line";VAR NewTotalPurchLineLCY@1003 : Record "Purchase Line";VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30]);
    VAR
      OldPurchLine@1006 : Record "Purchase Line";
    BEGIN
      SumPurchLinesTemp(
        NewPurchHeader,OldPurchLine,QtyType,NewTotalPurchLine,NewTotalPurchLineLCY,
        VATAmount,VATAmountText);
    END;

    [External]
    PROCEDURE SumPurchLinesTemp@24(VAR PurchHeader@1000 : Record "Purchase Header";VAR OldPurchLine@1001 : Record "Purchase Line";QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1003 : Record "Purchase Line";VAR NewTotalPurchLineLCY@1004 : Record "Purchase Line";VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    VAR
      PurchLine@1007 : Record "Purchase Line";
    BEGIN
      with PurchHeader do begin
        SumPurchLines2(PurchHeader,PurchLine,OldPurchLine,QtyType,false);
        VATAmount := TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount;
        if TotalPurchLine."VAT %" = 0 then
          VATAmountText := VATAmountTxt
        else
          VATAmountText := STRSUBSTNO(VATRateTxt,TotalPurchLine."VAT %");
        NewTotalPurchLine := TotalPurchLine;
        NewTotalPurchLineLCY := TotalPurchLineLCY;
      end;
    END;

    LOCAL PROCEDURE SumPurchLines2@11(PurchHeader@1008 : Record "Purchase Header";VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line";QtyType@1002 : 'General,Invoicing,Shipping';InsertPurchLine@1003 : Boolean);
    VAR
      PurchLine@1009 : Record "Purchase Line";
      TempVATAmountLine@1006 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineRemainder@1007 : TEMPORARY Record "VAT Amount Line";
      PurchLineQty@1004 : Decimal;
      BiggestLineNo@1005 : Integer;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldPurchLine.CalcVATAmountLines(QtyType,PurchHeader,OldPurchLine,TempVATAmountLine);
      with PurchHeader do begin
        GetGLSetup;
        PurchSetup.GET;
        GetCurrency("Currency Code");
        OldPurchLine.SETRANGE("Document Type","Document Type");
        OldPurchLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := false;
        if OldPurchLine.FINDSET then
          repeat
            if not RoundingLineInserted then
              PurchLine := OldPurchLine;
            case QtyType of
              QtyType::General:
                PurchLineQty := PurchLine.Quantity;
              QtyType::Invoicing:
                PurchLineQty := PurchLine."Qty. to Invoice";
              QtyType::Shipping:
                begin
                  if IsCreditDocType then
                    PurchLineQty := PurchLine."Return Qty. to Ship"
                  else
                    PurchLineQty := PurchLine."Qty. to Receive"
                end;
            end;
            DivideAmount(PurchHeader,PurchLine,QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            PurchLine.Quantity := PurchLineQty;
            if PurchLineQty <> 0 then begin
              if (PurchLine.Amount <> 0) and not RoundingLineInserted then
                if TotalPurchLine.Amount = 0 then
                  TotalPurchLine."VAT %" := PurchLine."VAT %"
                else
                  if TotalPurchLine."VAT %" <> PurchLine."VAT %" then
                    TotalPurchLine."VAT %" := 0;
              RoundAmount(PurchHeader,PurchLine,PurchLineQty);
              PurchLine := xPurchLine;
            end;
            if InsertPurchLine then begin
              NewPurchLine := PurchLine;
              NewPurchLine.INSERT;
            end;
            if RoundingLineInserted then
              LastLineRetrieved := true
            else begin
              BiggestLineNo := MAX(BiggestLineNo,OldPurchLine."Line No.");
              LastLineRetrieved := OldPurchLine.NEXT = 0;
              if LastLineRetrieved and PurchSetup."Invoice Rounding" then
                InvoiceRounding(PurchHeader,PurchLine,true,BiggestLineNo);
            end;
          until LastLineRetrieved;
      end;
    END;

    [External]
    PROCEDURE UpdateBlanketOrderLine@21(PurchLine@1000 : Record "Purchase Line";Receive@1001 : Boolean;Ship@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderPurchLine@1003 : Record "Purchase Line";
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      if (PurchLine."Blanket Order No." <> '') and (PurchLine."Blanket Order Line No." <> 0) and
         ((Receive and (PurchLine."Qty. to Receive" <> 0)) or
          (Ship and (PurchLine."Return Qty. to Ship" <> 0)) or
          (Invoice and (PurchLine."Qty. to Invoice" <> 0)))
      then
        if BlanketOrderPurchLine.GET(
             BlanketOrderPurchLine."Document Type"::"Blanket Order",PurchLine."Blanket Order No.",
             PurchLine."Blanket Order Line No.")
        then begin
          BlanketOrderPurchLine.TESTFIELD(Type,PurchLine.Type);
          BlanketOrderPurchLine.TESTFIELD("No.",PurchLine."No.");
          BlanketOrderPurchLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");

          ModifyLine := false;
          case PurchLine."Document Type" of
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice:
              Sign := 1;
            PurchLine."Document Type"::"Return Order",
            PurchLine."Document Type"::"Credit Memo":
              Sign := -1;
          end;
          if Receive and (PurchLine."Receipt No." = '') then begin
            if BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            then
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Qty. to Receive"
            else
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Receive",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Qty. to Receive (Base)";
            ModifyLine := true;
          end;
          if Ship and (PurchLine."Return Shipment No." = '') then begin
            if BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            then
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Return Qty. to Ship"
            else
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Return Qty. to Ship",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Return Qty. to Ship (Base)";
            ModifyLine := true;
          end;

          if Invoice then begin
            if BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            then
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" + Sign * PurchLine."Qty. to Invoice"
            else
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Invoice",0.00001);
            BlanketOrderPurchLine."Qty. Invoiced (Base)" :=
              BlanketOrderPurchLine."Qty. Invoiced (Base)" + Sign * PurchLine."Qty. to Invoice (Base)";
            ModifyLine := true;
          end;

          if ModifyLine then begin
            BlanketOrderPurchLine.InitOutstanding;

            if (BlanketOrderPurchLine.Quantity * BlanketOrderPurchLine."Quantity Received" < 0) or
               (ABS(BlanketOrderPurchLine.Quantity) < ABS(BlanketOrderPurchLine."Quantity Received"))
            then
              BlanketOrderPurchLine.FIELDERROR(
                "Quantity Received",
                STRSUBSTNO(
                  BlanketOrderQuantityGreaterThanErr,
                  BlanketOrderPurchLine.FIELDCAPTION(Quantity)));

            if (BlanketOrderPurchLine."Quantity (Base)" *
                BlanketOrderPurchLine."Qty. Received (Base)" < 0) or
               (ABS(BlanketOrderPurchLine."Quantity (Base)") <
                ABS(BlanketOrderPurchLine."Qty. Received (Base)"))
            then
              BlanketOrderPurchLine.FIELDERROR(
                "Qty. Received (Base)",
                STRSUBSTNO(
                  BlanketOrderQuantityGreaterThanErr,
                  BlanketOrderPurchLine.FIELDCAPTION("Quantity Received")));

            BlanketOrderPurchLine.CALCFIELDS("Reserved Qty. (Base)");
            if ABS(BlanketOrderPurchLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderPurchLine."Reserved Qty. (Base)")
            then
              BlanketOrderPurchLine.FIELDERROR(
                "Reserved Qty. (Base)",BlanketOrderQuantityReducedErr);

            BlanketOrderPurchLine."Qty. to Invoice" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Invoiced";
            BlanketOrderPurchLine."Qty. to Receive" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received";
            BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
            BlanketOrderPurchLine."Qty. to Receive (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";

            BlanketOrderPurchLine.MODIFY;
          end;
        end;
    END;

    LOCAL PROCEDURE UpdatePurchaseHeader@163(VendorLedgerEntry@1000 : Record "Vendor Ledger Entry");
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      case GenJnlLineDocType of
        GenJnlLine."Document Type"::Invoice:
          begin
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchInvHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchInvHeader.MODIFY;
          end;
        GenJnlLine."Document Type"::"Credit Memo":
          begin
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchCrMemoHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchCrMemoHeader.MODIFY;
          end;
      end;
    END;

    LOCAL PROCEDURE PostVendorEntry@68(PurchHeader@1006 : Record "Purchase Header";TotalPurchLine2@1005 : Record "Purchase Line";TotalPurchLineLCY2@1004 : Record "Purchase Line";DocType@1003 : Option;DocNo@1002 : Code[20];ExtDocNo@1001 : Code[35];SourceCode@1000 : Code[10]);
    VAR
      GenJnlLine@1007 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PurchHeader."Posting Description",
          PurchHeader."Shortcut Dimension 1 Code",PurchHeader."Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",PurchHeader."Reason Code");

        CopyDocumentFields(DocType,DocNo,ExtDocNo,SourceCode,'');
        "Account Type" := "Account Type"::Vendor;
        "Account No." := PurchHeader."Pay-to Vendor No.";
        CopyFromPurchHeader(PurchHeader);
        SetCurrencyFactor(PurchHeader."Currency Code",PurchHeader."Currency Factor");
        "System-Created Entry" := true;

        CopyFromPurchHeaderApplyTo(PurchHeader);
        CopyFromPurchHeaderPayment(PurchHeader);

        Amount := -TotalPurchLine2."Amount Including VAT";
        "Source Currency Amount" := -TotalPurchLine2."Amount Including VAT";
        "Amount (LCY)" := -TotalPurchLineLCY2."Amount Including VAT";
        "Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
        "Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";

        OnBeforePostVendorEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostBalancingEntry@149(PurchHeader@1000 : Record "Purchase Header";TotalPurchLine2@1006 : Record "Purchase Line";TotalPurchLineLCY2@1005 : Record "Purchase Line";DocType@1004 : Option;DocNo@1003 : Code[20];ExtDocNo@1002 : Code[35];SourceCode@1001 : Code[10]);
    VAR
      GenJnlLine@1007 : Record "Gen. Journal Line";
      VendLedgEntry@1008 : Record "Vendor Ledger Entry";
    BEGIN
      FindVendorLedgerEntry(DocType,DocNo,VendLedgEntry);

      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PurchHeader."Posting Description",
          PurchHeader."Shortcut Dimension 1 Code",PurchHeader."Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",PurchHeader."Reason Code");

        CopyDocumentFields(0,DocNo,ExtDocNo,SourceCode,'');
        "Account Type" := "Account Type"::Vendor;
        "Account No." := PurchHeader."Pay-to Vendor No.";
        CopyFromPurchHeader(PurchHeader);
        SetCurrencyFactor(PurchHeader."Currency Code",PurchHeader."Currency Factor");

        if PurchHeader.IsCreditDocType then
          "Document Type" := "Document Type"::Refund
        else
          "Document Type" := "Document Type"::Payment;

        SetApplyToDocNo(PurchHeader,GenJnlLine,DocType,DocNo);

        Amount := TotalPurchLine2."Amount Including VAT" + VendLedgEntry."Remaining Pmt. Disc. Possible";
        "Source Currency Amount" := Amount;
        VendLedgEntry.CALCFIELDS(Amount);
        if VendLedgEntry.Amount = 0 then
          "Amount (LCY)" := TotalPurchLineLCY2."Amount Including VAT"
        else
          "Amount (LCY)" :=
            TotalPurchLineLCY2."Amount Including VAT" +
            ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
        "Allow Zero-Amount Posting" := true;

        OnBeforePostBalancingEntry(GenJnlLine,PurchHeader,TotalPurchLine2,TotalPurchLineLCY2);
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE SetApplyToDocNo@25(PurchHeader@1000 : Record "Purchase Header";VAR GenJnlLine@1001 : Record "Gen. Journal Line";DocType@1002 : Option;DocNo@1003 : Code[20]);
    BEGIN
      with GenJnlLine do begin
        if PurchHeader."Bal. Account Type" = PurchHeader."Bal. Account Type"::"Bank Account" then
          "Bal. Account Type" := "Bal. Account Type"::"Bank Account";
        "Bal. Account No." := PurchHeader."Bal. Account No.";
        "Applies-to Doc. Type" := DocType;
        "Applies-to Doc. No." := DocNo;
      end;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@64(DocType@1000 : Option;DocNo@1001 : Code[20];VAR VendorLedgerEntry@1002 : Record "Vendor Ledger Entry");
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",DocType);
      VendorLedgerEntry.SETRANGE("Document No.",DocNo);
      VendorLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@52(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Integer;
    BEGIN
      exit(GenJnlPostLine.RunWithCheck(GenJnlLine));
    END;

    LOCAL PROCEDURE CheckPostRestrictions@148(PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      Vendor@1002 : Record Vendor;
    BEGIN
      if not PreviewMode then
        PurchaseHeader.OnCheckPurchasePostRestrictions;

      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,true);
      if PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." then begin
        Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
        Vendor.CheckBlockedVendOnDocs(Vendor,true);
      end;
    END;

    LOCAL PROCEDURE CheckDim@34(PurchHeader@1001 : Record "Purchase Header");
    BEGIN
      CheckDimCombHeader(PurchHeader);
      CheckDimValuePostingHeader(PurchHeader);
      CheckDimLines(PurchHeader);
    END;

    LOCAL PROCEDURE CheckFAPostingPossibility@372(PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
      PurchaseLineToFind@1002 : Record "Purchase Line";
      FADepreciationBook@1003 : Record "FA Depreciation Book";
      HasBookValue@1004 : Boolean;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::"Fixed Asset");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      if PurchaseLine.FINDSET then
        repeat
          PurchaseLineToFind.COPYFILTERS(PurchaseLine);
          PurchaseLineToFind.SETRANGE("No.",PurchaseLine."No.");
          PurchaseLineToFind.SETRANGE("Depr. until FA Posting Date",not PurchaseLine."Depr. until FA Posting Date");
          if not PurchaseLineToFind.ISEMPTY then
            ERROR(STRSUBSTNO(MixedDerpFAUntilPostingDateErr,PurchaseLine."No."));

          if PurchaseLine."Depr. until FA Posting Date" then begin
            PurchaseLineToFind.SETRANGE("Depr. until FA Posting Date",true);
            PurchaseLineToFind.SETFILTER("Line No.",'<>%1',PurchaseLine."Line No.");
            if not PurchaseLineToFind.ISEMPTY then begin
              HasBookValue := false;
              FADepreciationBook.SETRANGE("FA No.",PurchaseLine."No.");
              FADepreciationBook.FINDSET;
              repeat
                FADepreciationBook.CALCFIELDS("Book Value");
                HasBookValue := HasBookValue or (FADepreciationBook."Book Value" <> 0);
              until (FADepreciationBook.NEXT = 0) or HasBookValue;
              if not HasBookValue then
                ERROR(STRSUBSTNO(CannotPostSameMultipleFAWhenDeprBookValueZeroErr,PurchaseLine."No."));
            end;
          end;
        until PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimCombHeader@30(PurchHeader@1002 : Record "Purchase Header");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
    BEGIN
      with PurchHeader do
        if not DimMgt.CheckDimIDComb("Dimension Set ID") then
          ERROR(DimensionIsBlockedErr,"Document Type","No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimCombLine@49(PurchLine@1000 : Record "Purchase Line");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
    BEGIN
      with PurchLine do
        if not DimMgt.CheckDimIDComb("Dimension Set ID") then
          ERROR(LineDimensionBlockedErr,"Document Type","Document No.","Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimLines@168(PurchHeader@1002 : Record "Purchase Header");
    VAR
      TempPurchLine@1001 : TEMPORARY Record "Purchase Line";
    BEGIN
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            if (PurchHeader.Receive and ("Qty. to Receive" <> 0)) or
               (PurchHeader.Invoice and ("Qty. to Invoice" <> 0)) or
               (PurchHeader.Ship and ("Return Qty. to Ship" <> 0))
            then begin
              CheckDimCombLine(TempPurchLine);
              CheckDimValuePostingLine(TempPurchLine);
            end
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckDimValuePostingHeader@28(PurchHeader@1004 : Record "Purchase Header");
    VAR
      DimMgt@1001 : Codeunit DimensionManagement;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      with PurchHeader do begin
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := "Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := "Purchaser Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := "Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := "Responsibility Center";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") then
          ERROR(InvalidDimensionsErr,"Document Type","No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE CheckDimValuePostingLine@170(PurchLine@1000 : Record "Purchase Line");
    VAR
      DimMgt@1003 : Codeunit DimensionManagement;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1001 : ARRAY [10] OF Code[20];
    BEGIN
      with PurchLine do begin
        TableIDArr[1] := DimMgt.TypeToTableID3(Type);
        NumberArr[1] := "No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := "Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := "Work Center No.";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,"Dimension Set ID") then
          ERROR(LineInvalidDimensionsErr,"Document Type","Document No.","Line No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803(PurchHeader@1001 : Record "Purchase Header");
    VAR
      ItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchHeader."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchHeader."No.");
      if not ItemChargeAssgntPurch.ISEMPTY then
        ItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntPurch@1000 : Record "Item Charge Assignment (Purch)";
    BEGIN
      with TempItemChargeAssgntPurch do begin
        ClearItemChargeAssgntFilter;
        MARKEDONLY(true);
        if FINDSET then
          repeat
            ItemChargeAssgntPurch.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntPurch."Qty. Assigned" :=
              ItemChargeAssgntPurch."Qty. Assigned" + "Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdatePurchOrderChargeAssgnt@5814(PurchOrderInvLine@1000 : Record "Purchase Line";PurchOrderLine@1001 : Record "Purchase Line");
    VAR
      PurchOrderLine2@1002 : Record "Purchase Line";
      PurchOrderInvLine2@1003 : Record "Purchase Line";
      PurchRcptLine@1004 : Record "Purch. Rcpt. Line";
      ReturnShptLine@1005 : Record "Return Shipment Line";
    BEGIN
      with PurchOrderInvLine do begin
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntPurch.MARKEDONLY(true);
        if TempItemChargeAssgntPurch.FINDSET then
          repeat
            if TempItemChargeAssgntPurch."Applies-to Doc. Type" = "Document Type" then begin
              PurchOrderInvLine2.GET(
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
              if ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order) and
                  (PurchOrderInvLine2."Receipt No." = "Receipt No.")) or
                 ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order") and
                  (PurchOrderInvLine2."Return Shipment No." = "Return Shipment No."))
              then begin
                if PurchOrderLine."Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then begin
                  if not
                     PurchRcptLine.GET(PurchOrderInvLine2."Receipt No.",PurchOrderInvLine2."Receipt Line No.")
                  then
                    ERROR(ReceiptLinesDeletedErr);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::Order,
                    PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                end else begin
                  if not
                     ReturnShptLine.GET(PurchOrderInvLine2."Return Shipment No.",PurchOrderInvLine2."Return Shipment Line No.")
                  then
                    ERROR(ReturnShipmentLinesDeletedErr);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::"Return Order",
                    ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                end;
                UpdatePurchChargeAssgntLines(
                  PurchOrderLine,
                  PurchOrderLine2."Document Type",
                  PurchOrderLine2."Document No.",
                  PurchOrderLine2."Line No.",
                  TempItemChargeAssgntPurch."Qty. to Assign");
              end;
            end else
              UpdatePurchChargeAssgntLines(
                PurchOrderLine,
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.",
                TempItemChargeAssgntPurch."Qty. to Assign");
          until TempItemChargeAssgntPurch.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdatePurchChargeAssgntLines@5813(PurchOrderLine@1000 : Record "Purchase Line";ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtytoAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntPurch@1005 : Record "Item Charge Assignment (Purch)";
      TempItemChargeAssgntPurch2@1008 : Record "Item Charge Assignment (Purch)";
      LastLineNo@1006 : Integer;
      TotalToAssign@1007 : Decimal;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      if ItemChargeAssgntPurch.FINDFIRST then begin
        ItemChargeAssgntPurch."Qty. Assigned" :=
          ItemChargeAssgntPurch."Qty. Assigned" + QtytoAssign;
        ItemChargeAssgntPurch."Qty. to Assign" := 0;
        ItemChargeAssgntPurch."Amount to Assign" := 0;
        ItemChargeAssgntPurch.MODIFY;
      end else begin
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");

        TempItemChargeAssgntPurch2.SETRANGE("Document Type",TempItemChargeAssgntPurch."Document Type");
        TempItemChargeAssgntPurch2.SETRANGE("Document No.",TempItemChargeAssgntPurch."Document No.");
        TempItemChargeAssgntPurch2.SETRANGE("Document Line No.",TempItemChargeAssgntPurch."Document Line No.");
        TempItemChargeAssgntPurch2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntPurch."Qty. to Assign" +
          TempItemChargeAssgntPurch2."Qty. to Assign";

        if ItemChargeAssgntPurch.FINDLAST then
          LastLineNo := ItemChargeAssgntPurch."Line No.";

        if PurchOrderLine.Quantity < TotalToAssign then
          repeat
            TotalToAssign := TotalToAssign - ItemChargeAssgntPurch."Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          until (ItemChargeAssgntPurch.NEXT(-1) = 0) or
                (TotalToAssign = PurchOrderLine.Quantity);

        InsertAssocOrderCharge(
          PurchOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntPurch."Applies-to Doc. Line Amount");
      end;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@48(PurchOrderLine@1000 : Record "Purchase Line";ApplToDocType@1002 : Option;ApplToDocNo@1003 : Code[20];ApplToDocLineNo@1004 : Integer;LastLineNo@1007 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntPurch@1001 : Record "Item Charge Assignment (Purch)";
    BEGIN
      with NewItemChargeAssgntPurch do begin
        INIT;
        "Document Type" := PurchOrderLine."Document Type";
        "Document No." := PurchOrderLine."Document No.";
        "Document Line No." := PurchOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntPurch."Item Charge No.";
        "Item No." := TempItemChargeAssgntPurch."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntPurch."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntPurch.Description;
        "Unit Cost" := TempItemChargeAssgntPurch."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(PurchHeader@1000 : Record "Purchase Header");
    VAR
      TempPurchLine@1001 : TEMPORARY Record "Purchase Line";
      PurchLine@1002 : Record "Purchase Line";
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1102601000 : Decimal;
    BEGIN
      TempItemChargeAssgntPurch.RESET;
      TempItemChargeAssgntPurch.DELETEALL;

      // Check for max qty posting
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETRANGE(Type,Type::"Charge (Item)");
        if ISEMPTY then
          exit;

        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch.SETFILTER("Qty. to Assign",'<>0');
        if ItemChargeAssgntPurch.FINDSET then
          repeat
            TempItemChargeAssgntPurch.INIT;
            TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
            TempItemChargeAssgntPurch.INSERT;
          until ItemChargeAssgntPurch.NEXT = 0;

        SETFILTER("Qty. to Invoice",'<>0');
        if FINDSET then
          repeat
            TESTFIELD("Job No.",'');
            if PurchHeader.Invoice and
               ("Qty. to Receive" + "Return Qty. to Ship" <> 0) and
               ((PurchHeader.Ship or PurchHeader.Receive) or
                (ABS("Qty. to Invoice") >
                 ABS("Qty. Rcd. Not Invoiced" + "Qty. to Receive") +
                 ABS("Ret. Qty. Shpd Not Invd.(Base)" + "Return Qty. to Ship")))
            then
              TESTFIELD("Line Amount");

            if not PurchHeader.Receive then
              "Qty. to Receive" := 0;
            if not PurchHeader.Ship then
              "Return Qty. to Ship" := 0;
            if ABS("Qty. to Invoice") >
               ABS("Quantity Received" + "Qty. to Receive" +
                 "Return Qty. Shipped" + "Return Qty. to Ship" -
                 "Quantity Invoiced")
            then
              "Qty. to Invoice" :=
                "Quantity Received" + "Qty. to Receive" +
                "Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" -
                "Quantity Invoiced";

            CALCFIELDS("Qty. to Assign","Qty. Assigned");
            if ABS("Qty. to Assign" + "Qty. Assigned") >
               ABS("Qty. to Invoice" + "Quantity Invoiced")
            then
              ERROR(CannotAssignMoreErr,
                "Qty. to Invoice" + "Quantity Invoiced" - "Qty. Assigned",
                FIELDCAPTION("Document Type"),"Document Type",
                FIELDCAPTION("Document No."),"Document No.",
                FIELDCAPTION("Line No."),"Line No.");
            if Quantity = "Qty. to Invoice" + "Quantity Invoiced" then begin
              if "Qty. to Assign" <> 0 then
                if Quantity = "Quantity Invoiced" then begin
                  TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
                  if TempItemChargeAssgntPurch.FINDSET then
                    repeat
                      PurchLine.GET(
                        TempItemChargeAssgntPurch."Applies-to Doc. Type",
                        TempItemChargeAssgntPurch."Applies-to Doc. No.",
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                      if PurchLine.Quantity = PurchLine."Quantity Invoiced" then
                        ERROR(CannotAssignInvoicedErr,PurchLine.TABLECAPTION,
                          PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
                          PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                          PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
                    until TempItemChargeAssgntPurch.NEXT = 0;
                end;
              if Quantity <> "Qty. to Assign" + "Qty. Assigned" then
                AssignError := true;
            end;

            if ("Qty. to Assign" + "Qty. Assigned") < ("Qty. to Invoice" + "Quantity Invoiced") then
              ERROR(MustAssignItemChargeErr,"No.");

            // check if all ILEs exist
            QtyNeeded := "Qty. to Assign";
            TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
            if TempItemChargeAssgntPurch.FINDSET then
              repeat
                if (TempItemChargeAssgntPurch."Applies-to Doc. Type" <> "Document Type") or
                   (TempItemChargeAssgntPurch."Applies-to Doc. No." <> "Document No.")
                then
                  QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign"
                else begin
                  PurchLine.GET(
                    TempItemChargeAssgntPurch."Applies-to Doc. Type",
                    TempItemChargeAssgntPurch."Applies-to Doc. No.",
                    TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                  if ItemLedgerEntryExist(PurchLine,PurchHeader.Receive or PurchHeader.Ship) then
                    QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign";
                end;
              until TempItemChargeAssgntPurch.NEXT = 0;

            if QtyNeeded > 0 then
              ERROR(CannotInvoiceItemChargeErr,"No.");
          until NEXT = 0;

        // Check purchlines
        if AssignError then
          if PurchHeader."Document Type" in
             [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]
          then
            InvoiceEverything := true
          else begin
            RESET;
            SETFILTER(Type,'%1|%2',Type::Item,Type::"Charge (Item)");
            if FINDSET then
              repeat
                if PurchHeader.Ship or PurchHeader.Receive then
                  InvoiceEverything :=
                    Quantity = "Qty. to Invoice" + "Quantity Invoiced"
                else
                  InvoiceEverything :=
                    (Quantity = "Qty. to Invoice" + "Quantity Invoiced") and
                    ("Qty. to Invoice" =
                     "Qty. Rcd. Not Invoiced" + "Return Qty. Shipped Not Invd.");
              until (NEXT = 0) or (not InvoiceEverything);
          end;

        if InvoiceEverything and AssignError then
          ERROR(MustAssignErr);
      end;
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntPurch.MARKEDONLY(false);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(PurchHeader@1001 : Record "Purchase Header";VAR ItemChargePurchLine@1000 : Record "Purchase Line");
    VAR
      QtyReceived@1003 : Decimal;
      QtyReturnShipped@1004 : Decimal;
    BEGIN
      with TempItemChargeAssgntPurch do
        if (ItemChargePurchLine."Document Type" <> "Document Type") or
           (ItemChargePurchLine."Document No." <> "Document No.") or
           (ItemChargePurchLine."Line No." <> "Document Line No.")
        then begin
          ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
          if not PurchHeader.Receive then
            ItemChargePurchLine."Qty. to Receive" := 0;
          if not PurchHeader.Ship then
            ItemChargePurchLine."Return Qty. to Ship" := 0;

          if ItemChargePurchLine."Receipt No." = '' then
            QtyReceived := ItemChargePurchLine."Quantity Received"
          else
            QtyReceived := "Qty. to Assign";
          if ItemChargePurchLine."Return Shipment No." = '' then
            QtyReturnShipped := ItemChargePurchLine."Return Qty. Shipped"
          else
            QtyReturnShipped := "Qty. to Assign";

          if ABS(ItemChargePurchLine."Qty. to Invoice") >
             ABS(QtyReceived + ItemChargePurchLine."Qty. to Receive" +
               QtyReturnShipped + ItemChargePurchLine."Return Qty. to Ship" -
               ItemChargePurchLine."Quantity Invoiced")
          then
            ItemChargePurchLine."Qty. to Invoice" :=
              QtyReceived + ItemChargePurchLine."Qty. to Receive" +
              QtyReturnShipped + ItemChargePurchLine."Return Qty. to Ship" -
              ItemChargePurchLine."Quantity Invoiced";
        end;
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@5810(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      if ABS(QtyToHandle) > ABS(QtyToInvoice) then
        exit(QtyToHandle);

      exit(QtyToInvoice);
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR TempItemPurchLine@1000 : TEMPORARY Record "Purchase Line");
    VAR
      WhseValidateSourceLine@1003 : Codeunit "Whse. Validate Source Line";
      ShowError@1002 : Boolean;
    BEGIN
      with TempItemPurchLine do begin
        if "Prod. Order No." <> '' then
          exit;
        SETRANGE(Type,Type::Item);
        SETRANGE("Drop Shipment",false);
        if FINDSET then
          repeat
            GetLocation("Location Code");
            case "Document Type" of
              "Document Type"::Order:
                if ((Location."Require Receive" or Location."Require Put-away") and (Quantity >= 0)) or
                   ((Location."Require Shipment" or Location."Require Pick") and (Quantity < 0))
                then begin
                  if Location."Directed Put-away and Pick" then
                    ShowError := true
                  else
                    if WhseValidateSourceLine.WhseLinesExist(
                         DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,Quantity)
                    then
                      ShowError := true;
                end;
              "Document Type"::"Return Order":
                if ((Location."Require Receive" or Location."Require Put-away") and (Quantity < 0)) or
                   ((Location."Require Shipment" or Location."Require Pick") and (Quantity >= 0))
                then begin
                  if Location."Directed Put-away and Pick" then
                    ShowError := true
                  else
                    if WhseValidateSourceLine.WhseLinesExist(
                         DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,Quantity)
                    then
                      ShowError := true;
                end;
              "Document Type"::Invoice,"Document Type"::"Credit Memo":
                if Location."Directed Put-away and Pick" then
                  Location.TESTFIELD("Adjustment Bin Code");
            end;
            if ShowError then
              ERROR(
                WarehouseRequiredErr,
                FIELDCAPTION("Document Type"),"Document Type",
                FIELDCAPTION("Document No."),"Document No.",
                FIELDCAPTION("Line No."),"Line No.");
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record "Item Journal Line";PurchLine@1002 : Record "Purchase Line";VAR TempWhseJnlLine@1001 : TEMPORARY Record "Warehouse Journal Line");
    VAR
      WhseMgt@1003 : Codeunit "Whse. Management";
      WMSMgt@1004 : Codeunit "WMS Management";
    BEGIN
      with PurchLine do begin
        WMSMgt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,true);
        WMSMgt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,false);
        TempWhseJnlLine."Source Type" := DATABASE::"Purchase Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        TempWhseJnlLine."Source Code" := SrcCode;
        case "Document Type" of
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rcpt.";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Rcpt.";
        end;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      end;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307(PurchLine@1001 : Record "Purchase Line") : Boolean;
    VAR
      WhseSetup@1000 : Record "Warehouse Setup";
    BEGIN
      if (PurchLine.Type = PurchLine.Type::Item) and (not PurchLine."Drop Shipment") then begin
        if PurchLine."Location Code" = '' then begin
          WhseSetup.GET;
          if PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" then
            exit(WhseSetup."Require Pick");

          exit(WhseSetup."Require Receive");
        end;

        GetLocation(PurchLine."Location Code");
        if PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" then
          exit(Location."Require Pick");

        exit(Location."Require Receive");
      end;
      exit(false);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertRcptEntryRelation@38(VAR PurchRcptLine@1002 : Record "Purch. Rcpt. Line") : Integer;
    VAR
      ItemEntryRelation@1001 : Record "Item Entry Relation";
    BEGIN
      TempHandlingSpecification.CopySpecification(TempTrackingSpecificationInv);
      TempHandlingSpecification.RESET;
      if TempHandlingSpecification.FINDSET then begin
        repeat
          ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification);
          ItemEntryRelation.TransferFieldsPurchRcptLine(PurchRcptLine);
          ItemEntryRelation.INSERT;
        until TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        exit(0);
      end;
      exit(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnShptLine@1002 : Record "Return Shipment Line") : Integer;
    VAR
      ItemEntryRelation@1001 : Record "Item Entry Relation";
    BEGIN
      TempHandlingSpecification.CopySpecification(TempTrackingSpecificationInv);
      TempHandlingSpecification.RESET;
      if TempHandlingSpecification.FINDSET then begin
        repeat
          ItemEntryRelation.INIT;
          ItemEntryRelation.InitFromTrackingSpec(TempHandlingSpecification);
          ItemEntryRelation.TransferFieldsReturnShptLine(ReturnShptLine);
          ItemEntryRelation.INSERT;
        until TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        exit(0);
      end;
      exit(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(PurchHeader@1002 : Record "Purchase Header";VAR TempItemPurchLine@1019 : TEMPORARY Record "Purchase Line");
    VAR
      ReservationEntry@1001 : Record "Reservation Entry";
      Item@1016 : Record Item;
      ItemTrackingCode@1009 : Record "Item Tracking Code";
      ItemJnlLine@1006 : Record "Item Journal Line";
      CreateReservEntry@1004 : Codeunit "Create Reserv. Entry";
      ItemTrackingManagement@1015 : Codeunit "Item Tracking Management";
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      PurchLineQtyToHandle@1023 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      CheckPurchLine@1008 : Boolean;
    BEGIN
      // if a PurchaseLine is posted with ItemTracking then tracked quantity must be equal to posted quantity
      if not (PurchHeader."Document Type" in
              [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"])
      then
        exit;

      TrackingQtyToHandle := 0;

      with TempItemPurchLine do begin
        SETRANGE(Type,Type::Item);
        if PurchHeader.Receive then begin
          SETFILTER("Quantity Received",'<>%1',0);
          ErrorFieldCaption := FIELDCAPTION("Qty. to Receive");
        end else begin
          SETFILTER("Return Qty. Shipped",'<>%1',0);
          ErrorFieldCaption := FIELDCAPTION("Return Qty. to Ship");
        end;

        if FINDSET then begin
          ReservationEntry."Source Type" := DATABASE::"Purchase Line";
          ReservationEntry."Source Subtype" := PurchHeader."Document Type";
          SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
          repeat
            // Only Item where no SerialNo or LotNo is required
            Item.GET("No.");
            if Item."Item Tracking Code" <> '' then begin
              Inbound := (Quantity * SignFactor) > 0;
              ItemTrackingCode.Code := Item."Item Tracking Code";
              ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
                ItemJnlLine."Entry Type"::Purchase,Inbound,
                SNRequired,LotRequired,SNInfoRequired,LotInfoRequired);
              CheckPurchLine := not SNRequired and not LotRequired;
              if CheckPurchLine then
                CheckPurchLine := CheckTrackingExists(TempItemPurchLine);
            end else
              CheckPurchLine := false;

            TrackingQtyToHandle := 0;

            if CheckPurchLine then begin
              GetTrackingQuantities(TempItemPurchLine,TrackingQtyToHandle);
              TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
              if PurchHeader.Receive then
                PurchLineQtyToHandle := "Qty. to Receive (Base)"
              else
                PurchLineQtyToHandle := "Return Qty. to Ship (Base)";
              if TrackingQtyToHandle <> PurchLineQtyToHandle then
                ERROR(STRSUBSTNO(ItemTrackQuantityMismatchErr,ErrorFieldCaption));
            end;
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckTrackingExists@160(PurchLine@1000 : Record "Purchase Line") : Boolean;
    VAR
      TrackingSpecification@1004 : Record "Tracking Specification";
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      TrackingSpecification.SetSourceFilter(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",true);
      TrackingSpecification.SetSourceFilter2('',0);
      ReservEntry.SetSourceFilter(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",true);
      ReservEntry.SetSourceFilter2('',0);

      TrackingSpecification.SETRANGE(Correction,false);
      if not TrackingSpecification.ISEMPTY then
        exit(true);

      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      if not ReservEntry.ISEMPTY then
        exit(true);
      ReservEntry.SETRANGE("Serial No.");
      ReservEntry.SETFILTER("Lot No.",'<>%1','');
      if not ReservEntry.ISEMPTY then
        exit(true);
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(PurchLine@1000 : Record "Purchase Line";VAR TrackingQtyToHandle@1003 : Decimal);
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEntry.SetSourceFilter(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",true);
      ReservEntry.SetSourceFilter2('',0);
      if ReservEntry.FINDSET then
        repeat
          if ReservEntry.TrackingExists then
            TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
        until ReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@33(VAR TempInvoicingSpecification@1000 : TEMPORARY Record "Tracking Specification");
    BEGIN
      TempInvoicingSpecification.RESET;
      if TempInvoicingSpecification.FINDSET then begin
        repeat
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity actual Handled (Base)";
          TempInvoicingSpecification."Quantity actual Handled (Base)" := 0;
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          if not TempTrackingSpecification.INSERT then begin
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          end;
        until TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35(PurchHeader@1001 : Record "Purchase Header");
    BEGIN
      if not TempTrackingSpecification.ISEMPTY then begin
        TempTrackingSpecification.InsertSpecification;
        ReservePurchLine.UpdateItemTrackingAfterPosting(PurchHeader);
      end;
    END;

    LOCAL PROCEDURE CalcBaseQty@29(ItemNo@1002 : Code[20];UOMCode@1004 : Code[10];Qty@1000 : Decimal) : Decimal;
    VAR
      Item@1003 : Record Item;
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      Item.GET(ItemNo);
      exit(ROUND(Qty * UOMMgt.GetQtyPerUnitOfMeasure(Item,UOMCode),0.00001));
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record "Value Entry Relation";
    BEGIN
      TempValueEntryRelation.RESET;
      if TempValueEntryRelation.FINDSET then begin
        repeat
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        until TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE PostItemCharge@42(PurchHeader@1011 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line";ItemEntryNo@1004 : Integer;QuantityBase@1005 : Decimal;AmountToAssign@1006 : Decimal;QtyToAssign@1007 : Decimal;IndirectCostPct@1008 : Decimal);
    VAR
      DummyTrackingSpecification@1001 : Record "Tracking Specification";
      PurchLineToPost@1009 : Record "Purchase Line";
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      TotalChargeAmt@1003 : Decimal;
      TotalChargeAmtLCY@1010 : Decimal;
    BEGIN
      with TempItemChargeAssgntPurch do begin
        PurchLineToPost := PurchLine;
        PurchLineToPost."No." := "Item No.";
        PurchLineToPost."Line No." := "Document Line No.";
        PurchLineToPost."Appl.-to Item Entry" := ItemEntryNo;
        PurchLineToPost."Indirect Cost %" := IndirectCostPct;

        PurchLineToPost.Amount := AmountToAssign;

        if "Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"] then
          PurchLineToPost.Amount := -PurchLineToPost.Amount;

        if PurchLineToPost."Currency Code" <> '' then
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        else
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        TotalChargeAmt := TotalChargeAmt + PurchLineToPost.Amount;
        if PurchHeader."Currency Code" <> '' then
          PurchLineToPost.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt,PurchHeader."Currency Factor");

        PurchLineToPost.Amount := ROUND(PurchLineToPost.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        if PurchHeader."Currency Code" <> '' then
          TotalChargeAmtLCY := TotalChargeAmtLCY + PurchLineToPost.Amount;
        PurchLineToPost."Unit Cost (LCY)" :=
          ROUND(
            PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        PurchLineToPost."Inv. Discount Amount" := ROUND(
            PurchLine."Inv. Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");

        PurchLineToPost."Line Discount Amount" := ROUND(
            PurchLine."Line Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        PurchLineToPost."Line Amount" := ROUND(
            PurchLine."Line Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        UpdatePurchLineDimSetIDFromAppliedEntry(PurchLineToPost,PurchLine);
        PurchLine."Inv. Discount Amount" := PurchLine."Inv. Discount Amount" - PurchLineToPost."Inv. Discount Amount";
        PurchLine."Line Discount Amount" := PurchLine."Line Discount Amount" - PurchLineToPost."Line Discount Amount";
        PurchLine."Line Amount" := PurchLine."Line Amount" - PurchLineToPost."Line Amount";
        PurchLine.Quantity := PurchLine.Quantity - QtyToAssign;
        PostItemJnlLine(
          PurchHeader,PurchLineToPost,
          0,0,
          QuantityBase,QuantityBase,
          PurchLineToPost."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
      end;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@45(PurchLine3@1000 : Record "Purchase Line");
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      if TempHandlingSpecification.FINDSET then
        repeat
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Purchase Line";
          TempWhseSplitSpecification."Source Subtype" := PurchLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := PurchLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := PurchLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        until TempHandlingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record "Sales Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";PurchLine@1007 : Record "Purchase Line";QtyToBeShippedBase@1002 : Decimal;ApplySpecificItemTracking@1003 : Boolean);
    VAR
      ReserveSalesLine@1006 : Codeunit "Sales Line-Reserve";
      RemainingQuantity@1004 : Decimal;
      CheckApplFromItemEntry@1005 : Boolean;
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      if QtyToBeShippedBase = 0 then
        exit;

      if not ApplySpecificItemTracking then
        ReserveSalesLine.TransferSalesLineToItemJnlLine(
          SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,false)
      else begin
        TempTrackingSpecification.RESET;
        TempTrackingSpecification.SetSourceFilter(
          DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",false);
        TempTrackingSpecification.SetSourceFilter2('',0);
        if TempTrackingSpecification.ISEMPTY then
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,false)
        else begin
          ReserveSalesLine.SetApplySpecificItemTracking(true);
          ReserveSalesLine.SetOverruleItemTracking(true);
          TempTrackingSpecification.FINDSET;
          if TempTrackingSpecification."Quantity (Base)" / QtyToBeShippedBase < 0 then
            ERROR(ItemTrackingWrongSignErr);
          repeat
            ItemJnlLine.CopyTrackingFromSpec(TempTrackingSpecification);
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification."Item Ledger Entry No.";
            RemainingQuantity :=
              ReserveSalesLine.TransferSalesLineToItemJnlLine(
                SalesOrderLine,ItemJnlLine,TempTrackingSpecification."Quantity (Base)",CheckApplFromItemEntry,false);
            if RemainingQuantity <> 0 then
              ERROR(ItemTrackingMismatchErr);
          until TempTrackingSpecification.NEXT = 0;
          ItemJnlLine.ClearTracking;
          ItemJnlLine."Applies-to Entry" := 0;
        end;
      end;
    END;

    [External]
    PROCEDURE SetWhseRcptHeader@26(VAR WhseRcptHeader2@1000 : Record "Warehouse Receipt Header");
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    [External]
    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record "Warehouse Shipment Header");
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE GetNextPurchline@54(VAR PurchLine@1000 : Record "Purchase Line") : Boolean;
    BEGIN
      if not PurchaseLinesProcessed then
        if PurchLine.NEXT = 1 then
          exit(false);
      PurchaseLinesProcessed := true;
      if TempPrepmtPurchLine.FIND('-') then begin
        PurchLine := TempPrepmtPurchLine;
        TempPrepmtPurchLine.DELETE;
        exit(false);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CreatePrepmtLines@51(PurchHeader@1003 : Record "Purchase Header";VAR TempPrepmtPurchLine@1004 : Record "Purchase Line";CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record "G/L Account";
      TempPurchLine@1000 : TEMPORARY Record "Purchase Line";
      TempExtTextLine@1011 : TEMPORARY Record "Extended Text Line";
      GenPostingSetup@1005 : Record "General Posting Setup";
      TransferExtText@1012 : Codeunit "Transfer Extended Text";
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrepmtAmtToDeduct@1016 : Decimal;
    BEGIN
      GetGLSetup;
      with TempPurchLine do begin
        FillTempLines(PurchHeader);
        ResetTempLines(TempPurchLine);
        if not FINDLAST then
          exit;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        if FINDSET then begin
          if CompleteFunctionality and ("Document Type" = "Document Type"::Invoice) then
            TestGetRcptPPmtAmtToDeduct;
          repeat
            if CompleteFunctionality then
              if PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice then begin
                if not PurchHeader.Receive and ("Qty. to Invoice" = Quantity - "Quantity Invoiced") then
                  if "Qty. Rcd. Not Invoiced" < "Qty. to Invoice" then
                    VALIDATE("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                if "Prepayment %" <> 100 then
                  case true of
                    ("Prepmt Amt to Deduct" <> 0) and
                    (ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision") < "Prepmt Amt to Deduct"):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          CannotBeGreaterThanErr,
                          ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                    ("Prepmt. Amt. Inv." <> 0) and
                    (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                     ROUND(
                       ROUND(
                         ROUND("Direct Unit Cost" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),
                           Currency."Amount Rounding Precision") *
                         (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision") *
                       "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          CannotBeSmallerThanErr,
                          ROUND(
                            "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                            (1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision")));
                  end;
              end;
            if "Prepmt Amt to Deduct" <> 0 then begin
              if ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") or
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              then
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              GLAcc.GET(GenPostingSetup.GetPurchPrepmtAccount);
              TempLineFound := false;
              if PurchHeader."Compress Prepayment" then begin
                TempPrepmtPurchLine.SETRANGE("No.",GLAcc."No.");
                TempPrepmtPurchLine.SETRANGE("Job No.","Job No.");
                TempPrepmtPurchLine.SETRANGE("Dimension Set ID","Dimension Set ID");
                TempLineFound := TempPrepmtPurchLine.FINDFIRST;
              end;
              if TempLineFound then begin
                PrepmtAmtToDeduct :=
                  TempPrepmtPurchLine."Prepmt Amt to Deduct" +
                  InsertedPrepmtVATBaseToDeduct(
                    PurchHeader,TempPurchLine,TempPrepmtPurchLine."Line No.",TempPrepmtPurchLine."Direct Unit Cost");
                VATDifference := TempPrepmtPurchLine."VAT Difference";
                TempPrepmtPurchLine.VALIDATE(
                  "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                if "Prepayment %" < TempPrepmtPurchLine."Prepayment %" then
                  TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                TempPrepmtPurchLine.MODIFY;
              end else begin
                TempPrepmtPurchLine.INIT;
                TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
                TempPrepmtPurchLine."Document No." := PurchHeader."No.";
                TempPrepmtPurchLine."Line No." := 0;
                TempPrepmtPurchLine."System-Created Entry" := true;
                if CompleteFunctionality then
                  TempPrepmtPurchLine.VALIDATE(Type,TempPrepmtPurchLine.Type::"G/L Account")
                else
                  TempPrepmtPurchLine.Type := TempPrepmtPurchLine.Type::"G/L Account";
                TempPrepmtPurchLine.VALIDATE("No.",GenPostingSetup."Purch. Prepayments Account");
                TempPrepmtPurchLine.VALIDATE(Quantity,-1);
                TempPrepmtPurchLine."Qty. to Receive" := TempPrepmtPurchLine.Quantity;
                TempPrepmtPurchLine."Qty. to Invoice" := TempPrepmtPurchLine.Quantity;
                PrepmtAmtToDeduct := InsertedPrepmtVATBaseToDeduct(PurchHeader,TempPurchLine,NextLineNo,0);
                TempPrepmtPurchLine.VALIDATE("Direct Unit Cost","Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                TempPrepmtPurchLine."Prepayment Line" := true;
                TempPrepmtPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                TempPrepmtPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                TempPrepmtPurchLine."Dimension Set ID" := "Dimension Set ID";
                TempPrepmtPurchLine."Job No." := "Job No.";
                TempPrepmtPurchLine."Job Task No." := "Job Task No.";
                TempPrepmtPurchLine."Job Line Type" := "Job Line Type";
                TempPrepmtPurchLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                TempPrepmtPurchLine.INSERT;

                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
                  PurchHeader."Document Date",PurchHeader."Language Code",TempExtTextLine);
                if TempExtTextLine.FIND('-') then
                  repeat
                    TempPrepmtPurchLine.INIT;
                    TempPrepmtPurchLine.Description := TempExtTextLine.Text;
                    TempPrepmtPurchLine."System-Created Entry" := true;
                    TempPrepmtPurchLine."Prepayment Line" := true;
                    TempPrepmtPurchLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtPurchLine.INSERT;
                  until TempExtTextLine.NEXT = 0;
              end;
            end;
          until NEXT = 0
        end;
      end;
      DividePrepmtAmountLCY(TempPrepmtPurchLine,PurchHeader);
    END;

    LOCAL PROCEDURE InsertedPrepmtVATBaseToDeduct@82(PurchHeader@1004 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";PrepmtLineNo@1001 : Integer;TotalPrepmtAmtToDeduct@1002 : Decimal) : Decimal;
    VAR
      PrepmtVATBaseToDeduct@1003 : Decimal;
    BEGIN
      with PurchLine do begin
        if PurchHeader."Prices Including VAT" then
          PrepmtVATBaseToDeduct :=
            ROUND(
              (TotalPrepmtAmtToDeduct + "Prepmt Amt to Deduct") / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision") -
            ROUND(
              TotalPrepmtAmtToDeduct / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision")
        else
          PrepmtVATBaseToDeduct := "Prepmt Amt to Deduct";
      end;
      with TempPrepmtDeductLCYPurchLine do begin
        TempPrepmtDeductLCYPurchLine := PurchLine;
        if "Document Type" = "Document Type"::Order then
          "Qty. to Invoice" := GetQtyToInvoice(PurchLine,PurchHeader.Receive)
        else
          GetLineDataFromOrder(TempPrepmtDeductLCYPurchLine);
        CalcPrepaymentToDeduct;
        "Line Amount" := GetLineAmountToHandle("Qty. to Invoice");
        "Attached to Line No." := PrepmtLineNo;
        "VAT Base Amount" := PrepmtVATBaseToDeduct;
        INSERT;
      end;
      exit(PrepmtVATBaseToDeduct);
    END;

    LOCAL PROCEDURE DividePrepmtAmountLCY@83(VAR PrepmtPurchLine@1000 : Record "Purchase Line";PurchHeader@1006 : Record "Purchase Header");
    VAR
      CurrExchRate@1001 : Record "Currency Exchange Rate";
      ActualCurrencyFactor@1002 : Decimal;
    BEGIN
      with PrepmtPurchLine do begin
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            if PurchHeader."Currency Code" <> '' then
              ActualCurrencyFactor :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    PurchHeader."Posting Date",
                    PurchHeader."Currency Code",
                    "Prepmt Amt to Deduct",
                    PurchHeader."Currency Factor")) /
                "Prepmt Amt to Deduct"
            else
              ActualCurrencyFactor := 1;

            UpdatePrepmtAmountInvBuf("Line No.",ActualCurrencyFactor);
          until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmountInvBuf@78(PrepmtSalesLineNo@1000 : Integer;CurrencyFactor@1004 : Decimal);
    VAR
      PrepmtAmtRemainder@1002 : Decimal;
    BEGIN
      with TempPrepmtDeductLCYPurchLine do begin
        RESET;
        SETRANGE("Attached to Line No.",PrepmtSalesLineNo);
        if FINDSET(true) then
          repeat
            "Prepmt. Amount Inv. (LCY)" :=
              CalcRoundedAmount(CurrencyFactor * "VAT Base Amount",PrepmtAmtRemainder);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmountLCY@84(PurchHeader@1008 : Record "Purchase Header";VAR PrepmtPurchLine@1000 : Record "Purchase Line");
    VAR
      PurchLine@1005 : Record "Purchase Line";
      PurchInvoiceLine@1013 : Record "Purchase Line";
      DeductionFactor@1001 : Decimal;
      PrepmtVATPart@1006 : Decimal;
      PrepmtVATAmtRemainder@1011 : Decimal;
      TotalRoundingAmount@1002 : ARRAY [2] OF Decimal;
      TotalPrepmtAmount@1003 : ARRAY [2] OF Decimal;
      FinalInvoice@1004 : Boolean;
      PricesInclVATRoundingAmount@1007 : ARRAY [2] OF Decimal;
    BEGIN
      if PrepmtPurchLine."Prepayment Line" then begin
        PrepmtVATPart :=
          (PrepmtPurchLine."Amount Including VAT" - PrepmtPurchLine.Amount) / PrepmtPurchLine."Direct Unit Cost";

        with TempPrepmtDeductLCYPurchLine do begin
          RESET;
          SETRANGE("Attached to Line No.",PrepmtPurchLine."Line No.");
          if FINDSET(true) then begin
            FinalInvoice := IsFinalInvoice;
            repeat
              PurchLine := TempPrepmtDeductLCYPurchLine;
              PurchLine.FIND;
              if "Document Type" = "Document Type"::Invoice then begin
                PurchInvoiceLine := PurchLine;
                GetPurchOrderLine(PurchLine,PurchInvoiceLine);
                PurchLine."Qty. to Invoice" := PurchInvoiceLine."Qty. to Invoice";
              end;
              if PurchLine."Qty. to Invoice" <> "Qty. to Invoice" then
                PurchLine."Prepmt Amt to Deduct" := CalcPrepmtAmtToDeduct(PurchLine,PurchHeader.Receive);
              DeductionFactor :=
                PurchLine."Prepmt Amt to Deduct" /
                (PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted");

              "Prepmt. VAT Amount Inv. (LCY)" :=
                -CalcRoundedAmount(PurchLine."Prepmt Amt to Deduct" * PrepmtVATPart,PrepmtVATAmtRemainder);
              if ("Prepayment %" <> 100) or IsFinalInvoice or ("Currency Code" <> '') then
                CalcPrepmtRoundingAmounts(TempPrepmtDeductLCYPurchLine,PurchLine,DeductionFactor,TotalRoundingAmount);
              MODIFY;

              if PurchHeader."Prices Including VAT" then
                if (("Prepayment %" <> 100) or IsFinalInvoice) and (DeductionFactor = 1) then begin
                  PricesInclVATRoundingAmount[1] := TotalRoundingAmount[1];
                  PricesInclVATRoundingAmount[2] := TotalRoundingAmount[2];
                end;

              if "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" then
                TotalPrepmtAmount[1] += "Prepmt. Amount Inv. (LCY)";
              TotalPrepmtAmount[2] += "Prepmt. VAT Amount Inv. (LCY)";
              FinalInvoice := FinalInvoice and IsFinalInvoice;
            until NEXT = 0;
          end;
        end;

        UpdatePrepmtPurchLineWithRounding(
          PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,
          FinalInvoice,PricesInclVATRoundingAmount);
      end;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtToDeduct@53(PurchLine@1000 : Record "Purchase Line";Receive@1001 : Boolean) : Decimal;
    BEGIN
      with PurchLine do begin
        "Qty. to Invoice" := GetQtyToInvoice(PurchLine,Receive);
        CalcPrepaymentToDeduct;
        exit("Prepmt Amt to Deduct");
      end;
    END;

    LOCAL PROCEDURE GetQtyToInvoice@94(PurchLine@1000 : Record "Purchase Line";Receive@1002 : Boolean) : Decimal;
    VAR
      AllowedQtyToInvoice@1001 : Decimal;
    BEGIN
      with PurchLine do begin
        AllowedQtyToInvoice := "Qty. Rcd. Not Invoiced";
        if Receive then
          AllowedQtyToInvoice := AllowedQtyToInvoice + "Qty. to Receive";
        if "Qty. to Invoice" > AllowedQtyToInvoice then
          exit(AllowedQtyToInvoice);
        exit("Qty. to Invoice");
      end;
    END;

    LOCAL PROCEDURE GetLineDataFromOrder@95(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      PurchRcptLine@1001 : Record "Purch. Rcpt. Line";
      PurchOrderLine@1002 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        PurchOrderLine.GET("Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

        Quantity := PurchOrderLine.Quantity;
        "Qty. Rcd. Not Invoiced" := PurchOrderLine."Qty. Rcd. Not Invoiced";
        "Quantity Invoiced" := PurchOrderLine."Quantity Invoiced";
        "Prepmt Amt Deducted" := PurchOrderLine."Prepmt Amt Deducted";
        "Prepmt. Amt. Inv." := PurchOrderLine."Prepmt. Amt. Inv.";
        "Line Discount Amount" := PurchOrderLine."Line Discount Amount";
      end;
    END;

    LOCAL PROCEDURE CalcPrepmtRoundingAmounts@58(VAR PrepmtPurchLineBuf@1000 : Record "Purchase Line";PurchLine@1003 : Record "Purchase Line";DeductionFactor@1001 : Decimal;VAR TotalRoundingAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      with PrepmtPurchLineBuf do begin
        if "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" then begin
          RoundingAmount[1] :=
            "Prepmt. Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. Amount Inv. (LCY)");
          "Prepmt. Amount Inv. (LCY)" := "Prepmt. Amount Inv. (LCY)" - RoundingAmount[1];
          TotalRoundingAmount[1] += RoundingAmount[1];
        end;
        RoundingAmount[2] :=
          "Prepmt. VAT Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. VAT Amount Inv. (LCY)");
        "Prepmt. VAT Amount Inv. (LCY)" := "Prepmt. VAT Amount Inv. (LCY)" - RoundingAmount[2];
        TotalRoundingAmount[2] += RoundingAmount[2];
      end;
    END;

    LOCAL PROCEDURE UpdatePrepmtPurchLineWithRounding@89(VAR PrepmtPurchLine@1002 : Record "Purchase Line";TotalRoundingAmount@1001 : ARRAY [2] OF Decimal;TotalPrepmtAmount@1000 : ARRAY [2] OF Decimal;FinalInvoice@1005 : Boolean;PricesInclVATRoundingAmount@1006 : ARRAY [2] OF Decimal);
    VAR
      AdjustAmount@1008 : Boolean;
      NewAmountIncludingVAT@1003 : Decimal;
      Prepmt100PctVATRoundingAmt@1004 : Decimal;
      AmountRoundingPrecision@1007 : Decimal;
    BEGIN
      with PrepmtPurchLine do begin
        NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
        if "Prepayment %" = 100 then
          TotalRoundingAmount[1] -= "Amount Including VAT" + NewAmountIncludingVAT;
        AmountRoundingPrecision :=
          GetAmountRoundingPrecisionInLCY("Document Type","Document No.","Currency Code");

        if (ABS(TotalRoundingAmount[1]) <= AmountRoundingPrecision) and
           (ABS(TotalRoundingAmount[2]) <= AmountRoundingPrecision)
        then begin
          if "Prepayment %" = 100 then
            Prepmt100PctVATRoundingAmt := TotalRoundingAmount[1];
          TotalRoundingAmount[1] := 0;
        end;
        "Prepmt. Amount Inv. (LCY)" := -TotalRoundingAmount[1];
        Amount := -(TotalPrepmtAmount[1] + TotalRoundingAmount[1]);

        if (PricesInclVATRoundingAmount[1] <> 0) and (TotalRoundingAmount[1] = 0) then begin
          if ("Prepayment %" = 100) and FinalInvoice and
             (Amount - TotalPrepmtAmount[2] = "Amount Including VAT")
          then
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[1] := 0;
        end;

        if ((TotalRoundingAmount[2] <> 0) or FinalInvoice) and (TotalRoundingAmount[1] = 0) then begin
          if ("Prepayment %" = 100) and ("Prepmt. Amount Inv. (LCY)" = 0) then
            Prepmt100PctVATRoundingAmt += TotalRoundingAmount[2];
          TotalRoundingAmount[2] := 0;
        end;

        if (PricesInclVATRoundingAmount[2] <> 0) and (TotalRoundingAmount[2] = 0) then begin
          if ABS(Prepmt100PctVATRoundingAmt) <= AmountRoundingPrecision then
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[2] := 0;
        end;

        "Prepmt. VAT Amount Inv. (LCY)" := -(TotalRoundingAmount[2] + Prepmt100PctVATRoundingAmt);
        NewAmountIncludingVAT := Amount - (TotalPrepmtAmount[2] + TotalRoundingAmount[2]);
        if (PricesInclVATRoundingAmount[1] = 0) and (PricesInclVATRoundingAmount[2] = 0) or
           ("Currency Code" <> '') and FinalInvoice
        then
          Increment(
            TotalPurchLineLCY."Amount Including VAT",
            -("Amount Including VAT" - NewAmountIncludingVAT + Prepmt100PctVATRoundingAmt));
        if "Currency Code" = '' then
          TotalPurchLine."Amount Including VAT" := TotalPurchLineLCY."Amount Including VAT";
        "Amount Including VAT" := NewAmountIncludingVAT;

        if FinalInvoice then
          AdjustAmount :=
            (TotalPurchLine.Amount = 0) and (TotalPurchLine."Amount Including VAT" <> 0) and
            (ABS(TotalPurchLine."Amount Including VAT") <= Currency."Amount Rounding Precision")
        else
          AdjustAmount := (TotalPurchLineLCY.Amount < 0) and (TotalPurchLineLCY."Amount Including VAT" < 0);
        if AdjustAmount then begin
          "Amount Including VAT" -= TotalPurchLineLCY."Amount Including VAT";
          TotalPurchLine."Amount Including VAT" := 0;
          TotalPurchLineLCY."Amount Including VAT" := 0;
        end;
      end;
    END;

    LOCAL PROCEDURE CalcRoundedAmount@91(Amount@1000 : Decimal;VAR Remainder@1001 : Decimal) : Decimal;
    VAR
      AmountRnded@1002 : Decimal;
    BEGIN
      Amount := Amount + Remainder;
      AmountRnded := ROUND(Amount,GLSetup."Amount Rounding Precision");
      Remainder := Amount - AmountRnded;
      exit(AmountRnded);
    END;

    LOCAL PROCEDURE GetPurchOrderLine@85(VAR PurchOrderLine@1000 : Record "Purchase Line";PurchLine@1001 : Record "Purchase Line");
    VAR
      PurchRcptLine@1002 : Record "Purch. Rcpt. Line";
    BEGIN
      PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
      PurchOrderLine."Prepmt Amt to Deduct" := PurchLine."Prepmt Amt to Deduct";
    END;

    LOCAL PROCEDURE DecrementPrepmtAmtInvLCY@86(PurchLine@1000 : Record "Purchase Line";VAR PrepmtAmountInvLCY@1001 : Decimal;VAR PrepmtVATAmountInvLCY@1002 : Decimal);
    BEGIN
      TempPrepmtDeductLCYPurchLine.RESET;
      TempPrepmtDeductLCYPurchLine := PurchLine;
      if TempPrepmtDeductLCYPurchLine.FIND then begin
        PrepmtAmountInvLCY := PrepmtAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
        PrepmtVATAmountInvLCY := PrepmtVATAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. VAT Amount Inv. (LCY)";
      end;
    END;

    LOCAL PROCEDURE AdjustFinalInvWith100PctPrepmt@97(VAR CombinedPurchLine@1000 : Record "Purchase Line");
    VAR
      DiffToLineDiscAmt@1001 : Decimal;
    BEGIN
      with TempPrepmtDeductLCYPurchLine do begin
        RESET;
        SETRANGE("Prepayment %",100);
        if FINDSET(true) then
          repeat
            if IsFinalInvoice then begin
              DiffToLineDiscAmt := "Prepmt Amt to Deduct" - "Line Amount";
              if "Document Type" = "Document Type"::Order then
                DiffToLineDiscAmt := DiffToLineDiscAmt * Quantity / "Qty. to Invoice";
              if DiffToLineDiscAmt <> 0 then begin
                CombinedPurchLine.GET("Document Type","Document No.","Line No.");
                CombinedPurchLine."Line Discount Amount" -= DiffToLineDiscAmt;
                CombinedPurchLine.MODIFY;

                "Line Discount Amount" := CombinedPurchLine."Line Discount Amount";
                MODIFY;
              end;
            end;
          until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE GetPrepmtDiffToLineAmount@98(PurchLine@1000 : Record "Purchase Line") : Decimal;
    BEGIN
      with TempPrepmtDeductLCYPurchLine do
        if PurchLine."Prepayment %" = 100 then
          if GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") then
            exit("Prepmt Amt to Deduct" - "Line Amount");
      exit(0);
    END;

    LOCAL PROCEDURE MergePurchLines@50(PurchHeader@1000000004 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line";VAR PurchLine2@1000000002 : Record "Purchase Line";VAR MergedPurchLine@1000000003 : Record "Purchase Line");
    BEGIN
      with PurchLine do begin
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        if FIND('-') then
          repeat
            MergedPurchLine := PurchLine;
            MergedPurchLine.INSERT;
          until NEXT = 0;
      end;
      with PurchLine2 do begin
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        if FIND('-') then
          repeat
            MergedPurchLine := PurchLine2;
            MergedPurchLine.INSERT;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(PurchHeader@1007 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";VAR ICGenJnlLineNo@1006 : Integer);
    VAR
      ICGLAccount@1001 : Record "IC G/L Account";
      Cust@1002 : Record Customer;
      Currency@1003 : Record Currency;
      ICPartner@1004 : Record "IC Partner";
      CurrExchRate@1005 : Record "Currency Exchange Rate";
      GenJnlLine@1008 : Record "Gen. Journal Line";
    BEGIN
      PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
      PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
      PurchLine.TESTFIELD("IC Partner Ref. Type",PurchLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(PurchLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;

      with TempICGenJnlLine do begin
        InitNewLine(PurchHeader."Posting Date",PurchHeader."Document Date",PurchHeader."Posting Description",
          PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code",PurchLine."Dimension Set ID",
          PurchHeader."Reason Code");
        "Line No." := ICGenJnlLineNo;

        CopyDocumentFields(GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PurchHeader."Posting No. Series");

        VALIDATE("Account Type","Account Type"::"IC Partner");
        VALIDATE("Account No.",PurchLine."IC Partner Code");
        "Source Currency Code" := PurchHeader."Currency Code";
        "Source Currency Amount" := Amount;
        Correction := PurchHeader.Correction;
        "Country/Region Code" := PurchHeader."VAT Country/Region Code";
        "Source Type" := GenJnlLine."Source Type"::Vendor;
        "Source No." := PurchHeader."Pay-to Vendor No.";
        "Source Line No." := PurchLine."Line No.";
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",PurchLine."No.");

        Cust.SETRANGE("IC Partner Code",PurchLine."IC Partner Code");
        if Cust.FINDFIRST then begin
          VALIDATE("Bal. Gen. Bus. Posting Group",Cust."Gen. Bus. Posting Group");
          VALIDATE("Bal. VAT Bus. Posting Group",Cust."VAT Bus. Posting Group");
        end;
        VALIDATE("Bal. VAT Prod. Posting Group",PurchLine."VAT Prod. Posting Group");
        "IC Partner Code" := PurchLine."IC Partner Code";
        "IC Partner G/L Acc. No." := PurchLine."IC Partner Reference";
        "IC Direction" := "IC Direction"::Outgoing;
        ICPartner.GET(PurchLine."IC Partner Code");
        if ICPartner."Cost Distribution in LCY" and (PurchLine."Currency Code" <> '') then begin
          "Currency Code" := '';
          "Currency Factor" := 0;
          Currency.GET(PurchLine."Currency Code");
          if PurchHeader.IsCreditDocType then
            Amount :=
              -ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchLine."Currency Code",
                  PurchLine.Amount,PurchHeader."Currency Factor"))
          else
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchLine."Currency Code",
                  PurchLine.Amount,PurchHeader."Currency Factor"));
        end else begin
          Currency.InitRoundingPrecision;
          "Currency Code" := PurchHeader."Currency Code";
          "Currency Factor" := PurchHeader."Currency Factor";
          if PurchHeader.IsCreditDocType then
            Amount := -PurchLine.Amount
          else
            Amount := PurchLine.Amount;
        end;
        if "Bal. VAT %" <> 0 then
          Amount := ROUND(Amount * (1 + "Bal. VAT %" / 100),Currency."Amount Rounding Precision");
        VALIDATE(Amount);
        INSERT;
      end;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInboxOutboxMgt@1001 : Codeunit ICInboxOutboxMgt;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      if TempICGenJnlLine.FIND('-') then
        repeat
          ICTransactionNo := ICInboxOutboxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,false);
          ICInboxOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine);
          if TempICGenJnlLine.Amount <> 0 then
            GenJnlPostLine.RunWithCheck(TempICGenJnlLine);
        until TempICGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGetRcptPPmtAmtToDeduct@57();
    VAR
      TempPurchLine@1007 : TEMPORARY Record "Purchase Line";
      TempRcvdPurchLine@1005 : TEMPORARY Record "Purchase Line";
      TempTotalPurchLine@1004 : TEMPORARY Record "Purchase Line";
      TempPurchRcptLine@1003 : TEMPORARY Record "Purch. Rcpt. Line";
      PurchRcptLine@1000 : Record "Purch. Rcpt. Line";
      MaxAmtToDeduct@1002 : Decimal;
    BEGIN
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        SETFILTER("Receipt No.",'<>%1','');
        SETFILTER("Prepmt Amt to Deduct",'<>0');
        if ISEMPTY then
          exit;

        SETRANGE("Prepmt Amt to Deduct");
        if FINDSET then
          repeat
            if PurchRcptLine.GET("Receipt No.","Receipt Line No.") then begin
              TempRcvdPurchLine := TempPurchLine;
              TempRcvdPurchLine.INSERT;
              TempPurchRcptLine := PurchRcptLine;
              if TempPurchRcptLine.INSERT then;

              if not TempTotalPurchLine.GET("Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.")
              then begin
                TempTotalPurchLine.INIT;
                TempTotalPurchLine."Document Type" := "Document Type"::Order;
                TempTotalPurchLine."Document No." := PurchRcptLine."Order No.";
                TempTotalPurchLine."Line No." := PurchRcptLine."Order Line No.";
                TempTotalPurchLine.INSERT;
              end;
              TempTotalPurchLine."Qty. to Invoice" := TempTotalPurchLine."Qty. to Invoice" + "Qty. to Invoice";
              TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + "Prepmt Amt to Deduct";
              AdjustInvLineWith100PctPrepmt(TempPurchLine,TempTotalPurchLine);
              TempTotalPurchLine.MODIFY;
            end;
          until NEXT = 0;

        if TempRcvdPurchLine.FINDSET then
          repeat
            if TempPurchRcptLine.GET(TempRcvdPurchLine."Receipt No.",TempRcvdPurchLine."Receipt Line No.") then
              if   GET(TempRcvdPurchLine."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.") then
                if TempTotalPurchLine.GET(
                     TempRcvdPurchLine."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.")
                then begin
                  MaxAmtToDeduct := "Prepmt. Amt. Inv." - "Prepmt Amt Deducted";

                  if TempTotalPurchLine."Prepmt Amt to Deduct" > MaxAmtToDeduct then
                    ERROR(STRSUBSTNO(PrepAmountToDeductToBigErr,FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));

                  if (TempTotalPurchLine."Qty. to Invoice" = Quantity - "Quantity Invoiced") and
                     (TempTotalPurchLine."Prepmt Amt to Deduct" <> MaxAmtToDeduct)
                  then
                    ERROR(STRSUBSTNO(PrepAmountToDeductToSmallErr,FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));
                end;
          until TempRcvdPurchLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AdjustInvLineWith100PctPrepmt@99(VAR PurchInvoiceLine@1000 : Record "Purchase Line";VAR TempTotalPurchLine@1001 : TEMPORARY Record "Purchase Line");
    VAR
      PurchOrderLine@1003 : Record "Purchase Line";
      DiffAmtToDeduct@1002 : Decimal;
    BEGIN
      if PurchInvoiceLine."Prepayment %" = 100 then begin
        PurchOrderLine := TempTotalPurchLine;
        PurchOrderLine.FIND;
        if TempTotalPurchLine."Qty. to Invoice" = PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced" then begin
          DiffAmtToDeduct :=
            PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted" - TempTotalPurchLine."Prepmt Amt to Deduct";
          if DiffAmtToDeduct <> 0 then begin
            PurchInvoiceLine."Prepmt Amt to Deduct" := PurchInvoiceLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
            PurchInvoiceLine."Line Amount" := PurchInvoiceLine."Prepmt Amt to Deduct";
            PurchInvoiceLine."Line Discount Amount" := PurchInvoiceLine."Line Discount Amount" - DiffAmtToDeduct;
            ModifyTempLine(PurchInvoiceLine);
            TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE ArchiveUnpostedOrder@56(PurchHeader@1001 : Record "Purchase Header");
    VAR
      PurchLine@1002 : Record "Purchase Line";
      ArchiveManagement@1000 : Codeunit ArchiveManagement;
    BEGIN
      PurchSetup.GET;
      if not PurchSetup."Archive Quotes and Orders" then
        exit;
      if not (PurchHeader."Document Type" in [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"]) then
        exit;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>0');
      if PurchHeader."Document Type" = PurchHeader."Document Type"::Order then
        PurchLine.SETFILTER("Qty. to Receive",'<>0')
      else
        PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
      if not PurchLine.ISEMPTY and not PreviewMode then begin
        RoundDeferralsForArchive(PurchHeader,PurchLine);
        ArchiveManagement.ArchPurchDocumentNoConfirm(PurchHeader);
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLineJobConsumption@59(PurchHeader@1007 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line";ItemJournalLine@1008 : Record "Item Journal Line";VAR TempPurchReservEntry@1009 : TEMPORARY Record "Reservation Entry";QtyToBeInvoiced@1004 : Decimal;QtyToBeReceived@1002 : Decimal);
    VAR
      ItemLedgEntry@1102 : Record "Item Ledger Entry";
      TempReservationEntry@1003 : TEMPORARY Record "Reservation Entry";
    BEGIN
      with PurchLine do
        if "Job No." <> '' then begin
          ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::"Negative Adjmt.";
          Job.GET("Job No.");
          ItemJournalLine."Source No." := Job."Bill-to Customer No.";
          if PurchHeader.Invoice then begin
            ItemLedgEntry.RESET;
            ItemLedgEntry.SETRANGE("Document No.",ReturnShptLine."Document No.");
            ItemLedgEntry.SETRANGE("Item No.",ReturnShptLine."No.");
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::"Negative Adjmt.");
            ItemLedgEntry.SETRANGE("Completely Invoiced",false);
            if ItemLedgEntry.FINDFIRST then
              ItemJournalLine."Item Shpt. Entry No." := ItemLedgEntry."Entry No.";
          end;
          ItemJournalLine."Source Type" := ItemJournalLine."Source Type"::Customer;
          ItemJournalLine."Discount Amount" := 0;
          if "Quantity Received" <> 0 then
            GetNextItemLedgEntryNo(ItemJournalLine);

          if QtyToBeReceived <> 0 then
            CopyJobConsumptionReservation(
              TempReservationEntry,TempPurchReservEntry,ItemJournalLine."Entry Type",ItemJournalLine."Line No.");

          ItemJnlPostLine.RunPostWithReservation(ItemJournalLine,TempReservationEntry);

          if QtyToBeInvoiced <> 0 then begin
            "Qty. to Invoice" := QtyToBeInvoiced;
            JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SrcCode);
          end;
        end;
    END;

    LOCAL PROCEDURE CopyJobConsumptionReservation@175(VAR TempReservEntryJobCons@1001 : TEMPORARY Record "Reservation Entry";VAR TempReservEntryPurchase@1002 : TEMPORARY Record "Reservation Entry";SourceSubtype@1003 : Option;SourceRefNo@1004 : Integer);
    VAR
      NextReservationEntryNo@1000 : Integer;
    BEGIN
      // Item tracking for consumption
      NextReservationEntryNo := 1;
      if TempReservEntryPurchase.FINDSET then
        repeat
          TempReservEntryJobCons := TempReservEntryPurchase;

          with TempReservEntryJobCons do begin
            "Entry No." := NextReservationEntryNo;
            Positive := not Positive;
            "Quantity (Base)" := -"Quantity (Base)";
            "Shipment Date" := "Expected Receipt Date";
            "Expected Receipt Date" := 0D;
            Quantity := -Quantity;
            "Qty. to Handle (Base)" := -"Qty. to Handle (Base)";
            "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
            "Source Subtype" := SourceSubtype;
            "Source Ref. No." := SourceRefNo;
            INSERT;
          end;

          NextReservationEntryNo := NextReservationEntryNo + 1;
        until TempReservEntryPurchase.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNextItemLedgEntryNo@80(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      ItemApplicationEntry@1001 : Record "Item Application Entry";
    BEGIN
      with ItemApplicationEntry do begin
        SETRANGE("Inbound Item Entry No.",ItemJnlLine."Item Shpt. Entry No.");
        if FINDLAST then
          ItemJnlLine."Item Shpt. Entry No." := "Outbound Item Entry No.";
      end
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(PurchLine2@1000 : Record "Purchase Line";ReceiveOrShip@1002 : Boolean) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      if ReceiveOrShip then
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((PurchLine2."Qty. to Receive" + PurchLine2."Quantity Received") <> 0) or
          ((PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") <> 0) or
          ((PurchLine2."Return Qty. to Ship" + PurchLine2."Return Qty. Shipped") <> 0)
      else
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (PurchLine2."Quantity Received" <> 0) or
          (PurchLine2."Return Qty. Shipped" <> 0);

      exit(HasItemLedgerEntry);
    END;

    LOCAL PROCEDURE LockTables@60();
    VAR
      PurchLine@1000 : Record "Purchase Line";
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      PurchLine.LOCKTABLE;
      SalesLine.LOCKTABLE;
      GetGLSetup;
      if not GLSetup.OptimGLEntLockForMultiuserEnv then begin
        GLEntry.LOCKTABLE;
        if GLEntry.FINDLAST then;
      end;
    END;

    LOCAL PROCEDURE MAX@31(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      if number1 > number2 then
        exit(number1);
      exit(number2);
    END;

    LOCAL PROCEDURE CreateJobPurchLine@22(VAR JobPurchLine2@1000 : Record "Purchase Line";PurchLine2@1001 : Record "Purchase Line";PricesIncludingVAT@1002 : Boolean);
    BEGIN
      JobPurchLine2 := PurchLine2;
      if PricesIncludingVAT then
        if JobPurchLine2."VAT Calculation Type" = JobPurchLine2."VAT Calculation Type"::"Full VAT" then
          JobPurchLine2."Direct Unit Cost" := 0
        else
          JobPurchLine2."Direct Unit Cost" := JobPurchLine2."Direct Unit Cost" / (1 + JobPurchLine2."VAT %" / 100);
    END;

    LOCAL PROCEDURE RevertWarehouseEntry@62(VAR TempWhseJnlLine@1000 : TEMPORARY Record "Warehouse Journal Line";JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean) : Boolean;
    BEGIN
      if PostJobConsumptionBeforePurch or (JobNo = '') or PositiveWhseEntrycreated then
        exit(false);
      with TempWhseJnlLine do begin
        "Entry Type" := "Entry Type"::"Negative Adjmt.";
        Quantity := -Quantity;
        "Qty. (Base)" := -"Qty. (Base)";
        "From Bin Code" := "To Bin Code";
        "To Bin Code" := '';
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CreatePositiveEntry@93(WhseJnlLine@1000 : Record "Warehouse Journal Line";JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean);
    BEGIN
      if PostJobConsumptionBeforePurch or (JobNo <> '') then begin
        with WhseJnlLine do begin
          Quantity := -Quantity;
          "Qty. (Base)" := -"Qty. (Base)";
          "Qty. (Absolute)" := -"Qty. (Absolute)";
          "To Bin Code" := "From Bin Code";
          "From Bin Code" := '';
        end;
        WhseJnlPostLine.RUN(WhseJnlLine);
        PositiveWhseEntrycreated := true;
      end;
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@55(IncomingDocNo@1000 : Integer;PostingDate@1002 : Date;GenJnlLineDocNo@1003 : Code[20]);
    VAR
      IncomingDocument@1001 : Record "Incoming Document";
    BEGIN
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocNo,PostingDate,GenJnlLineDocNo);
    END;

    LOCAL PROCEDURE CheckItemCharge@61(ItemChargeAssignmentPurch@1000 : Record "Item Charge Assignment (Purch)");
    VAR
      PurchLineForCharge@1001 : Record "Purchase Line";
    BEGIN
      with ItemChargeAssignmentPurch do
        case "Applies-to Doc. Type" of
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice:
            if PurchLineForCharge.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.") then
              if (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Qty. Received (Base)") and
                 (PurchLineForCharge."Qty. Rcd. Not Invoiced (Base)" = 0)
              then
                ERROR(ReassignItemChargeErr);
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            if PurchLineForCharge.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.") then
              if (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Return Qty. Shipped (Base)") and
                 (PurchLineForCharge."Ret. Qty. Shpd Not Invd.(Base)" = 0)
              then
                ERROR(ReassignItemChargeErr);
        end;
    END;

    [External]
    PROCEDURE InitProgressWindow@105(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      if PurchHeader.Invoice then
        Window.OPEN(
          '#1#################################\\' +
          PostingLinesMsg +
          PostingPurchasesAndVATMsg +
          PostingVendorsMsg +
          PostingBalAccountMsg)
      else
        Window.OPEN(
          '#1############################\\' +
          PostingLines2Msg);

      Window.UPDATE(1,STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No."));
    END;

    [External]
    PROCEDURE SetPreviewMode@74(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE UpdateQtyPerUnitOfMeasure@63(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      ItemUnitOfMeasure@1001 : Record "Item Unit of Measure";
    BEGIN
      if PurchLine."Qty. per Unit of Measure" = 0 then
        if (PurchLine.Type = PurchLine.Type::Item) and
           (PurchLine."Unit of Measure" <> '') and
           ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure")
        then
          PurchLine."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure"
        else
          PurchLine."Qty. per Unit of Measure" := 1;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoicedForReceipt@101(VAR QtyToBeInvoiced@1000 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1002 : Boolean;PurchLine@1003 : Record "Purchase Line";PurchRcptLine@1004 : Record "Purch. Rcpt. Line";InvoicingTrackingSpecification@1006 : Record "Tracking Specification");
    BEGIN
      if PurchLine."Qty. to Invoice" * PurchRcptLine.Quantity < 0 then
        PurchLine.FIELDERROR("Qty. to Invoice",ReceiptSameSignErr);
      if TrackingSpecificationExists then begin
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      end else begin
        QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Qty. to Receive";
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Qty. to Receive (Base)";
      end;
      if ABS(QtyToBeInvoiced) > ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced") then begin
        QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
        QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      end;
      if ABS(QtyToBeInvoiced) > ABS(RemQtyToBeInvoiced) then begin
        QtyToBeInvoiced := RemQtyToBeInvoiced;
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoicedForReturnShipment@198(VAR QtyToBeInvoiced@1004 : Decimal;VAR QtyToBeInvoicedBase@1003 : Decimal;TrackingSpecificationExists@1002 : Boolean;PurchLine@1001 : Record "Purchase Line";ReturnShipmentLine@1000 : Record "Return Shipment Line";InvoicingTrackingSpecification@1005 : Record "Tracking Specification");
    BEGIN
      if PurchLine."Qty. to Invoice" * ReturnShipmentLine.Quantity > 0 then
        PurchLine.FIELDERROR("Qty. to Invoice",ReturnShipmentSamesSignErr);
      if TrackingSpecificationExists then begin
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      end else begin
        QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Return Qty. to Ship";
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Return Qty. to Ship (Base)";
      end;
      if ABS(QtyToBeInvoiced) > ABS(ReturnShipmentLine.Quantity - ReturnShipmentLine."Quantity Invoiced") then begin
        QtyToBeInvoiced := ReturnShipmentLine."Quantity Invoiced" - ReturnShipmentLine.Quantity;
        QtyToBeInvoicedBase := ReturnShipmentLine."Qty. Invoiced (Base)" - ReturnShipmentLine."Quantity (Base)";
      end;
      if ABS(QtyToBeInvoiced) > ABS(RemQtyToBeInvoiced) then begin
        QtyToBeInvoiced := RemQtyToBeInvoiced;
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE UpdateRemainingQtyToBeInvoiced@102(VAR RemQtyToInvoiceCurrLine@1000 : Decimal;VAR RemQtyToInvoiceCurrLineBase@1001 : Decimal;PurchRcptLine@1002 : Record "Purch. Rcpt. Line");
    BEGIN
      RemQtyToInvoiceCurrLine := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
      RemQtyToInvoiceCurrLineBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      if RemQtyToInvoiceCurrLine > RemQtyToBeInvoiced then begin
        RemQtyToInvoiceCurrLine := RemQtyToBeInvoiced;
        RemQtyToInvoiceCurrLineBase := RemQtyToBeInvoicedBase;
      end;
    END;

    LOCAL PROCEDURE GetCountryCode@75(SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header") : Code[10];
    VAR
      SalesShipmentHeader@1003 : Record "Sales Shipment Header";
    BEGIN
      if SalesLine."Shipment No." <> '' then begin
        SalesShipmentHeader.GET(SalesLine."Shipment No.");
        exit(
          GetCountryRegionCode(
            SalesLine."Sell-to Customer No.",
            SalesShipmentHeader."Ship-to Code",
            SalesShipmentHeader."Sell-to Country/Region Code"));
      end;
      exit(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
          SalesHeader."Ship-to Code",
          SalesHeader."Sell-to Country/Region Code"));
    END;

    LOCAL PROCEDURE GetCountryRegionCode@103(CustNo@1001 : Code[20];ShipToCode@1002 : Code[10];SellToCountryRegionCode@1003 : Code[10]) : Code[10];
    VAR
      ShipToAddress@1000 : Record "Ship-to Address";
    BEGIN
      if ShipToCode <> '' then begin
        ShipToAddress.GET(CustNo,ShipToCode);
        exit(ShipToAddress."Country/Region Code");
      end;
      exit(SellToCountryRegionCode);
    END;

    LOCAL PROCEDURE CheckItemReservDisruption@104(PurchLine@1002 : Record "Purchase Line");
    VAR
      Item@1000 : Record Item;
      AvailableQty@1001 : Decimal;
    BEGIN
      with PurchLine do begin
        if not IsCreditDocType or (Type <> Type::Item) or not ("Return Qty. to Ship (Base)" > 0) then
          exit;

        if Nonstock or "Special Order" or "Drop Shipment" or IsServiceItem or
           TempSKU.GET("Location Code","No.","Variant Code") // Warn against item
        then
          exit;

        Item.GET("No.");
        Item.SETFILTER("Location Filter","Location Code");
        Item.SETFILTER("Variant Filter","Variant Code");
        Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
        CALCFIELDS("Reserved Qty. (Base)");
        AvailableQty := Item."Net Change" - (Item."Reserved Qty. on Inventory" - ABS("Reserved Qty. (Base)"));

        if (Item."Reserved Qty. on Inventory" > 0) and
           (AvailableQty < "Return Qty. to Ship (Base)") and
           (Item."Reserved Qty. on Inventory" > ABS("Reserved Qty. (Base)"))
        then begin
          InsertTempSKU("Location Code","No.","Variant Code");
          if not CONFIRM(
               ReservationDisruptedQst,false,FIELDCAPTION("No."),Item."No.",FIELDCAPTION("Location Code"),
               "Location Code",FIELDCAPTION("Variant Code"),"Variant Code")
          then
            ERROR('');
        end;
      end;
    END;

    LOCAL PROCEDURE InsertTempSKU@106(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    BEGIN
      with TempSKU do begin
        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE UpdatePurchLineDimSetIDFromAppliedEntry@67(VAR PurchLineToPost@1000 : Record "Purchase Line";PurchLine@1001 : Record "Purchase Line");
    VAR
      ItemLedgEntry@1002 : Record "Item Ledger Entry";
      DimensionMgt@1003 : Codeunit DimensionManagement;
      DimSetID@1004 : ARRAY [10] OF Integer;
    BEGIN
      DimSetID[1] := PurchLine."Dimension Set ID";
      with PurchLineToPost do begin
        if "Appl.-to Item Entry" <> 0 then begin
          ItemLedgEntry.GET("Appl.-to Item Entry");
          DimSetID[2] := ItemLedgEntry."Dimension Set ID";
        end;
        "Dimension Set ID" :=
          DimensionMgt.GetCombinedDimensionSetID(DimSetID,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      end;
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@188(ReturnShptHeader@1000 : Record "Return Shipment Header";ReturnShptLine@1001 : Record "Return Shipment Line");
    VAR
      CertificateOfSupply@1002 : Record "Certificate of Supply";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      if ReturnShptLine.Quantity <> 0 then
        if VATPostingSetup.GET(ReturnShptHeader."VAT Bus. Posting Group",ReturnShptLine."VAT Prod. Posting Group") and
           VATPostingSetup."Certificate of Supply Required"
        then begin
          CertificateOfSupply.InitFromPurchase(ReturnShptHeader);
          CertificateOfSupply.SetRequired(ReturnShptHeader."No.")
        end;
    END;

    LOCAL PROCEDURE CheckSalesCertificateOfSupplyStatus@69(SalesShptHeader@1001 : Record "Sales Shipment Header";SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      CertificateOfSupply@1002 : Record "Certificate of Supply";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      if SalesShptLine.Quantity <> 0 then
        if VATPostingSetup.GET(SalesShptHeader."VAT Bus. Posting Group",SalesShptLine."VAT Prod. Posting Group") and
           VATPostingSetup."Certificate of Supply Required"
        then begin
          CertificateOfSupply.InitFromSales(SalesShptHeader);
          CertificateOfSupply.SetRequired(SalesShptHeader."No.");
        end;
    END;

    LOCAL PROCEDURE InsertPostedHeaders@133(PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchRcptLine@1001 : Record "Purch. Rcpt. Line";
      GenJnlLine@1003 : Record "Gen. Journal Line";
    BEGIN
      with PurchHeader do begin
        // Insert receipt header
        if Receive then
          if ("Document Type" = "Document Type"::Order) or
             (("Document Type" = "Document Type"::Invoice) and PurchSetup."Receipt on Invoice")
          then begin
            if DropShipOrder then begin
              PurchRcptHeader.LOCKTABLE;
              PurchRcptLine.LOCKTABLE;
              SalesShptHeader.LOCKTABLE;
              SalesShptLine.LOCKTABLE;
            end;
            InsertReceiptHeader(PurchHeader,PurchRcptHeader);
            ServItemMgt.CopyReservation(PurchHeader);
          end;

        // Insert return shipment header
        if Ship then
          if ("Document Type" = "Document Type"::"Return Order") or
             (("Document Type" = "Document Type"::"Credit Memo") and PurchSetup."Return Shipment on Credit Memo")
          then
            InsertReturnShipmentHeader(PurchHeader,ReturnShptHeader);

        // Insert invoice header or credit memo header
        if Invoice then
          if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then begin
            InsertInvoiceHeader(PurchHeader,PurchInvHeader);
            GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
            GenJnlLineDocNo := PurchInvHeader."No.";
            GenJnlLineExtDocNo := "Vendor Invoice No.";
          end else begin // Credit Memo
            InsertCrMemoHeader(PurchHeader,PurchCrMemoHeader);
            GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
            GenJnlLineDocNo := PurchCrMemoHeader."No.";
            GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
          end;
      end;
    END;

    LOCAL PROCEDURE InsertReceiptHeader@71(VAR PurchHeader@1000 : Record "Purchase Header";VAR PurchRcptHeader@1001 : Record "Purch. Rcpt. Header");
    VAR
      PurchCommentLine@1002 : Record "Purch. Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with PurchHeader do begin
        PurchRcptHeader.INIT;
        PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
        PurchRcptHeader."No." := "Receiving No.";
        if "Document Type" = "Document Type"::Order then begin
          PurchRcptHeader."Order No. Series" := "No. Series";
          PurchRcptHeader."Order No." := "No.";
        end;
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        OnBeforePurchRcptHeaderInsert(PurchRcptHeader,PurchHeader);
        PurchRcptHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");

        if PurchSetup."Copy Comments Order to Receipt" then begin
          PurchCommentLine.CopyComments(
            "Document Type",PurchCommentLine."Document Type"::Receipt,"No.",PurchRcptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchRcptHeader);
        end;
        if WhseReceive then begin
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
        end;
        if WhseShip then begin
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Receiving No.","Posting Date");
        end;
      end;
    END;

    LOCAL PROCEDURE InsertReceiptLine@143(PurchRcptHeader@1000 : Record "Purch. Rcpt. Header";PurchLine@1001 : Record "Purchase Line";CostBaseAmount@1006 : Decimal);
    VAR
      PurchRcptLine@1003 : Record "Purch. Rcpt. Line";
      WhseRcptLine@1004 : Record "Warehouse Receipt Line";
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
    BEGIN
      PurchRcptLine.InitFromPurchLine(PurchRcptHeader,xPurchLine);
      PurchRcptLine."Quantity Invoiced" := ABS(RemQtyToBeInvoiced);
      PurchRcptLine."Qty. Invoiced (Base)" := ABS(RemQtyToBeInvoicedBase);
      PurchRcptLine."Qty. Rcd. Not Invoiced" := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";

      if (PurchLine.Type = PurchLine.Type::Item) and (PurchLine."Qty. to Receive" <> 0) then begin
        if WhseReceive then begin
          WhseRcptLine.GetWhseRcptLine(
            WhseRcptHeader."No.",DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
          WhseRcptLine.TESTFIELD("Qty. to Receive",PurchRcptLine.Quantity);
          SaveTempWhseSplitSpec(PurchLine);
          WhsePostRcpt.CreatePostedRcptLine(
            WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
        end;
        if WhseShip then begin
          WhseShptLine.GetWhseShptLine(
            WhseShptHeader."No.",DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
          WhseShptLine.TESTFIELD("Qty. to Ship",-PurchRcptLine.Quantity);
          SaveTempWhseSplitSpec(PurchLine);
          WhsePostShpt.CreatePostedShptLine(
            WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
        end;
        PurchRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(PurchRcptLine);
        PurchRcptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
      end;
      OnBeforePurchRcptLineInsert(PurchRcptLine,PurchRcptHeader,PurchLine);
      PurchRcptLine.INSERT(true);
    END;

    LOCAL PROCEDURE InsertReturnShipmentHeader@73(VAR PurchHeader@1000 : Record "Purchase Header";VAR ReturnShptHeader@1001 : Record "Return Shipment Header");
    VAR
      PurchCommentLine@1002 : Record "Purch. Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with PurchHeader do begin
        ReturnShptHeader.INIT;
        ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
        ReturnShptHeader."No." := "Return Shipment No.";
        if "Document Type" = "Document Type"::"Return Order" then begin
          ReturnShptHeader."Return Order No. Series" := "No. Series";
          ReturnShptHeader."Return Order No." := "No.";
        end;
        ReturnShptHeader."No. Series" := "Return Shipment No. Series";
        ReturnShptHeader."No. Printed" := 0;
        ReturnShptHeader."Source Code" := SrcCode;
        ReturnShptHeader."User ID" := USERID;
        OnBeforeReturnShptHeaderInsert(ReturnShptHeader,PurchHeader);
        ReturnShptHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");

        if PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" then begin
          PurchCommentLine.CopyComments(
            "Document Type",PurchCommentLine."Document Type"::"Posted Return Shipment","No.",ReturnShptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,ReturnShptHeader);
        end;
        if WhseShip then begin
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
        end;
        if WhseReceive then begin
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Shipment No.","Posting Date");
        end;
      end;
    END;

    LOCAL PROCEDURE InsertReturnShipmentLine@145(ReturnShptHeader@1000 : Record "Return Shipment Header";PurchLine@1001 : Record "Purchase Line";CostBaseAmount@1006 : Decimal);
    VAR
      ReturnShptLine@1005 : Record "Return Shipment Line";
      WhseRcptLine@1004 : Record "Warehouse Receipt Line";
      WhseShptLine@1003 : Record "Warehouse Shipment Line";
    BEGIN
      ReturnShptLine.InitFromPurchLine(ReturnShptHeader,xPurchLine);
      ReturnShptLine."Quantity Invoiced" := ABS(RemQtyToBeInvoiced);
      ReturnShptLine."Qty. Invoiced (Base)" := ABS(RemQtyToBeInvoicedBase);
      ReturnShptLine."Return Qty. Shipped Not Invd." := ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";

      if (PurchLine.Type = PurchLine.Type::Item) and (PurchLine."Return Qty. to Ship" <> 0) then begin
        if WhseShip then begin
          WhseShptLine.GetWhseShptLine(
            WhseShptHeader."No.",DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
          WhseShptLine.TESTFIELD("Qty. to Ship",ReturnShptLine.Quantity);
          SaveTempWhseSplitSpec(PurchLine);
          WhsePostShpt.CreatePostedShptLine(
            WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
        end;
        if WhseReceive then begin
          WhseRcptLine.GetWhseRcptLine(
            WhseRcptHeader."No.",DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
          WhseRcptLine.TESTFIELD("Qty. to Receive",-ReturnShptLine.Quantity);
          SaveTempWhseSplitSpec(PurchLine);
          WhsePostRcpt.CreatePostedRcptLine(
            WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
        end;

        ReturnShptLine."Item Shpt. Entry No." := InsertReturnEntryRelation(ReturnShptLine);
        ReturnShptLine."Item Charge Base Amount" := ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
      end;
      OnBeforeReturnShptLineInsert(ReturnShptLine,ReturnShptHeader,PurchLine);
      ReturnShptLine.INSERT(true);

      CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
    END;

    LOCAL PROCEDURE InsertInvoiceHeader@87(VAR PurchHeader@1000 : Record "Purchase Header";VAR PurchInvHeader@1001 : Record "Purch. Inv. Header");
    VAR
      PurchCommentLine@1002 : Record "Purch. Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with PurchHeader do begin
        PurchInvHeader.INIT;
        PurchInvHeader.TRANSFERFIELDS(PurchHeader);
        if "Document Type" = "Document Type"::Order then begin
          PurchInvHeader."Pre-Assigned No. Series" := '';
          if PreviewMode then
            PurchInvHeader."No." := '***'
          else
            PurchInvHeader."No." := "Posting No.";
          PurchInvHeader."Order No. Series" := "No. Series";
          PurchInvHeader."Order No." := "No.";
          if GUIALLOWED then
            Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",PurchInvHeader."No."));
        end else begin
          if "Posting No." <> '' then begin
            PurchInvHeader."No." := "Posting No.";
            if GUIALLOWED then
              Window.UPDATE(1,STRSUBSTNO(InvoiceNoMsg,"Document Type","No.",PurchInvHeader."No."));
          end;
          PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
          PurchInvHeader."Pre-Assigned No." := "No.";
        end;
        PurchInvHeader."Creditor No." := "Creditor No.";
        PurchInvHeader."Payment Reference" := "Payment Reference";
        PurchInvHeader."Payment Method Code" := "Payment Method Code";
        PurchInvHeader."Source Code" := SrcCode;
        PurchInvHeader."User ID" := USERID;
        PurchInvHeader."No. Printed" := 0;
        OnBeforePurchInvHeaderInsert(PurchInvHeader,PurchHeader);
        PurchInvHeader.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
        if PurchSetup."Copy Comments Order to Invoice" then begin
          PurchCommentLine.CopyComments(
            "Document Type",PurchCommentLine."Document Type"::"Posted Invoice","No.",PurchInvHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchInvHeader);
        end;
      end;
    END;

    LOCAL PROCEDURE InsertCrMemoHeader@88(VAR PurchHeader@1000 : Record "Purchase Header";VAR PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.");
    VAR
      PurchCommentLine@1002 : Record "Purch. Comment Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      with PurchHeader do begin
        PurchCrMemoHdr.INIT;
        PurchCrMemoHdr.TRANSFERFIELDS(PurchHeader);
        if "Document Type" = "Document Type"::"Return Order" then begin
          PurchCrMemoHdr."No." := "Posting No.";
          PurchCrMemoHdr."Pre-Assigned No. Series" := '';
          PurchCrMemoHdr."Return Order No. Series" := "No. Series";
          PurchCrMemoHdr."Return Order No." := "No.";
          if GUIALLOWED then
            Window.UPDATE(1,STRSUBSTNO(CreditMemoNoMsg,"Document Type","No.",PurchCrMemoHdr."No."));
        end else begin
          PurchCrMemoHdr."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHdr."Pre-Assigned No." := "No.";
          if "Posting No." <> '' then begin
            PurchCrMemoHdr."No." := "Posting No.";
            if GUIALLOWED then
              Window.UPDATE(1,STRSUBSTNO(CreditMemoNoMsg,"Document Type","No.",PurchCrMemoHdr."No."));
          end;
        end;
        PurchCrMemoHdr."Source Code" := SrcCode;
        PurchCrMemoHdr."User ID" := USERID;
        PurchCrMemoHdr."No. Printed" := 0;
        OnBeforePurchCrMemoHeaderInsert(PurchCrMemoHdr,PurchHeader);
        PurchCrMemoHdr.INSERT(true);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");

        if PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" then begin
          PurchCommentLine.CopyComments(
            "Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo","No.",PurchCrMemoHdr."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchCrMemoHdr);
        end;
      end;
    END;

    LOCAL PROCEDURE GetSign@90(Value@1000 : Decimal) : Integer;
    BEGIN
      if Value > 0 then
        exit(1);

      exit(-1);
    END;

    LOCAL PROCEDURE CheckICDocumentDuplicatePosting@65(PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchHeader2@1001 : Record "Purchase Header";
      ICInboxPurchHeader@1002 : Record "IC Inbox Purchase Header";
      PurchInvHeader@1003 : Record "Purch. Inv. Header";
    BEGIN
      with PurchHeader do begin
        if not Invoice then
          exit;
        if "IC Direction" = "IC Direction"::Outgoing then begin
          PurchInvHeader.SETRANGE("Your Reference","No.");
          PurchInvHeader.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
          PurchInvHeader.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
          if PurchInvHeader.FINDFIRST then
            if not CONFIRM(PostedInvoiceDuplicateQst,false,PurchInvHeader."No.","No.") then
              ERROR('');
        end;
        if "IC Direction" = "IC Direction"::Incoming then begin
          if "Document Type" = "Document Type"::Order then begin
            PurchHeader2.SETRANGE("Document Type","Document Type"::Invoice);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            if PurchHeader2.FINDFIRST then
              if not CONFIRM(UnpostedInvoiceDuplicateQst,true,"No.",PurchHeader2."No.") then
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Invoice);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            if ICInboxPurchHeader.FINDFIRST then
              if not CONFIRM(InvoiceDuplicateInboxQst,true,"No.",ICInboxPurchHeader."No.") then
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            if PurchInvHeader.FINDFIRST then
              if not CONFIRM(PostedInvoiceDuplicateQst,false,PurchInvHeader."No.","No.") then
                ERROR('');
          end;
          if ("Document Type" = "Document Type"::Invoice) and ("Vendor Order No." <> '') then begin
            PurchHeader2.SETRANGE("Document Type","Document Type"::Order);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            if PurchHeader2.FINDFIRST then
              if not CONFIRM(OrderFromSameTransactionQst,true,PurchHeader2."No.","No.") then
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Order);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            if ICInboxPurchHeader.FINDFIRST then
              if not CONFIRM(DocumentFromSameTransactionQst,true,"No.",ICInboxPurchHeader."No.") then
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            if PurchInvHeader.FINDFIRST then
              if not CONFIRM(PostedInvoiceFromSameTransactionQst,false,PurchInvHeader."No.","No.") then
                ERROR('');
            if "Your Reference" <> '' then begin
              PurchInvHeader.RESET;
              PurchInvHeader.SETRANGE("Order No.","Your Reference");
              PurchInvHeader.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
              PurchInvHeader.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
              if PurchInvHeader.FINDFIRST then
                if not CONFIRM(PostedInvoiceFromSameTransactionQst,false,PurchInvHeader."No.","No.") then
                  ERROR('');
            end;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckICPartnerBlocked@70(PurchHeader@1000 : Record "Purchase Header");
    VAR
      ICPartner@1001 : Record "IC Partner";
    BEGIN
      with PurchHeader do begin
        if "Buy-from IC Partner Code" <> '' then
          if ICPartner.GET("Buy-from IC Partner Code") then
            ICPartner.TESTFIELD(Blocked,false);
        if "Pay-to IC Partner Code" <> '' then
          if ICPartner.GET("Pay-to IC Partner Code") then
            ICPartner.TESTFIELD(Blocked,false);
      end;
    END;

    LOCAL PROCEDURE SendICDocument@77(VAR PurchHeader@1000 : Record "Purchase Header";VAR ModifyHeader@1002 : Boolean);
    VAR
      ICInboxOutboxMgt@1001 : Codeunit ICInboxOutboxMgt;
    BEGIN
      with PurchHeader do
        if "Send IC Document" and ("IC Status" = "IC Status"::New) and ("IC Direction" = "IC Direction"::Outgoing) and
           ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"])
        then begin
          ICInboxOutboxMgt.SendPurchDoc(PurchHeader,true);
          "IC Status" := "IC Status"::Pending;
          ModifyHeader := true;
        end;
    END;

    LOCAL PROCEDURE UpdateHandledICInboxTransaction@100(PurchHeader@1000 : Record "Purchase Header");
    VAR
      HandledICInboxTrans@1001 : Record "Handled IC Inbox Trans.";
      Vendor@1002 : Record Vendor;
    BEGIN
      with PurchHeader do
        if "IC Direction" = "IC Direction"::Incoming then begin
          case "Document Type" of
            "Document Type"::Invoice:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Invoice No.");
            "Document Type"::Order:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
            "Document Type"::"Credit Memo":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Cr. Memo No.");
            "Document Type"::"Return Order":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
          end;
          Vendor.GET("Buy-from Vendor No.");
          HandledICInboxTrans.SETRANGE("IC Partner Code",Vendor."IC Partner Code");
          HandledICInboxTrans.LOCKTABLE;
          if HandledICInboxTrans.FINDFIRST then begin
            HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
            HandledICInboxTrans.MODIFY;
          end;
        end;
    END;

    LOCAL PROCEDURE MakeInventoryAdjustment@72(JobItem@1000 : Boolean);
    VAR
      InvtSetup@1001 : Record "Inventory Setup";
      InvtAdjmt@1002 : Codeunit "Inventory Adjustment";
    BEGIN
      InvtSetup.GET;
      if InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      then begin
        InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetJobUpdateProperties(not JobItem);
        InvtAdjmt.MakeMultiLevelAdjmt;
      end;
    END;

    LOCAL PROCEDURE CheckTrackingAndWarehouseForReceive@19(PurchHeader@1000 : Record "Purchase Header") Receive : Boolean;
    VAR
      TempPurchLine@1002 : TEMPORARY Record "Purchase Line";
    BEGIN
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETFILTER(Quantity,'<>0');
        if PurchHeader."Document Type" = PurchHeader."Document Type"::Order then
          SETFILTER("Qty. to Receive",'<>0');
        SETRANGE("Receipt No.",'');
        Receive := FINDFIRST;
        WhseReceive := TempWhseRcptHeader.FINDFIRST;
        WhseShip := TempWhseShptHeader.FINDFIRST;
        if Receive then begin
          CheckTrackingSpecification(PurchHeader,TempPurchLine);
          if not (WhseReceive or WhseShip or InvtPickPutaway) then
            CheckWarehouse(TempPurchLine);
        end;
        exit(Receive);
      end;
    END;

    LOCAL PROCEDURE CheckTrackingAndWarehouseForShip@132(PurchHeader@1000 : Record "Purchase Header") Ship : Boolean;
    VAR
      TempPurchLine@1002 : TEMPORARY Record "Purchase Line";
    BEGIN
      with TempPurchLine do begin
        ResetTempLines(TempPurchLine);
        SETFILTER(Quantity,'<>0');
        SETFILTER("Return Qty. to Ship",'<>0');
        SETRANGE("Return Shipment No.",'');
        Ship := FINDFIRST;
        WhseReceive := TempWhseRcptHeader.FINDFIRST;
        WhseShip := TempWhseShptHeader.FINDFIRST;
        if Ship then begin
          CheckTrackingSpecification(PurchHeader,TempPurchLine);
          if not (WhseShip or WhseReceive or InvtPickPutaway) then
            CheckWarehouse(TempPurchLine);
        end;
        exit(Ship);
      end;
    END;

    LOCAL PROCEDURE CheckAssosOrderLines@120(PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchLine@1001 : Record "Purchase Line";
      SalesOrderLine@1002 : Record "Sales Line";
    BEGIN
      with PurchHeader do begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETFILTER("Sales Order Line No.",'<>0');
        if PurchLine.FINDSET then
          repeat
            SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,
              PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");
            if Receive and Invoice and (PurchLine."Qty. to Invoice" <> 0) and (PurchLine."Qty. to Receive" <> 0) then
              ERROR(DropShipmentErr);
            if ABS(PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") < ABS(PurchLine."Qty. to Invoice")
            then begin
              PurchLine."Qty. to Invoice" := PurchLine."Quantity Received" - PurchLine."Quantity Invoiced";
              PurchLine."Qty. to Invoice (Base)" := PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
            end;
            if ABS(PurchLine.Quantity - (PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced")) <
               ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
            then
              ERROR(CannotInvoiceBeforeAssosSalesOrderErr,PurchLine."Sales Order No.");
          until PurchLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostCombineSalesOrderShipment@76(VAR PurchHeader@1001 : Record "Purchase Header";VAR TempDropShptPostBuffer@1004 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      SalesSetup@1000 : Record "Sales & Receivables Setup";
      SalesCommentLine@1002 : Record "Sales Comment Line";
      SalesOrderHeader@1006 : Record "Sales Header";
      SalesOrderLine@1005 : Record "Sales Line";
      RecordLinkManagement@1003 : Codeunit "Record Link Management";
    BEGIN
      ArchiveSalesOrders(TempDropShptPostBuffer);
      with PurchHeader do
        if TempDropShptPostBuffer.FINDSET then begin
          SalesSetup.GET;
          repeat
            SalesOrderHeader.GET(
              SalesOrderHeader."Document Type"::Order,
              TempDropShptPostBuffer."Order No.");
            SalesShptHeader.INIT;
            SalesShptHeader.TRANSFERFIELDS(SalesOrderHeader);
            SalesShptHeader."No." := SalesOrderHeader."Shipping No.";
            SalesShptHeader."Order No." := SalesOrderHeader."No.";
            SalesShptHeader."Posting Date" := "Posting Date";
            SalesShptHeader."Document Date" := "Document Date";
            SalesShptHeader."No. Printed" := 0;
            SalesShptHeader.INSERT(true);

            ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");

            if SalesSetup."Copy Comments Order to Shpt." then begin
              SalesCommentLine.CopyComments(
                SalesOrderHeader."Document Type",SalesCommentLine."Document Type"::Shipment,
                SalesOrderHeader."No.",SalesShptHeader."No.");
              RecordLinkManagement.CopyLinks(SalesOrderHeader,SalesShptHeader);
            end;
            TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
            repeat
              SalesOrderLine.GET(
                SalesOrderLine."Document Type"::Order,
                TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
              SalesShptLine.INIT;
              SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
              SalesShptLine."Posting Date" := SalesShptHeader."Posting Date";
              SalesShptLine."Document No." := SalesShptHeader."No.";
              SalesShptLine.Quantity := TempDropShptPostBuffer.Quantity;
              SalesShptLine."Quantity (Base)" := TempDropShptPostBuffer."Quantity (Base)";
              SalesShptLine."Quantity Invoiced" := 0;
              SalesShptLine."Qty. Invoiced (Base)" := 0;
              SalesShptLine."Order No." := SalesOrderLine."Document No.";
              SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
              SalesShptLine."Qty. Shipped Not Invoiced" :=
                SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
              if SalesShptLine.Quantity <> 0 then begin
                SalesShptLine."Item Shpt. Entry No." := TempDropShptPostBuffer."Item Shpt. Entry No.";
                SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
              end;
              SalesShptLine.INSERT;
              CheckSalesCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);

              SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
              SalesOrderLine."Qty. to Ship (Base)" := SalesShptLine."Quantity (Base)";
              ServItemMgt.CreateServItemOnSalesLineShpt(SalesOrderHeader,SalesOrderLine,SalesShptLine);
              SalesPost.UpdateBlanketOrderLine(SalesOrderLine,true,false,false);

              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",TempDropShptPostBuffer."Order No.");
              SalesOrderLine.SETRANGE("Attached to Line No.",TempDropShptPostBuffer."Order Line No.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::" ");
              if SalesOrderLine.FINDSET then
                repeat
                  SalesShptLine.INIT;
                  SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                  SalesShptLine."Document No." := SalesShptHeader."No.";
                  SalesShptLine."Order No." := SalesOrderLine."Document No.";
                  SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                  SalesShptLine.INSERT;
                until SalesOrderLine.NEXT = 0;

            until TempDropShptPostBuffer.NEXT = 0;
            TempDropShptPostBuffer.SETRANGE("Order No.");
          until TempDropShptPostBuffer.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE PostInvoicePostBufferLine@92(VAR PurchHeader@1000 : Record "Purchase Header";InvoicePostBuffer@1001 : Record "Invoice Post. Buffer") : Integer;
    VAR
      GenJnlLine@1002 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PurchHeader."Posting Description",
          InvoicePostBuffer."Global Dimension 1 Code",InvoicePostBuffer."Global Dimension 2 Code",
          InvoicePostBuffer."Dimension Set ID",PurchHeader."Reason Code");

        CopyDocumentFields(GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,'');

        CopyFromPurchHeader(PurchHeader);

        CopyFromInvoicePostBuffer(InvoicePostBuffer);
        if InvoicePostBuffer.Type <> InvoicePostBuffer.Type::"Prepmt. Exch. Rate Difference" then
          "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
        if InvoicePostBuffer.Type = InvoicePostBuffer.Type::"Fixed Asset" then begin
          if InvoicePostBuffer."FA Posting Type" = InvoicePostBuffer."FA Posting Type"::"Acquisition Cost" then
            "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
          if InvoicePostBuffer."FA Posting Type" = InvoicePostBuffer."FA Posting Type"::Maintenance then
            "FA Posting Type" := "FA Posting Type"::Maintenance;
          CopyFromInvoicePostBufferFA(InvoicePostBuffer);
        end;

        OnBeforePostInvPostBuffer(GenJnlLine,InvoicePostBuffer,PurchHeader);
        exit(RunGenJnlPostLine(GenJnlLine));
      end;
    END;

    LOCAL PROCEDURE FindTempItemChargeAssgntPurch@96(PurchLineNo@1000 : Integer) : Boolean;
    BEGIN
      ClearItemChargeAssgntFilter;
      TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineNo);
      exit(TempItemChargeAssgntPurch.FINDSET);
    END;

    LOCAL PROCEDURE UpdateInvoicedQtyOnPurchRcptLine@107(VAR PurchRcptLine@1000 : Record "Purch. Rcpt. Line";QtyToBeInvoiced@1001 : Decimal;QtyToBeInvoicedBase@1002 : Decimal);
    BEGIN
      with PurchRcptLine do begin
        "Quantity Invoiced" := "Quantity Invoiced" + QtyToBeInvoiced;
        "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
        "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@123(PurchHeader@1008 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line";InvoicePostBuffer@1009 : Record "Invoice Post. Buffer";RemainAmtToDefer@1001 : Decimal;RemainAmtToDeferACY@1002 : Decimal;DeferralAccount@1003 : Code[20];PurchAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record "Deferral Template";
    BEGIN
      if PurchLine."Deferral Code" <> '' then begin
        DeferralTemplate.GET(PurchLine."Deferral Code");

        if TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        then begin
          if TempDeferralHeader."Amount to Defer" <> 0 then begin
            TempDeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
            TempDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
            TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
            TempDeferralLine.SETRANGE("Document Type",PurchLine."Document Type");
            TempDeferralLine.SETRANGE("Document No.",PurchLine."Document No.");
            TempDeferralLine.SETRANGE("Line No.",PurchLine."Line No.");

            // The remaining amounts only need to be adjusted into the deferral account and are always reversed
            if (RemainAmtToDefer <> 0) or (RemainAmtToDeferACY <> 0) then begin
              DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
              DeferralPostBuffer[1]."Amount (LCY)" := -RemainAmtToDefer;
              DeferralPostBuffer[1].Amount := -RemainAmtToDeferACY;
              DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := 0;
              DeferralPostBuffer[1]."Sales/Purch Amount" := 0;
              // DeferralPostBuffer[1].ReverseAmounts;
              DeferralPostBuffer[1]."G/L Account" := PurchAccount;
              DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
              // Remainder always goes to the Posting Date
              DeferralPostBuffer[1]."Posting Date" := PurchHeader."Posting Date";
              DeferralPostBuffer[1].Description := PurchHeader."Posting Description";
              DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
              DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
              DeferralPostBuffer[1]."Partial Deferral" := true;
              UpdDeferralPostBuffer(InvoicePostBuffer);
            end;

            // Add the deferral lines for each period to the deferral posting buffer merging when they are the same
            if TempDeferralLine.FINDSET then
              repeat
                if (TempDeferralLine."Amount (LCY)" <> 0) or (TempDeferralLine.Amount <> 0) then begin
                  DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
                  DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                  DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                  if PurchLine.IsCreditDocType then
                    DeferralPostBuffer[1].ReverseAmounts;
                  DeferralPostBuffer[1]."G/L Account" := PurchAccount;
                  DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                  DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                  DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                  DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                  DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
                  UpdDeferralPostBuffer(InvoicePostBuffer);
                end else
                  ERROR(ZeroDeferralAmtErr,PurchLine."No.",PurchLine."Deferral Code");

              until TempDeferralLine.NEXT = 0

            else
              ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code");
          end else
            ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
        end else
          ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
      end;
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124(InvoicePostBuffer@1000 : Record "Invoice Post. Buffer");
    BEGIN
      DeferralPostBuffer[1]."Dimension Set ID" := InvoicePostBuffer."Dimension Set ID";
      DeferralPostBuffer[1]."Global Dimension 1 Code" := InvoicePostBuffer."Global Dimension 1 Code";
      DeferralPostBuffer[1]."Global Dimension 2 Code" := InvoicePostBuffer."Global Dimension 2 Code";

      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      if DeferralPostBuffer[2].FIND then begin
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";

        if not DeferralPostBuffer[1]."System-Created Entry" then
          DeferralPostBuffer[2]."System-Created Entry" := false;
        if IsCombinedDeferralZero then
          DeferralPostBuffer[2].DELETE
        else
          DeferralPostBuffer[2].MODIFY;
      end else
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RoundDeferralsForArchive@126(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line");
    VAR
      ArchiveManagement@1005 : Codeunit ArchiveManagement;
    BEGIN
      ArchiveManagement.RoundPurchaseDeferralsForArchive(PurchHeader,PurchLine);
    END;

    LOCAL PROCEDURE GetAmountsForDeferral@127(PurchLine@1001 : Record "Purchase Line";VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR DeferralAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1005 : Record "Deferral Template";
    BEGIN
      if PurchLine."Deferral Code" <> '' then begin
        DeferralTemplate.GET(PurchLine."Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralAccount := DeferralTemplate."Deferral Account";

        if TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        then begin
          AmtToDeferACY := TempDeferralHeader."Amount to Defer";
          AmtToDefer := TempDeferralHeader."Amount to Defer (LCY)";
        end;

        if PurchLine.IsCreditDocType then begin
          AmtToDefer := -AmtToDefer;
          AmtToDeferACY := -AmtToDeferACY;
        end
      end else begin
        AmtToDefer := 0;
        AmtToDeferACY := 0;
        DeferralAccount := '';
      end;
    END;

    LOCAL PROCEDURE DefaultGLAccount@129(DeferralCode@1000 : Code[10];AmtToDefer@1001 : Decimal;GLAccNo@1002 : Code[20];DeferralAccNo@1003 : Code[20]) : Code[20];
    BEGIN
      if (DeferralCode <> '') and (AmtToDefer = 0) then
        exit(DeferralAccNo);

      exit(GLAccNo);
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      if (DeferralPostBuffer[2].Amount = 0) and (DeferralPostBuffer[2]."Amount (LCY)" = 0) and
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) and (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE CheckMandatoryHeaderFields@128(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      PurchHeader.TESTFIELD("Document Type");
      PurchHeader.TESTFIELD("Buy-from Vendor No.");
      PurchHeader.TESTFIELD("Pay-to Vendor No.");
      PurchHeader.TESTFIELD("Posting Date");
      PurchHeader.TESTFIELD("Document Date");

      OnAfterCheckMandatoryFields(PurchHeader);
    END;

    LOCAL PROCEDURE InitVATAmounts@111(PurchLine@1002 : Record "Purchase Line";VAR TotalVAT@1000 : Decimal;VAR TotalVATACY@1001 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalAmountACY@1004 : Decimal);
    BEGIN
      TotalVAT := PurchLine."Amount Including VAT" - PurchLine.Amount;
      TotalVATACY := PurchLineACY."Amount Including VAT" - PurchLineACY.Amount;
      TotalAmount := PurchLine.Amount;
      TotalAmountACY := PurchLineACY.Amount;
    END;

    LOCAL PROCEDURE InitAmounts@109(PurchLine@1005 : Record "Purchase Line";VAR TotalVAT@1004 : Decimal;VAR TotalVATACY@1003 : Decimal;VAR TotalAmount@1002 : Decimal;VAR TotalAmountACY@1001 : Decimal;VAR AmtToDefer@1006 : Decimal;VAR AmtToDeferACY@1007 : Decimal;VAR DeferralAccount@1008 : Code[20]);
    BEGIN
      InitVATAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
      GetAmountsForDeferral(PurchLine,AmtToDefer,AmtToDeferACY,DeferralAccount);
    END;

    LOCAL PROCEDURE CalcInvoiceDiscountPosting@112(PurchHeader@1002 : Record "Purchase Header";PurchLine@1001 : Record "Purchase Line";PurchLineACY@1000 : Record "Purchase Line";VAR InvoicePostBuffer@1003 : Record "Invoice Post. Buffer");
    BEGIN
      case PurchLine."VAT Calculation Type" of
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvoicePostBuffer.CalcDiscount(
            PurchHeader."Prices Including VAT",-PurchLine."Inv. Discount Amount",-PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvoicePostBuffer.CalcDiscountNoVAT(-PurchLine."Inv. Discount Amount",-PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          if not PurchLine."Use Tax" then // Use Tax is calculated later, based on totals
            InvoicePostBuffer.CalcDiscount(
              PurchHeader."Prices Including VAT",-PurchLine."Inv. Discount Amount",-PurchLineACY."Inv. Discount Amount")
          else
            InvoicePostBuffer.CalcDiscountNoVAT(-PurchLine."Inv. Discount Amount",-PurchLineACY."Inv. Discount Amount");
      end;
    END;

    LOCAL PROCEDURE CalcLineDiscountPosting@110(PurchHeader@1002 : Record "Purchase Header";PurchLine@1001 : Record "Purchase Line";PurchLineACY@1000 : Record "Purchase Line";VAR InvoicePostBuffer@1003 : Record "Invoice Post. Buffer");
    BEGIN
      case PurchLine."VAT Calculation Type" of
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvoicePostBuffer.CalcDiscount(
            PurchHeader."Prices Including VAT",-PurchLine."Line Discount Amount",-PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvoicePostBuffer.CalcDiscountNoVAT(-PurchLine."Line Discount Amount",-PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          if not PurchLine."Use Tax" then // Use Tax is calculated later, based on totals
            InvoicePostBuffer.CalcDiscount(
              PurchHeader."Prices Including VAT",-PurchLine."Line Discount Amount",-PurchLineACY."Line Discount Amount")
          else
            InvoicePostBuffer.CalcDiscountNoVAT(-PurchLine."Line Discount Amount",-PurchLineACY."Line Discount Amount");
      end;
    END;

    LOCAL PROCEDURE ClearPostBuffers@113();
    BEGIN
      CLEAR(WhsePostRcpt);
      CLEAR(WhsePostShpt);
      CLEAR(GenJnlPostLine);
      CLEAR(JobPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(WhseJnlPostLine);
    END;

    LOCAL PROCEDURE ValidatePostingAndDocumentDate@119(VAR PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      BatchProcessingMgt@1002 : Codeunit "Batch Processing Mgt.";
      BatchPostParameterTypes@1003 : Codeunit "Batch Post Parameter Types";
      PostingDate@1007 : Date;
      ModifyHeader@1001 : Boolean;
      PostingDateExists@1006 : Boolean;
      ReplacePostingDate@1005 : Boolean;
      ReplaceDocumentDate@1004 : Boolean;
    BEGIN
      PostingDateExists :=
        BatchProcessingMgt.GetParameterBoolean(
          PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate) and
        BatchProcessingMgt.GetParameterBoolean(
          PurchaseHeader.RECORDID,BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate) and
        BatchProcessingMgt.GetParameterDate(
          PurchaseHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);

      if PostingDateExists and (ReplacePostingDate or (PurchaseHeader."Posting Date" = 0D)) then begin
        PurchaseHeader."Posting Date" := PostingDate;
        PurchaseHeader.VALIDATE("Currency Code");
        ModifyHeader := true;
      end;

      if PostingDateExists and (ReplaceDocumentDate or (PurchaseHeader."Document Date" = 0D)) then begin
        PurchaseHeader.VALIDATE("Document Date",PostingDate);
        ModifyHeader := true;
      end;

      if ModifyHeader then
        PurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE CheckExternalDocumentNumber@117(VAR VendLedgEntry@1001 : Record "Vendor Ledger Entry";VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("External Document No.");
      VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
      VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Pay-to Vendor No.");
      VendLedgEntry.SETRANGE(Reversed,false);
      if VendLedgEntry.FINDFIRST then
        ERROR(
          PurchaseAlreadyExistsErr,VendLedgEntry."Document Type",GenJnlLineExtDocNo);
    END;

    LOCAL PROCEDURE PostInvoicePostingBuffer@141(PurchHeader@1002 : Record "Purchase Header";VAR TempInvoicePostBuffer@1005 : TEMPORARY Record "Invoice Post. Buffer");
    VAR
      VATPostingSetup@1001 : Record "VAT Posting Setup";
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      LineCount@1000 : Integer;
      GLEntryNo@1004 : Integer;
    BEGIN
      LineCount := 0;
      if TempInvoicePostBuffer.FIND('+') then
        repeat
          LineCount := LineCount + 1;
          if GUIALLOWED then
            Window.UPDATE(3,LineCount);

          case TempInvoicePostBuffer."VAT Calculation Type" of
            TempInvoicePostBuffer."VAT Calculation Type"::"Reverse Charge VAT":
              begin
                VATPostingSetup.GET(
                  TempInvoicePostBuffer."VAT Bus. Posting Group",TempInvoicePostBuffer."VAT Prod. Posting Group");
                TempInvoicePostBuffer."VAT Amount" :=
                  ROUND(
                    TempInvoicePostBuffer."VAT Base Amount" *
                    (1 - PurchHeader."VAT Base Discount %" / 100) * VATPostingSetup."VAT %" / 100);
                TempInvoicePostBuffer."VAT Amount (ACY)" :=
                  ROUND(
                    TempInvoicePostBuffer."VAT Base Amount (ACY)" * (1 - PurchHeader."VAT Base Discount %" / 100) *
                    VATPostingSetup."VAT %" / 100,Currency."Amount Rounding Precision");
              end;
            TempInvoicePostBuffer."VAT Calculation Type"::"Sales Tax":
              if TempInvoicePostBuffer."Use Tax" then begin
                TempInvoicePostBuffer."VAT Amount" :=
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      TempInvoicePostBuffer."Tax Area Code",TempInvoicePostBuffer."Tax Group Code",
                      TempInvoicePostBuffer."Tax Liable",PurchHeader."Posting Date",
                      TempInvoicePostBuffer.Amount,TempInvoicePostBuffer.Quantity,0));
                if GLSetup."Additional Reporting Currency" <> '' then
                  TempInvoicePostBuffer."VAT Amount (ACY)" :=
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                      TempInvoicePostBuffer."VAT Amount",0);
              end;
          end;

          GLEntryNo := PostInvoicePostBufferLine(PurchHeader,TempInvoicePostBuffer);

          if (TempInvoicePostBuffer."Job No." <> '') and
             (TempInvoicePostBuffer.Type = TempInvoicePostBuffer.Type::"G/L Account")
          then
            JobPostLine.PostPurchaseGLAccounts(TempInvoicePostBuffer,GLEntryNo);

        until TempInvoicePostBuffer.NEXT(-1) = 0;

      TempInvoicePostBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE PostItemTracking@144(PurchHeader@1000 : Record "Purchase Header";PurchLine@1005 : Record "Purchase Line";VAR TempTrackingSpecification@1004 : TEMPORARY Record "Tracking Specification";TrackingSpecificationExists@1002 : Boolean);
    VAR
      PurchRcptLine@1006 : Record "Purch. Rcpt. Line";
      ItemEntryRelation@1003 : Record "Item Entry Relation";
      EndLoop@1001 : Boolean;
      RemQtyToInvoiceCurrLine@1007 : Decimal;
      RemQtyToInvoiceCurrLineBase@1008 : Decimal;
      QtyToBeInvoiced@1010 : Decimal;
      QtyToBeInvoicedBase@1009 : Decimal;
      QtyToInvoiceBaseInTrackingSpec@1011 : Decimal;
    BEGIN
      with PurchHeader do begin
        EndLoop := false;
        if TrackingSpecificationExists then begin
          TempTrackingSpecification.CALCSUMS("Qty. to Invoice (Base)");
          QtyToInvoiceBaseInTrackingSpec := TempTrackingSpecification."Qty. to Invoice (Base)";
          if not TempTrackingSpecification.FINDFIRST then
            TempTrackingSpecification.INIT;
        end;

        if IsCreditDocType then begin
          if (ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship")) or
             (ABS(RemQtyToBeInvoiced) >= ABS(QtyToInvoiceBaseInTrackingSpec)) and (QtyToInvoiceBaseInTrackingSpec <> 0)
          then begin
            ReturnShptLine.RESET;
            case "Document Type" of
              "Document Type"::"Return Order":
                begin
                  ReturnShptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                  ReturnShptLine.SETRANGE("Return Order No.",PurchLine."Document No.");
                  ReturnShptLine.SETRANGE("Return Order Line No.",PurchLine."Line No.");
                end;
              "Document Type"::"Credit Memo":
                begin
                  ReturnShptLine.SETRANGE("Document No.",PurchLine."Return Shipment No.");
                  ReturnShptLine.SETRANGE("Line No.",PurchLine."Return Shipment Line No.");
                end;
            end;
            ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
            if ReturnShptLine.FINDSET(true,false) then begin
              ItemJnlRollRndg := true;
              repeat
                if TrackingSpecificationExists then begin  // Item Tracking
                  ItemEntryRelation.GET(TempTrackingSpecification."Item Ledger Entry No.");
                  ReturnShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                end else
                  ItemEntryRelation."Item Entry No." := ReturnShptLine."Item Shpt. Entry No.";
                ReturnShptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                ReturnShptLine.TESTFIELD(Type,PurchLine.Type);
                ReturnShptLine.TESTFIELD("No.",PurchLine."No.");
                ReturnShptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                ReturnShptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                ReturnShptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                ReturnShptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                ReturnShptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                ReturnShptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");
                UpdateQtyToBeInvoicedForReturnShipment(
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  TrackingSpecificationExists,PurchLine,ReturnShptLine,TempTrackingSpecification);

                if TrackingSpecificationExists then begin
                  TempTrackingSpecification."Quantity actual Handled (Base)" := QtyToBeInvoicedBase;
                  TempTrackingSpecification.MODIFY;
                end;

                if TrackingSpecificationExists then
                  ItemTrackingMgt.AdjustQuantityRounding(
                    RemQtyToBeInvoiced,QtyToBeInvoiced,
                    RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                ReturnShptLine."Quantity Invoiced" :=
                  ReturnShptLine."Quantity Invoiced" - QtyToBeInvoiced;
                ReturnShptLine."Qty. Invoiced (Base)" :=
                  ReturnShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
                ReturnShptLine."Return Qty. Shipped Not Invd." :=
                  ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";
                ReturnShptLine.MODIFY;
                if PurchLine.Type = PurchLine.Type::Item then
                  PostItemJnlLine(
                    PurchHeader,PurchLine,
                    0,0,
                    QtyToBeInvoiced,QtyToBeInvoicedBase,
                    ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification);
                if TrackingSpecificationExists then
                  EndLoop := (TempTrackingSpecification.NEXT = 0) or (RemQtyToBeInvoiced = 0)
                else
                  EndLoop :=
                    (ReturnShptLine.NEXT = 0) or (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Return Qty. to Ship"));
              until EndLoop;
            end else
              ERROR(
                ReturnShipmentInvoicedErr,
                PurchLine."Return Shipment Line No.",PurchLine."Return Shipment No.");
          end;

          if ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") then begin
            if "Document Type" = "Document Type"::"Credit Memo" then
              ERROR(InvoiceGreaterThanReturnShipmentErr,ReturnShptLine."Document No.");
            ERROR(ReturnShipmentLinesDeletedErr);
          end;
        end else begin
          if (ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive")) or
             (ABS(RemQtyToBeInvoiced) >= ABS(QtyToInvoiceBaseInTrackingSpec)) and (QtyToInvoiceBaseInTrackingSpec <> 0)
          then begin
            PurchRcptLine.RESET;
            case "Document Type" of
              "Document Type"::Order:
                begin
                  PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                  PurchRcptLine.SETRANGE("Order No.",PurchLine."Document No.");
                  PurchRcptLine.SETRANGE("Order Line No.",PurchLine."Line No.");
                end;
              "Document Type"::Invoice:
                begin
                  PurchRcptLine.SETRANGE("Document No.",PurchLine."Receipt No.");
                  PurchRcptLine.SETRANGE("Line No.",PurchLine."Receipt Line No.");
                end;
            end;

            PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
            if PurchRcptLine.FINDSET(true,false) then begin
              ItemJnlRollRndg := true;
              repeat
                if TrackingSpecificationExists then begin
                  ItemEntryRelation.GET(TempTrackingSpecification."Item Ledger Entry No.");
                  PurchRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                end else
                  ItemEntryRelation."Item Entry No." := PurchRcptLine."Item Rcpt. Entry No.";
                UpdateRemainingQtyToBeInvoiced(RemQtyToInvoiceCurrLine,RemQtyToInvoiceCurrLineBase,PurchRcptLine);
                PurchRcptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                PurchRcptLine.TESTFIELD(Type,PurchLine.Type);
                PurchRcptLine.TESTFIELD("No.",PurchLine."No.");
                PurchRcptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                PurchRcptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                PurchRcptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                PurchRcptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                PurchRcptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                PurchRcptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");

                UpdateQtyToBeInvoicedForReceipt(
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  TrackingSpecificationExists,PurchLine,PurchRcptLine,TempTrackingSpecification);

                if TrackingSpecificationExists then begin
                  TempTrackingSpecification."Quantity actual Handled (Base)" := QtyToBeInvoicedBase;
                  TempTrackingSpecification.MODIFY;
                end;

                if TrackingSpecificationExists then
                  ItemTrackingMgt.AdjustQuantityRounding(
                    RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
                    RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);

                RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                UpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
                if PurchLine.Type = PurchLine.Type::Item then
                  PostItemJnlLine(
                    PurchHeader,PurchLine,
                    0,0,
                    QtyToBeInvoiced,QtyToBeInvoicedBase,
                    ItemEntryRelation."Item Entry No.",'',TempTrackingSpecification);
                if TrackingSpecificationExists then
                  EndLoop := (TempTrackingSpecification.NEXT = 0) or (RemQtyToBeInvoiced = 0)
                else
                  EndLoop :=
                    (PurchRcptLine.NEXT = 0) or (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive"));
              until EndLoop;
            end else
              ERROR(ReceiptInvoicedErr,PurchLine."Receipt Line No.",PurchLine."Receipt No.");
          end;

          if ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") then begin
            if "Document Type" = "Document Type"::Invoice then
              ERROR(QuantityToInvoiceGreaterErr,PurchRcptLine."Document No.");
            ERROR(ReceiptLinesDeletedErr);
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE PostUpdateOrderLine@142(PurchHeader@1001 : Record "Purchase Header");
    VAR
      TempPurchLine@1000 : TEMPORARY Record "Purchase Line";
    BEGIN
      ResetTempLines(TempPurchLine);
      with TempPurchLine do begin
        SETFILTER(Quantity,'<>0');
        if FINDSET then
          repeat
            if PurchHeader.Receive then begin
              "Quantity Received" += "Qty. to Receive";
              "Qty. Received (Base)" += "Qty. to Receive (Base)";
            end;
            if PurchHeader.Ship then begin
              "Return Qty. Shipped" += "Return Qty. to Ship";
              "Return Qty. Shipped (Base)" += "Return Qty. to Ship (Base)";
            end;
            if PurchHeader.Invoice then begin
              if "Document Type" = "Document Type"::Order then begin
                if ABS("Quantity Invoiced" + "Qty. to Invoice") > ABS("Quantity Received") then begin
                  VALIDATE("Qty. to Invoice","Quantity Received" - "Quantity Invoiced");
                  "Qty. to Invoice (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
                end
              end else
                if ABS("Quantity Invoiced" + "Qty. to Invoice") > ABS("Return Qty. Shipped") then begin
                  VALIDATE("Qty. to Invoice","Return Qty. Shipped" - "Quantity Invoiced");
                  "Qty. to Invoice (Base)" := "Return Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
                end;

              "Quantity Invoiced" := "Quantity Invoiced" + "Qty. to Invoice";
              "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + "Qty. to Invoice (Base)";
              if "Qty. to Invoice" <> 0 then begin
                "Prepmt Amt Deducted" += "Prepmt Amt to Deduct";
                "Prepmt VAT Diff. Deducted" += "Prepmt VAT Diff. to Deduct";
                DecrementPrepmtAmtInvLCY(
                  TempPurchLine,"Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
                "Prepmt Amt to Deduct" := "Prepmt. Amt. Inv." - "Prepmt Amt Deducted";
                "Prepmt VAT Diff. to Deduct" := 0;
              end;
            end;

            UpdateBlanketOrderLine(TempPurchLine,PurchHeader.Receive,PurchHeader.Ship,PurchHeader.Invoice);
            InitOutstanding;

            if WhseHandlingRequired(TempPurchLine) or
               (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank)
            then begin
              if "Document Type" = "Document Type"::"Return Order" then begin
                "Return Qty. to Ship" := 0;
                "Return Qty. to Ship (Base)" := 0;
              end else begin
                "Qty. to Receive" := 0;
                "Qty. to Receive (Base)" := 0;
              end;
              InitQtyToInvoice;
            end else begin
              if "Document Type" = "Document Type"::"Return Order" then
                InitQtyToShip
              else
                InitQtyToReceive2;
            end;
            SetDefaultQuantity;
            ModifyTempLine(TempPurchLine);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostUpdateInvoiceLine@140();
    VAR
      PurchOrderLine@1001 : Record "Purchase Line";
      PurchRcptLine@1002 : Record "Purch. Rcpt. Line";
      SalesOrderLine@1003 : Record "Sales Line";
      TempPurchLine@1000 : TEMPORARY Record "Purchase Line";
    BEGIN
      ResetTempLines(TempPurchLine);
      with TempPurchLine do begin
        SETFILTER("Receipt No.",'<>%1','');
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            PurchRcptLine.GET("Receipt No.","Receipt Line No.");
            PurchOrderLine.GET(
              PurchOrderLine."Document Type"::Order,
              PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
            if Type = Type::"Charge (Item)" then
              UpdatePurchOrderChargeAssgnt(TempPurchLine,PurchOrderLine);
            PurchOrderLine."Quantity Invoiced" += "Qty. to Invoice";
            PurchOrderLine."Qty. Invoiced (Base)" += "Qty. to Invoice (Base)";
            if ABS(PurchOrderLine."Quantity Invoiced") > ABS(PurchOrderLine."Quantity Received") then
              ERROR(InvoiceMoreThanReceivedErr,PurchOrderLine."Document No.");
            if PurchOrderLine."Sales Order Line No." <> 0 then begin // Drop Shipment
              SalesOrderLine.GET(
                SalesOrderLine."Document Type"::Order,
                PurchOrderLine."Sales Order No.",PurchOrderLine."Sales Order Line No.");
              if ABS(PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced") <
                 ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
              then
                ERROR(CannotPostBeforeAssosSalesOrderErr,PurchOrderLine."Sales Order No.");
            end;
            PurchOrderLine.InitQtyToInvoice;
            if PurchOrderLine."Prepayment %" <> 0 then begin
              PurchOrderLine."Prepmt Amt Deducted" += "Prepmt Amt to Deduct";
              PurchOrderLine."Prepmt VAT Diff. Deducted" += "Prepmt VAT Diff. to Deduct";
              DecrementPrepmtAmtInvLCY(
                TempPurchLine,PurchOrderLine."Prepmt. Amount Inv. (LCY)",PurchOrderLine."Prepmt. VAT Amount Inv. (LCY)");
              PurchOrderLine."Prepmt Amt to Deduct" :=
                PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted";
              PurchOrderLine."Prepmt VAT Diff. to Deduct" := 0;
            end;
            PurchOrderLine.InitOutstanding;
            PurchOrderLine.MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostUpdateCreditMemoLine@108();
    VAR
      PurchOrderLine@1002 : Record "Purchase Line";
      ReturnShptLine@1001 : Record "Return Shipment Line";
      TempPurchLine@1000 : TEMPORARY Record "Purchase Line";
    BEGIN
      ResetTempLines(TempPurchLine);
      with TempPurchLine do begin
        SETFILTER("Return Shipment No.",'<>%1','');
        SETFILTER(Type,'<>%1',Type::" ");
        if FINDSET then
          repeat
            ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
            PurchOrderLine.GET(
              PurchOrderLine."Document Type"::"Return Order",
              ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
            if Type = Type::"Charge (Item)" then
              UpdatePurchOrderChargeAssgnt(TempPurchLine,PurchOrderLine);
            PurchOrderLine."Quantity Invoiced" :=
              PurchOrderLine."Quantity Invoiced" + "Qty. to Invoice";
            PurchOrderLine."Qty. Invoiced (Base)" :=
              PurchOrderLine."Qty. Invoiced (Base)" + "Qty. to Invoice (Base)";
            if ABS(PurchOrderLine."Quantity Invoiced") > ABS(PurchOrderLine."Return Qty. Shipped") then
              ERROR(InvoiceMoreThanShippedErr,PurchOrderLine."Document No.");
            PurchOrderLine.InitQtyToInvoice;
            PurchOrderLine.InitOutstanding;
            PurchOrderLine.MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SetPostingFlags@18(VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      with PurchHeader do begin
        case "Document Type" of
          "Document Type"::Order:
            Ship := false;
          "Document Type"::Invoice:
            begin
              Receive := true;
              Invoice := true;
              Ship := false;
            end;
          "Document Type"::"Return Order":
            Receive := false;
          "Document Type"::"Credit Memo":
            begin
              Receive := false;
              Invoice := true;
              Ship := true;
            end;
        end;
        if not (Receive or Invoice or Ship) then
          ERROR(ReceiveInvoiceShipErr);
      end;
    END;

    LOCAL PROCEDURE SetCheckApplToItemEntry@164(PurchLine@1000 : Record "Purchase Line") : Boolean;
    BEGIN
      with PurchLine do
        exit(
          PurchSetup."Exact Cost Reversing Mandatory" and (Type = Type::Item) and
          (((Quantity < 0) and ("Document Type" in ["Document Type"::Order,"Document Type"::Invoice])) or
           ((Quantity > 0) and IsCreditDocType)) and
          ("Job No." = ''));
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforePostPurchaseDoc@114(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforePostCommitPurchaseDoc@115(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR GenJnlPostLine@1001 : Codeunit "Gen. Jnl.-Post Line";PreviewMode@1002 : Boolean;ModifyHeader@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckPurchDoc@1(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterPostPurchaseDoc@116(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR GenJnlPostLine@1001 : Codeunit "Gen. Jnl.-Post Line";PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterUpdatePostingNos@178(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR NoSeriesMgt@1001 : Codeunit NoSeriesManagement);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckMandatoryFields@195(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchInvLineInsert@177(VAR PurchInvLine@1000 : Record "Purch. Inv. Line";VAR PurchInvHeader@1002 : Record "Purch. Inv. Header";VAR PurchLine@1001 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchCrMemoLineInsert@182(VAR PurchCrMemoLine@1000 : Record "Purch. Cr. Memo Line";VAR PurchCrMemoHdr@1002 : Record "Purch. Cr. Memo Hdr.";VAR PurchLine@1001 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFinalizePosting@196(VAR PurchHeader@1000 : Record "Purchase Header";VAR PurchRcptHeader@1001 : Record "Purch. Rcpt. Header";VAR PurchInvHeader@1002 : Record "Purch. Inv. Header";VAR PurchCrMemoHdr@1003 : Record "Purch. Cr. Memo Hdr.";VAR ReturnShptHeader@1004 : Record "Return Shipment Header";VAR GenJnlPostLine@1005 : Codeunit "Gen. Jnl.-Post Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchRcptHeaderInsert@183(VAR PurchRcptHeader@1001 : Record "Purch. Rcpt. Header";VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchRcptLineInsert@192(VAR PurchRcptLine@1001 : Record "Purch. Rcpt. Line";VAR PurchRcptHeader@1002 : Record "Purch. Rcpt. Header";VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchInvHeaderInsert@176(VAR PurchInvHeader@1001 : Record "Purch. Inv. Header";VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchInvLineInsert@189(VAR PurchInvLine@1001 : Record "Purch. Inv. Line";VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";VAR PurchaseLine@1002 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchCrMemoHeaderInsert@187(VAR PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.";VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchCrMemoLineInsert@190(VAR PurchCrMemoLine@1001 : Record "Purch. Cr. Memo Line";VAR PurchCrMemoHdr@1000 : Record "Purch. Cr. Memo Hdr.";VAR PurchLine@1002 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReturnShptHeaderInsert@186(VAR ReturnShptHeader@1001 : Record "Return Shipment Header";VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReturnShptLineInsert@191(VAR ReturnShptLine@1001 : Record "Return Shipment Line";VAR ReturnShptHeader@1002 : Record "Return Shipment Header";VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostVendorEntry@193(VAR GenJnlLine@1003 : Record "Gen. Journal Line";VAR PurchHeader@1000 : Record "Purchase Header";VAR TotalPurchLine@1001 : Record "Purchase Line";VAR TotalPurchLineLCY@1002 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostBalancingEntry@194(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR PurchHeader@1003 : Record "Purchase Header";VAR TotalPurchLine@1002 : Record "Purchase Line";VAR TotalPurchLineLCY@1001 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostInvPostBuffer@6(VAR GenJnlLine@1000 : Record "Gen. Journal Line";VAR InvoicePostBuffer@1001 : Record "Invoice Post. Buffer";VAR PurchHeader@1003 : Record "Purchase Header");
    BEGIN
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromPurchDoc@169(PurchLine@1008 : Record "Purchase Line";NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date);
    VAR
      PostedDeferralHeader@1006 : Record "Posted Deferral Header";
      PostedDeferralLine@1005 : Record "Posted Deferral Line";
      DeferralTemplate@1004 : Record "Deferral Template";
      DeferralAccount@1001 : Code[20];
    BEGIN
      if PurchLine."Deferral Code" = '' then
        exit;

      if DeferralTemplate.GET(PurchLine."Deferral Code") then
        DeferralAccount := DeferralTemplate."Deferral Account";

      if TempDeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      then begin
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader,'','',NewDocumentType,
          NewDocumentNo,NewLineNo,DeferralAccount,PurchLine."Buy-from Vendor No.",PostingDate);
        with TempDeferralLine do begin
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          if FINDSET then begin
            repeat
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
            until NEXT = 0;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@173(PurchHeader@1000 : Record "Purchase Header";PurchLine@1003 : Record "Purchase Line";OriginalDeferralAmount@1002 : Decimal);
    VAR
      DeferralHeader@1004 : Record "Deferral Header";
      DeferralLine@1005 : Record "Deferral Line";
      CurrExchRate@1006 : Record "Currency Exchange Rate";
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      // Populate temp and calculate the LCY amounts for posting
      if PurchHeader."Posting Date" = 0D then
        UseDate := WORKDATE
      else
        UseDate := PurchHeader."Posting Date";

      if DeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      then begin
        TempDeferralHeader := DeferralHeader;
        if PurchLine.Quantity <> PurchLine."Qty. to Invoice" then
          TempDeferralHeader."Amount to Defer" :=
            ROUND(TempDeferralHeader."Amount to Defer" *
              PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");
        TempDeferralHeader."Amount to Defer (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,PurchHeader."Currency Code",
              TempDeferralHeader."Amount to Defer",PurchHeader."Currency Factor"));
        TempDeferralHeader.INSERT;

        with DeferralLine do begin
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          if FINDSET then begin
            TotalDeferralCount := COUNT;
            repeat
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;
              DeferralCount := DeferralCount + 1;

              if DeferralCount = TotalDeferralCount then begin
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              end else begin
                if PurchLine.Quantity <> PurchLine."Qty. to Invoice" then
                  TempDeferralLine.Amount :=
                    ROUND(TempDeferralLine.Amount *
                      PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");

                TempDeferralLine."Amount (LCY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      UseDate,PurchHeader."Currency Code",
                      TempDeferralLine.Amount,PurchHeader."Currency Factor"));
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              end;
              TempDeferralLine.INSERT;
            until NEXT = 0;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE GetAmountRoundingPrecisionInLCY@122(DocType@1001 : Option;DocNo@1002 : Code[20];CurrencyCode@1000 : Code[10]) AmountRoundingPrecision : Decimal;
    VAR
      PurchHeader@1003 : Record "Purchase Header";
    BEGIN
      if CurrencyCode = '' then
        exit(GLSetup."Amount Rounding Precision");
      PurchHeader.GET(DocType,DocNo);
      AmountRoundingPrecision := Currency."Amount Rounding Precision" / PurchHeader."Currency Factor";
      if AmountRoundingPrecision < GLSetup."Amount Rounding Precision" then
        exit(GLSetup."Amount Rounding Precision");
      exit(AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE CollectPurchaseLineReservEntries@185(VAR JobReservEntry@1003 : Record "Reservation Entry";ItemJournalLine@1001 : Record "Item Journal Line");
    VAR
      ReservationEntry@1004 : Record "Reservation Entry";
      ItemJnlLineReserve@1000 : Codeunit "Item Jnl. Line-Reserve";
    BEGIN
      if ItemJournalLine."Job No." <> '' then begin
        JobReservEntry.DELETEALL;
        ItemJnlLineReserve.FindReservEntry(ItemJournalLine,ReservationEntry);
        ReservationEntry.ClearTrackingFilter;
        if ReservationEntry.FINDSET then
          repeat
            JobReservEntry := ReservationEntry;
            JobReservEntry.INSERT;
          until ReservationEntry.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ArchiveSalesOrders@180(VAR TempDropShptPostBuffer@1000 : TEMPORARY Record "Drop Shpt. Post. Buffer");
    VAR
      SalesOrderHeader@1002 : Record "Sales Header";
      SalesOrderLine@1001 : Record "Sales Line";
    BEGIN
      if TempDropShptPostBuffer.FINDSET then begin
        repeat
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            TempDropShptPostBuffer."Order No.");
          TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
          repeat
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
            SalesOrderLine."Qty. to Ship" := TempDropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. to Ship (Base)" := TempDropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.MODIFY;
          until TempDropShptPostBuffer.NEXT = 0;
          SalesPost.ArchiveUnpostedOrder(SalesOrderHeader);
          TempDropShptPostBuffer.SETRANGE("Order No.");
        until TempDropShptPostBuffer.NEXT = 0;
      end;
    END;

    BEGIN
    END.
  }
}

