OBJECT Table 1251 Text-to-Account Mapping
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Mapping Text";
    OnInsert=BEGIN
               CheckMappingText;
             END;

    OnModify=BEGIN
               CheckMappingText;
             END;

    CaptionML=ENU=Text-to-Account Mapping;
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 2   ;   ;Mapping Text        ;Text250       ;OnValidate=BEGIN
                                                                "Mapping Text" := COPYSTR(RecordMatchMgt.Trim("Mapping Text"),1,250);
                                                              END;

                                                   CaptionML=ENU=Mapping Text;
                                                   NotBlank=true }
    { 3   ;   ;Debit Acc. No.      ;Code20        ;TableRelation="G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                      Blocked=CONST(false),
                                                                                      "Direct Posting"=CONST(true));
                                                   CaptionML=ENU=Debit Acc. No. }
    { 4   ;   ;Credit Acc. No.     ;Code20        ;TableRelation="G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                      Blocked=CONST(false),
                                                                                      "Direct Posting"=CONST(true));
                                                   CaptionML=ENU=Credit Acc. No. }
    { 5   ;   ;Bal. Source Type    ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Bal. Source No.",'');
                                                              END;

                                                   CaptionML=ENU=Bal. Source Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account" }
    { 6   ;   ;Bal. Source No.     ;Code20        ;TableRelation=IF ("Bal. Source Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                                   Blocked=CONST(false))
                                                                                                                                   ELSE IF ("Bal. Source Type"=CONST(Customer)) Customer
                                                                                                                                   ELSE IF ("Bal. Source Type"=CONST(Vendor)) Vendor
                                                                                                                                   ELSE IF ("Bal. Source Type"=CONST("Bank Account")) "Bank Account";
                                                   CaptionML=ENU=Bal. Source No. }
    { 7   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. }
  }
  KEYS
  {
    {    ;"Line No."                              ;Clustered=true }
    { false;"Mapping Text","Vendor No."            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecordMatchMgt@1000 : Codeunit "Record Match Mgt.";
      AlreadyExistErr@1001 : TextConst '@@@=%1 is the value currently inserted.;ENU="Entry with Mapping Text=''%1'' already exists."';
      BalAccountNoQst@1002 : TextConst '@@@=%1 is option: Vendor or Customer and %2 is the record value in this field.;ENU=The Bal. Account No. field must have a value if the Bal. Source Type field contains %1.\\Affected Mapping Text: %2. Do you want to quit without saving the data?';
      GLAccountNoQst@1003 : TextConst '@@@=%1 is option: G/L Account and %2 is the record value in this field.;ENU=The Debit Acc. No. field or the Credit Acc. No. field must have a value if the Bal. Source Type field contains %1.\\Affected Mapping Text: %2. Do you want to quit without saving the data?';
      FilterInvalidCharTxt@1004 : TextConst '@@@={Locked};ENU=(&)';

    [External]
    PROCEDURE InsertRec@1(GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      TextToAccMapping@1001 : Record "Text-to-Account Mapping";
      LastLineNo@1002 : Integer;
    BEGIN
      if RecordMatchMgt.Trim(GenJnlLine.Description) <> '' then begin
        TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + RecordMatchMgt.Trim(GenJnlLine.Description));
        if TextToAccMapping.FINDFIRST then
          COPY(TextToAccMapping)
        else begin
          TextToAccMapping.RESET;
          if TextToAccMapping.FINDLAST then
            LastLineNo := TextToAccMapping."Line No.";

          INIT;
          "Line No." := LastLineNo + 10000;
          VALIDATE("Mapping Text",GenJnlLine.Description);
          SetBalSourceType(GenJnlLine);
          if "Bal. Source Type" <> "Bal. Source Type"::"G/L Account" then
            "Bal. Source No." := GenJnlLine."Account No."
          else begin
            "Debit Acc. No." := GenJnlLine."Account No.";
            "Credit Acc. No." := GenJnlLine."Account No.";
          end;

          if "Mapping Text" <> '' then
            INSERT;
        end;

        RESET;
      end;

      PAGE.RUN(PAGE::"Text-to-Account Mapping",Rec);
    END;

    [External]
    PROCEDURE InsertRecFromBankAccReconciliationLine@7(BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line");
    VAR
      TextToAccMapping@1001 : Record "Text-to-Account Mapping";
      LastLineNo@1002 : Integer;
    BEGIN
      if RecordMatchMgt.Trim(BankAccReconciliationLine."Transaction Text") <> '' then begin
        TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + RecordMatchMgt.Trim(BankAccReconciliationLine."Transaction Text"));
        if TextToAccMapping.FINDFIRST then
          COPY(TextToAccMapping)
        else begin
          TextToAccMapping.RESET;
          if TextToAccMapping.FINDLAST then
            LastLineNo := TextToAccMapping."Line No.";

          INIT;
          "Line No." := LastLineNo + 10000;
          VALIDATE("Mapping Text",BankAccReconciliationLine."Transaction Text");

          SetSourceTypeFromReconcLine(BankAccReconciliationLine);
          if "Bal. Source Type" <> "Bal. Source Type"::"G/L Account" then
            "Bal. Source No." := BankAccReconciliationLine."Account No."
          else begin
            "Debit Acc. No." := BankAccReconciliationLine."Account No.";
            "Credit Acc. No." := BankAccReconciliationLine."Account No.";
          end;

          if "Mapping Text" <> '' then
            INSERT;
        end;

        RESET;

        COMMIT;
      end;

      PAGE.RUNMODAL(PAGE::"Text-to-Account Mapping",Rec);
    END;

    [External]
    PROCEDURE GetAccountNo@2(Amount@1000 : Decimal) : Code[20];
    BEGIN
      if Amount >= 0 then
        exit("Debit Acc. No.");

      exit("Credit Acc. No.");
    END;

    [External]
    PROCEDURE GetPaymentDocType@5(VAR PaymentDocType@1002 : Option;ActualSourceType@1005 : Option;Amount@1000 : Decimal);
    VAR
      GenJournalLine@1004 : Record "Gen. Journal Line";
      ExpectedSourceType@1001 : Option;
    BEGIN
      if Amount >= 0 then
        ExpectedSourceType := "Bal. Source Type"::Vendor
      else
        ExpectedSourceType := "Bal. Source Type"::Customer;

      if ExpectedSourceType = ActualSourceType then
        PaymentDocType := GenJournalLine."Document Type"::Payment
      else
        PaymentDocType := GenJournalLine."Document Type"::Refund;
    END;

    [External]
    PROCEDURE GetDocTypeForPmt@4(VAR DocType@1000 : Option;PaymentDocType@1002 : Option);
    VAR
      GenJournalLine@1004 : Record "Gen. Journal Line";
    BEGIN
      case PaymentDocType of
        GenJournalLine."Document Type"::Payment:
          DocType := GenJournalLine."Document Type"::Invoice;
        GenJournalLine."Document Type"::Refund:
          DocType := GenJournalLine."Document Type"::"Credit Memo";
      end;
    END;

    LOCAL PROCEDURE SetBalSourceType@3(GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
      case GenJournalLine."Account Type" of
        GenJournalLine."Account Type"::Customer:
          "Bal. Source Type" := "Bal. Source Type"::Customer;
        GenJournalLine."Account Type"::Vendor:
          "Bal. Source Type" := "Bal. Source Type"::Vendor;
      end;
    END;

    LOCAL PROCEDURE SetSourceTypeFromReconcLine@9(BankAccReconciliationLine@1001 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      case BankAccReconciliationLine."Account Type" of
        BankAccReconciliationLine."Account Type"::Customer:
          "Bal. Source Type" := "Bal. Source Type"::Customer;
        BankAccReconciliationLine."Account Type"::Vendor:
          "Bal. Source Type" := "Bal. Source Type"::Vendor;
      end;
    END;

    [External]
    PROCEDURE IsBalSourceNoEnabled@6() : Boolean;
    BEGIN
      exit(not ("Bal. Source Type" in ["Bal. Source Type"::"G/L Account","Bal. Source Type"::"Bank Account"]));
    END;

    LOCAL PROCEDURE CheckMappingText@8();
    VAR
      TextToAccMapping@1000 : Record "Text-to-Account Mapping";
    BEGIN
      TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + "Mapping Text");
      TextToAccMapping.SETRANGE("Vendor No.","Vendor No.");
      TextToAccMapping.SETFILTER("Line No.",'<>%1',"Line No.");
      if not TextToAccMapping.ISEMPTY then
        ERROR(AlreadyExistErr,"Mapping Text");
    END;

    [External]
    PROCEDURE CheckEntriesAreConsistent@10() : Boolean;
    VAR
      TextToAccMapping@1000 : Record "Text-to-Account Mapping";
    BEGIN
      with TextToAccMapping do begin
        SETFILTER("Bal. Source Type",'%1|%2',"Bal. Source Type"::Vendor,"Bal. Source Type"::Customer);
        SETRANGE("Bal. Source No.",'');
        if FINDFIRST then begin
          if DIALOG.CONFIRM(BalAccountNoQst,true,"Bal. Source Type","Mapping Text")
          then begin
            DELETEALL(true);
            exit(true);
          end;
          exit(false);
        end;

        SETRANGE("Bal. Source Type","Bal. Source Type"::"G/L Account");
        SETRANGE("Debit Acc. No.",'');
        SETRANGE("Credit Acc. No.",'');
        if FINDFIRST then begin
          if DIALOG.CONFIRM(GLAccountNoQst,true,"Bal. Source Type"::"G/L Account","Mapping Text")
          then begin
            DELETEALL(true);
            exit(true);
          end;
          exit(false);
        end;

        SETRANGE("Bal. Source Type","Bal. Source Type"::"Bank Account");
        SETRANGE("Debit Acc. No.",'');
        SETRANGE("Credit Acc. No.",'');
        if FINDFIRST then begin
          if DIALOG.CONFIRM(GLAccountNoQst,true,"Bal. Source Type"::"Bank Account","Mapping Text")
          then begin
            DELETEALL(true);
            exit(true);
          end;
          exit(false);
        end;

        // Exit normally
        exit(true)
      end;
    END;

    [External]
    PROCEDURE SearchEnteriesInText@17(VAR TextToAccountMapping@1000 : Record "Text-to-Account Mapping";LineDescription@1001 : Text;VendorNo@1002 : Code[20]) : Integer;
    VAR
      TempTextToAccountMapping@1003 : TEMPORARY Record "Text-to-Account Mapping";
      TempDefaultTextToAccountMapping@1005 : TEMPORARY Record "Text-to-Account Mapping";
      ResultCount@1004 : Integer;
    BEGIN
      if SearchExactMapping(TextToAccountMapping,LineDescription,VendorNo) then
        exit(1);

      TextToAccountMapping.RESET;
      TextToAccountMapping.SETRANGE("Vendor No.",VendorNo);
      if not TextToAccountMapping.FINDSET then
        exit(ResultCount);

      repeat
        if TextToAccountMapping."Mapping Text" = '' then // Default mapping
          TempDefaultTextToAccountMapping.COPY(TextToAccountMapping)
        else
          if STRPOS(UPPERCASE(LineDescription),UPPERCASE(TextToAccountMapping."Mapping Text")) > 0 then begin
            TempTextToAccountMapping.COPY(TextToAccountMapping);
            TempTextToAccountMapping.INSERT;
          end;
      until TextToAccountMapping.NEXT = 0;

      ResultCount := TempTextToAccountMapping.COUNT;
      if ResultCount = 0 then
        if TempDefaultTextToAccountMapping."Line No." <> 0 then begin
          TextToAccountMapping.COPY(TempDefaultTextToAccountMapping);
          exit(1);
        end;

      if ResultCount <> 1 then
        exit(ResultCount);

      TempTextToAccountMapping.FINDFIRST;
      TextToAccountMapping.COPY(TempTextToAccountMapping);
      exit(ResultCount);
    END;

    LOCAL PROCEDURE SearchExactMapping@13(VAR TextToAccountMapping@1000 : Record "Text-to-Account Mapping";LineDescription@1001 : Text;VendorNo@1002 : Code[20]) : Boolean;
    BEGIN
      TextToAccountMapping.RESET;
      TextToAccountMapping.SETRANGE("Vendor No.",VendorNo);
      TextToAccountMapping.SETFILTER("Mapping Text",'%1','@' + DELCHR(LineDescription,'=',FilterInvalidCharTxt));
      exit(TextToAccountMapping.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

