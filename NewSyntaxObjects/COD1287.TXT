OBJECT Codeunit 1287 Exp. Bank Conv. Ext. Data Hndl
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    Permissions=TableData "Data Exch."=rimd,
                TableData "Bank Data Conv. Service Setup"=r,
                TableData "Service Password"=r;
    OnRun=VAR
            TempPaymentFileTempBlob@1000 : TEMPORARY Record TempBlob;
            FileMgt@1001 : Codeunit "File Management";
            Extension@1002 : Text;
          BEGIN
            ConvertPaymentDataToFormat(TempPaymentFileTempBlob,Rec);

            Extension := GetFileExtension;
            if FileMgt.BLOBExport(TempPaymentFileTempBlob,"Data Exch. Def Code" + Extension,true) = '' then
              ERROR(DownloadFromStreamErr);

            GET("Entry No.");
            "File Content" := TempPaymentFileTempBlob.Blob;
            MODIFY;
          END;

  }
  CODE
  {
    VAR
      BodyContentErr@1007 : TextConst '@@@="%1=XmlTag";ENU=The %1 XML tag was not found, or was found more than once in the body content of the SOAP request.';
      DownloadFromStreamErr@1000 : TextConst 'ENU=The file has not been saved.';
      NoRequestBodyErr@1005 : TextConst 'ENU=The request body is not set.';
      NothingToExportErr@1002 : TextConst 'ENU=There is nothing to export.';
      PaymentDataNotCollectedErr@1004 : TextConst 'ENU=The bank data conversion service has not returned any payment data.\\For more information, go to %1.';
      ResponseNodeTxt@1012 : TextConst '@@@={Locked};ENU=paymentExportBankResponse';
      HasErrorsErr@1013 : TextConst 'ENU=The bank data conversion service has found one or more errors.\\For each line to be exported, resolve the errors that are displayed in the FactBox.\\Choose an error to see more information.';
      IncorrectElementErr@1014 : TextConst 'ENU=There is an incorrect file conversion error element in the response. Reference: %1, error text: %2.';
      BankDataConvServSysErr@1001 : TextConst 'ENU=The bank data conversion service has returned the following error message:';
      AddnlInfoTxt@1008 : TextConst 'ENU=For more information, go to %1.';
      BankDataConvServMgt@1003 : Codeunit "Bank Data Conv. Serv. Mgt.";

    [Internal]
    PROCEDURE ConvertPaymentDataToFormat@9(VAR TempPaymentFileTempBlob@1002 : TEMPORARY Record TempBlob;DataExch@1000 : Record "Data Exch.");
    VAR
      TempRequestBodyTempBlob@1001 : TEMPORARY Record TempBlob;
    BEGIN
      if not DataExch."File Content".HASVALUE then
        ERROR(NoRequestBodyErr);

      TempRequestBodyTempBlob.INIT;
      TempRequestBodyTempBlob.Blob := DataExch."File Content";

      SendDataToConversionService(TempPaymentFileTempBlob,TempRequestBodyTempBlob,DataExch."Entry No.");

      if not TempPaymentFileTempBlob.Blob.HASVALUE then
        ERROR(NothingToExportErr);
    END;

    LOCAL PROCEDURE SendDataToConversionService@1(VAR TempPaymentFileTempBlob@1003 : TEMPORARY Record TempBlob;VAR TempBodyTempBlob@1004 : TEMPORARY Record TempBlob;DataExchEntryNo@1007 : Integer);
    VAR
      BankDataConvServiceSetup@1006 : Record "Bank Data Conv. Service Setup";
      SOAPWebServiceRequestMgt@1001 : Codeunit "SOAP Web Service Request Mgt.";
      BodyInStream@1005 : InStream;
      ResponseInStream@1002 : InStream;
    BEGIN
      BankDataConvServMgt.CheckCredentials;

      PrepareSOAPRequestBody(TempBodyTempBlob);

      TempBodyTempBlob.Blob.CREATEINSTREAM(BodyInStream);

      BankDataConvServiceSetup.GET;

      SOAPWebServiceRequestMgt.SetGlobals(BodyInStream,
        BankDataConvServiceSetup."Service URL",BankDataConvServiceSetup.GetUserName,BankDataConvServiceSetup.GetPassword);

      if not SOAPWebServiceRequestMgt.SendRequestToWebService then
        SOAPWebServiceRequestMgt.ProcessFaultResponse(STRSUBSTNO(AddnlInfoTxt,BankDataConvServiceSetup."Support URL"));

      SOAPWebServiceRequestMgt.GetResponseContent(ResponseInStream);

      CheckIfErrorsOccurred(ResponseInStream,DataExchEntryNo);

      ReadContentFromResponse(TempPaymentFileTempBlob,ResponseInStream);
    END;

    LOCAL PROCEDURE PrepareSOAPRequestBody@12(VAR TempBodyTempBlob@1000 : TEMPORARY Record TempBlob);
    VAR
      XMLDOMManagement@1002 : Codeunit "XML DOM Management";
      BodyContentInputStream@1004 : InStream;
      BodyContentOutputStream@1005 : OutStream;
      BodyContentXmlDoc@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      TempBodyTempBlob.Blob.CREATEINSTREAM(BodyContentInputStream);
      XMLDOMManagement.LoadXMLDocumentFromInStream(BodyContentInputStream,BodyContentXmlDoc);

      AddNamespaceAttribute(BodyContentXmlDoc,'amcpaymentreq');
      AddNamespaceAttribute(BodyContentXmlDoc,'bank');
      AddNamespaceAttribute(BodyContentXmlDoc,'language');

      CLEAR(TempBodyTempBlob.Blob);
      TempBodyTempBlob.Blob.CREATEOUTSTREAM(BodyContentOutputStream);
      BodyContentXmlDoc.Save(BodyContentOutputStream);
    END;

    LOCAL PROCEDURE AddNamespaceAttribute@6(VAR XmlDoc@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ElementTag@1001 : Text);
    VAR
      XMLDOMMgt@1003 : Codeunit "XML DOM Management";
      XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      XMLNodeList := XmlDoc.GetElementsByTagName(ElementTag);
      if XMLNodeList.Count <> 1 then
        ERROR(BodyContentErr,ElementTag);

      XmlNode := XMLNodeList.Item(0);
      if ISNULL(XmlNode) then
        ERROR(BodyContentErr,ElementTag);
      XMLDOMMgt.AddAttribute(XmlNode,'xmlns','');
    END;

    LOCAL PROCEDURE CheckIfErrorsOccurred@8(VAR ResponseInStream@1001 : InStream;DataExchEntryNo@1002 : Integer);
    VAR
      XMLDOMManagement@1003 : Codeunit "XML DOM Management";
      ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMManagement.LoadXMLDocumentFromInStream(ResponseInStream,ResponseXmlDoc);

      if ResponseHasErrors(ResponseXmlDoc) then
        DisplayErrorFromResponse(ResponseXmlDoc,DataExchEntryNo);
    END;

    LOCAL PROCEDURE ResponseHasErrors@3(ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLDOMMgt@1001 : Codeunit "XML DOM Management";
      XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      exit(XMLDOMMgt.FindNodeWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetHeaderErrXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XmlNode));
    END;

    LOCAL PROCEDURE DisplayErrorFromResponse@5(ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DataExchEntryNo@1006 : Integer);
    VAR
      GenJnlLine@1007 : Record "Gen. Journal Line";
      XMLDOMMgt@1003 : Codeunit "XML DOM Management";
      XMLNodeList@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Found@1002 : Boolean;
      ErrorText@1005 : Text;
      i@1004 : Integer;
    BEGIN
      Found := XMLDOMMgt.FindNodesWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetConvErrXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XMLNodeList);
      if Found then begin
        for i := 1 to XMLNodeList.Count do
          InsertPaymentFileError(XMLNodeList.Item(i - 1),DataExchEntryNo);

        GenJnlLine.SETRANGE("Data Exch. Entry No.",DataExchEntryNo);
        GenJnlLine.FINDFIRST;
        if GenJnlLine.HasPaymentFileErrorsInBatch then begin
          COMMIT;
          ERROR(HasErrorsErr);
        end;
      end;

      Found := XMLDOMMgt.FindNodesWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetErrorXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XMLNodeList);

      if Found then begin
        ErrorText := BankDataConvServSysErr;
        for i := 1 to XMLNodeList.Count do
          ErrorText += '\\' + XMLDOMMgt.FindNodeText(XMLNodeList.Item(i - 1),'text') + '\' +
            XMLDOMMgt.FindNodeText(XMLNodeList.Item(i - 1),'hinttext') + '\\' +
            STRSUBSTNO(AddnlInfoTxt,BankDataConvServMgt.GetSupportURL(XMLNodeList.Item(i - 1)));

        ERROR(ErrorText);
      end;
    END;

    LOCAL PROCEDURE InsertPaymentFileError@4(XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";DataExchEntryNo@1004 : Integer);
    VAR
      PaymentExportData@1005 : Record "Payment Export Data";
      GenJnlLine@1003 : Record "Gen. Journal Line";
      XMLDOMMgt@1007 : Codeunit "XML DOM Management";
      PaymentLineId@1001 : Text;
      ErrorText@1006 : Text;
      HintText@1002 : Text;
      SupportURL@1008 : Text;
    BEGIN
      PaymentLineId := XMLDOMMgt.FindNodeText(XmlNode,'referenceid');
      ErrorText := XMLDOMMgt.FindNodeText(XmlNode,'text');
      HintText := XMLDOMMgt.FindNodeText(XmlNode,'hinttext');
      SupportURL := BankDataConvServMgt.GetSupportURL(XmlNode);

      if (ErrorText = '') or (PaymentLineId = '') then
        ERROR(IncorrectElementErr,PaymentLineId,ErrorText);

      with PaymentExportData do begin
        SETRANGE("Data Exch Entry No.",DataExchEntryNo);
        SETRANGE("End-to-End ID",PaymentLineId);
        if FINDFIRST then begin
          GenJnlLine.GET("General Journal Template","General Journal Batch Name","General Journal Line No.");
          GenJnlLine.InsertPaymentFileErrorWithDetails(ErrorText,HintText,SupportURL);
        end else begin
          SETRANGE("End-to-End ID");
          SETRANGE("Payment Information ID",PaymentLineId);
          if not FINDFIRST then
            ERROR(IncorrectElementErr,PaymentLineId,ErrorText);
          GenJnlLine.GET("General Journal Template","General Journal Batch Name","General Journal Line No.");
          GenJnlLine.InsertPaymentFileErrorWithDetails(ErrorText,HintText,SupportURL);
        end;
      end;
    END;

    LOCAL PROCEDURE ReadContentFromResponse@2(VAR TempPaymentFileTempBlob@1001 : TEMPORARY Record TempBlob;ResponseInStream@1002 : InStream);
    VAR
      XMLDOMMgt@1005 : Codeunit "XML DOM Management";
      DataXmlNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Found@1006 : Boolean;
    BEGIN
      XMLDOMMgt.LoadXMLDocumentFromInStream(ResponseInStream,ResponseXmlDoc);

      Found := XMLDOMMgt.FindNodeWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetDataXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,DataXmlNode);
      if not Found then
        ERROR(PaymentDataNotCollectedErr,BankDataConvServMgt.GetSupportURL(DataXmlNode));

      DecodePaymentData(TempPaymentFileTempBlob,DataXmlNode.Value);
    END;

    LOCAL PROCEDURE DecodePaymentData@10(VAR TempPaymentFileTempBlob@1000 : TEMPORARY Record TempBlob;Base64String@1001 : Text);
    VAR
      FileMgt@1004 : Codeunit "File Management";
      Convert@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      File@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileName@1005 : Text;
    BEGIN
      FileName := FileMgt.ServerTempFileName('txt');
      File.WriteAllBytes(FileName,Convert.FromBase64String(Base64String));
      FileMgt.BLOBImportFromServerFile(TempPaymentFileTempBlob,FileName);
    END;

    BEGIN
    END.
  }
}

