OBJECT Codeunit 2201 Webhooks Adapter Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Webhook Subscription"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management";
      AzureADAuthFlow@1001 : Codeunit "Azure AD Auth Flow";
      WebhooksAdapterUriTxt@1007 : TextConst '@@@={locked};ENU=webhooksadapteruri';
      KeyvaultAccessFailedErr@1006 : TextConst 'ENU=Can''t share data right now. The problem is on our end. Please try again later.';
      WebhooksAdapterClientIdTxt@1005 : TextConst '@@@={locked};ENU=webhooksadapterclientid';
      WebhooksAdapterClientSecretTxt@1004 : TextConst '@@@={locked};ENU=webhooksadapterclientsecret';
      WebhooksAdapterResourceUriTxt@1003 : TextConst '@@@={locked};ENU=webhooksadapterresourceuri';
      WebhooksAdapterAuthorityTxt@1002 : TextConst '@@@={locked};ENU=webhooksadapterauthority';

    PROCEDURE GetAccessToken@2(ThrowErrors@1000 : Boolean) Token : Text;
    VAR
      AzureADMgt@1001 : Codeunit "Azure AD Mgt.";
      WebhooksAdapterClientId@1006 : Text;
      WebhooksAdapterClientSecret@1005 : Text;
      WebhooksAdapterResourceUri@1004 : Text;
      WebhooksAdapterAuthority@1003 : Text;
    BEGIN
      if not AzureKeyVaultManagement.GetAzureKeyVaultSecret(WebhooksAdapterClientId,WebhooksAdapterClientIdTxt) or
         not AzureKeyVaultManagement.GetAzureKeyVaultSecret(WebhooksAdapterClientSecret,WebhooksAdapterClientSecretTxt) or
         not AzureKeyVaultManagement.GetAzureKeyVaultSecret(WebhooksAdapterResourceUri,WebhooksAdapterResourceUriTxt) or
         not AzureKeyVaultManagement.GetAzureKeyVaultSecret(WebhooksAdapterAuthority,WebhooksAdapterAuthorityTxt) or
         (WebhooksAdapterClientId = '') or
         (WebhooksAdapterClientSecret = '') or
         (WebhooksAdapterResourceUri = '') or
         (WebhooksAdapterAuthority = '')
      then begin
        if ThrowErrors then
          ERROR(KeyvaultAccessFailedErr);
        Token := '';
        exit;
      end;

      AzureADAuthFlow.Initialize(AzureADMgt.GetRedirectUrl);
      Token :=
        AzureADAuthFlow.AcquireApplicationToken(
          WebhooksAdapterClientId,WebhooksAdapterClientSecret,WebhooksAdapterAuthority,WebhooksAdapterResourceUri);
    END;

    PROCEDURE GetWebhooksAdapterUri@20(ThrowError@1000 : Boolean) : Text;
    VAR
      WebhooksAdapterUri@1001 : Text;
    BEGIN
      if not AzureKeyVaultManagement.GetAzureKeyVaultSecret(WebhooksAdapterUri,WebhooksAdapterUriTxt) then
        if ThrowError then
          ERROR(KeyvaultAccessFailedErr);
      exit(WebhooksAdapterUri);
    END;

    PROCEDURE FindWebhookSubscription@17(VAR WebhookSubscription@1004 : Record "Webhook Subscription";SubscriptionUri@1000 : Text[250]) : Boolean;
    VAR
      WebhookManagement@1002 : Codeunit "Webhook Management";
      EndpointUri@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      EndpointUri := EndpointUri.Uri(SubscriptionUri);
      exit(WebhookManagement.FindWebhookSubscriptionMatchingEndPoint(WebhookSubscription,EndpointUri,0,0));
    END;

    PROCEDURE DeleteWebhookSubscription@14(SubscriptionUri@1002 : Text[250]);
    VAR
      WebhookSubscription@1001 : Record "Webhook Subscription";
    BEGIN
      if FindWebhookSubscription(WebhookSubscription,SubscriptionUri) then
        WebhookSubscription.DELETE(true);
    END;

    PROCEDURE SetAzureKeyVaultManagement@3(NewAzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management");
    BEGIN
      AzureKeyVaultManagement := NewAzureKeyVaultManagement;
    END;

    BEGIN
    END.
  }
}

