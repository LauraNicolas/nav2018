OBJECT Table 1520 Workflow Event
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Workflow Step Argument"=rm;
    OnDelete=BEGIN
               ClearSupportedCombinations;
             END;

    CaptionML=ENU=Workflow Event;
    LookupPageID="Workflow Events";
  }
  FIELDS
  {
    { 1   ;   ;Function Name       ;Code128       ;CaptionML=ENU=Function Name;
                                                   NotBlank=true }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Table));
                                                   CaptionML=ENU=Table ID }
    { 3   ;   ;Description         ;Text250       ;CaptionML=ENU=When }
    { 4   ;   ;Request Page ID     ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Report));
                                                   CaptionML=ENU=Request Page ID }
    { 5   ;   ;Dynamic Req. Page Entity Name;Code20;
                                                   TableRelation="Dynamic Request Page Entity".Name WHERE ("Table ID"=FIELD("Table ID"));
                                                   CaptionML=ENU=Dynamic Req. Page Entity Name }
    { 6   ;   ;Used for Record Change;Boolean     ;CaptionML=ENU=Used for Record Change }
    { 7   ;   ;Independent         ;Boolean       ;CaptionML=ENU=Independent }
  }
  KEYS
  {
    {    ;"Function Name"                         ;Clustered=true }
    {    ;Independent,Description                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EventConditionsCaptionTxt@1000 : TextConst '@@@="%1 = Event description";ENU=Event Conditions - %1';

    [Internal]
    PROCEDURE RunRequestPage@3(VAR ReturnFilters@1002 : Text;Filters@1001 : Text) : Boolean;
    BEGIN
      if "Request Page ID" > 0 then
        exit(RunCustomRequestPage(ReturnFilters,Filters));

      exit(RunDynamicRequestPage(ReturnFilters,Filters));
    END;

    LOCAL PROCEDURE RunCustomRequestPage@4(VAR ReturnFilters@1002 : Text;Filters@1001 : Text) : Boolean;
    BEGIN
      ReturnFilters := REPORT.RUNREQUESTPAGE("Request Page ID",Filters);

      if ReturnFilters = '' then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE RunDynamicRequestPage@5(VAR ReturnFilters@1006 : Text;Filters@1000 : Text) : Boolean;
    VAR
      TableMetadata@1005 : Record "Table Metadata";
      RequestPageParametersHelper@1003 : Codeunit "Request Page Parameters Helper";
      FilterPageBuilder@1002 : FilterPageBuilder;
    BEGIN
      if not TableMetadata.GET("Table ID") then
        exit(false);

      if not RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID") then
        exit(false);

      if Filters <> '' then
        if not RequestPageParametersHelper.SetViewOnDynamicRequestPage(
             FilterPageBuilder,Filters,"Dynamic Req. Page Entity Name","Table ID")
        then
          exit(false);

      FilterPageBuilder.PAGECAPTION := STRSUBSTNO(EventConditionsCaptionTxt,Description);
      if not FilterPageBuilder.RUNMODAL then
        exit(false);

      ReturnFilters :=
        RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID");

      exit(true);
    END;

    [Internal]
    PROCEDURE CreateDefaultRequestPageFilters@6() : Text;
    VAR
      TableMetadata@1005 : Record "Table Metadata";
      RequestPageParametersHelper@1003 : Codeunit "Request Page Parameters Helper";
      FilterPageBuilder@1002 : FilterPageBuilder;
    BEGIN
      if not TableMetadata.GET("Table ID") then
        exit('');

      if not RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID") then
        exit('');

      exit(RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,"Dynamic Req. Page Entity Name","Table ID"));
    END;

    [External]
    PROCEDURE HasPredecessors@1() : Boolean;
    VAR
      WFEventResponseCombination@1000 : Record "WF Event/Response Combination";
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Function Name","Function Name");
      exit(not WFEventResponseCombination.ISEMPTY);
    END;

    [External]
    PROCEDURE MakeDependentOnAllEvents@2();
    VAR
      WorkflowEvent@1001 : Record "Workflow Event";
      WorkflowEventHandling@1000 : Codeunit "Workflow Event Handling";
    BEGIN
      if WorkflowEvent.FINDSET then
        repeat
          WorkflowEventHandling.AddEventPredecessor("Function Name",WorkflowEvent."Function Name");
        until WorkflowEvent.NEXT = 0;
    END;

    LOCAL PROCEDURE ClearSupportedCombinations@7();
    VAR
      WFEventResponseCombination@1000 : Record "WF Event/Response Combination";
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Function Name","Function Name");
      WFEventResponseCombination.DELETEALL(true);

      WFEventResponseCombination.RESET;
      WFEventResponseCombination.SETRANGE("Predecessor Type",WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Function Name","Function Name");
      WFEventResponseCombination.DELETEALL(true);
    END;

    [External]
    PROCEDURE MakeIndependent@8();
    VAR
      WFEventResponseCombination@1002 : Record "WF Event/Response Combination";
    BEGIN
      if not HasPredecessors then
        exit;

      WFEventResponseCombination.MakeEventResponseIndependent(WFEventResponseCombination.Type::"Event","Function Name");
    END;

    BEGIN
    END.
  }
}

