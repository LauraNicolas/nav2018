OBJECT Report 398 Date Compress Vendor Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rimd,
                TableData "Vendor Ledger Entry"=rimd,
                TableData "G/L Register"=rimd,
                TableData "Date Compr. Register"=rimd,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "Detailed Vendor Ledg. Entry"=rimd;
    CaptionML=ENU=Date Compress Vendor Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Vendor Ledger",'',RetainDimText,Text010);
                  VendLedgEntryFilter := COPYSTR("Vendor Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 4114;    ;DataItem;Vendor Ledger Entry ;
               DataItemTable="Vendor Ledger Entry";
               DataItemTableView=SORTING("Vendor No.","Posting Date") WHERE(Open=CONST(false));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not CONFIRM(Text000,false) then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Vend. Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Vendor Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 2 Code");

                               GLentry.LOCKTABLE;
                               NewDtldVendLedgEntry.LOCKTABLE;
                               NewVendLedgEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if GLentry.FINDLAST then;
                               LastEntryNo := GLentry."Entry No.";
                               NextTransactionNo := GLentry."Transaction No." + 1;
                               if NewDtldVendLedgEntry.FINDLAST then;
                               LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  VendLedgEntry2 := "Vendor Ledger Entry";
                                  with VendLedgEntry2 do begin
                                    if not CompressDetails("Vendor Ledger Entry") then
                                      CurrReport.SKIP;
                                    SETCURRENTKEY("Vendor No.","Posting Date");
                                    COPYFILTERS("Vendor Ledger Entry");
                                    SETRANGE("Vendor No.","Vendor No.");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,true));
                                    SETRANGE("Vendor Posting Group","Vendor Posting Group");
                                    SETRANGE("Currency Code","Currency Code");
                                    SETRANGE("Document Type","Document Type");

                                    if RetainNo(FIELDNO("Document No.")) then
                                      SETRANGE("Document No.","Document No.");
                                    if RetainNo(FIELDNO("Buy-from Vendor No.")) then
                                      SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
                                    if RetainNo(FIELDNO("Purchaser Code")) then
                                      SETRANGE("Purchaser Code","Purchaser Code");
                                    if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");

                                    CALCFIELDS(Amount);
                                    if Amount >= 0 then
                                      SummarizePositive := true
                                    else
                                      SummarizePositive := false;

                                    InitNewEntry(NewVendLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,false,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                                    while NEXT <> 0 do begin
                                      CALCFIELDS(Amount);
                                      if ((Amount >= 0) and SummarizePositive) or
                                         ((Amount < 0) and (not SummarizePositive))
                                      then
                                        if CompressDetails(VendLedgEntry2) then begin
                                          DimBufMgt.CollectDimEntryNo(
                                            TempSelectedDim,"Dimension Set ID","Entry No.",
                                            ComprDimEntryNo,true,DimEntryNo);
                                          if DimEntryNo = ComprDimEntryNo then
                                            SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                                        end;
                                    end;

                                    InsertNewEntry(NewVendLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields="Vendor No.","Vendor Posting Group","Currency Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies a text that accompanies the entries that result from the compression. The default description is Date Compressed.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdVendLedgEntry.Description }

      { 1907651001;2;Group  ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  Name=Buy-from Vendor No.;
                  CaptionML=ENU=Buy-from Vendor No.;
                  ToolTipML=ENU=Specifies a filter for the vendor or vendors that you want to compress entries for.;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  Name=Purchaser Code;
                  CaptionML=ENU=Purchaser Code;
                  ToolTipML=ENU=Specifies the purchaser for whom vendor ledger entries are date compressed;
                  ApplicationArea=#Suite;
                  SourceExpr=Retain[3] }

      { 8   ;2   ;Field     ;
                  Name=Retain Dimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Vendor Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing vendor ledger entries...\\';
      Text005@1005 : TextConst 'ENU=Vendor No.           #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      GLReg@1014 : Record "G/L Register";
      EntrdVendLedgEntry@1015 : Record "Vendor Ledger Entry";
      NewVendLedgEntry@1016 : Record "Vendor Ledger Entry";
      VendLedgEntry2@1017 : Record "Vendor Ledger Entry";
      NewDtldVendLedgEntry@1018 : Record "Detailed Vendor Ledg. Entry";
      DtldVendLedgEntryBuffer@1019 : TEMPORARY Record "Detailed Vendor Ledg. Entry";
      GLentry@1020 : Record "G/L Entry";
      SelectedDim@1021 : Record "Selected Dimension";
      TempSelectedDim@1022 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1023 : Record "Dimension Selection Buffer";
      DateComprMgt@1024 : Codeunit DateComprMgt;
      DimBufMgt@1025 : Codeunit "Dimension Buffer Management";
      DimMgt@1026 : Codeunit DimensionManagement;
      Window@1027 : Dialog;
      VendLedgEntryFilter@1028 : Text[250];
      NoOfFields@1029 : Integer;
      Retain@1030 : ARRAY [10] OF Boolean;
      FieldNumber@1031 : ARRAY [10] OF Integer;
      FieldNameArray@1032 : ARRAY [10] OF Text[100];
      LastEntryNo@1033 : Integer;
      NextTransactionNo@1034 : Integer;
      NoOfDeleted@1035 : Integer;
      LastDtldEntryNo@1036 : Integer;
      LastTmpDtldEntryNo@1037 : Integer;
      GLRegExists@1038 : Boolean;
      i@1039 : Integer;
      ComprDimEntryNo@1040 : Integer;
      DimEntryNo@1041 : Integer;
      RetainDimText@1042 : Text[250];
      SummarizePositive@1043 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if GLReg.FIND('+') then;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Vendor Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        VendLedgEntryFilter,GLReg."No.",SourceCodeSetup."Compress Vend. Ledger");

      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      GLRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record "G/L Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      GLentry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLentry."Entry No." := LastEntryNo;
      GLentry."Posting Date" := TODAY;
      GLentry.Description := EntrdVendLedgEntry.Description;
      GLentry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      GLentry."System-Created Entry" := true;
      GLentry."User ID" := USERID;
      GLentry."Transaction No." := NextTransactionNo;
      GLentry.INSERT;
      GLentry.CONSISTENT(GLentry.Amount = 0);
      GLReg."To Entry No." := GLentry."Entry No.";

      if GLRegExists then begin
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := true;
      end;
      COMMIT;

      GLentry.LOCKTABLE;
      NewDtldVendLedgEntry.LOCKTABLE;
      NewVendLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      if GLentry.FINDLAST then;
      if NewVendLedgEntry.FIND('+') then;
      if (LastEntryNo <> GLentry."Entry No.") or
         (LastEntryNo <> NewVendLedgEntry."Entry No." + 1)
      then begin
        LastEntryNo := GLentry."Entry No.";
        NextTransactionNo := GLentry."Transaction No." + 1;
        InitRegisters;
      end;
      if NewDtldVendLedgEntry.FINDLAST then;
      LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewVendLedgEntry@1000 : Record "Vendor Ledger Entry";VendLedgEntry@1001 : Record "Vendor Ledger Entry");
    VAR
      DtldVendLedgEntry@1003 : Record "Detailed Vendor Ledg. Entry";
    BEGIN
      with VendLedgEntry do begin
        NewVendLedgEntry."Purchase (LCY)" := NewVendLedgEntry."Purchase (LCY)" + "Purchase (LCY)";
        NewVendLedgEntry."Inv. Discount (LCY)" := NewVendLedgEntry."Inv. Discount (LCY)" + "Inv. Discount (LCY)";
        NewVendLedgEntry."Original Pmt. Disc. Possible" :=
          NewVendLedgEntry."Original Pmt. Disc. Possible" + "Original Pmt. Disc. Possible";
        NewVendLedgEntry."Remaining Pmt. Disc. Possible" :=
          NewVendLedgEntry."Remaining Pmt. Disc. Possible" + "Remaining Pmt. Disc. Possible";
        NewVendLedgEntry."Closed by Amount (LCY)" :=
          NewVendLedgEntry."Closed by Amount (LCY)" + "Closed by Amount (LCY)";

        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.","Entry No.");
        if DtldVendLedgEntry.FIND('-') then begin
          repeat
            SummarizeDtldEntry(DtldVendLedgEntry,NewVendLedgEntry);
          until DtldVendLedgEntry.NEXT = 0;
          DtldVendLedgEntry.DELETEALL;
        end;

        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      VendLedgEntry@1000 : Record "Vendor Ledger Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      VendLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,VendLedgEntryNo) then begin
        InitNewEntry(NewVendLedgEntry);
        repeat
          VendLedgEntry.GET(VendLedgEntryNo);
          SummarizeEntry(NewVendLedgEntry,VendLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,VendLedgEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewVendLedgEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewVendLedgEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewVendLedgEntry@1000 : Record "Vendor Ledger Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      with VendLedgEntry2 do begin
        NewVendLedgEntry.INIT;
        NewVendLedgEntry."Entry No." := LastEntryNo;
        NewVendLedgEntry."Vendor No." := "Vendor No.";
        NewVendLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewVendLedgEntry.Description := EntrdVendLedgEntry.Description;
        NewVendLedgEntry."Vendor Posting Group" := "Vendor Posting Group";
        NewVendLedgEntry."Currency Code" := "Currency Code";
        NewVendLedgEntry."Document Type" := "Document Type";
        NewVendLedgEntry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
        NewVendLedgEntry."User ID" := USERID;
        NewVendLedgEntry."Transaction No." := NextTransactionNo;

        if RetainNo(FIELDNO("Document No.")) then
          NewVendLedgEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Buy-from Vendor No.")) then
          NewVendLedgEntry."Buy-from Vendor No." := "Buy-from Vendor No.";
        if RetainNo(FIELDNO("Purchaser Code")) then
          NewVendLedgEntry."Purchaser Code" := "Purchaser Code";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewVendLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewVendLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewVendLedgEntry."Vendor No.");
        Window.UPDATE(2,NewVendLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewVendLedgEntry@1000 : Record "Vendor Ledger Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewVendLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewVendLedgEntry.INSERT;
      InsertDtldEntries;
    END;

    LOCAL PROCEDURE CompressDetails@8(VendLedgEntry@1000 : Record "Vendor Ledger Entry") : Boolean;
    VAR
      DtldVendLedgEntry@1001 : Record "Detailed Vendor Ledg. Entry";
    BEGIN
      DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Posting Date");
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      if EntrdDateComprReg."Starting Date" <> 0D then
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '..%1|%2..',
            CALCDATE('<-1D>',EntrdDateComprReg."Starting Date"),
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")))
      else
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '%1..',
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));

      exit(not DtldVendLedgEntry.FINDLAST);
    END;

    LOCAL PROCEDURE SummarizeDtldEntry@9(VAR DtldVendLedgEntry@1000 : Record "Detailed Vendor Ledg. Entry";VAR NewVendLedgEntry@1001 : Record "Vendor Ledger Entry");
    VAR
      NewEntry@1003 : Boolean;
      PostingDate@1004 : Date;
    BEGIN
      DtldVendLedgEntryBuffer.SETFILTER(
        "Posting Date",
        DateComprMgt.GetDateFilter(DtldVendLedgEntry."Posting Date",EntrdDateComprReg,true));
      PostingDate := DtldVendLedgEntryBuffer.GETRANGEMIN("Posting Date");
      DtldVendLedgEntryBuffer.SETRANGE("Posting Date",PostingDate);
      DtldVendLedgEntryBuffer.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type");
      if RetainNo("Vendor Ledger Entry".FIELDNO("Document No.")) then
        DtldVendLedgEntryBuffer.SETRANGE("Document No.","Vendor Ledger Entry"."Document No.");
      if RetainNo("Vendor Ledger Entry".FIELDNO("Buy-from Vendor No.")) then
        DtldVendLedgEntryBuffer.SETRANGE("Vendor No.","Vendor Ledger Entry"."Buy-from Vendor No.");
      if RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 1 Code")) then
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 1","Vendor Ledger Entry"."Global Dimension 1 Code");
      if RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 2 Code")) then
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 2","Vendor Ledger Entry"."Global Dimension 2 Code");

      if not DtldVendLedgEntryBuffer.FIND('-') then begin
        DtldVendLedgEntryBuffer.RESET;
        CLEAR(DtldVendLedgEntryBuffer);

        LastTmpDtldEntryNo := LastTmpDtldEntryNo + 1;
        DtldVendLedgEntryBuffer."Entry No." := LastTmpDtldEntryNo;
        DtldVendLedgEntryBuffer."Posting Date" := PostingDate;
        DtldVendLedgEntryBuffer."Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Initial Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Document No." := NewVendLedgEntry."Document No.";
        DtldVendLedgEntryBuffer."Entry Type" := DtldVendLedgEntry."Entry Type";
        DtldVendLedgEntryBuffer."Vendor Ledger Entry No." := NewVendLedgEntry."Entry No.";
        DtldVendLedgEntryBuffer."Vendor No." := NewVendLedgEntry."Vendor No.";
        DtldVendLedgEntryBuffer."Currency Code" := NewVendLedgEntry."Currency Code";
        DtldVendLedgEntryBuffer."User ID" := NewVendLedgEntry."User ID";
        DtldVendLedgEntryBuffer."Source Code" := NewVendLedgEntry."Source Code";
        DtldVendLedgEntryBuffer."Transaction No." := NewVendLedgEntry."Transaction No.";
        DtldVendLedgEntryBuffer."Journal Batch Name" := NewVendLedgEntry."Journal Batch Name";
        DtldVendLedgEntryBuffer."Reason Code" := NewVendLedgEntry."Reason Code";
        DtldVendLedgEntryBuffer."Initial Entry Due Date" := NewVendLedgEntry."Due Date";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 1" := NewVendLedgEntry."Global Dimension 1 Code";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 2" := NewVendLedgEntry."Global Dimension 2 Code";

        NewEntry := true;
      end;

      DtldVendLedgEntryBuffer.Amount :=
        DtldVendLedgEntryBuffer.Amount + DtldVendLedgEntry.Amount;
      DtldVendLedgEntryBuffer."Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Amount (LCY)" + DtldVendLedgEntry."Amount (LCY)";
      DtldVendLedgEntryBuffer."Debit Amount" :=
        DtldVendLedgEntryBuffer."Debit Amount" + DtldVendLedgEntry."Debit Amount";
      DtldVendLedgEntryBuffer."Credit Amount" :=
        DtldVendLedgEntryBuffer."Credit Amount" + DtldVendLedgEntry."Credit Amount";
      DtldVendLedgEntryBuffer."Debit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Debit Amount (LCY)" + DtldVendLedgEntry."Debit Amount (LCY)";
      DtldVendLedgEntryBuffer."Credit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Credit Amount (LCY)" + DtldVendLedgEntry."Credit Amount (LCY)";

      if NewEntry then
        DtldVendLedgEntryBuffer.INSERT
      else
        DtldVendLedgEntryBuffer.MODIFY;
    END;

    LOCAL PROCEDURE InsertDtldEntries@20();
    BEGIN
      DtldVendLedgEntryBuffer.RESET;
      if DtldVendLedgEntryBuffer.FIND('-') then
        repeat
          if ((DtldVendLedgEntryBuffer.Amount <> 0) or
              (DtldVendLedgEntryBuffer."Amount (LCY)" <> 0) or
              (DtldVendLedgEntryBuffer."Debit Amount" <> 0) or
              (DtldVendLedgEntryBuffer."Credit Amount" <> 0) or
              (DtldVendLedgEntryBuffer."Debit Amount (LCY)" <> 0) or
              (DtldVendLedgEntryBuffer."Credit Amount (LCY)" <> 0))
          then begin
            LastDtldEntryNo := LastDtldEntryNo + 1;

            NewDtldVendLedgEntry := DtldVendLedgEntryBuffer;
            NewDtldVendLedgEntry."Entry No." := LastDtldEntryNo;
            NewDtldVendLedgEntry.INSERT(true);
          end;
        until DtldVendLedgEntryBuffer.NEXT = 0;
      DtldVendLedgEntryBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      if EntrdDateComprReg."Ending Date" = 0D then
        EntrdDateComprReg."Ending Date" := TODAY;
      if EntrdVendLedgEntry.Description = '' then
        EntrdVendLedgEntry.Description := Text009;

      with "Vendor Ledger Entry" do begin
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Buy-from Vendor No."),FIELDCAPTION("Buy-from Vendor No."));
        InsertField(FIELDNO("Purchaser Code"),FIELDCAPTION("Purchaser Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
      end;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Vendor Ledger",'');
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1000 : Date;EndingDate@1001 : Date;PeriodLength@1002 : Option;Description@1004 : Text[50];RetainDocumentNo@1005 : Boolean;RetainBuyfromVendorNo@1006 : Boolean;RetainPurchaserCode@1007 : Boolean;RetainDimensionText@1003 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdVendLedgEntry.Description := Description;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainBuyfromVendorNo;
      Retain[3] := RetainPurchaserCode;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

