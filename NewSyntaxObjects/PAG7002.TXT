OBJECT Page 7002 Sales Prices
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Prices;
    SaveValues=true;
    SourceTable="Sales Price";
    DataCaptionExpr=GetCaption;
    DelayedInsert=true;
    PageType=List;
    ShowFilter=false;
    OnInit=BEGIN
             SalesCodeFilterCtrlEnable := true;
             SalesCodeControlEditable := true;
             IsLookupMode := CurrPage.LOOKUPMODE;
           END;

    OnOpenPage=BEGIN
                 IsOnMobile := CURRENTCLIENTTYPE = CLIENTTYPE::Phone;
                 GetRecFilters;
                 SetRecFilters;
                 SetEditableFields;
               END;

    OnAfterGetCurrRecord=BEGIN
                           SalesCodeControlEditable := SetSalesCodeEditable("Sales Type");
                         END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      Name=Filtering;
                      ActionContainerType=ActionItems }
      { 5       ;1   ;Action    ;
                      Name=Filter;
                      CaptionML=ENU=Filter;
                      ToolTipML=ENU=Apply the filter.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=IsOnMobile;
                      Image=Filter;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterLines;
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=ClearFilter;
                      CaptionML=ENU=Clear Filter;
                      ToolTipML=ENU=Clear filter.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=IsOnMobile;
                      Image=ClearFilter;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 RESET;
                                 UpdateBasicRecFilters;
                                 EVALUATE(StartingDateFilter,GETFILTER("Starting Date"));
                                 SetEditableFields;
                               END;
                                }
      { 48      ;1   ;Action    ;
                      Name=CopyPrices;
                      CaptionML=ENU=Copy Prices;
                      ToolTipML=ENU=Select prices and press OK to copy them to Customer No.;
                      ApplicationArea=#Basic,#Suite;
                      Visible=NOT IsLookupMode;
                      Image=Copy;
                      OnAction=BEGIN
                                 CopyPrices;
                                 CurrPage.UPDATE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                Visible=NOT IsOnMobile }

    { 28  ;2   ;Field     ;
                Name=SalesTypeFilter;
                CaptionML=ENU=Sales Type Filter;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                OptionCaptionML=ENU=Customer,Customer Price Group,All Customers,Campaign,None;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesTypeFilter;
                OnValidate=BEGIN
                             SalesTypeFilterOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 26  ;2   ;Field     ;
                Name=SalesCodeFilterCtrl;
                CaptionML=ENU=Sales Code Filter;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SalesCodeFilter;
                Enabled=SalesCodeFilterCtrlEnable;
                OnValidate=BEGIN
                             SalesCodeFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           CustList@1005 : Page "Customer List";
                           CustPriceGrList@1004 : Page "Customer Price Groups";
                           CampaignList@1002 : Page "Campaign List";
                         BEGIN
                           if SalesTypeFilter = SalesTypeFilter::"All Customers" then
                             exit;

                           case SalesTypeFilter of
                             SalesTypeFilter::Customer:
                               begin
                                 CustList.LOOKUPMODE := true;
                                 if CustList.RUNMODAL = ACTION::LookupOK then
                                   Text := CustList.GetSelectionFilter
                                 else
                                   exit(false);
                               end;
                             SalesTypeFilter::"Customer Price Group":
                               begin
                                 CustPriceGrList.LOOKUPMODE := true;
                                 if CustPriceGrList.RUNMODAL = ACTION::LookupOK then
                                   Text := CustPriceGrList.GetSelectionFilter
                                 else
                                   exit(false);
                               end;
                             SalesTypeFilter::Campaign:
                               begin
                                 CampaignList.LOOKUPMODE := true;
                                 if CampaignList.RUNMODAL = ACTION::LookupOK then
                                   Text := CampaignList.GetSelectionFilter
                                 else
                                   exit(false);
                               end;
                           end;

                           exit(true);
                         END;

                ImplicitType=Text }

    { 10  ;2   ;Field     ;
                Name=ItemNoFilterCtrl;
                CaptionML=ENU=Item No. Filter;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ItemNoFilter;
                OnValidate=BEGIN
                             ItemNoFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page "Item List";
                         BEGIN
                           ItemList.LOOKUPMODE := true;
                           if ItemList.RUNMODAL = ACTION::LookupOK then
                             Text := ItemList.GetSelectionFilter
                           else
                             exit(false);

                           exit(true);
                         END;

                ImplicitType=Text }

    { 34  ;2   ;Field     ;
                Name=StartingDateFilter;
                CaptionML=ENU=Starting Date Filter;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=StartingDateFilter;
                OnValidate=VAR
                             ApplicationMgt@1030 : Codeunit ApplicationManagement;
                           BEGIN
                             if ApplicationMgt.MakeDateFilter(StartingDateFilter) = 0 then;
                             StartingDateFilterOnAfterValid;
                           END;

                ImplicitType=Text30 }

    { 38  ;2   ;Field     ;
                Name=SalesCodeFilterCtrl2;
                CaptionML=ENU=Currency Code Filter;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                ApplicationArea=#Suite;
                SourceExpr=CurrencyCodeFilter;
                OnValidate=BEGIN
                             CurrencyCodeFilterOnAfterValid;
                           END;

                OnLookup=VAR
                           CurrencyList@1000 : Page Currencies;
                         BEGIN
                           CurrencyList.LOOKUPMODE := true;
                           if CurrencyList.RUNMODAL = ACTION::LookupOK then
                             Text := CurrencyList.GetSelectionFilter
                           else
                             exit(false);

                           exit(true);
                         END;

                ImplicitType=Text }

    { 9   ;1   ;Group     ;
                Name=Filters;
                CaptionML=ENU=Filters;
                Visible=IsOnMobile;
                GroupType=Group }

    { 11  ;2   ;Field     ;
                Name=GetFilterDescription;
                ToolTipML=ENU=Specifies a filter for which sales prices to display.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetFilterDescription;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               FilterLines;
                               CurrPage.UPDATE(false);
                             END;
                              }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 32  ;2   ;Field     ;
                Name=Sales Type;
                ToolTipML=ENU=Specifies the sales price type, which defines whether the price is for an individual, group, all customers, or a campaign.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales Type";
                Editable=SalesTypeControlEditable;
                OnValidate=BEGIN
                             SalesCodeControlEditable := SetSalesCodeEditable("Sales Type");
                           END;

                ImplicitType=Option }

    { 18  ;2   ;Field     ;
                Name=Sales Code;
                ToolTipML=ENU=Specifies the code that belongs to the Sales Type.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales Code";
                Editable=SalesCodeControlEditable;
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the number of the item for which the sales price is valid.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Item No.";
                Editable=ItemNoControlEditable;
                ImplicitType=Code20 }

    { 30  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 14  ;2   ;Field     ;
                Name=Currency Code;
                ToolTipML=ENU=Specifies the code for the currency of the sales price.;
                ApplicationArea=#Advanced;
                SourceExpr="Currency Code";
                Visible=FALSE;
                Editable=CurrencyCodeControlEditable;
                ImplicitType=Code10 }

    { 8   ;2   ;Field     ;
                Name=Unit of Measure Code;
                ToolTipML=ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit of Measure Code";
                ImplicitType=Code10 }

    { 12  ;2   ;Field     ;
                Name=Minimum Quantity;
                ToolTipML=ENU=Specifies the minimum sales quantity required to warrant the sales price.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Minimum Quantity";
                ImplicitType=Decimal }

    { 6   ;2   ;Field     ;
                Name=Unit Price;
                ToolTipML=ENU=Specifies the sales price per unit.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit Price";
                ImplicitType=Decimal }

    { 36  ;2   ;Field     ;
                Name=Starting Date;
                ToolTipML=ENU=Specifies the date from which the sales price is valid.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Starting Date";
                Editable=StartingDateControlEditable;
                ImplicitType=Date }

    { 2   ;2   ;Field     ;
                Name=Ending Date;
                ToolTipML=ENU=Specifies the calendar date when the sales price agreement ends.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ending Date";
                ImplicitType=Date }

    { 16  ;2   ;Field     ;
                Name=Price Includes VAT;
                ToolTipML=ENU=Specifies if the sales price includes VAT.;
                ApplicationArea=#Advanced;
                SourceExpr="Price Includes VAT";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 25  ;2   ;Field     ;
                Name=Allow Line Disc.;
                ToolTipML=ENU=Specifies if a line discount will be calculated when the sales price is offered.;
                ApplicationArea=#Advanced;
                SourceExpr="Allow Line Disc.";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 42  ;2   ;Field     ;
                Name=Allow Invoice Disc.;
                ToolTipML=ENU=Specifies if an invoice discount will be calculated when the sales price is offered.;
                ApplicationArea=#Advanced;
                SourceExpr="Allow Invoice Disc.";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 46  ;2   ;Field     ;
                Name=VAT Bus. Posting Gr. (Price);
                ToolTipML=ENU=Specifies the VAT business posting group for customers for whom you want the sales price (which includes VAT) to apply.;
                ApplicationArea=#Advanced;
                SourceExpr="VAT Bus. Posting Gr. (Price)";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Cust@1001 : Record Customer;
      CustPriceGr@1005 : Record "Customer Price Group";
      Campaign@1008 : Record Campaign;
      SalesTypeFilter@1000 : 'Customer,"Customer Price Group","All Customers",Campaign,None';
      SalesCodeFilter@1003 : Text;
      ItemNoFilter@1011 : Text;
      StartingDateFilter@1006 : Text[30];
      CurrencyCodeFilter@1002 : Text;
      Text000@1007 : TextConst 'ENU=All Customers';
      Text001@1009 : TextConst 'ENU=No %1 within the filter %2.';
      SalesCodeFilterCtrlEnable@19013164 : Boolean INDATASET;
      IsOnMobile@1004 : Boolean;
      IsLookupMode@1017 : Boolean;
      SalesTypeControlEditable@1012 : Boolean;
      SalesCodeControlEditable@1013 : Boolean;
      ItemNoControlEditable@1014 : Boolean;
      StartingDateControlEditable@1015 : Boolean;
      CurrencyCodeControlEditable@1016 : Boolean;
      MultipleCustomersSelectedErr@1018 : TextConst 'ENU=More than one customer uses these sales prices. To copy prices, the Sales Code Filter field must contain one customer only.';
      IncorrectSalesTypeToCopyPricesErr@1010 : TextConst 'ENU=To copy sales prices, The Sales Type Filter field must contain Customer.';

    LOCAL PROCEDURE GetRecFilters@2();
    BEGIN
      if GETFILTERS <> '' then
        UpdateBasicRecFilters;

      EVALUATE(StartingDateFilter,GETFILTER("Starting Date"));
    END;

    LOCAL PROCEDURE UpdateBasicRecFilters@17();
    BEGIN
      if GETFILTER("Sales Type") <> '' then
        SalesTypeFilter := GetSalesTypeFilter
      else
        SalesTypeFilter := SalesTypeFilter::None;

      SalesCodeFilter := GETFILTER("Sales Code");
      ItemNoFilter := GETFILTER("Item No.");
      CurrencyCodeFilter := GETFILTER("Currency Code");
    END;

    [Internal]
    PROCEDURE SetRecFilters@1();
    BEGIN
      SalesCodeFilterCtrlEnable := true;

      if SalesTypeFilter <> SalesTypeFilter::None then
        SETRANGE("Sales Type",SalesTypeFilter)
      else
        SETRANGE("Sales Type");

      if SalesTypeFilter in [SalesTypeFilter::"All Customers",SalesTypeFilter::None] then begin
        SalesCodeFilterCtrlEnable := false;
        SalesCodeFilter := '';
      end;

      if SalesCodeFilter <> '' then
        SETFILTER("Sales Code",SalesCodeFilter)
      else
        SETRANGE("Sales Code");

      if StartingDateFilter <> '' then
        SETFILTER("Starting Date",StartingDateFilter)
      else
        SETRANGE("Starting Date");

      if ItemNoFilter <> '' then begin
        SETFILTER("Item No.",ItemNoFilter);
      end else
        SETRANGE("Item No.");

      if CurrencyCodeFilter <> '' then begin
        SETFILTER("Currency Code",CurrencyCodeFilter);
      end else
        SETRANGE("Currency Code");

      case SalesTypeFilter of
        SalesTypeFilter::Customer:
          CheckFilters(DATABASE::Customer,SalesCodeFilter);
        SalesTypeFilter::"Customer Price Group":
          CheckFilters(DATABASE::"Customer Price Group",SalesCodeFilter);
        SalesTypeFilter::Campaign:
          CheckFilters(DATABASE::Campaign,SalesCodeFilter);
      end;
      CheckFilters(DATABASE::Item,ItemNoFilter);
      CheckFilters(DATABASE::Currency,CurrencyCodeFilter);

      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE GetCaption@3() : Text;
    BEGIN
      if IsOnMobile then
        exit('');

      exit(GetFilterDescription);
    END;

    LOCAL PROCEDURE GetFilterDescription@7() : Text;
    VAR
      ObjTranslation@1000 : Record "Object Translation";
      SourceTableName@1002 : Text;
      SalesSrcTableName@1003 : Text;
      Description@1001 : Text;
    BEGIN
      GetRecFilters;

      SourceTableName := '';
      if ItemNoFilter <> '' then
        SourceTableName := ObjTranslation.TranslateObject(ObjTranslation."Object Type"::Table,27);

      SalesSrcTableName := '';
      case SalesTypeFilter of
        SalesTypeFilter::Customer:
          begin
            SalesSrcTableName := ObjTranslation.TranslateObject(ObjTranslation."Object Type"::Table,18);
            Cust."No." := COPYSTR(SalesCodeFilter,1,MAXSTRLEN(Cust."No."));
            if Cust.FIND then
              Description := Cust.Name;
          end;
        SalesTypeFilter::"Customer Price Group":
          begin
            SalesSrcTableName := ObjTranslation.TranslateObject(ObjTranslation."Object Type"::Table,6);
            CustPriceGr.Code := COPYSTR(SalesCodeFilter,1,MAXSTRLEN(CustPriceGr.Code));
            if CustPriceGr.FIND then
              Description := CustPriceGr.Description;
          end;
        SalesTypeFilter::Campaign:
          begin
            SalesSrcTableName := ObjTranslation.TranslateObject(ObjTranslation."Object Type"::Table,5071);
            Campaign."No." := COPYSTR(SalesCodeFilter,1,MAXSTRLEN(Campaign."No."));
            if Campaign.FIND then
              Description := Campaign.Description;
          end;
        SalesTypeFilter::"All Customers":
          begin
            SalesSrcTableName := Text000;
            Description := '';
          end;
      end;

      if SalesSrcTableName = Text000 then
        exit(STRSUBSTNO('%1 %2 %3',SalesSrcTableName,SourceTableName,ItemNoFilter));
      exit(STRSUBSTNO('%1 %2 %3 %4 %5',SalesSrcTableName,SalesCodeFilter,Description,SourceTableName,ItemNoFilter));
    END;

    LOCAL PROCEDURE CheckFilters@4(TableNo@1000 : Integer;FilterTxt@1001 : Text);
    VAR
      FilterRecordRef@1002 : RecordRef;
      FilterFieldRef@1003 : FieldRef;
    BEGIN
      if FilterTxt = '' then
        exit;
      CLEAR(FilterRecordRef);
      CLEAR(FilterFieldRef);
      FilterRecordRef.OPEN(TableNo);
      FilterFieldRef := FilterRecordRef.FIELD(1);
      FilterFieldRef.SETFILTER(FilterTxt);
      if FilterRecordRef.ISEMPTY then
        ERROR(Text001,FilterRecordRef.CAPTION,FilterTxt);
    END;

    LOCAL PROCEDURE SalesCodeFilterOnAfterValidate@19067727();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE SalesTypeFilterOnAfterValidate@19024044();
    BEGIN
      CurrPage.SAVERECORD;
      SalesCodeFilter := '';
      SetRecFilters;
    END;

    LOCAL PROCEDURE StartingDateFilterOnAfterValid@19055286();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE ItemNoFilterOnAfterValidate@19009808();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE CurrencyCodeFilterOnAfterValid@19015290();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE GetSalesTypeFilter@1000() : Integer;
    BEGIN
      case GETFILTER("Sales Type") of
        FORMAT("Sales Type"::Customer):
          exit(0);
        FORMAT("Sales Type"::"Customer Price Group"):
          exit(1);
        FORMAT("Sales Type"::"All Customers"):
          exit(2);
        FORMAT("Sales Type"::Campaign):
          exit(3);
      end;
    END;

    LOCAL PROCEDURE SetSalesCodeEditable@5(SalesType@1000 : Option) : Boolean;
    BEGIN
      exit(SalesType <> "Sales Type"::"All Customers");
    END;

    LOCAL PROCEDURE SetEditableFields@10();
    BEGIN
      SalesTypeControlEditable := GETFILTER("Sales Type") = '';
      SalesCodeControlEditable :=
        SalesCodeControlEditable and (GETFILTER("Sales Code") = '');
      ItemNoControlEditable := GETFILTER("Item No.") = '';
      StartingDateControlEditable := GETFILTER("Starting Date") = '';
      CurrencyCodeControlEditable := GETFILTER("Currency Code") = '';
    END;

    LOCAL PROCEDURE FilterLines@6();
    VAR
      FilterPageBuilder@1000 : FilterPageBuilder;
    BEGIN
      FilterPageBuilder.ADDTABLE(TABLECAPTION,DATABASE::"Sales Price");

      FilterPageBuilder.SETVIEW(TABLECAPTION,GETVIEW);
      if GETFILTER("Sales Type") = '' then
        FilterPageBuilder.ADDFIELDNO(TABLECAPTION,FIELDNO("Sales Type"));
      if GETFILTER("Sales Code") = '' then
        FilterPageBuilder.ADDFIELDNO(TABLECAPTION,FIELDNO("Sales Code"));
      if GETFILTER("Item No.") = '' then
        FilterPageBuilder.ADDFIELDNO(TABLECAPTION,FIELDNO("Item No."));
      if GETFILTER("Starting Date") = '' then
        FilterPageBuilder.ADDFIELDNO(TABLECAPTION,FIELDNO("Starting Date"));
      if GETFILTER("Currency Code") = '' then
        FilterPageBuilder.ADDFIELDNO(TABLECAPTION,FIELDNO("Currency Code"));

      if FilterPageBuilder.RUNMODAL then
        SETVIEW(FilterPageBuilder.GETVIEW(TABLECAPTION));

      UpdateBasicRecFilters;
      EVALUATE(StartingDateFilter,GETFILTER("Starting Date"));
      SetEditableFields;
    END;

    LOCAL PROCEDURE CopyPrices@8();
    VAR
      Customer@1001 : Record Customer;
      SalesPrice@1004 : Record "Sales Price";
      SelectedSalesPrice@1005 : Record "Sales Price";
      SalesPrices@1002 : Page "Sales Prices";
      CopyToCustomerNo@1003 : Code[20];
    BEGIN
      if SalesTypeFilter <> SalesTypeFilter::Customer then
        ERROR(IncorrectSalesTypeToCopyPricesErr);
      Customer.SETFILTER("No.",SalesCodeFilter);
      if Customer.COUNT <> 1 then
        ERROR(MultipleCustomersSelectedErr);
      CopyToCustomerNo := COPYSTR(SalesCodeFilter,1,MAXSTRLEN(CopyToCustomerNo));
      SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
      SalesPrice.SETFILTER("Sales Code",'<>%1',SalesCodeFilter);
      SalesPrices.LOOKUPMODE(true);
      SalesPrices.SETTABLEVIEW(SalesPrice);
      if SalesPrices.RUNMODAL = ACTION::LookupOK then begin
        SalesPrices.GetSelectionFilter(SelectedSalesPrice);
        CopySalesPriceToCustomersSalesPrice(SelectedSalesPrice,CopyToCustomerNo);
      end;
    END;

    PROCEDURE GetSelectionFilter@9(VAR SalesPrice@1000 : Record "Sales Price");
    BEGIN
      CurrPage.SETSELECTIONFILTER(SalesPrice);
    END;

    BEGIN
    END.
  }
}

