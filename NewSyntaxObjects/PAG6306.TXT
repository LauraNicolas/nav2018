OBJECT Page 6306 Power BI Report FactBox
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Power BI Report FactBox;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 IsErrorMessageVisible := false;
                 IsUrlFieldVisible := false;
                 UpdateContext;

                 // create a new Power BI User Configuration table entry or read one if it exist
                 SetPowerBIUserConfig.CreateOrReadUserConfigEntry(PowerBIUserConfiguration,LastOpenedReportID,Context);

                 if not TryLoadPart then
                   ShowErrorMessage(GETLASTERRORTEXT);

                 PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);
                 CurrPage.UPDATE;
               END;

    ActionList=ACTIONS
    {
      { 17      ;    ;ActionContainer;
                      Name=ActionContainer17;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=Select Report;
                      CaptionML=ENU=Select Report;
                      ToolTipML=ENU=Select the report.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible;
                      Image=SelectChart;
                      OnAction=VAR
                                 PowerBiReportSelection@1001 : Page "Power BI Report Selection";
                               BEGIN
                                 // Opens the report selection page, then updates the onscreen report depending on the user's
                                 // subsequent selection and enabled/disabled settings.

                                 PowerBiReportSelection.SetContext(Context);
                                 PowerBiReportSelection.SetNameFilter(NameFilter);
                                 PowerBiReportSelection.SetReportBuffer(TempPowerBiReportBuffer);
                                 PowerBiReportSelection.LOOKUPMODE(true);

                                 PowerBiReportSelection.RUNMODAL;
                                 if PowerBiReportSelection.IsPageClosedOkay then begin
                                   PowerBiReportSelection.GETRECORD(TempPowerBiReportBuffer);

                                   if TempPowerBiReportBuffer.Enabled then
                                     LastOpenedReportID := TempPowerBiReportBuffer.ReportID; // RefreshAvailableReports handles fallback logic on invalid selection.

                                   RefreshAvailableReports;

                                   if AddInReady then
                                     CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                                   // at this point, NAV will load the web page viewer since HasReports should be true. WebReportViewer::ControlAddInReady will then fire, calling Navigate()
                                 end;
                               END;
                                }
      { 15      ;1   ;Action    ;
                      Name=Expand Report;
                      CaptionML=ENU=Expand Report;
                      ToolTipML=ENU=View all information in the report.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=View;
                      OnAction=VAR
                                 PowerBiReportDialog@1000 : Page "Power BI Report Dialog";
                               BEGIN
                                 PowerBiReportDialog.SetUrl(GetEmbedUrlWithNavigationWithFilters,GetMessage);
                                 PowerBiReportDialog.CAPTION(TempPowerBiReportBuffer.ReportName);
                                 PowerBiReportDialog.SetFilter(messagefilter,reportfirstpage);
                                 PowerBiReportDialog.RUN;
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=Previous Report;
                      CaptionML=ENU=Previous Report;
                      ToolTipML=ENU=Go to the previous report.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
                                 if TempPowerBiReportBuffer.NEXT(-1) = 0 then
                                   TempPowerBiReportBuffer.FINDLAST;

                                 CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=Next Report;
                      CaptionML=ENU=Next Report;
                      ToolTipML=ENU=Go to the next report.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=NextSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
                                 if TempPowerBiReportBuffer.NEXT = 0 then
                                   TempPowerBiReportBuffer.FINDFIRST;

                                 CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 3   ;1   ;Group     ;
                Name=Group3;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND HasReports;
                GroupType=Group }

    { 4   ;2   ;Field     ;
                Name=WebReportViewer;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.WebPageViewer;PublicKeyToken=31bf3856ad364e35] }

    { 12  ;1   ;Group     ;
                Name=Group12;
                GroupType=GridLayout;
                Layout=Columns }

    { 11  ;2   ;Group     ;
                Name=Group11;
                GroupType=Group }

    { 10  ;3   ;Group     ;
                Name=Group10;
                Visible=IsGettingStartedVisible;
                GroupType=Group }

    { 9   ;4   ;Field     ;
                Name=GettingStarted;
                ApplicationArea=#Basic,#Suite;
                SourceExpr='Get started with Power BI';
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              if not TryAzureAdMgtGetAccessToken then
                                ShowErrorMessage(GETLASTERRORTEXT);
                              if not TryLoadPart then
                                ShowErrorMessage(GETLASTERRORTEXT);

                              PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);
                              CurrPage.UPDATE;
                            END;

                ShowCaption=false }

    { 8   ;3   ;Group     ;
                Name=Group8;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 7   ;4   ;Field     ;
                Name=ErrorMessageText;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorMessageText;
                MultiLine=true;
                ShowCaption=false }

    { 19  ;4   ;Field     ;
                Name=ErrorUrlTextField;
                ExtendedDatatype=URL;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ErrorUrlText;
                Visible=IsUrlFieldVisible;
                ShowCaption=false }

    { 6   ;3   ;Group     ;
                Name=Group6;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND NOT HasReports;
                GroupType=Group }

    { 5   ;4   ;Field     ;
                Name=EmptyMessage;
                CaptionML=ENU=There are no enabled reports. Choose Select Report to see a list of reports that you can display.;
                ToolTipML=ENU=Specifies that the user needs to select Power BI reports.;
                ApplicationArea=#Basic,#Suite;
                Editable=FALSE;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      NoReportsAvailableErr@1011 : TextConst 'ENU=There are no reports available from Power BI.';
      PowerBIUserConfiguration@1018 : Record "Power BI User Configuration";
      TempPowerBiReportBuffer@1015 : TEMPORARY Record "Power BI Report Buffer";
      PowerBiServiceMgt@1013 : Codeunit "Power BI Service Mgt.";
      AzureAdMgt@1012 : Codeunit "Azure AD Mgt.";
      ConfPersonalizationMgt@1014 : Codeunit "Conf./Personalization Mgt.";
      SetPowerBIUserConfig@1017 : Codeunit "Set Power BI User Config";
      JObject@1019 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JObjecttemp@1020 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      LastOpenedReportID@1016 : GUID;
      Context@1010 : Text[30];
      NameFilter@1009 : Text;
      IsGettingStartedVisible@1008 : Boolean;
      HasReports@1007 : Boolean;
      AddInReady@1006 : Boolean;
      IsErrorMessageVisible@1005 : Boolean;
      ErrorMessageText@1004 : Text;
      IsUrlFieldVisible@1002 : Boolean;
      ErrorUrlText@1001 : Text;
      CurrentListSelection@1000 : Text;
      reportLoadData@1022 : Text;
      IsValueInt@1021 : Boolean;
      ExceptionMessage@1003 : Text;
      ExceptionDetails@1023 : Text;
      messagefilter@1024 : Text;
      reportfirstpage@1025 : Text;

    PROCEDURE SetCurrentListSelection@1(CurrentSelection@1000 : Text;IsValueIntInput@1001 : Boolean);
    BEGIN
      // get the name of the selected element from the corresponding list of the parent page and filter the report
      CurrentListSelection := CurrentSelection;
      IsValueInt := IsValueIntInput;
      GetAndSetReportFilter(reportLoadData);
    END;

    LOCAL PROCEDURE GetMessage@12() : Text;
    VAR
      HttpUtility@1000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      exit(
        '{"action":"loadReport","accessToken":"' +
        HttpUtility.JavaScriptStringEncode(AzureAdMgt.GetAccessToken(
            PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,false)) + '"}');
    END;

    LOCAL PROCEDURE GetEmbedUrl@2() : Text;
    BEGIN
      if TempPowerBiReportBuffer.ISEMPTY then begin
        // Clear out last opened report if there are no reports to display.
        CLEAR(LastOpenedReportID);
        SetLastOpenedReportID(LastOpenedReportID);
      end else begin
        // update last loaded report
        SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
        // Hides both filters and tabs for embedding in small spaces where navigation is unnecessary.
        exit(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false&navContentPaneEnabled=false');
      end;
    END;

    LOCAL PROCEDURE LoadPart@5();
    BEGIN
      IsGettingStartedVisible := not PowerBiServiceMgt.IsUserReadyForPowerBI;

      TempPowerBiReportBuffer.DELETEALL;
      if IsGettingStartedVisible then begin
        if AzureAdMgt.IsSaaS then
          ERROR(PowerBiServiceMgt.GetGenericError);

        TempPowerBiReportBuffer.INSERT // Hack to display Get Started link.
      end else begin
        PowerBiServiceMgt.GetReports(TempPowerBiReportBuffer,ExceptionMessage,ExceptionDetails,Context);

        if TempPowerBiReportBuffer.ISEMPTY then
          ERROR(NoReportsAvailableErr);

        RefreshAvailableReports;
      end;
    END;

    LOCAL PROCEDURE RefreshAvailableReports@7();
    BEGIN
      // Filters the report buffer to show the user's selected report onscreen if possible, otherwise defaulting
      // to other enabled reports.
      // (The updated selection will automatically get saved on render - can't save to database here without
      // triggering errors about calling MODIFY during a TryFunction.)

      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',true);
      if not ISNULLGUID(LastOpenedReportID) then begin
        TempPowerBiReportBuffer.SETFILTER(ReportID,'%1',LastOpenedReportID);

        if TempPowerBiReportBuffer.ISEMPTY then begin
          // If last selection is invalid, clear it and default to showing the first enabled report.
          CLEAR(LastOpenedReportID);
          RefreshAvailableReports;
        end;
      end;

      HasReports := TempPowerBiReportBuffer.FINDFIRST;
    END;

    PROCEDURE SetContext@6(ParentContext@1000 : Text[30]);
    BEGIN
      // Sets an ID that tracks which page to show reports for - called by the parent page hosting the part,
      // if possible (see UpdateContext).
      Context := ParentContext;
    END;

    LOCAL PROCEDURE UpdateContext@8();
    VAR
      ConfPersonalizationMgt@1000 : Codeunit "Conf./Personalization Mgt.";
    BEGIN
      // Automatically sets the parent page ID based on the user's selected role center (role centers can't
      // have codebehind, so they have no other way to set the context for their reports).
      if Context = '' then
        SetContext(ConfPersonalizationMgt.GetCurrentProfileIDNoError);
    END;

    PROCEDURE SetNameFilter@9(ParentFilter@1000 : Text);
    BEGIN
      // Sets a text value that tells the selection page how to filter the reports list. This should be called
      // by the parent page hosting this page part, if possible.
      NameFilter := ParentFilter;
    END;

    LOCAL PROCEDURE ShowErrorMessage@4(TextToShow@1000 : Text);
    BEGIN
      // this condition checks if we caught the authorization error that contains a link to Power BI
      // the function divide the error message into simple text and url part
      if TextToShow = PowerBiServiceMgt.GetUnauthorizedErrorText then begin
        IsUrlFieldVisible := true;
        // this message is required to have ':' at the end, but it has '.' instead due to C/AL Localizability requirement
        TextToShow := DELSTR(PowerBiServiceMgt.GetUnauthorizedErrorText,STRLEN(PowerBiServiceMgt.GetUnauthorizedErrorText),1) + ':';
        ErrorUrlText := PowerBiServiceMgt.GetPowerBIUrl;
      end;

      IsErrorMessageVisible := true;
      IsGettingStartedVisible := false;
      TempPowerBiReportBuffer.DELETEALL; // Required to avoid one INSERT after another (that will lead to an error)
      if TextToShow = '' then
        TextToShow := PowerBiServiceMgt.GetGenericError;
      ErrorMessageText := TextToShow;
      TempPowerBiReportBuffer.INSERT; // Hack to show the field with the text
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLoadPart@11();
    BEGIN
      // Need the try function here to catch any possible internal errors
      LoadPart;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@33();
    BEGIN
      AzureAdMgt.GetAccessToken(PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,true);
    END;

    LOCAL PROCEDURE SetReport@10();
    BEGIN
      if (CURRENTCLIENTTYPE <> CLIENTTYPE::Phone) and (CURRENTCLIENTTYPE <> CLIENTTYPE::Windows) then
        CurrPage.WebReportViewer.InitializeIFrame('4:3');
      // subscribe to events
      CurrPage.WebReportViewer.SubscribeToEvent('message',GetEmbedUrl);
      CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    PROCEDURE SetLastOpenedReportID@14(LastOpenedReportIDInput@1000 : GUID);
    BEGIN
      // update the last loaded report field (the record at this point should already exist bacause it was created OnOpenPage)
      LastOpenedReportID := LastOpenedReportIDInput;
      PowerBIUserConfiguration.RESET;
      PowerBIUserConfiguration.SETFILTER("Page ID",'%1',Context);
      PowerBIUserConfiguration.SETFILTER("User Security ID",'%1',USERSECURITYID);
      PowerBIUserConfiguration.SETFILTER("Profile ID",'%1',ConfPersonalizationMgt.GetCurrentProfileIDNoError);
      if not PowerBIUserConfiguration.ISEMPTY then begin
        PowerBIUserConfiguration."Selected Report ID" := LastOpenedReportID;
        PowerBIUserConfiguration.MODIFY;
        COMMIT;
      end;
    END;

    PROCEDURE SetFactBoxVisibility@13(VisibilityInput@1000 : Boolean);
    BEGIN
      PowerBIUserConfiguration.RESET;
      PowerBIUserConfiguration.SETFILTER("Page ID",'%1',Context);
      PowerBIUserConfiguration.SETFILTER("User Security ID",'%1',USERSECURITYID);
      PowerBIUserConfiguration.SETFILTER("Profile ID",'%1',ConfPersonalizationMgt.GetCurrentProfileIDNoError);
      if not PowerBIUserConfiguration.ISEMPTY then begin
        PowerBIUserConfiguration."Report Visibility" := VisibilityInput;
        PowerBIUserConfiguration.MODIFY;
      end;
    END;

    PROCEDURE GetAndSetReportFilter@64(VAR data@1000 : Text);
    VAR
      firstpage@1002 : Text;
    BEGIN
      // get all pages of the report
      if STRPOS(data,'reportPageLoaded') > 0 then begin
        CurrPage.WebReportViewer.PostMessage('{"method":"GET","url":"/report/pages","headers":{"id":"getpagesfromreport"}}','*',true);
        exit;
      end;

      // navigate to the first page of the report
      if STRPOS(data,'getpagesfromreport') > 0 then begin
        JObject := JObject.Parse(data);
        JObject := JObject.GetValue('body');
        JObject := JObject.First; // get the first (by index) page of the report
        firstpage := FORMAT(JObject.GetValue('name'));
        messagefilter := '{"method":"PUT","url":"/report/pages/active","headers":{"id":"setpage,' + firstpage +
          '"},"body": {"name":"' + firstpage + '","displayName": null}}';
        reportfirstpage := messagefilter;
        CurrPage.WebReportViewer.PostMessage(messagefilter,'*',true);
        exit;
      end;

      // find all filters on this page of the report
      if STRPOS(data,'setpage') > 0 then begin
        JObject := JObject.Parse(data);
        JObject := JObject.GetValue('headers');
        firstpage := SELECTSTR(2,FORMAT(JObject.GetValue('id')));
        // messagefilter := '{"method":"GET","url":"/report/pages/' + firstpage + '/filters","headers": {"id":"getfilters,' + firstpage + '"}}'; // page filters
        messagefilter := '{"method":"GET","url":"/report/filters","headers": {"id":"getfilters,' + firstpage + '"}}'; // report filters
        CurrPage.WebReportViewer.PostMessage(messagefilter,'*',true);
        exit;
      end;

      // change the filter value to the one received from the corresponding list (only for basic filters)
      if (STRPOS(data,'getfilters') > 0) and (STRPOS(data,'schema#basic') > 0) then begin
        reportLoadData := data; // save data for filter update on change of selected list element

        JObject := JObject.Parse(data);
        JObjecttemp := JObject.GetValue('headers');
        firstpage := SELECTSTR(2,FORMAT(JObjecttemp.GetValue('id')));
        JObject := JObject.GetValue('body');
        // filter only if there is a filter in the report
        if JObject.Count > 0 then begin
          JObject := JObject.First;
          JObjecttemp := JObject.GetValue('target');

          messagefilter := '{"$schema":"' + FORMAT(JObject.GetValue('$schema')) +
            '","target":{"table":"' + FORMAT(JObjecttemp.GetValue('table')) + '","column":"' +
            FORMAT(JObjecttemp.GetValue('column')) + '"},';
          // filter parameter can be string, then value should be in ""; or it can be an integer, then no "" are required
          if IsValueInt then
            messagefilter := messagefilter + '"operator":"In","values":[' + CurrentListSelection + ']}'
          else
            messagefilter := messagefilter + '"operator":"In","values":["' + CurrentListSelection + '"]}';

          messagefilter := '{"method": "PUT", "url": "/report/filters", "headers": {}, "body": [' +
            messagefilter + '] }';
          CurrPage.WebReportViewer.PostMessage(messagefilter,'*',true);
        end;

        exit;
      end;
    END;

    LOCAL PROCEDURE GetEmbedUrlWithNavigationWithFilters@15() : Text;
    BEGIN
      // update last loaded report
      SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
      // Shows filters and shows navigation tabs.
      exit(TempPowerBiReportBuffer.EmbedUrl);
    END;

    EVENT WebReportViewer@-4::ControlAddInReady@9(callbackUrl@1000 : Text);
    BEGIN
      AddInReady := true;
      if not TempPowerBiReportBuffer.ISEMPTY then
        SetReport;
    END;

    EVENT WebReportViewer@-4::DocumentReady@10();
    BEGIN
      if not TempPowerBiReportBuffer.ISEMPTY then
        CurrPage.WebReportViewer.PostMessage(GetMessage,'*',false);
    END;

    EVENT WebReportViewer@-4::Callback@11(data@1000 : Text);
    BEGIN
      GetAndSetReportFilter(data);
    END;

    EVENT WebReportViewer@-4::Refresh@12(callbackUrl@1000 : Text);
    BEGIN
      if AddInReady and not TempPowerBiReportBuffer.ISEMPTY then
        SetReport;
    END;

    EVENT JObject@1019::PropertyChanged@117(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangedEventArgs");
    BEGIN
    END;

    EVENT JObject@1019::PropertyChanging@118(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangingEventArgs");
    BEGIN
    END;

    EVENT JObject@1019::ListChanged@119(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.ListChangedEventArgs");
    BEGIN
    END;

    EVENT JObject@1019::AddingNew@120(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.AddingNewEventArgs");
    BEGIN
    END;

    EVENT JObject@1019::CollectionChanged@121(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NotifyCollectionChangedEventArgs");
    BEGIN
    END;

    EVENT JObjecttemp@1020::PropertyChanged@117(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangedEventArgs");
    BEGIN
    END;

    EVENT JObjecttemp@1020::PropertyChanging@118(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.PropertyChangingEventArgs");
    BEGIN
    END;

    EVENT JObjecttemp@1020::ListChanged@119(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.ListChangedEventArgs");
    BEGIN
    END;

    EVENT JObjecttemp@1020::AddingNew@120(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ComponentModel.AddingNewEventArgs");
    BEGIN
    END;

    EVENT JObjecttemp@1020::CollectionChanged@121(sender@1001 : Variant;e@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NotifyCollectionChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

