OBJECT Table 1504 Workflow Step Instance
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Workflow Step Instance"=rd,
                TableData "Workflow - Table Relation"=r,
                TableData "Workflow Table Relation Value"=rimd,
                TableData "Workflow Rule"=rd,
                TableData "Workflow Step Instance Archive"=rimd;
    OnInsert=BEGIN
               "Created Date-Time" := ROUNDDATETIME(CURRENTDATETIME,60000);
               "Created By User ID" := USERID;
             END;

    OnModify=BEGIN
               "Last Modified Date-Time" := ROUNDDATETIME(CURRENTDATETIME,60000);
               "Last Modified By User ID" := USERID;
             END;

    OnDelete=VAR
               WorkflowTableRelationValue@1000 : Record "Workflow Table Relation Value";
             BEGIN
               WorkflowTableRelationValue.SETRANGE("Workflow Step Instance ID",ID);
               WorkflowTableRelationValue.SETRANGE("Workflow Code","Workflow Code");
               WorkflowTableRelationValue.DELETEALL(true);
               DeleteStepInstanceRules;
             END;

    CaptionML=ENU=Workflow Step Instance;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=ENU=ID }
    { 2   ;   ;Workflow Code       ;Code20        ;TableRelation="Workflow Step"."Workflow Code";
                                                   CaptionML=ENU=Workflow Code }
    { 3   ;   ;Workflow Step ID    ;Integer       ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Workflow Code"));
                                                   CaptionML=ENU=Workflow Step ID }
    { 4   ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 9   ;   ;Entry Point         ;Boolean       ;CaptionML=ENU=Entry Point }
    { 11  ;   ;Record ID           ;RecordID      ;CaptionML=ENU=Record ID }
    { 12  ;   ;Created Date-Time   ;DateTime      ;CaptionML=ENU=Created Date-Time;
                                                   Editable=false }
    { 13  ;   ;Created By User ID  ;Code50        ;TableRelation=User."User Name";
                                                   CaptionML=ENU=Created By User ID;
                                                   Editable=false }
    { 14  ;   ;Last Modified Date-Time;DateTime   ;CaptionML=ENU=Last Modified Date-Time;
                                                   Editable=false }
    { 15  ;   ;Last Modified By User ID;Code50    ;TableRelation=User."User Name";
                                                   CaptionML=ENU=Last Modified By User ID;
                                                   Editable=false }
    { 17  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Inactive,Active,Completed,Ignored,Processing;
                                                   OptionString=Inactive,Active,Completed,Ignored,Processing }
    { 18  ;   ;Previous Workflow Step ID;Integer  ;CaptionML=ENU=Previous Workflow Step ID }
    { 19  ;   ;Next Workflow Step ID;Integer      ;CaptionML=ENU=Next Workflow Step ID }
    { 21  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Event,Response;
                                                   OptionString=Event,Response }
    { 22  ;   ;Function Name       ;Code128       ;TableRelation=IF (Type=CONST(Event)) "Workflow Event"
                                                                 ELSE IF (Type=CONST(Response)) "Workflow Response";
                                                   CaptionML=ENU=Function Name }
    { 23  ;   ;Argument            ;GUID          ;TableRelation="Workflow Step Argument" WHERE (Type=FIELD(Type));
                                                   CaptionML=ENU=Argument }
    { 30  ;   ;Original Workflow Code;Code20      ;TableRelation="Workflow Step"."Workflow Code";
                                                   CaptionML=ENU=Original Workflow Code }
    { 31  ;   ;Original Workflow Step ID;Integer  ;TableRelation="Workflow Step".ID WHERE ("Workflow Code"=FIELD("Original Workflow Code"));
                                                   CaptionML=ENU=Original Workflow Step ID }
    { 32  ;   ;Sequence No.        ;Integer       ;CaptionML=ENU=Sequence No. }
  }
  KEYS
  {
    {    ;ID,"Workflow Code","Workflow Step ID"   ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ActiveInstancesWillBeArchivedQst@1000 : TextConst 'ENU=Are you sure you want to archive all workflow step instances in the workflow?';
      NothingToArchiveMsg@1001 : TextConst 'ENU=There is nothing to archive.';

    [External]
    PROCEDURE MoveForward@5(Variant@1003 : Variant);
    VAR
      NextWorkflowStepInstance@1000 : Record "Workflow Step Instance";
      WorkflowMgt@1002 : Codeunit "Workflow Management";
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      "Record ID" := RecRef.RECORDID;

      if "Next Workflow Step ID" > 0 then begin
        WorkflowMgt.UpdateStatus(Rec,Status::Completed,Status::Inactive,Status::Ignored);
        NextWorkflowStepInstance.GET(ID,"Workflow Code","Next Workflow Step ID");

        case NextWorkflowStepInstance.Type of
          NextWorkflowStepInstance.Type::"Event":
            WorkflowMgt.UpdateStatus(NextWorkflowStepInstance,Status::Active,Status::Inactive,Status::Ignored);
          NextWorkflowStepInstance.Type::Response:
            WorkflowMgt.UpdateStatus(NextWorkflowStepInstance,Status::Completed,Status::Active,Status::Ignored);
        end;
      end else
        WorkflowMgt.UpdateStatus(Rec,Status::Completed,Status::Active,Status::Ignored);

      if not TableRelationValuesExist(RecRef) then
        SetTableRelationValues(RecRef);
    END;

    [External]
    PROCEDURE TableRelationValuesExist@3(RecRef@1000 : RecordRef) : Boolean;
    VAR
      WorkflowTableRelationValue@1001 : Record "Workflow Table Relation Value";
    BEGIN
      WorkflowTableRelationValue.SETRANGE("Workflow Step Instance ID",ID);
      WorkflowTableRelationValue.SETRANGE("Table ID",RecRef.NUMBER);
      exit(not WorkflowTableRelationValue.ISEMPTY);
    END;

    [External]
    PROCEDURE SetTableRelationValues@6(RecRef@1000 : RecordRef);
    VAR
      WorkflowTableRelation@1002 : Record "Workflow - Table Relation";
      WorkflowTableRelationValue@1003 : Record "Workflow Table Relation Value";
      WorkflowInstance@1001 : Query "Workflow Instance";
    BEGIN
      WorkflowTableRelation.SETRANGE("Table ID",RecRef.NUMBER);
      if WorkflowTableRelation.FINDSET then
        repeat
          WorkflowInstance.SETRANGE(Code,"Workflow Code");
          WorkflowInstance.SETRANGE(Instance_ID,ID);
          WorkflowInstance.SETFILTER(Status,'<>%1|%2',Status::Completed,Status::Ignored);
          WorkflowInstance.OPEN;

          while WorkflowInstance.READ do
            WorkflowTableRelationValue.CreateNew(WorkflowInstance.Step_ID,Rec,WorkflowTableRelation,RecRef);
        until WorkflowTableRelation.NEXT = 0;
    END;

    [External]
    PROCEDURE MatchesRecordValues@7(RecRef@1003 : RecordRef) : Boolean;
    VAR
      WorkflowTableRelationValue@1002 : Record "Workflow Table Relation Value";
      FieldRef@1001 : FieldRef;
      SkipRecord@1004 : Boolean;
      ComparisonValue@1005 : Text;
    BEGIN
      WorkflowTableRelationValue.SETRANGE("Workflow Step Instance ID",ID);
      WorkflowTableRelationValue.SETRANGE("Workflow Code","Workflow Code");
      WorkflowTableRelationValue.SETRANGE("Workflow Step ID","Workflow Step ID");
      WorkflowTableRelationValue.SETRANGE("Related Table ID",RecRef.NUMBER);
      if WorkflowTableRelationValue.FINDSET then begin
        repeat
          FieldRef := RecRef.FIELD(WorkflowTableRelationValue."Related Field ID");
          if WorkflowTableRelationValue."Field ID" <> 0 then
            ComparisonValue := WorkflowTableRelationValue.Value
          else
            ComparisonValue := FORMAT(WorkflowTableRelationValue."Record ID");
          if FORMAT(FieldRef.VALUE) <> ComparisonValue then
            SkipRecord := true;
        until (WorkflowTableRelationValue.NEXT = 0) or SkipRecord;
        exit(not SkipRecord);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE ArchiveActiveInstances@1(Workflow@1000 : Record Workflow);
    VAR
      WorkflowStepInstanceArchive@1001 : Record "Workflow Step Instance Archive";
    BEGIN
      Workflow.COPYFILTER(Code,"Workflow Code");
      if not FINDSET then
        MESSAGE(NothingToArchiveMsg)
      else
        if CONFIRM(ActiveInstancesWillBeArchivedQst) then begin
          repeat
            WorkflowStepInstanceArchive.TRANSFERFIELDS(Rec,true);
            WorkflowStepInstanceArchive.INSERT(true);
          until NEXT = 0;
          DELETEALL(true);
        end;
    END;

    [External]
    PROCEDURE ToString@2() : Text;
    BEGIN
      exit(STRSUBSTNO('%1,%2,%3,%4,%5,%6',
          ID,"Workflow Code","Workflow Step ID",Type,"Original Workflow Code","Original Workflow Step ID"));
    END;

    LOCAL PROCEDURE DeleteStepInstanceRules@4();
    VAR
      WorkflowRule@1000 : Record "Workflow Rule";
    BEGIN
      FindWorkflowRules(WorkflowRule);
      WorkflowRule.DELETEALL;
    END;

    [External]
    PROCEDURE FindWorkflowRules@19(VAR WorkflowRule@1000 : Record "Workflow Rule") : Boolean;
    BEGIN
      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID","Workflow Step ID");
      WorkflowRule.SETRANGE("Workflow Step Instance ID",ID);
      exit(not WorkflowRule.ISEMPTY);
    END;

    [External]
    PROCEDURE BuildTempWorkflowTree@8(WorkflowInstanceId@1000 : GUID);
    VAR
      NewStepId@1004 : Integer;
    BEGIN
      if not ISTEMPORARY then
        exit;

      CreateTree(Rec,WorkflowInstanceId,0,NewStepId);

      SETRANGE(ID,WorkflowInstanceId);
      SETRANGE("Workflow Step ID");
      if FINDSET then;
    END;

    LOCAL PROCEDURE CreateTree@9(VAR TempWorkflowStepInstance@1000 : TEMPORARY Record "Workflow Step Instance";WorkflowInstanceId@1003 : GUID;OriginalStepId@1004 : Integer;VAR NewStepId@1005 : Integer);
    VAR
      WorkflowStepInstance@1001 : Record "Workflow Step Instance";
    BEGIN
      if OriginalStepId <> 0 then
        CreateNode(TempWorkflowStepInstance,WorkflowInstanceId,OriginalStepId,NewStepId);

      WorkflowStepInstance.SETRANGE(ID,WorkflowInstanceId);
      WorkflowStepInstance.SETRANGE("Previous Workflow Step ID",OriginalStepId);
      WorkflowStepInstance.SETCURRENTKEY("Sequence No.");

      if WorkflowStepInstance.FINDSET then
        repeat
          NewStepId += 1;
          CreateTree(TempWorkflowStepInstance,WorkflowInstanceId,WorkflowStepInstance."Workflow Step ID",NewStepId);
        until WorkflowStepInstance.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNode@10(VAR TempWorkflowStepInstance@1000 : TEMPORARY Record "Workflow Step Instance";WorkflowInstanceId@1001 : GUID;OriginalStepId@1003 : Integer;NewStepId@1002 : Integer);
    VAR
      SrcWorkflowStepInstance@1007 : Record "Workflow Step Instance";
    BEGIN
      SrcWorkflowStepInstance.SETRANGE(ID,WorkflowInstanceId);
      SrcWorkflowStepInstance.SETRANGE("Workflow Step ID",OriginalStepId);
      SrcWorkflowStepInstance.FINDFIRST;

      CLEAR(TempWorkflowStepInstance);
      TempWorkflowStepInstance.INIT;
      TempWorkflowStepInstance.COPY(SrcWorkflowStepInstance);
      TempWorkflowStepInstance."Workflow Step ID" := NewStepId;
      TempWorkflowStepInstance.INSERT;
    END;

    BEGIN
    END.
  }
}

