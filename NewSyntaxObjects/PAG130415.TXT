OBJECT Page 130415 Semi-Manual Test Wizard
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Semi-Manual Test Wizard;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Semi-Manual Test Wizard";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    OnAfterGetRecord=BEGIN
                       if "Step number" > "Total steps" then
                         StepHeading := 'TEST COMPLETE'
                       else
                         StepHeading := STRSUBSTNO('Step %1 of %2. %3',"Step number","Total steps","Step heading");
                     END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      Name=ActionContainer2;
                      ActionContainerType=ActionItems }
      { 6       ;1   ;Action    ;
                      Name=GetExecutionLog;
                      CaptionML=ENU=Download log;
                      ToolTipML=ENU="Displays a list of actions executed so far ";
                      ApplicationArea=#All;
                      Enabled=TestExecuting;
                      InFooterBar=true;
                      OnAction=VAR
                                 SemiManualExecutionLog@1002 : Record "Semi-Manual Execution Log";
                                 FileManagement@1000 : Codeunit "File Management";
                                 File@1003 : File;
                                 OutStream@1004 : OutStream;
                                 ServerFileName@1001 : Text;
                               BEGIN
                                 ServerFileName := FileManagement.ServerTempFileName('txt');
                                 File.CREATE(ServerFileName);
                                 File.CREATEOUTSTREAM(OutStream);
                                 if SemiManualExecutionLog.FINDSET then
                                   repeat
                                     OutStream.WRITE('[' + FORMAT(SemiManualExecutionLog."Time stamp") + '] ');
                                     OutStream.WRITETEXT(SemiManualExecutionLog.GetMessage);
                                     OutStream.WRITETEXT;
                                   until SemiManualExecutionLog.NEXT = 0;
                                 File.CLOSE;
                                 FileManagement.DownloadTempFile(ServerFileName);
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=ClearExecutionLog;
                      CaptionML=ENU=Clear log;
                      ToolTipML=ENU=Delete all entries in the execution log.;
                      ApplicationArea=#All;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 SemiManualExecutionLog.DELETEALL;
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=LoadTest;
                      CaptionML=ENU=Load;
                      ToolTipML=ENU=Load the selected codeunit.;
                      ApplicationArea=#All;
                      Enabled=NOT TestExecuting;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 LoadTest;
                               END;
                                }
      { 15      ;1   ;Action    ;
                      Name=SkipStep;
                      CaptionML=ENU=Skip step;
                      ToolTipML=ENU=Specifies that the automated actions are complete, and displays the manual actions for the next step.;
                      ApplicationArea=#All;
                      Enabled=TestExecuting;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 "Skip current step" := true;
                                 OnNextStep;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=NextStep;
                      CaptionML=ENU=Next step;
                      ToolTipML=ENU=Specifies that the manual actions for this step are complete, and displays the actions for the next step.;
                      ApplicationArea=#All;
                      Enabled=TestExecuting;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 "Skip current step" := false;
                                 OnNextStep;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Manual test wizard;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                Name=StepCodeunit;
                CaptionML=ENU="";
                Visible=NOT TestExecuting;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                Name=Para1;
                CaptionML=ENU=Codeunit;
                GroupType=Group;
                InstructionalTextML=ENU=Choose the codeunit, and then load it. The wizard will do the actions that could be automated, and list actions for each step that you need to do manually. }

    { 11  ;3   ;Field     ;
                Name=CodeunitId;
                ApplicationArea=#All;
                BlankZero=true;
                SourceExpr=CodeunitId;
                ColumnSpan=2;
                OnValidate=BEGIN
                             LoadTest;
                           END;

                OnDrillDown=VAR
                              AllObjWithCaption@1001 : Record AllObjWithCaption;
                              GetSemiManualTestCodeunits@1000 : Page "Get Semi-Manual Test Codeunits";
                            BEGIN
                              GetSemiManualTestCodeunits.LOOKUPMODE := true;
                              if GetSemiManualTestCodeunits.RUNMODAL = ACTION::LookupOK then begin
                                GetSemiManualTestCodeunits.SETSELECTIONFILTER(AllObjWithCaption);
                                if AllObjWithCaption.FINDFIRST then
                                  CodeunitId := AllObjWithCaption."Object ID";
                                LoadTest;
                              end;
                            END;

                ImplicitType=Integer }

    { 9   ;1   ;Group     ;
                Name=StepManualSteps;
                CaptionML=ENU="";
                Visible=TestExecuting;
                GroupType=Group }

    { 12  ;2   ;Group     ;
                Name=Para3;
                CaptionML=ENU="";
                GroupType=Group }

    { 18  ;3   ;Field     ;
                Name=CodeunitIdentifier;
                CaptionML=ENU="";
                ApplicationArea=#All;
                SourceExpr=CodeunitIdentifier;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE;
                ImplicitType=Text }

    { 14  ;2   ;Group     ;
                Name=Para2;
                CaptionML=ENU=Manual steps;
                GroupType=Group;
                InstructionalTextML=ENU=These are the actions that cannot be automated. Manually perform each of the actions listed for each step. If an error message displays, you've found a bug! Copy information about the error after clicking on the Download log button, and provide that when you report the bug. }

    { 7   ;3   ;Field     ;
                Name=StepHeading;
                ToolTipML=ENU=Specifies title of this set of manual actions;
                ApplicationArea=#All;
                SourceExpr=StepHeading;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                ImplicitType=Text }

    { 8   ;3   ;Field     ;
                Name=ManualSteps;
                ToolTipML=ENU=Specifies the manual actions for this step in the test.;
                ApplicationArea=#All;
                SourceExpr=ManualSteps;
                Editable=FALSE;
                MultiLine=true;
                ImplicitType=Text }

  }
  CODE
  {
    VAR
      SemiManualExecutionLog@1004 : Record "Semi-Manual Execution Log";
      StepHeading@1000 : Text;
      ManualSteps@1001 : Text;
      CodeunitId@1002 : Integer;
      CodeunitIdentifier@1007 : Text;
      TestExecuting@1005 : Boolean;
      ErrorOccuredErr@1003 : TextConst '@@@={Locked};ENU=The following error occured: %1';
      TestSuccessfulMsg@1006 : TextConst 'ENU=Test successfully completed.';

    LOCAL PROCEDURE LoadTest@12();
    VAR
      AllObjWithCaption@1001 : Record AllObjWithCaption;
    BEGIN
      TestExecuting := false;
      if CodeunitId <= 0 then
        exit;

      SemiManualExecutionLog.Log(STRSUBSTNO('Attempting to load codeunit %1.',CodeunitId));
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Codeunit);
      AllObjWithCaption.SETRANGE("Object ID",CodeunitId);
      if not AllObjWithCaption.FINDFIRST then
        exit;

      CodeunitIdentifier := STRSUBSTNO('%1: %2',CodeunitId,AllObjWithCaption."Object Name");
      Initialize(AllObjWithCaption."Object ID",AllObjWithCaption."Object Name");
      ManualSteps := GetManualSteps;
      TestExecuting := true;
      SemiManualExecutionLog.Log(STRSUBSTNO('Loaded codeunit %1. Total steps = %2.',
          CodeunitId,"Total steps"));
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnNextStep@1();
    BEGIN
      CLEARLASTERROR;
      SemiManualExecutionLog.Log(STRSUBSTNO('Manual step %1- %2 executed. Attempting to execute the automation post process.',
          "Step number","Step heading"));
      if CODEUNIT.RUN("Codeunit number",Rec) then begin
        ManualSteps := GetManualSteps;
        if "Step number" > "Total steps" then begin
          TestExecuting := false;
          MESSAGE(TestSuccessfulMsg);
        end;
        CurrPage.UPDATE;
        if "Skip current step" then
          SemiManualExecutionLog.Log('The automation post process step skipped.')
        else
          SemiManualExecutionLog.Log('The automation post process executed without errors.');
      end else begin
        SemiManualExecutionLog.Log(STRSUBSTNO(ErrorOccuredErr,GETLASTERRORTEXT));
        ERROR(ErrorOccuredErr,GETLASTERRORTEXT);
      end;
    END;

    BEGIN
    END.
  }
}

