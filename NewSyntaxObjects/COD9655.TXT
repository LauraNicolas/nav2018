OBJECT Codeunit 9655 Init. Server Printer Table
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo=Printer;
    OnRun=BEGIN
            InitTempPrinter(Rec);
          END;

  }
  CODE
  {
    VAR
      PrinterNotFoundErr@1000 : TextConst '@@@="%1=a printer name";ENU=The printer %1 was not found on the server.';

    LOCAL PROCEDURE InitTempPrinter@1(VAR Printer@1000 : Record Printer);
    VAR
      PrinterSettings@1004 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings";
      PrinterSettingsCollection@1003 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings+StringCollection";
      PrinterName@1001 : Text;
      i@1002 : Integer;
    BEGIN
      PrinterSettings := PrinterSettings.PrinterSettings;
      PrinterSettingsCollection := PrinterSettings.InstalledPrinters;
      for i := 0 to PrinterSettingsCollection.Count - 1 do begin
        PrinterName := PrinterSettingsCollection.Item(i);
        PrinterSettings.PrinterName := PrinterName;
        Printer.ID := COPYSTR(PrinterName,1,MAXSTRLEN(Printer.ID));
        if PrinterSettings.MaximumCopies > 1 then
          Printer.INSERT;
      end;
    END;

    [Internal]
    PROCEDURE ValidatePrinterName@2(VAR PrinterName@1000 : Text[250]);
    BEGIN
      if PrinterName = '' then
        exit;
      if not FindPrinterName(PrinterName,true) then
        ERROR(PrinterNotFoundErr,PrinterName);
    END;

    LOCAL PROCEDURE FindPrinterName@10(VAR PrinterName@1000 : Text[250];AllowPartialMatch@1002 : Boolean) : Boolean;
    VAR
      TempPrinter@1001 : TEMPORARY Record Printer;
    BEGIN
      InitTempPrinter(TempPrinter);

      if PrinterName <> '' then // If no name specified, then find the first.
        TempPrinter.SETRANGE(ID,PrinterName);
      if TempPrinter.FINDFIRST then begin
        PrinterName := TempPrinter.ID;
        exit(true);
      end;
      if not AllowPartialMatch then
        exit(false);

      TempPrinter.SETFILTER(ID,'%1',STRSUBSTNO('@*%1*',PrinterName));
      if TempPrinter.FINDFIRST then begin
        PrinterName := TempPrinter.ID;
        exit(true);
      end;
      exit(false);
    END;

    [Internal]
    PROCEDURE FindClosestMatchToClientDefaultPrinter@3(ReportID@1001 : Integer) : Text[250];
    VAR
      PrinterName@1000 : Text[250];
    BEGIN
      PrinterName := GetPrinterSelection(ReportID);
      if PrinterName = '' then
        PrinterName := GetLocalDefaultPrinter;
      if not FindPrinterName(PrinterName,false) then begin
        PrinterName := '';
        if FindPrinterName(PrinterName,true) then;
      end;
      exit(PrinterName);
    END;

    LOCAL PROCEDURE GetLocalDefaultPrinter@5() : Text[250];
    VAR
      FileManagement@1004 : Codeunit "File Management";
      PrinterSettings@1003 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings" RUNONCLIENT;
      PrinterName@1001 : Text;
      i@1000 : Integer;
    BEGIN
      if not FileManagement.CanRunDotNetOnClient then
        exit('');
      PrinterSettings := PrinterSettings.PrinterSettings;
      PrinterName := DELCHR(PrinterSettings.PrinterName,'<','\');
      i := STRPOS(PrinterName,'\');
      if i > 1 then
        PrinterName := COPYSTR(PrinterName,i + 1);
      exit(PrinterName);
    END;

    LOCAL PROCEDURE GetPrinterSelection@6(ReportID@1000 : Integer) : Text[250];
    VAR
      PrinterSelection@1001 : Record "Printer Selection";
    BEGIN
      if ReportID = 0 then
        exit('');
      PrinterSelection.SETRANGE("User ID",USERID);
      PrinterSelection.SETRANGE("Report ID",ReportID);
      if not PrinterSelection.FINDFIRST then begin
        PrinterSelection.SETRANGE("User ID");
        if PrinterSelection.FINDFIRST then;
      end;
      exit(PrinterSelection."Printer Name");
    END;

    BEGIN
    END.
  }
}

