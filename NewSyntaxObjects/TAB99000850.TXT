OBJECT Table 99000850 Planning Assignment
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Planning Assignment;
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;TableRelation=Item."No.";
                                                   CaptionML=ENU=Item No. }
    { 2   ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 10  ;   ;Latest Date         ;Date          ;CaptionML=ENU=Latest Date }
    { 12  ;   ;Inactive            ;Boolean       ;CaptionML=ENU=Inactive }
    { 13  ;   ;Action Msg. Response Planning;Boolean;
                                                   OnValidate=BEGIN
                                                                if "Action Msg. Response Planning" then
                                                                  Inactive := false;
                                                              END;

                                                   CaptionML=ENU=Action Msg. Response Planning }
    { 14  ;   ;Net Change Planning ;Boolean       ;OnValidate=BEGIN
                                                                if "Net Change Planning" then
                                                                  Inactive := false;
                                                              END;

                                                   CaptionML=ENU=Net Change Planning }
  }
  KEYS
  {
    {    ;"Item No.","Variant Code","Location Code";
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ManufacturingSetup@1000 : Record "Manufacturing Setup";
      InvtSetup@1001 : Record "Inventory Setup";

    [External]
    PROCEDURE ItemChange@3(VAR NewItem@1000 : Record Item;VAR OldItem@1001 : Record Item);
    BEGIN
      if NewItem."Reordering Policy" = NewItem."Reordering Policy"::" " then
        if OldItem."Reordering Policy" <> OldItem."Reordering Policy"::" " then
          AnnulAllAssignment(NewItem."No.")
        else
          exit
      else
        if (NewItem."Safety Stock Quantity" <> OldItem."Safety Stock Quantity") or
           (NewItem."Safety Lead Time" <> OldItem."Safety Lead Time") or
           (NewItem."Lead Time Calculation" <> OldItem."Lead Time Calculation") or
           (NewItem."Reorder Point" <> OldItem."Reorder Point") or
           (NewItem."Reordering Policy" <> OldItem."Reordering Policy") or
           (NewItem."Replenishment System" <> OldItem."Replenishment System") or
           (NewItem."Include Inventory" <> OldItem."Include Inventory")
        then begin
          ManufacturingSetup.GET;
          InvtSetup.GET;
          if (ManufacturingSetup."Components at Location" <> '') or
             not InvtSetup."Location Mandatory"
          then
            AssignOne(NewItem."No.",'',ManufacturingSetup."Components at Location",WORKDATE);
        end;
    END;

    [External]
    PROCEDURE SKUChange@9(VAR NewSKU@1000 : Record "Stockkeeping Unit";VAR OldSKU@1001 : Record "Stockkeeping Unit");
    BEGIN
      if NewSKU."Reordering Policy" = NewSKU."Reordering Policy"::" " then
        if OldSKU."Reordering Policy" <> OldSKU."Reordering Policy"::" " then begin
          SETRANGE("Item No.",NewSKU."Item No.");
          SETRANGE("Variant Code",NewSKU."Variant Code");
          SETRANGE("Location Code",NewSKU."Location Code");
          if FIND then begin
            "Net Change Planning" := false;
            MODIFY;
          end;
        end else
          exit
      else
        if (NewSKU."Safety Stock Quantity" <> OldSKU."Safety Stock Quantity") or
           (NewSKU."Safety Lead Time" <> OldSKU."Safety Lead Time") or
           (NewSKU."Lead Time Calculation" <> OldSKU."Lead Time Calculation") or
           (NewSKU."Reorder Point" <> OldSKU."Reorder Point") or
           (NewSKU."Reordering Policy" <> OldSKU."Reordering Policy") or
           (NewSKU."Replenishment System" <> OldSKU."Replenishment System") or
           (NewSKU."Include Inventory" <> OldSKU."Include Inventory")
        then
          AssignOne(NewSKU."Item No.",NewSKU."Variant Code",NewSKU."Location Code",WORKDATE);
    END;

    [External]
    PROCEDURE RoutingReplace@11(VAR Item@1000 : Record Item;OldRoutingNo@1001 : Code[20]);
    BEGIN
      if OldRoutingNo <> Item."Routing No." then
        if Item."Reordering Policy" <> Item."Reordering Policy"::" " then
          AssignPlannedOrders(Item."No.",false);
    END;

    [External]
    PROCEDURE BomReplace@8(VAR Item@1000 : Record Item;OldProductionBOMNo@1001 : Code[20]);
    BEGIN
      if OldProductionBOMNo <> Item."Production BOM No." then begin
        if Item."Reordering Policy" <> Item."Reordering Policy"::" " then
          AssignPlannedOrders(Item."No.",false);
        if OldProductionBOMNo <> '' then
          OldBom(OldProductionBOMNo);
      end;
    END;

    [External]
    PROCEDURE OldBom@2(ProductionBOMNo@1000 : Code[20]);
    VAR
      Item@1001 : Record Item;
      ProductionBOMHeader@1002 : Record "Production BOM Header";
      ProductionBOMVersion@1003 : Record "Production BOM Version";
      ProductionBOMLine@1004 : Record "Production BOM Line";
      UseVersions@1005 : Boolean;
      EndLoop@1006 : Boolean;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMVersion.SETRANGE(Status,ProductionBOMVersion.Status::Certified);
      UseVersions := ProductionBOMVersion.FINDSET;

      if ProductionBOMHeader.GET(ProductionBOMNo) and
         (ProductionBOMHeader.Status = ProductionBOMHeader.Status::Certified)
      then begin
        ProductionBOMVersion."Production BOM No." := ProductionBOMHeader."No.";
        ProductionBOMVersion."Version Code" := '';
      end else
        if not ProductionBOMVersion.FINDSET then
          exit;

      repeat
        ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMVersion."Production BOM No.");
        ProductionBOMLine.SETRANGE("Version Code",ProductionBOMVersion."Version Code");
        if ProductionBOMLine.FINDSET then
          repeat
            if ProductionBOMLine.Type = ProductionBOMLine.Type::Item then begin
              if Item.GET(ProductionBOMLine."No.") then
                if Item."Reordering Policy" <> Item."Reordering Policy"::" " then
                  AssignPlannedOrders(ProductionBOMLine."No.",false);
            end else
              if ProductionBOMLine.Type = ProductionBOMLine.Type::"Production BOM" then
                OldBom(ProductionBOMLine."No.");
          until ProductionBOMLine.NEXT = 0;
        if UseVersions then
          EndLoop := ProductionBOMVersion.NEXT = 0
        else
          EndLoop := true;
      until EndLoop;
    END;

    [External]
    PROCEDURE NewBOM@7(ProductionBOMNo@1000 : Code[20]);
    VAR
      Item@1001 : Record Item;
    BEGIN
      Item.SETCURRENTKEY("Production BOM No.");
      Item.SETRANGE("Production BOM No.",ProductionBOMNo);
      if Item.FINDSET then
        repeat
          if Item."Reordering Policy" <> Item."Reordering Policy"::" " then
            AssignPlannedOrders(Item."No.",false);
        until Item.NEXT = 0;
    END;

    [External]
    PROCEDURE AssignPlannedOrders@4(ItemNo@1000 : Code[20];CheckSKU@1001 : Boolean);
    VAR
      ProdOrderLine@1002 : Record "Prod. Order Line";
      ReqLine@1003 : Record "Requisition Line";
      AssignThis@1004 : Boolean;
    BEGIN
      ProdOrderLine.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code");
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      if ProdOrderLine.FINDSET(true,true) then
        repeat
          if CheckSKU then
            AssignThis := not SKUexists(ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code")
          else
            AssignThis := true;
          if AssignThis then
            AssignOne(ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code",WORKDATE);
          ProdOrderLine.SETRANGE("Variant Code",ProdOrderLine."Variant Code");
          ProdOrderLine.SETRANGE("Location Code",ProdOrderLine."Location Code");
          ProdOrderLine.FINDLAST;
          ProdOrderLine.SETRANGE("Variant Code");
          ProdOrderLine.SETRANGE("Location Code");
        until ProdOrderLine.NEXT = 0;

      ReqLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
      ReqLine.SETRANGE(Type,ReqLine.Type::Item);
      ReqLine.SETRANGE("No.",ItemNo);
      if ReqLine.FINDSET(true,true) then
        repeat
          if CheckSKU then
            AssignThis := not SKUexists(ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code")
          else
            AssignThis := true;
          if AssignThis then
            AssignOne(ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code",WORKDATE);
          ReqLine.SETRANGE("Variant Code",ReqLine."Variant Code");
          ReqLine.SETRANGE("Location Code",ReqLine."Location Code");
          ReqLine.FINDLAST;
          ReqLine.SETRANGE("Variant Code");
          ReqLine.SETRANGE("Location Code");
        until ReqLine.NEXT = 0;
    END;

    [External]
    PROCEDURE AssignOne@6(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];UpdateDate@1003 : Date);
    BEGIN
      LOCKTABLE;
      "Item No." := ItemNo;
      "Variant Code" := VariantCode;
      "Location Code" := LocationCode;
      if FIND then begin
        VALIDATE("Net Change Planning",true);
        if UpdateDate > "Latest Date" then
          "Latest Date" := UpdateDate;
        MODIFY;
      end else begin
        INIT;
        VALIDATE("Net Change Planning",true);
        "Latest Date" := UpdateDate;
        INSERT;
      end
    END;

    [External]
    PROCEDURE ChkAssignOne@1(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];UpdateDate@1003 : Date);
    VAR
      Item@1004 : Record Item;
      SKU@1005 : Record "Stockkeeping Unit";
      ReorderingPolicy@1006 : Option;
    BEGIN
      ReorderingPolicy := Item."Reordering Policy"::" ";

      if SKU.GET(LocationCode,ItemNo,VariantCode) then
        ReorderingPolicy := SKU."Reordering Policy"
      else
        if Item.GET(ItemNo) then
          ReorderingPolicy := Item."Reordering Policy";

      if ReorderingPolicy <> Item."Reordering Policy"::" " then
        AssignOne(ItemNo,VariantCode,LocationCode,UpdateDate);
    END;

    LOCAL PROCEDURE AnnulAllAssignment@5(ItemNo@1000 : Code[20]);
    BEGIN
      SETRANGE("Item No.",ItemNo);
      MODIFYALL("Net Change Planning",false);
    END;

    LOCAL PROCEDURE SKUexists@10(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]) : Boolean;
    VAR
      SKU@1003 : Record "Stockkeeping Unit";
    BEGIN
      SKU.SETRANGE("Item No.",ItemNo);
      SKU.SETRANGE("Variant Code",VariantCode);
      SKU.SETRANGE("Location Code",LocationCode);
      exit(not SKU.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

