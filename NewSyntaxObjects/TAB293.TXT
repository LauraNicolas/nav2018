OBJECT Table 293 Reminder Level
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Reminder Terms Code","No.";
    OnDelete=BEGIN
               AdditionalFeeSetup.SETRANGE("Reminder Terms Code","Reminder Terms Code");
               AdditionalFeeSetup.SETRANGE("Reminder Level No.","No.");
               AdditionalFeeSetup.DELETEALL(true);

               ReminderText.SETRANGE("Reminder Terms Code","Reminder Terms Code");
               ReminderText.SETRANGE("Reminder Level","No.");
               ReminderText.DELETEALL;

               CurrencyForReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
               CurrencyForReminderLevel.SETRANGE("No.","No.");
               CurrencyForReminderLevel.DELETEALL;
             END;

    OnRename=BEGIN
               AdditionalFeeSetup.SETRANGE("Reminder Terms Code",xRec."Reminder Terms Code");
               AdditionalFeeSetup.SETRANGE("Reminder Level No.",xRec."No.");
               while AdditionalFeeSetup.FINDFIRST do
                 AdditionalFeeSetup.RENAME("Reminder Terms Code",
                   "No.",
                   AdditionalFeeSetup."Charge Per Line",
                   AdditionalFeeSetup."Currency Code",
                   AdditionalFeeSetup."Threshold Remaining Amount");

               ReminderText.SETRANGE("Reminder Terms Code",xRec."Reminder Terms Code");
               ReminderText.SETRANGE("Reminder Level",xRec."No.");
               while ReminderText.FINDFIRST do
                 ReminderText.RENAME("Reminder Terms Code","No.",ReminderText.Position,ReminderText."Line No.");

               CurrencyForReminderLevel.SETRANGE("Reminder Terms Code",xRec."Reminder Terms Code");
               CurrencyForReminderLevel.SETRANGE("No.",xRec."No.");
               while CurrencyForReminderLevel.FINDFIRST do
                 CurrencyForReminderLevel.RENAME("Reminder Terms Code","No.",
                   CurrencyForReminderLevel."Currency Code");
             END;

    CaptionML=ENU=Reminder Level;
    LookupPageID="Reminder Levels";
    DrillDownPageID="Reminder Levels";
  }
  FIELDS
  {
    { 1   ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code;
                                                   NotBlank=true }
    { 2   ;   ;No.                 ;Integer       ;CaptionML=ENU=No.;
                                                   MinValue=1;
                                                   NotBlank=true }
    { 3   ;   ;Grace Period        ;DateFormula   ;CaptionML=ENU=Grace Period }
    { 4   ;   ;Additional Fee (LCY);Decimal       ;CaptionML=ENU=Additional Fee (LCY);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 5   ;   ;Calculate Interest  ;Boolean       ;CaptionML=ENU=Calculate Interest }
    { 6   ;   ;Due Date Calculation;DateFormula   ;CaptionML=ENU=Due Date Calculation }
    { 7   ;   ;Add. Fee per Line Amount (LCY);Decimal;
                                                   CaptionML=ENU=Add. Fee per Line Amount (LCY);
                                                   MinValue=0 }
    { 8   ;   ;Add. Fee per Line Description;Text100;
                                                   CaptionML=ENU=Add. Fee per Line Description }
    { 9   ;   ;Add. Fee Calculation Type;Option   ;CaptionML=ENU=Add. Fee Calculation Type;
                                                   OptionCaptionML=ENU=Fixed,Single Dynamic,Accumulated Dynamic;
                                                   OptionString=Fixed,"Single Dynamic","Accumulated Dynamic" }
  }
  KEYS
  {
    {    ;"Reminder Terms Code","No."             ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReminderLevel@1000 : Record "Reminder Level";
      ReminderText@1001 : Record "Reminder Text";
      CurrencyForReminderLevel@1002 : Record "Currency for Reminder Level";
      AdditionalFeeSetup@1003 : Record "Additional Fee Setup";

    [Internal]
    PROCEDURE CalculateAdditionalFixedFee@1002(CurrencyCode@1000 : Code[10];ChargePerLine@1001 : Boolean;PostingDate@1004 : Date) : Decimal;
    VAR
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      FeeAmount@1002 : Decimal;
    BEGIN
      if CurrencyCode = '' then begin
        if ChargePerLine then
          exit("Add. Fee per Line Amount (LCY)");

        exit("Additional Fee (LCY)");
      end;

      CurrencyForReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
      CurrencyForReminderLevel.SETRANGE("No.","No.");
      CurrencyForReminderLevel.SETRANGE("Currency Code",CurrencyCode);
      if CurrencyForReminderLevel.FINDFIRST then begin
        if ChargePerLine then
          exit(CurrencyForReminderLevel."Add. Fee per Line");

        exit(CurrencyForReminderLevel."Additional Fee");
      end;
      if ChargePerLine then
        FeeAmount := "Add. Fee per Line Amount (LCY)"
      else
        FeeAmount := "Additional Fee (LCY)";
      exit(CurrExchRate.ExchangeAmtLCYToFCY(
          PostingDate,CurrencyCode,
          FeeAmount,
          CurrExchRate.ExchangeRate(PostingDate,CurrencyCode)));
    END;

    [External]
    PROCEDURE NewRecord@1();
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
      if ReminderLevel.FINDLAST then
        "No." := ReminderLevel."No.";
      "No." += 1;
    END;

    [Internal]
    PROCEDURE GetAdditionalFee@1000(RemainingAmount@1003 : Decimal;CurrencyCode@1004 : Code[10];ChargePerLine@1005 : Boolean;PostingDate@1007 : Date) : Decimal;
    VAR
      ReminderTerms@1000 : Record "Reminder Terms";
      AdditionalFeeSetup@1002 : Record "Additional Fee Setup";
    BEGIN
      if not ReminderTerms.GET("Reminder Terms Code") then
        exit(0);

      case "Add. Fee Calculation Type" of
        "Add. Fee Calculation Type"::Fixed:
          exit(CalculateAdditionalFixedFee(CurrencyCode,ChargePerLine,PostingDate));
        "Add. Fee Calculation Type"::"Accumulated Dynamic":
          exit(AdditionalFeeSetup.GetAdditionalFeeFromSetup(Rec,RemainingAmount,
              CurrencyCode,ChargePerLine,"Add. Fee Calculation Type"::"Accumulated Dynamic",PostingDate));
        "Add. Fee Calculation Type"::"Single Dynamic":
          exit(AdditionalFeeSetup.GetAdditionalFeeFromSetup(Rec,RemainingAmount,
              CurrencyCode,ChargePerLine,"Add. Fee Calculation Type"::"Single Dynamic",PostingDate));
      end;
    END;

    BEGIN
    END.
  }
}

