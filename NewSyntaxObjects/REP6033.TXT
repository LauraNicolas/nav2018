OBJECT Report 6033 Get Prepaid Contract Entries
{
  OBJECT-PROPERTIES
  {
    Date=20140909D;
    Time=120000T;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Prepaid Contract Entries;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   ContractNo := '';
                 END;

    OnPreReport=BEGIN
                  if ServHeader."No." = '' then
                    ERROR(Text000);
                  ServLine.RESET;
                  ServLine.SETRANGE("Document Type",ServHeader."Document Type");
                  ServLine.SETRANGE("Document No.",ServHeader."No.");
                  if ServLine.FINDLAST then
                    NextLine := ServLine."Line No." + 10000
                  else
                    NextLine := 10000;
                END;

  }
  DATASET
  {
    { 1141;    ;DataItem;Service Ledger Entry;
               DataItemTable="Service Ledger Entry";
               DataItemTableView=SORTING("Service Contract No.","Entry No.","Entry Type",Type,"Moved from Prepaid Acc.","Posting Date",Open,Prepaid) WHERE(Type=CONST("Service Contract"),"Entry Type"=CONST(Sale),"Moved from Prepaid Acc."=CONST(false),Open=CONST(false));
               OnAfterGetRecord=BEGIN
                                  if "Customer No." = ServHeader."Customer No." then begin
                                    if (ContractNo = '') or ((ContractNo <> '') and (ContractNo <> "Service Contract No.")) then begin
                                      ServLine.INIT;
                                      ServLine."Document Type" := ServHeader."Document Type";
                                      ServLine."Document No." := ServHeader."No.";
                                      ServLine."Line No." := NextLine;
                                      ServLine.Description := STRSUBSTNO('%1: %2',ServContract.TABLECAPTION,"Service Contract No.");
                                      ServLine."Customer No." := ServHeader."Customer No.";
                                      ServLine."Contract No." := "Service Contract No.";
                                      ServLine.INSERT;
                                      NextLine := NextLine + 10000;
                                      ContractNo := "Service Contract No."
                                    end;
                                    CLEAR(ServLine);
                                    ServLine.INIT;
                                    ServLine."Document Type" := ServHeader."Document Type";
                                    ServLine."Document No." := ServHeader."No.";
                                    ServLine."Line No." := NextLine;
                                    ServLine.INSERT(true);
                                    ServLine.Type := ServLine.Type::"G/L Account";
                                    ServContractAccGr.GET("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
                                    ServLine.VALIDATE("No.",ServContractAccGr."Prepaid Contract Acc.");
                                    ServLine.VALIDATE(Quantity,1);
                                    ServLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                                    ServLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                                    ServLine."Dimension Set ID" := "Dimension Set ID";
                                    if ServHeader."Currency Code" <> '' then
                                      ServLine.VALIDATE("Unit Price",UnitAmountToFCY(-"Amount (LCY)"))
                                    else
                                      ServLine.VALIDATE("Unit Price",-"Amount (LCY)");
                                    ServLine.VALIDATE("Unit Cost (LCY)","Unit Cost");
                                    ServLine.VALIDATE("Contract No.","Service Contract No.");
                                    ServLine.VALIDATE("Service Item No.","Service Item No. (Serviced)");
                                    ServLine.VALIDATE("Appl.-to Service Entry","Entry No.");
                                    ServLine.MODIFY;
                                    NextLine := NextLine + 10000;
                                  end;
                                END;

               ReqFilterFields="Service Contract No.","Posting Date" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ServHeader@1009 : Record "Service Header";
      ServContractAccGr@1007 : Record "Service Contract Account Group";
      ServLine@1006 : Record "Service Line";
      Currency@1004 : Record Currency;
      ServContract@1005 : Record "Service Contract Header";
      NextLine@1003 : Integer;
      Text000@1010 : TextConst 'ENU=The batch job has not been initialized.';
      ContractNo@1002 : Code[20];

    PROCEDURE Initialize@1(ServHeader2@1000 : Record "Service Header");
    BEGIN
      ServHeader := ServHeader2;

      ServHeader.TESTFIELD("Document Type",ServHeader."Document Type"::"Credit Memo");
      ServHeader.TESTFIELD("No.");
      ServHeader.TESTFIELD("Customer No.");
      ServHeader.TESTFIELD("Bill-to Customer No.");
      GetCurrency;
    END;

    LOCAL PROCEDURE UnitAmountToFCY@8(FCAmount@1000 : Decimal) : Decimal;
    VAR
      CurrExchRate@1001 : Record "Currency Exchange Rate";
    BEGIN
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      exit(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            ServHeader."Posting Date",ServHeader."Currency Code",
            FCAmount,ServHeader."Currency Factor"),
          Currency."Unit-Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      with ServHeader do
        if "Currency Code" = '' then
          Currency.InitRoundingPrecision
        else begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

