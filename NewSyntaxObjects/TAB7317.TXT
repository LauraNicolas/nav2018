OBJECT Table 7317 Warehouse Receipt Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=VAR
               WhseRcptHeader@1000 : Record "Warehouse Receipt Header";
               OrderStatus@1001 : Option;
             BEGIN
               if (Quantity <> "Qty. Outstanding") and ("Qty. Outstanding" <> 0) then
                 if not CONFIRM(Text004,false,TABLECAPTION,"Line No.") then
                   ERROR(Text003);

               WhseRcptHeader.GET("No.");
               OrderStatus := WhseRcptHeader.GetHeaderStatus("Line No.");
               if OrderStatus <> WhseRcptHeader."Document Status" then begin
                 WhseRcptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseRcptHeader.MODIFY;
               end;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Receipt Line;
    LookupPageID="Whse. Receipt Lines";
    DrillDownPageID="Whse. Receipt Lines";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type;
                                                   Editable=false }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=ENU=Source Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString="0","1","2","3","4","5","6","7","8","9","10";
                                                   Editable=false }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No.;
                                                   Editable=false }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No.;
                                                   Editable=false }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=ENU=Source Document;
                                                   OptionCaptionML=ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer;
                                                   OptionString=,"Sales Order",,,"Sales Return Order","Purchase Order",,,"Purchase Return Order","Inbound Transfer";
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record Bin;
                                                                WhseIntegrationMgt@1001 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                if xRec."Bin Code" <> "Bin Code" then
                                                                  if "Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Receipt Line",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                      CheckBin(false);
                                                                    end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if xRec."Zone Code" <> "Zone Code" then begin
                                                                  if "Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "Bin Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No.;
                                                   Editable=false }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                InitOutstandingQtys;
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Receive","Qty. Outstanding");
                                                              END;

                                                   CaptionML=ENU=Qty. Outstanding;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=ENU=Qty. Outstanding (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 21  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit "WMS Management";
                                                              BEGIN
                                                                if "Qty. to Receive" > "Qty. Outstanding" then
                                                                  ERROR(
                                                                    Text002,
                                                                    "Qty. Outstanding");

                                                                GetLocation("Location Code");
                                                                if Location."Directed Put-away and Pick" then begin
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. to Receive",Cubage,Weight);

                                                                  if (CurrFieldNo <> 0) and ("Qty. to Receive" > 0) then
                                                                    CheckBin(true);
                                                                end;

                                                                "Qty. to Cross-Dock" := 0;
                                                                "Qty. to Cross-Dock (Base)" := 0;
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");

                                                                Item.CheckSerialNoQty("Item No.",FIELDCAPTION("Qty. to Receive (Base)"),"Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Receive;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Receive (Base);
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Received       ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Qty. Received");
                                                              END;

                                                   CaptionML=ENU=Qty. Received;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 24  ;   ;Qty. Received (Base);Decimal       ;CaptionML=ENU=Qty. Received (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Unit of Measure Code;
                                                   Editable=false }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code;
                                                   Editable=false }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   Editable=false }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2;
                                                   Editable=false }
    { 34  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Partially Received,Completely Received";
                                                   OptionString=" ","Partially Received","Completely Received";
                                                   Editable=false }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 37  ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 38  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 39  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=ENU=Not upd. by Src. Doc. Post.;
                                                   Editable=false }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=ENU=Posting from Whse. Ref.;
                                                   Editable=false }
    { 50  ;   ;Qty. to Cross-Dock  ;Decimal       ;OnValidate=BEGIN
                                                                CrossDockMgt.GetUseCrossDock(UseCrossDock,"Location Code","Item No.");
                                                                if not UseCrossDock then
                                                                  ERROR(Text006,Item.TABLECAPTION,Location.TABLECAPTION);
                                                                if "Qty. to Cross-Dock" > "Qty. to Receive" then
                                                                  ERROR(
                                                                    Text005,
                                                                    "Qty. to Receive");

                                                                "Qty. to Cross-Dock (Base)" := CalcBaseQty("Qty. to Cross-Dock");
                                                              END;

                                                   CaptionML=ENU=Qty. to Cross-Dock;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 51  ;   ;Qty. to Cross-Dock (Base);Decimal  ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Cross-Dock","Qty. to Cross-Dock (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Cross-Dock (Base);
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                  "Cross-Dock Bin Zone"=CONST(true));
                                                   CaptionML=ENU=Cross-Dock Zone Code }
    { 53  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF ("Cross-Dock Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                        "Cross-Dock Bin"=CONST(true))
                                                                                                                        ELSE IF ("Cross-Dock Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                      "Zone Code"=FIELD("Cross-Dock Zone Code"),
                                                                                                                                                                                      "Cross-Dock Bin"=CONST(true));
                                                   CaptionML=ENU=Cross-Dock Bin Code }
  }
  KEYS
  {
    {    ;"No.","Line No."                        ;SumIndexFields="Qty. to Receive (Base)";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Source Type","Source Subtype","Source No.","Source Line No.";
                                                   SumIndexFields="Qty. Outstanding (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"No.","Source Type","Source Subtype","Source No.","Source Line No.";
                                                   MaintainSQLIndex=false }
    {    ;"No.","Sorting Sequence No."            ;MaintainSQLIndex=false }
    {    ;"No.","Shelf No."                       ;MaintainSQLIndex=false }
    {    ;"No.","Item No."                        ;MaintainSQLIndex=false }
    {    ;"No.","Source Document","Source No."    ;MaintainSQLIndex=false }
    {    ;"No.","Due Date"                        ;MaintainSQLIndex=false }
    {    ;"No.","Bin Code"                        ;MaintainSQLIndex=false }
    {    ;"Item No.","Location Code","Variant Code";
                                                   SumIndexFields="Qty. Outstanding (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Bin Code","Location Code"              ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1002 : Record Location;
      Item@1012 : Record Item;
      Bin@1009 : Record Bin;
      CrossDockMgt@1005 : Codeunit "Whse. Cross-Dock Management";
      UseCrossDock@1006 : Boolean;
      Text001@1022 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1021 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.';
      Text003@1001 : TextConst 'ENU=Cancelled.';
      Text004@1004 : TextConst 'ENU=%1 %2 is not completely received.\Do you really want to delete the %1?';
      Text005@1008 : TextConst 'ENU=You cannot Cross-Dock  more than the %1 units to be received.';
      Text006@1007 : TextConst 'ENU=Cross-Docking is disabled for this %1 and/or %2';
      IgnoreErrors@1003 : Boolean;
      ErrorOccured@1010 : Boolean;

    PROCEDURE InitNewLine@19(DocNo@1000 : Code[20]);
    BEGIN
      RESET;
      "No." := DocNo;
      SETRANGE("No.","No.");
      LOCKTABLE;
      if FINDLAST then;

      INIT;
      SetIgnoreErrors;
      "Line No." := "Line No." + 10000;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE AutofillQtyToReceive@10(VAR WhseReceiptLine@1000 : Record "Warehouse Receipt Line");
    BEGIN
      with WhseReceiptLine do begin
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Receive","Qty. Outstanding");
            MODIFY;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE DeleteQtyToReceive@11(VAR WhseReceiptLine@1000 : Record "Warehouse Receipt Line");
    BEGIN
      with WhseReceiptLine do begin
        if FIND('-') then
          repeat
            VALIDATE("Qty. to Receive",0);
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    [External]
    PROCEDURE GetLineStatus@1() : Integer;
    BEGIN
      if "Qty. Outstanding" = 0 then
        Status := Status::"Completely Received"
      else
        if Quantity = "Qty. Outstanding" then
          Status := Status::" "
        else
          Status := Status::"Partially Received";

      exit(Status);
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      GetLocation(LocationCode);
      if not Location."Bin Mandatory" then
        CLEAR(Bin)
      else
        if (Bin."Location Code" <> LocationCode) or
           (Bin.Code <> BinCode)
        then
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CheckBin@3(CalledFromQtytoReceive@1002 : Boolean);
    VAR
      BinContent@1001 : Record "Bin Content";
      DeductCubage@1006 : Decimal;
      DeductWeight@1005 : Decimal;
    BEGIN
      if CalledFromQtytoReceive then begin
        DeductCubage := xRec.Cubage;
        DeductWeight := xRec.Weight;
      end;

      if BinContent.GET(
           "Location Code","Bin Code",
           "Item No.","Variant Code","Unit of Measure Code")
      then begin
        if not BinContent.CheckIncreaseBinContent(
             "Qty. to Receive",xRec."Qty. to Receive",
             DeductCubage,DeductWeight,Cubage,Weight,false,IgnoreErrors)
        then
          ErrorOccured := true;
      end else begin
        GetBin("Location Code","Bin Code");
        if not Bin.CheckIncreaseBin(
             "Bin Code","Item No.","Qty. to Receive",
             DeductCubage,DeductWeight,Cubage,Weight,false,IgnoreErrors)
        then
          ErrorOccured := true;
      end;
      if ErrorOccured then
        "Bin Code" := '';
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
      SalesLine@1001 : Record "Sales Line";
      TransferLine@1002 : Record "Transfer Line";
      ReservePurchLine@1003 : Codeunit "Purch. Line-Reserve";
      ReserveSalesLine@1004 : Codeunit "Sales Line-Reserve";
      ReserveTransferLine@1005 : Codeunit "Transfer Line-Reserve";
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
      SecondSourceQtyArray[2] := "Qty. to Receive (Base)";
      SecondSourceQtyArray[3] := 0;

      case "Source Type" of
        DATABASE::"Purchase Line":
          begin
            if PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") then
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          end;
        DATABASE::"Sales Line":
          begin
            if SalesLine.GET("Source Subtype","Source No.","Source Line No.") then
              ReserveSalesLine.CallItemTracking2(SalesLine,SecondSourceQtyArray);
          end;
        DATABASE::"Transfer Line":
          begin
            Direction := Direction::Inbound;
            if TransferLine.GET("Source No.","Source Line No.") then
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          end
      end;
    END;

    [External]
    PROCEDURE SetIgnoreErrors@6();
    BEGIN
      IgnoreErrors := true;
    END;

    [External]
    PROCEDURE HasErrorOccured@7() : Boolean;
    BEGIN
      exit(ErrorOccured);
    END;

    [External]
    PROCEDURE InitOutstandingQtys@8();
    BEGIN
      VALIDATE("Qty. Outstanding",Quantity - "Qty. Received");
      "Qty. Outstanding (Base)" := "Qty. (Base)" - "Qty. Received (Base)";
    END;

    [External]
    PROCEDURE GetWhseRcptLine@9(ReceiptNo@1001 : Code[20];SourceType@1002 : Integer;SourceSubType@1003 : Option;SourceNo@1004 : Code[20];SourceLineNo@1005 : Integer);
    BEGIN
      SETRANGE("No.",ReceiptNo);
      SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,false);
      FINDFIRST;
    END;

    [External]
    PROCEDURE SetItemData@29(ItemNo@1000 : Code[20];ItemDescription@1001 : Text[50];ItemDescription2@1006 : Text[50];LocationCode@1002 : Code[10];VariantCode@1003 : Code[10];UoMCode@1005 : Code[10];QtyPerUoM@1004 : Decimal);
    BEGIN
      "Item No." := ItemNo;
      Description := ItemDescription;
      "Description 2" := ItemDescription2;
      "Location Code" := LocationCode;
      "Variant Code" := VariantCode;
      "Unit of Measure Code" := UoMCode;
      "Qty. per Unit of Measure" := QtyPerUoM;
    END;

    [External]
    PROCEDURE SetSource@5(SourceType@1003 : Integer;SourceSubType@1002 : Option;SourceNo@1001 : Code[20];SourceLineNo@1000 : Integer);
    VAR
      WhseMgt@1004 : Codeunit "Whse. Management";
    BEGIN
      "Source Type" := SourceType;
      "Source Subtype" := SourceSubType;
      "Source No." := SourceNo;
      "Source Line No." := SourceLineNo;
      "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
    END;

    [External]
    PROCEDURE SetSourceFilter@42(SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SetKey@1005 : Boolean);
    BEGIN
      if SetKey then
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      SETRANGE("Source Type",SourceType);
      if SourceSubType >= 0 then
        SETRANGE("Source Subtype",SourceSubType);
      SETRANGE("Source No.",SourceNo);
      if SourceLineNo >= 0 then
        SETRANGE("Source Line No.",SourceLineNo);
    END;

    BEGIN
    END.
  }
}

