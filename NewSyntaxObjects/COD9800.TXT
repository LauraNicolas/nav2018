OBJECT Codeunit 9800 Log Table Permissions
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempTablePermissionBuffer@1001 : TEMPORARY Record "Table Permission Buffer";
      EventReceiver@1000 : DotNet "'Microsoft.Dynamics.Nav.EtwListener, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.EtwListener.NavPermissionEventReceiver" WITHEVENTS;

    [External]
    PROCEDURE Start@9();
    BEGIN
      TempTablePermissionBuffer.DELETEALL;
      if ISNULL(EventReceiver) then
        EventReceiver := EventReceiver.NavPermissionEventReceiver(SESSIONID);

      EventReceiver.RegisterForEvents;
    END;

    [External]
    PROCEDURE Stop@12(VAR TempTablePermissionBufferVar@1001 : TEMPORARY Record "Table Permission Buffer");
    BEGIN
      EventReceiver.UnregisterEvents;
      TempTablePermissionBufferVar.COPY(TempTablePermissionBuffer,true)
    END;

    LOCAL PROCEDURE LogUsage@2(TypeOfObject@1004 : Option;ObjectId@1005 : Integer;Permissions@1006 : Integer;PermissionsFromCaller@1000 : Integer);
    BEGIN
      // Note: Do not start any write transactions inside this method and do not make
      // any commits. This code is invoked on permission checks - where there may be
      // no transaction.
      if (ObjectId = DATABASE::"Table Permission Buffer") and
         ((TypeOfObject = TempTablePermissionBuffer."Object Type"::Table) or
          (TypeOfObject = TempTablePermissionBuffer."Object Type"::"Table Data") or
          ((TypeOfObject = TempTablePermissionBuffer."Object Type"::Codeunit) and (ObjectId = CODEUNIT::"Log Table Permissions")))
      then
        exit;

      if not TempTablePermissionBuffer.GET(SESSIONID,TypeOfObject,ObjectId) then begin
        TempTablePermissionBuffer.INIT;
        TempTablePermissionBuffer."Session ID" := SESSIONID;
        TempTablePermissionBuffer."Object Type" := TypeOfObject;
        TempTablePermissionBuffer."Object ID" := ObjectId;
        TempTablePermissionBuffer."Read Permission" := TempTablePermissionBuffer."Read Permission"::" ";
        TempTablePermissionBuffer."Insert Permission" := TempTablePermissionBuffer."Insert Permission"::" ";
        TempTablePermissionBuffer."Modify Permission" := TempTablePermissionBuffer."Modify Permission"::" ";
        TempTablePermissionBuffer."Delete Permission" := TempTablePermissionBuffer."Delete Permission"::" ";
        TempTablePermissionBuffer."Execute Permission" := TempTablePermissionBuffer."Execute Permission"::" ";
        TempTablePermissionBuffer.INSERT;
      end;

      TempTablePermissionBuffer."Object Type" := TypeOfObject;

      case SelectDirectOrIndirect(Permissions,PermissionsFromCaller) of
        1:
          TempTablePermissionBuffer."Read Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Read Permission",TempTablePermissionBuffer."Read Permission"::Yes);
        32:
          TempTablePermissionBuffer."Read Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Read Permission",TempTablePermissionBuffer."Read Permission"::Indirect);
        2:
          TempTablePermissionBuffer."Insert Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Insert Permission",TempTablePermissionBuffer."Insert Permission"::Yes);
        64:
          TempTablePermissionBuffer."Insert Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Insert Permission",TempTablePermissionBuffer."Insert Permission"::Indirect);
        4:
          TempTablePermissionBuffer."Modify Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Modify Permission",TempTablePermissionBuffer."Modify Permission"::Yes);
        128:
          TempTablePermissionBuffer."Modify Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Modify Permission",TempTablePermissionBuffer."Modify Permission"::Indirect);
        8:
          TempTablePermissionBuffer."Delete Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Delete Permission",TempTablePermissionBuffer."Delete Permission"::Yes);
        256:
          TempTablePermissionBuffer."Delete Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Delete Permission",TempTablePermissionBuffer."Delete Permission"::Indirect);
        16:
          TempTablePermissionBuffer."Execute Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Execute Permission",TempTablePermissionBuffer."Execute Permission"::Yes);
        512:
          TempTablePermissionBuffer."Execute Permission" :=
            GetMaxPermission(TempTablePermissionBuffer."Execute Permission",TempTablePermissionBuffer."Execute Permission"::Indirect);
      end;
      TempTablePermissionBuffer.MODIFY;
    END;

    [External]
    PROCEDURE GetMaxPermission@1(CurrentPermission@1000 : Option;NewPermission@1001 : Option) : Integer;
    VAR
      Permission@1002 : Record Permission;
    BEGIN
      if (CurrentPermission = Permission."Read Permission"::Indirect) and (NewPermission = Permission."Read Permission"::Indirect) then
        exit(Permission."Read Permission"::Indirect);
      if CurrentPermission = Permission."Read Permission"::" " then
        exit(NewPermission);
      exit(CurrentPermission);
    END;

    LOCAL PROCEDURE SelectDirectOrIndirect@3(DirectPermission@1000 : Integer;IndirectPermission@1001 : Integer) : Integer;
    BEGIN
      if IndirectPermission = 0 then
        exit(DirectPermission);
      exit(IndirectPermission);
    END;

    EVENT EventReceiver@1000::OnPermissionCheckEvent@9(sender@1001 : Variant;e@1000 : DotNet "'Microsoft.Dynamics.Nav.EtwListener, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.EtwListener.PermissionCheckEventArgs");
    BEGIN
      case e.EventId of
        801:
          LogUsage(e.ObjectType,e.ObjectId,e.Permissions,e.IndirectPermissionsFromCaller);
      end;
    END;

    BEGIN
    END.
  }
}

